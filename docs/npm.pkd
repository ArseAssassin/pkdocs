---
name: npm
slug: npm
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © npm, Inc. and Contributors
  Licensed under the npm License.
  npm is a trademark of npm, Inc.
  https://docs.npmjs.com/
homepage: https://www.npmjs.com/

---
- name: _auth
  id: cli/v10/using-npm/config#_auth
  summary: A basic-auth string to use when authenticating against the npm registry
  belongs_to: config
  description: |-
    #### [`_auth`](#_auth)

    - Default: null
    - Type: null or String

    A basic-auth string to use when authenticating against the npm registry. This will ONLY be used to authenticate against the npm registry. For other registries you will need to scope it like "//other-registry.tld/:\_auth"

    Warning: This should generally not be set via a command-line option. It is safer to use a registry-provided authentication bearer token stored in the ~/.npmrc file by running `npm login`.
- name: About access tokens
  id: about-access-tokens
  summary: 'Note: You must be using npm version 5.5.1 or greater to use access tokens'
  description: "# About access tokens\n\n**Note:** You must be using npm version 5.5.1 or greater to use access tokens.\n\nAn access token is an alternative to using your username and password for authenticating to npm when using the API or the npm command-line interface (CLI). An access token is a hexadecimal string that you can use to authenticate, and which gives you the right to install and/or publish your modules.\n\nThere are two types of access tokens available:\n\n- [Legacy tokens](#about-legacy-tokens)\n- [Granular access tokens](#about-granular-access-tokens)\n\nYou can create access tokens to give other tools (such as continuous integration testing environments) access to your npm packages. For example, GitHub Actions provides the ability to store [secrets](https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets), such as access tokens, that you can then use to authenticate. When your workflow runs, it will be able to complete npm tasks as you, including installing private packages you can access.\n\nYou can work with tokens from the web or the CLI, whichever is easiest. What you do in each environment will be reflected in the other environment.\n\nnpm token commands let you:\n\n- View tokens for easier tracking and management\n- Create new legacy tokens\n- Limit access according to IP address ranges (CIDR)\n- Delete/revoke tokens\n\nFor more information on creating and viewing access tokens on the web and CLI, see \"[Creating and viewing access tokens](creating-and-viewing-access-tokens)\".\n\n## [About legacy tokens](#about-legacy-tokens)\n\nLegacy tokens are created with the same permissions as the user who created them. The npm CLI automatically generates and uses a publish token when you run `npm login`.\n\nThere are three different types of legacy tokens:\n\n- **Read-only**: You can use these tokens to download packages from the registry. These tokens are best for automation and workflows where you are installing packages. For greater security, we recommend using [granular access tokens](#about-granular-access-tokens) instead.\n- **Automation**: You can use these tokens to download packages and install new ones. These tokens are best for automation workflows where you are publishing new packages. Automation tokens do not 2FA for executing operations on npm and are suitable for CI/CD workflows. For greater security, we recommend using [granular access tokens](#about-granular-access-tokens) instead.\n- **Publish**: You can use these tokens to download packages, install packages, and update user and package settings. We recommend using them for interactive workflows such as a CLI. If 2FA is enabled on your account, publish tokens will require 2FA to execute sensitive operations on npm.\n\nLegacy tokens do not have an expiration date. It is important to be aware of your tokens and keep them protected for account security. For more information, see \"[Securing your token](using-private-packages-in-a-ci-cd-workflow#securing-your-token).\"\n\n## [About granular access tokens](#about-granular-access-tokens)\n\nGranular access tokens allow you to restrict access provided to the token based on what you want to use the token for. With granular access tokens, you can:\n\n- Restrict which packages and scopes a token has access to\n- Grant tokens access to specific organizations\n- Set a token expiration date\n- Limit token access based on IP address ranges\n- Select between **read-only** or **read and write** access\n\nYou can create up to 1000 granular access tokens on your npm account. You can set how long your token is valid for, at least one day in the future. Each token can access up to 50 organizations, and up to either 50 packages, 50 scopes, or a combination of 50 packages and scopes. Access tokens are tied to users’ permission; hence it cannot have more permission than the user at any point in time. If a user has their access revoked from a package or an org., their granular access token also will have its access revoked from those packages or org.\n\nWhen you give a token access to an organization, the token can only be used for managing organization settings and teams or users associated with the organization. It does not give the token the right to publish packages managed by the organization.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-access-tokens](https://docs.npmjs.com/about-access-tokens)"
- name: About audit reports
  id: about-audit-reports
  summary: Audit reports contain tables of information about security vulnerabilities in your project's dependencies to help you fix the vulnerability or troubleshoot further
  description: "# About audit reports\n\n# [About audit reports](#about-audit-reports-1)\n\nAudit reports contain tables of information about security vulnerabilities in your project's dependencies to help you fix the vulnerability or troubleshoot further.\n\n## [Vulnerability table fields](#vulnerability-table-fields)\n\n- [Severity](#severity)\n- [Description](#description)\n- [Package](#package)\n- [Patched in](#patched-in)\n- [Dependency of](#dependency-of)\n- [Path](#path)\n- [More info](#more-info)\n\n### [Severity](#severity)\n\nThe severity of the vulnerability, determined by the impact and exploitability of the vulnerability in its most common use case.\n\n| Severity | Recommended action             |\n|:---------|:-------------------------------|\n| Critical | Address immediately            |\n| High     | Address as quickly as possible |\n| Moderate | Address as time allows         |\n| Low      | Address at your discretion     |\n\n#### [Description](#description)\n\nThe description of the vulnerability. For example, \"Denial of service\".\n\n#### [Package](#package)\n\nThe name of the package that contains the vulnerability.\n\n#### [Patched in](#patched-in)\n\nThe semantic version range that describes which versions contain a fix for the vulnerability.\n\n#### [Dependency of](#dependency-of)\n\nThe module that the package with the vulnerability depends on.\n\n#### [Path](#path)\n\nThe path to the code that contains the vulnerability.\n\n#### [More info](#more-info)\n\nA link to the security report.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-audit-reports](https://docs.npmjs.com/about-audit-reports)"
- name: About ECDSA registry signatures
  id: about-registry-signatures
  summary: Packages published to the public npm registry are signed to make it possible to detect if the package content has been tampered with
  description: "# About ECDSA registry signatures\n\nPackages published to the public npm registry are signed to make it possible to detect if the package content has been tampered with.\n\nSigning and verifying published packages protects against an attacker controlling a registry mirror or proxy where they attempt to intercept and tamper with the package tarball content.\n\n## [Migrating from PGP to ECDSA signatures](#migrating-from-pgp-to-ecdsa-signatures)\n\n**Note:** PGP-based registry signatures were deprecated on **April 25th 2023** and replaced by ECDSA registry signatures.\n\nThe public npm registry is migrating away from the existing PGP signatures to ECDSA signatures that are more compact and can be verified without extra dependencies in the npm CLI.\n\nSignature verification was previously a multi-step process involving the Keybase CLI, as well as manually retrieving and parsing the signature from the package metadata.\n\nRead more about [migrating and verifying signatures](verifying-registry-signatures) using the npm CLI.\n\n## [Supporting signatures on third-party registries](#supporting-signatures-on-third-party-registries)\n\nThe npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:\n\n**1. Signatures are provided in the package's `packument` in each published version within the `dist` object:**\n\n``` javascript\n\"dist\":{\n  ..omitted..,\n  \"signatures\": [{\n    \"keyid\": \"SHA256:{{SHA256_PUBLIC_KEY}}\",\n    \"sig\": \"a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809...\"\n  }],\n```\n\nSee this [example of a signed package from the public npm registry](https://registry.npmjs.org/light-cycle/1.4.3).\n\nTo generate the signature, sign the package name, version and tarball sha integrity: `${package.name}@${package.version}:${package.dist.integrity}`.\n\nThe current best practice is to use a [Key Management System](https://en.wikipedia.org/wiki/Key_management#Key_management_system) that does the signing operation on a [Hardware Security Module (HSM)](https://en.wikipedia.org/wiki/Hardware_security_module) in order to not directly handle the private key part, which reduces the attack surface.\n\nThe `keyid` must match one of the public signing keys below.\n\n**2. Public signing keys are provided at `registry-host.tld/-/npm/v1/keys` in the following format:**\n\n``` javascript\n{\n  \"keys\": [{\n    \"expires\": null,\n    \"keyid\": \"SHA256:{{SHA256_PUBLIC_KEY}}\",\n    \"keytype\": \"ecdsa-sha2-nistp256\",\n    \"scheme\": \"ecdsa-sha2-nistp256\",\n    \"key\": \"{{B64_PUBLIC_KEY}}\"\n  }]\n}\n```\n\nKeys response:\n\n- `expires`: null or a simplified extended [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601): `YYYY-MM-DDTHH:mm:ss.sssZ`\n- `keydid`: sha256 fingerprint of the public key\n- `keytype`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI\n- `scheme`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI\n- `key`: base64 encoded public key\n\nSee this [example key's response from the public npm registry](https://registry.npmjs.org/-/npm/v1/keys).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-registry-signatures](https://docs.npmjs.com/about-registry-signatures)"
- name: About npm CLI versions
  id: about-npm-versions
  summary: The npm command line interface (CLI) is released on a regular cadence
  description: "# About npm CLI versions\n\nThe npm command line interface (CLI) is released on a regular cadence. We recommend installing the release that supports your workflow:\n\n- [latest release](#the-latest-release-of-npm): the most recent stable version.\n\n## [The `latest` release of npm](#the-latest-release-of-npm)\n\nThe `latest` release of npm is the most recent stable version. When you install Node.js, npm is automatically installed. However, npm is released more frequently than Node.js, so to install the latest stable version of npm, on the command line, run:\n\n`npm install npm@latest -g`\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-npm-versions](https://docs.npmjs.com/about-npm-versions)"
- name: About organization scopes and packages
  id: about-organization-scopes-and-packages
  summary: Every organization is granted an organization scope, a unique namespace for packages owned by the organization that matches the organization name
  description: "# About organization scopes and packages\n\nEvery organization is granted an organization scope, a unique namespace for packages owned by the organization that matches the organization name. For example, an organization named \"wombat\" would have the scope `@wombat`.\n\nYou can use scopes to:\n\n- Maintain a fork of a package: `@wombat/request`.\n- Avoid name disputes with popular names: `@wombat/web`.\n- Easily find packages in the same namespace\n\nPackages in a scope must follow the same [naming guidelines](https://docs.npmjs.com/cli/v8/configuring-npm/package-json/#name) as unscoped packages.\n\n## [Managing unscoped packages](#managing-unscoped-packages)\n\nWhile you are granted a scope by default when you create an organization, you can also use organizations to manage unscoped packages, or packages under a different scope (such as a user scope).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-organization-scopes-and-packages](https://docs.npmjs.com/about-organization-scopes-and-packages)"
- name: About package README files
  id: about-package-readme-files
  summary: To help others find your packages on npm and have a good experience using your code in their projects, we recommend including a README file in your package directory
  description: "# About package README files\n\nTo help others find your packages on npm and have a good experience using your code in their projects, we recommend including a README file in your package directory. Your README file may include directions for installing, configuring, and using the code in your package, as well as any other information a user may find helpful. The README file will be shown on the package page.\n\nAn npm package README file must be in the root-level directory of the package.\n\n## [Creating and adding a README.md file to a package](#creating-and-adding-a-readmemd-file-to-a-package)\n\n1.  In a text editor, in your package root directory, create a file called `README.md`.\n2.  In the `README.md` file, add useful information about your package.\n3.  Save the `README.md` file.\n\n**Note:** The file extension `.md` indicates a Markdown file. For more information about Markdown, see the GitHub Guide \"[Mastering Markdown](https://guides.github.com/features/mastering-markdown/#what)\".\n\n## [Updating an existing package README file](#updating-an-existing-package-readme-file)\n\nThe README file will only be updated on the package page when you publish a new version of your package. To update your README file:\n\n1.  In a text editor, update the contents of the `README.md` file.\n\n2.  Save the `README.md` file.\n\n3.  On the command line, in the package root directory, run the following commands:\n\n    ``` javascript\n    npm version patch\n    npm publish\n    ```\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-package-readme-files](https://docs.npmjs.com/about-package-readme-files)"
- name: About packages and modules
  id: about-packages-and-modules
  summary: The npm registry contains packages, many of which are also Node modules, or contain Node modules
  description: "# About packages and modules\n\nThe npm registry contains packages, many of which are also Node modules, or contain Node modules. Read on to understand how they differ and how they interact.\n\n## [About packages](#about-packages)\n\nA **package** is a file or directory that is described by a `package.json` file. A package must contain a `package.json` file in order to be published to the npm registry. For more information on creating a `package.json` file, see \"[Creating a package.json file](creating-a-package-json-file)\".\n\nPackages can be unscoped or scoped to a user or organization, and scoped packages can be private or public. For more information, see\n\n- \"[About scopes](about-scopes)\"\n- \"[About private packages](about-private-packages)\"\n- \"[Package scope, access level, and visibility](package-scope-access-level-and-visibility)\"\n\n### [About package formats](#about-package-formats)\n\nA package is any of the following:\n\n- a\\) A folder containing a program described by a `package.json` file.\n- b\\) A gzipped tarball containing (a).\n- c\\) A URL that resolves to (b).\n- d\\) A `<name>@<version>` that is published on the registry with (c).\n- e\\) A `<name>@<tag>` that points to (d).\n- f\\) A `<name>` that has a `latest` tag satisfying (e).\n- g\\) A `git` url that, when cloned, results in (a).\n\n### [npm package git URL formats](#npm-package-git-url-formats)\n\nGit URLs used for npm packages can be formatted in the following ways:\n\n- `git://github.com/user/project.git#commit-ish`\n- `git+ssh://user@hostname:project.git#commit-ish`\n- `git+http://user@hostname/project/blah.git#commit-ish`\n- `git+https://user@hostname/project/blah.git#commit-ish`\n\nThe `commit-ish` can be any tag, sha, or branch that can be supplied as an argument to `git checkout`. The default `commit-ish` is `HEAD`.\n\n## [About modules](#about-modules)\n\nA **module** is any file or directory in the `node_modules` directory that can be loaded by the Node.js `require()` function.\n\nTo be loaded by the Node.js `require()` function, a module must be one of the following:\n\n- A folder with a `package.json` file containing a `\"main\"` field.\n- A JavaScript file.\n\n**Note:** Since modules are not required to have a `package.json` file, not all modules are packages. Only modules that have a `package.json` file are also packages.\n\nIn the context of a Node program, the `module` is also the thing that was loaded *from* a file. For example, in the following program:\n\nvar req = require('request')\n\nwe might say that \"The variable `req` refers to the `request` module\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-packages-and-modules](https://docs.npmjs.com/about-packages-and-modules)"
- name: About private packages
  id: about-private-packages
  summary: With npm private packages, you can use the npm registry to host code that is only visible to you and chosen collaborators, allowing you to manage and use private code alongside public code in your projects
  description: "# About private packages\n\nTo use private packages, you must\n\n- be using npm version 2.7.0 or greater. To upgrade, on the command line, run `npm install npm@latest -g`\n- have a [paid user or organization account](https://www.npmjs.com/pricing)\n\nWith npm private packages, you can use the npm registry to host code that is only visible to you and chosen collaborators, allowing you to manage and use private code alongside public code in your projects.\n\nPrivate packages always have a scope, and scoped packages are private by default.\n\n- **User-scoped private packages** can only be accessed by you and collaborators to whom you have granted read or read/write access. For more information, see \"[Adding collaborators to private packages owned by a user account](adding-collaborators-to-private-packages-owned-by-a-user-account)\".\n- **Organization-scoped private packages** can only be accessed by teams that have been granted read or read/write access. For more information, see \"[Managing team access to organization packages](managing-team-access-to-organization-packages)\".\n\n## [Next steps](#next-steps)\n\n- \"[Creating and publishing private packages](creating-and-publishing-private-packages)\"\n- \"[Using npm packages in your projects](using-npm-packages-in-your-projects)\"\n\n## [Resources](#resources)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-private-packages](https://docs.npmjs.com/about-private-packages)"
- name: About public packages
  id: about-public-packages
  summary: As an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects
  description: "# About public packages\n\nAs an npm user or organization member, you can create and publish public packages that anyone can download and use in their own projects.\n\n- **Unscoped** public packages exist in the global public registry namespace and can be referenced in a `package.json` file with the package name alone: `package-name`.\n- **Scoped** public packages belong to a user or organization and must be preceded by the user or organization name when included as a dependency in a `package.json` file:\n  - `@username/package-name`\n  - `@org-name/package-name`\n\n## [Next steps](#next-steps)\n\n- \"[Creating and publishing scoped public packages](creating-and-publishing-scoped-public-packages)\"\n- \"[Creating and publishing unscoped public packages](creating-and-publishing-unscoped-public-packages)\"\n- \"[Using npm packages in your projects](using-npm-packages-in-your-projects)\"\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-public-packages](https://docs.npmjs.com/about-public-packages)"
- name: About scopes
  id: about-scopes
  summary: 'Note: You must be using npm version 2 or greater to use scopes'
  description: "# About scopes\n\n**Note:** You must be using npm version 2 or greater to use scopes. To upgrade to the latest version of npm, on the command line, run `npm install npm@latest -g`\n\nWhen you sign up for an npm user account or create an organization, you are granted a scope that matches your user or organization name. You can use this scope as a namespace for related packages.\n\nA scope allows you to create a package with the same name as a package created by another user or organization without conflict.\n\nWhen listed as a dependent in a `package.json` file, scoped packages are preceded by their scope name. The scope name is everything between the `@` and the slash:\n\n- **\"npm\" scope:**\n\n`@npm/package-name`\n\n- **\"npmcorp\" scope:**\n\n`@npmcorp/package-name`\n\nTo create and publish public scoped packages, see \"[Creating and publishing scoped public packages](creating-and-publishing-scoped-public-packages)\".\n\nTo create and publish private scoped packages, see \"[Creating and publishing private packages](creating-and-publishing-private-packages)\".\n\n## [Scopes and package visibility](#scopes-and-package-visibility)\n\n- Unscoped packages are always public.\n- [Private packages](about-private-packages) are always scoped.\n- Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.\n\nFor more information on package scope and visibility, see \"[Package scope, access level, and visibility](package-scope-access-level-and-visibility)\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-scopes](https://docs.npmjs.com/about-scopes)"
- name: About semantic versioning
  id: about-semantic-versioning
  summary: To keep the JavaScript ecosystem healthy, reliable, and secure, every time you make significant updates to an npm package you own, we recommend publishing a new version of the package with an updated version number in the package.json file that follows the semantic versioning spec
  description: "# About semantic versioning\n\nTo keep the JavaScript ecosystem healthy, reliable, and secure, every time you make significant updates to an npm package you own, we recommend publishing a new version of the package with an updated version number in the [`package.json` file](creating-a-package-json-file) that follows the [semantic versioning spec](http://semver.org/). Following the semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.\n\n**Note:** If you introduce a change that breaks a package dependency, we strongly recommend incrementing the version **major number**; see below for details.\n\n## [Incrementing semantic versions in published packages](#incrementing-semantic-versions-in-published-packages)\n\nTo help developers who rely on your code, we recommend starting your package version at `1.0.0` and incrementing as follows:\n\n| Code status                               | Stage         | Rule                                                               | Example version |\n|-------------------------------------------|---------------|--------------------------------------------------------------------|-----------------|\n| First release                             | New product   | Start with 1.0.0                                                   | 1.0.0           |\n| Backward compatible bug fixes             | Patch release | Increment the third digit                                          | 1.0.1           |\n| Backward compatible new features          | Minor release | Increment the middle digit and reset last digit to zero            | 1.1.0           |\n| Changes that break backward compatibility | Major release | Increment the first digit and reset middle and last digits to zero | 2.0.0           |\n\n## [Using semantic versioning to specify update types your package can accept](#using-semantic-versioning-to-specify-update-types-your-package-can-accept)\n\nYou can specify which update types your package can accept from dependencies in your package's `package.json` file.\n\nFor example, to specify acceptable version ranges up to 1.0.4, use the following syntax:\n\n- Patch releases: `1.0` or `1.0.x` or `~1.0.4`\n- Minor releases: `1` or `1.x` or `^1.0.4`\n- Major releases: `*` or `x`\n\nFor more information on semantic versioning syntax, see the [npm semver calculator](https://semver.npmjs.com/).\n\n### [Example](#example)\n\n``` javascript\n\"dependencies\": {\n  \"my_dep\": \"^1.0.0\",\n  \"another_dep\": \"~2.2.0\"\n},\n```\n\n## [Resources](#resources)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-semantic-versioning](https://docs.npmjs.com/about-semantic-versioning)"
- name: About the developers team
  id: about-developers-team
  summary: The "developers" team is automatically created when you create an organization
  description: "# About the developers team\n\nThe \"**developers**\" team is automatically created when you create an organization. By default, the developers team has read/write access to all new packages created under the organization's scope.\n\n- Members added to the organization, including the organization owner, are automatically added to the **developers** team\n- The [`maintainers` field](https://docs.npmjs.com/cli/v8/configuring-npm/package-json/#people-fields-author-contributors) in the [`package.json`](https://docs.npmjs.com/cli/v8/configuring-npm/package-json/) of any newly created packages under the organization scope is automatically populated with the members of the current **developers** team\n\nIf you create a new package under your organization's scope and you do not want members of the **developers** team to have read/write access to that package, an owner or admin can remove the **developers** team's access to that package. For more information, see \"[Managing team access to organization packages](managing-team-access-to-organization-packages)\".\n\nIf an owner adds a new member to an organization and **does not** want that member to be on the **developers** team, an owner can remove them.\n\n**Note:** The **developers** team can no longer be removed from an organization for the following reasons:\n\n- It is the source of truth for all users, packages, and default permissions in an organization.\n- When you want to restrict write access, it is almost always better to set the default permissions to read-only and create separate teams for managing write permissions.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-developers-team](https://docs.npmjs.com/about-developers-team)"
- name: About the public npm registry
  id: about-the-public-npm-registry
  summary: The public npm registry is a database of JavaScript packages, each comprised of software and metadata
  description: "# About the public npm registry\n\nThe public npm registry is a database of JavaScript packages, each comprised of software and metadata. Open source developers and developers at companies use the npm registry to contribute packages to the entire community or members of their organizations, and download packages to use in their own projects.\n\nTo get started with the registry, [sign up for an npm account](https://www.npmjs.com/signup) and check out the \"[Getting started](getting-started)\" and [CLI](https://docs.npmjs.com/cli/v8) documentation.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-the-public-npm-registry](https://docs.npmjs.com/about-the-public-npm-registry)"
- name: About two-factor authentication
  id: about-two-factor-authentication
  summary: When you enable 2FA, you will be prompted for a second form of authentication before performing certain actions on your account or packages to which you have write access
  description: "# About two-factor authentication\n\n[Two-factor authentication (2FA)](https://en.wikipedia.org/wiki/Multi-factor_authentication) protects against unauthorized access to your account by confirming your identity using:\n\n- Something you know (e.g., a password).\n- Something you have (e.g., an ID badge or a cryptographic key).\n- Something you are (e.g., a fingerprint or other biometric data).\n\nWhen you enable 2FA, you will be prompted for a second form of authentication before performing certain actions on your account or packages to which you have write access. Depending on your 2FA configuration you will be either prompted to authenticate with a [security-key](https://webauthn.guide/) or a [time-based one-time password (TOTP)](https://en.wikipedia.org/wiki/Time-based_one-time_password).\n\n- The security-key flow allows you to use biometric devices such as Apple [Touch ID](https://support.apple.com/en-gb/HT204587), [Face ID](https://support.apple.com/en-us/HT208108) or [Windows Hello](https://support.microsoft.com/en-us/windows/learn-about-windows-hello-and-set-it-up-dae28983-8242-bb2a-d3d1-87c9d265a5f0) as well as physical keys such as [Yubikey](https://www.yubico.com/), [Thetis](https://thetis.io/) or [Feitian](https://www.ftsafe.com/) as your 2FA.\n- To configure TOTP you will need to install an authenticator application that can generate OTPs such as [Authy](https://authy.com/download/), [Google Authenticator](https://support.google.com/accounts/answer/1066447), or [Microsoft Authenticator](https://www.microsoft.com/security/mobile-authenticator-app) on your mobile device.\n\n**Note:** Two-factor authentication provides the best possible security for your account against attackers. We strongly recommend enabling 2FA on your account as soon as possible after you sign up.\n\n## [Two-factor authentication on npm](#two-factor-authentication-on-npm)\n\nTwo-factor authentication on npm can be enabled for authorization and writes, or authorization only.\n\n### [Authorization and writes](#authorization-and-writes)\n\nBy default, 2FA is enabled for authorization and writes. We will request a second form of authentication for certain authorized actions, as well as write actions.\n\n| Action                                                                                            | CLI command                                                                                      |\n|:--------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------|\n| Log in to npm                                                                                     | [`npm login`](https://docs.npmjs.com/cli/v8/commands/npm-adduser/)                               |\n| Change profile settings (including your password)                                                 | [`npm profile set`](https://docs.npmjs.com/cli/v8/commands/npm-profile/)                         |\n| Change 2FA modes for your user account                                                            | [`npm profile enable-2fa auth-and-writes`](https://docs.npmjs.com/cli/v8/commands/npm-profile/)  |\n| Disable 2FA for your user account                                                                 | [`npm profile disable-2fa`](https://docs.npmjs.com/cli/v8/commands/npm-profile/)                 |\n| Create tokens                                                                                     | [`npm token create`](https://docs.npmjs.com/cli/v8/commands/npm-token/)                          |\n| Revoke tokens                                                                                     | [`npm token revoke`](https://docs.npmjs.com/cli/v8/commands/npm-token/)                          |\n| Publish packages                                                                                  | [`npm publish`](https://docs.npmjs.com/cli/v8/commands/npm-publish/)                             |\n| Unpublish packages                                                                                | [`npm unpublish`](https://docs.npmjs.com/cli/v8/commands/npm-unpublish/)                         |\n| Deprecate packages                                                                                | [`npm deprecate`](https://docs.npmjs.com/cli/v8/commands/npm-deprecate/)                         |\n| Change package visibility                                                                         | [`npm access public/restricted`](https://docs.npmjs.com/cli/v8/commands/npm-access/)             |\n| Change user and team package access                                                               | [`npm access grant/revoke`](https://docs.npmjs.com/cli/v8/commands/npm-access/)                  |\n| [Change package 2FA requirements](requiring-2fa-for-package-publishing-and-settings-modification) | [`npm access 2fa-required/2fa-not-required`](https://docs.npmjs.com/cli/v8/commands/npm-access/) |\n\n### [Authorization only](#authorization-only)\n\nIf you enable 2FA for authorization only. We will request a second form of authentication only for certain authorized actions.\n\n| Action                                            | CLI command                                                                               |\n|:--------------------------------------------------|:------------------------------------------------------------------------------------------|\n| Log in to npm                                     | [`npm login`](https://docs.npmjs.com/cli/v8/commands/npm-adduser/)                        |\n| Change profile settings (including your password) | [`npm profile set`](https://docs.npmjs.com/cli/v8/commands/npm-profile/)                  |\n| Change 2FA modes for your user account            | [`npm profile enable-2fa auth-only`](https://docs.npmjs.com/cli/v8/commands/npm-profile/) |\n| Disable 2FA for your user account                 | [`npm profile disable-2fa`](https://docs.npmjs.com/cli/v8/commands/npm-profile/)          |\n| Create tokens                                     | [`npm token create`](https://docs.npmjs.com/cli/v8/commands/npm-token/)                   |\n| Revoke tokens                                     | [`npm token revoke`](https://docs.npmjs.com/cli/v8/commands/npm-token/)                   |\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/about-two-factor-authentication](https://docs.npmjs.com/about-two-factor-authentication)"
- name: Accepting or rejecting an organization invitation
  id: accepting-or-rejecting-an-organization-invitation
  summary: If you receive an invitation to an organization, you have to accept the invitation over email to be added to the organization
  description: "# Accepting or rejecting an organization invitation\n\n## [Accepting an organization invitation](#accepting-an-organization-invitation)\n\nIf you receive an invitation to an organization, you have to accept the invitation over email to be added to the organization.\n\nYou have the option to use a different email address than the one that received the invitation to join the organization.\n\n1.  Click the verification link in the organization invitation email.\n\n2.  You will be prompted to log into your npm user account. If you don't have an npm user account, you can sign up for one.\n\n## [Rejecting an organization invitation](#rejecting-an-organization-invitation)\n\nIf you are invited to an organization that you do not want to join, you can let the invitation expire. Organization invitations expire after one week.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/accepting-or-rejecting-an-organization-invitation](https://docs.npmjs.com/accepting-or-rejecting-an-organization-invitation)"
- name: access
  id: cli/v10/using-npm/config#access
  summary: If you do not want your scoped package to be publicly viewable (and installable) set --access=restricted
  belongs_to: config
  description: |-
    #### [`access`](#access)

    - Default: 'public' for new packages, existing packages it will not change the current level
    - Type: null, "restricted", or "public"

    If you do not want your scoped package to be publicly viewable (and installable) set `--access=restricted`.

    Unscoped packages can not be set to `restricted`.

    Note: This defaults to not changing the current access level for existing packages. Specifying a value of `restricted` or `public` during publish will change the access for an existing package the same way that `npm access set status` would.
- name: Accessing npm using two-factor authentication
  id: accessing-npm-using-2fa
  summary: On the command line, type the npm login command
  description: "# Accessing npm using two-factor authentication\n\n## [Sign in from the command line using security-key flow](#sign-in-from-the-command-line-using-security-key-flow)\n\n1.  On the command line, type the [`npm login`](https://docs.npmjs.com/cli/v8/commands/npm-adduser/) command.\n\n2.  When prompted, provide your username, password, and email address.\n\n    ``` javascript\n    user@host:~$ npm login\n    npm notice Log in on https://registry.npmjs.org/\n    Username: mona\n    Password:\n    Email: (this IS public) mona@github.com\n    npm notice Open https://www.npmjs.com/login/913c3ab1-89a0-44bd-be8d-d946e2e906f0 to use your security key for authentication or enter OTP from your authenticator app\n    ```\n\n3.  If you have configured a security-key, open the provided URL shown in the command line. Alternatively, if you have configured a mobile authenticator skip to step 6.\n\n4.  Click on *Use security key* and follow the browser specific steps to authenticate.\n\n5.  Copy the generated token\n\n6.  Enter the one-time password into the CLI prompt.\n\n## [Sign in from the command line using `--auth-type=web`](#sign-in-from-the-command-line-using---auth-typeweb)\n\nnpm 8.14.0 and higher support login flow through the browsers. This will become the default behavior for the npm public registry in npm 9.\n\n### [With an existing browser session](#with-an-existing-browser-session)\n\n1.  On the command line, type the [`npm login --auth-type=web`](https://docs.npmjs.com/cli/v8/commands/npm-adduser/) command.\n\n2.  When prompted hit \"ENTER\" to open your browser to start the login flow or click the provided URL show in the command line.\n\n    ``` javascript\n    user@host:~$ npm login\n    npm notice Log in on https://registry.npmjs.org/\n    Authenticate your account at:\n    https://www.npmjs.com/login?next=/login/cli/b1a2f96a-ce09-4463-954c-c99f6773b922\n    Press ENTER to open in the browser...\n    ```\n\n3.  Click on *Use security key* and follow the browser specific steps to authenticate.\n\n    *Note: If you have configured to use TOTP, you will see an TOTP prompt instead*\n\n### [Without an existing browser session](#without-an-existing-browser-session)\n\n1.  On the command line, type the [`npm login --auth-type=web`](https://docs.npmjs.com/cli/v8/commands/npm-adduser/) command.\n\n2.  When prompted hit \"ENTER\" to open your browser to start the login flow or click the provided URL show in the command line.\n\n    ``` javascript\n    user@host:~$ npm login\n    npm notice Log in on https://registry.npmjs.org/\n    Authenticate your account at:\n    https://www.npmjs.com/login?next=/login/cli/b1a2f96a-ce09-4463-954c-c99f6773b922\n    Press ENTER to open in the browser...\n    ```\n\n3.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n4.  Click on *Use security key* and follow the browser specific steps to authenticate.\n\n    *Note: If you have configured to use TOTP, you will see an TOTP prompt instead*\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/accessing-npm-using-2fa](https://docs.npmjs.com/accessing-npm-using-2fa)"
- name: Adding collaborators to private packages owned by a user account
  id: adding-collaborators-to-private-packages-owned-by-a-user-account
  summary: As an npm user with a paid user account, you can add another npm user with a paid account as a collaborator on a private package you own
  description: "# Adding collaborators to private packages owned by a user account\n\nAs an npm user with a paid user account, you can add another npm user with a paid account as a collaborator on a private package you own.\n\n**Note:** The user you want to add as a collaborator on your private package must have a paid user account. To sign up for a paid account, they can visit `https://www.npmjs.com/settings/username/billing`, replacing `username` with their npm username.\n\nWhen you add a member to your package, they are sent an email inviting them to the package. The new member has to accept the invitation to gain access to the package.\n\n## [Granting access to a private user package on the web](#granting-access-to-a-private-user-package-on-the-web)\n\n1.  On the [npm website](https://npmjs.com), go to the package to which you want to add a collaborator: `https://www.npmjs.com/package/<your-package-name>`\n2.  On the package page, under \"Collaborators\", click **+**.\n3.  Enter the npm username of the collaborator.\n4.  Click **Submit**.\n\n## [Granting private package access from the command line interface](#granting-private-package-access-from-the-command-line-interface)\n\nTo add a collaborator to a package on the command line, run the following command, replacing `<user>` with the npm username of your collaborator, and `<your-package-name>` with the name of the private package:\n\n`npm owner add <user> <your-package-name>`\n\n## [Granting access to private organization packages](#granting-access-to-private-organization-packages)\n\nTo grant an npm user access to private organization packages, you must have an organization owner add them to your organization, then add them to a team that has access to the private package. For more information, see \"[Adding members to your organization](adding-members-to-your-organization)\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/adding-collaborators-to-private-packages-owned-by-a-user-account](https://docs.npmjs.com/adding-collaborators-to-private-packages-owned-by-a-user-account)"
- name: Adding dist-tags to packages
  id: adding-dist-tags-to-packages
  summary: Distribution tags (dist-tags) are human-readable labels that you can use to organize and label different versions of packages you publish
  description: "# Adding dist-tags to packages\n\nDistribution tags (dist-tags) are human-readable labels that you can use to organize and label different versions of packages you publish. dist-tags supplement [semantic versioning](about-semantic-versioning). In addition to being more human-readable than semantic version numbering, tags allow publishers to distribute their packages more effectively.\n\nFor more information, see the [`dist-tag` CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-dist-tag/).\n\n**Note:** Since dist-tags share a namespace with semantic versions, avoid dist-tags that conflict with existing version numbers. We recommend avoiding dist-tags that start with a number or the letter \"v\".\n\n## [Publishing a package with a dist-tag](#publishing-a-package-with-a-dist-tag)\n\nBy default, running `npm publish` will tag your package with the `latest` dist-tag. To use another dist-tag, use the `--tag` flag when publishing.\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  Run the following command, replacing `<tag>` with the tag you want to use:\n\n    `npm publish --tag <tag>`\n\n### [Example](#example)\n\nTo publish a package with the \"beta\" dist-tag, on the command line, run the following command in the root directory of your package:\n\n`npm publish --tag beta`\n\n## [Adding a dist-tag to a specific version of your package](#adding-a-dist-tag-to-a-specific-version-of-your-package)\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  Run the following command, replacing `<package_name>` with the name of your package, `<version>` with your package version number, and `<tag>` with the distribution tag:\n\n    `npm dist-tag add <package-name>@<version> [<tag>]`\n\n### [Example](#example-1)\n\nTo add the \"stable\" tag to the 1.4.0 version of the \"example-package\" package, you would run the following command:\n\n`npm dist-tag add example-package@1.4.0 stable`\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/adding-dist-tags-to-packages](https://docs.npmjs.com/adding-dist-tags-to-packages)"
- name: Adding members to your organization
  id: adding-members-to-your-organization
  summary: As an organization owner, you can add other npm users to your organization to give them read or read and write access to public and private packages within your organization's scope, as well as public unscoped packages governed by your organization
  description: "# Adding members to your organization\n\nAs an organization owner, you can add other npm users to your organization to give them read or read and write access to public and private packages within your organization's scope, as well as public unscoped packages governed by your organization.\n\nWhen you add a member to your organization, they are sent an email inviting them to the organization.\n\nOnce the new member [accepts the invitation](accepting-or-rejecting-an-organization-invitation), they are:\n\n- assigned the role of \"[member](organization-roles-and-permissions)\"\n- added to the [\"developers\" team](about-developers-team)\n\nIf you have a [paid organization](upgrading-to-a-paid-organization-plan), as part of an npm Teams plan, you will be billed $7 per month for each new member.\n\n## [Inviting members to your organization](#inviting-members-to-your-organization)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Members**.\n\n5.  Click the **Invite Members** button.\n\n6.  In the \"Username or email\" field, type the username or email address of the person you wish to invite. Optionally you can select a specific team to invite the member to.\n\n7.  Click **Invite**.\n\n## [Revoking an organization invitation](#revoking-an-organization-invitation)\n\nAs an organization owner, if you've made a mistake in inviting someone to your organization, you can revoke the organization invitation.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Members**.\n\n5.  Click the **Invite Members** button.\n\n6.  Under the \"Invitations\" field, click the **X** next to the name of the user invitation you would like to revoke.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/adding-members-to-your-organization](https://docs.npmjs.com/adding-members-to-your-organization)"
- name: Adding organization members to teams
  id: adding-organization-members-to-teams
  summary: As an organization owner or team admin, you can add organization members to teams to give them access to a specific set of packages governed by the organization
  description: "# Adding organization members to teams\n\nAs an organization owner or team admin, you can add organization members to teams to give them access to a specific set of packages governed by the organization.\n\n**Note:** An npm user must be a member of your organization before you can add them to a team. To add a member to your organization, see \"[Adding members to your organization](adding-members-to-your-organization)\".\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  Beside the team you want to add members to, click **Members**.\n\n6.  In the \"Username\" field, type the npm username of the organization member you would like to add to your team.\n\n7.  Click **+ Add User**.\n\n**Note:** organization members are not notified when they are added to a team. We recommend telling the organization member you have added them to a team.\n\n## [Managing teams from the CLI](#managing-teams-from-the-cli)\n\nIf you would like to manage the membership of your team from the command line interface (CLI), you can use:\n\n`npm team`\n\nFor more information, see the [CLI documentation on teams](https://docs.npmjs.com/cli/v8/commands/npm-team/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/adding-organization-members-to-teams](https://docs.npmjs.com/adding-organization-members-to-teams)"
- name: all
  id: cli/v10/using-npm/config#all
  summary: When running npm outdated and npm ls, setting --all will show all outdated or installed packages, rather than only those directly depended upon by the current project
  belongs_to: config
  description: |-
    #### [`all`](#all)

    - Default: false
    - Type: Boolean

    When running `npm outdated` and `npm ls`, setting `--all` will show all outdated or installed packages, rather than only those directly depended upon by the current project.
- name: allow-same-version
  id: cli/v10/using-npm/config#allow-same-version
  summary: Prevents throwing an error when npm version is used to set the new version to the same value as the current version
  belongs_to: config
  description: |-
    #### [`allow-same-version`](#allow-same-version)

    - Default: false
    - Type: Boolean

    Prevents throwing an error when `npm version` is used to set the new version to the same value as the current version.
- name: also
  id: cli/v10/using-npm/config#also
  summary: When set to dev or development, this is an alias for --include=dev
  belongs_to: config
  description: |-
    #### [`also`](#also)

    - Default: null
    - Type: null, "dev", or "development"
    - DEPRECATED: Please use --include=dev instead.

    When set to `dev` or `development`, this is an alias for `--include=dev`.
- name: audit
  id: cli/v10/using-npm/config#audit
  summary: When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes
  belongs_to: config
  description: |-
    #### [`audit`](#audit)

    - Default: true
    - Type: Boolean

    When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](../commands/npm-audit) for details on what is submitted.
- name: audit-level
  id: cli/v10/using-npm/config#audit-level
  summary: The minimum level of vulnerability for npm audit to exit with a non-zero exit code
  belongs_to: config
  description: |-
    #### [`audit-level`](#audit-level)

    - Default: null
    - Type: null, "info", "low", "moderate", "high", "critical", or "none"

    The minimum level of vulnerability for `npm audit` to exit with a non-zero exit code.
- name: Auditing package dependencies for security vulnerabilities
  id: auditing-package-dependencies-for-security-vulnerabilities
  summary: A security audit is an assessment of package dependencies for security vulnerabilities
  description: "# Auditing package dependencies for security vulnerabilities\n\n## [About security audits](#about-security-audits)\n\nA security audit is an assessment of package dependencies for security vulnerabilities. Security audits help you protect your package's users by enabling you to find and fix known vulnerabilities in dependencies that could cause data loss, service outages, unauthorized access to sensitive information, or other issues.\n\n## [Running a security audit with `npm audit`](#running-a-security-audit-with-npm-audit)\n\n**Note:** The `npm audit` command is available in npm@6. To upgrade, run `npm install npm@latest -g`.\n\nThe [`npm audit` command](https://docs.npmjs.com/cli/v8/commands/npm-audit/) submits a description of the dependencies configured in your package to your default registry and asks for a report of known vulnerabilities. `npm audit` checks direct dependencies, devDependencies, bundledDependencies, and optionalDependencies, but does not check peerDependencies.\n\n`npm audit` automatically runs when you install a package with `npm install`. You can also run `npm audit` manually on your [locally installed packages](downloading-and-installing-packages-locally) to conduct a security audit of the package and produce a report of dependency vulnerabilities and, if available, suggested patches.\n\n1.  On the command line, navigate to your package directory by typing `cd path/to/your-package-name` and pressing **Enter**.\n2.  Ensure your package contains `package.json` and `package-lock.json` files.\n3.  Type `npm audit` and press **Enter**.\n4.  Review the audit report and run recommended commands or investigate further if needed.\n\n### [Resolving `EAUDITNOPJSON` and `EAUDITNOLOCK` errors](#resolving-eauditnopjson-and-eauditnolock-errors)\n\n`npm audit` requires packages to have `package.json` and `package-lock.json` files.\n\n- If you get an `EAUDITNOPJSON` error, create a `package.json` file by following the steps in \"[Creating a package.json file](creating-a-package-json-file)\".\n- If you get an `EAUDITNOLOCK` error, make sure your package has a `package.json` file, then create the package lock file by running `npm i --package-lock-only`.\n\n## [Reviewing and acting on the security audit report](#reviewing-and-acting-on-the-security-audit-report)\n\nRunning `npm audit` will produce a report of security vulnerabilities with the affected package name, vulnerability severity and description, path, and other information, and, if available, commands to apply patches to resolve vulnerabilities. For more information on the fields in the audit report, see \"[About audit reports](about-audit-reports)\"\n\n### [Security vulnerabilities found with suggested updates](#security-vulnerabilities-found-with-suggested-updates)\n\nIf security vulnerabilities are found and updates are available, you can either:\n\n- Run the `npm audit fix` subcommand to automatically install compatible updates to vulnerable dependencies.\n- Run the recommended commands individually to install updates to vulnerable dependencies. (Some updates may be semver-breaking changes; for more information, see \"[SEMVER warnings](#semver-warnings)\".)\n\n#### [SEMVER warnings](#semver-warnings)\n\nIf the recommended action is a potential breaking change (semantic version major change), it will be followed by a `SEMVER WARNING` that says \"SEMVER WARNING: Recommended action is a potentially breaking change\". If the package with the vulnerability has changed its API, you may need to make additional changes to your package's code.\n\n### [Security vulnerabilities found requiring manual review](#security-vulnerabilities-found-requiring-manual-review)\n\nIf security vulnerabilities are found, but no patches are available, the audit report will provide information about the vulnerability so you can investigate further.\n\nTo address the vulnerability, you can\n\n- [Check for mitigating factors](#check-for-mitigating-factors)\n- [Update dependent packages if a fix exists](#update-dependent-packages-if-a-fix-exists)\n- [Fix the vulnerability](#fix-the-vulnerability)\n- [Open an issue in the package or dependent package issue tracker](#open-an-issue-in-the-package-or-dependent-package-issue-tracker)\n\n#### [Check for mitigating factors](#check-for-mitigating-factors)\n\nReview the security advisory in the \"More info\" field for mitigating factors that may allow you to continue using the package with the vulnerability in limited cases. For example, the vulnerability may only exist when the code is used on specific operating systems, or when a specific function is called.\n\n#### [Update dependent packages if a fix exists](#update-dependent-packages-if-a-fix-exists)\n\nIf a fix exists but packages that depend on the package with the vulnerability have not been updated to include the fixed version, you may want to open a pull or merge request on the dependent package repository to use the fixed version.\n\n1.  To find the package that must be updated, check the \"Path\" field for the location of the package with the vulnerability, then check for the package that depends on it. For example, if the path to the vulnerability is `@package-name > dependent-package > package-with-vulnerability`, you will need to update `dependent-package`.\n2.  On the [npm public registry](https://npmjs.com), find the dependent package and navigate to its repository. For more information on finding packages, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download)\".\n3.  In the dependent package repository, open a pull or merge request to update the version of the vulnerable package to a version with a fix.\n4.  Once the pull or merge request is merged and the package has been updated in the [npm public registry](https://npmjs.com), update your copy of the package with `npm update`.\n\n#### [Fix the vulnerability](#fix-the-vulnerability)\n\nIf a fix does not exist, you may want to suggest changes that address the vulnerability to the package maintainer in a pull or merge request on the package repository.\n\n1.  Check the \"Path\" field for the location of the vulnerability.\n2.  On the [npm public registry](https://npmjs.com), find the package with the vulnerability. For more information on finding packages, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download)\".\n3.  In the package repository, open a pull or merge request to make the fix on the package repository.\n4.  Once the fix is merged and the package has been updated in the npm public registry, update your copy of the package that depends on the package with the fix.\n\n#### [Open an issue in the package or dependent package issue tracker](#open-an-issue-in-the-package-or-dependent-package-issue-tracker)\n\nIf you do not want to fix the vulnerability or update the dependent package yourself, open an issue in the package or dependent package issue tracker.\n\n1.  On the [npm public registry](https://npmjs.com), find the package with the vulnerability or the dependent package that needs an update. For more information on finding packages, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download)\".\n2.  In the package or dependent package issue tracker, open an issue and include information from the audit report, including the vulnerability report from the \"More info\" field.\n\n### [No security vulnerabilities found](#no-security-vulnerabilities-found)\n\nIf no security vulnerabilities are found, this means that packages with known vulnerabilities were not found in your package dependency tree. Since the advisory database can be updated at any time, we recommend regularly running `npm audit` manually, or adding `npm audit` to your continuous integration process.\n\n## [Turning off `npm audit` on package installation](#turning-off-npm-audit-on-package-installation)\n\n### [Installing a single package](#installing-a-single-package)\n\nTo turn off `npm audit` when installing a single package, use the `--no-audit` flag:\n\n`npm install example-package-name --no-audit`\n\nFor more information, see the [`npm-install` command](https://docs.npmjs.com//cli/v8/commands/npm-install/).\n\n### [Installing all packages](#installing-all-packages)\n\nTo turn off `npm audit` when installing all packages, set the `audit` setting to `false` in your user and global npmrc config files:\n\n`npm set audit false`\n\nFor more information, see the [`npm-config` management command](https://docs.npmjs.com/cli/v8/commands/npm-config/) and the [`npm-config` audit setting](https://docs.npmjs.com/cli/v8/commands/npm-config/#audit).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities](https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities)"
- name: auth-type
  id: cli/v10/using-npm/config#auth-type
  summary: What authentication strategy to use with login
  belongs_to: config
  description: |-
    #### [`auth-type`](#auth-type)

    - Default: "web"
    - Type: "legacy" or "web"

    What authentication strategy to use with `login`. Note that if an `otp` config is given, this value will always be set to `legacy`.
- name: before
  id: cli/v10/using-npm/config#before
  summary: If passed to npm install, will rebuild the npm tree such that only versions that were available on or before the --before time get installed
  belongs_to: config
  description: |-
    #### [`before`](#before)

    - Default: null
    - Type: null or Date

    If passed to `npm install`, will rebuild the npm tree such that only versions that were available **on or before** the `--before` time get installed. If there's no versions available for the current set of direct dependencies, the command will error.

    If the requested version is a `dist-tag` and the given tag does not pass the `--before` filter, the most recent version less than or equal to that tag will be used. For example, `foo@latest` might install `foo@1.2` even though `latest` is `2.0`.
- name: bin
  id: cli/v10/configuring-npm/package-json#bin
  summary: A lot of packages have one or more executable files that they'd like to install into the PATH
  belongs_to: package.json
  description: |-
    ### [bin](#bin)

    A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the "npm" executable.)

    To use this, supply a `bin` field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be either linked inside the global bins directory or a cmd (Windows Command File) will be created which executes the specified file in the `bin` field, so it is available to run by `name` or `name.cmd` (on Windows PowerShell). When this package is installed as a dependency in another package, the file will be linked where it will be available to that package either directly by `npm exec` or by name in other scripts when invoking them via `npm run-script`.

    For example, myapp could have this:

    ``` javascript
    {
      "bin": {
        "myapp": "./cli.js"
      }
    }
    ```

    So, when you install myapp, in case of unix-like OS it'll create a symlink from the `cli.js` script to `/usr/local/bin/myapp` and in case of windows it will create a cmd file usually at `C:\Users\{Username}\AppData\Roaming\npm\myapp.cmd` which runs the `cli.js` script.

    If you have a single executable, and its name should be the name of the package, then you can just supply it as a string. For example:

    ``` javascript
    {
      "name": "my-program",
      "version": "1.2.5",
      "bin": "./path/to/program"
    }
    ```

    would be the same as this:

    ``` javascript
    {
      "name": "my-program",
      "version": "1.2.5",
      "bin": {
        "my-program": "./path/to/program"
      }
    }
    ```

    Please make sure that your file(s) referenced in `bin` starts with `#!/usr/bin/env node`, otherwise the scripts are started without the node executable!

    Note that you can also set the executable files using [directories.bin](#directoriesbin).

    See [folders](folders#executables) for more info on executables.
- name: bin-links
  id: cli/v10/using-npm/config#bin-links
  summary: Tells npm to create symlinks (or .cmd shims on Windows) for package executables
  belongs_to: config
  description: |-
    #### [`bin-links`](#bin-links)

    - Default: true
    - Type: Boolean

    Tells npm to create symlinks (or `.cmd` shims on Windows) for package executables.

    Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.
- name: browser
  id: cli/v10/using-npm/config#browser
  summary: The browser that is called by npm commands to open websites
  belongs_to: config
  description: |-
    #### [`browser`](#browser)

    - Default: OS X: `"open"`, Windows: `"start"`, Others: `"xdg-open"`
    - Type: null, Boolean, or String

    The browser that is called by npm commands to open websites.

    Set to `false` to suppress browser behavior and instead print urls to terminal.

    Set to `true` to use default system URL opener.
- name: browser
  id: cli/v10/configuring-npm/package-json#browser
  summary: If your module is meant to be used client-side the browser field should be used instead of the main field
  belongs_to: package.json
  description: |-
    ### [browser](#browser)

    If your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it might rely on primitives that aren't available in Node.js modules. (e.g. `window`)
- name: bugs
  id: cli/v10/configuring-npm/package-json#bugs
  summary: The url to your project's issue tracker and / or the email address to which issues should be reported
  belongs_to: package.json
  description: |-
    ### [bugs](#bugs)

    The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.

    It should look like this:

    ``` javascript
    {
      "bugs": {
        "url": "https://github.com/owner/project/issues",
        "email": "project@hostname.com"
      }
    }
    ```

    You can specify either one or both values. If you want to provide only a url, you can specify the value for "bugs" as a simple string instead of an object.

    If a url is provided, it will be used by the `npm bugs` command.
- name: bundledependencies
  id: cli/v10/configuring-npm/package-json#bundledependencies
  summary: This defines an array of package names that will be bundled when publishing the package
  belongs_to: package.json
  description: |-
    ### [bundleDependencies](#bundledependencies)

    This defines an array of package names that will be bundled when publishing the package.

    In cases where you need to preserve npm packages locally or have them available through a single file download, you can bundle the packages in a tarball file by specifying the package names in the `bundleDependencies` array and executing `npm pack`.

    For example:

    If we define a package.json like this:

    ``` javascript
    {
      "name": "awesome-web-framework",
      "version": "1.0.0",
      "bundleDependencies": ["renderized", "super-streams"]
    }
    ```

    we can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`. This file contains the dependencies `renderized` and `super-streams` which can be installed in a new project by executing `npm install awesome-web-framework-1.0.0.tgz`. Note that the package names do not include any versions, as that information is specified in `dependencies`.

    If this is spelled `"bundledDependencies"`, then that is also honored.

    Alternatively, `"bundleDependencies"` can be defined as a boolean value. A value of `true` will bundle all dependencies, a value of `false` will bundle none.
- name: ca
  id: cli/v10/using-npm/config#ca
  summary: The Certificate Authority signing certificate that is trusted for SSL connections to the registry
  belongs_to: config
  description: |-
    #### [`ca`](#ca)

    - Default: null
    - Type: null or String (can be set multiple times)

    The Certificate Authority signing certificate that is trusted for SSL connections to the registry. Values should be in PEM format (Windows calls it "Base-64 encoded X.509 (.CER)") with newlines replaced by the string "\n". For example:

    ``` javascript
    ca="-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----"
    ```

    Set to `null` to only allow "known" registrars, or to a specific CA cert to trust only that specific signing authority.

    Multiple CAs can be trusted by specifying an array of certificates:

    ``` javascript
    ca[]="..."
    ca[]="..."
    ```

    See also the `strict-ssl` config.
- name: cache
  id: cli/v10/using-npm/config#cache
  summary: The location of npm's cache directory
  belongs_to: config
  description: |-
    #### [`cache`](#cache)

    - Default: Windows: `%LocalAppData%\npm-cache`, Posix: `~/.npm`
    - Type: Path

    The location of npm's cache directory.
- name: cache-max
  id: cli/v10/using-npm/config#cache-max
  summary: null
  belongs_to: config
  description: |-
    #### [`cache-max`](#cache-max)

    - Default: Infinity
    - Type: Number
    - DEPRECATED: This option has been deprecated in favor of `--prefer-online`

    `--cache-max=0` is an alias for `--prefer-online`
- name: cache-min
  id: cli/v10/using-npm/config#cache-min
  summary: --cache-min=9999 (or bigger) is an alias for --prefer-offline
  belongs_to: config
  description: |-
    #### [`cache-min`](#cache-min)

    - Default: 0
    - Type: Number
    - DEPRECATED: This option has been deprecated in favor of `--prefer-offline`.

    `--cache-min=9999 (or bigger)` is an alias for `--prefer-offline`.
- name: cafile
  id: cli/v10/using-npm/config#cafile
  summary: A path to a file containing one or multiple Certificate Authority signing certificates
  belongs_to: config
  description: |-
    #### [`cafile`](#cafile)

    - Default: null
    - Type: Path

    A path to a file containing one or multiple Certificate Authority signing certificates. Similar to the `ca` setting, but allows for multiple CA's, as well as for the CA information to be stored in a file on disk.
- name: call
  id: cli/v10/using-npm/config#call
  summary: Optional companion option for npm exec, npx that allows for specifying a custom command to be run along with the installed packages
  belongs_to: config
  description: |-
    #### [`call`](#call)

    - Default: ""
    - Type: String

    Optional companion option for `npm exec`, `npx` that allows for specifying a custom command to be run along with the installed packages.

    ``` javascript
    npm exec --package yo --package generator-node --call "yo node"
    ```
- name: cert
  id: cli/v10/using-npm/config#cert
  summary: A client certificate to pass when accessing the registry
  belongs_to: config
  description: |-
    #### [`cert`](#cert)

    - Default: null
    - Type: null or String
    - DEPRECATED: `key` and `cert` are no longer used for most registry operations. Use registry scoped `keyfile` and `certfile` instead. Example: //other-registry.tld/:keyfile=/path/to/key.pem //other-registry.tld/:certfile=/path/to/cert.crt

    A client certificate to pass when accessing the registry. Values should be in PEM format (Windows calls it "Base-64 encoded X.509 (.CER)") with newlines replaced by the string "\n". For example:

    ``` javascript
    cert="-----BEGIN CERTIFICATE-----\nXXXX\nXXXX\n-----END CERTIFICATE-----"
    ```

    It is *not* the path to a certificate file, though you can set a registry-scoped "certfile" path like "//other-registry.tld/:certfile=/path/to/cert.pem".
- name: Changelog
  id: cli/v10/using-npm/changelog
  summary: © npm, Inc
  description: "# Changelog\n\n## [10.2.5](https://github.com/npm/cli/compare/v10.2.4...v10.2.5) [(2023-12-06)](#1025-2023-12-06)\n\n### [Bug Fixes](#bug-fixes)\n\n- [`c7a592c`](https://github.com/npm/cli/commit/c7a592c9c400e73dd27264c11ad6459616023e4c) [\\#7061](https://github.com/npm/cli/pull/7061) dont use cache for update notifier manifest request (@lukekarrys)\n- [`7b952f6`](https://github.com/npm/cli/commit/7b952f64b882bd891fab5c21c7c3b49838c8a995) [\\#7049](https://github.com/npm/cli/pull/7049) unpublish: bubble up all errors parsing local package.json (#7049) (@wraithgar)\n- [`be4741f`](https://github.com/npm/cli/commit/be4741f5bc20239f11842f780047d91fda23935d) [\\#7039](https://github.com/npm/cli/pull/7039) unpublish bugfixes (#7039) (@wraithgar)\n- [`bc7f53d`](https://github.com/npm/cli/commit/bc7f53db793d362d2015d3e55ce121e6b4d3d91f) [\\#7036](https://github.com/npm/cli/pull/7036) reverse direction of SPDX SBOM dependency rels (#7036) (@bdehamer, @antonbauhofer)\n- [`11ec231`](https://github.com/npm/cli/commit/11ec231e895300e5b7292ac16685d37d1d5df3b9) [\\#7033](https://github.com/npm/cli/pull/7033) skip creation of log directory if `logs-max` is set to 0 (#7033) (@JJ)\n- [`6267f54`](https://github.com/npm/cli/commit/6267f543c2ac134c0f8433f8b48659a3949bf210) [\\#7005](https://github.com/npm/cli/pull/7005) properly catch missing url opener error on interactive prompt (#7005) (@wraithgar)\n\n### [Dependencies](#dependencies)\n\n- [`ff1204a`](https://github.com/npm/cli/commit/ff1204aff0651e32679ecd09d0a2a62de49f4eac) [\\#7058](https://github.com/npm/cli/pull/7058) `lru-cache@10.1.0`\n- [`c648020`](https://github.com/npm/cli/commit/c648020cdc0fa0916bc618b6d1191e68dcfc8d73) [\\#7058](https://github.com/npm/cli/pull/7058) `json-parse-even-better-errors@3.0.1`\n- [`53aa8f2`](https://github.com/npm/cli/commit/53aa8f2c110f38a10f98f976cb40f54ea6d95844) [\\#7058](https://github.com/npm/cli/pull/7058) `pacote@17.0.5`\n- [`2e5331c`](https://github.com/npm/cli/commit/2e5331c75df8606b1f92bf61c8612f5e7b0274aa) [\\#7058](https://github.com/npm/cli/pull/7058) `npm-packlist@8.0.1`\n- [`937b7b7`](https://github.com/npm/cli/commit/937b7b7b11ec21fbe373ab93f4e4e170625dd6b1) [\\#7058](https://github.com/npm/cli/pull/7058) `ignore-walk@6.0.4`\n- [`35371c8`](https://github.com/npm/cli/commit/35371c8796a08a269ac3f7017c35e5fcb7ef0968) [\\#7058](https://github.com/npm/cli/pull/7058) `cacache@18.0.1`\n- [workspace](https://github.com/npm/cli/releases/tag/arborist-v7.2.2): `@npmcli/arborist@7.2.2`\n- [workspace](https://github.com/npm/cli/releases/tag/config-v8.0.3): `@npmcli/config@8.0.3`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmaccess-v8.0.2): `libnpmaccess@8.0.2`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmdiff-v6.0.4): `libnpmdiff@6.0.4`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.5): `libnpmexec@7.0.5`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmfund-v5.0.2): `libnpmfund@5.0.2`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmhook-v10.0.1): `libnpmhook@10.0.1`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmorg-v6.0.2): `libnpmorg@6.0.2`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmpack-v6.0.4): `libnpmpack@6.0.4`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmpublish-v9.0.3): `libnpmpublish@9.0.3`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmsearch-v7.0.1): `libnpmsearch@7.0.1`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmteam-v6.0.1): `libnpmteam@6.0.1`\n- [workspace](https://github.com/npm/cli/releases/tag/libnpmversion-v5.0.2): `libnpmversion@5.0.2`\n\n### [Chores](#chores)\n\n- [`f656b66`](https://github.com/npm/cli/commit/f656b669e549286844f2071b9b62cf23f7958034) [\\#7062](https://github.com/npm/cli/pull/7062) `@npmcli/template-oss@4.21.3` (#7062) (@lukekarrys)\n- [`9754b17`](https://github.com/npm/cli/commit/9754b173de26f3173e7f41eab34733fe9ba50f1d) [\\#7051](https://github.com/npm/cli/pull/7051) use global npm for workspace tests (@lukekarrys)\n- [`3891757`](https://github.com/npm/cli/commit/3891757f54d6d960cbf5f0d93d183d6424e8bed6) [\\#7051](https://github.com/npm/cli/pull/7051) `@npmcli/template-oss@4.21.2` (@lukekarrys)\n- [`71f70fa`](https://github.com/npm/cli/commit/71f70fa0e86448b20a63b9eec922ad25971a9377) [\\#7058](https://github.com/npm/cli/pull/7058) `nock@13.4.0` (@wraithgar)\n- [`43674a4`](https://github.com/npm/cli/commit/43674a449816e364265205e56270ad547718069c) [\\#7058](https://github.com/npm/cli/pull/7058) `tap@16.3.9` (@wraithgar)\n- [`4ba585c`](https://github.com/npm/cli/commit/4ba585ce0e1a2ea4591d64d7166b81b7fe92010b) [\\#7040](https://github.com/npm/cli/pull/7040) fix tests for zlib differences between node versions (#7040) (@wraithgar)\n\n## [10.2.4](https://github.com/npm/cli/compare/v10.2.3...v10.2.4) [(2023-11-14)](#1024-2023-11-14)\n\n### [Bug Fixes](#bug-fixes-1)\n\n- [`cd291e7`](https://github.com/npm/cli/commit/cd291e7aa52e56fc45f8245e67c77e0ed3711b07) [\\#6995](https://github.com/npm/cli/pull/6995) refactor search formatting code (#6995) (@wraithgar)\n- [`f3a7380`](https://github.com/npm/cli/commit/f3a7380a45323dbf6c74015e418de3963fb11a69) [\\#6973](https://github.com/npm/cli/pull/6973) look in workspace for exec commands (#6973) (@wraithgar)\n- [`d11496b`](https://github.com/npm/cli/commit/d11496b26dfee5957e7e2a1b328f346b2aca9348) [\\#6977](https://github.com/npm/cli/pull/6977) pkg: properly output in workspace mode (#6977) (@wraithgar)\n- [`0f70088`](https://github.com/npm/cli/commit/0f7008851f1c250405e8dc326f15d535e8fc1eae) [\\#6969](https://github.com/npm/cli/pull/6969) correctly handle object licenses in SBOM generation (#6969) (@jamietanna)\n- [`dce3b08`](https://github.com/npm/cli/commit/dce3b0896ba81b2109fea42ab32edd8a3193324c) [\\#6951](https://github.com/npm/cli/pull/6951) properly catch missing url opener error (#6951) (@wraithgar)\n\n### [Documentation](#documentation)\n\n- [`a38836c`](https://github.com/npm/cli/commit/a38836ce9d703f5012ff4d4a8a4e3b9a9aedc025) [\\#6616](https://github.com/npm/cli/pull/6616) add path usage for view command (#6616) (@RobinKnipe)\n- [`da18e4f`](https://github.com/npm/cli/commit/da18e4f9baa180beeb325a384759a26a19ac2919) [\\#6987](https://github.com/npm/cli/pull/6987) update npm-prune description (#6987) (@Eomm)\n\n### [Dependencies](#dependencies-1)\n\n- [`e9ec2f7`](https://github.com/npm/cli/commit/e9ec2f7005e7326d9a819978b251cf0a05062538) [\\#6994](https://github.com/npm/cli/pull/6994) `lru-cache@10.0.2`\n- [`faf9eff`](https://github.com/npm/cli/commit/faf9efffb7bfe6efde6e53830cb054b34c3a6ea3) [\\#6994](https://github.com/npm/cli/pull/6994) `is-core-module@2.13.1`\n- [`b00e780`](https://github.com/npm/cli/commit/b00e7808e370513e79ca31c261958377984e7444) [\\#6994](https://github.com/npm/cli/pull/6994) `@sigstore/sign@2.2.0`\n- [`4613774`](https://github.com/npm/cli/commit/461377426d998ed79400501b09e1ee67c32bee23) [\\#6994](https://github.com/npm/cli/pull/6994) hoisting newer deps in favor of older ones\n- [`54c4f7b`](https://github.com/npm/cli/commit/54c4f7b8705b2c9d5b8bc5bb846f4e7863735b7e) [\\#6994](https://github.com/npm/cli/pull/6994) `signal-exit@4.1.0`\n- [`8c5882f`](https://github.com/npm/cli/commit/8c5882f3eed305bbd3514d7143f9d92e9577e1b9) [\\#6994](https://github.com/npm/cli/pull/6994) `strip-ansi@7.1.0`\n- [`cd0c649`](https://github.com/npm/cli/commit/cd0c649ec2b421b59012854e61788a11a77194f2) [\\#6994](https://github.com/npm/cli/pull/6994) `ci-info@4.0.0`\n- [`a0a58b7`](https://github.com/npm/cli/commit/a0a58b735c418d8555a06890b63098c68f53106e) [\\#6994](https://github.com/npm/cli/pull/6994) `@sigstore/tuf@2.2.0`\n- [`b3a53c6`](https://github.com/npm/cli/commit/b3a53c6ab5fd933fc7f8258c155ed31be834393e) [\\#6949](https://github.com/npm/cli/pull/6949) `is-cidr@5.0.3` (#6949)\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v8.0.2): `@npmcli/config@8.0.2`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.4): `libnpmexec@7.0.4`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpublish-v9.0.2): `libnpmpublish@9.0.2`\n\n## [10.2.3](https://github.com/npm/cli/compare/v10.2.2...v10.2.3) [(2023-11-02)](#1023-2023-11-02)\n\n### [Dependencies](#dependencies-2)\n\n- [`b5dedf3`](https://github.com/npm/cli/commit/b5dedf39dd772192ed6639926ad4c99ff5dfd28a) [\\#6958](https://github.com/npm/cli/pull/6958) `node-gyp@10.0.1`\n\n## [10.2.2](https://github.com/npm/cli/compare/v10.2.1...v10.2.2) [(2023-10-31)](#1022-2023-10-31)\n\n### [Bug Fixes](#bug-fixes-2)\n\n- [`8ed6d28`](https://github.com/npm/cli/commit/8ed6d28fa14b40d7a05784ad0a1e80661256b466) [\\#6910](https://github.com/npm/cli/pull/6910) make npm link respect --no-save (#6910) (@Santoshraj2)\n- [`eacec5f`](https://github.com/npm/cli/commit/eacec5f49060d3dfcdc3c7043115619e4bb22864) [\\#6941](https://github.com/npm/cli/pull/6941) add back bin/node-gyp-bin/node-gyp files (#6941) (@lukekarrys)\n- [`b776753`](https://github.com/npm/cli/commit/b776753f9cfeab329169105f604bc55ed03bd0e1) [\\#6928](https://github.com/npm/cli/pull/6928) Grammar mistake in authentication error message (#6928) (@Gekuro, gek)\n\n### [Documentation](#documentation-1)\n\n- [`c422a01`](https://github.com/npm/cli/commit/c422a01e1564d25148c821ee257196ebe60e8e6c) [\\#6924](https://github.com/npm/cli/pull/6924) use markdown links instead of html (@lukekarrys)\n- [`dd03aa0`](https://github.com/npm/cli/commit/dd03aa0b9acc535283daf39699de9831202348cb) [\\#6921](https://github.com/npm/cli/pull/6921) add v9 and above for lockfile version 3 (#6921) (@MikeMcC399)\n\n### [Dependencies](#dependencies-3)\n\n- [`dfb6298`](https://github.com/npm/cli/commit/dfb6298c3eb9fb7ef452906765ac5f23ea6fec49) [\\#6937](https://github.com/npm/cli/pull/6937) `node-gyp@10.0.0` (#6937)\n- [Workspace](https://github.com/npm/cli/releases/tag/arborist-v7.2.1): `@npmcli/arborist@7.2.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmdiff-v6.0.3): `libnpmdiff@6.0.3`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.3): `libnpmexec@7.0.3`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmfund-v5.0.1): `libnpmfund@5.0.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpack-v6.0.3): `libnpmpack@6.0.3`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmversion-v5.0.1): `libnpmversion@5.0.1`\n\n## [10.2.1](https://github.com/npm/cli/compare/v10.2.0...v10.2.1) [(2023-10-18)](#1021-2023-10-18)\n\n### [Bug Fixes](#bug-fixes-3)\n\n- [`35c92fe`](https://github.com/npm/cli/commit/35c92fec3d053d303cc8057faa0ff4fe6e7cdc8a) [\\#6902](https://github.com/npm/cli/pull/6902) Add check to pkg command to deal with empty values (#6902) (@NeonArray)\n- [`5b6172f`](https://github.com/npm/cli/commit/5b6172f01c88b73e83a75a508bbdcad92231ead5) [\\#6895](https://github.com/npm/cli/pull/6895) logout from custom registry (@wraithgar)\n- [`8423d4f`](https://github.com/npm/cli/commit/8423d4f133a40c8ceb0e1a75d23aa95fbf4f5b65) [\\#6895](https://github.com/npm/cli/pull/6895) delete auth from proper location on logout (@wraithgar)\n- [`0cfe9de`](https://github.com/npm/cli/commit/0cfe9de1c74b20d3e04ecc26ccf594196d101afe) [\\#6873](https://github.com/npm/cli/pull/6873) audit: spelling error in message (#6873) (@Fdawgs)\n\n### [Documentation](#documentation-2)\n\n- [`5142735`](https://github.com/npm/cli/commit/5142735c462e285a7a7d9bcbd562885c6ef96c96) [\\#6894](https://github.com/npm/cli/pull/6894) update npm build description (#6894) (@siemhesda)\n- [`2e4b4ad`](https://github.com/npm/cli/commit/2e4b4ad8bef158def1b2302846ab294fe7a83de4) [\\#6861](https://github.com/npm/cli/pull/6861) npm publish content modification (#6861) (@jpg619)\n\n### [Dependencies](#dependencies-4)\n\n- [`96e1637`](https://github.com/npm/cli/commit/96e1637117b6614b5ad861d86d828746d5db356c) [\\#6915](https://github.com/npm/cli/pull/6915) `cmd-shim@6.0.2` (#6915)\n- [`b405da1`](https://github.com/npm/cli/commit/b405da1672e05d55bd22e476091891c443bcbeab) [\\#6899](https://github.com/npm/cli/pull/6899) `bin-links@4.0.3`\n- [`ef69d36`](https://github.com/npm/cli/commit/ef69d362fa81640ac3ca60a6e01921c17f7a76cb) [\\#6895](https://github.com/npm/cli/pull/6895) `npm-registry-fetch@16.1.0`\n- [`337c903`](https://github.com/npm/cli/commit/337c9038605b97431e06d2f470229f4370703b13) [\\#6882](https://github.com/npm/cli/pull/6882) `spdx-license-ids@3.0.16`\n- [`e6b0be7`](https://github.com/npm/cli/commit/e6b0be7d3b3cd7f66612f9adb6c4de829335b607) [\\#6882](https://github.com/npm/cli/pull/6882) `socks-proxy-agent@8.0.2`\n- [`ee6892e`](https://github.com/npm/cli/commit/ee6892e69079b07c0a8747d873018819a97e3877) [\\#6882](https://github.com/npm/cli/pull/6882) `readable-stream@4.4.2`\n- [`61c3ee9`](https://github.com/npm/cli/commit/61c3ee9a073528b30676ec66fdd29788ea7be09d) [\\#6882](https://github.com/npm/cli/pull/6882) `minipass@7.0.4`\n- [`14d31fd`](https://github.com/npm/cli/commit/14d31fdcc747f420158d254d0ac258a848bc888c) [\\#6882](https://github.com/npm/cli/pull/6882) `is-core-module@2.13.0`\n- [`03f3d2e`](https://github.com/npm/cli/commit/03f3d2e1d13cd12f23a946cfb9065b8e8fbe129b) [\\#6882](https://github.com/npm/cli/pull/6882) `https-proxy-agent@7.0.2`\n- [`e0163c6`](https://github.com/npm/cli/commit/e0163c6787f3877c3ad6c84d8af44378f7eed23b) [\\#6882](https://github.com/npm/cli/pull/6882) `are-we-there-yet@4.0.1`\n- [`fca804a`](https://github.com/npm/cli/commit/fca804adec57e176bb2a2e60bf84df44e661478f) [\\#6882](https://github.com/npm/cli/pull/6882) `ci-info@3.9.0`\n- [`6af582f`](https://github.com/npm/cli/commit/6af582f23bf046a224d5679e917977f0bb3f95e3) [\\#6882](https://github.com/npm/cli/pull/6882) `npm-install-checks@6.3.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v8.0.1): `@npmcli/config@8.0.1`\n\n## [10.2.0](https://github.com/npm/cli/compare/v10.1.0...v10.2.0) [(2023-10-02)](#1020-2023-10-02)\n\n### [Features](#features)\n\n- [`7c459d2`](https://github.com/npm/cli/commit/7c459d28ca987264028d4d2ca21b0825493c1537) [\\#6801](https://github.com/npm/cli/pull/6801) add npm sbom command (#6801) (@bdehamer)\n- [`81a460f`](https://github.com/npm/cli/commit/81a460f6e6317aca2288d16cda591aa6541540c6) [\\#6732](https://github.com/npm/cli/pull/6732) add package-lock-only mode to npm query (@wraithgar)\n- [`0d29855`](https://github.com/npm/cli/commit/0d2985535c9cc3dfc3e1f355580570c9cce37d61) [\\#6732](https://github.com/npm/cli/pull/6732) add no-package-lock mode to npm audit (@wraithgar)\n\n### [Bug Fixes](#bug-fixes-4)\n\n- [`2207628`](https://github.com/npm/cli/commit/22076286a46499e3d0b3f8564b7ba07008317be4) [\\#6823](https://github.com/npm/cli/pull/6823) use strip-ansi module instead of internal regex (#6823) (@wraithgar)\n- [`d46d052`](https://github.com/npm/cli/commit/d46d0526be12eae2cd458fd08dd5c0a0320cc8bd) [\\#6798](https://github.com/npm/cli/pull/6798) tolerate null bugs URLs (#6798) (@vladh)\n- [`fb1b674`](https://github.com/npm/cli/commit/fb1b6741bd52d865b8f8a93ad3fd6c8afa758b6a) [\\#6758](https://github.com/npm/cli/pull/6758) deprecate: ignore implicit workspace mode (#6758) (@wraithgar)\n\n### [Documentation](#documentation-3)\n\n- [`68031f2`](https://github.com/npm/cli/commit/68031f2ae1cd5d49b0fb263da1a7eae62712ff97) [\\#6844](https://github.com/npm/cli/pull/6844) update `CONTRIBUTING.md` to prevent errors (#6844) (@darcyclarke)\n- [`3ac703c`](https://github.com/npm/cli/commit/3ac703c95e7bb851d0f6145f1d612749ed479fef) [\\#6831](https://github.com/npm/cli/pull/6831) add `include`param to commands that have `omit` param (#6831) (@siemhesda)\n- [`03912db`](https://github.com/npm/cli/commit/03912dbaeb92559270ab3f7df75b507b2f35a119) [\\#6819](https://github.com/npm/cli/pull/6819) add init-specific params to init docs/help (#6819) (@wraithgar)\n- [`8088325`](https://github.com/npm/cli/commit/8088325281bc976e8a8aea4d7527b54f4e25fb5f) [\\#6800](https://github.com/npm/cli/pull/6800) Update npm-doctor.md (#6800) (@siemhesda)\n\n### [Dependencies](#dependencies-5)\n\n- [`aa6728b`](https://github.com/npm/cli/commit/aa6728b1d003f0fc620b074ba0396a3e07f2db6a) [\\#6859](https://github.com/npm/cli/pull/6859) `tar@6.2.0`\n- [`ce9089f`](https://github.com/npm/cli/commit/ce9089f604a01297d3d2dd544283696a6297dce5) [\\#6859](https://github.com/npm/cli/pull/6859) `npm-package-arg@11.0.1`\n- [`39d7f04`](https://github.com/npm/cli/commit/39d7f046f1c39017b398cb242ad07e874484e86c) [\\#6859](https://github.com/npm/cli/pull/6859) `minipass@7.0.4`\n- [`0a47af5`](https://github.com/npm/cli/commit/0a47af509d66071908c7e0bf065dcf2f4c877669) [\\#6859](https://github.com/npm/cli/pull/6859) `hosted-git-info@7.0.1`\n- [`af93130`](https://github.com/npm/cli/commit/af93130fe949f07df23891286c634c77ecf38c53) [\\#6859](https://github.com/npm/cli/pull/6859) `glob@10.3.10`\n- [`3ebc474`](https://github.com/npm/cli/commit/3ebc4744433d906e5c491d183fc077ffe79958cf) [\\#6859](https://github.com/npm/cli/pull/6859) `@npmcli/query@3.0.1`\n- [`284cbfd`](https://github.com/npm/cli/commit/284cbfd168879b9277c9999e8a28dad8f72ecc02) [\\#6858](https://github.com/npm/cli/pull/6858) `@npmcli/agent@2.2.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/arborist-v7.2.0): `@npmcli/arborist@7.2.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v8.0.0): `@npmcli/config@8.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmaccess-v8.0.1): `libnpmaccess@8.0.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmdiff-v6.0.2): `libnpmdiff@6.0.2`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.2): `libnpmexec@7.0.2`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmfund-v5.0.0): `libnpmfund@5.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmorg-v6.0.1): `libnpmorg@6.0.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpack-v6.0.2): `libnpmpack@6.0.2`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpublish-v9.0.1): `libnpmpublish@9.0.1`\n\n## [10.1.0](https://github.com/npm/cli/compare/v10.0.0...v10.1.0) [(2023-09-08)](#1010-2023-09-08)\n\n### [Features](#features-1)\n\n- [`1c93c44`](https://github.com/npm/cli/commit/1c93c4430300e3b3bd2cb5bab327c1732f470bca) [\\#6755](https://github.com/npm/cli/pull/6755) Add `--cpu` and `--os` option to override platform specific install (#6755) (@yukukotani)\n\n### [Bug Fixes](#bug-fixes-5)\n\n- [`7bf2374`](https://github.com/npm/cli/commit/7bf2374a1dde0e9b4a4345eeaafb23316a9a5a0b) [\\#6762](https://github.com/npm/cli/pull/6762) make `$npm_execpath` always point to npm (@rotu)\n\n### [Documentation](#documentation-4)\n\n- [`09d8e0a`](https://github.com/npm/cli/commit/09d8e0a20bd11f53a9fafac1fff4f1ec0b7b379e) [\\#6759](https://github.com/npm/cli/pull/6759) fix versions of node.js in readme (#6759) (@JoaoOtavioS)\n\n### [Dependencies](#dependencies-6)\n\n- [`f76066a`](https://github.com/npm/cli/commit/f76066a047e4a0e819149356b68a1c50fd30f9de) [\\#6771](https://github.com/npm/cli/pull/6771) `@npmcli/agent@2.1.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/arborist-v7.1.0): `@npmcli/arborist@7.1.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v7.2.0): `@npmcli/config@7.2.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmdiff-v6.0.1): `libnpmdiff@6.0.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.1): `libnpmexec@7.0.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmfund-v4.1.1): `libnpmfund@4.1.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpack-v6.0.1): `libnpmpack@6.0.1`\n\n## [10.0.0](https://github.com/npm/cli/compare/v10.0.0-pre.1...v10.0.0) [(2023-08-31)](#1000-2023-08-31)\n\n### [Features](#features-2)\n\n- [`48a7b07`](https://github.com/npm/cli/commit/48a7b077d70cbe5bc808db6aae2c734aa202938a) remove prerelease flags (@lukekarrys)\n\n### [Dependencies](#dependencies-7)\n\n- [Workspace](https://github.com/npm/cli/releases/tag/arborist-v7.0.0): `@npmcli/arborist@7.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v7.1.0): `@npmcli/config@7.1.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmaccess-v8.0.0): `libnpmaccess@8.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmdiff-v6.0.0): `libnpmdiff@6.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.0): `libnpmexec@7.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmfund-v4.1.0): `libnpmfund@4.1.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmhook-v10.0.0): `libnpmhook@10.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmorg-v6.0.0): `libnpmorg@6.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpack-v6.0.0): `libnpmpack@6.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpublish-v9.0.0): `libnpmpublish@9.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmsearch-v7.0.0): `libnpmsearch@7.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmteam-v6.0.0): `libnpmteam@6.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmversion-v5.0.0): `libnpmversion@5.0.0`\n\n## [10.0.0-pre.1](https://github.com/npm/cli/compare/v10.0.0-pre.0...v10.0.0-pre.1) [(2023-08-31)](#1000-pre1-2023-08-31)\n\n### [⚠️ BREAKING CHANGES](#%EF%B8%8F-breaking-changes)\n\n- support for node \\<=16.13 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n- support for node 14 has been removed\n\n### [Bug Fixes](#bug-fixes-6)\n\n- [`b34ee65`](https://github.com/npm/cli/commit/b34ee65ad1c82b53d5b5b28595203e18163fe4df) [\\#6706](https://github.com/npm/cli/pull/6706) set objectMode for search filter stream (@lukekarrys)\n- [`6b251b1`](https://github.com/npm/cli/commit/6b251b1009648b36d49b83a2cc407c348fa225e0) [\\#6706](https://github.com/npm/cli/pull/6706) drop node 16.13.x support (@lukekarrys)\n- [`d857c4a`](https://github.com/npm/cli/commit/d857c4ac7321211848076d148a4bea46af7058fd) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`37a99eb`](https://github.com/npm/cli/commit/37a99eb98b8846ab9481cc4ebd7a7278a8bc89bd) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`ee7292e`](https://github.com/npm/cli/commit/ee7292ed78c362927736471e0584217b2000f493) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`8b0e755`](https://github.com/npm/cli/commit/8b0e755b78098d9c0800e69f0cc2f6a457ce28a6) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`5c8c6cc`](https://github.com/npm/cli/commit/5c8c6ccc0be6e544f6884ecc1189de02450b7dfc) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`d431647`](https://github.com/npm/cli/commit/d4316479a7894290586718e412d7c670316a36f2) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`b6f2205`](https://github.com/npm/cli/commit/b6f220569791d655ab3c423990356cee47ca5218) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`4caedd0`](https://github.com/npm/cli/commit/4caedd0e49641e9f1757f5622e5845b5b49c56c1) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`355bac8`](https://github.com/npm/cli/commit/355bac87eb66b105c9f0c2338ae37fed5f973b66) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`e3a377d`](https://github.com/npm/cli/commit/e3a377d3b047c0436e05096d70cc5697714e413d) [\\#6706](https://github.com/npm/cli/pull/6706) drop node14 support (@lukekarrys)\n- [`f916d33`](https://github.com/npm/cli/commit/f916d333c16b4f0433d8a304e856b73ed4f949cd) [\\#6715](https://github.com/npm/cli/pull/6715) allow searching packages with no description (@lukekarrys)\n\n### [Documentation](#documentation-5)\n\n- [`c736b62`](https://github.com/npm/cli/commit/c736b622b8504b07f5a19f631ade42dd40063269) [\\#6686](https://github.com/npm/cli/pull/6686) add missing bugs key in package-json.md (#6686) (@airscripts)\n- [`c1e01d9`](https://github.com/npm/cli/commit/c1e01d97da3b775edf104de158ee5db5cf027d0d) [\\#6680](https://github.com/npm/cli/pull/6680) Update package-json.md (#6680) (@p-chan, @ljharb)\n\n### [Dependencies](#dependencies-8)\n\n- [`5ab3f7e`](https://github.com/npm/cli/commit/5ab3f7e944b12481cb1164175c7a79d24d5e3ac5) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/git@5.0.3`\n- [`eb41977`](https://github.com/npm/cli/commit/eb41977c56cbac88fa7d02f88dbf630cc652471a) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/run-script@7.0.1`\n- [`f30c9e3`](https://github.com/npm/cli/commit/f30c9e30c2a6d777ea31157a90fddadc81fd11d0) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/git@5.0.2`\n- [`f334466`](https://github.com/npm/cli/commit/f334466c53669e7debd4b9c67eafca74955509ee) [\\#6706](https://github.com/npm/cli/pull/6706) `pacote@17.0.4`\n- [`bb63bf9`](https://github.com/npm/cli/commit/bb63bf945b2db8f3074e7429aff6343721c55cd1) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/run-script@7.0.0`\n- [`75642c6`](https://github.com/npm/cli/commit/75642c6041195e093ef15ee2a42e1fc6a381c572) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/promise-spawn@7.0.0`\n- [`dbb18f4`](https://github.com/npm/cli/commit/dbb18f4778a97915cd8bbb737a807f3db51c4619) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/agent@2.1.0`\n- [`812aa6d`](https://github.com/npm/cli/commit/812aa6d2027ed42453b86b22f4cf8de25f6e0180) [\\#6706](https://github.com/npm/cli/pull/6706) `sigstore@2.1.0`\n- [`7fab9d3`](https://github.com/npm/cli/commit/7fab9d3d2efd71f505658216dc44d802bc3203a6) [\\#6706](https://github.com/npm/cli/pull/6706) `@sigstore/tuf@2.1.0`\n- [`12337cc`](https://github.com/npm/cli/commit/12337cc9d43bae2c5ad75e295b6a4d70e15a39cf) [\\#6706](https://github.com/npm/cli/pull/6706) `which@4.0.0`\n- [`b1ad3ad`](https://github.com/npm/cli/commit/b1ad3ad194d046aa6209a4efad961429b379393c) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-packlist@8.0.0`\n- [`43831d0`](https://github.com/npm/cli/commit/43831d0fe4b02cb18d1c533f2831aaeedf5102e1) [\\#6706](https://github.com/npm/cli/pull/6706) `pacote@17.0.3`\n- [`44e8fec`](https://github.com/npm/cli/commit/44e8fec3f28ce3bdd0500b92cbcf8f211da3c866) [\\#6706](https://github.com/npm/cli/pull/6706) `pacote@17.0.2`\n- [`0d2e2c9`](https://github.com/npm/cli/commit/0d2e2c9d09ff760d8db09774fcd7ad417a88c4c7) [\\#6706](https://github.com/npm/cli/pull/6706) bump sigstore from 1.7.0 to 2.0.0\n- [`dbd5885`](https://github.com/npm/cli/commit/dbd5885364648d3f2fe1c7b672e8aeadcd06edd1) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-profile@9.0.0`\n- [`2ee0fb3`](https://github.com/npm/cli/commit/2ee0fb3ac0c5e49f9eba545d6b05e20be1352414) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-registry-fetch@16.0.0`\n- [`81ff4df`](https://github.com/npm/cli/commit/81ff4dfd17024efb068816c9b0824ffc709a7cc4) [\\#6706](https://github.com/npm/cli/pull/6706) `pacote@17.0.1`\n- [`2b23d44`](https://github.com/npm/cli/commit/2b23d44a9f0f01370d4999853aedecec4f1d8dd3) [\\#6706](https://github.com/npm/cli/pull/6706) hoist `read-package-json@7.0.0`\n- [`325ed05`](https://github.com/npm/cli/commit/325ed05be53b57096727fb962925bf362edf9730) [\\#6706](https://github.com/npm/cli/pull/6706) hoist `normalize-package-data@6.0.0`\n- [`c3a1a02`](https://github.com/npm/cli/commit/c3a1a021780d948a3023b622700b98aabb0df2f4) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/metavuln-calculator@7.0.0`\n- [`f1dd130`](https://github.com/npm/cli/commit/f1dd1305fdcba0b7f5496223b5a65f0fe7e29975) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/git@5.0.1`\n- [`10792ea`](https://github.com/npm/cli/commit/10792ea951a3ef8fc138f82d7b81484006213ce9) [\\#6706](https://github.com/npm/cli/pull/6706) `init-package-json@6.0.0`\n- [`cac0725`](https://github.com/npm/cli/commit/cac07256e7234d0782a4833dae207732c71fef95) [\\#6706](https://github.com/npm/cli/pull/6706) `pacote@17.0.0`\n- [`fd8beaf`](https://github.com/npm/cli/commit/fd8beaf4de23b8fbd9d5b968e10a5034d1a8f7bd) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-pick-manifest@9.0.0`\n- [`65f435e`](https://github.com/npm/cli/commit/65f435ee0a088d6593d8e985c2519cdd783f9a6d) [\\#6706](https://github.com/npm/cli/pull/6706) hoist `lru-cache@10.0.1`\n- [`c784b57`](https://github.com/npm/cli/commit/c784b57b654d25e8d932e6fe415b87e75dcf9026) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-package-arg@11.0.0`\n- [`d6b1790`](https://github.com/npm/cli/commit/d6b1790492d9bc96c196d85d8fc9fd98d62d0087) [\\#6706](https://github.com/npm/cli/pull/6706) `normalize-package-data@6.0.0`\n- [`2f03fb9`](https://github.com/npm/cli/commit/2f03fb9d8f25fd2b047d46edb608eb75f1f36017) [\\#6706](https://github.com/npm/cli/pull/6706) `make-fetch-happen@13.0.0`\n- [`729e893`](https://github.com/npm/cli/commit/729e893cf610de725142f72cc344d1c11f42d7af) [\\#6706](https://github.com/npm/cli/pull/6706) `hosted-git-info@7.0.0`\n- [`7af81c7`](https://github.com/npm/cli/commit/7af81c7360a6df31cdb0a8f18104b42656166378) [\\#6706](https://github.com/npm/cli/pull/6706) `cacache@18.0.0`\n- [`b0849ab`](https://github.com/npm/cli/commit/b0849ab6feb62bf307ee362389bfcaf0e85653be) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/package-json@5.0.0`\n- [`c9587d7`](https://github.com/npm/cli/commit/c9587d79c7c02aff4f53b093bf6702026ecea53a) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/git@5.0.0`\n- [`e28d426`](https://github.com/npm/cli/commit/e28d42674deb791d862e07756bb453190773e6ec) [\\#6706](https://github.com/npm/cli/pull/6706) `minipass-fetch@3.0.4`\n- [`61e9b00`](https://github.com/npm/cli/commit/61e9b00e096ce2e3122f1b21d22f3073ff22f2ce) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/metavuln-calculator@6.0.1`\n- [`2c5542d`](https://github.com/npm/cli/commit/2c5542d29ba207e7c5c4337ac9ad7f296188508a) [\\#6706](https://github.com/npm/cli/pull/6706) `minipass@7.0.3`\n- [`ede7f5e`](https://github.com/npm/cli/commit/ede7f5e74ad4d88559fec2532ddba2facbd7af7f) [\\#6706](https://github.com/npm/cli/pull/6706) `glob@10.3.3`\n- [`4c9eb17`](https://github.com/npm/cli/commit/4c9eb1703bd41555e4ef7c2fc087a349b90c9b4c) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-install-checks@6.2.0`\n- [`88ece81`](https://github.com/npm/cli/commit/88ece8161021997cb5c22040b34d0dffff55fcf1) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-pick-manifest@8.0.2`\n- [`9117a4f`](https://github.com/npm/cli/commit/9117a4fcf05291ce7609bcad5bb810df9a5158e7) [\\#6706](https://github.com/npm/cli/pull/6706) `ssri@10.0.5`\n- [`45f8d6f`](https://github.com/npm/cli/commit/45f8d6f15f82067f27d56357159a7f965b857f5d) [\\#6706](https://github.com/npm/cli/pull/6706) `make-fetch-happen@12.0.0`\n- [`f6f6a18`](https://github.com/npm/cli/commit/f6f6a18120b31626259cdd4da834524a034aa4cb) [\\#6706](https://github.com/npm/cli/pull/6706) `fs-minipass@3.0.3`\n- [`5eea975`](https://github.com/npm/cli/commit/5eea975437ab27d02afa2aaee59b2d4f98831df3) [\\#6706](https://github.com/npm/cli/pull/6706) `cacache@17.1.4`\n- [`ca33c98`](https://github.com/npm/cli/commit/ca33c9840533435bda634adefb61757f30fad5ab) [\\#6706](https://github.com/npm/cli/pull/6706) `@npmcli/metavuln-calculator@6.0.0`\n- [`7be541a`](https://github.com/npm/cli/commit/7be541a7a82cf1fb0de58953605b69c058f7efe0) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-profile@8.0.0`\n- [`edbc25a`](https://github.com/npm/cli/commit/edbc25a5980c34e0d28aac7503475cd33e07f7d2) [\\#6706](https://github.com/npm/cli/pull/6706) `pacote@16.0.0`\n- [`5d0d859`](https://github.com/npm/cli/commit/5d0d8592cbf3b816d9fe44c36d390200ec15e87a) [\\#6706](https://github.com/npm/cli/pull/6706) `npm-registry-fetch@15.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/arborist-v7.0.0-pre.0): `@npmcli/arborist@7.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v7.0.1): `@npmcli/config@7.0.1`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmaccess-v8.0.0-pre.0): `libnpmaccess@8.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmdiff-v6.0.0-pre.0): `libnpmdiff@6.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmexec-v7.0.0-pre.0): `libnpmexec@7.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmfund-v4.0.20): `libnpmfund@4.0.20`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmhook-v10.0.0-pre.0): `libnpmhook@10.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmorg-v6.0.0-pre.0): `libnpmorg@6.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpack-v6.0.0-pre.0): `libnpmpack@6.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpublish-v9.0.0-pre.0): `libnpmpublish@9.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmsearch-v7.0.0-pre.0): `libnpmsearch@7.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmteam-v6.0.0-pre.0): `libnpmteam@6.0.0-pre.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmversion-v5.0.0-pre.0): `libnpmversion@5.0.0-pre.0`\n\n## [10.0.0-pre.0](https://github.com/npm/cli/compare/v9.8.1...v10.0.0-pre.0) [(2023-07-26)](#1000-pre0-2023-07-26)\n\n### [⚠️ BREAKING CHANGES](#%EF%B8%8F-breaking-changes-1)\n\n- the \"ci-name\" config has been removed\n- npm no longer treats missing scripts as a special case in workspace mode. Use `if-present` to ignore missing scripts.\n- npm now supports node `^18.17.0 || >=20.5.0`\n\n### [Features](#features-3)\n\n- [`b6cf113`](https://github.com/npm/cli/commit/b6cf113f5199d3c23f632dbe35d8020515c6c623) [\\#6674](https://github.com/npm/cli/pull/6674) set engines and prerelease for npm 10 (#6674) (@lukekarrys)\n\n### [Bug Fixes](#bug-fixes-7)\n\n- [`e0d3edd`](https://github.com/npm/cli/commit/e0d3edd9908f8303abb9941bdd2f6e9aa31bc9d7) [\\#6641](https://github.com/npm/cli/pull/6641) remove \"ci-name\" config (@wraithgar)\n- [`0318f44`](https://github.com/npm/cli/commit/0318f442fe6c18275607a5d574c383f085484e6e) [\\#6641](https://github.com/npm/cli/pull/6641) remove implicit if-present logic from run-script workspaces (@wraithgar)\n\n### [Documentation](#documentation-6)\n\n- [`e5338af`](https://github.com/npm/cli/commit/e5338af3ca5d1aea78348f4894481eef3b1f7354) [\\#6672](https://github.com/npm/cli/pull/6672) remove link to deprecated `npm set-script` command (#6672) (@emmanuel-ferdman)\n\n### [Dependencies](#dependencies-9)\n\n- [Workspace](https://github.com/npm/cli/releases/tag/config-v7.0.0): `@npmcli/config@7.0.0`\n- [Workspace](https://github.com/npm/cli/releases/tag/libnpmpublish-v8.0.0): `libnpmpublish@8.0.0`\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/changelog](https://docs.npmjs.com/cli/v10/using-npm/changelog)"
- name: Changing package visibility
  id: changing-package-visibility
  summary: You can change the visibility of a scoped package from the website or command line
  description: "# Changing package visibility\n\nYou can change the visibility of a scoped package from the website or command line.\n\nYou must be the owner of the user account or organization that owns the package in order to change package visibility.\n\nFor more information about package visibility, see \"[Package scope, access level, and visibility](package-scope-access-level-and-visibility)\".\n\n**Note:** You cannot change the visibility of an unscoped package. Only scoped packages with a paid subscription may be private.\n\n## [Making a public package private](#making-a-public-package-private)\n\n**Note:** Making a package private requires a paid user account or organization. To sign up for a paid user or organization, go to `https://www.npmjs.com/settings/account-name/billing`, replacing `account-name` with the name of your npm user account or organization.\n\nIf you want to restrict access and visibility for a public package you own, you can make the package private. When you make a package private, its access will be updated immediately and it will be removed from the website within a few minutes of the change.\n\n### [Using the website](#using-the-website)\n\n1.  On the [npm website](https://npmjs.com), go to the package page.\n2.  On the package page, click **Settings**.\n3.  Under \"Package Access\", select \"Is Package Private?\"\n4.  Click **Update package settings**.\n\n### [Using the command line](#using-the-command-line)\n\nTo make a public package private on the command line, run the following command, replacing `<package-name>` with the name of your package:\n\n`npm access restricted <package-name>`\n\nFor more information, see the [`npm access`](https://docs.npmjs.com/cli/v8/access) documentation.\n\n## [Making a private package public](#making-a-private-package-public)\n\n**Note:** When you make a private package public, the package will be visible to and downloadable by all npm users.\n\n### [Using the website](#using-the-website-1)\n\n1.  On the npm website, go to the package page.\n2.  On the package page, click **Settings**.\n3.  Under \"Package Access\", deselect \"Is Package Private?\"\n4.  Click **Update package settings**.\n\n### [Using the command line](#using-the-command-line-1)\n\nTo make a private package public on the command line, run the following command, replacing `<package-name>` with the name of your package:\n\n`npm access public <package-name>`\n\nFor more information, see the [`npm access` CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-access/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/changing-package-visibility](https://docs.npmjs.com/changing-package-visibility)"
- name: Changing your npm username
  id: changing-your-npm-username
  summary: It is not currently possible to change your npm username
  description: "# Changing your npm username\n\nIt is not currently possible to change your npm username. You'll need to create a new account and migrate the data to the new account manually.\n\n1.  Create a [new user account](creating-a-new-npm-user-account) with your desired username\n2.  [Transfer your packages](transferring-a-package-from-a-user-account-to-another-user-account) to your new account.\n3.  If you are a member of any [organizations](organizations), ask the organization administrator to [invite your new account to the organization](adding-members-to-your-organization).\n4.  Delete your [original account](deleting-your-npm-user-account). Note that this is permanent, and after 30 days, this account name is available for other people to claim.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/changing-your-npm-username](https://docs.npmjs.com/changing-your-npm-username)"
- name: cidr
  id: cli/v10/using-npm/config#cidr
  summary: This is a list of CIDR address to be used when configuring limited access tokens with the npm token create command
  belongs_to: config
  description: |-
    #### [`cidr`](#cidr)

    - Default: null
    - Type: null or String (can be set multiple times)

    This is a list of CIDR address to be used when configuring limited access tokens with the `npm token create` command.
- name: CLI Commands
  id: cli/v10/commands
  summary: © npm, Inc
  description: "# CLI Commands\n\n- [npm](commands/npm)\n  JavaScript package manager\n- [npm access](commands/npm-access)\n  Set access level on published packages\n- [npm adduser](commands/npm-adduser)\n  Add a registry user account\n- [npm audit](commands/npm-audit)\n  Run a security audit\n- [npm bugs](commands/npm-bugs)\n  Bugs for a package in a web browser maybe\n- [npm cache](commands/npm-cache)\n  Manipulates packages cache\n- [npm ci](commands/npm-ci)\n  Install a project with a clean slate\n- [npm completion](commands/npm-completion)\n  Tab completion for npm\n- [npm config](commands/npm-config)\n  Manage the npm configuration files\n- [npm dedupe](commands/npm-dedupe)\n  Reduce duplication\n- [npm deprecate](commands/npm-deprecate)\n  Deprecate a version of a package\n- [npm diff](commands/npm-diff)\n  The registry diff command\n- [npm dist-tag](commands/npm-dist-tag)\n  Modify package distribution tags\n- [npm docs](commands/npm-docs)\n  Docs for a package in a web browser maybe\n- [npm doctor](commands/npm-doctor)\n  Check your environments\n- [npm edit](commands/npm-edit)\n  Edit an installed package\n- [npm exec](commands/npm-exec)\n  Run a command from an npm package\n- [npm explain](commands/npm-explain)\n  Explain installed packages\n- [npm explore](commands/npm-explore)\n  Browse an installed package\n- [npm find-dupes](commands/npm-find-dupes)\n  Find duplication in the package tree\n- [npm fund](commands/npm-fund)\n  Retrieve funding information\n- [npm help](commands/npm-help)\n  Search npm help documentation\n- [npm help-search](commands/npm-help-search)\n  Get help on npm\n- [npm hook](commands/npm-hook)\n  Manage registry hooks\n- [npm init](commands/npm-init)\n  Create a package.json file\n- [npm install](commands/npm-install)\n  Install a package\n- [npm install-ci-test](commands/npm-install-ci-test)\n  Install a project with a clean slate and run tests\n- [npm install-test](commands/npm-install-test)\n  Install package(s) and run tests\n- [npm link](commands/npm-link)\n  Symlink a package folder\n- [npm login](commands/npm-login)\n  Login to a registry user account\n- [npm logout](commands/npm-logout)\n  Log out of the registry\n- [npm ls](commands/npm-ls)\n  List installed packages\n- [npm org](commands/npm-org)\n  Manage orgs\n- [npm outdated](commands/npm-outdated)\n  Check for outdated packages\n- [npm owner](commands/npm-owner)\n  Manage package owners\n- [npm pack](commands/npm-pack)\n  Create a tarball from a package\n- [npm ping](commands/npm-ping)\n  Ping npm registry\n- [npm pkg](commands/npm-pkg)\n  Manages your package.json\n- [npm prefix](commands/npm-prefix)\n  Display prefix\n- [npm profile](commands/npm-profile)\n  Change settings on your registry profile\n- [npm prune](commands/npm-prune)\n  Remove extraneous packages\n- [npm publish](commands/npm-publish)\n  Publish a package\n- [npm query](commands/npm-query)\n  Retrieve a filtered list of packages\n- [npm rebuild](commands/npm-rebuild)\n  Rebuild a package\n- [npm repo](commands/npm-repo)\n  Open package repository page in the browser\n- [npm restart](commands/npm-restart)\n  Restart a package\n- [npm root](commands/npm-root)\n  Display npm root\n- [npm run-script](commands/npm-run-script)\n  Run arbitrary package scripts\n- [npm sbom](commands/npm-sbom)\n  Generate a Software Bill of Materials (SBOM)\n- [npm search](commands/npm-search)\n  Search for packages\n- [npm shrinkwrap](commands/npm-shrinkwrap)\n  Lock down dependency versions for publication\n- [npm star](commands/npm-star)\n  Mark your favorite packages\n- [npm stars](commands/npm-stars)\n  View packages marked as favorites\n- [npm start](commands/npm-start)\n  Start a package\n- [npm stop](commands/npm-stop)\n  Stop a package\n- [npm team](commands/npm-team)\n  Manage organization teams and team memberships\n- [npm test](commands/npm-test)\n  Test a package\n- [npm token](commands/npm-token)\n  Manage your authentication tokens\n- [npm uninstall](commands/npm-uninstall)\n  Remove a package\n- [npm unpublish](commands/npm-unpublish)\n  Remove a package from the registry\n- [npm unstar](commands/npm-unstar)\n  Remove an item from your favorite packages\n- [npm update](commands/npm-update)\n  Update a package\n- [npm version](commands/npm-version)\n  Bump a package version\n- [npm view](commands/npm-view)\n  View registry info\n- [npm whoami](commands/npm-whoami)\n  Display npm username\n- [npx](commands/npx)\n  Run a command from an npm package\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands](https://docs.npmjs.com/cli/v10/commands)"
- name: color
  id: cli/v10/using-npm/config#color
  summary: If false, never shows colors
  belongs_to: config
  description: |-
    #### [`color`](#color)

    - Default: true unless the NO_COLOR environ is set to something other than '0'
    - Type: "always" or Boolean

    If false, never shows colors. If `"always"` then always shows colors. If true, then only prints color codes for tty file descriptors.
- name: command-line-flags
  id: cli/v10/using-npm/config#command-line-flags
  summary: Putting --foo bar on the command line sets the foo configuration parameter to "bar". A -- argument tells the cli parser to stop reading flags
  belongs_to: config
  description: |-
    #### [Command Line Flags](#command-line-flags)

    Putting `--foo bar` on the command line sets the `foo` configuration parameter to `"bar"`. A `--` argument tells the cli parser to stop reading flags. Using `--flag` without specifying any value will set the value to `true`.

    Example: `--flag1 --flag2` will set both configuration parameters to `true`, while `--flag1 --flag2 bar` will set `flag1` to `true`, and `flag2` to `bar`. Finally, `--flag1 --flag2 -- bar` will set both configuration parameters to `true`, and the `bar` is taken as a command argument.
- name: commit-hooks
  id: cli/v10/using-npm/config#commit-hooks
  summary: Run git commit hooks when using the npm version command
  belongs_to: config
  description: |-
    #### [`commit-hooks`](#commit-hooks)

    - Default: true
    - Type: Boolean

    Run git commit hooks when using the `npm version` command.
- name: Common errors
  id: common-errors
  summary: You have an outdated npm
  description: "# Common errors\n\n## [Errors](#errors)\n\n- [Broken npm installation](#broken-npm-installation)\n- [Random errors](#random-errors)\n- [No compatible version found](#no-compatible-version-found)\n- [Permissions errors](#permissions-errors)\n- [`Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'` on Windows 7](#error-enoent-stat-cusersuserappdataroamingnpm-on-windows-7)\n- [No space](#no-space)\n- [No git](#no-git)\n- [Running a Vagrant box on Windows fails due to path length issues](#running-a-vagrant-box-on-windows-fails-due-to-path-length-issues)\n- [npm only uses `git:` and `ssh+git:` URLs for GitHub repos, breaking proxies](#npm-only-uses-git-and-sshgit-urls-for-github-repos-breaking-proxies)\n- [SSL error](#ssl-error)\n- [SSL-intercepting proxy](#ssl-intercepting-proxy)\n- [Not found / Server error](#not-found--server-error)\n- [Invalid JSON](#invalid-json)\n- [Many `ENOENT` / `ENOTEMPTY` errors in output](#many-enoent--enotempty-errors-in-output)\n- [`cb() never called!` when using shrinkwrapped dependencies](#cb-never-called-when-using-shrinkwrapped-dependencies)\n- [npm login errors](#npm-login-errors)\n- [`npm` hangs on Windows at `addRemoteTarball`](#npm-hangs-on-windows-at-addremotetarball)\n- [npm not running the latest version on a Windows machine](#npm-not-running-the-latest-version-on-a-windows-machine)\n\n## [Broken npm installation](#broken-npm-installation)\n\nIf your npm is broken:\n\n- On Mac or Linux, [reinstall npm](downloading-and-installing-node-js-and-npm).\n- Windows: If you're on Windows and you have a broken installation, the easiest thing to do is to reinstall node from the official installer (see [this note about installing the latest stable version](try-the-latest-stable-version-of-npm#upgrading-on-windows)).\n\n## [Random errors](#random-errors)\n\n- Some strange issues can be resolved by simply running `npm cache clean` and trying again.\n- If you are having trouble with `npm install`, use the `-verbose` option to see more details.\n\n## [No compatible version found](#no-compatible-version-found)\n\nYou have an outdated npm. [Please update to the latest stable npm](try-the-latest-stable-version-of-npm).\n\n## [Permissions errors](#permissions-errors)\n\nPlease see the discussions in \"[Downloading and installing Node.js and npm](downloading-and-installing-node-js-and-npm)\" and \"[Resolving EACCES permissions errors when installing packages globally](resolving-eacces-permissions-errors-when-installing-packages-globally)\" for ways to avoid and resolve permissions errors.\n\n## [`Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'` on Windows 7](#error-enoent-stat-cusersuserappdataroamingnpm-on-windows-7)\n\nThe error `Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'` on Windows 7 is a consequence of [joyent/node#8141](https://github.com/joyent/node/issues/8141), and is an issue with the Node installer for Windows. The workaround is to ensure that `C:\\Users\\<user>\\AppData\\Roaming\\npm` exists and is writable with your normal user account.\n\n## [No space](#no-space)\n\n`npm ERR! Error: ENOSPC, write`\n\nYou are trying to install on a drive that either has no space, or has no permission to write.\n\n- Free some disk space or\n- Set the tmp folder somewhere with more space: `npm config set tmp /path/to/big/drive/tmp` or\n- Build Node yourself and install it somewhere writable with lots of space.\n\n## [No git](#no-git)\n\n``` javascript\nnpm ERR! not found: git\nENOGIT\n```\n\nYou need to [install git](http://git-scm.com/book/en/Getting-Started-Installing-Git). Or, you may need to add your git information to your npm profile. You can do this from the command line or the website. For more information, see \"[Managing your profile settings](managing-your-profile-settings)\".\n\n## [Running a Vagrant box on Windows fails due to path length issues](#running-a-vagrant-box-on-windows-fails-due-to-path-length-issues)\n\n**[@drmyersii](https://github.com/drmyersii)** went through what sounds like a lot of painful trial and error to come up with a working solution involving Windows long paths and some custom Vagrant configuration:\n\n> [This is the commit that I implemented it in](https://github.com/renobit/vagrant-node-env/commit/bdf15f2f301e2b1660b839875e34f172ea8be227), but I'll go ahead and post the main snippet of code here:\n>\n> ``` javascript\n> config.vm.provider \"virtualbox\" do |v|\n>     v.customize [\"sharedfolder\", \"add\", :id, \"--name\", \"www\", \"--hostpath\", ((\"//?/\" + File.dirname(__FILE__) + \"/www\").gsub(\"/\",\"\\\\\"))]\n> end\n>\n>\n> config.vm.provision :shell, inline: \"mkdir /home/vagrant/www\"\n> config.vm.provision :shell, inline: \"mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` > www /home/vagrant/www\", run: \"always\"\n> ```\n>\n> In the code above, I am appending `\\\\?\\` to the current directory absolute path. This will actually force the Windows API to allow an increase in the MAX_PATH variable (normally capped at 260). Read more about [max path](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx#maxpath). This is happening during the sharedfolder creation which is intentionally handled by VBoxManage and not Vagrant's \"synced_folder\" method. The last bit is pretty self-explanatory; we create the new shared folder and then make sure it's mounted each time the machine is accessed or touched since Vagrant likes to reload its mounts/shared folders on each load.\n\n## [npm only uses `git:` and `ssh+git:` URLs for GitHub repos, breaking proxies](#npm-only-uses-git-and-sshgit-urls-for-github-repos-breaking-proxies)\n\n**[@LaurentGoderre](https://github.com/LaurentGoderre)** fixed this with [some Git trickery](https://github.com/npm/npm/issues/5257#issuecomment-60441477):\n\n> I fixed this issue for several of my colleagues by running the following two commands:\n>\n> ``` javascript\n> git config --global url.\"https://github.com/\".insteadOf git@github.com:\n> git config --global url.\"https://\".insteadOf git://\n> ```\n>\n> One thing we noticed is that the `.gitconfig` used is not always the one expected so if you are on a machine that modified the home path to a shared drive, you need to ensure that your `.gitconfig` is the same on both your shared drive and in `c:\\users\\[your user]\\`\n\n## [SSL Error](#ssl-error)\n\n`npm ERR! Error: 7684:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:openssl\\ssl\\s23_clnt.c:787:`\n\nYou are trying to talk SSL to an unencrypted endpoint. More often than not, this is due to a [proxy](https://docs.npmjs.com/cli/v8/using-npm/config/#proxy) [configuration](https://docs.npmjs.com/cli/v8/using-npm/config/#https-proxy) [error](https://docs.npmjs.com/cli/v8/using-npm/config/#cafile) (see also [this helpful, if dated, guide](http://jjasonclark.com/how-to-setup-node-behind-web-proxy)). In this case, you do **not** want to disable `strict-ssl` – you may need to set up a CA / CA file for use with your proxy, but it's much better to take the time to figure that out than disabling SSL protection.\n\n`npm ERR! Error: SSL Error: CERT_UNTRUSTED` `npm ERR! Error: SSL Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE`\n\nThis problem will happen if you're running Node 0.6. Please upgrade to node 0.8 or above. [See this post for details](http://blog.npmjs.org/post/71267056460/fastly-manta-loggly-and-couchdb-attachments).\n\nYou could also try these workarounds: `npm config set ca \"\"` or `npm config set strict-ssl false`\n\n`npm ERR! Error: SSL Error: SELF_SIGNED_CERT_IN_CHAIN`\n\n[npm no longer supports its self-signed certificates](http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more)\n\nEither:\n\n- upgrade your version of npm `npm install npm -g --ca=\"\"`\n- tell your current version of npm to use known registrars `npm config set ca=\"\"`\n\nIf this does not fix the problem, then you may have an SSL-intercepting proxy. (For example, [https://github.com/npm/npm/issues/7439#issuecomment-76024878](https://github.com/npm/npm/issues/7439#issuecomment-76024878))\n\n## [SSL-intercepting proxy](#ssl-intercepting-proxy)\n\nUnsolved. See [https://github.com/npm/npm/issues/9282](https://github.com/npm/npm/issues/9282)\n\n## [Not found / Server error](#not-found--server-error)\n\n``` javascript\nnpm http 404 https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgz\nnpm ERR! fetch failed https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgz\nnpm ERR! Error: 404 Not Found\n```\n\n`npm http 500 https://registry.npmjs.org/phonegap`\n\n- It's most likely a temporary npm registry glitch. Check [npm server status](http://status.npmjs.org/) and try again later.\n- If the error persists, perhaps the published package is corrupt. Contact the package owner and have them publish a new version of the package.\n\n## [Invalid JSON](#invalid-json)\n\n`Error: Invalid JSON` `npm ERR! SyntaxError: Unexpected token <` `npm ERR! registry error parsing json`\n\n- Possible temporary npm registry glitch, or corrupted local server cache. Run `npm cache clean` and/or try again later.\n- This can be caused by corporate proxies that give HTML responses to `package.json` requests. Check npm's proxy [configuration](https://docs.npmjs.com/cli/v8/using-npm/config/).\n- Check that it's not a problem with a package you're trying to install (e.g. invalid `package.json`).\n\n## [Many `ENOENT` / `ENOTEMPTY` errors in output](#many-enoent--enotempty-errors-in-output)\n\nnpm is written to use resources efficiently on install, and part of this is that it tries to do as many things concurrently as is practical. Sometimes this results in race conditions and other synchronization issues. As of npm 2.0.0, a very large number of these issues were addressed. If you see `ENOENT lstat`, `ENOENT chmod`, `ENOTEMPTY unlink`, or something similar in your log output, try updating npm to the latest version. If the problem persists, look at [npm/npm#6043](https://github.com/npm/npm/issues/6043) and see if somebody has already discussed your issue.\n\n## [`cb() never called!` when using shrinkwrapped dependencies](#cb-never-called-when-using-shrinkwrapped-dependencies)\n\nTake a look at [issue \\#5920](https://github.com/npm/npm/issues/5920). ~~We're working on fixing this one, but it's a fairly subtle race condition and it's taking us a little time. You might try moving your `npm-shrinkwrap.json` file out of the way until we have this fixed.~~ This has been fixed in versions of npm newer than `npm@2.1.5`, so update to `npm@latest`.\n\n## [`npm login` errors](#npm-login-errors)\n\nSometimes `npm login` fails for no obvious reason. The first thing to do is to log in at [https://www.npmjs.com/login](https://www.npmjs.com/login) and check that your e-mail address on `npmjs.com` matches the email address you are giving to `npm login`.\n\nIf that's not the problem, or if you are seeing the message `\"may not mix password_sha and pbkdf2\"`, then\n\n1.  Log in at [https://npmjs.com/](https://npmjs.com/)\n2.  Change password at [https://npmjs.com/password](https://npmjs.com/password) – you can even \"change\" it to the same password\n3.  Clear login-related fields from `~/.npmrc` – e.g., by running `sed -ie '/registry.npmjs.org/d' ~/.npmrc`\n4.  `npm login`\n\nand it generally seems to work.\n\nSee [https://github.com/npm/npm/issues/6641#issuecomment-72984009](https://github.com/npm/npm/issues/6641#issuecomment-72984009) for the history of this issue.\n\n## [`npm` hangs on Windows at `addRemoteTarball`](#npm-hangs-on-windows-at-addremotetarball)\n\nCheck if you have two temp directories set in your `.npmrc`:\n\n`> npm config ls -l`\n\nLook for lines defining the `tmp` config variable. If you find more than one, remove all but one of them.\n\nSee [https://github.com/npm/npm/issues/7590](https://github.com/npm/npm/issues/7590) for more about this unusual problem.\n\n## [npm not running the latest version on a Windows machine](#npm-not-running-the-latest-version-on-a-windows-machine)\n\nSee the section about Windows [here](try-the-latest-stable-version-of-npm).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/common-errors](https://docs.npmjs.com/common-errors)"
- name: config
  id: cli/v10/using-npm/config
  summary: Putting --foo bar on the command line sets the foo configuration parameter to "bar". A -- argument tells the cli parser to stop reading flags
  description: "# config\n\nMore than you probably want to know about npm configuration\n\n### [Description](#description)\n\nnpm gets its configuration values from the following sources, sorted by priority:\n\n#### [Command Line Flags](#command-line-flags)\n\nPutting `--foo bar` on the command line sets the `foo` configuration parameter to `\"bar\"`. A `--` argument tells the cli parser to stop reading flags. Using `--flag` without specifying any value will set the value to `true`.\n\nExample: `--flag1 --flag2` will set both configuration parameters to `true`, while `--flag1 --flag2 bar` will set `flag1` to `true`, and `flag2` to `bar`. Finally, `--flag1 --flag2 -- bar` will set both configuration parameters to `true`, and the `bar` is taken as a command argument.\n\n#### [Environment Variables](#environment-variables)\n\nAny environment variables that start with `npm_config_` will be interpreted as a configuration parameter. For example, putting `npm_config_foo=bar` in your environment will set the `foo` configuration parameter to `bar`. Any environment configurations that are not given a value will be given the value of `true`. Config values are case-insensitive, so `NPM_CONFIG_FOO=bar` will work the same. However, please note that inside [`scripts`](scripts) npm will set its own environment variables and Node will prefer those lowercase versions over any uppercase ones that you might set. For details see [this issue](https://github.com/npm/npm/issues/14528).\n\nNotice that you need to use underscores instead of dashes, so `--allow-same-version` would become `npm_config_allow_same_version=true`.\n\n#### [npmrc Files](#npmrc-files)\n\nThe four relevant files are:\n\n- per-project configuration file (`/path/to/my/project/.npmrc`)\n- per-user configuration file (defaults to `$HOME/.npmrc`; configurable via CLI option `--userconfig` or environment variable `$NPM_CONFIG_USERCONFIG`)\n- global configuration file (defaults to `$PREFIX/etc/npmrc`; configurable via CLI option `--globalconfig` or environment variable `$NPM_CONFIG_GLOBALCONFIG`)\n- npm's built-in configuration file (`/path/to/npm/npmrc`)\n\nSee [npmrc](../configuring-npm/npmrc) for more details.\n\n#### [Default Configs](#default-configs)\n\nRun `npm config ls -l` to see a set of configuration parameters that are internal to npm, and are defaults if nothing else is specified.\n\n### [Shorthands and Other CLI Niceties](#shorthands-and-other-cli-niceties)\n\nThe following shorthands are parsed on the command-line:\n\n- `-a`: `--all`\n- `--enjoy-by`: `--before`\n- `-c`: `--call`\n- `--desc`: `--description`\n- `-f`: `--force`\n- `-g`: `--global`\n- `--iwr`: `--include-workspace-root`\n- `-L`: `--location`\n- `-d`: `--loglevel info`\n- `-s`: `--loglevel silent`\n- `--silent`: `--loglevel silent`\n- `--ddd`: `--loglevel silly`\n- `--dd`: `--loglevel verbose`\n- `--verbose`: `--loglevel verbose`\n- `-q`: `--loglevel warn`\n- `--quiet`: `--loglevel warn`\n- `-l`: `--long`\n- `-m`: `--message`\n- `--local`: `--no-global`\n- `-n`: `--no-yes`\n- `--no`: `--no-yes`\n- `-p`: `--parseable`\n- `--porcelain`: `--parseable`\n- `-C`: `--prefix`\n- `--readonly`: `--read-only`\n- `--reg`: `--registry`\n- `-S`: `--save`\n- `-B`: `--save-bundle`\n- `-D`: `--save-dev`\n- `-E`: `--save-exact`\n- `-O`: `--save-optional`\n- `-P`: `--save-prod`\n- `-?`: `--usage`\n- `-h`: `--usage`\n- `-H`: `--usage`\n- `--help`: `--usage`\n- `-v`: `--version`\n- `-w`: `--workspace`\n- `--ws`: `--workspaces`\n- `-y`: `--yes`\n\nIf the specified configuration param resolves unambiguously to a known configuration parameter, then it is expanded to that configuration parameter. For example:\n\n``` javascript\nnpm ls --par\n# same as:\nnpm ls --parseable\n```\n\nIf multiple single-character shorthands are strung together, and the resulting combination is unambiguously not some other configuration param, then it is expanded to its various component pieces. For example:\n\n``` javascript\nnpm ls -gpld\n# same as:\nnpm ls --global --parseable --long --loglevel info\n```\n\n### [Config Settings](#config-settings)\n\n#### [`_auth`](#_auth)\n\n- Default: null\n- Type: null or String\n\nA basic-auth string to use when authenticating against the npm registry. This will ONLY be used to authenticate against the npm registry. For other registries you will need to scope it like \"//other-registry.tld/:\\_auth\"\n\nWarning: This should generally not be set via a command-line option. It is safer to use a registry-provided authentication bearer token stored in the ~/.npmrc file by running `npm login`.\n\n#### [`access`](#access)\n\n- Default: 'public' for new packages, existing packages it will not change the current level\n- Type: null, \"restricted\", or \"public\"\n\nIf you do not want your scoped package to be publicly viewable (and installable) set `--access=restricted`.\n\nUnscoped packages can not be set to `restricted`.\n\nNote: This defaults to not changing the current access level for existing packages. Specifying a value of `restricted` or `public` during publish will change the access for an existing package the same way that `npm access set status` would.\n\n#### [`all`](#all)\n\n- Default: false\n- Type: Boolean\n\nWhen running `npm outdated` and `npm ls`, setting `--all` will show all outdated or installed packages, rather than only those directly depended upon by the current project.\n\n#### [`allow-same-version`](#allow-same-version)\n\n- Default: false\n- Type: Boolean\n\nPrevents throwing an error when `npm version` is used to set the new version to the same value as the current version.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](../commands/npm-audit) for details on what is submitted.\n\n#### [`audit-level`](#audit-level)\n\n- Default: null\n- Type: null, \"info\", \"low\", \"moderate\", \"high\", \"critical\", or \"none\"\n\nThe minimum level of vulnerability for `npm audit` to exit with a non-zero exit code.\n\n#### [`auth-type`](#auth-type)\n\n- Default: \"web\"\n- Type: \"legacy\" or \"web\"\n\nWhat authentication strategy to use with `login`. Note that if an `otp` config is given, this value will always be set to `legacy`.\n\n#### [`before`](#before)\n\n- Default: null\n- Type: null or Date\n\nIf passed to `npm install`, will rebuild the npm tree such that only versions that were available **on or before** the `--before` time get installed. If there's no versions available for the current set of direct dependencies, the command will error.\n\nIf the requested version is a `dist-tag` and the given tag does not pass the `--before` filter, the most recent version less than or equal to that tag will be used. For example, `foo@latest` might install `foo@1.2` even though `latest` is `2.0`.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`browser`](#browser)\n\n- Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n- Type: null, Boolean, or String\n\nThe browser that is called by npm commands to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to terminal.\n\nSet to `true` to use default system URL opener.\n\n#### [`ca`](#ca)\n\n- Default: null\n- Type: null or String (can be set multiple times)\n\nThe Certificate Authority signing certificate that is trusted for SSL connections to the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n\n``` javascript\nca=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n```\n\nSet to `null` to only allow \"known\" registrars, or to a specific CA cert to trust only that specific signing authority.\n\nMultiple CAs can be trusted by specifying an array of certificates:\n\n``` javascript\nca[]=\"...\"\nca[]=\"...\"\n```\n\nSee also the `strict-ssl` config.\n\n#### [`cache`](#cache)\n\n- Default: Windows: `%LocalAppData%\\npm-cache`, Posix: `~/.npm`\n- Type: Path\n\nThe location of npm's cache directory.\n\n#### [`cafile`](#cafile)\n\n- Default: null\n- Type: Path\n\nA path to a file containing one or multiple Certificate Authority signing certificates. Similar to the `ca` setting, but allows for multiple CA's, as well as for the CA information to be stored in a file on disk.\n\n#### [`call`](#call)\n\n- Default: \"\"\n- Type: String\n\nOptional companion option for `npm exec`, `npx` that allows for specifying a custom command to be run along with the installed packages.\n\n``` javascript\nnpm exec --package yo --package generator-node --call \"yo node\"\n```\n\n#### [`cidr`](#cidr)\n\n- Default: null\n- Type: null or String (can be set multiple times)\n\nThis is a list of CIDR address to be used when configuring limited access tokens with the `npm token create` command.\n\n#### [`color`](#color)\n\n- Default: true unless the NO_COLOR environ is set to something other than '0'\n- Type: \"always\" or Boolean\n\nIf false, never shows colors. If `\"always\"` then always shows colors. If true, then only prints color codes for tty file descriptors.\n\n#### [`commit-hooks`](#commit-hooks)\n\n- Default: true\n- Type: Boolean\n\nRun git commit hooks when using the `npm version` command.\n\n#### [`cpu`](#cpu)\n\n- Default: null\n- Type: null or String\n\nOverride CPU architecture of native modules to install. Acceptable values are same as `cpu` field of package.json, which comes from `process.arch`.\n\n#### [`depth`](#depth)\n\n- Default: `Infinity` if `--all` is set, otherwise `1`\n- Type: null or Number\n\nThe depth to go when recursing packages for `npm ls`.\n\nIf not set, `npm ls` will show only the immediate dependencies of the root project. If `--all` is set, then npm will show all dependencies by default.\n\n#### [`description`](#description-1)\n\n- Default: true\n- Type: Boolean\n\nShow the description in `npm search`\n\n#### [`diff`](#diff)\n\n- Default:\n- Type: String (can be set multiple times)\n\nDefine arguments to compare in `npm diff`.\n\n#### [`diff-dst-prefix`](#diff-dst-prefix)\n\n- Default: \"b/\"\n- Type: String\n\nDestination prefix to be used in `npm diff` output.\n\n#### [`diff-ignore-all-space`](#diff-ignore-all-space)\n\n- Default: false\n- Type: Boolean\n\nIgnore whitespace when comparing lines in `npm diff`.\n\n#### [`diff-name-only`](#diff-name-only)\n\n- Default: false\n- Type: Boolean\n\nPrints only filenames when using `npm diff`.\n\n#### [`diff-no-prefix`](#diff-no-prefix)\n\n- Default: false\n- Type: Boolean\n\nDo not show any source or destination prefix in `npm diff` output.\n\nNote: this causes `npm diff` to ignore the `--diff-src-prefix` and `--diff-dst-prefix` configs.\n\n#### [`diff-src-prefix`](#diff-src-prefix)\n\n- Default: \"a/\"\n- Type: String\n\nSource prefix to be used in `npm diff` output.\n\n#### [`diff-text`](#diff-text)\n\n- Default: false\n- Type: Boolean\n\nTreat all files as text in `npm diff`.\n\n#### [`diff-unified`](#diff-unified)\n\n- Default: 3\n- Type: Number\n\nThe number of lines of context to print in `npm diff`.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`editor`](#editor)\n\n- Default: The EDITOR or VISUAL environment variables, or '%SYSTEMROOT%\\notepad.exe' on Windows, or 'vi' on Unix systems\n- Type: String\n\nThe command to run for `npm edit` and `npm config edit`.\n\n#### [`engine-strict`](#engine-strict)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, then npm will stubbornly refuse to install (or even consider installing) any package that claims to not be compatible with the current Node.js version.\n\nThis can be overridden by setting the `--force` flag.\n\n#### [`fetch-retries`](#fetch-retries)\n\n- Default: 2\n- Type: Number\n\nThe \"retries\" config for the `retry` module to use when fetching packages from the registry.\n\nnpm will retry idempotent read requests to the registry in the case of network failures or 5xx HTTP errors.\n\n#### [`fetch-retry-factor`](#fetch-retry-factor)\n\n- Default: 10\n- Type: Number\n\nThe \"factor\" config for the `retry` module to use when fetching packages.\n\n#### [`fetch-retry-maxtimeout`](#fetch-retry-maxtimeout)\n\n- Default: 60000 (1 minute)\n- Type: Number\n\nThe \"maxTimeout\" config for the `retry` module to use when fetching packages.\n\n#### [`fetch-retry-mintimeout`](#fetch-retry-mintimeout)\n\n- Default: 10000 (10 seconds)\n- Type: Number\n\nThe \"minTimeout\" config for the `retry` module to use when fetching packages.\n\n#### [`fetch-timeout`](#fetch-timeout)\n\n- Default: 300000 (5 minutes)\n- Type: Number\n\nThe maximum amount of time to wait for HTTP requests to complete.\n\n#### [`force`](#force)\n\n- Default: false\n- Type: Boolean\n\nRemoves various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.\n\n- Allow clobbering non-npm files in global installs.\n- Allow the `npm version` command to work on an unclean git repository.\n- Allow deleting the cache folder with `npm cache clean`.\n- Allow installing packages that have an `engines` declaration requiring a different version of npm.\n- Allow installing packages that have an `engines` declaration requiring a different version of `node`, even if `--engine-strict` is enabled.\n- Allow `npm audit fix` to install modules outside your stated dependency range (including SemVer-major changes).\n- Allow unpublishing all versions of a published package.\n- Allow conflicting peerDependencies to be installed in the root project.\n- Implicitly set `--yes` during `npm init`.\n- Allow clobbering existing values in `npm pkg`\n- Allow unpublishing of entire packages (not just a single version).\n\nIf you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`format-package-lock`](#format-package-lock)\n\n- Default: true\n- Type: Boolean\n\nFormat `package-lock.json` or `npm-shrinkwrap.json` as a human readable file.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](../commands/npm-fund) for details.\n\n#### [`git`](#git)\n\n- Default: \"git\"\n- Type: String\n\nThe command to use for git commands. If git is installed on the computer, but is not in the `PATH`, then set this to the full path to the git binary.\n\n#### [`git-tag-version`](#git-tag-version)\n\n- Default: true\n- Type: Boolean\n\nTag the commit when using the `npm version` command. Setting this to false results in no commit being made at all.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`globalconfig`](#globalconfig)\n\n- Default: The global --prefix setting plus 'etc/npmrc'. For example, '/usr/local/etc/npmrc'\n- Type: Path\n\nThe config file to read for global config options.\n\n#### [`heading`](#heading)\n\n- Default: \"npm\"\n- Type: String\n\nThe string that starts all the debugging log output.\n\n#### [`https-proxy`](#https-proxy)\n\n- Default: null\n- Type: null or URL\n\nA proxy to use for outgoing https requests. If the `HTTPS_PROXY` or `https_proxy` or `HTTP_PROXY` or `http_proxy` environment variables are set, proxy settings will be honored by the underlying `make-fetch-happen` library.\n\n#### [`if-present`](#if-present)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm will not exit with an error code when `run-script` is invoked for a script that isn't defined in the `scripts` section of `package.json`. This option can be used when it's desirable to optionally run a script when it's present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.\n\nThis value is not exported to the environment for child processes.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`include-staged`](#include-staged)\n\n- Default: false\n- Type: Boolean\n\nAllow installing \"staged\" published packages, as defined by [npm RFC PR \\#92](https://github.com/npm/rfcs/pull/92).\n\nThis is experimental, and not implemented by the npm public registry.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`init-author-email`](#init-author-email)\n\n- Default: \"\"\n- Type: String\n\nThe value `npm init` should use by default for the package author's email.\n\n#### [`init-author-name`](#init-author-name)\n\n- Default: \"\"\n- Type: String\n\nThe value `npm init` should use by default for the package author's name.\n\n#### [`init-author-url`](#init-author-url)\n\n- Default: \"\"\n- Type: \"\" or URL\n\nThe value `npm init` should use by default for the package author's homepage.\n\n#### [`init-license`](#init-license)\n\n- Default: \"ISC\"\n- Type: String\n\nThe value `npm init` should use by default for the package license.\n\n#### [`init-module`](#init-module)\n\n- Default: \"~/.npm-init.js\"\n- Type: Path\n\nA module that will be loaded by the `npm init` command. See the documentation for the [init-package-json](https://github.com/npm/init-package-json) module for more information, or [npm init](../commands/npm-init).\n\n#### [`init-version`](#init-version)\n\n- Default: \"1.0.0\"\n- Type: SemVer string\n\nThe value that `npm init` should use by default for the package version number, if not already set in package.json.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`legacy-peer-deps`](#legacy-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nCauses npm to completely ignore `peerDependencies` when building a package tree, as in npm versions 3 through 6.\n\nIf a package cannot be installed because of overly strict `peerDependencies` that collide, it provides a way to move forward resolving the situation.\n\nThis differs from `--omit=peer`, in that `--omit=peer` will avoid unpacking `peerDependencies` on disk, but will still design a tree such that `peerDependencies` *could* be unpacked in a correct place.\n\nUse of `legacy-peer-deps` is not recommended, as it will not enforce the `peerDependencies` contract that meta-dependencies may rely on.\n\n#### [`link`](#link)\n\n- Default: false\n- Type: Boolean\n\nUsed with `npm ls`, limiting output to only those packages that are linked.\n\n#### [`local-address`](#local-address)\n\n- Default: null\n- Type: IP Address\n\nThe IP address of the local interface to use when making connections to the npm registry. Must be IPv4 in versions of Node prior to 0.12.\n\n#### [`location`](#location)\n\n- Default: \"user\" unless `--global` is passed, which will also set this value to \"global\"\n- Type: \"global\", \"user\", or \"project\"\n\nWhen passed to `npm config` this refers to which config file to use.\n\nWhen set to \"global\" mode, packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`lockfile-version`](#lockfile-version)\n\n- Default: Version 3 if no lockfile, auto-converting v1 lockfiles to v3, otherwise maintain current lockfile version.\n- Type: null, 1, 2, 3, \"1\", \"2\", or \"3\"\n\nSet the lockfile format version to be used in package-lock.json and npm-shrinkwrap-json files. Possible options are:\n\n1: The lockfile version used by npm versions 5 and 6. Lacks some data that is used during the install, resulting in slower and possibly less deterministic installs. Prevents lockfile churn when interoperating with older npm versions.\n\n2: The default lockfile version used by npm version 7 and 8. Includes both the version 1 lockfile data and version 3 lockfile data, for maximum determinism and interoperability, at the expense of more bytes on disk.\n\n3: Only the new lockfile information introduced in npm version 7. Smaller on disk than lockfile version 2, but not interoperable with older npm versions. Ideal if all users are on npm version 7 and higher.\n\n#### [`loglevel`](#loglevel)\n\n- Default: \"notice\"\n- Type: \"silent\", \"error\", \"warn\", \"notice\", \"http\", \"info\", \"verbose\", or \"silly\"\n\nWhat level of logs to report. All logs are written to a debug log, with the path to that file printed if the execution of a command fails.\n\nAny logs of a higher level than the setting are shown. The default is \"notice\".\n\nSee also the `foreground-scripts` config.\n\n#### [`logs-dir`](#logs-dir)\n\n- Default: A directory named `_logs` inside the cache\n- Type: null or Path\n\nThe location of npm's log directory. See [`npm logging`](logging) for more information.\n\n#### [`logs-max`](#logs-max)\n\n- Default: 10\n- Type: Number\n\nThe maximum number of log files to store.\n\nIf set to 0, no log files will be written for the current run.\n\n#### [`long`](#long)\n\n- Default: false\n- Type: Boolean\n\nShow extended information in `ls`, `search`, and `help-search`.\n\n#### [`maxsockets`](#maxsockets)\n\n- Default: 15\n- Type: Number\n\nThe maximum number of connections to use per origin (protocol/host/port combination).\n\n#### [`message`](#message)\n\n- Default: \"%s\"\n- Type: String\n\nCommit message which is used by `npm version` when creating version commit.\n\nAny \"%s\" in the message will be replaced with the version number.\n\n#### [`node-options`](#node-options)\n\n- Default: null\n- Type: null or String\n\nOptions to pass through to Node.js via the `NODE_OPTIONS` environment variable. This does not impact how npm itself is executed but it does impact how lifecycle scripts are called.\n\n#### [`noproxy`](#noproxy)\n\n- Default: The value of the NO_PROXY environment variable\n- Type: String (can be set multiple times)\n\nDomain extensions that should bypass any proxies.\n\nAlso accepts a comma-delimited string.\n\n#### [`offline`](#offline)\n\n- Default: false\n- Type: Boolean\n\nForce offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see `--prefer-offline`.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`omit-lockfile-registry-resolved`](#omit-lockfile-registry-resolved)\n\n- Default: false\n- Type: Boolean\n\nThis option causes npm to create lock files without a `resolved` key for registry dependencies. Subsequent installs will need to resolve tarball endpoints with the configured registry, likely resulting in a longer install time.\n\n#### [`os`](#os)\n\n- Default: null\n- Type: null or String\n\nOverride OS of native modules to install. Acceptable values are same as `os` field of package.json, which comes from `process.platform`.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n#### [`pack-destination`](#pack-destination)\n\n- Default: \".\"\n- Type: String\n\nDirectory in which `npm pack` will save tarballs.\n\n#### [`package`](#package)\n\n- Default:\n- Type: String (can be set multiple times)\n\nThe package or packages to install for [`npm exec`](../commands/npm-exec)\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n#### [`prefer-dedupe`](#prefer-dedupe)\n\n- Default: false\n- Type: Boolean\n\nPrefer to deduplicate packages if possible, rather than choosing a newer version of a dependency.\n\n#### [`prefer-offline`](#prefer-offline)\n\n- Default: false\n- Type: Boolean\n\nIf true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use `--offline`.\n\n#### [`prefer-online`](#prefer-online)\n\n- Default: false\n- Type: Boolean\n\nIf true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data.\n\n#### [`prefix`](#prefix)\n\n- Default: In global mode, the folder where the node executable is installed. Otherwise, the nearest parent folder containing either a package.json file or a node_modules folder.\n- Type: Path\n\nThe location to install global items. If set on the command line, then it forces non-global commands to run in the specified folder.\n\n#### [`preid`](#preid)\n\n- Default: \"\"\n- Type: String\n\nThe \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a semver. Like the `rc` in `1.2.0-rc.8`.\n\n#### [`progress`](#progress)\n\n- Default: `true` unless running in a known CI system\n- Type: Boolean\n\nWhen set to `true`, npm will display a progress bar during time intensive operations, if `process.stderr` is a TTY.\n\nSet to `false` to suppress the progress bar.\n\n#### [`provenance`](#provenance)\n\n- Default: false\n- Type: Boolean\n\nWhen publishing from a supported cloud CI/CD system, the package will be publicly linked to where it was built and published from.\n\nThis config can not be used with: `provenance-file`\n\n#### [`provenance-file`](#provenance-file)\n\n- Default: null\n- Type: Path\n\nWhen publishing, the provenance bundle at the given path will be used.\n\nThis config can not be used with: `provenance`\n\n#### [`proxy`](#proxy)\n\n- Default: null\n- Type: null, false, or URL\n\nA proxy to use for outgoing http requests. If the `HTTP_PROXY` or `http_proxy` environment variables are set, proxy settings will be honored by the underlying `request` library.\n\n#### [`read-only`](#read-only)\n\n- Default: false\n- Type: Boolean\n\nThis is used to mark a token as unable to publish when configuring limited access tokens with the `npm token create` command.\n\n#### [`rebuild-bundle`](#rebuild-bundle)\n\n- Default: true\n- Type: Boolean\n\nRebuild bundled dependencies after installation.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`replace-registry-host`](#replace-registry-host)\n\n- Default: \"npmjs\"\n- Type: \"npmjs\", \"never\", \"always\", or String\n\nDefines behavior for replacing the registry host in a lockfile with the configured registry.\n\nThe default behavior is to replace package dist URLs from the default registry ([https://registry.npmjs.org](https://registry.npmjs.org)) to the configured registry. If set to \"never\", then use the registry value. If set to \"always\", then replace the registry host with the configured host every time.\n\nYou may also specify a bare hostname (e.g., \"registry.npmjs.org\").\n\n#### [`save`](#save)\n\n- Default: `true` unless when using `npm update` where it defaults to `false`\n- Type: Boolean\n\nSave installed packages to a `package.json` file as dependencies.\n\nWhen used with the `npm rm` command, removes the dependency from `package.json`.\n\nWill also prevent writing to `package-lock.json` if set to `false`.\n\n#### [`save-bundle`](#save-bundle)\n\n- Default: false\n- Type: Boolean\n\nIf a package would be saved at install time by the use of `--save`, `--save-dev`, or `--save-optional`, then also put it in the `bundleDependencies` list.\n\nIgnored if `--save-peer` is set, since peerDependencies cannot be bundled.\n\n#### [`save-dev`](#save-dev)\n\n- Default: false\n- Type: Boolean\n\nSave installed packages to a package.json file as `devDependencies`.\n\n#### [`save-exact`](#save-exact)\n\n- Default: false\n- Type: Boolean\n\nDependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.\n\n#### [`save-optional`](#save-optional)\n\n- Default: false\n- Type: Boolean\n\nSave installed packages to a package.json file as `optionalDependencies`.\n\n#### [`save-peer`](#save-peer)\n\n- Default: false\n- Type: Boolean\n\nSave installed packages to a package.json file as `peerDependencies`\n\n#### [`save-prefix`](#save-prefix)\n\n- Default: \"^\"\n- Type: String\n\nConfigure how versions of packages installed to a package.json file via `--save` or `--save-dev` get prefixed.\n\nFor example if a package has version `1.2.3`, by default its version is set to `^1.2.3` which allows minor upgrades for that package, but after `npm config set save-prefix='~'` it would be set to `~1.2.3` which only allows patch upgrades.\n\n#### [`save-prod`](#save-prod)\n\n- Default: false\n- Type: Boolean\n\nSave installed packages into `dependencies` specifically. This is useful if a package already exists in `devDependencies` or `optionalDependencies`, but you want to move it to be a non-optional production dependency.\n\nThis is the default behavior if `--save` is true, and neither `--save-dev` or `--save-optional` are true.\n\n#### [`sbom-format`](#sbom-format)\n\n- Default: null\n- Type: \"cyclonedx\" or \"spdx\"\n\nSBOM format to use when generating SBOMs.\n\n#### [`sbom-type`](#sbom-type)\n\n- Default: \"library\"\n- Type: \"library\", \"application\", or \"framework\"\n\nThe type of package described by the generated SBOM. For SPDX, this is the value for the `primaryPackagePurpose` field. For CycloneDX, this is the value for the `type` field.\n\n#### [`scope`](#scope)\n\n- Default: the scope of the current project, if any, or \"\"\n- Type: String\n\nAssociate an operation with a scope for a scoped registry.\n\nUseful when logging in to or out of a private registry:\n\n``` javascript\n# log in, linking the scope to the custom registry\nnpm login --scope=@mycorp --registry=https://registry.mycorp.com\n\n\n# log out, removing the link and the auth token\nnpm logout --scope=@mycorp\n```\n\nThis will cause `@mycorp` to be mapped to the registry for future installation of packages specified according to the pattern `@mycorp/package`.\n\nThis will also cause `npm init` to create a scoped package.\n\n``` javascript\n# accept all defaults, and create a package named \"@foo/whatever\",\n# instead of just named \"whatever\"\nnpm init --scope=@foo --yes\n```\n\n#### [`script-shell`](#script-shell)\n\n- Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n- Type: null or String\n\nThe shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.\n\n#### [`searchexclude`](#searchexclude)\n\n- Default: \"\"\n- Type: String\n\nSpace-separated options that limit the results from search.\n\n#### [`searchlimit`](#searchlimit)\n\n- Default: 20\n- Type: Number\n\nNumber of items to limit search results to. Will not apply at all to legacy searches.\n\n#### [`searchopts`](#searchopts)\n\n- Default: \"\"\n- Type: String\n\nSpace-separated options that are always passed to search.\n\n#### [`searchstaleness`](#searchstaleness)\n\n- Default: 900\n- Type: Number\n\nThe age of the cache, in seconds, before another registry request is made if using legacy search endpoint.\n\n#### [`shell`](#shell)\n\n- Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd.exe\" on Windows\n- Type: String\n\nThe shell to run for the `npm explore` command.\n\n#### [`sign-git-commit`](#sign-git-commit)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, then the `npm version` command will commit the new package version using `-S` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs for this to work properly.\n\n#### [`sign-git-tag`](#sign-git-tag)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, then the `npm version` command will tag the version using `-s` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs for this to work properly.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`strict-ssl`](#strict-ssl)\n\n- Default: true\n- Type: Boolean\n\nWhether or not to do SSL key validation when making requests to the registry via https.\n\nSee also the `ca` config.\n\n#### [`tag`](#tag)\n\n- Default: \"latest\"\n- Type: String\n\nIf you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.\n\nAlso the tag that is added to the package@version specified by the `npm tag` command, if no explicit tag is given.\n\nWhen used by the `npm diff` command, this is the tag used to fetch the tarball that will be compared with the local files by default.\n\n#### [`tag-version-prefix`](#tag-version-prefix)\n\n- Default: \"v\"\n- Type: String\n\nIf set, alters the prefix used when tagging a new version when performing a version increment using `npm version`. To remove the prefix altogether, set it to the empty string: `\"\"`.\n\nBecause other tools may rely on the convention that npm version tags look like `v1.0.0`, *only use this property if it is absolutely necessary*. In particular, use care when overriding this setting for public packages.\n\n#### [`timing`](#timing)\n\n- Default: false\n- Type: Boolean\n\nIf true, writes timing information to a process specific json file in the cache or `logs-dir`. The file name ends with `-timing.json`.\n\nYou can quickly view it with this [json](https://npm.im/json) command line: `cat ~/.npm/_logs/*-timing.json | npm exec -- json -g`.\n\nTiming information will also be reported in the terminal. To suppress this while still writing the timing file, use `--silent`.\n\n#### [`umask`](#umask)\n\n- Default: 0\n- Type: Octal numeric string in range 0000..0777 (0..511)\n\nThe \"umask\" value to use when setting the file creation mode on files and folders.\n\nFolders and executables are given a mode which is `0o777` masked against this value. Other files are given a mode which is `0o666` masked against this value.\n\nNote that the underlying system will *also* apply its own umask value to files and folders that are created, and npm does not circumvent this, but rather adds the `--umask` config to it.\n\nThus, the effective default umask value on most POSIX systems is 0o22, meaning that folders and executables are created with a mode of 0o755 and other files are created with a mode of 0o644.\n\n#### [`unicode`](#unicode)\n\n- Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables.\n- Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.\n\n#### [`update-notifier`](#update-notifier)\n\n- Default: true\n- Type: Boolean\n\nSet to false to suppress the update notification when using an older version of npm than the latest.\n\n#### [`usage`](#usage)\n\n- Default: false\n- Type: Boolean\n\nShow short usage output about the command specified.\n\n#### [`user-agent`](#user-agent)\n\n- Default: \"npm/{npm-version} node/{node-version} {platform} {arch} workspaces/{workspaces} {ci}\"\n- Type: String\n\nSets the User-Agent request header. The following fields are replaced with their actual counterparts:\n\n- `{npm-version}` - The npm version in use\n- `{node-version}` - The Node.js version in use\n- `{platform}` - The value of `process.platform`\n- `{arch}` - The value of `process.arch`\n- `{workspaces}` - Set to `true` if the `workspaces` or `workspace` options are set.\n- `{ci}` - The value of the `ci-name` config, if set, prefixed with `ci/`, or an empty string if `ci-name` is empty.\n\n#### [`userconfig`](#userconfig)\n\n- Default: \"~/.npmrc\"\n- Type: Path\n\nThe location of user-level configuration settings.\n\nThis may be overridden by the `npm_config_userconfig` environment variable or the `--userconfig` command line option, but may *not* be overridden by settings in the `globalconfig` file.\n\n#### [`version`](#version)\n\n- Default: false\n- Type: Boolean\n\nIf true, output the npm version and exit successfully.\n\nOnly relevant when specified explicitly on the command line.\n\n#### [`versions`](#versions)\n\n- Default: false\n- Type: Boolean\n\nIf true, output the npm version as well as node's `process.versions` map and the version in the current working directory's `package.json` file if one exists, and exit successfully.\n\nOnly relevant when specified explicitly on the command line.\n\n#### [`viewer`](#viewer)\n\n- Default: \"man\" on Posix, \"browser\" on Windows\n- Type: String\n\nThe program to use to view help content.\n\nSet to `\"browser\"` to view html help content in the default web browser.\n\n#### [`which`](#which)\n\n- Default: null\n- Type: null or Number\n\nIf there are multiple funding sources, which 1-indexed source URL to open.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces-update`](#workspaces-update)\n\n- Default: true\n- Type: Boolean\n\nIf set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the `node_modules` folder.\n\n#### [`yes`](#yes)\n\n- Default: null\n- Type: null or Boolean\n\nAutomatically answer \"yes\" to any prompts that npm might print on the command line.\n\n#### [`also`](#also)\n\n- Default: null\n- Type: null, \"dev\", or \"development\"\n- DEPRECATED: Please use --include=dev instead.\n\nWhen set to `dev` or `development`, this is an alias for `--include=dev`.\n\n#### [`cache-max`](#cache-max)\n\n- Default: Infinity\n- Type: Number\n- DEPRECATED: This option has been deprecated in favor of `--prefer-online`\n\n`--cache-max=0` is an alias for `--prefer-online`\n\n#### [`cache-min`](#cache-min)\n\n- Default: 0\n- Type: Number\n- DEPRECATED: This option has been deprecated in favor of `--prefer-offline`.\n\n`--cache-min=9999 (or bigger)` is an alias for `--prefer-offline`.\n\n#### [`cert`](#cert)\n\n- Default: null\n- Type: null or String\n- DEPRECATED: `key` and `cert` are no longer used for most registry operations. Use registry scoped `keyfile` and `certfile` instead. Example: //other-registry.tld/:keyfile=/path/to/key.pem //other-registry.tld/:certfile=/path/to/cert.crt\n\nA client certificate to pass when accessing the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n\n``` javascript\ncert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n```\n\nIt is *not* the path to a certificate file, though you can set a registry-scoped \"certfile\" path like \"//other-registry.tld/:certfile=/path/to/cert.pem\".\n\n#### [`dev`](#dev)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: Please use --include=dev instead.\n\nAlias for `--include=dev`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`init.author.email`](#initauthoremail)\n\n- Default: \"\"\n- Type: String\n- DEPRECATED: Use `--init-author-email` instead.\n\nAlias for `--init-author-email`\n\n#### [`init.author.name`](#initauthorname)\n\n- Default: \"\"\n- Type: String\n- DEPRECATED: Use `--init-author-name` instead.\n\nAlias for `--init-author-name`\n\n#### [`init.author.url`](#initauthorurl)\n\n- Default: \"\"\n- Type: \"\" or URL\n- DEPRECATED: Use `--init-author-url` instead.\n\nAlias for `--init-author-url`\n\n#### [`init.license`](#initlicense)\n\n- Default: \"ISC\"\n- Type: String\n- DEPRECATED: Use `--init-license` instead.\n\nAlias for `--init-license`\n\n#### [`init.module`](#initmodule)\n\n- Default: \"~/.npm-init.js\"\n- Type: Path\n- DEPRECATED: Use `--init-module` instead.\n\nAlias for `--init-module`\n\n#### [`init.version`](#initversion)\n\n- Default: \"1.0.0\"\n- Type: SemVer string\n- DEPRECATED: Use `--init-version` instead.\n\nAlias for `--init-version`\n\n#### [`key`](#key)\n\n- Default: null\n- Type: null or String\n- DEPRECATED: `key` and `cert` are no longer used for most registry operations. Use registry scoped `keyfile` and `certfile` instead. Example: //other-registry.tld/:keyfile=/path/to/key.pem //other-registry.tld/:certfile=/path/to/cert.crt\n\nA client key to pass when accessing the registry. Values should be in PEM format with newlines replaced by the string \"\\n\". For example:\n\n``` javascript\nkey=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\"\n```\n\nIt is *not* the path to a key file, though you can set a registry-scoped \"keyfile\" path like \"//other-registry.tld/:keyfile=/path/to/key.pem\".\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`only`](#only)\n\n- Default: null\n- Type: null, \"prod\", or \"production\"\n- DEPRECATED: Use `--omit=dev` to omit dev dependencies from the install.\n\nWhen set to `prod` or `production`, this is an alias for `--omit=dev`.\n\n#### [`optional`](#optional)\n\n- Default: null\n- Type: null or Boolean\n- DEPRECATED: Use `--omit=optional` to exclude optional dependencies, or `--include=optional` to include them.\n\nDefault value does install optional deps unless otherwise omitted.\n\nAlias for --include=optional or --omit=optional\n\n#### [`production`](#production)\n\n- Default: null\n- Type: null or Boolean\n- DEPRECATED: Use `--omit=dev` instead.\n\nAlias for `--omit=dev`\n\n#### [`shrinkwrap`](#shrinkwrap)\n\n- Default: true\n- Type: Boolean\n- DEPRECATED: Use the --package-lock setting instead.\n\nAlias for --package-lock\n\n### [See also](#see-also)\n\n- [npm config](../commands/npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm scripts](scripts)\n- [npm folders](../configuring-npm/folders)\n- [npm](../commands/npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/config](https://docs.npmjs.com/cli/v10/using-npm/config)"
- name: config
  id: cli/v10/configuring-npm/package-json#config
  summary: A "config" object can be used to set configuration parameters used in package scripts that persist across upgrades
  belongs_to: package.json
  description: |-
    ### [config](#config)

    A "config" object can be used to set configuration parameters used in package scripts that persist across upgrades. For instance, if a package had the following:

    ``` javascript
    {
      "name": "foo",
      "config": {
        "port": "8080"
      }
    }
    ```

    It could also have a "start" command that referenced the `npm_package_config_port` environment variable.
- name: Configuring npm
  id: cli/v10/configuring-npm
  summary: © npm, Inc
  description: "# Configuring npm\n\n- [Install](configuring-npm/install)\n  Download and install node and npm\n- [Folders](configuring-npm/folders)\n  Folder structures used by npm\n- [.npmrc](configuring-npm/npmrc)\n  The npm config files\n- [npm-shrinkwrap.json](configuring-npm/npm-shrinkwrap-json)\n  A publishable lockfile\n- [package.json](configuring-npm/package-json)\n  Specifics of npm's package.json handling\n- [package-lock.json](configuring-npm/package-lock-json)\n  A manifestation of the manifest\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm](https://docs.npmjs.com/cli/v10/configuring-npm)"
- name: Configuring two-factor authentication
  id: configuring-two-factor-authentication
  summary: You can enable two-factor authentication (2FA) on your npm user account to protect against unauthorized access to your account and packages, either by using a security-key or time-based one-time password (TOTP) from a mobile app
  description: "# Configuring two-factor authentication\n\nYou can enable two-factor authentication (2FA) on your npm user account to protect against unauthorized access to your account and packages, either by using a [security-key](https://webauthn.guide/) or [time-based one-time password (TOTP)](https://en.wikipedia.org/wiki/Time-based_one-time_password) from a mobile app.\n\n## [Prerequisites](#prerequisites)\n\nBefore you enable 2FA on your npm user account, you must:\n\n- Update your npm client to version 5.5.1 or higher.\n- To configure a security-key requires a modern browser that support [WebAuthn](https://caniuse.com/#search=webauthn). This will allow you to configure a biometric devices such as Apple [Touch ID](https://support.apple.com/en-gb/HT204587), [Face ID](https://support.apple.com/en-us/HT208108), or [Windows Hello](https://support.microsoft.com/en-us/windows/learn-about-windows-hello-and-set-it-up-dae28983-8242-bb2a-d3d1-87c9d265a5f0) as well as physical keys such as [Yubikey](https://www.yubico.com/), [Thetis](https://thetis.io/), or [Feitian](https://www.ftsafe.com/).\n- To configure TOTP you will need to install an authenticator application that can generate OTPs such as [Authy](https://authy.com/download/), [Google Authenticator](https://support.google.com/accounts/answer/1066447), or [Microsoft Authenticator](https://www.microsoft.com/security/mobile-authenticator-app) on your mobile device.\n\nFor more information on supported 2FA methods, see \"[About two-factor authentication](about-two-factor-authentication)\".\n\n**Note:** npm does not accept SMS (text-to-phone) as a 2FA method.\n\n## [Configuring 2FA from the website](#configuring-2fa-from-the-website)\n\n### [Enabling 2FA](#enabling-2fa)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  On the account settings page, under \"Two-Factor Authentication\", click **Enable 2FA**.\n\n4.  When prompted provide your current account password and then click **Confirm password to continue**.\n\n5.  On the 2FA method page, select the method you would like to enable and click **Continue**. For more information on supported 2FA methods, see \"[About two-factor authentication](about-two-factor-authentication)\".\n\n6.  Configure the 2FA method of your choice:\n\n    - When using a **security-key**, provide a name for it and click **Add security key**. Follow the browser specific steps to add your security-key.\n\n    &nbsp;\n\n    - Below is an example of configuration from Microsoft Edge running on a MacOS\n\n    &nbsp;\n\n    - When using an **authenticator application** on your phone, open it and scan the QR code on the two-step verification page. Enter the code generated by the app, then click **Verify**.\n\n7.  On the recovery code page, copy the recovery codes to your computer or other safe location that is not your second factor device. We recommend using a password manager.\n\n    *Recovery codes are the only way to ensure you can recover your account if you lose access to your second factor device. Each code can be used only once. You can [view and regenerate your recovery code](recovering-your-2fa-enabled-account#viewing-and-regenerating-recovery-code) from your 2FA settings page. For secondary account recovery options, see \"[Configuring account recovery options](configuring-two-factor-authentication#configuring-account-recovery-options).\"*\n\n8.  Click **Go back to settings** after confirming that you have saved your codes.\n\n### [Disabling 2FA for writes](#disabling-2fa-for-writes)\n\nCheck the [Authorization and writes](about-two-factor-authentication#authorization-and-writes) section for more information on different operations that requires 2FA when this mode is enabled.\n\n**Note**: As a recommended setting, 2FA for write operations are *automatically enabled* when setting up 2FA. The following steps explain how to disable it.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  On the account settings page, under \"Two-Factor Authentication\", click **Modify 2FA**.\n\n4.  From the \"Manage Two-Factor Authentication\" navigate to \"Additional Options\" section\n\n5.  Clear the checkbox for \"Require two-factor authentication for write actions\" and click \"Update Preferences\"\n\n### [Disabling 2FA](#disabling-2fa)\n\nIf you have 2FA enabled, you can remove it from your account settings page.\n\n**Note:** You cannot remove 2FA if you are a member of an organization that enforces 2FA. You can view the list of organizations memberships from your profile page under the \"Organizations\" tab.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  On the account settings page, under \"Two-Factor Authentication\", click **Modify 2FA**.\n\n4.  Scroll to the bottom of the \"Manage Two-Factor Authentication\" page and click Disable 2FA.\n\n5.  Agree to the prompt from the browser.\n\n## [Configuring 2FA from the command line](#configuring-2fa-from-the-command-line)\n\n### [Enabling 2FA from the command line](#enabling-2fa-from-the-command-line)\n\nAlthough security-key with WebAuthn can be used for authentication from both the web and the command line, it can only be configured from the web. When enabling 2FA from the command line, currently the only available option is to use an TOTP mobile app.\n\n**Note:** Settings you configure on the command line will also apply to your profile settings on the npm website.\n\n1.  If you are logged out on the command line, log in using `npm login` command.\n\n2.  On the command line, type the [`npm profile`](https://docs.npmjs.com/cli/v8/commands/npm-profile/) command along with the option for the 2FA mode you want to enable:\n\n    - To enable 2FA for authorization and writes, type:\n\n      `npm profile enable-2fa auth-and-writes`\n\n    - To enable 2FA for authorization only, type:\n\n      `npm profile enable-2fa auth-only`\n\n3.  To add npm to your authenticator application, using the device with the app, you can either:\n\n    - Scan the QR code displayed on the command line.\n    - Type the number displayed below the QR code.\n\n4.  When prompted to add an OTP code from your authenticator, on the command line, enter a one-time password generated by your authenticator app.\n\n### [Sending a one-time password from the command line](#sending-a-one-time-password-from-the-command-line)\n\nIf you have enabled 2FA auth-and-writes, you will need to send the TOTP from the command line for certain commands to work. To do this, append `--otp=123456` (where *123456* is the code generated by your authenticator) at the end of the command. Here are a few examples:\n\n``` javascript\nnpm publish [<tarball>|<folder>][--tag <tag>] --otp=123456\nnpm owner add <user > --otp=123456\nnpm owner rm <user> --otp=123456\nnpm dist-tags add <pkg>@<version> [<tag>] --otp=123456\nnpm access edit [<package>) --otp=123456\nnpm unpublish [<@scope>/]<pkg>[@<version>] --otp=123456\n```\n\n### [Removing 2FA from the command line](#removing-2fa-from-the-command-line)\n\n1.  If you are logged out on the command line, log in using `npm login` command.\n\n2.  On the command line, type the following command:\n\n    `npm profile disable-2fa`\n\n3.  When prompted, enter your npm password:\n\n4.  When prompted for a one-time password, enter a password from your authenticator app:\n\n## [Configuring account recovery options](#configuring-account-recovery-options)\n\nWhen you enable 2FA on your npm user account, we strongly recommend you link your GitHub and/or Twitter accounts to your npm user account. In the event you lose access to your 2FA device and recovery codes, these linked accounts can be used to verify your identity and expedite the recovery of your npm account.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  To [link your GitHub](managing-your-profile-settings#linking-your-npm-and-github-accounts) account, on the account settings page, under \"Linked Accounts & Recovery Option\", click **Link with GitHub**.\n\n4.  On the authorization page, verify all information looks correct. Then click **Authorize npm account link**.\n\n5.  To [link your Twitter](managing-your-profile-settings#linking-your-npm-and-twitter-accounts) account, on the account settings page, under \"Linked Accounts & Recovery Option\", click **Link with Twitter**.\n\n6.  On the authorization page, verify all information looks correct. Then click **Authorize app**.\n\nThe Twitter or GitHub account is now linked to your npm account. To remove the link to either account, you can click the **Remove** button next to the account you want to remove from your npm account.\n\n## [Resolving TOTP errors](#resolving-totp-errors)\n\nIf you are entering what seems to be a valid [TOTP](https://en.wikipedia.org/wiki/Time-based_one-time_password) but you see an error, be sure that you are using the correct authenticator account. If you have multiple authenticator accounts, using an TOTP from the wrong account will cause an error.\n\nAlso, when you reset two-factor authentication after it has been disabled, the authenticator might create a second account with the same name. Please see the authenticator documentation to delete the old account.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/configuring-two-factor-authentication](https://docs.npmjs.com/configuring-two-factor-authentication)"
- name: Configuring your local environment
  id: getting-started/configuring-your-local-environment
  summary: © npm, Inc
  description: "# Configuring your local environment\n\n- [About npm CLI versions](../about-npm-versions)\n- [Downloading and installing Node.js and npm](../downloading-and-installing-node-js-and-npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/getting-started/configuring-your-local-environment](https://docs.npmjs.com/getting-started/configuring-your-local-environment)"
- name: Configuring your npm client with your organization settings
  id: configuring-your-npm-client-with-your-organization-settings
  summary: Before configuring your npm client, you must install npm
  description: "# Configuring your npm client with your organization settings\n\nAs an organization member, you can configure your npm client to:\n\n- make a single package or all new packages you create locally use your organization's scope\n- make a single package or all new packages you create locally have default public visibility\n\nBefore configuring your npm client, you must [install npm](downloading-and-installing-node-js-and-npm).\n\n## [Configuring your npm client to use your organization's scope](#configuring-your-npm-client-to-use-your-organizations-scope)\n\nIf you will be publishing packages with your organization's scope often, you can add your organization's scope to your global `.npmrc` configuration file.\n\n### [Setting your organization scope for all new packages](#setting-your-organization-scope-for-all-new-packages)\n\n**Note:** Setting the organization scope using the steps below will only set the scope for new packages; for existing packages, you will need to update the `name` field in `package.json`.\n\nOn the command line, run the following command, replacing \\<org-name\\> with the name of your organization:\n\n`npm config set scope <org-name> --global`\n\nFor packages you do not want to publish with your organization's scope, you must manually edit the package's `package.json` to remove the organization scope from the `name` field.\n\n### [Setting your organization scope for a single package](#setting-your-organization-scope-for-a-single-package)\n\n1.  On the command line, navigate to the package directory.\n\n    `cd /path/to/package`\n\n2.  Run the following command, replacing \\<org-name\\> with the name of your organization:\n\n    `npm config set scope <org-name>`\n\n## [Changing default package visibility to public](#changing-default-package-visibility-to-public)\n\nBy default, publishing a scoped package with `npm publish` will publish the package as private. If you are a member of an organization on the free organization plan, or are on the paid organization plan but want to publish a scoped package as public, you must pass the `--access public` flag:\n\n`npm publish --access public`\n\n### [Setting package visibility to public for a single package](#setting-package-visibility-to-public-for-a-single-package)\n\nYou can set a single package to pass `--access public` to every `npm publish` command that you issue for that package.\n\n1.  On the command line, navigate to the package directory.\n\n    `cd /path/to/package`\n\n2.  Run the following command:\n\n    `npm config set access public`\n\n### [Setting package visibility to public for all packages](#setting-package-visibility-to-public-for-all-packages)\n\nYou can set all packages to pass `--access public` to every `npm publish` command that you issue for that package.\n\n**Warning:** Setting packages access to `public` in your global `.npmrc` will affect all packages you create, including packages in your personal account scope, as well as packages scoped to your organization.\n\nOn the command line, run the following command:\n\n`npm config set access public --global`\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/configuring-your-npm-client-with-your-organization-settings](https://docs.npmjs.com/configuring-your-npm-client-with-your-organization-settings)"
- name: Contributing packages to the registry
  id: packages-and-modules/contributing-packages-to-the-registry
  summary: © npm, Inc
  description: "# Contributing packages to the registry\n\n- [Creating a package.json file](../creating-a-package-json-file)\n- [Creating Node.js modules](../creating-node-js-modules)\n- [About package README files](../about-package-readme-files)\n- [Creating and publishing unscoped public packages](../creating-and-publishing-unscoped-public-packages)\n- [Creating and publishing scoped public packages](../creating-and-publishing-scoped-public-packages)\n- [Creating and publishing private packages](../creating-and-publishing-private-packages)\n- [Package name guidelines](../package-name-guidelines)\n- [Specifying dependencies and devDependencies in a package.json file](../specifying-dependencies-and-devdependencies-in-a-package-json-file)\n- [About semantic versioning](../about-semantic-versioning)\n- [Adding dist-tags to packages](../adding-dist-tags-to-packages)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry](https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry)"
- name: Converting your user account to an organization
  id: converting-your-user-account-to-an-organization
  summary: If you have an npm user account, you can convert your user account to an organization
  description: "# Converting your user account to an organization\n\nIf you have an npm user account, you can convert your user account to an organization. When you convert your user account to an organization, we will:\n\n- Create a new organization with the name of your user account.\n- Prompt you to create a new npm user account. We recommend choosing a variation of your old user name so collaborators will recognize you. For example, if your old username was \"wombat\", your new username might be \"wombat-new\".\n- Make your new npm user account an owner of your new organization.\n- Add your new npm user account to a team called \"Developers\" in your new organization.\n- Transfer packages owned by your user account to your new organization.\n- Transfer your existing organization and team memberships and contributor access settings to your new user account.\n\n**Note:** Once your old user account has been converted to an organization, you will no longer be able to sign in to npm with your old user account.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Add an Organization**.\n\n3.  Below the account creation form, click **Convert**.\n\n4.  Review the account conversion steps and click **Continue**.\n\n5.  On the new user account creation page, in the \"Username\" field, type the name of your new user account, then click **Submit**.\n\n6.  On the plan selection page, select either the \"Unlimited private packages\" paid plan or the \"Unlimited public packages\" free plan, then click **Buy** or **Create**.\n\n7.  If you selected to use the unlimited private packages plan, in the payment dialog, provide the email, name, address, and credit card information for the card that will be used to pay for the organization.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/converting-your-user-account-to-an-organization](https://docs.npmjs.com/converting-your-user-account-to-an-organization)"
- name: cpu
  id: cli/v10/configuring-npm/package-json#cpu
  summary: If your code only runs on certain cpu architectures, you can specify which ones
  belongs_to: package.json
  description: |-
    ### [cpu](#cpu)

    If your code only runs on certain cpu architectures, you can specify which ones.

    ``` javascript
    {
      "cpu": ["x64", "ia32"]
    }
    ```

    Like the `os` option, you can also block architectures:

    ``` javascript
    {
      "cpu": ["!arm", "!mips"]
    }
    ```

    The host architecture is determined by `process.arch`
- name: cpu
  id: cli/v10/using-npm/config#cpu
  summary: Override CPU architecture of native modules to install
  belongs_to: config
  description: |-
    #### [`cpu`](#cpu)

    - Default: null
    - Type: null or String

    Override CPU architecture of native modules to install. Acceptable values are same as `cpu` field of package.json, which comes from `process.arch`.
- name: Creating a new user account on the public registry
  id: creating-a-new-npm-user-account
  summary: If you do not already have an npm user account, you can create an account in order to share and download Javascript packages on the public registry
  description: "# Creating a new user account on the public registry\n\nIf you do not already have an npm user account, you can create an account in order to share and download Javascript packages on the public registry.\n\n## [Creating an account on the website](#creating-an-account-on-the-website)\n\n1.  Go to the [npm signup page](https://www.npmjs.com/signup)\n\n2.  In the user signup form, type in the fields:\n\n    - **Username:** The username that will be displayed when you publish packages or interact with other npm users on npmjs.com. Your username must be lower case, and can contain hyphens and numerals.\n    - **Email address:** Your public email address will be added to the metadata of your packages and will be visible to anyone who downloads your packages. We will also send email to this account when you update packages, as well as occasional product updates and information.\n    - **Password**: Your password must meet [our password guidelines](creating-a-strong-password).\n\n3.  Read the [End User License Agreement](https://www.npmjs.com/policies/terms) and [Privacy Policy](https://www.npmjs.com/policies/privacy), and indicate that you agree to them.\n\n4.  Click **Create An Account**.\n\n**Note:** After signing up for an npm account, you will receive an account verification email. You must verify your email address in order to publish packages to the registry.\n\n## [Testing your new account with npm login](#testing-your-new-account-with-npm-login)\n\nUse the [`npm login`](https://docs.npmjs.com/cli/v8/commands/npm-adduser/) command to test logging in to your new account.\n\n**Note:** If you misspell your existing account username when you log in with the `npm login` command, you will create a new account with the misspelled name. For help with accidentally-created accounts, [contact npm Support](https://www.npmjs.com/support).\n\n1.  On the command line, type the following command:\n\n    `npm login`\n\n2.  When prompted, enter your username, password, and email address.\n\n3.  If you have [two-factor authentication](about-two-factor-authentication) enabled, when prompted, enter a one-time password.\n\n4.  To test that you have successfully logged in, type:\n\n    `npm whoami`\n\n    Your npm username should be displayed.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-a-new-npm-user-account](https://docs.npmjs.com/creating-a-new-npm-user-account)"
- name: Creating a package.json file
  id: creating-a-package-json-file
  summary: You can add a package.json file to your package to make it easy for others to manage and install
  description: "# Creating a package.json file\n\nYou can add a `package.json` file to your package to make it easy for others to manage and install. Packages published to the registry must contain a `package.json` file.\n\nA `package.json` file:\n\n- lists the packages your project depends on\n- specifies versions of a package that your project can use using [semantic versioning rules](about-semantic-versioning)\n- makes your build reproducible, and therefore easier to share with other developers\n\n**Note:** To make your package easier to find on the npm website, we recommend including a custom `description` in your `package.json` file.\n\n## [`package.json` fields](#packagejson-fields)\n\n### [Required `name` and `version` fields](#required-name-and-version-fields)\n\nA `package.json` file must contain `\"name\"` and `\"version\"` fields.\n\nThe `\"name\"` field contains your package's name, and must be lowercase and one word, and may contain hyphens and underscores.\n\nThe `\"version\"` field must be in the form `x.x.x` and follow the [semantic versioning guidelines](about-semantic-versioning).\n\n### [Author field](#author-field)\n\nIf you want to include package author information in `\"author\"` field, use the following format (email and website are both optional):\n\n`Your Name <email@example.com> (http://example.com)`\n\n### [Example](#example)\n\n``` javascript\n{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\",\n  \"author\": \"Your Name <email@example.com>\"\n}\n```\n\n## [Creating a new `package.json` file](#creating-a-new-packagejson-file)\n\nYou can create a `package.json` file by running a CLI questionnaire or creating a default `package.json` file.\n\n### [Running a CLI questionnaire](#running-a-cli-questionnaire)\n\nTo create a `package.json` file with values that you supply, use the `npm init` command.\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  Run the following command:\n\n    `npm init`\n\n3.  Answer the questions in the command line questionnaire.\n\n#### [Customizing the `package.json` questionnaire](#customizing-the-packagejson-questionnaire)\n\nIf you expect to create many `package.json` files, you can customize the questions asked and fields created during the `init` process so all the `package.json` files contain a standard set of information.\n\n1.  In your home directory, create a file called `.npm-init.js`.\n\n2.  To add custom questions, using a text editor, add questions with the `prompt` function:\n\n    `module.exports = prompt(\"what's your favorite flavor of ice cream, buddy?\", \"I LIKE THEM ALL\");`\n\n3.  To add custom fields, using a text editor, add desired fields to the `.npm-init.js` file:\n\n    ``` javascript\n    module.exports = {\n      customField: 'Example custom field',\n      otherCustomField: 'This example field is really cool'\n    }\n    ```\n\nTo learn more about creating advanced `npm init` customizations, see the [init-package-json GitHub repository](https://github.com/npm/init-package-json).\n\n### [Creating a default `package.json` file](#creating-a-default-packagejson-file)\n\nTo create a default `package.json` using information extracted from the current directory, use the `npm init` command with the `--yes` or `-y` flag. For a list of default values, see \"[Default values extracted from the current directory](#default-values-extracted-from-the-current-directory)\".\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  Run the following command:\n\n    `npm init --yes`\n\n#### [Example](#example-1)\n\n``` javascript\n> npm init --yes\nWrote to /home/monatheoctocat/my_package/package.json:\n\n\n{\n  \"name\": \"my_package\",\n  \"description\": \"\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/monatheoctocat/my_package.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/monatheoctocat/my_package/issues\"\n  },\n  \"homepage\": \"https://github.com/monatheoctocat/my_package\"\n}\n```\n\n#### [Default values extracted from the current directory](#default-values-extracted-from-the-current-directory)\n\n- `name`: the current directory name\n- `version`: always `1.0.0`\n- `description`: info from the README, or an empty string `\"\"`\n- `scripts`: by default creates an empty `test` script\n- `keywords`: empty\n- `author`: empty\n- `license`: [`ISC`](https://opensource.org/licenses/ISC)\n- `bugs`: information from the current directory, if present\n- `homepage`: information from the current directory, if present\n\n### [Setting config options for the init command](#setting-config-options-for-the-init-command)\n\nYou can set default config options for the init command. For example, to set the default author email, author name, and license, on the command line, run the following commands:\n\n``` javascript\n> npm set init-author-email \"example-user@example.com\"\n> npm set init-author-name \"example_user\"\n> npm set init-license \"MIT\"\n```\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-a-package-json-file](https://docs.npmjs.com/creating-a-package-json-file)"
- name: Creating a strong password
  id: creating-a-strong-password
  summary: Secure your npm account with a strong and unique password using a password manager
  description: "# Creating a strong password\n\nSecure your npm account with a strong and unique password using a password manager.\n\nYou must choose or generate a password for your npm account that:\n\n- is longer than 10 characters\n- does not match or significantly contain your username, e.g. do not use 'username123'\n- has not been compromised and known to the [Have I Been Pwned](https://haveibeenpwned.com/) breach database\n\nTo keep your account secure, we recommend you follow these best practices:\n\n- Use a password manager, such as [1Password](https://1password.com/), to generate a password more than 16 characters.\n- Generate a unique password for npm. If you use your npm password elsewhere and that service is compromised, then attackers or other malicious actors could use that information to access your npm account.\n- Configure two-factor authentication for your account. For more information, see \"About two-factor authentication.\"\n- Never share your password, even with a potential collaborator. Each person should use their own personal account on npm. For more information on ways to collaborate, see: \"[npm organizations](organizations)\".\n\nWhen you type a password to sign in, create an account, or change your password, npm will check if the password you entered is considered weak according to datasets like HaveIBeenPwned. The password may be identified as weak even if you have never used that password before.\n\nnpm only inspects the password at the time you type it, and never stores the password you entered in plaintext. For more information, see [HaveIBeenPwned](https://haveibeenpwned.com/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-a-strong-password](https://docs.npmjs.com/creating-a-strong-password)"
- name: Creating an organization
  id: creating-an-organization
  summary: Any npm user can create an organization to manage contributor access to packages governed by the organization
  description: "# Creating an organization\n\nAny npm user can create an organization to manage contributor access to packages governed by the organization.\n\n**Note:** You need an npm user account to create an organization. To create a user account, visit the [account signup page](https://www.npmjs.com/signup)\".\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Add an Organization**.\n\n3.  On the organization creation page, in the **Name** field, type a name for your organization. Your organization name will also be your organization scope.\n\n4.  Under the **Name** field, choose either the \"Unlimited private packages\" paid plan or the \"Unlimited public packages\" free plan and click **Buy** or **Create**.\n\n5.  (Optional) On the organization invitation page, type the npm username or email address of a person you would like to add to your organization as a member and select a team to invite them to, then click **Invite**.\n\n6.  Click **Continue**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-an-organization](https://docs.npmjs.com/creating-an-organization)"
- name: Creating and managing organizations
  id: organizations/creating-and-managing-organizations
  summary: © npm, Inc
  description: "# Creating and managing organizations\n\n- [Creating an organization](../creating-an-organization)\n- [Converting your user account to an organization](../converting-your-user-account-to-an-organization)\n- [Requiring two-factor authentication in your organization](../requiring-two-factor-authentication-in-your-organization)\n- [Renaming an organization](../renaming-an-organization)\n- [Deleting an organization](../deleting-an-organization)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/organizations/creating-and-managing-organizations](https://docs.npmjs.com/organizations/creating-and-managing-organizations)"
- name: Creating and publishing an organization scoped package
  id: creating-and-publishing-an-organization-scoped-package
  summary: As an organization member, you can create and publish public and private packages within the organization's scope
  description: "# Creating and publishing an organization scoped package\n\nAs an organization member, you can create and publish public and private packages within the organization's scope.\n\n## [Creating an organization scoped package](#creating-an-organization-scoped-package)\n\n1.  On the command line, make a directory with the name of the package you would like to create.\n\n    `mkdir /path/to/package/directory`\n\n2.  Navigate to the newly-created package directory.\n\n3.  To create an organization scoped package, on the command line, run:\n\n    `npm init --scope=<your_org_name>`\n\n4.  To verify the package is using your organization scope, in a text editor, open the package's `package.json` file and check that the name is `@your_org_name/<pkg_name>`, replacing `your_org_name` with the name of your organization.\n\n## [Publishing a private organization scoped package](#publishing-a-private-organization-scoped-package)\n\nBy default, `npm publish` will publish a scoped package as private.\n\nBy default, any scoped package is published as private. However, if you have an organization that does not have the Private Packages feature, `npm publish` will fail unless you pass the `access` flag.\n\n1.  On the command line, navigate to the package directory.\n\n2.  Run `npm publish`.\n\nPrivate packages will say `private` below the package name on the npm website.\n\n## [Publishing a public organization scoped package](#publishing-a-public-organization-scoped-package)\n\nTo publish an organization scoped package as public, use `npm publish --access public`.\n\n1.  On the command line, navigate to the package directory.\n\n2.  Run `npm publish --access public`.\n\nPublic packages will say `public` below the package name on the npm website.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-and-publishing-an-organization-scoped-package](https://docs.npmjs.com/creating-and-publishing-an-organization-scoped-package)"
- name: Creating and publishing private packages
  id: creating-and-publishing-private-packages
  summary: To share your code with a limited set of users or teams, you can publish private user-scoped or organization-scoped packages to the npm registry
  description: "# Creating and publishing private packages\n\nTo share your code with a limited set of users or teams, you can publish private user-scoped or organization-scoped packages to the npm registry.\n\nFor more information on scopes and private packages, see \"[About scopes](about-scopes)\" and \"[About private packages](about-private-packages)\".\n\n**Note:** Before you can publish private user-scoped npm packages, you must [sign up](https://npmjs.com/signup) for a paid npm user account.\n\nAdditionally, to publish private organization-scoped packages, you must [create an npm user account](https://npmjs.com/signup), then [create a paid npm organization](https://www.npmjs.com/signup?next=/org/create).\n\n## [Creating a private package](#creating-a-private-package)\n\n1.  If you are using npmrc to [manage accounts on multiple registries](https://docs.npmjs.com/enterprise#using-npmrc-to-manage-multiple-profiles-for-different-registries), on the command line, switch to the appropriate profile:\n\n    `npmrc <profile-name>`\n\n2.  On the command line, create a directory for your package:\n\n    `mkdir my-test-package`\n\n3.  Navigate to the root directory of your package:\n\n    `cd my-test-package`\n\n4.  If you are using git to manage your package code, in the package root directory, run the following commands, replacing `git-remote-url` with the git remote URL for your package:\n\n    ``` javascript\n    git init\n    git remote add origin git://git-remote-url\n    ```\n\n5.  In the package root directory, run the `npm init` command and pass the scope to the `scope` flag:\n\n    - For an organization-scoped package, replace `my-org` with the name of your organization:\n\n      `npm init --scope=@my-org`\n\n    - For a user-scoped package, replace `my-username` with your username:\n\n      `npm init --scope=@my-username`\n\n6.  Respond to the prompts to generate a [`package.json`](creating-a-package-json-file) file. For help naming your package, see \"[Package name guidelines](package-name-guidelines)\".\n\n7.  Create a [README file](about-package-readme-files) that explains what your package code is and how to use it.\n\n8.  In your preferred text editor, write the code for your package.\n\n## [Reviewing package contents for sensitive or unnecessary information](#reviewing-package-contents-for-sensitive-or-unnecessary-information)\n\nPublishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. **We strongly recommend removing sensitive information, such as private keys, passwords, [personally identifiable information](https://en.wikipedia.org/wiki/Personally_identifiable_information) (PII), and credit card data before publishing your package to the registry.** Even if your package is private, sensitive information can be exposed if the package is made public or downloaded to a computer that can be accessed by more users than intended.\n\nFor less sensitive information, such as testing data, use a `.npmignore` or `.gitignore` file to prevent publishing to the registry. For more information, see [this article](https://docs.npmjs.com/cli/v8/using-npm/developers//#keeping-files-out-of-your-package).\n\n## [Testing your package](#testing-your-package)\n\nTo reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run `npm install` with the full path to your package directory:\n\n`npm install my-package`\n\n## [Publishing private packages](#publishing-private-packages)\n\nBy default, scoped packages are published with private visibility.\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  To publish your private package to the npm registry, run:\n\n    `npm publish`\n\n3.  To see your private package page, visit [https://npmjs.com/package/\\*package-name](https://npmjs.com/package/*package-name)\\*, replacing \\*package-name\\* with the name of your package. Private packages will say `private` below the package name on the npm website.\n\nFor more information on the `publish` command, see the [CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-publish/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-and-publishing-private-packages](https://docs.npmjs.com/creating-and-publishing-private-packages)"
- name: Creating and publishing scoped public packages
  id: creating-and-publishing-scoped-public-packages
  summary: To share your code publicly in a user or organization namespace, you can publish public user-scoped or organization-scoped packages to the npm registry
  description: "# Creating and publishing scoped public packages\n\nTo share your code publicly in a user or organization namespace, you can publish public user-scoped or organization-scoped packages to the npm registry.\n\nFor more information on scopes, see \"[About scopes](about-scopes)\".\n\n**Note:** Before you can publish user-scoped npm packages, you must [sign up](https://www.npmjs.com/signup) for an npm user account.\n\nAdditionally, to publish organization-scoped packages, you must [create an npm user account](https://www.npmjs.com/signup), then [create an npm organization](https://www.npmjs.com/signup?next=/org/create).\n\n## [Creating a scoped public package](#creating-a-scoped-public-package)\n\n1.  If you are using npmrc to [manage accounts on multiple registries](https://docs.npmjs.com/enterprise), on the command line, switch to the appropriate profile:\n\n    `npmrc <profile-name>`\n\n2.  On the command line, create a directory for your package:\n\n    `mkdir my-test-package`\n\n3.  Navigate to the root directory of your package:\n\n    `cd my-test-package`\n\n4.  If you are using git to manage your package code, in the package root directory, run the following commands, replacing `git-remote-url` with the git remote URL for your package:\n\n    ``` javascript\n    git init\n    git remote add origin git://git-remote-url\n    ```\n\n5.  In the package root directory, run the `npm init` command and pass the scope to the `scope` flag:\n\n    - For an organization-scoped package, replace `my-org` with the name of your organization:\n\n      `npm init --scope=@my-org`\n\n    - For a user-scoped package, replace `my-username` with your username:\n\n      `npm init --scope=@my-username`\n\n6.  Respond to the prompts to generate a [`package.json`](creating-a-package-json-file) file. For help naming your package, see \"[Package name guidelines](package-name-guidelines)\".\n\n7.  Create a [README file](about-package-readme-files) that explains what your package code is and how to use it.\n\n8.  In your preferred text editor, write the code for your package.\n\n## [Reviewing package contents for sensitive or unnecessary information](#reviewing-package-contents-for-sensitive-or-unnecessary-information)\n\nPublishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. **We strongly recommend removing sensitive information, such as private keys, passwords, [personally identifiable information](https://en.wikipedia.org/wiki/Personally_identifiable_information) (PII), and credit card data before publishing your package to the registry.**\n\nFor less sensitive information, such as testing data, use a `.npmignore` or `.gitignore` file to prevent publishing to the registry. For more information, see [this article](https://docs.npmjs.com/cli/v8/using-npm/developers//#keeping-files-out-of-your-package).\n\n## [Testing your package](#testing-your-package)\n\nTo reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run `npm install` with the full path to your package directory:\n\n`npm install my-package`\n\n## [Publishing scoped public packages](#publishing-scoped-public-packages)\n\nBy default, scoped packages are published with private visibility. To publish a scoped package with public visibility, use `npm publish --access public`.\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  To publish your scoped public package to the npm registry, run:\n\n    `npm publish --access public`\n\n    **Note:** If you use GitHub Actions to publish your packages, you can generate provenance information for each package you publish. For more information, see \"[Generating provenance statements](generating-provenance-statements).\"\n\n3.  To see your public package page, visit [https://npmjs.com/package/\\\\package-name\\\\](https://npmjs.com/package/%5C*package-name%5C)\\*, replacing \\*package-name\\* with the name of your package. Public packages will say `public` below the package name on the npm website.\n\nFor more information on the `publish` command, see the [CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-publish/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-and-publishing-scoped-public-packages](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages)"
- name: Creating and publishing unscoped public packages
  id: creating-and-publishing-unscoped-public-packages
  summary: As an npm user, you can create unscoped packages to use in your own projects and publish them to the npm public registry for others to use in theirs
  description: "# Creating and publishing unscoped public packages\n\nAs an npm user, you can create unscoped packages to use in your own projects and publish them to the npm public registry for others to use in theirs. Unscoped packages are always public and are referred to by the package name only:\n\n`package-name`\n\nFor more information on package scope, access, and visibility, see \"[Package scope, access level, and visibility](package-scope-access-level-and-visibility)\".\n\n**Note:** Before you can publish public unscoped npm packages, you must [sign up](https://www.npmjs.com/signup) for an npm user account.\n\n## [Creating an unscoped public package](#creating-an-unscoped-public-package)\n\n1.  On the command line, create a directory for your package:\n\n    `mkdir my-test-package`\n\n2.  Navigate to the root directory of your package:\n\n    `cd my-test-package`\n\n3.  If you are using git to manage your package code, in the package root directory, run the following commands, replacing `git-remote-url` with the git remote URL for your package:\n\n    ``` javascript\n    git init\n    git remote add origin git://git-remote-url\n    ```\n\n4.  In the package root directory, run the `npm init` command.\n\n5.  Respond to the prompts to generate a [`package.json`](creating-a-package-json-file) file. For help naming your package, see \"[Package name guidelines](package-name-guidelines)\".\n\n6.  Create a [README file](about-package-readme-files) that explains what your package code is and how to use it.\n\n7.  In your preferred text editor, write the code for your package.\n\n## [Reviewing package contents for sensitive or unnecessary information](#reviewing-package-contents-for-sensitive-or-unnecessary-information)\n\nPublishing sensitive information to the registry can harm your users, compromise your development infrastructure, be expensive to fix, and put you at risk of legal action. **We strongly recommend removing sensitive information, such as private keys, passwords, [personally identifiable information](https://en.wikipedia.org/wiki/Personally_identifiable_information) (PII), and credit card data before publishing your package to the registry.**\n\nFor less sensitive information, such as testing data, use a `.npmignore` or `.gitignore` file to prevent publishing to the registry. For more information, see [this article](https://docs.npmjs.com/cli/v8/using-npm/developers//#keeping-files-out-of-your-package).\n\n## [Testing your package](#testing-your-package)\n\nTo reduce the chances of publishing bugs, we recommend testing your package before publishing it to the npm registry. To test your package, run `npm install` with the full path to your package directory:\n\n`npm install path/to/my-package`\n\n## [Publishing unscoped public packages](#publishing-unscoped-public-packages)\n\n1.  On the command line, navigate to the root directory of your package.\n\n    `cd /path/to/package`\n\n2.  To publish your public package to the npm registry, run:\n\n    `npm publish`\n\n    **Note:** If you use GitHub Actions to publish your packages, you can generate provenance information for each package you publish. For more information, see \"[Generating provenance statements](generating-provenance-statements).\"\n\n3.  To see your public package page, visit `https://npmjs.com/package/*package-name*`, replacing `*package-name*` with the name of your package. Public packages will say `public` below the package name on the npm website.\n\nFor more information on the `publish` command, see the [CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-publish/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages](https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages)"
- name: Creating and viewing access tokens
  id: creating-and-viewing-access-tokens
  summary: You can create and view access tokens from the website and command line interface (CLI)
  description: "# Creating and viewing access tokens\n\nYou can [create](#creating-access-tokens) and [view](#viewing-access-tokens) access tokens from the website and command line interface (CLI).\n\n## [Creating access tokens](#creating-access-tokens)\n\n### [Creating legacy tokens on the website](#creating-legacy-tokens-on-the-website)\n\n**Note:** For greater security, we recommend using [granular access tokens](#creating-granular-access-tokens-on-the-website) instead of legacy read-only tokens or legacy automation tokens.\n\n1.  In the upper right corner of the page, click your profile picture, then click **Access Tokens**.\n\n2.  Click **Generate New Token**, then select **legacy token** from the dropdown menu.\n\n3.  (Optional) Name your token.\n\n4.  Select the type of access token:\n\n    - **Read-only**: A read-only token can only be used to download packages from the registry. It will have permission to read any private package that you have access to. This is recommended for automation and workflows where you are installing packages, but not publishing new ones.\n\n    - **Automation**: An automation token can download packages and publish new ones, but if you have two-factor authentication (2FA) configured on your account, it will **not** be enforced. You can use an automation token in continuous integration workflows and other automation systems to publish a package even when you cannot enter a one-time passcode.\n\n    - **Publish**: A publish token can perform any action on your behalf, including downloading packages, publishing packages, and changing user settings or package settings. If you have two-factor authentication configured on your account, you will be required to enter a one-time passcode when using a publish token. This is recommended for interactive workflows such as a CLI.\n\n5.  Click **Generate Token**.\n\n6.  Copy the token from the top of page.\n\n### [Creating granular access tokens on the website](#creating-granular-access-tokens-on-the-website)\n\n1.  In the upper right corner of the page, click your profile picture, then click **Access Tokens**.\n\n2.  Click **Generate New Token**, then click **Granular Access Token**.\n\n3.  In the **Token name** field, enter a name for your token.\n\n4.  (Optional) In the **Description** field, enter a description for your token.\n\n5.  In the **Expiration** field, enter a token expiration period. The date must be at least 1 day in the future.\n\n6.  (Optional) In the **Allowed IP Ranges** field, enter IP address ranges to restrict your access token to. You must use [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation to enter IP address ranges. To add more than one allowed IP range, click **Add IP Range** and enter an IP range in the new text field.\n\n7.  (Optional) In the **Packages and scopes** section, configure your token's access to packages and scopes.\n\n    - In the **Permissions** dropdown menu, select **No access**, **Read-only**, or **Read and write**.\n    - Under **Select Packages**, select either:\n      - **All Packages** to grant the token access to all packages the user account has access to.\n      - **Only select packages and scopes** to choose up to 50 specific packages or scopes to give the token access to. Then select specific packages or scopes from the dropdown menu.\n\n8.  (Optional) In the **Organizations** section, configure your token's access to organizations.\n\n    - In the **Permissions** dropdown menu, select **No access**, **Read-only**, or **Read and write**.\n    - Under **Select organizations**, select the organizations you want to grant your token access to.\n\n    ***Note**: When you give a token access to an organization, the token can only be used for managing organization settings and teams or users associated with the organization. It does not give the token the right to publish packages managed by the organization.*\n\n9.  Review the token summary, then click **Generate Token**.\n\n10. Copy the token from the top of page.\n\n### [Creating tokens with the CLI](#creating-tokens-with-the-cli)\n\nYou can create tokens with **read-only** permissions or **read and publish** permissions with the CLI.\n\n**Note:** You cannot create legacy automation tokens or granular access tokens from the CLI. You must use the website to generate these types of tokens. For more information, see \"[Creating legacy tokens on the website](#creating-legacy-tokens-on-the-website)\" and \"[Creating granular access tokens on the website](#creating-granular-access-tokens-on-the-website).\"\n\n- **Read-only:** Tokens that allow installation and distribution only, but no publishing or other rights associated with your account.\n- **Publish:** The default setting for new tokens, and most permissive token type. Publish tokens allow installation, distribution, modification, publishing, and all rights that you have on your account.\n\nIn addition, you can specify that the token is only valid for a specific IPv4 address range, using [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation. The token will only be valid when used from the specified IP addresses.\n\n1.  To create a new token, on the command line, run:\n    - `npm token create` for a read and publish token\n    - `npm token create --read-only` for a read-only token\n    - `npm token create --cidr=[list]` for a CIDR-restricted read and publish token. For example, `npm token create --cidr=192.0.2.0/24`\n    - `npm token create --read-only --cidr=[list]` for a CIDR-restricted read-only token\n2.  When prompted, enter your password.\n3.  If you have enabled [two-factor authentication](about-two-factor-authentication), when prompted, enter a one-time password.\n4.  Copy the token from the **token** field in the command output.\n\n#### [CIDR-restricted token errors](#cidr-restricted-token-errors)\n\nIf the CIDR string you enter is invalid or in an inappropriate format, you will get an error similar to the one below:\n\n`npm ERR! CIDR whitelist contains invalid CIDR entry: X.X.X.X./YY,Z.Z.. . .`\n\nMake sure you are using a valid IPv4 range and try creating the token again.\n\n## [Viewing access tokens](#viewing-access-tokens)\n\n**Note:** Full tokens are never displayed, only the first and last four characters will be shown. You can only view a full token immediately after creation.\n\n### [Viewing tokens on the website](#viewing-tokens-on-the-website)\n\nTo view all tokens associated with your account, in the upper right corner of the page, click your profile picture, then click **Access Tokens**.\n\n### [Viewing tokens on the CLI](#viewing-tokens-on-the-cli)\n\nTo view all tokens associated with your account, on the command line, run the following command:\n\n`npm token list`\n\n#### [Token attributes](#token-attributes)\n\n- **id:** Use the token ID to refer to the token in commands.\n- **token:** The first digits of the actual token.\n- **create:** Date the token was created.\n- **readonly:** If yes, indicates a read-only token. If no, indicates a token with both read and publish permissions.\n- **CIDR whitelist:** Restricts token use by IP address.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-and-viewing-access-tokens](https://docs.npmjs.com/creating-and-viewing-access-tokens)"
- name: Creating Node.js modules
  id: creating-node-js-modules
  summary: Node.js modules are a type of package that can be published to npm
  description: "# Creating Node.js modules\n\nNode.js modules are a type of [package](about-packages-and-modules) that can be published to npm.\n\n## [Overview](#overview)\n\n1.  [Create a `package.json` file](#create-a-package-json-file)\n2.  [Create the file that will be loaded when your module is required by another application](#create-the-file-that-will-be-loaded-when-your-module-is-required-by-another-application)\n3.  [Test your module](#test-your-module)\n\n## [Create a `package.json` file](#create-a-packagejson-file)\n\n1.  To create a `package.json` file, on the command line, in the root directory of your Node.js module, run `npm init`:\n    - For [scoped modules](about-scopes), run `npm init --scope=@scope-name`\n    - For [unscoped modules](creating-and-publishing-unscoped-public-packages), run `npm init`\n2.  Provide responses for the required fields (`name` and `version`), as well as the `main` field:\n    - `name`: The name of your module.\n    - `version`: The initial module version. We recommend following [semantic versioning guidelines](about-semantic-versioning) and starting with `1.0.0`.\n\nFor more information on `package.json` files, see \"[Creating a package.json file](creating-a-package-json-file)\".\n\n## [Create the file that will be loaded when your module is required by another application](#create-the-file-that-will-be-loaded-when-your-module-is-required-by-another-application)\n\nIn the file, add a function as a property of the `exports` object. This will make the function available to other code:\n\n``` javascript\nexports.printMsg = function() {\n  console.log(\"This is a message from the demo package\");\n}\n```\n\n## [Test your module](#test-your-module)\n\n1.  Publish your package to npm:\n\n    - For [private packages](creating-and-publishing-private-packages#publishing-private-packages) and [unscoped packages](creating-and-publishing-unscoped-public-packages#publishing-unscoped-public-packages), use `npm publish`.\n    - For [scoped public packages](creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages), use `npm publish --access public`\n\n2.  On the command line, create a new test directory outside of your project directory.\n\n    `mkdir test-directory`\n\n3.  Switch to the new directory:\n\n    `cd /path/to/test-directory`\n\n4.  In the test directory, install your module:\n\n    `npm install <your-module-name>`\n\n5.  In the test directory, create a `test.js` file which requires your module and calls your module as a method.\n\n6.  On the command line, run `node test.js`. The message sent to the console.log should appear.\n\n## [Resources](#resources)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-node-js-modules](https://docs.npmjs.com/creating-node-js-modules)"
- name: Creating teams
  id: creating-teams
  summary: As an organization owner or team admin, you can create teams to manage access to sets of packages governed by your organization
  description: "# Creating teams\n\nAs an organization owner or team admin, you can create teams to manage access to sets of packages governed by your organization.\n\n**Note:** Team names cannot be changed. To \"rename\" a team, you must delete the team and recreate it.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  In the \"Name\" and \"Description\" fields, type a team name and helpful description. Team names must be lower case and cannot contain spaces or punctuation.\n\n6.  Click **Create Team**.\n\n**Note:** New teams do not have members or package access by default. Once you create a team, add packages and members from the \"Teams\" tab.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/creating-teams](https://docs.npmjs.com/creating-teams)"
- name: default-configs
  id: cli/v10/using-npm/config#default-configs
  summary: Run npm config ls -l to see a set of configuration parameters that are internal to npm, and are defaults if nothing else is specified
  belongs_to: config
  description: |-
    #### [Default Configs](#default-configs)

    Run `npm config ls -l` to see a set of configuration parameters that are internal to npm, and are defaults if nothing else is specified.

    ### [Shorthands and Other CLI Niceties](#shorthands-and-other-cli-niceties)

    The following shorthands are parsed on the command-line:

    - `-a`: `--all`
    - `--enjoy-by`: `--before`
    - `-c`: `--call`
    - `--desc`: `--description`
    - `-f`: `--force`
    - `-g`: `--global`
    - `--iwr`: `--include-workspace-root`
    - `-L`: `--location`
    - `-d`: `--loglevel info`
    - `-s`: `--loglevel silent`
    - `--silent`: `--loglevel silent`
    - `--ddd`: `--loglevel silly`
    - `--dd`: `--loglevel verbose`
    - `--verbose`: `--loglevel verbose`
    - `-q`: `--loglevel warn`
    - `--quiet`: `--loglevel warn`
    - `-l`: `--long`
    - `-m`: `--message`
    - `--local`: `--no-global`
    - `-n`: `--no-yes`
    - `--no`: `--no-yes`
    - `-p`: `--parseable`
    - `--porcelain`: `--parseable`
    - `-C`: `--prefix`
    - `--readonly`: `--read-only`
    - `--reg`: `--registry`
    - `-S`: `--save`
    - `-B`: `--save-bundle`
    - `-D`: `--save-dev`
    - `-E`: `--save-exact`
    - `-O`: `--save-optional`
    - `-P`: `--save-prod`
    - `-?`: `--usage`
    - `-h`: `--usage`
    - `-H`: `--usage`
    - `--help`: `--usage`
    - `-v`: `--version`
    - `-w`: `--workspace`
    - `--ws`: `--workspaces`
    - `-y`: `--yes`

    If the specified configuration param resolves unambiguously to a known configuration parameter, then it is expanded to that configuration parameter. For example:

    ``` javascript
    npm ls --par
    # same as:
    npm ls --parseable
    ```

    If multiple single-character shorthands are strung together, and the resulting combination is unambiguously not some other configuration param, then it is expanded to its various component pieces. For example:

    ``` javascript
    npm ls -gpld
    # same as:
    npm ls --global --parseable --long --loglevel info
    ```

    ### [Config Settings](#config-settings)
- name: default-values
  id: cli/v10/configuring-npm/package-json#default-values
  summary: npm will default some values based on package contents
  belongs_to: package.json
  description: |-
    ### [DEFAULT VALUES](#default-values)

    npm will default some values based on package contents.

    - `"scripts": {"start": "node server.js"}`

      If there is a `server.js` file in the root of your package, then npm will default the `start` command to `node server.js`.

    - `"scripts":{"install": "node-gyp rebuild"}`

      If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will default the `install` command to compile using node-gyp.

    - `"contributors": [...]`

      If there is an `AUTHORS` file in the root of your package, npm will treat each line as a `Name <email> (url)` format, where email and url are optional. Lines which start with a `#` or are blank, will be ignored.
- name: Deleting an organization
  id: deleting-an-organization
  summary: An organization administrator can delete the organization; packages in the organization will also be deleted if they fulfill the requirements to unpublish packages
  description: "# Deleting an organization\n\nAn organization administrator can delete the organization; packages in the organization will also [be deleted](unpublishing-packages-from-the-registry) if they fulfill the [requirements to unpublish packages](https://docs.npmjs.com/policies/unpublish). Packages that cannot be deleted can be [deprecated](deprecating-and-undeprecating-packages-or-package-versions) instead.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization that you want to delete.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  Under \"delete organization\", click **Delete**.\n\n6.  You will be given an overview of the packages in your organization and what will happen to them when your organization is deleted. Packages that [can be unpublished](unpublishing-packages-from-the-registry) will be deleted.\n\n    If you are sure that you want to continue, enter your organization name and click **Delete this organization**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/deleting-an-organization](https://docs.npmjs.com/deleting-an-organization)"
- name: Deleting your npm user account
  id: deleting-your-npm-user-account
  summary: From the web, you can delete your npm user account
  description: "# Deleting your npm user account\n\nFrom the web, you can delete your npm user account.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  On this page, you will find a button to delete your account. Click that.\n\n4.  You will now be presented with an overview of how many npm packages will be deleted and deprecated as part of your account deletion. If you agree with this, then enter your username and click \"Delete this account\".\n\n5.  You will be immediately logged out, and will not be able to log back in.\n\nIn some cases, you will be presented with an error if we were unable to automatically delete your account. For example. if you are the sole owner of an organization you will need to add an additional owner before your account can be deleted. You will be presented clear instructions of what you will need to do in order to delete your account.\n\nIf you are in doubt about deleting your account, [contact npm Support](https://www.npmjs.com/support).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/deleting-your-npm-user-account](https://docs.npmjs.com/deleting-your-npm-user-account)"
- name: dependencies
  id: cli/v10/configuring-npm/package-json#dependencies
  summary: Dependencies are specified in a simple object that maps a package name to a version range
  belongs_to: package.json
  description: |-
    ### [dependencies](#dependencies)

    Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.

    **Please do not put test harnesses or transpilers or other "development" time tools in your `dependencies` object.** See `devDependencies`, below.

    See [semver](https://github.com/npm/node-semver#versions) for more details about specifying version ranges.

    - `version` Must match `version` exactly
    - `>version` Must be greater than `version`
    - `>=version` etc
    - `<version`
    - `<=version`
    - `~version` "Approximately equivalent to version" See [semver](https://github.com/npm/node-semver#versions)
    - `^version` "Compatible with version" See [semver](https://github.com/npm/node-semver#versions)
    - `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0
    - `http://...` See 'URLs as Dependencies' below
    - `*` Matches any version
    - `""` (just an empty string) Same as `*`
    - `version1 - version2` Same as `>=version1 <=version2`.
    - `range1 || range2` Passes if either range1 or range2 are satisfied.
    - `git...` See 'Git URLs as Dependencies' below
    - `user/repo` See 'GitHub URLs' below
    - `tag` A specific version tagged and published as `tag` See [`npm dist-tag`](../commands/npm-dist-tag)
    - `path/path/path` See [Local Paths](#local-paths) below

    For example, these are all valid:

    ``` javascript
    {
      "dependencies": {
        "foo": "1.0.0 - 2.9999.9999",
        "bar": ">=1.0.2 <2.1.2",
        "baz": ">1.0.2 <=2.3.4",
        "boo": "2.0.1",
        "qux": "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0",
        "asd": "http://asdf.com/asdf.tar.gz",
        "til": "~1.2",
        "elf": "~1.2.3",
        "two": "2.x",
        "thr": "3.3.x",
        "lat": "latest",
        "dyl": "file:../dyl"
      }
    }
    ```

    #### [URLs as Dependencies](#urls-as-dependencies)

    You may specify a tarball URL in place of a version range.

    This tarball will be downloaded and installed locally to your package at install time.

    #### [Git URLs as Dependencies](#git-urls-as-dependencies)

    Git urls are of the form:

    ``` javascript
    <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
    ```

    `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or `git+file`.

    If `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then the default branch is used.

    Examples:

    ``` javascript
    git+ssh://git@github.com:npm/cli.git#v1.0.27
    git+ssh://git@github.com:npm/cli#semver:^5.0
    git+https://isaacs@github.com/npm/cli.git
    git://github.com/npm/cli.git#v1.0.27
    ```

    When installing from a `git` repository, the presence of certain fields in the `package.json` will cause npm to believe it needs to perform a build. To do so your repository will be cloned into a temporary directory, all of its deps installed, relevant scripts run, and the resulting directory packed and installed.

    This flow will occur if your git dependency uses `workspaces`, or if any of the following scripts are present:

    - `build`
    - `prepare`
    - `prepack`
    - `preinstall`
    - `install`
    - `postinstall`

    If your git repository includes pre-built artifacts, you will likely want to make sure that none of the above scripts are defined, or your dependency will be rebuilt for every installation.

    #### [GitHub URLs](#github-urls)

    As of version 1.1.65, you can refer to GitHub urls as just "foo": "user/foo-project". Just as with git URLs, a `commit-ish` suffix can be included. For example:

    ``` javascript
    {
      "name": "foo",
      "version": "0.0.0",
      "dependencies": {
        "express": "expressjs/express",
        "mocha": "mochajs/mocha#4727d357ea",
        "module": "user/repo#feature/branch"
      }
    }
    ```

    #### [Local Paths](#local-paths)

    As of version 2.0.0 you can provide a path to a local directory that contains a package. Local paths can be saved using `npm install -S` or `npm install --save`, using any of these forms:

    ``` javascript
    ../foo/bar
    ~/foo/bar
    ./foo/bar
    /foo/bar
    ```

    in which case they will be normalized to a relative path and added to your `package.json`. For example:

    ``` javascript
    {
      "name": "baz",
      "dependencies": {
        "bar": "file:../foo/bar"
      }
    }
    ```

    This feature is helpful for local offline development and creating tests that require npm installing where you don't want to hit an external server, but should not be used when publishing packages to the public registry.

    *note*: Packages linked by local path will not have their own dependencies installed when `npm install` is ran in this case. You must run `npm install` from inside the local path itself.
- name: Dependency Selector Syntax & Querying
  id: cli/v10/using-npm/dependency-selectors
  summary: The :semver() pseudo selector allows comparing fields from each node's package.json using semver methods
  description: "# Dependency Selector Syntax & Querying\n\nDependency Selector Syntax & Querying\n\n### [Description](#description)\n\nThe [`npm query`](../commands/npm-query) command exposes a new dependency selector syntax (informed by & respecting many aspects of the [CSS Selectors 4 Spec](https://dev.w3.org/csswg/selectors4/#relational)) which:\n\n- Standardizes the shape of, & querying of, dependency graphs with a robust object model, metadata & selector syntax\n- Leverages existing, known language syntax & operators from CSS to make disparate package information broadly accessible\n- Unlocks the ability to answer complex, multi-faceted questions about dependencies, their relationships & associative metadata\n- Consolidates redundant logic of similar query commands in `npm` (ex. `npm fund`, `npm ls`, `npm outdated`, `npm audit` ...)\n\n### [Dependency Selector Syntax `v1.0.0`](#dependency-selector-syntax-v100)\n\n#### [Overview:](#overview)\n\n- there is no \"type\" or \"tag\" selectors (ex. `div, h1, a`) as a dependency/target is the only type of `Node` that can be queried\n- the term \"dependencies\" is in reference to any `Node` found in a `tree` returned by `Arborist`\n\n#### [Combinators](#combinators)\n\n- `>` direct descendant/child\n- any descendant/child\n- `~` sibling\n\n#### [Selectors](#selectors)\n\n- `*` universal selector\n- `#<name>` dependency selector (equivalent to `[name=\"...\"]`)\n- `#<name>@<version>` (equivalent to `[name=<name>]:semver(<version>)`)\n- `,` selector list delimiter\n- `.` dependency type selector\n- `:` pseudo selector\n\n#### [Dependency Type Selectors](#dependency-type-selectors)\n\n- `.prod` dependency found in the `dependencies` section of `package.json`, or is a child of said dependency\n- `.dev` dependency found in the `devDependencies` section of `package.json`, or is a child of said dependency\n- `.optional` dependency found in the `optionalDependencies` section of `package.json`, or has `\"optional\": true` set in its entry in the `peerDependenciesMeta` section of `package.json`, or a child of said dependency\n- `.peer` dependency found in the `peerDependencies` section of `package.json`\n- `.workspace` dependency found in the [`workspaces`](https://docs.npmjs.com/cli/v8/using-npm/workspaces) section of `package.json`\n- `.bundled` dependency found in the `bundleDependencies` section of `package.json`, or is a child of said dependency\n\n#### [Pseudo Selectors](#pseudo-selectors)\n\n- [`:not(<selector>)`](https://developer.mozilla.org/en-US/docs/Web/CSS/:not)\n- [`:has(<selector>)`](https://developer.mozilla.org/en-US/docs/Web/CSS/:has)\n- [`:is(<selector list>)`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is)\n- [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/:root) matches the root node/dependency\n- [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/:scope) matches node/dependency it was queried against\n- [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/:empty) when a dependency has no dependencies\n- [`:private`](https://docs.npmjs.com/cli/v8/configuring-npm/package-json#private) when a dependency is private\n- `:link` when a dependency is linked (for instance, workspaces or packages manually [`linked`](https://docs.npmjs.com/cli/v8/commands/npm-link)\n- `:deduped` when a dependency has been deduped (note that this does *not* always mean the dependency has been hoisted to the root of node_modules)\n- `:overridden` when a dependency has been overridden\n- `:extraneous` when a dependency exists but is not defined as a dependency of any node\n- `:invalid` when a dependency version is out of its ancestors specified range\n- `:missing` when a dependency is not found on disk\n- `:semver(<spec>, [selector], [function])` match a valid [`node-semver`](https://github.com/npm/node-semver) version or range to a selector\n- `:path(<path>)` [glob](https://www.npmjs.com/package/glob) matching based on dependencies path relative to the project\n- `:type(<type>)` [based on currently recognized types](https://github.com/npm/npm-package-arg#result-object)\n- `:outdated(<type>)` when a dependency is outdated\n\n##### [`:semver(<spec>, [selector], [function])`](#semverspec-selector-function)\n\nThe `:semver()` pseudo selector allows comparing fields from each node's `package.json` using [semver](https://github.com/npm/node-semver#readme) methods. It accepts up to 3 parameters, all but the first of which are optional.\n\n- `spec` a semver version or range\n- `selector` an attribute selector for each node (default `[version]`)\n- `function` a semver method to apply, one of: `satisfies`, `intersects`, `subset`, `gt`, `gte`, `gtr`, `lt`, `lte`, `ltr`, `eq`, `neq` or the special function `infer` (default `infer`)\n\nWhen the special `infer` function is used the `spec` and the actual value from the node are compared. If both are versions, according to `semver.valid()`, `eq` is used. If both values are ranges, according to `!semver.valid()`, `intersects` is used. If the values are mixed types `satisfies` is used.\n\nSome examples:\n\n- `:semver(^1.0.0)` returns every node that has a `version` satisfied by the provided range `^1.0.0`\n- `:semver(16.0.0, :attr(engines, [node]))` returns every node which has an `engines.node` property satisfying the version `16.0.0`\n- `:semver(1.0.0, [version], lt)` every node with a `version` less than `1.0.0`\n\n##### [`:outdated(<type>)`](#outdatedtype)\n\nThe `:outdated` pseudo selector retrieves data from the registry and returns information about which of your dependencies are outdated. The type parameter may be one of the following:\n\n- `any` (default) a version exists that is greater than the current one\n- `in-range` a version exists that is greater than the current one, and satisfies at least one if its dependents\n- `out-of-range` a version exists that is greater than the current one, does not satisfy at least one of its dependents\n- `major` a version exists that is a semver major greater than the current one\n- `minor` a version exists that is a semver minor greater than the current one\n- `patch` a version exists that is a semver patch greater than the current one\n\nIn addition to the filtering performed by the pseudo selector, some extra data is added to the resulting objects. The following data can be found under the `queryContext` property of each node.\n\n- `versions` an array of every available version of the given node\n- `outdated.inRange` an array of objects, each with a `from` and `versions`, where `from` is the on-disk location of the node that depends on the current node and `versions` is an array of all available versions that satisfies that dependency. This is only populated if `:outdated(in-range)` is used.\n- `outdated.outOfRange` an array of objects, identical in shape to `inRange`, but where the `versions` array is every available version that does not satisfy the dependency. This is only populated if `:outdated(out-of-range)` is used.\n\nSome examples:\n\n- `:root > :outdated(major)` returns every direct dependency that has a new semver major release\n- `.prod:outdated(in-range)` returns production dependencies that have a new release that satisfies at least one of its edges in\n\n#### [Attribute Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)\n\nThe attribute selector evaluates the key/value pairs in `package.json` if they are `String`s.\n\n- `[]` attribute selector (ie. existence of attribute)\n- `[attribute=value]` attribute value is equivalant...\n- `[attribute~=value]` attribute value contains word...\n- `[attribute*=value]` attribute value contains string...\n- `[attribute|=value]` attribute value is equal to or starts with...\n- `[attribute^=value]` attribute value starts with...\n- `[attribute$=value]` attribute value ends with...\n\n#### [`Array` & `Object` Attribute Selectors](#array--object-attribute-selectors)\n\nThe generic `:attr()` pseudo selector standardizes a pattern which can be used for attribute selection of `Object`s, `Array`s or `Arrays` of `Object`s accessible via `Arborist`'s `Node.package` metadata. This allows for iterative attribute selection beyond top-level `String` evaluation. The last argument passed to `:attr()` must be an `attribute` selector or a nested `:attr()`. See examples below:\n\n#### [`Objects`](#objects)\n\n``` javascript\n/* return dependencies that have a `scripts.test` containing `\"tap\"` */\n*: attr(scripts, [test~=tap]);\n```\n\n#### [Nested `Objects`](#nested-objects)\n\nNested objects are expressed as sequential arguments to `:attr()`.\n\n``` javascript\n/* return dependencies that have a testling config for opera browsers */\n*: attr(testling, browsers, [~=opera]);\n```\n\n#### [`Arrays`](#arrays)\n\n`Array`s specifically uses a special/reserved `.` character in place of a typical attribute name. `Arrays` also support exact `value` matching when a `String` is passed to the selector.\n\n##### [Example of an `Array` Attribute Selection:](#example-of-an-array-attribute-selection)\n\n``` javascript\n/* removes the distinction between properties & arrays */\n/* ie. we'd have to check the property & iterate to match selection */\n*:attr([keywords^=react])\n*:attr(contributors, :attr([name~=Jordan]))\n```\n\n##### [Example of an `Array` matching directly to a value:](#example-of-an-array-matching-directly-to-a-value)\n\n``` javascript\n/* return dependencies that have the exact keyword \"react\" */\n/* this is equivalent to `*:keywords([value=\"react\"])` */\n*: attr([keywords=react]);\n```\n\n##### [Example of an `Array` of `Object`s:](#example-of-an-array-of-objects)\n\n``` javascript\n/* returns */\n*: attr(contributors, [email=ruyadorno @github.com]);\n```\n\n### [Groups](#groups)\n\nDependency groups are defined by the package relationships to their ancestors (ie. the dependency types that are defined in `package.json`). This approach is user-centric as the ecosystem has been taught to think about dependencies in these groups first-and-foremost. Dependencies are allowed to be included in multiple groups (ex. a `prod` dependency may also be a `dev` dependency (in that it's also required by another `dev` dependency) & may also be `bundled` - a selector for that type of dependency would look like: `*.prod.dev.bundled`).\n\n- `.prod`\n- `.dev`\n- `.optional`\n- `.peer`\n- `.bundled`\n- `.workspace`\n\nPlease note that currently `workspace` deps are always `prod` dependencies. Additionally the `.root` dependency is also considered a `prod` dependency.\n\n### [Programmatic Usage](#programmatic-usage)\n\n- `Arborist`'s `Node` Class has a `.querySelectorAll()` method\n  - this method will return a filtered, flattened dependency Arborist `Node` list based on a valid query selector\n\n``` javascript\nconst Arborist = require(\"@npmcli/arborist\");\nconst arb = new Arborist({});\n```\n\n``` javascript\n// root-level\narb.loadActual().then(async (tree) => {\n  // query all production dependencies\n  const results = await tree.querySelectorAll(\".prod\");\n  console.log(results);\n});\n```\n\n``` javascript\n// iterative\narb.loadActual().then(async (tree) => {\n  // query for the deduped version of react\n  const results = await tree.querySelectorAll(\"#react:not(:deduped)\");\n  // query the deduped react for git deps\n  const deps = await results[0].querySelectorAll(\":type(git)\");\n  console.log(deps);\n});\n```\n\n## [See Also](#see-also)\n\n- [npm query](../commands/npm-query)\n- [@npmcli/arborist](https://npm.im/@npmcli/arborist)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/dependency-selectors](https://docs.npmjs.com/cli/v10/using-npm/dependency-selectors)"
- name: Deprecating and undeprecating packages or package versions
  id: deprecating-and-undeprecating-packages-or-package-versions
  summary: If you no longer wish to maintain a package, or if you would like to encourage users to update to a new or different version, you can deprecate it
  description: "# Deprecating and undeprecating packages or package versions\n\nIf you no longer wish to maintain a package, or if you would like to encourage users to update to a new or different version, you can [deprecate](https://docs.npmjs.com/cli/v8/commands/npm-deprecate/) it. Deprecating a package or version will print a message to the terminal when a user installs it.\n\nA deprecation warning or message can say anything. You may wish to include a message encouraging users to update to a specific version, or an alternate, supported package.\n\n**Note:** We strongly recommend deprecating packages or package versions instead of [unpublishing](unpublishing-packages-from-the-registry) them, because unpublishing removes a package from the registry entirely, meaning anyone who relied on it will no longer be able to use it, with no warning.\n\n## [Deprecating an entire package](#deprecating-an-entire-package)\n\nDeprecating an entire package will remove it from search results on the npm website and a deprecation message will also be displayed on the package page.\n\nDeprecating a package is an alternative to deleting a package if your package does not meet the [unpublishing requirements](https://docs.npmjs.com/policies/unpublish).\n\n### [Using the website](#using-the-website)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  Navigate to the package page for the package you want to deprecate, replacing `<your-package-name>` with the name of your package: `https://www.npmjs.com/package/<your-package-name>`.\n\n3.  Click **Settings**.\n\n4.  Under \"deprecate package\", click **Deprecate package**.\n\n5.  If you are sure that you want to continue, enter your package name and click **Deprecate package**.\n\n### [Using the command line](#using-the-command-line)\n\nTo deprecate an entire package, run the following command, replacing `<package-name>` with the name of your package, and `\"<message>\"` with your deprecation message:\n\n`npm deprecate <package-name> \"<message>\"`\n\nIf you have enabled [two-factor authentication](about-two-factor-authentication), add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator app).\n\n## [Deprecating a single version of a package](#deprecating-a-single-version-of-a-package)\n\nWhen you deprecate a version of a package, a red message will be displayed on that version's package page, similar to deprecating an entire package.\n\n### [Using the command line](#using-the-command-line-1)\n\nTo deprecate a package version, run the following command, replacing `<package-name>` with the name of your package, `<version>` with your version number, and `\"<message>\"` with your deprecation message:\n\n`npm deprecate <package-name>@<version> \"<message>\"`\n\nThe CLI will also accept version ranges for `<version>`.\n\nIf you have two-factor auth, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator).\n\n## [Undeprecating a package or version](#undeprecating-a-package-or-version)\n\nTo undeprecate a package, replace `\"<message>\"` with `\"\"` (an empty string) in one of the above commands.\n\nFor example, to undeprecate a package version, run the following command, replacing `<package-name>` with the name of your package, and `<version>` with your version number:\n\n`npm deprecate <package-name>@<version> \"\"`\n\nIf you have two-factor auth, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator).\n\n## [Transferring a deprecated package to npm](#transferring-a-deprecated-package-to-npm)\n\nIf you are no longer maintaining a package, but other users depend on it, and you'd like to remove it from your user profile, you can transfer it to the [`@npm`](https://www.npmjs.com/~npm) user account, which is owned by the npm registry.\n\n**Note:** Once you transfer a package to the npm account, you will no longer be able to update it.\n\nTo transfer a package to the npm user account, run the following two commands in order, replacing `<user>` with your npm user name, and `<package-name>` with the package you want to transfer:\n\n``` javascript\nnpm owner add npm <package-name>\nnpm owner rm <user> <package-name>\n```\n\nIf you have two-factor auth, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions](https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions)"
- name: depth
  id: cli/v10/using-npm/config#depth
  summary: The depth to go when recursing packages for npm ls
  belongs_to: config
  description: |-
    #### [`depth`](#depth)

    - Default: `Infinity` if `--all` is set, otherwise `1`
    - Type: null or Number

    The depth to go when recursing packages for `npm ls`.

    If not set, `npm ls` will show only the immediate dependencies of the root project. If `--all` is set, then npm will show all dependencies by default.
- name: description
  id: cli/v10/configuring-npm/package-json#description
  summary: This document is all you need to know about what's required in your package.json file
  belongs_to: package.json
  description: |-
    ### [Description](#description)

    This document is all you need to know about what's required in your package.json file. It must be actual JSON, not just a JavaScript object literal.

    A lot of the behavior described in this document is affected by the config settings described in [`config`](../using-npm/config).
- name: description-1
  id: cli/v10/using-npm/config#description-1
  summary: null
  belongs_to: config
  description: |-
    #### [`description`](#description-1)

    - Default: true
    - Type: Boolean

    Show the description in `npm search`
- name: description-1
  id: cli/v10/configuring-npm/package-json#description-1
  summary: Put a description in it
  belongs_to: package.json
  description: |-
    ### [description](#description-1)

    Put a description in it. It's a string. This helps people discover your package, as it's listed in `npm search`.
- name: dev
  id: cli/v10/using-npm/config#dev
  summary: Alias for --include=dev
  belongs_to: config
  description: |-
    #### [`dev`](#dev)

    - Default: false
    - Type: Boolean
    - DEPRECATED: Please use --include=dev instead.

    Alias for `--include=dev`.
- name: devdependencies
  id: cli/v10/configuring-npm/package-json#devdependencies
  summary: If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use
  belongs_to: package.json
  description: |-
    ### [devDependencies](#devdependencies)

    If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.

    In this case, it's best to map these additional items in a `devDependencies` object.

    These things will be installed when doing `npm link` or `npm install` from the root of a package, and can be managed like any other npm configuration param. See [`config`](../using-npm/config) for more on the topic.

    For build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the `prepare` script to do this, and make the required package a devDependency.

    For example:

    ``` javascript
    {
      "name": "ethopia-waza",
      "description": "a delightfully fruity coffee varietal",
      "version": "1.2.3",
      "devDependencies": {
        "coffee-script": "~1.6.3"
      },
      "scripts": {
        "prepare": "coffee -o lib/ -c src/waza.coffee"
      },
      "main": "lib/waza.js"
    }
    ```

    The `prepare` script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally running `npm install`), it'll run this script as well, so that you can test it easily.
- name: developers
  id: cli/v10/using-npm/developers
  summary: So, you've decided to use npm to develop (and maybe publish/deploy) your project
  description: "# developers\n\nDeveloper Guide\n\n### [Description](#description)\n\nSo, you've decided to use npm to develop (and maybe publish/deploy) your project.\n\nFantastic!\n\nThere are a few things that you need to do above the simple steps that your users will do to install your program.\n\n### [About These Documents](#about-these-documents)\n\nThese are man pages. If you install npm, you should be able to then do `man npm-thing` to get the documentation on a particular topic, or `npm help thing` to see the same information.\n\n### [What is a Package](#what-is-a-package)\n\nA package is:\n\n- a\\) a folder containing a program described by a package.json file\n- b\\) a gzipped tarball containing (a)\n- c\\) a url that resolves to (b)\n- d\\) a `<name>@<version>` that is published on the registry with (c)\n- e\\) a `<name>@<tag>` that points to (d)\n- f\\) a `<name>` that has a \"latest\" tag satisfying (e)\n- g\\) a `git` url that, when cloned, results in (a).\n\nEven if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b).\n\nGit urls can be of the form:\n\n``` javascript\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n```\n\nThe `commit-ish` can be any tag, sha, or branch which can be supplied as an argument to `git checkout`. The default is whatever the repository uses as its default branch.\n\n### [The package.json File](#the-packagejson-file)\n\nYou need to have a `package.json` file in the root of your project to do much of anything with npm. That is basically the whole interface.\n\nSee [`package.json`](../configuring-npm/package-json) for details about what goes in that file. At the very least, you need:\n\n- name: This should be a string that identifies your project. Please do not use the name to specify that it runs on node, or is in JavaScript. You can use the \"engines\" field to explicitly state the versions of node (or whatever else) that your program requires, and it's pretty well assumed that it's JavaScript.\n\n  It does not necessarily need to match your github repository name.\n\n  So, `node-foo` and `bar-js` are bad names. `foo` or `bar` are better.\n\n- version: A semver-compatible version.\n\n- engines: Specify the versions of node (or whatever else) that your program runs on. The node API changes a lot, and there may be bugs or new functionality that you depend on. Be explicit.\n\n- author: Take some credit.\n\n- scripts: If you have a special compilation or installation script, then you should put it in the `scripts` object. You should definitely have at least a basic smoke-test command as the \"scripts.test\" field. See [scripts](scripts).\n\n- main: If you have a single module that serves as the entry point to your program (like what the \"foo\" package gives you at require(\"foo\")), then you need to specify that in the \"main\" field.\n\n- directories: This is an object mapping names to folders. The best ones to include are \"lib\" and \"doc\", but if you use \"man\" to specify a folder full of man pages, they'll get installed just like these ones.\n\nYou can use `npm init` in the root of your package in order to get you started with a pretty basic package.json file. See [`npm init`](../commands/npm-init) for more info.\n\n### [Keeping files *out* of your Package](#keeping-files-out-of-your-package)\n\nUse a `.npmignore` file to keep stuff out of your package. If there's no `.npmignore` file, but there *is* a `.gitignore` file, then npm will ignore the stuff matched by the `.gitignore` file. If you *want* to include something that is excluded by your `.gitignore` file, you can create an empty `.npmignore` file to override it. Like `git`, `npm` looks for `.npmignore` and `.gitignore` files in all subdirectories of your package, not only the root directory.\n\n`.npmignore` files follow the [same pattern rules](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring) as `.gitignore` files:\n\n- Blank lines or lines starting with `#` are ignored.\n- Standard glob patterns work.\n- You can end patterns with a forward slash `/` to specify a directory.\n- You can negate a pattern by starting it with an exclamation point `!`.\n\nBy default, the following paths and files are ignored, so there's no need to add them to `.npmignore` explicitly:\n\n- `.*.swp`\n- `._*`\n- `.DS_Store`\n- `.git`\n- `.gitignore`\n- `.hg`\n- `.npmignore`\n- `.npmrc`\n- `.lock-wscript`\n- `.svn`\n- `.wafpickle-*`\n- `config.gypi`\n- `CVS`\n- `npm-debug.log`\n\nAdditionally, everything in `node_modules` is ignored, except for bundled dependencies. npm automatically handles this for you, so don't bother adding `node_modules` to `.npmignore`.\n\nThe following paths and files are never ignored, so adding them to `.npmignore` is pointless:\n\n- `package.json`\n- `README` (and its variants)\n- `CHANGELOG` (and its variants)\n- `LICENSE` / `LICENCE`\n\nIf, given the structure of your project, you find `.npmignore` to be a maintenance headache, you might instead try populating the `files` property of `package.json`, which is an array of file or directory names that should be included in your package. Sometimes manually picking which items to allow is easier to manage than building a block list.\n\n#### [Testing whether your `.npmignore` or `files` config works](#testing-whether-your-npmignore-or-files-config-works)\n\nIf you want to double check that your package will include only the files you intend it to when published, you can run the `npm pack` command locally which will generate a tarball in the working directory, the same way it does for publishing.\n\n### [Link Packages](#link-packages)\n\n`npm link` is designed to install a development package and see the changes in real time without having to keep re-installing it. (You do need to either re-link or `npm rebuild -g` to update compiled packages, of course.)\n\nMore info at [`npm link`](../commands/npm-link).\n\n### [Before Publishing: Make Sure Your Package Installs and Works](#before-publishing-make-sure-your-package-installs-and-works)\n\n**This is important.**\n\nIf you can not install it locally, you'll have problems trying to publish it. Or, worse yet, you'll be able to publish it, but you'll be publishing a broken or pointless package. So don't do that.\n\nIn the root of your package, do this:\n\n``` javascript\nnpm install . -g\n```\n\nThat'll show you that it's working. If you'd rather just create a symlink package that points to your working directory, then do this:\n\n``` javascript\nnpm link\n```\n\nUse `npm ls -g` to see if it's there.\n\nTo test a local install, go into some other folder, and then do:\n\n``` javascript\ncd ../some-other-folder\nnpm install ../my-package\n```\n\nto install it locally into the node_modules folder in that other place.\n\nThen go into the node-repl, and try using require(\"my-thing\") to bring in your module's main module.\n\n### [Create a User Account](#create-a-user-account)\n\nCreate a user with the adduser command. It works like this:\n\n``` javascript\nnpm adduser\n```\n\nand then follow the prompts.\n\nThis is documented better in [npm adduser](../commands/npm-adduser).\n\n### [Publish your Package](#publish-your-package)\n\nThis part's easy. In the root of your folder, do this:\n\n``` javascript\nnpm publish\n```\n\nYou can give publish a url to a tarball, or a filename of a tarball, or a path to a folder.\n\nNote that pretty much **everything in that folder will be exposed** by default. So, if you have secret stuff in there, use a `.npmignore` file to list out the globs to ignore, or publish from a fresh checkout.\n\n### [Brag about it](#brag-about-it)\n\nSend emails, write blogs, blab in IRC.\n\nTell the world how easy it is to install your program!\n\n### [See also](#see-also)\n\n- [npm](../commands/npm)\n- [npm init](../commands/npm-init)\n- [package.json](../configuring-npm/package-json)\n- [npm scripts](scripts)\n- [npm publish](../commands/npm-publish)\n- [npm adduser](../commands/npm-adduser)\n- [npm registry](registry)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/developers](https://docs.npmjs.com/cli/v10/using-npm/developers)"
- name: diff
  id: cli/v10/using-npm/config#diff
  summary: Define arguments to compare in npm diff
  belongs_to: config
  description: |-
    #### [`diff`](#diff)

    - Default:
    - Type: String (can be set multiple times)

    Define arguments to compare in `npm diff`.
- name: diff-dst-prefix
  id: cli/v10/using-npm/config#diff-dst-prefix
  summary: Destination prefix to be used in npm diff output
  belongs_to: config
  description: |-
    #### [`diff-dst-prefix`](#diff-dst-prefix)

    - Default: "b/"
    - Type: String

    Destination prefix to be used in `npm diff` output.
- name: diff-ignore-all-space
  id: cli/v10/using-npm/config#diff-ignore-all-space
  summary: Ignore whitespace when comparing lines in npm diff
  belongs_to: config
  description: |-
    #### [`diff-ignore-all-space`](#diff-ignore-all-space)

    - Default: false
    - Type: Boolean

    Ignore whitespace when comparing lines in `npm diff`.
- name: diff-name-only
  id: cli/v10/using-npm/config#diff-name-only
  summary: Prints only filenames when using npm diff
  belongs_to: config
  description: |-
    #### [`diff-name-only`](#diff-name-only)

    - Default: false
    - Type: Boolean

    Prints only filenames when using `npm diff`.
- name: diff-no-prefix
  id: cli/v10/using-npm/config#diff-no-prefix
  summary: Do not show any source or destination prefix in npm diff output
  belongs_to: config
  description: |-
    #### [`diff-no-prefix`](#diff-no-prefix)

    - Default: false
    - Type: Boolean

    Do not show any source or destination prefix in `npm diff` output.

    Note: this causes `npm diff` to ignore the `--diff-src-prefix` and `--diff-dst-prefix` configs.
- name: diff-src-prefix
  id: cli/v10/using-npm/config#diff-src-prefix
  summary: Source prefix to be used in npm diff output
  belongs_to: config
  description: |-
    #### [`diff-src-prefix`](#diff-src-prefix)

    - Default: "a/"
    - Type: String

    Source prefix to be used in `npm diff` output.
- name: diff-text
  id: cli/v10/using-npm/config#diff-text
  summary: Treat all files as text in npm diff
  belongs_to: config
  description: |-
    #### [`diff-text`](#diff-text)

    - Default: false
    - Type: Boolean

    Treat all files as text in `npm diff`.
- name: diff-unified
  id: cli/v10/using-npm/config#diff-unified
  summary: The number of lines of context to print in npm diff
  belongs_to: config
  description: |-
    #### [`diff-unified`](#diff-unified)

    - Default: 3
    - Type: Number

    The number of lines of context to print in `npm diff`.
- name: directories
  id: cli/v10/configuring-npm/package-json#directories
  summary: The CommonJS Packages spec details a few ways that you can indicate the structure of your package using a directories object
  belongs_to: package.json
  description: |-
    ### [directories](#directories)

    The CommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0) spec details a few ways that you can indicate the structure of your package using a `directories` object. If you look at [npm's package.json](https://registry.npmjs.org/npm/latest), you'll see that it has directories for doc, lib, and man.

    In the future, this information may be used in other creative ways.

    #### [directories.bin](#directoriesbin)

    If you specify a `bin` directory in `directories.bin`, all the files in that folder will be added.

    Because of the way the `bin` directive works, specifying both a `bin` path and setting `directories.bin` is an error. If you want to specify individual files, use `bin`, and for all the files in an existing `bin` directory, use `directories.bin`.

    #### [directories.man](#directoriesman)

    A folder that is full of man pages. Sugar to generate a "man" array by walking the folder.
- name: Docker and private modules
  id: docker-and-private-modules
  summary: To install private npm packages in a Docker container, you will need to use Docker build secrets
  description: "# Docker and private modules\n\nTo install private npm packages in a Docker container, you will need to use [Docker build secrets](https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\n\n## [Background: runtime variables](#background-runtime-variables)\n\nYou cannot install private npm packages in a Docker container using only runtime variables. Consider the following Dockerfile:\n\n``` javascript\nFROM node\n\n\nCOPY package.json package.json\nRUN npm install\n\n\n# Add your source files\nCOPY . .\nCMD npm start\n```\n\nWhich will use the official [Node.js](https://hub.docker.com/_/node) image, copy the `package.json` into our container, installs dependencies, copies the source files and runs the start command as specified in the `package.json`.\n\nIn order to install private packages, you may think that we could just add a line before we run `npm install`, using the [ENV parameter](https://docs.docker.com/engine/reference/builder/#env):\n\n``` javascript\nENV NPM_TOKEN=00000000-0000-0000-0000-000000000000\n```\n\nHowever, this doesn't work as you would expect, because you want the npm install to occur when you run `docker build`, and in this instance, `ENV` variables aren't used, they are set for runtime only.\n\nInstead of run-time variables, you must use Docker build secrets.\n\n## [Update the Dockerfile](#update-the-dockerfile)\n\nThe Dockerfile that takes advantage of this has a few more lines in it than the earlier example that allows us to use your global `.npmrc` and the access token created when running `npm login` command (if you haven't run it already - do so before moving on).\n\n``` javascript\n# https://docs.npmjs.com/docker-and-private-modules\nFROM node:18\n\n\nENV APP_HOME=\"/app\"\n\n\nWORKDIR ${APP_HOME}\n\n\nCOPY package*.json ${APP_HOME}/\n\n\nRUN --mount=type=secret,id=npmrc,target=/root/.npmrc npm install\n\n\nCOPY . ${APP_HOME}/\n\n\nCMD npm start\n```\n\nThis will configure your Dockerfile to receive `.npmrc` file via build secrets, that will leave no trace after npm dependency installation is done.\n\n## [Build the Docker image](#build-the-docker-image)\n\nTo build the image using the above Dockerfile and the npm authentication token, you can run the following command. Note the `.` at the end to give `docker build` the current directory as an argument.\n\n``` javascript\ndocker build . -t secure-app-secrets:1.0 --secret id=npmrc,src=$HOME/.npmrc\n```\n\nThis will build the Docker image with the access token coming from your global `.npmrc` file received via build secrets, so you can run `npm install` inside your container as the current logged-in user.\n\n**Note:** You may need to specify a working directory different from the default `/` otherwise some frameworks like Angular will fail.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/docker-and-private-modules](https://docs.npmjs.com/docker-and-private-modules)"
- name: Downgrading to a free organization plan
  id: downgrading-to-a-free-organization-plan
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Downgrading to a free organization plan\n\n**Note:** This article only applies to users of the public npm registry.\n\nIf you are a subscriber to the npm Teams product (you have a paid organization) and you are an owner of the organization, then you can downgrade from npm Teams to a free organization. When you downgrade from a paid to a free organization, you and your organization members will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will *not* be made publicly visible when you downgrade to a free plan.\n\n**Note:** If you would like to pay for fewer seats, you can remove members from your organization by following the steps in \"[Removing members from your organization](https://docs.npmjs.com/removing-members-from-your-org)\".\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization you want to downgrade.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  Under \"change plan\", click **Downgrade Plan**.\n\n6.  Under \"Are you sure?\", click **Downgrade to a free account**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/downgrading-to-a-free-organization-plan](https://docs.npmjs.com/downgrading-to-a-free-organization-plan)"
- name: Downgrading to a free user account plan
  id: downgrading-to-a-free-user-account-plan
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Downgrading to a free user account plan\n\n**Note:** This article only applies to users of the public npm registry.\n\nIf you have a paid user account, but no longer need private packages, you can downgrade your paid organization to a free organization. When you downgrade from a paid to a free organization, you will lose the ability to install and publish private packages at the end of your last paid billing cycle. Your private packages will *not* be made publicly visible when you downgrade to a free plan.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n3.  Under \"change plan\", click **Downgrade Plan**.\n4.  Under \"Are you sure?\", click **Downgrade to a free account**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/downgrading-to-a-free-user-account-plan](https://docs.npmjs.com/downgrading-to-a-free-user-account-plan)"
- name: Downloading and installing Node.js and npm
  id: downloading-and-installing-node-js-and-npm
  summary: To publish and install packages to and from the public npm registry or a private npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer
  description: "# Downloading and installing Node.js and npm\n\nTo publish and install packages to and from the public npm registry or a private npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. **We strongly recommend using a Node version manager like [nvm](https://github.com/nvm-sh/nvm) to install Node.js and npm.** We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.\n\n**Note:** to download the latest version of npm, on the command line, run the following command:\n\n`npm install -g npm`\n\n## [Overview](#overview)\n\n- [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-nodejs)\n- [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-nodejs-and-npm)\n- [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-nodejs-and-npm)\n\n## [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-nodejs)\n\nTo see if you already have Node.js and npm installed and check the installed version, run the following commands:\n\n``` javascript\nnode -v\nnpm -v\n```\n\n## [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-nodejs-and-npm)\n\nNode version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions.\n\n### [OSX or Linux Node version managers](#osx-or-linux-node-version-managers)\n\n- [nvm](https://github.com/creationix/nvm)\n- [n](https://github.com/tj/n)\n\n### [Windows Node version managers](#windows-node-version-managers)\n\n- [nodist](https://github.com/marcelklehr/nodist)\n- [nvm-windows](https://github.com/coreybutler/nvm-windows)\n\n## [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-nodejs-and-npm)\n\nIf you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.\n\n- [Node.js installer](https://nodejs.org/en/download/)\n- [NodeSource installer](https://github.com/nodesource/distributions)\n\nIf you use Linux, we recommend that you use a NodeSource installer.\n\n### [OS X or Windows Node installers](#os-x-or-windows-node-installers)\n\nIf you're using OS X or Windows, use one of the installers from the [Node.js download page](https://nodejs.org/en/download/). Be sure to install the version labeled **LTS**. Other versions have not yet been tested with npm.\n\n### [Linux or other operating systems Node installers](#linux-or-other-operating-systems-node-installers)\n\nIf you're using Linux or another operating system, use one of the following installers:\n\n- [NodeSource installer](https://github.com/nodesource/distributions) (recommended)\n- One of the installers on the [Node.js download page](https://nodejs.org/en/download/)\n\nOr see [this page](https://nodejs.org/en/download/package-manager/) to install npm for Linux in the way many Linux developers prefer.\n\n### [Less-common operating systems](#less-common-operating-systems)\n\nFor more information on installing Node.js on a variety of operating systems, see [this page](https://nodejs.org/en/download/package-manager/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/downloading-and-installing-node-js-and-npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)"
- name: Downloading and installing packages globally
  id: downloading-and-installing-packages-globally
  summary: 'Tip: If you are using npm 5.2 or higher, we recommend using npx to run packages globally'
  description: "# Downloading and installing packages globally\n\n**Tip:** If you are using npm 5.2 or higher, we recommend using `npx` to run packages globally.\n\n[Installing](https://docs.npmjs.com//cli/v8/commands/npm-install/) a package globally allows you to use the code in the package as a set of tools on your local computer.\n\nTo download and install packages globally, on the command line, run the following command:\n\n`npm install -g <package_name>`\n\nIf you get an EACCES permissions error, you may need to reinstall npm with a version manager or manually change npm's default directory. For more information, see \"[Resolving EACCES permissions errors when installing packages globally](resolving-eacces-permissions-errors-when-installing-packages-globally)\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/downloading-and-installing-packages-globally](https://docs.npmjs.com/downloading-and-installing-packages-globally)"
- name: Downloading and installing packages locally
  id: downloading-and-installing-packages-locally
  summary: You can install a package locally if you want to depend on the package from your own module, using something like Node.js require
  description: "# Downloading and installing packages locally\n\nYou can [install](https://docs.npmjs.com/cli/v8/install) a package locally if you want to depend on the package from your own module, using something like Node.js `require`. This is `npm install`'s default behavior.\n\n## [Installing an unscoped package](#installing-an-unscoped-package)\n\nUnscoped packages are always public, which means they can be searched for, downloaded, and installed by anyone. To install a public package, on the command line, run\n\n`npm install <package_name>`\n\nThis will create the `node_modules` directory in your current directory (if one doesn't exist yet) and will download the package to that directory.\n\n**Note:** If there is no `package.json` file in the local directory, the latest version of the package is installed.\n\nIf there is a `package.json` file, npm installs the latest version that satisfies the [semver rule](about-semantic-versioning) declared in `package.json`.\n\n## [Installing a scoped public package](#installing-a-scoped-public-package)\n\n[Scoped public packages](about-scopes) can be downloaded and installed by anyone, as long as the scope name is referenced during installation:\n\n`npm install @scope/package-name`\n\n## [Installing a private package](#installing-a-private-package)\n\n[Private packages](about-private-packages) can only be downloaded and installed by those who have been granted read access to the package. Since private packages are always scoped, you must reference the scope name during installation:\n\n`npm install @scope/private-package-name`\n\n## [Testing package installation](#testing-package-installation)\n\nTo confirm that `npm install` worked correctly, in your module directory, check that a `node_modules` directory exists and that it contains a directory for the package(s) you installed:\n\n`ls node_modules`\n\n## [Installed package version](#installed-package-version)\n\nIf there is a `package.json` file in the directory in which `npm install` is run, npm installs the latest version of the package that satisfies the [semantic versioning rule](about-semantic-versioning) declared in `package.json`.\n\nIf there is no `package.json` file, the latest version of the package is installed.\n\n## [Installing a package with dist-tags](#installing-a-package-with-dist-tags)\n\nLike `npm publish`, `npm install <package_name>` will use the `latest` tag by default.\n\nTo override this behavior, use `npm install <package_name>@<tag>`. For example, to install the `example-package` at the version tagged with `beta`, you would run the following command:\n\n`npm install example-package@beta`\n\n## [Resources](#resources)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/downloading-and-installing-packages-locally](https://docs.npmjs.com/downloading-and-installing-packages-locally)"
- name: dry-run
  id: cli/v10/using-npm/config#dry-run
  summary: Indicates that you don't want npm to make any changes and that it should only report what it would have done
  belongs_to: config
  description: |-
    #### [`dry-run`](#dry-run)

    - Default: false
    - Type: Boolean

    Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.

    Note: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.
- name: editor
  id: cli/v10/using-npm/config#editor
  summary: The command to run for npm edit and npm config edit
  belongs_to: config
  description: |-
    #### [`editor`](#editor)

    - Default: The EDITOR or VISUAL environment variables, or '%SYSTEMROOT%\notepad.exe' on Windows, or 'vi' on Unix systems
    - Type: String

    The command to run for `npm edit` and `npm config edit`.
- name: engine-strict
  id: cli/v10/using-npm/config#engine-strict
  summary: If set to true, then npm will stubbornly refuse to install (or even consider installing) any package that claims to not be compatible with the current Node.js version
  belongs_to: config
  description: |-
    #### [`engine-strict`](#engine-strict)

    - Default: false
    - Type: Boolean

    If set to true, then npm will stubbornly refuse to install (or even consider installing) any package that claims to not be compatible with the current Node.js version.

    This can be overridden by setting the `--force` flag.
- name: engines
  id: cli/v10/configuring-npm/package-json#engines
  summary: And, like with dependencies, if you don't specify the version (or if you specify "*" as the version), then any version of node will do
  belongs_to: package.json
  description: |-
    ### [engines](#engines)

    You can specify the version of node that your stuff works on:

    ``` javascript
    {
      "engines": {
        "node": ">=0.10.3 <15"
      }
    }
    ```

    And, like with dependencies, if you don't specify the version (or if you specify "\*" as the version), then any version of node will do.

    You can also use the "engines" field to specify which versions of npm are capable of properly installing your program. For example:

    ``` javascript
    {
      "engines": {
        "npm": "~1.0.20"
      }
    }
    ```

    Unless the user has set the [`engine-strict` config](../using-npm/config#engine-strict) flag, this field is advisory only and will only produce warnings when your package is installed as a dependency.
- name: environment-variables
  id: cli/v10/using-npm/config#environment-variables
  summary: Any environment variables that start with npm_config_ will be interpreted as a configuration parameter
  belongs_to: config
  description: |-
    #### [Environment Variables](#environment-variables)

    Any environment variables that start with `npm_config_` will be interpreted as a configuration parameter. For example, putting `npm_config_foo=bar` in your environment will set the `foo` configuration parameter to `bar`. Any environment configurations that are not given a value will be given the value of `true`. Config values are case-insensitive, so `NPM_CONFIG_FOO=bar` will work the same. However, please note that inside [`scripts`](scripts) npm will set its own environment variables and Node will prefer those lowercase versions over any uppercase ones that you might set. For details see [this issue](https://github.com/npm/npm/issues/14528).

    Notice that you need to use underscores instead of dashes, so `--allow-same-version` would become `npm_config_allow_same_version=true`.
- name: fetch-retries
  id: cli/v10/using-npm/config#fetch-retries
  summary: The "retries" config for the retry module to use when fetching packages from the registry
  belongs_to: config
  description: |-
    #### [`fetch-retries`](#fetch-retries)

    - Default: 2
    - Type: Number

    The "retries" config for the `retry` module to use when fetching packages from the registry.

    npm will retry idempotent read requests to the registry in the case of network failures or 5xx HTTP errors.
- name: fetch-retry-factor
  id: cli/v10/using-npm/config#fetch-retry-factor
  summary: The "factor" config for the retry module to use when fetching packages
  belongs_to: config
  description: |-
    #### [`fetch-retry-factor`](#fetch-retry-factor)

    - Default: 10
    - Type: Number

    The "factor" config for the `retry` module to use when fetching packages.
- name: fetch-retry-maxtimeout
  id: cli/v10/using-npm/config#fetch-retry-maxtimeout
  summary: The "maxTimeout" config for the retry module to use when fetching packages
  belongs_to: config
  description: |-
    #### [`fetch-retry-maxtimeout`](#fetch-retry-maxtimeout)

    - Default: 60000 (1 minute)
    - Type: Number

    The "maxTimeout" config for the `retry` module to use when fetching packages.
- name: fetch-retry-mintimeout
  id: cli/v10/using-npm/config#fetch-retry-mintimeout
  summary: The "minTimeout" config for the retry module to use when fetching packages
  belongs_to: config
  description: |-
    #### [`fetch-retry-mintimeout`](#fetch-retry-mintimeout)

    - Default: 10000 (10 seconds)
    - Type: Number

    The "minTimeout" config for the `retry` module to use when fetching packages.
- name: fetch-timeout
  id: cli/v10/using-npm/config#fetch-timeout
  summary: The maximum amount of time to wait for HTTP requests to complete
  belongs_to: config
  description: |-
    #### [`fetch-timeout`](#fetch-timeout)

    - Default: 300000 (5 minutes)
    - Type: Number

    The maximum amount of time to wait for HTTP requests to complete.
- name: files
  id: cli/v10/configuring-npm/package-json#files
  summary: The optional files field is an array of file patterns that describes the entries to be included when your package is installed as a dependency
  belongs_to: package.json
  description: |-
    ### [files](#files)

    The optional `files` field is an array of file patterns that describes the entries to be included when your package is installed as a dependency. File patterns follow a similar syntax to `.gitignore`, but reversed: including a file, directory, or glob pattern (`*`, `**/*`, and such) will make it so that file is included in the tarball when it's packed. Omitting the field will make it default to `["*"]`, which means it will include all files.

    Some special files and directories are also included or excluded regardless of whether they exist in the `files` array (see below).

    You can also provide a `.npmignore` file in the root of your package or in subdirectories, which will keep files from being included. At the root of your package it will not override the "files" field, but in subdirectories it will. The `.npmignore` file works just like a `.gitignore`. If there is a `.gitignore` file, and `.npmignore` is missing, `.gitignore`'s contents will be used instead.

    Certain files are always included, regardless of settings:

    - `package.json`
    - `README`
    - `LICENSE` / `LICENCE`
    - The file in the "main" field
    - The file(s) in the "bin" field

    `README` & `LICENSE` can have any case and extension.

    Some files are always ignored by default:

    - `*.orig`
    - `.*.swp`
    - `.DS_Store`
    - `._*`
    - `.git`
    - `.npmrc`
    - `.hg`
    - `.lock-wscript`
    - `.npmrc`
    - `.svn`
    - `.wafpickle-N`
    - `CVS`
    - `config.gypi`
    - `node_modules`
    - `npm-debug.log`
    - `package-lock.json` (use [`npm-shrinkwrap.json`](npm-shrinkwrap-json) if you wish it to be published)
    - `pnpm-lock.yaml`
    - `yarn.lock`

    Most of these ignored files can be included specifically if included in the `files` globs. Exceptions to this are:

    - `.git`
    - `.npmrc`
    - `node_modules`
    - `package-lock.json`
    - `pnpm-lock.yaml`
    - `yarn.lock`

    These can not be included.
- name: folders
  id: cli/v10/configuring-npm/folders
  summary: npm puts various things on your computer
  description: "# folders\n\nFolder Structures Used by npm\n\n### [Description](#description)\n\nnpm puts various things on your computer. That's its job.\n\nThis document will tell you what it puts where.\n\n#### [tl;dr](#tldr)\n\n- Local install (default): puts stuff in `./node_modules` of the current package root.\n- Global install (with `-g`): puts stuff in /usr/local or wherever node is installed.\n- Install it **locally** if you're going to `require()` it.\n- Install it **globally** if you're going to run it on the command line.\n- If you need both, then install it in both places, or use `npm link`.\n\n#### [prefix Configuration](#prefix-configuration)\n\nThe [`prefix` config](../using-npm/config#prefix) defaults to the location where node is installed. On most systems, this is `/usr/local`. On Windows, it's `%AppData%\\npm`. On Unix systems, it's one level up, since node is typically installed at `{prefix}/bin/node` rather than `{prefix}/node.exe`.\n\nWhen the `global` flag is set, npm installs things into this prefix. When it is not set, it uses the root of the current package, or the current working directory if not in a package already.\n\n#### [Node Modules](#node-modules)\n\nPackages are dropped into the `node_modules` folder under the `prefix`. When installing locally, this means that you can `require(\"packagename\")` to load its main module, or `require(\"packagename/lib/path/to/sub/module\")` to load other modules.\n\nGlobal installs on Unix systems go to `{prefix}/lib/node_modules`. Global installs on Windows go to `{prefix}/node_modules` (that is, no `lib` folder.)\n\nScoped packages are installed the same way, except they are grouped together in a sub-folder of the relevant `node_modules` folder with the name of that scope prefix by the @ symbol, e.g. `npm install @myorg/package` would place the package in `{prefix}/node_modules/@myorg/package`. See [`scope`](../using-npm/scope) for more details.\n\nIf you wish to `require()` a package, then install it locally.\n\n#### [Executables](#executables)\n\nWhen in global mode, executables are linked into `{prefix}/bin` on Unix, or directly into `{prefix}` on Windows. Ensure that path is in your terminal's `PATH` environment to run them.\n\nWhen in local mode, executables are linked into `./node_modules/.bin` so that they can be made available to scripts run through npm. (For example, so that a test runner will be in the path when you run `npm test`.)\n\n#### [Man Pages](#man-pages)\n\nWhen in global mode, man pages are linked into `{prefix}/share/man`.\n\nWhen in local mode, man pages are not installed.\n\nMan pages are not installed on Windows systems.\n\n#### [Cache](#cache)\n\nSee [`npm cache`](../commands/npm-cache). Cache files are stored in `~/.npm` on Posix, or `%LocalAppData%/npm-cache` on Windows.\n\nThis is controlled by the [`cache` config](../using-npm/config#cache) param.\n\n#### [Temp Files](#temp-files)\n\nTemporary files are stored by default in the folder specified by the [`tmp` config](../using-npm/config#tmp), which defaults to the TMPDIR, TMP, or TEMP environment variables, or `/tmp` on Unix and `c:\\windows\\temp` on Windows.\n\nTemp files are given a unique folder under this root for each run of the program, and are deleted upon successful exit.\n\n### [More Information](#more-information)\n\nWhen installing locally, npm first tries to find an appropriate `prefix` folder. This is so that `npm install foo@1.2.3` will install to the sensible root of your package, even if you happen to have `cd`ed into some other folder.\n\nStarting at the $PWD, npm will walk up the folder tree checking for a folder that contains either a `package.json` file, or a `node_modules` folder. If such a thing is found, then that is treated as the effective \"current directory\" for the purpose of running npm commands. (This behavior is inspired by and similar to git's .git-folder seeking logic when running git commands in a working dir.)\n\nIf no package root is found, then the current folder is used.\n\nWhen you run `npm install foo@1.2.3`, then the package is loaded into the cache, and then unpacked into `./node_modules/foo`. Then, any of foo's dependencies are similarly unpacked into `./node_modules/foo/node_modules/...`.\n\nAny bin files are symlinked to `./node_modules/.bin/`, so that they may be found by npm scripts when necessary.\n\n#### [Global Installation](#global-installation)\n\nIf the [`global` config](../using-npm/config#global) is set to true, then npm will install packages \"globally\".\n\nFor global installation, packages are installed roughly the same way, but using the folders described above.\n\n#### [Cycles, Conflicts, and Folder Parsimony](#cycles-conflicts-and-folder-parsimony)\n\nCycles are handled using the property of node's module system that it walks up the directories looking for `node_modules` folders. So, at every stage, if a package is already installed in an ancestor `node_modules` folder, then it is not installed at the current location.\n\nConsider the case above, where `foo -> bar -> baz`. Imagine if, in addition to that, baz depended on bar, so you'd have: `foo -> bar -> baz -> bar -> baz ...`. However, since the folder structure is: `foo/node_modules/bar/node_modules/baz`, there's no need to put another copy of bar into `.../baz/node_modules`, since when baz calls `require(\"bar\")`, it will get the copy that is installed in `foo/node_modules/bar`.\n\nThis shortcut is only used if the exact same version would be installed in multiple nested `node_modules` folders. It is still possible to have `a/node_modules/b/node_modules/a` if the two \"a\" packages are different versions. However, without repeating the exact same package multiple times, an infinite regress will always be prevented.\n\nAnother optimization can be made by installing dependencies at the highest level possible, below the localized \"target\" folder (hoisting). Since version 3, npm hoists dependencies by default.\n\n#### [Example](#example)\n\nConsider this dependency graph:\n\n``` javascript\nfoo\n+-- blerg@1.2.5\n+-- bar@1.2.3\n|   +-- blerg@1.x (latest=1.3.7)\n|   +-- baz@2.x\n|   |   `-- quux@3.x\n|   |       `-- bar@1.2.3 (cycle)\n|   `-- asdf@*\n`-- baz@1.2.3\n    `-- quux@3.x\n        `-- bar\n```\n\nIn this case, we might expect a folder structure like this (with all dependencies hoisted to the highest level possible):\n\n``` javascript\nfoo\n+-- node_modules\n    +-- blerg (1.2.5) <---[A]\n    +-- bar (1.2.3) <---[B]\n    |   +-- node_modules\n    |       +-- baz (2.0.2) <---[C]\n    +-- asdf (2.3.4)\n    +-- baz (1.2.3) <---[D]\n    +-- quux (3.2.0) <---[E]\n```\n\nSince foo depends directly on `bar@1.2.3` and `baz@1.2.3`, those are installed in foo's `node_modules` folder.\n\nEven though the latest copy of blerg is 1.3.7, foo has a specific dependency on version 1.2.5. So, that gets installed at \\[A\\]. Since the parent installation of blerg satisfies bar's dependency on `blerg@1.x`, it does not install another copy under \\[B\\].\n\nBar \\[B\\] also has dependencies on baz and asdf. Because it depends on `baz@2.x`, it cannot re-use the `baz@1.2.3` installed in the parent `node_modules` folder \\[D\\], and must install its own copy \\[C\\]. In order to minimize duplication, npm hoists dependencies to the top level by default, so asdf is installed under \\[A\\].\n\nUnderneath bar, the `baz -> quux -> bar` dependency creates a cycle. However, because bar is already in quux's ancestry \\[B\\], it does not unpack another copy of bar into that folder. Likewise, quux's \\[E\\] folder tree is empty, because its dependency on bar is satisfied by the parent folder copy installed at \\[B\\].\n\nFor a graphical breakdown of what is installed where, use `npm ls`.\n\n#### [Publishing](#publishing)\n\nUpon publishing, npm will look in the `node_modules` folder. If any of the items there are not in the `bundleDependencies` array, then they will not be included in the package tarball.\n\nThis allows a package maintainer to install all of their dependencies (and dev dependencies) locally, but only re-publish those items that cannot be found elsewhere. See [`package.json`](package-json) for more information.\n\n### [See also](#see-also)\n\n- [package.json](package-json)\n- [npm install](../commands/npm-install)\n- [npm pack](../commands/npm-pack)\n- [npm cache](../commands/npm-cache)\n- [npm config](../commands/npm-config)\n- [npmrc](npmrc)\n- [config](../using-npm/config)\n- [npm publish](../commands/npm-publish)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/folders](https://docs.npmjs.com/cli/v10/configuring-npm/folders)"
- name: force
  id: cli/v10/using-npm/config#force
  summary: Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input
  belongs_to: config
  description: |-
    #### [`force`](#force)

    - Default: false
    - Type: Boolean

    Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.

    - Allow clobbering non-npm files in global installs.
    - Allow the `npm version` command to work on an unclean git repository.
    - Allow deleting the cache folder with `npm cache clean`.
    - Allow installing packages that have an `engines` declaration requiring a different version of npm.
    - Allow installing packages that have an `engines` declaration requiring a different version of `node`, even if `--engine-strict` is enabled.
    - Allow `npm audit fix` to install modules outside your stated dependency range (including SemVer-major changes).
    - Allow unpublishing all versions of a published package.
    - Allow conflicting peerDependencies to be installed in the root project.
    - Implicitly set `--yes` during `npm init`.
    - Allow clobbering existing values in `npm pkg`
    - Allow unpublishing of entire packages (not just a single version).

    If you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!
- name: foreground-scripts
  id: cli/v10/using-npm/config#foreground-scripts
  summary: Run all build scripts (ie, preinstall, install, and postinstall) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process
  belongs_to: config
  description: |-
    #### [`foreground-scripts`](#foreground-scripts)

    - Default: false
    - Type: Boolean

    Run all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.

    Note that this will generally make installs run slower, and be much noisier, but can be useful for debugging.
- name: format-package-lock
  id: cli/v10/using-npm/config#format-package-lock
  summary: Format package-lock.json or npm-shrinkwrap.json as a human readable file
  belongs_to: config
  description: |-
    #### [`format-package-lock`](#format-package-lock)

    - Default: true
    - Type: Boolean

    Format `package-lock.json` or `npm-shrinkwrap.json` as a human readable file.
- name: fund
  id: cli/v10/using-npm/config#fund
  summary: When "true" displays the message at the end of each npm install acknowledging the number of dependencies looking for funding
  belongs_to: config
  description: |-
    #### [`fund`](#fund)

    - Default: true
    - Type: Boolean

    When "true" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](../commands/npm-fund) for details.
- name: funding
  id: cli/v10/configuring-npm/package-json#funding
  summary: Users can use the npm fund subcommand to list the funding URLs of all dependencies of their project, direct and indirect
  belongs_to: package.json
  description: |-
    ### [funding](#funding)

    You can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, or a string URL, or an array of these:

    ``` javascript
    {
      "funding": {
        "type": "individual",
        "url": "http://example.com/donate"
      },


      "funding": {
        "type": "patreon",
        "url": "https://www.patreon.com/my-account"
      },


      "funding": "http://example.com/donate",


      "funding": [
        {
          "type": "individual",
          "url": "http://example.com/donate"
        },
        "http://example.com/donateAlso",
        {
          "type": "patreon",
          "url": "https://www.patreon.com/my-account"
        }
      ]
    }
    ```

    Users can use the `npm fund` subcommand to list the `funding` URLs of all dependencies of their project, direct and indirect. A shortcut to visit each funding url is also available when providing the project name such as: `npm fund <projectname>` (when there are multiple URLs, the first one will be visited)
- name: Generating and locating npm-debug.log files
  id: generating-and-locating-npm-debug.log-files
  summary: When a package fails to install or publish, the npm CLI will generate an npm-debug.log file
  description: "# Generating and locating npm-debug.log files\n\nWhen a package fails to install or publish, the npm CLI will generate an `npm-debug.log` file. This log file can help you figure out what went wrong.\n\nIf you need to generate a `npm-debug.log` file, you can run one of these commands.\n\nFor installing packages:\n\n`npm install --timing`\n\nFor publishing packages:\n\n`npm publish --timing`\n\nYou can find the `npm-debug.log` file in your `.npm` directory. To find your `.npm` directory, use `npm config get cache`.\n\nIf you use a CI environment, your logs are likely located elsewhere. For example, in Travis CI, you can find them in the `/home/travis/build` directory.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/generating-and-locating-npm-debug.log-files](https://docs.npmjs.com/generating-and-locating-npm-debug.log-files)"
- name: Generating provenance statements
  id: generating-provenance-statements
  summary: You can generate provenance statements for the packages you publish
  description: "# Generating provenance statements\n\nYou can generate provenance statements for the packages you publish. This allows you to publicly establish where a package was built and who published a package, which can increase supply-chain security for your packages.\n\n## [About npm provenance](#about-npm-provenance)\n\nnpm provenance includes two types of attestations:\n\n- Provenance attestation\n- Publish attestation\n\nThe provenance attestation is established by publicly providing a link to a package's source code and build instructions from the build environment. This allows developers to verify where and how your package was built before they download it.\n\nPublish attestations are generated by the registry when a package is published by an authorized user. When an npm package is published with provenance, it is signed by Sigstore public good servers and logged in a public transparency ledger, where users can view this information.\n\n### [About Sigstore](#about-sigstore)\n\nSigstore is a collection of tools and services aimed at making it easy to use short-lived, ephemeral certificates to sign software. Its three main components are a CLI tool, a certificate authority, and a time-stamping transparency log.\n\nThe certificate authority federates with any OIDC provider that includes verifiable build information. It acts as an intermediary between build systems and package registries by verifying the integrity of the OIDC token, issues a signing certificate that contains that build information, and then logging the signing certificate to an immutable ledger.\n\nThe transparency log service provides a public, verifiable, tamper-evident ledger of signed attestations. This ensures transparency of the public service, as well as providing a way to detect attempts to tamper with a package if a package registry were to be compromised.\n\n## [Provenance limitations](#provenance-limitations)\n\n- To publish a package with provenance, you must build your package with a supported cloud CI/CD provider using a cloud-hosted runner. Today this includes GitHub Actions and GitLab CI/CD.\n- When a package in the npm registry has established provenance, it does not guarantee the package has no malicious code. Instead, npm provenance provides a verifiable link to the package's source code and build instructions, which developers can then audit and determine whether to trust it or not. For more information, see \"[Searching for and choosing packages to download](searching-for-and-choosing-packages-to-download#package-provenance).\"\n\n## [Prerequisites](#prerequisites)\n\nBefore you can publish your packages with provenance, you must:\n\n- Review the [Linux Foundation Immutable Record notice](https://lfprojects.org/policies/hosted-project-tools-immutable-records/), which applies to the public transparency log.\n\n- Install the latest version of the npm CLI (ensure you are on `9.5.0+` as older versions don't support npm provenance). For more information, see \"[Try the latest stable version of npm](try-the-latest-stable-version-of-npm).\"\n\n- Ensure your `package.json` is configured with a public `repository` that matches where you are publishing with provenance from.\n\n- Set up automation with a supported CI/CD provider to publish your packages to the npm registry. The following providers are supported:\n\n  - GitHub Actions. For more information, see \"[Publishing packages with provenance via GitHub Actions](#publishing-packages-with-provenance-via-github-actions).\"\n  - GitLab CI/CD. For more information, see \"[Publishing packages with provenance via GitLab CI/CD](#publishing-packages-with-provenance-via-gitlab-cicd).\"\n\n## [Publishing packages with provenance via GitHub Actions](#publishing-packages-with-provenance-via-github-actions)\n\nIn order to establish provenance, you must use a supported cloud CI/CD provider and a cloud-hosted runner to publish your packages. GitHub Actions is a supported CI/CD platform that allows you to automate software development tasks. For more information, see [GitHub Actions](https://docs.github.com/en/actions) in the GitHub documentation.\n\nTo update your GitHub Actions workflow to publish your packages with provenance, you must:\n\n- Give permission to mint an ID-token:\n\n  ``` javascript\n  permissions:\n    id-token: write\n  ```\n\n- Run on a [GitHub-hosted runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources):\n\n  ``` javascript\n  runs-on: ubuntu-latest\n  ```\n\n- Add the `--provenance` flag to your publish command:\n\n  ``` javascript\n  npm publish --provenance\n  ```\n\n- If you are publishing a package for the first time you will also need to explicitly set access to public:\n\n  ``` javascript\n  npm publish --provenance --access public\n  ```\n\n### [Example GitHub Actions workflow](#example-github-actions-workflow)\n\nThis example workflow publishes a package to the npm registry with provenance.\n\n``` javascript\nname: Publish Package to npmjs\non:\n  release:\n    types: [created]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18.x'\n          registry-url: 'https://registry.npmjs.org'\n      - run: npm install -g npm\n      - run: npm ci\n      - run: npm publish --provenance --access public\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\n### [Example GitLab CI job](#example-gitlab-ci-job)\n\nThis example job publishes a package to the npm registry with provenance when a git tag is pushed. Don’t forget to define the `NPM_TOKEN` variable in your GitLab project settings.\n\n``` javascript\npublish:\n  image: 'node:20'\n  rules:\n    - if: $CI_COMMIT_TAG\n  id_tokens:\n    SIGSTORE_ID_TOKEN:\n      aud: sigstore\n  script:\n    - npm config set //registry.npmjs.org/:_authToken \"$NPM_TOKEN\"\n    - npm publish --provenance --access public\n```\n\n### [Using third-party package publishing tools](#using-third-party-package-publishing-tools)\n\nIf you publish your packages with tools that do not directly invoke the `npm publish` command, you can do one of the following in your GitHub Actions workflow to publish your packages with provenance.\n\n- **Configure environment variables:** In your GitHub Actions workflow, you can use an environment variable called `NPM_CONFIG_PROVENANCE`, and set it to `true`.\n- **Configure your `package.json` file:** You can add a `publishConfig` block to your `package.json` file:\n  ``` javascript\n  \"publishConfig\": {\n    \"provenance\": true\n  },\n  ```\n- **Add an `.npmrc` file:** You can add an `.npmrc` file to your project with the following entry:\n  ``` javascript\n  provenance=true\n  ```\n\n**Note:** At this time, `yarn` is not a supported tool for publishing your packages with provenance.\n\n## [Publishing packages with provenance via GitLab CI/CD](#publishing-packages-with-provenance-via-gitlab-cicd)\n\nIn order to establish provenance, you must use a supported cloud CI/CD provider and a cloud-hosted runner to publish your packages. GitLab CI/CD is a supported CI/CD platform that allows you to automate software development tasks. For more information, see [Generating provenance in GitLab CI/CD](https://docs.gitlab.com/ee/ci/yaml/signing_examples.html#use-sigstore-and-npm-to-generate-keyless-provenance) in the GitLab documentation.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/generating-provenance-statements](https://docs.npmjs.com/generating-provenance-statements)"
- name: Getting packages from the registry
  id: packages-and-modules/getting-packages-from-the-registry
  summary: © npm, Inc
  description: "# Getting packages from the registry\n\n- [Searching for and choosing packages to download](../searching-for-and-choosing-packages-to-download)\n- [Downloading and installing packages locally](../downloading-and-installing-packages-locally)\n- [Downloading and installing packages globally](../downloading-and-installing-packages-globally)\n- [Resolving EACCES permissions errors when installing packages globally](../resolving-eacces-permissions-errors-when-installing-packages-globally)\n- [Updating packages downloaded from the registry](../updating-packages-downloaded-from-the-registry)\n- [Using npm packages in your projects](../using-npm-packages-in-your-projects)\n- [Using deprecated packages](../using-deprecated-packages)\n- [Uninstalling packages and dependencies](../uninstalling-packages-and-dependencies)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/packages-and-modules/getting-packages-from-the-registry](https://docs.npmjs.com/packages-and-modules/getting-packages-from-the-registry)"
- name: git
  id: cli/v10/using-npm/config#git
  summary: The command to use for git commands
  belongs_to: config
  description: |-
    #### [`git`](#git)

    - Default: "git"
    - Type: String

    The command to use for git commands. If git is installed on the computer, but is not in the `PATH`, then set this to the full path to the git binary.
- name: git-tag-version
  id: cli/v10/using-npm/config#git-tag-version
  summary: Tag the commit when using the npm version command
  belongs_to: config
  description: |-
    #### [`git-tag-version`](#git-tag-version)

    - Default: true
    - Type: Boolean

    Tag the commit when using the `npm version` command. Setting this to false results in no commit being made at all.
- name: global
  id: cli/v10/using-npm/config#global
  summary: Operates in "global" mode, so that packages are installed into the prefix folder instead of the current working directory
  belongs_to: config
  description: |-
    #### [`global`](#global)

    - Default: false
    - Type: Boolean

    Operates in "global" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.

    - packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.
    - bin files are linked to `{prefix}/bin`
    - man pages are linked to `{prefix}/share/man`
- name: global-style
  id: cli/v10/using-npm/config#global-style
  summary: Only install direct dependencies in the top level node_modules, but hoist on deeper dependencies
  belongs_to: config
  description: |-
    #### [`global-style`](#global-style)

    - Default: false
    - Type: Boolean
    - DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`

    Only install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.
- name: globalconfig
  id: cli/v10/using-npm/config#globalconfig
  summary: The config file to read for global config options
  belongs_to: config
  description: |-
    #### [`globalconfig`](#globalconfig)

    - Default: The global --prefix setting plus 'etc/npmrc'. For example, '/usr/local/etc/npmrc'
    - Type: Path

    The config file to read for global config options.
- name: heading
  id: cli/v10/using-npm/config#heading
  summary: The string that starts all the debugging log output
  belongs_to: config
  description: |-
    #### [`heading`](#heading)

    - Default: "npm"
    - Type: String

    The string that starts all the debugging log output.
- name: homepage
  id: cli/v10/configuring-npm/package-json#homepage
  summary: The url to the project homepage
  belongs_to: package.json
  description: |-
    ### [homepage](#homepage)

    The url to the project homepage.

    Example:

    ``` javascript
    "homepage": "https://github.com/owner/project#readme"
    ```
- name: https-proxy
  id: cli/v10/using-npm/config#https-proxy
  summary: A proxy to use for outgoing https requests
  belongs_to: config
  description: |-
    #### [`https-proxy`](#https-proxy)

    - Default: null
    - Type: null or URL

    A proxy to use for outgoing https requests. If the `HTTPS_PROXY` or `https_proxy` or `HTTP_PROXY` or `http_proxy` environment variables are set, proxy settings will be honored by the underlying `make-fetch-happen` library.
- name: if-present
  id: cli/v10/using-npm/config#if-present
  summary: If true, npm will not exit with an error code when run-script is invoked for a script that isn't defined in the scripts section of package.json
  belongs_to: config
  description: |-
    #### [`if-present`](#if-present)

    - Default: false
    - Type: Boolean

    If true, npm will not exit with an error code when `run-script` is invoked for a script that isn't defined in the `scripts` section of `package.json`. This option can be used when it's desirable to optionally run a script when it's present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.

    This value is not exported to the environment for child processes.
- name: ignore-scripts
  id: cli/v10/using-npm/config#ignore-scripts
  summary: If true, npm does not run scripts specified in package.json files
  belongs_to: config
  description: |-
    #### [`ignore-scripts`](#ignore-scripts)

    - Default: false
    - Type: Boolean

    If true, npm does not run scripts specified in package.json files.

    Note that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.
- name: include
  id: cli/v10/using-npm/config#include
  summary: Option that allows for defining which types of dependencies to install
  belongs_to: config
  description: |-
    #### [`include`](#include)

    - Default:
    - Type: "prod", "dev", "optional", or "peer" (can be set multiple times)

    Option that allows for defining which types of dependencies to install.

    This is the inverse of `--omit=<type>`.

    Dependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.
- name: include-staged
  id: cli/v10/using-npm/config#include-staged
  summary: 'Allow installing "staged" published packages, as defined by npm RFC PR #92'
  belongs_to: config
  description: |-
    #### [`include-staged`](#include-staged)

    - Default: false
    - Type: Boolean

    Allow installing "staged" published packages, as defined by [npm RFC PR \#92](https://github.com/npm/rfcs/pull/92).

    This is experimental, and not implemented by the npm public registry.
- name: include-workspace-root
  id: cli/v10/using-npm/config#include-workspace-root
  summary: Include the workspace root when workspaces are enabled for a command
  belongs_to: config
  description: |-
    #### [`include-workspace-root`](#include-workspace-root)

    - Default: false
    - Type: Boolean

    Include the workspace root when workspaces are enabled for a command.

    When false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.

    This value is not exported to the environment for child processes.
- name: init-author-email
  id: cli/v10/using-npm/config#init-author-email
  summary: The value npm init should use by default for the package author's email
  belongs_to: config
  description: |-
    #### [`init-author-email`](#init-author-email)

    - Default: ""
    - Type: String

    The value `npm init` should use by default for the package author's email.
- name: init-author-name
  id: cli/v10/using-npm/config#init-author-name
  summary: The value npm init should use by default for the package author's name
  belongs_to: config
  description: |-
    #### [`init-author-name`](#init-author-name)

    - Default: ""
    - Type: String

    The value `npm init` should use by default for the package author's name.
- name: init-author-url
  id: cli/v10/using-npm/config#init-author-url
  summary: The value npm init should use by default for the package author's homepage
  belongs_to: config
  description: |-
    #### [`init-author-url`](#init-author-url)

    - Default: ""
    - Type: "" or URL

    The value `npm init` should use by default for the package author's homepage.
- name: init-license
  id: cli/v10/using-npm/config#init-license
  summary: The value npm init should use by default for the package license
  belongs_to: config
  description: |-
    #### [`init-license`](#init-license)

    - Default: "ISC"
    - Type: String

    The value `npm init` should use by default for the package license.
- name: init-module
  id: cli/v10/using-npm/config#init-module
  summary: A module that will be loaded by the npm init command
  belongs_to: config
  description: |-
    #### [`init-module`](#init-module)

    - Default: "~/.npm-init.js"
    - Type: Path

    A module that will be loaded by the `npm init` command. See the documentation for the [init-package-json](https://github.com/npm/init-package-json) module for more information, or [npm init](../commands/npm-init).
- name: init-version
  id: cli/v10/using-npm/config#init-version
  summary: The value that npm init should use by default for the package version number, if not already set in package.json
  belongs_to: config
  description: |-
    #### [`init-version`](#init-version)

    - Default: "1.0.0"
    - Type: SemVer string

    The value that `npm init` should use by default for the package version number, if not already set in package.json.
- name: initauthoremail
  id: cli/v10/using-npm/config#initauthoremail
  summary: null
  belongs_to: config
  description: |-
    #### [`init.author.email`](#initauthoremail)

    - Default: ""
    - Type: String
    - DEPRECATED: Use `--init-author-email` instead.

    Alias for `--init-author-email`
- name: initauthorname
  id: cli/v10/using-npm/config#initauthorname
  summary: null
  belongs_to: config
  description: |-
    #### [`init.author.name`](#initauthorname)

    - Default: ""
    - Type: String
    - DEPRECATED: Use `--init-author-name` instead.

    Alias for `--init-author-name`
- name: initauthorurl
  id: cli/v10/using-npm/config#initauthorurl
  summary: null
  belongs_to: config
  description: |-
    #### [`init.author.url`](#initauthorurl)

    - Default: ""
    - Type: "" or URL
    - DEPRECATED: Use `--init-author-url` instead.

    Alias for `--init-author-url`
- name: initlicense
  id: cli/v10/using-npm/config#initlicense
  summary: null
  belongs_to: config
  description: |-
    #### [`init.license`](#initlicense)

    - Default: "ISC"
    - Type: String
    - DEPRECATED: Use `--init-license` instead.

    Alias for `--init-license`
- name: initmodule
  id: cli/v10/using-npm/config#initmodule
  summary: null
  belongs_to: config
  description: |-
    #### [`init.module`](#initmodule)

    - Default: "~/.npm-init.js"
    - Type: Path
    - DEPRECATED: Use `--init-module` instead.

    Alias for `--init-module`
- name: initversion
  id: cli/v10/using-npm/config#initversion
  summary: null
  belongs_to: config
  description: |-
    #### [`init.version`](#initversion)

    - Default: "1.0.0"
    - Type: SemVer string
    - DEPRECATED: Use `--init-version` instead.

    Alias for `--init-version`
- name: install
  id: cli/v10/configuring-npm/install
  summary: To publish and install packages to and from the public npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer
  description: "# install\n\nDownload and install node and npm\n\n### [Description](#description)\n\nTo publish and install packages to and from the public npm registry, you must install Node.js and the npm command line interface using either a Node version manager or a Node installer. **We strongly recommend using a Node version manager to install Node.js and npm.** We do not recommend using a Node installer, since the Node installation process installs npm in a directory with local permissions and can cause permissions errors when you run npm packages globally.\n\n### [Overview](#overview)\n\n- [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-nodejs)\n- [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-nodejs-and-npm)\n- [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-nodejs-and-npm)\n\n### [Checking your version of npm and Node.js](#checking-your-version-of-npm-and-nodejs)\n\nTo see if you already have Node.js and npm installed and check the installed version, run the following commands:\n\n``` javascript\nnode -v\nnpm -v\n```\n\n### [Using a Node version manager to install Node.js and npm](#using-a-node-version-manager-to-install-nodejs-and-npm)\n\nNode version managers allow you to install and switch between multiple versions of Node.js and npm on your system so you can test your applications on multiple versions of npm to ensure they work for users on different versions. You can [search for them on GitHub](https://github.com/search?q=node+version+manager+archived%3Afalse&type=repositories&ref=advsearch).\n\n### [Using a Node installer to install Node.js and npm](#using-a-node-installer-to-install-nodejs-and-npm)\n\nIf you are unable to use a Node version manager, you can use a Node installer to install both Node.js and npm on your system.\n\n- [Node.js installer](https://nodejs.org/en/download/)\n- [NodeSource installer](https://github.com/nodesource/distributions). If you use Linux, we recommend that you use a NodeSource installer.\n\n#### [OS X or Windows Node installers](#os-x-or-windows-node-installers)\n\nIf you're using OS X or Windows, use one of the installers from the [Node.js download page](https://nodejs.org/en/download/). Be sure to install the version labeled **LTS**. Other versions have not yet been tested with npm.\n\n#### [Linux or other operating systems Node installers](#linux-or-other-operating-systems-node-installers)\n\nIf you're using Linux or another operating system, use one of the following installers:\n\n- [NodeSource installer](https://github.com/nodesource/distributions) (recommended)\n- One of the installers on the [Node.js download page](https://nodejs.org/en/download/)\n\nOr see [this page](https://nodejs.org/en/download/package-manager/) to install npm for Linux in the way many Linux developers prefer.\n\n#### [Less-common operating systems](#less-common-operating-systems)\n\nFor more information on installing Node.js on a variety of operating systems, see [this page](https://nodejs.org/en/download/package-manager/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/install](https://docs.npmjs.com/cli/v10/configuring-npm/install)"
- name: install-links
  id: cli/v10/using-npm/config#install-links
  summary: 'When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink'
  belongs_to: config
  description: |-
    #### [`install-links`](#install-links)

    - Default: false
    - Type: Boolean

    When set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.
- name: install-strategy
  id: cli/v10/using-npm/config#install-strategy
  summary: Sets the strategy for installing packages in node_modules
  belongs_to: config
  description: |-
    #### [`install-strategy`](#install-strategy)

    - Default: "hoisted"
    - Type: "hoisted", "nested", "shallow", or "linked"

    Sets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.
- name: Integrating npm with external services
  id: integrations/integrating-npm-with-external-services
  summary: © npm, Inc
  description: "# Integrating npm with external services\n\n- [About access tokens](../about-access-tokens)\n- [Creating and viewing access tokens](../creating-and-viewing-access-tokens)\n- [Revoking access tokens](../revoking-access-tokens)\n- [Using private packages in a CI/CD workflow](../using-private-packages-in-a-ci-cd-workflow)\n- [Docker and private modules](../docker-and-private-modules)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/integrations/integrating-npm-with-external-services](https://docs.npmjs.com/integrations/integrating-npm-with-external-services)"
- name: Introduction to packages and modules
  id: packages-and-modules/introduction-to-packages-and-modules
  summary: © npm, Inc
  description: "# Introduction to packages and modules\n\n- [About the public npm registry](../about-the-public-npm-registry)\n- [About packages and modules](../about-packages-and-modules)\n- [About scopes](../about-scopes)\n- [About public packages](../about-public-packages)\n- [About private packages](../about-private-packages)\n- [npm package scope, access level, and visibility](../package-scope-access-level-and-visibility)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/packages-and-modules/introduction-to-packages-and-modules](https://docs.npmjs.com/packages-and-modules/introduction-to-packages-and-modules)"
- name: json
  id: cli/v10/using-npm/config#json
  summary: Whether or not to output JSON data, rather than the normal output
  belongs_to: config
  description: |-
    #### [`json`](#json)

    - Default: false
    - Type: Boolean

    Whether or not to output JSON data, rather than the normal output.

    - In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.

    Not supported by all npm commands.
- name: key
  id: cli/v10/using-npm/config#key
  summary: A client key to pass when accessing the registry
  belongs_to: config
  description: |-
    #### [`key`](#key)

    - Default: null
    - Type: null or String
    - DEPRECATED: `key` and `cert` are no longer used for most registry operations. Use registry scoped `keyfile` and `certfile` instead. Example: //other-registry.tld/:keyfile=/path/to/key.pem //other-registry.tld/:certfile=/path/to/cert.crt

    A client key to pass when accessing the registry. Values should be in PEM format with newlines replaced by the string "\n". For example:

    ``` javascript
    key="-----BEGIN PRIVATE KEY-----\nXXXX\nXXXX\n-----END PRIVATE KEY-----"
    ```

    It is *not* the path to a key file, though you can set a registry-scoped "keyfile" path like "//other-registry.tld/:keyfile=/path/to/key.pem".
- name: keywords
  id: cli/v10/configuring-npm/package-json#keywords
  summary: Put keywords in it
  belongs_to: package.json
  description: |-
    ### [keywords](#keywords)

    Put keywords in it. It's an array of strings. This helps people discover your package as it's listed in `npm search`.
- name: legacy-bundling
  id: cli/v10/using-npm/config#legacy-bundling
  summary: Instead of hoisting package installs in node_modules, install packages in the same manner that they are depended on
  belongs_to: config
  description: |-
    #### [`legacy-bundling`](#legacy-bundling)

    - Default: false
    - Type: Boolean
    - DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`

    Instead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.
- name: legacy-peer-deps
  id: cli/v10/using-npm/config#legacy-peer-deps
  summary: Causes npm to completely ignore peerDependencies when building a package tree, as in npm versions 3 through 6
  belongs_to: config
  description: |-
    #### [`legacy-peer-deps`](#legacy-peer-deps)

    - Default: false
    - Type: Boolean

    Causes npm to completely ignore `peerDependencies` when building a package tree, as in npm versions 3 through 6.

    If a package cannot be installed because of overly strict `peerDependencies` that collide, it provides a way to move forward resolving the situation.

    This differs from `--omit=peer`, in that `--omit=peer` will avoid unpacking `peerDependencies` on disk, but will still design a tree such that `peerDependencies` *could* be unpacked in a correct place.

    Use of `legacy-peer-deps` is not recommended, as it will not enforce the `peerDependencies` contract that meta-dependencies may rely on.
- name: license
  id: cli/v10/configuring-npm/package-json#license
  summary: You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it
  belongs_to: package.json
  description: |-
    ### [license](#license)

    You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.

    If you're using a common license such as BSD-2-Clause or MIT, add a current SPDX license identifier for the license you're using, like this:

    ``` javascript
    {
      "license": "BSD-3-Clause"
    }
    ```

    You can check [the full list of SPDX license IDs](https://spdx.org/licenses/). Ideally you should pick one that is [OSI](https://opensource.org/licenses/) approved.

    If your package is licensed under multiple common licenses, use an [SPDX license expression syntax version 2.0 string](https://spdx.dev/specifications/), like this:

    ``` javascript
    {
      "license": "(ISC OR GPL-3.0)"
    }
    ```

    If you are using a license that hasn't been assigned an SPDX identifier, or if you are using a custom license, use a string value like this one:

    ``` javascript
    {
      "license": "SEE LICENSE IN <filename>"
    }
    ```

    Then include a file named `<filename>` at the top level of the package.

    Some old packages used license objects or a "licenses" property containing an array of license objects:

    ``` javascript
    // Not valid metadata
    {
      "license" : {
        "type" : "ISC",
        "url" : "https://opensource.org/licenses/ISC"
      }
    }


    // Not valid metadata
    {
      "licenses" : [
        {
          "type": "MIT",
          "url": "https://www.opensource.org/licenses/mit-license.php"
        },
        {
          "type": "Apache-2.0",
          "url": "https://opensource.org/licenses/apache2.0.php"
        }
      ]
    }
    ```

    Those styles are now deprecated. Instead, use SPDX expressions, like this:

    ``` javascript
    {
      "license": "ISC"
    }
    ```

    ``` javascript
    {
      "license": "(MIT OR Apache-2.0)"
    }
    ```

    Finally, if you do not wish to grant others the right to use a private or unpublished package under any terms:

    ``` javascript
    {
      "license": "UNLICENSED"
    }
    ```

    Consider also setting `"private": true` to prevent accidental publication.
- name: link
  id: cli/v10/using-npm/config#link
  summary: Used with npm ls, limiting output to only those packages that are linked
  belongs_to: config
  description: |-
    #### [`link`](#link)

    - Default: false
    - Type: Boolean

    Used with `npm ls`, limiting output to only those packages that are linked.
- name: local-address
  id: cli/v10/using-npm/config#local-address
  summary: The IP address of the local interface to use when making connections to the npm registry
  belongs_to: config
  description: |-
    #### [`local-address`](#local-address)

    - Default: null
    - Type: IP Address

    The IP address of the local interface to use when making connections to the npm registry. Must be IPv4 in versions of Node prior to 0.12.
- name: location
  id: cli/v10/using-npm/config#location
  summary: When passed to npm config this refers to which config file to use
  belongs_to: config
  description: |-
    #### [`location`](#location)

    - Default: "user" unless `--global` is passed, which will also set this value to "global"
    - Type: "global", "user", or "project"

    When passed to `npm config` this refers to which config file to use.

    When set to "global" mode, packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.

    - packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.
    - bin files are linked to `{prefix}/bin`
    - man pages are linked to `{prefix}/share/man`

    &nbsp;
- name: lockfile-version
  id: cli/v10/using-npm/config#lockfile-version
  summary: Set the lockfile format version to be used in package-lock.json and npm-shrinkwrap-json files
  belongs_to: config
  description: |-
    #### [`lockfile-version`](#lockfile-version)

    - Default: Version 3 if no lockfile, auto-converting v1 lockfiles to v3, otherwise maintain current lockfile version.
    - Type: null, 1, 2, 3, "1", "2", or "3"

    Set the lockfile format version to be used in package-lock.json and npm-shrinkwrap-json files. Possible options are:

    1: The lockfile version used by npm versions 5 and 6. Lacks some data that is used during the install, resulting in slower and possibly less deterministic installs. Prevents lockfile churn when interoperating with older npm versions.

    2: The default lockfile version used by npm version 7 and 8. Includes both the version 1 lockfile data and version 3 lockfile data, for maximum determinism and interoperability, at the expense of more bytes on disk.

    3: Only the new lockfile information introduced in npm version 7. Smaller on disk than lockfile version 2, but not interoperable with older npm versions. Ideal if all users are on npm version 7 and higher.
- name: Logging
  id: cli/v10/using-npm/logging
  summary: The npm CLI has various mechanisms for showing different levels of information back to end-users for certain commands, configurations & environments
  description: "# Logging\n\nWhy, What & How We Log\n\n### [Description](#description)\n\nThe `npm` CLI has various mechanisms for showing different levels of information back to end-users for certain commands, configurations & environments.\n\n### [Setting Log File Location](#setting-log-file-location)\n\nAll logs are written to a debug log, with the path to that file printed if the execution of a command fails.\n\nThe default location of the logs directory is a directory named `_logs` inside the npm cache. This can be changed with the `logs-dir` config option.\n\nFor example, if you wanted to write all your logs to the current working directory, you could run: `npm install --logs-dir=.`. This is especially helpful in debugging a specific `npm` issue as you can run a command multiple times with different config values and then diff all the log files.\n\nLog files will be removed from the `logs-dir` when the number of log files exceeds `logs-max`, with the oldest logs being deleted first.\n\nTo turn off logs completely set `--logs-max=0`.\n\n### [Setting Log Levels](#setting-log-levels)\n\n#### [`loglevel`](#loglevel)\n\n`loglevel` is a global argument/config that can be set to determine the type of information to be displayed.\n\nThe default value of `loglevel` is `\"notice\"` but there are several levels/types of logs available, including:\n\n- `\"silent\"`\n- `\"error\"`\n- `\"warn\"`\n- `\"notice\"`\n- `\"http\"`\n- `\"info\"`\n- `\"verbose\"`\n- `\"silly\"`\n\nAll logs pertaining to a level proceeding the current setting will be shown.\n\n##### [Aliases](#aliases)\n\nThe log levels listed above have various corresponding aliases, including:\n\n- `-d`: `--loglevel info`\n- `--dd`: `--loglevel verbose`\n- `--verbose`: `--loglevel verbose`\n- `--ddd`: `--loglevel silly`\n- `-q`: `--loglevel warn`\n- `--quiet`: `--loglevel warn`\n- `-s`: `--loglevel silent`\n- `--silent`: `--loglevel silent`\n\n#### [`foreground-scripts`](#foreground-scripts)\n\nThe `npm` CLI began hiding the output of lifecycle scripts for `npm install` as of `v7`. Notably, this means you will not see logs/output from packages that may be using \"install scripts\" to display information back to you or from your own project's scripts defined in `package.json`. If you'd like to change this behavior & log this output you can set `foreground-scripts` to `true`.\n\n### [Timing Information](#timing-information)\n\nThe [`--timing` config](config#timing) can be set which does a few things:\n\n1.  Always shows the full path to the debug log regardless of command exit status\n2.  Write timing information to a process specific timing file in the cache or `logs-dir`\n3.  Output timing information to the terminal\n\nThis file contains a `timers` object where the keys are an identifier for the portion of the process being timed and the value is the number of milliseconds it took to complete.\n\nSometimes it is helpful to get timing information without outputting anything to the terminal. For example, the performance might be affected by writing to the terminal. In this case you can use `--timing --silent` which will still write the timing file, but not output anything to the terminal while running.\n\n### [Registry Response Headers](#registry-response-headers)\n\n#### [`npm-notice`](#npm-notice)\n\nThe `npm` CLI reads from & logs any `npm-notice` headers that are returned from the configured registry. This mechanism can be used by third-party registries to provide useful information when network-dependent requests occur.\n\nThis header is not cached, and will not be logged if the request is served from the cache.\n\n### [Logs and Sensitive Information](#logs-and-sensitive-information)\n\nThe `npm` CLI makes a best effort to redact the following from terminal output and log files:\n\n- Passwords inside basic auth URLs\n- npm tokens\n\nHowever, this behavior should not be relied on to keep all possible sensitive information redacted. If you are concerned about secrets in your log file or terminal output, you can use `--loglevel=silent` and `--logs-max=0` to ensure no logs are written to your terminal or filesystem.\n\n### [See also](#see-also)\n\n- [config](config)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/logging](https://docs.npmjs.com/cli/v10/using-npm/logging)"
- name: loglevel
  id: cli/v10/using-npm/config#loglevel
  summary: What level of logs to report
  belongs_to: config
  description: |-
    #### [`loglevel`](#loglevel)

    - Default: "notice"
    - Type: "silent", "error", "warn", "notice", "http", "info", "verbose", or "silly"

    What level of logs to report. All logs are written to a debug log, with the path to that file printed if the execution of a command fails.

    Any logs of a higher level than the setting are shown. The default is "notice".

    See also the `foreground-scripts` config.
- name: logs-dir
  id: cli/v10/using-npm/config#logs-dir
  summary: The location of npm's log directory
  belongs_to: config
  description: |-
    #### [`logs-dir`](#logs-dir)

    - Default: A directory named `_logs` inside the cache
    - Type: null or Path

    The location of npm's log directory. See [`npm logging`](logging) for more information.
- name: logs-max
  id: cli/v10/using-npm/config#logs-max
  summary: The maximum number of log files to store
  belongs_to: config
  description: |-
    #### [`logs-max`](#logs-max)

    - Default: 10
    - Type: Number

    The maximum number of log files to store.

    If set to 0, no log files will be written for the current run.
- name: long
  id: cli/v10/using-npm/config#long
  summary: Show extended information in ls, search, and help-search
  belongs_to: config
  description: |-
    #### [`long`](#long)

    - Default: false
    - Type: Boolean

    Show extended information in `ls`, `search`, and `help-search`.
- name: main
  id: cli/v10/configuring-npm/package-json#main
  summary: The main field is a module ID that is the primary entry point to your program
  belongs_to: package.json
  description: |-
    ### [main](#main)

    The main field is a module ID that is the primary entry point to your program. That is, if your package is named `foo`, and a user installs it, and then does `require("foo")`, then your main module's exports object will be returned.

    This should be a module relative to the root of your package folder.

    For most modules, it makes the most sense to have a main script and often not much else.

    If `main` is not set, it defaults to `index.js` in the package's root folder.
- name: man
  id: cli/v10/configuring-npm/package-json#man
  summary: Specify either a single file or an array of filenames to put in place for the man program to find
  belongs_to: package.json
  description: |-
    ### [man](#man)

    Specify either a single file or an array of filenames to put in place for the `man` program to find.

    If only a single file is provided, then it's installed such that it is the result from `man <pkgname>`, regardless of its actual filename. For example:

    ``` javascript
    {
      "name": "foo",
      "version": "1.2.3",
      "description": "A packaged foo fooer for fooing foos",
      "main": "foo.js",
      "man": "./man/doc.1"
    }
    ```

    would link the `./man/doc.1` file in such that it is the target for `man foo`

    If the filename doesn't start with the package name, then it's prefixed. So, this:

    ``` javascript
    {
      "name": "foo",
      "version": "1.2.3",
      "description": "A packaged foo fooer for fooing foos",
      "main": "foo.js",
      "man": ["./man/foo.1", "./man/bar.1"]
    }
    ```

    will create files to do `man foo` and `man foo-bar`.

    Man files must end with a number, and optionally a `.gz` suffix if they are compressed. The number dictates which man section the file is installed into.

    ``` javascript
    {
      "name": "foo",
      "version": "1.2.3",
      "description": "A packaged foo fooer for fooing foos",
      "main": "foo.js",
      "man": ["./man/foo.1", "./man/foo.2"]
    }
    ```

    will create entries for `man foo` and `man 2 foo`
- name: Managing organization members
  id: organizations/managing-organization-members
  summary: © npm, Inc
  description: "# Managing organization members\n\n- [Adding members to your organization](../adding-members-to-your-organization)\n- [Accepting or rejecting an organization invitation](../accepting-or-rejecting-an-organization-invitation)\n- [Organization roles and permissions](../organization-roles-and-permissions)\n- [Managing organization permissions](../managing-organization-permissions)\n- [Removing members from your organization](../removing-members-from-your-organization)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/organizations/managing-organization-members](https://docs.npmjs.com/organizations/managing-organization-members)"
- name: Managing organization packages
  id: organizations/managing-organization-packages
  summary: © npm, Inc
  description: "# Managing organization packages\n\n- [About organization scopes and packages](../about-organization-scopes-and-packages)\n- [Configuring your npm client with your organization settings](../configuring-your-npm-client-with-your-organization-settings)\n- [Creating and publishing an organization scoped package](../creating-and-publishing-an-organization-scoped-package)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/organizations/managing-organization-packages](https://docs.npmjs.com/organizations/managing-organization-packages)"
- name: Managing organization permissions
  id: managing-organization-permissions
  summary: As an organization owner, you can change the role of any member of your organization to add or remove permissions on the organization for that member
  description: "# Managing organization permissions\n\nAs an organization owner, you can change the role of any member of your organization to add or remove permissions on the organization for that member.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Members**.\n\n5.  In the list of organization members, find the member whose role you want to change.\n\n6.  In the member row, to select the new role of the organization member, click **member**, **admin**, or **owner**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/managing-organization-permissions](https://docs.npmjs.com/managing-organization-permissions)"
- name: Managing team access to organization packages
  id: managing-team-access-to-organization-packages
  summary: As an organization owner or team admin, you can add or remove package access to or from teams in your organization
  description: "# Managing team access to organization packages\n\nAs an organization owner or team admin, you can add or remove package access to or from teams in your organization.\n\n## [Adding package access to a team](#adding-package-access-to-a-team)\n\n### [Adding package access to a team on the web](#adding-package-access-to-a-team-on-the-web)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  Beside the team to which you want to add package access, click **Packages**.\n\n6.  On the \"Add Packages\" page, in the \"Package\" field, type the name of the package and select from the dropdown menu.\n\n7.  Click **+ Add Existing Package**.\n\n8.  Beside the package name, click **read** or **read/write** to set the team permissions for the package.\n\n### [Adding package access to a team using the CLI](#adding-package-access-to-a-team-using-the-cli)\n\nAs an organization owner or team admin, you can use the CLI `access` command to add package access to a team on the command line:\n\n`npm access grant <read-only|read-write> <org:team> [<package>]`\n\nFor more information, see \"[npm-access](https://docs.npmjs.com/cli/v8/commands/npm-access/)\".\n\n## [Removing package access from a team](#removing-package-access-from-a-team)\n\n### [Removing package access from a team on the web](#removing-package-access-from-a-team-on-the-web)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  Beside the team from which you want to remove package access, click **Packages**.\n\n6.  Beside the name of the package from which you want to remove access, click **x**.\n\n### [Removing package access from a team using the CLI](#removing-package-access-from-a-team-using-the-cli)\n\nAs an organization owner or team admin, you can also use the CLI `access` command to revoke package access from a team on the command line:\n\n`npm access revoke <org:team> [<package>]`\n\nFor more information, see \"[npm-access](https://docs.npmjs.com/cli/v8/commands/npm-access/)\".\n\n## [Changing package access for a team](#changing-package-access-for-a-team)\n\n### [Changing package access for a team on the web](#changing-package-access-for-a-team-on-the-web)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  Beside the team from which you want to remove package access, click **Packages**.\n\n6.  Beside the package name, click **read** or **read/write** to set the team permissions for the package.\n\n### [Changing package access for a team from the CLI](#changing-package-access-for-a-team-from-the-cli)\n\nAs an organization owner or team admin, you can change package access for a team from the command line:\n\n`npm access`\n\nFor more information, see the [`npm-access` CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-access/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/managing-team-access-to-organization-packages](https://docs.npmjs.com/managing-team-access-to-organization-packages)"
- name: Managing teams
  id: organizations/managing-teams
  summary: © npm, Inc
  description: "# Managing teams\n\n- [About the developers team](../about-developers-team)\n- [Creating teams](../creating-teams)\n- [Adding organization members to teams](../adding-organization-members-to-teams)\n- [Removing organization members from teams](../removing-organization-members-from-teams)\n- [Managing team access to organization packages](../managing-team-access-to-organization-packages)\n- [Removing teams](../removing-teams)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/organizations/managing-teams](https://docs.npmjs.com/organizations/managing-teams)"
- name: Managing your npm user account
  id: getting-started/managing-your-npm-user-account
  summary: © npm, Inc
  description: "# Managing your npm user account\n\n- [Managing your profile settings](../managing-your-profile-settings)\n- [Changing your npm username](../changing-your-npm-username)\n- [Deleting your npm user account](../deleting-your-npm-user-account)\n- [Requesting an export of your personal data](../requesting-your-data)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/getting-started/managing-your-npm-user-account](https://docs.npmjs.com/getting-started/managing-your-npm-user-account)"
- name: Managing your profile settings
  id: managing-your-profile-settings
  summary: You can manage settings for your user account profile from the web or command line
  description: "# Managing your profile settings\n\nYou can manage settings for your user account profile from the web or command line.\n\n## [Managing user account profile settings from the web](#managing-user-account-profile-settings-from-the-web)\n\nFrom the web, you can change the following user profile settings:\n\n- Avatar\n- Password\n- Full name\n- Link GitHub Account\n- Link Twitter Account\n- Email address added to package metadata\n- Two-factor authentication status\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n### [Linking your npm and GitHub accounts](#linking-your-npm-and-github-accounts)\n\n1.  On the account settings page, you will find a button to link your GitHub account. Click that.\n\n2.  If you are not currently logged in to GitHub you will be prompted to go through the authentication flow.\n\n3.  After successfully logging in, or if you already had an active browser sessions, you will be prompted to \"authorize npm account link\", click the button.\n\n4.  You will be redirected to npm and the link will show as successful in your settings.\n\n### [Linking your npm and Twitter accounts](#linking-your-npm-and-twitter-accounts)\n\n1.  On the account settings page, you will find a button to link your Twitter account. Click that.\n\n2.  If you are not currently logged in to Twitter you will be prompted to go through the authentication flow. Click \"Log in\"\n\n3.  After successfully logging in, or if you already had an active browser sessions, you will be prompted to \"Authorize app\", click the button.\n\n4.  You will be redirected to npm and the link will show as successful in your settings.\n\n### [Removing your GitHub account from npm](#removing-your-github-account-from-npm)\n\n1.  On the account settings page, you will find a button to remove your GitHub account. Click that.\n\n    *Note: Clicking remove will only remove the link from your npm account. You need to `revoke` permissions from your [GitHub app authorization settings](https://github.com/settings/apps/authorizations) to permanently remove the integration from your GitHub account*\n\n### [Removing your Twitter account from npm](#removing-your-twitter-account-from-npm)\n\n1.  On the account settings page, you will find a button to remove your GitHub account. Click that.\n\n    *Note: Clicking remove will only remove the link from your npm account. You need to `revoke` permissions from your [Twitter connect apps management page](https://twitter.com/settings/connected_apps) to permanently remove the integration from your Twitter account*\n\n## [Managing user account profile settings from the command line](#managing-user-account-profile-settings-from-the-command-line)\n\n**Note:** Your npm client must be version 5.5.1 or higher to change your account settings from the CLI. To update to the latest version of npm, on the command line, run `npm install npm@latest -g`\n\n### [Viewing user account profile settings from the command line](#viewing-user-account-profile-settings-from-the-command-line)\n\nTo view your user profile settings from the CLI, on the command line, run the following command:\n\n`npm profile get`\n\n### [Updating user account profile settings from the command line](#updating-user-account-profile-settings-from-the-command-line)\n\nFrom the CLI, you can change the following properties for your user account:\n\n- `email`\n- `two-factor auth`\n- `fullname`\n- `homepage`\n- `freenode`\n- `password`\n\n1.  On the command line, type the following command, replacing `property` with the name of the property, and `value` with the new value:\n\n    `npm profile set <prop> <value>`\n\n2.  When prompted, provide your current password.\n\n3.  If you have enabled two-factor authentication on your account, when prompted, enter a one-time password.\n\nFor more details, see the `profile` [command line documentation](https://docs.npmjs.com/cli/v8/commands/npm-profile/).\n\n#### [Setting a password from the command line](#setting-a-password-from-the-command-line)\n\n1.  On the command line, type the following command:\n\n`npm profile set password`\n\n2.  When prompted, provide your current password.\n\n3.  When prompted, type a new password.\n\nTo protect your account, when you reset your password from the command line, it must:\n\n- be longer than 10 characters\n- not contain part of your username\n- not be in the \"[Have I Been Pwned](https://haveibeenpwned.com/)\" breach database\n\n#### [Configuring two-factor authentication from the command line](#configuring-two-factor-authentication-from-the-command-line)\n\nEnabling two-factor authentication on your account helps protect against unauthorized access to your account and packages.\n\nTo enable, configure, and disable two-factor authentication from the command line, see \"[Configuring two-factor authentication](configuring-two-factor-authentication#configuring-2fa-from-the-command-line)\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/managing-your-profile-settings](https://docs.npmjs.com/managing-your-profile-settings)"
- name: maxsockets
  id: cli/v10/using-npm/config#maxsockets
  summary: The maximum number of connections to use per origin (protocol/host/port combination)
  belongs_to: config
  description: |-
    #### [`maxsockets`](#maxsockets)

    - Default: 15
    - Type: Number

    The maximum number of connections to use per origin (protocol/host/port combination).
- name: message
  id: cli/v10/using-npm/config#message
  summary: Commit message which is used by npm version when creating version commit
  belongs_to: config
  description: |-
    #### [`message`](#message)

    - Default: "%s"
    - Type: String

    Commit message which is used by `npm version` when creating version commit.

    Any "%s" in the message will be replaced with the version number.
- name: name
  id: cli/v10/configuring-npm/package-json#name
  summary: If you plan to publish your package, the most important things in your package.json are the name and version fields as they will be required
  belongs_to: package.json
  description: |-
    ### [name](#name)

    If you plan to publish your package, the *most* important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.

    The name is what your thing is called.

    Some rules:

    - The name must be less than or equal to 214 characters. This includes the scope for scoped packages.
    - The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.
    - New packages must not have uppercase letters in the name.
    - The name ends up being part of a URL, an argument on the command line, and a folder name. Therefore, the name can't contain any non-URL-safe characters.

    Some tips:

    - Don't use the same name as a core Node module.
    - Don't put "js" or "node" in the name. It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the "engines" field. (See below.)
    - The name will probably be passed as an argument to require(), so it should be something short, but also reasonably descriptive.
    - You may want to check the npm registry to see if there's something by that name already, before you get too attached to it. [https://www.npmjs.com/](https://www.npmjs.com/)

    A name can be optionally prefixed by a scope, e.g. `@myorg/mypackage`. See [`scope`](../using-npm/scope) for more detail.
- name: node-options
  id: cli/v10/using-npm/config#node-options
  summary: Options to pass through to Node.js via the NODE_OPTIONS environment variable
  belongs_to: config
  description: |-
    #### [`node-options`](#node-options)

    - Default: null
    - Type: null or String

    Options to pass through to Node.js via the `NODE_OPTIONS` environment variable. This does not impact how npm itself is executed but it does impact how lifecycle scripts are called.
- name: noproxy
  id: cli/v10/using-npm/config#noproxy
  summary: Domain extensions that should bypass any proxies
  belongs_to: config
  description: |-
    #### [`noproxy`](#noproxy)

    - Default: The value of the NO_PROXY environment variable
    - Type: String (can be set multiple times)

    Domain extensions that should bypass any proxies.

    Also accepts a comma-delimited string.
- name: npm
  id: cli/v10/commands/npm
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm\n\njavascript package manager\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm\n```\n\nNote: This command is unaware of workspaces.\n\n### [Version](#version)\n\n10.2.5\n\n### [Description](#description)\n\nnpm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently.\n\nIt is extremely configurable to support a variety of use cases. Most commonly, you use it to publish, discover, install, and develop node programs.\n\nRun `npm help` to get a list of available commands.\n\n### [Important](#important)\n\nnpm comes preconfigured to use npm's public registry at [https://registry.npmjs.org](https://registry.npmjs.org) by default. Use of the npm public registry is subject to terms of use available at [https://docs.npmjs.com/policies/terms](https://docs.npmjs.com/policies/terms).\n\nYou can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed by their terms of use.\n\n### [Introduction](#introduction)\n\nYou probably got npm because you want to install stuff.\n\nThe very first thing you will most likely want to run in any node program is `npm install` to install its dependencies.\n\nYou can also run `npm install blerg` to install the latest version of \"blerg\". Check out [`npm install`](npm-install) for more info. It can do a lot of stuff.\n\nUse the `npm search` command to show everything that's available in the public registry. Use `npm ls` to show everything you've installed.\n\n### [Dependencies](#dependencies)\n\nIf a package lists a dependency using a git URL, npm will install that dependency using the [`git`](https://github.com/git-guides/install-git) command and will generate an error if it is not installed.\n\nIf one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use [node-gyp](https://github.com/nodejs/node-gyp) for that task. For a Unix system, [node-gyp](https://github.com/nodejs/node-gyp) needs Python, make and a buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit [the node-gyp repository](https://github.com/nodejs/node-gyp) and the [node-gyp Wiki](https://github.com/nodejs/node-gyp/wiki).\n\n### [Directories](#directories)\n\nSee [`folders`](../configuring-npm/folders) to learn about where npm puts stuff.\n\nIn particular, npm has two modes of operation:\n\n- local mode: npm installs packages into the current project directory, which defaults to the current working directory. Packages install to `./node_modules`, and bins to `./node_modules/.bin`.\n- global mode: npm installs packages into the install prefix at `$npm_config_prefix/lib/node_modules` and bins to `$npm_config_prefix/bin`.\n\nLocal mode is the default. Use `-g` or `--global` on any command to run in global mode instead.\n\n### [Developer Usage](#developer-usage)\n\nIf you're using npm to develop and publish your code, check out the following help topics:\n\n- json: Make a package.json file. See [`package.json`](../configuring-npm/package-json).\n- link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change. Use [`npm link`](npm-link) to do this.\n- install: It's a good idea to install things if you don't need the symbolic link. Especially, installing other peoples code from the registry is done via [`npm install`](npm-install)\n- adduser: Create an account or log in. When you do this, npm will store credentials in the user config file.\n- publish: Use the [`npm publish`](npm-publish) command to upload your code to the registry.\n\n#### [Configuration](#configuration)\n\nnpm is extremely configurable. It reads its configuration options from 5 places.\n\n- Command line switches: Set a config with `--key val`. All keys take a value, even if they are booleans (the config parser doesn't know what the options are at the time of parsing). If you do not provide a value (`--key`) then the option is set to boolean `true`.\n- Environment Variables: Set any config by prefixing the name in an environment variable with `npm_config_`. For example, `export npm_config_key=val`.\n- User Configs: The file at `$HOME/.npmrc` is an ini-formatted list of configs. If present, it is parsed. If the `userconfig` option is set in the cli or env, that file will be used instead.\n- Global Configs: The file found at `./etc/npmrc` (relative to the global prefix will be parsed if it is found. See [`npm prefix`](npm-prefix) for more info on the global prefix. If the `globalconfig` option is set in the cli, env, or user config, then that file is parsed instead.\n- Defaults: npm's default configuration options are defined in `lib/utils/config/definitions.js`. These must not be changed.\n\nSee [`config`](../using-npm/config) for much much more information.\n\n### [Contributions](#contributions)\n\nPatches welcome!\n\nIf you would like to help, but don't know what to work on, read the [contributing guidelines](https://github.com/npm/cli/blob/latest/CONTRIBUTING.md) and check the issues list.\n\n### [Bugs](#bugs)\n\nWhen you find issues, please report them: [https://github.com/npm/cli/issues](https://github.com/npm/cli/issues)\n\nPlease be sure to follow the template and bug reporting guidelines.\n\n### [Feature Requests](#feature-requests)\n\nDiscuss new feature ideas on our discussion forum:\n\n- [https://github.com/npm/feedback](https://github.com/npm/feedback)\n\nOr suggest formal RFC proposals:\n\n- [https://github.com/npm/rfcs](https://github.com/npm/rfcs)\n\n### [See Also](#see-also)\n\n- [npm help](npm-help)\n- [package.json](../configuring-npm/package-json)\n- [npmrc](../configuring-npm/npmrc)\n- [npm config](npm-config)\n- [npm install](npm-install)\n- [npm prefix](npm-prefix)\n- [npm publish](npm-publish)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm](https://docs.npmjs.com/cli/v10/commands/npm)"
- name: npm package scope, access level, and visibility
  id: package-scope-access-level-and-visibility
  summary: Visibility of npm packages depends on the scope (namespace) in which the package is contained, and the access level (private or public) set for the package
  description: "# npm package scope, access level, and visibility\n\nVisibility of npm packages depends on the scope (namespace) in which the package is contained, and the access level (private or public) set for the package.\n\n**Note:** To create organization-scoped packages, you must first create an organization. For more information, see \"[Creating an organization](creating-an-organization)\".\n\n## [Public registry](#public-registry)\n\n| Scope    | Access level | Can view and download                                                        | Can write (publish)                                                                    |\n|----------|--------------|------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|\n| Org      | Private      | Members of a team in the organization with read access to the package        | Members of a team in the organization with read and write access to the package        |\n| Org      | Public       | Everyone                                                                     | Members of a team in the organization with read and write access to the package        |\n| User     | Private      | The package owner and users who have been granted read access to the package | The package owner and users who have been granted read and write access to the package |\n| User     | Public       | Everyone                                                                     | The package owner and users who have been granted read and write access to the package |\n| Unscoped | Public       | Everyone                                                                     | The package owner and users who have been granted read and write access to the package |\n\n**Note:** Only user accounts can create and manage unscoped packages. Organizations can only manage scoped packages.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/package-scope-access-level-and-visibility](https://docs.npmjs.com/package-scope-access-level-and-visibility)"
- name: npm-access
  id: cli/v10/commands/npm-access
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-access\n\nSet access level on published packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm access list packages [<user>|<scope>|<scope:team> [<package>]\nnpm access list collaborators [<package> [<user>]]\nnpm access get status [<package>]\nnpm access set status=public|private [<package>]\nnpm access set mfa=none|publish|automation [<package>]\nnpm access grant <read-only|read-write> <scope:team> [<package>]\nnpm access revoke <scope:team> [<package>]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nUsed to set access controls on private packages.\n\nFor all of the subcommands, `npm access` will perform actions on the packages in the current working directory if no package name is passed to the subcommand.\n\n- public / restricted (deprecated): Set a package to be either publicly accessible or restricted.\n\n- grant / revoke (deprecated): Add or remove the ability of users and teams to have read-only or read-write access to a package.\n\n- 2fa-required / 2fa-not-required (deprecated): Configure whether a package requires that anyone publishing it have two-factor authentication enabled on their account.\n\n- ls-packages (deprecated): Show all of the packages a user or a team is able to access, along with the access level, except for read-only public packages (it won't print the whole registry listing)\n\n- ls-collaborators (deprecated): Show all of the access privileges for a package. Will only show permissions for packages to which you have at least read access. If `<user>` is passed in, the list is filtered only to teams *that* user happens to belong to.\n\n- edit (not implemented)\n\n### [Details](#details)\n\n`npm access` always operates directly on the current registry, configurable from the command line using `--registry=<registry url>`.\n\nUnscoped packages are *always public*.\n\nScoped packages *default to restricted*, but you can either publish them as public using `npm publish --access=public`, or set their access as public using `npm access public` after the initial publish.\n\nYou must have privileges to set the access of a package:\n\n- You are an owner of an unscoped or scoped package.\n- You are a member of the team that owns a scope.\n- You have been given read-write privileges for a package, either as a member of a team or directly as an owner.\n\nIf you have two-factor authentication enabled then you'll be prompted to provide a second factor, or may use the `--otp=...` option to specify it on the command line.\n\nIf your account is not paid, then attempts to publish scoped packages will fail with an HTTP 402 status code (logically enough), unless you use `--access=public`.\n\nManagement of teams and team memberships is done with the `npm team` command.\n\n### [Configuration](#configuration)\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n### [See Also](#see-also)\n\n- [`libnpmaccess`](https://npm.im/libnpmaccess)\n- [npm team](npm-team)\n- [npm publish](npm-publish)\n- [npm config](npm-config)\n- [npm registry](../using-npm/registry)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-access](https://docs.npmjs.com/cli/v10/commands/npm-access)"
- name: npm-adduser
  id: cli/v10/commands/npm-adduser
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-adduser\n\nAdd a registry user account\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm adduser\n\n\nalias: add-user\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nCreate a new user in the specified registry, and save the credentials to the `.npmrc` file. If no registry is specified, the default registry will be used (see [`registry`](../using-npm/registry)).\n\nWhen using `legacy` for your `auth-type`, the username, password, and email are read in from prompts.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`scope`](#scope)\n\n- Default: the scope of the current project, if any, or \"\"\n- Type: String\n\nAssociate an operation with a scope for a scoped registry.\n\nUseful when logging in to or out of a private registry:\n\n``` javascript\n# log in, linking the scope to the custom registry\nnpm login --scope=@mycorp --registry=https://registry.mycorp.com\n\n\n# log out, removing the link and the auth token\nnpm logout --scope=@mycorp\n```\n\nThis will cause `@mycorp` to be mapped to the registry for future installation of packages specified according to the pattern `@mycorp/package`.\n\nThis will also cause `npm init` to create a scoped package.\n\n``` javascript\n# accept all defaults, and create a package named \"@foo/whatever\",\n# instead of just named \"whatever\"\nnpm init --scope=@foo --yes\n```\n\n#### [`auth-type`](#auth-type)\n\n- Default: \"web\"\n- Type: \"legacy\" or \"web\"\n\nWhat authentication strategy to use with `login`. Note that if an `otp` config is given, this value will always be set to `legacy`.\n\n### [See Also](#see-also)\n\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm owner](npm-owner)\n- [npm whoami](npm-whoami)\n- [npm token](npm-token)\n- [npm profile](npm-profile)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-adduser](https://docs.npmjs.com/cli/v10/commands/npm-adduser)"
- name: npm-audit
  id: cli/v10/commands/npm-audit
  summary: The audit command submits a description of the dependencies configured in your project to your default registry and asks for a report of known vulnerabilities
  description: "# npm-audit\n\nRun a security audit\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm audit [fix|signatures]\n```\n\n### [Description](#description)\n\nThe audit command submits a description of the dependencies configured in your project to your default registry and asks for a report of known vulnerabilities. If any vulnerabilities are found, then the impact and appropriate remediation will be calculated. If the `fix` argument is provided, then remediations will be applied to the package tree.\n\nThe command will exit with a 0 exit code if no vulnerabilities were found.\n\nNote that some vulnerabilities cannot be fixed automatically and will require manual intervention or review. Also note that since `npm audit fix` runs a full-fledged `npm install` under the hood, all configs that apply to the installer will also apply to `npm install` -- so things like `npm audit fix --package-lock-only` will work as expected.\n\nBy default, the audit command will exit with a non-zero code if any vulnerability is found. It may be useful in CI environments to include the `--audit-level` parameter to specify the minimum vulnerability level that will cause the command to fail. This option does not filter the report output, it simply changes the command's failure threshold.\n\n### [Package lock](#package-lock)\n\nBy default npm requires a package-lock or shrinkwrap in order to run the audit. You can bypass the package lock with `--no-package-lock` but be aware the results may be different with every run, since npm will re-build the dependency tree each time.\n\n### [Audit Signatures](#audit-signatures)\n\nTo ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI.\n\nRegistry signatures can be verified using the following `audit` command:\n\n``` javascript\n$ npm audit signatures\n```\n\nThe npm CLI supports registry signatures and signing keys provided by any registry if the following conventions are followed:\n\n1.  Signatures are provided in the package's `packument` in each published version within the `dist` object:\n\n``` javascript\n\"dist\":{\n  \"..omitted..\": \"..omitted..\",\n  \"signatures\": [{\n    \"keyid\": \"SHA256:{{SHA256_PUBLIC_KEY}}\",\n    \"sig\": \"a312b9c3cb4a1b693e8ebac5ee1ca9cc01f2661c14391917dcb111517f72370809...\"\n  }]\n}\n```\n\nSee this [example](https://registry.npmjs.org/light-cycle/1.4.3) of a signed package from the public npm registry.\n\nThe `sig` is generated using the following template: `${package.name}@${package.version}:${package.dist.integrity}` and the `keyid` has to match one of the public signing keys below.\n\n2.  Public signing keys are provided at `registry-host.tld/-/npm/v1/keys` in the following format:\n\n``` javascript\n{\n  \"keys\": [{\n    \"expires\": null,\n    \"keyid\": \"SHA256:{{SHA256_PUBLIC_KEY}}\",\n    \"keytype\": \"ecdsa-sha2-nistp256\",\n    \"scheme\": \"ecdsa-sha2-nistp256\",\n    \"key\": \"{{B64_PUBLIC_KEY}}\"\n  }]\n}\n```\n\nKeys response:\n\n- `expires`: null or a simplified extended [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601%22): `YYYY-MM-DDTHH:mm:ss.sssZ`\n- `keydid`: sha256 fingerprint of the public key\n- `keytype`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI\n- `scheme`: only `ecdsa-sha2-nistp256` is currently supported by the npm CLI\n- `key`: base64 encoded public key\n\nSee this [example key's response from the public npm registry](https://registry.npmjs.org/-/npm/v1/keys%22).\n\n### [Audit Endpoints](#audit-endpoints)\n\nThere are two audit endpoints that npm may use to fetch vulnerability information: the `Bulk Advisory` endpoint and the `Quick Audit` endpoint.\n\n#### [Bulk Advisory Endpoint](#bulk-advisory-endpoint)\n\nAs of version 7, npm uses the much faster `Bulk Advisory` endpoint to optimize the speed of calculating audit results.\n\nnpm will generate a JSON payload with the name and list of versions of each package in the tree, and POST it to the default configured registry at the path `/-/npm/v1/security/advisories/bulk`.\n\nAny packages in the tree that do not have a `version` field in their package.json file will be ignored. If any `--omit` options are specified (either via the [`--omit` config](../using-npm/config#omit), or one of the shorthands such as `--production`, `--only=dev`, and so on), then packages will be omitted from the submitted payload as appropriate.\n\nIf the registry responds with an error, or with an invalid response, then npm will attempt to load advisory data from the `Quick Audit` endpoint.\n\nThe expected result will contain a set of advisory objects for each dependency that matches the advisory range. Each advisory object contains a `name`, `url`, `id`, `severity`, `vulnerable_versions`, and `title`.\n\nnpm then uses these advisory objects to calculate vulnerabilities and meta-vulnerabilities of the dependencies within the tree.\n\n#### [Quick Audit Endpoint](#quick-audit-endpoint)\n\nIf the `Bulk Advisory` endpoint returns an error, or invalid data, npm will attempt to load advisory data from the `Quick Audit` endpoint, which is considerably slower in most cases.\n\nThe full package tree as found in `package-lock.json` is submitted, along with the following pieces of additional metadata:\n\n- `npm_version`\n- `node_version`\n- `platform`\n- `arch`\n- `node_env`\n\nAll packages in the tree are submitted to the Quick Audit endpoint. Omitted dependency types are skipped when generating the report.\n\n#### [Scrubbing](#scrubbing)\n\nOut of an abundance of caution, npm versions 5 and 6 would \"scrub\" any packages from the submitted report if their name contained a `/` character, so as to avoid leaking the names of potentially private packages or git URLs.\n\nHowever, in practice, this resulted in audits often failing to properly detect meta-vulnerabilities, because the tree would appear to be invalid due to missing dependencies, and prevented the detection of vulnerabilities in package trees that used git dependencies or private modules.\n\nThis scrubbing has been removed from npm as of version 7.\n\n#### [Calculating Meta-Vulnerabilities and Remediations](#calculating-meta-vulnerabilities-and-remediations)\n\nnpm uses the [`@npmcli/metavuln-calculator`](http://npm.im/@npmcli/metavuln-calculator) module to turn a set of security advisories into a set of \"vulnerability\" objects. A \"meta-vulnerability\" is a dependency that is vulnerable by virtue of dependence on vulnerable versions of a vulnerable package.\n\nFor example, if the package `foo` is vulnerable in the range `>=1.0.2 <2.0.0`, and the package `bar` depends on `foo@^1.1.0`, then that version of `bar` can only be installed by installing a vulnerable version of `foo`. In this case, `bar` is a \"metavulnerability\".\n\nOnce metavulnerabilities for a given package are calculated, they are cached in the `~/.npm` folder and only re-evaluated if the advisory range changes, or a new version of the package is published (in which case, the new version is checked for metavulnerable status as well).\n\nIf the chain of metavulnerabilities extends all the way to the root project, and it cannot be updated without changing its dependency ranges, then `npm audit fix` will require the `--force` option to apply the remediation. If remediations do not require changes to the dependency ranges, then all vulnerable packages will be updated to a version that does not have an advisory or metavulnerability posted against it.\n\n### [Exit Code](#exit-code)\n\nThe `npm audit` command will exit with a 0 exit code if no vulnerabilities were found. The `npm audit fix` command will exit with 0 exit code if no vulnerabilities are found *or* if the remediation is able to successfully fix all vulnerabilities.\n\nIf vulnerabilities were found the exit code will depend on the [`audit-level` config](../using-npm/config#audit-level).\n\n### [Examples](#examples)\n\nScan your project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies:\n\n``` javascript\n$ npm audit fix\n```\n\nRun `audit fix` without modifying `node_modules`, but still updating the pkglock:\n\n``` javascript\n$ npm audit fix --package-lock-only\n```\n\nSkip updating `devDependencies`:\n\n``` javascript\n$ npm audit fix --only=prod\n```\n\nHave `audit fix` install SemVer-major updates to toplevel dependencies, not just SemVer-compatible ones:\n\n``` javascript\n$ npm audit fix --force\n```\n\nDo a dry run to get an idea of what `audit fix` will do, and *also* output install information in JSON format:\n\n``` javascript\n$ npm audit fix --dry-run --json\n```\n\nScan your project for vulnerabilities and just show the details, without fixing anything:\n\n``` javascript\n$ npm audit\n```\n\nGet the detailed audit report in JSON format:\n\n``` javascript\n$ npm audit --json\n```\n\nFail an audit only if the results include a vulnerability with a level of moderate or higher:\n\n``` javascript\n$ npm audit --audit-level=moderate\n```\n\n### [Configuration](#configuration)\n\n#### [`audit-level`](#audit-level)\n\n- Default: null\n- Type: null, \"info\", \"low\", \"moderate\", \"high\", \"critical\", or \"none\"\n\nThe minimum level of vulnerability for `npm audit` to exit with a non-zero exit code.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`force`](#force)\n\n- Default: false\n- Type: Boolean\n\nRemoves various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.\n\n- Allow clobbering non-npm files in global installs.\n- Allow the `npm version` command to work on an unclean git repository.\n- Allow deleting the cache folder with `npm cache clean`.\n- Allow installing packages that have an `engines` declaration requiring a different version of npm.\n- Allow installing packages that have an `engines` declaration requiring a different version of `node`, even if `--engine-strict` is enabled.\n- Allow `npm audit fix` to install modules outside your stated dependency range (including SemVer-major changes).\n- Allow unpublishing all versions of a published package.\n- Allow conflicting peerDependencies to be installed in the root project.\n- Implicitly set `--yes` during `npm init`.\n- Allow clobbering existing values in `npm pkg`\n- Allow unpublishing of entire packages (not just a single version).\n\nIf you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n#### [`package-lock`](#package-lock-1)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm install](npm-install)\n- [config](../using-npm/config)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-audit](https://docs.npmjs.com/cli/v10/commands/npm-audit)"
- name: npm-bugs
  id: cli/v10/commands/npm-bugs
  summary: This command tries to guess at the likely location of a package's bug tracker URL or the mailto URL of the support email, and then tries to open it using the --browser config param
  description: "# npm-bugs\n\nReport bugs for a package in a web browser\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm bugs [<pkgname> [<pkgname> ...]]\n\n\nalias: issues\n```\n\n### [Description](#description)\n\nThis command tries to guess at the likely location of a package's bug tracker URL or the `mailto` URL of the support email, and then tries to open it using the [`--browser` config](../using-npm/config#browser) param. If no package name is provided, it will search for a `package.json` in the current folder and use the `name` property.\n\n### [Configuration](#configuration)\n\n#### [`browser`](#browser)\n\n- Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n- Type: null, Boolean, or String\n\nThe browser that is called by npm commands to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to terminal.\n\nSet to `true` to use default system URL opener.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [npm docs](npm-docs)\n- [npm view](npm-view)\n- [npm publish](npm-publish)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [package.json](../configuring-npm/package-json)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-bugs](https://docs.npmjs.com/cli/v10/commands/npm-bugs)"
- name: npm-cache
  id: cli/v10/commands/npm-cache
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-cache\n\nManipulates packages cache\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm cache add <package-spec>\nnpm cache clean [<key>]\nnpm cache ls [<name>@<version>]\nnpm cache verify\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nUsed to add, list, or clean the npm cache folder.\n\n- add: Add the specified packages to the local cache. This command is primarily intended to be used internally by npm, but it can provide a way to add data to the local installation cache explicitly.\n\n- clean: Delete all data out of the cache folder. Note that this is typically unnecessary, as npm's cache is self-healing and resistant to data corruption issues.\n\n- verify: Verify the contents of the cache folder, garbage collecting any unneeded data, and verifying the integrity of the cache index and all cached data.\n\n### [Details](#details)\n\nnpm stores cache data in an opaque directory within the configured `cache`, named `_cacache`. This directory is a [`cacache`](http://npm.im/cacache)-based content-addressable cache that stores all http request data as well as other package-related data. This directory is primarily accessed through `pacote`, the library responsible for all package fetching as of npm@5.\n\nAll data that passes through the cache is fully verified for integrity on both insertion and extraction. Cache corruption will either trigger an error, or signal to `pacote` that the data must be refetched, which it will do automatically. For this reason, it should never be necessary to clear the cache for any reason other than reclaiming disk space, thus why `clean` now requires `--force` to run.\n\nThere is currently no method exposed through npm to inspect or directly manage the contents of this cache. In order to access it, `cacache` must be used directly.\n\nnpm will not remove data by itself: the cache will grow as new packages are installed.\n\n### [A note about the cache's design](#a-note-about-the-caches-design)\n\nThe npm cache is strictly a cache: it should not be relied upon as a persistent and reliable data store for package data. npm makes no guarantee that a previously-cached piece of data will be available later, and will automatically delete corrupted contents. The primary guarantee that the cache makes is that, if it does return data, that data will be exactly the data that was inserted.\n\nTo run an offline verification of existing cache contents, use `npm cache verify`.\n\n### [Configuration](#configuration)\n\n#### [`cache`](#cache)\n\n- Default: Windows: `%LocalAppData%\\npm-cache`, Posix: `~/.npm`\n- Type: Path\n\nThe location of npm's cache directory.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm install](npm-install)\n- [npm publish](npm-publish)\n- [npm pack](npm-pack)\n- [https://npm.im/cacache](https://npm.im/cacache)\n- [https://npm.im/pacote](https://npm.im/pacote)\n- [https://npm.im/@npmcli/arborist](https://npm.im/@npmcli/arborist)\n- [https://npm.im/make-fetch-happen](https://npm.im/make-fetch-happen)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-cache](https://docs.npmjs.com/cli/v10/commands/npm-cache)"
- name: npm-ci
  id: cli/v10/commands/npm-ci
  summary: This command is similar to npm install, except it's meant to be used in automated environments such as test platforms, continuous integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies
  description: "# npm-ci\n\nClean install a project\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm ci\n\n\naliases: clean-install, ic, install-clean, isntall-clean\n```\n\n### [Description](#description)\n\nThis command is similar to [`npm install`](npm-install), except it's meant to be used in automated environments such as test platforms, continuous integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies.\n\nThe main differences between using `npm install` and `npm ci` are:\n\n- The project **must** have an existing `package-lock.json` or `npm-shrinkwrap.json`.\n- If dependencies in the package lock do not match those in `package.json`, `npm ci` will exit with an error, instead of updating the package lock.\n- `npm ci` can only install entire projects at a time: individual dependencies cannot be added with this command.\n- If a `node_modules` is already present, it will be automatically removed before `npm ci` begins its install.\n- It will never write to `package.json` or any of the package-locks: installs are essentially frozen.\n\nNOTE: If you create your `package-lock.json` file by running `npm install` with flags that can affect the shape of your dependency tree, such as `--legacy-peer-deps` or `--install-links`, you *must* provide the same flags to `npm ci` or you are likely to encounter errors. An easy way to do this is to run, for example, `npm config set legacy-peer-deps=true --location=project` and commit the `.npmrc` file to your repo.\n\n### [Example](#example)\n\nMake sure you have a package-lock and an up-to-date install:\n\n``` javascript\n$ cd ./my/npm/project\n$ npm install\nadded 154 packages in 10s\n$ ls | grep package-lock\n```\n\nRun `npm ci` in that project\n\n``` javascript\n$ npm ci\nadded 154 packages in 5s\n```\n\nConfigure Travis CI to build using `npm ci` instead of `npm install`:\n\n``` javascript\n# .travis.yml\ninstall:\n- npm ci\n# keep the npm cache around to speed up installs\ncache:\n  directories:\n  - \"$HOME/.npm\"\n```\n\n### [Configuration](#configuration)\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm install](npm-install)\n- [package-lock.json](../configuring-npm/package-lock-json)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-ci](https://docs.npmjs.com/cli/v10/commands/npm-ci)"
- name: npm-completion
  id: cli/v10/commands/npm-completion
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-completion\n\nTab Completion for npm\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm completion\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nEnables tab-completion in all npm commands.\n\nThe synopsis above loads the completions into your current shell. Adding it to your ~/.bashrc or ~/.zshrc will make the completions available everywhere:\n\n``` javascript\nnpm completion >> ~/.bashrc\nnpm completion >> ~/.zshrc\n```\n\nYou may of course also pipe the output of `npm completion` to a file such as `/usr/local/etc/bash_completion.d/npm` or `/etc/bash_completion.d/npm` if you have a system that will read that file for you.\n\nWhen `COMP_CWORD`, `COMP_LINE`, and `COMP_POINT` are defined in the environment, `npm completion` acts in \"plumbing mode\", and outputs completions based on the arguments.\n\n### [See Also](#see-also)\n\n- [npm developers](../using-npm/developers)\n- [npm](npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-completion](https://docs.npmjs.com/cli/v10/commands/npm-completion)"
- name: npm-config
  id: cli/v10/commands/npm-config
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-config\n\nManage the npm configuration files\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm config set <key>=<value> [<key>=<value> ...]\nnpm config get [<key> [<key> ...]]\nnpm config delete <key> [<key> ...]\nnpm config list [--json]\nnpm config edit\nnpm config fix\n\n\nalias: c\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nnpm gets its config settings from the command line, environment variables, `npmrc` files, and in some cases, the `package.json` file.\n\nSee [npmrc](../configuring-npm/npmrc) for more information about the npmrc files.\n\nSee [config](../using-npm/config) for a more thorough explanation of the mechanisms involved, and a full list of config options available.\n\nThe `npm config` command can be used to update and edit the contents of the user and global npmrc files.\n\n### [Sub-commands](#sub-commands)\n\nConfig supports the following sub-commands:\n\n#### [set](#set)\n\n``` javascript\nnpm config set key=value [key=value...]\nnpm set key=value [key=value...]\n```\n\nSets each of the config keys to the value provided.\n\nIf value is omitted, the key will be removed from your config file entirely.\n\nNote: for backwards compatibility, `npm config set key value` is supported as an alias for `npm config set key=value`.\n\n#### [get](#get)\n\n``` javascript\nnpm config get [key ...]\nnpm get [key ...]\n```\n\nEcho the config value(s) to stdout.\n\nIf multiple keys are provided, then the values will be prefixed with the key names.\n\nIf no keys are provided, then this command behaves the same as `npm config list`.\n\n#### [list](#list)\n\n``` javascript\nnpm config list\n```\n\nShow all the config settings. Use `-l` to also show defaults. Use `--json` to show the settings in json format.\n\n#### [delete](#delete)\n\n``` javascript\nnpm config delete key [key ...]\n```\n\nDeletes the specified keys from all configuration files.\n\n#### [edit](#edit)\n\n``` javascript\nnpm config edit\n```\n\nOpens the config file in an editor. Use the `--global` flag to edit the global config.\n\n#### [fix](#fix)\n\n``` javascript\nnpm config fix\n```\n\nAttempts to repair invalid configuration items. Usually this means attaching authentication config (i.e. `_auth`, `_authToken`) to the configured `registry`.\n\n### [Configuration](#configuration)\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`editor`](#editor)\n\n- Default: The EDITOR or VISUAL environment variables, or '%SYSTEMROOT%\\notepad.exe' on Windows, or 'vi' on Unix systems\n- Type: String\n\nThe command to run for `npm edit` and `npm config edit`.\n\n#### [`location`](#location)\n\n- Default: \"user\" unless `--global` is passed, which will also set this value to \"global\"\n- Type: \"global\", \"user\", or \"project\"\n\nWhen passed to `npm config` this refers to which config file to use.\n\nWhen set to \"global\" mode, packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`long`](#long)\n\n- Default: false\n- Type: Boolean\n\nShow extended information in `ls`, `search`, and `help-search`.\n\n### [See Also](#see-also)\n\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [package.json](../configuring-npm/package-json)\n- [npmrc](../configuring-npm/npmrc)\n- [npm](npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-config](https://docs.npmjs.com/cli/v10/commands/npm-config)"
- name: npm-dedupe
  id: cli/v10/commands/npm-dedupe
  summary: Searches the local package tree and attempts to simplify the overall structure by moving dependencies further up the tree, where they can be more effectively shared by multiple dependent packages
  description: "# npm-dedupe\n\nReduce duplication in the package tree\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm dedupe\n\n\nalias: ddp\n```\n\n### [Description](#description)\n\nSearches the local package tree and attempts to simplify the overall structure by moving dependencies further up the tree, where they can be more effectively shared by multiple dependent packages.\n\nFor example, consider this dependency graph:\n\n``` javascript\na\n+-- b <-- depends on c@1.0.x\n|   `-- c@1.0.3\n`-- d <-- depends on c@~1.0.9\n    `-- c@1.0.10\n```\n\nIn this case, `npm dedupe` will transform the tree to:\n\n``` javascript\na\n+-- b\n+-- d\n`-- c@1.0.10\n```\n\nBecause of the hierarchical nature of node's module lookup, b and d will both get their dependency met by the single c package at the root level of the tree.\n\nIn some cases, you may have a dependency graph like this:\n\n``` javascript\na\n+-- b <-- depends on c@1.0.x\n+-- c@1.0.3\n`-- d <-- depends on c@1.x\n    `-- c@1.9.9\n```\n\nDuring the installation process, the `c@1.0.3` dependency for `b` was placed in the root of the tree. Though `d`'s dependency on `c@1.x` could have been satisfied by `c@1.0.3`, the newer `c@1.9.0` dependency was used, because npm favors updates by default, even when doing so causes duplication.\n\nRunning `npm dedupe` will cause npm to note the duplication and re-evaluate, deleting the nested `c` module, because the one in the root is sufficient.\n\nTo prefer deduplication over novelty during the installation process, run `npm install --prefer-dedupe` or `npm config set prefer-dedupe true`.\n\nArguments are ignored. Dedupe always acts on the entire tree.\n\nNote that this operation transforms the dependency tree, but will never result in new modules being installed.\n\nUsing `npm find-dupes` will run the command in `--dry-run` mode.\n\nNote: `npm dedupe` will never update the semver values of direct dependencies in your project `package.json`, if you want to update values in `package.json` you can run: `npm update --save` instead.\n\n### [Configuration](#configuration)\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm find-dupes](npm-find-dupes)\n- [npm ls](npm-ls)\n- [npm update](npm-update)\n- [npm install](npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-dedupe](https://docs.npmjs.com/cli/v10/commands/npm-dedupe)"
- name: npm-deprecate
  id: cli/v10/commands/npm-deprecate
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-deprecate\n\nDeprecate a version of a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm deprecate <package-spec> <message>\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nThis command will update the npm registry entry for a package, providing a deprecation warning to all who attempt to install it.\n\nIt works on [version ranges](https://semver.npmjs.com/) as well as specific versions, so you can do something like this:\n\n``` javascript\nnpm deprecate my-thing@\"< 0.2.3\" \"critical bug fixed in v0.2.3\"\n```\n\nSemVer ranges passed to this command are interpreted such that they *do* include prerelease versions. For example:\n\n``` javascript\nnpm deprecate my-thing@1.x \"1.x is no longer supported\"\n```\n\nIn this case, a version `my-thing@1.0.0-beta.0` will also be deprecated.\n\nYou must be the package owner to deprecate something. See the `owner` and `adduser` help topics.\n\nTo un-deprecate a package, specify an empty string (`\"\"`) for the `message` argument. Note that you must use double quotes with no space between them to format an empty string.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm publish](npm-publish)\n- [npm registry](../using-npm/registry)\n- [npm owner](npm-owner)\n- [npm adduser](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-deprecate](https://docs.npmjs.com/cli/v10/commands/npm-deprecate)"
- name: npm-diff
  id: cli/v10/commands/npm-diff
  summary: Similar to its git diff counterpart, this command will print diff patches of files for packages published to the npm registry
  description: "# npm-diff\n\nThe registry diff command\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm diff [...<paths>]\n```\n\n### [Description](#description)\n\nSimilar to its `git diff` counterpart, this command will print diff patches of files for packages published to the npm registry.\n\n- `npm diff --diff=<spec-a> --diff=<spec-b>`\n\n  Compares two package versions using their registry specifiers, e.g: `npm diff --diff=pkg@1.0.0 --diff=pkg@^2.0.0`. It's also possible to compare across forks of any package, e.g: `npm diff --diff=pkg@1.0.0 --diff=pkg-fork@1.0.0`.\n\n  Any valid spec can be used, so that it's also possible to compare directories or git repositories, e.g: `npm diff --diff=pkg@latest --diff=./packages/pkg`\n\n  Here's an example comparing two different versions of a package named `abbrev` from the registry:\n\n  ``` javascript\n  npm diff --diff=abbrev@1.1.0 --diff=abbrev@1.1.1\n  ```\n\n  On success, output looks like:\n\n  ``` javascript\n  diff --git a/package.json b/package.json\n  index v1.1.0..v1.1.1 100644\n  --- a/package.json\n  +++ b/package.json\n  @@ -1,6 +1,6 @@\n   {\n     \"name\": \"abbrev\",\n  -  \"version\": \"1.1.0\",\n  +  \"version\": \"1.1.1\",\n     \"description\": \"Like ruby's abbrev module, but in js\",\n     \"author\": \"Isaac Z. Schlueter <i@izs.me>\",\n     \"main\": \"abbrev.js\",\n  ```\n\n  Given the flexible nature of npm specs, you can also target local directories or git repos just like when using `npm install`:\n\n  ``` javascript\n  npm diff --diff=https://github.com/npm/libnpmdiff --diff=./local-path\n  ```\n\n  In the example above we can compare the contents from the package installed from the git repo at `github.com/npm/libnpmdiff` with the contents of the `./local-path` that contains a valid package, such as a modified copy of the original.\n\n- `npm diff` (in a package directory, no arguments):\n\n  If the package is published to the registry, `npm diff` will fetch the tarball version tagged as `latest` (this value can be configured using the `tag` option) and proceed to compare the contents of files present in that tarball, with the current files in your local file system.\n\n  This workflow provides a handy way for package authors to see what package-tracked files have been changed in comparison with the latest published version of that package.\n\n- `npm diff --diff=<pkg-name>` (in a package directory):\n\n  When using a single package name (with no version or tag specifier) as an argument, `npm diff` will work in a similar way to [`npm-outdated`](../../../npm-outdated) and reach for the registry to figure out what current published version of the package named `<pkg-name>` will satisfy its dependent declared semver-range. Once that specific version is known `npm diff` will print diff patches comparing the current version of `<pkg-name>` found in the local file system with that specific version returned by the registry.\n\n  Given a package named `abbrev` that is currently installed:\n\n  ``` javascript\n  npm diff --diff=abbrev\n  ```\n\n  That will request from the registry its most up to date version and will print a diff output comparing the currently installed version to this newer one if the version numbers are not the same.\n\n- `npm diff --diff=<spec-a>` (in a package directory):\n\n  Similar to using only a single package name, it's also possible to declare a full registry specifier version if you wish to compare the local version of an installed package with the specific version/tag/semver-range provided in `<spec-a>`.\n\n  An example: assuming `pkg@1.0.0` is installed in the current `node_modules` folder, running:\n\n  ``` javascript\n  npm diff --diff=pkg@2.0.0\n  ```\n\n  It will effectively be an alias to `npm diff --diff=pkg@1.0.0 --diff=pkg@2.0.0`.\n\n- `npm diff --diff=<semver-a> [--diff=<semver-b>]` (in a package directory):\n\n  Using `npm diff` along with semver-valid version numbers is a shorthand to compare different versions of the current package.\n\n  It needs to be run from a package directory, such that for a package named `pkg` running `npm diff --diff=1.0.0 --diff=1.0.1` is the same as running `npm diff --diff=pkg@1.0.0 --diff=pkg@1.0.1`.\n\n  If only a single argument `<version-a>` is provided, then the current local file system is going to be compared against that version.\n\n  Here's an example comparing two specific versions (published to the configured registry) of the current project directory:\n\n  ``` javascript\n  npm diff --diff=1.0.0 --diff=1.1.0\n  ```\n\nNote that tag names are not valid `--diff` argument values, if you wish to compare to a published tag, you must use the `pkg@tagname` syntax.\n\n#### [Filtering files](#filtering-files)\n\nIt's possible to also specify positional arguments using file names or globs pattern matching in order to limit the result of diff patches to only a subset of files for a given package, e.g:\n\n``` javascript\nnpm diff --diff=pkg@2 ./lib/ CHANGELOG.md\n```\n\nIn the example above the diff output is only going to print contents of files located within the folder `./lib/` and changed lines of code within the `CHANGELOG.md` file.\n\n### [Configuration](#configuration)\n\n#### [`diff`](#diff)\n\n- Default:\n- Type: String (can be set multiple times)\n\nDefine arguments to compare in `npm diff`.\n\n#### [`diff-name-only`](#diff-name-only)\n\n- Default: false\n- Type: Boolean\n\nPrints only filenames when using `npm diff`.\n\n#### [`diff-unified`](#diff-unified)\n\n- Default: 3\n- Type: Number\n\nThe number of lines of context to print in `npm diff`.\n\n#### [`diff-ignore-all-space`](#diff-ignore-all-space)\n\n- Default: false\n- Type: Boolean\n\nIgnore whitespace when comparing lines in `npm diff`.\n\n#### [`diff-no-prefix`](#diff-no-prefix)\n\n- Default: false\n- Type: Boolean\n\nDo not show any source or destination prefix in `npm diff` output.\n\nNote: this causes `npm diff` to ignore the `--diff-src-prefix` and `--diff-dst-prefix` configs.\n\n#### [`diff-src-prefix`](#diff-src-prefix)\n\n- Default: \"a/\"\n- Type: String\n\nSource prefix to be used in `npm diff` output.\n\n#### [`diff-dst-prefix`](#diff-dst-prefix)\n\n- Default: \"b/\"\n- Type: String\n\nDestination prefix to be used in `npm diff` output.\n\n#### [`diff-text`](#diff-text)\n\n- Default: false\n- Type: Boolean\n\nTreat all files as text in `npm diff`.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`tag`](#tag)\n\n- Default: \"latest\"\n- Type: String\n\nIf you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.\n\nAlso the tag that is added to the package@version specified by the `npm tag` command, if no explicit tag is given.\n\nWhen used by the `npm diff` command, this is the tag used to fetch the tarball that will be compared with the local files by default.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n## [See Also](#see-also)\n\n- [npm outdated](npm-outdated)\n- [npm install](npm-install)\n- [npm config](npm-config)\n- [npm registry](../using-npm/registry)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-diff](https://docs.npmjs.com/cli/v10/commands/npm-diff)"
- name: npm-dist-tag
  id: cli/v10/commands/npm-dist-tag
  summary: 'add: Tags the specified version of the package with the specified tag, or the --tag config if not specified'
  description: "# npm-dist-tag\n\nModify package distribution tags\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm dist-tag add <package-spec (with version)> [<tag>]\nnpm dist-tag rm <package-spec> <tag>\nnpm dist-tag ls [<package-spec>]\n\n\nalias: dist-tags\n```\n\n### [Description](#description)\n\nAdd, remove, and enumerate distribution tags on a package:\n\n- add: Tags the specified version of the package with the specified tag, or the [`--tag` config](../using-npm/config#tag) if not specified. If you have two-factor authentication on auth-and-writes then you’ll need to include a one-time password on the command line with `--otp <one-time password>`, or go through a second factor flow based on your `authtype`.\n\n- rm: Clear a tag that is no longer in use from the package. If you have two-factor authentication on auth-and-writes then you’ll need to include a one-time password on the command line with `--otp <one-time password>`, or go through a second factor flow based on your `authtype`\n\n- ls: Show all of the dist-tags for a package, defaulting to the package in the current prefix. This is the default action if none is specified.\n\nA tag can be used when installing packages as a reference to a version instead of using a specific version number:\n\n``` javascript\nnpm install <name>@<tag>\n```\n\nWhen installing dependencies, a preferred tagged version may be specified:\n\n``` javascript\nnpm install --tag <tag>\n```\n\n(This also applies to any other commands that resolve and install dependencies, such as `npm dedupe`, `npm update`, and `npm audit fix`.)\n\nPublishing a package sets the `latest` tag to the published version unless the `--tag` option is used. For example, `npm publish --tag=beta`.\n\nBy default, `npm install <pkg>` (without any `@<version>` or `@<tag>` specifier) installs the `latest` tag.\n\n### [Purpose](#purpose)\n\nTags can be used to provide an alias instead of version numbers.\n\nFor example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., `stable`, `beta`, `dev`, `canary`.\n\nBy default, the `latest` tag is used by npm to identify the current version of a package, and `npm install <pkg>` (without any `@<version>` or `@<tag>` specifier) installs the `latest` tag. Typically, projects only use the `latest` tag for stable release versions, and use other tags for unstable versions such as prereleases.\n\nThe `next` tag is used by some projects to identify the upcoming version.\n\nOther than `latest`, no tag has any special significance to npm itself.\n\n### [Caveats](#caveats)\n\nThis command used to be known as `npm tag`, which only created new tags, and so had a different syntax.\n\nTags must share a namespace with version numbers, because they are specified in the same slot: `npm install <pkg>@<version>` vs `npm install <pkg>@<tag>`.\n\nTags that can be interpreted as valid semver ranges will be rejected. For example, `v1.4` cannot be used as a tag, because it is interpreted by semver as `>=1.4.0 <1.5.0`. See [https://github.com/npm/npm/issues/6082](https://github.com/npm/npm/issues/6082).\n\nThe simplest way to avoid semver problems with tags is to use tags that do not begin with a number or the letter `v`.\n\n### [Configuration](#configuration)\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm publish](npm-publish)\n- [npm install](npm-install)\n- [npm dedupe](npm-dedupe)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-dist-tag](https://docs.npmjs.com/cli/v10/commands/npm-dist-tag)"
- name: npm-docs
  id: cli/v10/commands/npm-docs
  summary: This command tries to guess at the likely location of a package's documentation URL, and then tries to open it using the --browser config param
  description: "# npm-docs\n\nOpen documentation for a package in a web browser\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm docs [<pkgname> [<pkgname> ...]]\n\n\nalias: home\n```\n\n### [Description](#description)\n\nThis command tries to guess at the likely location of a package's documentation URL, and then tries to open it using the [`--browser` config](../using-npm/config#browser) param. You can pass multiple package names at once. If no package name is provided, it will search for a `package.json` in the current folder and use the `name` property.\n\n### [Configuration](#configuration)\n\n#### [`browser`](#browser)\n\n- Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n- Type: null, Boolean, or String\n\nThe browser that is called by npm commands to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to terminal.\n\nSet to `true` to use default system URL opener.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [npm view](npm-view)\n- [npm publish](npm-publish)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [package.json](../configuring-npm/package-json)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-docs](https://docs.npmjs.com/cli/v10/commands/npm-docs)"
- name: npm-doctor
  id: cli/v10/commands/npm-doctor
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-doctor\n\nCheck the health of your npm environment\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm doctor [ping] [registry] [versions] [environment] [permissions] [cache]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\n`npm doctor` runs a set of checks to ensure that your npm installation has what it needs to manage your JavaScript packages. npm is mostly a standalone tool, but it does have some basic requirements that must be met:\n\n- Node.js and git must be executable by npm.\n- The primary npm registry, `registry.npmjs.com`, or another service that uses the registry API, is available.\n- The directories that npm uses, `node_modules` (both locally and globally), exist and can be written by the current user.\n- The npm cache exists, and the package tarballs within it aren't corrupt.\n\nWithout all of these working properly, npm may not work properly. Many issues are often attributable to things that are outside npm's code base, so `npm doctor` confirms that the npm installation is in a good state.\n\nAlso, in addition to this, there are also very many issue reports due to using old versions of npm. Since npm is constantly improving, running `npm@latest` is better than an old version.\n\n`npm doctor` verifies the following items in your environment, and if there are any recommended changes, it will display them. By default npm runs all of these checks. You can limit what checks are ran by specifying them as extra arguments.\n\n#### [`npm ping`](#npm-ping)\n\nBy default, npm installs from the primary npm registry, `registry.npmjs.org`. `npm doctor` hits a special ping endpoint within the registry. This can also be checked with `npm ping`. If this check fails, you may be using a proxy that needs to be configured, or may need to talk to your IT staff to get access over HTTPS to `registry.npmjs.org`.\n\nThis check is done against whichever registry you've configured (you can see what that is by running `npm config get registry`), and if you're using a private registry that doesn't support the `/whoami` endpoint supported by the primary registry, this check may fail.\n\n#### [`npm -v`](#npm--v)\n\nWhile Node.js may come bundled with a particular version of npm, it's the policy of the CLI team that we recommend all users run `npm@latest` if they can. As the CLI is maintained by a small team of contributors, there are only resources for a single line of development, so npm's own long-term support releases typically only receive critical security and regression fixes. The team believes that the latest tested version of npm is almost always likely to be the most functional and defect-free version of npm.\n\n#### [`node -v`](#node--v)\n\nFor most users, in most circumstances, the best version of Node will be the latest long-term support (LTS) release. Those of you who want access to new ECMAscript features or bleeding-edge changes to Node's standard library may be running a newer version, and some may be required to run an older version of Node because of enterprise change control policies. That's OK! But in general, the npm team recommends that most users run Node.js LTS.\n\n#### [`npm config get registry`](#npm-config-get-registry)\n\nYou may be installing from private package registries for your project or company. That's great! Others may be following tutorials or StackOverflow questions in an effort to troubleshoot problems you may be having. Sometimes, this may entail changing the registry you're pointing at. This part of `npm doctor` just lets you, and maybe whoever's helping you with support, know that you're not using the default registry.\n\n#### [`which git`](#which-git)\n\nWhile it's documented in the README, it may not be obvious that npm needs Git installed to do many of the things that it does. Also, in some cases – especially on Windows – you may have Git set up in such a way that it's not accessible via your `PATH` so that npm can find it. This check ensures that Git is available.\n\n#### [Permissions checks](#permissions-checks)\n\n- Your cache must be readable and writable by the user running npm.\n- Global package binaries must be writable by the user running npm.\n- Your local `node_modules` path, if you're running `npm doctor` with a project directory, must be readable and writable by the user running npm.\n\n#### [Validate the checksums of cached packages](#validate-the-checksums-of-cached-packages)\n\nWhen an npm package is published, the publishing process generates a checksum that npm uses at install time to verify that the package didn't get corrupted in transit. `npm doctor` uses these checksums to validate the package tarballs in your local cache (you can see where that cache is located with `npm config get cache`). In the event that there are corrupt packages in your cache, you should probably run `npm cache clean -f` and reset the cache.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n### [See Also](#see-also)\n\n- [npm bugs](npm-bugs)\n- [npm help](npm-help)\n- [npm ping](npm-ping)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-doctor](https://docs.npmjs.com/cli/v10/commands/npm-doctor)"
- name: npm-edit
  id: cli/v10/commands/npm-edit
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-edit\n\nEdit an installed package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm edit <pkg>[/<subpkg>...]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nSelects a dependency in the current project and opens the package folder in the default editor (or whatever you've configured as the npm `editor` config -- see [`npm-config`](../../../npm-config).)\n\nAfter it has been edited, the package is rebuilt so as to pick up any changes in compiled packages.\n\nFor instance, you can do `npm install connect` to install connect into your package, and then `npm edit connect` to make a few changes to your locally installed copy.\n\n### [Configuration](#configuration)\n\n#### [`editor`](#editor)\n\n- Default: The EDITOR or VISUAL environment variables, or '%SYSTEMROOT%\\notepad.exe' on Windows, or 'vi' on Unix systems\n- Type: String\n\nThe command to run for `npm edit` and `npm config edit`.\n\n### [See Also](#see-also)\n\n- [npm folders](../configuring-npm/folders)\n- [npm explore](npm-explore)\n- [npm install](npm-install)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-edit](https://docs.npmjs.com/cli/v10/commands/npm-edit)"
- name: npm-exec
  id: cli/v10/commands/npm-exec
  summary: This command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar context as running it via npm run
  description: "# npm-exec\n\nRun a command from a local or remote npm package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm exec -- <pkg>[@<version>] [args...]\nnpm exec --package=<pkg>[@<version>] -- <cmd> [args...]\nnpm exec -c '<cmd> [args...]'\nnpm exec --package=foo -c '<cmd> [args...]'\n\n\nalias: x\n```\n\n### [Description](#description)\n\nThis command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar context as running it via `npm run`.\n\nRun without positional arguments or `--call`, this allows you to interactively run commands in the same sort of shell environment that `package.json` scripts are run. Interactive mode is not supported in CI environments when standard input is a TTY, to prevent hangs.\n\nWhatever packages are specified by the `--package` option will be provided in the `PATH` of the executed command, along with any locally installed package executables. The `--package` option may be specified multiple times, to execute the supplied command in an environment where all specified packages are available.\n\nIf any requested packages are not present in the local project dependencies, then a prompt is printed, which can be suppressed by providing either `--yes` or `--no`. When standard input is not a TTY or a CI environment is detected, `--yes` is assumed. The requested packages are installed to a folder in the npm cache, which is added to the `PATH` environment variable in the executed process.\n\nPackage names provided without a specifier will be matched with whatever version exists in the local project. Package names with a specifier will only be considered a match if they have the exact same name and version as the local dependency.\n\nIf no `-c` or `--call` option is provided, then the positional arguments are used to generate the command string. If no `--package` options are provided, then npm will attempt to determine the executable name from the package specifier provided as the first positional argument according to the following heuristic:\n\n- If the package has a single entry in its `bin` field in `package.json`, or if all entries are aliases of the same command, then that command will be used.\n- If the package has multiple `bin` entries, and one of them matches the unscoped portion of the `name` field, then that command will be used.\n- If this does not result in exactly one option (either because there are no bin entries, or none of them match the `name` of the package), then `npm exec` exits with an error.\n\nTo run a binary *other than* the named binary, specify one or more `--package` options, which will prevent npm from inferring the package from the first command argument.\n\n### [`npx` vs `npm exec`](#npx-vs-npm-exec)\n\nWhen run via the `npx` binary, all flags and options *must* be set prior to any positional arguments. When run via `npm exec`, a double-hyphen `--` flag can be used to suppress npm's parsing of switches and options that should be sent to the executed command.\n\nFor example:\n\n`$ npx foo@latest bar --package=@npmcli/foo`\n\nIn this case, npm will resolve the `foo` package name, and run the following command:\n\n`$ foo bar --package=@npmcli/foo`\n\nSince the `--package` option comes *after* the positional arguments, it is treated as an argument to the executed command.\n\nIn contrast, due to npm's argument parsing logic, running this command is different:\n\n`$ npm exec foo@latest bar --package=@npmcli/foo`\n\nIn this case, npm will parse the `--package` option first, resolving the `@npmcli/foo` package. Then, it will execute the following command in that context:\n\n`$ foo@latest bar`\n\nThe double-hyphen character is recommended to explicitly tell npm to stop parsing command line options and switches. The following command would thus be equivalent to the `npx` command above:\n\n`$ npm exec -- foo@latest bar --package=@npmcli/foo`\n\n### [Configuration](#configuration)\n\n#### [`package`](#package)\n\n- Default:\n- Type: String (can be set multiple times)\n\nThe package or packages to install for [`npm exec`](npm-exec)\n\n#### [`call`](#call)\n\n- Default: \"\"\n- Type: String\n\nOptional companion option for `npm exec`, `npx` that allows for specifying a custom command to be run along with the installed packages.\n\n``` javascript\nnpm exec --package yo --package generator-node --call \"yo node\"\n```\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [Examples](#examples)\n\nRun the version of `tap` in the local dependencies, with the provided arguments:\n\n``` javascript\n$ npm exec -- tap --bail test/foo.js\n$ npx tap --bail test/foo.js\n```\n\nRun a command *other than* the command whose name matches the package name by specifying a `--package` option:\n\n``` javascript\n$ npm exec --package=foo -- bar --bar-argument\n# ~ or ~\n$ npx --package=foo bar --bar-argument\n```\n\nRun an arbitrary shell script, in the context of the current project:\n\n``` javascript\n$ npm x -c 'eslint && say \"hooray, lint passed\"'\n$ npx -c 'eslint && say \"hooray, lint passed\"'\n```\n\n### [Workspaces support](#workspaces-support)\n\nYou may use the [`workspace`](../using-npm/config#workspace) or [`workspaces`](../using-npm/config#workspaces) configs in order to run an arbitrary command from an npm package (either one installed locally, or fetched remotely) in the context of the specified workspaces. If no positional argument or `--call` option is provided, it will open an interactive subshell in the context of each of these configured workspaces one at a time.\n\nGiven a project with configured workspaces, e.g:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n   +-- b\n   |   `-- package.json\n   `-- c\n       `-- package.json\n```\n\nAssuming the workspace configuration is properly set up at the root level `package.json` file. e.g:\n\n``` javascript\n{\n    \"workspaces\": [ \"./packages/*\" ]\n}\n```\n\nYou can execute an arbitrary command from a package in the context of each of the configured workspaces when using the [`workspaces` config options](../using-npm/config#workspace), in this example we're using **eslint** to lint any js file found within each workspace folder:\n\n`npm exec --ws -- eslint ./*.js`\n\n#### [Filtering workspaces](#filtering-workspaces)\n\nIt's also possible to execute a command in a single workspace using the `workspace` config along with a name or directory path:\n\n`npm exec --workspace=a -- eslint ./*.js`\n\nThe `workspace` config can also be specified multiple times in order to run a specific script in the context of multiple workspaces. When defining values for the `workspace` config in the command line, it also possible to use `-w` as a shorthand, e.g:\n\n`npm exec -w a -w b -- eslint ./*.js`\n\nThis last command will run the `eslint` command in both `./packages/a` and `./packages/b` folders.\n\n### [Compatibility with Older npx Versions](#compatibility-with-older-npx-versions)\n\nThe `npx` binary was rewritten in npm v7.0.0, and the standalone `npx` package deprecated at that time. `npx` uses the `npm exec` command instead of a separate argument parser and install process, with some affordances to maintain backwards compatibility with the arguments it accepted in previous versions.\n\nThis resulted in some shifts in its functionality:\n\n- Any `npm` config value may be provided.\n- To prevent security and user-experience problems from mistyping package names, `npx` prompts before installing anything. Suppress this prompt with the `-y` or `--yes` option.\n- The `--no-install` option is deprecated, and will be converted to `--no`.\n- Shell fallback functionality is removed, as it is not advisable.\n- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand for `--package` in npx. This is maintained, but only for the `npx` executable.\n- The `--ignore-existing` option is removed. Locally installed bins are always present in the executed process `PATH`.\n- The `--npm` option is removed. `npx` will always use the `npm` it ships with.\n- The `--node-arg` and `-n` options are removed.\n- The `--always-spawn` option is redundant, and thus removed.\n- The `--shell` option is replaced with `--script-shell`, but maintained in the `npx` executable for backwards compatibility.\n\n### [A note on caching](#a-note-on-caching)\n\nThe npm cli utilizes its internal package cache when using the package name specified. You can use the following to change how and when the cli uses this cache. See [`npm cache`](npm-cache) for more on how the cache works.\n\n#### [prefer-online](#prefer-online)\n\nForces staleness checks for packages, making the cli look for updates immediately even if the package is already in the cache.\n\n#### [prefer-offline](#prefer-offline)\n\nBypasses staleness checks for packages. Missing data will still be requested from the server. To force full offline mode, use `offline`.\n\n#### [offline](#offline)\n\nForces full offline mode. Any packages not locally cached will result in an error.\n\n#### [workspace](#workspace-1)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result to selecting all of the nested workspaces)\n\nThis value is not exported to the environment for child processes.\n\n#### [workspaces](#workspaces-1)\n\n- Alias: `--ws`\n- Type: Boolean\n- Default: `false`\n\nRun scripts in the context of all configured workspaces for the current project.\n\n### [See Also](#see-also)\n\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [npm test](npm-test)\n- [npm start](npm-start)\n- [npm restart](npm-restart)\n- [npm stop](npm-stop)\n- [npm config](npm-config)\n- [npm workspaces](../using-npm/workspaces)\n- [npx](npx)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-exec](https://docs.npmjs.com/cli/v10/commands/npm-exec)"
- name: npm-explain
  id: cli/v10/commands/npm-explain
  summary: This command will print the chain of dependencies causing a given package to be installed in the current project
  description: "# npm-explain\n\nExplain installed packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm explain <package-spec>\n\n\nalias: why\n```\n\n### [Description](#description)\n\nThis command will print the chain of dependencies causing a given package to be installed in the current project.\n\nIf one or more package specs are provided, then only packages matching one of the specifiers will have their relationships explained.\n\nThe package spec can also refer to a folder within `./node_modules`\n\nFor example, running `npm explain glob` within npm's source tree will show:\n\n``` javascript\nglob@7.1.6\nnode_modules/glob\n  glob@\"^7.1.4\" from the root project\n\n\nglob@7.1.1 dev\nnode_modules/tacks/node_modules/glob\n  glob@\"^7.0.5\" from rimraf@2.6.2\n  node_modules/tacks/node_modules/rimraf\n    rimraf@\"^2.6.2\" from tacks@1.3.0\n    node_modules/tacks\n      dev tacks@\"^1.3.0\" from the root project\n```\n\nTo explain just the package residing at a specific folder, pass that as the argument to the command. This can be useful when trying to figure out exactly why a given dependency is being duplicated to satisfy conflicting version requirements within the project.\n\n``` javascript\n$ npm explain node_modules/nyc/node_modules/find-up\nfind-up@3.0.0 dev\nnode_modules/nyc/node_modules/find-up\n  find-up@\"^3.0.0\" from nyc@14.1.1\n  node_modules/nyc\n    nyc@\"^14.1.1\" from tap@14.10.8\n    node_modules/tap\n      dev tap@\"^14.10.8\" from the root project\n```\n\n### [Configuration](#configuration)\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm folders](../configuring-npm/folders)\n- [npm ls](npm-ls)\n- [npm install](npm-install)\n- [npm link](npm-link)\n- [npm prune](npm-prune)\n- [npm outdated](npm-outdated)\n- [npm update](npm-update)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-explain](https://docs.npmjs.com/cli/v10/commands/npm-explain)"
- name: npm-explore
  id: cli/v10/commands/npm-explore
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-explore\n\nBrowse an installed package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm explore <pkg> [ -- <command>]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nSpawn a subshell in the directory of the installed package specified.\n\nIf a command is specified, then it is run in the subshell, which then immediately terminates.\n\nThis is particularly handy in the case of git submodules in the `node_modules` folder:\n\n``` javascript\nnpm explore some-dependency -- git pull origin master\n```\n\nNote that the package is *not* automatically rebuilt afterwards, so be sure to use `npm rebuild <pkg>` if you make any changes.\n\n### [Configuration](#configuration)\n\n#### [`shell`](#shell)\n\n- Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd.exe\" on Windows\n- Type: String\n\nThe shell to run for the `npm explore` command.\n\n### [See Also](#see-also)\n\n- [npm folders](../configuring-npm/folders)\n- [npm edit](npm-edit)\n- [npm rebuild](npm-rebuild)\n- [npm install](npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-explore](https://docs.npmjs.com/cli/v10/commands/npm-explore)"
- name: npm-find-dupes
  id: cli/v10/commands/npm-find-dupes
  summary: Runs npm dedupe in --dry-run mode, making npm only output the duplications, without actually changing the package tree
  description: "# npm-find-dupes\n\nFind duplication in the package tree\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm find-dupes\n```\n\n### [Description](#description)\n\nRuns `npm dedupe` in `--dry-run` mode, making npm only output the duplications, without actually changing the package tree.\n\n### [Configuration](#configuration)\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm dedupe](npm-dedupe)\n- [npm ls](npm-ls)\n- [npm update](npm-update)\n- [npm install](npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-find-dupes](https://docs.npmjs.com/cli/v10/commands/npm-find-dupes)"
- name: npm-fund
  id: cli/v10/commands/npm-fund
  summary: This command retrieves information on how to fund the dependencies of a given project
  description: "# npm-fund\n\nRetrieve funding information\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm fund [<package-spec>]\n```\n\n### [Description](#description)\n\nThis command retrieves information on how to fund the dependencies of a given project. If no package name is provided, it will list all dependencies that are looking for funding in a tree structure, listing the type of funding and the url to visit. If a package name is provided then it tries to open its funding url using the [`--browser` config](../using-npm/config#browser) param; if there are multiple funding sources for the package, the user will be instructed to pass the `--which` option to disambiguate.\n\nThe list will avoid duplicated entries and will stack all packages that share the same url as a single entry. Thus, the list does not have the same shape of the output from `npm ls`.\n\n#### [Example](#example)\n\n### [Workspaces support](#workspaces-support)\n\nIt's possible to filter the results to only include a single workspace and its dependencies using the [`workspace` config](../using-npm/config#workspace) option.\n\n#### [Example:](#example-1)\n\nHere's an example running `npm fund` in a project with a configured workspace `a`:\n\n``` javascript\n$ npm fund\ntest-workspaces-fund@1.0.0\n+-- https://example.com/a\n| | `-- a@1.0.0\n| `-- https://example.com/maintainer\n|     `-- foo@1.0.0\n+-- https://example.com/npmcli-funding\n|   `-- @npmcli/test-funding\n`-- https://example.com/org\n    `-- bar@2.0.0\n```\n\nAnd here is an example of the expected result when filtering only by a specific workspace `a` in the same project:\n\n``` javascript\n$ npm fund -w a\ntest-workspaces-fund@1.0.0\n`-- https://example.com/a\n  | `-- a@1.0.0\n  `-- https://example.com/maintainer\n      `-- foo@2.0.0\n```\n\n### [Configuration](#configuration)\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`browser`](#browser)\n\n- Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n- Type: null, Boolean, or String\n\nThe browser that is called by npm commands to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to terminal.\n\nSet to `true` to use default system URL opener.\n\n#### [`unicode`](#unicode)\n\n- Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables.\n- Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`which`](#which)\n\n- Default: null\n- Type: null or Number\n\nIf there are multiple funding sources, which 1-indexed source URL to open.\n\n## [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm install](npm-install)\n- [npm docs](npm-docs)\n- [npm ls](npm-ls)\n- [npm config](npm-config)\n- [npm workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-fund](https://docs.npmjs.com/cli/v10/commands/npm-fund)"
- name: npm-help
  id: cli/v10/commands/npm-help
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-help\n\nGet help on npm\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm help <term> [<terms..>]\n\n\nalias: hlep\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nIf supplied a topic, then show the appropriate documentation page.\n\nIf the topic does not exist, or if multiple terms are provided, then npm will run the `help-search` command to find a match. Note that, if `help-search` finds a single subject, then it will run `help` on that topic, so unique matches are equivalent to specifying a topic name.\n\n### [Configuration](#configuration)\n\n#### [`viewer`](#viewer)\n\n- Default: \"man\" on Posix, \"browser\" on Windows\n- Type: String\n\nThe program to use to view help content.\n\nSet to `\"browser\"` to view html help content in the default web browser.\n\n### [See Also](#see-also)\n\n- [npm](npm)\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [package.json](../configuring-npm/package-json)\n- [npm help-search](npm-help-search)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-help](https://docs.npmjs.com/cli/v10/commands/npm-help)"
- name: npm-help-search
  id: cli/v10/commands/npm-help-search
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-help-search\n\nSearch npm help documentation\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm help-search <text>\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nThis command will search the npm markdown documentation files for the terms provided, and then list the results, sorted by relevance.\n\nIf only one result is found, then it will show that help topic.\n\nIf the argument to `npm help` is not a known help topic, then it will call `help-search`. It is rarely if ever necessary to call this command directly.\n\n### [Configuration](#configuration)\n\n#### [`long`](#long)\n\n- Default: false\n- Type: Boolean\n\nShow extended information in `ls`, `search`, and `help-search`.\n\n### [See Also](#see-also)\n\n- [npm](npm)\n- [npm help](npm-help)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-help-search](https://docs.npmjs.com/cli/v10/commands/npm-help-search)"
- name: npm-hook
  id: cli/v10/commands/npm-hook
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-hook\n\nManage registry hooks\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm hook add <pkg> <url> <secret> [--type=<type>]\nnpm hook ls [pkg]\nnpm hook rm <id>\nnpm hook update <id> <url> <secret>\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nAllows you to manage [npm hooks](https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm), including adding, removing, listing, and updating.\n\nHooks allow you to configure URL endpoints that will be notified whenever a change happens to any of the supported entity types. Three different types of entities can be watched by hooks: packages, owners, and scopes.\n\nTo create a package hook, simply reference the package name.\n\nTo create an owner hook, prefix the owner name with `~` (as in, `~youruser`).\n\nTo create a scope hook, prefix the scope name with `@` (as in, `@yourscope`).\n\nThe hook `id` used by `update` and `rm` are the IDs listed in `npm hook ls` for that particular hook.\n\nThe shared secret will be sent along to the URL endpoint so you can verify the request came from your own configured hook.\n\n### [Example](#example)\n\nAdd a hook to watch a package for changes:\n\n``` javascript\n$ npm hook add lodash https://example.com/ my-shared-secret\n```\n\nAdd a hook to watch packages belonging to the user `substack`:\n\n``` javascript\n$ npm hook add ~substack https://example.com/ my-shared-secret\n```\n\nAdd a hook to watch packages in the scope `@npm`\n\n``` javascript\n$ npm hook add @npm https://example.com/ my-shared-secret\n```\n\nList all your active hooks:\n\n``` javascript\n$ npm hook ls\n```\n\nList your active hooks for the `lodash` package:\n\n``` javascript\n$ npm hook ls lodash\n```\n\nUpdate an existing hook's url:\n\n``` javascript\n$ npm hook update id-deadbeef https://my-new-website.here/\n```\n\nRemove a hook:\n\n``` javascript\n$ npm hook rm id-deadbeef\n```\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n### [See Also](#see-also)\n\n- [\"Introducing Hooks\" blog post](https://blog.npmjs.org/post/145260155635/introducing-hooks-get-notifications-of-npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-hook](https://docs.npmjs.com/cli/v10/commands/npm-hook)"
- name: npm-init
  id: cli/v10/commands/npm-init
  summary: npm init <initializer> can be used to set up a new or existing npm package
  description: "# npm-init\n\nCreate a package.json file\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm init <package-spec> (same as `npx <package-spec>`)\nnpm init <@scope> (same as `npx <@scope>/create`)\n\n\naliases: create, innit\n```\n\n### [Description](#description)\n\n`npm init <initializer>` can be used to set up a new or existing npm package.\n\n`initializer` in this case is an npm package named `create-<initializer>`, which will be installed by [`npm-exec`](npm-exec), and then have its main bin executed -- presumably creating or updating `package.json` and running any other initialization-related operations.\n\nThe init command is transformed to a corresponding `npm exec` operation as follows:\n\n- `npm init foo` -\\> `npm exec create-foo`\n- `npm init @usr/foo` -\\> `npm exec @usr/create-foo`\n- `npm init @usr` -\\> `npm exec @usr/create`\n- `npm init @usr@2.0.0` -\\> `npm exec @usr/create@2.0.0`\n- `npm init @usr/foo@2.0.0` -\\> `npm exec @usr/create-foo@2.0.0`\n\nIf the initializer is omitted (by just calling `npm init`), init will fall back to legacy init behavior. It will ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on existing fields, dependencies, and options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use `-y`/`--yes` to skip the questionnaire altogether. If you pass `--scope`, it will create a scoped package.\n\n*Note:* if a user already has the `create-<initializer>` package globally installed, that will be what `npm init` uses. If you want npm to use the latest version, or another specific version you must specify it:\n\n- `npm init foo@latest` \\# fetches and runs the latest `create-foo` from the registry\n- `npm init foo@1.2.3` \\# runs `create-foo@1.2.3` specifically\n\n#### [Forwarding additional options](#forwarding-additional-options)\n\nAny additional options will be passed directly to the command, so `npm init foo -- --hello` will map to `npm exec -- create-foo --hello`.\n\nTo better illustrate how options are forwarded, here's a more evolved example showing options passed to both the **npm cli** and a create package, both following commands are equivalent:\n\n- `npm init foo -y --registry=<url> -- --hello -a`\n- `npm exec -y --registry=<url> -- create-foo --hello -a`\n\n### [Examples](#examples)\n\nCreate a new React-based project using [`create-react-app`](https://npm.im/create-react-app):\n\n``` javascript\n$ npm init react-app ./my-react-app\n```\n\nCreate a new `esm`-compatible package using [`create-esm`](https://npm.im/create-esm):\n\n``` javascript\n$ mkdir my-esm-lib && cd my-esm-lib\n$ npm init esm --yes\n```\n\nGenerate a plain old package.json using legacy init:\n\n``` javascript\n$ mkdir my-npm-pkg && cd my-npm-pkg\n$ git init\n$ npm init\n```\n\nGenerate it without having it ask any questions:\n\n``` javascript\n$ npm init -y\n```\n\n### [Workspaces support](#workspaces-support)\n\nIt's possible to create a new workspace within your project by using the `workspace` config option. When using `npm init -w <dir>` the cli will create the folders and boilerplate expected while also adding a reference to your project `package.json` `\"workspaces\": []` property in order to make sure that new generated **workspace** is properly set up as such.\n\nGiven a project with no workspaces, e.g:\n\n``` javascript\n.\n+-- package.json\n```\n\nYou may generate a new workspace using the legacy init:\n\n``` javascript\n$ npm init -w packages/a\n```\n\nThat will generate a new folder and `package.json` file, while also updating your top-level `package.json` to add the reference to this new workspace:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   `-- a\n       `-- package.json\n```\n\nThe workspaces init also supports the `npm init <initializer> -w <dir>` syntax, following the same set of rules explained earlier in the initial **Description** section of this page. Similar to the previous example of creating a new React-based project using [`create-react-app`](https://npm.im/create-react-app), the following syntax will make sure to create the new react app as a nested **workspace** within your project and configure your `package.json` to recognize it as such:\n\n``` javascript\nnpm init -w packages/my-react-app react-app .\n```\n\nThis will make sure to generate your react app as expected, one important consideration to have in mind is that `npm exec` is going to be run in the context of the newly created folder for that workspace, and that's the reason why in this example the initializer uses the initializer name followed with a dot to represent the current directory in that context, e.g: `react-app .`:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n   `-- my-react-app\n       +-- README\n       +-- package.json\n       `-- ...\n```\n\n### [Configuration](#configuration)\n\n#### [`init-author-name`](#init-author-name)\n\n- Default: \"\"\n- Type: String\n\nThe value `npm init` should use by default for the package author's name.\n\n#### [`init-author-url`](#init-author-url)\n\n- Default: \"\"\n- Type: \"\" or URL\n\nThe value `npm init` should use by default for the package author's homepage.\n\n#### [`init-license`](#init-license)\n\n- Default: \"ISC\"\n- Type: String\n\nThe value `npm init` should use by default for the package license.\n\n#### [`init-module`](#init-module)\n\n- Default: \"~/.npm-init.js\"\n- Type: Path\n\nA module that will be loaded by the `npm init` command. See the documentation for the [init-package-json](https://github.com/npm/init-package-json) module for more information, or [npm init](npm-init).\n\n#### [`init-version`](#init-version)\n\n- Default: \"1.0.0\"\n- Type: SemVer string\n\nThe value that `npm init` should use by default for the package version number, if not already set in package.json.\n\n#### [`yes`](#yes)\n\n- Default: null\n- Type: null or Boolean\n\nAutomatically answer \"yes\" to any prompts that npm might print on the command line.\n\n#### [`force`](#force)\n\n- Default: false\n- Type: Boolean\n\nRemoves various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.\n\n- Allow clobbering non-npm files in global installs.\n- Allow the `npm version` command to work on an unclean git repository.\n- Allow deleting the cache folder with `npm cache clean`.\n- Allow installing packages that have an `engines` declaration requiring a different version of npm.\n- Allow installing packages that have an `engines` declaration requiring a different version of `node`, even if `--engine-strict` is enabled.\n- Allow `npm audit fix` to install modules outside your stated dependency range (including SemVer-major changes).\n- Allow unpublishing all versions of a published package.\n- Allow conflicting peerDependencies to be installed in the root project.\n- Implicitly set `--yes` during `npm init`.\n- Allow clobbering existing values in `npm pkg`\n- Allow unpublishing of entire packages (not just a single version).\n\nIf you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!\n\n#### [`scope`](#scope)\n\n- Default: the scope of the current project, if any, or \"\"\n- Type: String\n\nAssociate an operation with a scope for a scoped registry.\n\nUseful when logging in to or out of a private registry:\n\n``` javascript\n# log in, linking the scope to the custom registry\nnpm login --scope=@mycorp --registry=https://registry.mycorp.com\n\n\n# log out, removing the link and the auth token\nnpm logout --scope=@mycorp\n```\n\nThis will cause `@mycorp` to be mapped to the registry for future installation of packages specified according to the pattern `@mycorp/package`.\n\nThis will also cause `npm init` to create a scoped package.\n\n``` javascript\n# accept all defaults, and create a package named \"@foo/whatever\",\n# instead of just named \"whatever\"\nnpm init --scope=@foo --yes\n```\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces-update`](#workspaces-update)\n\n- Default: true\n- Type: Boolean\n\nIf set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the `node_modules` folder.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [init-package-json module](http://npm.im/init-package-json)\n- [package.json](../configuring-npm/package-json)\n- [npm version](npm-version)\n- [npm scope](../using-npm/scope)\n- [npm exec](npm-exec)\n- [npm workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-init](https://docs.npmjs.com/cli/v10/commands/npm-init)"
- name: npm-install
  id: cli/v10/commands/npm-install
  summary: This command installs a package and any packages that it depends on
  description: "# npm-install\n\nInstall a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm install [<package-spec> ...]\n\n\naliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall\n```\n\n### [Description](#description)\n\nThis command installs a package and any packages that it depends on. If the package has a package-lock, or an npm shrinkwrap file, or a yarn lock file, the installation of dependencies will be driven by that, respecting the following order of precedence:\n\n- `npm-shrinkwrap.json`\n- `package-lock.json`\n- `yarn.lock`\n\nSee [package-lock.json](../configuring-npm/package-lock-json) and [`npm shrinkwrap`](npm-shrinkwrap).\n\nA `package` is:\n\n- a\\) a folder containing a program described by a [`package.json`](../configuring-npm/package-json) file\n- b\\) a gzipped tarball containing (a)\n- c\\) a url that resolves to (b)\n- d\\) a `<name>@<version>` that is published on the registry (see [`registry`](../using-npm/registry)) with (c)\n- e\\) a `<name>@<tag>` (see [`npm dist-tag`](npm-dist-tag)) that points to (d)\n- f\\) a `<name>` that has a \"latest\" tag satisfying (e)\n- g\\) a `<git remote url>` that resolves to (a)\n\nEven if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b).\n\n- `npm install` (in a package directory, no arguments):\n\n  Install the dependencies to the local `node_modules` folder.\n\n  In global mode (ie, with `-g` or `--global` appended to the command), it installs the current package context (ie, the current working directory) as a global package.\n\n  By default, `npm install` will install all modules listed as dependencies in [`package.json`](../configuring-npm/package-json).\n\n  With the `--production` flag (or when the `NODE_ENV` environment variable is set to `production`), npm will not install modules listed in `devDependencies`. To install all modules listed in both `dependencies` and `devDependencies` when `NODE_ENV` environment variable is set to `production`, you can use `--production=false`.\n\n  > NOTE: The `--production` flag has no particular meaning when adding a dependency to a project.\n\n- `npm install <folder>`:\n\n  If `<folder>` sits inside the root of your project, its dependencies will be installed and may be hoisted to the top-level `node_modules` as they would for other types of dependencies. If `<folder>` sits outside the root of your project, *npm will not install the package dependencies* in the directory `<folder>`, but it will create a symlink to `<folder>`.\n\n  > NOTE: If you want to install the content of a directory like a package from the registry instead of creating a link, you would need to use the `--install-links` option.\n\n  Example:\n\n  ``` javascript\n  npm install ../../other-package --install-links\n  npm install ./sub-package\n  ```\n\n- `npm install <tarball file>`:\n\n  Install a package that is sitting on the filesystem. Note: if you just want to link a dev directory into your npm root, you can do this more easily by using [`npm link`](npm-link).\n\n  Tarball requirements:\n\n  - The filename *must* use `.tar`, `.tar.gz`, or `.tgz` as the extension.\n  - The package contents should reside in a subfolder inside the tarball (usually it is called `package/`). npm strips one directory layer when installing the package (an equivalent of `tar x --strip-components=1` is run).\n  - The package must contain a `package.json` file with `name` and `version` properties.\n\n  Example:\n\n  ``` javascript\n  npm install ./package.tgz\n  ```\n\n- `npm install <tarball url>`:\n\n  Fetch the tarball url, and then install it. In order to distinguish between this and other options, the argument must start with \"http://\" or \"https://\"\n\n  Example:\n\n  ``` javascript\n  npm install https://github.com/indexzero/forever/tarball/v0.5.6\n  ```\n\n- `npm install [<@scope>/]<name>`:\n\n  Do a `<name>@<tag>` install, where `<tag>` is the \"tag\" config. (See [`config`](../using-npm/config#tag). The config's default value is `latest`.)\n\n  In most cases, this will install the version of the modules tagged as `latest` on the npm registry.\n\n  Example:\n\n  ``` javascript\n  npm install sax\n  ```\n\n  `npm install` saves any specified packages into `dependencies` by default. Additionally, you can control where and how they get saved with some additional flags:\n\n  - `-P, --save-prod`: Package will appear in your `dependencies`. This is the default unless `-D` or `-O` are present.\n\n  - `-D, --save-dev`: Package will appear in your `devDependencies`.\n\n  - `-O, --save-optional`: Package will appear in your `optionalDependencies`.\n\n  - `--no-save`: Prevents saving to `dependencies`.\n\n  When using any of the above options to save dependencies to your package.json, there are two additional, optional flags:\n\n  - `-E, --save-exact`: Saved dependencies will be configured with an exact version rather than using npm's default semver range operator.\n\n  - `-B, --save-bundle`: Saved dependencies will also be added to your `bundleDependencies` list.\n\n  Further, if you have an `npm-shrinkwrap.json` or `package-lock.json` then it will be updated as well.\n\n  `<scope>` is optional. The package will be downloaded from the registry associated with the specified scope. If no registry is associated with the given scope the default registry is assumed. See [`scope`](../using-npm/scope).\n\n  Note: if you do not include the @-symbol on your scope name, npm will interpret this as a GitHub repository instead, see below. Scopes names must also be followed by a slash.\n\n  Examples:\n\n  ``` javascript\n  npm install sax\n  npm install githubname/reponame\n  npm install @myorg/privatepackage\n  npm install node-tap --save-dev\n  npm install dtrace-provider --save-optional\n  npm install readable-stream --save-exact\n  npm install ansi-regex --save-bundle\n  ```\n\n  **Note**: If there is a file or folder named `<name>` in the current working directory, then it will try to install that, and only try to fetch the package by name if it is not valid.\n\n- `npm install <alias>@npm:<name>`:\n\n  Install a package under a custom alias. Allows multiple versions of a same-name package side-by-side, more convenient import names for packages with otherwise long ones, and using git forks replacements or forked npm packages as replacements. Aliasing works only on your project and does not rename packages in transitive dependencies. Aliases should follow the naming conventions stated in [`validate-npm-package-name`](https://www.npmjs.com/package/validate-npm-package-name#naming-rules).\n\n  Examples:\n\n  ``` javascript\n  npm install my-react@npm:react\n  npm install jquery2@npm:jquery@2\n  npm install jquery3@npm:jquery@3\n  npm install npa@npm:npm-package-arg\n  ```\n\n- `npm install [<@scope>/]<name>@<tag>`:\n\n  Install the version of the package that is referenced by the specified tag. If the tag does not exist in the registry data for that package, then this will fail.\n\n  Example:\n\n  ``` javascript\n  npm install sax@latest\n  npm install @myorg/mypackage@latest\n  ```\n\n- `npm install [<@scope>/]<name>@<version>`:\n\n  Install the specified version of the package. This will fail if the version has not been published to the registry.\n\n  Example:\n\n  ``` javascript\n  npm install sax@0.1.1\n  npm install @myorg/privatepackage@1.5.0\n  ```\n\n- `npm install [<@scope>/]<name>@<version range>`:\n\n  Install a version of the package matching the specified version range. This will follow the same rules for resolving dependencies described in [`package.json`](../configuring-npm/package-json).\n\n  Note that most version ranges must be put in quotes so that your shell will treat it as a single argument.\n\n  Example:\n\n  ``` javascript\n  npm install sax@\">=0.1.0 <0.2.0\"\n  npm install @myorg/privatepackage@\"16 - 17\"\n  ```\n\n- `npm install <git remote url>`:\n\n  Installs the package from the hosted git provider, cloning it with `git`. For a full git remote url, only that URL will be attempted.\n\n  ``` javascript\n  <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n  ```\n\n  `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or `git+file`.\n\n  If `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then the default branch of the repository is used.\n\n  If the repository makes use of submodules, those submodules will be cloned as well.\n\n  If the package being installed contains a `prepare` script, its `dependencies` and `devDependencies` will be installed, and the prepare script will be run, before the package is packaged and installed.\n\n  The following git environment variables are recognized by npm and will be added to the environment when running git:\n\n  - `GIT_ASKPASS`\n  - `GIT_EXEC_PATH`\n  - `GIT_PROXY_COMMAND`\n  - `GIT_SSH`\n  - `GIT_SSH_COMMAND`\n  - `GIT_SSL_CAINFO`\n  - `GIT_SSL_NO_VERIFY`\n\n  See the git man page for details.\n\n  Examples:\n\n  ``` javascript\n  npm install git+ssh://git@github.com:npm/cli.git#v1.0.27\n  npm install git+ssh://git@github.com:npm/cli#pull/273\n  npm install git+ssh://git@github.com:npm/cli#semver:^5.0\n  npm install git+https://isaacs@github.com/npm/cli.git\n  npm install git://github.com/npm/cli.git#v1.0.27\n  GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git\n  ```\n\n- `npm install <githubname>/<githubrepo>[#<commit-ish>]`:\n\n- `npm install github:<githubname>/<githubrepo>[#<commit-ish>]`:\n\n  Install the package at `https://github.com/githubname/githubrepo` by attempting to clone it using `git`.\n\n  If `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then the default branch is used.\n\n  As with regular git dependencies, `dependencies` and `devDependencies` will be installed if the package has a `prepare` script before the package is done installing.\n\n  Examples:\n\n  ``` javascript\n  npm install mygithubuser/myproject\n  npm install github:mygithubuser/myproject\n  ```\n\n- `npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>]`:\n\n  Install the package at `https://gist.github.com/gistID` by attempting to clone it using `git`. The GitHub username associated with the gist is optional and will not be saved in `package.json`.\n\n  As with regular git dependencies, `dependencies` and `devDependencies` will be installed if the package has a `prepare` script before the package is done installing.\n\n  Example:\n\n  ``` javascript\n  npm install gist:101a11beef\n  ```\n\n- `npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]`:\n\n  Install the package at `https://bitbucket.org/bitbucketname/bitbucketrepo` by attempting to clone it using `git`.\n\n  If `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then `master` is used.\n\n  As with regular git dependencies, `dependencies` and `devDependencies` will be installed if the package has a `prepare` script before the package is done installing.\n\n  Example:\n\n  ``` javascript\n  npm install bitbucket:mybitbucketuser/myproject\n  ```\n\n- `npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]`:\n\n  Install the package at `https://gitlab.com/gitlabname/gitlabrepo` by attempting to clone it using `git`.\n\n  If `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then `master` is used.\n\n  As with regular git dependencies, `dependencies` and `devDependencies` will be installed if the package has a `prepare` script before the package is done installing.\n\n  Example:\n\n  ``` javascript\n  npm install gitlab:mygitlabuser/myproject\n  npm install gitlab:myusr/myproj#semver:^5.0\n  ```\n\nYou may combine multiple arguments and even multiple types of arguments. For example:\n\n``` javascript\nnpm install sax@\">=0.1.0 <0.2.0\" bench supervisor\n```\n\nThe `--tag` argument will apply to all of the specified install targets. If a tag with the given name exists, the tagged version is preferred over newer versions.\n\nThe `--dry-run` argument will report in the usual way what the install would have done without actually installing anything.\n\nThe `--package-lock-only` argument will only update the `package-lock.json`, instead of checking `node_modules` and downloading dependencies.\n\nThe `-f` or `--force` argument will force npm to fetch remote resources even if a local copy exists on disk.\n\n``` javascript\nnpm install sax --force\n```\n\n### [Configuration](#configuration)\n\nSee the [`config`](../using-npm/config) help doc. Many of the configuration params have some effect on installation, since that's most of what npm does.\n\nThese are some of the most common options related to installation.\n\n#### [`save`](#save)\n\n- Default: `true` unless when using `npm update` where it defaults to `false`\n- Type: Boolean\n\nSave installed packages to a `package.json` file as dependencies.\n\nWhen used with the `npm rm` command, removes the dependency from `package.json`.\n\nWill also prevent writing to `package-lock.json` if set to `false`.\n\n#### [`save-exact`](#save-exact)\n\n- Default: false\n- Type: Boolean\n\nDependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`prefer-dedupe`](#prefer-dedupe)\n\n- Default: false\n- Type: Boolean\n\nPrefer to deduplicate packages if possible, rather than choosing a newer version of a dependency.\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`cpu`](#cpu)\n\n- Default: null\n- Type: null or String\n\nOverride CPU architecture of native modules to install. Acceptable values are same as `cpu` field of package.json, which comes from `process.arch`.\n\n#### [`os`](#os)\n\n- Default: null\n- Type: null or String\n\nOverride OS of native modules to install. Acceptable values are same as `os` field of package.json, which comes from `process.platform`.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [Algorithm](#algorithm)\n\nGiven a `package{dep}` structure: `A{B,C}, B{C}, C{D}`, the npm install algorithm produces:\n\n``` javascript\nA\n+-- B\n+-- C\n+-- D\n```\n\nThat is, the dependency from B to C is satisfied by the fact that A already caused C to be installed at a higher level. D is still installed at the top level because nothing conflicts with it.\n\nFor `A{B,C}, B{C,D@1}, C{D@2}`, this algorithm produces:\n\n``` javascript\nA\n+-- B\n+-- C\n   `-- D@2\n+-- D@1\n```\n\nBecause B's D@1 will be installed in the top-level, C now has to install D@2 privately for itself. This algorithm is deterministic, but different trees may be produced if two dependencies are requested for installation in a different order.\n\nSee [folders](../configuring-npm/folders) for a more detailed description of the specific folder structures that npm creates.\n\n### [See Also](#see-also)\n\n- [npm folders](../configuring-npm/folders)\n- [npm update](npm-update)\n- [npm audit](npm-audit)\n- [npm fund](npm-fund)\n- [npm link](npm-link)\n- [npm rebuild](npm-rebuild)\n- [npm scripts](../using-npm/scripts)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm registry](../using-npm/registry)\n- [npm dist-tag](npm-dist-tag)\n- [npm uninstall](npm-uninstall)\n- [npm shrinkwrap](npm-shrinkwrap)\n- [package.json](../configuring-npm/package-json)\n- [workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-install](https://docs.npmjs.com/cli/v10/commands/npm-install)"
- name: npm-install-ci-test
  id: cli/v10/commands/npm-install-ci-test
  summary: This command runs npm ci followed immediately by npm test
  description: "# npm-install-ci-test\n\nInstall a project with a clean slate and run tests\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm install-ci-test\n\n\naliases: cit, clean-install-test, sit\n```\n\n### [Description](#description)\n\nThis command runs `npm ci` followed immediately by `npm test`.\n\n### [Configuration](#configuration)\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm install-test](npm-install-test)\n- [npm ci](npm-ci)\n- [npm test](npm-test)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-install-ci-test](https://docs.npmjs.com/cli/v10/commands/npm-install-ci-test)"
- name: npm-install-test
  id: cli/v10/commands/npm-install-test
  summary: This command runs an npm install followed immediately by an npm test
  description: "# npm-install-test\n\nInstall package(s) and run tests\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm install-test [<package-spec> ...]\n\n\nalias: it\n```\n\n### [Description](#description)\n\nThis command runs an `npm install` followed immediately by an `npm test`. It takes exactly the same arguments as `npm install`.\n\n### [Configuration](#configuration)\n\n#### [`save`](#save)\n\n- Default: `true` unless when using `npm update` where it defaults to `false`\n- Type: Boolean\n\nSave installed packages to a `package.json` file as dependencies.\n\nWhen used with the `npm rm` command, removes the dependency from `package.json`.\n\nWill also prevent writing to `package-lock.json` if set to `false`.\n\n#### [`save-exact`](#save-exact)\n\n- Default: false\n- Type: Boolean\n\nDependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`prefer-dedupe`](#prefer-dedupe)\n\n- Default: false\n- Type: Boolean\n\nPrefer to deduplicate packages if possible, rather than choosing a newer version of a dependency.\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`cpu`](#cpu)\n\n- Default: null\n- Type: null or String\n\nOverride CPU architecture of native modules to install. Acceptable values are same as `cpu` field of package.json, which comes from `process.arch`.\n\n#### [`os`](#os)\n\n- Default: null\n- Type: null or String\n\nOverride OS of native modules to install. Acceptable values are same as `os` field of package.json, which comes from `process.platform`.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm install](npm-install)\n- [npm install-ci-test](npm-install-ci-test)\n- [npm test](npm-test)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-install-test](https://docs.npmjs.com/cli/v10/commands/npm-install-test)"
- name: npm-link
  id: cli/v10/commands/npm-link
  summary: This is handy for installing your own stuff, so that you can work on it and test iteratively without having to continually rebuild
  description: "# npm-link\n\nSymlink a package folder\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm link [<package-spec>]\n\n\nalias: ln\n```\n\n### [Description](#description)\n\nThis is handy for installing your own stuff, so that you can work on it and test iteratively without having to continually rebuild.\n\nPackage linking is a two-step process.\n\nFirst, `npm link` in a package folder with no arguments will create a symlink in the global folder `{prefix}/lib/node_modules/<package>` that links to the package where the `npm link` command was executed. It will also link any bins in the package to `{prefix}/bin/{name}`. Note that `npm link` uses the global prefix (see `npm prefix -g` for its value).\n\nNext, in some other location, `npm link package-name` will create a symbolic link from globally-installed `package-name` to `node_modules/` of the current folder.\n\nNote that `package-name` is taken from `package.json`, *not* from the directory name.\n\nThe package name can be optionally prefixed with a scope. See [`scope`](../using-npm/scope). The scope must be preceded by an @-symbol and followed by a slash.\n\nWhen creating tarballs for `npm publish`, the linked packages are \"snapshotted\" to their current state by resolving the symbolic links, if they are included in `bundleDependencies`.\n\nFor example:\n\n``` javascript\ncd ~/projects/node-redis    # go into the package directory\nnpm link                    # creates global link\ncd ~/projects/node-bloggy   # go into some other package directory.\nnpm link redis              # link-install the package\n```\n\nNow, any changes to `~/projects/node-redis` will be reflected in `~/projects/node-bloggy/node_modules/node-redis/`. Note that the link should be to the package name, not the directory name for that package.\n\nYou may also shortcut the two steps in one. For example, to do the above use-case in a shorter way:\n\n``` javascript\ncd ~/projects/node-bloggy  # go into the dir of your main project\nnpm link ../node-redis     # link the dir of your dependency\n```\n\nThe second line is the equivalent of doing:\n\n``` javascript\n(cd ../node-redis; npm link)\nnpm link redis\n```\n\nThat is, it first creates a global link, and then links the global installation target into your project's `node_modules` folder.\n\nNote that in this case, you are referring to the directory name, `node-redis`, rather than the package name `redis`.\n\nIf your linked package is scoped (see [`scope`](../using-npm/scope)) your link command must include that scope, e.g.\n\n``` javascript\nnpm link @myorg/privatepackage\n```\n\n### [Caveat](#caveat)\n\nNote that package dependencies linked in this way are *not* saved to `package.json` by default, on the assumption that the intention is to have a link stand in for a regular non-link dependency. Otherwise, for example, if you depend on `redis@^3.0.1`, and ran `npm link redis`, it would replace the `^3.0.1` dependency with `file:../path/to/node-redis`, which you probably don't want! Additionally, other users or developers on your project would run into issues if they do not have their folders set up exactly the same as yours.\n\nIf you are adding a *new* dependency as a link, you should add it to the relevant metadata by running `npm install <dep> --package-lock-only`.\n\nIf you *want* to save the `file:` reference in your `package.json` and `package-lock.json` files, you can use `npm link <dep> --save` to do so.\n\n### [Workspace Usage](#workspace-usage)\n\n`npm link <pkg> --workspace <name>` will link the relevant package as a dependency of the specified workspace(s). Note that It may actually be linked into the parent project's `node_modules` folder, if there are no conflicting dependencies.\n\n`npm link --workspace <name>` will create a global link to the specified workspace(s).\n\n### [Configuration](#configuration)\n\n#### [`save`](#save)\n\n- Default: `true` unless when using `npm update` where it defaults to `false`\n- Type: Boolean\n\nSave installed packages to a `package.json` file as dependencies.\n\nWhen used with the `npm rm` command, removes the dependency from `package.json`.\n\nWill also prevent writing to `package-lock.json` if set to `false`.\n\n#### [`save-exact`](#save-exact)\n\n- Default: false\n- Type: Boolean\n\nDependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm developers](../using-npm/developers)\n- [package.json](../configuring-npm/package-json)\n- [npm install](npm-install)\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-link](https://docs.npmjs.com/cli/v10/commands/npm-link)"
- name: npm-login
  id: cli/v10/commands/npm-login
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-login\n\nLogin to a registry user account\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm login\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nVerify a user in the specified registry, and save the credentials to the `.npmrc` file. If no registry is specified, the default registry will be used (see [`config`](../using-npm/config)).\n\nWhen using `legacy` for your `auth-type`, the username and password, are read in from prompts.\n\nTo reset your password, go to [https://www.npmjs.com/forgot](https://www.npmjs.com/forgot)\n\nTo change your email address, go to [https://www.npmjs.com/email-edit](https://www.npmjs.com/email-edit)\n\nYou may use this command multiple times with the same user account to authorize on a new machine. When authenticating on a new machine, the username, password and email address must all match with your existing record.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`scope`](#scope)\n\n- Default: the scope of the current project, if any, or \"\"\n- Type: String\n\nAssociate an operation with a scope for a scoped registry.\n\nUseful when logging in to or out of a private registry:\n\n``` javascript\n# log in, linking the scope to the custom registry\nnpm login --scope=@mycorp --registry=https://registry.mycorp.com\n\n\n# log out, removing the link and the auth token\nnpm logout --scope=@mycorp\n```\n\nThis will cause `@mycorp` to be mapped to the registry for future installation of packages specified according to the pattern `@mycorp/package`.\n\nThis will also cause `npm init` to create a scoped package.\n\n``` javascript\n# accept all defaults, and create a package named \"@foo/whatever\",\n# instead of just named \"whatever\"\nnpm init --scope=@foo --yes\n```\n\n#### [`auth-type`](#auth-type)\n\n- Default: \"web\"\n- Type: \"legacy\" or \"web\"\n\nWhat authentication strategy to use with `login`. Note that if an `otp` config is given, this value will always be set to `legacy`.\n\n### [See Also](#see-also)\n\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm owner](npm-owner)\n- [npm whoami](npm-whoami)\n- [npm token](npm-token)\n- [npm profile](npm-profile)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-login](https://docs.npmjs.com/cli/v10/commands/npm-login)"
- name: npm-logout
  id: cli/v10/commands/npm-logout
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-logout\n\nLog out of the registry\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm logout\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nWhen logged into a registry that supports token-based authentication, tell the server to end this token's session. This will invalidate the token everywhere you're using it, not just for the current environment.\n\nWhen logged into a legacy registry that uses username and password authentication, this will clear the credentials in your user configuration. In this case, it will *only* affect the current environment.\n\nIf `--scope` is provided, this will find the credentials for the registry connected to that scope, if set.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`scope`](#scope)\n\n- Default: the scope of the current project, if any, or \"\"\n- Type: String\n\nAssociate an operation with a scope for a scoped registry.\n\nUseful when logging in to or out of a private registry:\n\n``` javascript\n# log in, linking the scope to the custom registry\nnpm login --scope=@mycorp --registry=https://registry.mycorp.com\n\n\n# log out, removing the link and the auth token\nnpm logout --scope=@mycorp\n```\n\nThis will cause `@mycorp` to be mapped to the registry for future installation of packages specified according to the pattern `@mycorp/package`.\n\nThis will also cause `npm init` to create a scoped package.\n\n``` javascript\n# accept all defaults, and create a package named \"@foo/whatever\",\n# instead of just named \"whatever\"\nnpm init --scope=@foo --yes\n```\n\n### [See Also](#see-also)\n\n- [npm adduser](npm-adduser)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npm whoami](npm-whoami)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-logout](https://docs.npmjs.com/cli/v10/commands/npm-logout)"
- name: npm-ls
  id: cli/v10/commands/npm-ls
  summary: This command will print to stdout all the versions of packages that are installed, as well as their dependencies when --all is specified, in a tree structure
  description: "# npm-ls\n\nList installed packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm ls <package-spec>\n\n\nalias: list\n```\n\n### [Description](#description)\n\nThis command will print to stdout all the versions of packages that are installed, as well as their dependencies when `--all` is specified, in a tree structure.\n\nNote: to get a \"bottoms up\" view of why a given package is included in the tree at all, use [`npm explain`](npm-explain).\n\nPositional arguments are `name@version-range` identifiers, which will limit the results to only the paths to the packages named. Note that nested packages will *also* show the paths to the specified packages. For example, running `npm ls promzard` in npm's source tree will show:\n\n``` javascript\nnpm@10.2.5 /path/to/npm\n└─┬ init-package-json@0.0.4\n  └── promzard@0.1.5\n```\n\nIt will print out extraneous, missing, and invalid packages.\n\nIf a project specifies git urls for dependencies these are shown in parentheses after the `name@version` to make it easier for users to recognize potential forks of a project.\n\nThe tree shown is the logical dependency tree, based on package dependencies, not the physical layout of your `node_modules` folder.\n\nWhen run as `ll` or `la`, it shows extended information by default.\n\n### [Note: Design Changes Pending](#note-design-changes-pending)\n\nThe `npm ls` command's output and behavior made a *ton* of sense when npm created a `node_modules` folder that naively nested every dependency. In such a case, the logical dependency graph and physical tree of packages on disk would be roughly identical.\n\nWith the advent of automatic install-time deduplication of dependencies in npm v3, the `ls` output was modified to display the logical dependency graph as a tree structure, since this was more useful to most users. However, without using `npm ls -l`, it became impossible to show *where* a package was actually installed much of the time!\n\nWith the advent of automatic installation of `peerDependencies` in npm v7, this gets even more curious, as `peerDependencies` are logically \"underneath\" their dependents in the dependency graph, but are always physically at or above their location on disk.\n\nAlso, in the years since npm got an `ls` command (in version 0.0.2!), dependency graphs have gotten much larger as a general rule. Therefore, in order to avoid dumping an excessive amount of content to the terminal, `npm ls` now only shows the *top* level dependencies, unless `--all` is provided.\n\nA thorough re-examination of the use cases, intention, behavior, and output of this command, is currently underway. Expect significant changes to at least the default human-readable `npm ls` output in npm v8.\n\n### [Configuration](#configuration)\n\n#### [`all`](#all)\n\n- Default: false\n- Type: Boolean\n\nWhen running `npm outdated` and `npm ls`, setting `--all` will show all outdated or installed packages, rather than only those directly depended upon by the current project.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`long`](#long)\n\n- Default: false\n- Type: Boolean\n\nShow extended information in `ls`, `search`, and `help-search`.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`depth`](#depth)\n\n- Default: `Infinity` if `--all` is set, otherwise `1`\n- Type: null or Number\n\nThe depth to go when recursing packages for `npm ls`.\n\nIf not set, `npm ls` will show only the immediate dependencies of the root project. If `--all` is set, then npm will show all dependencies by default.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`link`](#link)\n\n- Default: false\n- Type: Boolean\n\nUsed with `npm ls`, limiting output to only those packages that are linked.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n#### [`unicode`](#unicode)\n\n- Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables.\n- Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm explain](npm-explain)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm folders](../configuring-npm/folders)\n- [npm explain](npm-explain)\n- [npm install](npm-install)\n- [npm link](npm-link)\n- [npm prune](npm-prune)\n- [npm outdated](npm-outdated)\n- [npm update](npm-update)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-ls](https://docs.npmjs.com/cli/v10/commands/npm-ls)"
- name: npm-org
  id: cli/v10/commands/npm-org
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-org\n\nManage orgs\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm org set orgname username [developer | admin | owner]\nnpm org rm orgname username\nnpm org ls orgname [<username>]\n\n\nalias: ogr\n```\n\nNote: This command is unaware of workspaces.\n\n### [Example](#example)\n\nAdd a new developer to an org:\n\n``` javascript\n$ npm org set my-org @mx-smith\n```\n\nAdd a new admin to an org (or change a developer to an admin):\n\n``` javascript\n$ npm org set my-org @mx-santos admin\n```\n\nRemove a user from an org:\n\n``` javascript\n$ npm org rm my-org mx-santos\n```\n\nList all users in an org:\n\n``` javascript\n$ npm org ls my-org\n```\n\nList all users in JSON format:\n\n``` javascript\n$ npm org ls my-org --json\n```\n\nSee what role a user has in an org:\n\n``` javascript\n$ npm org ls my-org @mx-santos\n```\n\n### [Description](#description)\n\nYou can use the `npm org` commands to manage and view users of an organization. It supports adding and removing users, changing their roles, listing them, and finding specific ones and their roles.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n### [See Also](#see-also)\n\n- [using orgs](../using-npm/orgs)\n- [Documentation on npm Orgs](https://docs.npmjs.com/orgs)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-org](https://docs.npmjs.com/cli/v10/commands/npm-org)"
- name: npm-outdated
  id: cli/v10/commands/npm-outdated
  summary: This command will check the registry to see if any (or, specific) installed packages are currently outdated
  description: "# npm-outdated\n\nCheck for outdated packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm outdated [<package-spec> ...]\n```\n\n### [Description](#description)\n\nThis command will check the registry to see if any (or, specific) installed packages are currently outdated.\n\nBy default, only the direct dependencies of the root project and direct dependencies of your configured *workspaces* are shown. Use `--all` to find all outdated meta-dependencies as well.\n\nIn the output:\n\n- `wanted` is the maximum version of the package that satisfies the semver range specified in `package.json`. If there's no available semver range (i.e. you're running `npm outdated --global`, or the package isn't included in `package.json`), then `wanted` shows the currently-installed version.\n- `latest` is the version of the package tagged as latest in the registry. Running `npm publish` with no special configuration will publish the package with a dist-tag of `latest`. This may or may not be the maximum version of the package, or the most-recently published version of the package, depending on how the package's developer manages the latest [dist-tag](npm-dist-tag).\n- `location` is where in the physical tree the package is located.\n- `depended by` shows which package depends on the displayed dependency\n- `package type` (when using `--long` / `-l`) tells you whether this package is a `dependency` or a dev/peer/optional dependency. Packages not included in `package.json` are always marked `dependencies`.\n- `homepage` (when using `--long` / `-l`) is the `homepage` value contained in the package's packument\n- Red means there's a newer version matching your semver requirements, so you should update now.\n- Yellow indicates that there's a newer version *above* your semver requirements (usually new major, or new 0.x minor) so proceed with caution.\n\n### [An example](#an-example)\n\n``` javascript\n$ npm outdated\nPackage      Current   Wanted   Latest  Location                  Depended by\nglob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-name\nnothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-name\nnpm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-name\nlocal-dev      0.0.3   linked   linked  local-dev                 dependent-package-name\nonce           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name\n```\n\nWith these `dependencies`:\n\n``` javascript\n{\n  \"glob\": \"^5.0.15\",\n  \"nothingness\": \"github:othiym23/nothingness#master\",\n  \"npm\": \"^3.5.1\",\n  \"once\": \"^1.3.1\"\n}\n```\n\nA few things to note:\n\n- `glob` requires `^5`, which prevents npm from installing `glob@6`, which is outside the semver range.\n- Git dependencies will always be reinstalled, because of how they're specified. The installed committish might satisfy the dependency specifier (if it's something immutable, like a commit SHA), or it might not, so `npm outdated` and `npm update` have to fetch Git repos to check. This is why currently doing a reinstall of a Git dependency always forces a new clone and install.\n- `npm@3.5.2` is marked as \"wanted\", but \"latest\" is `npm@3.5.1` because npm uses dist-tags to manage its `latest` and `next` release channels. `npm update` will install the *newest* version, but `npm install npm` (with no semver range) will install whatever's tagged as `latest`.\n- `once` is just plain out of date. Reinstalling `node_modules` from scratch or running `npm update` will bring it up to spec.\n\n### [Configuration](#configuration)\n\n#### [`all`](#all)\n\n- Default: false\n- Type: Boolean\n\nWhen running `npm outdated` and `npm ls`, setting `--all` will show all outdated or installed packages, rather than only those directly depended upon by the current project.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`long`](#long)\n\n- Default: false\n- Type: Boolean\n\nShow extended information in `ls`, `search`, and `help-search`.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm update](npm-update)\n- [npm dist-tag](npm-dist-tag)\n- [npm registry](../using-npm/registry)\n- [npm folders](../configuring-npm/folders)\n- [npm workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-outdated](https://docs.npmjs.com/cli/v10/commands/npm-outdated)"
- name: npm-owner
  id: cli/v10/commands/npm-owner
  summary: Manage ownership of published packages
  description: "# npm-owner\n\nManage package owners\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm owner add <user> <package-spec>\nnpm owner rm <user> <package-spec>\nnpm owner ls <package-spec>\n\n\nalias: author\n```\n\n### [Description](#description)\n\nManage ownership of published packages.\n\n- ls: List all the users who have access to modify a package and push new versions. Handy when you need to know who to bug for help.\n- add: Add a new user as a maintainer of a package. This user is enabled to modify metadata, publish new versions, and add other owners.\n- rm: Remove a user from the package owner list. This immediately revokes their privileges.\n\nNote that there is only one level of access. Either you can modify a package, or you can't. Future versions may contain more fine-grained access levels, but that is not implemented at this time.\n\nIf you have two-factor authentication enabled with `auth-and-writes` (see [`npm-profile`](npm-profile)) then you'll need to go through a second factor flow when changing ownership or include an otp on the command line with `--otp`.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm profile](npm-profile)\n- [npm publish](npm-publish)\n- [npm registry](../using-npm/registry)\n- [npm adduser](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-owner](https://docs.npmjs.com/cli/v10/commands/npm-owner)"
- name: npm-pack
  id: cli/v10/commands/npm-pack
  summary: Indicates that you don't want npm to make any changes and that it should only report what it would have done
  description: "# npm-pack\n\nCreate a tarball from a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm pack <package-spec>\n```\n\n### [Configuration](#configuration)\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`pack-destination`](#pack-destination)\n\n- Default: \".\"\n- Type: String\n\nDirectory in which `npm pack` will save tarballs.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [Description](#description)\n\nFor anything that's installable (that is, a package folder, tarball, tarball url, git url, name@tag, name@version, name, or scoped name), this command will fetch it to the cache, copy the tarball to the current working directory as `<name>-<version>.tgz`, and then write the filenames out to stdout.\n\nIf the same package is specified multiple times, then the file will be overwritten the second time.\n\nIf no arguments are supplied, then npm packs the current package folder.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm-packlist package](http://npm.im/npm-packlist)\n- [npm cache](npm-cache)\n- [npm publish](npm-publish)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-pack](https://docs.npmjs.com/cli/v10/commands/npm-pack)"
- name: npm-ping
  id: cli/v10/commands/npm-ping
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-ping\n\nPing npm registry\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm ping\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nPing the configured or given npm registry and verify authentication. If it works it will output something like:\n\n``` javascript\nnpm notice PING https://registry.npmjs.org/\nnpm notice PONG 255ms\n```\n\notherwise you will get an error:\n\n``` javascript\nnpm notice PING http://foo.com/\nnpm ERR! code E404\nnpm ERR! 404 Not Found - GET http://www.foo.com/-/ping?write=true\n```\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n### [See Also](#see-also)\n\n- [npm doctor](npm-doctor)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-ping](https://docs.npmjs.com/cli/v10/commands/npm-ping)"
- name: npm-pkg
  id: cli/v10/commands/npm-pkg
  summary: A command that automates the management of package.json files
  description: "# npm-pkg\n\nManages your package.json\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm pkg set <key>=<value> [<key>=<value> ...]\nnpm pkg get [<key> [<key> ...]]\nnpm pkg delete <key> [<key> ...]\nnpm pkg set [<array>[<index>].<key>=<value> ...]\nnpm pkg set [<array>[].<key>=<value> ...]\nnpm pkg fix\n```\n\n### [Description](#description)\n\nA command that automates the management of `package.json` files. `npm pkg` provide 3 different sub commands that allow you to modify or retrieve values for given object keys in your `package.json`.\n\nThe syntax to retrieve and set fields is a dot separated representation of the nested object properties to be found within your `package.json`, it's the same notation used in [`npm view`](npm-view) to retrieve information from the registry manifest, below you can find more examples on how to use it.\n\nReturned values are always in **json** format.\n\n- `npm pkg get <field>`\n\n  Retrieves a value `key`, defined in your `package.json` file.\n\n  For example, in order to retrieve the name of the current package, you can run:\n\n  ``` javascript\n  npm pkg get name\n  ```\n\n  It's also possible to retrieve multiple values at once:\n\n  ``` javascript\n  npm pkg get name version\n  ```\n\n  You can view child fields by separating them with a period. To retrieve the value of a test `script` value, you would run the following command:\n\n  ``` javascript\n  npm pkg get scripts.test\n  ```\n\n  For fields that are arrays, requesting a non-numeric field will return all of the values from the objects in the list. For example, to get all the contributor emails for a package, you would run:\n\n  ``` javascript\n  npm pkg get contributors.email\n  ```\n\n  You may also use numeric indices in square braces to specifically select an item in an array field. To just get the email address of the first contributor in the list, you can run:\n\n  ``` javascript\n  npm pkg get contributors[0].email\n  ```\n\n  For complex fields you can also name a property in square brackets to specifically select a child field. This is especially helpful with the exports object:\n\n  ``` javascript\n  npm pkg get \"exports[.].require\"\n  ```\n\n- `npm pkg set <field>=<value>`\n\n  Sets a `value` in your `package.json` based on the `field` value. When saving to your `package.json` file the same set of rules used during `npm install` and other cli commands that touches the `package.json` file are used, making sure to respect the existing indentation and possibly applying some validation prior to saving values to the file.\n\n  The same syntax used to retrieve values from your package can also be used to define new properties or overriding existing ones, below are some examples of how the dot separated syntax can be used to edit your `package.json` file.\n\n  Defining a new bin named `mynewcommand` in your `package.json` that points to a file `cli.js`:\n\n  ``` javascript\n  npm pkg set bin.mynewcommand=cli.js\n  ```\n\n  Setting multiple fields at once is also possible:\n\n  ``` javascript\n  npm pkg set description='Awesome package' engines.node='>=10'\n  ```\n\n  It's also possible to add to array values, for example to add a new contributor entry:\n\n  ``` javascript\n  npm pkg set contributors[0].name='Foo' contributors[0].email='foo@bar.ca'\n  ```\n\n  You may also append items to the end of an array using the special empty bracket notation:\n\n  ``` javascript\n  npm pkg set contributors[].name='Foo' contributors[].name='Bar'\n  ```\n\n  It's also possible to parse values as json prior to saving them to your `package.json` file, for example in order to set a `\"private\": true` property:\n\n  ``` javascript\n  npm pkg set private=true --json\n  ```\n\n  It also enables saving values as numbers:\n\n  ``` javascript\n  npm pkg set tap.timeout=60 --json\n  ```\n\n- `npm pkg delete <key>`\n\n  Deletes a `key` from your `package.json`\n\n  The same syntax used to set values from your package can also be used to remove existing ones. For example, in order to remove a script named build:\n\n  ``` javascript\n  npm pkg delete scripts.build\n  ```\n\n- `npm pkg fix`\n\n  Auto corrects common errors in your `package.json`. npm already does this during `publish`, which leads to subtle (mostly harmless) differences between the contents of your `package.json` file and the manifest that npm uses during installation.\n\n### [Workspaces support](#workspaces-support)\n\nYou can set/get/delete items across your configured workspaces by using the [`workspace`](../using-npm/config#workspace) or [`workspaces`](../using-npm/config#workspaces) config options.\n\nFor example, setting a `funding` value across all configured workspaces of a project:\n\n``` javascript\nnpm pkg set funding=https://example.com --ws\n```\n\nWhen using `npm pkg get` to retrieve info from your configured workspaces, the returned result will be in a json format in which top level keys are the names of each workspace, the values of these keys will be the result values returned from each of the configured workspaces, e.g:\n\n``` javascript\nnpm pkg get name version --ws\n{\n  \"a\": {\n    \"name\": \"a\",\n    \"version\": \"1.0.0\"\n  },\n  \"b\": {\n    \"name\": \"b\",\n    \"version\": \"1.0.0\"\n  }\n}\n```\n\n### [Configuration](#configuration)\n\n#### [`force`](#force)\n\n- Default: false\n- Type: Boolean\n\nRemoves various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.\n\n- Allow clobbering non-npm files in global installs.\n- Allow the `npm version` command to work on an unclean git repository.\n- Allow deleting the cache folder with `npm cache clean`.\n- Allow installing packages that have an `engines` declaration requiring a different version of npm.\n- Allow installing packages that have an `engines` declaration requiring a different version of `node`, even if `--engine-strict` is enabled.\n- Allow `npm audit fix` to install modules outside your stated dependency range (including SemVer-major changes).\n- Allow unpublishing all versions of a published package.\n- Allow conflicting peerDependencies to be installed in the root project.\n- Implicitly set `--yes` during `npm init`.\n- Allow clobbering existing values in `npm pkg`\n- Allow unpublishing of entire packages (not just a single version).\n\nIf you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n## [See Also](#see-also)\n\n- [npm install](npm-install)\n- [npm init](npm-init)\n- [npm config](npm-config)\n- [workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-pkg](https://docs.npmjs.com/cli/v10/commands/npm-pkg)"
- name: npm-prefix
  id: cli/v10/commands/npm-prefix
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-prefix\n\nDisplay prefix\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm prefix [-g]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nPrint the local prefix to standard output. This is the closest parent directory to contain a `package.json` file or `node_modules` directory, unless `-g` is also specified.\n\nIf `-g` is specified, this will be the value of the global prefix. See [`npm config`](npm-config) for more detail.\n\n### [Example](#example)\n\n``` javascript\nnpm prefix\n/usr/local/projects/foo\n```\n\n``` javascript\nnpm prefix -g\n/usr/local\n```\n\n### [Configuration](#configuration)\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n### [See Also](#see-also)\n\n- [npm root](npm-root)\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-prefix](https://docs.npmjs.com/cli/v10/commands/npm-prefix)"
- name: npm-profile
  id: cli/v10/commands/npm-profile
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-profile\n\nChange settings on your registry profile\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm profile enable-2fa [auth-only|auth-and-writes]\nnpm profile disable-2fa\nnpm profile get [<key>]\nnpm profile set <key> <value>\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nChange your profile information on the registry. Note that this command depends on the registry implementation, so third-party registries may not support this interface.\n\n- `npm profile get [<property>]`: Display all of the properties of your profile, or one or more specific properties. It looks like:\n\n``` javascript\n+-----------------+---------------------------+\n| name            | example                   |\n+-----------------+---------------------------+\n| email           | me@example.com (verified) |\n+-----------------+---------------------------+\n| two factor auth | auth-and-writes           |\n+-----------------+---------------------------+\n| fullname        | Example User              |\n+-----------------+---------------------------+\n| homepage        |                           |\n+-----------------+---------------------------+\n| freenode        |                           |\n+-----------------+---------------------------+\n| twitter         |                           |\n+-----------------+---------------------------+\n| github          |                           |\n+-----------------+---------------------------+\n| created         | 2015-02-26T01:38:35.892Z  |\n+-----------------+---------------------------+\n| updated         | 2017-10-02T21:29:45.922Z  |\n+-----------------+---------------------------+\n```\n\n- `npm profile set <property> <value>`: Set the value of a profile property. You can set the following properties this way: email, fullname, homepage, freenode, twitter, github\n\n- `npm profile set password`: Change your password. This is interactive, you'll be prompted for your current password and a new password. You'll also be prompted for an OTP if you have two-factor authentication enabled.\n\n- `npm profile enable-2fa [auth-and-writes|auth-only]`: Enables two-factor authentication. Defaults to `auth-and-writes` mode. Modes are:\n\n  - `auth-only`: Require an OTP when logging in or making changes to your account's authentication. The OTP will be required on both the website and the command line.\n  - `auth-and-writes`: Requires an OTP at all the times `auth-only` does, and also requires one when publishing a module, setting the `latest` dist-tag, or changing access via `npm access` and `npm owner`.\n\n- `npm profile disable-2fa`: Disables two-factor authentication.\n\n### [Details](#details)\n\nSome of these commands may not be available on non npmjs.com registries.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n### [See Also](#see-also)\n\n- [npm adduser](npm-adduser)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm owner](npm-owner)\n- [npm whoami](npm-whoami)\n- [npm token](npm-token)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-profile](https://docs.npmjs.com/cli/v10/commands/npm-profile)"
- name: npm-prune
  id: cli/v10/commands/npm-prune
  summary: This command removes "extraneous" packages
  description: "# npm-prune\n\nRemove extraneous packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm prune [[<@scope>/]<pkg>...]\n```\n\n### [Description](#description)\n\nThis command removes \"extraneous\" packages. If a package name is provided, then only packages matching one of the supplied names are removed.\n\nExtraneous packages are those present in the `node_modules` folder that are not listed as any package's dependency list.\n\nIf the `--omit=dev` flag is specified or the `NODE_ENV` environment variable is set to `production`, this command will remove the packages specified in your `devDependencies`.\n\nIf the `--dry-run` flag is used then no changes will actually be made.\n\nIf the `--json` flag is used, then the changes `npm prune` made (or would have made with `--dry-run`) are printed as a JSON object.\n\nIn normal operation, extraneous modules are pruned automatically, so you'll only need this command with the `--production` flag. However, in the real world, operation is not always \"normal\". When crashes or mistakes happen, this command can help clean up any resulting garbage.\n\n### [Configuration](#configuration)\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm uninstall](npm-uninstall)\n- [npm folders](../configuring-npm/folders)\n- [npm ls](npm-ls)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-prune](https://docs.npmjs.com/cli/v10/commands/npm-prune)"
- name: npm-publish
  id: cli/v10/commands/npm-publish
  summary: Publishes a package to the registry so that it can be installed by name
  description: "# npm-publish\n\nPublish a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm publish <package-spec>\n```\n\n### [Description](#description)\n\nPublishes a package to the registry so that it can be installed by name.\n\nBy default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a [`scope`](../using-npm/scope) in the name, combined with a scope-configured registry (see [`package.json`](../configuring-npm/package-json)).\n\nA `package` is interpreted the same way as other commands (like `npm install` and can be:\n\n- a\\) a folder containing a program described by a [`package.json`](../configuring-npm/package-json) file\n- b\\) a gzipped tarball containing (a)\n- c\\) a url that resolves to (b)\n- d\\) a `<name>@<version>` that is published on the registry (see [`registry`](../using-npm/registry)) with (c)\n- e\\) a `<name>@<tag>` (see [`npm dist-tag`](npm-dist-tag)) that points to (d)\n- f\\) a `<name>` that has a \"latest\" tag satisfying (e)\n- g\\) a `<git remote url>` that resolves to (a)\n\nThe publish will fail if the package name and version combination already exists in the specified registry.\n\nOnce a package is published with a given name and version, that specific name and version combination can never be used again, even if it is removed with [`npm unpublish`](npm-unpublish).\n\nAs of `npm@5`, both a sha1sum and an integrity field with a sha512sum of the tarball will be submitted to the registry during publication. Subsequent installs will use the strongest supported algorithm to verify downloads.\n\nSimilar to `--dry-run` see [`npm pack`](npm-pack), which figures out the files to be included and packs them into a tarball to be uploaded to the registry.\n\n### [Files included in package](#files-included-in-package)\n\nTo see what will be included in your package, run `npm pack --dry-run`. All files are included by default, with the following exceptions:\n\n- Certain files that are relevant to package installation and distribution are always included. For example, `package.json`, `README.md`, `LICENSE`, and so on.\n\n- If there is a \"files\" list in [`package.json`](../configuring-npm/package-json), then only the files specified will be included. (If directories are specified, then they will be walked recursively and their contents included, subject to the same ignore rules.)\n\n- If there is a `.gitignore` or `.npmignore` file, then ignored files in that and all child directories will be excluded from the package. If *both* files exist, then the `.gitignore` is ignored, and only the `.npmignore` is used.\n\n  `.npmignore` files follow the [same pattern rules](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring) as `.gitignore` files\n\n- If the file matches certain patterns, then it will *never* be included, unless explicitly added to the `\"files\"` list in `package.json`, or un-ignored with a `!` rule in a `.npmignore` or `.gitignore` file.\n\n- Symbolic links are never included in npm packages.\n\nSee [`developers`](../using-npm/developers) for full details on what's included in the published package, as well as details on how the package is built.\n\n### [Configuration](#configuration)\n\n#### [`tag`](#tag)\n\n- Default: \"latest\"\n- Type: String\n\nIf you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.\n\nAlso the tag that is added to the package@version specified by the `npm tag` command, if no explicit tag is given.\n\nWhen used by the `npm diff` command, this is the tag used to fetch the tarball that will be compared with the local files by default.\n\n#### [`access`](#access)\n\n- Default: 'public' for new packages, existing packages it will not change the current level\n- Type: null, \"restricted\", or \"public\"\n\nIf you do not want your scoped package to be publicly viewable (and installable) set `--access=restricted`.\n\nUnscoped packages can not be set to `restricted`.\n\nNote: This defaults to not changing the current access level for existing packages. Specifying a value of `restricted` or `public` during publish will change the access for an existing package the same way that `npm access set status` would.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`provenance`](#provenance)\n\n- Default: false\n- Type: Boolean\n\nWhen publishing from a supported cloud CI/CD system, the package will be publicly linked to where it was built and published from.\n\nThis config can not be used with: `provenance-file`\n\n#### [`provenance-file`](#provenance-file)\n\n- Default: null\n- Type: Path\n\nWhen publishing, the provenance bundle at the given path will be used.\n\nThis config can not be used with: `provenance`\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm-packlist package](http://npm.im/npm-packlist)\n- [npm registry](../using-npm/registry)\n- [npm scope](../using-npm/scope)\n- [npm adduser](npm-adduser)\n- [npm owner](npm-owner)\n- [npm deprecate](npm-deprecate)\n- [npm dist-tag](npm-dist-tag)\n- [npm pack](npm-pack)\n- [npm profile](npm-profile)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-publish](https://docs.npmjs.com/cli/v10/commands/npm-publish)"
- name: npm-query
  id: cli/v10/commands/npm-query
  summary: The npm query command allows for usage of css selectors in order to retrieve an array of dependency objects
  description: "# npm-query\n\nDependency selector query\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm query <selector>\n```\n\n### [Description](#description)\n\nThe `npm query` command allows for usage of css selectors in order to retrieve an array of dependency objects.\n\n### [Piping npm query to other commands](#piping-npm-query-to-other-commands)\n\n``` javascript\n# find all dependencies with postinstall scripts & uninstall them\nnpm query \":attr(scripts, [postinstall])\" | jq 'map(.name)|join(\"\\n\")' -r | xargs -I {} npm uninstall {}\n\n\n# find all git dependencies & explain who requires them\nnpm query \":type(git)\" | jq 'map(.name)' | xargs -I {} npm why {}\n```\n\n### [Extended Use Cases & Queries](#extended-use-cases--queries)\n\n``` javascript\n// all deps\n*\n\n\n// all direct deps\n:root > *\n\n\n// direct production deps\n:root > .prod\n\n\n// direct development deps\n:root > .dev\n\n\n// any peer dep of a direct deps\n:root > * > .peer\n\n\n// any workspace dep\n.workspace\n\n\n// all workspaces that depend on another workspace\n.workspace > .workspace\n\n\n// all workspaces that have peer deps\n.workspace:has(.peer)\n\n\n// any dep named \"lodash\"\n// equivalent to [name=\"lodash\"]\n#lodash\n\n\n// any deps named \"lodash\" & within semver range ^\"1.2.3\"\n#lodash@^1.2.3\n// equivalent to...\n[name=\"lodash\"]:semver(^1.2.3)\n\n\n// get the hoisted node for a given semver range\n#lodash@^1.2.3:not(:deduped)\n\n\n// querying deps with a specific version\n#lodash@2.1.5\n// equivalent to...\n[name=\"lodash\"][version=\"2.1.5\"]\n\n\n// has any deps\n:has(*)\n\n\n// deps with no other deps (ie. \"leaf\" nodes)\n:empty\n\n\n// manually querying git dependencies\n[repository^=github:],\n[repository^=git:],\n[repository^=https://github.com],\n[repository^=http://github.com],\n[repository^=https://github.com],\n[repository^=+git:...]\n\n\n// querying for all git dependencies\n:type(git)\n\n\n// get production dependencies that aren't also dev deps\n.prod:not(.dev)\n\n\n// get dependencies with specific licenses\n[license=MIT], [license=ISC]\n\n\n// find all packages that have @ruyadorno as a contributor\n:attr(contributors, [email=ruyadorno@github.com])\n```\n\n### [Example Response Output](#example-response-output)\n\n- an array of dependency objects is returned which can contain multiple copies of the same package which may or may not have been linked or deduped\n\n``` javascript\n[\n  {\n    \"name\": \"\",\n    \"version\": \"\",\n    \"description\": \"\",\n    \"homepage\": \"\",\n    \"bugs\": {},\n    \"author\": {},\n    \"license\": {},\n    \"funding\": {},\n    \"files\": [],\n    \"main\": \"\",\n    \"browser\": \"\",\n    \"bin\": {},\n    \"man\": [],\n    \"directories\": {},\n    \"repository\": {},\n    \"scripts\": {},\n    \"config\": {},\n    \"dependencies\": {},\n    \"devDependencies\": {},\n    \"optionalDependencies\": {},\n    \"bundledDependencies\": {},\n    \"peerDependencies\": {},\n    \"peerDependenciesMeta\": {},\n    \"engines\": {},\n    \"os\": [],\n    \"cpu\": [],\n    \"workspaces\": {},\n    \"keywords\": [],\n    ...\n  },\n  ...\n```\n\n### [Package lock only mode](#package-lock-only-mode)\n\nIf package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded. This means that information from the package.json files of your dependencies will not be included in the result set (e.g. description, homepage, engines).\n\n### [Package lock only mode](#package-lock-only-mode-1)\n\nIf package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded. This means that information from the package.json files of your dependencies will not be included in the result set (e.g. description, homepage, engines).\n\n### [Configuration](#configuration)\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n## [See Also](#see-also)\n\n- [dependency selectors](../using-npm/dependency-selectors)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-query](https://docs.npmjs.com/cli/v10/commands/npm-query)"
- name: npm-rebuild
  id: cli/v10/commands/npm-rebuild
  summary: If one or more package specs are provided, then only packages with a name and version matching one of the specifiers will be rebuilt
  description: "# npm-rebuild\n\nRebuild a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm rebuild [<package-spec>] ...]\n\n\nalias: rb\n```\n\n### [Description](#description)\n\nThis command does the following:\n\n1.  Execute lifecycle scripts (`preinstall`, `install`, `postinstall`, `prepare`)\n2.  Links bins depending on whether bin links are enabled\n\nThis command is particularly useful in scenarios including but not limited to:\n\n1.  Installing a new version of **node.js**, where you need to recompile all your C++ add-ons with the updated binary.\n2.  Installing with `--ignore-scripts` and `--no-bin-links`, to explicitly choose which packages to build and/or link bins.\n\nIf one or more package specs are provided, then only packages with a name and version matching one of the specifiers will be rebuilt.\n\nUsually, you should not need to run `npm rebuild` as it is already done for you as part of npm install (unless you suppressed these steps with `--ignore-scripts` or `--no-bin-links`).\n\nIf there is a `binding.gyp` file in the root of your package, then npm will use a default install hook:\n\n``` javascript\n\"scripts\": {\n    \"install\": \"node-gyp rebuild\"\n}\n```\n\nThis default behavior is suppressed if the `package.json` has its own `install` or `preinstall` scripts. It is also suppressed if the package specifies `\"gypfile\": false`\n\n### [Configuration](#configuration)\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm install](npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-rebuild](https://docs.npmjs.com/cli/v10/commands/npm-rebuild)"
- name: npm-repo
  id: cli/v10/commands/npm-repo
  summary: This command tries to guess at the likely location of a package's repository URL, and then tries to open it using the --browser config param
  description: "# npm-repo\n\nOpen package repository page in the browser\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm repo [<pkgname> [<pkgname> ...]]\n```\n\n### [Description](#description)\n\nThis command tries to guess at the likely location of a package's repository URL, and then tries to open it using the [`--browser` config](../using-npm/config#browser) param. If no package name is provided, it will search for a `package.json` in the current folder and use the `repository` property.\n\n### [Configuration](#configuration)\n\n#### [`browser`](#browser)\n\n- Default: OS X: `\"open\"`, Windows: `\"start\"`, Others: `\"xdg-open\"`\n- Type: null, Boolean, or String\n\nThe browser that is called by npm commands to open websites.\n\nSet to `false` to suppress browser behavior and instead print urls to terminal.\n\nSet to `true` to use default system URL opener.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [npm docs](npm-docs)\n- [npm config](npm-config)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-repo](https://docs.npmjs.com/cli/v10/commands/npm-repo)"
- name: npm-restart
  id: cli/v10/commands/npm-restart
  summary: This restarts a project
  description: "# npm-restart\n\nRestart a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm restart [-- <args>]\n```\n\n### [Description](#description)\n\nThis restarts a project. It is equivalent to running `npm run-script restart`.\n\nIf the current project has a `\"restart\"` script specified in `package.json`, then the following scripts will be run:\n\n1.  prerestart\n2.  restart\n3.  postrestart\n\nIf it does *not* have a `\"restart\"` script specified, but it does have `stop` and/or `start` scripts, then the following scripts will be run:\n\n1.  prerestart\n2.  prestop\n3.  stop\n4.  poststop\n5.  prestart\n6.  start\n7.  poststart\n8.  postrestart\n\n### [Configuration](#configuration)\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`script-shell`](#script-shell)\n\n- Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n- Type: null or String\n\nThe shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.\n\n### [See Also](#see-also)\n\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [npm test](npm-test)\n- [npm start](npm-start)\n- [npm stop](npm-stop)\n- [npm restart](npm-restart)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-restart](https://docs.npmjs.com/cli/v10/commands/npm-restart)"
- name: npm-root
  id: cli/v10/commands/npm-root
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-root\n\nDisplay npm root\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm root\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nPrint the effective `node_modules` folder to standard out.\n\nUseful for using npm in shell scripts that do things with the `node_modules` folder. For example:\n\n``` javascript\n#!/bin/bash\nglobal_node_modules=\"$(npm root --global)\"\necho \"Global packages installed in: ${global_node_modules}\"\n```\n\n### [Configuration](#configuration)\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n### [See Also](#see-also)\n\n- [npm prefix](npm-prefix)\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-root](https://docs.npmjs.com/cli/v10/commands/npm-root)"
- name: npm-run-script
  id: cli/v10/commands/npm-run-script
  summary: This runs an arbitrary command from a package's "scripts" object
  description: "# npm-run-script\n\nRun arbitrary package scripts\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm run-script <command> [-- <args>]\n\n\naliases: run, rum, urn\n```\n\n### [Description](#description)\n\nThis runs an arbitrary command from a package's `\"scripts\"` object. If no `\"command\"` is provided, it will list the available scripts.\n\n`run[-script]` is used by the test, start, restart, and stop commands, but can be called directly, as well. When the scripts in the package are printed out, they're separated into lifecycle (test, start, restart) and directly-run scripts.\n\nAny positional arguments are passed to the specified script. Use `--` to pass `-`-prefixed flags and options which would otherwise be parsed by npm.\n\nFor example:\n\n``` javascript\nnpm run test -- --grep=\"pattern\"\n```\n\nThe arguments will only be passed to the script specified after `npm run` and not to any `pre` or `post` script.\n\nThe `env` script is a special built-in command that can be used to list environment variables that will be available to the script at runtime. If an \"env\" command is defined in your package, it will take precedence over the built-in.\n\nIn addition to the shell's pre-existing `PATH`, `npm run` adds `node_modules/.bin` to the `PATH` provided to scripts. Any binaries provided by locally-installed dependencies can be used without the `node_modules/.bin` prefix. For example, if there is a `devDependency` on `tap` in your package, you should write:\n\n``` javascript\n\"scripts\": {\"test\": \"tap test/*.js\"}\n```\n\ninstead of\n\n``` javascript\n\"scripts\": {\"test\": \"node_modules/.bin/tap test/*.js\"}\n```\n\nThe actual shell your script is run within is platform dependent. By default, on Unix-like systems it is the `/bin/sh` command, on Windows it is `cmd.exe`. The actual shell referred to by `/bin/sh` also depends on the system. You can customize the shell with the [`script-shell` config](../using-npm/config#script-shell).\n\nScripts are run from the root of the package folder, regardless of what the current working directory is when `npm run` is called. If you want your script to use different behavior based on what subdirectory you're in, you can use the `INIT_CWD` environment variable, which holds the full path you were in when you ran `npm run`.\n\n`npm run` sets the `NODE` environment variable to the `node` executable with which `npm` is executed.\n\nIf you try to run a script without having a `node_modules` directory and it fails, you will be given a warning to run `npm install`, just in case you've forgotten.\n\n### [Workspaces support](#workspaces-support)\n\nYou may use the [`workspace`](../using-npm/config#workspace) or [`workspaces`](../using-npm/config#workspaces) configs in order to run an arbitrary command from a package's `\"scripts\"` object in the context of the specified workspaces. If no `\"command\"` is provided, it will list the available scripts for each of these configured workspaces.\n\nGiven a project with configured workspaces, e.g:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n   +-- b\n   |   `-- package.json\n   `-- c\n       `-- package.json\n```\n\nAssuming the workspace configuration is properly set up at the root level `package.json` file. e.g:\n\n``` javascript\n{\n    \"workspaces\": [ \"./packages/*\" ]\n}\n```\n\nAnd that each of the configured workspaces has a configured `test` script, we can run tests in all of them using the [`workspaces` config](../using-npm/config#workspaces):\n\n`npm test --workspaces`\n\n#### [Filtering workspaces](#filtering-workspaces)\n\nIt's also possible to run a script in a single workspace using the `workspace` config along with a name or directory path:\n\n`npm test --workspace=a`\n\nThe `workspace` config can also be specified multiple times in order to run a specific script in the context of multiple workspaces. When defining values for the `workspace` config in the command line, it also possible to use `-w` as a shorthand, e.g:\n\n`npm test -w a -w b`\n\nThis last command will run `test` in both `./packages/a` and `./packages/b` packages.\n\n### [Configuration](#configuration)\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`if-present`](#if-present)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm will not exit with an error code when `run-script` is invoked for a script that isn't defined in the `scripts` section of `package.json`. This option can be used when it's desirable to optionally run a script when it's present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.\n\nThis value is not exported to the environment for child processes.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`script-shell`](#script-shell)\n\n- Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n- Type: null or String\n\nThe shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.\n\n### [See Also](#see-also)\n\n- [npm scripts](../using-npm/scripts)\n- [npm test](npm-test)\n- [npm start](npm-start)\n- [npm restart](npm-restart)\n- [npm stop](npm-stop)\n- [npm config](npm-config)\n- [npm workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-run-script](https://docs.npmjs.com/cli/v10/commands/npm-run-script)"
- name: npm-sbom
  id: cli/v10/commands/npm-sbom
  summary: The npm sbom command generates a Software Bill of Materials (SBOM) listing the dependencies for the current project
  description: "# npm-sbom\n\nGenerate a Software Bill of Materials (SBOM)\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm sbom\n```\n\n### [Description](#description)\n\nThe `npm sbom` command generates a Software Bill of Materials (SBOM) listing the dependencies for the current project. SBOMs can be generated in either [SPDX](https://spdx.dev/) or [CycloneDX](https://cyclonedx.org/) format.\n\n### [Example CycloneDX SBOM](#example-cyclonedx-sbom)\n\n``` javascript\n{\n  \"$schema\": \"http://cyclonedx.org/schema/bom-1.5.schema.json\",\n  \"bomFormat\": \"CycloneDX\",\n  \"specVersion\": \"1.5\",\n  \"serialNumber\": \"urn:uuid:09f55116-97e1-49cf-b3b8-44d0207e7730\",\n  \"version\": 1,\n  \"metadata\": {\n    \"timestamp\": \"2023-09-01T00:00:00.001Z\",\n    \"lifecycles\": [\n      {\n        \"phase\": \"build\"\n      }\n    ],\n    \"tools\": [\n      {\n        \"vendor\": \"npm\",\n        \"name\": \"cli\",\n        \"version\": \"10.1.0\"\n      }\n    ],\n    \"component\": {\n      \"bom-ref\": \"simple@1.0.0\",\n      \"type\": \"library\",\n      \"name\": \"simple\",\n      \"version\": \"1.0.0\",\n      \"scope\": \"required\",\n      \"author\": \"John Doe\",\n      \"description\": \"simple react app\",\n      \"purl\": \"pkg:npm/simple@1.0.0\",\n      \"properties\": [\n        {\n          \"name\": \"cdx:npm:package:path\",\n          \"value\": \"\"\n        }\n      ],\n      \"externalReferences\": [],\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ]\n    }\n  },\n  \"components\": [\n    {\n      \"bom-ref\": \"lodash@4.17.21\",\n      \"type\": \"library\",\n      \"name\": \"lodash\",\n      \"version\": \"4.17.21\",\n      \"scope\": \"required\",\n      \"author\": \"John-David Dalton\",\n      \"description\": \"Lodash modular utilities.\",\n      \"purl\": \"pkg:npm/lodash@4.17.21\",\n      \"properties\": [\n        {\n          \"name\": \"cdx:npm:package:path\",\n          \"value\": \"node_modules/lodash\"\n        }\n      ],\n      \"externalReferences\": [\n        {\n          \"type\": \"distribution\",\n          \"url\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\"\n        },\n        {\n          \"type\": \"vcs\",\n          \"url\": \"git+https://github.com/lodash/lodash.git\"\n        },\n        {\n          \"type\": \"website\",\n          \"url\": \"https://lodash.com/\"\n        },\n        {\n          \"type\": \"issue-tracker\",\n          \"url\": \"https://github.com/lodash/lodash/issues\"\n        }\n      ],\n      \"hashes\": [\n        {\n          \"alg\": \"SHA-512\",\n          \"content\": \"bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a\"\n        }\n      ],\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ]\n    }\n  ],\n  \"dependencies\": [\n    {\n      \"ref\": \"simple@1.0.0\",\n      \"dependsOn\": [\"lodash@4.17.21\"]\n    },\n    {\n      \"ref\": \"lodash@4.17.21\",\n      \"dependsOn\": []\n    }\n  ]\n}\n```\n\n### [Example SPDX SBOM](#example-spdx-sbom)\n\n``` javascript\n{\n  \"spdxVersion\": \"SPDX-2.3\",\n  \"dataLicense\": \"CC0-1.0\",\n  \"SPDXID\": \"SPDXRef-DOCUMENT\",\n  \"name\": \"simple@1.0.0\",\n  \"documentNamespace\": \"http://spdx.org/spdxdocs/simple-1.0.0-bf81090e-8bbc-459d-bec9-abeb794e096a\",\n  \"creationInfo\": {\n    \"created\": \"2023-09-01T00:00:00.001Z\",\n    \"creators\": [\"Tool: npm/cli-10.1.0\"]\n  },\n  \"documentDescribes\": [\"SPDXRef-Package-simple-1.0.0\"],\n  \"packages\": [\n    {\n      \"name\": \"simple\",\n      \"SPDXID\": \"SPDXRef-Package-simple-1.0.0\",\n      \"versionInfo\": \"1.0.0\",\n      \"packageFileName\": \"\",\n      \"description\": \"simple react app\",\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"downloadLocation\": \"NOASSERTION\",\n      \"filesAnalyzed\": false,\n      \"homepage\": \"NOASSERTION\",\n      \"licenseDeclared\": \"MIT\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:npm/simple@1.0.0\"\n        }\n      ]\n    },\n    {\n      \"name\": \"lodash\",\n      \"SPDXID\": \"SPDXRef-Package-lodash-4.17.21\",\n      \"versionInfo\": \"4.17.21\",\n      \"packageFileName\": \"node_modules/lodash\",\n      \"description\": \"Lodash modular utilities.\",\n      \"downloadLocation\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\",\n      \"filesAnalyzed\": false,\n      \"homepage\": \"https://lodash.com/\",\n      \"licenseDeclared\": \"MIT\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:npm/lodash@4.17.21\"\n        }\n      ],\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA512\",\n          \"checksumValue\": \"bf690311ee7b95e713ba568322e3533f2dd1cb880b189e99d4edef13592b81764daec43e2c54c61d5c558dc5cfb35ecb85b65519e74026ff17675b6f8f916f4a\"\n        }\n      ]\n    }\n  ],\n  \"relationships\": [\n    {\n      \"spdxElementId\": \"SPDXRef-DOCUMENT\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-simple-1.0.0\",\n      \"relationshipType\": \"DESCRIBES\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-simple-1.0.0\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-lodash-4.17.21\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    }\n  ]\n}\n```\n\n### [Package lock only mode](#package-lock-only-mode)\n\nIf package-lock-only is enabled, only the information in the package lock (or shrinkwrap) is loaded. This means that information from the package.json files of your dependencies will not be included in the result set (e.g. description, homepage, engines).\n\n### [Configuration](#configuration)\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`package-lock-only`](#package-lock-only)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.\n\nFor `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.\n\nFor `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.\n\n#### [`sbom-format`](#sbom-format)\n\n- Default: null\n- Type: \"cyclonedx\" or \"spdx\"\n\nSBOM format to use when generating SBOMs.\n\n#### [`sbom-type`](#sbom-type)\n\n- Default: \"library\"\n- Type: \"library\", \"application\", or \"framework\"\n\nThe type of package described by the generated SBOM. For SPDX, this is the value for the `primaryPackagePurpose` field. For CycloneDX, this is the value for the `type` field.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n## [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [dependency selectors](../using-npm/dependency-selectors)\n- [package.json](../configuring-npm/package-json)\n- [workspaces](../using-npm/workspaces)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-sbom](https://docs.npmjs.com/cli/v10/commands/npm-sbom)"
- name: npm-search
  id: cli/v10/commands/npm-search
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-search\n\nSearch for packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm search [search terms ...]\n\n\naliases: find, s, se\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nSearch the registry for packages matching the search terms. `npm search` performs a linear, incremental, lexically-ordered search through package metadata for all files in the registry. If your terminal has color support, it will further highlight the matches in the results. This can be disabled with the config item `color`\n\nAdditionally, using the `--searchopts` and `--searchexclude` options paired with more search terms will include and exclude further patterns. The main difference between `--searchopts` and the standard search terms is that the former does not highlight results in the output and you can use them more fine-grained filtering. Additionally, you can add both of these to your config to change default search filtering behavior.\n\nSearch also allows targeting of maintainers in search results, by prefixing their npm username with `=`.\n\nIf a term starts with `/`, then it's interpreted as a regular expression and supports standard JavaScript RegExp syntax. In this case search will ignore a trailing `/` . (Note you must escape or quote many regular expression characters in most shells.)\n\n### [Configuration](#configuration)\n\n#### [`long`](#long)\n\n- Default: false\n- Type: Boolean\n\nShow extended information in `ls`, `search`, and `help-search`.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`color`](#color)\n\n- Default: true unless the NO_COLOR environ is set to something other than '0'\n- Type: \"always\" or Boolean\n\nIf false, never shows colors. If `\"always\"` then always shows colors. If true, then only prints color codes for tty file descriptors.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n#### [`description`](#description-1)\n\n- Default: true\n- Type: Boolean\n\nShow the description in `npm search`\n\n#### [`searchopts`](#searchopts)\n\n- Default: \"\"\n- Type: String\n\nSpace-separated options that are always passed to search.\n\n#### [`searchexclude`](#searchexclude)\n\n- Default: \"\"\n- Type: String\n\nSpace-separated options that limit the results from search.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`prefer-online`](#prefer-online)\n\n- Default: false\n- Type: Boolean\n\nIf true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data.\n\n#### [`prefer-offline`](#prefer-offline)\n\n- Default: false\n- Type: Boolean\n\nIf true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use `--offline`.\n\n#### [`offline`](#offline)\n\n- Default: false\n- Type: Boolean\n\nForce offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see `--prefer-offline`.\n\n### [See Also](#see-also)\n\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm view](npm-view)\n- [npm cache](npm-cache)\n- [https://npm.im/npm-registry-fetch](https://npm.im/npm-registry-fetch)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-search](https://docs.npmjs.com/cli/v10/commands/npm-search)"
- name: npm-shrinkwrap
  id: cli/v10/commands/npm-shrinkwrap
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-shrinkwrap\n\nLock down dependency versions for publication\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm shrinkwrap\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nThis command repurposes `package-lock.json` into a publishable `npm-shrinkwrap.json` or simply creates a new one. The file created and updated by this command will then take precedence over any other existing or future `package-lock.json` files. For a detailed explanation of the design and purpose of package locks in npm, see [package-lock-json](../configuring-npm/package-lock-json).\n\n### [See Also](#see-also)\n\n- [npm install](npm-install)\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [package.json](../configuring-npm/package-json)\n- [package-lock.json](../configuring-npm/package-lock-json)\n- [npm-shrinkwrap.json](../configuring-npm/npm-shrinkwrap-json)\n- [npm ls](npm-ls)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-shrinkwrap](https://docs.npmjs.com/cli/v10/commands/npm-shrinkwrap)"
- name: npm-shrinkwrap.json
  id: cli/v10/configuring-npm/npm-shrinkwrap-json
  summary: npm-shrinkwrap.json is a file created by npm shrinkwrap
  description: "# npm-shrinkwrap.json\n\nA publishable lockfile\n\n### [Description](#description)\n\n`npm-shrinkwrap.json` is a file created by [`npm shrinkwrap`](../commands/npm-shrinkwrap). It is identical to `package-lock.json`, with one major caveat: Unlike `package-lock.json`, `npm-shrinkwrap.json` may be included when publishing a package.\n\nThe recommended use-case for `npm-shrinkwrap.json` is applications deployed through the publishing process on the registry: for example, daemons and command-line tools intended as global installs or `devDependencies`. It's strongly discouraged for library authors to publish this file, since that would prevent end users from having control over transitive dependency updates.\n\nIf both `package-lock.json` and `npm-shrinkwrap.json` are present in a package root, `npm-shrinkwrap.json` will be preferred over the `package-lock.json` file.\n\nFor full details and description of the `npm-shrinkwrap.json` file format, refer to the manual page for [package-lock.json](package-lock-json).\n\n### [See also](#see-also)\n\n- [npm shrinkwrap](../commands/npm-shrinkwrap)\n- [package-lock.json](package-lock-json)\n- [package.json](package-json)\n- [npm install](../commands/npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/npm-shrinkwrap-json](https://docs.npmjs.com/cli/v10/configuring-npm/npm-shrinkwrap-json)"
- name: npm-star
  id: cli/v10/commands/npm-star
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-star\n\nMark your favorite packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm star [<package-spec>...]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\n\"Starring\" a package means that you have some interest in it. It's a vaguely positive way to show that you care.\n\nIt's a boolean thing. Starring repeatedly has no additional effect.\n\n### [More](#more)\n\nThere's also these extra commands to help you manage your favorite packages:\n\n#### [Unstar](#unstar)\n\nYou can also \"unstar\" a package using [`npm unstar`](npm-unstar)\n\n\"Unstarring\" is the same thing, but in reverse.\n\n#### [Listing stars](#listing-stars)\n\nYou can see all your starred packages using [`npm stars`](npm-stars)\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`unicode`](#unicode)\n\n- Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables.\n- Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm unstar](npm-unstar)\n- [npm stars](npm-stars)\n- [npm view](npm-view)\n- [npm whoami](npm-whoami)\n- [npm adduser](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-star](https://docs.npmjs.com/cli/v10/commands/npm-star)"
- name: npm-stars
  id: cli/v10/commands/npm-stars
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-stars\n\nView packages marked as favorites\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm stars [<user>]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nIf you have starred a lot of neat things and want to find them again quickly this command lets you do just that.\n\nYou may also want to see your friend's favorite packages, in this case you will most certainly enjoy this command.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n### [See Also](#see-also)\n\n- [npm star](npm-star)\n- [npm unstar](npm-unstar)\n- [npm view](npm-view)\n- [npm whoami](npm-whoami)\n- [npm adduser](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-stars](https://docs.npmjs.com/cli/v10/commands/npm-stars)"
- name: npm-start
  id: cli/v10/commands/npm-start
  summary: This runs a predefined command specified in the "start" property of a package's "scripts" object
  description: "# npm-start\n\nStart a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm start [-- <args>]\n```\n\n### [Description](#description)\n\nThis runs a predefined command specified in the `\"start\"` property of a package's `\"scripts\"` object.\n\nIf the `\"scripts\"` object does not define a `\"start\"` property, npm will run `node server.js`.\n\nNote that this is different from the default node behavior of running the file specified in a package's `\"main\"` attribute when evoking with `node .`\n\nAs of [`npm@2.0.0`](https://blog.npmjs.org/post/98131109725/npm-2-0-0), you can use custom arguments when executing scripts. Refer to [`npm run-script`](npm-run-script) for more details.\n\n### [Example](#example)\n\n``` javascript\n{\n  \"scripts\": {\n    \"start\": \"node foo.js\"\n  }\n}\n```\n\n``` javascript\nnpm start\n\n\n> npm@x.x.x start\n> node foo.js\n\n\n(foo.js output would be here)\n```\n\n### [Configuration](#configuration)\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`script-shell`](#script-shell)\n\n- Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n- Type: null or String\n\nThe shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.\n\n### [See Also](#see-also)\n\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [npm test](npm-test)\n- [npm restart](npm-restart)\n- [npm stop](npm-stop)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-start](https://docs.npmjs.com/cli/v10/commands/npm-start)"
- name: npm-stop
  id: cli/v10/commands/npm-stop
  summary: This runs a predefined command specified in the "stop" property of a package's "scripts" object
  description: "# npm-stop\n\nStop a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm stop [-- <args>]\n```\n\n### [Description](#description)\n\nThis runs a predefined command specified in the \"stop\" property of a package's \"scripts\" object.\n\nUnlike with [npm start](npm-start), there is no default script that will run if the `\"stop\"` property is not defined.\n\n### [Example](#example)\n\n``` javascript\n{\n  \"scripts\": {\n    \"stop\": \"node bar.js\"\n  }\n}\n```\n\n``` javascript\nnpm stop\n\n\n> npm@x.x.x stop\n> node bar.js\n\n\n(bar.js output would be here)\n```\n\n### [Configuration](#configuration)\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`script-shell`](#script-shell)\n\n- Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n- Type: null or String\n\nThe shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.\n\n### [See Also](#see-also)\n\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [npm test](npm-test)\n- [npm start](npm-start)\n- [npm restart](npm-restart)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-stop](https://docs.npmjs.com/cli/v10/commands/npm-stop)"
- name: npm-team
  id: cli/v10/commands/npm-team
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-team\n\nManage organization teams and team memberships\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm team create <scope:team> [--otp <otpcode>]\nnpm team destroy <scope:team> [--otp <otpcode>]\nnpm team add <scope:team> <user> [--otp <otpcode>]\nnpm team rm <scope:team> <user> [--otp <otpcode>]\nnpm team ls <scope>|<scope:team>\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nUsed to manage teams in organizations, and change team memberships. Does not handle permissions for packages.\n\nTeams must always be fully qualified with the organization/scope they belong to when operating on them, separated by a colon (`:`). That is, if you have a `newteam` team in an `org` organization, you must always refer to that team as `@org:newteam` in these commands.\n\nIf you have two-factor authentication enabled in `auth-and-writes` mode, then you can provide a code from your authenticator with `[--otp <otpcode>]`. If you don't include this then you will be taken through a second factor flow based on your `authtype`.\n\n- create / destroy: Create a new team, or destroy an existing one. Note: You cannot remove the `developers` team, [learn more.](../../../about-developers-team)\n\n  Here's how to create a new team `newteam` under the `org` org:\n\n  ``` javascript\n  npm team create @org:newteam\n  ```\n\n  You should see a confirming message such as: `+@org:newteam` once the new team has been created.\n\n- add: Add a user to an existing team.\n\n  Adding a new user `username` to a team named `newteam` under the `org` org:\n\n  ``` javascript\n  npm team add @org:newteam username\n  ```\n\n  On success, you should see a message: `username added to @org:newteam`\n\n- rm: Using `npm team rm` you can also remove users from a team they belong to.\n\n  Here's an example removing user `username` from `newteam` team in `org` organization:\n\n  ``` javascript\n  npm team rm @org:newteam username\n  ```\n\n  Once the user is removed a confirmation message is displayed: `username removed from @org:newteam`\n\n- ls: If performed on an organization name, will return a list of existing teams under that organization. If performed on a team, it will instead return a list of all users belonging to that particular team.\n\n  Here's an example of how to list all teams from an org named `org`:\n\n  ``` javascript\n  npm team ls @org\n  ```\n\n  Example listing all members of a team named `newteam`:\n\n  ``` javascript\n  npm team ls @org:newteam\n  ```\n\n### [Details](#details)\n\n`npm team` always operates directly on the current registry, configurable from the command line using `--registry=<registry url>`.\n\nYou must be a *team admin* to create teams and manage team membership, under the given organization. Listing teams and team memberships may be done by any member of the organization.\n\nOrganization creation and management of team admins and *organization* members is done through the website, not the npm CLI.\n\nTo use teams to manage permissions on packages belonging to your organization, use the `npm access` command to grant or revoke the appropriate permissions.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n#### [`parseable`](#parseable)\n\n- Default: false\n- Type: Boolean\n\nOutput parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n### [See Also](#see-also)\n\n- [npm access](npm-access)\n- [npm config](npm-config)\n- [npm registry](../using-npm/registry)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-team](https://docs.npmjs.com/cli/v10/commands/npm-team)"
- name: npm-test
  id: cli/v10/commands/npm-test
  summary: This runs a predefined command specified in the "test" property of a package's "scripts" object
  description: "# npm-test\n\nTest a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm test [-- <args>]\n\n\naliases: tst, t\n```\n\n### [Description](#description)\n\nThis runs a predefined command specified in the `\"test\"` property of a package's `\"scripts\"` object.\n\n### [Example](#example)\n\n``` javascript\n{\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  }\n}\n```\n\n``` javascript\nnpm test\n> npm@x.x.x test\n> node test.js\n\n\n(test.js output would be here)\n```\n\n### [Configuration](#configuration)\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`script-shell`](#script-shell)\n\n- Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows\n- Type: null or String\n\nThe shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.\n\n### [See Also](#see-also)\n\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [npm start](npm-start)\n- [npm restart](npm-restart)\n- [npm stop](npm-stop)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-test](https://docs.npmjs.com/cli/v10/commands/npm-test)"
- name: npm-token
  id: cli/v10/commands/npm-token
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-token\n\nManage your authentication tokens\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm token list\nnpm token revoke <id|token>\nnpm token create [--read-only] [--cidr=list]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nThis lets you list, create and revoke authentication tokens.\n\n- `npm token list`: Shows a table of all active authentication tokens. You can request this as JSON with `--json` or tab-separated values with `--parseable`.\n\n``` javascript\n+--------+---------+------------+----------+----------------+\n| id     | token   | created    | read-only | CIDR whitelist |\n+--------+---------+------------+----------+----------------+\n| 7f3134 | 1fa9ba… | 2017-10-02 | yes      |                |\n+--------+---------+------------+----------+----------------+\n| c03241 | af7aef… | 2017-10-02 | no       | 192.168.0.1/24 |\n+--------+---------+------------+----------+----------------+\n| e0cf92 | 3a436a… | 2017-10-02 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 63eb9d | 74ef35… | 2017-09-28 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 2daaa8 | cbad5f… | 2017-09-26 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 68c2fe | 127e51… | 2017-09-23 | no       |                |\n+--------+---------+------------+----------+----------------+\n| 6334e1 | 1dadd1… | 2017-09-23 | no       |                |\n+--------+---------+------------+----------+----------------+\n```\n\n- `npm token create [--read-only] [--cidr=<cidr-ranges>]`: Create a new authentication token. It can be `--read-only`, or accept a list of [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) ranges with which to limit use of this token. This will prompt you for your password, and, if you have two-factor authentication enabled, an otp.\n\n  Currently, the cli can not generate automation tokens. Please refer to the [docs website](../../../creating-and-viewing-access-tokens) for more information on generating automation tokens.\n\n``` javascript\n+----------------+--------------------------------------+\n| token          | a73c9572-f1b9-8983-983d-ba3ac3cc913d |\n+----------------+--------------------------------------+\n| cidr_whitelist |                                      |\n+----------------+--------------------------------------+\n| readonly       | false                                |\n+----------------+--------------------------------------+\n| created        | 2017-10-02T07:52:24.838Z             |\n+----------------+--------------------------------------+\n```\n\n- `npm token revoke <token|id>`: Immediately removes an authentication token from the registry. You will no longer be able to use it. This can accept both complete tokens (such as those you get back from `npm token create`, and those found in your `.npmrc`), and ids as seen in the parseable or json output of `npm token list`. This will NOT accept the truncated token found in the normal `npm token list` output.\n\n### [Configuration](#configuration)\n\n#### [`read-only`](#read-only)\n\n- Default: false\n- Type: Boolean\n\nThis is used to mark a token as unable to publish when configuring limited access tokens with the `npm token create` command.\n\n#### [`cidr`](#cidr)\n\n- Default: null\n- Type: null or String (can be set multiple times)\n\nThis is a list of CIDR address to be used when configuring limited access tokens with the `npm token create` command.\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n### [See Also](#see-also)\n\n- [npm adduser](npm-adduser)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm owner](npm-owner)\n- [npm whoami](npm-whoami)\n- [npm profile](npm-profile)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-token](https://docs.npmjs.com/cli/v10/commands/npm-token)"
- name: npm-uninstall
  id: cli/v10/commands/npm-uninstall
  summary: This uninstalls a package, completely removing everything npm installed on its behalf
  description: "# npm-uninstall\n\nRemove a package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm uninstall [<@scope>/]<pkg>...\n\n\naliases: unlink, remove, rm, r, un\n```\n\n### [Description](#description)\n\nThis uninstalls a package, completely removing everything npm installed on its behalf.\n\nIt also removes the package from the `dependencies`, `devDependencies`, `optionalDependencies`, and `peerDependencies` objects in your `package.json`.\n\nFurther, if you have an `npm-shrinkwrap.json` or `package-lock.json`, npm will update those files as well.\n\n`--no-save` will tell npm not to remove the package from your `package.json`, `npm-shrinkwrap.json`, or `package-lock.json` files.\n\n`--save` or `-S` will tell npm to remove the package from your `package.json`, `npm-shrinkwrap.json`, and `package-lock.json` files. This is the default, but you may need to use this if you have for instance `save=false` in your `npmrc` file\n\nIn global mode (ie, with `-g` or `--global` appended to the command), it uninstalls the current package context as a global package. `--no-save` is ignored in this case.\n\nScope is optional and follows the usual rules for [`scope`](../using-npm/scope).\n\n### [Examples](#examples)\n\n``` javascript\nnpm uninstall sax\n```\n\n`sax` will no longer be in your `package.json`, `npm-shrinkwrap.json`, or `package-lock.json` files.\n\n``` javascript\nnpm uninstall lodash --no-save\n```\n\n`lodash` will not be removed from your `package.json`, `npm-shrinkwrap.json`, or `package-lock.json` files.\n\n### [Configuration](#configuration)\n\n#### [`save`](#save)\n\n- Default: `true` unless when using `npm update` where it defaults to `false`\n- Type: Boolean\n\nSave installed packages to a `package.json` file as dependencies.\n\nWhen used with the `npm rm` command, removes the dependency from `package.json`.\n\nWill also prevent writing to `package-lock.json` if set to `false`.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm prune](npm-prune)\n- [npm install](npm-install)\n- [npm folders](../configuring-npm/folders)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-uninstall](https://docs.npmjs.com/cli/v10/commands/npm-uninstall)"
- name: npm-unpublish
  id: cli/v10/commands/npm-unpublish
  summary: To learn more about how the npm registry treats unpublish, see our unpublish policies
  description: "# npm-unpublish\n\nRemove a package from the registry\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm unpublish [<package-spec>]\n```\n\nTo learn more about how the npm registry treats unpublish, see our [unpublish policies](https://docs.npmjs.com/policies/unpublish).\n\n### [Warning](#warning)\n\nConsider using the [`deprecate`](npm-deprecate) command instead, if your intent is to encourage users to upgrade, or if you no longer want to maintain a package.\n\n### [Description](#description)\n\nThis removes a package version from the registry, deleting its entry and removing the tarball.\n\nThe npm registry will return an error if you are not [logged in](npm-adduser).\n\nIf you do not specify a package name at all, the name and version to be unpublished will be pulled from the project in the current directory.\n\nIf you specify a package name but do not specify a version or if you remove all of a package's versions then the registry will remove the root package entry entirely.\n\nEven if you unpublish a package version, that specific name and version combination can never be reused. In order to publish the package again, you must use a new version number. If you unpublish the entire package, you may not publish any new versions of that package until 24 hours have passed.\n\n### [Configuration](#configuration)\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`force`](#force)\n\n- Default: false\n- Type: Boolean\n\nRemoves various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input.\n\n- Allow clobbering non-npm files in global installs.\n- Allow the `npm version` command to work on an unclean git repository.\n- Allow deleting the cache folder with `npm cache clean`.\n- Allow installing packages that have an `engines` declaration requiring a different version of npm.\n- Allow installing packages that have an `engines` declaration requiring a different version of `node`, even if `--engine-strict` is enabled.\n- Allow `npm audit fix` to install modules outside your stated dependency range (including SemVer-major changes).\n- Allow unpublishing all versions of a published package.\n- Allow conflicting peerDependencies to be installed in the root project.\n- Implicitly set `--yes` during `npm init`.\n- Allow clobbering existing values in `npm pkg`\n- Allow unpublishing of entire packages (not just a single version).\n\nIf you don't have a clear idea of what you want to do, it is strongly recommended that you do not use this option!\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm deprecate](npm-deprecate)\n- [npm publish](npm-publish)\n- [npm registry](../using-npm/registry)\n- [npm adduser](npm-adduser)\n- [npm owner](npm-owner)\n- [npm login](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-unpublish](https://docs.npmjs.com/cli/v10/commands/npm-unpublish)"
- name: npm-unstar
  id: cli/v10/commands/npm-unstar
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-unstar\n\nRemove an item from your favorite packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm unstar [<package-spec>...]\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\n\"Unstarring\" a package is the opposite of [`npm star`](npm-star), it removes an item from your list of favorite packages.\n\n### [More](#more)\n\nThere's also these extra commands to help you manage your favorite packages:\n\n#### [Star](#star)\n\nYou can \"star\" a package using [`npm star`](npm-star)\n\n#### [Listing stars](#listing-stars)\n\nYou can see all your starred packages using [`npm stars`](npm-stars)\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n#### [`unicode`](#unicode)\n\n- Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables.\n- Type: Boolean\n\nWhen set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.\n\n#### [`otp`](#otp)\n\n- Default: null\n- Type: null or String\n\nThis is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.\n\nIf not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.\n\n### [See Also](#see-also)\n\n- [npm star](npm-star)\n- [npm stars](npm-stars)\n- [npm view](npm-view)\n- [npm whoami](npm-whoami)\n- [npm adduser](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-unstar](https://docs.npmjs.com/cli/v10/commands/npm-unstar)"
- name: npm-update
  id: cli/v10/commands/npm-update
  summary: This command will update all the packages listed to the latest version (specified by the tag config), respecting the semver constraints of both your package and its dependencies (if they also require the same package)
  description: "# npm-update\n\nUpdate packages\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm update [<pkg>...]\n\n\naliases: up, upgrade, udpate\n```\n\n### [Description](#description)\n\nThis command will update all the packages listed to the latest version (specified by the [`tag` config](../using-npm/config#tag)), respecting the semver constraints of both your package and its dependencies (if they also require the same package).\n\nIt will also install missing packages.\n\nIf the `-g` flag is specified, this command will update globally installed packages.\n\nIf no package name is specified, all packages in the specified location (global or local) will be updated.\n\nNote that by default `npm update` will not update the semver values of direct dependencies in your project `package.json`, if you want to also update values in `package.json` you can run: `npm update --save` (or add the `save=true` option to a [configuration file](../configuring-npm/npmrc) to make that the default behavior).\n\n### [Example](#example)\n\nFor the examples below, assume that the current package is `app` and it depends on dependencies, `dep1` (`dep2`, .. etc.). The published versions of `dep1` are:\n\n``` javascript\n{\n  \"dist-tags\": { \"latest\": \"1.2.2\" },\n  \"versions\": [\n    \"1.2.2\",\n    \"1.2.1\",\n    \"1.2.0\",\n    \"1.1.2\",\n    \"1.1.1\",\n    \"1.0.0\",\n    \"0.4.1\",\n    \"0.4.0\",\n    \"0.2.0\"\n  ]\n}\n```\n\n#### [Caret Dependencies](#caret-dependencies)\n\nIf `app`'s `package.json` contains:\n\n``` javascript\n\"dependencies\": {\n  \"dep1\": \"^1.1.1\"\n}\n```\n\nThen `npm update` will install `dep1@1.2.2`, because `1.2.2` is `latest` and `1.2.2` satisfies `^1.1.1`.\n\n#### [Tilde Dependencies](#tilde-dependencies)\n\nHowever, if `app`'s `package.json` contains:\n\n``` javascript\n\"dependencies\": {\n  \"dep1\": \"~1.1.1\"\n}\n```\n\nIn this case, running `npm update` will install `dep1@1.1.2`. Even though the `latest` tag points to `1.2.2`, this version do not satisfy `~1.1.1`, which is equivalent to `>=1.1.1 <1.2.0`. So the highest-sorting version that satisfies `~1.1.1` is used, which is `1.1.2`.\n\n#### [Caret Dependencies below 1.0.0](#caret-dependencies-below-100)\n\nSuppose `app` has a caret dependency on a version below `1.0.0`, for example:\n\n``` javascript\n\"dependencies\": {\n  \"dep1\": \"^0.2.0\"\n}\n```\n\n`npm update` will install `dep1@0.2.0`, because there are no other versions which satisfy `^0.2.0`.\n\nIf the dependence were on `^0.4.0`:\n\n``` javascript\n\"dependencies\": {\n  \"dep1\": \"^0.4.0\"\n}\n```\n\nThen `npm update` will install `dep1@0.4.1`, because that is the highest-sorting version that satisfies `^0.4.0` (`>= 0.4.0 <0.5.0`)\n\n#### [Subdependencies](#subdependencies)\n\nSuppose your app now also has a dependency on `dep2`\n\n``` javascript\n{\n  \"name\": \"my-app\",\n  \"dependencies\": {\n    \"dep1\": \"^1.0.0\",\n    \"dep2\": \"1.0.0\"\n  }\n}\n```\n\nand `dep2` itself depends on this limited range of `dep1`\n\n``` javascript\n{\n  \"name\": \"dep2\",\n  \"dependencies\": {\n    \"dep1\": \"~1.1.1\"\n  }\n}\n```\n\nThen `npm update` will install `dep1@1.1.2` because that is the highest version that `dep2` allows. npm will prioritize having a single version of `dep1` in your tree rather than two when that single version can satisfy the semver requirements of multiple dependencies in your tree. In this case if you really did need your package to use a newer version you would need to use `npm install`.\n\n#### [Updating Globally-Installed Packages](#updating-globally-installed-packages)\n\n`npm update -g` will apply the `update` action to each globally installed package that is `outdated` -- that is, has a version that is different from `wanted`.\n\nNote: Globally installed packages are treated as if they are installed with a caret semver range specified. So if you require to update to `latest` you may need to run `npm install -g [<pkg>...]`\n\nNOTE: If a package has been upgraded to a version newer than `latest`, it will be *downgraded*.\n\n### [Configuration](#configuration)\n\n#### [`save`](#save)\n\n- Default: `true` unless when using `npm update` where it defaults to `false`\n- Type: Boolean\n\nSave installed packages to a `package.json` file as dependencies.\n\nWhen used with the `npm rm` command, removes the dependency from `package.json`.\n\nWill also prevent writing to `package-lock.json` if set to `false`.\n\n#### [`global`](#global)\n\n- Default: false\n- Type: Boolean\n\nOperates in \"global\" mode, so that packages are installed into the `prefix` folder instead of the current working directory. See [folders](../configuring-npm/folders) for more on the differences in behavior.\n\n- packages are installed into the `{prefix}/lib/node_modules` folder, instead of the current working directory.\n- bin files are linked to `{prefix}/bin`\n- man pages are linked to `{prefix}/share/man`\n\n#### [`install-strategy`](#install-strategy)\n\n- Default: \"hoisted\"\n- Type: \"hoisted\", \"nested\", \"shallow\", or \"linked\"\n\nSets the strategy for installing packages in node_modules. hoisted (default): Install non-duplicated in top-level, and duplicated as necessary within directory structure. nested: (formerly --legacy-bundling) install in place, no hoisting. shallow (formerly --global-style) only install direct deps at top-level. linked: (experimental) install in node_modules/.store, link in place, unhoisted.\n\n#### [`legacy-bundling`](#legacy-bundling)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=nested`\n\nInstead of hoisting package installs in `node_modules`, install packages in the same manner that they are depended on. This may cause very deep directory structures and duplicate package installs as there is no de-duplicating. Sets `--install-strategy=nested`.\n\n#### [`global-style`](#global-style)\n\n- Default: false\n- Type: Boolean\n- DEPRECATED: This option has been deprecated in favor of `--install-strategy=shallow`\n\nOnly install direct dependencies in the top level `node_modules`, but hoist on deeper dependencies. Sets `--install-strategy=shallow`.\n\n#### [`omit`](#omit)\n\n- Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.\n- Type: \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nDependency types to omit from the installation tree on disk.\n\nNote that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.\n\nIf a package type appears in both the `--include` and `--omit` lists, then it will be included.\n\nIf the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.\n\n#### [`include`](#include)\n\n- Default:\n- Type: \"prod\", \"dev\", \"optional\", or \"peer\" (can be set multiple times)\n\nOption that allows for defining which types of dependencies to install.\n\nThis is the inverse of `--omit=<type>`.\n\nDependency types specified in `--include` will not be omitted, regardless of the order in which omit/include are specified on the command-line.\n\n#### [`strict-peer-deps`](#strict-peer-deps)\n\n- Default: false\n- Type: Boolean\n\nIf set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.\n\nBy default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.\n\nWhen such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.\n\n#### [`package-lock`](#package-lock)\n\n- Default: true\n- Type: Boolean\n\nIf set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.\n\n#### [`foreground-scripts`](#foreground-scripts)\n\n- Default: false\n- Type: Boolean\n\nRun all build scripts (ie, `preinstall`, `install`, and `postinstall`) scripts for installed packages in the foreground process, sharing standard input, output, and error with the main npm process.\n\nNote that this will generally make installs run slower, and be much noisier, but can be useful for debugging.\n\n#### [`ignore-scripts`](#ignore-scripts)\n\n- Default: false\n- Type: Boolean\n\nIf true, npm does not run scripts specified in package.json files.\n\nNote that commands explicitly intended to run a particular script, such as `npm start`, `npm stop`, `npm restart`, `npm test`, and `npm run-script` will still run their intended script if `ignore-scripts` is set, but they will *not* run any pre- or post-scripts.\n\n#### [`audit`](#audit)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes. See the documentation for [`npm audit`](npm-audit) for details on what is submitted.\n\n#### [`bin-links`](#bin-links)\n\n- Default: true\n- Type: Boolean\n\nTells npm to create symlinks (or `.cmd` shims on Windows) for package executables.\n\nSet to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.\n\n#### [`fund`](#fund)\n\n- Default: true\n- Type: Boolean\n\nWhen \"true\" displays the message at the end of each `npm install` acknowledging the number of dependencies looking for funding. See [`npm fund`](npm-fund) for details.\n\n#### [`dry-run`](#dry-run)\n\n- Default: false\n- Type: Boolean\n\nIndicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, `install`, `update`, `dedupe`, `uninstall`, as well as `pack` and `publish`.\n\nNote: This is NOT honored by other network related commands, eg `dist-tags`, `owner`, etc.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`install-links`](#install-links)\n\n- Default: false\n- Type: Boolean\n\nWhen set file: protocol dependencies will be packed and installed as regular dependencies instead of creating a symlink. This option has no effect on workspaces.\n\n### [See Also](#see-also)\n\n- [npm install](npm-install)\n- [npm outdated](npm-outdated)\n- [npm shrinkwrap](npm-shrinkwrap)\n- [npm registry](../using-npm/registry)\n- [npm folders](../configuring-npm/folders)\n- [npm ls](npm-ls)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-update](https://docs.npmjs.com/cli/v10/commands/npm-update)"
- name: npm-version
  id: cli/v10/commands/npm-version
  summary: Prevents throwing an error when npm version is used to set the new version to the same value as the current version
  description: "# npm-version\n\nBump a package version\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n\n\nalias: verison\n```\n\n### [Configuration](#configuration)\n\n#### [`allow-same-version`](#allow-same-version)\n\n- Default: false\n- Type: Boolean\n\nPrevents throwing an error when `npm version` is used to set the new version to the same value as the current version.\n\n#### [`commit-hooks`](#commit-hooks)\n\n- Default: true\n- Type: Boolean\n\nRun git commit hooks when using the `npm version` command.\n\n#### [`git-tag-version`](#git-tag-version)\n\n- Default: true\n- Type: Boolean\n\nTag the commit when using the `npm version` command. Setting this to false results in no commit being made at all.\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`preid`](#preid)\n\n- Default: \"\"\n- Type: String\n\nThe \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a semver. Like the `rc` in `1.2.0-rc.8`.\n\n#### [`sign-git-tag`](#sign-git-tag)\n\n- Default: false\n- Type: Boolean\n\nIf set to true, then the `npm version` command will tag the version using `-s` to add a signature.\n\nNote that git requires you to have set up GPG keys in your git configs for this to work properly.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces-update`](#workspaces-update)\n\n- Default: true\n- Type: Boolean\n\nIf set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the `node_modules` folder.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [Description](#description)\n\nRun this in a package directory to bump the version and write the new data back to `package.json`, `package-lock.json`, and, if present, `npm-shrinkwrap.json`.\n\nThe `newversion` argument should be a valid semver string, a valid second argument to [semver.inc](https://github.com/npm/node-semver#functions) (one of `patch`, `minor`, `major`, `prepatch`, `preminor`, `premajor`, `prerelease`), or `from-git`. In the second case, the existing version will be incremented by 1 in the specified field. `from-git` will try to read the latest git tag, and use that as the new npm version.\n\nIf run in a git repo, it will also create a version commit and tag. This behavior is controlled by `git-tag-version` (see below), and can be disabled on the command line by running `npm --no-git-tag-version version`. It will fail if the working directory is not clean, unless the `-f` or `--force` flag is set.\n\nIf supplied with `-m` or [`--message` config](../using-npm/config#message) option, npm will use it as a commit message when creating a version commit. If the `message` config contains `%s` then that will be replaced with the resulting version number. For example:\n\n``` javascript\nnpm version patch -m \"Upgrade to %s for reasons\"\n```\n\nIf the [`sign-git-tag` config](../using-npm/config#sign-git-tag) is set, then the tag will be signed using the `-s` flag to git. Note that you must have a default GPG key set up in your git config for this to work properly. For example:\n\n``` javascript\n$ npm config set sign-git-tag true\n$ npm version patch\n\n\nYou need a passphrase to unlock the secret key for\nuser: \"isaacs (http://blog.izs.me/) <i@izs.me>\"\n2048-bit RSA key, ID 6C481CF6, created 2010-08-31\n\n\nEnter passphrase:\n```\n\nIf `preversion`, `version`, or `postversion` are in the `scripts` property of the package.json, they will be executed as part of running `npm version`.\n\nThe exact order of execution is as follows:\n\n1.  Check to make sure the git working directory is clean before we get started. Your scripts may add files to the commit in future steps. This step is skipped if the `--force` flag is set.\n2.  Run the `preversion` script. These scripts have access to the old `version` in package.json. A typical use would be running your full test suite before deploying. Any files you want added to the commit should be explicitly added using `git add`.\n3.  Bump `version` in `package.json` as requested (`patch`, `minor`, `major`, etc).\n4.  Run the `version` script. These scripts have access to the new `version` in package.json (so they can incorporate it into file headers in generated files for example). Again, scripts should explicitly add generated files to the commit using `git add`.\n5.  Commit and tag.\n6.  Run the `postversion` script. Use it to clean up the file system or automatically push the commit and/or tag.\n\nTake the following example:\n\n``` javascript\n{\n  \"scripts\": {\n    \"preversion\": \"npm test\",\n    \"version\": \"npm run build && git add -A dist\",\n    \"postversion\": \"git push && git push --tags && rm -rf build/temp\"\n  }\n}\n```\n\nThis runs all your tests and proceeds only if they pass. Then runs your `build` script, and adds everything in the `dist` directory to the commit. After the commit, it pushes the new commit and tag up to the server, and deletes the `build/temp` directory.\n\n### [See Also](#see-also)\n\n- [npm init](npm-init)\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [package.json](../configuring-npm/package-json)\n- [config](../using-npm/config)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-version](https://docs.npmjs.com/cli/v10/commands/npm-version)"
- name: npm-view
  id: cli/v10/commands/npm-view
  summary: This command shows data about a package and prints it to stdout
  description: "# npm-view\n\nView registry info\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm view [<package-spec>] [<field>[.subfield]...]\n\n\naliases: info, show, v\n```\n\n### [Description](#description)\n\nThis command shows data about a package and prints it to stdout.\n\nAs an example, to view information about the `connect` package from the registry, you would run:\n\n``` javascript\nnpm view connect\n```\n\nThe default version is `\"latest\"` if unspecified.\n\nField names can be specified after the package descriptor. For example, to show the dependencies of the `ronn` package at version `0.3.5`, you could do the following:\n\n``` javascript\nnpm view ronn@0.3.5 dependencies\n```\n\nBy default, `npm view` shows data about the current project context (by looking for a `package.json`). To show field data for the current project use a file path (i.e. `.`):\n\n``` javascript\nnpm view . dependencies\n```\n\nYou can view child fields by separating them with a period. To view the git repository URL for the latest version of `npm`, you would run the following command:\n\n``` javascript\nnpm view npm repository.url\n```\n\nThis makes it easy to view information about a dependency with a bit of shell scripting. For example, to view all the data about the version of `opts` that `ronn` depends on, you could write the following:\n\n``` javascript\nnpm view opts@$(npm view ronn dependencies.opts)\n```\n\nFor fields that are arrays, requesting a non-numeric field will return all of the values from the objects in the list. For example, to get all the contributor email addresses for the `express` package, you would run:\n\n``` javascript\nnpm view express contributors.email\n```\n\nYou may also use numeric indices in square braces to specifically select an item in an array field. To just get the email address of the first contributor in the list, you can run:\n\n``` javascript\nnpm view express contributors[0].email\n```\n\nIf the field value you are querying for is a property of an object, you should run:\n\n``` javascript\nnpm view express time'[4.8.0]'\n```\n\nMultiple fields may be specified, and will be printed one after another. For example, to get all the contributor names and email addresses, you can do this:\n\n``` javascript\nnpm view express contributors.name contributors.email\n```\n\n\"Person\" fields are shown as a string if they would be shown as an object. So, for example, this will show the list of `npm` contributors in the shortened string format. (See [`package.json`](../configuring-npm/package-json) for more on this.)\n\n``` javascript\nnpm view npm contributors\n```\n\nIf a version range is provided, then data will be printed for every matching version of the package. This will show which version of `jsdom` was required by each matching version of `yui3`:\n\n``` javascript\nnpm view yui3@'>0.5.4' dependencies.jsdom\n```\n\nTo show the `connect` package version history, you can do this:\n\n``` javascript\nnpm view connect versions\n```\n\n### [Configuration](#configuration)\n\n#### [`json`](#json)\n\n- Default: false\n- Type: Boolean\n\nWhether or not to output JSON data, rather than the normal output.\n\n- In `npm pkg set` it enables parsing set values with JSON.parse() before saving them to your `package.json`.\n\nNot supported by all npm commands.\n\n#### [`workspace`](#workspace)\n\n- Default:\n- Type: String (can be set multiple times)\n\nEnable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.\n\nValid values for the `workspace` config are either:\n\n- Workspace names\n- Path to a workspace directory\n- Path to a parent workspace directory (will result in selecting all workspaces within that folder)\n\nWhen set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.\n\nThis value is not exported to the environment for child processes.\n\n#### [`workspaces`](#workspaces)\n\n- Default: null\n- Type: null or Boolean\n\nSet to true to run the command in the context of **all** configured workspaces.\n\nExplicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:\n\n- Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.\n\nThis value is not exported to the environment for child processes.\n\n#### [`include-workspace-root`](#include-workspace-root)\n\n- Default: false\n- Type: Boolean\n\nInclude the workspace root when workspaces are enabled for a command.\n\nWhen false, specifying individual workspaces via the `workspace` config, or all workspaces via the `workspaces` flag, will cause npm to operate only on the specified workspaces, and not on the root project.\n\nThis value is not exported to the environment for child processes.\n\n### [Output](#output)\n\nIf only a single string field for a single version is output, then it will not be colorized or quoted, to enable piping the output to another command. If the field is an object, it will be output as a JavaScript object literal.\n\nIf the `--json` flag is given, the outputted fields will be JSON.\n\nIf the version range matches multiple versions then each printed value will be prefixed with the version it applies to.\n\nIf multiple fields are requested, then each of them is prefixed with the field name.\n\n### [See Also](#see-also)\n\n- [package spec](../using-npm/package-spec)\n- [npm search](npm-search)\n- [npm registry](../using-npm/registry)\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm docs](npm-docs)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-view](https://docs.npmjs.com/cli/v10/commands/npm-view)"
- name: npm-whoami
  id: cli/v10/commands/npm-whoami
  summary: 'Note: This command is unaware of workspaces'
  description: "# npm-whoami\n\nDisplay npm username\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpm whoami\n```\n\nNote: This command is unaware of workspaces.\n\n### [Description](#description)\n\nDisplay the npm username of the currently logged-in user.\n\nIf logged into a registry that provides token-based authentication, then connect to the `/-/whoami` registry endpoint to find the username associated with the token, and print to standard output.\n\nIf logged into a registry that uses Basic Auth, then simply print the `username` portion of the authentication string.\n\n### [Configuration](#configuration)\n\n#### [`registry`](#registry)\n\n- Default: \"[https://registry.npmjs.org/](https://registry.npmjs.org/)\"\n- Type: URL\n\nThe base URL of the npm registry.\n\n### [See Also](#see-also)\n\n- [npm config](npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm adduser](npm-adduser)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npm-whoami](https://docs.npmjs.com/cli/v10/commands/npm-whoami)"
- name: npmrc
  id: cli/v10/configuring-npm/npmrc
  summary: npm gets its config settings from the command line, environment variables, and npmrc files
  description: "# npmrc\n\nThe npm config files\n\n### [Description](#description)\n\nnpm gets its config settings from the command line, environment variables, and `npmrc` files.\n\nThe `npm config` command can be used to update and edit the contents of the user and global npmrc files.\n\nFor a list of available configuration options, see [config](../using-npm/config).\n\n### [Files](#files)\n\nThe four relevant files are:\n\n- per-project config file (/path/to/my/project/.npmrc)\n- per-user config file (~/.npmrc)\n- global config file ($PREFIX/etc/npmrc)\n- npm builtin config file (/path/to/npm/npmrc)\n\nAll npm config files are an ini-formatted list of `key = value` parameters. Environment variables can be replaced using `${VARIABLE_NAME}`. For example:\n\n``` javascript\nprefix = ${HOME}/.npm-packages\n```\n\nEach of these files is loaded, and config options are resolved in priority order. For example, a setting in the userconfig file would override the setting in the globalconfig file.\n\nArray values are specified by adding \"\\[\\]\" after the key name. For example:\n\n``` javascript\nkey[] = \"first value\"\nkey[] = \"second value\"\n```\n\n#### [Comments](#comments)\n\nLines in `.npmrc` files are interpreted as comments when they begin with a `;` or `#` character. `.npmrc` files are parsed by [npm/ini](https://github.com/npm/ini), which specifies this comment syntax.\n\nFor example:\n\n``` javascript\n# last modified: 01 Jan 2016\n; Set a new registry for a scoped package\n@myscope:registry=https://mycustomregistry.example.org\n```\n\n#### [Per-project config file](#per-project-config-file)\n\nWhen working locally in a project, a `.npmrc` file in the root of the project (ie, a sibling of `node_modules` and `package.json`) will set config values specific to this project.\n\nNote that this only applies to the root of the project that you're running npm in. It has no effect when your module is published. For example, you can't publish a module that forces itself to install globally, or in a different location.\n\nAdditionally, this file is not read in global mode, such as when running `npm install -g`.\n\n#### [Per-user config file](#per-user-config-file)\n\n`$HOME/.npmrc` (or the `userconfig` param, if set in the environment or on the command line)\n\n#### [Global config file](#global-config-file)\n\n`$PREFIX/etc/npmrc` (or the `globalconfig` param, if set above): This file is an ini-file formatted list of `key = value` parameters. Environment variables can be replaced as above.\n\n#### [Built-in config file](#built-in-config-file)\n\n`path/to/npm/itself/npmrc`\n\nThis is an unchangeable \"builtin\" configuration file that npm keeps consistent across updates. Set fields in here using the `./configure` script that comes with npm. This is primarily for distribution maintainers to override default configs in a standard and consistent manner.\n\n### [Auth related configuration](#auth-related-configuration)\n\nThe settings `_auth`, `_authToken`, `username` and `_password` must all be scoped to a specific registry. This ensures that `npm` will never send credentials to the wrong host.\n\nThe full list is:\n\n- `_auth` (base64 authentication string)\n- `_authToken` (authentication token)\n- `username`\n- `_password`\n- `email`\n- `certfile` (path to certificate file)\n- `keyfile` (path to key file)\n\nIn order to scope these values, they must be prefixed by a URI fragment. If the credential is meant for any request to a registry on a single host, the scope may look like `//registry.npmjs.org/:`. If it must be scoped to a specific path on the host that path may also be provided, such as `//my-custom-registry.org/unique/path:`.\n\n``` javascript\n; bad config\n_authToken=MYTOKEN\n\n\n; good config\n@myorg:registry=https://somewhere-else.com/myorg\n@another:registry=https://somewhere-else.com/another\n//registry.npmjs.org/:_authToken=MYTOKEN\n; would apply to both @myorg and @another\n; //somewhere-else.com/:_authToken=MYTOKEN\n; would apply only to @myorg\n//somewhere-else.com/myorg/:_authToken=MYTOKEN1\n; would apply only to @another\n//somewhere-else.com/another/:_authToken=MYTOKEN2\n```\n\n### [See also](#see-also)\n\n- [npm folders](folders)\n- [npm config](../commands/npm-config)\n- [config](../using-npm/config)\n- [package.json](package-json)\n- [npm](../commands/npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/npmrc](https://docs.npmjs.com/cli/v10/configuring-npm/npmrc)"
- name: npmrc-files
  id: cli/v10/using-npm/config#npmrc-files
  summary: See npmrc for more details
  belongs_to: config
  description: |-
    #### [npmrc Files](#npmrc-files)

    The four relevant files are:

    - per-project configuration file (`/path/to/my/project/.npmrc`)
    - per-user configuration file (defaults to `$HOME/.npmrc`; configurable via CLI option `--userconfig` or environment variable `$NPM_CONFIG_USERCONFIG`)
    - global configuration file (defaults to `$PREFIX/etc/npmrc`; configurable via CLI option `--globalconfig` or environment variable `$NPM_CONFIG_GLOBALCONFIG`)
    - npm's built-in configuration file (`/path/to/npm/npmrc`)

    See [npmrc](../configuring-npm/npmrc) for more details.
- name: npx
  id: cli/v10/commands/npx
  summary: This command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar context as running it via npm run
  description: "# npx\n\nRun a command from a local or remote npm package\n\n### [Synopsis](#synopsis)\n\n``` javascript\nnpx -- <pkg>[@<version>] [args...]\nnpx --package=<pkg>[@<version>] -- <cmd> [args...]\nnpx -c '<cmd> [args...]'\nnpx --package=foo -c '<cmd> [args...]'\n```\n\n### [Description](#description)\n\nThis command allows you to run an arbitrary command from an npm package (either one installed locally, or fetched remotely), in a similar context as running it via `npm run`.\n\nWhatever packages are specified by the `--package` option will be provided in the `PATH` of the executed command, along with any locally installed package executables. The `--package` option may be specified multiple times, to execute the supplied command in an environment where all specified packages are available.\n\nIf any requested packages are not present in the local project dependencies, then they are installed to a folder in the npm cache, which is added to the `PATH` environment variable in the executed process. A prompt is printed (which can be suppressed by providing either `--yes` or `--no`).\n\nPackage names provided without a specifier will be matched with whatever version exists in the local project. Package names with a specifier will only be considered a match if they have the exact same name and version as the local dependency.\n\nIf no `-c` or `--call` option is provided, then the positional arguments are used to generate the command string. If no `--package` options are provided, then npm will attempt to determine the executable name from the package specifier provided as the first positional argument according to the following heuristic:\n\n- If the package has a single entry in its `bin` field in `package.json`, or if all entries are aliases of the same command, then that command will be used.\n- If the package has multiple `bin` entries, and one of them matches the unscoped portion of the `name` field, then that command will be used.\n- If this does not result in exactly one option (either because there are no bin entries, or none of them match the `name` of the package), then `npm exec` exits with an error.\n\nTo run a binary *other than* the named binary, specify one or more `--package` options, which will prevent npm from inferring the package from the first command argument.\n\n### [`npx` vs `npm exec`](#npx-vs-npm-exec)\n\nWhen run via the `npx` binary, all flags and options *must* be set prior to any positional arguments. When run via `npm exec`, a double-hyphen `--` flag can be used to suppress npm's parsing of switches and options that should be sent to the executed command.\n\nFor example:\n\n`$ npx foo@latest bar --package=@npmcli/foo`\n\nIn this case, npm will resolve the `foo` package name, and run the following command:\n\n`$ foo bar --package=@npmcli/foo`\n\nSince the `--package` option comes *after* the positional arguments, it is treated as an argument to the executed command.\n\nIn contrast, due to npm's argument parsing logic, running this command is different:\n\n`$ npm exec foo@latest bar --package=@npmcli/foo`\n\nIn this case, npm will parse the `--package` option first, resolving the `@npmcli/foo` package. Then, it will execute the following command in that context:\n\n`$ foo@latest bar`\n\nThe double-hyphen character is recommended to explicitly tell npm to stop parsing command line options and switches. The following command would thus be equivalent to the `npx` command above:\n\n`$ npm exec -- foo@latest bar --package=@npmcli/foo`\n\n### [Examples](#examples)\n\nRun the version of `tap` in the local dependencies, with the provided arguments:\n\n``` javascript\n$ npm exec -- tap --bail test/foo.js\n$ npx tap --bail test/foo.js\n```\n\nRun a command *other than* the command whose name matches the package name by specifying a `--package` option:\n\n``` javascript\n$ npm exec --package=foo -- bar --bar-argument\n# ~ or ~\n$ npx --package=foo bar --bar-argument\n```\n\nRun an arbitrary shell script, in the context of the current project:\n\n``` javascript\n$ npm x -c 'eslint && say \"hooray, lint passed\"'\n$ npx -c 'eslint && say \"hooray, lint passed\"'\n```\n\n### [Compatibility with Older npx Versions](#compatibility-with-older-npx-versions)\n\nThe `npx` binary was rewritten in npm v7.0.0, and the standalone `npx` package deprecated at that time. `npx` uses the `npm exec` command instead of a separate argument parser and install process, with some affordances to maintain backwards compatibility with the arguments it accepted in previous versions.\n\nThis resulted in some shifts in its functionality:\n\n- Any `npm` config value may be provided.\n- To prevent security and user-experience problems from mistyping package names, `npx` prompts before installing anything. Suppress this prompt with the `-y` or `--yes` option.\n- The `--no-install` option is deprecated, and will be converted to `--no`.\n- Shell fallback functionality is removed, as it is not advisable.\n- The `-p` argument is a shorthand for `--parseable` in npm, but shorthand for `--package` in npx. This is maintained, but only for the `npx` executable.\n- The `--ignore-existing` option is removed. Locally installed bins are always present in the executed process `PATH`.\n- The `--npm` option is removed. `npx` will always use the `npm` it ships with.\n- The `--node-arg` and `-n` options are removed.\n- The `--always-spawn` option is redundant, and thus removed.\n- The `--shell` option is replaced with `--script-shell`, but maintained in the `npx` executable for backwards compatibility.\n\n### [See Also](#see-also)\n\n- [npm run-script](npm-run-script)\n- [npm scripts](../using-npm/scripts)\n- [npm test](npm-test)\n- [npm start](npm-start)\n- [npm restart](npm-restart)\n- [npm stop](npm-stop)\n- [npm config](npm-config)\n- [npm exec](npm-exec)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/commands/npx](https://docs.npmjs.com/cli/v10/commands/npx)"
- name: offline
  id: cli/v10/using-npm/config#offline
  summary: 'Force offline mode: no network requests will be done during install'
  belongs_to: config
  description: |-
    #### [`offline`](#offline)

    - Default: false
    - Type: Boolean

    Force offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see `--prefer-offline`.
- name: omit
  id: cli/v10/using-npm/config#omit
  summary: Dependency types to omit from the installation tree on disk
  belongs_to: config
  description: |-
    #### [`omit`](#omit)

    - Default: 'dev' if the `NODE_ENV` environment variable is set to 'production', otherwise empty.
    - Type: "dev", "optional", or "peer" (can be set multiple times)

    Dependency types to omit from the installation tree on disk.

    Note that these dependencies *are* still resolved and added to the `package-lock.json` or `npm-shrinkwrap.json` file. They are just not physically installed on disk.

    If a package type appears in both the `--include` and `--omit` lists, then it will be included.

    If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable will be set to `'production'` for all lifecycle scripts.
- name: omit-lockfile-registry-resolved
  id: cli/v10/using-npm/config#omit-lockfile-registry-resolved
  summary: This option causes npm to create lock files without a resolved key for registry dependencies
  belongs_to: config
  description: |-
    #### [`omit-lockfile-registry-resolved`](#omit-lockfile-registry-resolved)

    - Default: false
    - Type: Boolean

    This option causes npm to create lock files without a `resolved` key for registry dependencies. Subsequent installs will need to resolve tarball endpoints with the configured registry, likely resulting in a longer install time.
- name: only
  id: cli/v10/using-npm/config#only
  summary: When set to prod or production, this is an alias for --omit=dev
  belongs_to: config
  description: |-
    #### [`only`](#only)

    - Default: null
    - Type: null, "prod", or "production"
    - DEPRECATED: Use `--omit=dev` to omit dev dependencies from the install.

    When set to `prod` or `production`, this is an alias for `--omit=dev`.
- name: optional
  id: cli/v10/using-npm/config#optional
  summary: Default value does install optional deps unless otherwise omitted
  belongs_to: config
  description: |-
    #### [`optional`](#optional)

    - Default: null
    - Type: null or Boolean
    - DEPRECATED: Use `--omit=optional` to exclude optional dependencies, or `--include=optional` to include them.

    Default value does install optional deps unless otherwise omitted.

    Alias for --include=optional or --omit=optional
- name: optionaldependencies
  id: cli/v10/configuring-npm/package-json#optionaldependencies
  summary: If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the optionalDependencies object
  belongs_to: package.json
  description: |-
    ### [optionalDependencies](#optionaldependencies)

    If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the `optionalDependencies` object. This is a map of package name to version or url, just like the `dependencies` object. The difference is that build failures do not cause installation to fail. Running `npm install --omit=optional` will prevent these dependencies from being installed.

    It is still your program's responsibility to handle the lack of the dependency. For example, something like this:

    ``` javascript
    try {
      var foo = require("foo");
      var fooVersion = require("foo/package.json").version;
    } catch (er) {
      foo = null;
    }
    if (notGoodFooVersion(fooVersion)) {
      foo = null;
    }


    // .. then later in your program ..


    if (foo) {
      foo.doFooThings();
    }
    ```

    Entries in `optionalDependencies` will override entries of the same name in `dependencies`, so it's usually best to only put in one place.
- name: Organization roles and permissions
  id: organization-roles-and-permissions
  summary: On the public registry, you cannot remove the last owner from an organization
  description: "# Organization roles and permissions\n\nThere are three roles in an organization:\n\n- **Owner:** Users who manage organization members and billing.\n- **Admin:** Users who manage team membership and package access.\n- **Member:** Users who create and publish packages in the organization scope.\n\n**On the public registry, you cannot remove the last owner from an organization.** To delete an organization, [contact npm Support](https://www.npmjs.com/support).\n\n| Action                                                | **Owner** | **Admin** | **Member** |\n|:------------------------------------------------------|:---------:|:---------:|:----------:|\n| Manage organization billing                           |     X     |           |            |\n| Add members to the organization                       |     X     |           |            |\n| Remove members from the organization                  |     X     |           |            |\n| Rename an organization                                |     X     |           |            |\n| Delete an organization                                |     X     |           |            |\n| Change any organization member's role                 |     X     |           |            |\n| Add org owned packages to other orgs                  |     X     |           |            |\n| Create teams                                          |     X     |     X     |            |\n| Delete teams                                          |     X     |     X     |            |\n| Add any member to any team                            |     X     |     X     |            |\n| Remove any member from any team                       |     X     |     X     |            |\n| Manage team package access                            |     X     |     X     |            |\n| Create and publish packages in the organization scope |     X     |     X     |     X      |\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/organization-roles-and-permissions](https://docs.npmjs.com/organization-roles-and-permissions)"
- name: orgs
  id: cli/v10/using-npm/orgs
  summary: The super admin is the only person who can add users to the org because it impacts the monthly bill
  description: "# orgs\n\nWorking with Teams & Orgs\n\n### [Description](#description)\n\nThere are three levels of org users:\n\n1.  Super admin, controls billing & adding people to the org.\n2.  Team admin, manages team membership & package access.\n3.  Developer, works on packages they are given access to.\n\nThe super admin is the only person who can add users to the org because it impacts the monthly bill. The super admin will use the website to manage membership. Every org has a `developers` team that all users are automatically added to.\n\nThe team admin is the person who manages team creation, team membership, and package access for teams. The team admin grants package access to teams, not individuals.\n\nThe developer will be able to access packages based on the teams they are on. Access is either read-write or read-only.\n\nThere are two main commands:\n\n1.  `npm team` see [npm team](../commands/npm-team) for more details\n2.  `npm access` see [npm access](../commands/npm-access) for more details\n\n### [Team Admins create teams](#team-admins-create-teams)\n\n- Check who you’ve added to your org:\n\n``` javascript\nnpm team ls <org>:developers\n```\n\n- Each org is automatically given a `developers` team, so you can see the whole list of team members in your org. This team automatically gets read-write access to all packages, but you can change that with the `access` command.\n\n- Create a new team:\n\n``` javascript\nnpm team create <org:team>\n```\n\n- Add members to that team:\n\n``` javascript\nnpm team add <org:team> <user>\n```\n\n### [Publish a package and adjust package access](#publish-a-package-and-adjust-package-access)\n\n- In package directory, run\n\n``` javascript\nnpm init --scope=<org>\n```\n\nto scope it for your org & publish as usual\n\n- Grant access:\n\n``` javascript\nnpm access grant <read-only|read-write> <org:team> [<package>]\n```\n\n- Revoke access:\n\n``` javascript\nnpm access revoke <org:team> [<package>]\n```\n\n### [Monitor your package access](#monitor-your-package-access)\n\n- See what org packages a team member can access:\n\n``` javascript\nnpm access ls-packages <org> <user>\n```\n\n- See packages available to a specific team:\n\n``` javascript\nnpm access ls-packages <org:team>\n```\n\n- Check which teams are collaborating on a package:\n\n``` javascript\nnpm access ls-collaborators <pkg>\n```\n\n### [See also](#see-also)\n\n- [npm team](../commands/npm-team)\n- [npm access](../commands/npm-access)\n- [npm scope](scope)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/orgs](https://docs.npmjs.com/cli/v10/using-npm/orgs)"
- name: os
  id: cli/v10/using-npm/config#os
  summary: Override OS of native modules to install
  belongs_to: config
  description: |-
    #### [`os`](#os)

    - Default: null
    - Type: null or String

    Override OS of native modules to install. Acceptable values are same as `os` field of package.json, which comes from `process.platform`.
- name: os
  id: cli/v10/configuring-npm/package-json#os
  summary: It is allowed to both block and allow an item, although there isn't any good reason to do this
  belongs_to: package.json
  description: |-
    ### [os](#os)

    You can specify which operating systems your module will run on:

    ``` javascript
    {
      "os": ["darwin", "linux"]
    }
    ```

    You can also block instead of allowing operating systems, just prepend the blocked os with a '!':

    ``` javascript
    {
      "os": ["!win32"]
    }
    ```

    The host operating system is determined by `process.platform`

    It is allowed to both block and allow an item, although there isn't any good reason to do this.
- name: otp
  id: cli/v10/using-npm/config#otp
  summary: This is a one-time password from a two-factor authenticator
  belongs_to: config
  description: |-
    #### [`otp`](#otp)

    - Default: null
    - Type: null or String

    This is a one-time password from a two-factor authenticator. It's needed when publishing or changing package permissions with `npm access`.

    If not set, and a registry response fails with a challenge for a one-time password, npm will prompt on the command line for one.
- name: overrides
  id: cli/v10/configuring-npm/package-json#overrides
  summary: If you need to make specific changes to dependencies of your dependencies, for example replacing the version of a dependency with a known security issue, replacing an existing dependency with a fork, or making sure that the same version of a package is used everywhere, then you may add an override
  belongs_to: package.json
  description: |-
    ### [overrides](#overrides)

    If you need to make specific changes to dependencies of your dependencies, for example replacing the version of a dependency with a known security issue, replacing an existing dependency with a fork, or making sure that the same version of a package is used everywhere, then you may add an override.

    Overrides provide a way to replace a package in your dependency tree with another version, or another package entirely. These changes can be scoped as specific or as vague as desired.

    To make sure the package `foo` is always installed as version `1.0.0` no matter what version your dependencies rely on:

    ``` javascript
    {
      "overrides": {
        "foo": "1.0.0"
      }
    }
    ```

    The above is a short hand notation, the full object form can be used to allow overriding a package itself as well as a child of the package. This will cause `foo` to always be `1.0.0` while also making `bar` at any depth beyond `foo` also `1.0.0`:

    ``` javascript
    {
      "overrides": {
        "foo": {
          ".": "1.0.0",
          "bar": "1.0.0"
        }
      }
    }
    ```

    To only override `foo` to be `1.0.0` when it's a child (or grandchild, or great grandchild, etc) of the package `bar`:

    ``` javascript
    {
      "overrides": {
        "bar": {
          "foo": "1.0.0"
        }
      }
    }
    ```

    Keys can be nested to any arbitrary length. To override `foo` only when it's a child of `bar` and only when `bar` is a child of `baz`:

    ``` javascript
    {
      "overrides": {
        "baz": {
          "bar": {
            "foo": "1.0.0"
          }
        }
      }
    }
    ```

    The key of an override can also include a version, or range of versions. To override `foo` to `1.0.0`, but only when it's a child of `bar@2.0.0`:

    ``` javascript
    {
      "overrides": {
        "bar@2.0.0": {
          "foo": "1.0.0"
        }
      }
    }
    ```

    You may not set an override for a package that you directly depend on unless both the dependency and the override itself share the exact same spec. To make this limitation easier to deal with, overrides may also be defined as a reference to a spec for a direct dependency by prefixing the name of the package you wish the version to match with a `$`.

    ``` javascript
    {
      "dependencies": {
        "foo": "^1.0.0"
      },
      "overrides": {
        // BAD, will throw an EOVERRIDE error
        // "foo": "^2.0.0"
        // GOOD, specs match so override is allowed
        // "foo": "^1.0.0"
        // BEST, the override is defined as a reference to the dependency
        "foo": "$foo",
        // the referenced package does not need to match the overridden one
        "bar": "$foo"
      }
    }
    ```
- name: pack-destination
  id: cli/v10/using-npm/config#pack-destination
  summary: Directory in which npm pack will save tarballs
  belongs_to: config
  description: |-
    #### [`pack-destination`](#pack-destination)

    - Default: "."
    - Type: String

    Directory in which `npm pack` will save tarballs.
- name: package
  id: cli/v10/using-npm/config#package
  summary: null
  belongs_to: config
  description: |-
    #### [`package`](#package)

    - Default:
    - Type: String (can be set multiple times)

    The package or packages to install for [`npm exec`](../commands/npm-exec)
- name: Package name guidelines
  id: package-name-guidelines
  summary: © npm, Inc
  description: "# Package name guidelines\n\nWhen choosing a name for your package, choose a name that\n\n- is unique\n- is descriptive\n- meets [npm policy guidelines](https://www.npmjs.com/policies). For example, do not give your package an offensive name, and do not use someone else's trademarked name or violate the [npm trademark policy](https://docs.npmjs.com/policies/disputes#trademarks).\n\nAdditionally, when choosing a name for an [**unscoped** package](creating-and-publishing-unscoped-public-packages), also choose a name that\n\n- is not already owned by someone else\n- is not spelled in a similar way to another package name\n- will not confuse others about authorship\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/package-name-guidelines](https://docs.npmjs.com/package-name-guidelines)"
- name: package-lock
  id: cli/v10/using-npm/config#package-lock
  summary: If set to false, then ignore package-lock.json files when installing
  belongs_to: config
  description: |-
    #### [`package-lock`](#package-lock)

    - Default: true
    - Type: Boolean

    If set to false, then ignore `package-lock.json` files when installing. This will also prevent *writing* `package-lock.json` if `save` is true.
- name: package-lock-only
  id: cli/v10/using-npm/config#package-lock-only
  summary: If set to true, the current operation will only use the package-lock.json, ignoring node_modules
  belongs_to: config
  description: |-
    #### [`package-lock-only`](#package-lock-only)

    - Default: false
    - Type: Boolean

    If set to true, the current operation will only use the `package-lock.json`, ignoring `node_modules`.

    For `update` this means only the `package-lock.json` will be updated, instead of checking `node_modules` and downloading dependencies.

    For `list` this means the output will be based on the tree described by the `package-lock.json`, rather than the contents of `node_modules`.
- name: package-lock.json
  id: cli/v10/configuring-npm/package-lock-json
  summary: package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json
  description: "# package-lock.json\n\nA manifestation of the manifest\n\n### [Description](#description)\n\n`package-lock.json` is automatically generated for any operations where npm modifies either the `node_modules` tree, or `package.json`. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.\n\nThis file is intended to be committed into source repositories, and serves various purposes:\n\n- Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.\n\n- Provide a facility for users to \"time-travel\" to previous states of `node_modules` without having to commit the directory itself.\n\n- Facilitate greater visibility of tree changes through readable source control diffs.\n\n- Optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages.\n\n- As of npm v7, lockfiles include enough information to gain a complete picture of the package tree, reducing the need to read `package.json` files, and allowing for significant performance improvements.\n\n### [`package-lock.json` vs `npm-shrinkwrap.json`](#package-lockjson-vs-npm-shrinkwrapjson)\n\nBoth of these files have the same format, and perform similar functions in the root of a project.\n\nThe difference is that `package-lock.json` cannot be published, and it will be ignored if found in any place other than the root project.\n\nIn contrast, [npm-shrinkwrap.json](npm-shrinkwrap-json) allows publication, and defines the dependency tree from the point encountered. This is not recommended unless deploying a CLI tool or otherwise using the publication process for producing production packages.\n\nIf both `package-lock.json` and `npm-shrinkwrap.json` are present in the root of a project, `npm-shrinkwrap.json` will take precedence and `package-lock.json` will be ignored.\n\n### [Hidden Lockfiles](#hidden-lockfiles)\n\nIn order to avoid processing the `node_modules` folder repeatedly, npm as of v7 uses a \"hidden\" lockfile present in `node_modules/.package-lock.json`. This contains information about the tree, and is used in lieu of reading the entire `node_modules` hierarchy provided that the following conditions are met:\n\n- All package folders it references exist in the `node_modules` hierarchy.\n- No package folders exist in the `node_modules` hierarchy that are not listed in the lockfile.\n- The modified time of the file is at least as recent as all of the package folders it references.\n\nThat is, the hidden lockfile will only be relevant if it was created as part of the most recent update to the package tree. If another CLI mutates the tree in any way, this will be detected, and the hidden lockfile will be ignored.\n\nNote that it *is* possible to manually change the *contents* of a package in such a way that the modified time of the package folder is unaffected. For example, if you add a file to `node_modules/foo/lib/bar.js`, then the modified time on `node_modules/foo` will not reflect this change. If you are manually editing files in `node_modules`, it is generally best to delete the file at `node_modules/.package-lock.json`.\n\nAs the hidden lockfile is ignored by older npm versions, it does not contain the backwards compatibility affordances present in \"normal\" lockfiles. That is, it is `lockfileVersion: 3`, rather than `lockfileVersion: 2`.\n\n### [Handling Old Lockfiles](#handling-old-lockfiles)\n\nWhen npm detects a lockfile from npm v6 or before during the package installation process, it is automatically updated to fetch missing information from either the `node_modules` tree or (in the case of empty `node_modules` trees or very old lockfile formats) the npm registry.\n\n### [File Format](#file-format)\n\n#### [`name`](#name)\n\nThe name of the package this is a package-lock for. This will match what's in `package.json`.\n\n#### [`version`](#version)\n\nThe version of the package this is a package-lock for. This will match what's in `package.json`.\n\n#### [`lockfileVersion`](#lockfileversion)\n\nAn integer version, starting at `1` with the version number of this document whose semantics were used when generating this `package-lock.json`.\n\nNote that the file format changed significantly in npm v7 to track information that would have otherwise required looking in `node_modules` or the npm registry. Lockfiles generated by npm v7 will contain `lockfileVersion: 2`.\n\n- No version provided: an \"ancient\" shrinkwrap file from a version of npm prior to npm v5.\n- `1`: The lockfile version used by npm v5 and v6.\n- `2`: The lockfile version used by npm v7 and v8. Backwards compatible to v1 lockfiles.\n- `3`: The lockfile version used by npm v9 and above. Backwards compatible to npm v7.\n\nnpm will always attempt to get whatever data it can out of a lockfile, even if it is not a version that it was designed to support.\n\n#### [`packages`](#packages)\n\nThis is an object that maps package locations to an object containing the information about that package.\n\nThe root project is typically listed with a key of `\"\"`, and all other packages are listed with their relative paths from the root project folder.\n\nPackage descriptors have the following fields:\n\n- version: The version found in `package.json`\n\n- resolved: The place where the package was actually resolved from. In the case of packages fetched from the registry, this will be a url to a tarball. In the case of git dependencies, this will be the full git url with commit sha. In the case of link dependencies, this will be the location of the link target. `registry.npmjs.org` is a magic value meaning \"the currently configured registry\".\n\n- integrity: A `sha512` or `sha1` [Standard Subresource Integrity](https://w3c.github.io/webappsec/specs/subresourceintegrity/) string for the artifact that was unpacked in this location.\n\n- link: A flag to indicate that this is a symbolic link. If this is present, no other fields are specified, since the link target will also be included in the lockfile.\n\n- dev, optional, devOptional: If the package is strictly part of the `devDependencies` tree, then `dev` will be true. If it is strictly part of the `optionalDependencies` tree, then `optional` will be set. If it is both a `dev` dependency *and* an `optional` dependency of a non-dev dependency, then `devOptional` will be set. (An `optional` dependency of a `dev` dependency will have both `dev` and `optional` set.)\n\n- inBundle: A flag to indicate that the package is a bundled dependency.\n\n- hasInstallScript: A flag to indicate that the package has a `preinstall`, `install`, or `postinstall` script.\n\n- hasShrinkwrap: A flag to indicate that the package has an `npm-shrinkwrap.json` file.\n\n- bin, license, engines, dependencies, optionalDependencies: fields from `package.json`\n\n#### [dependencies](#dependencies)\n\nLegacy data for supporting versions of npm that use `lockfileVersion: 1`. This is a mapping of package names to dependency objects. Because the object structure is strictly hierarchical, symbolic link dependencies are somewhat challenging to represent in some cases.\n\nnpm v7 ignores this section entirely if a `packages` section is present, but does keep it up to date in order to support switching between npm v6 and npm v7.\n\nDependency objects have the following fields:\n\n- version: a specifier that varies depending on the nature of the package, and is usable in fetching a new copy of it.\n\n  - bundled dependencies: Regardless of source, this is a version number that is purely for informational purposes.\n  - registry sources: This is a version number. (eg, `1.2.3`)\n  - git sources: This is a git specifier with resolved committish. (eg, `git+https://example.com/foo/bar#115311855adb0789a0466714ed48a1499ffea97e`)\n  - http tarball sources: This is the URL of the tarball. (eg, `https://example.com/example-1.3.0.tgz`)\n  - local tarball sources: This is the file URL of the tarball. (eg `file:///opt/storage/example-1.3.0.tgz`)\n  - local link sources: This is the file URL of the link. (eg `file:libs/our-module`)\n\n- integrity: A `sha512` or `sha1` [Standard Subresource Integrity](https://w3c.github.io/webappsec/specs/subresourceintegrity/) string for the artifact that was unpacked in this location. For git dependencies, this is the commit sha.\n\n- resolved: For registry sources this is path of the tarball relative to the registry URL. If the tarball URL isn't on the same server as the registry URL then this is a complete URL. `registry.npmjs.org` is a magic value meaning \"the currently configured registry\".\n\n- bundled: If true, this is the bundled dependency and will be installed by the parent module. When installing, this module will be extracted from the parent module during the extract phase, not installed as a separate dependency.\n\n- dev: If true then this dependency is either a development dependency ONLY of the top level module or a transitive dependency of one. This is false for dependencies that are both a development dependency of the top level and a transitive dependency of a non-development dependency of the top level.\n\n- optional: If true then this dependency is either an optional dependency ONLY of the top level module or a transitive dependency of one. This is false for dependencies that are both an optional dependency of the top level and a transitive dependency of a non-optional dependency of the top level.\n\n- requires: This is a mapping of module name to version. This is a list of everything this module requires, regardless of where it will be installed. The version should match via normal matching rules a dependency either in our `dependencies` or in a level higher than us.\n\n- dependencies: The dependencies of this dependency, exactly as at the top level.\n\n### [See also](#see-also)\n\n- [npm shrinkwrap](../commands/npm-shrinkwrap)\n- [npm-shrinkwrap.json](npm-shrinkwrap-json)\n- [package.json](package-json)\n- [npm install](../commands/npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/package-lock-json](https://docs.npmjs.com/cli/v10/configuring-npm/package-lock-json)"
- name: package-spec
  id: cli/v10/using-npm/package-spec
  summary: Commands like npm install and the dependency sections in the package.json use a package name specifier
  description: "# package-spec\n\nPackage name specifier\n\n### [Description](#description)\n\nCommands like `npm install` and the dependency sections in the `package.json` use a package name specifier. This can be many different things that all refer to a \"package\". Examples include a package name, git url, tarball, or local directory. These will generally be referred to as `<package-spec>` in the help output for the npm commands that use this package name specifier.\n\n### [Package name](#package-name)\n\n- `[<@scope>/]<pkg>`\n- `[<@scope>/]<pkg>@<tag>`\n- `[<@scope>/]<pkg>@<version>`\n- `[<@scope>/]<pkg>@<version range>`\n\nRefers to a package by name, with or without a scope, and optionally tag, version, or version range. This is typically used in combination with the [registry](config#registry) config to refer to a package in a registry.\n\nExamples:\n\n- `npm`\n- `@npmcli/arborist`\n- `@npmcli/arborist@latest`\n- `npm@6.13.1`\n- `npm@^4.0.0`\n\n### [Aliases](#aliases)\n\n- `<alias>@npm:<name>`\n\nPrimarily used by commands like `npm install` and in the dependency sections in the `package.json`, this refers to a package by an alias. The `<alias>` is the name of the package as it is reified in the `node_modules` folder, and the `<name>` refers to a package name as found in the configured registry.\n\nSee `Package name` above for more info on referring to a package by name, and [registry](config#registry) for configuring which registry is used when referring to a package by name.\n\nExamples:\n\n- `semver:@npm:@npmcli/semver-with-patch`\n- `semver:@npm:semver@7.2.2`\n- `semver:@npm:semver@legacy`\n\n### [Folders](#folders)\n\n- `<folder>`\n\nThis refers to a package on the local filesystem. Specifically this is a folder with a `package.json` file in it. This *should* always be prefixed with a `/` or `./` (or your OS equivalent) to reduce confusion. npm currently will parse a string with more than one `/` in it as a folder, but this is legacy behavior that may be removed in a future version.\n\nExamples:\n\n- `./my-package`\n- `/opt/npm/my-package`\n\n### [Tarballs](#tarballs)\n\n- `<tarball file>`\n- `<tarball url>`\n\nExamples:\n\n- `./my-package.tgz`\n- `https://registry.npmjs.org/semver/-/semver-1.0.0.tgz`\n\nRefers to a package in a tarball format, either on the local filesystem or remotely via url. This is the format that packages exist in when uploaded to a registry.\n\n### [git urls](#git-urls)\n\n- `<git:// url>`\n- `<github username>/<github project>`\n\nRefers to a package in a git repo. This can be a full git url, git shorthand, or a username/package on GitHub. You can specify a git tag, branch, or other git ref by appending `#ref`.\n\nExamples:\n\n- `https://github.com/npm/cli.git`\n- `git@github.com:npm/cli.git`\n- `git+ssh://git@github.com/npm/cli#v6.0.0`\n- `github:npm/cli#HEAD`\n- `npm/cli#c12ea07`\n\n### [See also](#see-also)\n\n- [npm-package-arg](https://npm.im/npm-package-arg)\n- [scope](scope)\n- [config](config)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/package-spec](https://docs.npmjs.com/cli/v10/using-npm/package-spec)"
- name: package.json
  id: cli/v10/configuring-npm/package-json
  summary: This document is all you need to know about what's required in your package.json file
  description: "# package.json\n\nSpecifics of npm's package.json handling\n\n### [Description](#description)\n\nThis document is all you need to know about what's required in your package.json file. It must be actual JSON, not just a JavaScript object literal.\n\nA lot of the behavior described in this document is affected by the config settings described in [`config`](../using-npm/config).\n\n### [name](#name)\n\nIf you plan to publish your package, the *most* important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.\n\nThe name is what your thing is called.\n\nSome rules:\n\n- The name must be less than or equal to 214 characters. This includes the scope for scoped packages.\n- The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.\n- New packages must not have uppercase letters in the name.\n- The name ends up being part of a URL, an argument on the command line, and a folder name. Therefore, the name can't contain any non-URL-safe characters.\n\nSome tips:\n\n- Don't use the same name as a core Node module.\n- Don't put \"js\" or \"node\" in the name. It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the \"engines\" field. (See below.)\n- The name will probably be passed as an argument to require(), so it should be something short, but also reasonably descriptive.\n- You may want to check the npm registry to see if there's something by that name already, before you get too attached to it. [https://www.npmjs.com/](https://www.npmjs.com/)\n\nA name can be optionally prefixed by a scope, e.g. `@myorg/mypackage`. See [`scope`](../using-npm/scope) for more detail.\n\n### [version](#version)\n\nIf you plan to publish your package, the *most* important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.\n\nVersion must be parseable by [node-semver](https://github.com/npm/node-semver), which is bundled with npm as a dependency. (`npm install semver` to use it yourself.)\n\n### [description](#description-1)\n\nPut a description in it. It's a string. This helps people discover your package, as it's listed in `npm search`.\n\n### [keywords](#keywords)\n\nPut keywords in it. It's an array of strings. This helps people discover your package as it's listed in `npm search`.\n\n### [homepage](#homepage)\n\nThe url to the project homepage.\n\nExample:\n\n``` javascript\n\"homepage\": \"https://github.com/owner/project#readme\"\n```\n\n### [bugs](#bugs)\n\nThe url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.\n\nIt should look like this:\n\n``` javascript\n{\n  \"bugs\": {\n    \"url\": \"https://github.com/owner/project/issues\",\n    \"email\": \"project@hostname.com\"\n  }\n}\n```\n\nYou can specify either one or both values. If you want to provide only a url, you can specify the value for \"bugs\" as a simple string instead of an object.\n\nIf a url is provided, it will be used by the `npm bugs` command.\n\n### [license](#license)\n\nYou should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.\n\nIf you're using a common license such as BSD-2-Clause or MIT, add a current SPDX license identifier for the license you're using, like this:\n\n``` javascript\n{\n  \"license\": \"BSD-3-Clause\"\n}\n```\n\nYou can check [the full list of SPDX license IDs](https://spdx.org/licenses/). Ideally you should pick one that is [OSI](https://opensource.org/licenses/) approved.\n\nIf your package is licensed under multiple common licenses, use an [SPDX license expression syntax version 2.0 string](https://spdx.dev/specifications/), like this:\n\n``` javascript\n{\n  \"license\": \"(ISC OR GPL-3.0)\"\n}\n```\n\nIf you are using a license that hasn't been assigned an SPDX identifier, or if you are using a custom license, use a string value like this one:\n\n``` javascript\n{\n  \"license\": \"SEE LICENSE IN <filename>\"\n}\n```\n\nThen include a file named `<filename>` at the top level of the package.\n\nSome old packages used license objects or a \"licenses\" property containing an array of license objects:\n\n``` javascript\n// Not valid metadata\n{\n  \"license\" : {\n    \"type\" : \"ISC\",\n    \"url\" : \"https://opensource.org/licenses/ISC\"\n  }\n}\n\n\n// Not valid metadata\n{\n  \"licenses\" : [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://www.opensource.org/licenses/mit-license.php\"\n    },\n    {\n      \"type\": \"Apache-2.0\",\n      \"url\": \"https://opensource.org/licenses/apache2.0.php\"\n    }\n  ]\n}\n```\n\nThose styles are now deprecated. Instead, use SPDX expressions, like this:\n\n``` javascript\n{\n  \"license\": \"ISC\"\n}\n```\n\n``` javascript\n{\n  \"license\": \"(MIT OR Apache-2.0)\"\n}\n```\n\nFinally, if you do not wish to grant others the right to use a private or unpublished package under any terms:\n\n``` javascript\n{\n  \"license\": \"UNLICENSED\"\n}\n```\n\nConsider also setting `\"private\": true` to prevent accidental publication.\n\n### [people fields: author, contributors](#people-fields-author-contributors)\n\nThe \"author\" is one person. \"contributors\" is an array of people. A \"person\" is an object with a \"name\" field and optionally \"url\" and \"email\", like this:\n\n``` javascript\n{\n  \"name\": \"Barney Rubble\",\n  \"email\": \"b@rubble.com\",\n  \"url\": \"http://barnyrubble.tumblr.com/\"\n}\n```\n\nOr you can shorten that all into a single string, and npm will parse it for you:\n\n``` javascript\n{\n  \"author\": \"Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)\"\n}\n```\n\nBoth email and url are optional either way.\n\nnpm also sets a top-level \"maintainers\" field with your npm user info.\n\n### [funding](#funding)\n\nYou can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, or a string URL, or an array of these:\n\n``` javascript\n{\n  \"funding\": {\n    \"type\": \"individual\",\n    \"url\": \"http://example.com/donate\"\n  },\n\n\n  \"funding\": {\n    \"type\": \"patreon\",\n    \"url\": \"https://www.patreon.com/my-account\"\n  },\n\n\n  \"funding\": \"http://example.com/donate\",\n\n\n  \"funding\": [\n    {\n      \"type\": \"individual\",\n      \"url\": \"http://example.com/donate\"\n    },\n    \"http://example.com/donateAlso\",\n    {\n      \"type\": \"patreon\",\n      \"url\": \"https://www.patreon.com/my-account\"\n    }\n  ]\n}\n```\n\nUsers can use the `npm fund` subcommand to list the `funding` URLs of all dependencies of their project, direct and indirect. A shortcut to visit each funding url is also available when providing the project name such as: `npm fund <projectname>` (when there are multiple URLs, the first one will be visited)\n\n### [files](#files)\n\nThe optional `files` field is an array of file patterns that describes the entries to be included when your package is installed as a dependency. File patterns follow a similar syntax to `.gitignore`, but reversed: including a file, directory, or glob pattern (`*`, `**/*`, and such) will make it so that file is included in the tarball when it's packed. Omitting the field will make it default to `[\"*\"]`, which means it will include all files.\n\nSome special files and directories are also included or excluded regardless of whether they exist in the `files` array (see below).\n\nYou can also provide a `.npmignore` file in the root of your package or in subdirectories, which will keep files from being included. At the root of your package it will not override the \"files\" field, but in subdirectories it will. The `.npmignore` file works just like a `.gitignore`. If there is a `.gitignore` file, and `.npmignore` is missing, `.gitignore`'s contents will be used instead.\n\nCertain files are always included, regardless of settings:\n\n- `package.json`\n- `README`\n- `LICENSE` / `LICENCE`\n- The file in the \"main\" field\n- The file(s) in the \"bin\" field\n\n`README` & `LICENSE` can have any case and extension.\n\nSome files are always ignored by default:\n\n- `*.orig`\n- `.*.swp`\n- `.DS_Store`\n- `._*`\n- `.git`\n- `.npmrc`\n- `.hg`\n- `.lock-wscript`\n- `.npmrc`\n- `.svn`\n- `.wafpickle-N`\n- `CVS`\n- `config.gypi`\n- `node_modules`\n- `npm-debug.log`\n- `package-lock.json` (use [`npm-shrinkwrap.json`](npm-shrinkwrap-json) if you wish it to be published)\n- `pnpm-lock.yaml`\n- `yarn.lock`\n\nMost of these ignored files can be included specifically if included in the `files` globs. Exceptions to this are:\n\n- `.git`\n- `.npmrc`\n- `node_modules`\n- `package-lock.json`\n- `pnpm-lock.yaml`\n- `yarn.lock`\n\nThese can not be included.\n\n### [main](#main)\n\nThe main field is a module ID that is the primary entry point to your program. That is, if your package is named `foo`, and a user installs it, and then does `require(\"foo\")`, then your main module's exports object will be returned.\n\nThis should be a module relative to the root of your package folder.\n\nFor most modules, it makes the most sense to have a main script and often not much else.\n\nIf `main` is not set, it defaults to `index.js` in the package's root folder.\n\n### [browser](#browser)\n\nIf your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it might rely on primitives that aren't available in Node.js modules. (e.g. `window`)\n\n### [bin](#bin)\n\nA lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the \"npm\" executable.)\n\nTo use this, supply a `bin` field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be either linked inside the global bins directory or a cmd (Windows Command File) will be created which executes the specified file in the `bin` field, so it is available to run by `name` or `name.cmd` (on Windows PowerShell). When this package is installed as a dependency in another package, the file will be linked where it will be available to that package either directly by `npm exec` or by name in other scripts when invoking them via `npm run-script`.\n\nFor example, myapp could have this:\n\n``` javascript\n{\n  \"bin\": {\n    \"myapp\": \"./cli.js\"\n  }\n}\n```\n\nSo, when you install myapp, in case of unix-like OS it'll create a symlink from the `cli.js` script to `/usr/local/bin/myapp` and in case of windows it will create a cmd file usually at `C:\\Users\\{Username}\\AppData\\Roaming\\npm\\myapp.cmd` which runs the `cli.js` script.\n\nIf you have a single executable, and its name should be the name of the package, then you can just supply it as a string. For example:\n\n``` javascript\n{\n  \"name\": \"my-program\",\n  \"version\": \"1.2.5\",\n  \"bin\": \"./path/to/program\"\n}\n```\n\nwould be the same as this:\n\n``` javascript\n{\n  \"name\": \"my-program\",\n  \"version\": \"1.2.5\",\n  \"bin\": {\n    \"my-program\": \"./path/to/program\"\n  }\n}\n```\n\nPlease make sure that your file(s) referenced in `bin` starts with `#!/usr/bin/env node`, otherwise the scripts are started without the node executable!\n\nNote that you can also set the executable files using [directories.bin](#directoriesbin).\n\nSee [folders](folders#executables) for more info on executables.\n\n### [man](#man)\n\nSpecify either a single file or an array of filenames to put in place for the `man` program to find.\n\nIf only a single file is provided, then it's installed such that it is the result from `man <pkgname>`, regardless of its actual filename. For example:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"1.2.3\",\n  \"description\": \"A packaged foo fooer for fooing foos\",\n  \"main\": \"foo.js\",\n  \"man\": \"./man/doc.1\"\n}\n```\n\nwould link the `./man/doc.1` file in such that it is the target for `man foo`\n\nIf the filename doesn't start with the package name, then it's prefixed. So, this:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"1.2.3\",\n  \"description\": \"A packaged foo fooer for fooing foos\",\n  \"main\": \"foo.js\",\n  \"man\": [\"./man/foo.1\", \"./man/bar.1\"]\n}\n```\n\nwill create files to do `man foo` and `man foo-bar`.\n\nMan files must end with a number, and optionally a `.gz` suffix if they are compressed. The number dictates which man section the file is installed into.\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"1.2.3\",\n  \"description\": \"A packaged foo fooer for fooing foos\",\n  \"main\": \"foo.js\",\n  \"man\": [\"./man/foo.1\", \"./man/foo.2\"]\n}\n```\n\nwill create entries for `man foo` and `man 2 foo`\n\n### [directories](#directories)\n\nThe CommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0) spec details a few ways that you can indicate the structure of your package using a `directories` object. If you look at [npm's package.json](https://registry.npmjs.org/npm/latest), you'll see that it has directories for doc, lib, and man.\n\nIn the future, this information may be used in other creative ways.\n\n#### [directories.bin](#directoriesbin)\n\nIf you specify a `bin` directory in `directories.bin`, all the files in that folder will be added.\n\nBecause of the way the `bin` directive works, specifying both a `bin` path and setting `directories.bin` is an error. If you want to specify individual files, use `bin`, and for all the files in an existing `bin` directory, use `directories.bin`.\n\n#### [directories.man](#directoriesman)\n\nA folder that is full of man pages. Sugar to generate a \"man\" array by walking the folder.\n\n### [repository](#repository)\n\nSpecify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the `npm docs` command will be able to find you.\n\nDo it like this:\n\n``` javascript\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/npm/cli.git\"\n  }\n}\n```\n\nThe URL should be a publicly available (perhaps read-only) url that can be handed directly to a VCS program without any modification. It should not be a url to an html project page that you put in your browser. It's for computers.\n\nFor GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same shortcut syntax you use for `npm install`:\n\n``` javascript\n{\n  \"repository\": \"npm/npm\",\n\n\n  \"repository\": \"github:user/repo\",\n\n\n  \"repository\": \"gist:11081aaa281\",\n\n\n  \"repository\": \"bitbucket:user/repo\",\n\n\n  \"repository\": \"gitlab:user/repo\"\n}\n```\n\nIf the `package.json` for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives:\n\n``` javascript\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/facebook/react.git\",\n    \"directory\": \"packages/react-dom\"\n  }\n}\n```\n\n### [scripts](#scripts)\n\nThe \"scripts\" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.\n\nSee [`scripts`](../using-npm/scripts) to find out more about writing package scripts.\n\n### [config](#config)\n\nA \"config\" object can be used to set configuration parameters used in package scripts that persist across upgrades. For instance, if a package had the following:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"config\": {\n    \"port\": \"8080\"\n  }\n}\n```\n\nIt could also have a \"start\" command that referenced the `npm_package_config_port` environment variable.\n\n### [dependencies](#dependencies)\n\nDependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.\n\n**Please do not put test harnesses or transpilers or other \"development\" time tools in your `dependencies` object.** See `devDependencies`, below.\n\nSee [semver](https://github.com/npm/node-semver#versions) for more details about specifying version ranges.\n\n- `version` Must match `version` exactly\n- `>version` Must be greater than `version`\n- `>=version` etc\n- `<version`\n- `<=version`\n- `~version` \"Approximately equivalent to version\" See [semver](https://github.com/npm/node-semver#versions)\n- `^version` \"Compatible with version\" See [semver](https://github.com/npm/node-semver#versions)\n- `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0\n- `http://...` See 'URLs as Dependencies' below\n- `*` Matches any version\n- `\"\"` (just an empty string) Same as `*`\n- `version1 - version2` Same as `>=version1 <=version2`.\n- `range1 || range2` Passes if either range1 or range2 are satisfied.\n- `git...` See 'Git URLs as Dependencies' below\n- `user/repo` See 'GitHub URLs' below\n- `tag` A specific version tagged and published as `tag` See [`npm dist-tag`](../commands/npm-dist-tag)\n- `path/path/path` See [Local Paths](#local-paths) below\n\nFor example, these are all valid:\n\n``` javascript\n{\n  \"dependencies\": {\n    \"foo\": \"1.0.0 - 2.9999.9999\",\n    \"bar\": \">=1.0.2 <2.1.2\",\n    \"baz\": \">1.0.2 <=2.3.4\",\n    \"boo\": \"2.0.1\",\n    \"qux\": \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\",\n    \"asd\": \"http://asdf.com/asdf.tar.gz\",\n    \"til\": \"~1.2\",\n    \"elf\": \"~1.2.3\",\n    \"two\": \"2.x\",\n    \"thr\": \"3.3.x\",\n    \"lat\": \"latest\",\n    \"dyl\": \"file:../dyl\"\n  }\n}\n```\n\n#### [URLs as Dependencies](#urls-as-dependencies)\n\nYou may specify a tarball URL in place of a version range.\n\nThis tarball will be downloaded and installed locally to your package at install time.\n\n#### [Git URLs as Dependencies](#git-urls-as-dependencies)\n\nGit urls are of the form:\n\n``` javascript\n<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n```\n\n`<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or `git+file`.\n\nIf `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then the default branch is used.\n\nExamples:\n\n``` javascript\ngit+ssh://git@github.com:npm/cli.git#v1.0.27\ngit+ssh://git@github.com:npm/cli#semver:^5.0\ngit+https://isaacs@github.com/npm/cli.git\ngit://github.com/npm/cli.git#v1.0.27\n```\n\nWhen installing from a `git` repository, the presence of certain fields in the `package.json` will cause npm to believe it needs to perform a build. To do so your repository will be cloned into a temporary directory, all of its deps installed, relevant scripts run, and the resulting directory packed and installed.\n\nThis flow will occur if your git dependency uses `workspaces`, or if any of the following scripts are present:\n\n- `build`\n- `prepare`\n- `prepack`\n- `preinstall`\n- `install`\n- `postinstall`\n\nIf your git repository includes pre-built artifacts, you will likely want to make sure that none of the above scripts are defined, or your dependency will be rebuilt for every installation.\n\n#### [GitHub URLs](#github-urls)\n\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\": \"user/foo-project\". Just as with git URLs, a `commit-ish` suffix can be included. For example:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"express\": \"expressjs/express\",\n    \"mocha\": \"mochajs/mocha#4727d357ea\",\n    \"module\": \"user/repo#feature/branch\"\n  }\n}\n```\n\n#### [Local Paths](#local-paths)\n\nAs of version 2.0.0 you can provide a path to a local directory that contains a package. Local paths can be saved using `npm install -S` or `npm install --save`, using any of these forms:\n\n``` javascript\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n```\n\nin which case they will be normalized to a relative path and added to your `package.json`. For example:\n\n``` javascript\n{\n  \"name\": \"baz\",\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\n```\n\nThis feature is helpful for local offline development and creating tests that require npm installing where you don't want to hit an external server, but should not be used when publishing packages to the public registry.\n\n*note*: Packages linked by local path will not have their own dependencies installed when `npm install` is ran in this case. You must run `npm install` from inside the local path itself.\n\n### [devDependencies](#devdependencies)\n\nIf someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.\n\nIn this case, it's best to map these additional items in a `devDependencies` object.\n\nThese things will be installed when doing `npm link` or `npm install` from the root of a package, and can be managed like any other npm configuration param. See [`config`](../using-npm/config) for more on the topic.\n\nFor build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the `prepare` script to do this, and make the required package a devDependency.\n\nFor example:\n\n``` javascript\n{\n  \"name\": \"ethopia-waza\",\n  \"description\": \"a delightfully fruity coffee varietal\",\n  \"version\": \"1.2.3\",\n  \"devDependencies\": {\n    \"coffee-script\": \"~1.6.3\"\n  },\n  \"scripts\": {\n    \"prepare\": \"coffee -o lib/ -c src/waza.coffee\"\n  },\n  \"main\": \"lib/waza.js\"\n}\n```\n\nThe `prepare` script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally running `npm install`), it'll run this script as well, so that you can test it easily.\n\n### [peerDependencies](#peerdependencies)\n\nIn some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a `require` of this host. This is usually referred to as a *plugin*. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.\n\nFor example:\n\n``` javascript\n{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\"\n  }\n}\n```\n\nThis ensures your package `tea-latte` can be installed *along* with the second major version of the host package `tea` only. `npm install tea-latte` could possibly yield the following dependency graph:\n\n``` javascript\n├── tea-latte@1.3.5\n└── tea@2.2.0\n```\n\nIn npm versions 3 through 6, `peerDependencies` were not automatically installed, and would raise a warning if an invalid version of the peer dependency was found in the tree. As of npm v7, peerDependencies *are* installed by default.\n\nTrying to install another plugin with a conflicting requirement may cause an error if the tree cannot be resolved correctly. For this reason, make sure your plugin requirement is as broad as possible, and not to lock it down to specific patch versions.\n\nAssuming the host complies with [semver](https://semver.org/), only changes in the host package's major version will break your plugin. Thus, if you've worked with every 1.x version of the host package, use `\"^1.0\"` or `\"1.x\"` to express this. If you depend on features introduced in 1.5.2, use `\"^1.5.2\"`.\n\n### [peerDependenciesMeta](#peerdependenciesmeta)\n\nWhen a user installs your package, npm will emit warnings if packages specified in `peerDependencies` are not already installed. The `peerDependenciesMeta` field serves to provide npm more information on how your peer dependencies are to be used. Specifically, it allows peer dependencies to be marked as optional.\n\nFor example:\n\n``` javascript\n{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\",\n    \"soy-milk\": \"1.2\"\n  },\n  \"peerDependenciesMeta\": {\n    \"soy-milk\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\nMarking a peer dependency as optional ensures npm will not emit a warning if the `soy-milk` package is not installed on the host. This allows you to integrate and interact with a variety of host packages without requiring all of them to be installed.\n\n### [bundleDependencies](#bundledependencies)\n\nThis defines an array of package names that will be bundled when publishing the package.\n\nIn cases where you need to preserve npm packages locally or have them available through a single file download, you can bundle the packages in a tarball file by specifying the package names in the `bundleDependencies` array and executing `npm pack`.\n\nFor example:\n\nIf we define a package.json like this:\n\n``` javascript\n{\n  \"name\": \"awesome-web-framework\",\n  \"version\": \"1.0.0\",\n  \"bundleDependencies\": [\"renderized\", \"super-streams\"]\n}\n```\n\nwe can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`. This file contains the dependencies `renderized` and `super-streams` which can be installed in a new project by executing `npm install awesome-web-framework-1.0.0.tgz`. Note that the package names do not include any versions, as that information is specified in `dependencies`.\n\nIf this is spelled `\"bundledDependencies\"`, then that is also honored.\n\nAlternatively, `\"bundleDependencies\"` can be defined as a boolean value. A value of `true` will bundle all dependencies, a value of `false` will bundle none.\n\n### [optionalDependencies](#optionaldependencies)\n\nIf a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the `optionalDependencies` object. This is a map of package name to version or url, just like the `dependencies` object. The difference is that build failures do not cause installation to fail. Running `npm install --omit=optional` will prevent these dependencies from being installed.\n\nIt is still your program's responsibility to handle the lack of the dependency. For example, something like this:\n\n``` javascript\ntry {\n  var foo = require(\"foo\");\n  var fooVersion = require(\"foo/package.json\").version;\n} catch (er) {\n  foo = null;\n}\nif (notGoodFooVersion(fooVersion)) {\n  foo = null;\n}\n\n\n// .. then later in your program ..\n\n\nif (foo) {\n  foo.doFooThings();\n}\n```\n\nEntries in `optionalDependencies` will override entries of the same name in `dependencies`, so it's usually best to only put in one place.\n\n### [overrides](#overrides)\n\nIf you need to make specific changes to dependencies of your dependencies, for example replacing the version of a dependency with a known security issue, replacing an existing dependency with a fork, or making sure that the same version of a package is used everywhere, then you may add an override.\n\nOverrides provide a way to replace a package in your dependency tree with another version, or another package entirely. These changes can be scoped as specific or as vague as desired.\n\nTo make sure the package `foo` is always installed as version `1.0.0` no matter what version your dependencies rely on:\n\n``` javascript\n{\n  \"overrides\": {\n    \"foo\": \"1.0.0\"\n  }\n}\n```\n\nThe above is a short hand notation, the full object form can be used to allow overriding a package itself as well as a child of the package. This will cause `foo` to always be `1.0.0` while also making `bar` at any depth beyond `foo` also `1.0.0`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"foo\": {\n      \".\": \"1.0.0\",\n      \"bar\": \"1.0.0\"\n    }\n  }\n}\n```\n\nTo only override `foo` to be `1.0.0` when it's a child (or grandchild, or great grandchild, etc) of the package `bar`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"bar\": {\n      \"foo\": \"1.0.0\"\n    }\n  }\n}\n```\n\nKeys can be nested to any arbitrary length. To override `foo` only when it's a child of `bar` and only when `bar` is a child of `baz`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"baz\": {\n      \"bar\": {\n        \"foo\": \"1.0.0\"\n      }\n    }\n  }\n}\n```\n\nThe key of an override can also include a version, or range of versions. To override `foo` to `1.0.0`, but only when it's a child of `bar@2.0.0`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"bar@2.0.0\": {\n      \"foo\": \"1.0.0\"\n    }\n  }\n}\n```\n\nYou may not set an override for a package that you directly depend on unless both the dependency and the override itself share the exact same spec. To make this limitation easier to deal with, overrides may also be defined as a reference to a spec for a direct dependency by prefixing the name of the package you wish the version to match with a `$`.\n\n``` javascript\n{\n  \"dependencies\": {\n    \"foo\": \"^1.0.0\"\n  },\n  \"overrides\": {\n    // BAD, will throw an EOVERRIDE error\n    // \"foo\": \"^2.0.0\"\n    // GOOD, specs match so override is allowed\n    // \"foo\": \"^1.0.0\"\n    // BEST, the override is defined as a reference to the dependency\n    \"foo\": \"$foo\",\n    // the referenced package does not need to match the overridden one\n    \"bar\": \"$foo\"\n  }\n}\n```\n\n### [engines](#engines)\n\nYou can specify the version of node that your stuff works on:\n\n``` javascript\n{\n  \"engines\": {\n    \"node\": \">=0.10.3 <15\"\n  }\n}\n```\n\nAnd, like with dependencies, if you don't specify the version (or if you specify \"\\*\" as the version), then any version of node will do.\n\nYou can also use the \"engines\" field to specify which versions of npm are capable of properly installing your program. For example:\n\n``` javascript\n{\n  \"engines\": {\n    \"npm\": \"~1.0.20\"\n  }\n}\n```\n\nUnless the user has set the [`engine-strict` config](../using-npm/config#engine-strict) flag, this field is advisory only and will only produce warnings when your package is installed as a dependency.\n\n### [os](#os)\n\nYou can specify which operating systems your module will run on:\n\n``` javascript\n{\n  \"os\": [\"darwin\", \"linux\"]\n}\n```\n\nYou can also block instead of allowing operating systems, just prepend the blocked os with a '!':\n\n``` javascript\n{\n  \"os\": [\"!win32\"]\n}\n```\n\nThe host operating system is determined by `process.platform`\n\nIt is allowed to both block and allow an item, although there isn't any good reason to do this.\n\n### [cpu](#cpu)\n\nIf your code only runs on certain cpu architectures, you can specify which ones.\n\n``` javascript\n{\n  \"cpu\": [\"x64\", \"ia32\"]\n}\n```\n\nLike the `os` option, you can also block architectures:\n\n``` javascript\n{\n  \"cpu\": [\"!arm\", \"!mips\"]\n}\n```\n\nThe host architecture is determined by `process.arch`\n\n### [private](#private)\n\nIf you set `\"private\": true` in your package.json, then npm will refuse to publish it.\n\nThis is a way to prevent accidental publication of private repositories. If you would like to ensure that a given package is only ever published to a specific registry (for example, an internal registry), then use the `publishConfig` dictionary described below to override the `registry` config param at publish-time.\n\n### [publishConfig](#publishconfig)\n\nThis is a set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with \"latest\", published to the global public registry or that a scoped module is private by default.\n\nSee [`config`](../using-npm/config) to see the list of config options that can be overridden.\n\n### [workspaces](#workspaces)\n\nThe optional `workspaces` field is an array of file patterns that describes locations within the local file system that the install client should look up to find each [workspace](../using-npm/workspaces) that needs to be symlinked to the top level `node_modules` folder.\n\nIt can describe either the direct paths of the folders to be used as workspaces or it can define globs that will resolve to these same folders.\n\nIn the following example, all folders located inside the folder `./packages` will be treated as workspaces as long as they have valid `package.json` files inside them:\n\n``` javascript\n{\n  \"name\": \"workspace-example\",\n  \"workspaces\": [\"./packages/*\"]\n}\n```\n\nSee [`workspaces`](../using-npm/workspaces) for more examples.\n\n### [DEFAULT VALUES](#default-values)\n\nnpm will default some values based on package contents.\n\n- `\"scripts\": {\"start\": \"node server.js\"}`\n\n  If there is a `server.js` file in the root of your package, then npm will default the `start` command to `node server.js`.\n\n- `\"scripts\":{\"install\": \"node-gyp rebuild\"}`\n\n  If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will default the `install` command to compile using node-gyp.\n\n- `\"contributors\": [...]`\n\n  If there is an `AUTHORS` file in the root of your package, npm will treat each line as a `Name <email> (url)` format, where email and url are optional. Lines which start with a `#` or are blank, will be ignored.\n\n### [SEE ALSO](#see-also)\n\n- [semver](https://github.com/npm/node-semver#versions)\n- [workspaces](../using-npm/workspaces)\n- [npm init](../commands/npm-init)\n- [npm version](../commands/npm-version)\n- [npm config](../commands/npm-config)\n- [npm help](../commands/npm-help)\n- [npm install](../commands/npm-install)\n- [npm publish](../commands/npm-publish)\n- [npm uninstall](../commands/npm-uninstall)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/package-json](https://docs.npmjs.com/cli/v10/configuring-npm/package-json)"
- name: parseable
  id: cli/v10/using-npm/config#parseable
  summary: Output parseable results from commands that write to standard output
  belongs_to: config
  description: |-
    #### [`parseable`](#parseable)

    - Default: false
    - Type: Boolean

    Output parseable results from commands that write to standard output. For `npm search`, this will be tab-separated table format.
- name: Paying for your npm user account
  id: getting-started/paying-for-your-npm-user-account
  summary: © npm, Inc
  description: "# Paying for your npm user account\n\n- [Upgrading to a paid user account plan](../upgrading-to-a-paid-user-account-plan)\n- [Viewing, downloading, and emailing receipts for your npm user account](../viewing-downloading-and-emailing-receipts-for-your-user-account)\n- [Updating user account billing settings](../updating-user-account-billing-settings)\n- [Downgrading to a free user account plan](../downgrading-to-a-free-user-account-plan)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/getting-started/paying-for-your-npm-user-account](https://docs.npmjs.com/getting-started/paying-for-your-npm-user-account)"
- name: Paying for your organization
  id: organizations/paying-for-your-organization
  summary: © npm, Inc
  description: "# Paying for your organization\n\n- [Upgrading to a paid organization plan](../upgrading-to-a-paid-organization-plan)\n- [Viewing, downloading, and emailing receipts for your organization](../viewing-downloading-and-emailing-receipts-for-your-organization)\n- [Updating organization billing settings](../updating-organization-billing-settings)\n- [Downgrading to a free organization plan](../downgrading-to-a-free-organization-plan)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/organizations/paying-for-your-organization](https://docs.npmjs.com/organizations/paying-for-your-organization)"
- name: peerdependencies
  id: cli/v10/configuring-npm/package-json#peerdependencies
  summary: In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a require of this host
  belongs_to: package.json
  description: |-
    ### [peerDependencies](#peerdependencies)

    In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a `require` of this host. This is usually referred to as a *plugin*. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.

    For example:

    ``` javascript
    {
      "name": "tea-latte",
      "version": "1.3.5",
      "peerDependencies": {
        "tea": "2.x"
      }
    }
    ```

    This ensures your package `tea-latte` can be installed *along* with the second major version of the host package `tea` only. `npm install tea-latte` could possibly yield the following dependency graph:

    ``` javascript
    ├── tea-latte@1.3.5
    └── tea@2.2.0
    ```

    In npm versions 3 through 6, `peerDependencies` were not automatically installed, and would raise a warning if an invalid version of the peer dependency was found in the tree. As of npm v7, peerDependencies *are* installed by default.

    Trying to install another plugin with a conflicting requirement may cause an error if the tree cannot be resolved correctly. For this reason, make sure your plugin requirement is as broad as possible, and not to lock it down to specific patch versions.

    Assuming the host complies with [semver](https://semver.org/), only changes in the host package's major version will break your plugin. Thus, if you've worked with every 1.x version of the host package, use `"^1.0"` or `"1.x"` to express this. If you depend on features introduced in 1.5.2, use `"^1.5.2"`.
- name: peerdependenciesmeta
  id: cli/v10/configuring-npm/package-json#peerdependenciesmeta
  summary: When a user installs your package, npm will emit warnings if packages specified in peerDependencies are not already installed
  belongs_to: package.json
  description: |-
    ### [peerDependenciesMeta](#peerdependenciesmeta)

    When a user installs your package, npm will emit warnings if packages specified in `peerDependencies` are not already installed. The `peerDependenciesMeta` field serves to provide npm more information on how your peer dependencies are to be used. Specifically, it allows peer dependencies to be marked as optional.

    For example:

    ``` javascript
    {
      "name": "tea-latte",
      "version": "1.3.5",
      "peerDependencies": {
        "tea": "2.x",
        "soy-milk": "1.2"
      },
      "peerDependenciesMeta": {
        "soy-milk": {
          "optional": true
        }
      }
    }
    ```

    Marking a peer dependency as optional ensures npm will not emit a warning if the `soy-milk` package is not installed on the host. This allows you to integrate and interact with a variety of host packages without requiring all of them to be installed.
- name: people-fields-author-contributors
  id: cli/v10/configuring-npm/package-json#people-fields-author-contributors
  summary: The "author" is one person
  belongs_to: package.json
  description: |-
    ### [people fields: author, contributors](#people-fields-author-contributors)

    The "author" is one person. "contributors" is an array of people. A "person" is an object with a "name" field and optionally "url" and "email", like this:

    ``` javascript
    {
      "name": "Barney Rubble",
      "email": "b@rubble.com",
      "url": "http://barnyrubble.tumblr.com/"
    }
    ```

    Or you can shorten that all into a single string, and npm will parse it for you:

    ``` javascript
    {
      "author": "Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)"
    }
    ```

    Both email and url are optional either way.

    npm also sets a top-level "maintainers" field with your npm user info.
- name: prefer-dedupe
  id: cli/v10/using-npm/config#prefer-dedupe
  summary: Prefer to deduplicate packages if possible, rather than choosing a newer version of a dependency
  belongs_to: config
  description: |-
    #### [`prefer-dedupe`](#prefer-dedupe)

    - Default: false
    - Type: Boolean

    Prefer to deduplicate packages if possible, rather than choosing a newer version of a dependency.
- name: prefer-offline
  id: cli/v10/using-npm/config#prefer-offline
  summary: If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server
  belongs_to: config
  description: |-
    #### [`prefer-offline`](#prefer-offline)

    - Default: false
    - Type: Boolean

    If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use `--offline`.
- name: prefer-online
  id: cli/v10/using-npm/config#prefer-online
  summary: If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data
  belongs_to: config
  description: |-
    #### [`prefer-online`](#prefer-online)

    - Default: false
    - Type: Boolean

    If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data.
- name: prefix
  id: cli/v10/using-npm/config#prefix
  summary: The location to install global items
  belongs_to: config
  description: |-
    #### [`prefix`](#prefix)

    - Default: In global mode, the folder where the node executable is installed. Otherwise, the nearest parent folder containing either a package.json file or a node_modules folder.
    - Type: Path

    The location to install global items. If set on the command line, then it forces non-global commands to run in the specified folder.
- name: preid
  id: cli/v10/using-npm/config#preid
  summary: The "prerelease identifier" to use as a prefix for the "prerelease" part of a semver
  belongs_to: config
  description: |-
    #### [`preid`](#preid)

    - Default: ""
    - Type: String

    The "prerelease identifier" to use as a prefix for the "prerelease" part of a semver. Like the `rc` in `1.2.0-rc.8`.
- name: private
  id: cli/v10/configuring-npm/package-json#private
  summary: 'If you set "private": true in your package.json, then npm will refuse to publish it'
  belongs_to: package.json
  description: |-
    ### [private](#private)

    If you set `"private": true` in your package.json, then npm will refuse to publish it.

    This is a way to prevent accidental publication of private repositories. If you would like to ensure that a given package is only ever published to a specific registry (for example, an internal registry), then use the `publishConfig` dictionary described below to override the `registry` config param at publish-time.
- name: production
  id: cli/v10/using-npm/config#production
  summary: null
  belongs_to: config
  description: |-
    #### [`production`](#production)

    - Default: null
    - Type: null or Boolean
    - DEPRECATED: Use `--omit=dev` instead.

    Alias for `--omit=dev`
- name: progress
  id: cli/v10/using-npm/config#progress
  summary: When set to true, npm will display a progress bar during time intensive operations, if process.stderr is a TTY
  belongs_to: config
  description: |-
    #### [`progress`](#progress)

    - Default: `true` unless running in a known CI system
    - Type: Boolean

    When set to `true`, npm will display a progress bar during time intensive operations, if `process.stderr` is a TTY.

    Set to `false` to suppress the progress bar.
- name: provenance
  id: cli/v10/using-npm/config#provenance
  summary: When publishing from a supported cloud CI/CD system, the package will be publicly linked to where it was built and published from
  belongs_to: config
  description: |-
    #### [`provenance`](#provenance)

    - Default: false
    - Type: Boolean

    When publishing from a supported cloud CI/CD system, the package will be publicly linked to where it was built and published from.

    This config can not be used with: `provenance-file`
- name: provenance-file
  id: cli/v10/using-npm/config#provenance-file
  summary: When publishing, the provenance bundle at the given path will be used
  belongs_to: config
  description: |-
    #### [`provenance-file`](#provenance-file)

    - Default: null
    - Type: Path

    When publishing, the provenance bundle at the given path will be used.

    This config can not be used with: `provenance`
- name: proxy
  id: cli/v10/using-npm/config#proxy
  summary: A proxy to use for outgoing http requests
  belongs_to: config
  description: |-
    #### [`proxy`](#proxy)

    - Default: null
    - Type: null, false, or URL

    A proxy to use for outgoing http requests. If the `HTTP_PROXY` or `http_proxy` environment variables are set, proxy settings will be honored by the underlying `request` library.
- name: publishconfig
  id: cli/v10/configuring-npm/package-json#publishconfig
  summary: This is a set of config values that will be used at publish-time
  belongs_to: package.json
  description: |-
    ### [publishConfig](#publishconfig)

    This is a set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with "latest", published to the global public registry or that a scoped module is private by default.

    See [`config`](../using-npm/config) to see the list of config options that can be overridden.
- name: read-only
  id: cli/v10/using-npm/config#read-only
  summary: This is used to mark a token as unable to publish when configuring limited access tokens with the npm token create command
  belongs_to: config
  description: |-
    #### [`read-only`](#read-only)

    - Default: false
    - Type: Boolean

    This is used to mark a token as unable to publish when configuring limited access tokens with the `npm token create` command.
- name: rebuild-bundle
  id: cli/v10/using-npm/config#rebuild-bundle
  summary: Rebuild bundled dependencies after installation
  belongs_to: config
  description: |-
    #### [`rebuild-bundle`](#rebuild-bundle)

    - Default: true
    - Type: Boolean

    Rebuild bundled dependencies after installation.
- name: Receiving a one-time password over email
  id: receiving-a-one-time-password-over-email
  summary: For your security, npm may require additional verification to allow you to log in to your account
  description: "# Receiving a one-time password over email\n\nFor your security, npm may require additional verification to allow you to log in to your account. If you do not have [two-factor authentication](configuring-two-factor-authentication) enabled, you may be asked to verify yourself with a one-time password sent to the email address configured for your account.\n\n## [Logging in with a one-time password](#logging-in-with-a-one-time-password)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  You'll be prompted for a one-time password that was sent to your email.\n\n3.  Check your email account for an email from npm containing your one-time password (the subject will begin \"OTP for logging in to your account\").\n\n4.  Enter the digits from your email in your one-time password field.\n\n## [Enabling two-factor authentication](#enabling-two-factor-authentication)\n\nTo avoid this additional login step, with a one-time password sent to you via e-mail, you can configure [two-factor authentication with a device](configuring-two-factor-authentication) (2FA) instead.\n\n## [Unable to access email](#unable-to-access-email)\n\nIf you are unable to access the email linked to your npm account, you can submit a support ticket to reset this email address.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  Under the \"Login Verification\" form, click **Try recovering your account**.\n\n3.  On the \"Request an Account Recovery\" page, click **Start Account Recovery**.\n\n4.  In the \"Open a Support Ticket\" form, enter the following information:\n    - In the **Email** field, enter an email address where our support team can contact you.\n    - In the **How can we help?** section, select **Reset my email**.\n    - If you need help with anything else, in the **How can we help?** section, select **Other** and enter more information in the **Additional Details** field.\n      - If you have previously linked a GitHub account to your npm account, select **Connect to GitHub**. This will help our support team verify your account.\n      - If you have previously linked a Twitter account to your npm account, select **Connect to Twitter**. This will help our support team verify your account.\n\n5.  At the bottom of the form, click **Submit Support Ticket**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/receiving-a-one-time-password-over-email](https://docs.npmjs.com/receiving-a-one-time-password-over-email)"
- name: Recovering your 2FA-enabled account
  id: recovering-your-2fa-enabled-account
  summary: When you have two-factor access enabled on your account, and you lose access to your 2FA device, you may be able to recover your account using the following methods
  description: "# Recovering your 2FA-enabled account\n\nWhen you have two-factor access enabled on your account, and you lose access to your 2FA device, you may be able to recover your account using the following methods.\n\n## [Misplaced second factor device](#misplaced-second-factor-device)\n\nIf you have misplaced the device that provided second-factor authentication, you can use the recovery codes generated when you [enabled 2FA](configuring-two-factor-authentication#enabling-2fa-on-the-web) to access your account.\n\n### [Using recovery code on the web](#using-recovery-code-on-the-web)\n\n1.  Locate the recovery codes generated that you have saved.\n\n2.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n3.  On the \"Two-Factor Authentication\" page, click **Use a recovery code or request a reset**.\n\n    *Note: If you have configured to use TOTP, you will see an TOTP prompt instead*\n\n4.  Enter an unused recovery code in the \"Use a Recovery Code\" prompt.\n\n5.  You are now logged into npm.\n\n6.  (Optional) To disable 2FA, see \"[Disabling 2FA](configuring-two-factor-authentication#disabling-2fa)\".\n\n### [Using recovery code from the command line](#using-recovery-code-from-the-command-line)\n\n1.  Locate the recovery codes generated when you enabled 2FA on your account.\n\n2.  If you are logged out on the command line, log in using `npm login` command with your username and npm password.\n\n3.  Enter an unused recovery code when you see this prompt:\n\n4.  Once you are logged in, use the below and enter your npm password if prompted.\n\n    `npm profile disable-2fa`\n\n5.  Enter another unused recovery code when you see this prompt:\n\n6.  npm will confirm that two-factor authentication has been disabled.\n\n7.  Follow the steps outlined in \"[Configuring two-factor authentication](configuring-two-factor-authentication)\" to re-enable 2FA and generate new recovery codes.\n\n**Note:** Using the recovery codes to re-enable 2FA may create a new authenticator account with the same npm account name.\n\nIf you are using a [time-based one-time password (TOTP)](https://en.wikipedia.org/wiki/Time-based_one-time_password) mobile app and want to delete the old authenticator account, follow the steps for the authenticator.\n\n## [Viewing and regenerating recovery code](#viewing-and-regenerating-recovery-code)\n\n**Note:** Once you regenerate a set of code, all previous recovery codes become invalid. Each code can be used only once.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  On the account settings page, under \"Two-Factor Authentication\", click **Modify 2FA**.\n\n4.  Click \"Manage Recovery Codes\" to view your recovery codes.\n\n5.  Click \"Regenerate Code\" to generate a new set of codes.\n\n## [Misplaced recovery codes](#misplaced-recovery-codes)\n\nIf you have misplaced both your 2FA device and your recovery codes, you can contact our support team to attempt to recover your account. Provide as much information as possible to help us expedite the request faster.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  On the \"Two-Factor Authentication\" page, click **Use a recovery code or request a reset**.\n\n3.  Under the \"Use a Recovery Code\" form, click **Try recovering your account**.\n\n4.  On the \"Request an Account Recovery\" page, click **Start Account Recovery**.\n\n5.  If you have access to your registered email, enter the one-time password sent to your email in the **One-Time Password** field, then click **Verify Email Address**. *If you do not have access to your registered email, select **Skip email verification** at the bottom of the form.*\n\n6.  In the \"Open a Support Ticket\" form, enter the following information:\n    - In the **Email** field, enter an email address where our support team can contact you.\n    - In the **How can we help?** section, select **Reset my two-factor authentication (2FA)**.\n    - If you need help with anything else, in the **How can we help?** section, select **Other** and enter more information in the **Additional Details** field.\n      - If you have previously linked a GitHub account to your npm account, select **Connect to GitHub**. This will help our support team verify your account.\n      - If you have previously linked a Twitter account to your npm account, select **Connect to Twitter**. This will help our support team verify your account.\n\n7.  At the bottom of the form, click **Submit Support Ticket**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/recovering-your-2fa-enabled-account](https://docs.npmjs.com/recovering-your-2fa-enabled-account)"
- name: registry
  id: cli/v10/using-npm/registry
  summary: To resolve packages by name and version, npm talks to a registry website that implements the CommonJS Package Registry specification for reading package info
  description: "# registry\n\nThe JavaScript Package Registry\n\n### [Description](#description)\n\nTo resolve packages by name and version, npm talks to a registry website that implements the CommonJS Package Registry specification for reading package info.\n\nnpm is configured to use the **npm public registry** at [https://registry.npmjs.org](https://registry.npmjs.org) by default. Use of the npm public registry is subject to terms of use available at [https://docs.npmjs.com/policies/terms](https://docs.npmjs.com/policies/terms).\n\nYou can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry may be governed by their terms of use.\n\nnpm's package registry implementation supports several write APIs as well, to allow for publishing packages and managing user account information.\n\nThe npm public registry is powered by a CouchDB database, of which there is a public mirror at [https://skimdb.npmjs.com/registry](https://skimdb.npmjs.com/registry).\n\nThe registry URL used is determined by the scope of the package (see [`scope`](scope). If no scope is specified, the default registry is used, which is supplied by the [`registry` config](config#registry) parameter. See [`npm config`](../commands/npm-config), [`npmrc`](../configuring-npm/npmrc), and [`config`](config) for more on managing npm's configuration. Authentication configuration such as auth tokens and certificates are configured specifically scoped to an individual registry. See [Auth Related Configuration](../configuring-npm/npmrc#auth-related-configuration)\n\nWhen the default registry is used in a package-lock or shrinkwrap it has the special meaning of \"the currently configured registry\". If you create a lock file while using the default registry you can switch to another registry and npm will install packages from the new registry, but if you create a lock file while using a custom registry packages will be installed from that registry even after you change to another registry.\n\n### [Does npm send any information about me back to the registry?](#does-npm-send-any-information-about-me-back-to-the-registry)\n\nYes.\n\nWhen making requests of the registry npm adds two headers with information about your environment:\n\n- `Npm-Scope` – If your project is scoped, this header will contain its scope. In the future npm hopes to build registry features that use this information to allow you to customize your experience for your organization.\n- `Npm-In-CI` – Set to \"true\" if npm believes this install is running in a continuous integration environment, \"false\" otherwise. This is detected by looking for the following environment variables: `CI`, `TDDIUM`, `JENKINS_URL`, `bamboo.buildKey`. If you'd like to learn more you may find the [original PR](https://github.com/npm/npm-registry-client/pull/129) interesting. This is used to gather better metrics on how npm is used by humans, versus build farms.\n\nThe npm registry does not try to correlate the information in these headers with any authenticated accounts that may be used in the same requests.\n\n### [How can I prevent my package from being published in the official registry?](#how-can-i-prevent-my-package-from-being-published-in-the-official-registry)\n\nSet `\"private\": true` in your `package.json` to prevent it from being published at all, or `\"publishConfig\":{\"registry\":\"http://my-internal-registry.local\"}` to force it to be published only to your internal/private registry.\n\nSee [`package.json`](../configuring-npm/package-json) for more info on what goes in the package.json file.\n\n### [Where can I find my (and others') published packages?](#where-can-i-find-my-and-others-published-packages)\n\n[https://www.npmjs.com/](https://www.npmjs.com/)\n\n### [See also](#see-also)\n\n- [npm config](../commands/npm-config)\n- [config](config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm developers](developers)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/registry](https://docs.npmjs.com/cli/v10/using-npm/registry)"
- name: registry
  id: cli/v10/using-npm/config#registry
  summary: The base URL of the npm registry
  belongs_to: config
  description: |-
    #### [`registry`](#registry)

    - Default: "[https://registry.npmjs.org/](https://registry.npmjs.org/)"
    - Type: URL

    The base URL of the npm registry.
- name: removal
  id: cli/v10/using-npm/removal
  summary: So sad to see you go
  description: "# removal\n\nCleaning the Slate\n\n### [Synopsis](#synopsis)\n\nSo sad to see you go.\n\n``` javascript\nsudo npm uninstall npm -g\n```\n\nOr, if that fails, get the npm source code, and do:\n\n``` javascript\nsudo make uninstall\n```\n\n### [More Severe Uninstalling](#more-severe-uninstalling)\n\nUsually, the above instructions are sufficient. That will remove npm, but leave behind anything you've installed.\n\nIf that doesn't work, or if you require more drastic measures, continue reading.\n\nNote that this is only necessary for globally-installed packages. Local installs are completely contained within a project's `node_modules` folder. Delete that folder, and everything is gone unless a package's install script is particularly ill-behaved.\n\nThis assumes that you installed node and npm in the default place. If you configured node with a different `--prefix`, or installed npm with a different prefix setting, then adjust the paths accordingly, replacing `/usr/local` with your install prefix.\n\nTo remove everything npm-related manually:\n\n``` javascript\nrm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*\n```\n\nIf you installed things *with* npm, then your best bet is to uninstall them with npm first, and then install them again once you have a proper install. This can help find any symlinks that are lying around:\n\n``` javascript\nls -laF /usr/local/{lib/node{,/.npm},bin,share/man} | grep npm\n```\n\nPrior to version 0.3, npm used shim files for executables and node modules. To track those down, you can do the following:\n\n``` javascript\nfind /usr/local/{lib/node,bin} -exec grep -l npm \\{\\} \\; ;\n```\n\n### [See also](#see-also)\n\n- [npm uninstall](../commands/npm-uninstall)\n- [npm prune](../commands/npm-prune)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/removal](https://docs.npmjs.com/cli/v10/using-npm/removal)"
- name: Removing members from your organization
  id: removing-members-from-your-organization
  summary: As an organization owner, you can remove members from your organization if they are no longer collaborating on packages owned or governed by your organization
  description: "# Removing members from your organization\n\nAs an organization owner, you can remove members from your organization if they are no longer collaborating on packages owned or governed by your organization.\n\nIf you remove a member from an npm Teams subscription (a paid organization), then they will lose access to your organization's private packages, and the credit card on file for your organization will not be charged for them on the next billing cycle.\n\n**Note:** Members are not notified when you remove them from your organization.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Members**.\n\n5.  In the list of organization members, find the member you want to remove.\n\n6.  At the end of the member row, click **X**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/removing-members-from-your-organization](https://docs.npmjs.com/removing-members-from-your-organization)"
- name: Removing organization members from teams
  id: removing-organization-members-from-teams
  summary: As an organization owner or team admin, you can remove organization members from teams if they no longer need access to packages accessible to the team
  description: "# Removing organization members from teams\n\nAs an organization owner or team admin, you can remove organization members from teams if they no longer need access to packages accessible to the team.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  In the list of team members, find the member you want to remove.\n\n6.  In the member row, to remove the member from the team, click **X**.\n\n**Note: Removing a member from a team, even if it is the only team they are a member of, will not remove them from the organization.** To remove a member from the organization, see \"[Removing members from your organization](removing-members-from-your-organization)\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/removing-organization-members-from-teams](https://docs.npmjs.com/removing-organization-members-from-teams)"
- name: Removing teams
  id: removing-teams
  summary: As an organization owner or team admin, you can remove teams that no longer need access to a set of packages governed by your organization
  description: "# Removing teams\n\nAs an organization owner or team admin, you can remove teams that no longer need access to a set of packages governed by your organization. Removing the team will not remove the team members or packages from your organization.\n\n**Note:** if you remove all teams referencing a particular package, it will be orphaned and you will lose access to it. If this happens, [contact npm Support](https://www.npmjs.com/support).\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Teams**.\n\n5.  Beside the name of the team you want to remove, click **X**.\n\n**Note:** You cannot remove the developers team, [learn more about the developers team](about-developers-team).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/removing-teams](https://docs.npmjs.com/removing-teams)"
- name: Renaming an organization
  id: renaming-an-organization
  summary: Organizations cannot be renamed from the website or command line interface
  description: "# Renaming an organization\n\nOrganizations cannot be renamed from the website or command line interface.\n\nTo rename an organization, as an organization owner, you must manually migrate your existing organization members, teams, and packages to a new organization, then [contact npm Support](https://www.npmjs.com/support) to have the outdated packages unpublished and the previous organization deleted.\n\n1.  [Create a new organization](creating-an-organization) with the name you want. If your old organization is on a paid plan, you must choose a paid plan for the new organization.\n2.  [Add the members](adding-members-to-your-organization) of your old organization to your new organization.\n3.  In your new organization, [create teams](creating-teams) to match teams in your old organization.\n4.  Republish packages to the new organization by updating the package scope in its `package.json` file to match the new organization name and running `npm publish`.\n5.  In the new organization teams, [configure package access](managing-team-access-to-organization-packages) to match team package access in your old organization.\n6.  [Contact npm Support](https://www.npmjs.com/support) to have the outdated packages unpublished and the previous organization deleted.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/renaming-an-organization](https://docs.npmjs.com/renaming-an-organization)"
- name: replace-registry-host
  id: cli/v10/using-npm/config#replace-registry-host
  summary: Defines behavior for replacing the registry host in a lockfile with the configured registry
  belongs_to: config
  description: |-
    #### [`replace-registry-host`](#replace-registry-host)

    - Default: "npmjs"
    - Type: "npmjs", "never", "always", or String

    Defines behavior for replacing the registry host in a lockfile with the configured registry.

    The default behavior is to replace package dist URLs from the default registry ([https://registry.npmjs.org](https://registry.npmjs.org)) to the configured registry. If set to "never", then use the registry value. If set to "always", then replace the registry host with the configured host every time.

    You may also specify a bare hostname (e.g., "registry.npmjs.org").
- name: Reporting malware in an npm package
  id: reporting-malware-in-an-npm-package
  summary: If you find malware in an npm package (either yours or someone else's), you can report it to the npm Security team to help keep the Javascript ecosystem safe
  description: "# Reporting malware in an npm package\n\nIf you find malware in an npm package (either yours or someone else's), you can report it to the npm Security team to help keep the Javascript ecosystem safe.\n\n**Note:** Vulnerabilities in npm packages should be reported directly to the package maintainers. We strongly advise doing this privately. You can find contact information about package maintainers with `npm owner ls <package-name>`. If the source code is hosted on GitHub please refer to the repository's [Security Policy](https://docs.github.com/en/free-pro-team@latest/github/managing-security-vulnerabilities/adding-a-security-policy-to-your-repository#about-security-policies).\n\n## [How npm Security handles malware](#how-npm-security-handles-malware)\n\nMalware is a major concern for npm Security and we have removed hundreds of malicious packages from the registry. For every malware report we receive, npm Security takes the following actions:\n\n1.  Confirm validity of the report.\n2.  Remove the package from the registry.\n3.  Publish a security placeholder for the package.\n4.  Publish a security advisory alerting the community.\n\nAs part of our process we determine whether the user account who uploaded the package should be banned. We also cooperate with 3rd parties when applicable.\n\n## [Reporting malware](#reporting-malware)\n\n1.  Gather information about the malware.\n2.  On the package page, click **Report malware**.\n3.  On the malware report page, provide information about yourself and the malware:\n    - **Name:** Your name.\n    - **Email address:** An email address the npm Security team can use to contact you.\n    - **Package name:** The name of the package that contains the malware.\n    - **Package version:** The version of the package that contains the malware. Include all affected versions.\n    - **Description of the malware:** A brief description of the malware and its effects. Include references, commits, and/or code examples that would help our researchers confirm the report.\n4.  Click **Send Report**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/reporting-malware-in-an-npm-package](https://docs.npmjs.com/reporting-malware-in-an-npm-package)"
- name: repository
  id: cli/v10/configuring-npm/package-json#repository
  summary: Specify the place where your code lives
  belongs_to: package.json
  description: |-
    ### [repository](#repository)

    Specify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the `npm docs` command will be able to find you.

    Do it like this:

    ``` javascript
    {
      "repository": {
        "type": "git",
        "url": "https://github.com/npm/cli.git"
      }
    }
    ```

    The URL should be a publicly available (perhaps read-only) url that can be handed directly to a VCS program without any modification. It should not be a url to an html project page that you put in your browser. It's for computers.

    For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same shortcut syntax you use for `npm install`:

    ``` javascript
    {
      "repository": "npm/npm",


      "repository": "github:user/repo",


      "repository": "gist:11081aaa281",


      "repository": "bitbucket:user/repo",


      "repository": "gitlab:user/repo"
    }
    ```

    If the `package.json` for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives:

    ``` javascript
    {
      "repository": {
        "type": "git",
        "url": "https://github.com/facebook/react.git",
        "directory": "packages/react-dom"
      }
    }
    ```
- name: Requesting an export of your personal data
  id: requesting-your-data
  summary: You can export and review the metadata that npm stores about your personal account
  description: "# Requesting an export of your personal data\n\nYou can export and review the metadata that npm stores about your personal account. The export is an archive containing the following information.\n\n1.  Your personal details such as username, email address, full name, linked Twitter / GitHub accounts, masked Personal Access Tokens (PAT) and the organisations that you are a member of.\n2.  Metadata of all the packages that you have access to.\n3.  Each individual version of packages that you have published to npm.\n\n## [How to request an export](#how-to-request-an-export)\n\n1.  Navigate to [npm support form](https://www.npmjs.com/support)\n2.  Select \"Account and Billing issues\" category\n3.  Select \"Data export request\" sub-category\n\n4.  Fill in the details and submit the form\n\n## [Retrieving the exported data](#retrieving-the-exported-data)\n\nAfter a request is placed our support team will review it and initiate an export on your behalf. Once the export process is complete you will receive an email with a link to an archive of your personal data. You must be authenticated to npmjs.com to download this archive.\n\nThe download link will be available for 7 days, after which the exported data and the link is purged.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/requesting-your-data](https://docs.npmjs.com/requesting-your-data)"
- name: Requiring 2FA for package publishing and settings modification
  id: requiring-2fa-for-package-publishing-and-settings-modification
  summary: To protect your packages, as a package publisher, you can require everyone who has write access to a package to have two-factor authentication (2FA) enabled
  description: "# Requiring 2FA for package publishing and settings modification\n\nTo protect your packages, as a package publisher, you can require everyone who has write access to a package to have two-factor authentication (2FA) enabled. This will require that users provide 2FA credentials in addition to their login token when they publish the package. For more information, see \"[Configuring two-factor authentication](configuring-two-factor-authentication)\".\n\nYou may also choose to allow publishing with either two-factor authentication *or* with [automation tokens](creating-and-viewing-access-tokens#creating-granular-access-tokens-on-the-website). This lets you configure automation tokens in a CI/CD workflow, but requires two-factor authentication from interactive publishes.\n\n## [Configuring two-factor authentication](#configuring-two-factor-authentication)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  Navigate to the package on which you want to require a second factor to publish or modify settings.\n\n3.  Click **Settings**.\n\n4.  Under \"Publishing access\", select the requirements to publish a package.\n\n    1.  **Dont require two-factor authentication**  \n        With this option, a maintainer can publish a package or change the package settings whether they have two-factor authentication enabled or not. This is the least secure setting.\n\n    2.  **Require two-factor authentication or automation tokens or granular access token**  \n        With this option, maintainers must have two-factor authentication enabled for their account. If they publish a package interactively, using the `npm publish` command, they will be required to enter 2FA credentials when they perform the publish. However, maintainers may also create an [automation token](creating-and-viewing-access-tokens#creating-granular-access-tokens-on-the-website) or a [granular access token](creating-and-viewing-access-tokens#creating-granular-access-tokens-on-the-website) and use that to publish. A second factor is *not* required when using a token, making it useful for continuous integration and continuous deployment workflows.\n\n    3.  **Require two-factor authentication and disallow tokens**  \n        With this option, a maintainer must have two-factor authentication enabled for their account, and they must publish interactively. Maintainers will be required to enter 2FA credentials when they perform the publish. Automation tokens and granular access tokens cannot be used to publish packages.\n\n5.  Click **Update Package Settings**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/requiring-2fa-for-package-publishing-and-settings-modification](https://docs.npmjs.com/requiring-2fa-for-package-publishing-and-settings-modification)"
- name: Requiring two-factor authentication in your organization
  id: requiring-two-factor-authentication-in-your-organization
  summary: Two-factor authentication (2FA) is an extra layer of security used when logging into websites or apps
  description: "# Requiring two-factor authentication in your organization\n\nOrganization owners can require organization members to enable two-factor authentication for their personal accounts, making it harder for malicious actors to access an organization's packages and settings\n\n## [About two-factor authentication for organizations](#about-two-factor-authentication-for-organizations)\n\nTwo-factor authentication (2FA) is an extra layer of security used when logging into websites or apps. You can require all members in your organization to enable two-factor authentication on npm. For more information about two-factor authentication, see [\"Configuring two-factor authentication.\"](configuring-two-factor-authentication).\n\n**Note:**\n\n- When you require use of two-factor authentication for your organization, members who do not use 2FA will be removed from the organization and lose access to its packages. You can add them back to the organization if they enable two-factor authentication.\n- An organization owner cannot opt-in to requiring 2FA for an organization if they do not have 2FA enabled on their account.\n- If you are the member of an organization that requires 2FA you will not be able to disable 2FA until you leave that organization.\n\n## [Prerequisites](#prerequisites)\n\nBefore you can require organization members to use two-factor authentication, you must enable two-factor authentication for your account on npm. For more information, see [\"Configuring two-factor authentication.\"](configuring-two-factor-authentication).\n\nBefore you require use of two-factor authentication, we recommend notifying organization members and asking them to set up 2FA for their accounts. You can see if members already use 2Fa in the organizations members page.\n\n## [Requiring two-factor authentication in your organization](#requiring-two-factor-authentication-in-your-organization-1)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of your organization.\n\n4.  On the organization settings page, click **Members**.\n\n5.  Click the **Enable 2FA Enforcement** button.\n\n6.  If prompted, read the information about members who will be removed from the organization. Type your organization's name to confirm the change, then click Remove members & require two-factor authentication.\n\n7.  If any members are removed from the organization, we recommend sending them an invitation that can reinstate their former privileges and access to your organization. They must enable two-factor authentication before they can accept your invitation.\n\n## [Helping removed members and outside collaborators rejoin your organization](#helping-removed-members-and-outside-collaborators-rejoin-your-organization)\n\nIf any members are removed from the organization when you enable required use of two-factor authentication, they'll receive an email notifying them that they've been removed. They should then enable 2FA for their personal account, and contact an organization owner to request access to your organization.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/requiring-two-factor-authentication-in-your-organization](https://docs.npmjs.com/requiring-two-factor-authentication-in-your-organization)"
- name: Resolving EACCES permissions errors when installing packages globally
  id: resolving-eacces-permissions-errors-when-installing-packages-globally
  summary: This is the best way to avoid permissions issues
  description: "# Resolving EACCES permissions errors when installing packages globally\n\nIf you see an `EACCES` error when you try to [install a package globally](downloading-and-installing-packages-globally), you can either:\n\n- Reinstall npm with a node version manager (recommended),\n\n  **or**\n\n- Manually change npm's default directory\n\n## [Reinstall npm with a node version manager](#reinstall-npm-with-a-node-version-manager)\n\nThis is the best way to avoid permissions issues. To reinstall npm with a node version manager, follow the steps in \"[Downloading and installing Node.js and npm](downloading-and-installing-node-js-and-npm)\". You do not need to remove your current version of npm or Node.js before installing a node version manager.\n\n## [Manually change npm's default directory](#manually-change-npms-default-directory)\n\n**Note:** This section does not apply to Microsoft Windows.\n\nTo minimize the chance of permissions errors, you can configure npm to use a different directory. In this example, you will create and use hidden directory in your home directory.\n\n1.  Back up your computer.\n\n2.  On the command line, in your home directory, create a directory for global installations:\n\n    `mkdir ~/.npm-global`\n\n3.  Configure npm to use the new directory path:\n\n    `npm config set prefix '~/.npm-global'`\n\n4.  In your preferred text editor, open or create a `~/.profile` file and add this line:\n\n    `export PATH=~/.npm-global/bin:$PATH`\n\n5.  On the command line, update your system variables:\n\n    `source ~/.profile`\n\n6.  To test your new configuration, install a package globally without using `sudo`:\n\n    `npm install -g jshint`\n\nInstead of steps 3-5, you can use the corresponding ENV variable (e.g. if you don't want to modify `~/.profile`):\n\n`NPM_CONFIG_PREFIX=~/.npm-global`\n\n**npx: an alternative to running global commands**\n\nIf you are using npm version 5.2 or greater, you may want to consider [npx](cli/commands/npx) as an alternative way to run global commands, especially if you only need a command occasionally. For more information, see [this article about npx](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally](https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally)"
- name: Revoking access tokens
  id: revoking-access-tokens
  summary: To keep your account and packages secure, we strongly recommend revoking (deleting) tokens you no longer need or that have been compromised
  description: "# Revoking access tokens\n\nTo keep your account and packages secure, we strongly recommend revoking (deleting) tokens you no longer need or that have been compromised. You can revoke any token you have created.\n\n1.  To see a list of your tokens, on the command line, run:\n\n    `npm token list`\n\n2.  In the tokens table, find and copy the ID of the token you want to delete.\n\n3.  On the command line, run the following command, replacing `123456` with the ID of the token you want to delete:\n\n    `npm token delete 123456`\n\n    npm will report `Removed 1 token`\n\n4.  To confirm that the token has been removed, run:\n\n    `npm token list`\n\n**Note:** You must use the token ID to delete a token, not the truncated version of the token. In some cases, there may be a delay of up to an hour before a token is successfully revoked.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/revoking-access-tokens](https://docs.npmjs.com/revoking-access-tokens)"
- name: save
  id: cli/v10/using-npm/config#save
  summary: Save installed packages to a package.json file as dependencies
  belongs_to: config
  description: |-
    #### [`save`](#save)

    - Default: `true` unless when using `npm update` where it defaults to `false`
    - Type: Boolean

    Save installed packages to a `package.json` file as dependencies.

    When used with the `npm rm` command, removes the dependency from `package.json`.

    Will also prevent writing to `package-lock.json` if set to `false`.
- name: save-bundle
  id: cli/v10/using-npm/config#save-bundle
  summary: If a package would be saved at install time by the use of --save, --save-dev, or --save-optional, then also put it in the bundleDependencies list
  belongs_to: config
  description: |-
    #### [`save-bundle`](#save-bundle)

    - Default: false
    - Type: Boolean

    If a package would be saved at install time by the use of `--save`, `--save-dev`, or `--save-optional`, then also put it in the `bundleDependencies` list.

    Ignored if `--save-peer` is set, since peerDependencies cannot be bundled.
- name: save-dev
  id: cli/v10/using-npm/config#save-dev
  summary: Save installed packages to a package.json file as devDependencies
  belongs_to: config
  description: |-
    #### [`save-dev`](#save-dev)

    - Default: false
    - Type: Boolean

    Save installed packages to a package.json file as `devDependencies`.
- name: save-exact
  id: cli/v10/using-npm/config#save-exact
  summary: Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator
  belongs_to: config
  description: |-
    #### [`save-exact`](#save-exact)

    - Default: false
    - Type: Boolean

    Dependencies saved to package.json will be configured with an exact version rather than using npm's default semver range operator.
- name: save-optional
  id: cli/v10/using-npm/config#save-optional
  summary: Save installed packages to a package.json file as optionalDependencies
  belongs_to: config
  description: |-
    #### [`save-optional`](#save-optional)

    - Default: false
    - Type: Boolean

    Save installed packages to a package.json file as `optionalDependencies`.
- name: save-peer
  id: cli/v10/using-npm/config#save-peer
  summary: null
  belongs_to: config
  description: |-
    #### [`save-peer`](#save-peer)

    - Default: false
    - Type: Boolean

    Save installed packages to a package.json file as `peerDependencies`
- name: save-prefix
  id: cli/v10/using-npm/config#save-prefix
  summary: Configure how versions of packages installed to a package.json file via --save or --save-dev get prefixed
  belongs_to: config
  description: |-
    #### [`save-prefix`](#save-prefix)

    - Default: "^"
    - Type: String

    Configure how versions of packages installed to a package.json file via `--save` or `--save-dev` get prefixed.

    For example if a package has version `1.2.3`, by default its version is set to `^1.2.3` which allows minor upgrades for that package, but after `npm config set save-prefix='~'` it would be set to `~1.2.3` which only allows patch upgrades.
- name: save-prod
  id: cli/v10/using-npm/config#save-prod
  summary: Save installed packages into dependencies specifically
  belongs_to: config
  description: |-
    #### [`save-prod`](#save-prod)

    - Default: false
    - Type: Boolean

    Save installed packages into `dependencies` specifically. This is useful if a package already exists in `devDependencies` or `optionalDependencies`, but you want to move it to be a non-optional production dependency.

    This is the default behavior if `--save` is true, and neither `--save-dev` or `--save-optional` are true.
- name: sbom-format
  id: cli/v10/using-npm/config#sbom-format
  summary: SBOM format to use when generating SBOMs
  belongs_to: config
  description: |-
    #### [`sbom-format`](#sbom-format)

    - Default: null
    - Type: "cyclonedx" or "spdx"

    SBOM format to use when generating SBOMs.
- name: sbom-type
  id: cli/v10/using-npm/config#sbom-type
  summary: The type of package described by the generated SBOM
  belongs_to: config
  description: |-
    #### [`sbom-type`](#sbom-type)

    - Default: "library"
    - Type: "library", "application", or "framework"

    The type of package described by the generated SBOM. For SPDX, this is the value for the `primaryPackagePurpose` field. For CycloneDX, this is the value for the `type` field.
- name: scope
  id: cli/v10/using-npm/scope
  summary: All npm packages have a name
  description: "# scope\n\nScoped packages\n\n### [Description](#description)\n\nAll npm packages have a name. Some package names also have a scope. A scope follows the usual rules for package names (URL-safe characters, no leading dots or underscores). When used in package names, scopes are preceded by an `@` symbol and followed by a slash, e.g.\n\n``` javascript\n@somescope/somepackagename\n```\n\nScopes are a way of grouping related packages together, and also affect a few things about the way npm treats the package.\n\nEach npm user/organization has their own scope, and only you can add packages in your scope. This means you don't have to worry about someone taking your package name ahead of you. Thus it is also a good way to signal official packages for organizations.\n\nScoped packages can be published and installed as of `npm@2` and are supported by the primary npm registry. Unscoped packages can depend on scoped packages and vice versa. The npm client is backwards-compatible with unscoped registries, so it can be used to work with scoped and unscoped registries at the same time.\n\n### [Installing scoped packages](#installing-scoped-packages)\n\nScoped packages are installed to a sub-folder of the regular installation folder, e.g. if your other packages are installed in `node_modules/packagename`, scoped modules will be installed in `node_modules/@myorg/packagename`. The scope folder (`@myorg`) is simply the name of the scope preceded by an `@` symbol, and can contain any number of scoped packages.\n\nA scoped package is installed by referencing it by name, preceded by an `@` symbol, in `npm install`:\n\n``` javascript\nnpm install @myorg/mypackage\n```\n\nOr in `package.json`:\n\n``` javascript\n\"dependencies\": {\n  \"@myorg/mypackage\": \"^1.3.0\"\n}\n```\n\nNote that if the `@` symbol is omitted, in either case, npm will instead attempt to install from GitHub; see [`npm install`](../commands/npm-install).\n\n### [Requiring scoped packages](#requiring-scoped-packages)\n\nBecause scoped packages are installed into a scope folder, you have to include the name of the scope when requiring them in your code, e.g.\n\n``` javascript\nrequire(\"@myorg/mypackage\");\n```\n\nThere is nothing special about the way Node treats scope folders. This simply requires the `mypackage` module in the folder named `@myorg`.\n\n### [Publishing scoped packages](#publishing-scoped-packages)\n\nScoped packages can be published from the CLI as of `npm@2` and can be published to any registry that supports them, including the primary npm registry.\n\n(As of 2015-04-19, and with npm 2.0 or better, the primary npm registry **does** support scoped packages.)\n\nIf you wish, you may associate a scope with a registry; see below.\n\n#### [Publishing public scoped packages to the primary npm registry](#publishing-public-scoped-packages-to-the-primary-npm-registry)\n\nPublishing to a scope, you have two options:\n\n- Publishing to your user scope (example: `@username/module`)\n- Publishing to an organization scope (example: `@org/module`)\n\nIf publishing a public module to an organization scope, you must first either create an organization with the name of the scope that you'd like to publish to or be added to an existing organization with the appropriate permissions. For example, if you'd like to publish to `@org`, you would need to create the `org` organization on npmjs.com prior to trying to publish.\n\nScoped packages are not public by default. You will need to specify `--access public` with the initial `npm publish` command. This will publish the package and set access to `public` as if you had run `npm access public` after publishing. You do not need to do this when publishing new versions of an existing scoped package.\n\n#### [Publishing private scoped packages to the npm registry](#publishing-private-scoped-packages-to-the-npm-registry)\n\nTo publish a private scoped package to the npm registry, you must have an [npm Private Modules](../../../creating-and-publishing-private-packages) account.\n\nYou can then publish the module with `npm publish` or `npm publish --access restricted`, and it will be present in the npm registry, with restricted access. You can then change the access permissions, if desired, with `npm access` or on the npmjs.com website.\n\n### [Associating a scope with a registry](#associating-a-scope-with-a-registry)\n\nScopes can be associated with a separate registry. This allows you to seamlessly use a mix of packages from the primary npm registry and one or more private registries, such as [GitHub Packages](https://github.com/features/packages) or the open source [Verdaccio](https://verdaccio.org) project.\n\nYou can associate a scope with a registry at login, e.g.\n\n``` javascript\nnpm login --registry=http://reg.example.com --scope=@myco\n```\n\nScopes have a many-to-one relationship with registries: one registry can host multiple scopes, but a scope only ever points to one registry.\n\nYou can also associate a scope with a registry using `npm config`:\n\n``` javascript\nnpm config set @myco:registry http://reg.example.com\n```\n\nOnce a scope is associated with a registry, any `npm install` for a package with that scope will request packages from that registry instead. Any `npm publish` for a package name that contains the scope will be published to that registry instead.\n\n### [See also](#see-also)\n\n- [npm install](../commands/npm-install)\n- [npm publish](../commands/npm-publish)\n- [npm access](../commands/npm-access)\n- [npm registry](registry)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/scope](https://docs.npmjs.com/cli/v10/using-npm/scope)"
- name: scope
  id: cli/v10/using-npm/config#scope
  summary: Associate an operation with a scope for a scoped registry
  belongs_to: config
  description: |-
    #### [`scope`](#scope)

    - Default: the scope of the current project, if any, or ""
    - Type: String

    Associate an operation with a scope for a scoped registry.

    Useful when logging in to or out of a private registry:

    ``` javascript
    # log in, linking the scope to the custom registry
    npm login --scope=@mycorp --registry=https://registry.mycorp.com


    # log out, removing the link and the auth token
    npm logout --scope=@mycorp
    ```

    This will cause `@mycorp` to be mapped to the registry for future installation of packages specified according to the pattern `@mycorp/package`.

    This will also cause `npm init` to create a scoped package.

    ``` javascript
    # accept all defaults, and create a package named "@foo/whatever",
    # instead of just named "whatever"
    npm init --scope=@foo --yes
    ```
- name: script-shell
  id: cli/v10/using-npm/config#script-shell
  summary: The shell to use for scripts run with the npm exec, npm run and npm init <package-spec> commands
  belongs_to: config
  description: |-
    #### [`script-shell`](#script-shell)

    - Default: '/bin/sh' on POSIX systems, 'cmd.exe' on Windows
    - Type: null or String

    The shell to use for scripts run with the `npm exec`, `npm run` and `npm init <package-spec>` commands.
- name: scripts
  id: cli/v10/using-npm/scripts
  summary: The "scripts" property of your package.json file supports a number of built-in scripts and their preset life cycle events as well as arbitrary scripts
  description: "# scripts\n\nHow npm handles the \"scripts\" field\n\n### [Description](#description)\n\nThe `\"scripts\"` property of your `package.json` file supports a number of built-in scripts and their preset life cycle events as well as arbitrary scripts. These all can be executed by running `npm run-script <stage>` or `npm run <stage>` for short. *Pre* and *post* commands with matching names will be run for those as well (e.g. `premyscript`, `myscript`, `postmyscript`). Scripts from dependencies can be run with `npm explore <pkg> -- npm run <stage>`.\n\n### [Pre & Post Scripts](#pre--post-scripts)\n\nTo create \"pre\" or \"post\" scripts for any scripts defined in the `\"scripts\"` section of the `package.json`, simply create another script *with a matching name* and add \"pre\" or \"post\" to the beginning of them.\n\n``` javascript\n{\n  \"scripts\": {\n    \"precompress\": \"{{ executes BEFORE the `compress` script }}\",\n    \"compress\": \"{{ run command to compress files }}\",\n    \"postcompress\": \"{{ executes AFTER `compress` script }}\"\n  }\n}\n```\n\nIn this example `npm run compress` would execute these scripts as described.\n\n### [Life Cycle Scripts](#life-cycle-scripts)\n\nThere are some special life cycle scripts that happen only in certain situations. These scripts happen in addition to the `pre<event>`, `post<event>`, and `<event>` scripts.\n\n- `prepare`, `prepublish`, `prepublishOnly`, `prepack`, `postpack`, `dependencies`\n\n**prepare** (since `npm@4.0.0`)\n\n- Runs BEFORE the package is packed, i.e. during `npm publish` and `npm pack`\n\n- Runs on local `npm install` without any arguments\n\n- Runs AFTER `prepublish`, but BEFORE `prepublishOnly`\n\n- NOTE: If a package being installed through git contains a `prepare` script, its `dependencies` and `devDependencies` will be installed, and the prepare script will be run, before the package is packaged and installed.\n\n- As of `npm@7` these scripts run in the background. To see the output, run with: `--foreground-scripts`.\n\n**prepublish** (DEPRECATED)\n\n- Does not run during `npm publish`, but does run during `npm ci` and `npm install`. See below for more info.\n\n**prepublishOnly**\n\n- Runs BEFORE the package is prepared and packed, ONLY on `npm publish`.\n\n**prepack**\n\n- Runs BEFORE a tarball is packed (on \"`npm pack`\", \"`npm publish`\", and when installing a git dependency).\n- NOTE: \"`npm run pack`\" is NOT the same as \"`npm pack`\". \"`npm run pack`\" is an arbitrary user defined script name, where as, \"`npm pack`\" is a CLI defined command.\n\n**postpack**\n\n- Runs AFTER the tarball has been generated but before it is moved to its final destination (if at all, publish does not save the tarball locally)\n\n**dependencies**\n\n- Runs AFTER any operations that modify the `node_modules` directory IF changes occurred.\n- Does NOT run in global mode\n\n#### [Prepare and Prepublish](#prepare-and-prepublish)\n\n**Deprecation Note: prepublish**\n\nSince `npm@1.1.71`, the npm CLI has run the `prepublish` script for both `npm publish` and `npm install`, because it's a convenient way to prepare a package for use (some common use cases are described in the section below). It has also turned out to be, in practice, [very confusing](https://github.com/npm/npm/issues/10074). As of `npm@4.0.0`, a new event has been introduced, `prepare`, that preserves this existing behavior. A *new* event, `prepublishOnly` has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on `npm publish` (for instance, running the tests one last time to ensure they're in good shape).\n\nSee [https://github.com/npm/npm/issues/10074](https://github.com/npm/npm/issues/10074) for a much lengthier justification, with further reading, for this change.\n\n**Use Cases**\n\nIf you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a `prepublish` script. This includes tasks such as:\n\n- Compiling CoffeeScript source code into JavaScript.\n- Creating minified versions of JavaScript source code.\n- Fetching remote resources that your package will use.\n\nThe advantage of doing these things at `prepublish` time is that they can be done once, in a single place, thus reducing complexity and variability. Additionally, this means that:\n\n- You can depend on `coffee-script` as a `devDependency`, and thus your users don't need to have it installed.\n- You don't need to include minifiers in your package, reducing the size for your users.\n- You don't need to rely on your users having `curl` or `wget` or other system tools on the target machines.\n\n#### [Dependencies](#dependencies)\n\nThe `dependencies` script is run any time an `npm` command causes changes to the `node_modules` directory. It is run AFTER the changes have been applied and the `package.json` and `package-lock.json` files have been updated.\n\n### [Life Cycle Operation Order](#life-cycle-operation-order)\n\n#### [`npm cache add`](../commands/npm-cache)\n\n- `prepare`\n\n#### [`npm ci`](../commands/npm-ci)\n\n- `preinstall`\n- `install`\n- `postinstall`\n- `prepublish`\n- `preprepare`\n- `prepare`\n- `postprepare`\n\nThese all run after the actual installation of modules into `node_modules`, in order, with no internal actions happening in between\n\n#### [`npm diff`](../commands/npm-diff)\n\n- `prepare`\n\n#### [`npm install`](../commands/npm-install)\n\nThese also run when you run `npm install -g <pkg-name>`\n\n- `preinstall`\n- `install`\n- `postinstall`\n- `prepublish`\n- `preprepare`\n- `prepare`\n- `postprepare`\n\nIf there is a `binding.gyp` file in the root of your package and you haven't defined your own `install` or `preinstall` scripts, npm will default the `install` command to compile using node-gyp via `node-gyp rebuild`\n\nThese are run from the scripts of `<pkg-name>`\n\n#### [`npm pack`](../commands/npm-pack)\n\n- `prepack`\n- `prepare`\n- `postpack`\n\n#### [`npm publish`](../commands/npm-publish)\n\n- `prepublishOnly`\n- `prepack`\n- `prepare`\n- `postpack`\n- `publish`\n- `postpublish`\n\n#### [`npm rebuild`](../commands/npm-rebuild)\n\n- `preinstall`\n- `install`\n- `postinstall`\n- `prepare`\n\n`prepare` is only run if the current directory is a symlink (e.g. with linked packages)\n\n#### [`npm restart`](../commands/npm-restart)\n\nIf there is a `restart` script defined, these events are run, otherwise `stop` and `start` are both run if present, including their `pre` and `post` iterations)\n\n- `prerestart`\n- `restart`\n- `postrestart`\n\n#### [`npm run <user defined>`](../commands/npm-run-script)\n\n- `pre<user-defined>`\n- `<user-defined>`\n- `post<user-defined>`\n\n#### [`npm start`](../commands/npm-start)\n\n- `prestart`\n- `start`\n- `poststart`\n\nIf there is a `server.js` file in the root of your package, then npm will default the `start` command to `node server.js`. `prestart` and `poststart` will still run in this case.\n\n#### [`npm stop`](../commands/npm-stop)\n\n- `prestop`\n- `stop`\n- `poststop`\n\n#### [`npm test`](../commands/npm-test)\n\n- `pretest`\n- `test`\n- `posttest`\n\n#### [`npm version`](../commands/npm-version)\n\n- `preversion`\n- `version`\n- `postversion`\n\n#### [A Note on a lack of](#a-note-on-a-lack-of-npm-uninstall-scripts) [`npm uninstall`](../commands/npm-uninstall) scripts\n\nWhile npm v6 had `uninstall` lifecycle scripts, npm v7 does not. Removal of a package can happen for a wide variety of reasons, and there's no clear way to currently give the script enough context to be useful.\n\nReasons for a package removal include:\n\n- a user directly uninstalled this package\n- a user uninstalled a dependant package and so this dependency is being uninstalled\n- a user uninstalled a dependant package but another package also depends on this version\n- this version has been merged as a duplicate with another version\n- etc.\n\nDue to the lack of necessary context, `uninstall` lifecycle scripts are not implemented and will not function.\n\n### [User](#user)\n\nWhen npm is run as root, scripts are always run with the effective uid and gid of the working directory owner.\n\n### [Environment](#environment)\n\nPackage scripts run in an environment where many pieces of information are made available regarding the setup of npm and the current state of the process.\n\n#### [path](#path)\n\nIf you depend on modules that define executable scripts, like test suites, then those executables will be added to the `PATH` for executing the scripts. So, if your package.json has this:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"bar\": \"0.1.x\"\n  },\n  \"scripts\": {\n    \"start\": \"bar ./test\"\n  }\n}\n```\n\nthen you could run `npm start` to execute the `bar` script, which is exported into the `node_modules/.bin` directory on `npm install`.\n\n#### [package.json vars](#packagejson-vars)\n\nThe package.json fields are tacked onto the `npm_package_` prefix. So, for instance, if you had `{\"name\":\"foo\", \"version\":\"1.2.5\"}` in your package.json file, then your package scripts would have the `npm_package_name` environment variable set to \"foo\", and the `npm_package_version` set to \"1.2.5\". You can access these variables in your code with `process.env.npm_package_name` and `process.env.npm_package_version`, and so on for other fields.\n\nSee [`package.json`](../configuring-npm/package-json) for more on package configs.\n\n#### [current lifecycle event](#current-lifecycle-event)\n\nLastly, the `npm_lifecycle_event` environment variable is set to whichever stage of the cycle is being executed. So, you could have a single script used for different parts of the process which switches based on what's currently happening.\n\nObjects are flattened following this format, so if you had `{\"scripts\":{\"install\":\"foo.js\"}}` in your package.json, then you'd see this in the script:\n\n``` javascript\nprocess.env.npm_package_scripts_install === \"foo.js\"\n```\n\n### [Examples](#examples)\n\nFor example, if your package.json contains this:\n\n``` javascript\n{\n  \"scripts\": {\n    \"install\": \"scripts/install.js\",\n    \"postinstall\": \"scripts/install.js\",\n    \"uninstall\": \"scripts/uninstall.js\"\n  }\n}\n```\n\nthen `scripts/install.js` will be called for the install and post-install stages of the lifecycle, and `scripts/uninstall.js` will be called when the package is uninstalled. Since `scripts/install.js` is running for two different phases, it would be wise in this case to look at the `npm_lifecycle_event` environment variable.\n\nIf you want to run a make command, you can do so. This works just fine:\n\n``` javascript\n{\n  \"scripts\": {\n    \"preinstall\": \"./configure\",\n    \"install\": \"make && make install\",\n    \"test\": \"make test\"\n  }\n}\n```\n\n### [Exiting](#exiting)\n\nScripts are run by passing the line as a script argument to `sh`.\n\nIf the script exits with a code other than 0, then this will abort the process.\n\nNote that these script files don't have to be Node.js or even JavaScript programs. They just have to be some kind of executable file.\n\n### [Best Practices](#best-practices)\n\n- Don't exit with a non-zero error code unless you *really* mean it. Except for uninstall scripts, this will cause the npm action to fail, and potentially be rolled back. If the failure is minor or only will prevent some optional features, then it's better to just print a warning and exit successfully.\n- Try not to use scripts to do what npm can do for you. Read through [`package.json`](../configuring-npm/package-json) to see all the things that you can specify and enable by simply describing your package appropriately. In general, this will lead to a more robust and consistent state.\n- Inspect the env to determine where to put things. For instance, if the `npm_config_binroot` environment variable is set to `/home/user/bin`, then don't try to install executables into `/usr/local/bin`. The user probably set it up that way for a reason.\n- Don't prefix your script commands with \"sudo\". If root permissions are required for some reason, then it'll fail with that error, and the user will sudo the npm command in question.\n- Don't use `install`. Use a `.gyp` file for compilation, and `prepare` for anything else. You should almost never have to explicitly set a preinstall or install script. If you are doing this, please consider if there is another option. The only valid use of `install` or `preinstall` scripts is for compilation which must be done on the target architecture.\n- Scripts are run from the root of the package folder, regardless of what the current working directory is when `npm` is invoked. If you want your script to use different behavior based on what subdirectory you're in, you can use the `INIT_CWD` environment variable, which holds the full path you were in when you ran `npm run`.\n\n### [See Also](#see-also)\n\n- [npm run-script](../commands/npm-run-script)\n- [package.json](../configuring-npm/package-json)\n- [npm developers](developers)\n- [npm install](../commands/npm-install)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/scripts](https://docs.npmjs.com/cli/v10/using-npm/scripts)"
- name: scripts
  id: cli/v10/configuring-npm/package-json#scripts
  summary: The "scripts" property is a dictionary containing script commands that are run at various times in the lifecycle of your package
  belongs_to: package.json
  description: |-
    ### [scripts](#scripts)

    The "scripts" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.

    See [`scripts`](../using-npm/scripts) to find out more about writing package scripts.
- name: searchexclude
  id: cli/v10/using-npm/config#searchexclude
  summary: Space-separated options that limit the results from search
  belongs_to: config
  description: |-
    #### [`searchexclude`](#searchexclude)

    - Default: ""
    - Type: String

    Space-separated options that limit the results from search.
- name: Searching for and choosing packages to download
  id: searching-for-and-choosing-packages-to-download
  summary: You can use the npm search bar to find packages to use in your projects
  description: "# Searching for and choosing packages to download\n\nYou can use the npm search bar to find packages to use in your projects. npm search uses npms and the npms analyzer; for more information on both, see [https://npms.io/about](https://npms.io/about).\n\n## [Searching for a package](#searching-for-a-package)\n\n1.  In the search bar, type a search term and press **Enter**. As you type, possible choices will appear.\n\n2.  To list packages ranked according to [package search rank criteria](#package-search-rank-criteria), in the left sidebar, under \"Sort packages\", click the criterion. For example, to sort packages by popularity, click \"Popularity\".\n\n3.  In the package search results list, click the name of the package.\n\n## [Package search rank criteria](#package-search-rank-criteria)\n\nOften, there are dozens or even hundreds of packages with similar names and/or similar purposes. To help you decide the best ones to explore, each package has been ranked according to four criteria using the npms analyzer:\n\n### [Popularity](#popularity)\n\nPopularity indicates how many times the package has been downloaded. This is a strong indicator of packages that others have found to be useful.\n\n### [Quality](#quality)\n\nQuality includes considerations such as the presence of a README file, stability, tests, up-to-date dependencies, custom website, and code complexity.\n\n### [Maintenance](#maintenance)\n\nMaintenance ranks packages according to the attention they are given by developers. More frequently maintained packages are more likely to work well with the current or upcoming versions of the npm CLI, for example.\n\n### [Optimal](#optimal)\n\nOptimal combines the other three criteria (popularity, quality, maintenance) into one score in a meaningful way.\n\n## [Package provenance](#package-provenance)\n\nWhen packages have been published with provenance, you can:\n\n- Verify where and how a package was published.\n- Validate that an authorized user published a package.\n\nYou can use this information to audit packages and determine whether or not you want to consume them. For more information about npm provenance, see \"[About npm provenance](generating-provenance-statements#about-npm-provenance).\"\n\nTo view provenance information for a package in the npm registry:\n\n1.  In the npm registry, navigate to a package.\n\n2.  On the package's page, in the **Version** field to the right of the README, look for a green check mark. If there is a green check mark, this means the package was published with provenance.\n\n3.  Click on the check mark, then click **View more details**.\n\n4.  View the following information for the package:\n\n    - **Build Environment**: The environment used to build the package.\n    - **Build Summary**: A link to the workflow run that built the package.\n    - **Source Commit**: A link to the commit the package was built from.\n    - **Build File**: A link to the workflow file used to build the package.\n    - **Public Ledger**: A link to a transparency log entry attesting an authorized user published the package.\n\n**Note:** Whenever you access a package's provenance information on npmjs.com, the linked source commit and repository are checked by npm. If the linked source commit or repository cannot be found, an error message will appear at the top of the page and alongside the provenance information. This is to inform you that the provenance for this package can no longer be established, which may occur when a repository is deleted or made private.\n\n### [Verifying provenance attestations](#verifying-provenance-attestations)\n\nWhen you download a package from the registry, you can verify the provenance of a package with the following CLI command:\n\n`npm audit signatures`\n\nThis command checks the registry signatures and provenance attestations. If a package has missing or invalid signatures or attestations, it returns an error. This could indicate that a package has been tampered with.\n\n**Note:** In order to run the audit command to verify package provenance, you must:\n\n- Install npm CLI version `v9.5.0` or later: `npm install -g npm@latest`\n- Install dependencies with `npm install` or `npm ci`\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/searching-for-and-choosing-packages-to-download](https://docs.npmjs.com/searching-for-and-choosing-packages-to-download)"
- name: searchlimit
  id: cli/v10/using-npm/config#searchlimit
  summary: Number of items to limit search results to
  belongs_to: config
  description: |-
    #### [`searchlimit`](#searchlimit)

    - Default: 20
    - Type: Number

    Number of items to limit search results to. Will not apply at all to legacy searches.
- name: searchopts
  id: cli/v10/using-npm/config#searchopts
  summary: Space-separated options that are always passed to search
  belongs_to: config
  description: |-
    #### [`searchopts`](#searchopts)

    - Default: ""
    - Type: String

    Space-separated options that are always passed to search.
- name: searchstaleness
  id: cli/v10/using-npm/config#searchstaleness
  summary: The age of the cache, in seconds, before another registry request is made if using legacy search endpoint
  belongs_to: config
  description: |-
    #### [`searchstaleness`](#searchstaleness)

    - Default: 900
    - Type: Number

    The age of the cache, in seconds, before another registry request is made if using legacy search endpoint.
- name: Securing your code
  id: packages-and-modules/securing-your-code
  summary: © npm, Inc
  description: "# Securing your code\n\n- [About audit reports](../about-audit-reports)\n- [Auditing package dependencies for security vulnerabilities](../auditing-package-dependencies-for-security-vulnerabilities)\n- [Generating provenance statements](../generating-provenance-statements)\n- [About ECDSA registry signatures](../about-registry-signatures)\n- [Verifying ECDSA registry signatures](../verifying-registry-signatures)\n- [Requiring 2FA for package publishing and settings modification](../requiring-2fa-for-package-publishing-and-settings-modification)\n- [Reporting malware in an npm package](../reporting-malware-in-an-npm-package)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/packages-and-modules/securing-your-code](https://docs.npmjs.com/packages-and-modules/securing-your-code)"
- name: see-also
  id: cli/v10/configuring-npm/package-json#see-also
  summary: © npm, Inc
  belongs_to: package.json
  description: "### [SEE ALSO](#see-also)\n\n- [semver](https://github.com/npm/node-semver#versions)\n- [workspaces](../using-npm/workspaces)\n- [npm init](../commands/npm-init)\n- [npm version](../commands/npm-version)\n- [npm config](../commands/npm-config)\n- [npm help](../commands/npm-help)\n- [npm install](../commands/npm-install)\n- [npm publish](../commands/npm-publish)\n- [npm uninstall](../commands/npm-uninstall)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/package-json](https://docs.npmjs.com/cli/v10/configuring-npm/package-json)"
- name: Setting up your npm user account
  id: getting-started/setting-up-your-npm-user-account
  summary: © npm, Inc
  description: "# Setting up your npm user account\n\n- [Creating a new user account on the public registry](../creating-a-new-npm-user-account)\n- [Creating a strong password](../creating-a-strong-password)\n- [Receiving a one-time password over email](../receiving-a-one-time-password-over-email)\n- [About two-factor authentication](../about-two-factor-authentication)\n- [Configuring two-factor authentication](../configuring-two-factor-authentication)\n- [Accessing npm using two-factor authentication](../accessing-npm-using-2fa)\n- [Recovering your 2FA-enabled account](../recovering-your-2fa-enabled-account)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/getting-started/setting-up-your-npm-user-account](https://docs.npmjs.com/getting-started/setting-up-your-npm-user-account)"
- name: shell
  id: cli/v10/using-npm/config#shell
  summary: The shell to run for the npm explore command
  belongs_to: config
  description: |-
    #### [`shell`](#shell)

    - Default: SHELL environment variable, or "bash" on Posix, or "cmd.exe" on Windows
    - Type: String

    The shell to run for the `npm explore` command.
- name: shrinkwrap
  id: cli/v10/using-npm/config#shrinkwrap
  summary: © npm, Inc
  belongs_to: config
  description: "#### [`shrinkwrap`](#shrinkwrap)\n\n- Default: true\n- Type: Boolean\n- DEPRECATED: Use the --package-lock setting instead.\n\nAlias for --package-lock\n\n### [See also](#see-also)\n\n- [npm config](../commands/npm-config)\n- [npmrc](../configuring-npm/npmrc)\n- [npm scripts](scripts)\n- [npm folders](../configuring-npm/folders)\n- [npm](../commands/npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/config](https://docs.npmjs.com/cli/v10/using-npm/config)"
- name: sign-git-commit
  id: cli/v10/using-npm/config#sign-git-commit
  summary: If set to true, then the npm version command will commit the new package version using -S to add a signature
  belongs_to: config
  description: |-
    #### [`sign-git-commit`](#sign-git-commit)

    - Default: false
    - Type: Boolean

    If set to true, then the `npm version` command will commit the new package version using `-S` to add a signature.

    Note that git requires you to have set up GPG keys in your git configs for this to work properly.
- name: sign-git-tag
  id: cli/v10/using-npm/config#sign-git-tag
  summary: If set to true, then the npm version command will tag the version using -s to add a signature
  belongs_to: config
  description: |-
    #### [`sign-git-tag`](#sign-git-tag)

    - Default: false
    - Type: Boolean

    If set to true, then the `npm version` command will tag the version using `-s` to add a signature.

    Note that git requires you to have set up GPG keys in your git configs for this to work properly.
- name: Specifying dependencies and devDependencies in a package.json file
  id: specifying-dependencies-and-devdependencies-in-a-package-json-file
  summary: To specify the packages your project depends on, you must list them as "dependencies" or "devDependencies" in your package's package.json file
  description: "# Specifying dependencies and devDependencies in a package.json file\n\nTo specify the packages your project depends on, you must list them as `\"dependencies\"` or `\"devDependencies\"` in your package's [`package.json`](creating-a-package-json-file) file. When you (or another user) run `npm install`, npm will download dependencies and devDependencies that are listed in `package.json` that meet the [semantic version](about-semantic-versioning) requirements listed for each. To see which versions of a package will be installed, use the [semver calculator](https://semver.npmjs.com/).\n\n- `\"dependencies\"`: Packages required by your application in production.\n- `\"devDependencies\"`: Packages that are only needed for local development and testing.\n\n## [Adding dependencies to a `package.json` file](#adding-dependencies-to-a-packagejson-file)\n\nYou can add dependencies to a `package.json` file from the command line or by manually editing the `package.json` file.\n\n### [Adding dependencies to a `package.json` file from the command line](#adding-dependencies-to-a-packagejson-file-from-the-command-line)\n\nTo add dependencies and devDependencies to a `package.json` file from the command line, you can install them in the root directory of your package using the `--save-prod` flag for dependencies (the default behavior of `npm install`) or the `--save-dev` flag for devDependencies.\n\nTo add an entry to the `\"dependencies\"` attribute of a `package.json` file, on the command line, run the following command:\n\n`npm install <package-name> [--save-prod]`\n\nTo add an entry to the `\"devDependencies\"` attribute of a `package.json` file, on the command line, run the following command:\n\n`npm install <package-name> --save-dev`\n\n### [Manually editing the `package.json` file](#manually-editing-the-packagejson-file)\n\nTo add dependencies to a `package.json` file, in a text editor, add an attribute called `\"dependencies\"` that references the name and [semantic version](about-semantic-versioning) of each dependency:\n\n``` javascript\n{\n  \"name\": \"my_package\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"my_dep\": \"^1.0.0\",\n    \"another_dep\": \"~2.2.0\"\n  }\n}\n```\n\nTo add devDependencies to a `package.json` file, in a text editor, add an attribute called `\"devDependencies\"` that references the name and [semantic version](about-semantic-versioning) of each devDependency:\n\n``` javascript\n\"name\": \"my_package\",\n\"version\": \"1.0.0\",\n\"dependencies\": {\n  \"my_dep\": \"^1.0.0\",\n  \"another_dep\": \"~2.2.0\"\n},\n\"devDependencies\" : {\n  \"my_test_framework\": \"^3.1.0\",\n  \"another_dev_dep\": \"1.0.0 - 1.2.0\"\n}\n```\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file](https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file)"
- name: strict-peer-deps
  id: cli/v10/using-npm/config#strict-peer-deps
  summary: If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships
  belongs_to: config
  description: |-
    #### [`strict-peer-deps`](#strict-peer-deps)

    - Default: false
    - Type: Boolean

    If set to `true`, and `--legacy-peer-deps` is not set, then *any* conflicting `peerDependencies` will be treated as an install failure, even if npm could reasonably guess the appropriate resolution based on non-peer dependency relationships.

    By default, conflicting `peerDependencies` deep in the dependency graph will be resolved using the nearest non-peer dependency specification, even if doing so will result in some packages receiving a peer dependency outside the range set in their package's `peerDependencies` object.

    When such an override is performed, a warning is printed, explaining the conflict and the packages involved. If `--strict-peer-deps` is set, then this warning is treated as a failure.
- name: strict-ssl
  id: cli/v10/using-npm/config#strict-ssl
  summary: Whether or not to do SSL key validation when making requests to the registry via https
  belongs_to: config
  description: |-
    #### [`strict-ssl`](#strict-ssl)

    - Default: true
    - Type: Boolean

    Whether or not to do SSL key validation when making requests to the registry via https.

    See also the `ca` config.
- name: tag
  id: cli/v10/using-npm/config#tag
  summary: If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag
  belongs_to: config
  description: |-
    #### [`tag`](#tag)

    - Default: "latest"
    - Type: String

    If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.

    Also the tag that is added to the package@version specified by the `npm tag` command, if no explicit tag is given.

    When used by the `npm diff` command, this is the tag used to fetch the tarball that will be compared with the local files by default.
- name: tag-version-prefix
  id: cli/v10/using-npm/config#tag-version-prefix
  summary: If set, alters the prefix used when tagging a new version when performing a version increment using npm version
  belongs_to: config
  description: |-
    #### [`tag-version-prefix`](#tag-version-prefix)

    - Default: "v"
    - Type: String

    If set, alters the prefix used when tagging a new version when performing a version increment using `npm version`. To remove the prefix altogether, set it to the empty string: `""`.

    Because other tools may rely on the convention that npm version tags look like `v1.0.0`, *only use this property if it is absolutely necessary*. In particular, use care when overriding this setting for public packages.
- name: timing
  id: cli/v10/using-npm/config#timing
  summary: If true, writes timing information to a process specific json file in the cache or logs-dir
  belongs_to: config
  description: |-
    #### [`timing`](#timing)

    - Default: false
    - Type: Boolean

    If true, writes timing information to a process specific json file in the cache or `logs-dir`. The file name ends with `-timing.json`.

    You can quickly view it with this [json](https://npm.im/json) command line: `cat ~/.npm/_logs/*-timing.json | npm exec -- json -g`.

    Timing information will also be reported in the terminal. To suppress this while still writing the timing file, use `--silent`.
- name: toc-heading
  id: cli/v10/configuring-npm/package-json#toc-heading
  summary: This document is all you need to know about what's required in your package.json file
  belongs_to: package.json
  description: "# package.json\n\nSpecifics of npm's package.json handling\n\n### [Description](#description)\n\nThis document is all you need to know about what's required in your package.json file. It must be actual JSON, not just a JavaScript object literal.\n\nA lot of the behavior described in this document is affected by the config settings described in [`config`](../using-npm/config).\n\n### [name](#name)\n\nIf you plan to publish your package, the *most* important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.\n\nThe name is what your thing is called.\n\nSome rules:\n\n- The name must be less than or equal to 214 characters. This includes the scope for scoped packages.\n- The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.\n- New packages must not have uppercase letters in the name.\n- The name ends up being part of a URL, an argument on the command line, and a folder name. Therefore, the name can't contain any non-URL-safe characters.\n\nSome tips:\n\n- Don't use the same name as a core Node module.\n- Don't put \"js\" or \"node\" in the name. It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the \"engines\" field. (See below.)\n- The name will probably be passed as an argument to require(), so it should be something short, but also reasonably descriptive.\n- You may want to check the npm registry to see if there's something by that name already, before you get too attached to it. [https://www.npmjs.com/](https://www.npmjs.com/)\n\nA name can be optionally prefixed by a scope, e.g. `@myorg/mypackage`. See [`scope`](../using-npm/scope) for more detail.\n\n### [version](#version)\n\nIf you plan to publish your package, the *most* important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.\n\nVersion must be parseable by [node-semver](https://github.com/npm/node-semver), which is bundled with npm as a dependency. (`npm install semver` to use it yourself.)\n\n### [description](#description-1)\n\nPut a description in it. It's a string. This helps people discover your package, as it's listed in `npm search`.\n\n### [keywords](#keywords)\n\nPut keywords in it. It's an array of strings. This helps people discover your package as it's listed in `npm search`.\n\n### [homepage](#homepage)\n\nThe url to the project homepage.\n\nExample:\n\n``` javascript\n\"homepage\": \"https://github.com/owner/project#readme\"\n```\n\n### [bugs](#bugs)\n\nThe url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.\n\nIt should look like this:\n\n``` javascript\n{\n  \"bugs\": {\n    \"url\": \"https://github.com/owner/project/issues\",\n    \"email\": \"project@hostname.com\"\n  }\n}\n```\n\nYou can specify either one or both values. If you want to provide only a url, you can specify the value for \"bugs\" as a simple string instead of an object.\n\nIf a url is provided, it will be used by the `npm bugs` command.\n\n### [license](#license)\n\nYou should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.\n\nIf you're using a common license such as BSD-2-Clause or MIT, add a current SPDX license identifier for the license you're using, like this:\n\n``` javascript\n{\n  \"license\": \"BSD-3-Clause\"\n}\n```\n\nYou can check [the full list of SPDX license IDs](https://spdx.org/licenses/). Ideally you should pick one that is [OSI](https://opensource.org/licenses/) approved.\n\nIf your package is licensed under multiple common licenses, use an [SPDX license expression syntax version 2.0 string](https://spdx.dev/specifications/), like this:\n\n``` javascript\n{\n  \"license\": \"(ISC OR GPL-3.0)\"\n}\n```\n\nIf you are using a license that hasn't been assigned an SPDX identifier, or if you are using a custom license, use a string value like this one:\n\n``` javascript\n{\n  \"license\": \"SEE LICENSE IN <filename>\"\n}\n```\n\nThen include a file named `<filename>` at the top level of the package.\n\nSome old packages used license objects or a \"licenses\" property containing an array of license objects:\n\n``` javascript\n// Not valid metadata\n{\n  \"license\" : {\n    \"type\" : \"ISC\",\n    \"url\" : \"https://opensource.org/licenses/ISC\"\n  }\n}\n\n\n// Not valid metadata\n{\n  \"licenses\" : [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://www.opensource.org/licenses/mit-license.php\"\n    },\n    {\n      \"type\": \"Apache-2.0\",\n      \"url\": \"https://opensource.org/licenses/apache2.0.php\"\n    }\n  ]\n}\n```\n\nThose styles are now deprecated. Instead, use SPDX expressions, like this:\n\n``` javascript\n{\n  \"license\": \"ISC\"\n}\n```\n\n``` javascript\n{\n  \"license\": \"(MIT OR Apache-2.0)\"\n}\n```\n\nFinally, if you do not wish to grant others the right to use a private or unpublished package under any terms:\n\n``` javascript\n{\n  \"license\": \"UNLICENSED\"\n}\n```\n\nConsider also setting `\"private\": true` to prevent accidental publication.\n\n### [people fields: author, contributors](#people-fields-author-contributors)\n\nThe \"author\" is one person. \"contributors\" is an array of people. A \"person\" is an object with a \"name\" field and optionally \"url\" and \"email\", like this:\n\n``` javascript\n{\n  \"name\": \"Barney Rubble\",\n  \"email\": \"b@rubble.com\",\n  \"url\": \"http://barnyrubble.tumblr.com/\"\n}\n```\n\nOr you can shorten that all into a single string, and npm will parse it for you:\n\n``` javascript\n{\n  \"author\": \"Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)\"\n}\n```\n\nBoth email and url are optional either way.\n\nnpm also sets a top-level \"maintainers\" field with your npm user info.\n\n### [funding](#funding)\n\nYou can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, or a string URL, or an array of these:\n\n``` javascript\n{\n  \"funding\": {\n    \"type\": \"individual\",\n    \"url\": \"http://example.com/donate\"\n  },\n\n\n  \"funding\": {\n    \"type\": \"patreon\",\n    \"url\": \"https://www.patreon.com/my-account\"\n  },\n\n\n  \"funding\": \"http://example.com/donate\",\n\n\n  \"funding\": [\n    {\n      \"type\": \"individual\",\n      \"url\": \"http://example.com/donate\"\n    },\n    \"http://example.com/donateAlso\",\n    {\n      \"type\": \"patreon\",\n      \"url\": \"https://www.patreon.com/my-account\"\n    }\n  ]\n}\n```\n\nUsers can use the `npm fund` subcommand to list the `funding` URLs of all dependencies of their project, direct and indirect. A shortcut to visit each funding url is also available when providing the project name such as: `npm fund <projectname>` (when there are multiple URLs, the first one will be visited)\n\n### [files](#files)\n\nThe optional `files` field is an array of file patterns that describes the entries to be included when your package is installed as a dependency. File patterns follow a similar syntax to `.gitignore`, but reversed: including a file, directory, or glob pattern (`*`, `**/*`, and such) will make it so that file is included in the tarball when it's packed. Omitting the field will make it default to `[\"*\"]`, which means it will include all files.\n\nSome special files and directories are also included or excluded regardless of whether they exist in the `files` array (see below).\n\nYou can also provide a `.npmignore` file in the root of your package or in subdirectories, which will keep files from being included. At the root of your package it will not override the \"files\" field, but in subdirectories it will. The `.npmignore` file works just like a `.gitignore`. If there is a `.gitignore` file, and `.npmignore` is missing, `.gitignore`'s contents will be used instead.\n\nCertain files are always included, regardless of settings:\n\n- `package.json`\n- `README`\n- `LICENSE` / `LICENCE`\n- The file in the \"main\" field\n- The file(s) in the \"bin\" field\n\n`README` & `LICENSE` can have any case and extension.\n\nSome files are always ignored by default:\n\n- `*.orig`\n- `.*.swp`\n- `.DS_Store`\n- `._*`\n- `.git`\n- `.npmrc`\n- `.hg`\n- `.lock-wscript`\n- `.npmrc`\n- `.svn`\n- `.wafpickle-N`\n- `CVS`\n- `config.gypi`\n- `node_modules`\n- `npm-debug.log`\n- `package-lock.json` (use [`npm-shrinkwrap.json`](npm-shrinkwrap-json) if you wish it to be published)\n- `pnpm-lock.yaml`\n- `yarn.lock`\n\nMost of these ignored files can be included specifically if included in the `files` globs. Exceptions to this are:\n\n- `.git`\n- `.npmrc`\n- `node_modules`\n- `package-lock.json`\n- `pnpm-lock.yaml`\n- `yarn.lock`\n\nThese can not be included.\n\n### [main](#main)\n\nThe main field is a module ID that is the primary entry point to your program. That is, if your package is named `foo`, and a user installs it, and then does `require(\"foo\")`, then your main module's exports object will be returned.\n\nThis should be a module relative to the root of your package folder.\n\nFor most modules, it makes the most sense to have a main script and often not much else.\n\nIf `main` is not set, it defaults to `index.js` in the package's root folder.\n\n### [browser](#browser)\n\nIf your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it might rely on primitives that aren't available in Node.js modules. (e.g. `window`)\n\n### [bin](#bin)\n\nA lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the \"npm\" executable.)\n\nTo use this, supply a `bin` field in your package.json which is a map of command name to local file name. When this package is installed globally, that file will be either linked inside the global bins directory or a cmd (Windows Command File) will be created which executes the specified file in the `bin` field, so it is available to run by `name` or `name.cmd` (on Windows PowerShell). When this package is installed as a dependency in another package, the file will be linked where it will be available to that package either directly by `npm exec` or by name in other scripts when invoking them via `npm run-script`.\n\nFor example, myapp could have this:\n\n``` javascript\n{\n  \"bin\": {\n    \"myapp\": \"./cli.js\"\n  }\n}\n```\n\nSo, when you install myapp, in case of unix-like OS it'll create a symlink from the `cli.js` script to `/usr/local/bin/myapp` and in case of windows it will create a cmd file usually at `C:\\Users\\{Username}\\AppData\\Roaming\\npm\\myapp.cmd` which runs the `cli.js` script.\n\nIf you have a single executable, and its name should be the name of the package, then you can just supply it as a string. For example:\n\n``` javascript\n{\n  \"name\": \"my-program\",\n  \"version\": \"1.2.5\",\n  \"bin\": \"./path/to/program\"\n}\n```\n\nwould be the same as this:\n\n``` javascript\n{\n  \"name\": \"my-program\",\n  \"version\": \"1.2.5\",\n  \"bin\": {\n    \"my-program\": \"./path/to/program\"\n  }\n}\n```\n\nPlease make sure that your file(s) referenced in `bin` starts with `#!/usr/bin/env node`, otherwise the scripts are started without the node executable!\n\nNote that you can also set the executable files using [directories.bin](#directoriesbin).\n\nSee [folders](folders#executables) for more info on executables.\n\n### [man](#man)\n\nSpecify either a single file or an array of filenames to put in place for the `man` program to find.\n\nIf only a single file is provided, then it's installed such that it is the result from `man <pkgname>`, regardless of its actual filename. For example:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"1.2.3\",\n  \"description\": \"A packaged foo fooer for fooing foos\",\n  \"main\": \"foo.js\",\n  \"man\": \"./man/doc.1\"\n}\n```\n\nwould link the `./man/doc.1` file in such that it is the target for `man foo`\n\nIf the filename doesn't start with the package name, then it's prefixed. So, this:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"1.2.3\",\n  \"description\": \"A packaged foo fooer for fooing foos\",\n  \"main\": \"foo.js\",\n  \"man\": [\"./man/foo.1\", \"./man/bar.1\"]\n}\n```\n\nwill create files to do `man foo` and `man foo-bar`.\n\nMan files must end with a number, and optionally a `.gz` suffix if they are compressed. The number dictates which man section the file is installed into.\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"1.2.3\",\n  \"description\": \"A packaged foo fooer for fooing foos\",\n  \"main\": \"foo.js\",\n  \"man\": [\"./man/foo.1\", \"./man/foo.2\"]\n}\n```\n\nwill create entries for `man foo` and `man 2 foo`\n\n### [directories](#directories)\n\nThe CommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0) spec details a few ways that you can indicate the structure of your package using a `directories` object. If you look at [npm's package.json](https://registry.npmjs.org/npm/latest), you'll see that it has directories for doc, lib, and man.\n\nIn the future, this information may be used in other creative ways.\n\n#### [directories.bin](#directoriesbin)\n\nIf you specify a `bin` directory in `directories.bin`, all the files in that folder will be added.\n\nBecause of the way the `bin` directive works, specifying both a `bin` path and setting `directories.bin` is an error. If you want to specify individual files, use `bin`, and for all the files in an existing `bin` directory, use `directories.bin`.\n\n#### [directories.man](#directoriesman)\n\nA folder that is full of man pages. Sugar to generate a \"man\" array by walking the folder.\n\n### [repository](#repository)\n\nSpecify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the `npm docs` command will be able to find you.\n\nDo it like this:\n\n``` javascript\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/npm/cli.git\"\n  }\n}\n```\n\nThe URL should be a publicly available (perhaps read-only) url that can be handed directly to a VCS program without any modification. It should not be a url to an html project page that you put in your browser. It's for computers.\n\nFor GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same shortcut syntax you use for `npm install`:\n\n``` javascript\n{\n  \"repository\": \"npm/npm\",\n\n\n  \"repository\": \"github:user/repo\",\n\n\n  \"repository\": \"gist:11081aaa281\",\n\n\n  \"repository\": \"bitbucket:user/repo\",\n\n\n  \"repository\": \"gitlab:user/repo\"\n}\n```\n\nIf the `package.json` for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives:\n\n``` javascript\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/facebook/react.git\",\n    \"directory\": \"packages/react-dom\"\n  }\n}\n```\n\n### [scripts](#scripts)\n\nThe \"scripts\" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.\n\nSee [`scripts`](../using-npm/scripts) to find out more about writing package scripts.\n\n### [config](#config)\n\nA \"config\" object can be used to set configuration parameters used in package scripts that persist across upgrades. For instance, if a package had the following:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"config\": {\n    \"port\": \"8080\"\n  }\n}\n```\n\nIt could also have a \"start\" command that referenced the `npm_package_config_port` environment variable.\n\n### [dependencies](#dependencies)\n\nDependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.\n\n**Please do not put test harnesses or transpilers or other \"development\" time tools in your `dependencies` object.** See `devDependencies`, below.\n\nSee [semver](https://github.com/npm/node-semver#versions) for more details about specifying version ranges.\n\n- `version` Must match `version` exactly\n- `>version` Must be greater than `version`\n- `>=version` etc\n- `<version`\n- `<=version`\n- `~version` \"Approximately equivalent to version\" See [semver](https://github.com/npm/node-semver#versions)\n- `^version` \"Compatible with version\" See [semver](https://github.com/npm/node-semver#versions)\n- `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0\n- `http://...` See 'URLs as Dependencies' below\n- `*` Matches any version\n- `\"\"` (just an empty string) Same as `*`\n- `version1 - version2` Same as `>=version1 <=version2`.\n- `range1 || range2` Passes if either range1 or range2 are satisfied.\n- `git...` See 'Git URLs as Dependencies' below\n- `user/repo` See 'GitHub URLs' below\n- `tag` A specific version tagged and published as `tag` See [`npm dist-tag`](../commands/npm-dist-tag)\n- `path/path/path` See [Local Paths](#local-paths) below\n\nFor example, these are all valid:\n\n``` javascript\n{\n  \"dependencies\": {\n    \"foo\": \"1.0.0 - 2.9999.9999\",\n    \"bar\": \">=1.0.2 <2.1.2\",\n    \"baz\": \">1.0.2 <=2.3.4\",\n    \"boo\": \"2.0.1\",\n    \"qux\": \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\",\n    \"asd\": \"http://asdf.com/asdf.tar.gz\",\n    \"til\": \"~1.2\",\n    \"elf\": \"~1.2.3\",\n    \"two\": \"2.x\",\n    \"thr\": \"3.3.x\",\n    \"lat\": \"latest\",\n    \"dyl\": \"file:../dyl\"\n  }\n}\n```\n\n#### [URLs as Dependencies](#urls-as-dependencies)\n\nYou may specify a tarball URL in place of a version range.\n\nThis tarball will be downloaded and installed locally to your package at install time.\n\n#### [Git URLs as Dependencies](#git-urls-as-dependencies)\n\nGit urls are of the form:\n\n``` javascript\n<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]\n```\n\n`<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`, or `git+file`.\n\nIf `#<commit-ish>` is provided, it will be used to clone exactly that commit. If the commit-ish has the format `#semver:<semver>`, `<semver>` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither `#<commit-ish>` or `#semver:<semver>` is specified, then the default branch is used.\n\nExamples:\n\n``` javascript\ngit+ssh://git@github.com:npm/cli.git#v1.0.27\ngit+ssh://git@github.com:npm/cli#semver:^5.0\ngit+https://isaacs@github.com/npm/cli.git\ngit://github.com/npm/cli.git#v1.0.27\n```\n\nWhen installing from a `git` repository, the presence of certain fields in the `package.json` will cause npm to believe it needs to perform a build. To do so your repository will be cloned into a temporary directory, all of its deps installed, relevant scripts run, and the resulting directory packed and installed.\n\nThis flow will occur if your git dependency uses `workspaces`, or if any of the following scripts are present:\n\n- `build`\n- `prepare`\n- `prepack`\n- `preinstall`\n- `install`\n- `postinstall`\n\nIf your git repository includes pre-built artifacts, you will likely want to make sure that none of the above scripts are defined, or your dependency will be rebuilt for every installation.\n\n#### [GitHub URLs](#github-urls)\n\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\": \"user/foo-project\". Just as with git URLs, a `commit-ish` suffix can be included. For example:\n\n``` javascript\n{\n  \"name\": \"foo\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"express\": \"expressjs/express\",\n    \"mocha\": \"mochajs/mocha#4727d357ea\",\n    \"module\": \"user/repo#feature/branch\"\n  }\n}\n```\n\n#### [Local Paths](#local-paths)\n\nAs of version 2.0.0 you can provide a path to a local directory that contains a package. Local paths can be saved using `npm install -S` or `npm install --save`, using any of these forms:\n\n``` javascript\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n```\n\nin which case they will be normalized to a relative path and added to your `package.json`. For example:\n\n``` javascript\n{\n  \"name\": \"baz\",\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\n```\n\nThis feature is helpful for local offline development and creating tests that require npm installing where you don't want to hit an external server, but should not be used when publishing packages to the public registry.\n\n*note*: Packages linked by local path will not have their own dependencies installed when `npm install` is ran in this case. You must run `npm install` from inside the local path itself.\n\n### [devDependencies](#devdependencies)\n\nIf someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.\n\nIn this case, it's best to map these additional items in a `devDependencies` object.\n\nThese things will be installed when doing `npm link` or `npm install` from the root of a package, and can be managed like any other npm configuration param. See [`config`](../using-npm/config) for more on the topic.\n\nFor build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the `prepare` script to do this, and make the required package a devDependency.\n\nFor example:\n\n``` javascript\n{\n  \"name\": \"ethopia-waza\",\n  \"description\": \"a delightfully fruity coffee varietal\",\n  \"version\": \"1.2.3\",\n  \"devDependencies\": {\n    \"coffee-script\": \"~1.6.3\"\n  },\n  \"scripts\": {\n    \"prepare\": \"coffee -o lib/ -c src/waza.coffee\"\n  },\n  \"main\": \"lib/waza.js\"\n}\n```\n\nThe `prepare` script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally running `npm install`), it'll run this script as well, so that you can test it easily.\n\n### [peerDependencies](#peerdependencies)\n\nIn some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a `require` of this host. This is usually referred to as a *plugin*. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.\n\nFor example:\n\n``` javascript\n{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\"\n  }\n}\n```\n\nThis ensures your package `tea-latte` can be installed *along* with the second major version of the host package `tea` only. `npm install tea-latte` could possibly yield the following dependency graph:\n\n``` javascript\n├── tea-latte@1.3.5\n└── tea@2.2.0\n```\n\nIn npm versions 3 through 6, `peerDependencies` were not automatically installed, and would raise a warning if an invalid version of the peer dependency was found in the tree. As of npm v7, peerDependencies *are* installed by default.\n\nTrying to install another plugin with a conflicting requirement may cause an error if the tree cannot be resolved correctly. For this reason, make sure your plugin requirement is as broad as possible, and not to lock it down to specific patch versions.\n\nAssuming the host complies with [semver](https://semver.org/), only changes in the host package's major version will break your plugin. Thus, if you've worked with every 1.x version of the host package, use `\"^1.0\"` or `\"1.x\"` to express this. If you depend on features introduced in 1.5.2, use `\"^1.5.2\"`.\n\n### [peerDependenciesMeta](#peerdependenciesmeta)\n\nWhen a user installs your package, npm will emit warnings if packages specified in `peerDependencies` are not already installed. The `peerDependenciesMeta` field serves to provide npm more information on how your peer dependencies are to be used. Specifically, it allows peer dependencies to be marked as optional.\n\nFor example:\n\n``` javascript\n{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\",\n    \"soy-milk\": \"1.2\"\n  },\n  \"peerDependenciesMeta\": {\n    \"soy-milk\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\nMarking a peer dependency as optional ensures npm will not emit a warning if the `soy-milk` package is not installed on the host. This allows you to integrate and interact with a variety of host packages without requiring all of them to be installed.\n\n### [bundleDependencies](#bundledependencies)\n\nThis defines an array of package names that will be bundled when publishing the package.\n\nIn cases where you need to preserve npm packages locally or have them available through a single file download, you can bundle the packages in a tarball file by specifying the package names in the `bundleDependencies` array and executing `npm pack`.\n\nFor example:\n\nIf we define a package.json like this:\n\n``` javascript\n{\n  \"name\": \"awesome-web-framework\",\n  \"version\": \"1.0.0\",\n  \"bundleDependencies\": [\"renderized\", \"super-streams\"]\n}\n```\n\nwe can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`. This file contains the dependencies `renderized` and `super-streams` which can be installed in a new project by executing `npm install awesome-web-framework-1.0.0.tgz`. Note that the package names do not include any versions, as that information is specified in `dependencies`.\n\nIf this is spelled `\"bundledDependencies\"`, then that is also honored.\n\nAlternatively, `\"bundleDependencies\"` can be defined as a boolean value. A value of `true` will bundle all dependencies, a value of `false` will bundle none.\n\n### [optionalDependencies](#optionaldependencies)\n\nIf a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the `optionalDependencies` object. This is a map of package name to version or url, just like the `dependencies` object. The difference is that build failures do not cause installation to fail. Running `npm install --omit=optional` will prevent these dependencies from being installed.\n\nIt is still your program's responsibility to handle the lack of the dependency. For example, something like this:\n\n``` javascript\ntry {\n  var foo = require(\"foo\");\n  var fooVersion = require(\"foo/package.json\").version;\n} catch (er) {\n  foo = null;\n}\nif (notGoodFooVersion(fooVersion)) {\n  foo = null;\n}\n\n\n// .. then later in your program ..\n\n\nif (foo) {\n  foo.doFooThings();\n}\n```\n\nEntries in `optionalDependencies` will override entries of the same name in `dependencies`, so it's usually best to only put in one place.\n\n### [overrides](#overrides)\n\nIf you need to make specific changes to dependencies of your dependencies, for example replacing the version of a dependency with a known security issue, replacing an existing dependency with a fork, or making sure that the same version of a package is used everywhere, then you may add an override.\n\nOverrides provide a way to replace a package in your dependency tree with another version, or another package entirely. These changes can be scoped as specific or as vague as desired.\n\nTo make sure the package `foo` is always installed as version `1.0.0` no matter what version your dependencies rely on:\n\n``` javascript\n{\n  \"overrides\": {\n    \"foo\": \"1.0.0\"\n  }\n}\n```\n\nThe above is a short hand notation, the full object form can be used to allow overriding a package itself as well as a child of the package. This will cause `foo` to always be `1.0.0` while also making `bar` at any depth beyond `foo` also `1.0.0`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"foo\": {\n      \".\": \"1.0.0\",\n      \"bar\": \"1.0.0\"\n    }\n  }\n}\n```\n\nTo only override `foo` to be `1.0.0` when it's a child (or grandchild, or great grandchild, etc) of the package `bar`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"bar\": {\n      \"foo\": \"1.0.0\"\n    }\n  }\n}\n```\n\nKeys can be nested to any arbitrary length. To override `foo` only when it's a child of `bar` and only when `bar` is a child of `baz`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"baz\": {\n      \"bar\": {\n        \"foo\": \"1.0.0\"\n      }\n    }\n  }\n}\n```\n\nThe key of an override can also include a version, or range of versions. To override `foo` to `1.0.0`, but only when it's a child of `bar@2.0.0`:\n\n``` javascript\n{\n  \"overrides\": {\n    \"bar@2.0.0\": {\n      \"foo\": \"1.0.0\"\n    }\n  }\n}\n```\n\nYou may not set an override for a package that you directly depend on unless both the dependency and the override itself share the exact same spec. To make this limitation easier to deal with, overrides may also be defined as a reference to a spec for a direct dependency by prefixing the name of the package you wish the version to match with a `$`.\n\n``` javascript\n{\n  \"dependencies\": {\n    \"foo\": \"^1.0.0\"\n  },\n  \"overrides\": {\n    // BAD, will throw an EOVERRIDE error\n    // \"foo\": \"^2.0.0\"\n    // GOOD, specs match so override is allowed\n    // \"foo\": \"^1.0.0\"\n    // BEST, the override is defined as a reference to the dependency\n    \"foo\": \"$foo\",\n    // the referenced package does not need to match the overridden one\n    \"bar\": \"$foo\"\n  }\n}\n```\n\n### [engines](#engines)\n\nYou can specify the version of node that your stuff works on:\n\n``` javascript\n{\n  \"engines\": {\n    \"node\": \">=0.10.3 <15\"\n  }\n}\n```\n\nAnd, like with dependencies, if you don't specify the version (or if you specify \"\\*\" as the version), then any version of node will do.\n\nYou can also use the \"engines\" field to specify which versions of npm are capable of properly installing your program. For example:\n\n``` javascript\n{\n  \"engines\": {\n    \"npm\": \"~1.0.20\"\n  }\n}\n```\n\nUnless the user has set the [`engine-strict` config](../using-npm/config#engine-strict) flag, this field is advisory only and will only produce warnings when your package is installed as a dependency.\n\n### [os](#os)\n\nYou can specify which operating systems your module will run on:\n\n``` javascript\n{\n  \"os\": [\"darwin\", \"linux\"]\n}\n```\n\nYou can also block instead of allowing operating systems, just prepend the blocked os with a '!':\n\n``` javascript\n{\n  \"os\": [\"!win32\"]\n}\n```\n\nThe host operating system is determined by `process.platform`\n\nIt is allowed to both block and allow an item, although there isn't any good reason to do this.\n\n### [cpu](#cpu)\n\nIf your code only runs on certain cpu architectures, you can specify which ones.\n\n``` javascript\n{\n  \"cpu\": [\"x64\", \"ia32\"]\n}\n```\n\nLike the `os` option, you can also block architectures:\n\n``` javascript\n{\n  \"cpu\": [\"!arm\", \"!mips\"]\n}\n```\n\nThe host architecture is determined by `process.arch`\n\n### [private](#private)\n\nIf you set `\"private\": true` in your package.json, then npm will refuse to publish it.\n\nThis is a way to prevent accidental publication of private repositories. If you would like to ensure that a given package is only ever published to a specific registry (for example, an internal registry), then use the `publishConfig` dictionary described below to override the `registry` config param at publish-time.\n\n### [publishConfig](#publishconfig)\n\nThis is a set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with \"latest\", published to the global public registry or that a scoped module is private by default.\n\nSee [`config`](../using-npm/config) to see the list of config options that can be overridden.\n\n### [workspaces](#workspaces)\n\nThe optional `workspaces` field is an array of file patterns that describes locations within the local file system that the install client should look up to find each [workspace](../using-npm/workspaces) that needs to be symlinked to the top level `node_modules` folder.\n\nIt can describe either the direct paths of the folders to be used as workspaces or it can define globs that will resolve to these same folders.\n\nIn the following example, all folders located inside the folder `./packages` will be treated as workspaces as long as they have valid `package.json` files inside them:\n\n``` javascript\n{\n  \"name\": \"workspace-example\",\n  \"workspaces\": [\"./packages/*\"]\n}\n```\n\nSee [`workspaces`](../using-npm/workspaces) for more examples.\n\n### [DEFAULT VALUES](#default-values)\n\nnpm will default some values based on package contents.\n\n- `\"scripts\": {\"start\": \"node server.js\"}`\n\n  If there is a `server.js` file in the root of your package, then npm will default the `start` command to `node server.js`.\n\n- `\"scripts\":{\"install\": \"node-gyp rebuild\"}`\n\n  If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will default the `install` command to compile using node-gyp.\n\n- `\"contributors\": [...]`\n\n  If there is an `AUTHORS` file in the root of your package, npm will treat each line as a `Name <email> (url)` format, where email and url are optional. Lines which start with a `#` or are blank, will be ignored.\n\n### [SEE ALSO](#see-also)\n\n- [semver](https://github.com/npm/node-semver#versions)\n- [workspaces](../using-npm/workspaces)\n- [npm init](../commands/npm-init)\n- [npm version](../commands/npm-version)\n- [npm config](../commands/npm-config)\n- [npm help](../commands/npm-help)\n- [npm install](../commands/npm-install)\n- [npm publish](../commands/npm-publish)\n- [npm uninstall](../commands/npm-uninstall)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/configuring-npm/package-json](https://docs.npmjs.com/cli/v10/configuring-npm/package-json)"
- name: Transferring a package from a user account to another user account
  id: transferring-a-package-from-a-user-account-to-another-user-account
  summary: As a package owner or maintainer, you can transfer ownership of a package you no longer wish to maintain to another trusted npm user using either the npm website or the command line
  description: "# Transferring a package from a user account to another user account\n\nAs a package owner or maintainer, you can transfer ownership of a package you no longer wish to maintain to another trusted npm user using either the npm website or the command line.\n\nFor more information on how npm support handles package name disputes between users, you can refer to npm's [package name dispute policy](https://docs.npmjs.com/policies/disputes).\n\n**Note:** You cannot transfer a scoped package to another user account or organization, because a package's scope *is* the user account or organization name. You will need to create a new package in the new scope.\n\n## [Transferring a package from a user account to another user account on the website](#transferring-a-package-from-a-user-account-to-another-user-account-on-the-website)\n\nTo transfer a package you own or maintain to another user, follow these steps:\n\n1.  Navigate to the package page for the package you want to transfer, replacing `<your-package-name>` with the name of your package: `https://www.npmjs.com/package/<your-package-name>`.\n\n2.  On the package Admin tab, under \"Maintainers\", enter the npm username of the new maintainer.\n\n3.  Click \"Invite.\"\n\n4.  To remove yourself as a maintainer, under the maintainers list, click the \"x\" next to your username.\n\n## [Transferring a package from a user account to another user account on the command line](#transferring-a-package-from-a-user-account-to-another-user-account-on-the-command-line)\n\nTo transfer a package to another npm user using the CLI, run the [`npm owner add`](https://docs.npmjs.com/cli/v8/commands/npm-owner/) command replacing `<their-username>` with the other user's npm username. An email invitation is sent to the other user. After the user has accepted the invitation, run the `npm owner rm` command replacing `<your-username>` with your npm username:\n\n``` javascript\nnpm owner add <their-username> <package-name>\n\n\n# new maintainer accepts invitation\n\n\nnpm owner rm <your-username> <package-name>\n```\n\nIf you have two-factor authentication enabled for writes, add a one-time password to the command, `--otp=123456` (where *123456* is the code from your authenticator application).\n\n``` javascript\nnpm owner add <their-username> <package-name> --otp=123456\n\n\n# new maintainer accepts invitation\n\n\nnpm owner rm <your-username> <package-name> --otp=123456\n```\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/transferring-a-package-from-a-user-account-to-another-user-account](https://docs.npmjs.com/transferring-a-package-from-a-user-account-to-another-user-account)"
- name: Troubleshooting
  id: getting-started/troubleshooting
  summary: © npm, Inc
  description: "# Troubleshooting\n\n- [Generating and locating npm-debug.log files](../generating-and-locating-npm-debug.log-files)\n- [Common errors](../common-errors)\n- [Try the latest stable version of node](../try-the-latest-stable-version-of-node)\n- [Try the latest stable version of npm](../try-the-latest-stable-version-of-npm)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/getting-started/troubleshooting](https://docs.npmjs.com/getting-started/troubleshooting)"
- name: Try the latest stable version of node
  id: try-the-latest-stable-version-of-node
  summary: If you're experiencing issues while using a version of node which is unsupported or unstable (odd numbered versions e.g
  description: "# Try the latest stable version of node\n\nIf you're experiencing issues while using a version of node which is unsupported or unstable (odd numbered versions e.g. 0.7.x, 0.9.x, 0.11.x), it's very possible your issue will be fixed by simply using the [LTS](https://github.com/nodejs/LTS) version of node.\n\n## [See what version of node you're running:](#see-what-version-of-node-youre-running)\n\n`node -v`\n\n### [Updating node on Linux](#updating-node-on-linux)\n\nFor some Linux distributions (Debian/Ubuntu and RedHat/CentOS), the latest node version provided by the distribution may lag behind the stable version. Here are [instructions from NodeSource](https://github.com/nodesource/distributions) on getting the latest node.\n\n### [Updating node on Windows](#updating-node-on-windows)\n\nInstall the latest msi from [https://nodejs.org/en/download](https://nodejs.org/en/download)\n\n### [Updating node on OSX](#updating-node-on-osx)\n\nInstall the latest package from [https://nodejs.org/en/download](https://nodejs.org/en/download)\n\nor if you are using [homebrew](http://brew.sh/)\n\n`brew install node`\n\n### [An easy way to stay up-to-date](#an-easy-way-to-stay-up-to-date)\n\nNode.js has lots of versions, and its development is very active. As a good practice to manage the various versions, we recommend that you use a version manager for your Node.js installation. There are many great options, here are a few:\n\n- [NVM](https://github.com/creationix/nvm)\n- [nodist](https://github.com/marcelklehr/nodist)\n- [n](https://github.com/tj/n)\n- [nave](https://github.com/isaacs/nave)\n- [nodebrew](https://github.com/hokaccha/nodebrew)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/try-the-latest-stable-version-of-node](https://docs.npmjs.com/try-the-latest-stable-version-of-node)"
- name: Try the latest stable version of npm
  id: try-the-latest-stable-version-of-npm
  summary: C:\Users\<username>\AppData\Roaming\npm)
  description: "# Try the latest stable version of npm\n\n## [See what version of npm you're running](#see-what-version-of-npm-youre-running)\n\n`npm -v`\n\n## [Upgrading on `*nix` (OSX, Linux, etc.)](#upgrading-on-nix-osx-linux-etc)\n\n*(You may need to prefix these commands with `sudo`, especially on Linux, or OS X if you installed Node using its default installer.)*\n\nYou can upgrade to the latest version of npm using:\n\n`npm install -g npm@latest`\n\n## [Upgrading on Windows](#upgrading-on-windows)\n\nBy default, npm is installed alongside node in\n\n`C:\\Program Files (x86)\\nodejs`\n\nnpm's globally installed packages (including, potentially, npm itself) are stored separately in a user-specific directory (which is currently\n\n`C:\\Users\\<username>\\AppData\\Roaming\\npm`).\n\nBecause the installer puts\n\n`C:\\Program Files (x86)\\nodejs`\n\nbefore\n\n`C:\\Users\\<username>\\AppData\\Roaming\\npm`\n\non your `PATH`, it will always use the version of npm installed with node instead of the version of npm you installed using `npm -g install npm@<version>`.\n\nTo get around this, you can do **one** of the following:\n\n- Option 1: [edit your Windows installation's `PATH`](http://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them) to put `%appdata%\\npm` before `%ProgramFiles%\\nodejs`. Remember that you'll need to restart `cmd.exe` (and potentially restart Windows) when you make changes to `PATH` or how npm is installed.\n\n- Option 2: remove both of\n\n  - `%ProgramFiles%\\nodejs\\npm`\n  - `%ProgramFiles%\\nodejs\\npm.cmd`\n\n- Option 3: Navigate to `%ProgramFiles%\\nodejs\\node_modules\\npm` and copy the `npmrc`file to another folder or the desktop. Then open `cmd.exe` as an administrator and run the following commands:\n\n``` javascript\ncd %ProgramFiles%\\nodejs\nnpm install npm@latest\n```\n\nIf you installed npm with the node.js installer, after doing one of the previous steps, do the following.\n\n- Option 1 or 2\n\n  - Go into `%ProgramFiles%\\nodejs\\node_modules\\npm` and copy the file named `npmrc` in the new npm folder, which should be `%appdata%\\npm\\node_modules\\npm`. This will tell the new npm where the global installed packages are.\n\n- Option 3\n\n  - Copy the npmrc file back into `%ProgramFiles%\\nodejs\\node_modules\\npm`\n\n*(See also the [point below](common-errors#error-enoent-stat-cusersuserappdataroamingnpm-on-windows-7) if you're running Windows 7 and don't have the directory `%appdata%\\npm`.)*\n\n### [A brief note on the built-in Windows configuration](#a-brief-note-on-the-built-in-windows-configuration)\n\nThe Node installer installs, directly into the npm folder, a special piece of Windows-specific configuration that tells npm where to install global packages. When npm is used to install itself, it is supposed to copy this special `builtin` configuration into the new install. There was a bug in some versions of npm that kept this from working, so you may need to go in and fix that up by hand. Run the following command to see where npm will install global packages to verify it is correct.\n\n`npm config get prefix -g`\n\nIf it isn't set to `<X>:\\Users\\<user>\\AppData\\Roaming\\npm`, you can run the below command to correct it:\n\n`npm config set prefix %APPDATA%\\npm -g`\n\nIncidentally, if you would prefer that packages not be installed to your roaming profile (because you have a quota on your shared network, or it makes logging in or out from a domain sluggish), you can put it in your local app data instead:\n\n`npm config set prefix %LOCALAPPDATA%\\npm -g`\n\n...as well as copying `%APPDATA%\\npm` to `%LOCALAPPDATA%\\npm` (and updating your `%PATH%`, of course).\n\nEveryone who works on npm knows that this process is complicated and fraught, and we're working on making it simpler. Stay tuned.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/try-the-latest-stable-version-of-npm](https://docs.npmjs.com/try-the-latest-stable-version-of-npm)"
- name: umask
  id: cli/v10/using-npm/config#umask
  summary: The "umask" value to use when setting the file creation mode on files and folders
  belongs_to: config
  description: |-
    #### [`umask`](#umask)

    - Default: 0
    - Type: Octal numeric string in range 0000..0777 (0..511)

    The "umask" value to use when setting the file creation mode on files and folders.

    Folders and executables are given a mode which is `0o777` masked against this value. Other files are given a mode which is `0o666` masked against this value.

    Note that the underlying system will *also* apply its own umask value to files and folders that are created, and npm does not circumvent this, but rather adds the `--umask` config to it.

    Thus, the effective default umask value on most POSIX systems is 0o22, meaning that folders and executables are created with a mode of 0o755 and other files are created with a mode of 0o644.
- name: unicode
  id: cli/v10/using-npm/config#unicode
  summary: When set to true, npm uses unicode characters in the tree output
  belongs_to: config
  description: |-
    #### [`unicode`](#unicode)

    - Default: false on windows, true on mac/unix systems with a unicode locale, as defined by the `LC_ALL`, `LC_CTYPE`, or `LANG` environment variables.
    - Type: Boolean

    When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters instead of unicode glyphs.
- name: Uninstalling packages and dependencies
  id: uninstalling-packages-and-dependencies
  summary: If you no longer need to use a package in your code, we recommend uninstalling it and removing it from your project's dependencies
  description: "# Uninstalling packages and dependencies\n\nIf you no longer need to use a package in your code, we recommend uninstalling it and removing it from your project's dependencies.\n\n## [Uninstalling local packages](#uninstalling-local-packages)\n\n### [Removing a local package from your node_modules directory](#removing-a-local-package-from-your-node_modules-directory)\n\nTo remove a package from your node_modules directory, on the command line, use the [`uninstall` command](https://docs.npmjs.com/cli/v8/commands/npm-uninstall/). Include the scope if the package is scoped.\n\nThis uninstalls a package, completely removing everything npm installed on its behalf.\n\nIt also removes the package from the dependencies, devDependencies, optionalDependencies, and peerDependencies objects in your package.json.\n\nFurther, if you have an npm-shrinkwrap.json or package-lock.json, npm will update those files as well.\n\n#### [Unscoped package](#unscoped-package)\n\n`npm uninstall <package_name>`\n\n#### [Scoped package](#scoped-package)\n\n`npm uninstall <@scope/package_name>`\n\n### [Example](#example)\n\n`npm uninstall lodash`\n\n### [Removing a local package without removing it from package.json](#removing-a-local-package-without-removing-it-from-packagejson)\n\nUsing the `--no-save` will tell npm not to remove the package from your `package.json`, `npm-shrinkwrap.json`, or `package-lock.json` files.\n\n### [Example](#example-1)\n\n`npm uninstall --no-save lodash`\n\n`--save` or `-S` will tell npm to remove the package from your `package.json`, `npm-shrinkwrap.json`, and `package-lock.json` files. **This is the default**, but you may need to use this if you have for instance `save=false` in your `.npmrc` file.\n\n### [Confirming local package uninstallation](#confirming-local-package-uninstallation)\n\nTo confirm that `npm uninstall` worked correctly, check that the `node_modules` directory no longer contains a directory for the uninstalled package(s).\n\n- Unix system (such as OSX): `ls node_modules`\n- Windows systems: `dir node_modules`\n\n## [Uninstalling global packages](#uninstalling-global-packages)\n\nTo uninstall an unscoped global package, on the command line, use the `uninstall` command with the `-g` flag. Include the scope if the package is scoped.\n\n### [Unscoped package](#unscoped-package-1)\n\n`npm uninstall -g <package_name>`\n\n### [Scoped package](#scoped-package-1)\n\n`npm uninstall -g <@scope/package_name>`\n\n### [Example](#example-2)\n\nFor example, to uninstall a package called `jshint`, run:\n\n`npm uninstall -g jshint`\n\n## [Resources](#resources)\n\n### [Uninstalling local packages](#uninstalling-local-packages-1)\n\n### [Uninstalling global packages](#uninstalling-global-packages-1)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/uninstalling-packages-and-dependencies](https://docs.npmjs.com/uninstalling-packages-and-dependencies)"
- name: Unpublishing packages from the registry
  id: unpublishing-packages-from-the-registry
  summary: As a package owner or collaborator, if your package has no dependents, you can permanently remove it from the npm registry by using the CLI
  description: "# Unpublishing packages from the registry\n\nAs a package owner or collaborator, if your package has no dependents, you can permanently remove it from the npm registry by using the CLI. You can [unpublish](cli/commands/npm-unpublish) within 72 hours of the initial publish; beyond 72 hours, you can still unpublish your package if [it meets certain criteria](https://www.npmjs.com/policies/unpublish).\n\nThese criteria are set to avoid damaging the JavaScript package ecosystem. If you cannot unpublish your package, you can [deprecate it instead](deprecating-and-undeprecating-packages-or-package-versions).\n\n**Note:** Removing all the collaborators or teams from the package will not unpublish it.\n\n## [Unpublishing a package](#unpublishing-a-package)\n\nIf you want to completely remove all versions of a package from the registry, you can unpublish it completely. This will delete it from the registry and it will be unable to be installed.\n\nTo unpublish a package, you must meet the requirements of the [package unpublishing rules](https://docs.npmjs.com/policies/unpublish).\n\n### [Using the website](#using-the-website)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  Navigate to the package page for the package you want to unpublish, replacing `<your-package-name>` with the name of your package: `https://www.npmjs.com/package/<your-package-name>`.\n\n3.  Click **Settings**.\n\n4.  Under \"delete package\", click **Delete package**.\n\n    **Note:** If you cannot delete the package because it does not meet the [unpublishing requirements](https://docs.npmjs.com/policies/unpublish), then the delete package option will not be available. Instead, you will be prompted to [deprecate the package](deprecating-and-undeprecating-packages-or-package-versions#deprecating-a-package-from-the-website).\n\n5.  If you are sure that you want to continue, enter your package name and click **Delete package**.\n\n### [Using the command line](#using-the-command-line)\n\nTo unpublish an entire package, run the following command, replacing `<package-name>` with the name of your package:\n\n`npm unpublish <package-name> -f`\n\nIf you have [two-factor authentication](about-two-factor-authentication) enabled for writes, you will need to add a one-time password to the `unpublish` command, `--otp=123456` (where *123456* is the code from your authenticator app).\n\nIf you need help unpublishing your package, please [contact npm Support](https://www.npmjs.com/support). If you are an Enterprise customer, please [contact Enterprise Support](mailto:enterprise@npmjs.com).\n\n**Note:** If you unpublish an entire package, you may not publish any new versions of that package until 24 hours have passed.\n\n## [Unpublishing a single version of a package](#unpublishing-a-single-version-of-a-package)\n\nIf you want to remove a single version of a package, you can unpublish one version without affecting the others. This will delete only that version from the registry and it will be unable to be installed. This option is only available via the npm CLI.\n\n### [Using the command line](#using-the-command-line-1)\n\nTo unpublish a single version of a package, run the following command, replacing `<package-name>` with the name of your package, and `<version>` with your version number:\n\n`npm unpublish <package-name>@<version>`\n\n## [When to unpublish](#when-to-unpublish)\n\nUnpublishing a package permanently removes the package from the registry so it is no longer available for other users to install. Once a package is unpublished, republishing under the same name is blocked for 24 hours. If you've unpublished a package by mistake, we'd recommend publishing again under a different name, or for unpublished versions, bumping the version number and publishing again.\n\nYou might want to unpublish a package because you:\n\n- Published something accidentally.\n- Wanted to test npm.\n- Published content you [didn't intend to be public](https://blog.npmjs.org/post/101934969510/oh-no-i-accidentally-published-private-data-to).\n- Want to rename a package. (The only way to rename a package is to re-publish it under a new name)\n\n**Note:** `package-name@version` is unique, and cannot be reused by unpublishing and re-publishing it. We recommend publishing a minor version update instead.\n\n## [When to deprecate](#when-to-deprecate)\n\nIf you are no longer interested in maintaining a package, but want it to remain available for users to install, or if your package has dependents, we'd recommend [deprecating](https://docs.npmjs.com/cli/v8/commands/npm-deprecate/) it. To learn about how to deprecate a package, see \"[Deprecating and undeprecating packages or package versions](deprecating-and-undeprecating-packages-or-package-versions)\".\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/unpublishing-packages-from-the-registry](https://docs.npmjs.com/unpublishing-packages-from-the-registry)"
- name: update-notifier
  id: cli/v10/using-npm/config#update-notifier
  summary: Set to false to suppress the update notification when using an older version of npm than the latest
  belongs_to: config
  description: |-
    #### [`update-notifier`](#update-notifier)

    - Default: true
    - Type: Boolean

    Set to false to suppress the update notification when using an older version of npm than the latest.
- name: Updating and managing your published packages
  id: packages-and-modules/updating-and-managing-your-published-packages
  summary: © npm, Inc
  description: "# Updating and managing your published packages\n\n- [Changing package visibility](../changing-package-visibility)\n- [Adding collaborators to private packages owned by a user account](../adding-collaborators-to-private-packages-owned-by-a-user-account)\n- [Updating your published package version number](../updating-your-published-package-version-number)\n- [Deprecating and undeprecating packages or package versions](../deprecating-and-undeprecating-packages-or-package-versions)\n- [Transferring a package from a user account to another user account](../transferring-a-package-from-a-user-account-to-another-user-account)\n- [Unpublishing packages from the registry](../unpublishing-packages-from-the-registry)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/packages-and-modules/updating-and-managing-your-published-packages](https://docs.npmjs.com/packages-and-modules/updating-and-managing-your-published-packages)"
- name: Updating organization billing settings
  id: updating-organization-billing-settings
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Updating organization billing settings\n\n**Note:** This article only applies to users of the public npm registry.\n\nAs an owner of an npm Teams subscription, a paid organization plan, you can update the credit card used to pay for your plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.\n\n**Note:** If the credit card used to pay for your npm Teams subscription or your paid organization plan expires, or we are otherwise are unable to charge your card, you have a grace period of nine days to update the card.\n\n## [Updating credit card information](#updating-credit-card-information)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization whose credit card information you want to change.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  Under \"monthly bill\", click **Edit Payment Info**.\n\n6.  In the billing information dialog box, enter your billing information:\n    - Email: the email address used for the billing contact\n    - Name: the name on the credit card used to pay\n    - Street, City, ZIP Code, Country: the billing address associated with the credit card\n\n7.  Click **Payment Info**.\n\n8.  In the credit card information dialog box, enter your credit card information:\n    - Card number\n    - MM / YY: the month and year of the card expiration date\n    - CVC: the three-digit code on the credit card\n\n9.  To save your credit card information for other payments on npm, select \"Remember me\".\n\n10. Click **Update Card**.\n\n## [Updating billing receipt email and extra receipt information](#updating-billing-receipt-email-and-extra-receipt-information)\n\nAs an organization owner, you can update the email address used for receipts, and add extra information to the receipt for your paid organization plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.\n\n**Note:** The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the organization.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization whose billing receipt information you want to change.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n\n6.  At the bottom of the Billing History dialog box, click \"Receipt Settings\".\n\n7.  To add a business name, VAT number, address of record, or other information to your receipts, in the \"Extra Billing Information\" text box, type the information.\n\n8.  To update the email address used for receipts, beside \"Send my receipts\", select the checkbox and type the email address that should receive billing receipts.\n\n9.  Click **Save**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/updating-organization-billing-settings](https://docs.npmjs.com/updating-organization-billing-settings)"
- name: Updating packages downloaded from the registry
  id: updating-packages-downloaded-from-the-registry
  summary: Updating local and global packages you downloaded from the registry helps keep your code and tools stable, usable, and secure
  description: "# Updating packages downloaded from the registry\n\nUpdating local and global packages you downloaded from the registry helps keep your code and tools stable, usable, and secure.\n\n## [Updating local packages](#updating-local-packages)\n\nWe recommend regularly updating the local packages your project depends on to improve your code as improvements to its dependencies are made.\n\n1.  Navigate to the root directory of your project and ensure it contains a `package.json` file:\n\n    `cd /path/to/project`\n\n2.  In your project root directory, run the [`update` command](https://docs.npmjs.com/cli/v8/commands/npm-update/):\n\n    `npm update`\n\n3.  To test the update, run the [`outdated` command](https://docs.npmjs.com/cli/v8/commands/npm-outdated/). There should not be any output.\n\n    `npm outdated`\n\n## [Updating globally-installed packages](#updating-globally-installed-packages)\n\n**Note:** If you are using npm version 2.6.0 or less, run [this script](https://gist.github.com/othiym23/4ac31155da23962afd0e) to update all outdated global packages.\n\nHowever, please consider upgrading to the latest version of npm:\n\n`npm install npm@latest -g`\n\n### [Determining which global packages need updating](#determining-which-global-packages-need-updating)\n\nTo see which global packages need to be updated, on the command line, run:\n\n`npm outdated -g --depth=0`\n\n### [Updating a single global package](#updating-a-single-global-package)\n\nTo update a single global package, on the command line, run:\n\n`npm update -g <package_name>`\n\n### [Updating all globally-installed packages](#updating-all-globally-installed-packages)\n\nTo update all global packages, on the command line, run:\n\n`npm update -g`\n\n## [Resources](#resources)\n\n### [CLI commands](#cli-commands)\n\n- [npm-update](https://docs.npmjs.com/cli/v8/commands/npm-update/)\n- [npm-outdated](https://docs.npmjs.com/cli/v8/commands/npm-outdated/)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/updating-packages-downloaded-from-the-registry](https://docs.npmjs.com/updating-packages-downloaded-from-the-registry)"
- name: Updating user account billing settings
  id: updating-user-account-billing-settings
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Updating user account billing settings\n\n**Note:** This article only applies to users of the public npm registry.\n\nYou can update the credit card used to pay for your paid user account plan. Updating your credit card will not change your billing cycle date, and the new credit card will be charged on the next billing cycle.\n\n**Note:** If the credit card used to pay for your paid user account plan expires, or we are otherwise are unable to charge your card, you have a grace period of nine days to update the card.\n\n## [Updating credit card information](#updating-credit-card-information)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n3.  Under \"monthly bill\", click **Edit Payment Info**.\n4.  In the billing information dialog box, enter your billing information:\n    - Email: the email address used for the billing contact\n    - Name: the name on the credit card used to pay\n    - Street, City, ZIP Code, Country: the billing address associated with the credit card\n5.  Click **Payment Info**.\n6.  In the credit card information dialog box, enter your credit card information:\n    - Card number\n    - MM / YY: the month and year of the card expiration date\n    - CVC: the three-digit code on the credit card\n7.  To save your credit card information for other payments on npm, select \"Remember me\".\n8.  Click **Update Card**.\n\n## [Updating billing receipt email and extra receipt information](#updating-billing-receipt-email-and-extra-receipt-information)\n\nYou can update the email address used for receipts, and add extra information to the receipt for your paid user account plan, such as your business name, VAT identification number, or address of record. Updated billing information will appear on all receipts immediately.\n\n**Note:** The billing email is used for receipts only and is not required to match the email address of the person whose card is used to pay for the paid user account plan.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n3.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n4.  At the bottom of the Billing History dialog box, click \"Receipt Settings\".\n5.  To add a business name, VAT number, address of record, or other information to your receipts, in the \"Extra Billing Information\" text box, type the information.\n6.  To update the email address used for receipts, beside \"Send my receipts\", select the checkbox and type the email address that should receive billing receipts.\n7.  Click **Save**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/updating-user-account-billing-settings](https://docs.npmjs.com/updating-user-account-billing-settings)"
- name: Updating your published package version number
  id: updating-your-published-package-version-number
  summary: When you make significant changes to a published package, we recommend updating the version number to communicate the extent of the changes to others who rely on your code
  description: "# Updating your published package version number\n\nWhen you make significant changes to a published package, we recommend updating the version number to communicate the extent of the changes to others who rely on your code.\n\n**Note:** If you have linked a git repository to a package, updating the package version number will also add a tag with the updated release number to the linked git repository.\n\n1.  To change the version number in `package.json`, on the command line, in the package root directory, run the following command, replacing `<update_type>` with one of the [semantic versioning](about-semantic-versioning) release types (patch, major, or minor):\n\n    `npm version <update_type>`\n\n2.  Run `npm publish`.\n\n3.  Go to your package page (`https://npmjs.com/package/<package>`) to check that the package version has been updated.\n\nFor more information on `npm version`, see the [CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-version/).\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/updating-your-published-package-version-number](https://docs.npmjs.com/updating-your-published-package-version-number)"
- name: Upgrading to a paid organization plan
  id: upgrading-to-a-paid-organization-plan
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Upgrading to a paid organization plan\n\n**Note:** This article only applies to users of the public npm registry.\n\nAs an organization owner, you can upgrade your free organization plan to the npm Teams product. npm Teams is a paid plan to give organization members the ability to install and publish private packages. For more information about npm Teams and our organization pricing plans, see the \"npm Teams\" section of [our pricing page](https://www.npmjs.com/pricing).\n\nIf you have an organization with a private packages plan, your organization will cost you seven (7) dollars a month per user. **The $7 charge is a flat fee for any member of the organization even if the teams the member belongs do not have access to private packages**\n\nNewly added members to an organization are always billed during the next billing cycle. For more information, see \"[Adding members to your organization](https://docs.npmjs.com/adding-members-to-your-org)\".\n\n**Note:** Your paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization you want to upgrade.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  Under \"change plan\", click **Upgrade Plan ($7/User)**.\n\n6.  Under \"Want to upgrade?\", click **Enable Private Publishing for $7/mo**.\n\n7.  In the billing information dialog box, enter your billing information:\n    - Email: the email address used for the billing contact\n    - Name: the name on the credit card used to pay\n    - Street, City, ZIP Code, Country: the billing address associated with the credit card\n\n8.  Click **Payment Info**.\n\n9.  In the credit card information dialog box, enter your credit card information:\n    - Card number\n    - MM / YY: the month and year of the card expiration date\n    - CVC: the three-digit code on the credit card\n\n10. To save your credit card information for other payments on npm, select \"Remember me\".\n\n11. Click **Pay** for the monthly amount. The monthly amount will be the number of members in your organization multiplied by $7.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/upgrading-to-a-paid-organization-plan](https://docs.npmjs.com/upgrading-to-a-paid-organization-plan)"
- name: Upgrading to a paid user account plan
  id: upgrading-to-a-paid-user-account-plan
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Upgrading to a paid user account plan\n\n**Note:** This article only applies to users of the public npm registry.\n\nIf you need to install and publish private packages, you can upgrade to a paid user account plan. Our paid user account plan costs $7 per month. For more information, see the \"npm account\" column on our [pricing page](https://www.npmjs.com/pricing).\n\nYour paid plan and billing cycle will start when you submit your credit card information, and you will be charged for the first month immediately.\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n\n3.  Under \"change plan\", click **Upgrade Plan ($7/User)**.\n\n4.  Under \"Want to upgrade?\", click **Enable Private Publishing for $7/mo**.\n\n5.  In the billing information dialog box, enter your billing information:\n    - Email: the email address used for the billing contact\n    - Name: the name on the credit card used to pay\n    - Street, City, ZIP Code, Country: the billing address associated with the credit card\n\n6.  Click **Payment Info**.\n\n7.  In the credit card information dialog box, enter your credit card information:\n    - Card number\n    - MM / YY: the month and year of the card expiration date\n    - CVC: the three-digit code on the credit card\n\n8.  To save your credit card information for other payments on npm, select \"Remember me\".\n\n9.  Click **Pay $7.00**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/upgrading-to-a-paid-user-account-plan](https://docs.npmjs.com/upgrading-to-a-paid-user-account-plan)"
- name: usage
  id: cli/v10/using-npm/config#usage
  summary: Show short usage output about the command specified
  belongs_to: config
  description: |-
    #### [`usage`](#usage)

    - Default: false
    - Type: Boolean

    Show short usage output about the command specified.
- name: user-agent
  id: cli/v10/using-npm/config#user-agent
  summary: Sets the User-Agent request header
  belongs_to: config
  description: |-
    #### [`user-agent`](#user-agent)

    - Default: "npm/{npm-version} node/{node-version} {platform} {arch} workspaces/{workspaces} {ci}"
    - Type: String

    Sets the User-Agent request header. The following fields are replaced with their actual counterparts:

    - `{npm-version}` - The npm version in use
    - `{node-version}` - The Node.js version in use
    - `{platform}` - The value of `process.platform`
    - `{arch}` - The value of `process.arch`
    - `{workspaces}` - Set to `true` if the `workspaces` or `workspace` options are set.
    - `{ci}` - The value of the `ci-name` config, if set, prefixed with `ci/`, or an empty string if `ci-name` is empty.

    &nbsp;
- name: userconfig
  id: cli/v10/using-npm/config#userconfig
  summary: The location of user-level configuration settings
  belongs_to: config
  description: |-
    #### [`userconfig`](#userconfig)

    - Default: "~/.npmrc"
    - Type: Path

    The location of user-level configuration settings.

    This may be overridden by the `npm_config_userconfig` environment variable or the `--userconfig` command line option, but may *not* be overridden by settings in the `globalconfig` file.
- name: Using deprecated packages
  id: using-deprecated-packages
  summary: If you install a package, and it prints a deprecation message, we recommend following the instructions, if possible
  description: "# Using deprecated packages\n\nIf you install a package, and it prints a deprecation message, we recommend following the instructions, if possible.\n\nThat might mean updating to a new version, or updating your package dependencies.\n\nA deprecation message doesn't always mean the package or version is unusable; it may mean the package is unmaintained and will no longer be updated by the publisher.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/using-deprecated-packages](https://docs.npmjs.com/using-deprecated-packages)"
- name: Using npm
  id: cli/v10/using-npm
  summary: © npm, Inc
  description: "# Using npm\n\n- [Registry](using-npm/registry)\n  The JavaScript Package Registry\n- [Package spec](using-npm/package-spec)\n  Package name specifier\n- [Config](using-npm/config)\n  About npm configuration\n- [Logging](using-npm/logging)\n  Why, What & How we Log\n- [Scope](using-npm/scope)\n  Scoped packages\n- [Scripts](using-npm/scripts)\n  How npm handles the \"scripts\" field\n- [Workspaces](using-npm/workspaces)\n  Working with workspaces\n- [Organizations](using-npm/orgs)\n  Working with teams & organizations\n- [Dependency Selectors](using-npm/dependency-selectors)\n  Dependency Selector Syntax & Querying\n- [Developers](using-npm/developers)\n  Developer guide\n- [Removal](using-npm/removal)\n  Cleaning the slate\n- [Changelog](using-npm/changelog)\n  Changelog notes for each version\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm](https://docs.npmjs.com/cli/v10/using-npm)"
- name: Using npm packages in your projects
  id: using-npm-packages-in-your-projects
  summary: Once you have installed a package in node_modules, you can use it in your code
  description: "# Using npm packages in your projects\n\nOnce you have [installed a package](https://docs.npmjs.com/downloading-and-installing-packages) in `node_modules`, you can use it in your code.\n\n## [Using unscoped packages in your projects](#using-unscoped-packages-in-your-projects)\n\n### [Node.js module](#nodejs-module)\n\nIf you are creating a Node.js module, you can use a package in your module by passing it as an argument to the `require` function.\n\n``` javascript\nvar lodash = require('lodash');\n\n\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n### [package.json file](#packagejson-file)\n\nIn `package.json`, list the package under dependencies. You can optionally include a [semantic version](about-semantic-versioning).\n\n``` javascript\n{\n  \"dependencies\": {\n    \"package_name\": \"^1.0.0\"\n  }\n}\n```\n\n## [Using scoped packages in your projects](#using-scoped-packages-in-your-projects)\n\nTo use a scoped package, simply include the scope wherever you use the package name.\n\n### [Node.js module](#nodejs-module-1)\n\n``` javascript\nvar projectName = require(\"@scope/package-name\")\n```\n\n### [package.json file](#packagejson-file-1)\n\nIn `package.json`:\n\n``` javascript\n{\n  \"dependencies\": {\n    \"@scope/package_name\": \"^1.0.0\"\n  }\n}\n```\n\n## [Resolving \"Cannot find module\" errors](#resolving-cannot-find-module-errors)\n\nIf you have not properly installed a package, you will receive an error when you try to use it in your code. For example, if you reference the `lodash` package without installing it, you would see the following error:\n\n``` javascript\nmodule.js:340\n    throw err;\n          ^\nError: Cannot find module 'lodash'\n```\n\n- For scoped packages, run `npm install <@scope/package_name>`\n- For unscoped packages, run `npm install <package_name>`\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/using-npm-packages-in-your-projects](https://docs.npmjs.com/using-npm-packages-in-your-projects)"
- name: Using private packages in a CI/CD workflow
  id: using-private-packages-in-a-ci-cd-workflow
  summary: You can use access tokens to test private npm packages with continuous integration (CI) systems, or deploy them using continuous deployment (CD) systems
  description: "# Using private packages in a CI/CD workflow\n\nYou can use access tokens to test private npm packages with continuous integration (CI) systems, or deploy them using continuous deployment (CD) systems.\n\n## [Create a new access token](#create-a-new-access-token)\n\nCreate a new access token that will be used only to access npm packages from a CI/CD server.\n\n### [Continuous integration](#continuous-integration)\n\nWhen generating an access token for use in a continuous integration environment, we recommend using a granular access token with limited access to provide greater security.\n\nIf you use a legacy token instead, by default, `npm token create` will generate a token with both read and write permissions. We recommend creating a read-only token:\n\n`npm token create --read-only`\n\nFor more information on creating access tokens, including CIDR-whitelisted tokens, see \"[Creating an access token](creating-and-viewing-access-tokens)\".\n\n### [Continuous deployment](#continuous-deployment)\n\nSince continuous deployment environments usually involve the creation of a deploy artifact, you may wish to create an [automation token](creating-and-viewing-access-tokens) on the website. This will allow you to publish even if you have two-factor authentication enabled on your account.\n\n### [Interactive workflows](#interactive-workflows)\n\nIf your workflow produces a package, but you publish it manually after validation, then you will want to create a token with read and write permissions, which are granted with the standard token creation command:\n\n`npm token create`\n\n### [CIDR whitelists](#cidr-whitelists)\n\nFor increased security, you may use a CIDR-whitelisted token that can only be used from a certain IP address range. You can use a CIDR whitelist with a read and publish token or a read-only token:\n\n``` javascript\nnpm token create --cidr=[list]\nnpm token create --read-only --cidr=[list]\n```\n\nExample:\n\n`npm token create --cidr=192.0.2.0/24`\n\nFor more information, see \"[Creating and viewing authentication tokens](creating-and-viewing-access-tokens)\".\n\n## [Set the token as an environment variable on the CI/CD server](#set-the-token-as-an-environment-variable-on-the-cicd-server)\n\nSet your token as an environment variable, or a secret, in your CI/CD server.\n\nFor example, in GitHub Actions, you would [add your token as a secret](https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets). Then you can make the secret available to workflows.\n\nIf you named the secret `NPM_TOKEN`, then you would want to create an environment variable named `NPM_TOKEN` from that secret.\n\n``` javascript\nsteps:\n  - run: |\n      npm install\n  - env:\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\nConsult your CI/CD server's documentation for more details.\n\n## [Create and check in a project-specific .npmrc file](#create-and-check-in-a-project-specific-npmrc-file)\n\nUse a project-specific `.npmrc` file with a variable for your token to securely authenticate your CI/CD server with npm.\n\n1.  In the root directory of your project, create a custom `.npmrc` file with the following contents:\n\n    `//registry.npmjs.org/:_authToken=${NPM_TOKEN}`\n\n    **Note:** that you are specifying a literal value of `${NPM_TOKEN}`. The npm cli will replace this value with the contents of the `NPM_TOKEN` environment variable. Do **not** put a token in this file.\n\n2.  Check in the `.npmrc` file.\n\n## [Securing your token](#securing-your-token)\n\nYour token may have permission to read private packages, publish new packages on your behalf, or change user or package settings. Protect your token.\n\nDo not add your token to version control or store it insecurely. Store it in a password manager, your cloud provider's secure storage, or your CI/CD provider's secure storage.\n\nWhen possible, use granular access tokens with the minimum permissions necessary, and set short expiration dates for your tokens. For more information, see \"[About access tokens](about-access-tokens).\"\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow](https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow)"
- name: Verifying ECDSA registry signatures
  id: verifying-registry-signatures
  summary: To ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI
  description: "# Verifying ECDSA registry signatures\n\nTo ensure the integrity of packages you download from the public npm registry, or any registry that supports signatures, you can verify the registry signatures of downloaded packages using the npm CLI.\n\n## [Prerequisites](#prerequisites)\n\n1.  Install npm CLI version v8.15.0 or later\n2.  Install dependencies using `npm install` or `npm ci`\n\n## [Verifying registry signatures](#verifying-registry-signatures)\n\nRegistry signatures can be verified using the following `audit` command:\n\n`npm audit signatures`\n\nExample response if all installed versions have valid registry signatures:\n\n``` javascript\naudited 1640 packages in 2s\n\n\n1640 have verified registry signatures\n```\n\n## [Troubleshooting](#troubleshooting)\n\n### [Some packages are missing registry signatures](#some-packages-are-missing-registry-signatures)\n\nThe CLI will error if packages don't have signatures *and* if the package registry supports signatures. This could mean an attacker might be trying to circumvent signature verification. You can check if the registry supports signatures by requesting the public signing keys from `registry-host.tld/-/npm/v1/keys`.\n\nExample response if some versions have missing registry signatures:\n\n``` javascript\naudited 1640 packages in 2s\n\n\n1405 packages have verified registry signatures\n\n\n235 packages have missing registry signatures but the registry is providing signing keys:\n\n\nmissing-dep@1.0.0 (https://registry.npmjs.org/)\n...\n```\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/verifying-registry-signatures](https://docs.npmjs.com/verifying-registry-signatures)"
- name: version
  id: cli/v10/configuring-npm/package-json#version
  summary: If you plan to publish your package, the most important things in your package.json are the name and version fields as they will be required
  belongs_to: package.json
  description: |-
    ### [version](#version)

    If you plan to publish your package, the *most* important things in your package.json are the name and version fields as they will be required. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package, the name and version fields are optional.

    Version must be parseable by [node-semver](https://github.com/npm/node-semver), which is bundled with npm as a dependency. (`npm install semver` to use it yourself.)
- name: version
  id: cli/v10/using-npm/config#version
  summary: If true, output the npm version and exit successfully
  belongs_to: config
  description: |-
    #### [`version`](#version)

    - Default: false
    - Type: Boolean

    If true, output the npm version and exit successfully.

    Only relevant when specified explicitly on the command line.
- name: versions
  id: cli/v10/using-npm/config#versions
  summary: If true, output the npm version as well as node's process.versions map and the version in the current working directory's package.json file if one exists, and exit successfully
  belongs_to: config
  description: |-
    #### [`versions`](#versions)

    - Default: false
    - Type: Boolean

    If true, output the npm version as well as node's `process.versions` map and the version in the current working directory's `package.json` file if one exists, and exit successfully.

    Only relevant when specified explicitly on the command line.
- name: viewer
  id: cli/v10/using-npm/config#viewer
  summary: The program to use to view help content
  belongs_to: config
  description: |-
    #### [`viewer`](#viewer)

    - Default: "man" on Posix, "browser" on Windows
    - Type: String

    The program to use to view help content.

    Set to `"browser"` to view html help content in the default web browser.
- name: Viewing, downloading, and emailing receipts for your npm user account
  id: viewing-downloading-and-emailing-receipts-for-your-user-account
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Viewing, downloading, and emailing receipts for your npm user account\n\n**Note:** This article only applies to users of the public npm registry.\n\nYou can view, download, and email receipts for the complete billing history of your npm user account.\n\n## [Viewing receipts](#viewing-receipts)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n3.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n4.  To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.\n\n## [Downloading receipts](#downloading-receipts)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n3.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n4.  To download a single receipt, find the row of the receipt you want to download, then click the PDF icon on the right side of the row.\n5.  To download multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the \"Date\" header. Then click **Download Checked**.\n\n## [Emailing receipts](#emailing-receipts)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then select **Billing Info**.\n\n3.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n\n4.  To email a single receipt, find the row of the receipt you want to download, then, on the right side of the row, click the email icon.\n\n5.  To email multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the \"Date\" header. Then click **Email Checked**.\n\n6.  In the Email Receipt dialog box, fill in the \"From\", \"To\", and \"Message\" fields.\n\n7.  Click **Send**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/viewing-downloading-and-emailing-receipts-for-your-user-account](https://docs.npmjs.com/viewing-downloading-and-emailing-receipts-for-your-user-account)"
- name: Viewing, downloading, and emailing receipts for your organization
  id: viewing-downloading-and-emailing-receipts-for-your-organization
  summary: 'Note: This article only applies to users of the public npm registry'
  description: "# Viewing, downloading, and emailing receipts for your organization\n\n**Note:** This article only applies to users of the public npm registry.\n\nAs an organization owner, you can view, download, and email receipts for the complete billing history of your organization.\n\n## [Viewing receipts](#viewing-receipts)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization whose billing receipts you want to view.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n\n6.  To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.\n\n7.  To view a single receipt, find the row of the receipt you want to view, then, on the right side of the row, click the view icon.\n\n## [Downloading receipts](#downloading-receipts)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization whose billing receipts you want to download.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n\n6.  To download a single receipt, find the row of the receipt you want to download, then click the PDF icon on the right side of the row.\n\n7.  To download multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the \"Date\" header. Then click **Download Checked**.\n\n## [Emailing receipts](#emailing-receipts)\n\n1.  On the npm \"[Sign In](https://www.npmjs.com/login)\" page, enter your account details and click **Sign In**.\n\n2.  In the upper right corner of the page, click your profile picture, then click **Account**.\n\n3.  In the left sidebar, click the name of the organization whose billing receipts you want to email.\n\n4.  On the organization settings page, click **Billing**.\n\n5.  On the Billing Information page, under \"monthly bill\", select **View Billing History**.\n\n6.  To email a single receipt, find the row of the receipt you want to download, then, on the right side of the row, click the email icon.\n\n7.  To email multiple receipts, first select the receipts that you wish to download by selecting the box next to the date. To select all receipts, select the checkbox next to the \"Date\" header. Then click **Email Checked**.\n\n8.  In the Email Receipt dialog box, fill in the \"From\", \"To\", and \"Message\" fields.\n\n9.  Click **Send**.\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/viewing-downloading-and-emailing-receipts-for-your-organization](https://docs.npmjs.com/viewing-downloading-and-emailing-receipts-for-your-organization)"
- name: which
  id: cli/v10/using-npm/config#which
  summary: If there are multiple funding sources, which 1-indexed source URL to open
  belongs_to: config
  description: |-
    #### [`which`](#which)

    - Default: null
    - Type: null or Number

    If there are multiple funding sources, which 1-indexed source URL to open.
- name: workspace
  id: cli/v10/using-npm/config#workspace
  summary: Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option
  belongs_to: config
  description: |-
    #### [`workspace`](#workspace)

    - Default:
    - Type: String (can be set multiple times)

    Enable running a command in the context of the configured workspaces of the current project while filtering by running only the workspaces defined by this configuration option.

    Valid values for the `workspace` config are either:

    - Workspace names
    - Path to a workspace directory
    - Path to a parent workspace directory (will result in selecting all workspaces within that folder)

    When set for the `npm init` command, this may be set to the folder of a workspace which does not yet exist, to create the folder and set it up as a brand new workspace within the project.

    This value is not exported to the environment for child processes.
- name: workspaces
  id: cli/v10/configuring-npm/package-json#workspaces
  summary: The optional workspaces field is an array of file patterns that describes locations within the local file system that the install client should look up to find each workspace that needs to be symlinked to the top level node_modules folder
  belongs_to: package.json
  description: |-
    ### [workspaces](#workspaces)

    The optional `workspaces` field is an array of file patterns that describes locations within the local file system that the install client should look up to find each [workspace](../using-npm/workspaces) that needs to be symlinked to the top level `node_modules` folder.

    It can describe either the direct paths of the folders to be used as workspaces or it can define globs that will resolve to these same folders.

    In the following example, all folders located inside the folder `./packages` will be treated as workspaces as long as they have valid `package.json` files inside them:

    ``` javascript
    {
      "name": "workspace-example",
      "workspaces": ["./packages/*"]
    }
    ```

    See [`workspaces`](../using-npm/workspaces) for more examples.
- name: workspaces
  id: cli/v10/using-npm/workspaces
  summary: Workspaces is a generic term that refers to the set of features in the npm cli that provides support to managing multiple packages from your local file system from within a singular top-level, root package
  description: "# workspaces\n\nWorking with workspaces\n\n### [Description](#description)\n\n**Workspaces** is a generic term that refers to the set of features in the npm cli that provides support to managing multiple packages from your local file system from within a singular top-level, root package.\n\nThis set of features makes up for a much more streamlined workflow handling linked packages from the local file system. Automating the linking process as part of `npm install` and avoiding manually having to use `npm link` in order to add references to packages that should be symlinked into the current `node_modules` folder.\n\nWe also refer to these packages being auto-symlinked during `npm install` as a single **workspace**, meaning it's a nested package within the current local file system that is explicitly defined in the [`package.json`](../configuring-npm/package-json#workspaces) `workspaces` configuration.\n\n### [Defining workspaces](#defining-workspaces)\n\nWorkspaces are usually defined via the `workspaces` property of the [`package.json`](../configuring-npm/package-json#workspaces) file, e.g:\n\n``` javascript\n{\n  \"name\": \"my-workspaces-powered-project\",\n  \"workspaces\": [\"packages/a\"]\n}\n```\n\nGiven the above `package.json` example living at a current working directory `.` that contains a folder named `packages/a` that itself contains a `package.json` inside it, defining a Node.js package, e.g:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n```\n\nThe expected result once running `npm install` in this current working directory `.` is that the folder `packages/a` will get symlinked to the `node_modules` folder of the current working dir.\n\nBelow is a post `npm install` example, given that same previous example structure of files and folders:\n\n``` javascript\n.\n+-- node_modules\n|  `-- a -> ../packages/a\n+-- package-lock.json\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n```\n\n### [Getting started with workspaces](#getting-started-with-workspaces)\n\nYou may automate the required steps to define a new workspace using [npm init](../commands/npm-init). For example in a project that already has a `package.json` defined you can run:\n\n`npm init -w ./packages/a`\n\nThis command will create the missing folders and a new `package.json` file (if needed) while also making sure to properly configure the `\"workspaces\"` property of your root project `package.json`.\n\n### [Adding dependencies to a workspace](#adding-dependencies-to-a-workspace)\n\nIt's possible to directly add/remove/update dependencies of your workspaces using the [`workspace` config](config#workspace).\n\nFor example, assuming the following structure:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n   `-- b\n       `-- package.json\n```\n\nIf you want to add a dependency named `abbrev` from the registry as a dependency of your workspace **a**, you may use the workspace config to tell the npm installer that package should be added as a dependency of the provided workspace:\n\n`npm install abbrev -w a`\n\nNote: other installing commands such as `uninstall`, `ci`, etc will also respect the provided `workspace` configuration.\n\n### [Using workspaces](#using-workspaces)\n\nGiven the [specifities of how Node.js handles module resolution](https://nodejs.org/dist/latest-v14.x/docs/api/modules.html#modules_all_together) it's possible to consume any defined workspace by its declared `package.json` `name`. Continuing from the example defined above, let's also create a Node.js script that will require the workspace `a` example module, e.g:\n\n``` javascript\n// ./packages/a/index.js\nmodule.exports = 'a'\n\n\n// ./lib/index.js\nconst moduleA = require('a')\nconsole.log(moduleA) // -> a\n```\n\nWhen running it with:\n\n`node lib/index.js`\n\nThis demonstrates how the nature of `node_modules` resolution allows for **workspaces** to enable a portable workflow for requiring each **workspace** in such a way that is also easy to [publish](../commands/npm-publish) these nested workspaces to be consumed elsewhere.\n\n### [Running commands in the context of workspaces](#running-commands-in-the-context-of-workspaces)\n\nYou can use the `workspace` configuration option to run commands in the context of a configured workspace. Additionally, if your current directory is in a workspace, the `workspace` configuration is implicitly set, and `prefix` is set to the root workspace.\n\nFollowing is a quick example on how to use the `npm run` command in the context of nested workspaces. For a project containing multiple workspaces, e.g:\n\n``` javascript\n.\n+-- package.json\n`-- packages\n   +-- a\n   |   `-- package.json\n   `-- b\n       `-- package.json\n```\n\nBy running a command using the `workspace` option, it's possible to run the given command in the context of that specific workspace. e.g:\n\n`npm run test --workspace=a`\n\nYou could also run the command within the workspace.\n\n`cd packages/a && npm run test`\n\nEither will run the `test` script defined within the `./packages/a/package.json` file.\n\nPlease note that you can also specify this argument multiple times in the command-line in order to target multiple workspaces, e.g:\n\n`npm run test --workspace=a --workspace=b`\n\nOr run the command for each workspace within the 'packages' folder:\n\n`npm run test --workspace=packages`\n\nIt's also possible to use the `workspaces` (plural) configuration option to enable the same behavior but running that command in the context of **all** configured workspaces. e.g:\n\n`npm run test --workspaces`\n\nWill run the `test` script in both `./packages/a` and `./packages/b`.\n\nCommands will be run in each workspace in the order they appear in your `package.json`\n\n``` javascript\n{\n  \"workspaces\": [ \"packages/a\", \"packages/b\" ]\n}\n```\n\nOrder of run is different with:\n\n``` javascript\n{\n  \"workspaces\": [ \"packages/b\", \"packages/a\" ]\n}\n```\n\n### [Ignoring missing scripts](#ignoring-missing-scripts)\n\nIt is not required for all of the workspaces to implement scripts run with the `npm run` command.\n\nBy running the command with the `--if-present` flag, npm will ignore workspaces missing target script.\n\n`npm run test --workspaces --if-present`\n\n### [See also](#see-also)\n\n- [npm install](../commands/npm-install)\n- [npm publish](../commands/npm-publish)\n- [npm run-script](../commands/npm-run-script)\n- [config](config)\n\n© npm, Inc. and Contributors  \nLicensed under the npm License.  \nnpm is a trademark of npm, Inc.  \n[https://docs.npmjs.com/cli/v10/using-npm/workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)"
- name: workspaces
  id: cli/v10/using-npm/config#workspaces
  summary: Set to true to run the command in the context of all configured workspaces
  belongs_to: config
  description: |-
    #### [`workspaces`](#workspaces)

    - Default: null
    - Type: null or Boolean

    Set to true to run the command in the context of **all** configured workspaces.

    Explicitly setting this to false will cause commands like `install` to ignore workspaces altogether. When not set explicitly:

    - Commands that operate on the `node_modules` tree (install, update, etc.) will link workspaces into the `node_modules` folder. - Commands that do other things (test, exec, publish, etc.) will operate on the root project, *unless* one or more workspaces are specified in the `workspace` config.

    This value is not exported to the environment for child processes.
- name: workspaces-update
  id: cli/v10/using-npm/config#workspaces-update
  summary: If set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the node_modules folder
  belongs_to: config
  description: |-
    #### [`workspaces-update`](#workspaces-update)

    - Default: true
    - Type: Boolean

    If set to true, the npm cli will run an update after operations that may possibly change the workspaces installed to the `node_modules` folder.
- name: yes
  id: cli/v10/using-npm/config#yes
  summary: Automatically answer "yes" to any prompts that npm might print on the command line
  belongs_to: config
  description: |-
    #### [`yes`](#yes)

    - Default: null
    - Type: null or Boolean

    Automatically answer "yes" to any prompts that npm might print on the command line.
