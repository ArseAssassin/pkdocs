---
name: Jekyll
slug: jekyll~4
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '4'
copyright: |-
  © 2020 Jekyll Core Team and contributors
  Licensed under the MIT license.
  https://jekyllrb.com/docs/index.html
homepage: https://jekyllrb.com/

---
- name: 1. Setup
  id: step-by-step/01-setup/index
  summary: Welcome to Jekyll’s step-by-step tutorial
  description: "# Step by Step Tutorial\n\n## 1. Setup\n\nWelcome to Jekyll’s step-by-step tutorial. The goal of this tutorial is to take you from having some front end web development experience to building your first Jekyll site from scratch — not relying on the default gem-based theme. Let’s get into it!\n\n## Installation\n\nJekyll is a Ruby program so you need to install Ruby on your machine to begin with. Head over to the [install guide](../../installation/index) and follow the instructions for your operating system.\n\nWith Ruby setup you can install Jekyll by running the following in your terminal:\n\n``` bash\ngem install jekyll bundler\n```\n\nTo create a new `Gemfile` to list your project’s dependencies run:\n\n``` bash\nbundle init\n```\n\nNow edit the `Gemfile` and add jekyll as a dependency:\n\n``` ruby\ngem \"jekyll\"\n```\n\nFinally run `bundle` to install jekyll for your project.\n\nYou can now prefix all jekyll commands listed in this tutorial with `bundle exec` to make sure you use the jekyll version defined in your `Gemfile`.\n\n## Create a site\n\nIt’s time to create a site! Create a new directory for your site, you can name it whatever you’d like. Through the rest of this tutorial we’ll refer to this directory as “root”.\n\nIf you’re feeling adventurous, you can also initialize a Git repository here. One of the great things about Jekyll is there’s no database. All content and site structure are files which a Git repository can version. Using a repository is completely optional but it’s a great habit to get into. You can learn more about using Git by reading through the [Git Handbook](https://guides.github.com/introduction/git-handbook/).\n\nLet’s add your first file. Create `index.html` in the root with the following content:\n\n``` html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>\n```\n\n## Build\n\nJekyll is a static site generator so we need Jekyll to build the site before we can view it. There are two commands you can run in the root of your site to build it:\n\n- `jekyll build` - Builds the site and outputs a static site to a directory called `_site`.\n- `jekyll serve` - Does the same thing except it rebuilds any time you make a change and runs a local web server at `http://localhost:4000`.\n\nWhen you’re developing a site you’ll use `jekyll serve` as it updates with any changes you make.\n\nRun `jekyll serve` and go to [http://localhost:4000](http://localhost:4000) in your browser. You should see “Hello World!”.\n\nWell, you might be thinking what’s the point in this? Jekyll just copied an HTML file from one place to another. Well patience young grasshopper, there’s still much to learn!\n\n1.  [Setup](index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/01-setup/](https://jekyllrb.com/docs/step-by-step/01-setup/)"
- name: 2. Liquid
  id: step-by-step/02-liquid/index
  summary: Liquid is where Jekyll starts to get more interesting
  description: "# Step by Step Tutorial\n\n## 2. Liquid\n\nLiquid is where Jekyll starts to get more interesting. Liquid is a templating language which has three main parts: [objects](#objects), [tags](#tags) and [filters](#filters).\n\n## Objects\n\nObjects tell Liquid where to output content. They’re denoted by double curly braces: `{{` and `}}`. For example:\n\n``` liquid\n{{ page.title }}\n```\n\nOutputs a variable called `page.title` on the page.\n\n## Tags\n\nTags create the logic and control flow for templates. They are denoted by curly braces and percent signs: `{%` and `%}`. For example:\n\n``` liquid\n{% if page.show_sidebar %}\n  <div class=\"sidebar\">\n    sidebar content\n  </div>\n{% endif %}\n```\n\nOutputs the sidebar if `page.show_sidebar` is true. You can learn more about the tags available to Jekyll [here](../../liquid/tags/index).\n\n## Filters\n\nFilters change the output of a Liquid object. They are used within an output and are separated by a `|`. For example:\n\n``` liquid\n{{ \"hi\" | capitalize }}\n```\n\nOutputs `Hi`. You can learn more about the filters available to Jekyll [here](../../liquid/filters/index).\n\n## Use Liquid\n\nNow it’s your turn, change the Hello World! on your page to output as lowercase:\n\n``` liquid\n...\n<h1>{{ \"Hello World!\" | downcase }}</h1>\n...\n```\n\nTo get our changes processed by Jekyll we need to add [front matter](../03-front-matter/index) to the top of the page:\n\n``` yaml\n---\n# front matter tells Jekyll to process Liquid\n---\n```\n\nOur “Hello World!” will now be downcased on render.\n\nIt may not seem like it now, but much of Jekyll’s power comes from combining Liquid with other features.\n\nIn order to see the changes from `downcase` Liquid filter, we will need to add front matter.\n\nThat’s next. Let’s keep going.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/02-liquid/](https://jekyllrb.com/docs/step-by-step/02-liquid/)"
- name: 3. Front Matter
  id: step-by-step/03-front-matter/index
  summary: Front matter is a snippet of YAML which sits between two triple-dashed lines at the top of a file
  description: "# Step by Step Tutorial\n\n## 3. Front Matter\n\nFront matter is a snippet of [YAML](http://yaml.org/) which sits between two triple-dashed lines at the top of a file. Front matter is used to set variables for the page, for example:\n\n``` yaml\n---\nmy_number: 5\n---\n```\n\nFront matter variables are available in Liquid under the `page` variable. For example to output the variable above you would use:\n\n``` liquid\n{{ page.my_number }}\n```\n\n## Use front matter\n\nLet’s change the `<title>` on your site to populate using front matter:\n\n``` liquid\n---\ntitle: Home\n---\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ page.title }}</title>\n  </head>\n  <body>\n    <h1>{{ \"Hello World!\" | downcase }}</h1>\n  </body>\n</html>\n```\n\nNote that in order for Jekyll to process any liquid tags on your page, you *must* include front matter on it. The most minimal snippet of front matter you can include is:\n\n``` yaml\n---\n---\n```\n\nYou may still be wondering why you’d output it this way as it takes more source code than raw HTML. In this next step, you’ll see why we’ve been doing this.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/03-front-matter/](https://jekyllrb.com/docs/step-by-step/03-front-matter/)"
- name: 4. Layouts
  id: step-by-step/04-layouts/index
  summary: Websites typically have more than one page and this website is no different
  description: "# Step by Step Tutorial\n\n## 4. Layouts\n\nWebsites typically have more than one page and this website is no different.\n\nJekyll supports [Markdown](https://daringfireball.net/projects/markdown/syntax) as well as HTML for pages. Markdown is a great choice for pages with a simple content structure (just paragraphs, headings and images), as it’s less verbose than raw HTML. Let’s try it out on the next page.\n\nCreate `about.md` in the root.\n\nFor the structure you could copy `index.html` and modify it for the about page. The problem with doing this is duplicate code. Let’s say you wanted to add a stylesheet to your site, you would have to go to each page and add it to the `<head>`. It might not sound so bad for a two page site, imagine doing it for 100 pages. Even simple changes will take a long time to make.\n\n## Creating a layout\n\nUsing a layout is a much better choice. Layouts are templates that wrap around your content. They live in a directory called `_layouts`.\n\nCreate your first layout at `_layouts/default.html` with the following content:\n\n``` liquid\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ page.title }}</title>\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>\n```\n\nYou’ll notice this is almost identical to `index.html` except there’s no front matter and the content of the page is replaced with a `content` variable. `content` is a special variable which has the value of the rendered content of the page it’s called on.\n\nTo have `index.html` use this layout, you can set a `layout` variable in front matter. The layout wraps around the content of the page so all you need in `index.html` is:\n\n``` liquid\n---\nlayout: default\ntitle: Home\n---\n<h1>{{ \"Hello World!\" | downcase }}</h1>\n```\n\nAfter doing this, the output will be exactly the same as before. Note that you can access the `page` front matter from the layout. In this case `title` is set in the index page’s front matter but is output in the layout.\n\n## About page\n\nBack to the about page, instead of copying from `index.html`, you can use the layout.\n\nAdd the following to `about.md`:\n\n``` markdown\n---\nlayout: default\ntitle: About\n---\n# About page\n\nThis page tells you a little bit about me.\n```\n\nOpen [http://localhost:4000/about.html](http://localhost:4000/about.html) in your browser and view your new page.\n\nCongratulations, you now have a two page website! But how do you navigate from one page to another? Keep reading to find out.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/04-layouts/](https://jekyllrb.com/docs/step-by-step/04-layouts/)"
- name: 5. Includes
  id: step-by-step/05-includes/index
  summary: The site is coming together; however, there’s no way to navigate between pages
  description: "# Step by Step Tutorial\n\n## 5. Includes\n\nThe site is coming together; however, there’s no way to navigate between pages. Let’s fix that.\n\nNavigation should be on every page so adding it to your layout is the correct place to do this. Instead of adding it directly to the layout, let’s use this as an opportunity to learn about includes.\n\n## Include tag\n\nThe `include` tag allows you to include content from another file stored in an `_includes` folder. Includes are useful for having a single source for source code that repeats around the site or for improving the readability.\n\nNavigation source code can get complex, so sometimes it’s nice to move it into an include.\n\n## Include usage\n\nCreate a file for the navigation at `_includes/navigation.html` with the following content:\n\n``` plaintext\n<nav>\n  <a href=\"/\">Home</a>\n  <a href=\"/about.html\">About</a>\n</nav>\n```\n\nTry using the include tag to add the navigation to `_layouts/default.html`:\n\n``` liquid\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ page.title }}</title>\n  </head>\n  <body>\n    {% include navigation.html %}\n    {{ content }}\n  </body>\n</html>\n```\n\nOpen [http://localhost:4000](http://localhost:4000) in your browser and try switching between the pages.\n\n## Current page highlighting\n\nLet’s take this a step further and highlight the current page in the navigation.\n\n`_includes/navigation.html` needs to know the URL of the page it’s inserted into so it can add styling. Jekyll has useful [variables](../../variables/index) available, one of which is `page.url`.\n\nUsing `page.url` you can check if each link is the current page and color it red if true:\n\n``` liquid\n<nav>\n  <a href=\"/\" {% if page.url == \"/\" %}style=\"color: red;\"{% endif %}>\n    Home\n  </a>\n  <a href=\"/about.html\" {% if page.url == \"/about.html\" %}style=\"color: red;\"{% endif %}>\n    About\n  </a>\n</nav>\n```\n\nTake a look at [http://localhost:4000](http://localhost:4000) and see your red link for the current page.\n\nThere’s still a lot of repetition here if you wanted to add a new item to the navigation or change the highlight color. In the next step we’ll address this.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/05-includes/](https://jekyllrb.com/docs/step-by-step/05-includes/)"
- name: 6. Data Files
  id: step-by-step/06-data-files/index
  summary: Jekyll supports loading data from YAML, JSON, and CSV files located in a _data directory
  description: "# Step by Step Tutorial\n\n## 6. Data Files\n\nJekyll supports loading data from YAML, JSON, and CSV files located in a `_data` directory. Data files are a great way to separate content from source code to make the site easier to maintain.\n\nIn this step you’ll store the contents of the navigation in a data file and then iterate over it in the navigation include.\n\n## Data file usage\n\n[YAML](http://yaml.org/) is a format that’s common in the Ruby ecosystem. You’ll use it to store an array of navigation items each with a name and link.\n\nCreate a data file for the navigation at `_data/navigation.yml` with the following:\n\n``` yaml\n- name: Home\n  link: /\n- name: About\n  link: /about.html\n```\n\nJekyll makes this data file available to you at `site.data.navigation`. Instead of outputting each link in `_includes/navigation.html`, now you can iterate over the data file instead:\n\n``` liquid\n<nav>\n  {% for item in site.data.navigation %}\n    <a href=\"{{ item.link }}\" {% if page.url == item.link %}style=\"color: red;\"{% endif %}>\n      {{ item.name }}\n    </a>\n  {% endfor %}\n</nav>\n```\n\nThe output will be exactly the same. The difference is you’ve made it easier to add new navigation items and change the HTML structure.\n\nWhat good is a site without CSS, JS and images? Let’s look at how to handle assets in Jekyll.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/06-data-files/](https://jekyllrb.com/docs/step-by-step/06-data-files/)"
- name: 7. Assets
  id: step-by-step/07-assets/index
  summary: Using CSS, JS, images and other assets is straightforward with Jekyll
  description: "# Step by Step Tutorial\n\n## 7. Assets\n\nUsing CSS, JS, images and other assets is straightforward with Jekyll. Place them in your site folder and they’ll copy across to the built site.\n\nJekyll sites often use this structure to keep assets organized:\n\n``` plaintext\n.\n├── assets\n│   ├── css\n│   ├── images\n│   └── js\n...\n```\n\nSo, from your assets folder, create folders called css, images and js. Additionally, directly under the root create another folder called ‘\\_sass’, which you will need shortly.\n\n## Sass\n\nInlining the styles used in `_includes/navigation.html`(adding or configuring within the same file) is not a best practice. Instead, let’s style the current page by defining our first class in a new css file instead.\n\nTo do this, refer to the class (that you will configure in the next parts of this step) from within the navigation.html file by removing the code you added earlier (to color the current link red) and inserting the following code:\n\n``` liquid\n<nav>\n  {% for item in site.data.navigation %}\n    <a href=\"{{ item.link }}\" {% if page.url == item.link %}class=\"current\"{% endif %}>{{ item.name }}</a>\n  {% endfor %}\n</nav>\n```\n\nYou could use a standard CSS file for styling, we’re going to take it a step further by using [Sass](https://sass-lang.com/). Sass is a fantastic extension to CSS baked right into Jekyll.\n\nFirst create a Sass file at `assets/css/styles.scss` with the following content:\n\n``` sass\n---\n---\n@import \"main\";\n```\n\nThe empty front matter at the top tells Jekyll it needs to process the file. The `@import \"main\"` tells Sass to look for a file called `main.scss` in the sass directory (`_sass/`) by default which you already created directly under the root folder of your website).\n\nAt this stage you’ll just have a main css file. For larger projects, this is a great way to keep your CSS organized.\n\nCreate the current class mentioned above in order to color the current link green. Create a Sass file at `_sass/main.scss` with the following content:\n\n``` sass\n.current {\n  color: green;\n}\n```\n\nYou’ll need to reference the stylesheet in your layout.\n\nOpen `_layouts/default.html` and add the stylesheet to the `<head>`:\n\n``` liquid\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ page.title }}</title>\n    <link rel=\"stylesheet\" href=\"/assets/css/styles.css\">\n  </head>\n  <body>\n    {% include navigation.html %}\n    {{ content }}\n  </body>\n</html>\n```\n\nThe `styles.css` referenced here is generated by Jekyll from the `styles.scss` you created earlier in `assets/css/`.\n\nLoad up [http://localhost:4000](http://localhost:4000) and check that the active link in the navigation is green.\n\nNext we’re looking at one of Jekyll’s most popular features, blogging.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/07-assets/](https://jekyllrb.com/docs/step-by-step/07-assets/)"
- name: 8. Blogging
  id: step-by-step/08-blogging/index
  summary: You might be wondering how you can have a blog without a database
  description: "# Step by Step Tutorial\n\n## 8. Blogging\n\nYou might be wondering how you can have a blog without a database. In true Jekyll style, blogging is powered by text files only.\n\n## Posts\n\nBlog posts live in a folder called `_posts`. The filename for posts have a special format: the publish date, then a title, followed by an extension.\n\nCreate your first post at `_posts/2018-08-20-bananas.md` with the following content:\n\n``` markdown\n---\nlayout: post\nauthor: jill\n---\nA banana is an edible fruit – botanically a berry – produced by several kinds\nof large herbaceous flowering plants in the genus Musa.\n\nIn some countries, bananas used for cooking may be called \"plantains\",\ndistinguishing them from dessert bananas. The fruit is variable in size, color,\nand firmness, but is usually elongated and curved, with soft flesh rich in\nstarch covered with a rind, which may be green, yellow, red, purple, or brown\nwhen ripe.\n```\n\nThis is like the `about.md` you created before except it has an author and a different layout. `author` is a custom variable, it’s not required and could have been named something like `creator`.\n\n## Layout\n\nThe `post` layout doesn’t exist so you’ll need to create it at `_layouts/post.html` with the following content:\n\n``` liquid\n---\nlayout: default\n---\n<h1>{{ page.title }}</h1>\n<p>{{ page.date | date_to_string }} - {{ page.author }}</p>\n\n{{ content }}\n```\n\nThis is an example of layout inheritance. The post layout outputs the title, date, author and content body which is wrapped by the default layout.\n\nAlso note the `date_to_string` filter, this formats a date into a nicer format.\n\n## List posts\n\nThere’s currently no way to navigate to the blog post. Typically a blog has a page which lists all the posts, let’s do that next.\n\nJekyll makes posts available at `site.posts`.\n\nCreate `blog.html` in your root (`/blog.html`) with the following content:\n\n``` liquid\n---\nlayout: default\ntitle: Blog\n---\n<h1>Latest Posts</h1>\n\n<ul>\n  {% for post in site.posts %}\n    <li>\n      <h2><a href=\"{{ post.url }}\">{{ post.title }}</a></h2>\n      {{ post.excerpt }}\n    </li>\n  {% endfor %}\n</ul>\n```\n\nThere’s a few things to note with this code:\n\n- `post.url` is automatically set by Jekyll to the output path of the post\n- `post.title` is pulled from the post filename and can be overridden by setting `title` in front matter\n- `post.excerpt` is the first paragraph of content by default\n\nYou also need a way to navigate to this page through the main navigation. Open `_data/navigation.yml` and add an entry for the blog page:\n\n``` yaml\n- name: Home\n  link: /\n- name: About\n  link: /about.html\n- name: Blog\n  link: /blog.html\n```\n\n## More posts\n\nA blog isn’t very exciting with a single post. Add a few more:\n\n`_posts/2018-08-21-apples.md`:\n\n``` markdown\n---\nlayout: post\nauthor: jill\n---\nAn apple is a sweet, edible fruit produced by an apple tree.\n\nApple trees are cultivated worldwide, and are the most widely grown species in\nthe genus Malus. The tree originated in Central Asia, where its wild ancestor,\nMalus sieversii, is still found today. Apples have been grown for thousands of\nyears in Asia and Europe, and were brought to North America by European\ncolonists.\n```\n\n`_posts/2018-08-22-kiwifruit.md`:\n\n``` markdown\n---\nlayout: post\nauthor: ted\n---\nKiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible\nberry of several species of woody vines in the genus Actinidia.\n\nThe most common cultivar group of kiwifruit is oval, about the size of a large\nhen's egg (5–8 cm (2.0–3.1 in) in length and 4.5–5.5 cm (1.8–2.2 in) in\ndiameter). It has a fibrous, dull greenish-brown skin and bright green or\ngolden flesh with rows of tiny, black, edible seeds. The fruit has a soft\ntexture, with a sweet and unique flavor.\n```\n\nOpen [http://localhost:4000](http://localhost:4000) and have a look through your blog posts.\n\nNext we’ll focus on creating a page for each post author.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/08-blogging/](https://jekyllrb.com/docs/step-by-step/08-blogging/)"
- name: 9. Collections
  id: step-by-step/09-collections/index
  summary: Let’s look at fleshing out authors so each author has their own page with a blurb and the posts they’ve published
  description: "# Step by Step Tutorial\n\n## 9. Collections\n\nLet’s look at fleshing out authors so each author has their own page with a blurb and the posts they’ve published.\n\nTo do this you’ll use collections. Collections are similar to posts except the content doesn’t have to be grouped by date.\n\n## Configuration\n\nTo set up a collection you need to tell Jekyll about it. Jekyll configuration happens in a file called `_config.yml` (by default).\n\nCreate `_config.yml` in the root with the following:\n\n``` yaml\ncollections:\n  authors:\n```\n\nTo (re)load the configuration, restart the jekyll server. Press `Ctrl`+`C` in your terminal to stop the server, and then `jekyll serve` to restart it.\n\n## Add authors\n\nDocuments (the items in a collection) live in a folder in the root of the site named `_*collection_name*`. In this case, `_authors`.\n\nCreate a document for each author:\n\n`_authors/jill.md`:\n\n``` markdown\n---\nshort_name: jill\nname: Jill Smith\nposition: Chief Editor\n---\nJill is an avid fruit grower based in the south of France.\n```\n\n`_authors/ted.md`:\n\n``` markdown\n---\nshort_name: ted\nname: Ted Doe\nposition: Writer\n---\nTed has been eating fruit since he was baby.\n```\n\n## Staff page\n\nLet’s add a page which lists all the authors on the site. Jekyll makes the collection available at `site.authors`.\n\nCreate `staff.html` and iterate over `site.authors` to output all the staff:\n\n``` liquid\n---\nlayout: default\ntitle: Staff\n---\n<h1>Staff</h1>\n\n<ul>\n  {% for author in site.authors %}\n    <li>\n      <h2>{{ author.name }}</h2>\n      <h3>{{ author.position }}</h3>\n      <p>{{ author.content | markdownify }}</p>\n    </li>\n  {% endfor %}\n</ul>\n```\n\nSince the content is markdown, you need to run it through the `markdownify` filter. This happens automatically when outputting using `{{ content }}` in a layout.\n\nYou also need a way to navigate to this page through the main navigation. Open `_data/navigation.yml` and add an entry for the staff page:\n\n``` yaml\n- name: Home\n  link: /\n- name: About\n  link: /about.html\n- name: Blog\n  link: /blog.html\n- name: Staff\n  link: /staff.html\n```\n\n## Output a page\n\nBy default, collections do not output a page for documents. In this case we want each author to have their own page so let’s tweak the collection configuration.\n\nOpen `_config.yml` and add `output: true` to the author collection configuration:\n\n``` yaml\ncollections:\n  authors:\n    output: true\n```\n\nRestart the jekyll server once more for the configuration changes to take effect.\n\nYou can link to the output page using `author.url`.\n\nAdd the link to the `staff.html` page:\n\n``` liquid\n---\nlayout: default\ntitle: Staff\n---\n<h1>Staff</h1>\n\n<ul>\n  {% for author in site.authors %}\n    <li>\n      <h2><a href=\"{{ author.url }}\">{{ author.name }}</a></h2>\n      <h3>{{ author.position }}</h3>\n      <p>{{ author.content | markdownify }}</p>\n    </li>\n  {% endfor %}\n</ul>\n```\n\nJust like posts you’ll need to create a layout for authors.\n\nCreate `_layouts/author.html` with the following content:\n\n``` liquid\n---\nlayout: default\n---\n<h1>{{ page.name }}</h1>\n<h2>{{ page.position }}</h2>\n\n{{ content }}\n```\n\n## Front matter defaults\n\nNow you need to configure the author documents to use the `author` layout. You could do this in the front matter like we have previously but that’s getting repetitive.\n\nWhat you really want is all posts to automatically have the post layout, authors to have author and everything else to use the default.\n\nYou can achieve this by using [front matter defaults](../../configuration/front-matter-defaults/index) in `_config.yml`. You set a scope of what the default applies to, then the default front matter you’d like.\n\nAdd defaults for layouts to your `_config.yml`,\n\n``` yaml\ncollections:\n  authors:\n    output: true\n\ndefaults:\n  - scope:\n      path: \"\"\n      type: \"authors\"\n    values:\n      layout: \"author\"\n  - scope:\n      path: \"\"\n      type: \"posts\"\n    values:\n      layout: \"post\"\n  - scope:\n      path: \"\"\n    values:\n      layout: \"default\"\n```\n\nNow you can remove layout from the front matter of all pages and posts. Note that any time you update `_config.yml` you’ll need to restart Jekyll for the changes to take effect.\n\n## List author’s posts\n\nLet’s list the posts an author has published on their page. To do this you need to match the author `short_name` to the post `author`. You use this to filter the posts by author.\n\nIterate over this filtered list in `_layouts/author.html` to output the author’s posts:\n\n``` liquid\n---\nlayout: default\n---\n<h1>{{ page.name }}</h1>\n<h2>{{ page.position }}</h2>\n\n{{ content }}\n\n<h2>Posts</h2>\n<ul>\n  {% assign filtered_posts = site.posts | where: 'author', page.short_name %}\n  {% for post in filtered_posts %}\n    <li><a href=\"{{ post.url }}\">{{ post.title }}</a></li>\n  {% endfor %}\n</ul>\n```\n\n## Link to authors page\n\nThe posts have a reference to the author so let’s link it to the author’s page. You can do this using a similar filtering technique in `_layouts/post.html`:\n\n``` liquid\n---\nlayout: default\n---\n<h1>{{ page.title }}</h1>\n\n<p>\n  {{ page.date | date_to_string }}\n  {% assign author = site.authors | where: 'short_name', page.author | first %}\n  {% if author %}\n    - <a href=\"{{ author.url }}\">{{ author.name }}</a>\n  {% endif %}\n</p>\n\n{{ content }}\n```\n\nOpen up [http://localhost:4000](http://localhost:4000) and have a look at the staff page and the author links on posts to check everything is linked together correctly.\n\nIn the next and final step of this tutorial, we’ll add polish to the site and get it ready for a production deployment.\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](index)\n10. [Deployment](../10-deployment/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/09-collections/](https://jekyllrb.com/docs/step-by-step/09-collections/)"
- name: 10. Deployment
  id: step-by-step/10-deployment/index
  summary: In this final step we’ll get the site ready for production
  description: "# Step by Step Tutorial\n\n## 10. Deployment\n\nIn this final step we’ll get the site ready for production.\n\n## Gemfile\n\nIt’s good practice to have a [Gemfile](../../ruby-101/index#gemfile) for your site. This ensures the version of Jekyll and other gems remains consistent across different environments.\n\nCreate a `Gemfile` in the root. The file should be called ‘Gemfile’ and should *not* have any extension. You can create a Gemfile with Bundler and then add the `jekyll` gem:\n\n``` bash\nbundle init\nbundle add jekyll\n```\n\nYour file should look something like:\n\n``` ruby\n# frozen_string_literal: true\nsource \"https://rubygems.org\"\n\ngem \"jekyll\"\n```\n\nBundler installs the gems and creates a `Gemfile.lock` which locks the current gem versions for a future `bundle install`. If you ever want to update your gem versions you can run `bundle update`.\n\nWhen using a `Gemfile`, you’ll run commands like `jekyll serve` with `bundle exec` prefixed. So the full command is:\n\n``` bash\nbundle exec jekyll serve\n```\n\nThis restricts your Ruby environment to only use gems set in your `Gemfile`.\n\n## Plugins\n\nJekyll plugins allow you to create custom generated content specific to your site. There’s many [plugins](../../plugins/index) available or you can even write your own.\n\nThere are three official plugins which are useful on almost any Jekyll site:\n\n- [jekyll-sitemap](https://github.com/jekyll/jekyll-sitemap) - Creates a sitemap file to help search engines index content\n- [jekyll-feed](https://github.com/jekyll/jekyll-feed) - Creates an RSS feed for your posts\n- [jekyll-seo-tag](https://github.com/jekyll/jekyll-seo-tag) - Adds meta tags to help with SEO\n\nTo use these first you need to add them to your `Gemfile`. If you put them in a `jekyll_plugins` group they’ll automatically be required into Jekyll:\n\n``` ruby\nsource 'https://rubygems.org'\n\ngem 'jekyll'\n\ngroup :jekyll_plugins do\n  gem 'jekyll-sitemap'\n  gem 'jekyll-feed'\n  gem 'jekyll-seo-tag'\nend\n```\n\nThen add these lines to your `_config.yml`:\n\n``` yaml\nplugins:\n  - jekyll-feed\n  - jekyll-sitemap\n  - jekyll-seo-tag\n```\n\nNow install them by running a `bundle update`.\n\n`jekyll-sitemap` doesn’t need any setup, it will create your sitemap on build.\n\nFor `jekyll-feed` and `jekyll-seo-tag` you need to add tags to `_layouts/default.html`:\n\n``` liquid\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ page.title }}</title>\n    <link rel=\"stylesheet\" href=\"/assets/css/styles.css\">\n    {% feed_meta %}\n    {% seo %}\n  </head>\n  <body>\n    {% include navigation.html %}\n    {{ content }}\n  </body>\n</html>\n```\n\nRestart your Jekyll server and check these tags are added to the `<head>`.\n\n## Environments\n\nSometimes you might want to output something in production but not in development. Analytics scripts are the most common example of this.\n\nTo do this you can use [environments](../../configuration/environments/index). You can set the environment by using the `JEKYLL_ENV` environment variable when running a command. For example:\n\n``` bash\nJEKYLL_ENV=production bundle exec jekyll build\n```\n\nBy default `JEKYLL_ENV` is development. The `JEKYLL_ENV` is available to you in liquid using `jekyll.environment`. So to only output the analytics script on production you would do the following:\n\n``` liquid\n{% if jekyll.environment == \"production\" %}\n  <script src=\"my-analytics-script.js\"></script>\n{% endif %}\n```\n\n## Deployment\n\nThe final step is to get the site onto a production server. The most basic way to do this is to run a production build:\n\n``` bash\nJEKYLL_ENV=production bundle exec jekyll build\n```\n\nAnd copy the contents of `_site` to your server.\n\nA better way is to automate this process using a [CI](../../deployment/automated/index) or [3rd party](../../deployment/third-party/index).\n\n## Wrap up\n\nThat brings us to the end of this step-by-step tutorial and the beginning of your Jekyll journey!\n\n- Come say hi to the [community forums](https://talk.jekyllrb.com)\n- Help us make Jekyll better by [contributing](https://jekyllrb.com/docs/contributing/)\n- Keep building Jekyll sites!\n\n1.  [Setup](../01-setup/index)\n2.  [Liquid](../02-liquid/index)\n3.  [Front Matter](../03-front-matter/index)\n4.  [Layouts](../04-layouts/index)\n5.  [Includes](../05-includes/index)\n6.  [Data Files](../06-data-files/index)\n7.  [Assets](../07-assets/index)\n8.  [Blogging](../08-blogging/index)\n9.  [Collections](../09-collections/index)\n10. [Deployment](index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/step-by-step/10-deployment/](https://jekyllrb.com/docs/step-by-step/10-deployment/)"
- name: 3rd Party
  id: deployment/third-party/index
  summary: Aerobatic has custom domains, global CDN distribution, basic auth, CORS proxying, and a growing list of plugins all included
  description: "# 3rd Party\n\n## Aerobatic\n\n[Aerobatic](https://www.aerobatic.com) has custom domains, global CDN distribution, basic auth, CORS proxying, and a growing list of plugins all included.\n\nAutomating the deployment of a Jekyll site is simple. See their [Jekyll docs](https://www.aerobatic.com/docs/static-site-generators/#jekyll) for more details. Your built `_site` folder is deployed to their highly-available, globally distributed hosting service.\n\n## AWS Amplify\n\nThe [AWS Amplify Console](https://console.amplify.aws) provides continuous deployment and hosting for modern web apps (single page apps and static site generators). Continuous deployment allows developers to deploy updates to their web app on every code commit to their Git repository. Hosting includes features such as globally available CDNs, 1-click custom domain setup + HTTPS, feature branch deployments, redirects, trailing slashes, and password protection.\n\nRead this [step-by-step guide](https://medium.com/@jameshamann/deploy-your-jekyll-site-using-aws-amplify-with-only-a-few-clicks-8f3dd8f26112) to deploy and host your Jekyll site on AWS Amplify.\n\n## Bip\n\n[Bip](https://bip.sh) provides zero downtime deployment, a global CDN, SSL, unlimited bandwidth and more for Jekyll websites. Deploy in seconds from the command line. [Visit the Bip website](https://bip.sh) for more information - which is also built with Jekyll.\n\n## CloudCannon\n\n[CloudCannon](https://cloudcannon.com) has everything you need to build, host and update Jekyll websites. Take advantage of our global CDN, automated SSL, continuous deployment and [more](https://cloudcannon.com/features/).\n\n## GitHub Pages\n\nSites on GitHub Pages are powered by Jekyll behind the scenes, so if you’re looking for a zero-hassle, zero-cost solution, GitHub Pages are a great way to [host your Jekyll-powered website for free](../../github-pages/index).\n\n## GitLab Pages\n\n[GitLab Pages](https://about.gitlab.com/stages-devops-lifecycle/pages/) offers free hosting with custom domains. [Get started with Jekyll](https://docs.gitlab.com/ee/user/project/pages/getting_started_part_four.html#practical-example) and a fully customizable pipeline.\n\n## KeyCDN\n\n[KeyCDN](https://www.keycdn.com) accelerates Jekyll-powered websites with a wide range of other features such as real time image processing including WebP transformation.  \nThe [Jekyll hosting tutorial](https://www.keycdn.com/support/jekyll-hosting) provides various options to supercharge Jekyll sites with just a few steps. It combines best flexibility and excellent performance.\n\n## Kickster\n\nUse [Kickster](http://kickster.nielsenramon.com/) for automated deploys to GitHub Pages when using unsupported plugins on GitHub Pages.\n\nKickster provides a basic Jekyll project setup packed with web best practises and useful optimization tools increasing your overall project quality. Kickster ships with automated and worry-free deployment scripts for GitHub Pages.\n\nInstall the Kickster gem and you are good to go. More documentation can here found [here](https://github.com/nielsenramon/kickster#kickster). If you do not want to use the gem or start a new project you can just copy paste the deployment scripts for [Travis CI](https://github.com/nielsenramon/kickster/tree/master/snippets/travis) or [Circle CI](https://github.com/nielsenramon/kickster#automated-deployment-with-circle-ci).\n\n## Netlify\n\nNetlify provides Global CDN, Continuous Deployment, one click HTTPS and [much more](https://www.netlify.com/features/), providing developers a robust toolset for modern web projects, without added complexity. Netlify supports custom plugins for Jekyll and has a free plan for open source projects.\n\nRead this [Jekyll step-by-step guide](https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/) to setup your Jekyll site on Netlify.\n\n## Render\n\n[Render](https://render.com) provides zero config continuous deployment for static sites. The service is free under 100GB monthly bandwith.\n\n## Static Publisher\n\n[Static Publisher](https://github.com/static-publisher/static-publisher) is another automated deployment option with a server listening for webhook posts, though it’s not tied to GitHub specifically. It has a one-click deploy to Heroku, it can watch multiple projects from one server, it has an easy to user admin interface and can publish to either S3 or to a git repository (e.g. gh-pages).\n\n## Vercel\n\n[Vercel](https://vercel.com/) provides zero config continuous deployment, HTTPS Custom domains, high performance smart CDN, you get instant static deploy for free.\n\n## 21YunBox\n\n[21YunBox](https://www.21yunbox.com) provides blazing fast Chinese CDN, Continuous Deployment, one click HTTPS and [much more](https://www.21yunbox.com/docs/), providing developers a hassle-free solution to launch their web projects in China.\n\nRead this [Jekyll step-by-step guide](https://www.21yunbox.com/docs/#/deploy-jekyll) to deploy your Jekyll site on 21YunBox.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/deployment/third-party/](https://jekyllrb.com/docs/deployment/third-party/)"
- name: Assets
  id: assets/index
  summary: Jekyll provides built-in support for Sass and can work with CoffeeScript via a Ruby gem
  description: "# Assets\n\nJekyll provides built-in support for [Sass](https://sass-lang.com/) and can work with [CoffeeScript](https://coffeescript.org/) via a Ruby gem. In order to use them, you must first create a file with the proper extension name (one of `.sass`, `.scss`, or `.coffee`) and ***start the file with two lines of triple dashes***, like this:\n\n``` sass\n---\n---\n\n// start content\n.my-definition\n  font-size: 1.2em\n```\n\nJekyll treats these files the same as a regular page, in that the output file will be placed in the same directory that it came from. For instance, if you have a file named `css/styles.scss` in your site’s source folder, Jekyll will process it and put it in your site’s destination folder under `css/styles.css`.\n\n> ##### Jekyll processes all Liquid filters and tags in asset files\n>\n> If you are using [Mustache](https://mustache.github.io) or another JavaScript templating language that conflicts with the [Liquid template syntax](../liquid/index), you will need to place `{% raw %}` and `{% endraw %}` tags around your code.\n\n## Sass/SCSS\n\nJekyll allows you to customize your Sass conversion in certain ways.\n\nPlace all your partials in your `sass_dir`, which defaults to `<source>/_sass`. Place your main SCSS or Sass files in the place you want them to be in the output file, such as `<source>/css`. For an example, take a look at [this example site using Sass support in Jekyll](https://github.com/jekyll/jekyll-sass-converter/tree/master/docs).\n\nIf you are using Sass `@import` statements, you’ll need to ensure that your `sass_dir` is set to the base directory that contains your Sass files:\n\n``` yaml\nsass:\n    sass_dir: _sass\n```\n\nThe Sass converter will default the `sass_dir` configuration option to `_sass`.\n\n> ##### The `sass_dir` is only used by Sass\n>\n> Note that the `sass_dir` becomes the load path for Sass imports, nothing more. This means that Jekyll does not know about these files directly. Any files here should not contain the empty front matter as described above. If they do, they'll not be transformed as described above. This folder should only contain imports.\n\nYou may also specify the output style with the `style` option in your `_config.yml` file:\n\n``` yaml\nsass:\n    style: compressed\n```\n\nThese are passed to Sass, so any output style options Sass supports are valid here, too.\n\n## Coffeescript\n\nTo enable Coffeescript in Jekyll 3.0 and up you must\n\n- Install the `jekyll-coffeescript` gem\n- Ensure that your `_config.yml` is up-to-date and includes the following:\n\n``` yaml\nplugins:\n  - jekyll-coffeescript\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/assets/](https://jekyllrb.com/docs/assets/)"
- name: Automated Deployment
  id: deployment/automated/index
  summary: There are a number of ways to easily automate the deployment of a Jekyll site
  description: "# Automated Deployment\n\nThere are a number of ways to easily automate the deployment of a Jekyll site.\n\n## Continuous Integration Service\n\nOne of the easiest ways to set up an automated deployment flow is by using a CI.\n\nThese services run a script when there’s a commit on your Git repository. You might want this script to build the site, run tests over the output then deploy it to the service of your choice.\n\nWe have guides for the following providers:\n\n- [GitHub Actions](../../continuous-integration/github-actions/index)\n- [Travis CI](../../continuous-integration/travis-ci/index)\n- [CircleCI](../../continuous-integration/circleci/index)\n- [Buddy](../../continuous-integration/buddyworks/index)\n\n## Git post-receive hook\n\nTo have a remote server handle the deploy for you every time you push changes using Git, you can create a user account which has all the public keys that are authorized to deploy in its `authorized_keys` file. With that in place, setting up the post-receive hook is done as follows:\n\n``` bash\nlaptop$ ssh deployer@example.com\nserver$ mkdir myrepo.git\nserver$ cd myrepo.git\nserver$ git --bare init\nserver$ cp hooks/post-receive.sample hooks/post-receive\nserver$ mkdir /var/www/myrepo\n```\n\nNext, add the following lines to hooks/post-receive and be sure Jekyll is installed on the server:\n\n``` bash\n#!/bin/bash -l\n\n# Install Ruby Gems to ~/gems\nexport GEM_HOME=$HOME/gems\nexport PATH=$GEM_HOME/bin:$PATH\n\nTMP_GIT_CLONE=$HOME/tmp/myrepo\nGEMFILE=$TMP_GIT_CLONE/Gemfile\nPUBLIC_WWW=/var/www/myrepo\n\ngit clone $GIT_DIR $TMP_GIT_CLONE\nBUNDLE_GEMFILE=$GEMFILE bundle install\nBUNDLE_GEMFILE=$GEMFILE bundle exec jekyll build -s $TMP_GIT_CLONE -d $PUBLIC_WWW\nrm -Rf $TMP_GIT_CLONE\nexit\n```\n\nFinally, run the following command on any users laptop that needs to be able to deploy using this hook:\n\n``` bash\nlaptops$ git remote add deploy deployer@example.com:~/myrepo.git\n```\n\nDeploying is now as easy as telling nginx or Apache to look at `/var/www/myrepo` and running the following:\n\n``` bash\nlaptops$ git push deploy master\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/deployment/automated/](https://jekyllrb.com/docs/deployment/automated/)"
- name: Blog Migrations
  id: migrations/index
  summary: If you’re switching to Jekyll from another blogging system, Jekyll’s importers can help you with the move
  description: "# Blog Migrations\n\nIf you’re switching to Jekyll from another blogging system, Jekyll’s importers can help you with the move. To learn more about importing your site to Jekyll, visit our [`jekyll-import` docs site](https://import.jekyllrb.com/docs/home/).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/migrations/](https://jekyllrb.com/docs/migrations/)"
- name: Buddy
  id: continuous-integration/buddyworks/index
  summary: Buddy is a Docker-based CI server that you can set up in 15-20 minutes to build, test, and deploy your Jekyll websites
  description: "# Buddy\n\n[Buddy](https://buddy.works) is a [Docker](https://www.docker.com/)-based CI server that you can set up in 15-20 minutes to build, test, and deploy your Jekyll websites. It supports [GitHub](https://github.com), [Bitbucket](https://bitbucket.org/), and [GitLab](https://gitlab.com) repositories, and can be installed on-premises or used in cloud. The following guide will show you how to set up a free environment to build and test your Jekyll project.\n\n## 1. Getting started\n\n1.  Log in at <https://buddy.works> with your GitHub/Bitbucket account or email\n2.  Choose your Git provider and select or push your Jekyll Project\n3.  Create a new pipeline and set the trigger mode to ‘On every push’\n4.  Add and configure the Jekyll action and save the pipeline\n\n## 2. How it works\n\nWhenever you make a push to the selected branch, the Jekyll action runs `jekyll build` in an isolated [Jekyll Docker image](https://hub.docker.com/r/jekyll/jekyll/). The output is generated to the `/filesystem` directory, and can be further deployed to FTP/SFTP and IaaS services. You can add your own commands, install additional packages, attach services, and run Selenium tests, as well as add other actions down the pipeline, eg. a Slack notification or an SSH script that will restart your server.\n\n## 3. Using YAML for configuration\n\nIf you prefer configuration as code over GUI, you can generate a `buddy.yml` that will create a pipeline with the Jekyll action once you push it to the target branch:\n\n``` yaml\n- pipeline: \"Build and Deploy Jekyll site\"\n  trigger_mode: \"ON_EVERY_PUSH\"\n  ref_name: \"master\"\n  actions:\n  - action: \"Execute: jekyll build\"\n    type: \"BUILD\"\n    docker_image_name: \"jekyll/jekyll\"\n    docker_image_tag: \"latest\"\n    execute_commands:\n    - \"chown jekyll:jekyll $WORKING_DIR\"\n    - \"jekyll build\"\n```\n\n## 4. Setting up on-premises server\n\nThe self-hosted version of Buddy can be installed on any type of server supporting Docker, including [Linux](https://buddy.works/knowledge/standalone/installation-linux), [Mac](https://buddy.works/knowledge/standalone/installation-mac-osx), [AWS EC2](https://buddy.works/knowledge/standalone/installation-amazon-ec2), [DigitalOcean](https://buddy.works/knowledge/standalone/installation-digitalocean), and [Microsoft Azure](https://buddy.works/knowledge/standalone/installation-azure).\n\n## 5. Questions?\n\nThis entire guide is open-source. Go ahead and [edit it](https://github.com/jekyll/jekyll/edit/master/docs/_docs/continuous-integration/buddyworks.md) if you want to expand it or have a fix or [ask for help](https://jekyllrb.com/help/) if you run into trouble and need assistance. Buddy also has an [online community](http://forum.buddy.works/) for help.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/continuous-integration/buddyworks/](https://jekyllrb.com/docs/continuous-integration/buddyworks/)"
- name: CircleCI
  id: continuous-integration/circleci/index
  summary: Building, testing, and deploying your Jekyll-generated website can quickly be done with CircleCI, a continuous integration & delivery tool
  description: "# CircleCI\n\nBuilding, testing, and deploying your Jekyll-generated website can quickly be done with [CircleCI](https://circleci.com/), a continuous integration & delivery tool. CircleCI supports [GitHub](https://github.com/) and [Bitbucket](https://bitbucket.org/), and you can get started for free using an open-source or private repository.\n\n## 1. Follow Your Project on CircleCI\n\nTo start building your project on CircleCI, all you need to do is ‘follow’ your project from CircleCI’s website:\n\n1.  Visit the ‘Add Projects’ page\n2.  From the GitHub or Bitbucket tab on the left, choose a user or organization.\n3.  Find your project in the list and click ‘Build project’ on the right.\n4.  The first build will start on its own. You can start telling CircleCI how to build your project by creating a [circle.yml](https://circleci.com/docs/configuration/) file in the root of your repository.\n\n## 2. Dependencies\n\nThe easiest way to manage dependencies for a Jekyll project (with or without CircleCI) is via a [Gemfile](http://bundler.io/gemfile.html). You’d want to have Jekyll, any Jekyll plugins, [HTML Proofer](#html-proofer), and any other gems that you are using in the `Gemfile`. Don’t forget to version `Gemfile.lock` as well. Here’s an example `Gemfile`:\n\n``` ruby\nsource 'https://rubygems.org'\n\nruby '2.4.0'\n\ngem 'jekyll'\ngem 'html-proofer'\n```\n\nCircleCI detects when `Gemfile` is present and will automatically run `bundle install` for you in the `dependencies` phase.\n\n## 3. Testing\n\nThe most basic test that can be run is seeing if `jekyll build` actually works. This is a blocker, a dependency if you will, for other tests you might run on the generate site. So we’ll run Jekyll, via Bundler, in the `dependencies` phase.\n\n``` yaml\ndependencies:\n  post:\n    - bundle exec jekyll build\n```\n\n### HTML Proofer\n\nWith your site built, it’s useful to run tests to check for valid HTML, broken links, etc. There’s a few tools out there but [HTML Proofer](https://github.com/gjtorikian/html-proofer) is popular amongst Jekyll users. We’ll run it in the `test` phase with a few preferred flags. Check out the `html-proofer` [README](https://github.com/gjtorikian/html-proofer/blob/master/README.md#configuration) for all available flags, or run `htmlproofer --help` locally.\n\n``` yaml\ntest:\n  post:\n    - bundle exec htmlproofer ./_site --check-html --disable-external\n```\n\n## Complete Example circle.yml File\n\nSince v2, CircleCI is a Docker-based system. The example `circle.yml` below demonstrates how to deploy your Jekyll project to AWS. In order for this to work you would first have to set the `S3_BUCKET_NAME` [environment variable](https://circleci.com/docs/2.0/env-vars/).\n\n``` yaml\ndefaults: &defaults\n  working_directory: ~/repo\nversion: 2\njobs:\n  build:\n    <<: *defaults\n    docker:\n      - image: circleci/ruby:2.5\n    environment:\n      BUNDLE_PATH: ~/repo/vendor/bundle\n    steps:\n      - checkout\n      - restore_cache:\n          keys:\n            - rubygems-v1-{{ checksum \"Gemfile.lock\" }}\n            - rubygems-v1-fallback\n      - run:\n          name: Bundle Install\n          command: bundle check || bundle install\n      - save_cache:\n          key: rubygems-v1-{{ checksum \"Gemfile.lock\" }}\n          paths:\n            - vendor/bundle\n      - run:\n          name: Jekyll build\n          command: bundle exec jekyll build\n      - run:\n          name: HTMLProofer tests\n          command: |\n            bundle exec htmlproofer ./_site \\\n              --allow-hash-href \\\n              --check-favicon  \\\n              --check-html \\\n              --disable-external\n      - persist_to_workspace:\n          root: ./\n          paths:\n            - _site\n  deploy:\n    <<: *defaults\n    docker:\n      - image: circleci/python:3.6.3\n    environment:\n      S3_BUCKET_NAME: <<YOUR BUCKET NAME HERE>>\n    steps:\n      - attach_workspace:\n          at: ./\n      - run:\n          name: Install AWS CLI\n          command: pip install awscli --upgrade --user\n      - run:\n          name: Upload to s3\n          command: ~/.local/bin/aws s3 sync ./_site s3://$S3_BUCKET_NAME/ --delete --acl public-read\nworkflows:\n  version: 2\n  test-deploy:\n    jobs:\n      - build\n      - deploy:\n          requires:\n            - build\n          filters:\n            branches:\n              only: master\n```\n\n## Questions?\n\nThis entire guide is open-source. Go ahead and [edit it](https://github.com/jekyll/jekyll/edit/master/docs/_docs/continuous-integration/circleci.md) if you have a fix or [ask for help](https://jekyllrb.com/help/) if you run into trouble and need some help. CircleCI also has an [online community](https://discuss.circleci.com) for help.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/continuous-integration/circleci/](https://jekyllrb.com/docs/continuous-integration/circleci/)"
- name: Collections
  id: collections/index
  summary: Collections are a great way to group related content like members of a team or talks at a conference
  description: "# Collections\n\nCollections are a great way to group related content like members of a team or talks at a conference.\n\n## Setup\n\nTo use a Collection you first need to define it in your `_config.yml`. For example here’s a collection of staff members:\n\n``` yaml\ncollections:\n  - staff_members\n```\n\nIn this case `collections` is defined as a sequence (i.e array) with no additional metadata defined for each collection. You can optionally specify metadata for your collection by defining `collections` as a mapping (i.e hashmap) instead of sequence, and then defining additional fields in it:\n\n``` yaml\ncollections:\n  staff_members:\n    people: true\n```\n\nWhen defining a collection as a sequence, its pages will not be rendered by default. To enable this, `output: true` must be specified on the collection, which requires defining the collection as a mapping. For more information, see the section [Output](#output).\n\n> ##### Gather your collections3.7.0\n>\n> You can optionally specify a directory to store all your collections in the same place with `collections_dir: my_collections`.\n>\n> Then Jekyll will look in `my_collections/_books` for the `books` collection, and in `my_collections/_recipes` for the `recipes` collection.\n\n> ##### Be sure to move drafts and posts into custom collections directory\n>\n> If you specify a directory to store all your collections in the same place with `collections_dir: my_collections`, then you will need to move your `_drafts` and `_posts` directory to `my_collections/_drafts` and `my_collections/_posts`. Note that, the name of your collections directory cannot start with an underscore (\\`\\_\\`).\n\n## Add content\n\nCreate a corresponding folder (e.g. `<source>/_staff_members`) and add documents. Front matter is processed if the front matter exists, and everything after the front matter is pushed into the document’s `content` attribute. If no front matter is provided, Jekyll will consider it to be a [static file](../static-files/index) and the contents will not undergo further processing. If front matter is provided, Jekyll will process the file contents into the expected output.\n\nRegardless of whether front matter exists or not, Jekyll will write to the destination directory (e.g. `_site`) only if `output: true` has been set in the collection’s metadata.\n\nFor example here’s how you would add a staff member to the collection set above. The filename is `./_staff_members/jane.md` with the following content:\n\n``` markdown\n---\nname: Jane Doe\nposition: Developer\n---\nJane has worked on Jekyll for the past *five years*.\n```\n\n*Do note that in spite of being considered as a collection internally, the above doesn’t apply to [posts](../posts/index). Posts with a valid filename format will be marked for processing even if they do not contain front matter.*\n\n> ##### Be sure to name your directories correctly\n>\n> The folder must be named identically to the collection you defined in your `_config.yml` file, with the addition of the preceding `_` character.\n\n## Output\n\nNow you can iterate over `site.staff_members` on a page and output the content for each staff member. Similar to posts, the body of the document is accessed using the `content` variable:\n\n``` liquid\n{% for staff_member in site.staff_members %}\n  <h2>{{ staff_member.name }} - {{ staff_member.position }}</h2>\n  <p>{{ staff_member.content | markdownify }}</p>\n{% endfor %}\n```\n\nIf you’d like Jekyll to create a rendered page for each document in your collection, you can set the `output` key to `true` in your collection metadata in `_config.yml`:\n\n``` yaml\ncollections:\n  staff_members:\n    output: true\n```\n\nYou can link to the generated page using the `url` attribute:\n\n``` liquid\n{% for staff_member in site.staff_members %}\n  <h2>\n    <a href=\"{{ staff_member.url }}\">\n      {{ staff_member.name }} - {{ staff_member.position }}\n    </a>\n  </h2>\n  <p>{{ staff_member.content | markdownify }}</p>\n{% endfor %}\n```\n\n## Permalinks\n\nThere are special [permalink variables for collections](../permalinks/index#collections) to help you control the output url for the entire collection.\n\n## Custom Sorting of Documents4.0\n\nBy default, two documents in a collection are sorted by their `date` attribute when both of them have the `date` key in their front matter. However, if either or both documents do not have the `date` key in their front matter, they are sorted by their respective paths.\n\nYou can control this sorting via the collection’s metadata.\n\n### Sort By Front Matter Key\n\nDocuments can be sorted based on a front matter key by setting a `sort_by` metadata to the front matter key string. For example, to sort a collection of tutorials based on key `lesson`, the configuration would be:\n\n``` yaml\ncollections:\n  tutorials:\n    sort_by: lesson\n```\n\nThe documents are arranged in the increasing order of the key’s value. If a document does not have the front matter key defined then that document is placed immediately after sorted documents. When multiple documents do not have the front matter key defined, those documents are sorted by their dates or paths and then placed immediately after the sorted documents.\n\n### Manually Ordering Documents\n\nYou can also manually order the documents by setting an `order` metadata with **the filenames listed** in the desired order. For example, a collection of tutorials would be configured as:\n\n``` yaml\ncollections:\n  tutorials:\n    order:\n      - hello-world.md\n      - introduction.md\n      - basic-concepts.md\n      - advanced-concepts.md\n```\n\nAny documents with filenames that do not match the list entry simply gets placed after the rearranged documents. If a document is nested under subdirectories, include them in entries as well:\n\n``` yaml\ncollections:\n  tutorials:\n    order:\n      - hello-world.md\n      - introduction.md\n      - concepts/basics.md\n      - concepts/advanced.md\n```\n\nIf both metadata keys have been defined properly, `order` list takes precedence.\n\n## Liquid Attributes\n\n### Collections\n\nCollections are also available under `site.collections`, with the metadata you specified in your `_config.yml` (if present) and the following information:\n\n| Variable             | Description                                                                 |\n|----------------------|-----------------------------------------------------------------------------|\n| `label`              | The name of your collection, e.g. `my_collection`.                          |\n| `docs`               | An array of [documents](#documents).                                        |\n| `files`              | An array of static files in the collection.                                 |\n| `relative_directory` | The path to the collection's source directory, relative to the site source. |\n| `directory`          | The full path to the collections's source directory.                        |\n| `output`             | Whether the collection's documents will be output as individual files.      |\n\n> ##### A Hard-Coded Collection\n>\n> In addition to any collections you create yourself, the `posts` collection is hard-coded into Jekyll. It exists whether you have a `_posts` directory or not. This is something to note when iterating through `site.collections` as you may need to filter it out.\n>\n> You may wish to use filters to find your collection: `{{ site.collections | where: \"label\", \"myCollection\" | first }}`\n\n> ##### Collections and Time\n>\n> Except for documents in hard-coded default collection `posts`, all documents in collections you create, are accessible via Liquid irrespective of their assigned date, if any, and therefore renderable.\n>\n> Documents are attempted to be written to disk only if the concerned collection metadata has `output: true`. Additionally, future-dated documents are only written if `site.future` *is also true*.\n>\n> More fine-grained control over documents being written to disk can be exercised by setting `published: false` (*`true` by default*) in the document's front matter.\n\n### Documents\n\nIn addition to any front matter provided in the document’s corresponding file, each document has the following attributes:\n\n| Variable        | Description                                                                                                                                                                                                                                           |\n|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `content`       | The (unrendered) content of the document. If no front matter is provided, Jekyll will not generate the file in your collection. If front matter is used, then this is all the contents of the file after the terminating \\`---\\` of the front matter. |\n| `output`        | The rendered output of the document, based on the `content`.                                                                                                                                                                                          |\n| `path`          | The full path to the document's source file.                                                                                                                                                                                                          |\n| `relative_path` | The path to the document's source file relative to the site source.                                                                                                                                                                                   |\n| `url`           | The URL of the rendered collection. The file is only written to the destination when the collection to which it belongs has `output: true` in the site's configuration.                                                                               |\n| `collection`    | The name of the document's collection.                                                                                                                                                                                                                |\n| `date`          | The date of the document's collection.                                                                                                                                                                                                                |\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/collections/](https://jekyllrb.com/docs/collections/)"
- name: Command Line Usage
  id: usage/index
  summary: The Jekyll gem makes a jekyll executable available to you in your terminal
  description: "# Command Line Usage\n\nThe Jekyll gem makes a `jekyll` executable available to you in your terminal.\n\nThe `jekyll` program has several commands but the structure is always:\n\n``` plaintext\njekyll command [argument] [option] [argument_to_option]\n\nExamples:\n    jekyll new site/ --blank\n    jekyll serve --config _alternative_config.yml\n```\n\nTypically you’ll use `jekyll serve` while developing locally and `jekyll build` when you need to generate the site for production.\n\nFor a full list of options and their argument, see [Build Command Options](../configuration/options/index#build-command-options).\n\nHere are some of the most common commands:\n\n- `jekyll new PATH` - Creates a new Jekyll site with default gem-based theme at specified path. The directories will be created as necessary.\n- `jekyll new PATH --blank` - Creates a new blank Jekyll site scaffold at specified path.\n- `jekyll build` or `jekyll b` - Performs a one off build your site to `./_site` (by default).\n- `jekyll serve` or `jekyll s` - Builds your site any time a source file changes and serves it locally.\n- `jekyll clean` - Removes all generated files: destination folder, metadata file, Sass and Jekyll caches.\n- `jekyll help` - Shows help, optionally for a given subcommand, e.g. `jekyll help build`.\n- `jekyll new-theme` - Creates a new Jekyll theme scaffold.\n- `jekyll doctor` - Outputs any deprecation or configuration issues.\n\nTo change Jekyll’s default build behavior have a look through the [configuration options](../configuration/index).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/usage/](https://jekyllrb.com/docs/usage/)"
- name: Commands
  id: plugins/commands/index
  summary: As of version 2.5.0 , Jekyll can be extended with plugins which provide subcommands for the jekyll executable
  description: "# Commands\n\nAs of version 2.5.0 , Jekyll can be extended with plugins which provide subcommands for the `jekyll` executable. This is possible by including the relevant plugins in a `Gemfile` group called `:jekyll_plugins`:\n\n``` ruby\ngroup :jekyll_plugins do\n  gem \"my_fancy_jekyll_plugin\"\nend\n```\n\nEach `Command` must be a subclass of the `Jekyll::Command` class and must contain one class method: `init_with_program`. An example:\n\n``` ruby\nclass MyNewCommand < Jekyll::Command\n  class << self\n    def init_with_program(prog)\n      prog.command(:new) do |c|\n        c.syntax \"new [options]\"\n        c.description 'Create a new Jekyll site.'\n\n        c.option 'dest', '-d DEST', 'Where the site should go.'\n\n        c.action do |args, options|\n          Jekyll::Site.new_site_at(options['dest'])\n        end\n      end\n    end\n  end\nend\n```\n\nCommands should implement this single class method:\n\n| Method              | Description                                                                                                                                                                                                                                                                               |\n|---------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `init_with_program` | This method accepts one parameter, the [`Mercenary::Program`](https://github.com/jekyll/mercenary#readme) instance, which is the Jekyll program itself. Upon the program, commands may be created using the above syntax. For more details, visit the Mercenary repository on GitHub.com. |\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/commands/](https://jekyllrb.com/docs/plugins/commands/)"
- name: Community
  id: community/index
  summary: As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities
  description: "# Community\n\n## Jekyll Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nRead the full [code of conduct](https://jekyllrb.com/docs/conduct/)\n\n## Where to get support\n\nIf you’re looking for support for Jekyll, there are a lot of options:\n\n- Read the [Jekyll Documentation](https://jekyllrb.com/docs/)\n- If you have a question about using Jekyll, start a discussion on the [Jekyll Forum](https://talk.jekyllrb.com/) or [StackOverflow](https://stackoverflow.com/questions/tagged/jekyll)\n- Chat with Jekyllers — Join our [Gitter channel](https://gitter.im/jekyll/jekyll) or our [IRC channel on Freenode](irc:irc.freenode.net/jekyll)\n\nThere are a bunch of helpful community members on these services who are willing to point you in the right direction.\n\n**Reminder: Jekyll’s issue tracker is not a support forum.**\n\n## Ways to contribute\n\n- [How to Contribute](https://jekyllrb.com/docs/contributing/)\n- [How to file a bug](bug/index)\n- [Guide for maintaining Jekyll](https://jekyllrb.com/docs/maintaining/)\n\n## Jekyllconf\n\n[Watch videos](https://jekyllrb.com/jekyllconf/) from members of the Jekyll community speak about interesting use cases, tricks they’ve learned or meta Jekyll topics.\n\n## Jekyll on Twitter\n\nThe [official Jekyll Twitter account](https://twitter.com/jekyllrb).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/community/](https://jekyllrb.com/docs/community/)"
- name: Configuration
  id: configuration/index
  summary: Jekyll gives you a lot of flexibility to customize how it builds your site
  description: "# Configuration\n\nJekyll gives you a lot of flexibility to customize how it builds your site. These options can either be specified in a `_config.yml` or `_config.toml` file placed in your site’s root directory, or can be specified as flags for the `jekyll` executable in the terminal.\n\n- [Configuration Options](options/index)\n- [Default Configuration](default/index)\n- [Front Matter Defaults](front-matter-defaults/index)\n- [Environments](environments/index)\n- [Markdown Options](markdown/index)\n- [Liquid Options](liquid/index)\n- [Webrick Options](webrick/index)\n- [Incremental Regeneration](incremental-regeneration/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/](https://jekyllrb.com/docs/configuration/)"
- name: Configuration Options
  id: configuration/options/index
  summary: The tables below list the available settings for Jekyll, and the various options (specified in the configuration file) and flags (specified on the command-line) that control them
  description: "# Configuration Options\n\nThe tables below list the available settings for Jekyll, and the various `options` (specified in the configuration file) and `flags` (specified on the command-line) that control them.\n\n### Global Configuration\n\n[TABLE]\n\n> ##### Destination folders are cleaned on site builds\n>\n> The contents of `<destination>` are automatically cleaned, by default, when the site is built. Files or folders that are not created by your site will be removed. Some files could be retained by specifying them within the `<keep_files>` configuration directive.\n>\n> Do not use an important location for `<destination>`; instead, use it as a staging area and copy files from there to your web server.\n\n### Build Command Options\n\n[TABLE]\n\n### Serve Command Options\n\nIn addition to the options below, the `serve` sub-command can accept any of the options for the `build` sub-command, which are then applied to the site build which occurs right before your site is served.\n\n[TABLE]\n\n> ##### Do not use tabs in configuration files\n>\n> This will either lead to parsing errors, or Jekyll will revert to the default settings. Use spaces instead.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/options/](https://jekyllrb.com/docs/configuration/options/)"
- name: Converters
  id: plugins/converters/index
  summary: If you have a new markup language you’d like to use with your site, you can include it by implementing your own converter
  description: "# Converters\n\nIf you have a new markup language you’d like to use with your site, you can include it by implementing your own converter. Both the Markdown and [Textile](https://github.com/jekyll/jekyll-textile-converter) markup languages are implemented using this method.\n\n> ##### Remember your Front Matter\n>\n> Jekyll will only convert files that have a YAML header at the top, even for converters you add using a plugin.\n\nBelow is a converter that will take all posts ending in `.upcase` and process them using the `UpcaseConverter`:\n\n``` ruby\nmodule Jekyll\n  class UpcaseConverter < Converter\n    safe true\n    priority :low\n\n    def matches(ext)\n      ext =~ /^\\.upcase$/i\n    end\n\n    def output_ext(ext)\n      \".html\"\n    end\n\n    def convert(content)\n      content.upcase\n    end\n  end\nend\n```\n\nConverters should implement at a minimum 3 methods:\n\n| Method       | Description                                                                                                                                                                                       |\n|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `matches`    | Does the given extension match this converter’s list of acceptable extensions? Takes one argument: the file’s extension (including the dot). Must return `true` if it matches, `false` otherwise. |\n| `output_ext` | The extension to be given to the output file (including the dot). Usually this will be `\".html\"`.                                                                                                 |\n| `convert`    | Logic to do the content conversion. Takes one argument: the raw content of the file (without front matter). Must return a String.                                                                 |\n\nIn our example, `UpcaseConverter#matches` checks if our filename extension is `.upcase`, and will render using the converter if it is. It will call `UpcaseConverter#convert` to process the content. In our simple converter we’re simply uppercasing the entire content string. Finally, when it saves the page, it will do so with a `.html` extension.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/converters/](https://jekyllrb.com/docs/plugins/converters/)"
- name: Data Files
  id: datafiles/index
  summary: In addition to the built-in variables available from Jekyll, you can specify your own custom data that can be accessed via the Liquid templating system
  description: "# Data Files\n\nIn addition to the [built-in variables](../variables/index) available from Jekyll, you can specify your own custom data that can be accessed via the [Liquid templating system](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers).\n\nJekyll supports loading data from [YAML](http://yaml.org/), [JSON](http://www.json.org/), [CSV](https://en.wikipedia.org/wiki/Comma-separated_values), and [TSV](https://en.wikipedia.org/wiki/Tab-separated_values) files located in the `_data` directory. Note that CSV and TSV files *must* contain a header row.\n\nThis powerful feature allows you to avoid repetition in your templates and to set site specific options without changing `_config.yml`.\n\nPlugins/themes can also leverage Data Files to set configuration variables.\n\n## The Data Folder\n\nThe `_data` folder is where you can store additional data for Jekyll to use when generating your site. These files must be YAML, JSON, or CSV files (using either the `.yml`, `.yaml`, `.json` or `.csv` extension), and they will be accessible via `site.data`.\n\n## Example: List of members\n\nHere is a basic example of using Data Files to avoid copy-pasting large chunks of code in your Jekyll templates:\n\nIn `_data/members.yml`:\n\n``` yaml\n- name: Eric Mill\n  github: konklone\n\n- name: Parker Moore\n  github: parkr\n\n- name: Liu Fengyun\n  github: liufengyun\n```\n\nOr `_data/members.csv`:\n\n``` plaintext\nname,github\nEric Mill,konklone\nParker Moore,parkr\nLiu Fengyun,liufengyun\n```\n\nThis data can be accessed via `site.data.members` (notice that the file’s *basename* determines the variable name and therefore one should avoid having data files with the same basename but different extensions, in the same directory).\n\nYou can now render the list of members in a template:\n\n``` liquid\n<ul>\n{% for member in site.data.members %}\n  <li>\n    <a href=\"https://github.com/{{ member.github }}\">\n      {{ member.name }}\n    </a>\n  </li>\n{% endfor %}\n</ul>\n```\n\n## Subfolders\n\nData files can also be placed in sub-folders of the `_data` folder. Each folder level will be added to a variable’s namespace. The example below shows how GitHub organizations could be defined separately in a file under the `orgs` folder:\n\nIn `_data/orgs/jekyll.yml`:\n\n``` yaml\nusername: jekyll\nname: Jekyll\nmembers:\n  - name: Tom Preston-Werner\n    github: mojombo\n\n  - name: Parker Moore\n    github: parkr\n```\n\nIn `_data/orgs/doeorg.yml`:\n\n``` yaml\nusername: doeorg\nname: Doe Org\nmembers:\n  - name: John Doe\n    github: jdoe\n```\n\nThe organizations can then be accessed via `site.data.orgs`, followed by the file name:\n\n``` liquid\n<ul>\n{% for org_hash in site.data.orgs %}\n{% assign org = org_hash[1] %}\n  <li>\n    <a href=\"https://github.com/{{ org.username }}\">\n      {{ org.name }}\n    </a>\n    ({{ org.members | size }} members)\n  </li>\n{% endfor %}\n</ul>\n```\n\n## Example: Accessing a specific author\n\nPages and posts can also access a specific data item. The example below shows how to access a specific item:\n\n`_data/people.yml`:\n\n``` yaml\ndave:\n    name: David Smith\n    twitter: DavidSilvaSmith\n```\n\nThe author can then be specified as a page variable in a post’s front matter:\n\n``` liquid\n---\ntitle: sample post\nauthor: dave\n---\n\n{% assign author = site.data.people[page.author] %}\n<a rel=\"author\"\n  href=\"https://twitter.com/{{ author.twitter }}\"\n  title=\"{{ author.name }}\">\n    {{ author.name }}\n</a>\n```\n\nFor information on how to build robust navigation for your site (especially if you have a documentation website or another type of Jekyll site with a lot of pages to organize), see [Navigation](https://jekyllrb.com/tutorials/navigation/).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/datafiles/](https://jekyllrb.com/docs/datafiles/)"
- name: Default Configuration
  id: configuration/default/index
  summary: Jekyll runs with the following configuration options by default
  description: "# Default Configuration\n\nJekyll runs with the following configuration options by default. Alternative settings for these options can be explicitly specified in the configuration file or on the command-line.\n\n> ##### Be aware of directory paths\n>\n> Make directory path values in configuration keys like \\`plugins_dir\\` relative to the current working directory, not the site source.\n\n``` yaml\n# Where things are\nsource              : .\ndestination         : ./_site\ncollections_dir     : .\nplugins_dir         : _plugins # takes an array of strings and loads plugins in that order\nlayouts_dir         : _layouts\ndata_dir            : _data\nincludes_dir        : _includes\nsass:\n  sass_dir: _sass\ncollections:\n  posts:\n    output          : true\n\n# Handling Reading\nsafe                : false\ninclude             : [\".htaccess\"]\nexclude             : [\"Gemfile\", \"Gemfile.lock\", \"node_modules\", \"vendor/bundle/\", \"vendor/cache/\", \"vendor/gems/\", \"vendor/ruby/\"]\nkeep_files          : [\".git\", \".svn\"]\nencoding            : \"utf-8\"\nmarkdown_ext        : \"markdown,mkdown,mkdn,mkd,md\"\nstrict_front_matter : false\n\n# Filtering Content\nshow_drafts         : null\nlimit_posts         : 0\nfuture              : false\nunpublished         : false\n\n# Plugins\nwhitelist           : []\nplugins             : []\n\n# Conversion\nmarkdown            : kramdown\nhighlighter         : rouge\nlsi                 : false\nexcerpt_separator   : \"\\n\\n\"\nincremental         : false\n\n# Serving\ndetach              : false\nport                : 4000\nhost                : 127.0.0.1\nbaseurl             : \"\" # does not include hostname\nshow_dir_listing    : false\n\n# Outputting\npermalink           : date\npaginate_path       : /page:num\ntimezone            : null\n\nquiet               : false\nverbose             : false\ndefaults            : []\n\nliquid:\n  error_mode        : warn\n  strict_filters    : false\n  strict_variables  : false\n\n# Markdown Processors\nkramdown:\n  auto_ids          : true\n  entity_output     : as_char\n  toc_levels        : [1, 2, 3, 4, 5, 6]\n  smart_quotes      : lsquo,rsquo,ldquo,rdquo\n  input             : GFM\n  hard_wrap         : false\n  footnote_nr       : 1\n  show_warnings     : false\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/default/](https://jekyllrb.com/docs/configuration/default/)"
- name: Default Configuration
  id: configuration/incremental-regeneration/index
  summary: While incremental regeneration will work for the most common cases, it will not work correctly in every scenario
  description: "# Default Configuration\n\n## Incremental Regeneration\n\n> ##### Incremental regeneration is still an experimental feature\n>\n> While incremental regeneration will work for the most common cases, it will not work correctly in every scenario. Please be extremely cautious when using the feature, and report any problems not listed below by [opening an issue on GitHub](https://github.com/jekyll/jekyll/issues/new).\n\nIncremental regeneration helps shorten build times by only generating documents and pages that were updated since the previous build. It does this by keeping track of both file modification times and inter-document dependencies in the `.jekyll-metadata` file.\n\nUnder the current implementation, incremental regeneration will only generate a document or page if either it, or one of its dependencies, is modified. Currently, the only types of dependencies tracked are includes (using the `{% include %}` tag) and layouts. This means that plain references to other documents (for example, the common case of iterating over `site.posts` in a post listings page) will not be detected as a dependency.\n\nTo remedy some of these shortfalls, putting `regenerate: true` in the front-matter of a document will force Jekyll to regenerate it regardless of whether it has been modified. Note that this will generate the specified document only; references to other documents’ contents will not work since they won’t be re-rendered.\n\nIncremental regeneration can be enabled via the `--incremental` flag (`-I` for short) from the command-line or by setting `incremental: true` in your configuration file.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/incremental-regeneration/](https://jekyllrb.com/docs/configuration/incremental-regeneration/)"
- name: Deployment
  id: deployment/index
  summary: Sites built using Jekyll can be deployed in a large number of ways due to the static nature of the generated output
  description: "# Deployment\n\nSites built using Jekyll can be deployed in a large number of ways due to the static nature of the generated output. Here’s some of the most common ways:\n\n- [Manually](manual/index)\n- [Automated](automated/index)\n- [Third Party](third-party/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/deployment/](https://jekyllrb.com/docs/deployment/)"
- name: Directory Structure
  id: structure/index
  summary: Since version 3.2 , a new Jekyll project bootstrapped with jekyll new uses gem-based themes to define the look of the site
  description: "# Directory Structure\n\nA basic Jekyll site usually looks something like this:\n\n``` plaintext\n.\n├── _config.yml\n├── _data\n│   └── members.yml\n├── _drafts\n│   ├── begin-with-the-crazy-ideas.md\n│   └── on-simplicity-in-technology.md\n├── _includes\n│   ├── footer.html\n│   └── header.html\n├── _layouts\n│   ├── default.html\n│   └── post.html\n├── _posts\n│   ├── 2007-10-29-why-every-programmer-should-play-nethack.md\n│   └── 2009-04-26-barcamp-boston-4-roundup.md\n├── _sass\n│   ├── _base.scss\n│   └── _layout.scss\n├── _site\n├── .jekyll-metadata\n└── index.html # can also be an 'index.md' with valid front matter\n```\n\n> ##### Directory structure of Jekyll sites using gem-based themes\n>\n> Since version 3.2 , a new Jekyll project bootstrapped with `jekyll new` uses [gem-based themes](../themes/index) to define the look of the site. This results in a lighter default directory structure: `_layouts`, `_includes` and `_sass` are stored in the theme-gem, by default.\n>\n> [minima](https://github.com/jekyll/minima) is the current default theme, and `bundle info minima` will show you where minima theme's files are stored on your computer.\n\nAn overview of what each of these does:\n\n| File / Directory                                          | Description                                                                                                                                                                                                                                                                                                                                                                      |\n|-----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `_config.yml`                                             | Stores [configuration](../configuration/index) data. Many of these options can be specified from the command line executable but it’s easier to specify them here so you don’t have to remember them.                                                                                                                                                                            |\n| `_drafts`                                                 | Drafts are unpublished posts. The format of these files is without a date: `title.MARKUP`. Learn how to [work with drafts](../posts/index#drafts).                                                                                                                                                                                                                               |\n| `_includes`                                               | These are the partials that can be mixed and matched by your layouts and posts to facilitate reuse. The liquid tag `{% include file.ext %}` can be used to include the partial in `_includes/file.ext`.                                                                                                                                                                          |\n| `_layouts`                                                | These are the templates that wrap posts. Layouts are chosen on a post-by-post basis in the [front matter](../front-matter/index), which is described in the next section. The liquid tag `{{ content }}` is used to inject content into the web page.                                                                                                                            |\n| `_posts`                                                  | Your dynamic content, so to speak. The naming convention of these files is important, and must follow the format: `YEAR-MONTH-DAY-title.MARKUP`. The [permalinks](../permalinks/index) can be customized for each post, but the date and markup language are determined solely by the file name.                                                                                 |\n| `_data`                                                   | Well-formatted site data should be placed here. The Jekyll engine will autoload all data files (using either the `.yml`, `.yaml`, `.json`, `.csv` or `.tsv` formats and extensions) in this directory, and they will be accessible via \\`site.data\\`. If there's a file `members.yml` under the directory, then you can access contents of the file through `site.data.members`. |\n| `_sass`                                                   | These are sass partials that can be imported into your `main.scss` which will then be processed into a single stylesheet `main.css` that defines the styles to be used by your site. Learn [how to work with assets](../assets/index).                                                                                                                                           |\n| `_site`                                                   | This is where the generated site will be placed (by default) once Jekyll is done transforming it. It’s probably a good idea to add this to your `.gitignore` file.                                                                                                                                                                                                               |\n| `.jekyll-metadata`                                        | This helps Jekyll keep track of which files have not been modified since the site was last built, and which files will need to be regenerated on the next build. This file will not be included in the generated site. It’s probably a good idea to add this to your `.gitignore` file.                                                                                          |\n| `index.html` or `index.md` and other HTML, Markdown files | Provided that the file has a [front matter](../front-matter/index) section, it will be transformed by Jekyll. The same will happen for any `.html`, `.markdown`, `.md`, or `.textile` file in your site’s root directory or directories not listed above.                                                                                                                        |\n| Other Files/Folders                                       | Except for the special cases listed above, every other directory and file—such as `css` and `images` folders, `favicon.ico` files, and so forth—will be copied verbatim to the generated site. There are plenty of [sites already using Jekyll](https://jekyllrb.com/showcase/) if you’re curious to see how they’re laid out.                                                   |\n\nEvery file or directory beginning with the following characters: `.`, `_ `, `#` or `~` in the `source` directory will not be included in the `destination` folder. Such paths will have to be explicitly specified via the config file in the `include` directive to make sure they’re copied over:\n\n``` yaml\ninclude:\n - _pages\n - .htaccess\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/structure/](https://jekyllrb.com/docs/structure/)"
- name: Environments
  id: configuration/environments/index
  summary: In the build (or serve) arguments, you can specify a Jekyll environment and value
  description: "# Environments\n\nIn the `build` (or `serve`) arguments, you can specify a Jekyll environment and value. The build will then apply this value in any conditional statements in your content.\n\nFor example, suppose you set this conditional statement in your code:\n\n``` liquid\n{% if jekyll.environment == \"production\" %}\n   {% include disqus.html %}\n{% endif %}\n```\n\nWhen you build your Jekyll site, the content inside the `if` statement won’t be run unless you also specify a `production` environment in the build command, like this:\n\n``` bash\nJEKYLL_ENV=production jekyll build\n```\n\nSpecifying an environment value allows you to make certain content available only within specific environments.\n\nThe default value for `JEKYLL_ENV` is `development`. Therefore if you omit `JEKYLL_ENV` from the build arguments, the default value will be `JEKYLL_ENV=development`. Any content inside `{% if jekyll.environment == \"development\" %}` tags will automatically appear in the build.\n\nYour environment values can be anything you want (not just `development` or `production`). Some elements you might want to hide in development environments include Disqus comment forms or Google Analytics. Conversely, you might want to expose an “Edit me in GitHub” button in a development environment but not include it in production environments.\n\nBy specifying the option in the build command, you avoid having to change values in your configuration files when moving from one environment to another.\n\nTo switch part of your config settings depending on the environment, use the [build command option](../options/index#build-command-options), for example `--config _config.yml,_config_development.yml`. Settings in later files override settings in earlier files.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/environments/](https://jekyllrb.com/docs/configuration/environments/)"
- name: Filters
  id: plugins/filters/index
  summary: Filters are modules that export their methods to liquid
  description: "# Filters\n\nFilters are modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter.\n\n``` ruby\nmodule Jekyll\n  module AssetFilter\n    def asset_url(input)\n      \"http://www.example.com/#{input}?#{Time.now.to_i}\"\n    end\n  end\nend\n\nLiquid::Template.register_filter(Jekyll::AssetFilter)\n```\n\n> ##### ProTip™: Access the site object using Liquid\n>\n> Jekyll lets you access the `site` object through the `@context.registers` feature of Liquid at `@context.registers[:site]`. For example, you can access the global configuration file `_config.yml` using `@context.registers[:site].config`.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/filters/](https://jekyllrb.com/docs/plugins/filters/)"
- name: Front Matter
  id: front-matter/index
  summary: Any file that contains a YAML front matter block will be processed by Jekyll as a special file
  description: "# Front Matter\n\nAny file that contains a [YAML](https://yaml.org/) front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:\n\n``` yaml\n---\nlayout: post\ntitle: Blogging Like a Hacker\n---\n```\n\nBetween these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available for you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.\n\n> ##### UTF-8 Character Encoding Warning\n>\n> If you use UTF-8 encoding, make sure that no `BOM` header characters exist in your files or very, very bad things will happen to Jekyll. This is especially relevant if you’re running [Jekyll on Windows](../installation/windows/index).\n\n> ##### Front Matter Variables Are Optional\n>\n> If you want to use [Liquid tags and variables](../variables/index) but don’t need anything in your front matter, just leave it empty! The set of triple-dashed lines with nothing in between will still get Jekyll to process your file. (This is useful for things like CSS and RSS feeds!)\n\n## Predefined Global Variables\n\nThere are a number of predefined global variables that you can set in the front matter of a page or post.\n\n[TABLE]\n\n> ##### Render Posts Marked As Unpublished\n>\n> To preview unpublished pages, run \\`jekyll serve\\` or \\`jekyll build\\` with the \\`--unpublished\\` switch. Jekyll also has a handy [drafts](../posts/index#drafts) feature tailored specifically for blog posts.\n\n## Custom Variables\n\nYou can also set your own front matter variables you can access in Liquid. For instance, if you set a variable called `food`, you can use that in your page:\n\n``` liquid\n---\nfood: Pizza\n---\n\n<h1>{{ page.food }}</h1>\n```\n\n## Predefined Variables for Posts\n\nThese are available out-of-the-box to be used in the front matter for a post.\n\n[TABLE]\n\n> ##### Don't repeat yourself\n>\n> If you don't want to repeat your frequently used front matter variables over and over, define [defaults](../configuration/front-matter-defaults/index \"Front Matter defaults\") for them and only override them where necessary (or not at all). This works both for predefined and custom variables.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/front-matter/](https://jekyllrb.com/docs/front-matter/)"
- name: Front Matter Defaults
  id: configuration/front-matter-defaults/index
  summary: Using front matter is one way that you can specify configuration in the pages and posts for your site
  description: "# Front Matter Defaults\n\nUsing [front matter](../../front-matter/index) is one way that you can specify configuration in the pages and posts for your site. Setting things like a default layout, or customizing the title, or specifying a more precise date/time for the post can all be added to your page or post front matter.\n\nOften times, you will find that you are repeating a lot of configuration options. Setting the same layout in each file, adding the same category - or categories - to a post, etc. You can even add custom variables like author names, which might be the same for the majority of posts on your blog.\n\nInstead of repeating this configuration each time you create a new post or page, Jekyll provides a way to set these defaults in the site configuration. To do this, you can specify site-wide defaults using the `defaults` key in the `_config.yml` file in your project’s root directory.\n\nThe `defaults` key holds an array of scope/values pairs that define what defaults should be set for a particular file path, and optionally, a file type in that path.\n\nLet’s say that you want to add a default layout to all pages and posts in your site. You would add this to your `_config.yml` file:\n\n``` yaml\ndefaults:\n  -\n    scope:\n      path: \"\" # an empty string here means all files in the project\n    values:\n      layout: \"default\"\n```\n\n> ##### Stop and rerun \\`jekyll serve\\` command.\n>\n> The `_config.yml` master configuration file contains global configurations and variable definitions that are read once at execution time. Changes made to `_config.yml` during automatic regeneration are not loaded until the next execution.\n>\n> Note [Data Files](../../datafiles/index) are included and reloaded during automatic regeneration.\n\nHere, we are scoping the `values` to any file that exists in the path `scope`. Since the path is set as an empty string, it will apply to **all files** in your project. You probably don’t want to set a layout on every file in your project - like css files, for example - so you can also specify a `type` value under the `scope` key.\n\n``` yaml\ndefaults:\n  -\n    scope:\n      path: \"\" # an empty string here means all files in the project\n      type: \"posts\" # previously `post` in Jekyll 2.2.\n    values:\n      layout: \"default\"\n```\n\nNow, this will only set the layout for files where the type is `posts`. The different types that are available to you are `pages`, `posts`, `drafts` or any collection in your site. While `type` is optional, you must specify a value for `path` when creating a `scope/values` pair.\n\nAs mentioned earlier, you can set multiple scope/values pairs for `defaults`.\n\n``` yaml\ndefaults:\n  -\n    scope:\n      path: \"\"\n      type: \"pages\"\n    values:\n      layout: \"my-site\"\n  -\n    scope:\n      path: \"projects\"\n      type: \"pages\" # previously `page` in Jekyll 2.2.\n    values:\n      layout: \"project\" # overrides previous default layout\n      author: \"Mr. Hyde\"\n```\n\nWith these defaults, all pages would use the `my-site` layout. Any html files that exist in the `projects/` folder will use the `project` layout, if it exists. Those files will also have the `page.author` [liquid variable](../../variables/index) set to `Mr. Hyde`.\n\n``` yaml\ncollections:\n  my_collection:\n    output: true\n\ndefaults:\n  -\n    scope:\n      path: \"\"\n      type: \"my_collection\" # a collection in your site, in plural form\n    values:\n      layout: \"default\"\n```\n\nIn this example, the `layout` is set to `default` inside the [collection](../../collections/index) with the name `my_collection`.\n\n### Glob patterns in Front Matter defaults\n\nIt is also possible to use glob patterns (currently limited to patterns that contain `*`) when matching defaults. For example, it is possible to set specific layout for each `special-page.html` in any subfolder of `section` folder.3.7.0\n\n``` yaml\ncollections:\n  my_collection:\n    output: true\n\ndefaults:\n  -\n    scope:\n      path: \"section/*/special-page.html\"\n    values:\n      layout: \"specific-layout\"\n```\n\n> ##### Globbing and Performance\n>\n> Please note that globbing a path is known to have a negative effect on performance and is currently not optimized, especially on Windows. Globbing a path will increase your build times in proportion to the size of the associated collection directory.\n\n### Precedence\n\nJekyll will apply all of the configuration settings you specify in the `defaults` section of your `_config.yml` file. You can choose to override settings from other scope/values pair by specifying a more specific path for the scope.\n\nYou can see that in the second to last example above. First, we set the default page layout to `my-site`. Then, using a more specific path, we set the default layout for pages in the `projects/` path to `project`. This can be done with any value that you would set in the page or post front matter.\n\nFinally, if you set defaults in the site configuration by adding a `defaults` section to your `_config.yml` file, you can override those settings in a post or page file. All you need to do is specify the settings in the post or page front matter. For example:\n\n``` yaml\n# In _config.yml\n...\ndefaults:\n  -\n    scope:\n      path: \"projects\"\n      type: \"pages\"\n    values:\n      layout: \"project\"\n      author: \"Mr. Hyde\"\n      category: \"project\"\n...\n```\n\n``` yaml\n# In projects/foo_project.md\n---\nauthor: \"John Smith\"\nlayout: \"foobar\"\n---\nThe post text goes here...\n```\n\nThe `projects/foo_project.md` would have the `layout` set to `foobar` instead of `project` and the `author` set to `John Smith` instead of `Mr. Hyde` when the site is built.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/front-matter-defaults/](https://jekyllrb.com/docs/configuration/front-matter-defaults/)"
- name: Generators
  id: plugins/generators/index
  summary: You can create a generator when you need Jekyll to create additional content based on your own rules
  description: "# Generators\n\nYou can create a generator when you need Jekyll to create additional content based on your own rules.\n\nA generator is a subclass of `Jekyll::Generator` that defines a `generate` method, which receives an instance of [`Jekyll::Site`](https://github.com/jekyll/jekyll/blob/master/lib/jekyll/site.rb). The return value of `generate` is ignored.\n\nGenerators run after Jekyll has made an inventory of the existing content, and before the site is generated. Pages with front matter are stored as instances of [`Jekyll::Page`](https://github.com/jekyll/jekyll/blob/master/lib/jekyll/page.rb) and are available via `site.pages`. Static files become instances of [`Jekyll::StaticFile`](https://github.com/jekyll/jekyll/blob/master/lib/jekyll/static_file.rb) and are available via `site.static_files`. See [the Variables documentation page](../../variables/index) and [`Jekyll::Site`](https://github.com/jekyll/jekyll/blob/master/lib/jekyll/site.rb) for details.\n\nFor instance, a generator can inject values computed at build time for template variables. In the following example, the template `reading.html` has two variables `ongoing` and `done` that are filled in the generator:\n\n``` ruby\nmodule Reading\n  class Generator < Jekyll::Generator\n    def generate(site)\n      ongoing, done = Book.all.partition(&:ongoing?)\n\n      reading = site.pages.detect {|page| page.name == 'reading.html'}\n      reading.data['ongoing'] = ongoing\n      reading.data['done'] = done\n    end\n  end\nend\n```\n\nThe following example is a more complex generator that generates new pages. In this example, the generator will create a series of files under the `categories` directory for each category, listing the posts in each category using the `category_index.html` layout.\n\n``` ruby\nmodule Jekyll\n  class CategoryPageGenerator < Generator\n    safe true\n\n    def generate(site)\n      if site.layouts.key? 'category_index'\n        dir = site.config['category_dir'] || 'categories'\n        site.categories.each_key do |category|\n          site.pages << CategoryPage.new(site, site.source, File.join(dir, category), category)\n        end\n      end\n    end\n  end\n\n  # A Page subclass used in the `CategoryPageGenerator`\n  class CategoryPage < Page\n    def initialize(site, base, dir, category)\n      @site = site\n      @base = base\n      @dir  = dir\n      @name = 'index.html'\n\n      self.process(@name)\n      self.read_yaml(File.join(base, '_layouts'), 'category_index.html')\n      self.data['category'] = category\n\n      category_title_prefix = site.config['category_title_prefix'] || 'Category: '\n      self.data['title'] = \"#{category_title_prefix}#{category}\"\n    end\n  end\nend\n```\n\nGenerators need to implement only one method:\n\n| Method     | Description                         |\n|------------|-------------------------------------|\n| `generate` | Generates content as a side-effect. |\n\nIf your generator is contained within a single file, it can be named whatever you want but it should have an `.rb` extension. If your generator is split across multiple files, it should be packaged as a Rubygem to be published at https://rubygems.org/. In this case, the name of the gem depends on the availability of the name at that site because no two gems can have the same name.\n\nBy default, Jekyll looks for generators in the `_plugins` directory. However, you can change the default directory by assigning the desired name to the key `plugins_dir` in the config file.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/generators/](https://jekyllrb.com/docs/plugins/generators/)"
- name: GitHub Actions
  id: continuous-integration/github-actions/index
  summary: When building a Jekyll site with GitHub Pages, the standard flow is restricted for security reasons and to make it simpler to get a site setup
  description: "# GitHub Actions\n\nWhen building a Jekyll site with GitHub Pages, the standard flow is restricted for security reasons and to make it simpler to get a site setup. For more control over the build and still host the site with GitHub Pages you can use GitHub Actions.\n\n## Advantages of using Actions\n\n### Control over gemset\n\n- **Jekyll version** — Instead of using the currently enabled version at `3.9.0`, you can use any version of Jekyll you want. For example `4.0.0`, or point directly to the repository.\n- **Plugins** — You can use any Jekyll plugins irrespective of them being on the [supported versions](https://pages.github.com/versions/) list, even `*.rb` files placed in the `_plugins` directory of your site.\n- **Themes** — While using a custom theme is possible without Actions, it is now simpler.\n\n### Workflow Management\n\n- **Customization** — By creating a workflow file to run Actions, you can specify custom build steps, use environment variables.\n- **Logging** — The build log is visible and can be tweaked to be verbose, so it is much easier to debug errors using Actions.\n\n## Workspace setup\n\nThe first and foremost requirement is a Jekyll project hosted at GitHub. Choose an existing Jekyll project or follow the [Quickstart](https://jekyllrb.com/docs) and push the repository to GitHub if it is not hosted there already.\n\nWe’re only going to cover builds from the `master` branch in this page. Therefore, ensure that you are working on the `master` branch. If necessary, you may create it based on your default branch. When the Action builds your site, the contents of the *destination* directory will be automatically pushed to the `gh-pages` branch with a commit, ready to be used for serving.\n\nThe Action we’re using here will create (or reset an existing) `gh-pages` branch on every successful deploy. So, if you have an existing `gh-pages` branch that is used to deploy your production build, ensure to make a backup of the contents into a different branch so that you can rollback easily if necessary.\n\nThe Jekyll site we’ll be using for the rest of this page initially consists of just a `_config.yml`, an `index.md` page and a `Gemfile`. The contents are respectively:\n\n``` yaml\n# _config.yml\n\ntitle: \"Jekyll Actions Demo\"\n```\n\n``` liquid\n---\n---\n\nWelcome to My Home Page\n\n{% assign date = '2020-04-13T10:20:00Z' %}\n\n- Original date - {{ date }}\n- With timeago filter - {{ date | timeago }}\n```\n\n``` ruby\n# Gemfile\n\nsource 'https://rubygems.org'\n\ngem 'jekyll', '~> 4.0'\n\ngroup :jekyll_plugins do\n  gem 'jekyll-timeago', '~> 0.13.1'\nend\n```\n\nThe demo site uses Jekyll 4 and a [third-party plugin](https://rubygems.org/gems/jekyll-timeago), both of which are currently not whitelisted for use on GitHub pages. The plugin will allow us to describe how far back a date was from today. e.g. If we give a date as `2016-03-23T10:20:00Z` and the current date is `2020-04-13T10:20:00Z`, then the output would be `4 years and 3 weeks ago`.\n\nThe action we’re using takes care of installing the Ruby gems and dependencies. While that keeps the setup simple for the user, one may encounter issues if they also check-in `Gemfile.lock` if it was generated with an old version of Bundler.\n\n### Setting up the Action\n\nGitHub Actions are registered for a repository by using a YAML file inside the directory path `.github/workflows` (note the dot at the start). Here we shall employ [Jekyll Actions](https://github.com/marketplace/actions/jekyll-actions) from the Marketplace for its simplicity.\n\nCreate a **workflow file**, say `github-pages.yml`, using either the GitHub interface or by pushing a YAML file to the workflow directory path manually. The base contents are:\n\n``` yaml\nname: Build and deploy Jekyll site to GitHub Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  github-pages:\n    runs-on: ubuntu-16.04\n    steps:\n      - uses: actions/checkout@v2\n      - uses: helaili/jekyll-action@2.0.1\n        env:\n          JEKYLL_PAT: ${{ secrets.JEKYLL_PAT }}\n```\n\nThe above workflow can be explained as the following:\n\n- We trigger the build using **on.push** condition for `master` branch only — this prevents the Action from overwriting the `gh-pages` branch on any feature branch pushes.\n- The **name** of the job matches our YAML filename: `github-pages`.\n- The **checkout** action takes care of cloning your repository.\n- We specify our selected **action** and **version number** using `helaili/jekyll-action@2.0.0`. This handles the build and deploy.\n- We set a reference to a secret **environment variable** for the action to use. The `JEKYLL_PAT` is a *Personal Access Token* and is detailed in the next section.\n\nInstead of using the **on.push** condition, you could trigger your build on a **schedule** by using the [on.schedule](https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule) parameter. For example, here we build daily at midnight by specifying **cron** syntax, which can be tested at the [crontab guru](https://crontab.guru/) site.\n\n``` yaml\non:\n  schedule:\n    - cron:  '0 0 * * *'\n```\n\nNote that this string must be quoted to prevent the asterisks from being evaluated incorrectly.\n\n### Providing permissions\n\nThe action needs permissions to push to your `gh-pages` branch. So you need to create a GitHub **authentication token** on your GitHub profile, then set it as an environment variable in your build using *Secrets*:\n\n1.  On your GitHub profile, under **Developer Settings**, go to the [Personal Access Tokens](https://github.com/settings/tokens) section.\n2.  **Create** a token. Give it a name like “GitHub Actions” and ensure it has permissions to `public_repos` (or the entire `repo` scope for private repository) — necessary for the action to commit to the `gh-pages` branch.\n3.  **Copy** the token value.\n4.  Go to your repository’s **Settings** and then the **Secrets** tab.\n5.  **Create** a token named `JEKYLL_PAT` (*important*). Give it a value using the value copied above.\n\n### Build and deploy\n\nOn pushing any local changes onto `master`, the action will be triggered and the build will **start**.\n\nTo watch the progress and see any build errors, check on the build **status** using one of the following approaches:\n\n- **View by commit**\n  - Go to the repository level view in GitHub. Under the most recent commit (near the top) you’ll see a **status symbol** next to the commit message as a tick or *X*. Hover over it and click the **details** link.\n- **Actions tab**\n  - Go to the repository’s Actions tab. Click on the `jekyll` workflow tab.\n\nIf all goes well, all steps will be green and the built assets will now exist on the `gh-pages` branch.\n\nOn a successful build, GitHub Pages will **publish** the site stored on the repository `gh-pages` branches. Note that you do not need to setup a `gh-pages` branch or enable GitHub Pages, as the action will take care of this for you. (For private repositories, you’ll have to upgrade to a paid plan).\n\nTo see the **live site**:\n\n1.  Go to the **environment** tab on your repository.\n2.  Click **View Deployment** to see the deployed site URL.\n3.  View your site at the **URL**. Make sure the `timeago` filter works as expected.\n4.  Optionally **add** this URL to your repository’s main page and to your `README.md`, to make it easy for people to find.\n\nWhen you need to make further **changes** to the site, commit to `master` and push. The workflow will build and deploy your site again.\n\nBe sure **not to edit** the `gh-pages` branch directly, as any changes will be lost on the next successful deploy from the Action.\n\n## External links\n\n- [jekyll-actions](https://github.com/marketplace/actions/jekyll-actions) is an action available on the GitHub Marketplace and was used in this guide.\n- [jekyll-actions-quickstart](https://github.com/MichaelCurrin/jekyll-actions-quickstart) is an unofficial repository that includes a live demo of the `jekyll-actions` action. That project can be used as a template for making a new site.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/continuous-integration/github-actions/](https://jekyllrb.com/docs/continuous-integration/github-actions/)"
- name: GitHub Pages
  id: github-pages/index
  summary: GitHub Pages are public web pages for users, organizations, and repositories, that are freely hosted on GitHub’s github.io domain or on a custom domain name of your choice
  description: "# GitHub Pages\n\n[GitHub Pages](https://pages.github.com) are public web pages for users, organizations, and repositories, that are freely hosted on GitHub’s `github.io` domain or on a custom domain name of your choice. GitHub Pages are powered by Jekyll behind the scenes, so they’re a great way to host your Jekyll-powered website for free.\n\nYour site is automatically generated by GitHub Pages when you push your source files. Note that GitHub Pages works equally well for regular HTML content, simply because Jekyll treats files without front matter as static assets. So if you only need to push generated HTML, you’re good to go without any further setup.\n\nNever built a website with GitHub Pages before? [See this marvelous guide by Jonathan McGlone](http://jmcglone.com/guides/github-pages/) to get you up and running. This guide will teach you what you need to know about Git, GitHub, and Jekyll to create your very own website on GitHub Pages.\n\n## The github-pages gem\n\nOur friends at GitHub have provided the [github-pages](https://github.com/github/pages-gem) gem which is used to manage [Jekyll and its dependencies on GitHub Pages](https://pages.github.com/versions/). Using it in your projects means that when you deploy your site to GitHub Pages, you will not be caught by unexpected differences between various versions of the gems.\n\nNote that GitHub Pages runs in `safe` mode and only allows [a set of whitelisted plugins](https://help.github.com/articles/configuring-jekyll-plugins/#default-plugins).\n\nTo use the currently-deployed version of the gem in your project, add the following to your `Gemfile`:\n\n``` ruby\nsource \"https://rubygems.org\"\n\ngem \"github-pages\", group: :jekyll_plugins\n```\n\nBe sure to run `bundle update` often.\n\n> ##### GitHub Pages Documentation, Help, and Support\n>\n> For more information about what you can do with GitHub Pages, as well as for troubleshooting guides, you should check out [GitHub’s Pages Help section](https://help.github.com/categories/github-pages-basics/). If all else fails, you should contact [GitHub Support](https://github.com/contact).\n\n### Project Page URL Structure\n\nSometimes it’s nice to preview your Jekyll site before you push your `gh-pages` branch to GitHub. The subdirectory-like URL structure GitHub uses for Project Pages complicates the proper resolution of URLs. In order to assure your site builds properly, use the handy [URL filters](../liquid/filters/index):\n\n``` liquid\n<!-- For styles with static names... -->\n<link href=\"{{ 'assets/css/style.css' | relative_url }}\" rel=\"stylesheet\">\n<!-- For documents/pages whose URLs can change... -->\n[{{ page.title }}](\"{{ page.url | relative_url }}\")\n```\n\nThis way you can preview your site locally from the site root on localhost, but when GitHub generates your pages from the `gh-pages` branch all the URLs will resolve properly.\n\n## Deploying Jekyll to GitHub Pages\n\nGitHub Pages work by looking at certain branches of repositories on GitHub. There are two basic types available: [user/organization and project pages](https://help.github.com/articles/user-organization-and-project-pages/). The way to deploy these two types of sites are nearly identical, except for a few minor details.\n\n### User and Organization Pages\n\nUser and organization pages live in a special GitHub repository dedicated to only the GitHub Pages files. This repository must be named after the account name. For example, [@mojombo’s user page repository](https://github.com/mojombo/mojombo.github.io) has the name `mojombo.github.io`.\n\nContent from the `master` branch of your repository will be used to build and publish the GitHub Pages site, so make sure your Jekyll site is stored there.\n\n> ##### Custom domains do not affect repository names\n>\n> GitHub Pages are initially configured to live under the `username.github.io` subdomain, which is why repositories must be named this way **even if a custom domain is being used**.\n\n### Project Pages\n\nUnlike user and organization Pages, Project Pages are kept in the same repository as the project they are for, except that the website content is stored in a specially named `gh-pages` branch or in a `docs` folder on the `master` branch. The content will be rendered using Jekyll, and the output will become available under a subpath of your user pages subdomain, such as `username.github.io/project` (unless a custom domain is specified).\n\nThe Jekyll project repository itself is a perfect example of this branch structure—the [master branch](https://github.com/jekyll/jekyll) contains the actual software project for Jekyll, and the Jekyll website that you’re looking at right now is contained in the [docs folder](https://github.com/jekyll/jekyll/tree/master/docs) of the same repository.\n\nPlease refer to GitHub official documentation on [user, organization and project pages](https://help.github.com/articles/user-organization-and-project-pages/) to see more detailed examples.\n\n> ##### Source files must be in the root directory\n>\n> GitHub Pages [overrides](https://help.github.com/en/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites) the [“Site Source”](../configuration/options/index) configuration value, so if you locate your files anywhere other than the root directory, your site may not build correctly.\n\n> ##### Installing the `github-pages` gem on Windows\n>\n> While Windows is not officially supported, it is possible to install the `github-pages` gem on Windows. Special instructions can be found on our [Windows-specific docs page](../installation/windows/index).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/github-pages/](https://jekyllrb.com/docs/github-pages/)"
- name: Hooks
  id: plugins/hooks/index
  summary: Using hooks, your plugin can exercise fine-grained control over various aspects of the build process
  description: "# Hooks\n\nUsing hooks, your plugin can exercise fine-grained control over various aspects of the build process. If your plugin defines any hooks, Jekyll will call them at pre-defined points.\n\nHooks are registered to an owner and an event name. To register one, you call `Jekyll::Hooks.register`, and pass the hook owner, event name, and code to call whenever the hook is triggered. For example, if you want to execute some custom functionality every time Jekyll renders a page, you could register a hook like this:\n\n``` ruby\nJekyll::Hooks.register :pages, :post_render do |page|\n  # code to call after Jekyll renders a page\nend\n```\n\n*Note: The `:post_convert` events mentioned hereafter is a feature introduced in v4.2.0.*\n\nOut of the box, Jekyll has pre-defined hook points for owners `:site`, `:pages`, `:documents` and `:clean`. Additionally, the hook points defined for `:documents` can be utilized for individual collections only by invoking the collection type instead. i.e. `:posts` for documents in collection `_posts` and `:movies` for documents in collection `_movies`. In all cases, Jekyll calls your hooks with the owner object as the first callback parameter.\n\nEvery registered hook owner supports the following events — `:post_init`, `:pre_render`, `:post_convert`, `:post_render`, `:post_write` — however, the `:site` owner is set up to *respond* to *special event names*. Refer to the subsequent section for details.\n\nAll `:pre_render` hooks and the `:site, :post_render` hook will also provide a `payload` hash as a second parameter. While in the case of `:pre_render` events, the payload gives you full control over the variables that are available during rendering, with the `:site, :post_render` event, the payload contains final values after rendering all the site (useful for sitemaps, feeds, etc).\n\n## Built-in Hook Owners and Events\n\nThe complete list of available hooks:\n\n[TABLE]\n\n## Hooks for custom Jekyll objects\n\nYou can also register and trigger hooks for Jekyll objects introduced by your plugin. All it takes is placing `trigger` calls under a suitable `owner` name, at positons desired within your custom class and registering the `owner` by your plugin.\n\nTo illustrate, consider the following plugin that implements custom functionality for every custom `Excerpt` object initialized:\n\n``` ruby\nmodule Foobar\n  class HookedExcerpt < Jekyll::Excerpt\n    def initialize(doc)\n      super\n      trigger_hooks(:post_init)\n    end\n\n    def output\n      @output ||= trigger_hooks(:post_render, renderer.run)\n    end\n\n    def renderer\n      @renderer ||= Jekyll::Renderer.new(\n        doc.site, self, site.site_payload\n      )\n    end\n\n    def trigger_hooks(hook_name, *args)\n      Jekyll::Hooks.trigger :excerpts, hook_name, self, *args\n    end\n  end\nend\n\nJekyll::Hooks.register :excerpts, :post_init do |excerpt|\n  Jekyll.logger.debug \"Initialized:\",\n                      \"Hooked Excerpt for #{excerpt.doc.inspect}\"\nend\n\nJekyll::Hooks.register :excerpts, :post_render do |excerpt, output|\n  return output unless excerpt.doc.type == :posts\n  Foobar.transform(output)\nend\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/hooks/](https://jekyllrb.com/docs/plugins/hooks/)"
- name: Includes
  id: includes/index
  summary: Jekyll will look for the referenced file (in this case, footer.html) in the _includes directory at the root of your source directory and insert its contents
  description: "# Includes\n\nThe `include` tag allows you to include the content from another file stored in the `_includes` folder:\n\n``` liquid\n{% include footer.html %}\n```\n\nJekyll will look for the referenced file (in this case, `footer.html`) in the `_includes` directory at the root of your source directory and insert its contents.\n\n### Including files relative to another file\n\nYou can choose to include file fragments relative to the current file by using the `include_relative` tag:\n\n``` liquid\n{% include_relative somedir/footer.html %}\n```\n\nYou won’t need to place your included content within the `_includes` directory. Instead, the inclusion is specifically relative to the file where the tag is being used. For example, if `_posts/2014-09-03-my-file.markdown` uses the `include_relative` tag, the included file must be within the `_posts` directory or one of its subdirectories.\n\nNote that you cannot use the `../` syntax to specify an include location that refers to a higher-level directory.\n\nAll the other capabilities of the `include` tag are available to the `include_relative` tag, such as variables.\n\n### Using variables names for the include file\n\nThe name of the file you want to embed can be specified as a variable instead of an actual file name. For example, suppose you defined a variable in your page’s front matter like this:\n\n``` yaml\n---\ntitle: My page\nmy_variable: footer_company_a.html\n---\n```\n\nYou could then reference that variable in your include:\n\n``` liquid\n{% if page.my_variable %}\n  {% include {{ page.my_variable }} %}\n{% endif %}\n```\n\nIn this example, the include would insert the file `footer_company_a.html` from the `_includes/footer_company_a.html` directory.\n\n### Passing parameters to includes\n\nYou can also pass parameters to an include. For example, suppose you have a file called `note.html` in your `_includes` folder that contains this formatting:\n\n``` liquid\n<div markdown=\"span\" class=\"alert alert-info\" role=\"alert\">\n<i class=\"fa fa-info-circle\"></i> <b>Note:</b>\n{{ include.content }}\n</div>\n```\n\nThe `{{ include.content }}` is a parameter that gets populated when you call the include and specify a value for that parameter, like this:\n\n``` liquid\n{% include note.html content=\"This is my sample note.\" %}\n```\n\nThe value of `content` (which is `This is my sample note`) will be inserted into the `{{ include.content }}` parameter.\n\nPassing parameters to includes is especially helpful when you want to hide away complex formatting from your Markdown content.\n\nFor example, suppose you have a special image syntax with complex formatting, and you don’t want your authors to remember the complex formatting. As a result, you decide to simplify the formatting by using an include with parameters. Here’s an example of the special image syntax you might want to populate with an include:\n\n``` html\n<figure>\n   <a href=\"http://jekyllrb.com\">\n   <img src=\"logo.png\" style=\"max-width: 200px;\"\n      alt=\"Jekyll logo\" />\n   </a>\n   <figcaption>This is the Jekyll logo</figcaption>\n</figure>\n```\n\nYou could templatize this content in your include and make each value available as a parameter, like this:\n\n``` liquid\n<figure>\n   <a href=\"{{ include.url }}\">\n   <img src=\"{{ include.file }}\" style=\"max-width: {{ include.max-width }};\"\n      alt=\"{{ include.alt }}\"/>\n   </a>\n   <figcaption>{{ include.caption }}</figcaption>\n</figure>\n```\n\nThis include contains 5 parameters:\n\n- `url`\n- `max-width`\n- `file`\n- `alt`\n- `caption`\n\nHere’s an example that passes all the parameters to this include (the include file is named `image.html`):\n\n``` liquid\n{% include image.html url=\"http://jekyllrb.com\"\nmax-width=\"200px\" file=\"logo.png\" alt=\"Jekyll logo\"\ncaption=\"This is the Jekyll logo.\" %}\n```\n\nThe result is the original HTML code shown earlier.\n\nTo safeguard situations where users don’t supply a value for the parameter, you can use [Liquid’s default filter](https://shopify.github.io/liquid/filters/default/).\n\nOverall, you can create includes that act as templates for a variety of uses — inserting audio or video clips, alerts, special formatting, and more. Note that you should avoid using too many includes, as this will slow down the build time of your site. For example, don’t use includes every time you insert an image. (The above technique shows a use case for special images.)\n\n### Passing parameter variables to includes\n\nSuppose the parameter you want to pass to the include is a variable rather than a string. For example, you might be using `{{ site.product_name }}` to refer to every instance of your product rather than the actual hard-coded name. (In this case, your `_config.yml` file would have a key called `product_name` with a value of your product’s name.)\n\nThe string you pass to your include parameter can’t contain curly braces. For example, you can’t pass a parameter that contains this: `\"The latest version of {{ site.product_name }} is now available.\"`\n\nIf you want to include this variable in your parameter that you pass to an include, you need to store the entire parameter as a variable before passing it to the include. You can use `capture` tags to create the variable:\n\n``` liquid\n{% capture download_note %}\nThe latest version of {{ site.product_name }} is now available.\n{% endcapture %}\n```\n\nThen pass this captured variable into the parameter for the include. Omit the quotation marks around the parameter content because it’s no longer a string (it’s a variable):\n\n``` liquid\n{% include note.html content=download_note %}\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/includes/](https://jekyllrb.com/docs/includes/)"
- name: Installation
  id: installation/index
  summary: Jekyll is a Ruby Gem that can be installed on most systems
  description: "# Installation\n\nJekyll is a [Ruby Gem](../ruby-101/index#gems) that can be installed on most systems.\n\n## Requirements\n\n- [Ruby](https://www.ruby-lang.org/en/downloads/) version **2.4.0** or higher, including all development headers (check your Ruby version using `ruby -v`)\n- [RubyGems](https://rubygems.org/pages/download) (check your Gems version using `gem -v`)\n- [GCC](https://gcc.gnu.org/install/) and [Make](https://www.gnu.org/software/make/) (check versions using `gcc -v`,`g++ -v`, and `make -v`)\n\n## Guides\n\nFor detailed install instructions, follow the guide for your operating system.\n\n- [macOS](macos/index)\n- [Ubuntu](ubuntu/index)\n- [Other Linux](other-linux/index)\n- [Windows](windows/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/installation/](https://jekyllrb.com/docs/installation/)"
- name: Jekyll on Linux
  id: installation/other-linux/index
  summary: Installation on other Linux distributions works similarly to installing on Ubuntu
  description: "# Jekyll on Linux\n\nInstallation on other Linux distributions works similarly to installing on [Ubuntu](../ubuntu/index).\n\n## Install prerequisites\n\n### Fedora\n\n``` bash\nsudo dnf install ruby ruby-devel openssl-devel redhat-rpm-config @development-tools\n```\n\n### RHEL8/CentOS8\n\n``` bash\nsudo dnf install ruby ruby-devel\nsudo dnf group install \"Development Tools\"\n```\n\n### Debian\n\n``` bash\nsudo apt-get install ruby-full build-essential\n```\n\n### Gentoo\n\n``` bash\nsudo emerge -av jekyll\n```\n\nor\n\n``` bash\nsudo emerge --ask --verbose jekyll\n```\n\n### ArchLinux\n\n``` bash\nsudo pacman -S ruby base-devel\n```\n\n### OpenSUSE\n\n``` bash\nsudo zypper install -t pattern devel_ruby devel_C_C++\n```\n\n### Clear Linux\n\n``` bash\nsudo swupd bundle-add ruby-basic\n```\n\n## Install Jekyll\n\nFollow the instructions for [Ubuntu](../ubuntu/index).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/installation/other-linux/](https://jekyllrb.com/docs/installation/other-linux/)"
- name: Jekyll on macOS
  id: installation/macos/index
  summary: Jekyll requires Ruby v2.4.0 or higher
  description: "# Jekyll on macOS\n\n## Install Command Line Tools\n\nTo install the command line tools to compile native extensions, open a terminal and run:\n\n``` bash\nxcode-select --install\n```\n\n## Install Ruby\n\nJekyll requires **Ruby v2.4.0** or higher. macOS Catalina 10.15 ships with Ruby 2.6.3. Check your Ruby version using `ruby -v`.\n\nIf you’re running a previous version of macOS, you’ll have to install a newer version of Ruby.\n\n### With Homebrew\n\nTo run the latest Ruby version you need to install it through [Homebrew](https://brew.sh).\n\n``` bash\n# Install Homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Ruby\nbrew install ruby\n```\n\nAdd the brew ruby path to your shell configuration:\n\n``` bash\n# If you're using Zsh\necho 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.zshrc\n\n# If you're using Bash\necho 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.bash_profile\n\n# Unsure which shell you are using? Type\necho $SHELL\n```\n\nRelaunch your terminal and check your Ruby setup:\n\n``` bash\nwhich ruby\n# /usr/local/opt/ruby/bin/ruby\n\nruby -v\nruby 2.7.2p137 (2020-10-01 revision 5445e04352)\n```\n\nYou’re now running the current stable version of Ruby!\n\n### With rbenv\n\nPeople often use [rbenv](https://github.com/rbenv/rbenv) to manage multiple Ruby versions. This is very useful when you need to be able to run a given Ruby version on a project.\n\n``` bash\n# Install Homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install rbenv and ruby-build\nbrew install rbenv\n\n# Set up rbenv integration with your shell\nrbenv init\n\n# Check your installation\ncurl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash\n```\n\nRestart your terminal to apply your changes. Next, you can install the Ruby version you want. Let’s install the latest stable version:\n\n``` bash\nrbenv install 2.7.2\nrbenv global 2.7.2\nruby -v\nruby 2.7.2p137 (2020-10-01 revision 5445e04352)\n```\n\nThat’s it! Head over to [rbenv command references](https://github.com/rbenv/rbenv#command-reference) to learn how to use different versions of Ruby in your projects.\n\n## Install Jekyll\n\nAfter installing Ruby, install Jekyll and Bundler.\n\n### Local Install\n\nInstall the bundler and jekyll gems:\n\n``` bash\ngem install --user-install bundler jekyll\n```\n\nGet your Ruby version:\n\n``` bash\nruby -v\nruby 2.7.2p137 (2020-10-01 revision 5445e04352)\n```\n\nAppend your path file with the following, replacing the `X.X` with the first two digits of your Ruby version:\n\n``` bash\n# If you're using Zsh\necho 'export PATH=\"$HOME/.gem/ruby/X.X.0/bin:$PATH\"' >> ~/.zshrc\n\n# If you're using Bash\necho 'export PATH=\"$HOME/.gem/ruby/X.X.0/bin:$PATH\"' >> ~/.bash_profile\n\n# Unsure which shell you are using? Type\necho $SHELL\n```\n\nCheck that `GEM PATHS:` points to your home directory:\n\n``` bash\ngem env\n```\n\nEvery time you update Ruby to a version in which the first two digits change, update your path to match.\n\n### Global Install\n\nWe recommend not installing Ruby gems globally to avoid file permissions problems and using `sudo`.\n\n#### On Mojave (10.14)\n\nBecause of SIP Protections in Mojave, run:\n\n``` bash\nsudo gem install bundler\nsudo gem install -n /usr/local/bin/ jekyll\n```\n\n#### Before Mojave (\\<10.14)\n\nRun:\n\n``` bash\nsudo gem install bundler jekyll\n```\n\n## Troubleshooting\n\nSee [Troubleshooting](../../troubleshooting/index) or [ask for help on our forum](https://talk.jekyllrb.com).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/installation/macos/](https://jekyllrb.com/docs/installation/macos/)"
- name: Jekyll on Ubuntu
  id: installation/ubuntu/index
  summary: Avoid installing RubyGems packages (called gems) as the root user
  description: "# Jekyll on Ubuntu\n\n## Install dependencies\n\nInstall Ruby and other [prerequisites](../index#requirements):\n\n``` bash\nsudo apt-get install ruby-full build-essential zlib1g-dev\n```\n\nAvoid installing RubyGems packages (called gems) as the root user. Instead, set up a gem installation directory for your user account. The following commands will add environment variables to your `~/.bashrc` file to configure the gem installation path:\n\n``` bash\necho '# Install Ruby Gems to ~/gems' >> ~/.bashrc\necho 'export GEM_HOME=\"$HOME/gems\"' >> ~/.bashrc\necho 'export PATH=\"$HOME/gems/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\nFinally, install Jekyll and Bundler:\n\n``` bash\ngem install jekyll bundler\n```\n\nThat’s it! You’re ready to start using Jekyll.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/installation/ubuntu/](https://jekyllrb.com/docs/installation/ubuntu/)"
- name: Jekyll on Windows
  id: installation/windows/index
  summary: While Windows is not an officially-supported platform, it can be used to run Jekyll with the proper tweaks
  description: "# Jekyll on Windows\n\nWhile Windows is not an officially-supported platform, it can be used to run Jekyll with the proper tweaks.\n\n## Installing Ruby and Jekyll\n\n### Installation via RubyInstaller\n\nThe easiest way to install Ruby and Jekyll is by using the [RubyInstaller](https://rubyinstaller.org/) for Windows.\n\nRubyInstaller is a self-contained Windows-based installer that includes the Ruby language, an execution environment, important documentation, and more.\n\nWe only cover RubyInstaller-2.4 and newer here. Older versions need to [install the Devkit](https://github.com/oneclick/rubyinstaller/wiki/Development-Kit) manually.\n\n1.  Download and install a **Ruby+Devkit** version from [RubyInstaller Downloads](https://rubyinstaller.org/downloads/). Use default options for installation.\n2.  Run the `ridk install` step on the last stage of the installation wizard. This is needed for installing gems with native extensions. You can find additional information regarding this in the [RubyInstaller Documentation](https://github.com/oneclick/rubyinstaller2#using-the-installer-on-a-target-system)\n3.  Open a new command prompt window from the start menu, so that changes to the `PATH` environment variable becomes effective. Install Jekyll and Bundler using `gem install jekyll bundler`\n4.  Check if Jekyll has been installed properly: `jekyll -v`\n\nYou may receive an error when checking if Jekyll has been installed properly. Reboot your system and run `jekyll -v` again. If the error persists, please open a [RubyInstaller issue](https://github.com/oneclick/rubyinstaller2/issues/new).\n\nThat’s it, you’re ready to use Jekyll!\n\n### Installation via Bash on Windows 10\n\nIf you are using Windows 10 version 1607 or later, another option to run Jekyll is by [installing](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide) the Windows Subsystem for Linux.\n\nYou must have [Windows Subsystem for Linux](https://msdn.microsoft.com/en-us/commandline/wsl/about) enabled.\n\nMake sure all your packages and repositories are up to date. Open a new Command Prompt or Powershell window and type `bash`.\n\nYour terminal should now be a Bash instance. Next, update your repository lists and packages:\n\n``` bash\nsudo apt-get update -y && sudo apt-get upgrade -y\n```\n\nNext, install Ruby. To do this, let’s use a repository from [BrightBox](https://www.brightbox.com/docs/ruby/ubuntu/), which hosts optimized versions of Ruby for Ubuntu.\n\n``` bash\nsudo apt-add-repository ppa:brightbox/ruby-ng\nsudo apt-get update\nsudo apt-get install ruby2.5 ruby2.5-dev build-essential dh-autoreconf\n```\n\nNext, update your Ruby gems:\n\n``` bash\ngem update\n```\n\nInstall Jekyll:\n\n``` bash\ngem install jekyll bundler\n```\n\nNo `sudo` here.\n\nCheck your Jekyll version:\n\n``` bash\njekyll -v\n```\n\nThat’s it! You’re ready to start using Jekyll.\n\nYou can make sure time management is working properly by inspecting your `_posts` folder. You should see a markdown file with the current date in the filename.\n\n> ##### Non-superuser account issues\n>\n> If the \\`jekyll new\\` command prints the error \"Your user account isn't allowed to install to the system RubyGems\", see the \"Running Jekyll as Non-Superuser\" instructions in [Troubleshooting](../../troubleshooting/index#no-sudo).\n\nBash on Ubuntu on Windows is still under development, so you may run into issues.\n\n## Encoding\n\nIf you use UTF-8 encoding, make sure that no `BOM` header characters exist in your files. If they don’t, Jekyll will break. This is especially relevant when you’re running Jekyll on Windows.\n\nAdditionally, you might need to change the code page of the console window to UTF-8 in case you get a `Liquid Exception: Incompatible character encoding` error during the site generation process. Run the following:\n\n``` bash\nchcp 65001\n```\n\n## Time Zone Management\n\nSince Windows doesn’t have a native source of zoneinfo data, the Ruby Interpreter doesn’t understand IANA Timezones. Using them had the `TZ` environment variable default to UTC/GMT 00:00.\n\nThough Windows users could alternatively define their blog’s timezone by setting the key to use the POSIX format of defining timezones, it wasn’t as user-friendly when it came to having the clock altered to changing DST-rules.\n\nJekyll now uses a rubygem to internally configure Timezone based on established [IANA Timezone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n\nWhile ‘new’ blogs created with Jekyll v3.4 and greater, will have the following added to their `Gemfile` by default, existing sites *will* have to update their `Gemfile` (and installed gems) to enable development on Windows:\n\n``` ruby\n# Windows does not include zoneinfo files, so bundle the tzinfo-data gem\ngem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]\n```\n\n> ##### TZInfo 2.0 incompatibility\n>\n> Version 2.0 of the TZInfo library has introduced a change in how timezone offsets are calculated. This will result in incorrect date and time for your posts when the site is built with Jekyll 3.x on Windows.\n>\n> We therefore recommend that you lock the Timezone library to version 1.2 and above by listing `gem 'tzinfo', '~> 1.2'` in your `Gemfile`.\n\n## Auto Regeneration\n\nJekyll uses the `listen` gem to watch for changes when the `--watch` switch is specified during a build or serve. While `listen` has built-in support for UNIX systems, it may require an extra gem for compatibility with Windows.\n\nAdd the following to the `Gemfile` for your site if you have issues with auto-regeneration on Windows alone:\n\n``` ruby\ngem 'wdm', '~> 0.1.1', :install_if => Gem.win_platform?\n```\n\nYou have to use a [Ruby+Devkit](https://rubyinstaller.org/downloads/) version of the RubyInstaller and install the MSYS2 build tools to successfully install the `wdm` gem.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/installation/windows/](https://jekyllrb.com/docs/installation/windows/)"
- name: Layouts
  id: layouts/index
  summary: Layouts are templates that wrap around your content
  description: "# Layouts\n\nLayouts are templates that wrap around your content. They allow you to have the source code for your template in one place so you don’t have to repeat things like your navigation and footer on every page.\n\nLayouts live in the `_layouts` directory. The convention is to have a base template called `default.html` and have other layouts [inherit](#inheritance) from this as needed.\n\n> ##### Layouts Directory\n>\n> Jekyll looks for the `_layouts` directory either at the root of your site's `source` or at the root of your theme.\n>\n> While you can configure the directory name in which your layouts can reside by setting the `layouts_dir` key in your config file, the directory itself should be located at the root of your site's `source` directory.\n\n## Usage\n\nThe first step is to put the template source code in `default.html`. `content` is a special variable, the value is the rendered content of the post or page being wrapped.\n\n``` liquid\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ page.title }}</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\">\n  </head>\n  <body>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/blog/\">Blog</a>\n    </nav>\n    <h1>{{ page.title }}</h1>\n    <section>\n      {{ content }}\n    </section>\n    <footer>\n      &copy; to me\n    </footer>\n  </body>\n</html>\n```\n\nYou have full access to the front matter of the origin. In the example above, `page.title` comes from the page front matter.\n\nNext you need to specify what layout you’re using in your page’s front matter. You can also use [front matter defaults](../configuration/front-matter-defaults/index) to save you from having to set this on every page.\n\n``` markdown\n---\ntitle: My First Page\nlayout: default\n---\n\nThis is the content of my page\n```\n\nThe rendered output of this page is:\n\n``` html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>My First Page</title>\n    <link rel=\"stylesheet\" href=\"/css/style.css\">\n  </head>\n  <body>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/blog/\">Blog</a>\n    </nav>\n    <h1>My First Page</h1>\n    <section>\n      This is the content of my page\n    </section>\n    <footer>\n      &copy; to me\n    </footer>\n  </body>\n</html>\n```\n\n## Inheritance\n\nLayout inheritance is useful when you want to add something to an existing layout for a portion of documents on your site. A common example of this is blog posts, you might want a post to display the date and author but otherwise be identical to your base layout.\n\nTo achieve this you need to create another layout which specifies your original layout in front matter. For example this layout will live at `_layouts/post.html`:\n\n``` liquid\n---\nlayout: default\n---\n<p>{{ page.date }} - Written by {{ page.author }}</p>\n\n{{ content }}\n```\n\nNow posts can use this layout while the rest of the pages use the default.\n\n## Variables\n\nYou can set front matter in layouts, the only difference is when you’re using in Liquid, you need to use the `layout` variable instead of `page`. For example:\n\n``` liquid\n---\ncity: San Francisco\n---\n<p>{{ layout.city }}</p>\n\n{{ content }}\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/layouts/](https://jekyllrb.com/docs/layouts/)"
- name: Liquid
  id: liquid/index
  summary: Jekyll uses the Liquid templating language to process templates
  description: "# Liquid\n\nJekyll uses the [Liquid](https://shopify.github.io/liquid/) templating language to process templates.\n\nGenerally in Liquid you output content using two curly braces e.g. `{{ variable }}` and perform logic statements by surrounding them in a curly brace percentage sign e.g. `{% if statement %}`. To learn more about Liquid, check out the [official Liquid Documentation](https://shopify.github.io/liquid/).\n\nJekyll provides a number of useful Liquid additions to help you build your site:\n\n- [Filters](filters/index)\n- [Tags](tags/index)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/liquid/](https://jekyllrb.com/docs/liquid/)"
- name: Liquid Filters
  id: liquid/filters/index
  summary: All of the standard Liquid filters are supported (see below)
  description: "# Liquid Filters\n\nAll of the standard Liquid [filters](#standard-liquid-filters) are supported (see below).\n\nTo make common tasks easier, Jekyll even adds a few handy filters of its own, all of which you can find on this page. You can also create your own filters using [plugins](../../plugins/index).\n\n[TABLE]\n\n### Options for the `slugify` filter\n\nThe `slugify` filter accepts an option, each specifying what to filter. The default is `default`. They are as follows (with what they filter):\n\n- `none`: no characters\n- `raw`: spaces\n- `default`: spaces and non-alphanumeric characters\n- `pretty`: spaces and non-alphanumeric characters except for `._~!$&'()+,;=@`\n- `ascii`: spaces, non-alphanumeric, and non-ASCII characters\n- `latin`: like `default`, except Latin characters are first transliterated (e.g. `àèïòü` to `aeiou`)3.7.0 .\n\n### Detecting `nil` values with `where` filter4.0\n\nYou can use the `where` filter to detect documents and pages with properties that are `nil` or `\"\"`. For example,\n\n``` liquid\n// Using `nil` to select posts that either do not have `my_prop`\n// defined or `my_prop` has been set to `nil` explicitly.\n{% assign filtered_posts = site.posts | where: 'my_prop', nil %}\n```\n\n``` liquid\n// Using Liquid's special literal `empty` or `blank` to select\n// posts that have `my_prop` set to an empty value.\n{% assign filtered_posts = site.posts | where: 'my_prop', empty %}\n```\n\n### Binary operators in `where_exp` filter4.0\n\nYou can use Liquid binary operators `or` and `and` in the expression passed to the `where_exp` filter to employ multiple conditionals in the operation.\n\nFor example, to get a list of documents on English horror flicks, one could use the following snippet:\n\n``` liquid\n{{ site.movies | where_exp: \"item\", \"item.genre == 'horror' and item.language == 'English'\" }}\n```\n\nOr to get a list of comic-book based movies, one may use the following:\n\n``` liquid\n{{ site.movies | where_exp: \"item\", \"item.sub_genre == 'MCU' or item.sub_genre == 'DCEU'\" }}\n```\n\n### Standard Liquid Filters\n\nFor your convenience, here is the list of all [Liquid filters](https://shopify.github.io/liquid/filters/) with links to examples in the official Liquid documentation.\n\n- [abs](https://shopify.github.io/liquid/filters/abs/)\n\n- [append](https://shopify.github.io/liquid/filters/append/)\n\n- [at_least](https://shopify.github.io/liquid/filters/at_least/)\n\n- [at_most](https://shopify.github.io/liquid/filters/at_most/)\n\n- [capitalize](https://shopify.github.io/liquid/filters/capitalize/)\n\n- [ceil](https://shopify.github.io/liquid/filters/ceil/)\n\n- [compact](https://shopify.github.io/liquid/filters/compact/)\n\n- [concat](https://shopify.github.io/liquid/filters/concat/)\n\n- [date](https://shopify.github.io/liquid/filters/date/)\n\n- [default](https://shopify.github.io/liquid/filters/default/)\n\n- [divided_by](https://shopify.github.io/liquid/filters/divided_by/)\n\n- [downcase](https://shopify.github.io/liquid/filters/downcase/)\n\n- [escape](https://shopify.github.io/liquid/filters/escape/)\n\n- [escape_once](https://shopify.github.io/liquid/filters/escape_once/)\n\n- [first](https://shopify.github.io/liquid/filters/first/)\n\n- [floor](https://shopify.github.io/liquid/filters/floor/)\n\n- [join](https://shopify.github.io/liquid/filters/join/)\n\n- [last](https://shopify.github.io/liquid/filters/last/)\n\n- [lstrip](https://shopify.github.io/liquid/filters/lstrip/)\n\n- [map](https://shopify.github.io/liquid/filters/map/)\n\n- [minus](https://shopify.github.io/liquid/filters/minus/)\n\n- [modulo](https://shopify.github.io/liquid/filters/modulo/)\n\n- [newline_to_br](https://shopify.github.io/liquid/filters/newline_to_br/)\n\n- [plus](https://shopify.github.io/liquid/filters/plus/)\n\n- [prepend](https://shopify.github.io/liquid/filters/prepend/)\n\n- [remove](https://shopify.github.io/liquid/filters/remove/)\n\n- [remove_first](https://shopify.github.io/liquid/filters/remove_first/)\n\n- [replace](https://shopify.github.io/liquid/filters/replace/)\n\n- [replace_first](https://shopify.github.io/liquid/filters/replace_first/)\n\n- [reverse](https://shopify.github.io/liquid/filters/reverse/)\n\n- [round](https://shopify.github.io/liquid/filters/round/)\n\n- [rstrip](https://shopify.github.io/liquid/filters/rstrip/)\n\n- [size](https://shopify.github.io/liquid/filters/size/)\n\n- [slice](https://shopify.github.io/liquid/filters/slice/)\n\n- [sort](https://shopify.github.io/liquid/filters/sort/)\n\n- [sort_natural](https://shopify.github.io/liquid/filters/sort_natural/)\n\n- [split](https://shopify.github.io/liquid/filters/split/)\n\n- [strip](https://shopify.github.io/liquid/filters/strip/)\n\n- [strip_html](https://shopify.github.io/liquid/filters/strip_html/)\n\n- [strip_newlines](https://shopify.github.io/liquid/filters/strip_newlines/)\n\n- [times](https://shopify.github.io/liquid/filters/times/)\n\n- [truncate](https://shopify.github.io/liquid/filters/truncate/)\n\n- [truncatewords](https://shopify.github.io/liquid/filters/truncatewords/)\n\n- [uniq](https://shopify.github.io/liquid/filters/uniq/)\n\n- [upcase](https://shopify.github.io/liquid/filters/upcase/)\n\n- [url_decode](https://shopify.github.io/liquid/filters/url_decode/)\n\n- [url_encode](https://shopify.github.io/liquid/filters/url_encode/)\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/liquid/filters/](https://jekyllrb.com/docs/liquid/filters/)"
- name: Liquid Options
  id: configuration/liquid/index
  summary: Liquid’s response to errors can be configured by setting error_mode
  description: "# Liquid Options\n\nLiquid’s response to errors can be configured by setting `error_mode`. The options are\n\n- `lax` — Ignore all errors.\n- `warn` — Output a warning on the console for each error. (default)\n- `strict` — Output an error message and stop the build.\n\nWithin \\_config.yml, the default configuration is as follows:\n\n``` yaml\nliquid:\n  error_mode: warn\n```\n\nThe above example depicts the “warn” value, which is already set by default- `error_mode: warn`. This results in any issues being called out during the build process however will continue to build if possible.\n\nYou can also configure Liquid’s renderer to catch non-assigned variables and non-existing filters by setting `strict_variables` and / or `strict_filters` to `true` respectively. 3.8.0\n\nDo note that while `error_mode` configures Liquid’s parser, the `strict_variables` and `strict_filters` options configure Liquid’s renderer and are consequently, mutually exclusive.\n\nAn example of setting these variables within \\_config.yml is as follows:\n\n``` yaml\nliquid:\n  error_mode: strict\n  strict_variables: true\n  strict_filters: true\n```\n\nConfiguring as described above will stop your build/serve from happening and call out the offending error and halt. This is helpful when desiring to catch liquid-related issues by stopping the build or serve process and allowing you to deal with any issues.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/liquid/](https://jekyllrb.com/docs/configuration/liquid/)"
- name: Manual Deployment
  id: deployment/manual/index
  summary: Jekyll generates your static site to the _site directory by default
  description: "# Manual Deployment\n\nJekyll generates your static site to the `_site` directory by default. You can transfer the contents of this directory to almost any hosting provider to get your site live. Here are some manual ways of achieving this:\n\n## rsync\n\nRsync is similar to scp except it can be faster as it will only send changed parts of files as opposed to the entire file. You can learn more about using rsync in the [Digital Ocean tutorial](https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps).\n\n## Amazon S3\n\nIf you want to host your site in Amazon S3, you can do so by using the [s3_website](https://github.com/laurilehmijoki/s3_website) application. It will push your site to Amazon S3 where it can be served like any web server, dynamically scaling to almost unlimited traffic. This approach has the benefit of being about the cheapest hosting option available for low-volume blogs as you only pay for what you use.\n\n## FTP\n\nMost traditional web hosting provider let you upload files to their servers over FTP. To upload a Jekyll site to a web host using FTP, run the `jekyll build` command and copy the contents of the generated `_site` folder to the root folder of your hosting account. This is most likely to be the `httpdocs` or `public_html` folder on most hosting providers.\n\n## scp\n\nIf you have direct access to the deployment web server, the process is essentially the same, except you might have other methods available to you (such as `scp`, or even direct filesystem access) for transferring the files. Remember to make sure the contents of the generated `_site` folder get placed in the appropriate web root directory for your web server.\n\n## Rack-Jekyll\n\n[Rack-Jekyll](https://github.com/adaoraul/rack-jekyll/) allows you to deploy your site on any Rack server such as Amazon EC2, Slicehost, Heroku, and so forth. It also can run with [shotgun](https://github.com/rtomayko/shotgun/), [rackup](https://github.com/rack/rack), [mongrel](https://github.com/mongrel/mongrel), [unicorn](https://github.com/defunkt/unicorn/), and [others](https://github.com/adaoraul/rack-jekyll#readme).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/deployment/manual/](https://jekyllrb.com/docs/deployment/manual/)"
- name: Markdown Options
  id: configuration/markdown/index
  summary: The various Markdown renderers supported by Jekyll sometimes have extra options available
  description: "# Markdown Options\n\nThe various Markdown renderers supported by Jekyll sometimes have extra options available.\n\n### Kramdown\n\nKramdown is the default Markdown renderer for Jekyll. Below is a list of the currently supported options:\n\n- **auto_id_prefix** - Prefix used for automatically generated header IDs\n- **auto_id_stripping** - Strip all formatting from header text for automatic ID generation\n- **auto_ids** - Use automatic header ID generation\n- **coderay_bold_every** - Defines how often a line number should be made bold\n- **coderay_css** - Defines how the highlighted code gets styled\n- **coderay_default_lang** - Sets the default language for highlighting code blocks\n- **coderay_line_number_start** - The start value for the line numbers\n- **coderay_line_numbers** - Defines how and if line numbers should be shown\n- **coderay_tab_width** - The tab width used in highlighted code\n- **coderay_wrap** - Defines how the highlighted code should be wrapped\n- **enable_coderay** - Use coderay for syntax highlighting\n- **entity_output** - Defines how entities are output\n- **footnote_backlink** - Defines the text that should be used for the footnote backlinks\n- **footnote_backlink_inline** - Specifies whether the footnote backlink should always be inline\n- **footnote_nr** - The number of the first footnote\n- **gfm_quirks** - Enables a set of GFM specific quirks\n- **hard_wrap** - Interprets line breaks literally\n- **header_offset** - Sets the output offset for headers\n- **html_to_native** - Convert HTML elements to native elements\n- **line_width** - Defines the line width to be used when outputting a document\n- **link_defs** - Pre-defines link definitions\n- **math_engine** - Set the math engine\n- **math_engine_opts** - Set the math engine options\n- **parse_block_html** - Process kramdown syntax in block HTML tags\n- **parse_span_html** - Process kramdown syntax in span HTML tags\n- **smart_quotes** - Defines the HTML entity names or code points for smart quote output\n- **syntax_highlighter** - Set the syntax highlighter\n- **syntax_highlighter_opts** - Set the syntax highlighter options\n- **toc_levels** - Defines the levels that are used for the table of contents\n- **transliterated_header_ids** - Transliterate the header text before generating the ID\n- **typographic_symbols** - Defines a mapping from typographical symbol to output characters\n\n### Example Usage\n\n``` yaml\nkramdown:\n  html_to_native: true\n```\n\n> ##### There are two unsupported kramdown options\n>\n> Please note that both `remove_block_html_tags` and `remove_span_html_tags` are currently unsupported in Jekyll due to the fact that they are not included within the kramdown HTML converter.\n\nFor more details about these options have a look at the [Kramdown configuration documentation](https://kramdown.gettalong.org/options.html).\n\n### CommonMark\n\n[CommonMark](https://commonmark.org/) is a rationalized version of Markdown syntax, implemented in C and thus faster than default Kramdown implemented in Ruby. It [slightly differs](https://github.com/commonmark/CommonMark#differences-from-original-markdown) from original Markdown and does not support all the syntax elements implemented in Kramdown, like [Block Inline Attribute Lists](https://kramdown.gettalong.org/syntax.html#block-ials).\n\nIt comes in two flavors: basic CommonMark with [jekyll-commonmark](https://github.com/jekyll/jekyll-commonmark) plugin and [GitHub Flavored Markdown supported by GitHub Pages](https://github.com/github/jekyll-commonmark-ghpages).\n\n### Custom Markdown Processors\n\nIf you’re interested in creating a custom markdown processor, you’re in luck! Create a new class in the `Jekyll::Converters::Markdown` namespace:\n\n``` ruby\nclass Jekyll::Converters::Markdown::MyCustomProcessor\n  def initialize(config)\n    require 'funky_markdown'\n    @config = config\n  rescue LoadError\n    STDERR.puts 'You are missing a library required for Markdown. Please run:'\n    STDERR.puts '  $ [sudo] gem install funky_markdown'\n    raise FatalException.new(\"Missing dependency: funky_markdown\")\n  end\n\n  def convert(content)\n    ::FunkyMarkdown.new(content).convert\n  end\nend\n```\n\nOnce you’ve created your class and have it properly set up either as a plugin in the `_plugins` folder or as a gem, specify it in your `_config.yml`:\n\n``` yaml\nmarkdown: MyCustomProcessor\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/markdown/](https://jekyllrb.com/docs/configuration/markdown/)"
- name: Pages
  id: pages/index
  summary: Pages are the most basic building block for content
  description: "# Pages\n\nPages are the most basic building block for content. They’re useful for standalone content (content which is not date based or is not a group of content such as staff members or recipes).\n\nThe simplest way of adding a page is to add an HTML file in the root directory with a suitable filename. You can also write a page in Markdown using a `.md` extension which converts to HTML on build. For a site with a homepage, an about page, and a contact page, here’s what the root directory and associated URLs might look like:\n\n``` plaintext\n.\n├── about.md    # => http://example.com/about.html\n├── index.html    # => http://example.com/\n└── contact.html  # => http://example.com/contact.html\n```\n\nIf you have a lot of pages, you can organize them into subfolders. The same subfolders that are used to group your pages in your project’s source will then exist in the `_site` folder when your site builds. However, when a page has a *different* permalink set in the front matter, the subfolder at `_site` changes accordingly.\n\n``` plaintext\n.\n├── about.md          # => http://example.com/about.html\n├── documentation     # folder containing pages\n│   └── doc1.md       # => http://example.com/documentation/doc1.html\n├── design            # folder containing pages\n│   └── draft.md      # => http://example.com/design/draft.html\n```\n\n## Changing the output URL\n\nYou might want to have a particular folder structure for your source files that changes for the built site. With [permalinks](../permalinks/index) you have full control of the output URL.\n\n## Excerpts for pages\n\nFrom Jekyll 4.1.1 onwards, one can *choose* to generate excerpts for their pages by setting `page_excerpts` to `true` in their config file.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/pages/](https://jekyllrb.com/docs/pages/)"
- name: Pagination
  id: pagination/index
  summary: With many websites — especially blogs — it’s very common to break the main listing of posts up into smaller lists and display them over multiple pages
  description: "# Pagination\n\nWith many websites — especially blogs — it’s very common to break the main listing of posts up into smaller lists and display them over multiple pages. Jekyll offers a pagination plugin, so you can automatically generate the appropriate files and folders you need for paginated listings.\n\nFor Jekyll 3, include the `jekyll-paginate` plugin in your Gemfile and in your `_config.yml` under `plugins`. For Jekyll 2, this is standard.\n\n> ##### Pagination only works within HTML files\n>\n> Pagination does not work from within Markdown files from your Jekyll site. Pagination works when called from within the HTML file, named `index.html`, which optionally may reside in and produce pagination from within a subdirectory, via the `paginate_path` configuration value.\n\n## Enable pagination\n\nTo enable pagination for posts on your blog, add a line to the `_config.yml` file that specifies how many items should be displayed per page:\n\n``` yaml\npaginate: 5\n```\n\nThe number should be the maximum number of Posts you’d like to be displayed per-page in the generated site.\n\nYou may also specify the destination of the pagination pages:\n\n``` yaml\npaginate_path: \"/blog/page:num/\"\n```\n\nThis will read in `blog/index.html`, send it each pagination page in Liquid as `paginator` and write the output to `blog/page:num/`, where `:num` is the pagination page number, starting with `2`.  \nIf a site has 12 posts and specifies `paginate: 5`, Jekyll will write `blog/index.html` with the first 5 posts, `blog/page2/index.html` with the next 5 posts and `blog/page3/index.html` with the last 2 posts into the destination directory.\n\n> ##### Don't set a permalink\n>\n> Setting a permalink in the front matter of your blog page will cause pagination to break. Just omit the permalink.\n\n> ##### Pagination for categories, tags and collections\n>\n> The more recent [jekyll-paginate-v2](https://github.com/sverrirs/jekyll-paginate-v2) plugin supports more features. See the [pagination examples](https://github.com/sverrirs/jekyll-paginate-v2/tree/master/examples) in the repository. **This plugin is not supported by GitHub Pages**.\n\n## Liquid Attributes Available\n\nThe pagination plugin exposes the `paginator` liquid object with the following attributes:\n\n| Variable                       | Description                                                          |\n|--------------------------------|----------------------------------------------------------------------|\n| `paginator.page`               | The number of the current page                                       |\n| `paginator.per_page`           | Number of posts per page                                             |\n| `paginator.posts`              | Posts available for the current page                                 |\n| `paginator.total_posts`        | Total number of posts                                                |\n| `paginator.total_pages`        | Total number of pages                                                |\n| `paginator.previous_page`      | The number of the previous page, or `nil` if no previous page exists |\n| `paginator.previous_page_path` | The path to the previous page, or `nil` if no previous page exists   |\n| `paginator.next_page`          | The number of the next page, or `nil` if no subsequent page exists   |\n| `paginator.next_page_path`     | The path to the next page, or `nil` if no subsequent page exists     |\n\n> ##### Pagination does not support tags or categories\n>\n> Pagination pages through every post in the `posts` variable unless a post has `hidden: true` in its front matter. It does not currently allow paging over groups of posts linked by a common tag or category. It cannot include any collection of documents because it is restricted to posts.\n\n## Render the paginated Posts\n\nThe next thing you need to do is to actually display your posts in a list using the `paginator` variable that will now be available to you. You’ll probably want to do this in one of the main pages of your site. Here’s one example of a simple way of rendering paginated Posts in a HTML file:\n\n``` liquid\n---\nlayout: default\ntitle: My Blog\n---\n\n<!-- This loops through the paginated posts -->\n{% for post in paginator.posts %}\n  <h1><a href=\"{{ post.url }}\">{{ post.title }}</a></h1>\n  <p class=\"author\">\n    <span class=\"date\">{{ post.date }}</span>\n  </p>\n  <div class=\"content\">\n    {{ post.content }}\n  </div>\n{% endfor %}\n\n<!-- Pagination links -->\n<div class=\"pagination\">\n  {% if paginator.previous_page %}\n    <a href=\"{{ paginator.previous_page_path }}\" class=\"previous\">\n      Previous\n    </a>\n  {% else %}\n    <span class=\"previous\">Previous</span>\n  {% endif %}\n  <span class=\"page_number \">\n    Page: {{ paginator.page }} of {{ paginator.total_pages }}\n  </span>\n  {% if paginator.next_page %}\n    <a href=\"{{ paginator.next_page_path }}\" class=\"next\">Next</a>\n  {% else %}\n    <span class=\"next \">Next</span>\n  {% endif %}\n</div>\n```\n\n> ##### Beware the page one edge-case\n>\n> Jekyll does not generate a ‘page1’ folder, so the above code will not work when a `/page1` link is produced. See below for a way to handle this if it’s a problem for you.\n\nThe following HTML snippet should handle page one, and render a list of each page with links to all but the current page.\n\n``` liquid\n{% if paginator.total_pages > 1 %}\n<div class=\"pagination\">\n  {% if paginator.previous_page %}\n    <a href=\"{{ paginator.previous_page_path | relative_url }}\">&laquo; Prev</a>\n  {% else %}\n    <span>&laquo; Prev</span>\n  {% endif %}\n\n  {% for page in (1..paginator.total_pages) %}\n    {% if page == paginator.page %}\n      <em>{{ page }}</em>\n    {% elsif page == 1 %}\n      <a href=\"{{ '/' | relative_url }}\">{{ page }}</a>\n    {% else %}\n      <a href=\"{{ site.paginate_path | relative_url | replace: ':num', page }}\">{{ page }}</a>\n    {% endif %}\n  {% endfor %}\n\n  {% if paginator.next_page %}\n    <a href=\"{{ paginator.next_page_path | relative_url }}\">Next &raquo;</a>\n  {% else %}\n    <span>Next &raquo;</span>\n  {% endif %}\n</div>\n{% endif %}\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/pagination/](https://jekyllrb.com/docs/pagination/)"
- name: Permalinks
  id: permalinks/index
  summary: Permalinks are the output path for your pages, posts, or collections
  description: "# Permalinks\n\nPermalinks are the output path for your pages, posts, or collections. They allow you to structure the directories of your source code different from the directories in your output.\n\n## Front Matter\n\nThe simplest way to set a permalink is using front matter. You set the `permalink` variable in front matter to the output path you’d like.\n\nFor example, you might have a page on your site located at `/my_pages/about-me.html` and you want the output url to be `/about/`. In front matter of the page you would set:\n\n``` yaml\n---\npermalink: /about/\n---\n```\n\n## Global\n\nSetting a permalink in front matter for every page on your site is no fun. Luckily, Jekyll lets you set the permalink structure globally in your `_config.yml`.\n\nTo set a global permalink, you use the `permalink` variable in `_config.yml`. You can use placeholders to your desired output. For example:\n\n``` yaml\npermalink: /:categories/:year/:month/:day/:title:output_ext\n```\n\nNote that pages and collections (excluding `posts` and `drafts`) don’t have time and categories (for pages, the above `:title` is equivalent to `:basename`), these aspects of the permalink style are ignored for the output.\n\nFor example, a permalink style of `/:categories/:year/:month/:day/:title:output_ext` for the `posts` collection becomes `/:title.html` for pages and collections (excluding `posts` and `drafts`).\n\n### Placeholders\n\nHere’s the full list of placeholders available:\n\n[TABLE]\n\n### Built-in formats\n\nFor posts, Jekyll also provides the following built-in styles for convenience:\n\n[TABLE]\n\nRather than typing `permalink: /:categories/:year/:month/:day/:title/`, you can just type `permalink: pretty`.\n\n> ##### Specifying permalinks through the front matter\n>\n> Built-in permalink styles are not recognized in front matter. As a result, `permalink: pretty` will not work.\n\n### Collections\n\nFor collections (including `posts` and `drafts`), you have the option to override the global permalink in the collection configuration in `_config.yml`:\n\n``` yaml\ncollections:\n  my_collection:\n    output: true\n    permalink: /:collection/:name\n```\n\nCollections have the following placeholders available:\n\n| Variable      | Description                                                                                                                                                                                                                                           |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `:collection` | Label of the containing collection.                                                                                                                                                                                                                   |\n| `:path`       | Path to the document relative to the collection's directory, including base filename of the document.                                                                                                                                                 |\n| `:name`       | The document's base filename, with every sequence of spaces and non-alphanumeric characters replaced by a hyphen.                                                                                                                                     |\n| `:title`      | The `:title` template variable will take the `slug` [front matter](../front-matter/index) variable value if any is present in the document; if none is defined then `:title` will be equivalent to `:name`, aka the slug generated from the filename. |\n| `:output_ext` | Extension of the output file. (Included by default and usually unnecessary.)                                                                                                                                                                          |\n\n### Pages\n\nFor pages, you have to use front matter to override the global permalink, and if you set a permalink via front matter defaults in `_config.yml`, it will be ignored.\n\nPages have the following placeholders available:\n\n| Variable      | Description                                                                                    |\n|---------------|------------------------------------------------------------------------------------------------|\n| `:path`       | Path to the page relative to the site's source directory, excluding base filename of the page. |\n| `:basename`   | The page's base filename                                                                       |\n| `:output_ext` | Extension of the output file. (Included by default and usually unnecessary.)                   |\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/permalinks/](https://jekyllrb.com/docs/permalinks/)"
- name: Plugins
  id: plugins/index
  summary: Jekyll has a plugin system with hooks that allow you to create custom generated content specific to your site
  description: "# Plugins\n\nJekyll has a plugin system with hooks that allow you to create custom generated content specific to your site. You can run custom code for your site without having to modify the Jekyll source itself.\n\nYou can add specific plugins to the `whitelist` key in `_config.yml` to allow them to run in safe mode.\n\n- [Installation](installation/index) - How to install plugins\n- [Your first plugin](your-first-plugin/index) - How to write plugins\n- [Generators](generators/index) - Create additional content on your site\n- [Converters](converters/index) - Change a markup language into another format\n- [Commands](commands/index) - Extend the `jekyll` executable with subcommands\n- [Tags](tags/index) - Create custom Liquid tags\n- [Filters](filters/index) - Create custom Liquid filters\n- [Hooks](hooks/index) - Fine-grained control to extend the build process\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/](https://jekyllrb.com/docs/plugins/)"
- name: Plugins
  id: plugins/installation/index
  summary: In your site source root, make a _plugins directory
  description: "# Plugins\n\nYou have 3 options for installing plugins:\n\n1.  In your site source root, make a `_plugins` directory. Place your plugins here. Any file ending in `*.rb` inside this directory will be loaded before Jekyll generates your site.\n\n2.  In your `_config.yml` file, add a new array with the key `plugins` (or `gems` for Jekyll \\< `3.5.0`) and the values of the gem names of the plugins you’d like to use. An example:\n\n    ``` yaml\n    # This will require each of these plugins automatically.\n    plugins:\n      - jekyll-gist\n      - jekyll-coffeescript\n      - jekyll-assets\n      - another-jekyll-plugin\n    ```\n\n    Then install your plugins using `gem install jekyll-gist jekyll-coffeescript jekyll-assets another-jekyll-plugin`\n\n3.  Add the relevant plugins to a Bundler group in your `Gemfile`. An example:\n\n    ``` ruby\n    group :jekyll_plugins do\n      gem \"jekyll-gist\"\n      gem \"jekyll-coffeescript\"\n      gem \"jekyll-assets\"\n      gem \"another-jekyll-plugin\"\n    end\n    ```\n\n    Now you need to install all plugins from your Bundler group by running single command `bundle install`.\n\n> ##### Plugins on GitHub Pages\n>\n> [GitHub Pages](https://pages.github.com/) is powered by Jekyll. All Pages sites are generated using the `--safe` option to disable plugins (with the exception of some [whitelisted plugins](https://pages.github.com/versions)) for security reasons. Unfortunately, this means your plugins won’t work if you’re deploying to GitHub Pages.  \n> You can still use GitHub Pages to publish your site, but you’ll need to convert the site locally and push the generated static files to your GitHub repository instead of the Jekyll source files.\n\n> ##### `_plugins`, `_config.yml` and `Gemfile` can be used simultaneously\n>\n> You may use any of the aforementioned plugin options simultaneously in the same site if you so choose. Use of one does not restrict the use of the others.\n\n### The jekyll_plugins group\n\nJekyll gives this particular group of gems in your `Gemfile` a different treatment. Any gem included in this group is loaded before Jekyll starts processing the rest of your source directory.\n\nA gem included here will be activated even if its not explicitly listed under the `plugins:` key in your site’s config file.\n\nGems included in the `:jekyll-plugins` group are activated regardless of the `--safe` mode setting. Be aware of which gems are included under this group!\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/installation/](https://jekyllrb.com/docs/plugins/installation/)"
- name: Posts
  id: posts/index
  summary: Blogging is baked into Jekyll
  description: "# Posts\n\nBlogging is baked into Jekyll. You write blog posts as text files and Jekyll provides everything you need to turn it into a blog.\n\n## The Posts Folder\n\nThe `_posts` folder is where your blog posts live. You typically write posts in [Markdown](https://daringfireball.net/projects/markdown/), HTML is also supported.\n\n## Creating Posts\n\nTo create a post, add a file to your `_posts` directory with the following format:\n\n``` plaintext\nYEAR-MONTH-DAY-title.MARKUP\n```\n\nWhere `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. For example, the following are examples of valid post filenames:\n\n``` plaintext\n2011-12-31-new-years-eve-is-awesome.md\n2012-09-12-how-to-write-a-blog.md\n```\n\nAll blog post files must begin with [front matter](../front-matter/index) which is typically used to set a [layout](../layouts/index) or other meta data. For a simple example this can just be empty:\n\n``` markdown\n---\nlayout: post\ntitle:  \"Welcome to Jekyll!\"\n---\n\n# Welcome\n\n**Hello world**, this is my first Jekyll blog post.\n\nI hope you like it!\n```\n\n> ##### ProTip™: Link to other posts\n>\n> Use the [`post_url`](../liquid/tags/index#linking-to-posts) tag to link to other posts without having to worry about the URLs breaking when the site permalink style changes.\n\n> ##### Be aware of character sets\n>\n> Content processors can modify certain characters to make them look nicer. For example, the `smart` extension in Redcarpet converts standard, ASCII quotation characters to curly, Unicode ones. In order for the browser to display those characters properly, define the charset meta value by including `<meta charset=\"utf-8\">` in the `<head>` of your layout.\n\n## Including images and resources\n\nAt some point, you’ll want to include images, downloads, or other digital assets along with your text content. One common solution is to create a folder in the root of the project directory called something like `assets`, into which any images, files or other resources are placed. Then, from within any post, they can be linked to using the site’s root as the path for the asset to include. The best way to do this depends on the way your site’s (sub)domain and path are configured, but here are some simple examples in Markdown:\n\nIncluding an image asset in a post:\n\n``` markdown\n... which is shown in the screenshot below:\n![My helpful screenshot](/assets/screenshot.jpg)\n```\n\nLinking to a PDF for readers to download:\n\n``` markdown\n... you can [get the PDF](/assets/mydoc.pdf) directly.\n```\n\n## Displaying an index of posts\n\nCreating an index of posts on another page should be easy thanks to [Liquid](https://docs.shopify.com/themes/liquid/basics) and its tags. Here’s a simple example of how to create a list of links to your blog posts:\n\n``` liquid\n<ul>\n  {% for post in site.posts %}\n    <li>\n      <a href=\"{{ post.url }}\">{{ post.title }}</a>\n    </li>\n  {% endfor %}\n</ul>\n```\n\nYou have full control over how (and where) you display your posts, and how you structure your site. You should read more about [how templates work](../liquid/index) with Jekyll if you want to know more.\n\nNote that the `post` variable only exists inside the `for` loop above. If you wish to access the currently-rendering page/posts’s variables (the variables of the post/page that has the `for` loop in it), use the `page` variable instead.\n\n## Tags and Categories\n\nJekyll has first class support for *tags* and *categories* in blog posts.\n\n### Tags\n\nTags for a post are defined in the post’s front matter using either the key `tag` for a single entry or `tags` for multiple entries.  \nSince Jekyll expects multiple items mapped to the key `tags`, it will automatically *split* a string entry if it contains whitespace. For example, while front matter `tag: classic hollywood` will be processed into a singular entity `\"classic hollywood\"`, front matter `tags: classic hollywood` will be processed into an array of entries `[\"classic\", \"hollywood\"]`.\n\nIrrespective of the front matter key chosen, Jekyll stores the metadata mapped to the plural key which is exposed to Liquid templates.\n\nAll tags registered in the current site are exposed to Liquid templates via `site.tags`. Iterating over `site.tags` on a page will yield another array with two items, where the first item is the name of the tag and the second item being *an array of posts* with that tag.\n\n``` liquid\n{% for tag in site.tags %}\n  <h3>{{ tag[0] }}</h3>\n  <ul>\n    {% for post in tag[1] %}\n      <li><a href=\"{{ post.url }}\">{{ post.title }}</a></li>\n    {% endfor %}\n  </ul>\n{% endfor %}\n```\n\n### Categories\n\nCategories of a post work similar to the tags above:\n\n- They can be defined via the front matter using keys `category` or `categories` (that follow the same logic as for tags)\n- All categories registered in the site are exposed to Liquid templates via `site.categories` which can be iterated over (similar to the loop for tags above.)\n\n*The similarity between categories and tags however, ends there.*\n\nUnlike tags, categories for posts can also be defined by a post’s file path. Any directory above `_post` will be read-in as a category. For example, if a post is at path `movies/horror/_posts/2019-05-21-bride-of-chucky.markdown`, then `movies` and `horror` are automatically registered as categories for that post.\n\nWhen the post also has front matter defining categories, they just get added to the existing list if not present already.\n\nThe hallmark difference between categories and tags is that categories of a post may be incorporated into [the generated URL](../permalinks/index#global) for the post, while tags cannot be.\n\nTherefore, depending on whether front matter has `category: classic hollywood`, or `categories: classic hollywood`, the example post above would have the URL as either `movies/horror/classic%20hollywood/2019/05/21/bride-of-chucky.html` or `movies/horror/classic/hollywood/2019/05/21/bride-of-chucky.html` respectively.\n\n## Post excerpts\n\nYou can access a snippet of a posts’s content by using `excerpt` variable on a post. By default this is the first paragraph of content in the post, however it can be customized by setting a `excerpt_separator` variable in front matter or `_config.yml`.\n\n``` markdown\n---\nexcerpt_separator: <!--more-->\n---\n\nExcerpt with multiple paragraphs\n\nHere's another paragraph in the excerpt.\n<!--more-->\nOut-of-excerpt\n```\n\nHere’s an example of outputting a list of blog posts with an excerpt:\n\n``` liquid\n<ul>\n  {% for post in site.posts %}\n    <li>\n      <a href=\"{{ post.url }}\">{{ post.title }}</a>\n      {{ post.excerpt }}\n    </li>\n  {% endfor %}\n</ul>\n```\n\n## Drafts\n\nDrafts are posts without a date in the filename. They’re posts you’re still working on and don’t want to publish yet. To get up and running with drafts, create a `_drafts` folder in your site’s root and create your first draft:\n\n``` plaintext\n.\n├── _drafts\n│   └── a-draft-post.md\n...\n```\n\nTo preview your site with drafts, run `jekyll serve` or `jekyll build` with the `--drafts` switch. Each will be assigned the value modification time of the draft file for its date, and thus you will see currently edited drafts as the latest posts.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/posts/](https://jekyllrb.com/docs/posts/)"
- name: Rendering Process
  id: rendering-process/index
  summary: For any Jekyll site, a build session consists of discrete phases in the following order — setting up plugins, reading source files, running generators, rendering templates, and finally writing files to disk
  description: "# Rendering Process\n\nFor any Jekyll site, a *build session* consists of discrete phases in the following order — *setting up plugins, reading source files, running generators, rendering templates*, and finally *writing files to disk*.\n\nWhile the phases above are self-explanatory, the one phase that warrants dissection is *the rendering phase*.\n\nThe rendering phase is further divisible into three optional stages. Every file rendered, passes through one or more of these stages as determined by the file’s content string, front matter and extension. The stages are akin to an assembly line, with the *output* from a stage being the *input* for the succeeding stage:\n\n- **Interpreting Liquid expressions in the file**  \n  This stage evaluates Liquid expressions in the current file. By default, the interpretation is *shallow* — in that any Liquid expression in resulting output is not further interpreted. Moreover, any Liquid expression in the file’s front matter is left untouched.\n- **Unleashing the converters**  \n  This stage invokes the converter mapped to the current file’s extension and converts the input string. This is when Markdown gets converted into HTML and Sass / Scss into CSS or CoffeeScript into JavaScript, etc, etc. Since this stage is determined by the file’s extension, Markdown or Sass inside a `.html` file will remain untouched.\n- **Populating the layouts**  \n  By this stage, *the source file* is considered rendered and it will not be revisited. However, based on the file’s extension and consequently based on the front matter, it is determined whether to take the *output* string from the preceding stage and place into layouts or not. Whereas output from Sass files or CoffeeScript files are *never* placed into a layout, regular text output can go either ways based on whether a layout has been assigned via the front matter.  \n    \n  Placement into layouts work similar to how Russian dolls encase the smaller ones within itself or how an oyster generates a pearl — the converted output from the preceding stage forms the core and layout(s) are successively *rendered* separately onto the core.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/rendering-process/](https://jekyllrb.com/docs/rendering-process/)"
- name: Report a bug
  id: community/bug/index
  summary: If you think you’ve found a bug within a Jekyll plugin, open an issue in that plugin’s repository — First look for the plugin on rubygems then click on the Homepage link to access the plugin repository
  description: "# Report a bug\n\nIf you think you’ve found a bug within a Jekyll plugin, open an issue in that plugin’s repository — First [look for the plugin on rubygems](https://rubygems.org/) then click on the `Homepage` link to access the plugin repository.\n\nIf you think you’ve found a bug within Jekyll itself, [open an issue](https://github.com/jekyll/jekyll/issues/new).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/community/bug/](https://jekyllrb.com/docs/community/bug/)"
- name: Ruby 101
  id: ruby-101/index
  summary: Jekyll is written in Ruby
  description: "# Ruby 101\n\nJekyll is written in Ruby. If you’re new to Ruby, this page helps you learn some of the terminology.\n\n## Gems\n\nGems are code you can include in Ruby projects. Gems package specific functionality. You can share gems across multiple projects or with other people. Gems can perform actions like:\n\n- Converting a Ruby object to JSON\n- Pagination\n- Interacting with APIs such as GitHub\n\nJekyll is a gem. Many Jekyll [plugins](../plugins/index) are also gems, including [jekyll-feed](https://github.com/jekyll/jekyll-feed), [jekyll-seo-tag](https://github.com/jekyll/jekyll-seo-tag) and [jekyll-archives](https://github.com/jekyll/jekyll-archives).\n\n## Gemfile\n\nA `Gemfile` is a list of gems used by your site. Every Jekyll site has a Gemfile in the main folder.\n\nFor a simple Jekyll site it might look something like this:\n\n``` ruby\nsource \"https://rubygems.org\"\n\ngem \"jekyll\"\n\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\"\n  gem \"jekyll-seo-tag\"\nend\n```\n\n## Bundler\n\n[Bundler](https://rubygems.org/gems/bundler) is a gem that installs all gems in your `Gemfile`.\n\nWhile you don’t have to use `Gemfile` and `bundler`, it is highly recommended as it ensures you’re running the same version of Jekyll and its plugins across different environments.\n\nInstall Bundler using `gem install bundler`. You only need to install it once, not every time you create a new Jekyll project.\n\nTo install gems in your Gemfile using Bundler, run the following in the directory that has the Gemfile:\n\n``` plaintext\nbundle install\nbundle exec jekyll serve\n```\n\nTo bypass Bundler if you aren’t using a Gemfile, run `jekyll serve`.\n\nSee [Using Jekyll with Bundler](https://jekyllrb.com/tutorials/using-jekyll-with-bundler/) for more information about Bundler in Jekyll and for instructions to get up and running quickly.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/ruby-101/](https://jekyllrb.com/docs/ruby-101/)"
- name: Static Files
  id: static-files/index
  summary: A static file is a file that does not contain any front matter
  description: "# Static Files\n\nA static file is a file that does not contain any front matter. These include images, PDFs, and other un-rendered content.\n\nThey’re accessible in Liquid via `site.static_files` and contain the following metadata:\n\n| Variable             | Description                                                               |\n|----------------------|---------------------------------------------------------------------------|\n| `file.path`          | The relative path to the file, e.g. `/assets/img/image.jpg`               |\n| `file.modified_time` | The \\`Time\\` the file was last modified, e.g. `2016-04-01 16:35:26 +0200` |\n| `file.name`          | The string name of the file e.g. `image.jpg` for `image.jpg`              |\n| `file.basename`      | The string basename of the file e.g. `image` for `image.jpg`              |\n| `file.extname`       | The extension name for the file, e.g. `.jpg` for `image.jpg`              |\n\nNote that in the above table, `file` can be anything. It’s an arbitrarily set variable used in your own logic (such as in a for loop). It isn’t a global site or page variable.\n\n## Add front matter to static files\n\nAlthough you can’t directly add front matter values to static files, you can set front matter values through the [defaults property](../configuration/front-matter-defaults/index) in your configuration file. When Jekyll builds the site, it will use the front matter values you set.\n\nHere’s an example:\n\nIn your `_config.yml` file, add the following values to the `defaults` property:\n\n``` yaml\ndefaults:\n  - scope:\n      path: \"assets/img\"\n    values:\n      image: true\n```\n\nThis assumes that your Jekyll site has a folder path of `assets/img` where you have images (static files) stored. When Jekyll builds the site, it will treat each image as if it had the front matter value of `image: true`.\n\nSuppose you want to list all your image assets as contained in `assets/img`. You could use this for loop to look in the `static_files` object and get all static files that have this front matter property:\n\n``` liquid\n{% assign image_files = site.static_files | where: \"image\", true %}\n{% for myimage in image_files %}\n  {{ myimage.path }}\n{% endfor %}\n```\n\nWhen you build your site, the output will list the path to each file that meets this front matter condition.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/static-files/](https://jekyllrb.com/docs/static-files/)"
- name: Tags
  id: plugins/tags/index
  summary: If you’d like to include custom liquid tags in your site, you can do so by hooking into the tagging system
  description: "# Tags\n\nIf you’d like to include custom liquid tags in your site, you can do so by hooking into the tagging system. Built-in examples added by Jekyll include the `highlight` and `include` tags. Below is an example of a custom liquid tag that will output the time the page was rendered:\n\n``` ruby\nmodule Jekyll\n  class RenderTimeTag < Liquid::Tag\n\n    def initialize(tag_name, text, tokens)\n      super\n      @text = text\n    end\n\n    def render(context)\n      \"#{@text} #{Time.now}\"\n    end\n  end\nend\n\nLiquid::Template.register_tag('render_time', Jekyll::RenderTimeTag)\n```\n\nAt a minimum, liquid tags must implement:\n\n| Method   | Description                     |\n|----------|---------------------------------|\n| `render` | Outputs the content of the tag. |\n\nYou must also register the custom tag with the Liquid template engine as follows:\n\n``` ruby\nLiquid::Template.register_tag('render_time', Jekyll::RenderTimeTag)\n```\n\nIn the example above, we can place the following tag anywhere in one of our pages:\n\n``` liquid\n<p>{% render_time page rendered at: %}</p>\n```\n\nAnd we would get something like this on the page:\n\n``` html\n<p>page rendered at: Tue June 22 23:38:47 –0500 2010</p>\n```\n\n## Tag Blocks\n\nThe `render_time` tag seen above can also be rewritten as a tag block by inheriting the `Liquid::Block` class. Look at the example below:\n\n``` ruby\nmodule Jekyll\n  class RenderTimeTagBlock < Liquid::Block\n\n    def render(context)\n      text = super\n      \"<p>#{text} #{Time.now}</p>\"\n    end\n\n  end\nend\n\nLiquid::Template.register_tag('render_time', Jekyll::RenderTimeTagBlock)\n```\n\nWe can now use the tag block anywhere:\n\n``` liquid\n{% render_time %}\npage rendered at:\n{% endrender_time %}\n```\n\nAnd we would still get the same output as above on the page:\n\n``` html\n<p>page rendered at: Tue June 22 23:38:47 –0500 2010</p>\n```\n\nIn the above example, the tag block and the tag are both registered with the name `render_time`, but to register a tag and a tag block using the same name in the same project is not recommended as this may lead to conflicts.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/tags/](https://jekyllrb.com/docs/plugins/tags/)"
- name: Tags Filters
  id: liquid/tags/index
  summary: All of the standard Liquid tags are supported
  description: "# Tags Filters\n\nAll of the standard Liquid [tags](https://shopify.github.io/liquid/tags/control-flow/) are supported. Jekyll has a few built in tags to help you build your site. You can also create your own tags using [plugins](../../plugins/index).\n\n## Includes\n\nIf you have page snippets that you use repeatedly across your site, an [include](../../includes/index) is the perfect way to make this more maintainable.\n\n## Code snippet highlighting\n\nJekyll has built in support for syntax highlighting of over 100 languages thanks to [Rouge](http://rouge.jneen.net). Rouge is the default highlighter in Jekyll 3 and above.\n\nUsing Pygments has been deprecated and is not supported in Jekyll 4; the configuration setting `highlighter: pygments` now automatically falls back to using *Rouge* which is written in Ruby and 100% compatible with stylesheets for Pygments.\n\nTo render a code block with syntax highlighting, surround your code as follows:\n\n``` liquid\n{% highlight ruby %}\ndef foo\n  puts 'foo'\nend\n{% endhighlight %}\n```\n\nThe argument to the `highlight` tag (`ruby` in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the “short name” on the [Rouge wiki](https://github.com/jayferd/rouge/wiki/List-of-supported-languages-and-lexers).\n\n> ##### Jekyll processes all Liquid filters in code blocks\n>\n> If you are using a language that contains curly braces, you will likely need to place `{% raw %}` and `{% endraw %}` tags around your code. Since Jekyll 4.0 , you can add `render_with_liquid: false` in your front matter to disable Liquid entirely for a particular document.\n\n### Line numbers\n\nThere is a second argument to `highlight` called `linenos` that is optional. Including the `linenos` argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line:\n\n``` liquid\n{% highlight ruby linenos %}\ndef foo\n  puts 'foo'\nend\n{% endhighlight %}\n```\n\n### Stylesheets for syntax highlighting\n\nIn order for the highlighting to show up, you’ll need to include a highlighting stylesheet. For Pygments or Rouge you can use a stylesheet for Pygments, you can find an example gallery [here](https://jwarby.github.io/jekyll-pygments-themes/languages/ruby.html) or from [its repository](https://github.com/jwarby/jekyll-pygments-themes).\n\nCopy the CSS file (`native.css` for example) into your css directory and import the syntax highlighter styles into your `main.css`:\n\n``` css\n@import \"native.css\";\n```\n\n## Links\n\nSince Jekyll 4.0 , you don’t need to prepend `link` and `post_url` tags with `site.baseurl`.\n\n### Linking to pages\n\nTo link to a post, a page, collection item, or file, the `link` tag will generate the correct permalink URL for the path you specify. For example, if you use the `link` tag to link to `mypage.html`, even if you change your permalink style to include the file extension or omit it, the URL formed by the `link` tag will always be valid.\n\nYou must include the file’s original extension when using the `link` tag. Here are some examples:\n\n``` liquid\n{% link _collection/name-of-document.md %}\n{% link _posts/2016-07-26-name-of-post.md %}\n{% link news/index.html %}\n{% link /assets/files/doc.pdf %}\n```\n\nYou can also use the `link` tag to create a link in Markdown as follows:\n\n``` liquid\n[Link to a document]({% link _collection/name-of-document.md %})\n[Link to a post]({% link _posts/2016-07-26-name-of-post.md %})\n[Link to a page]({% link news/index.html %})\n[Link to a file]({% link /assets/files/doc.pdf %})\n```\n\nThe path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page.\n\nFor example, suppose you’re creating a link in `page_a.md` (stored in `pages/folder1/folder2`) to `page_b.md` (stored in `pages/folder1`). Your path in the link would not be `../page_b.html`. Instead, it would be `/pages/folder1/page_b.md`.\n\nIf you’re unsure of the path, add `{{ page.path }}` to the page and it will display the path.\n\nOne major benefit of using the `link` or `post_url` tag is link validation. If the link doesn’t exist, Jekyll won’t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links).\n\nNote you cannot add filters to `link` tags. For example, you cannot append a string using Liquid filters, such as `{% link mypage.html | append: \"#section1\" %}`. To link to sections on a page, you will need to use regular HTML or Markdown linking techniques.\n\nThe name of the file you want to link can be specified as a variable instead of an actual file name. For example, suppose you defined a variable in your page’s front matter like this:\n\n``` yaml\n---\ntitle: My page\nmy_variable: footer_company_a.html\n---\n```\n\nYou could then reference that variable in your link:\n\n``` liquid\n{% link {{ page.my_variable }} %}\n```\n\nIn this example, the `link` tag would render a link to the file `footer_company_a.html`.\n\n### Linking to posts\n\nIf you want to include a link to a post on your site, the `post_url` tag will generate the correct permalink URL for the post you specify.\n\n``` liquid\n{% post_url 2010-07-21-name-of-post %}\n```\n\nIf you organize your posts in subdirectories, you need to include subdirectory path to the post:\n\n``` liquid\n{% post_url /subdir/2010-07-21-name-of-post %}\n```\n\nThere is no need to include the file extension when using the `post_url` tag.\n\nYou can also use this tag to create a link to a post in Markdown as follows:\n\n``` liquid\n[Name of Link]({% post_url 2010-07-21-name-of-post %})\n```\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/liquid/tags/](https://jekyllrb.com/docs/liquid/tags/)"
- name: Themes
  id: themes/index
  summary: Jekyll has an extensive theme system that allows you to leverage community-maintained templates and styles to customize your site’s presentation
  description: "# Themes\n\nJekyll has an extensive theme system that allows you to leverage community-maintained templates and styles to customize your site’s presentation. Jekyll themes specify plugins and package up assets, layouts, includes, and stylesheets in a way that can be overridden by your site’s content.\n\n## Pick up a theme\n\nYou can find and preview themes on different galleries:\n\n- [GitHub.com \\#jekyll-theme repos](https://github.com/topics/jekyll-theme)\n- [jamstackthemes.dev](https://jamstackthemes.dev/ssg/jekyll/)\n- [jekyllthemes.org](http://jekyllthemes.org/)\n- [jekyllthemes.io](https://jekyllthemes.io/)\n- [jekyll-themes.com](https://jekyll-themes.com/)\n\nSee also: [resources](https://jekyllrb.com/resources/).\n\n## Understanding gem-based themes\n\nWhen you [create a new Jekyll site](https://jekyllrb.com/docs/) (by running the `jekyll new <PATH>` command), Jekyll installs a site that uses a gem-based theme called [Minima](https://github.com/jekyll/minima).\n\nWith gem-based themes, some of the site’s directories (such as the `assets`, `_layouts`, `_includes`, and `_sass` directories) are stored in the theme’s gem, hidden from your immediate view. Yet all of the necessary directories will be read and processed during Jekyll’s build process.\n\nIn the case of Minima, you see only the following files in your Jekyll site directory:\n\n``` plaintext\n.\n├── Gemfile\n├── Gemfile.lock\n├── _config.yml\n├── _posts\n│   └── 2016-12-04-welcome-to-jekyll.markdown\n├── about.markdown\n└── index.markdown\n```\n\nThe `Gemfile` and `Gemfile.lock` files are used by Bundler to keep track of the required gems and gem versions you need to build your Jekyll site.\n\nGem-based themes make it easier for theme developers to make updates available to anyone who has the theme gem. When there’s an update, theme developers push the update to RubyGems.\n\nIf you have the theme gem, you can (if you desire) run `bundle update` to update all gems in your project. Or you can run `bundle update <THEME>`, replacing `<THEME>` with the theme name, such as `minima`, to just update the theme gem. Any new files or updates the theme developer has made (such as to stylesheets or includes) will be pulled into your project automatically.\n\nThe goal of gem-based themes is to allow you to get all the benefits of a robust, continually updated theme without having all the theme’s files getting in your way and over-complicating what might be your primary focus: creating content.\n\n## Overriding theme defaults\n\nJekyll themes set default layouts, includes, and stylesheets. However, you can override any of the theme defaults with your own site content.\n\nTo replace layouts or includes in your theme, make a copy in your `_layouts` or `_includes` directory of the specific file you wish to modify, or create the file from scratch giving it the same name as the file you wish to override.\n\nFor example, if your selected theme has a `page` layout, you can override the theme’s layout by creating your own `page` layout in the `_layouts` directory (that is, `_layouts/page.html`).\n\nTo locate a theme’s files on your computer:\n\n1.  Run `bundle info --path` followed by the name of the theme’s gem, e.g., `bundle info --path minima` for Jekyll’s default theme.\n\n    This returns the location of the gem-based theme files. For example, the Minima theme’s files might be located in `/usr/local/lib/ruby/gems/2.6.0/gems/minima-2.5.1` on macOS.\n\n2.  Open the theme’s directory in Finder or Explorer:\n\n    ``` bash\n    # On MacOS\n    open $(bundle info --path minima)\n\n    # On Windows\n    # First get the gem's installation path:\n    #\n    #   bundle info --path minima\n    #   => C:/Ruby26-x64/lib/ruby/gems/2.7.2/gems/minima-2.5.1\n    #\n    # then invoke explorer with above path, substituting `/` with `\\`\n    explorer C:\\Ruby26-x64\\lib\\ruby\\gems\\2.7.2\\gems\\minima-2.5.1\n\n    # On Linux\n    xdg-open $(bundle info --path minima)\n    ```\n\n    A Finder or Explorer window opens showing the theme’s files and directories. The Minima theme gem contains these files:\n\n    ``` plaintext\n    .\n    ├── LICENSE.txt\n    ├── README.md\n    ├── _includes\n    │   ├── disqus_comments.html\n    │   ├── footer.html\n    │   ├── google-analytics.html\n    │   ├── head.html\n    │   ├── header.html\n    │   ├── icon-github.html\n    │   ├── icon-github.svg\n    │   ├── icon-twitter.html\n    │   └── icon-twitter.svg\n    ├── _layouts\n    │   ├── default.html\n    │   ├── home.html\n    │   ├── page.html\n    │   └── post.html\n    ├── _sass\n    │   ├── minima\n    │   │   ├── _base.scss\n    │   │   ├── _layout.scss\n    │   │   └── _syntax-highlighting.scss\n    │   └── minima.scss\n    └── assets\n        └── main.scss\n    ```\n\nWith a clear understanding of the theme’s files, you can now override any theme file by creating a similarly named file in your Jekyll site directory.\n\nLet’s say, for a second example, you want to override Minima’s footer. In your Jekyll site, create an `_includes` folder and add a file in it called `footer.html`. Jekyll will now use your site’s `footer.html` file instead of the `footer.html` file from the Minima theme gem.\n\nTo modify any stylesheet you must take the extra step of also copying the main sass file (`_sass/minima.scss` in the Minima theme) into the `_sass` directory in your site’s source.\n\nJekyll will look first to your site’s content before looking to the theme’s defaults for any requested file in the following folders:\n\n- `/assets`\n- `/_layouts`\n- `/_includes`\n- `/_sass`\n\nNote that making copies of theme files will prevent you from receiving any theme updates on those files. An alternative, to continue getting theme updates on all stylesheets, is to use higher specificity CSS selectors in your own additional, originally named CSS files.\n\nRefer to your selected theme’s documentation and source repository for more information on which files you can override.\n\n## Converting gem-based themes to regular themes\n\nSuppose you want to get rid of the gem-based theme and convert it to a regular theme, where all files are present in your Jekyll site directory, with nothing stored in the theme gem.\n\nTo do this, copy the files from the theme gem’s directory into your Jekyll site directory. (For example, copy them to `/myblog` if you created your Jekyll site at `/myblog`. See the previous section for details.)\n\nThen you must tell Jekyll about the plugins that were referenced by the theme. You can find these plugins in the theme’s gemspec file as runtime dependencies. If you were converting the Minima theme, for example, you might see:\n\n``` ruby\nspec.add_runtime_dependency \"jekyll-feed\", \"~> 0.12\"\nspec.add_runtime_dependency \"jekyll-seo-tag\", \"~> 2.6\"\n```\n\nYou should include these references in the `Gemfile` in one of two ways.\n\nYou could list them individually in both `Gemfile` and `_config.yml`.\n\n``` ruby\n# ./Gemfile\n\ngem \"jekyll-feed\", \"~> 0.12\"\ngem \"jekyll-seo-tag\", \"~> 2.6\"\n```\n\n``` yaml\n# ./_config.yml\n\nplugins:\n  - jekyll-feed\n  - jekyll-seo-tag\n```\n\nOr you could list them explicitly as Jekyll plugins in your Gemfile, and not update `_config.yml`, like this:\n\n``` ruby\n# ./Gemfile\n\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\", \"~> 0.12\"\n  gem \"jekyll-seo-tag\", \"~> 2.6\"\nend\n```\n\nEither way, don’t forget to `bundle update`.\n\nIf you’re publishing on GitHub Pages you should update only your `_config.yml` as GitHub Pages doesn’t load plugins via Bundler.\n\nFinally, remove references to the theme gem in `Gemfile` and configuration. For example, to remove `minima`:\n\n- Open `Gemfile` and remove `gem \"minima\", \"~> 2.5\"`.\n- Open `_config.yml` and remove `theme: minima`.\n\nNow `bundle update` will no longer get updates for the theme gem.\n\n## Installing a gem-based theme\n\nThe `jekyll new <PATH>` command isn’t the only way to create a new Jekyll site with a gem-based theme. You can also find gem-based themes online and incorporate them into your Jekyll project.\n\nFor example, search for [jekyll theme on RubyGems](https://rubygems.org/search?utf8=%E2%9C%93&query=jekyll-theme) to find other gem-based themes. (Note that not all themes are using `jekyll-theme` as a convention in the theme name.)\n\nTo install a gem-based theme:\n\n1.  Add the theme gem to your site’s `Gemfile`:\n\n    ``` ruby\n    # ./Gemfile\n\n    # This is an example, declare the theme gem you want to use here\n    gem \"jekyll-theme-minimal\"\n    ```\n\n    Or if you’ve started with the `jekyll new` command, replace `gem \"minima\", \"~> 2.0\"` with the gem you want, e.g:\n\n    ``` diff\n    # ./Gemfile\n\n    - gem \"minima\", \"~> 2.5\"\n    + gem \"jekyll-theme-minimal\"\n    ```\n\n2.  Install the theme:\n\n    ``` bash\n    bundle install\n    ```\n\n3.  Add the following to your site’s `_config.yml` to activate the theme:\n\n    ``` yaml\n    theme: jekyll-theme-minimal\n    ```\n\n4.  Build your site:\n\n    ``` bash\n    bundle exec jekyll serve\n    ```\n\nYou can have multiple themes listed in your site’s `Gemfile`, but only one theme can be selected in your site’s `_config.yml`.\n\nIf you’re publishing your Jekyll site on [GitHub Pages](https://pages.github.com/), note that GitHub Pages supports only [some gem-based themes](https://pages.github.com/themes/). GitHub Pages also supports [using any theme hosted on GitHub](https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site/#adding-a-jekyll-theme-in-your-sites-_configyml-file) using the `remote_theme` configuration as if it were a gem-based theme.\n\n## Creating a gem-based theme\n\nIf you’re a Jekyll theme developer (rather than a consumer of themes), you can package up your theme in RubyGems and allow users to install it through Bundler.\n\nIf you’re unfamiliar with creating Ruby gems, don’t worry. Jekyll will help you scaffold a new theme with the `new-theme` command. Run `jekyll new-theme` with the theme name as an argument.\n\nHere is an example:\n\n``` bash\njekyll new-theme jekyll-theme-awesome\n    create /path/to/jekyll-theme-awesome/_layouts\n    create /path/to/jekyll-theme-awesome/_includes\n    create /path/to/jekyll-theme-awesome/_sass\n    create /path/to/jekyll-theme-awesome/_layouts/page.html\n    create /path/to/jekyll-theme-awesome/_layouts/post.html\n    create /path/to/jekyll-theme-awesome/_layouts/default.html\n    create /path/to/jekyll-theme-awesome/Gemfile\n    create /path/to/jekyll-theme-awesome/jekyll-theme-awesome.gemspec\n    create /path/to/jekyll-theme-awesome/README.md\n    create /path/to/jekyll-theme-awesome/LICENSE.txt\n    initialize /path/to/jekyll-theme-awesome/.git\n    create /path/to/jekyll-theme-awesome/.gitignore\nYour new Jekyll theme, jekyll-theme-awesome, is ready for you in /path/to/jekyll-theme-awesome!\nFor help getting started, read /path/to/jekyll-theme-awesome/README.md.\n```\n\nAdd your template files in the corresponding folders. Then complete the `.gemspec` and the README files according to your needs.\n\n### Layouts and includes\n\nTheme layouts and includes work just like they work in any Jekyll site. Place layouts in your theme’s `/_layouts` folder, and place includes in your themes `/_includes` folder.\n\nFor example, if your theme has a `/_layouts/page.html` file, and a page has `layout: page` in its front matter, Jekyll will first look to the site’s `_layouts` folder for the `page` layout, and if none exists, will use your theme’s `page` layout.\n\n### Assets\n\nAny file in `/assets` will be copied over to the user’s site upon build unless they have a file with the same relative path. You can ship any kind of asset here: SCSS, an image, a webfont, etc. These files behave like pages and static files in Jekyll:\n\n- If the file has [front matter](../front-matter/index) at the top, it will be rendered.\n- If the file does not have front matter, it will simply be copied over into the resulting site.\n\nThis allows theme creators to ship a default `/assets/styles.scss` file which their layouts can depend on as `/assets/styles.css`.\n\nAll files in `/assets` will be output into the compiled site in the `/assets` folder just as you’d expect from using Jekyll on your sites.\n\n### Stylesheets\n\nYour theme’s stylesheets should be placed in your theme’s `_sass` folder, again, just as you would when authoring a Jekyll site.\n\n``` plaintext\n_sass\n└── jekyll-theme-awesome.scss\n```\n\nYour theme’s styles can be included in the user’s stylesheet using the `@import` directive.\n\n``` css\n@import \"{{ site.theme }}\";\n```\n\n### Theme-gem dependencies3.5.0\n\nJekyll will automatically require all whitelisted `runtime_dependencies` of your theme-gem even if they’re not explicitly included under the `plugins` array in the site’s config file. (Note: whitelisting is only required when building or serving with the `--safe` option.)\n\nWith this, the end-user need not keep track of the plugins required to be included in their config file for their theme-gem to work as intended.\n\n### Pre-configuring Theme-gems4.0\n\nJekyll will read-in a `_config.yml` at the root of the theme-gem and merge its data into the site’s existing configuration data.\n\nBut unlike other entities loaded from within the theme, loading the config file comes with a few restrictions, as summarized below:\n\n- Jekyll’s default settings cannot be overridden by a theme-config. That *ball is still in the user’s court.*\n- The theme-config-file cannot be a symlink, irrespective of `safe mode` and whether the file pointed to by the symlink is a legitimate file within the theme-gem.\n- The theme-config should be a set of key-value pairs. An empty config file, a config file that simply *lists items* under a key, or a config file with just a simple string of text will simply be ignored silently. Users will not get a warning or any log output regarding this discrepancy.\n- Any settings defined by the theme-config can be overridden by the user.\n\nWhile this feature is to enable easier adoption of a theme, the restrictions ensure that a theme-config cannot affect the build in a concerning manner. Any plugins required by the theme will have to be listed manually by the user or provided by the theme’s `gemspec` file.\n\nThis feature will let the theme-gem to work with *theme-specific config variables* out-of-the-box.\n\n### Documenting your theme\n\nYour theme should include a `/README.md` file, which explains how site authors can install and use your theme. What layouts are included? What includes? Do they need to add anything special to their site’s configuration file?\n\n### Adding a screenshot\n\nThemes are visual. Show users what your theme looks like by including a screenshot as `/screenshot.png` within your theme’s repository where it can be retrieved programmatically. You can also include this screenshot within your theme’s documentation.\n\n### Previewing your theme\n\nTo preview your theme as you’re authoring it, it may be helpful to add dummy content in, for example, `/index.html` and `/page.html` files. This will allow you to use the `jekyll build` and `jekyll serve` commands to preview your theme, just as you’d preview a Jekyll site.\n\nIf you do preview your theme locally, be sure to add `/_site` to your theme’s `.gitignore` file to prevent the compiled site from also being included when you distribute your theme.\n\n### Publishing your theme\n\nThemes are published via [RubyGems.org](https://rubygems.org). You will need a RubyGems account, which you can [create for free](https://rubygems.org/sign_up).\n\n1.  First, you need to have it in a git repository:\n\n    ``` bash\n    git init # Only the first time\n    git add -A\n    git commit -m \"Init commit\"\n    ```\n\n2.  Next, package your theme, by running the following command, replacing `jekyll-theme-awesome` with the name of your theme:\n\n    ``` bash\n    gem build jekyll-theme-awesome.gemspec\n    ```\n\n3.  Finally, push your packaged theme up to the RubyGems service, by running the following command, again replacing `jekyll-theme-awesome` with the name of your theme:\n\n    ``` bash\n    gem push jekyll-theme-awesome-*.gem\n    ```\n\n4.  To release a new version of your theme, update the version number in the gemspec file, ( `jekyll-theme-awesome.gemspec` in this example ), and then repeat Steps 1 - 3 above. We recommend that you follow [Semantic Versioning](http://semver.org/) while bumping your theme-version.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/themes/](https://jekyllrb.com/docs/themes/)"
- name: Travis CI
  id: continuous-integration/travis-ci/index
  summary: You can test your website build against one or more versions of Ruby
  description: "# Travis CI\n\nYou can test your website build against one or more versions of Ruby. The following guide will show you how to set up a free build environment on [Travis](https://travis-ci.org/), with [GitHub](https://github.com/) integration for pull requests.\n\n## 1. Enabling Travis and GitHub\n\nTo enable Travis builds for your GitHub repository:\n\n1.  Go to your profile on travis-ci.org: https://travis-ci.org/profile/username\n2.  Find the repository for which you’re interested in enabling builds.\n3.  Flick the repository switch on so that it turns blue.\n4.  Optionally configure the build by clicking on the gear icon. Further configuration happens via your `.travis.yml` file. More details below.\n\n## 2. The Test Script\n\nThe simplest test script runs `jekyll build` and ensures that Jekyll doesn’t fail to build the site. It doesn’t check the resulting site, but it does ensure things are built properly.\n\nWhen testing Jekyll output, there is no better tool than [html-proofer](https://github.com/gjtorikian/html-proofer). This tool checks your resulting site to ensure all links and images exist. Utilize it either with the convenient `htmlproofer` command-line executable, or write a Ruby script which utilizes the gem.\n\nSave the commands you want to run and succeed in a file: `./script/cibuild`\n\n### The HTML Proofer Executable\n\n``` bash\n#!/usr/bin/env bash\nset -e # halt script on error\n\nbundle exec jekyll build\nbundle exec htmlproofer ./_site\n```\n\nSome options can be specified via command-line switches. Check out the `html-proofer` README for more information about these switches, or run `htmlproofer --help` locally.\n\nFor example to avoid testing external sites, use this command:\n\n``` bash\nbundle exec htmlproofer ./_site --disable-external\n```\n\n### The HTML Proofer Library\n\nYou can also invoke `html-proofer` in Ruby scripts (e.g. in a Rakefile):\n\n``` ruby\n#!/usr/bin/env ruby\n\nrequire 'html-proofer'\nHTMLProofer.check_directory(\"./_site\").run\n```\n\nOptions are given as a second argument to `.new`, and are encoded in a symbol-keyed Ruby Hash. For more information about the configuration options, check out `html-proofer`’s README file.\n\n## 3. Configuring Your Travis Builds\n\nThis file is used to configure your Travis builds. Because Jekyll is built with Ruby and requires RubyGems to install, we use the Ruby language build environment. Below is a sample `.travis.yml` file, followed by an explanation of each line.\n\n**Note:** You will need a Gemfile as well, [Travis will automatically install](https://docs.travis-ci.com/user/languages/ruby/#Dependency-Management) the dependencies based on the referenced gems. Here is an example `Gemfile` with two referenced gems, “jekyll” and “html-proofer”:\n\n``` ruby\nsource \"https://rubygems.org\"\n\ngem \"jekyll\"\ngem \"html-proofer\"\n```\n\nYour `.travis.yml` file should look like this:\n\n``` yaml\nlanguage: ruby\nrvm:\n  - 2.6.3\n\nbefore_script:\n - chmod +x ./script/cibuild # or do this locally and commit\n\n# Assume bundler is being used, therefore\n# the `install` step will run `bundle install` by default.\nscript: ./script/cibuild\n\n# branch whitelist, only for GitHub Pages\nbranches:\n  only:\n  - gh-pages     # test the gh-pages branch\n  - /pages-(.*)/ # test every branch which starts with \"pages-\"\n\naddons:\n  apt:\n    packages:\n    - libcurl4-openssl-dev\n\ncache: bundler # caching bundler gem packages will speed up build\n\n# Optional: disable email notifications about the outcome of your builds\nnotifications:\n  email: false\n```\n\nOk, now for an explanation of each line:\n\n``` yaml\nlanguage: ruby\n```\n\nThis line tells Travis to use a Ruby build container. It gives your script access to Bundler, RubyGems, and a Ruby runtime.\n\n``` yaml\nrvm:\n  - 2.6.3\n```\n\nRVM is a popular Ruby Version Manager (like rbenv, chruby, etc). This directive tells Travis the Ruby version to use when running your test script. Use a [version which is pre-installed on the Travis build docker](https://docs.travis-ci.com/user/languages/ruby/#Specifying-Ruby-versions-and-implementations) image to speed up the build.\n\n``` yaml\nbefore_script:\n - chmod +x ./script/cibuild\n```\n\nThe build script file needs to have the *executable* attribute set or Travis will fail with a permission denied error. You can also run this locally and commit the permissions directly, thus rendering this step irrelevant.\n\n``` yaml\nscript: ./script/cibuild\n```\n\nTravis allows you to run any arbitrary shell script to test your site. One convention is to put all scripts for your project in the `script` directory, and to call your test script `cibuild`. This line is completely customizable. If your script won’t change much, you can write your test incantation here directly:\n\n``` yaml\ninstall: gem install jekyll html-proofer\nscript: jekyll build && htmlproofer ./_site\n```\n\nThe `script` directive can be absolutely any valid shell command.\n\n``` yaml\n# branch whitelist, only for GitHub Pages\nbranches:\n  only:\n  - gh-pages     # test the gh-pages branch\n  - /pages-(.*)/ # test every branch which starts with \"pages-\"\n```\n\nYou want to ensure the Travis builds for your site are being run only on the branch or branches which contain your site. One means of ensuring this isolation is including a branch whitelist in your Travis configuration file. By specifying the `gh-pages` branch, you will ensure the associated test script (discussed above) is only executed on site branches. If you use a pull request flow for proposing changes, you may wish to enforce a convention for your builds such that all branches containing edits are prefixed, exemplified above with the `/pages-(.*)/` regular expression.\n\nThe `branches` directive is completely optional. Travis will build from every push to any branch of your repo if leave it out.\n\n> ##### Be sure to exclude `vendor` from your `_config.yml`\n>\n> Travis bundles all gems in the `vendor` directory on its build servers, which Jekyll will mistakenly read and explode on.\n\n``` yaml\nexclude: [vendor]\n```\n\nTo speed up the build, you should cache the gem packages created by `bundler`. Travis has a pre-defined [cache strategy for this tool](https://docs.travis-ci.com/user/caching/#Caching-directories-(Bundler%2C-dependencies)) which should have all the default configs to do exactly that.\n\n``` yaml\ncache: bundler\n```\n\nOptionally, if you are not interested in the build email notifications you can disable them with this configuration. Travis supports a wide array of notification services, you may find [another one more useful (e.g. slack)](https://docs.travis-ci.com/user/notifications/).\n\n``` yaml\nnotifications:\n  email: false\n```\n\n### Troubleshooting\n\n**Travis error:** *“You are trying to install in deployment mode after changing your Gemfile. Run bundle install elsewhere and add the updated Gemfile.lock to version control.”*\n\n**Workaround:** Either run `bundle install` locally and commit your changes to `Gemfile.lock`, or remove the `Gemfile.lock` file from your repository and add an entry in the `.gitignore` file to avoid it from being checked in again.\n\n### Questions?\n\nThis entire guide is open-source. Go ahead and [edit it](https://github.com/jekyll/jekyll/edit/master/docs/_docs/continuous-integration/travis-ci.md) if you have a fix or [ask for help](https://jekyllrb.com/help/) if you run into trouble and need some help.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/continuous-integration/travis-ci/](https://jekyllrb.com/docs/continuous-integration/travis-ci/)"
- name: Troubleshooting
  id: troubleshooting/index
  summary: If you ever run into problems installing or using Jekyll, here are a few tips that might be of help
  description: "# Troubleshooting\n\nIf you ever run into problems installing or using Jekyll, here are a few tips that might be of help. If the problem you’re experiencing isn’t covered below, **please [check out our other help resources](https://jekyllrb.com/help/)** as well.\n\n- [Installation Problems](#installation-problems)\n- [Problems running Jekyll](#problems-running-jekyll)\n- [Base-URL Problems](#base-url-problems)\n- [Configuration problems](#configuration-problems)\n- [Markup Problems](#markup-problems)\n- [Production Problems](#production-problems)\n\n## Installation Problems\n\nIf you encounter errors during gem installation, you may need to install the header files for compiling extension modules for Ruby 2.x This can be done on Ubuntu or Debian by running:\n\n``` bash\nsudo apt-get install ruby2.6-dev\n```\n\nOn Red Hat, CentOS, and Fedora systems you can do this by running:\n\n``` bash\nsudo yum install ruby-devel\n```\n\nOn Arch Linux you need to run:\n\n``` bash\nsudo pacman -S ruby-ffi\n```\n\nOn Ubuntu if you get stuck after `bundle exec jekyll serve` and see error messages like `Could not locate Gemfile` or `.bundle/ directory`, it’s likely because all requirements have not been fully met. Recent stock Ubuntu distributions require the installation of both the `ruby` and `ruby-all-dev` packages:\n\n``` bash\nsudo apt-get install ruby ruby-all-dev\n```\n\nOn [NearlyFreeSpeech](https://www.nearlyfreespeech.net/) you need to run the following commands before installing Jekyll:\n\n``` bash\nexport GEM_HOME=/home/private/gems\nexport GEM_PATH=/home/private/gems:/usr/local/lib/ruby/gems/1.8/\nexport PATH=$PATH:/home/private/gems/bin\nexport RB_USER_INSTALL='true'\n```\n\nTo install RubyGems on Gentoo:\n\n``` bash\nsudo emerge -av dev-ruby/rubygems\n```\n\nOn Windows, you may need to install [RubyInstaller DevKit](https://wiki.github.com/oneclick/rubyinstaller/development-kit).\n\nOn Android (with Termux) you can install all requirements by running:\n\n``` bash\napt update && apt install libffi-dev clang ruby-dev make\n```\n\nOn macOS, you may need to update RubyGems (using `sudo` only if necessary):\n\n``` bash\ngem update --system\n```\n\nIf you still have issues, you can download and install new Command Line Tools (such as `gcc`) using the following command:\n\n``` bash\nxcode-select --install\n```\n\nwhich may allow you to install native gems using this command (again, using `sudo` only if necessary):\n\n``` bash\ngem install jekyll\n```\n\nNote that upgrading macOS does not automatically upgrade Xcode itself (that can be done separately via the App Store), and having an out-of-date Xcode.app can interfere with the command line tools downloaded above. If you run into this issue, upgrade Xcode and install the upgraded Command Line Tools.\n\n### Running Jekyll as Non-Superuser (no sudo!)\n\nOn most flavors of Linux, macOS, and Bash on Ubuntu on Windows, it is possible to run Jekyll as a non-superuser and without having to install gems to system-wide locations by adding the following lines to the end of your `.bashrc` file:\n\n``` bash\n# Ruby exports\n\nexport GEM_HOME=$HOME/gems\nexport PATH=$HOME/gems/bin:$PATH\n```\n\nThis tells `gem` to place its gems within the user’s home folder, not in a system-wide location, and adds the local `jekyll` command to the user’s `PATH` ahead of any system-wide paths.\n\nThis is also useful for many shared webhosting services, where user accounts have only limited privileges. Adding these exports to `.bashrc` before running `gem install jekyll bundler` allows a complete non-`sudo` install of Jekyll.\n\nTo activate the new exports, either close and restart Bash, logout and log back into your shell account, or run `. .bashrc` in the currently-running shell.\n\nIf you see the following error when running the `jekyll new` command, you can solve it by using the above-described procedure:\n\n``` bash\njekyll new test\n\nRunning bundle install in /home/user/test...\n\nYour user account is not allowed to install to the system RubyGems.\nYou can cancel this installation and run:\n\n    bundle install --path vendor/bundle\n\nto install the gems into ./vendor/bundle/, or you can enter your password\nand install the bundled gems to RubyGems using sudo.\n\nPassword:\n```\n\nOnce this is done, the `jekyll new` command should work properly for your user account.\n\n### Jekyll & macOS\n\nWith the introduction of System Integrity Protection in v10.11, several directories that were previously writable are now considered system locations and are no longer available. Given these changes, there are a couple of simple ways to get up and running. One option is to change the location where the gem will be installed (again, using `sudo` only if necessary):\n\n``` bash\ngem install -n /usr/local/bin jekyll\n```\n\nAlternatively, Homebrew can be installed and used to set up Ruby. This can be done as follows:\n\n``` bash\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nOnce Homebrew is installed, the second step is to run:\n\n``` bash\nbrew install ruby\n```\n\nAdvanced users (with more complex needs) may find it helpful to choose one of a number of Ruby version managers ([RVM](https://rvm.io), [rbenv](http://rbenv.org), [chruby](https://github.com/postmodern/chruby), [etc](https://github.com/rvm/rvm/blob/master/docs/alt.md).) in which to install Jekyll.\n\nIf you elect to use one of the above methods to install Ruby, it might be necessary to modify your `$PATH` variable using the following command:\n\n``` bash\nexport PATH=/usr/local/bin:$PATH\n```\n\nGUI apps can modify the `$PATH` as follows:\n\n``` bash\nlaunchctl setenv PATH \"/usr/local/bin:$PATH\"\n```\n\nEither of these approaches are useful because `/usr/local` is considered a “safe” location on systems which have SIP enabled, they avoid potential conflicts with the version of Ruby included by Apple, and it keeps Jekyll and its dependencies in a sandboxed environment. This also has the added benefit of not requiring `sudo` when you want to add or remove a gem.\n\n### Could not find a JavaScript runtime. (ExecJS::RuntimeUnavailable)\n\nThis error can occur during the installation of `jekyll-coffeescript` when you don’t have a proper JavaScript runtime. To solve this, either install `execjs` and `therubyracer` gems, or install `nodejs`. Check out [issue \\#2327](https://github.com/jekyll/jekyll/issues/2327) for more info.\n\n## Problems running Jekyll\n\nOn Debian or Ubuntu, you may need to add `/var/lib/gems/1.8/bin/` to your path in order to have the `jekyll` executable be available in your Terminal.\n\n## Base-URL Problems\n\nIf you are using base-url option like:\n\n``` bash\njekyll serve --baseurl '/blog'\n```\n\n… then make sure that you access the site at:\n\n``` plaintext\nhttp://localhost:4000/blog/index.html\n```\n\nIt won’t work to just access:\n\n``` plaintext\nhttp://localhost:4000/blog\n```\n\n## Configuration problems\n\nThe order of precedence for conflicting [configuration settings](../configuration/index) is as follows:\n\n1.  Command-line flags\n2.  Configuration file settings\n3.  Defaults\n\nThat is: defaults are overridden by options specified in `_config.yml`, and flags specified at the command-line will override all other settings specified elsewhere.\n\n**Note: From v3.3.0 onward, Jekyll does not process `node_modules` and certain subdirectories within `vendor`, by default. But, by having an `exclude:` array defined explicitly in the config file overrides this default setting, which results in some users to encounter an error in building the site, with the following error message:**\n\n``` plaintext\n    ERROR: YOUR SITE COULD NOT BE BUILT:\n    ------------------------------------\n    Invalid date '<%= Time.now.strftime('%Y-%m-%d %H:%M:%S %z') %>':\n    Document 'vendor/bundle/gems/jekyll-3.4.3/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb'\n    does not have a valid date in front matter.\n```\n\nAdding `vendor/bundle` to the `exclude:` list will solve this problem but will lead to having other sub-directories under `/vendor/` (and also `/node_modules/`, if present) be processed to the destination folder `_site`.\n\nThe proper solution is to incorporate the default setting for `exclude:` rather than override it completely:\n\nFor versions up to `v3.4.3`, the `exclude:` setting must look like following:\n\n``` yaml\nexclude:\n  - Gemfile\n  - Gemfile.lock\n  - node_modules\n  - vendor/bundle/\n  - vendor/cache/\n  - vendor/gems/\n  - vendor/ruby/\n  - any_additional_item # any user-specific listing goes at the end\n```\n\nFrom `v3.5` onward, `Gemfile` and `Gemfile.lock` are also excluded by default. So, in most cases there is no need to define another `exclude:` array in the config file. So an existing definition can either be modified as above, or removed completely, or commented out to enable easy edits in future.\n\n## Markup Problems\n\nThe various markup engines that Jekyll uses may have some issues. This page will document them to help others who may run into the same problems.\n\n### Liquid\n\nLiquid version 2.0 seems to break the use of `{{` in templates. Unlike previous versions, using `{{` in 2.0 triggers the following error:\n\n``` plaintext\n'{{' was not properly terminated with regexp: /\\}\\}/  (Liquid::SyntaxError)\n```\n\n### Excerpts\n\nSince v1.0.0, Jekyll has had automatically-generated post excerpts. Since v1.1.0, Jekyll also passes these excerpts through Liquid, which can cause strange errors where references don’t exist or a tag hasn’t been closed. If you run into these errors, try setting `excerpt_separator: \"\"` in your `_config.yml`, or set it to some nonsense string.\n\n## Production Problems\n\nIf you run into an issue that a static file can’t be found in your production environment during build since v3.2.0 you should set your [environment to `production`](../configuration/environments/index). The issue is caused by trying to copy a non-existing symlink.\n\n> ##### Please report issues you encounter!\n>\n> If you come across a bug, please [create an issue](https://github.com/jekyll/jekyll/issues/new) on GitHub describing the problem and any work-arounds you find so we can document it here for others.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/troubleshooting/](https://jekyllrb.com/docs/troubleshooting/)"
- name: Variables
  id: variables/index
  summary: Jekyll traverses your site looking for files to process
  description: "# Variables\n\nJekyll traverses your site looking for files to process. Any files with [front matter](../front-matter/index) are subject to processing. For each of these files, Jekyll makes a variety of data available via [Liquid](../liquid/index). The following is a reference of the available data.\n\n## Global Variables\n\n| Variable    | Description                                                                                                                                                     |\n|-------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `site`      | Site wide information + configuration settings from `_config.yml`. See below for details.                                                                       |\n| `page`      | Page specific information + the [front matter](../front-matter/index). Custom variables set via the front matter will be available here. See below for details. |\n| `layout`    | Layout specific information + the [front matter](../front-matter/index). Custom variables set via front matter in layouts will be available here.               |\n| `content`   | In layout files, the rendered content of the Post or Page being wrapped. Not defined in Post or Page files.                                                     |\n| `paginator` | When the `paginate` configuration option is set, this variable becomes available for use. See [Pagination](../pagination/index) for details.                    |\n\n## Site Variables\n\n| Variable                    | Description|\n|-----------------------------||\n| `site.time`                 | The current time (when you run the `jekyll` command).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `site.pages`                | A list of all Pages|\n| `site.posts`                | A reverse chronological list of all Posts.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `site.related_posts`        | If the page being processed is a Post, this contains a list of up to ten related Posts. By default, these are the ten most recent posts. For high quality but slow to compute results, run the `jekyll` command with the `--lsi` ([latent semantic indexing](https://en.wikipedia.org/wiki/Latent_semantic_analysis#Latent_semantic_indexing)) option. Also note GitHub Pages does not support the `lsi` option when generating sites.                                                                                                  |\n| `site.static_files`         | A list of all [static files](../static-files/index) (i.e. files not processed by Jekyll's converters or the Liquid renderer). Each file has five properties: `path`, `modified_time`, `name`, `basename` and `extname`.                                                                                                                                                                                                                                                                                                                 |\n| `site.html_pages`           | A subset of `site.pages` listing those which end in `.html`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `site.html_files`           | A subset of `site.static_files` listing those which end in `.html`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `site.collections`          | A list of all the collections (including posts).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `site.data`                 | A list containing the data loaded from the YAML files located in the `_data` directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| `site.documents`            | A list of all the documents in every collection.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `site.categories.CATEGORY`  | The list of all Posts in category `CATEGORY`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `site.tags.TAG`             | The list of all Posts with tag `TAG`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `site.url`                  | Contains the url of your site as it is configured in the `_config.yml`. For example, if you have `url: http://mysite.com` in your configuration file, then it will be accessible in Liquid as `site.url`. For the development environment there is [an exception](https://jekyllrb.com/news/#3-siteurl-is-set-by-the-development-server), if you are running `jekyll serve` in a development environment `site.url` will be set to the value of `host`, `port`, and SSL-related options. This defaults to `url: http://localhost:4000`. |\n| `site.[CONFIGURATION_DATA]` | All the variables set via the command line and your `_config.yml` are available through the `site` variable. For example, if you have `foo: bar` in your configuration file, then it will be accessible in Liquid as `site.foo`. Jekyll does not parse changes to `_config.yml` in `watch` mode, you must restart Jekyll to see changes to variables.                                                                                                                                                                                   |\n\n## Page Variables\n\n| Variable          | Description                                                                                                                                                                                                                                                                                                                       |\n|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `page.content`    | The content of the Page, rendered or un-rendered depending upon what Liquid is being processed and what `page` is.                                                                                                                                                                                                                |\n| `page.title`      | The title of the Page.                                                                                                                                                                                                                                                                                                            |\n| `page.excerpt`    | The un-rendered excerpt of a document.                                                                                                                                                                                                                                                                                            |\n| `page.url`        | The URL of the Post without the domain, but with a leading slash, e.g. `/2008/12/14/my-post.html`                                                                                                                                                                                                                                 |\n| `page.date`       | The Date assigned to the Post. This can be overridden in a Post’s front matter by specifying a new date/time in the format `YYYY-MM-DD HH:MM:SS` (assuming UTC), or `YYYY-MM-DD HH:MM:SS +/-TTTT` (to specify a time zone using an offset from UTC. e.g. `2008-12-14 10:30:00 +0900`).                                            |\n| `page.id`         | An identifier unique to a document in a Collection or a Post (useful in RSS feeds). e.g. `/2008/12/14/my-post``/my-collection/my-document`                                                                                                                                                                                        |\n| `page.categories` | The list of categories to which this post belongs. Categories are derived from the directory structure above the `_posts` directory. For example, a post at `/work/code/_posts/2008-12-24-closures.md` would have this field set to `['work', 'code']`. These can also be specified in the [front matter](../front-matter/index). |\n| `page.collection` | The label of the collection to which this document belongs. e.g. `posts` for a post, or `puppies` for a document at path `_puppies/rover.md`. If not part of a collection, an empty string is returned.                                                                                                                           |\n| `page.tags`       | The list of tags to which this post belongs. These can be specified in the [front matter](../front-matter/index).                                                                                                                                                                                                                 |\n| `page.dir`        | The path between the source directory and the file of the post or page, e.g. `/pages/`. This can be overridden by `permalink` in the [front matter](../front-matter/index).                                                                                                                                                       |\n| `page.name`       | The filename of the post or page, e.g. `about.md`                                                                                                                                                                                                                                                                                 |\n| `page.path`       | The path to the raw post or page. Example usage: Linking back to the page or post’s source on GitHub. This can be overridden in the [front matter](../front-matter/index).                                                                                                                                                        |\n| `page.next`       | The next post relative to the position of the current post in `site.posts`. Returns `nil` for the last entry.                                                                                                                                                                                                                     |\n| `page.previous`   | The previous post relative to the position of the current post in `site.posts`. Returns `nil` for the first entry.                                                                                                                                                                                                                |\n\n> ##### ProTip™: Use Custom Front Matter\n>\n> Any custom front matter that you specify will be available under `page`. For example, if you specify `custom_css: true` in a page’s front matter, that value will be available as `page.custom_css`.\n>\n> If you specify front matter in a layout, access that via `layout`. For example, if you specify `class: full_page` in a layout’s front matter, that value will be available as `layout.class` in the layout and its parents.\n\n## Paginator\n\n| Variable                       | Description                                                          |\n|--------------------------------|----------------------------------------------------------------------|\n| `paginator.page`               | The number of the current page                                       |\n| `paginator.per_page`           | Number of posts per page                                             |\n| `paginator.posts`              | Posts available for the current page                                 |\n| `paginator.total_posts`        | Total number of posts                                                |\n| `paginator.total_pages`        | Total number of pages                                                |\n| `paginator.previous_page`      | The number of the previous page, or `nil` if no previous page exists |\n| `paginator.previous_page_path` | The path to the previous page, or `nil` if no previous page exists   |\n| `paginator.next_page`          | The number of the next page, or `nil` if no subsequent page exists   |\n| `paginator.next_page_path`     | The path to the next page, or `nil` if no subsequent page exists     |\n\n> ##### Paginator variable availability\n>\n> These are only available in index files, however they can be located in a subdirectory, such as `/blog/index.html`.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/variables/](https://jekyllrb.com/docs/variables/)"
- name: WEBrick Options
  id: configuration/webrick/index
  summary: 'Jekyll provides by default Content-Type and Cache-Control response headers: one dynamic in order to specify the nature of the data being served, the other static in order to disable caching so that you don’t have to fight with Chrome’s aggressive caching when you are in development mode'
  description: "# WEBrick Options\n\nYou can provide custom headers for your site by adding them to `_config.yml`\n\n``` yaml\n# File: _config.yml\nwebrick:\n  headers:\n    My-Header: My-Value\n    My-Other-Header: My-Other-Value\n```\n\n### Defaults\n\nJekyll provides by default `Content-Type` and `Cache-Control` response headers: one dynamic in order to specify the nature of the data being served, the other static in order to disable caching so that you don’t have to fight with Chrome’s aggressive caching when you are in development mode.\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/configuration/webrick/](https://jekyllrb.com/docs/configuration/webrick/)"
- name: Your first plugin
  id: plugins/your-first-plugin/index
  summary: Plugins allow you to extend Jekyll’s behavior to fit your needs
  description: "# Your first plugin\n\nPlugins allow you to extend Jekyll’s behavior to fit your needs. There are six types of plugins in Jekyll.\n\n## Generators\n\n[Generators](../generators/index) create content on your site. For example:\n\n- [jekyll-feed](https://github.com/jekyll/jekyll-feed) creates an Atom feed of blog posts.\n- [jekyll-archives](https://github.com/jekyll/jekyll-archives) creates archive pages for blog categories and tags.\n- [jekyll-sitemap](https://github.com/jekyll/jekyll-sitemap) creates a sitemap.\n\n## Converters\n\n[Converters](../converters/index) change a markup language into another format. For example:\n\n- [jekyll-textile-converter](https://github.com/jekyll/jekyll-textile-converter) converts textile to HTML.\n- [jekyll-coffeescript](https://github.com/jekyll/jekyll-coffeescript) converts Coffeescript to JavaScript.\n- [jekyll-opal](https://github.com/jekyll/jekyll-opal) converts Ruby to JavaScript.\n\n## Commands\n\n[Commands](../commands/index) extend the `jekyll` executable with subcommands. For example:\n\n- [jekyll-compose](https://github.com/jekyll/jekyll-compose) adds subcommands for creating a post, page or draft.\n\n## Tags\n\n[Tags](../tags/index) create custom Liquid tags. For example:\n\n- [jekyll-youtube](https://github.com/dommmel/jekyll-youtube) embeds a YouTube video.\n- [jekyll-asset-path-plugin](https://github.com/samrayner/jekyll-asset-path-plugin) outputs a relative URL for assets.\n- [jekyll-swfobject](https://github.com/sectore/jekyll-swfobject) embeds a SWF object.\n\n## Filters\n\n[Filters](../filters/index) create custom Liquid filters. For example:\n\n- [jekyll-time-ago](https://github.com/markets/jekyll-timeago) - The distance between two dates in words.\n- [jekyll-toc](https://github.com/toshimaru/jekyll-toc) - Generates a table of content.\n- [jekyll-email-protect](https://github.com/vwochnik/jekyll-email-protect) - Obfuscates emails to protect them from spam bots.\n\n## Hooks\n\n[Hooks](../hooks/index) give fine-grained control to extend the build process. For example:\n\n- [jemoji](https://github.com/jekyll/jemoji) Display emojis\n- [jekyll-mentions](https://github.com/jekyll/jekyll-mentions) turns mentions [@jekyll](https://github.com/jekyll) into links\n- [jekyll-spaceship](https://github.com/jeffreytse/jekyll-spaceship) - advanced example. Provides powerful supports for table, mathjax, plantuml, video, etc.\n\n## Flags\n\nThere are two flags to be aware of when writing a plugin:\n\n| Flag       | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `safe`     | A boolean flag that informs Jekyll whether this plugin may be safely executed in an environment where arbitrary code execution is not allowed. This is used by GitHub Pages to determine which core plugins may be used, and which are unsafe to run. If your plugin does not allow for arbitrary code execution, set this to `true`. GitHub Pages still won’t load your plugin, but if you submit it for inclusion in core, it’s best for this to be correct! |\n| `priority` | This flag determines what order the plugin is loaded in. Valid values are: `:lowest`, `:low`, `:normal`, `:high`, and `:highest`. Highest priority matches are applied first, lowest priority are applied last.                                                                                                                                                                                                                                                |\n\nTo use one of the example plugins above as an illustration, here is how you’d specify these two flags:\n\n``` ruby\nmodule Jekyll\n  class UpcaseConverter < Converter\n    safe true\n    priority :low\n    ...\n  end\nend\n```\n\n## Best Practices\n\nThe guides help you with the specifics of creating plugins. We also have some recommended best practices to help structure your plugin.\n\nWe recommend using a [gem](../../ruby-101/index#gems) for your plugin. This will help you manage dependencies, keep separation from your site source code and allow you to share functionality across multiple projects. For tips on creating a gem take a look at the [Ruby gems guide](https://guides.rubygems.org/make-your-own-gem/) or look through the source code of an existing plugin such as [jekyll-feed](https://github.com/jekyll/jekyll-feed).\n\n© 2020 Jekyll Core Team and contributors  \nLicensed under the MIT license.  \n[https://jekyllrb.com/docs/plugins/your-first-plugin/](https://jekyllrb.com/docs/plugins/your-first-plugin/)"
