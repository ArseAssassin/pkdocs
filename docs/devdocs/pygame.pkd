---
name: Pygame
slug: pygame
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © Pygame Developers.
  Licensed under the GNU LGPL License version 2.1.
  https://www.pygame.org/docs/py-modindex.html
homepage: https://www.pygame.org/

---
- name: _sdl2.controller
  id: ref/sdl2_controller
  summary: pygame._sdl2.controller Pygame module to work with controllers
  description: "pygame.\\_sdl2.controller  \nPygame module to work with controllers.\n\nThis module offers control over common controller types like the dualshock 4 or the xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons, a dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.\n\nPygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but they always refer to the same buttons. For example `CONTROLLER_BUTTON_X` is always the leftmost button of the 4 buttons on the right.\n\nControllers can generate the following events:\n\n``` python\nCONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,\nCONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED\n```\n\nAdditionally if pygame is built with SDL 2.0.14 or higher the following events can also be generated (to get the version of sdl pygame is built with use [`pygame.version.SDL()`](pygame#pygame.version.SDL)):\n\n``` python\nCONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP\n```\n\nThese events can be enabled/disabled by [`pygame._sdl2.controller.set_eventstate()`](#pygame._sdl2.controller.set_eventstate) Note that controllers can generate joystick events as well. This function only toggles events related to controllers.\n\nNote\n\nSee the [`pygame.joystick`](joystick#module-pygame.joystick) for a more versatile but more advanced api.\n\nNew in pygame 2: This module requires SDL2.\n\npygame.\\_sdl2.controller.init()  \ninitialize the controller module\n\ninit() -\\> None\n\nInitialize the controller module.\n\npygame.\\_sdl2.controller.quit()  \nUninitialize the controller module.\n\nquit() -\\> None\n\nUninitialize the controller module.\n\npygame.\\_sdl2.controller.get_init()  \nReturns True if the controller module is initialized.\n\nget_init() -\\> bool\n\nTest if `pygame._sdl2.controller.init()` was called.\n\npygame.\\_sdl2.controller.set_eventstate()  \nSets the current state of events related to controllers\n\nset_eventstate(state) -\\> None\n\nEnable or disable events connected to controllers.\n\nNote\n\nControllers can still generate joystick events, which will not be toggled by this function.\n\nChanged in pygame 2.0.2:: Changed return type from int to None\n\npygame.\\_sdl2.controller.get_eventstate()  \nGets the current state of events related to controllers\n\nget_eventstate() -\\> bool\n\nReturns the current state of events related to controllers, True meaning events will be posted.\n\nNew in pygame 2.0.2.\n\npygame.\\_sdl2.controller.get_count()  \nGet the number of joysticks connected\n\nget_count() -\\> int\n\nGet the number of joysticks connected.\n\npygame.\\_sdl2.controller.is_controller()  \nCheck if the given joystick is supported by the game controller interface\n\nis_controller(index) -\\> bool\n\nReturns True if the index given can be used to create a controller object.\n\npygame.\\_sdl2.controller.name_forindex()  \nGet the name of the controller\n\nname_forindex(index) -\\> name or None\n\nReturns the name of controller, or None if there's no name or the index is invalid.\n\npygame.\\_sdl2.controller.Controller  \n> Create a new Controller object.\n>\n> Controller(index) -\\> Controller\n>\n> Create a new Controller object. Index should be integer between 0 and `pygame._sdl2.controller.get_count()`. Controllers also can be created from a `pygame.joystick.Joystick` using `pygame._sdl2.controller.from_joystick`. Controllers are initialized on creation.\n\nquit()  \nuninitialize the Controller\n\nquit() -\\> None\n\nClose a Controller object. After this the pygame event queue will no longer receive events from the device.\n\nIt is safe to call this more than once.\n\nget_init()  \ncheck if the Controller is initialized\n\nget_init() -\\> bool\n\nReturns True if the Controller object is currently initialised.\n\nstatic from_joystick()  \nCreate a Controller from a pygame.joystick.Joystick object\n\nfrom_joystick(joystick) -\\> Controller\n\nCreate a Controller object from a `pygame.joystick.Joystick` object\n\nattached()  \nCheck if the Controller has been opened and is currently connected.\n\nattached() -\\> bool\n\nReturns True if the Controller object is opened and connected.\n\nas_joystick()  \nReturns a pygame.joystick.Joystick() object\n\nas_joystick() -\\> Joystick object\n\nReturns a pygame.joystick.Joystick() object created from this controller's index\n\nget_axis()  \nGet the current state of a joystick axis\n\nget_axis(axis) -\\> int\n\nGet the current state of a trigger or joystick axis. The axis argument must be one of the following constants:\n\n``` python\nCONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,\nCONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,\nCONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT\n```\n\nJoysticks can return a value between -32768 and 32767. Triggers however can only return a value between 0 and 32768.\n\nget_button()  \nGet the current state of a button\n\nget_button(button) -\\> bool\n\nGet the current state of a button, True meaning it is pressed down. The button argument must be one of the following constants:\n\n``` python\nCONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,\nCONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y\nCONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,\nCONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,\nCONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,\nCONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,\nCONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,\nCONTROLLER_BUTTON_START\n```\n\nget_mapping()  \nGet the mapping assigned to the controller\n\nget_mapping() -\\> mapping\n\nReturns a dict containing the mapping of the Controller. For more information see [`Controller.set_mapping()`](#pygame._sdl2.controller.Controller.set_mapping \"pygame._sdl2.controller.Controller.set_mapping\")\n\nChanged in pygame 2.0.2:: Return type changed from `str` to `dict`\n\nset_mapping()  \nAssign a mapping to the controller\n\nset_mapping(mapping) -\\> int\n\nRebind buttons, axes, triggers and dpads. The mapping should be a dict containing all buttons, hats and axes. The easiest way to get this is to use the dict returned by [`Controller.get_mapping()`](#pygame._sdl2.controller.Controller.get_mapping \"pygame._sdl2.controller.Controller.get_mapping\"). To edit this mapping assign a value to the original button. The value of the dictionary must be a button, hat or axis represented in the following way:\n\n- For a button use: bX where X is the index of the button.\n\n- For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).\n\n- For an axis use: aX where x is the index of the axis.\n\nAn example of mapping:\n\n``` python\nmapping = controller.get_mapping() # Get current mapping\nmapping[\"a\"] = \"b3\" # Remap button a to y\nmapping[\"y\"] = \"b0\" # Remap button y to a\ncontroller.set_mapping(mapping) # Set the mapping\n```\n\nThe function will return 1 if a new mapping is added or 0 if an existing one is updated.\n\nChanged in pygame 2.0.2:: Renamed from `add_mapping` to `set_mapping`\n\nChanged in pygame 2.0.2:: Argument type changed from `str` to `dict`\n\nrumble()  \nStart a rumbling effect\n\nrumble(low_frequency, high_frequency, duration) -\\> bool\n\nStart a rumble effect on the controller, with the specified strength ranging from 0 to 1. Duration is length of the effect, in ms. Setting the duration to 0 will play the effect until another one overwrites it or [`Controller.stop_rumble()`](#pygame._sdl2.controller.Controller.stop_rumble \"pygame._sdl2.controller.Controller.stop_rumble\") is called. If an effect is already playing, then it will be overwritten.\n\nReturns True if the rumble was played successfully or False if the controller does not support it or [`pygame.version.SDL()`](pygame#pygame.version.SDL) is below 2.0.9.\n\nNew in pygame 2.0.2.\n\nstop_rumble()  \nStop any rumble effect playing\n\nstop_rumble() -\\> None\n\nStops any rumble effect playing on the controller. See [`Controller.rumble()`](#pygame._sdl2.controller.Controller.rumble \"pygame._sdl2.controller.Controller.rumble\") for more information.\n\nNew in pygame 2.0.2.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sdl2_controller.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sdl2_controller.html](https://www.pygame.org/docs/ref/sdl2_controller.html)"
- name: _sdl2.controller.Controller
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller
  summary: Create a new Controller object
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.Controller

    > Create a new Controller object.
    >
    > Controller(index) -\> Controller
    >
    > Create a new Controller object. Index should be integer between 0 and `pygame._sdl2.controller.get_count()`. Controllers also can be created from a `pygame.joystick.Joystick` using `pygame._sdl2.controller.from_joystick`. Controllers are initialized on creation.
- name: _sdl2.controller.Controller.as_joystick
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.as_joystick
  summary: null
  belongs_to: _sdl2.controller
  description: |-
    as_joystick()

    Returns a pygame.joystick.Joystick() object

    as_joystick() -\> Joystick object

    Returns a pygame.joystick.Joystick() object created from this controller's index
- name: _sdl2.controller.Controller.attached
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.attached
  summary: Check if the Controller has been opened and is currently connected
  belongs_to: _sdl2.controller
  description: |-
    attached()

    Check if the Controller has been opened and is currently connected.

    attached() -\> bool

    Returns True if the Controller object is opened and connected.
- name: _sdl2.controller.Controller.from_joystick
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.from_joystick
  summary: null
  belongs_to: _sdl2.controller
  description: |-
    static from_joystick()

    Create a Controller from a pygame.joystick.Joystick object

    from_joystick(joystick) -\> Controller

    Create a Controller object from a `pygame.joystick.Joystick` object
- name: _sdl2.controller.Controller.get_axis
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.get_axis
  summary: Get the current state of a trigger or joystick axis
  belongs_to: _sdl2.controller
  description: |-
    get_axis()

    Get the current state of a joystick axis

    get_axis(axis) -\> int

    Get the current state of a trigger or joystick axis. The axis argument must be one of the following constants:

    ``` python
    CONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,
    CONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,
    CONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT
    ```

    Joysticks can return a value between -32768 and 32767. Triggers however can only return a value between 0 and 32768.
- name: _sdl2.controller.Controller.get_button
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.get_button
  summary: Get the current state of a button, True meaning it is pressed down
  belongs_to: _sdl2.controller
  description: |-
    get_button()

    Get the current state of a button

    get_button(button) -\> bool

    Get the current state of a button, True meaning it is pressed down. The button argument must be one of the following constants:

    ``` python
    CONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,
    CONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y
    CONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,
    CONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,
    CONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,
    CONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,
    CONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,
    CONTROLLER_BUTTON_START
    ```
- name: _sdl2.controller.Controller.get_init
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.get_init
  summary: Returns True if the Controller object is currently initialised
  belongs_to: _sdl2.controller
  description: |-
    get_init()

    check if the Controller is initialized

    get_init() -\> bool

    Returns True if the Controller object is currently initialised.
- name: _sdl2.controller.Controller.get_mapping
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.get_mapping
  summary: Returns a dict containing the mapping of the Controller
  belongs_to: _sdl2.controller
  description: |-
    get_mapping()

    Get the mapping assigned to the controller

    get_mapping() -\> mapping

    Returns a dict containing the mapping of the Controller. For more information see [`Controller.set_mapping()`](#pygame._sdl2.controller.Controller.set_mapping "pygame._sdl2.controller.Controller.set_mapping")

    Changed in pygame 2.0.2:: Return type changed from `str` to `dict`
- name: _sdl2.controller.Controller.quit
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.quit
  summary: Close a Controller object
  belongs_to: _sdl2.controller
  description: |-
    quit()

    uninitialize the Controller

    quit() -\> None

    Close a Controller object. After this the pygame event queue will no longer receive events from the device.

    It is safe to call this more than once.
- name: _sdl2.controller.Controller.rumble
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.rumble
  summary: Start a rumble effect on the controller, with the specified strength ranging from 0 to 1
  belongs_to: _sdl2.controller
  description: |-
    rumble()

    Start a rumbling effect

    rumble(low_frequency, high_frequency, duration) -\> bool

    Start a rumble effect on the controller, with the specified strength ranging from 0 to 1. Duration is length of the effect, in ms. Setting the duration to 0 will play the effect until another one overwrites it or [`Controller.stop_rumble()`](#pygame._sdl2.controller.Controller.stop_rumble "pygame._sdl2.controller.Controller.stop_rumble") is called. If an effect is already playing, then it will be overwritten.

    Returns True if the rumble was played successfully or False if the controller does not support it or [`pygame.version.SDL()`](pygame#pygame.version.SDL) is below 2.0.9.

    New in pygame 2.0.2.
- name: _sdl2.controller.Controller.set_mapping
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.set_mapping
  summary: Rebind buttons, axes, triggers and dpads
  belongs_to: _sdl2.controller
  description: |-
    set_mapping()

    Assign a mapping to the controller

    set_mapping(mapping) -\> int

    Rebind buttons, axes, triggers and dpads. The mapping should be a dict containing all buttons, hats and axes. The easiest way to get this is to use the dict returned by [`Controller.get_mapping()`](#pygame._sdl2.controller.Controller.get_mapping "pygame._sdl2.controller.Controller.get_mapping"). To edit this mapping assign a value to the original button. The value of the dictionary must be a button, hat or axis represented in the following way:

    - For a button use: bX where X is the index of the button.

    - For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).

    - For an axis use: aX where x is the index of the axis.

    An example of mapping:

    ``` python
    mapping = controller.get_mapping() # Get current mapping
    mapping["a"] = "b3" # Remap button a to y
    mapping["y"] = "b0" # Remap button y to a
    controller.set_mapping(mapping) # Set the mapping
    ```

    The function will return 1 if a new mapping is added or 0 if an existing one is updated.

    Changed in pygame 2.0.2:: Renamed from `add_mapping` to `set_mapping`

    Changed in pygame 2.0.2:: Argument type changed from `str` to `dict`
- name: _sdl2.controller.Controller.stop_rumble
  id: ref/sdl2_controller#pygame._sdl2.controller.Controller.stop_rumble
  summary: Stops any rumble effect playing on the controller
  belongs_to: _sdl2.controller
  description: "stop_rumble()\n\nStop any rumble effect playing\n\nstop_rumble() -\\> None\n\nStops any rumble effect playing on the controller. See [`Controller.rumble()`](#pygame._sdl2.controller.Controller.rumble \"pygame._sdl2.controller.Controller.rumble\") for more information.\n\nNew in pygame 2.0.2.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sdl2_controller.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sdl2_controller.html](https://www.pygame.org/docs/ref/sdl2_controller.html)"
- name: _sdl2.controller.get_count
  id: ref/sdl2_controller#pygame._sdl2.controller.get_count
  summary: Get the number of joysticks connected
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.get_count()

    Get the number of joysticks connected

    get_count() -\> int

    Get the number of joysticks connected.
- name: _sdl2.controller.get_eventstate
  id: ref/sdl2_controller#pygame._sdl2.controller.get_eventstate
  summary: Returns the current state of events related to controllers, True meaning events will be posted
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.get_eventstate()

    Gets the current state of events related to controllers

    get_eventstate() -\> bool

    Returns the current state of events related to controllers, True meaning events will be posted.

    New in pygame 2.0.2.
- name: _sdl2.controller.get_init
  id: ref/sdl2_controller#pygame._sdl2.controller.get_init
  summary: Returns True if the controller module is initialized
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.get_init()

    Returns True if the controller module is initialized.

    get_init() -\> bool

    Test if `pygame._sdl2.controller.init()` was called.
- name: _sdl2.controller.init
  id: ref/sdl2_controller#pygame._sdl2.controller.init
  summary: Initialize the controller module
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.init()

    initialize the controller module

    init() -\> None

    Initialize the controller module.
- name: _sdl2.controller.is_controller
  id: ref/sdl2_controller#pygame._sdl2.controller.is_controller
  summary: Returns True if the index given can be used to create a controller object
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.is_controller()

    Check if the given joystick is supported by the game controller interface

    is_controller(index) -\> bool

    Returns True if the index given can be used to create a controller object.
- name: _sdl2.controller.name_forindex
  id: ref/sdl2_controller#pygame._sdl2.controller.name_forindex
  summary: Returns the name of controller, or None if there's no name or the index is invalid
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.name_forindex()

    Get the name of the controller

    name_forindex(index) -\> name or None

    Returns the name of controller, or None if there's no name or the index is invalid.
- name: _sdl2.controller.quit
  id: ref/sdl2_controller#pygame._sdl2.controller.quit
  summary: Uninitialize the controller module
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.quit()

    Uninitialize the controller module.

    quit() -\> None

    Uninitialize the controller module.
- name: _sdl2.controller.set_eventstate
  id: ref/sdl2_controller#pygame._sdl2.controller.set_eventstate
  summary: Enable or disable events connected to controllers
  belongs_to: _sdl2.controller
  description: |-
    pygame.\_sdl2.controller.set_eventstate()

    Sets the current state of events related to controllers

    set_eventstate(state) -\> None

    Enable or disable events connected to controllers.

    Note

    Controllers can still generate joystick events, which will not be toggled by this function.

    Changed in pygame 2.0.2:: Changed return type from int to None
- name: _sdl2.touch
  id: ref/touch
  summary: 'New in pygame 2: This module requires SDL2'
  description: "pygame.\\_sdl2.touch  \npygame module to work with touch input\n\nNew in pygame 2: This module requires SDL2.\n\npygame.\\_sdl2.touch.get_num_devices()  \nget the number of touch devices\n\nget_num_devices() -\\> int\n\nReturn the number of available touch devices.\n\npygame.\\_sdl2.touch.get_device()  \nget the a touch device id for a given index\n\nget_device(index) -\\> touchid\n\nParameters  \n**index** (*int*) -- This number is at least 0 and less than the [`number`` ``of`` ``devices`](#pygame._sdl2.touch.get_num_devices \"pygame._sdl2.touch.get_num_devices\").\n\nReturn an integer id associated with the given `index`.\n\npygame.\\_sdl2.touch.get_num_fingers()  \nthe number of active fingers for a given touch device\n\nget_num_fingers(touchid) -\\> int\n\nReturn the number of fingers active for the touch device whose id is touchid.\n\npygame.\\_sdl2.touch.get_finger()  \nget information about an active finger\n\nget_finger(touchid, index) -\\> int\n\nParameters  \n- **touchid** (*int*) -- The touch device id.\n\n- **index** (*int*) -- The index of the finger to return information about, between 0 and the [`number`` ``of`` ``active`` ``fingers`](#pygame._sdl2.touch.get_num_fingers \"pygame._sdl2.touch.get_num_fingers\").\n\nReturn a dict for the finger `index` active on `touchid`. The dict contains these keys:\n\n``` python\nid         the id of the finger (an integer).\nx          the normalized x position of the finger, between 0 and 1.\ny          the normalized y position of the finger, between 0 and 1.\npressure   the amount of pressure applied by the finger, between 0 and 1.\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/touch.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/touch.html](https://www.pygame.org/docs/ref/touch.html)"
- name: _sdl2.touch.get_device
  id: ref/touch#pygame._sdl2.touch.get_device
  summary: index (int) -- This number is at least 0 and less than the number``of``devices
  belongs_to: _sdl2.touch
  description: |-
    pygame.\_sdl2.touch.get_device()

    get the a touch device id for a given index

    get_device(index) -\> touchid

    Parameters

    **index** (*int*) -- This number is at least 0 and less than the [`number``of``devices`](#pygame._sdl2.touch.get_num_devices "pygame._sdl2.touch.get_num_devices").

    Return an integer id associated with the given `index`.
- name: _sdl2.touch.get_finger
  id: ref/touch#pygame._sdl2.touch.get_finger
  summary: touchid (int) -- The touch device id
  belongs_to: _sdl2.touch
  description: "pygame.\\_sdl2.touch.get_finger()\n\nget information about an active finger\n\nget_finger(touchid, index) -\\> int\n\nParameters\n\n- **touchid** (*int*) -- The touch device id.\n\n- **index** (*int*) -- The index of the finger to return information about, between 0 and the [`number``of``active``fingers`](#pygame._sdl2.touch.get_num_fingers \"pygame._sdl2.touch.get_num_fingers\").\n\nReturn a dict for the finger `index` active on `touchid`. The dict contains these keys:\n\n``` python\nid         the id of the finger (an integer).\nx          the normalized x position of the finger, between 0 and 1.\ny          the normalized y position of the finger, between 0 and 1.\npressure   the amount of pressure applied by the finger, between 0 and 1.\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/touch.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/touch.html](https://www.pygame.org/docs/ref/touch.html)"
- name: _sdl2.touch.get_num_devices
  id: ref/touch#pygame._sdl2.touch.get_num_devices
  summary: Return the number of available touch devices
  belongs_to: _sdl2.touch
  description: |-
    pygame.\_sdl2.touch.get_num_devices()

    get the number of touch devices

    get_num_devices() -\> int

    Return the number of available touch devices.
- name: _sdl2.touch.get_num_fingers
  id: ref/touch#pygame._sdl2.touch.get_num_fingers
  summary: Return the number of fingers active for the touch device whose id is touchid
  belongs_to: _sdl2.touch
  description: |-
    pygame.\_sdl2.touch.get_num_fingers()

    the number of active fingers for a given touch device

    get_num_fingers(touchid) -\> int

    Return the number of fingers active for the touch device whose id is touchid.
- name: _sdl2.video.Image
  id: ref/sdl2_video#pygame._sdl2.video.Image
  summary: Easy way to use a portion of a Texture without worrying about srcrect all the time
  belongs_to: module-_sdl2.video
  description: |-
    pygame.\_sdl2.video.Image

    Easy way to use a portion of a Texture without worrying about srcrect all the time.

    Image(textureOrImage, srcrect=None) -\> Image
- name: _sdl2.video.Image.alpha
  id: ref/sdl2_video#pygame._sdl2.video.Image.alpha
  summary: Gets and sets the Image alpha modifier
  belongs_to: module-_sdl2.video
  description: |-
    alpha

    Gets and sets the Image alpha modifier.

    alpha -\> float
- name: _sdl2.video.Image.angle
  id: ref/sdl2_video#pygame._sdl2.video.Image.angle
  summary: Gets and sets the angle the Image draws itself with
  belongs_to: module-_sdl2.video
  description: |-
    angle

    Gets and sets the angle the Image draws itself with.

    angle -\> float
- name: _sdl2.video.Image.blend_mode
  id: ref/sdl2_video#pygame._sdl2.video.Image.blend_mode
  summary: Gets and sets the blend mode for the Image
  belongs_to: module-_sdl2.video
  description: |-
    blend_mode

    Gets and sets the blend mode for the Image.

    blend_mode -\> int
- name: _sdl2.video.Image.color
  id: ref/sdl2_video#pygame._sdl2.video.Image.color
  summary: Gets and sets the Image color modifier
  belongs_to: module-_sdl2.video
  description: |-
    color

    Gets and sets the Image color modifier.

    color -\> Color
- name: _sdl2.video.Image.draw
  id: ref/sdl2_video#pygame._sdl2.video.Image.draw
  summary: Copy a portion of the Image to the rendering target
  belongs_to: module-_sdl2.video
  description: |-
    draw()

    Copy a portion of the Image to the rendering target.

    draw(srcrect=None, dstrect=None) -\> None
- name: _sdl2.video.Image.flip_x
  id: ref/sdl2_video#pygame._sdl2.video.Image.flip_x
  summary: Gets and sets whether the Image is flipped on the x axis
  belongs_to: module-_sdl2.video
  description: |-
    flip_x

    Gets and sets whether the Image is flipped on the x axis.

    flip_x -\> bool
- name: _sdl2.video.Image.flip_y
  id: ref/sdl2_video#pygame._sdl2.video.Image.flip_y
  summary: Gets and sets whether the Image is flipped on the y axis
  belongs_to: module-_sdl2.video
  description: |-
    flip_y

    Gets and sets whether the Image is flipped on the y axis.

    flip_y -\> bool
- name: _sdl2.video.Image.get_rect
  id: ref/sdl2_video#pygame._sdl2.video.Image.get_rect
  summary: Get the rectangular area of the Image
  belongs_to: module-_sdl2.video
  description: |-
    get_rect()

    Get the rectangular area of the Image.

    get_rect() -\> Rect
- name: _sdl2.video.Image.origin
  id: ref/sdl2_video#pygame._sdl2.video.Image.origin
  summary: Gets and sets the origin
  belongs_to: module-_sdl2.video
  description: |-
    origin

    Gets and sets the origin. Origin=None means the Image will be rotated around its center.

    origin -\> (float, float) or None.
- name: _sdl2.video.Image.srcrect
  id: ref/sdl2_video#pygame._sdl2.video.Image.srcrect
  summary: Gets and sets the Rect the Image is based on
  belongs_to: module-_sdl2.video
  description: |-
    srcrect

    Gets and sets the Rect the Image is based on.

    srcrect -\> Rect
- name: _sdl2.video.Image.texture
  id: ref/sdl2_video#pygame._sdl2.video.Image.texture
  summary: Gets and sets the Texture the Image is based on
  belongs_to: module-_sdl2.video
  description: |-
    texture

    Gets and sets the Texture the Image is based on.

    texture -\> Texture
- name: _sdl2.video.Renderer
  id: ref/sdl2_video#pygame._sdl2.video.Renderer
  summary: Create a 2D rendering context for a window
  belongs_to: module-_sdl2.video
  description: |-
    pygame.\_sdl2.video.Renderer

    Create a 2D rendering context for a window.

    Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -\> Renderer
- name: _sdl2.video.Renderer.blit
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.blit
  summary: For compatibility purposes
  belongs_to: module-_sdl2.video
  description: |-
    blit()

    For compatibility purposes. Textures created by different Renderers cannot be shared!

    blit(source, dest, area=None, special_flags=0)-\> Rect
- name: _sdl2.video.Renderer.clear
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.clear
  summary: Clear the current rendering target with the drawing color
  belongs_to: module-_sdl2.video
  description: |-
    clear()

    Clear the current rendering target with the drawing color.

    clear() -\> None
- name: _sdl2.video.Renderer.draw_blend_mode
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.draw_blend_mode
  summary: Gets and sets the blend mode used by the drawing functions
  belongs_to: module-_sdl2.video
  description: |-
    draw_blend_mode

    Gets and sets the blend mode used by the drawing functions.

    draw_blend_mode -\> int
- name: _sdl2.video.Renderer.draw_color
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.draw_color
  summary: Gets and sets the color used by the drawing functions
  belongs_to: module-_sdl2.video
  description: |-
    draw_color

    Gets and sets the color used by the drawing functions.

    draw_color -\> Color
- name: _sdl2.video.Renderer.draw_line
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.draw_line
  summary: Draws a line
  belongs_to: module-_sdl2.video
  description: |-
    draw_line()

    Draws a line.

    draw_line(p1, p2) -\> None
- name: _sdl2.video.Renderer.draw_point
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.draw_point
  summary: Draws a point
  belongs_to: module-_sdl2.video
  description: |-
    draw_point()

    Draws a point.

    draw_point(point) -\> None
- name: _sdl2.video.Renderer.draw_rect
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.draw_rect
  summary: Draws a rectangle
  belongs_to: module-_sdl2.video
  description: |-
    draw_rect()

    Draws a rectangle.

    draw_rect(rect)-\> None
- name: _sdl2.video.Renderer.fill_rect
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.fill_rect
  summary: Fills a rectangle
  belongs_to: module-_sdl2.video
  description: |-
    fill_rect()

    Fills a rectangle.

    fill_rect(rect)-\> None
- name: _sdl2.video.Renderer.from_window
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.from_window
  summary: Easy way to create a Renderer
  belongs_to: module-_sdl2.video
  description: |-
    classmethod from_window()

    Easy way to create a Renderer.

    from_window(window) -\> Renderer
- name: _sdl2.video.Renderer.get_viewport
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.get_viewport
  summary: Returns the drawing area on the target
  belongs_to: module-_sdl2.video
  description: |-
    get_viewport()

    Returns the drawing area on the target.

    get_viewport() -\> Rect
- name: _sdl2.video.Renderer.logical_size
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.logical_size
  summary: Gets and sets the logical size
  belongs_to: module-_sdl2.video
  description: |-
    logical_size

    Gets and sets the logical size.

    logical_size -\> (int width, int height)
- name: _sdl2.video.Renderer.present
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.present
  summary: Updates the screen with any new rendering since previous call
  belongs_to: module-_sdl2.video
  description: |-
    present()

    Updates the screen with any new rendering since previous call.

    present() -\> None
- name: _sdl2.video.Renderer.scale
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.scale
  summary: Gets and sets the scale
  belongs_to: module-_sdl2.video
  description: |-
    scale

    Gets and sets the scale.

    scale -\> (float x_scale, float y_scale)
- name: _sdl2.video.Renderer.set_viewport
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.set_viewport
  summary: Set the drawing area on the target
  belongs_to: module-_sdl2.video
  description: |-
    set_viewport()

    Set the drawing area on the target. If area is None, the entire target will be used.

    set_viewport(area) -\> None
- name: _sdl2.video.Renderer.target
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.target
  summary: Gets and sets the render target
  belongs_to: module-_sdl2.video
  description: |-
    target

    Gets and sets the render target. None represents the default target (the renderer).

    target -\> Texture or None
- name: _sdl2.video.Renderer.to_surface
  id: ref/sdl2_video#pygame._sdl2.video.Renderer.to_surface
  summary: Read pixels from current render target and create a pygame.Surface
  belongs_to: module-_sdl2.video
  description: "to_surface()\n\nRead pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.\n\nto_surface(surface=None, area=None)-\\> Surface\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sdl2_video.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sdl2_video.html](https://www.pygame.org/docs/ref/sdl2_video.html)"
- name: _sdl2.video.Texture
  id: ref/sdl2_video#pygame._sdl2.video.Texture
  summary: pygame object that representing a Texture
  belongs_to: module-_sdl2.video
  description: |-
    pygame.\_sdl2.video.Texture

    pygame object that representing a Texture.

    Texture(renderer, size, depth=0, static=False, streaming=False, target=False) -\> Texture
- name: _sdl2.video.Texture.alpha
  id: ref/sdl2_video#pygame._sdl2.video.Texture.alpha
  summary: Gets and sets an additional alpha value multiplied into render copy operations
  belongs_to: module-_sdl2.video
  description: |-
    alpha

    Gets and sets an additional alpha value multiplied into render copy operations.

    alpha -\> int
- name: _sdl2.video.Texture.blend_mode
  id: ref/sdl2_video#pygame._sdl2.video.Texture.blend_mode
  summary: Gets and sets the blend mode for the Texture
  belongs_to: module-_sdl2.video
  description: |-
    blend_mode

    Gets and sets the blend mode for the Texture.

    blend_mode -\> int
- name: _sdl2.video.Texture.color
  id: ref/sdl2_video#pygame._sdl2.video.Texture.color
  summary: Gets and sets an additional color value multiplied into render copy operations
  belongs_to: module-_sdl2.video
  description: |-
    color

    Gets and sets an additional color value multiplied into render copy operations.

    color -\> color
- name: _sdl2.video.Texture.draw
  id: ref/sdl2_video#pygame._sdl2.video.Texture.draw
  summary: Copy a portion of the texture to the rendering target
  belongs_to: module-_sdl2.video
  description: |-
    draw()

    Copy a portion of the texture to the rendering target.

    draw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -\> None
- name: _sdl2.video.Texture.from_surface
  id: ref/sdl2_video#pygame._sdl2.video.Texture.from_surface
  summary: Create a texture from an existing surface
  belongs_to: module-_sdl2.video
  description: |-
    static from_surface()

    Create a texture from an existing surface.

    from_surface(renderer, surface) -\> Texture
- name: _sdl2.video.Texture.get_rect
  id: ref/sdl2_video#pygame._sdl2.video.Texture.get_rect
  summary: Get the rectangular area of the texture
  belongs_to: module-_sdl2.video
  description: |-
    get_rect()

    Get the rectangular area of the texture.

    get_rect(\*\*kwargs) -\> Rect
- name: _sdl2.video.Texture.height
  id: ref/sdl2_video#pygame._sdl2.video.Texture.height
  summary: Gets the height of the Texture
  belongs_to: module-_sdl2.video
  description: |-
    height

    Gets the height of the Texture. \*Read-only\*

    height -\> int
- name: _sdl2.video.Texture.renderer
  id: ref/sdl2_video#pygame._sdl2.video.Texture.renderer
  summary: Gets the renderer associated with the Texture
  belongs_to: module-_sdl2.video
  description: |-
    renderer

    Gets the renderer associated with the Texture. \*Read-only\*

    renderer -\> Renderer
- name: _sdl2.video.Texture.update
  id: ref/sdl2_video#pygame._sdl2.video.Texture.update
  summary: Update the texture with a Surface
  belongs_to: module-_sdl2.video
  description: |-
    update()

    Update the texture with a Surface. WARNING: Slow operation, use sparingly.

    update(surface, area=None) -\> None
- name: _sdl2.video.Texture.width
  id: ref/sdl2_video#pygame._sdl2.video.Texture.width
  summary: Gets the width of the Texture
  belongs_to: module-_sdl2.video
  description: |-
    width

    Gets the width of the Texture. \*Read-only\*

    width -\> int
- name: _sdl2.video.Window
  id: ref/sdl2_video#pygame._sdl2.video.Window
  summary: null
  belongs_to: module-_sdl2.video
  description: |-
    pygame.\_sdl2.video.Window

    pygame object that represents a window

    Window(title="pygame", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -\> Window
- name: _sdl2.video.Window.borderless
  id: ref/sdl2_video#pygame._sdl2.video.Window.borderless
  summary: Add or remove the border from the window
  belongs_to: module-_sdl2.video
  description: |-
    borderless

    Add or remove the border from the window.

    borderless -\> bool
- name: _sdl2.video.Window.destroy
  id: ref/sdl2_video#pygame._sdl2.video.Window.destroy
  summary: Destroys the window
  belongs_to: module-_sdl2.video
  description: |-
    destroy()

    Destroys the window.

    destroy() -\> None
- name: _sdl2.video.Window.display_index
  id: ref/sdl2_video#pygame._sdl2.video.Window.display_index
  summary: Get the index of the display that owns the window
  belongs_to: module-_sdl2.video
  description: |-
    display_index

    Get the index of the display that owns the window. \*Read-only\*

    display_index -\> int
- name: _sdl2.video.Window.focus
  id: ref/sdl2_video#pygame._sdl2.video.Window.focus
  summary: Raise the window above other windows and set the input focus
  belongs_to: module-_sdl2.video
  description: |-
    focus()

    Raise the window above other windows and set the input focus. The "input_only" argument is only supported on X11.

    focus(input_only=False) -\> None
- name: _sdl2.video.Window.from_display_module
  id: ref/sdl2_video#pygame._sdl2.video.Window.from_display_module
  summary: Creates window using window created by pygame.display.set_mode()
  belongs_to: module-_sdl2.video
  description: |-
    classmethod from_display_module()

    Creates window using window created by pygame.display.set_mode().

    from_display_module() -\> Window
- name: _sdl2.video.Window.from_window
  id: ref/sdl2_video#pygame._sdl2.video.Window.from_window
  summary: Create Window from another window
  belongs_to: module-_sdl2.video
  description: |-
    classmethod from_window()

    Create Window from another window. Could be from another UI toolkit.

    from_window(other) -\> Window
- name: _sdl2.video.Window.grab
  id: ref/sdl2_video#pygame._sdl2.video.Window.grab
  summary: Gets or sets whether the mouse is confined to the window
  belongs_to: module-_sdl2.video
  description: |-
    grab

    Gets or sets whether the mouse is confined to the window.

    grab -\> bool
- name: _sdl2.video.Window.hide
  id: ref/sdl2_video#pygame._sdl2.video.Window.hide
  summary: Hide the window
  belongs_to: module-_sdl2.video
  description: |-
    hide()

    Hide the window.

    hide() -\> None
- name: _sdl2.video.Window.id
  id: ref/sdl2_video#pygame._sdl2.video.Window.id
  summary: Get the unique window ID
  belongs_to: module-_sdl2.video
  description: |-
    id

    Get the unique window ID. \*Read-only\*

    id -\> int
- name: _sdl2.video.Window.maximize
  id: ref/sdl2_video#pygame._sdl2.video.Window.maximize
  summary: Maximize the window
  belongs_to: module-_sdl2.video
  description: |-
    maximize()

    Maximize the window.

    maximize() -\> None
- name: _sdl2.video.Window.minimize
  id: ref/sdl2_video#pygame._sdl2.video.Window.minimize
  summary: Minimize the window
  belongs_to: module-_sdl2.video
  description: |-
    minimize()

    Minimize the window.

    maximize() -\> None
- name: _sdl2.video.Window.opacity
  id: ref/sdl2_video#pygame._sdl2.video.Window.opacity
  summary: Gets and sets the window opacity
  belongs_to: module-_sdl2.video
  description: |-
    opacity

    Gets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).

    opacity -\> float
- name: _sdl2.video.Window.position
  id: ref/sdl2_video#pygame._sdl2.video.Window.position
  summary: Gets and sets the window position
  belongs_to: module-_sdl2.video
  description: |-
    position

    Gets and sets the window position.

    position -\> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED
- name: _sdl2.video.Window.relative_mouse
  id: ref/sdl2_video#pygame._sdl2.video.Window.relative_mouse
  summary: Gets or sets the window's relative mouse motion state
  belongs_to: module-_sdl2.video
  description: |-
    relative_mouse

    Gets or sets the window's relative mouse motion state.

    relative_mouse -\> bool
- name: _sdl2.video.Window.resizable
  id: ref/sdl2_video#pygame._sdl2.video.Window.resizable
  summary: Gets and sets whether the window is resizable
  belongs_to: module-_sdl2.video
  description: |-
    resizable

    Gets and sets whether the window is resizable.

    resizable -\> bool
- name: _sdl2.video.Window.restore
  id: ref/sdl2_video#pygame._sdl2.video.Window.restore
  summary: Restore the size and position of a minimized or maximized window
  belongs_to: module-_sdl2.video
  description: |-
    restore()

    Restore the size and position of a minimized or maximized window.

    restore() -\> None
- name: _sdl2.video.Window.set_fullscreen
  id: ref/sdl2_video#pygame._sdl2.video.Window.set_fullscreen
  summary: Enter fullscreen
  belongs_to: module-_sdl2.video
  description: |-
    set_fullscreen()

    Enter fullscreen.

    set_fullscreen(desktop=False) -\> None
- name: _sdl2.video.Window.set_icon
  id: ref/sdl2_video#pygame._sdl2.video.Window.set_icon
  summary: Set the icon for the window
  belongs_to: module-_sdl2.video
  description: |-
    set_icon()

    Set the icon for the window.

    set_icon(surface) -\> None
- name: _sdl2.video.Window.set_modal_for
  id: ref/sdl2_video#pygame._sdl2.video.Window.set_modal_for
  summary: Set the window as a modal for a parent window
  belongs_to: module-_sdl2.video
  description: |-
    set_modal_for()

    Set the window as a modal for a parent window. This function is only supported on X11.

    set_modal_for(Window) -\> None
- name: _sdl2.video.Window.set_windowed
  id: ref/sdl2_video#pygame._sdl2.video.Window.set_windowed
  summary: Enable windowed mode (exit fullscreen)
  belongs_to: module-_sdl2.video
  description: |-
    set_windowed()

    Enable windowed mode (exit fullscreen).

    set_windowed() -\> None
- name: _sdl2.video.Window.show
  id: ref/sdl2_video#pygame._sdl2.video.Window.show
  summary: Show the window
  belongs_to: module-_sdl2.video
  description: |-
    show()

    Show the window.

    show() -\> None
- name: _sdl2.video.Window.size
  id: ref/sdl2_video#pygame._sdl2.video.Window.size
  summary: Gets and sets the window size
  belongs_to: module-_sdl2.video
  description: |-
    size

    Gets and sets the window size.

    size -\> (int, int)
- name: _sdl2.video.Window.title
  id: ref/sdl2_video#pygame._sdl2.video.Window.title
  summary: Gets or sets whether the window title
  belongs_to: module-_sdl2.video
  description: |-
    title

    Gets or sets whether the window title.

    title -\> string
- name: BufferProxy
  id: ref/bufferproxy
  summary: BufferProxy is a pygame support type, designed as the return value of the Surface.get_buffer() and Surface.get_view() methods
  description: "pygame.BufferProxy  \npygame object to export a surface buffer through an array protocol\n\nBufferProxy(\\<parent\\>) -\\> BufferProxy\n\n[`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") is a pygame support type, designed as the return value of the [`Surface.get_buffer()`](surface#pygame.Surface.get_buffer \"pygame.Surface.get_buffer\") and [`Surface.get_view()`](surface#pygame.Surface.get_view \"pygame.Surface.get_view\") methods. For all Python versions a [`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") object exports a C struct and Python level array interface on behalf of its parent object's buffer. A new buffer interface is also exported. In pygame, [`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") is key to implementing the [`pygame.surfarray`](surfarray#module-pygame.surfarray) module.\n\n[`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") instances can be created directly from Python code, either for a parent that exports an interface, or from a Python `dict` describing an object's buffer layout. The dict entries are based on the Python level array interface mapping. The following keys are recognized:\n\n> \"shape\"tuple  \n> The length of each array dimension as a tuple of integers. The length of the tuple is the number of dimensions in the array.\n>\n> \"typestr\"string  \n> The array element type as a length 3 string. The first character gives byteorder, '\\<' for little-endian, '\\>' for big-endian, and '\\|' for not applicable. The second character is the element type, 'i' for signed integer, 'u' for unsigned integer, 'f' for floating point, and 'V' for an chunk of bytes. The third character gives the bytesize of the element, from '1' to '9' bytes. So, for example, \"\\<u4\" is an unsigned 4 byte little-endian integer, such as a 32 bit pixel on a PC, while \"\\|V3\" would represent a 24 bit pixel, which has no integer equivalent.\n>\n> \"data\"tuple  \n> The physical buffer start address and a read-only flag as a length 2 tuple. The address is an integer value, while the read-only flag is a bool—`False` for writable, `True` for read-only.\n>\n> \"strides\"tuple(optional)  \n> Array stride information as a tuple of integers. It is required only of non C-contiguous arrays. The tuple length must match that of `\"shape\"`.\n>\n> \"parent\"object(optional)  \n> The exporting object. It can be used to keep the parent object alive while its buffer is visible.\n>\n> \"before\"callable(optional)  \n> Callback invoked when the [`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") instance exports the buffer. The callback is given one argument, the `\"parent\"` object if given, otherwise `None`. The callback is useful for setting a lock on the parent.\n>\n> \"after\"callable(optional)  \n> Callback invoked when an exported buffer is released. The callback is passed on argument, the `\"parent\"` object if given, otherwise None. The callback is useful for releasing a lock on the parent.\n\nThe BufferProxy class supports subclassing, instance variables, and weak references.\n\nNew in pygame 1.8.0.\n\nExtended in pygame 1.9.2.\n\nparent  \nReturn wrapped exporting object.\n\nparent -\\> Surface\n\nparent -\\> \\<parent\\>\n\nThe [`Surface`](surface#pygame.Surface \"pygame.Surface\") which returned the [`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") object or the object passed to a [`BufferProxy`](#pygame.BufferProxy \"pygame.BufferProxy\") call.\n\nlength  \nThe size, in bytes, of the exported buffer.\n\nlength -\\> int\n\nThe number of valid bytes of data exported. For discontinuous data, that is data which is not a single block of memory, the bytes within the gaps are excluded from the count. This property is equivalent to the `Py_buffer` C struct `len` field.\n\nraw  \nA copy of the exported buffer as a single block of bytes.\n\nraw -\\> bytes\n\nThe buffer data as a `str`/`bytes` object. Any gaps in the exported data are removed.\n\nwrite()  \nWrite raw bytes to object buffer.\n\nwrite(buffer, offset=0)\n\nOverwrite bytes in the parent object's data. The data must be C or F contiguous, otherwise a ValueError is raised. Argument buffer is a `str`/`bytes` object. An optional offset gives a start position, in bytes, within the buffer where overwriting begins. If the offset is negative or greater that or equal to the buffer proxy's [`length`](#pygame.BufferProxy.length \"pygame.BufferProxy.length\") value, an `IndexException` is raised. If `len(buffer)`` ``>`` ``proxy.length`` ``+`` ``offset`, a `ValueError` is raised.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/bufferproxy.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/bufferproxy.html](https://www.pygame.org/docs/ref/bufferproxy.html)"
- name: BufferProxy.length
  id: ref/bufferproxy#pygame.BufferProxy.length
  summary: The size, in bytes, of the exported buffer
  belongs_to: BufferProxy
  description: |-
    length

    The size, in bytes, of the exported buffer.

    length -\> int

    The number of valid bytes of data exported. For discontinuous data, that is data which is not a single block of memory, the bytes within the gaps are excluded from the count. This property is equivalent to the `Py_buffer` C struct `len` field.
- name: BufferProxy.parent
  id: ref/bufferproxy#pygame.BufferProxy.parent
  summary: Return wrapped exporting object
  belongs_to: BufferProxy
  description: |-
    parent

    Return wrapped exporting object.

    parent -\> Surface

    parent -\> \<parent\>

    The [`Surface`](surface#pygame.Surface "pygame.Surface") which returned the [`BufferProxy`](#pygame.BufferProxy "pygame.BufferProxy") object or the object passed to a [`BufferProxy`](#pygame.BufferProxy "pygame.BufferProxy") call.
- name: BufferProxy.raw
  id: ref/bufferproxy#pygame.BufferProxy.raw
  summary: A copy of the exported buffer as a single block of bytes
  belongs_to: BufferProxy
  description: |-
    raw

    A copy of the exported buffer as a single block of bytes.

    raw -\> bytes

    The buffer data as a `str`/`bytes` object. Any gaps in the exported data are removed.
- name: BufferProxy.write
  id: ref/bufferproxy#pygame.BufferProxy.write
  summary: Write raw bytes to object buffer
  belongs_to: BufferProxy
  description: "write()\n\nWrite raw bytes to object buffer.\n\nwrite(buffer, offset=0)\n\nOverwrite bytes in the parent object's data. The data must be C or F contiguous, otherwise a ValueError is raised. Argument buffer is a `str`/`bytes` object. An optional offset gives a start position, in bytes, within the buffer where overwriting begins. If the offset is negative or greater that or equal to the buffer proxy's [`length`](#pygame.BufferProxy.length \"pygame.BufferProxy.length\") value, an `IndexException` is raised. If `len(buffer)``>``proxy.length``+``offset`, a `ValueError` is raised.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/bufferproxy.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/bufferproxy.html](https://www.pygame.org/docs/ref/bufferproxy.html)"
- name: camera
  id: ref/camera
  summary: Pygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively, with wider platform support available via an integrated OpenCV backend
  description: "pygame.camera  \npygame module for camera use\n\nPygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively, with wider platform support available via an integrated OpenCV backend.\n\nNew in pygame 2.0.2: Windows native camera support\n\nNew in pygame 2.0.3: New OpenCV backends\n\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code will very likely break with the next pygame release.\n\nThe Bayer to `RGB` function is based on:\n\n``` python\nSonix SN9C101 based webcam basic I/F routines\nCopyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n```\n\nNew in pygame 1.9.0.\n\npygame.camera.init()  \nModule init\n\ninit(backend = None) -\\> None\n\nThis function starts up the camera module, choosing the best webcam backend it can find for your system. This is not guaranteed to succeed, and may even attempt to import third party modules, like OpenCV. If you want to override its backend choice, you can call pass the name of the backend you want into this function. More about backends in [`get_backends()`](#pygame.camera.get_backends \"pygame.camera.get_backends\").\n\nChanged in pygame 2.0.3: Option to explicitly select backend\n\npygame.camera.get_backends()  \nGet the backends supported on this system\n\nget_backends() -\\> \\[str\\]\n\nThis function returns every backend it thinks has a possibility of working on your system, in order of priority.\n\npygame.camera Backends:\n\n``` python\nBackend           OS        Description\n---------------------------------------------------------------------------------\n_camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3\n_camera (V4L2)    Linux     Builtin\nOpenCV            Any       Uses `opencv-python` module, can't enumerate cameras\nOpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration\nVideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate\n                            cameras, may be removed in the future\n```\n\nThere are two main differences among backends.\n\nThe \\_camera backends are built in to pygame itself, and require no third party imports. All the other backends do. For the OpenCV and VideoCapture backends, those modules need to be installed on your system.\n\nThe other big difference is \"camera enumeration.\" Some backends don't have a way to list out camera names, or even the number of cameras on the system. In these cases, [`list_cameras()`](#pygame.camera.list_cameras \"pygame.camera.list_cameras\") will return something like `[0]`. If you know you have multiple cameras on the system, these backend ports will pass through a \"camera index number\" through if you use that as the `device` parameter.\n\nNew in pygame 2.0.3.\n\npygame.camera.colorspace()  \nSurface colorspace conversion\n\ncolorspace(Surface, format, DestSurface = None) -\\> Surface\n\nAllows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or \"YUV\". The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, `transform.scale()` it even smaller, and then convert the colorspace to `YUV` or `HSV` before doing any processing on it.\n\npygame.camera.list_cameras()  \nreturns a list of available cameras\n\nlist_cameras() -\\> \\[cameras\\]\n\nChecks the computer for available cameras and returns a list of strings of camera names, ready to be fed into [`pygame.camera.Camera`](#pygame.camera.Camera).\n\nIf the camera backend doesn't support webcam enumeration, this will return something like `[0]`. See [`get_backends()`](#pygame.camera.get_backends \"pygame.camera.get_backends\") for much more information.\n\npygame.camera.Camera  \nload a camera\n\nCamera(device, (width, height), format) -\\> Camera\n\nLoads a camera. On Linux, the device is typically something like \"/dev/video0\". Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is `RGB`. The following are supported:\n\n> - `RGB` - Red, Green, Blue\n>\n> - `YUV` - Luma, Blue Chrominance, Red Chrominance\n>\n> - `HSV` - Hue, Saturation, Value\n\nstart()  \nopens, initializes, and starts capturing\n\nstart() -\\> None\n\nOpens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.\n\nstop()  \nstops, uninitializes, and closes the camera\n\nstop() -\\> None\n\nStops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again.\n\nget_controls()  \ngets current values of user controls\n\nget_controls() -\\> (hflip = bool, vflip = bool, brightness)\n\nIf the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.\n\nset_controls()  \nchanges camera settings if supported by the camera\n\nset_controls(hflip = bool, vflip = bool, brightness) -\\> (hflip = bool, vflip = bool, brightness)\n\nAllows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls. On Windows, `hflip` and `vflip` are implemented by pygame, not by the Camera, so they should always work, but `brightness` is unsupported.\n\nget_size()  \nreturns the dimensions of the images being recorded\n\nget_size() -\\> (width, height)\n\nReturns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size.\n\nquery_image()  \nchecks if a frame is ready\n\nquery_image() -\\> bool\n\nIf an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like [`get_image()`](#pygame.camera.Camera.get_image \"pygame.camera.Camera.get_image\"). On Windows (MSMF), and the OpenCV backends, [`query_image()`](#pygame.camera.Camera.query_image \"pygame.camera.Camera.query_image\") should be reliable, though. This is useful to separate the framerate of the game from that of the camera without having to use threading.\n\nget_image()  \ncaptures an image as a Surface\n\nget_image(Surface = None) -\\> Surface\n\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is 24 bits on Linux, 32 bits on Windows, or the same as the optionally supplied Surface.\n\nget_raw()  \nreturns an unmodified image as bytes\n\nget_raw() -\\> bytes\n\nGets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries. This returns a bytes object\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/camera.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/camera.html](https://www.pygame.org/docs/ref/camera.html)"
- name: camera.Camera
  id: ref/camera#pygame.camera.Camera
  summary: Loads a camera
  belongs_to: camera
  description: |-
    pygame.camera.Camera

    load a camera

    Camera(device, (width, height), format) -\> Camera

    Loads a camera. On Linux, the device is typically something like "/dev/video0". Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is `RGB`. The following are supported:

    > - `RGB` - Red, Green, Blue
    >
    > - `YUV` - Luma, Blue Chrominance, Red Chrominance
    >
    > - `HSV` - Hue, Saturation, Value
- name: camera.Camera.get_controls
  id: ref/camera#pygame.camera.Camera.get_controls
  summary: If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int
  belongs_to: camera
  description: |-
    get_controls()

    gets current values of user controls

    get_controls() -\> (hflip = bool, vflip = bool, brightness)

    If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.
- name: camera.Camera.get_image
  id: ref/camera#pygame.camera.Camera.get_image
  summary: Pulls an image off of the buffer as an RGB Surface
  belongs_to: camera
  description: |-
    get_image()

    captures an image as a Surface

    get_image(Surface = None) -\> Surface

    Pulls an image off of the buffer as an `RGB` Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is 24 bits on Linux, 32 bits on Windows, or the same as the optionally supplied Surface.
- name: camera.Camera.get_raw
  id: ref/camera#pygame.camera.Camera.get_raw
  summary: Gets an image from a camera as a string in the native pixelformat of the camera
  belongs_to: camera
  description: "get_raw()\n\nreturns an unmodified image as bytes\n\nget_raw() -\\> bytes\n\nGets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries. This returns a bytes object\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/camera.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/camera.html](https://www.pygame.org/docs/ref/camera.html)"
- name: camera.Camera.get_size
  id: ref/camera#pygame.camera.Camera.get_size
  summary: Returns the current dimensions of the images being captured by the camera
  belongs_to: camera
  description: |-
    get_size()

    returns the dimensions of the images being recorded

    get_size() -\> (width, height)

    Returns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size.
- name: camera.Camera.query_image
  id: ref/camera#pygame.camera.Camera.query_image
  summary: If an image is ready to get, it returns true
  belongs_to: camera
  description: |-
    query_image()

    checks if a frame is ready

    query_image() -\> bool

    If an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like [`get_image()`](#pygame.camera.Camera.get_image "pygame.camera.Camera.get_image"). On Windows (MSMF), and the OpenCV backends, [`query_image()`](#pygame.camera.Camera.query_image "pygame.camera.Camera.query_image") should be reliable, though. This is useful to separate the framerate of the game from that of the camera without having to use threading.
- name: camera.Camera.set_controls
  id: ref/camera#pygame.camera.Camera.set_controls
  summary: Allows you to change camera settings if the camera supports it
  belongs_to: camera
  description: |-
    set_controls()

    changes camera settings if supported by the camera

    set_controls(hflip = bool, vflip = bool, brightness) -\> (hflip = bool, vflip = bool, brightness)

    Allows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls. On Windows, `hflip` and `vflip` are implemented by pygame, not by the Camera, so they should always work, but `brightness` is unsupported.
- name: camera.Camera.start
  id: ref/camera#pygame.camera.Camera.start
  summary: Opens the camera device, attempts to initialize it, and begins recording images to a buffer
  belongs_to: camera
  description: |-
    start()

    opens, initializes, and starts capturing

    start() -\> None

    Opens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.
- name: camera.Camera.stop
  id: ref/camera#pygame.camera.Camera.stop
  summary: Stops recording, uninitializes the camera, and closes it
  belongs_to: camera
  description: |-
    stop()

    stops, uninitializes, and closes the camera

    stop() -\> None

    Stops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again.
- name: camera.colorspace
  id: ref/camera#pygame.camera.colorspace
  summary: Allows for conversion from "RGB" to a destination colorspace of "HSV" or "YUV". The source and destination surfaces must be the same size and pixel depth
  belongs_to: camera
  description: |-
    pygame.camera.colorspace()

    Surface colorspace conversion

    colorspace(Surface, format, DestSurface = None) -\> Surface

    Allows for conversion from "RGB" to a destination colorspace of "HSV" or "YUV". The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, `transform.scale()` it even smaller, and then convert the colorspace to `YUV` or `HSV` before doing any processing on it.
- name: camera.get_backends
  id: ref/camera#pygame.camera.get_backends
  summary: This function returns every backend it thinks has a possibility of working on your system, in order of priority
  belongs_to: camera
  description: |-
    pygame.camera.get_backends()

    Get the backends supported on this system

    get_backends() -\> \[str\]

    This function returns every backend it thinks has a possibility of working on your system, in order of priority.

    pygame.camera Backends:

    ``` python
    Backend           OS        Description
    ---------------------------------------------------------------------------------
    _camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3
    _camera (V4L2)    Linux     Builtin
    OpenCV            Any       Uses `opencv-python` module, can't enumerate cameras
    OpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration
    VideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate
                                cameras, may be removed in the future
    ```

    There are two main differences among backends.

    The \_camera backends are built in to pygame itself, and require no third party imports. All the other backends do. For the OpenCV and VideoCapture backends, those modules need to be installed on your system.

    The other big difference is "camera enumeration." Some backends don't have a way to list out camera names, or even the number of cameras on the system. In these cases, [`list_cameras()`](#pygame.camera.list_cameras "pygame.camera.list_cameras") will return something like `[0]`. If you know you have multiple cameras on the system, these backend ports will pass through a "camera index number" through if you use that as the `device` parameter.

    New in pygame 2.0.3.
- name: camera.init
  id: ref/camera#pygame.camera.init
  summary: This function starts up the camera module, choosing the best webcam backend it can find for your system
  belongs_to: camera
  description: |-
    pygame.camera.init()

    Module init

    init(backend = None) -\> None

    This function starts up the camera module, choosing the best webcam backend it can find for your system. This is not guaranteed to succeed, and may even attempt to import third party modules, like OpenCV. If you want to override its backend choice, you can call pass the name of the backend you want into this function. More about backends in [`get_backends()`](#pygame.camera.get_backends "pygame.camera.get_backends").

    Changed in pygame 2.0.3: Option to explicitly select backend
- name: camera.list_cameras
  id: ref/camera#pygame.camera.list_cameras
  summary: Checks the computer for available cameras and returns a list of strings of camera names, ready to be fed into pygame.camera.Camera
  belongs_to: camera
  description: |-
    pygame.camera.list_cameras()

    returns a list of available cameras

    list_cameras() -\> \[cameras\]

    Checks the computer for available cameras and returns a list of strings of camera names, ready to be fed into [`pygame.camera.Camera`](#pygame.camera.Camera).

    If the camera backend doesn't support webcam enumeration, this will return something like `[0]`. See [`get_backends()`](#pygame.camera.get_backends "pygame.camera.get_backends") for much more information.
- name: cdrom
  id: ref/cdrom
  summary: This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1
  description: "pygame.cdrom  \npygame module for audio cdrom control\n\nWarning\n\nThis module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1. This module will not be supported in the future. One alternative for python cdrom functionality is [pycdio](https://pypi.org/project/pycdio/).\n\nThe cdrom module manages the `CD` and `DVD` drives on a computer. It can also control the playback of audio CDs. This module needs to be initialized before it can do anything. Each `CD` object you create represents a cdrom drive and must also be initialized individually before it can do most things.\n\npygame.cdrom.init()  \ninitialize the cdrom module\n\ninit() -\\> None\n\nInitialize the cdrom module. This will scan the system for all `CD` devices. The module must be initialized before any other functions will work. This automatically happens when you call `pygame.init()`.\n\nIt is safe to call this function more than once.\n\npygame.cdrom.quit()  \nuninitialize the cdrom module\n\nquit() -\\> None\n\nUninitialize the cdrom module. After you call this any existing `CD` objects will no longer work.\n\nIt is safe to call this function more than once.\n\npygame.cdrom.get_init()  \ntrue if the cdrom module is initialized\n\nget_init() -\\> bool\n\nTest if the cdrom module is initialized or not. This is different than the `CD.init()` since each drive must also be initialized individually.\n\npygame.cdrom.get_count()  \nnumber of cd drives on the system\n\nget_count() -\\> count\n\nReturn the number of cd drives on the system. When you create `CD` objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system.\n\npygame.cdrom.CD  \nclass to manage a cdrom drive\n\nCD(id) -\\> CD\n\nYou can create a `CD` object for each cdrom on the system. Use `pygame.cdrom.get_count()` to determine how many drives actually exist. The id argument is an integer of the drive, starting at zero.\n\nThe `CD` object is not initialized, you can only call `CD.get_id()` and `CD.get_name()` on an uninitialized drive.\n\nIt is safe to create multiple `CD` objects for the same drive, they will all cooperate normally.\n\ninit()  \ninitialize a cdrom drive for use\n\ninit() -\\> None\n\nInitialize the cdrom drive for use. The drive must be initialized for most `CD` methods to work. Even if the rest of pygame has been initialized.\n\nThere may be a brief pause while the drive is initialized. Avoid `CD.init()` if the program should not stop for a second or two.\n\nquit()  \nuninitialize a cdrom drive for use\n\nquit() -\\> None\n\nUninitialize a drive for use. Call this when your program will not be accessing the drive for awhile.\n\nget_init()  \ntrue if this cd device initialized\n\nget_init() -\\> bool\n\nTest if this `CDROM` device is initialized. This is different than the `pygame.cdrom.init()` since each drive must also be initialized individually.\n\nplay()  \nstart playing audio\n\nplay(track, start=None, end=None) -\\> None\n\nPlayback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.\n\nIf you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.\n\nSee the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to playback.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nstop()  \nstop audio playback\n\nstop() -\\> None\n\nStops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio.\n\npause()  \ntemporarily stop audio playback\n\npause() -\\> None\n\nTemporarily stop audio playback on the `CD`. The playback can be resumed at the same point with the `CD.resume()` method. If the `CD` is not playing this method does nothing.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nresume()  \nunpause audio playback\n\nresume() -\\> None\n\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this method does nothing.\n\neject()  \neject or open the cdrom drive\n\neject() -\\> None\n\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped.\n\nget_id()  \nthe index of the cdrom drive\n\nget_id() -\\> id\n\nReturns the integer id that was used to create the `CD` instance. This method can work on an uninitialized `CD`.\n\nget_name()  \nthe system name of the cdrom drive\n\nget_name() -\\> name\n\nReturn the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized `CD`.\n\nget_busy()  \ntrue if the drive is playing audio\n\nget_busy() -\\> bool\n\nReturns True if the drive busy playing back audio.\n\nget_paused()  \ntrue if the drive is paused\n\nget_paused() -\\> bool\n\nReturns True if the drive is currently paused.\n\nget_current()  \nthe current audio playback position\n\nget_current() -\\> track, seconds\n\nReturns both the current track and time of that track. This method works when the drive is either playing or paused.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nget_empty()  \nFalse if a cdrom is in the drive\n\nget_empty() -\\> bool\n\nReturn False if there is a cdrom currently in the drive. If the drive is empty this will return True.\n\nget_numtracks()  \nthe number of tracks on the cdrom\n\nget_numtracks() -\\> count\n\nReturn the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.\n\nget_track_audio()  \ntrue if the cdrom track has audio data\n\nget_track_audio(track) -\\> bool\n\nDetermine if a track on a cdrom contains audio data. You can also call `CD.num_tracks()` and `CD.get_all()` to determine more information about the cdrom.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nget_all()  \nget all track information\n\nget_all() -\\> \\[(audio, start, end, length), ...\\]\n\nReturn a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.\n\nget_track_start()  \nstart time of a cdrom track\n\nget_track_start(track) -\\> seconds\n\nReturn the absolute time in seconds where at start of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nget_track_length()  \nlength of a cdrom track\n\nget_track_length(track) -\\> seconds\n\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/cdrom.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/cdrom.html](https://www.pygame.org/docs/ref/cdrom.html)"
- name: cdrom.CD
  id: ref/cdrom#pygame.cdrom.CD
  summary: You can create a CD object for each cdrom on the system
  belongs_to: cdrom
  description: |-
    pygame.cdrom.CD

    class to manage a cdrom drive

    CD(id) -\> CD

    You can create a `CD` object for each cdrom on the system. Use `pygame.cdrom.get_count()` to determine how many drives actually exist. The id argument is an integer of the drive, starting at zero.

    The `CD` object is not initialized, you can only call `CD.get_id()` and `CD.get_name()` on an uninitialized drive.

    It is safe to create multiple `CD` objects for the same drive, they will all cooperate normally.
- name: cdrom.CD.eject
  id: ref/cdrom#pygame.cdrom.CD.eject
  summary: This will open the cdrom drive and eject the cdrom
  belongs_to: cdrom
  description: |-
    eject()

    eject or open the cdrom drive

    eject() -\> None

    This will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped.
- name: cdrom.CD.get_all
  id: ref/cdrom#pygame.cdrom.CD.get_all
  summary: Return a list with information for every track on the cdrom
  belongs_to: cdrom
  description: |-
    get_all()

    get all track information

    get_all() -\> \[(audio, start, end, length), ...\]

    Return a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.
- name: cdrom.CD.get_busy
  id: ref/cdrom#pygame.cdrom.CD.get_busy
  summary: Returns True if the drive busy playing back audio
  belongs_to: cdrom
  description: |-
    get_busy()

    true if the drive is playing audio

    get_busy() -\> bool

    Returns True if the drive busy playing back audio.
- name: cdrom.CD.get_current
  id: ref/cdrom#pygame.cdrom.CD.get_current
  summary: Returns both the current track and time of that track
  belongs_to: cdrom
  description: |-
    get_current()

    the current audio playback position

    get_current() -\> track, seconds

    Returns both the current track and time of that track. This method works when the drive is either playing or paused.

    Note, track 0 is the first track on the `CD`. Track numbers start at zero.
- name: cdrom.CD.get_empty
  id: ref/cdrom#pygame.cdrom.CD.get_empty
  summary: Return False if there is a cdrom currently in the drive
  belongs_to: cdrom
  description: |-
    get_empty()

    False if a cdrom is in the drive

    get_empty() -\> bool

    Return False if there is a cdrom currently in the drive. If the drive is empty this will return True.
- name: cdrom.CD.get_id
  id: ref/cdrom#pygame.cdrom.CD.get_id
  summary: Returns the integer id that was used to create the CD instance
  belongs_to: cdrom
  description: |-
    get_id()

    the index of the cdrom drive

    get_id() -\> id

    Returns the integer id that was used to create the `CD` instance. This method can work on an uninitialized `CD`.
- name: cdrom.CD.get_init
  id: ref/cdrom#pygame.cdrom.CD.get_init
  summary: Test if this CDROM device is initialized
  belongs_to: cdrom
  description: |-
    get_init()

    true if this cd device initialized

    get_init() -\> bool

    Test if this `CDROM` device is initialized. This is different than the `pygame.cdrom.init()` since each drive must also be initialized individually.
- name: cdrom.CD.get_name
  id: ref/cdrom#pygame.cdrom.CD.get_name
  summary: Return the string name of the drive
  belongs_to: cdrom
  description: |-
    get_name()

    the system name of the cdrom drive

    get_name() -\> name

    Return the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized `CD`.
- name: cdrom.CD.get_numtracks
  id: ref/cdrom#pygame.cdrom.CD.get_numtracks
  summary: Return the number of tracks on the cdrom in the drive
  belongs_to: cdrom
  description: |-
    get_numtracks()

    the number of tracks on the cdrom

    get_numtracks() -\> count

    Return the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.
- name: cdrom.CD.get_paused
  id: ref/cdrom#pygame.cdrom.CD.get_paused
  summary: Returns True if the drive is currently paused
  belongs_to: cdrom
  description: |-
    get_paused()

    true if the drive is paused

    get_paused() -\> bool

    Returns True if the drive is currently paused.
- name: cdrom.CD.get_track_audio
  id: ref/cdrom#pygame.cdrom.CD.get_track_audio
  summary: Determine if a track on a cdrom contains audio data
  belongs_to: cdrom
  description: |-
    get_track_audio()

    true if the cdrom track has audio data

    get_track_audio(track) -\> bool

    Determine if a track on a cdrom contains audio data. You can also call `CD.num_tracks()` and `CD.get_all()` to determine more information about the cdrom.

    Note, track 0 is the first track on the `CD`. Track numbers start at zero.
- name: cdrom.CD.get_track_length
  id: ref/cdrom#pygame.cdrom.CD.get_track_length
  summary: Return a floating point value in seconds of the length of the cdrom track
  belongs_to: cdrom
  description: "get_track_length()\n\nlength of a cdrom track\n\nget_track_length(track) -\\> seconds\n\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/cdrom.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/cdrom.html](https://www.pygame.org/docs/ref/cdrom.html)"
- name: cdrom.CD.get_track_start
  id: ref/cdrom#pygame.cdrom.CD.get_track_start
  summary: Return the absolute time in seconds where at start of the cdrom track
  belongs_to: cdrom
  description: |-
    get_track_start()

    start time of a cdrom track

    get_track_start(track) -\> seconds

    Return the absolute time in seconds where at start of the cdrom track.

    Note, track 0 is the first track on the `CD`. Track numbers start at zero.
- name: cdrom.CD.init
  id: ref/cdrom#pygame.cdrom.CD.init
  summary: Initialize the cdrom drive for use
  belongs_to: cdrom
  description: |-
    init()

    initialize a cdrom drive for use

    init() -\> None

    Initialize the cdrom drive for use. The drive must be initialized for most `CD` methods to work. Even if the rest of pygame has been initialized.

    There may be a brief pause while the drive is initialized. Avoid `CD.init()` if the program should not stop for a second or two.
- name: cdrom.CD.pause
  id: ref/cdrom#pygame.cdrom.CD.pause
  summary: Temporarily stop audio playback on the CD
  belongs_to: cdrom
  description: |-
    pause()

    temporarily stop audio playback

    pause() -\> None

    Temporarily stop audio playback on the `CD`. The playback can be resumed at the same point with the `CD.resume()` method. If the `CD` is not playing this method does nothing.

    Note, track 0 is the first track on the `CD`. Track numbers start at zero.
- name: cdrom.CD.play
  id: ref/cdrom#pygame.cdrom.CD.play
  summary: Playback audio from an audio cdrom in the drive
  belongs_to: cdrom
  description: |-
    play()

    start playing audio

    play(track, start=None, end=None) -\> None

    Playback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.

    If you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.

    See the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to playback.

    Note, track 0 is the first track on the `CD`. Track numbers start at zero.
- name: cdrom.CD.quit
  id: ref/cdrom#pygame.cdrom.CD.quit
  summary: Uninitialize a drive for use
  belongs_to: cdrom
  description: |-
    quit()

    uninitialize a cdrom drive for use

    quit() -\> None

    Uninitialize a drive for use. Call this when your program will not be accessing the drive for awhile.
- name: cdrom.CD.resume
  id: ref/cdrom#pygame.cdrom.CD.resume
  summary: Unpause a paused CD
  belongs_to: cdrom
  description: |-
    resume()

    unpause audio playback

    resume() -\> None

    Unpause a paused `CD`. If the `CD` is not paused or already playing, this method does nothing.
- name: cdrom.CD.stop
  id: ref/cdrom#pygame.cdrom.CD.stop
  summary: Stops playback of audio from the cdrom
  belongs_to: cdrom
  description: |-
    stop()

    stop audio playback

    stop() -\> None

    Stops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio.
- name: cdrom.get_count
  id: ref/cdrom#pygame.cdrom.get_count
  summary: Return the number of cd drives on the system
  belongs_to: cdrom
  description: |-
    pygame.cdrom.get_count()

    number of cd drives on the system

    get_count() -\> count

    Return the number of cd drives on the system. When you create `CD` objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system.
- name: cdrom.get_init
  id: ref/cdrom#pygame.cdrom.get_init
  summary: Test if the cdrom module is initialized or not
  belongs_to: cdrom
  description: |-
    pygame.cdrom.get_init()

    true if the cdrom module is initialized

    get_init() -\> bool

    Test if the cdrom module is initialized or not. This is different than the `CD.init()` since each drive must also be initialized individually.
- name: cdrom.init
  id: ref/cdrom#pygame.cdrom.init
  summary: Initialize the cdrom module
  belongs_to: cdrom
  description: |-
    pygame.cdrom.init()

    initialize the cdrom module

    init() -\> None

    Initialize the cdrom module. This will scan the system for all `CD` devices. The module must be initialized before any other functions will work. This automatically happens when you call `pygame.init()`.

    It is safe to call this function more than once.
- name: cdrom.quit
  id: ref/cdrom#pygame.cdrom.quit
  summary: Uninitialize the cdrom module
  belongs_to: cdrom
  description: |-
    pygame.cdrom.quit()

    uninitialize the cdrom module

    quit() -\> None

    Uninitialize the cdrom module. After you call this any existing `CD` objects will no longer work.

    It is safe to call this function more than once.
- name: Color
  id: ref/color
  summary: The Color class represents RGBA color values using a value range of 0 to 255 inclusive
  description: "pygame.Color  \npygame object for color representations\n\nColor(r, g, b) -\\> Color\n\nColor(r, g, b, a=255) -\\> Color\n\nColor(color_value) -\\> Color\n\nThe `Color` class represents `RGBA` color values using a value range of 0 to 255 inclusive. It allows basic arithmetic operations — binary operations `+`, `-`, `*`, `//`, `%`, and unary operation `~` — to create new colors, supports conversions to other color spaces such as `HSV` or `HSL` and lets you adjust single color channels. Alpha defaults to 255 (fully opaque) when not given. The arithmetic operations and `correct_gamma()` method preserve subclasses. For the binary operators, the class of the returned color is that of the left hand color object of the operator.\n\nColor objects support equality comparison with other color objects and 3 or 4 element tuples of integers. There was a bug in pygame 1.8.1 where the default alpha was 0, not 255 like previously.\n\nColor objects export the C level array interface. The interface exports a read-only one dimensional unsigned byte array of the same assigned length as the color. The new buffer interface is also exported, with the same characteristics as the array interface.\n\nThe floor division, `//`, and modulus, `%`, operators do not raise an exception for division by zero. Instead, if a color, or alpha, channel in the right hand color is 0, then the result is 0. For example:\n\n``` python\n# These expressions are True\nColor(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)\nColor(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)\n```\n\nUse `int(color)` to return the immutable integer value of the color, usable as a `dict` key. This integer value differs from the mapped pixel values of [`pygame.Surface.get_at_mapped()`](surface#pygame.Surface.get_at_mapped), [`pygame.Surface.map_rgb()`](surface#pygame.Surface.map_rgb) and [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb). It can be passed as a `color_value` argument to [`Color`](#pygame.Color \"pygame.Color\") (useful with sets).\n\nSee [Named Colors](color_list) for samples of the available named colors.\n\nParameters  \n- **r** (*int*) -- red value in the range of 0 to 255 inclusive\n\n- **g** (*int*) -- green value in the range of 0 to 255 inclusive\n\n- **b** (*int*) -- blue value in the range of 0 to 255 inclusive\n\n- **a** (*int*) -- (optional) alpha value in the range of 0 to 255 inclusive, default is 255\n\n- **color_value** ([*Color*](#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\])*) --\n\n  color value (see note below for the supported formats)\n\n  Note\n\n  Supported color_value formats:  \n  \\- **Color object:** clones the given [`Color`](#pygame.Color \"pygame.Color\") object\n\n  \\- **Color name: str:** name of the color to use, e.g. `'red'` (all the supported name strings can be found in the [Named Colors](color_list), with sample swatches)\n\n  \\- **HTML color format str:** `'#rrggbbaa'` or `'#rrggbb'`, where rr, gg, bb, and aa are 2-digit hex numbers in the range of 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not provided\n\n  \\- **hex number str:** `'0xrrggbbaa'` or `'0xrrggbb'`, where rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not provided\n\n  \\- **int:** int value of the color to use, using hex numbers can make this parameter more readable, e.g. `0xrrggbbaa`, where rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to 0xFF inclusive, note that the aa (alpha) value is not optional for the int format and must be provided\n\n  \\- **tuple/list of int color values:** `(R,`` ``G,`` ``B,`` ``A)` or `(R,`` ``G,`` ``B)`, where R, G, B, and A are int values in the range of 0 to 255 inclusive, the A (alpha) value defaults to 255 if not provided\n\nReturns  \na newly created [`Color`](#pygame.Color \"pygame.Color\") object\n\nReturn type  \n[Color](#pygame.Color \"pygame.Color\")\n\nChanged in pygame 2.0.0: Support for tuples, lists, and [`Color`](#pygame.Color \"pygame.Color\") objects when creating [`Color`](#pygame.Color \"pygame.Color\") objects.\n\nChanged in pygame 1.9.2: Color objects export the C level array interface.\n\nChanged in pygame 1.9.0: Color objects support 4-element tuples of integers.\n\nChanged in pygame 1.8.1: New implementation of the class.\n\nr  \nGets or sets the red value of the Color.\n\nr -\\> int\n\nThe red value of the Color.\n\ng  \nGets or sets the green value of the Color.\n\ng -\\> int\n\nThe green value of the Color.\n\nb  \nGets or sets the blue value of the Color.\n\nb -\\> int\n\nThe blue value of the Color.\n\na  \nGets or sets the alpha value of the Color.\n\na -\\> int\n\nThe alpha value of the Color.\n\ncmy  \nGets or sets the CMY representation of the Color.\n\ncmy -\\> tuple\n\nThe `CMY` representation of the Color. The `CMY` components are in the ranges `C` = \\[0, 1\\], `M` = \\[0, 1\\], `Y` = \\[0, 1\\]. Note that this will not return the absolutely exact `CMY` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `CMY` mapping from 0-1 rounding errors may cause the `CMY` values to differ slightly from what you might expect.\n\nhsva  \nGets or sets the HSVA representation of the Color.\n\nhsva -\\> tuple\n\nThe `HSVA` representation of the Color. The `HSVA` components are in the ranges `H` = \\[0, 360\\], `S` = \\[0, 100\\], `V` = \\[0, 100\\], A = \\[0, 100\\]. Note that this will not return the absolutely exact `HSV` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `HSV` mapping from 0-100 and 0-360 rounding errors may cause the `HSV` values to differ slightly from what you might expect.\n\nhsla  \nGets or sets the HSLA representation of the Color.\n\nhsla -\\> tuple\n\nThe `HSLA` representation of the Color. The `HSLA` components are in the ranges `H` = \\[0, 360\\], `S` = \\[0, 100\\], `L` = \\[0, 100\\], A = \\[0, 100\\]. Note that this will not return the absolutely exact `HSL` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `HSL` mapping from 0-100 and 0-360 rounding errors may cause the `HSL` values to differ slightly from what you might expect.\n\ni1i2i3  \nGets or sets the I1I2I3 representation of the Color.\n\ni1i2i3 -\\> tuple\n\nThe `I1I2I3` representation of the Color. The `I1I2I3` components are in the ranges `I1` = \\[0, 1\\], `I2` = \\[-0.5, 0.5\\], `I3` = \\[-0.5, 0.5\\]. Note that this will not return the absolutely exact `I1I2I3` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `I1I2I3` mapping from 0-1 rounding errors may cause the `I1I2I3` values to differ slightly from what you might expect.\n\nnormalize()  \nReturns the normalized RGBA values of the Color.\n\nnormalize() -\\> tuple\n\nReturns the normalized `RGBA` values of the Color as floating point values.\n\ncorrect_gamma()  \nApplies a certain gamma value to the Color.\n\ncorrect_gamma (gamma) -\\> Color\n\nApplies a certain gamma value to the Color and returns a new Color with the adjusted `RGBA` values.\n\nset_length()  \nSet the number of elements in the Color to 1,2,3, or 4.\n\nset_length(len) -\\> None\n\nDEPRECATED: You may unpack the values you need like so, `r,`` ``g,`` ``b,`` ``_`` ``=`` ``pygame.Color(100,`` ``100,`` ``100)` If you only want r, g and b Or `r,`` ``g,`` ``*_`` ``=`` ``pygame.Color(100,`` ``100,`` ``100)` if you only want r and g\n\nThe default Color length is 4. Colors can have lengths 1,2,3 or 4. This is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the length of a Color do `len(acolor)`.\n\nDeprecated since pygame 2.1.3.\n\nNew in pygame 1.9.0.\n\ngrayscale()  \nreturns the grayscale of a Color\n\ngrayscale() -\\> Color\n\nReturns a Color which represents the grayscaled version of self using the luminosity formula which weights red, green and blue according to their wavelengths..\n\nlerp()  \nreturns a linear interpolation to the given Color.\n\nlerp(Color, float) -\\> Color\n\nReturns a Color which is a linear interpolation between self and the given Color in RGBA space. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.\n\nNew in pygame 2.0.1.\n\npremul_alpha()  \nreturns a Color where the r,g,b components have been multiplied by the alpha.\n\npremul_alpha() -\\> Color\n\nReturns a new Color where each of the red, green and blue colour channels have been multiplied by the alpha channel of the original color. The alpha channel remains unchanged.\n\nThis is useful when working with the `BLEND_PREMULTIPLIED` blending mode flag for [`pygame.Surface.blit()`](surface#pygame.Surface.blit), which assumes that all surfaces using it are using pre-multiplied alpha colors.\n\nNew in pygame 2.0.0.\n\nupdate()  \nSets the elements of the color\n\nupdate(r, g, b) -\\> None\n\nupdate(r, g, b, a=255) -\\> None\n\nupdate(color_value) -\\> None\n\nSets the elements of the color. See parameters for [`pygame.Color()`](#pygame.Color) for the parameters of this function. If the alpha value was not set it will not change.\n\nNew in pygame 2.0.1.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/color.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/color.html](https://www.pygame.org/docs/ref/color.html)"
- name: Color.a
  id: ref/color#pygame.Color.a
  summary: Gets or sets the alpha value of the Color
  belongs_to: Color
  description: |-
    a

    Gets or sets the alpha value of the Color.

    a -\> int

    The alpha value of the Color.
- name: Color.b
  id: ref/color#pygame.Color.b
  summary: Gets or sets the blue value of the Color
  belongs_to: Color
  description: |-
    b

    Gets or sets the blue value of the Color.

    b -\> int

    The blue value of the Color.
- name: Color.cmy
  id: ref/color#pygame.Color.cmy
  summary: Gets or sets the CMY representation of the Color
  belongs_to: Color
  description: |-
    cmy

    Gets or sets the CMY representation of the Color.

    cmy -\> tuple

    The `CMY` representation of the Color. The `CMY` components are in the ranges `C` = \[0, 1\], `M` = \[0, 1\], `Y` = \[0, 1\]. Note that this will not return the absolutely exact `CMY` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `CMY` mapping from 0-1 rounding errors may cause the `CMY` values to differ slightly from what you might expect.
- name: Color.correct_gamma
  id: ref/color#pygame.Color.correct_gamma
  summary: Applies a certain gamma value to the Color
  belongs_to: Color
  description: |-
    correct_gamma()

    Applies a certain gamma value to the Color.

    correct_gamma (gamma) -\> Color

    Applies a certain gamma value to the Color and returns a new Color with the adjusted `RGBA` values.
- name: Color.g
  id: ref/color#pygame.Color.g
  summary: Gets or sets the green value of the Color
  belongs_to: Color
  description: |-
    g

    Gets or sets the green value of the Color.

    g -\> int

    The green value of the Color.
- name: Color.grayscale
  id: ref/color#pygame.Color.grayscale
  summary: null
  belongs_to: Color
  description: |-
    grayscale()

    returns the grayscale of a Color

    grayscale() -\> Color

    Returns a Color which represents the grayscaled version of self using the luminosity formula which weights red, green and blue according to their wavelengths..
- name: Color.hsla
  id: ref/color#pygame.Color.hsla
  summary: Gets or sets the HSLA representation of the Color
  belongs_to: Color
  description: |-
    hsla

    Gets or sets the HSLA representation of the Color.

    hsla -\> tuple

    The `HSLA` representation of the Color. The `HSLA` components are in the ranges `H` = \[0, 360\], `S` = \[0, 100\], `L` = \[0, 100\], A = \[0, 100\]. Note that this will not return the absolutely exact `HSL` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `HSL` mapping from 0-100 and 0-360 rounding errors may cause the `HSL` values to differ slightly from what you might expect.
- name: Color.hsva
  id: ref/color#pygame.Color.hsva
  summary: Gets or sets the HSVA representation of the Color
  belongs_to: Color
  description: |-
    hsva

    Gets or sets the HSVA representation of the Color.

    hsva -\> tuple

    The `HSVA` representation of the Color. The `HSVA` components are in the ranges `H` = \[0, 360\], `S` = \[0, 100\], `V` = \[0, 100\], A = \[0, 100\]. Note that this will not return the absolutely exact `HSV` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `HSV` mapping from 0-100 and 0-360 rounding errors may cause the `HSV` values to differ slightly from what you might expect.
- name: Color.i1i2i3
  id: ref/color#pygame.Color.i1i2i3
  summary: Gets or sets the I1I2I3 representation of the Color
  belongs_to: Color
  description: |-
    i1i2i3

    Gets or sets the I1I2I3 representation of the Color.

    i1i2i3 -\> tuple

    The `I1I2I3` representation of the Color. The `I1I2I3` components are in the ranges `I1` = \[0, 1\], `I2` = \[-0.5, 0.5\], `I3` = \[-0.5, 0.5\]. Note that this will not return the absolutely exact `I1I2I3` values for the set `RGB` values in all cases. Due to the `RGB` mapping from 0-255 and the `I1I2I3` mapping from 0-1 rounding errors may cause the `I1I2I3` values to differ slightly from what you might expect.
- name: Color.lerp
  id: ref/color#pygame.Color.lerp
  summary: returns a linear interpolation to the given Color
  belongs_to: Color
  description: |-
    lerp()

    returns a linear interpolation to the given Color.

    lerp(Color, float) -\> Color

    Returns a Color which is a linear interpolation between self and the given Color in RGBA space. The second parameter determines how far between self and other the result is going to be. It must be a value between 0 and 1 where 0 means self and 1 means other will be returned.

    New in pygame 2.0.1.
- name: Color.normalize
  id: ref/color#pygame.Color.normalize
  summary: Returns the normalized RGBA values of the Color
  belongs_to: Color
  description: |-
    normalize()

    Returns the normalized RGBA values of the Color.

    normalize() -\> tuple

    Returns the normalized `RGBA` values of the Color as floating point values.
- name: Color.premul_alpha
  id: ref/color#pygame.Color.premul_alpha
  summary: returns a Color where the r,g,b components have been multiplied by the alpha
  belongs_to: Color
  description: |-
    premul_alpha()

    returns a Color where the r,g,b components have been multiplied by the alpha.

    premul_alpha() -\> Color

    Returns a new Color where each of the red, green and blue colour channels have been multiplied by the alpha channel of the original color. The alpha channel remains unchanged.

    This is useful when working with the `BLEND_PREMULTIPLIED` blending mode flag for [`pygame.Surface.blit()`](surface#pygame.Surface.blit), which assumes that all surfaces using it are using pre-multiplied alpha colors.

    New in pygame 2.0.0.
- name: Color.r
  id: ref/color#pygame.Color.r
  summary: Gets or sets the red value of the Color
  belongs_to: Color
  description: |-
    r

    Gets or sets the red value of the Color.

    r -\> int

    The red value of the Color.
- name: Color.set_length
  id: ref/color#pygame.Color.set_length
  summary: Set the number of elements in the Color to 1,2,3, or 4
  belongs_to: Color
  description: |-
    set_length()

    Set the number of elements in the Color to 1,2,3, or 4.

    set_length(len) -\> None

    DEPRECATED: You may unpack the values you need like so, `r,``g,``b,``_``=``pygame.Color(100,``100,``100)` If you only want r, g and b Or `r,``g,``*_``=``pygame.Color(100,``100,``100)` if you only want r and g

    The default Color length is 4. Colors can have lengths 1,2,3 or 4. This is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to get the length of a Color do `len(acolor)`.

    Deprecated since pygame 2.1.3.

    New in pygame 1.9.0.
- name: Color.update
  id: ref/color#pygame.Color.update
  summary: Sets the elements of the color
  belongs_to: Color
  description: "update()\n\nSets the elements of the color\n\nupdate(r, g, b) -\\> None\n\nupdate(r, g, b, a=255) -\\> None\n\nupdate(color_value) -\\> None\n\nSets the elements of the color. See parameters for [`pygame.Color()`](#pygame.Color) for the parameters of this function. If the alpha value was not set it will not change.\n\nNew in pygame 2.0.1.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/color.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/color.html](https://www.pygame.org/docs/ref/color.html)"
- name: cursors
  id: ref/cursors
  summary: Pygame offers control over the system hardware cursor
  description: "pygame.cursors  \npygame module for cursor resources\n\nPygame offers control over the system hardware cursor. Pygame supports black and white cursors (bitmap cursors), as well as system variant cursors and color cursors. You control the cursor with functions inside [`pygame.mouse`](mouse#module-pygame.mouse).\n\nThis cursors module contains functions for loading and decoding various cursor formats. These allow you to easily store your cursors in external files or directly as encoded python strings.\n\nThe module includes several standard cursors. The [`pygame.mouse.set_cursor()`](mouse#pygame.mouse.set_cursor) function takes several arguments. All those arguments have been stored in a single tuple you can call like this:\n\n``` python\n>>> pygame.mouse.set_cursor(*pygame.cursors.arrow)\n```\n\nThe following variables can be passed to `pygame.mouse.set_cursor` function:\n\n> - `pygame.cursors.arrow`\n>\n> - `pygame.cursors.diamond`\n>\n> - `pygame.cursors.broken_x`\n>\n> - `pygame.cursors.tri_left`\n>\n> - `pygame.cursors.tri_right`\n\nThis module also contains a few cursors as formatted strings. You'll need to pass these to `pygame.cursors.compile()` function before you can use them. The example call would look like this:\n\n``` python\n>>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)\n>>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)\n```\n\nThe following strings can be converted into cursor bitmaps with `pygame.cursors.compile()` :\n\n> - `pygame.cursors.thickarrow_strings`\n>\n> - `pygame.cursors.sizer_x_strings`\n>\n> - `pygame.cursors.sizer_y_strings`\n>\n> - `pygame.cursors.sizer_xy_strings`\n>\n> - `pygame.cursor.textmarker_strings`\n\npygame.cursors.compile()  \ncreate binary cursor data from simple strings\n\ncompile(strings, black='X', white='.', xor='o') -\\> data, mask\n\nA sequence of strings can be used to create binary cursor data for the system cursor. This returns the binary data in the form of two tuples. Those can be passed as the third and fourth arguments respectively of the [`pygame.mouse.set_cursor()`](mouse#pygame.mouse.set_cursor) function.\n\nIf you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.\n\nThe height must be divisible by 8. The width of the strings must all be equal and be divisible by 8. If these two conditions are not met, `ValueError` is raised. An example set of cursor strings looks like this\n\n``` python\nthickarrow_strings = (               #sized 24x24\n  \"XX                      \",\n  \"XXX                     \",\n  \"XXXX                    \",\n  \"XX.XX                   \",\n  \"XX..XX                  \",\n  \"XX...XX                 \",\n  \"XX....XX                \",\n  \"XX.....XX               \",\n  \"XX......XX              \",\n  \"XX.......XX             \",\n  \"XX........XX            \",\n  \"XX........XXX           \",\n  \"XX......XXXXX           \",\n  \"XX.XXX..XX              \",\n  \"XXXX XX..XX             \",\n  \"XX   XX..XX             \",\n  \"     XX..XX             \",\n  \"      XX..XX            \",\n  \"      XX..XX            \",\n  \"       XXXX             \",\n  \"       XX               \",\n  \"                        \",\n  \"                        \",\n  \"                        \")\n```\n\npygame.cursors.load_xbm()  \nload cursor data from an XBM file\n\nload_xbm(cursorfile) -\\> cursor_args\n\nload_xbm(cursorfile, maskfile) -\\> cursor_args\n\nThis loads cursors for a simple subset of `XBM` files. `XBM` files are traditionally used to store cursors on UNIX systems, they are an ASCII format used to represent simple images.\n\nSometimes the black and white color values will be split into two separate `XBM` files. You can pass a second maskfile argument to load the two images into a single cursor.\n\nThe cursorfile and maskfile arguments can either be filenames or file-like object with the readlines method.\n\nThe return value cursor_args can be passed directly to the `pygame.mouse.set_cursor()` function.\n\npygame.cursors.Cursor  \npygame object representing a cursor\n\nCursor(size, hotspot, xormasks, andmasks) -\\> Cursor\n\nCursor(hotspot, surface) -\\> Cursor\n\nCursor(constant) -\\> Cursor\n\nCursor(Cursor) -\\> Cursor\n\nCursor() -\\> Cursor\n\nIn pygame 2, there are 3 types of cursors you can create to give your game that little bit of extra polish. There's **bitmap** type cursors, which existed in pygame 1.x, and are compiled from a string or load from an xbm file. Then there are **system** type cursors, where you choose a preset that will convey the same meaning but look native across different operating systems. Finally you can create a **color** cursor, which displays a pygame surface as the cursor.\n\n**Creating a system cursor**\n\nChoose a constant from this list, pass it into `pygame.cursors.Cursor(constant)`, and you're good to go. Be advised that not all systems support every system cursor, and you may get a substitution instead. For example, on MacOS, WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL should show up as a closed hand. And on Wayland, every SIZE cursor should show up as a hand.\n\n``` python\nPygame Cursor Constant           Description\n--------------------------------------------\npygame.SYSTEM_CURSOR_ARROW       arrow\npygame.SYSTEM_CURSOR_IBEAM       i-beam\npygame.SYSTEM_CURSOR_WAIT        wait\npygame.SYSTEM_CURSOR_CROSSHAIR   crosshair\npygame.SYSTEM_CURSOR_WAITARROW   small wait cursor\n                                 (or wait if not available)\npygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing\n                                 northwest and southeast\npygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing\n                                 northeast and southwest\npygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing\n                                 west and east\npygame.SYSTEM_CURSOR_SIZENS      double arrow pointing\n                                 north and south\npygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing\n                                 north, south, east, and west\npygame.SYSTEM_CURSOR_NO          slashed circle or crossbones\npygame.SYSTEM_CURSOR_HAND        hand\n```\n\n**Creating a cursor without passing arguments**\n\nIn addition to the cursor constants available and described above, you can also call `pygame.cursors.Cursor()`, and your cursor is ready (doing that is the same as calling `pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)`. Doing one of those calls actually creates a system cursor using the default native image.\n\n**Creating a color cursor**\n\nTo create a color cursor, create a `Cursor` from a `hotspot` and a `surface`. `hotspot` is an (x,y) coordinate that determines where in the cursor the exact point is. The hotspot position must be within the bounds of the `surface`.\n\n**Creating a bitmap cursor**\n\nWhen the mouse cursor is visible, it will be displayed as a black and white bitmap using the given bitmask arrays. The `size` is a sequence containing the cursor width and height. `hotspot` is a sequence containing the cursor hotspot position.\n\nA cursor has a width and height, but a mouse position is represented by a set of point coordinates. So the value passed into the cursor `hotspot` variable helps pygame to actually determine at what exact point the cursor is at.\n\n`xormasks` is a sequence of bytes containing the cursor xor data masks. Lastly `andmasks`, a sequence of bytes containing the cursor bitmask data. To create these variables, we can make use of the [`pygame.cursors.compile()`](#pygame.cursors.compile) function.\n\nWidth and height must be a multiple of 8, and the mask arrays must be the correct size for the given width and height. Otherwise an exception is raised.\n\ncopy()  \ncopy the current cursor\n\ncopy() -\\> Cursor\n\nReturns a new Cursor object with the same data and hotspot as the original.\n\ntype  \nGets the cursor type\n\ntype -\\> string\n\nThe type will be `\"system\"`, `\"bitmap\"`, or `\"color\"`.\n\ndata  \nGets the cursor data\n\ndata -\\> tuple\n\nReturns the data that was used to create this cursor object, wrapped up in a tuple.\n\nNew in pygame 2.0.1.\n\nExample code for creating and settings cursors. (Click the mouse to switch cursor)\n\n``` python\n# pygame setup\nimport pygame as pg\n\npg.init()\nscreen = pg.display.set_mode([600, 400])\npg.display.set_caption(\"Example code for the cursors module\")\n\n# create a system cursor\nsystem = pg.cursors.Cursor(pg.SYSTEM_CURSOR_NO)\n\n# create bitmap cursors\nbitmap_1 = pg.cursors.Cursor(*pg.cursors.arrow)\nbitmap_2 = pg.cursors.Cursor(\n    (24, 24), (0, 0), *pg.cursors.compile(pg.cursors.thickarrow_strings)\n)\n\n# create a color cursor\nsurf = pg.Surface((40, 40)) # you could also load an image \nsurf.fill((120, 50, 50))        # and use that as your surface\ncolor = pg.cursors.Cursor((20, 20), surf)\n\ncursors = [system, bitmap_1, bitmap_2, color]\ncursor_index = 0\n\npg.mouse.set_cursor(cursors[cursor_index])\n\nclock = pg.time.Clock()\ngoing = True\nwhile going:\n    clock.tick(60)\n    screen.fill((0, 75, 30))\n    pg.display.flip()\n\n    for event in pg.event.get():\n        if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n            going = False\n\n        # if the mouse is clicked it will switch to a new cursor\n        if event.type == pg.MOUSEBUTTONDOWN:\n            cursor_index += 1\n            cursor_index %= len(cursors)\n            pg.mouse.set_cursor(cursors[cursor_index])\n\npg.quit()\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/cursors.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/cursors.html](https://www.pygame.org/docs/ref/cursors.html)"
- name: cursors.compile
  id: ref/cursors#pygame.cursors.compile
  summary: A sequence of strings can be used to create binary cursor data for the system cursor
  belongs_to: cursors
  description: |-
    pygame.cursors.compile()

    create binary cursor data from simple strings

    compile(strings, black='X', white='.', xor='o') -\> data, mask

    A sequence of strings can be used to create binary cursor data for the system cursor. This returns the binary data in the form of two tuples. Those can be passed as the third and fourth arguments respectively of the [`pygame.mouse.set_cursor()`](mouse#pygame.mouse.set_cursor) function.

    If you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.

    The height must be divisible by 8. The width of the strings must all be equal and be divisible by 8. If these two conditions are not met, `ValueError` is raised. An example set of cursor strings looks like this

    ``` python
    thickarrow_strings = (               #sized 24x24
      "XX                      ",
      "XXX                     ",
      "XXXX                    ",
      "XX.XX                   ",
      "XX..XX                  ",
      "XX...XX                 ",
      "XX....XX                ",
      "XX.....XX               ",
      "XX......XX              ",
      "XX.......XX             ",
      "XX........XX            ",
      "XX........XXX           ",
      "XX......XXXXX           ",
      "XX.XXX..XX              ",
      "XXXX XX..XX             ",
      "XX   XX..XX             ",
      "     XX..XX             ",
      "      XX..XX            ",
      "      XX..XX            ",
      "       XXXX             ",
      "       XX               ",
      "                        ",
      "                        ",
      "                        ")
    ```
- name: cursors.Cursor
  id: ref/cursors#pygame.cursors.Cursor
  summary: In pygame 2, there are 3 types of cursors you can create to give your game that little bit of extra polish
  belongs_to: cursors
  description: |-
    pygame.cursors.Cursor

    pygame object representing a cursor

    Cursor(size, hotspot, xormasks, andmasks) -\> Cursor

    Cursor(hotspot, surface) -\> Cursor

    Cursor(constant) -\> Cursor

    Cursor(Cursor) -\> Cursor

    Cursor() -\> Cursor

    In pygame 2, there are 3 types of cursors you can create to give your game that little bit of extra polish. There's **bitmap** type cursors, which existed in pygame 1.x, and are compiled from a string or load from an xbm file. Then there are **system** type cursors, where you choose a preset that will convey the same meaning but look native across different operating systems. Finally you can create a **color** cursor, which displays a pygame surface as the cursor.

    **Creating a system cursor**

    Choose a constant from this list, pass it into `pygame.cursors.Cursor(constant)`, and you're good to go. Be advised that not all systems support every system cursor, and you may get a substitution instead. For example, on MacOS, WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL should show up as a closed hand. And on Wayland, every SIZE cursor should show up as a hand.

    ``` python
    Pygame Cursor Constant           Description
    --------------------------------------------
    pygame.SYSTEM_CURSOR_ARROW       arrow
    pygame.SYSTEM_CURSOR_IBEAM       i-beam
    pygame.SYSTEM_CURSOR_WAIT        wait
    pygame.SYSTEM_CURSOR_CROSSHAIR   crosshair
    pygame.SYSTEM_CURSOR_WAITARROW   small wait cursor
                                     (or wait if not available)
    pygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing
                                     northwest and southeast
    pygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing
                                     northeast and southwest
    pygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing
                                     west and east
    pygame.SYSTEM_CURSOR_SIZENS      double arrow pointing
                                     north and south
    pygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing
                                     north, south, east, and west
    pygame.SYSTEM_CURSOR_NO          slashed circle or crossbones
    pygame.SYSTEM_CURSOR_HAND        hand
    ```

    **Creating a cursor without passing arguments**

    In addition to the cursor constants available and described above, you can also call `pygame.cursors.Cursor()`, and your cursor is ready (doing that is the same as calling `pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)`. Doing one of those calls actually creates a system cursor using the default native image.

    **Creating a color cursor**

    To create a color cursor, create a `Cursor` from a `hotspot` and a `surface`. `hotspot` is an (x,y) coordinate that determines where in the cursor the exact point is. The hotspot position must be within the bounds of the `surface`.

    **Creating a bitmap cursor**

    When the mouse cursor is visible, it will be displayed as a black and white bitmap using the given bitmask arrays. The `size` is a sequence containing the cursor width and height. `hotspot` is a sequence containing the cursor hotspot position.

    A cursor has a width and height, but a mouse position is represented by a set of point coordinates. So the value passed into the cursor `hotspot` variable helps pygame to actually determine at what exact point the cursor is at.

    `xormasks` is a sequence of bytes containing the cursor xor data masks. Lastly `andmasks`, a sequence of bytes containing the cursor bitmask data. To create these variables, we can make use of the [`pygame.cursors.compile()`](#pygame.cursors.compile) function.

    Width and height must be a multiple of 8, and the mask arrays must be the correct size for the given width and height. Otherwise an exception is raised.
- name: cursors.Cursor.copy
  id: ref/cursors#pygame.cursors.Cursor.copy
  summary: Returns a new Cursor object with the same data and hotspot as the original
  belongs_to: cursors
  description: |-
    copy()

    copy the current cursor

    copy() -\> Cursor

    Returns a new Cursor object with the same data and hotspot as the original.
- name: cursors.Cursor.data
  id: ref/cursors#pygame.cursors.Cursor.data
  summary: Returns the data that was used to create this cursor object, wrapped up in a tuple
  belongs_to: cursors
  description: "data\n\nGets the cursor data\n\ndata -\\> tuple\n\nReturns the data that was used to create this cursor object, wrapped up in a tuple.\n\nNew in pygame 2.0.1.\n\nExample code for creating and settings cursors. (Click the mouse to switch cursor)\n\n``` python\n# pygame setup\nimport pygame as pg\n\npg.init()\nscreen = pg.display.set_mode([600, 400])\npg.display.set_caption(\"Example code for the cursors module\")\n\n# create a system cursor\nsystem = pg.cursors.Cursor(pg.SYSTEM_CURSOR_NO)\n\n# create bitmap cursors\nbitmap_1 = pg.cursors.Cursor(*pg.cursors.arrow)\nbitmap_2 = pg.cursors.Cursor(\n    (24, 24), (0, 0), *pg.cursors.compile(pg.cursors.thickarrow_strings)\n)\n\n# create a color cursor\nsurf = pg.Surface((40, 40)) # you could also load an image \nsurf.fill((120, 50, 50))        # and use that as your surface\ncolor = pg.cursors.Cursor((20, 20), surf)\n\ncursors = [system, bitmap_1, bitmap_2, color]\ncursor_index = 0\n\npg.mouse.set_cursor(cursors[cursor_index])\n\nclock = pg.time.Clock()\ngoing = True\nwhile going:\n    clock.tick(60)\n    screen.fill((0, 75, 30))\n    pg.display.flip()\n\n    for event in pg.event.get():\n        if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n            going = False\n\n        # if the mouse is clicked it will switch to a new cursor\n        if event.type == pg.MOUSEBUTTONDOWN:\n            cursor_index += 1\n            cursor_index %= len(cursors)\n            pg.mouse.set_cursor(cursors[cursor_index])\n\npg.quit()\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/cursors.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/cursors.html](https://www.pygame.org/docs/ref/cursors.html)"
- name: cursors.Cursor.type
  id: ref/cursors#pygame.cursors.Cursor.type
  summary: null
  belongs_to: cursors
  description: |-
    type

    Gets the cursor type

    type -\> string

    The type will be `"system"`, `"bitmap"`, or `"color"`.
- name: cursors.load_xbm
  id: ref/cursors#pygame.cursors.load_xbm
  summary: This loads cursors for a simple subset of XBM files
  belongs_to: cursors
  description: |-
    pygame.cursors.load_xbm()

    load cursor data from an XBM file

    load_xbm(cursorfile) -\> cursor_args

    load_xbm(cursorfile, maskfile) -\> cursor_args

    This loads cursors for a simple subset of `XBM` files. `XBM` files are traditionally used to store cursors on UNIX systems, they are an ASCII format used to represent simple images.

    Sometimes the black and white color values will be split into two separate `XBM` files. You can pass a second maskfile argument to load the two images into a single cursor.

    The cursorfile and maskfile arguments can either be filenames or file-like object with the readlines method.

    The return value cursor_args can be passed directly to the `pygame.mouse.set_cursor()` function.
- name: display
  id: ref/display
  summary: This module offers control over the pygame display
  description: "pygame.display  \npygame module to control the display window and screen\n\nThis module offers control over the pygame display. Pygame has a single display Surface that is either contained in a window or runs full screen. Once you create the display you treat it as a regular Surface. Changes are not immediately visible onscreen; you must choose one of the two flipping functions to update the actual display.\n\nThe origin of the display, where x = 0 and y = 0, is the top left of the screen. Both axes increase positively towards the bottom right of the screen.\n\nThe pygame display can actually be initialized in one of several modes. By default, the display is a basic software driven framebuffer. You can request special modules like automatic scaling or OpenGL support. These are controlled by flags passed to `pygame.display.set_mode()`.\n\nPygame can only have a single display active at any time. Creating a new one with `pygame.display.set_mode()` will close the previous display. To detect the number and size of attached screens, you can use `pygame.display.get_desktop_sizes` and then select appropriate window size and display index to pass to `pygame.display.set_mode()`.\n\nFor backward compatibility `pygame.display` allows precise control over the pixel format or display resolutions. This used to be necessary with old graphics cards and CRT screens, but is usually not needed any more. Use the functions `pygame.display.mode_ok()`, `pygame.display.list_modes()`, and `pygame.display.Info()` to query detailed information about the display.\n\nOnce the display Surface is created, the functions from this module affect the single existing display. The Surface becomes invalid if the module is uninitialized. If a new display mode is set, the existing Surface will automatically switch to operate on the new display.\n\nWhen the display mode is set, several events are placed on the pygame event queue. `pygame.QUIT` is sent when the user has requested the program to shut down. The window will receive `pygame.ACTIVEEVENT` events as the display gains and loses input focus. If the display is set with the `pygame.RESIZABLE` flag, `pygame.VIDEORESIZE` events will be sent when the user adjusts the window dimensions. Hardware displays that draw direct to the screen will get `pygame.VIDEOEXPOSE` events when portions of the window must be redrawn.\n\nA new windowevent API was introduced in pygame 2.0.1. Check event module docs for more information on that\n\nSome display environments have an option for automatically stretching all windows. When this option is enabled, this automatic stretching distorts the appearance of the pygame window. In the pygame examples directory, there is example code (prevent_display_stretching.py) which shows how to disable this automatic stretching of the pygame display on Microsoft Windows (Vista or newer required).\n\npygame.display.init()  \nInitialize the display module\n\ninit() -\\> None\n\nInitializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level `pygame.init()`.\n\nPygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable `SDL_VIDEODRIVER` can be set to control which backend is used. The systems with multiple choices are listed here.\n\n``` python\nWindows : windib, directx\nUnix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib\n```\n\nOn some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable `SDL_WINDOWID` must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\npygame.display.quit()  \nUninitialize the display module\n\nquit() -\\> None\n\nThis will shut down the entire display module. This means any active displays will be closed. This will also be handled automatically when the program exits.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\npygame.display.get_init()  \nReturns True if the display module has been initialized\n\nget_init() -\\> bool\n\nReturns True if the [`pygame.display`](#module-pygame.display) module is currently initialized.\n\npygame.display.set_mode()  \nInitialize a window or screen for display\n\nset_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -\\> Surface\n\nThis function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system.\n\nNote that calling this function implicitly initializes `pygame.display`, if it was not initialized before.\n\nThe size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color.\n\nThe Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor.\n\nIf no size is passed or is set to `(0,`` ``0)` and pygame uses `SDL` version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to `0`, the Surface will have the same width or height as the screen resolution. Using a `SDL` version prior to 1.2.10 will raise an exception.\n\nIt is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.\n\nWhen requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size.\n\nOn high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases.\n\nThe flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe \"\\|\" character). Here are the display flags you will want to choose from:\n\n``` python\npygame.FULLSCREEN    create a fullscreen display\npygame.DOUBLEBUF     only applicable with OPENGL\npygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN\npygame.OPENGL        create an OpenGL-renderable display\npygame.RESIZABLE     display window should be sizeable\npygame.NOFRAME       display window will have no border or controls\npygame.SCALED        resolution depends on desktop size and scale graphics\npygame.SHOWN         window is opened in visible mode (default)\npygame.HIDDEN        window is opened in hidden mode\n```\n\nNew in pygame 2.0.0: `SCALED`, `SHOWN` and `HIDDEN`\n\nBy setting the `vsync` parameter to `1`, it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to `set_mode()` with the `pygame.OPENGL` or `pygame.SCALED` flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to `set_mode()` that may give you a display with vsync:\n\n``` python\nflags = pygame.OPENGL | pygame.FULLSCREEN\nwindow_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)\n```\n\nVsync behaviour is considered experimental, and may change in future releases.\n\nNew in pygame 2.0.0: `vsync`\n\nBasic example:\n\n``` python\n# Open a window on the screen\nscreen_width=700\nscreen_height=400\nscreen=pygame.display.set_mode([screen_width, screen_height])\n```\n\nThe display index `0` means the default display is used. If no display index argument is provided, the default display can be overridden with an environment variable.\n\nChanged in pygame 1.9.5: `display` argument added\n\nChanged in pygame 2.1.3: pygame now ensures that subsequent calls to this function clears the window to black. On older versions, this was an implementation detail on the major platforms this function was tested with.\n\npygame.display.get_surface()  \nGet a reference to the currently set display surface\n\nget_surface() -\\> Surface\n\nReturn a reference to the currently set display Surface. If no display mode has been set this will return None.\n\npygame.display.flip()  \nUpdate the full display Surface to the screen\n\nflip() -\\> None\n\nThis will update the contents of the entire display. If your display mode is using the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF` on pygame 1, this will wait for a vertical retrace and swap the surfaces.\n\nWhen using an `pygame.OPENGL` display mode this will perform a gl buffer swap.\n\npygame.display.update()  \nUpdate portions of the screen for software displays\n\nupdate(rectangle=None) -\\> None\n\nupdate(rectangle_list) -\\> None\n\nThis function is like an optimized version of `pygame.display.flip()` for software displays. It allows only a portion of the screen to be updated, instead of the entire area. If no argument is passed it updates the entire Surface area like `pygame.display.flip()`.\n\nNote that calling `display.update(None)` means no part of the window is updated. Whereas `display.update()` means the whole window is updated.\n\nYou can pass the function a single rectangle, or a sequence of rectangles. It is more efficient to pass many rectangles at once than to call update multiple times with single or a partial list of rectangles. If passing a sequence of rectangles it is safe to include None values in the list, which will be skipped.\n\nThis call cannot be used on `pygame.OPENGL` displays and will generate an exception.\n\npygame.display.get_driver()  \nGet the name of the pygame display backend\n\nget_driver() -\\> name\n\nPygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to see some of the common options.\n\npygame.display.Info()  \nCreate a video display information object\n\nInfo() -\\> VideoInfo\n\nCreates a simple object containing several attributes to describe the current graphics environment. If this is called before `pygame.display.set_mode()` some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:\n\n``` python\nhw:         1 if the display is hardware accelerated\nwm:         1 if windowed display modes can be used\nvideo_mem:  The megabytes of video memory on the display. This is 0 if\n            unknown\nbitsize:    Number of bits used to store each pixel\nbytesize:   Number of bytes used to store each pixel\nmasks:      Four values used to pack RGBA values into pixels\nshifts:     Four values used to pack RGBA values into pixels\nlosses:     Four values used to pack RGBA values into pixels\nblit_hw:    1 if hardware Surface blitting is accelerated\nblit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated\nblit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated\nblit_sw:    1 if software Surface blitting is accelerated\nblit_sw_CC: 1 if software Surface colorkey blitting is accelerated\nblit_sw_A:  1 if software Surface pixel alpha blitting is accelerated\ncurrent_h, current_w:  Height and width of the current video mode, or\n            of the desktop mode if called before the display.set_mode\n            is called. (current_h, current_w are available since\n            SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if\n            an old SDL is being used.\n```\n\npygame.display.get_wm_info()  \nGet information about the current windowing system\n\nget_wm_info() -\\> dict\n\nCreates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a \"window\" key with the value set to the system id for the current display.\n\nNew in pygame 1.7.1.\n\npygame.display.get_desktop_sizes()  \nGet sizes of active desktops\n\nget_desktop_sizes() -\\> list\n\nThis function returns the sizes of the currently configured virtual desktops as a list of (x, y) tuples of integers.\n\nThe length of the list is not the same as the number of attached monitors, as a desktop can be mirrored across multiple monitors. The desktop sizes do not indicate the maximum monitor resolutions supported by the hardware, but the desktop size configured in the operating system.\n\nIn order to fit windows into the desktop as it is currently configured, and to respect the resolution configured by the operating system in fullscreen mode, this function *should* be used to replace many use cases of `pygame.display.list_modes()` whenever applicable.\n\nNew in pygame 2.0.0.\n\npygame.display.list_modes()  \nGet list of available fullscreen modes\n\nlist_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -\\> list\n\nThis function returns a list of possible sizes for a specified color depth. The return value will be an empty list if no display modes are available with the given arguments. A return value of `-1` means that any requested size should work (this is likely the case for windowed modes). Mode sizes are sorted from biggest to smallest.\n\nIf depth is `0`, the current/best color depth for the display is used. The flags defaults to `pygame.FULLSCREEN`, but you may need to add additional flags for specific fullscreen modes.\n\nThe display index `0` means the default display is used.\n\nSince pygame 2.0, `pygame.display.get_desktop_sizes()` has taken over some use cases from `pygame.display.list_modes()`:\n\nTo find a suitable size for non-fullscreen windows, it is preferable to use `pygame.display.get_desktop_sizes()` to get the size of the *current* desktop, and to then choose a smaller window size. This way, the window is guaranteed to fit, even when the monitor is configured to a lower resolution than the maximum supported by the hardware.\n\nTo avoid changing the physical monitor resolution, it is also preferable to use `pygame.display.get_desktop_sizes()` to determine the fullscreen resolution. Developers are strongly advised to default to the current physical monitor resolution unless the user explicitly requests a different one (e.g. in an options menu or configuration file).\n\nChanged in pygame 1.9.5: `display` argument added\n\npygame.display.mode_ok()  \nPick the best color depth for a display mode\n\nmode_ok(size, flags=0, depth=0, display=0) -\\> depth\n\nThis function uses the same arguments as `pygame.display.set_mode()`. It is used to determine if a requested display mode is available. It will return `0` if the display mode cannot be set. Otherwise it will return a pixel depth that best matches the display asked for.\n\nUsually the depth argument is not passed, but some platforms can support multiple display depths. If passed it will hint to which depth is a better match.\n\nThe function will return `0` if the passed display flags cannot be set.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\npygame.display.gl_get_attribute()  \nGet the value for an OpenGL flag for the current display\n\ngl_get_attribute(flag) -\\> value\n\nAfter calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is a good idea to check the value of any requested OpenGL attributes. See `pygame.display.gl_set_attribute()` for a list of valid flags.\n\npygame.display.gl_set_attribute()  \nRequest an OpenGL display attribute for the display mode\n\ngl_set_attribute(flag, value) -\\> None\n\nWhen calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering. OpenGL offers several other attributes you may want control over. Pass one of these attributes as the flag, and its appropriate value. This must be called before `pygame.display.set_mode()`.\n\nMany settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.\n\nThe `OPENGL` flags are:\n\n``` python\nGL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,\nGL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,\nGL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO\n```\n\n`GL_MULTISAMPLEBUFFERS`\n\n> Whether to enable multisampling anti-aliasing. Defaults to 0 (disabled).\n>\n> Set `GL_MULTISAMPLESAMPLES` to a value above 0 to control the amount of anti-aliasing. A typical value is 2 or 3.\n\n`GL_STENCIL_SIZE`\n\n> Minimum bit size of the stencil buffer. Defaults to 0.\n\n`GL_DEPTH_SIZE`\n\n> Minimum bit size of the depth buffer. Defaults to 16.\n\n`GL_STEREO`\n\n> 1 enables stereo 3D. Defaults to 0.\n\n`GL_BUFFER_SIZE`\n\n> Minimum bit size of the frame buffer. Defaults to 0.\n\nNew in pygame 2.0.0: Additional attributes:\n\n``` python\nGL_ACCELERATED_VISUAL,\nGL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,\nGL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,\nGL_SHARE_WITH_CURRENT_CONTEXT,\nGL_CONTEXT_RELEASE_BEHAVIOR,\nGL_FRAMEBUFFER_SRGB_CAPABLE\n```\n\n`GL_CONTEXT_PROFILE_MASK`\n\n> Sets the OpenGL profile to one of these values:\n>\n> ``` python\n> GL_CONTEXT_PROFILE_CORE             disable deprecated features\n> GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features\n> GL_CONTEXT_PROFILE_ES               allow only the ES feature\n>                                     subset of OpenGL\n> ```\n\n`GL_ACCELERATED_VISUAL`\n\n> Set to 1 to require hardware acceleration, or 0 to force software render. By default, both are allowed.\n\npygame.display.get_active()  \nReturns True when the display is active on the screen\n\nget_active() -\\> bool\n\nReturns True when the display Surface is considered actively renderable on the screen and may be visible to the user. This is the default state immediately after `pygame.display.set_mode()`. This method may return True even if the application is fully hidden behind another application window.\n\nThis will return False if the display Surface has been iconified or minimized (either via `pygame.display.iconify()` or via an OS specific method such as the minimize-icon available on most desktops).\n\nThe method can also return False for other reasons without the application being explicitly iconified or minimized by the user. A notable example being if the user has multiple virtual desktops and the display Surface is not on the active virtual desktop.\n\nNote\n\nThis function returning True is unrelated to whether the application has input focus. Please see `pygame.key.get_focused()` and `pygame.mouse.get_focused()` for APIs related to input focus.\n\npygame.display.iconify()  \nIconify the display surface\n\niconify() -\\> bool\n\nRequest the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.\n\nWhen the display is iconified `pygame.display.get_active()` will return `False`. The event queue should receive an `ACTIVEEVENT` event when the window has been iconified. Additionally, the event queue also receives a `WINDOWEVENT_MINIMIZED` event when the window has been iconified on pygame 2.\n\npygame.display.toggle_fullscreen()  \nSwitch between fullscreen and windowed displays\n\ntoggle_fullscreen() -\\> int\n\nSwitches the display window between windowed and fullscreen modes. Display driver support is not great when using pygame 1, but with pygame 2 it is the most reliable method to switch to and from fullscreen.\n\nSupported display drivers in pygame 1:\n\n> - x11 (Linux/Unix)\n>\n> - wayland (Linux/Unix)\n\nSupported display drivers in pygame 2:\n\n> - windows (Windows)\n>\n> - x11 (Linux/Unix)\n>\n> - wayland (Linux/Unix)\n>\n> - cocoa (OSX/Mac)\n\nNote\n\n[`toggle_fullscreen()`](#pygame.display.toggle_fullscreen \"pygame.display.toggle_fullscreen\") doesn't work on Windows unless the window size is in [`pygame.display.list_modes()`](#pygame.display.list_modes) or the window is created with the flag `pygame.SCALED`. See [issue \\#2380](https://github.com/pygame/pygame/issues/2380).\n\npygame.display.set_gamma()  \nChange the hardware gamma ramps\n\nset_gamma(red, green=None, blue=None) -\\> bool\n\nDEPRECATED: This functionality will go away in SDL3.\n\nSet the red, green, and blue gamma values on the display hardware. If the green and blue arguments are not passed, they will both be the same as red. Not all systems and hardware support gamma ramps, if the function succeeds it will return `True`.\n\nA gamma value of `1.0` creates a linear color table. Lower values will darken the display and higher values will brighten.\n\nDeprecated since pygame 2.2.0.\n\npygame.display.set_gamma_ramp()  \nChange the hardware gamma ramps with a custom lookup\n\nset_gamma_ramp(red, green, blue) -\\> bool\n\nDEPRECATED: This functionality will go away in SDL3.\n\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each argument should be sequence of 256 integers. The integers should range between `0` and `0xffff`. Not all systems and hardware support gamma ramps, if the function succeeds it will return `True`.\n\nDeprecated since pygame 2.2.0.\n\npygame.display.set_icon()  \nChange the system image for the display window\n\nset_icon(Surface) -\\> None\n\nSets the runtime icon the system will use to represent the display window. All windows default to a simple pygame logo for the window icon.\n\nNote that calling this function implicitly initializes `pygame.display`, if it was not initialized before.\n\nYou can pass any surface, but most systems want a smaller image around 32x32. The image can have colorkey transparency which will be passed to the system.\n\nSome systems do not allow the window icon to change after it has been shown. This function can be called before `pygame.display.set_mode()` to create the icon before the display mode is set.\n\npygame.display.set_caption()  \nSet the current window caption\n\nset_caption(title, icontitle=None) -\\> None\n\nIf the display has a window title, this function will change the name on the window. In pygame 1.x, some systems supported an alternate shorter title to be used for minimized displays, but in pygame 2 `icontitle` does nothing.\n\npygame.display.get_caption()  \nGet the current window caption\n\nget_caption() -\\> (title, icontitle)\n\nReturns the title and icontitle for the display window. In pygame 2.x these will always be the same value.\n\npygame.display.set_palette()  \nSet the display color palette for indexed displays\n\nset_palette(palette=None) -\\> None\n\nThis will change the video display color palette for 8-bit displays. This does not change the palette for the actual display Surface, only the palette that is used to display the Surface. If no palette argument is passed, the system default palette will be restored. The palette is a sequence of `RGB` triplets.\n\npygame.display.get_num_displays()  \nReturn the number of displays\n\nget_num_displays() -\\> int\n\nReturns the number of available displays. This is always 1 if [`pygame.get_sdl_version()`](pygame#pygame.get_sdl_version) returns a major version number below 2.\n\nNew in pygame 1.9.5.\n\npygame.display.get_window_size()  \nReturn the size of the window or screen\n\nget_window_size() -\\> tuple\n\nReturns the size of the window initialized with [`pygame.display.set_mode()`](#pygame.display.set_mode). This may differ from the size of the display surface if `SCALED` is used.\n\nNew in pygame 2.0.0.\n\npygame.display.get_allow_screensaver()  \nReturn whether the screensaver is allowed to run.\n\nget_allow_screensaver() -\\> bool\n\nReturn whether screensaver is allowed to run whilst the app is running. Default is `False`. By default pygame does not allow the screensaver during game play.\n\nNote\n\nSome platforms do not have a screensaver or support disabling the screensaver. Please see [`pygame.display.set_allow_screensaver()`](#pygame.display.set_allow_screensaver) for caveats with screensaver support.\n\nNew in pygame 2.0.0.\n\npygame.display.set_allow_screensaver()  \nSet whether the screensaver may run\n\nset_allow_screensaver(bool) -\\> None\n\nChange whether screensavers should be allowed whilst the app is running. The default value of the argument to the function is True. By default pygame does not allow the screensaver during game play.\n\nIf the screensaver has been disallowed due to this function, it will automatically be allowed to run when [`pygame.quit()`](pygame#pygame.quit) is called.\n\nIt is possible to influence the default value via the environment variable `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`, which can be set to either `0` (disable) or `1` (enable).\n\nNote\n\nDisabling screensaver is subject to platform support. When platform support is absent, this function will silently appear to work even though the screensaver state is unchanged. The lack of feedback is due to SDL not providing any supported method for determining whether it supports changing the screensaver state. `SDL_HINT_VIDEO_ALLOW_SCREENSAVER` is available in SDL 2.0.2 or later. SDL1.2 does not implement this.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/display.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/display.html](https://www.pygame.org/docs/ref/display.html)"
- name: display.flip
  id: ref/display#pygame.display.flip
  summary: This will update the contents of the entire display
  belongs_to: display
  description: |-
    pygame.display.flip()

    Update the full display Surface to the screen

    flip() -\> None

    This will update the contents of the entire display. If your display mode is using the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF` on pygame 1, this will wait for a vertical retrace and swap the surfaces.

    When using an `pygame.OPENGL` display mode this will perform a gl buffer swap.
- name: display.get_active
  id: ref/display#pygame.display.get_active
  summary: Returns True when the display Surface is considered actively renderable on the screen and may be visible to the user
  belongs_to: display
  description: |-
    pygame.display.get_active()

    Returns True when the display is active on the screen

    get_active() -\> bool

    Returns True when the display Surface is considered actively renderable on the screen and may be visible to the user. This is the default state immediately after `pygame.display.set_mode()`. This method may return True even if the application is fully hidden behind another application window.

    This will return False if the display Surface has been iconified or minimized (either via `pygame.display.iconify()` or via an OS specific method such as the minimize-icon available on most desktops).

    The method can also return False for other reasons without the application being explicitly iconified or minimized by the user. A notable example being if the user has multiple virtual desktops and the display Surface is not on the active virtual desktop.

    Note

    This function returning True is unrelated to whether the application has input focus. Please see `pygame.key.get_focused()` and `pygame.mouse.get_focused()` for APIs related to input focus.
- name: display.get_allow_screensaver
  id: ref/display#pygame.display.get_allow_screensaver
  summary: Return whether the screensaver is allowed to run
  belongs_to: display
  description: |-
    pygame.display.get_allow_screensaver()

    Return whether the screensaver is allowed to run.

    get_allow_screensaver() -\> bool

    Return whether screensaver is allowed to run whilst the app is running. Default is `False`. By default pygame does not allow the screensaver during game play.

    Note

    Some platforms do not have a screensaver or support disabling the screensaver. Please see [`pygame.display.set_allow_screensaver()`](#pygame.display.set_allow_screensaver) for caveats with screensaver support.

    New in pygame 2.0.0.
- name: display.get_caption
  id: ref/display#pygame.display.get_caption
  summary: Returns the title and icontitle for the display window
  belongs_to: display
  description: |-
    pygame.display.get_caption()

    Get the current window caption

    get_caption() -\> (title, icontitle)

    Returns the title and icontitle for the display window. In pygame 2.x these will always be the same value.
- name: display.get_desktop_sizes
  id: ref/display#pygame.display.get_desktop_sizes
  summary: This function returns the sizes of the currently configured virtual desktops as a list of (x, y) tuples of integers
  belongs_to: display
  description: |-
    pygame.display.get_desktop_sizes()

    Get sizes of active desktops

    get_desktop_sizes() -\> list

    This function returns the sizes of the currently configured virtual desktops as a list of (x, y) tuples of integers.

    The length of the list is not the same as the number of attached monitors, as a desktop can be mirrored across multiple monitors. The desktop sizes do not indicate the maximum monitor resolutions supported by the hardware, but the desktop size configured in the operating system.

    In order to fit windows into the desktop as it is currently configured, and to respect the resolution configured by the operating system in fullscreen mode, this function *should* be used to replace many use cases of `pygame.display.list_modes()` whenever applicable.

    New in pygame 2.0.0.
- name: display.get_driver
  id: ref/display#pygame.display.get_driver
  summary: Pygame chooses one of many available display backends when it is initialized
  belongs_to: display
  description: |-
    pygame.display.get_driver()

    Get the name of the pygame display backend

    get_driver() -\> name

    Pygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to see some of the common options.
- name: display.get_init
  id: ref/display#pygame.display.get_init
  summary: Returns True if the pygame.display module is currently initialized
  belongs_to: display
  description: |-
    pygame.display.get_init()

    Returns True if the display module has been initialized

    get_init() -\> bool

    Returns True if the [`pygame.display`](#module-pygame.display) module is currently initialized.
- name: display.get_num_displays
  id: ref/display#pygame.display.get_num_displays
  summary: Returns the number of available displays
  belongs_to: display
  description: |-
    pygame.display.get_num_displays()

    Return the number of displays

    get_num_displays() -\> int

    Returns the number of available displays. This is always 1 if [`pygame.get_sdl_version()`](pygame#pygame.get_sdl_version) returns a major version number below 2.

    New in pygame 1.9.5.
- name: display.get_surface
  id: ref/display#pygame.display.get_surface
  summary: Return a reference to the currently set display Surface
  belongs_to: display
  description: |-
    pygame.display.get_surface()

    Get a reference to the currently set display surface

    get_surface() -\> Surface

    Return a reference to the currently set display Surface. If no display mode has been set this will return None.
- name: display.get_window_size
  id: ref/display#pygame.display.get_window_size
  summary: Returns the size of the window initialized with pygame.display.set_mode()
  belongs_to: display
  description: |-
    pygame.display.get_window_size()

    Return the size of the window or screen

    get_window_size() -\> tuple

    Returns the size of the window initialized with [`pygame.display.set_mode()`](#pygame.display.set_mode). This may differ from the size of the display surface if `SCALED` is used.

    New in pygame 2.0.0.
- name: display.get_wm_info
  id: ref/display#pygame.display.get_wm_info
  summary: Creates a dictionary filled with string keys
  belongs_to: display
  description: |-
    pygame.display.get_wm_info()

    Get information about the current windowing system

    get_wm_info() -\> dict

    Creates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a "window" key with the value set to the system id for the current display.

    New in pygame 1.7.1.
- name: display.gl_get_attribute
  id: ref/display#pygame.display.gl_get_attribute
  summary: After calling pygame.display.set_mode() with the pygame.OPENGL flag, it is a good idea to check the value of any requested OpenGL attributes
  belongs_to: display
  description: |-
    pygame.display.gl_get_attribute()

    Get the value for an OpenGL flag for the current display

    gl_get_attribute(flag) -\> value

    After calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is a good idea to check the value of any requested OpenGL attributes. See `pygame.display.gl_set_attribute()` for a list of valid flags.
- name: display.gl_set_attribute
  id: ref/display#pygame.display.gl_set_attribute
  summary: When calling pygame.display.set_mode() with the pygame.OPENGL flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering
  belongs_to: display
  description: |-
    pygame.display.gl_set_attribute()

    Request an OpenGL display attribute for the display mode

    gl_set_attribute(flag, value) -\> None

    When calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering. OpenGL offers several other attributes you may want control over. Pass one of these attributes as the flag, and its appropriate value. This must be called before `pygame.display.set_mode()`.

    Many settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.

    The `OPENGL` flags are:

    ``` python
    GL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,
    GL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,
    GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO
    ```

    ` ``GL_MULTISAMPLEBUFFERS`` `

    > Whether to enable multisampling anti-aliasing. Defaults to 0 (disabled).
    >
    > Set `GL_MULTISAMPLESAMPLES` to a value above 0 to control the amount of anti-aliasing. A typical value is 2 or 3.

    ` ``GL_STENCIL_SIZE`` `

    > Minimum bit size of the stencil buffer. Defaults to 0.

    ` ``GL_DEPTH_SIZE`` `

    > Minimum bit size of the depth buffer. Defaults to 16.

    ` ``GL_STEREO`` `

    > 1 enables stereo 3D. Defaults to 0.

    ` ``GL_BUFFER_SIZE`` `

    > Minimum bit size of the frame buffer. Defaults to 0.

    New in pygame 2.0.0: Additional attributes:

    ``` python
    GL_ACCELERATED_VISUAL,
    GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,
    GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,
    GL_SHARE_WITH_CURRENT_CONTEXT,
    GL_CONTEXT_RELEASE_BEHAVIOR,
    GL_FRAMEBUFFER_SRGB_CAPABLE
    ```

    ` ``GL_CONTEXT_PROFILE_MASK`` `

    > Sets the OpenGL profile to one of these values:
    >
    > ``` python
    > GL_CONTEXT_PROFILE_CORE             disable deprecated features
    > GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features
    > GL_CONTEXT_PROFILE_ES               allow only the ES feature
    >                                     subset of OpenGL
    > ```

    ` ``GL_ACCELERATED_VISUAL`` `

    > Set to 1 to require hardware acceleration, or 0 to force software render. By default, both are allowed.
- name: display.iconify
  id: ref/display#pygame.display.iconify
  summary: Request the window for the display surface be iconified or hidden
  belongs_to: display
  description: |-
    pygame.display.iconify()

    Iconify the display surface

    iconify() -\> bool

    Request the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.

    When the display is iconified `pygame.display.get_active()` will return `False`. The event queue should receive an `ACTIVEEVENT` event when the window has been iconified. Additionally, the event queue also receives a `WINDOWEVENT_MINIMIZED` event when the window has been iconified on pygame 2.
- name: display.Info
  id: ref/display#pygame.display.Info
  summary: Creates a simple object containing several attributes to describe the current graphics environment
  belongs_to: display
  description: |-
    pygame.display.Info()

    Create a video display information object

    Info() -\> VideoInfo

    Creates a simple object containing several attributes to describe the current graphics environment. If this is called before `pygame.display.set_mode()` some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:

    ``` python
    hw:         1 if the display is hardware accelerated
    wm:         1 if windowed display modes can be used
    video_mem:  The megabytes of video memory on the display. This is 0 if
                unknown
    bitsize:    Number of bits used to store each pixel
    bytesize:   Number of bytes used to store each pixel
    masks:      Four values used to pack RGBA values into pixels
    shifts:     Four values used to pack RGBA values into pixels
    losses:     Four values used to pack RGBA values into pixels
    blit_hw:    1 if hardware Surface blitting is accelerated
    blit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated
    blit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated
    blit_sw:    1 if software Surface blitting is accelerated
    blit_sw_CC: 1 if software Surface colorkey blitting is accelerated
    blit_sw_A:  1 if software Surface pixel alpha blitting is accelerated
    current_h, current_w:  Height and width of the current video mode, or
                of the desktop mode if called before the display.set_mode
                is called. (current_h, current_w are available since
                SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if
                an old SDL is being used.
    ```
- name: display.init
  id: ref/display#pygame.display.init
  summary: Initializes the pygame display module
  belongs_to: display
  description: |-
    pygame.display.init()

    Initialize the display module

    init() -\> None

    Initializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level `pygame.init()`.

    Pygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable `SDL_VIDEODRIVER` can be set to control which backend is used. The systems with multiple choices are listed here.

    ``` python
    Windows : windib, directx
    Unix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib
    ```

    On some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable `SDL_WINDOWID` must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.

    It is harmless to call this more than once, repeated calls have no effect.
- name: display.list_modes
  id: ref/display#pygame.display.list_modes
  summary: This function returns a list of possible sizes for a specified color depth
  belongs_to: display
  description: |-
    pygame.display.list_modes()

    Get list of available fullscreen modes

    list_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -\> list

    This function returns a list of possible sizes for a specified color depth. The return value will be an empty list if no display modes are available with the given arguments. A return value of `-1` means that any requested size should work (this is likely the case for windowed modes). Mode sizes are sorted from biggest to smallest.

    If depth is `0`, the current/best color depth for the display is used. The flags defaults to `pygame.FULLSCREEN`, but you may need to add additional flags for specific fullscreen modes.

    The display index `0` means the default display is used.

    Since pygame 2.0, `pygame.display.get_desktop_sizes()` has taken over some use cases from `pygame.display.list_modes()`:

    To find a suitable size for non-fullscreen windows, it is preferable to use `pygame.display.get_desktop_sizes()` to get the size of the *current* desktop, and to then choose a smaller window size. This way, the window is guaranteed to fit, even when the monitor is configured to a lower resolution than the maximum supported by the hardware.

    To avoid changing the physical monitor resolution, it is also preferable to use `pygame.display.get_desktop_sizes()` to determine the fullscreen resolution. Developers are strongly advised to default to the current physical monitor resolution unless the user explicitly requests a different one (e.g. in an options menu or configuration file).

    Changed in pygame 1.9.5: `display` argument added
- name: display.mode_ok
  id: ref/display#pygame.display.mode_ok
  summary: This function uses the same arguments as pygame.display.set_mode()
  belongs_to: display
  description: |-
    pygame.display.mode_ok()

    Pick the best color depth for a display mode

    mode_ok(size, flags=0, depth=0, display=0) -\> depth

    This function uses the same arguments as `pygame.display.set_mode()`. It is used to determine if a requested display mode is available. It will return `0` if the display mode cannot be set. Otherwise it will return a pixel depth that best matches the display asked for.

    Usually the depth argument is not passed, but some platforms can support multiple display depths. If passed it will hint to which depth is a better match.

    The function will return `0` if the passed display flags cannot be set.

    The display index `0` means the default display is used.

    Changed in pygame 1.9.5: `display` argument added
- name: display.quit
  id: ref/display#pygame.display.quit
  summary: This will shut down the entire display module
  belongs_to: display
  description: |-
    pygame.display.quit()

    Uninitialize the display module

    quit() -\> None

    This will shut down the entire display module. This means any active displays will be closed. This will also be handled automatically when the program exits.

    It is harmless to call this more than once, repeated calls have no effect.
- name: display.set_allow_screensaver
  id: ref/display#pygame.display.set_allow_screensaver
  summary: Change whether screensavers should be allowed whilst the app is running
  belongs_to: display
  description: "pygame.display.set_allow_screensaver()\n\nSet whether the screensaver may run\n\nset_allow_screensaver(bool) -\\> None\n\nChange whether screensavers should be allowed whilst the app is running. The default value of the argument to the function is True. By default pygame does not allow the screensaver during game play.\n\nIf the screensaver has been disallowed due to this function, it will automatically be allowed to run when [`pygame.quit()`](pygame#pygame.quit) is called.\n\nIt is possible to influence the default value via the environment variable `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`, which can be set to either `0` (disable) or `1` (enable).\n\nNote\n\nDisabling screensaver is subject to platform support. When platform support is absent, this function will silently appear to work even though the screensaver state is unchanged. The lack of feedback is due to SDL not providing any supported method for determining whether it supports changing the screensaver state. `SDL_HINT_VIDEO_ALLOW_SCREENSAVER` is available in SDL 2.0.2 or later. SDL1.2 does not implement this.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/display.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/display.html](https://www.pygame.org/docs/ref/display.html)"
- name: display.set_caption
  id: ref/display#pygame.display.set_caption
  summary: If the display has a window title, this function will change the name on the window
  belongs_to: display
  description: |-
    pygame.display.set_caption()

    Set the current window caption

    set_caption(title, icontitle=None) -\> None

    If the display has a window title, this function will change the name on the window. In pygame 1.x, some systems supported an alternate shorter title to be used for minimized displays, but in pygame 2 `icontitle` does nothing.
- name: display.set_gamma
  id: ref/display#pygame.display.set_gamma
  summary: 'DEPRECATED: This functionality will go away in SDL3'
  belongs_to: display
  description: |-
    pygame.display.set_gamma()

    Change the hardware gamma ramps

    set_gamma(red, green=None, blue=None) -\> bool

    DEPRECATED: This functionality will go away in SDL3.

    Set the red, green, and blue gamma values on the display hardware. If the green and blue arguments are not passed, they will both be the same as red. Not all systems and hardware support gamma ramps, if the function succeeds it will return `True`.

    A gamma value of `1.0` creates a linear color table. Lower values will darken the display and higher values will brighten.

    Deprecated since pygame 2.2.0.
- name: display.set_gamma_ramp
  id: ref/display#pygame.display.set_gamma_ramp
  summary: 'DEPRECATED: This functionality will go away in SDL3'
  belongs_to: display
  description: |-
    pygame.display.set_gamma_ramp()

    Change the hardware gamma ramps with a custom lookup

    set_gamma_ramp(red, green, blue) -\> bool

    DEPRECATED: This functionality will go away in SDL3.

    Set the red, green, and blue gamma ramps with an explicit lookup table. Each argument should be sequence of 256 integers. The integers should range between `0` and `0xffff`. Not all systems and hardware support gamma ramps, if the function succeeds it will return `True`.

    Deprecated since pygame 2.2.0.
- name: display.set_icon
  id: ref/display#pygame.display.set_icon
  summary: Sets the runtime icon the system will use to represent the display window
  belongs_to: display
  description: |-
    pygame.display.set_icon()

    Change the system image for the display window

    set_icon(Surface) -\> None

    Sets the runtime icon the system will use to represent the display window. All windows default to a simple pygame logo for the window icon.

    Note that calling this function implicitly initializes `pygame.display`, if it was not initialized before.

    You can pass any surface, but most systems want a smaller image around 32x32. The image can have colorkey transparency which will be passed to the system.

    Some systems do not allow the window icon to change after it has been shown. This function can be called before `pygame.display.set_mode()` to create the icon before the display mode is set.
- name: display.set_mode
  id: ref/display#pygame.display.set_mode
  summary: This function will create a display Surface
  belongs_to: display
  description: |-
    pygame.display.set_mode()

    Initialize a window or screen for display

    set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -\> Surface

    This function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system.

    Note that calling this function implicitly initializes `pygame.display`, if it was not initialized before.

    The size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color.

    The Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor.

    If no size is passed or is set to `(0,``0)` and pygame uses `SDL` version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to `0`, the Surface will have the same width or height as the screen resolution. Using a `SDL` version prior to 1.2.10 will raise an exception.

    It is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.

    When requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size.

    On high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases.

    The flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe "\|" character). Here are the display flags you will want to choose from:

    ``` python
    pygame.FULLSCREEN    create a fullscreen display
    pygame.DOUBLEBUF     only applicable with OPENGL
    pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
    pygame.OPENGL        create an OpenGL-renderable display
    pygame.RESIZABLE     display window should be sizeable
    pygame.NOFRAME       display window will have no border or controls
    pygame.SCALED        resolution depends on desktop size and scale graphics
    pygame.SHOWN         window is opened in visible mode (default)
    pygame.HIDDEN        window is opened in hidden mode
    ```

    New in pygame 2.0.0: `SCALED`, `SHOWN` and `HIDDEN`

    By setting the `vsync` parameter to `1`, it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to `set_mode()` with the `pygame.OPENGL` or `pygame.SCALED` flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to `set_mode()` that may give you a display with vsync:

    ``` python
    flags = pygame.OPENGL | pygame.FULLSCREEN
    window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)
    ```

    Vsync behaviour is considered experimental, and may change in future releases.

    New in pygame 2.0.0: ` ``vsync`` `

    Basic example:

    ``` python
    # Open a window on the screen
    screen_width=700
    screen_height=400
    screen=pygame.display.set_mode([screen_width, screen_height])
    ```

    The display index `0` means the default display is used. If no display index argument is provided, the default display can be overridden with an environment variable.

    Changed in pygame 1.9.5: `display` argument added

    Changed in pygame 2.1.3: pygame now ensures that subsequent calls to this function clears the window to black. On older versions, this was an implementation detail on the major platforms this function was tested with.
- name: display.set_palette
  id: ref/display#pygame.display.set_palette
  summary: This will change the video display color palette for 8-bit displays
  belongs_to: display
  description: |-
    pygame.display.set_palette()

    Set the display color palette for indexed displays

    set_palette(palette=None) -\> None

    This will change the video display color palette for 8-bit displays. This does not change the palette for the actual display Surface, only the palette that is used to display the Surface. If no palette argument is passed, the system default palette will be restored. The palette is a sequence of `RGB` triplets.
- name: display.toggle_fullscreen
  id: ref/display#pygame.display.toggle_fullscreen
  summary: Switches the display window between windowed and fullscreen modes
  belongs_to: display
  description: |-
    pygame.display.toggle_fullscreen()

    Switch between fullscreen and windowed displays

    toggle_fullscreen() -\> int

    Switches the display window between windowed and fullscreen modes. Display driver support is not great when using pygame 1, but with pygame 2 it is the most reliable method to switch to and from fullscreen.

    Supported display drivers in pygame 1:

    > - x11 (Linux/Unix)
    >
    > - wayland (Linux/Unix)

    Supported display drivers in pygame 2:

    > - windows (Windows)
    >
    > - x11 (Linux/Unix)
    >
    > - wayland (Linux/Unix)
    >
    > - cocoa (OSX/Mac)

    Note

    [`toggle_fullscreen()`](#pygame.display.toggle_fullscreen "pygame.display.toggle_fullscreen") doesn't work on Windows unless the window size is in [`pygame.display.list_modes()`](#pygame.display.list_modes) or the window is created with the flag `pygame.SCALED`. See [issue \#2380](https://github.com/pygame/pygame/issues/2380).
- name: display.update
  id: ref/display#pygame.display.update
  summary: This function is like an optimized version of pygame.display.flip() for software displays
  belongs_to: display
  description: |-
    pygame.display.update()

    Update portions of the screen for software displays

    update(rectangle=None) -\> None

    update(rectangle_list) -\> None

    This function is like an optimized version of `pygame.display.flip()` for software displays. It allows only a portion of the screen to be updated, instead of the entire area. If no argument is passed it updates the entire Surface area like `pygame.display.flip()`.

    Note that calling `display.update(None)` means no part of the window is updated. Whereas `display.update()` means the whole window is updated.

    You can pass the function a single rectangle, or a sequence of rectangles. It is more efficient to pass many rectangles at once than to call update multiple times with single or a partial list of rectangles. If passing a sequence of rectangles it is safe to include None values in the list, which will be skipped.

    This call cannot be used on `pygame.OPENGL` displays and will generate an exception.
- name: draw
  id: ref/draw
  summary: Draw several simple shapes to a surface
  description: "pygame.draw  \npygame module for drawing shapes\n\nDraw several simple shapes to a surface. These functions will work for rendering to any format of surface.\n\nMost of the functions take a width argument to represent the size of stroke (thickness) around the edge of the shape. If a width of 0 is passed the shape will be filled (solid).\n\nAll the drawing functions respect the clip area for the surface and will be constrained to that area. The functions return a rectangle representing the bounding area of changed pixels. This bounding rectangle is the 'minimum' bounding box that encloses the affected area.\n\nAll the drawing functions accept a color argument that can be one of the following formats:\n\n> - a [`pygame.Color`](color#pygame.Color) object\n>\n> - an `(RGB)` triplet (tuple/list)\n>\n> - an `(RGBA)` quadruplet (tuple/list)\n>\n> - an integer value that has been mapped to the surface's pixel format (see [`pygame.Surface.map_rgb()`](surface#pygame.Surface.map_rgb) and [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb))\n\nA color's alpha value will be written directly into the surface (if the surface contains pixel alphas), but the draw function will not draw transparently.\n\nThese functions temporarily lock the surface they are operating on. Many sequential drawing calls can be sped up by locking and unlocking the surface object around the draw calls (see [`pygame.Surface.lock()`](surface#pygame.Surface.lock) and [`pygame.Surface.unlock()`](surface#pygame.Surface.unlock)).\n\nNote\n\nSee the [`pygame.gfxdraw`](gfxdraw#module-pygame.gfxdraw) module for alternative draw methods.\n\npygame.draw.rect()  \ndraw a rectangle\n\nrect(surface, color, rect) -\\> Rect\n\nrect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -\\> Rect\n\nDraws a rectangle on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the `rect` parameter)\n\n  > if `width`` ``==`` ``0`, (default) fill the rectangle\n  >\n  > if `width`` ``>`` ``0`, used for line thickness\n  >\n  > if `width`` ``<`` ``0`, nothing will be drawn\n  >\n  >   \n\n  Changed in pygame 2.1.1: Drawing rects with width now draws the width correctly inside the rect's area, rather than using an internal call to draw.lines(), which had half the width spill outside the rect area.\n\n- **border_radius** (*int*) -- (optional) used for drawing rectangle with rounded corners. The supported range is \\[0, min(height, width) / 2\\], with 0 representing a rectangle without rounded corners.\n\n- **border_top_left_radius** (*int*) -- (optional) used for setting the value of top left border. If you don't set this value, it will use the border_radius value.\n\n- **border_top_right_radius** (*int*) -- (optional) used for setting the value of top right border. If you don't set this value, it will use the border_radius value.\n\n- **border_bottom_left_radius** (*int*) -- (optional) used for setting the value of bottom left border. If you don't set this value, it will use the border_radius value.\n\n- **border_bottom_right_radius** (*int*) --\n\n  (optional) used for setting the value of bottom right border. If you don't set this value, it will use the border_radius value.\n\n  > if `border_radius`` ``<`` ``1` it will draw rectangle without rounded corners\n  >\n  > if any of border radii has the value `<`` ``0` it will use value of the border_radius\n  >\n  > If sum of radii on the same side of the rectangle is greater than the rect size the radii\n  >\n  > will get scaled\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nNote\n\nThe [`pygame.Surface.fill()`](surface#pygame.Surface.fill) method works just as well for drawing filled rectangles and can be hardware accelerated on some platforms.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius.\n\npygame.draw.polygon()  \ndraw a polygon\n\npolygon(surface, color, points) -\\> Rect\n\npolygon(surface, color, points, width=0) -\\> Rect\n\nDraws a polygon on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates that make up the vertices of the polygon, each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats, e.g. `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]`\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the polygon is to be filled\n\n  > if width == 0, (default) fill the polygon\n  >\n  > if width \\> 0, used for line thickness\n  >\n  > if width \\< 0, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will grow outside the original boundary of the polygon. For more details on how the thickness for edge lines grow, refer to the `width` notes of the [`pygame.draw.line()`](#pygame.draw.line) function.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nNote\n\nFor an aapolygon, use [`aalines()`](#pygame.draw.aalines \"pygame.draw.aalines\") with `closed=True`.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.circle()  \ndraw a circle\n\ncircle(surface, color, center, radius) -\\> Rect\n\ncircle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -\\> Rect\n\nDraws a circle on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **center** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- center point of the circle as a sequence of 2 ints/floats, e.g. `(x,`` ``y)`\n\n- **radius** (*int* *or* *float*) -- radius of the circle, measured from the `center` parameter, nothing will be drawn if the `radius` is less than 1\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the circle is to be filled\n\n  > if `width`` ``==`` ``0`, (default) fill the circle\n  >\n  > if `width`` ``>`` ``0`, used for line thickness\n  >\n  > if `width`` ``<`` ``0`, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will only grow inward.\n\n- **draw_top_right** (*bool*) -- (optional) if this is set to True then the top right corner of the circle will be drawn\n\n- **draw_top_left** (*bool*) -- (optional) if this is set to True then the top left corner of the circle will be drawn\n\n- **draw_bottom_left** (*bool*) -- (optional) if this is set to True then the bottom left corner of the circle will be drawn\n\n- **draw_bottom_right** (*bool*) --\n\n  (optional) if this is set to True then the bottom right corner of the circle will be drawn\n\n  > if any of the draw_circle_part is True then it will draw all circle parts that have the True\n  >\n  > value, otherwise it will draw the entire circle.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `center` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **TypeError** -- if `center` is not a sequence of two numbers\n\n- **TypeError** -- if `radius` is not a number\n\nChanged in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn when the radius is 0 (a pixel at the `center` coordinates used to be drawn when the radius equaled 0). Floats, and Vector2 are accepted for the `center` param. The drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants.\n\npygame.draw.ellipse()  \ndraw an ellipse\n\nellipse(surface, color, rect) -\\> Rect\n\nellipse(surface, color, rect, width=0) -\\> Rect\n\nDraws an ellipse on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to indicate the position and dimensions of the ellipse, the ellipse will be centered inside the rectangle and bounded by it\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the `rect` parameter)\n\n  > if `width`` ``==`` ``0`, (default) fill the ellipse\n  >\n  > if `width`` ``>`` ``0`, used for line thickness\n  >\n  > if `width`` ``<`` ``0`, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will only grow inward from the original boundary of the `rect` parameter.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.arc()  \ndraw an elliptical arc\n\narc(surface, color, rect, start_angle, stop_angle) -\\> Rect\n\narc(surface, color, rect, start_angle, stop_angle, width=1) -\\> Rect\n\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop positions of the arc. The arc is drawn in a counterclockwise direction from the `start_angle` to the `stop_angle`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to indicate the position and dimensions of the ellipse which the arc will be based on, the ellipse will be centered inside the rectangle\n\n- **start_angle** (*float*) -- start angle of the arc in radians\n\n- **stop_angle** (*float*) --\n\n  stop angle of the arc in radians\n\n  > if `start_angle`` ``<`` ``stop_angle`, the arc is drawn in a counterclockwise direction from the `start_angle` to the `stop_angle`\n  >\n  > if `start_angle`` ``>`` ``stop_angle`, tau (tau == 2 \\* pi) will be added to the `stop_angle`, if the resulting stop angle value is greater than the `start_angle` the above `start_angle`` ``<`` ``stop_angle` case applies, otherwise nothing will be drawn\n  >\n  > if `start_angle`` ``==`` ``stop_angle`, nothing will be drawn\n  >\n  >   \n\n- **width** (*int*) --\n\n  (optional) used for line thickness (not to be confused with the width value of the `rect` parameter)\n\n  > if `width`` ``==`` ``0`, nothing will be drawn\n  >\n  > if `width`` ``>`` ``0`, (default is 1) used for line thickness\n  >\n  > if `width`` ``<`` ``0`, same as `width`` ``==`` ``0`\n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will only grow inward from the original boundary of the `rect` parameter.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.line()  \ndraw a straight line\n\nline(surface, color, start_pos, end_pos) -\\> Rect\n\nline(surface, color, start_pos, end_pos, width=1) -\\> Rect\n\nDraws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **start_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- start position of the line, (x, y)\n\n- **end_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- end position of the line, (x, y)\n\n- **width** (*int*) --\n\n  (optional) used for line thickness\n\n  if width \\>= 1, used for line thickness (default is 1)\n\n  if width \\< 1, nothing will be drawn\n\n    \n\n  Note\n\n  When using `width` values `>`` ``1`, lines will grow as follows.\n\n  For odd `width` values, the thickness of each line grows with the original line being in the center.\n\n  For even `width` values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope \\< 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope \\>= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `start_pos` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n**TypeError** -- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.lines()  \ndraw multiple contiguous straight line segments\n\nlines(surface, color, closed, points) -\\> Rect\n\nlines(surface, color, closed, points, width=1) -\\> Rect\n\nDraws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **closed** (*bool*) -- if `True` an additional line segment is drawn between the first and last points in the `points` sequence\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 2 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)` and from `(x2,`` ``y2)` to `(x3,`` ``y3)`, additionally if the `closed` parameter is `True` another line segment will be drawn from `(x3,`` ``y3)` to `(x1,`` ``y1)`\n\n- **width** (*int*) --\n\n  (optional) used for line thickness\n\n  if width \\>= 1, used for line thickness (default is 1)\n\n  if width \\< 1, nothing will be drawn\n\n    \n\n  Note\n\n  When using `width` values `>`` ``1` refer to the `width` notes of [`line()`](#pygame.draw.line \"pygame.draw.line\") for details on how thick lines grow.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``2` (must have at least 2 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.aaline()  \ndraw a straight antialiased line\n\naaline(surface, color, start_pos, end_pos) -\\> Rect\n\naaline(surface, color, start_pos, end_pos, blend=1) -\\> Rect\n\nDraws a straight antialiased line on the given surface.\n\nThe line has a thickness of one pixel and the endpoints have a height and width of one pixel each.\n\nThe way a line and its endpoints are drawn:  \nIf both endpoints are equal, only a single pixel is drawn (after rounding floats to nearest integer).\n\nOtherwise if the line is not steep (i.e. if the length along the x-axis is greater than the height along the y-axis):\n\n> For each endpoint:\n>\n> > If `x`, the endpoint's x-coordinate, is a whole number find which pixels would be covered by it and draw them.\n> >\n> > Otherwise:\n> >\n> > > Calculate the position of the nearest point with a whole number for its x-coordinate, when extending the line past the endpoint.\n> > >\n> > > Find which pixels would be covered and how much by that point.\n> > >\n> > > If the endpoint is the left one, multiply the coverage by (1 - the decimal part of `x`).\n> > >\n> > > Otherwise multiply the coverage by the decimal part of `x`.\n> > >\n> > > Then draw those pixels.\n> > >\n> > > e.g.:  \n> > > The left endpoint of the line `((1,`` ``1.3),`` ``(5,`` ``3))` would cover 70% of the pixel `(1,`` ``1)` and 30% of the pixel `(1,`` ``2)` while the right one would cover 100% of the pixel `(5,`` ``3)`.\n> > >\n> > > The left endpoint of the line `((1.2,`` ``1.4),`` ``(4.6,`` ``3.1))` would cover 56% *(i.e. 0.8 \\* 70%)* of the pixel `(1,`` ``1)` and 24% *(i.e. 0.8 \\* 30%)* of the pixel `(1,`` ``2)` while the right one would cover 42% *(i.e. 0.6 \\* 70%)* of the pixel `(5,`` ``3)` and 18% *(i.e. 0.6 \\* 30%)* of the pixel `(5,`` ``4)` while the right\n>\n> Then for each point between the endpoints, along the line, whose x-coordinate is a whole number:\n>\n> > Find which pixels would be covered and how much by that point and draw them.\n> >\n> > e.g.:  \n> > The points along the line `((1,`` ``1),`` ``(4,`` ``2.5))` would be `(2,`` ``1.5)` and `(3,`` ``2)` and would cover 50% of the pixel `(2,`` ``1)`, 50% of the pixel `(2,`` ``2)` and 100% of the pixel `(3,`` ``2)`.\n> >\n> > The points along the line `((1.2,`` ``1.4),`` ``(4.6,`` ``3.1))` would be `(2,`` ``1.8)` (covering 20% of the pixel `(2,`` ``1)` and 80% of the pixel `(2,`` ``2)`), `(3,`` ``2.3)` (covering 70% of the pixel `(3,`` ``2)` and 30% of the pixel `(3,`` ``3)`) and `(4,`` ``2.8)` (covering 20% of the pixel `(2,`` ``1)` and 80% of the pixel `(2,`` ``2)`)\n\nOtherwise do the same for steep lines as for non-steep lines except along the y-axis instead of the x-axis (using `y` instead of `x`, top instead of left and bottom instead of right).\n\nNote\n\nRegarding float values for coordinates, a point with coordinate consisting of two whole numbers is considered being right in the center of said pixel (and having a height and width of 1 pixel would therefore completely cover it), while a point with coordinate where one (or both) of the numbers have non-zero decimal parts would be partially covering two (or four if both numbers have decimal parts) adjacent pixels, *e.g.* the point `(1.4,`` ``2)` covers 60% of the pixel `(1,`` ``2)` and 40% of the pixel `(2,2)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **start_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- start position of the line, (x, y)\n\n- **end_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- end position of the line, (x, y)\n\n- **blend** (*int*) -- (optional) (deprecated) if non-zero (default) the line will be blended with the surface's existing pixel shades, otherwise it will overwrite them\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `start_pos` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n**TypeError** -- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.aalines()  \ndraw multiple contiguous straight antialiased line segments\n\naalines(surface, color, closed, points) -\\> Rect\n\naalines(surface, color, closed, points, blend=1) -\\> Rect\n\nDraws a sequence of contiguous straight antialiased lines on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **closed** (*bool*) -- if `True` an additional line segment is drawn between the first and last points in the `points` sequence\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 2 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)` and from `(x2,`` ``y2)` to `(x3,`` ``y3)`, additionally if the `closed` parameter is `True` another line segment will be drawn from `(x3,`` ``y3)` to `(x1,`` ``y1)`\n\n- **blend** (*int*) -- (optional) (deprecated) if non-zero (default) each line will be blended with the surface's existing pixel shades, otherwise the pixels will be overwritten\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``2` (must have at least 2 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nExample code for draw module.\n\n``` python\nimport pygame\nfrom math import pi\n\n# Initialize pygame\npygame.init()\n\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\n\npygame.display.set_caption(\"Example code for the draw module\")\n\n# Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\n\nwhile not done:\n    # This limits the while loop to a max of 60 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(60)\n\n    for event in pygame.event.get():  # User did something\n        if event.type == pygame.QUIT:  # If user clicked close\n            done = True  # Flag that we are done so we exit this loop\n\n    # Clear the screen and set the screen background\n    screen.fill(\"white\")\n\n    # Draw on the screen a green line from (0, 0) to (50, 30)\n    # 5 pixels wide. Uses (r, g, b) color - medium sea green.\n    pygame.draw.line(screen, (60, 179, 113), [0, 0], [50, 30], 5)\n\n    # Draw on the screen a green line from (0, 50) to (50, 80)\n    # Because it is an antialiased line, it is 1 pixel wide.\n    # Uses (r, g, b) color - medium sea green.\n    pygame.draw.aaline(screen, (60, 179, 113), [0, 50], [50, 80], True)\n\n    # Draw on the screen 3 black lines, each 5 pixels wide.\n    # The 'False' means the first and last points are not connected.\n    pygame.draw.lines(\n        screen, \"black\", False, [[0, 80], [50, 90], [200, 80], [220, 30]], 5\n    )\n\n    # Draw a rectangle outline\n    pygame.draw.rect(screen, \"black\", [75, 10, 50, 20], 2)\n\n    # Draw a solid rectangle. Same color as \"black\" above, specified in a new way\n    pygame.draw.rect(screen, (0, 0, 0), [150, 10, 50, 20])\n\n    # Draw a rectangle with rounded corners\n    pygame.draw.rect(screen, \"green\", [115, 210, 70, 40], 10, border_radius=15)\n    pygame.draw.rect(\n        screen,\n        \"red\",\n        [135, 260, 50, 30],\n        0,\n        border_radius=10,\n        border_top_left_radius=0,\n        border_bottom_right_radius=15,\n    )\n\n    # Draw an ellipse outline, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [225, 10, 50, 20], 2)\n\n    # Draw an solid ellipse, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [300, 10, 50, 20])\n\n    # This draws a triangle using the polygon command\n    pygame.draw.polygon(screen, \"black\", [[100, 100], [0, 200], [200, 200]], 5)\n\n    # Draw an arc as part of an ellipse.\n    # Use radians to determine what angle to draw.\n    pygame.draw.arc(screen, \"black\", [210, 75, 150, 125], 0, pi / 2, 2)\n    pygame.draw.arc(screen, \"green\", [210, 75, 150, 125], pi / 2, pi, 2)\n    pygame.draw.arc(screen, \"blue\", [210, 75, 150, 125], pi, 3 * pi / 2, 2)\n    pygame.draw.arc(screen, \"red\", [210, 75, 150, 125], 3 * pi / 2, 2 * pi, 2)\n\n    # Draw a circle\n    pygame.draw.circle(screen, \"blue\", [60, 250], 40)\n\n    # Draw only one circle quadrant\n    pygame.draw.circle(screen, \"blue\", [250, 250], 40, 0, draw_top_right=True)\n    pygame.draw.circle(screen, \"red\", [250, 250], 40, 30, draw_top_left=True)\n    pygame.draw.circle(screen, \"green\", [250, 250], 40, 20, draw_bottom_left=True)\n    pygame.draw.circle(screen, \"black\", [250, 250], 40, 10, draw_bottom_right=True)\n\n    # Go ahead and update the screen with what we've drawn.\n    # This MUST happen after all the other drawing commands.\n    pygame.display.flip()\n\n# Be IDLE friendly\npygame.quit()\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/draw.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/draw.html](https://www.pygame.org/docs/ref/draw.html)"
- name: draw.aaline
  id: ref/draw#pygame.draw.aaline
  summary: Draws a straight antialiased line on the given surface
  belongs_to: draw
  description: |-
    pygame.draw.aaline()

    draw a straight antialiased line

    aaline(surface, color, start_pos, end_pos) -\> Rect

    aaline(surface, color, start_pos, end_pos, blend=1) -\> Rect

    Draws a straight antialiased line on the given surface.

    The line has a thickness of one pixel and the endpoints have a height and width of one pixel each.

    The way a line and its endpoints are drawn:

    If both endpoints are equal, only a single pixel is drawn (after rounding floats to nearest integer).

    Otherwise if the line is not steep (i.e. if the length along the x-axis is greater than the height along the y-axis):

    > For each endpoint:
    >
    > > If `x`, the endpoint's x-coordinate, is a whole number find which pixels would be covered by it and draw them.
    > >
    > > Otherwise:
    > >
    > > > Calculate the position of the nearest point with a whole number for its x-coordinate, when extending the line past the endpoint.
    > > >
    > > > Find which pixels would be covered and how much by that point.
    > > >
    > > > If the endpoint is the left one, multiply the coverage by (1 - the decimal part of `x`).
    > > >
    > > > Otherwise multiply the coverage by the decimal part of `x`.
    > > >
    > > > Then draw those pixels.
    > > >
    > > > e.g.:
    > > >
    > > > The left endpoint of the line `((1,``1.3),``(5,``3))` would cover 70% of the pixel `(1,``1)` and 30% of the pixel `(1,``2)` while the right one would cover 100% of the pixel `(5,``3)`.
    > > >
    > > > The left endpoint of the line `((1.2,``1.4),``(4.6,``3.1))` would cover 56% *(i.e. 0.8 \* 70%)* of the pixel `(1,``1)` and 24% *(i.e. 0.8 \* 30%)* of the pixel `(1,``2)` while the right one would cover 42% *(i.e. 0.6 \* 70%)* of the pixel `(5,``3)` and 18% *(i.e. 0.6 \* 30%)* of the pixel `(5,``4)` while the right
    >
    > Then for each point between the endpoints, along the line, whose x-coordinate is a whole number:
    >
    > > Find which pixels would be covered and how much by that point and draw them.
    > >
    > > e.g.:
    > >
    > > The points along the line `((1,``1),``(4,``2.5))` would be `(2,``1.5)` and `(3,``2)` and would cover 50% of the pixel `(2,``1)`, 50% of the pixel `(2,``2)` and 100% of the pixel `(3,``2)`.
    > >
    > > The points along the line `((1.2,``1.4),``(4.6,``3.1))` would be `(2,``1.8)` (covering 20% of the pixel `(2,``1)` and 80% of the pixel `(2,``2)`), `(3,``2.3)` (covering 70% of the pixel `(3,``2)` and 30% of the pixel `(3,``3)`) and `(4,``2.8)` (covering 20% of the pixel `(2,``1)` and 80% of the pixel `(2,``2)`)

    Otherwise do the same for steep lines as for non-steep lines except along the y-axis instead of the x-axis (using `y` instead of `x`, top instead of left and bottom instead of right).

    Note

    Regarding float values for coordinates, a point with coordinate consisting of two whole numbers is considered being right in the center of said pixel (and having a height and width of 1 pixel would therefore completely cover it), while a point with coordinate where one (or both) of the numbers have non-zero decimal parts would be partially covering two (or four if both numbers have decimal parts) adjacent pixels, *e.g.* the point `(1.4,``2)` covers 60% of the pixel `(1,``2)` and 40% of the pixel `(2,2)`.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *int* *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    - **start_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 "pygame.math.Vector2")*(int* *or* *float,* *int* *or* *float)*) -- start position of the line, (x, y)

    - **end_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 "pygame.math.Vector2")*(int* *or* *float,* *int* *or* *float)*) -- end position of the line, (x, y)

    - **blend** (*int*) -- (optional) (deprecated) if non-zero (default) the line will be blended with the surface's existing pixel shades, otherwise it will overwrite them

    Returns

    a rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `start_pos` parameter value (float values will be truncated) and its width and height will be 0

    Return type

    [Rect](rect#pygame.Rect "pygame.Rect")

    Raises

    **TypeError** -- if `start_pos` or `end_pos` is not a sequence of two numbers

    Changed in pygame 2.0.0: Added support for keyword arguments.
- name: draw.aalines
  id: ref/draw#pygame.draw.aalines
  summary: Draws a sequence of contiguous straight antialiased lines on the given surface
  belongs_to: draw
  description: "pygame.draw.aalines()\n\ndraw multiple contiguous straight antialiased line segments\n\naalines(surface, color, closed, points) -\\> Rect\n\naalines(surface, color, closed, points, blend=1) -\\> Rect\n\nDraws a sequence of contiguous straight antialiased lines on the given surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **closed** (*bool*) -- if `True` an additional line segment is drawn between the first and last points in the `points` sequence\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 2 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points `[(x1,``y1),``(x2,``y2),``(x3,``y3)]` a line segment will be drawn from `(x1,``y1)` to `(x2,``y2)` and from `(x2,``y2)` to `(x3,``y3)`, additionally if the `closed` parameter is `True` another line segment will be drawn from `(x3,``y3)` to `(x1,``y1)`\n\n- **blend** (*int*) -- (optional) (deprecated) if non-zero (default) each line will be blended with the surface's existing pixel shades, otherwise the pixels will be overwritten\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises\n\n- **ValueError** -- if `len(points)``<``2` (must have at least 2 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nExample code for draw module.\n\n``` python\nimport pygame\nfrom math import pi\n\n# Initialize pygame\npygame.init()\n\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\n\npygame.display.set_caption(\"Example code for the draw module\")\n\n# Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\n\nwhile not done:\n    # This limits the while loop to a max of 60 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(60)\n\n    for event in pygame.event.get():  # User did something\n        if event.type == pygame.QUIT:  # If user clicked close\n            done = True  # Flag that we are done so we exit this loop\n\n    # Clear the screen and set the screen background\n    screen.fill(\"white\")\n\n    # Draw on the screen a green line from (0, 0) to (50, 30)\n    # 5 pixels wide. Uses (r, g, b) color - medium sea green.\n    pygame.draw.line(screen, (60, 179, 113), [0, 0], [50, 30], 5)\n\n    # Draw on the screen a green line from (0, 50) to (50, 80)\n    # Because it is an antialiased line, it is 1 pixel wide.\n    # Uses (r, g, b) color - medium sea green.\n    pygame.draw.aaline(screen, (60, 179, 113), [0, 50], [50, 80], True)\n\n    # Draw on the screen 3 black lines, each 5 pixels wide.\n    # The 'False' means the first and last points are not connected.\n    pygame.draw.lines(\n        screen, \"black\", False, [[0, 80], [50, 90], [200, 80], [220, 30]], 5\n    )\n\n    # Draw a rectangle outline\n    pygame.draw.rect(screen, \"black\", [75, 10, 50, 20], 2)\n\n    # Draw a solid rectangle. Same color as \"black\" above, specified in a new way\n    pygame.draw.rect(screen, (0, 0, 0), [150, 10, 50, 20])\n\n    # Draw a rectangle with rounded corners\n    pygame.draw.rect(screen, \"green\", [115, 210, 70, 40], 10, border_radius=15)\n    pygame.draw.rect(\n        screen,\n        \"red\",\n        [135, 260, 50, 30],\n        0,\n        border_radius=10,\n        border_top_left_radius=0,\n        border_bottom_right_radius=15,\n    )\n\n    # Draw an ellipse outline, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [225, 10, 50, 20], 2)\n\n    # Draw an solid ellipse, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [300, 10, 50, 20])\n\n    # This draws a triangle using the polygon command\n    pygame.draw.polygon(screen, \"black\", [[100, 100], [0, 200], [200, 200]], 5)\n\n    # Draw an arc as part of an ellipse.\n    # Use radians to determine what angle to draw.\n    pygame.draw.arc(screen, \"black\", [210, 75, 150, 125], 0, pi / 2, 2)\n    pygame.draw.arc(screen, \"green\", [210, 75, 150, 125], pi / 2, pi, 2)\n    pygame.draw.arc(screen, \"blue\", [210, 75, 150, 125], pi, 3 * pi / 2, 2)\n    pygame.draw.arc(screen, \"red\", [210, 75, 150, 125], 3 * pi / 2, 2 * pi, 2)\n\n    # Draw a circle\n    pygame.draw.circle(screen, \"blue\", [60, 250], 40)\n\n    # Draw only one circle quadrant\n    pygame.draw.circle(screen, \"blue\", [250, 250], 40, 0, draw_top_right=True)\n    pygame.draw.circle(screen, \"red\", [250, 250], 40, 30, draw_top_left=True)\n    pygame.draw.circle(screen, \"green\", [250, 250], 40, 20, draw_bottom_left=True)\n    pygame.draw.circle(screen, \"black\", [250, 250], 40, 10, draw_bottom_right=True)\n\n    # Go ahead and update the screen with what we've drawn.\n    # This MUST happen after all the other drawing commands.\n    pygame.display.flip()\n\n# Be IDLE friendly\npygame.quit()\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/draw.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/draw.html](https://www.pygame.org/docs/ref/draw.html)"
- name: draw.arc
  id: ref/draw#pygame.draw.arc
  summary: Draws an elliptical arc on the given surface
  belongs_to: draw
  description: "pygame.draw.arc()\n\ndraw an elliptical arc\n\narc(surface, color, rect, start_angle, stop_angle) -\\> Rect\n\narc(surface, color, rect, start_angle, stop_angle, width=1) -\\> Rect\n\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop positions of the arc. The arc is drawn in a counterclockwise direction from the `start_angle` to the `stop_angle`.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to indicate the position and dimensions of the ellipse which the arc will be based on, the ellipse will be centered inside the rectangle\n\n- **start_angle** (*float*) -- start angle of the arc in radians\n\n- **stop_angle** (*float*) --\n\n  stop angle of the arc in radians\n\n  > if `start_angle``<``stop_angle`, the arc is drawn in a counterclockwise direction from the `start_angle` to the `stop_angle`\n  >\n  > if `start_angle``>``stop_angle`, tau (tau == 2 \\* pi) will be added to the `stop_angle`, if the resulting stop angle value is greater than the `start_angle` the above `start_angle``<``stop_angle` case applies, otherwise nothing will be drawn\n  >\n  > if `start_angle``==``stop_angle`, nothing will be drawn\n  >\n  >   \n\n- **width** (*int*) --\n\n  (optional) used for line thickness (not to be confused with the width value of the `rect` parameter)\n\n  > if `width``==``0`, nothing will be drawn\n  >\n  > if `width``>``0`, (default is 1) used for line thickness\n  >\n  > if `width``<``0`, same as `width``==``0`\n  >\n  > Note\n  >\n  > When using `width` values `>``1`, the edge lines will only grow inward from the original boundary of the `rect` parameter.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
- name: draw.circle
  id: ref/draw#pygame.draw.circle
  summary: Draws a circle on the given surface
  belongs_to: draw
  description: "pygame.draw.circle()\n\ndraw a circle\n\ncircle(surface, color, center, radius) -\\> Rect\n\ncircle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -\\> Rect\n\nDraws a circle on the given surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **center** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- center point of the circle as a sequence of 2 ints/floats, e.g. `(x,``y)`\n\n- **radius** (*int* *or* *float*) -- radius of the circle, measured from the `center` parameter, nothing will be drawn if the `radius` is less than 1\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the circle is to be filled\n\n  > if `width``==``0`, (default) fill the circle\n  >\n  > if `width``>``0`, used for line thickness\n  >\n  > if `width``<``0`, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>``1`, the edge lines will only grow inward.\n\n- **draw_top_right** (*bool*) -- (optional) if this is set to True then the top right corner of the circle will be drawn\n\n- **draw_top_left** (*bool*) -- (optional) if this is set to True then the top left corner of the circle will be drawn\n\n- **draw_bottom_left** (*bool*) -- (optional) if this is set to True then the bottom left corner of the circle will be drawn\n\n- **draw_bottom_right** (*bool*) --\n\n  (optional) if this is set to True then the bottom right corner of the circle will be drawn\n\n  > if any of the draw_circle_part is True then it will draw all circle parts that have the True\n  >\n  > value, otherwise it will draw the entire circle.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `center` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises\n\n- **TypeError** -- if `center` is not a sequence of two numbers\n\n- **TypeError** -- if `radius` is not a number\n\nChanged in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn when the radius is 0 (a pixel at the `center` coordinates used to be drawn when the radius equaled 0). Floats, and Vector2 are accepted for the `center` param. The drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants."
- name: draw.ellipse
  id: ref/draw#pygame.draw.ellipse
  summary: Draws an ellipse on the given surface
  belongs_to: draw
  description: "pygame.draw.ellipse()\n\ndraw an ellipse\n\nellipse(surface, color, rect) -\\> Rect\n\nellipse(surface, color, rect, width=0) -\\> Rect\n\nDraws an ellipse on the given surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to indicate the position and dimensions of the ellipse, the ellipse will be centered inside the rectangle and bounded by it\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the `rect` parameter)\n\n  > if `width``==``0`, (default) fill the ellipse\n  >\n  > if `width``>``0`, used for line thickness\n  >\n  > if `width``<``0`, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>``1`, the edge lines will only grow inward from the original boundary of the `rect` parameter.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
- name: draw.line
  id: ref/draw#pygame.draw.line
  summary: Draws a straight line on the given surface
  belongs_to: draw
  description: "pygame.draw.line()\n\ndraw a straight line\n\nline(surface, color, start_pos, end_pos) -\\> Rect\n\nline(surface, color, start_pos, end_pos, width=1) -\\> Rect\n\nDraws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **start_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- start position of the line, (x, y)\n\n- **end_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- end position of the line, (x, y)\n\n- **width** (*int*) --\n\n  (optional) used for line thickness\n\n  if width \\>= 1, used for line thickness (default is 1)\n\n  if width \\< 1, nothing will be drawn\n\n    \n\n  Note\n\n  When using `width` values `>``1`, lines will grow as follows.\n\n  For odd `width` values, the thickness of each line grows with the original line being in the center.\n\n  For even `width` values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope \\< 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope \\>= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `start_pos` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises\n\n**TypeError** -- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
- name: draw.lines
  id: ref/draw#pygame.draw.lines
  summary: Draws a sequence of contiguous straight lines on the given surface
  belongs_to: draw
  description: "pygame.draw.lines()\n\ndraw multiple contiguous straight line segments\n\nlines(surface, color, closed, points) -\\> Rect\n\nlines(surface, color, closed, points, width=1) -\\> Rect\n\nDraws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **closed** (*bool*) -- if `True` an additional line segment is drawn between the first and last points in the `points` sequence\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 2 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points `[(x1,``y1),``(x2,``y2),``(x3,``y3)]` a line segment will be drawn from `(x1,``y1)` to `(x2,``y2)` and from `(x2,``y2)` to `(x3,``y3)`, additionally if the `closed` parameter is `True` another line segment will be drawn from `(x3,``y3)` to `(x1,``y1)`\n\n- **width** (*int*) --\n\n  (optional) used for line thickness\n\n  if width \\>= 1, used for line thickness (default is 1)\n\n  if width \\< 1, nothing will be drawn\n\n    \n\n  Note\n\n  When using `width` values `>``1` refer to the `width` notes of [`line()`](#pygame.draw.line \"pygame.draw.line\") for details on how thick lines grow.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises\n\n- **ValueError** -- if `len(points)``<``2` (must have at least 2 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
- name: draw.polygon
  id: ref/draw#pygame.draw.polygon
  summary: Draws a polygon on the given surface
  belongs_to: draw
  description: "pygame.draw.polygon()\n\ndraw a polygon\n\npolygon(surface, color, points) -\\> Rect\n\npolygon(surface, color, points, width=0) -\\> Rect\n\nDraws a polygon on the given surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates that make up the vertices of the polygon, each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats, e.g. `[(x1,``y1),``(x2,``y2),``(x3,``y3)]`\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the polygon is to be filled\n\n  > if width == 0, (default) fill the polygon\n  >\n  > if width \\> 0, used for line thickness\n  >\n  > if width \\< 0, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>``1`, the edge lines will grow outside the original boundary of the polygon. For more details on how the thickness for edge lines grow, refer to the `width` notes of the [`pygame.draw.line()`](#pygame.draw.line) function.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises\n\n- **ValueError** -- if `len(points)``<``3` (must have at least 3 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nNote\n\nFor an aapolygon, use [`aalines()`](#pygame.draw.aalines \"pygame.draw.aalines\") with `closed=True`.\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
- name: draw.rect
  id: ref/draw#pygame.draw.rect
  summary: Draws a rectangle on the given surface
  belongs_to: draw
  description: "pygame.draw.rect()\n\ndraw a rectangle\n\nrect(surface, color, rect) -\\> Rect\n\nrect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -\\> Rect\n\nDraws a rectangle on the given surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the `rect` parameter)\n\n  > if `width``==``0`, (default) fill the rectangle\n  >\n  > if `width``>``0`, used for line thickness\n  >\n  > if `width``<``0`, nothing will be drawn\n  >\n  >   \n\n  Changed in pygame 2.1.1: Drawing rects with width now draws the width correctly inside the rect's area, rather than using an internal call to draw.lines(), which had half the width spill outside the rect area.\n\n- **border_radius** (*int*) -- (optional) used for drawing rectangle with rounded corners. The supported range is \\[0, min(height, width) / 2\\], with 0 representing a rectangle without rounded corners.\n\n- **border_top_left_radius** (*int*) -- (optional) used for setting the value of top left border. If you don't set this value, it will use the border_radius value.\n\n- **border_top_right_radius** (*int*) -- (optional) used for setting the value of top right border. If you don't set this value, it will use the border_radius value.\n\n- **border_bottom_left_radius** (*int*) -- (optional) used for setting the value of bottom left border. If you don't set this value, it will use the border_radius value.\n\n- **border_bottom_right_radius** (*int*) --\n\n  (optional) used for setting the value of bottom right border. If you don't set this value, it will use the border_radius value.\n\n  > if `border_radius``<``1` it will draw rectangle without rounded corners\n  >\n  > if any of border radii has the value `<``0` it will use value of the border_radius\n  >\n  > If sum of radii on the same side of the rectangle is greater than the rect size the radii\n  >\n  > will get scaled\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type\n\n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nNote\n\nThe [`pygame.Surface.fill()`](surface#pygame.Surface.fill) method works just as well for drawing filled rectangles and can be hardware accelerated on some platforms.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius."
- name: encode_file_path
  id: ref/pygame#pygame.encode_file_path
  summary: 'obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError'
  belongs_to: module-pygame
  description: |-
    pygame.encode_file_path()

    Encode a Unicode or bytes object as a file system path

    encode_file_path(\[obj \[, etype\]\]) -\> bytes or None

    obj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.

    etype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`.

    This function is used to encode file paths in pygame. Encoding is to the codec as returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.

    New in pygame 1.9.2: (primarily for use in unit tests)

    pygame.version

    small module containing version information

    This module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.
- name: encode_string
  id: ref/pygame#pygame.encode_string
  summary: 'obj: If Unicode, encode; if bytes, return unaltered; if anything else, return None; if not given, raise SyntaxError'
  belongs_to: module-pygame
  description: |-
    pygame.encode_string()

    Encode a Unicode or bytes object

    encode_string(\[obj \[, encoding \[, errors \[, etype\]\]\]\]) -\> bytes or None

    obj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.

    encoding (string): If present, encoding to use. The default is `'unicode_escape'`.

    errors (string): If given, how to handle unencodable characters. The default is `'backslashreplace'`.

    etype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`. For the default encoding and errors values there should be no encoding errors.

    This function is used in encoding file paths. Keyword arguments are supported.

    New in pygame 1.9.2: (primarily for use in unit tests)
- name: error
  id: ref/pygame#pygame.error
  summary: This exception is raised whenever a pygame or SDL operation fails
  belongs_to: module-pygame
  description: |-
    exception pygame.error

    standard pygame exception

    raise pygame.error(message)

    This exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.

    Derived from the `RuntimeError` exception, which can also be used to catch these raised errors.
- name: event
  id: ref/event
  summary: Pygame handles all its event messaging through an event queue
  description: "pygame.event  \npygame module for interacting with events and queues\n\nPygame handles all its event messaging through an event queue. The routines in this module help you manage that event queue. The input queue is heavily dependent on the [`pygame.display`](display#module-pygame.display) module. If the display has not been initialized and a video mode not set, the event queue may not work properly.\n\nThe event queue has an upper limit on the number of events it can hold. When the queue becomes full new events are quietly dropped. To prevent lost events, especially input events which signal a quit command, your program must handle events every frame (with `pygame.event.get()`, `pygame.event.pump()`, `pygame.event.wait()`, `pygame.event.peek()` or `pygame.event.clear()`) and process them. Not handling events may cause your system to decide your program has locked up. To speed up queue processing use [`pygame.event.set_blocked()`](#pygame.event.set_blocked) to limit which events get queued.\n\nTo get the state of various input devices, you can forego the event queue and access the input devices directly with their appropriate modules: [`pygame.mouse`](mouse#module-pygame.mouse), [`pygame.key`](key#module-pygame.key), and [`pygame.joystick`](joystick#module-pygame.joystick). If you use this method, remember that pygame requires some form of communication with the system window manager and other parts of the platform. To keep pygame in sync with the system, you will need to call [`pygame.event.pump()`](#pygame.event.pump) to keep everything current. Usually, this should be called once per game loop. Note: Joysticks will not send any events until the device has been initialized.\n\nThe event queue contains [`pygame.event.Event`](#pygame.event.Event) event objects. There are a variety of ways to access the queued events, from simply checking for the existence of events, to grabbing them directly off the stack. The event queue also offers some simple filtering which can slightly help performance by blocking certain event types from the queue. Use [`pygame.event.set_allowed()`](#pygame.event.set_allowed) and [`pygame.event.set_blocked()`](#pygame.event.set_blocked) to change this filtering. By default, all event types can be placed on the queue.\n\nAll [`pygame.event.Event`](#pygame.event.Event) instances contain an event type identifier and attributes specific to that event type. The event type identifier is accessible as the [`pygame.event.Event.type`](#pygame.event.Event.type) property. Any of the event specific attributes can be accessed through the [`pygame.event.Event.__dict__`](#pygame.event.Event.__dict__) attribute or directly as an attribute of the event object (as member lookups are passed through to the object's dictionary values). The event object has no method functions. Users can create their own new events with the [`pygame.event.Event()`](#pygame.event.Event) function.\n\nThe event type identifier is in between the values of `NOEVENT` and `NUMEVENTS`. User defined events should have a value in the inclusive range of `USEREVENT` to `NUMEVENTS`` ``-`` ``1`. User defined events can get a custom event number with [`pygame.event.custom_type()`](#pygame.event.custom_type). It is recommended all user events follow this system.\n\nEvents support equality and inequality comparisons. Two events are equal if they are the same type and have identical attribute values.\n\nWhile debugging and experimenting, you can print an event object for a quick display of its type and members. The function [`pygame.event.event_name()`](#pygame.event.event_name) can be used to get a string representing the name of the event type.\n\nEvents that come from the system will have a guaranteed set of member attributes based on the type. The following is a list event types with their specific attributes.\n\n``` python\nQUIT              none\nACTIVEEVENT       gain, state\nKEYDOWN           key, mod, unicode, scancode\nKEYUP             key, mod, unicode, scancode\nMOUSEMOTION       pos, rel, buttons, touch\nMOUSEBUTTONUP     pos, button, touch\nMOUSEBUTTONDOWN   pos, button, touch\nJOYAXISMOTION     joy (deprecated), instance_id, axis, value\nJOYBALLMOTION     joy (deprecated), instance_id, ball, rel\nJOYHATMOTION      joy (deprecated), instance_id, hat, value\nJOYBUTTONUP       joy (deprecated), instance_id, button\nJOYBUTTONDOWN     joy (deprecated), instance_id, button\nVIDEORESIZE       size, w, h\nVIDEOEXPOSE       none\nUSEREVENT         code\n```\n\nChanged in pygame 2.0.0: The `joy` attribute was deprecated, `instance_id` was added.\n\nChanged in pygame 2.0.1: The `unicode` attribute was added to `KEYUP` event.\n\nNote that `ACTIVEEVENT`, `VIDEORESIZE` and `VIDEOEXPOSE` are considered as \"legacy\" events, the use of pygame2 `WINDOWEVENT` API is recommended over the use of this older API.\n\nYou can also find a list of constants for keyboard keys [here](key#key-constants-label).\n\n  \n\nWhen compiled with SDL2, pygame has these additional events and their attributes.\n\n``` python\nAUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)\nAUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)\nFINGERMOTION       touch_id, finger_id, x, y, dx, dy\nFINGERDOWN         touch_id, finger_id, x, y, dx, dy\nFINGERUP           touch_id, finger_id, x, y, dx, dy\nMOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y\nMULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers\nTEXTEDITING        text, start, length\nTEXTINPUT          text\n```\n\nNew in pygame 1.9.5.\n\nChanged in pygame 2.0.2: Fixed amount horizontal scroll (x, positive to the right and negative to the left).\n\nChanged in pygame 2.0.2: The `touch` attribute was added to all the `MOUSE` events.\n\nThe `touch` attribute of `MOUSE` events indicates whether or not the events were generated by a touch input device, and not a real mouse. You might want to ignore such events, if your application already handles `FINGERMOTION`, `FINGERDOWN` and `FINGERUP` events.\n\nNew in pygame 2.1.3: Added `precise_x` and `precise_y` to `MOUSEWHEEL` events\n\n  \n\nMany new events were introduced in pygame 2.\n\npygame can recognize text or files dropped in its window. If a file is dropped, `DROPFILE` event will be sent, `file` will be its path. The `DROPTEXT` event is only supported on X11.\n\n`MIDIIN` and `MIDIOUT` are events reserved for [`pygame.midi`](midi#module-pygame.midi) use.\n\npygame 2 also supports controller hot-plugging\n\n``` python\nEvent name               Attributes and notes\n\nDROPFILE                 file\nDROPBEGIN                (SDL backend >= 2.0.5)\nDROPCOMPLETE             (SDL backend >= 2.0.5)\nDROPTEXT                 text (SDL backend >= 2.0.5)\nMIDIIN\nMIDIOUT\nCONTROLLERDEVICEADDED    device_index\nJOYDEVICEADDED           device_index\nCONTROLLERDEVICEREMOVED  instance_id\nJOYDEVICEREMOVED         instance_id\nCONTROLLERDEVICEREMAPPED instance_id\nKEYMAPCHANGED            (SDL backend >= 2.0.4)\nCLIPBOARDUPDATE\nRENDER_TARGETS_RESET     (SDL backend >= 2.0.2)\nRENDER_DEVICE_RESET      (SDL backend >= 2.0.4)\nLOCALECHANGED            (SDL backend >= 2.0.14)\n```\n\nAlso in this version, `instance_id` attributes were added to joystick events, and the `joy` attribute was deprecated.\n\n`KEYMAPCHANGED` is a type of an event sent when keymap changes due to a system event such as an input language or keyboard layout change.\n\n`CLIPBOARDUPDATE` is an event sent when clipboard changes. This can still be considered as an experimental feature, some kinds of clipboard changes might not trigger this event.\n\n`LOCALECHANGED` is an event sent when user locale changes\n\nNew in pygame 2.0.0.\n\nNew in pygame 2.1.3: `KEYMAPCHANGED`, `CLIPBOARDUPDATE`, `RENDER_TARGETS_RESET`, `RENDER_DEVICE_RESET` and `LOCALECHANGED`\n\n  \n\nSince pygame 2.0.1, there are a new set of events, called window events. Here is a list of all window events, along with a short description\n\n``` python\nEvent type                Short description\n\nWINDOWSHOWN            Window became shown\nWINDOWHIDDEN           Window became hidden\nWINDOWEXPOSED          Window got updated by some external event\nWINDOWMOVED            Window got moved\nWINDOWRESIZED          Window got resized\nWINDOWSIZECHANGED      Window changed its size\nWINDOWMINIMIZED        Window was minimized\nWINDOWMAXIMIZED        Window was maximized\nWINDOWRESTORED         Window was restored\nWINDOWENTER            Mouse entered the window\nWINDOWLEAVE            Mouse left the window\nWINDOWFOCUSGAINED      Window gained focus\nWINDOWFOCUSLOST        Window lost focus\nWINDOWCLOSE            Window was closed\nWINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)\nWINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)\nWINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)\nWINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)\n```\n\n`WINDOWMOVED`, `WINDOWRESIZED` and `WINDOWSIZECHANGED` have `x` and `y` attributes, `WINDOWDISPLAYCHANGED` has a `display_index` attribute. All windowevents have a `window` attribute.\n\nNew in pygame 2.0.1.\n\nNew in pygame 2.1.3: `WINDOWICCPROFCHANGED` and `WINDOWDISPLAYCHANGED`\n\n  \n\nOn Android, the following events can be generated\n\n``` python\nEvent type                 Short description\n\nAPP_TERMINATING           OS is terminating the application\nAPP_LOWMEMORY             OS is low on memory, try to free memory if possible\nAPP_WILLENTERBACKGROUND   Application is entering background\nAPP_DIDENTERBACKGROUND    Application entered background\nAPP_WILLENTERFOREGROUND   Application is entering foreground\nAPP_DIDENTERFOREGROUND    Application entered foreground\n```\n\nNew in pygame 2.1.3.\n\n  \n\npygame.event.pump()  \ninternally process pygame event handlers\n\npump() -\\> None\n\nFor each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call `pygame.event.pump()` to allow pygame to handle internal actions.\n\nThis function is not necessary if your program is consistently processing events on the queue through the other [`pygame.event`](#module-pygame.event) functions.\n\nThere are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.\n\nCaution\n\nThis function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).\n\npygame.event.get()  \nget events from the queue\n\nget(eventtype=None) -\\> Eventlist\n\nget(eventtype=None, pump=True) -\\> Eventlist\n\nget(eventtype=None, pump=True, exclude=None) -\\> Eventlist\n\nThis will get all the messages and remove them from the queue. If a type or sequence of types is given only those messages will be removed from the queue and returned.\n\nIf a type or sequence of types is passed in the `exclude` argument instead, then all only *other* messages will be removed from the queue. If an `exclude` parameter is passed, the `eventtype` parameter *must* be None.\n\nIf you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.\n\nIf `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nChanged in pygame 2.0.2: Added `exclude` argument\n\npygame.event.poll()  \nget a single event from the queue\n\npoll() -\\> Event instance\n\nReturns a single event from the queue. If the event queue is empty an event of type `pygame.NOEVENT` will be returned immediately. The returned event is removed from the queue.\n\nCaution\n\nThis function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).\n\npygame.event.wait()  \nwait for a single event from the queue\n\nwait() -\\> Event instance\n\nwait(timeout) -\\> Event instance\n\nReturns a single event from the queue. If the queue is empty this function will wait until one is created. From pygame 2.0.0, if a `timeout` argument is given, the function will return an event of type `pygame.NOEVENT` if no events enter the queue in `timeout` milliseconds. The event is removed from the queue once it has been returned. While the program is waiting it will sleep in an idle state. This is important for programs that want to share the system with other applications.\n\nChanged in pygame 2.0.0.dev13: Added `timeout` argument\n\nCaution\n\nThis function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).\n\npygame.event.peek()  \ntest if event types are waiting on the queue\n\npeek(eventtype=None) -\\> bool\n\npeek(eventtype=None, pump=True) -\\> bool\n\nReturns `True` if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return `True` if any of those events are on the queue.\n\nIf `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\npygame.event.clear()  \nremove all events from the queue\n\nclear(eventtype=None) -\\> None\n\nclear(eventtype=None, pump=True) -\\> None\n\nRemoves all events from the queue. If `eventtype` is given, removes the given event or sequence of events. This has the same effect as [`pygame.event.get()`](#pygame.event.get) except `None` is returned. It can be slightly more efficient when clearing a full event queue.\n\nIf `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\npygame.event.event_name()  \nget the string name from an event id\n\nevent_name(type) -\\> string\n\nReturns a string representing the name (in CapWords style) of the given event type.\n\n\"UserEvent\" is returned for all values in the user event id range. \"Unknown\" is returned when the event type does not exist.\n\npygame.event.set_blocked()  \ncontrol which events are allowed on the queue\n\nset_blocked(type) -\\> None\n\nset_blocked(typelist) -\\> None\n\nset_blocked(None) -\\> None\n\nThe given event types are not allowed to appear on the event queue. By default all events can be placed on the queue. It is safe to disable an event type multiple times.\n\nIf `None` is passed as the argument, ALL of the event types are blocked from being placed on the queue.\n\npygame.event.set_allowed()  \ncontrol which events are allowed on the queue\n\nset_allowed(type) -\\> None\n\nset_allowed(typelist) -\\> None\n\nset_allowed(None) -\\> None\n\nThe given event types are allowed to appear on the event queue. By default, all event types can be placed on the queue. It is safe to enable an event type multiple times.\n\nIf `None` is passed as the argument, ALL of the event types are allowed to be placed on the queue.\n\npygame.event.get_blocked()  \ntest if a type of event is blocked from the queue\n\nget_blocked(type) -\\> bool\n\nget_blocked(typelist) -\\> bool\n\nReturns `True` if the given event type is blocked from the queue. If a sequence of event types is passed, this will return `True` if any of those event types are blocked.\n\npygame.event.set_grab()  \ncontrol the sharing of input devices with other applications\n\nset_grab(bool) -\\> None\n\nWhen your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus. If your program sets the event grab to `True`, it will lock all input into your program.\n\nIt is best to not always grab the input, since it prevents the user from doing other things on their system.\n\npygame.event.get_grab()  \ntest if the program is sharing input devices\n\nget_grab() -\\> bool\n\nReturns `True` when the input events are grabbed for this application.\n\npygame.event.post()  \nplace a new event on the queue\n\npost(Event) -\\> bool\n\nPlaces the given event at the end of the event queue.\n\nThis is usually used for placing custom events on the event queue. Any type of event can be posted, and the events posted can have any attributes.\n\nThis returns a boolean on whether the event was posted or not. Blocked events cannot be posted, and this function returns `False` if you try to post them.\n\nChanged in pygame 2.0.1: returns a boolean, previously returned `None`\n\npygame.event.custom_type()  \nmake custom user event type\n\ncustom_type() -\\> int\n\nReserves a `pygame.USEREVENT` for a custom use.\n\nIf too many events are made a [`pygame.error`](pygame#pygame.error) is raised.\n\nNew in pygame 2.0.0.dev3.\n\npygame.event.Event  \npygame object for representing events\n\nEvent(type, dict) -\\> Event\n\nEvent(type, \\*\\*attributes) -\\> Event\n\nA pygame object used for representing an event. `Event` instances support attribute assignment and deletion.\n\nWhen creating the object, the attributes may come from a dictionary argument with string keys or from keyword arguments.\n\nNote\n\nFrom version 2.1.3 `EventType` is an alias for `Event`. Beforehand, `Event` was a function that returned `EventType` instances. Use of `Event` is preferred over `EventType` wherever it is possible, as the latter could be deprecated in a future version.\n\ntype  \nevent type identifier.\n\ntype -\\> int\n\nRead-only. The event type identifier. For user created event objects, this is the `type` argument passed to [`pygame.event.Event()`](#pygame.event.Event).\n\nFor example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.\n\n\\_\\_dict\\_\\_  \nevent attribute dictionary\n\n\\_\\_dict\\_\\_ -\\> dict\n\nRead-only. The event type specific attributes of an event. The `dict` attribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`, and `mod`\n\nNew in pygame 1.9.2: Mutable attributes.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/event.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/event.html](https://www.pygame.org/docs/ref/event.html)"
- name: event.clear
  id: ref/event#pygame.event.clear
  summary: Removes all events from the queue
  belongs_to: event
  description: |-
    pygame.event.clear()

    remove all events from the queue

    clear(eventtype=None) -\> None

    clear(eventtype=None, pump=True) -\> None

    Removes all events from the queue. If `eventtype` is given, removes the given event or sequence of events. This has the same effect as [`pygame.event.get()`](#pygame.event.get) except `None` is returned. It can be slightly more efficient when clearing a full event queue.

    If `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.

    Changed in pygame 1.9.5: Added `pump` argument
- name: event.custom_type
  id: ref/event#pygame.event.custom_type
  summary: Reserves a pygame.USEREVENT for a custom use
  belongs_to: event
  description: |-
    pygame.event.custom_type()

    make custom user event type

    custom_type() -\> int

    Reserves a `pygame.USEREVENT` for a custom use.

    If too many events are made a [`pygame.error`](pygame#pygame.error) is raised.

    New in pygame 2.0.0.dev3.
- name: event.Event
  id: ref/event#pygame.event.Event
  summary: A pygame object used for representing an event
  belongs_to: event
  description: |-
    pygame.event.Event

    pygame object for representing events

    Event(type, dict) -\> Event

    Event(type, \*\*attributes) -\> Event

    A pygame object used for representing an event. `Event` instances support attribute assignment and deletion.

    When creating the object, the attributes may come from a dictionary argument with string keys or from keyword arguments.

    Note

    From version 2.1.3 `EventType` is an alias for `Event`. Beforehand, `Event` was a function that returned `EventType` instances. Use of `Event` is preferred over `EventType` wherever it is possible, as the latter could be deprecated in a future version.
- name: event.Event.__dict__
  id: ref/event#pygame.event.Event.__dict__
  summary: Read-only
  belongs_to: event
  description: "\\_\\_dict\\_\\_\n\nevent attribute dictionary\n\n\\_\\_dict\\_\\_ -\\> dict\n\nRead-only. The event type specific attributes of an event. The `dict` attribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`, and `mod`\n\nNew in pygame 1.9.2: Mutable attributes.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/event.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/event.html](https://www.pygame.org/docs/ref/event.html)"
- name: event.Event.type
  id: ref/event#pygame.event.Event.type
  summary: event type identifier
  belongs_to: event
  description: |-
    type

    event type identifier.

    type -\> int

    Read-only. The event type identifier. For user created event objects, this is the `type` argument passed to [`pygame.event.Event()`](#pygame.event.Event).

    For example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.
- name: event.event_name
  id: ref/event#pygame.event.event_name
  summary: Returns a string representing the name (in CapWords style) of the given event type
  belongs_to: event
  description: |-
    pygame.event.event_name()

    get the string name from an event id

    event_name(type) -\> string

    Returns a string representing the name (in CapWords style) of the given event type.

    "UserEvent" is returned for all values in the user event id range. "Unknown" is returned when the event type does not exist.
- name: event.get
  id: ref/event#pygame.event.get
  summary: This will get all the messages and remove them from the queue
  belongs_to: event
  description: |-
    pygame.event.get()

    get events from the queue

    get(eventtype=None) -\> Eventlist

    get(eventtype=None, pump=True) -\> Eventlist

    get(eventtype=None, pump=True, exclude=None) -\> Eventlist

    This will get all the messages and remove them from the queue. If a type or sequence of types is given only those messages will be removed from the queue and returned.

    If a type or sequence of types is passed in the `exclude` argument instead, then all only *other* messages will be removed from the queue. If an `exclude` parameter is passed, the `eventtype` parameter *must* be None.

    If you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.

    If `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.

    Changed in pygame 1.9.5: Added `pump` argument

    Changed in pygame 2.0.2: Added `exclude` argument
- name: event.get_blocked
  id: ref/event#pygame.event.get_blocked
  summary: Returns True if the given event type is blocked from the queue
  belongs_to: event
  description: |-
    pygame.event.get_blocked()

    test if a type of event is blocked from the queue

    get_blocked(type) -\> bool

    get_blocked(typelist) -\> bool

    Returns `True` if the given event type is blocked from the queue. If a sequence of event types is passed, this will return `True` if any of those event types are blocked.
- name: event.get_grab
  id: ref/event#pygame.event.get_grab
  summary: Returns True when the input events are grabbed for this application
  belongs_to: event
  description: |-
    pygame.event.get_grab()

    test if the program is sharing input devices

    get_grab() -\> bool

    Returns `True` when the input events are grabbed for this application.
- name: event.peek
  id: ref/event#pygame.event.peek
  summary: Returns True if there are any events of the given type waiting on the queue
  belongs_to: event
  description: |-
    pygame.event.peek()

    test if event types are waiting on the queue

    peek(eventtype=None) -\> bool

    peek(eventtype=None, pump=True) -\> bool

    Returns `True` if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return `True` if any of those events are on the queue.

    If `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.

    Changed in pygame 1.9.5: Added `pump` argument
- name: event.poll
  id: ref/event#pygame.event.poll
  summary: Returns a single event from the queue
  belongs_to: event
  description: |-
    pygame.event.poll()

    get a single event from the queue

    poll() -\> Event instance

    Returns a single event from the queue. If the event queue is empty an event of type `pygame.NOEVENT` will be returned immediately. The returned event is removed from the queue.

    Caution

    This function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).
- name: event.post
  id: ref/event#pygame.event.post
  summary: Places the given event at the end of the event queue
  belongs_to: event
  description: |-
    pygame.event.post()

    place a new event on the queue

    post(Event) -\> bool

    Places the given event at the end of the event queue.

    This is usually used for placing custom events on the event queue. Any type of event can be posted, and the events posted can have any attributes.

    This returns a boolean on whether the event was posted or not. Blocked events cannot be posted, and this function returns `False` if you try to post them.

    Changed in pygame 2.0.1: returns a boolean, previously returned `None`
- name: event.pump
  id: ref/event#pygame.event.pump
  summary: For each frame of your game, you will need to make some sort of call to the event queue
  belongs_to: event
  description: |-
    pygame.event.pump()

    internally process pygame event handlers

    pump() -\> None

    For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call `pygame.event.pump()` to allow pygame to handle internal actions.

    This function is not necessary if your program is consistently processing events on the queue through the other [`pygame.event`](#module-pygame.event) functions.

    There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.

    Caution

    This function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).
- name: event.set_allowed
  id: ref/event#pygame.event.set_allowed
  summary: The given event types are allowed to appear on the event queue
  belongs_to: event
  description: |-
    pygame.event.set_allowed()

    control which events are allowed on the queue

    set_allowed(type) -\> None

    set_allowed(typelist) -\> None

    set_allowed(None) -\> None

    The given event types are allowed to appear on the event queue. By default, all event types can be placed on the queue. It is safe to enable an event type multiple times.

    If `None` is passed as the argument, ALL of the event types are allowed to be placed on the queue.
- name: event.set_blocked
  id: ref/event#pygame.event.set_blocked
  summary: The given event types are not allowed to appear on the event queue
  belongs_to: event
  description: |-
    pygame.event.set_blocked()

    control which events are allowed on the queue

    set_blocked(type) -\> None

    set_blocked(typelist) -\> None

    set_blocked(None) -\> None

    The given event types are not allowed to appear on the event queue. By default all events can be placed on the queue. It is safe to disable an event type multiple times.

    If `None` is passed as the argument, ALL of the event types are blocked from being placed on the queue.
- name: event.set_grab
  id: ref/event#pygame.event.set_grab
  summary: When your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus
  belongs_to: event
  description: |-
    pygame.event.set_grab()

    control the sharing of input devices with other applications

    set_grab(bool) -\> None

    When your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus. If your program sets the event grab to `True`, it will lock all input into your program.

    It is best to not always grab the input, since it prevents the user from doing other things on their system.
- name: event.wait
  id: ref/event#pygame.event.wait
  summary: Returns a single event from the queue
  belongs_to: event
  description: |-
    pygame.event.wait()

    wait for a single event from the queue

    wait() -\> Event instance

    wait(timeout) -\> Event instance

    Returns a single event from the queue. If the queue is empty this function will wait until one is created. From pygame 2.0.0, if a `timeout` argument is given, the function will return an event of type `pygame.NOEVENT` if no events enter the queue in `timeout` milliseconds. The event is removed from the queue once it has been returned. While the program is waiting it will sleep in an idle state. This is important for programs that want to share the system with other applications.

    Changed in pygame 2.0.0.dev13: Added `timeout` argument

    Caution

    This function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).
- name: examples
  id: ref/examples
  summary: These examples should help get you started with pygame
  description: "pygame.examples  \nmodule of example programs\n\nThese examples should help get you started with pygame. Here is a brief rundown of what you get. The source code for these examples is in the public domain. Feel free to use for your own projects.\n\nThere are several ways to run the examples. First they can be run as stand-alone programs. Second they can be imported and their `main()` methods called (see below). Finally, the easiest way is to use the python -m option:\n\n``` python\npython -m pygame.examples.<example name> <example arguments>\n```\n\neg:\n\n``` python\npython -m pygame.examples.scaletest someimage.png\n```\n\nResources such as images and sounds for the examples are found in the pygame/examples/data subdirectory.\n\nYou can find where the example files are installed by using the following commands inside the python interpreter.\n\n``` python\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.__file__\n'/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'\n```\n\nOn each OS and version of Python the location will be slightly different. For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/' On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'\n\nYou can also run the examples in the python interpreter by calling each modules main() function.\n\n``` python\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.main()\n```\n\nWe're always on the lookout for more examples and/or example requests. Code like this is probably the best way to start getting involved with python gaming.\n\nexamples as a package is new to pygame 1.9.0. But most of the examples came with pygame much earlier.\n\naliens.main()  \nplay the full aliens example\n\naliens.main() -\\> None\n\nThis started off as a port of the `SDL` demonstration, Aliens. Now it has evolved into something sort of resembling fun. This demonstrates a lot of different uses of sprites and optimized blitting. Also transparency, colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117! goodluck)\n\nstars.main()  \nrun a simple starfield example\n\nstars.main() -\\> None\n\nA simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen.\n\nchimp.main()  \nhit the moving chimp\n\nchimp.main() -\\> None\n\nThis simple example is derived from the line-by-line tutorial that comes with pygame. It is based on a 'popular' web banner. Note there are comments here, but for the full explanation, follow along in the tutorial.\n\nmoveit.main()  \ndisplay animated objects on the screen\n\nmoveit.main() -\\> None\n\nThis is the full and final example from the Pygame Tutorial, \"How Do I Make It Move\". It creates 10 objects and animates them on the screen.\n\nNote it's a bit scant on error checking, but it's easy to read. :\\] Fortunately, this is python, and we needn't wrestle with a pile of error codes.\n\nfonty.main()  \nrun a font rendering example\n\nfonty.main() -\\> None\n\nSuper quick, super simple application demonstrating the different ways to render fonts with the font module\n\nfreetype_misc.main()  \nrun a FreeType rendering example\n\nfreetype_misc.main() -\\> None\n\nA showcase of rendering features the [`pygame.freetype.Font`](freetype#pygame.freetype.Font) class provides in addition to those available with [`pygame.font.Font`](font#pygame.font.Font). It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text.\n\nvgrade.main()  \ndisplay a vertical gradient\n\nvgrade.main() -\\> None\n\nDemonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :\\]\n\neventlist.main()  \ndisplay pygame events\n\neventlist.main() -\\> None\n\nEventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.\n\nThis is not quality 'ui' code at all, but you can see how to implement very non-interactive status displays, or even a crude text output control.\n\narraydemo.main()  \nshow various surfarray effects\n\narraydemo.main(arraytype=None) -\\> None\n\nAnother example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy' will raise ValueError.\n\nsound.main()  \nload and play a sound\n\nsound.main(file_path=None) -\\> None\n\nExtremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.\n\nIf provided, use the audio file 'file_path', otherwise use a default file.\n\n`sound.py` optional command line argument: an audio file\n\nsound_array_demos.main()  \nplay various sndarray effects\n\nsound_array_demos.main(arraytype=None) -\\> None\n\nUses sndarray and NumPy to create offset faded copies of the original sound. Currently it just uses hardcoded values for the number of echoes and the delay. Easy for you to recreate as needed.\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy' will raise ValueError.\n\nliquid.main()  \ndisplay an animated liquid effect\n\nliquid.main() -\\> None\n\nThis example was created in a quick comparison with the BlitzBasic gaming language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).\n\nglcube.main()  \ndisplay an animated 3D cube using OpenGL\n\nglcube.main() -\\> None\n\nUsing PyOpenGL and pygame, this creates a spinning 3D multicolored cube.\n\nscrap_clipboard.main()  \naccess the clipboard\n\nscrap_clipboard.main() -\\> None\n\nA simple demonstration example for the clipboard support.\n\nmask.main()  \ndisplay multiple images bounce off each other using collision detection\n\nmask.main(\\*args) -\\> None\n\nPositional arguments:\n\n``` python\none or more image file names.\n```\n\nThis `pygame.masks` demo will display multiple moving sprites bouncing off each other. More than one sprite image can be provided.\n\nIf run as a program then `mask.py` takes one or more image files as command line arguments.\n\ntestsprite.main()  \nshow lots of sprites moving around\n\ntestsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = \\[640, 480\\], use_alpha = False, flags = 0) -\\> None\n\nOptional keyword arguments:\n\n``` python\nupdate_rects - use the RenderUpdate sprite group class\nuse_static - include non-moving images\nuse_FastRenderGroup - Use the FastRenderGroup sprite group\nscreen_dims - pygame window dimensions\nuse_alpha - use alpha blending\nflags - additional display mode flags\n```\n\nLike the `testsprite.c` that comes with SDL, this pygame version shows lots of sprites moving around.\n\nIf run as a stand-alone program then no command line arguments are taken.\n\nheadless_no_windows_needed.main()  \nwrite an image file that is smoothscaled copy of an input file\n\nheadless_no_windows_needed.main(fin, fout, w, h) -\\> None\n\narguments:\n\n``` python\nfin - name of an input image file\nfout - name of the output file to create/overwrite\nw, h - size of the rescaled image, as integer width and height\n```\n\nHow to use pygame with no windowing system, like on headless servers.\n\nThumbnail generation with scaling is an example of what you can do with pygame.\n\n`NOTE`: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.\n\nIf `headless_no_windows_needed.py` is run as a program it takes the following command line arguments:\n\n``` python\n-scale inputimage outputimage new_width new_height\neg. -scale in.png outpng 50 50\n```\n\njoystick.main()  \ndemonstrate joystick functionality\n\njoystick.main() -\\> None\n\nA demo showing full joystick support.\n\nNew in pygame 2.0.2.\n\nblend_fill.main()  \ndemonstrate the various surface.fill method blend options\n\nblend_fill.main() -\\> None\n\nA interactive demo that lets one choose which BLEND_xxx option to apply to a surface.\n\nblit_blends.main()  \nuses alternative additive fill to that of surface.fill\n\nblit_blends.main() -\\> None\n\nFake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill.\n\ncursors.main()  \ndisplay two different custom cursors\n\ncursors.main() -\\> None\n\nDisplay an arrow or circle with crossbar cursor.\n\npixelarray.main()  \ndisplay various pixelarray generated effects\n\npixelarray.main() -\\> None\n\nDisplay various pixelarray generated effects.\n\nscaletest.main()  \ninteractively scale an image using smoothscale\n\nscaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -\\> None\n\narguments:\n\n``` python\nimagefile - file name of source image (required)\nconvert_alpha - use convert_alpha() on the surf (default False)\nrun_speed_test - (default False)\n```\n\nA smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.\n\nIf `scaletest.py` is run as a program then the command line options are:\n\n``` python\nImageFile [-t] [-convert_alpha]\n[-t] = Run Speed Test\n[-convert_alpha] = Use convert_alpha() on the surf.\n```\n\nmidi.main()  \nrun a midi example\n\nmidi.main(mode='output', device_id=None) -\\> None\n\nArguments:\n\n``` python\nmode - if 'output' run a midi keyboard output example\n          'input' run a midi event logger input example\n          'list' list available midi devices\n       (default 'output')\ndevice_id - midi device number; if None then use the default midi input or\n            output device for the system\n```\n\nThe output example shows how to translate mouse clicks or computer keyboard events into midi notes. It implements a rudimentary button widget and state machine.\n\nThe input example shows how to translate midi input to pygame events.\n\nWith the use of a virtual midi patch cord the output and input examples can be run as separate processes and connected so the keyboard output is displayed on a console.\n\nnew to pygame 1.9.0\n\nscroll.main()  \nrun a Surface.scroll example that shows a magnified image\n\nscroll.main(image_file=None) -\\> None\n\nThis example shows a scrollable image that has a zoom factor of eight. It uses the [`Surface.scroll()`](surface#pygame.Surface.scroll \"pygame.Surface.scroll\") function to shift the image on the display surface. A clip rectangle protects a margin area. If called as a function, the example accepts an optional image file path. If run as a program it takes an optional file path command line argument. If no file is provided a default image file is used.\n\nWhen running click on a black triangle to move one pixel in the direction the triangle points. Or use the arrow keys. Close the window or press `ESC` to quit.\n\ncamera.main()  \ndisplay video captured live from an attached camera\n\ncamera.main() -\\> None\n\nA simple live video player, it uses the first available camera it finds on the system.\n\nplaymus.main()  \nplay an audio file\n\nplaymus.main(file_path) -\\> None\n\nA simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/examples.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/examples.html](https://www.pygame.org/docs/ref/examples.html)"
- name: examples.aliens.main
  id: ref/examples#pygame.examples.aliens.main
  summary: This started off as a port of the SDL demonstration, Aliens
  belongs_to: examples
  description: |-
    aliens.main()

    play the full aliens example

    aliens.main() -\> None

    This started off as a port of the `SDL` demonstration, Aliens. Now it has evolved into something sort of resembling fun. This demonstrates a lot of different uses of sprites and optimized blitting. Also transparency, colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117! goodluck)
- name: examples.arraydemo.main
  id: ref/examples#pygame.examples.arraydemo.main
  summary: Another example filled with various surfarray effects
  belongs_to: examples
  description: |-
    arraydemo.main()

    show various surfarray effects

    arraydemo.main(arraytype=None) -\> None

    Another example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray

    The `arraytype` parameter is deprecated; passing any value besides 'numpy' will raise ValueError.
- name: examples.blend_fill.main
  id: ref/examples#pygame.examples.blend_fill.main
  summary: A interactive demo that lets one choose which BLEND_xxx option to apply to a surface
  belongs_to: examples
  description: |-
    blend_fill.main()

    demonstrate the various surface.fill method blend options

    blend_fill.main() -\> None

    A interactive demo that lets one choose which BLEND_xxx option to apply to a surface.
- name: examples.blit_blends.main
  id: ref/examples#pygame.examples.blit_blends.main
  summary: Fake additive blending
  belongs_to: examples
  description: |-
    blit_blends.main()

    uses alternative additive fill to that of surface.fill

    blit_blends.main() -\> None

    Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill.
- name: examples.camera.main
  id: ref/examples#pygame.examples.camera.main
  summary: A simple live video player, it uses the first available camera it finds on the system
  belongs_to: examples
  description: |-
    camera.main()

    display video captured live from an attached camera

    camera.main() -\> None

    A simple live video player, it uses the first available camera it finds on the system.
- name: examples.chimp.main
  id: ref/examples#pygame.examples.chimp.main
  summary: This simple example is derived from the line-by-line tutorial that comes with pygame
  belongs_to: examples
  description: |-
    chimp.main()

    hit the moving chimp

    chimp.main() -\> None

    This simple example is derived from the line-by-line tutorial that comes with pygame. It is based on a 'popular' web banner. Note there are comments here, but for the full explanation, follow along in the tutorial.
- name: examples.cursors.main
  id: ref/examples#pygame.examples.cursors.main
  summary: Display an arrow or circle with crossbar cursor
  belongs_to: examples
  description: |-
    cursors.main()

    display two different custom cursors

    cursors.main() -\> None

    Display an arrow or circle with crossbar cursor.
- name: examples.eventlist.main
  id: ref/examples#pygame.examples.eventlist.main
  summary: Eventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input
  belongs_to: examples
  description: |-
    eventlist.main()

    display pygame events

    eventlist.main() -\> None

    Eventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.

    This is not quality 'ui' code at all, but you can see how to implement very non-interactive status displays, or even a crude text output control.
- name: examples.fonty.main
  id: ref/examples#pygame.examples.fonty.main
  summary: null
  belongs_to: examples
  description: |-
    fonty.main()

    run a font rendering example

    fonty.main() -\> None

    Super quick, super simple application demonstrating the different ways to render fonts with the font module
- name: examples.freetype_misc.main
  id: ref/examples#pygame.examples.freetype_misc.main
  summary: A showcase of rendering features the pygame.freetype.Font class provides in addition to those available with pygame.font.Font
  belongs_to: examples
  description: |-
    freetype_misc.main()

    run a FreeType rendering example

    freetype_misc.main() -\> None

    A showcase of rendering features the [`pygame.freetype.Font`](freetype#pygame.freetype.Font) class provides in addition to those available with [`pygame.font.Font`](font#pygame.font.Font). It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text.
- name: examples.glcube.main
  id: ref/examples#pygame.examples.glcube.main
  summary: Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube
  belongs_to: examples
  description: |-
    glcube.main()

    display an animated 3D cube using OpenGL

    glcube.main() -\> None

    Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.
- name: examples.headless_no_windows_needed.main
  id: ref/examples#pygame.examples.headless_no_windows_needed.main
  summary: How to use pygame with no windowing system, like on headless servers
  belongs_to: examples
  description: |-
    headless_no_windows_needed.main()

    write an image file that is smoothscaled copy of an input file

    headless_no_windows_needed.main(fin, fout, w, h) -\> None

    arguments:

    ``` python
    fin - name of an input image file
    fout - name of the output file to create/overwrite
    w, h - size of the rescaled image, as integer width and height
    ```

    How to use pygame with no windowing system, like on headless servers.

    Thumbnail generation with scaling is an example of what you can do with pygame.

    `NOTE`: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.

    If `headless_no_windows_needed.py` is run as a program it takes the following command line arguments:

    ``` python
    -scale inputimage outputimage new_width new_height
    eg. -scale in.png outpng 50 50
    ```
- name: examples.joystick.main
  id: ref/examples#pygame.examples.joystick.main
  summary: A demo showing full joystick support
  belongs_to: examples
  description: |-
    joystick.main()

    demonstrate joystick functionality

    joystick.main() -\> None

    A demo showing full joystick support.

    New in pygame 2.0.2.
- name: examples.liquid.main
  id: ref/examples#pygame.examples.liquid.main
  summary: This example was created in a quick comparison with the BlitzBasic gaming language
  belongs_to: examples
  description: |-
    liquid.main()

    display an animated liquid effect

    liquid.main() -\> None

    This example was created in a quick comparison with the BlitzBasic gaming language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).
- name: examples.mask.main
  id: ref/examples#pygame.examples.mask.main
  summary: This pygame.masks demo will display multiple moving sprites bouncing off each other
  belongs_to: examples
  description: |-
    mask.main()

    display multiple images bounce off each other using collision detection

    mask.main(\*args) -\> None

    Positional arguments:

    ``` python
    one or more image file names.
    ```

    This `pygame.masks` demo will display multiple moving sprites bouncing off each other. More than one sprite image can be provided.

    If run as a program then `mask.py` takes one or more image files as command line arguments.
- name: examples.midi.main
  id: ref/examples#pygame.examples.midi.main
  summary: The output example shows how to translate mouse clicks or computer keyboard events into midi notes
  belongs_to: examples
  description: |-
    midi.main()

    run a midi example

    midi.main(mode='output', device_id=None) -\> None

    Arguments:

    ``` python
    mode - if 'output' run a midi keyboard output example
              'input' run a midi event logger input example
              'list' list available midi devices
           (default 'output')
    device_id - midi device number; if None then use the default midi input or
                output device for the system
    ```

    The output example shows how to translate mouse clicks or computer keyboard events into midi notes. It implements a rudimentary button widget and state machine.

    The input example shows how to translate midi input to pygame events.

    With the use of a virtual midi patch cord the output and input examples can be run as separate processes and connected so the keyboard output is displayed on a console.

    new to pygame 1.9.0
- name: examples.moveit.main
  id: ref/examples#pygame.examples.moveit.main
  summary: This is the full and final example from the Pygame Tutorial, "How Do I Make It Move". It creates 10 objects and animates them on the screen
  belongs_to: examples
  description: |-
    moveit.main()

    display animated objects on the screen

    moveit.main() -\> None

    This is the full and final example from the Pygame Tutorial, "How Do I Make It Move". It creates 10 objects and animates them on the screen.

    Note it's a bit scant on error checking, but it's easy to read. :\] Fortunately, this is python, and we needn't wrestle with a pile of error codes.
- name: examples.pixelarray.main
  id: ref/examples#pygame.examples.pixelarray.main
  summary: Display various pixelarray generated effects
  belongs_to: examples
  description: |-
    pixelarray.main()

    display various pixelarray generated effects

    pixelarray.main() -\> None

    Display various pixelarray generated effects.
- name: examples.playmus.main
  id: ref/examples#pygame.examples.playmus.main
  summary: A simple music player with window and keyboard playback control
  belongs_to: examples
  description: "playmus.main()\n\nplay an audio file\n\nplaymus.main(file_path) -\\> None\n\nA simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/examples.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/examples.html](https://www.pygame.org/docs/ref/examples.html)"
- name: examples.scaletest.main
  id: ref/examples#pygame.examples.scaletest.main
  summary: A smoothscale example that resized an image on the screen
  belongs_to: examples
  description: |-
    scaletest.main()

    interactively scale an image using smoothscale

    scaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -\> None

    arguments:

    ``` python
    imagefile - file name of source image (required)
    convert_alpha - use convert_alpha() on the surf (default False)
    run_speed_test - (default False)
    ```

    A smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.

    If `scaletest.py` is run as a program then the command line options are:

    ``` python
    ImageFile [-t] [-convert_alpha]
    [-t] = Run Speed Test
    [-convert_alpha] = Use convert_alpha() on the surf.
    ```
- name: examples.scrap_clipboard.main
  id: ref/examples#pygame.examples.scrap_clipboard.main
  summary: A simple demonstration example for the clipboard support
  belongs_to: examples
  description: |-
    scrap_clipboard.main()

    access the clipboard

    scrap_clipboard.main() -\> None

    A simple demonstration example for the clipboard support.
- name: examples.scroll.main
  id: ref/examples#pygame.examples.scroll.main
  summary: This example shows a scrollable image that has a zoom factor of eight
  belongs_to: examples
  description: |-
    scroll.main()

    run a Surface.scroll example that shows a magnified image

    scroll.main(image_file=None) -\> None

    This example shows a scrollable image that has a zoom factor of eight. It uses the [`Surface.scroll()`](surface#pygame.Surface.scroll "pygame.Surface.scroll") function to shift the image on the display surface. A clip rectangle protects a margin area. If called as a function, the example accepts an optional image file path. If run as a program it takes an optional file path command line argument. If no file is provided a default image file is used.

    When running click on a black triangle to move one pixel in the direction the triangle points. Or use the arrow keys. Close the window or press `ESC` to quit.
- name: examples.sound.main
  id: ref/examples#pygame.examples.sound.main
  summary: Extremely basic testing of the mixer module
  belongs_to: examples
  description: |-
    sound.main()

    load and play a sound

    sound.main(file_path=None) -\> None

    Extremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.

    If provided, use the audio file 'file_path', otherwise use a default file.

    `sound.py` optional command line argument: an audio file
- name: examples.sound_array_demos.main
  id: ref/examples#pygame.examples.sound_array_demos.main
  summary: Uses sndarray and NumPy to create offset faded copies of the original sound
  belongs_to: examples
  description: |-
    sound_array_demos.main()

    play various sndarray effects

    sound_array_demos.main(arraytype=None) -\> None

    Uses sndarray and NumPy to create offset faded copies of the original sound. Currently it just uses hardcoded values for the number of echoes and the delay. Easy for you to recreate as needed.

    The `arraytype` parameter is deprecated; passing any value besides 'numpy' will raise ValueError.
- name: examples.stars.main
  id: ref/examples#pygame.examples.stars.main
  summary: A simple starfield example
  belongs_to: examples
  description: |-
    stars.main()

    run a simple starfield example

    stars.main() -\> None

    A simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen.
- name: examples.testsprite.main
  id: ref/examples#pygame.examples.testsprite.main
  summary: Like the testsprite.c that comes with SDL, this pygame version shows lots of sprites moving around
  belongs_to: examples
  description: |-
    testsprite.main()

    show lots of sprites moving around

    testsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = \[640, 480\], use_alpha = False, flags = 0) -\> None

    Optional keyword arguments:

    ``` python
    update_rects - use the RenderUpdate sprite group class
    use_static - include non-moving images
    use_FastRenderGroup - Use the FastRenderGroup sprite group
    screen_dims - pygame window dimensions
    use_alpha - use alpha blending
    flags - additional display mode flags
    ```

    Like the `testsprite.c` that comes with SDL, this pygame version shows lots of sprites moving around.

    If run as a stand-alone program then no command line arguments are taken.
- name: examples.vgrade.main
  id: ref/examples#pygame.examples.vgrade.main
  summary: Demonstrates creating a vertical gradient with pixelcopy and NumPy python
  belongs_to: examples
  description: |-
    vgrade.main()

    display a vertical gradient

    vgrade.main() -\> None

    Demonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :\]
- name: fastevent
  id: ref/fastevent
  summary: In older pygame versions before pygame 2, pygame.event was not well suited for posting events from different threads
  description: "pygame.fastevent  \npygame module for interacting with events and queues\n\nIMPORTANT NOTE: THIS MODULE IS DEPRECATED IN PYGAME 2.2\n\nIn older pygame versions before pygame 2, [`pygame.event`](event#module-pygame.event) was not well suited for posting events from different threads. This module served as a replacement (with less features) for multithreaded use. Now, the usage of this module is highly discouraged in favour of use of the main [`pygame.event`](event#module-pygame.event) module. This module will be removed in a future pygame version.\n\nBelow, the legacy docs of the module is provided\n\npygame.fastevent.init()  \ninitialize pygame.fastevent\n\ninit() -\\> None\n\nInitialize the pygame.fastevent module.\n\npygame.fastevent.get_init()  \nreturns True if the fastevent module is currently initialized\n\nget_init() -\\> bool\n\nReturns True if the pygame.fastevent module is currently initialized.\n\npygame.fastevent.pump()  \ninternally process pygame event handlers\n\npump() -\\> None\n\nFor each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system.\n\nThis function is not necessary if your program is consistently processing events on the queue through the other [`pygame.fastevent`](#module-pygame.fastevent) functions.\n\nThere are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.\n\npygame.fastevent.wait()  \nwait for an event\n\nwait() -\\> Event\n\nReturns the current event on the queue. If there are no messages waiting on the queue, this will not return until one is available. Sometimes it is important to use this wait to get events from the queue, it will allow your application to idle when the user isn't doing anything with it.\n\npygame.fastevent.poll()  \nget an available event\n\npoll() -\\> Event\n\nReturns next event on queue. If there is no event waiting on the queue, this will return an event with type NOEVENT.\n\npygame.fastevent.get()  \nget all events from the queue\n\nget() -\\> list of Events\n\nThis will get all the messages and remove them from the queue.\n\npygame.fastevent.post()  \nplace an event on the queue\n\npost(Event) -\\> None\n\nThis will post your own event objects onto the event queue. You can post any event type you want, but some care must be taken. For example, if you post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event will expect the standard MOUSEBUTTONDOWN attributes to be available, like 'pos' and 'button'.\n\nBecause pygame.fastevent.post() may have to wait for the queue to empty, you can get into a dead lock if you try to append an event on to a full queue from the thread that processes events. For that reason I do not recommend using this function in the main thread of an SDL program.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/fastevent.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/fastevent.html](https://www.pygame.org/docs/ref/fastevent.html)"
- name: fastevent.get
  id: ref/fastevent#pygame.fastevent.get
  summary: This will get all the messages and remove them from the queue
  belongs_to: fastevent
  description: |-
    pygame.fastevent.get()

    get all events from the queue

    get() -\> list of Events

    This will get all the messages and remove them from the queue.
- name: fastevent.get_init
  id: ref/fastevent#pygame.fastevent.get_init
  summary: Returns True if the pygame.fastevent module is currently initialized
  belongs_to: fastevent
  description: |-
    pygame.fastevent.get_init()

    returns True if the fastevent module is currently initialized

    get_init() -\> bool

    Returns True if the pygame.fastevent module is currently initialized.
- name: fastevent.init
  id: ref/fastevent#pygame.fastevent.init
  summary: Initialize the pygame.fastevent module
  belongs_to: fastevent
  description: |-
    pygame.fastevent.init()

    initialize pygame.fastevent

    init() -\> None

    Initialize the pygame.fastevent module.
- name: fastevent.poll
  id: ref/fastevent#pygame.fastevent.poll
  summary: Returns next event on queue
  belongs_to: fastevent
  description: |-
    pygame.fastevent.poll()

    get an available event

    poll() -\> Event

    Returns next event on queue. If there is no event waiting on the queue, this will return an event with type NOEVENT.
- name: fastevent.post
  id: ref/fastevent#pygame.fastevent.post
  summary: This will post your own event objects onto the event queue
  belongs_to: fastevent
  description: "pygame.fastevent.post()\n\nplace an event on the queue\n\npost(Event) -\\> None\n\nThis will post your own event objects onto the event queue. You can post any event type you want, but some care must be taken. For example, if you post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event will expect the standard MOUSEBUTTONDOWN attributes to be available, like 'pos' and 'button'.\n\nBecause pygame.fastevent.post() may have to wait for the queue to empty, you can get into a dead lock if you try to append an event on to a full queue from the thread that processes events. For that reason I do not recommend using this function in the main thread of an SDL program.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/fastevent.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/fastevent.html](https://www.pygame.org/docs/ref/fastevent.html)"
- name: fastevent.pump
  id: ref/fastevent#pygame.fastevent.pump
  summary: For each frame of your game, you will need to make some sort of call to the event queue
  belongs_to: fastevent
  description: |-
    pygame.fastevent.pump()

    internally process pygame event handlers

    pump() -\> None

    For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system.

    This function is not necessary if your program is consistently processing events on the queue through the other [`pygame.fastevent`](#module-pygame.fastevent) functions.

    There are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.
- name: fastevent.wait
  id: ref/fastevent#pygame.fastevent.wait
  summary: Returns the current event on the queue
  belongs_to: fastevent
  description: |-
    pygame.fastevent.wait()

    wait for an event

    wait() -\> Event

    Returns the current event on the queue. If there are no messages waiting on the queue, this will not return until one is available. Sometimes it is important to use this wait to get events from the queue, it will allow your application to idle when the user isn't doing anything with it.
- name: font
  id: ref/font
  summary: The font module allows for rendering TrueType fonts into Surface objects
  description: "pygame.font  \npygame module for loading and rendering fonts\n\nThe font module allows for rendering TrueType fonts into Surface objects. This module is built on top of the SDL_ttf library, which comes with all normal pygame installations.\n\nMost of the work done with fonts are done by using the actual Font objects. The module by itself only has routines to support the creation of Font objects with [`pygame.font.Font()`](#pygame.font.Font).\n\nYou can load fonts from the system by using the [`pygame.font.SysFont()`](#pygame.font.SysFont) function. There are a few other functions to help look up the system fonts.\n\nPygame comes with a builtin default font, freesansbold. This can always be accessed by passing `None` as the font name.\n\nBefore pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character ('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf 2.0.15 accepts any valid UCS-4 / UTF-32 character (like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')). More about this in [`Font.render()`](#pygame.font.Font.render \"pygame.font.Font.render\").\n\nBefore pygame 2.0.3, this character space restriction can be avoided by using the [`pygame.freetype`](freetype#module-pygame.freetype) based `pygame.ftfont` to emulate the Font module. This can be used by defining the environment variable PYGAME_FREETYPE before the first import of [`pygame`](pygame#module-pygame). Since the problem `pygame.ftfont` solves no longer exists, it will likely be removed in the future.\n\npygame.font.init()  \ninitialize the font module\n\ninit() -\\> None\n\nThis method is called automatically by `pygame.init()`. It initializes the font module. The module must be initialized before any other functions will work.\n\nIt is safe to call this function more than once.\n\npygame.font.quit()  \nuninitialize the font module\n\nquit() -\\> None\n\nManually uninitialize SDL_ttf's font system. This is called automatically by `pygame.quit()`.\n\nIt is safe to call this function even if font is currently not initialized.\n\npygame.font.get_init()  \ntrue if the font module is initialized\n\nget_init() -\\> bool\n\nTest if the font module is initialized or not.\n\npygame.font.get_default_font()  \nget the filename of the default font\n\nget_default_font() -\\> string\n\nReturn the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives.\n\npygame.font.get_sdl_ttf_version()  \ngets SDL_ttf version\n\nget_sdl_ttf_version(linked=True) -\\> (major, minor, patch)\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave get_sdl_ttf_version feedback with authors](https://github.com/pygame/pygame/pull/3095)\n\nReturns a tuple of integers that identify SDL_ttf's version. SDL_ttf is the underlying font rendering library, written in C, on which pygame's font module depends. If 'linked' is True (the default), the function returns the version of the linked TTF library. Otherwise this function returns the version of TTF pygame was compiled with\n\nNew in pygame 2.1.3.\n\npygame.font.get_fonts()  \nget all available fonts\n\nget_fonts() -\\> list of strings\n\nReturns a list of all the fonts available on the system. The names of the fonts will be set to lowercase with all spaces and punctuation removed. This works on most systems, but some will return an empty list if they cannot find fonts.\n\nChanged in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\npygame.font.match_font()  \nfind a specific font on the system\n\nmatch_font(name, bold=False, italic=False) -\\> path\n\nReturns the full path to a font file on the system. If bold or italic are set to true, this will attempt to find the correct family of font.\n\nThe font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order. If none of the given names are found, None is returned.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nChanged in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\nExample:\n\n``` python\nprint pygame.font.match_font('bitstreamverasans')\n# output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf\n# (but only if you have Vera on your system)\n```\n\npygame.font.SysFont()  \ncreate a Font object from the system fonts\n\nSysFont(name, size, bold=False, italic=False) -\\> Font\n\nReturn a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nChanged in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\npygame.font.Font  \ncreate a new Font object from a file\n\nFont(file_path=None, size=12) -\\> Font\n\nFont(file_path, size) -\\> Font\n\nFont(pathlib.Path, size) -\\> Font\n\nFont(object, size) -\\> Font\n\nLoad a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is `None` the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed. If no arguments are given then the default font will be used and a font size of 12 is used.\n\nFont objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs.\n\nbold  \nGets or sets whether the font should be rendered in (faked) bold.\n\nbold -\\> bool\n\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic, underline and strikethrough modes.\n\nNew in pygame 2.0.0.\n\nitalic  \nGets or sets whether the font should be rendered in (faked) italics.\n\nitalic -\\> bool\n\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold, underline and strikethrough modes.\n\nNew in pygame 2.0.0.\n\nunderline  \nGets or sets whether the font should be rendered with an underline.\n\nunderline -\\> bool\n\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and strikethrough modes.\n\nNew in pygame 2.0.0.\n\nstrikethrough  \nGets or sets whether the font should be rendered with a strikethrough.\n\nstrikethrough -\\> bool\n\nWhether the font should be rendered with a strikethrough.\n\nWhen set to True, all rendered fonts will include an strikethrough. The strikethrough is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and underline modes.\n\nNew in pygame 2.1.3.\n\nrender()  \ndraw text on a new Surface\n\nrender(text, antialias, color, background=None) -\\> Surface\n\nThis creates a new Surface with the specified text rendered on it. [`pygame.font`](#module-pygame.font) provides no way to directly draw text on an existing Surface: instead you must use [`Font.render()`](#pygame.font.Font.render \"pygame.font.Font.render\") to create an image (Surface) of the text, then blit this image onto another Surface.\n\nThe text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('\\u0001' to '\\uFFFF') were previously supported and any greater unicode codepoint would raise a UnicodeError. Now, characters in the UCS-4 range are supported. For char strings a `LATIN1` encoding is assumed. The antialias argument is a boolean: if True the characters will have smooth edges. The color argument is the color of the text \\[e.g.: (0,0,255) for blue\\]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.\n\nThe Surface returned will be of the dimensions required to hold the text. (the same as those returned by [`Font.size()`](#pygame.font.Font.size \"pygame.font.Font.size\")). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.\n\nDepending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit `RGB` images. If the background is transparent a pixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.\n\nIf you render '\\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle newlines yourself.\n\nFont rendering is not thread safe: only a single thread can render text at any time.\n\nChanged in pygame 2.0.3: Rendering UCS4 unicode works and does not raise an exception. Use if hasattr(pygame.font, \"UCS4\"): to see if pygame supports rendering UCS4 unicode including more languages and emoji.\n\nsize()  \ndetermine the amount of space needed to render text\n\nsize(text) -\\> (width, height)\n\nReturns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for word wrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for \"ae\" will not always match the width for \"a\" + \"e\".\n\nset_underline()  \ncontrol if text is rendered with an underline\n\nset_underline(bool) -\\> None\n\nWhen enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and strikethrough modes.\n\nNote\n\nThis is the same as the [`underline`](#pygame.font.Font.underline \"pygame.font.Font.underline\") attribute.\n\nget_underline()  \ncheck if text will be rendered with an underline\n\nget_underline() -\\> bool\n\nReturn True when the font underline is enabled.\n\n> Note\n>\n> This is the same as the [`underline`](#pygame.font.Font.underline \"pygame.font.Font.underline\") attribute.\n\nset_strikethrough()  \ncontrol if text is rendered with a strikethrough\n\nset_strikethrough(bool) -\\> None\n\nWhen enabled, all rendered fonts will include a strikethrough. The strikethrough is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and underline modes.\n\nNote\n\nThis is the same as the [`strikethrough`](#pygame.font.Font.strikethrough \"pygame.font.Font.strikethrough\") attribute.\n\nNew in pygame 2.1.3.\n\nget_strikethrough()  \ncheck if text will be rendered with a strikethrough\n\nget_strikethrough() -\\> bool\n\nReturn True when the font strikethrough is enabled.\n\n> Note\n>\n> This is the same as the [`strikethrough`](#pygame.font.Font.strikethrough \"pygame.font.Font.strikethrough\") attribute.\n>\n> New in pygame 2.1.3.\n\nset_bold()  \nenable fake rendering of bold text\n\nset_bold(bool) -\\> None\n\nEnables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic, underline and strikethrough modes.\n\nNote\n\nThis is the same as the [`bold`](#pygame.font.Font.bold \"pygame.font.Font.bold\") attribute.\n\nget_bold()  \ncheck if text will be rendered bold\n\nget_bold() -\\> bool\n\nReturn True when the font bold rendering mode is enabled.\n\nNote\n\nThis is the same as the [`bold`](#pygame.font.Font.bold \"pygame.font.Font.bold\") attribute.\n\nset_italic()  \nenable fake rendering of italic text\n\nset_italic(bool) -\\> None\n\nEnables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold, underline and strikethrough modes.\n\nNote\n\nThis is the same as the [`italic`](#pygame.font.Font.italic \"pygame.font.Font.italic\") attribute.\n\nmetrics()  \ngets the metrics for each character in the passed string\n\nmetrics(text) -\\> list\n\nThe list contains tuples for each character, which contain the minimum `X` offset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset and the advance offset (bearing plus width) of the character. \\[(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...\\]. None is entered in the list for each unrecognized character.\n\nget_italic()  \ncheck if the text will be rendered italic\n\nget_italic() -\\> bool\n\nReturn True when the font italic rendering mode is enabled.\n\nNote\n\nThis is the same as the [`italic`](#pygame.font.Font.italic \"pygame.font.Font.italic\") attribute.\n\nget_linesize()  \nget the line space of the font text\n\nget_linesize() -\\> int\n\nReturn the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.\n\nget_height()  \nget the height of the font\n\nget_height() -\\> int\n\nReturn the height in pixels of the actual rendered text. This is the average size for each glyph in the font.\n\nget_ascent()  \nget the ascent of the font\n\nget_ascent() -\\> int\n\nReturn the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.\n\nget_descent()  \nget the descent of the font\n\nget_descent() -\\> int\n\nReturn the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font.\n\nset_script()  \nset the script code for text shaping\n\nset_script(str) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave feedback with authors](https://github.com/pygame/pygame/pull/3330)\n\nSets the script used by harfbuzz text shaping, taking a 4 character script code as input. For example, Hindi is written in the Devanagari script, for which the script code is \"Deva\". See the full list of script codes in [ISO 15924](https://www.unicode.org/iso15924/iso15924-codes.html).\n\nThis method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the method will raise a pygame.error.\n\nNew in pygame 2.2.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/font.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/font.html](https://www.pygame.org/docs/ref/font.html)"
- name: font.Font
  id: ref/font#pygame.font.Font
  summary: Load a new font from a given filename or a python file object
  belongs_to: font
  description: |-
    pygame.font.Font

    create a new Font object from a file

    Font(file_path=None, size=12) -\> Font

    Font(file_path, size) -\> Font

    Font(pathlib.Path, size) -\> Font

    Font(object, size) -\> Font

    Load a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is `None` the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed. If no arguments are given then the default font will be used and a font size of 12 is used.

    Font objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs.
- name: font.Font.bold
  id: ref/font#pygame.font.Font.bold
  summary: Gets or sets whether the font should be rendered in (faked) bold
  belongs_to: font
  description: |-
    bold

    Gets or sets whether the font should be rendered in (faked) bold.

    bold -\> bool

    Whether the font should be rendered in bold.

    When set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic, underline and strikethrough modes.

    New in pygame 2.0.0.
- name: font.Font.get_ascent
  id: ref/font#pygame.font.Font.get_ascent
  summary: Return the height in pixels for the font ascent
  belongs_to: font
  description: |-
    get_ascent()

    get the ascent of the font

    get_ascent() -\> int

    Return the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.
- name: font.Font.get_bold
  id: ref/font#pygame.font.Font.get_bold
  summary: Return True when the font bold rendering mode is enabled
  belongs_to: font
  description: |-
    get_bold()

    check if text will be rendered bold

    get_bold() -\> bool

    Return True when the font bold rendering mode is enabled.

    Note

    This is the same as the [`bold`](#pygame.font.Font.bold "pygame.font.Font.bold") attribute.
- name: font.Font.get_descent
  id: ref/font#pygame.font.Font.get_descent
  summary: Return the height in pixels for the font descent
  belongs_to: font
  description: |-
    get_descent()

    get the descent of the font

    get_descent() -\> int

    Return the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font.
- name: font.Font.get_height
  id: ref/font#pygame.font.Font.get_height
  summary: Return the height in pixels of the actual rendered text
  belongs_to: font
  description: |-
    get_height()

    get the height of the font

    get_height() -\> int

    Return the height in pixels of the actual rendered text. This is the average size for each glyph in the font.
- name: font.Font.get_italic
  id: ref/font#pygame.font.Font.get_italic
  summary: Return True when the font italic rendering mode is enabled
  belongs_to: font
  description: |-
    get_italic()

    check if the text will be rendered italic

    get_italic() -\> bool

    Return True when the font italic rendering mode is enabled.

    Note

    This is the same as the [`italic`](#pygame.font.Font.italic "pygame.font.Font.italic") attribute.
- name: font.Font.get_linesize
  id: ref/font#pygame.font.Font.get_linesize
  summary: Return the height in pixels for a line of text with the font
  belongs_to: font
  description: |-
    get_linesize()

    get the line space of the font text

    get_linesize() -\> int

    Return the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.
- name: font.Font.get_strikethrough
  id: ref/font#pygame.font.Font.get_strikethrough
  summary: Return True when the font strikethrough is enabled
  belongs_to: font
  description: |-
    get_strikethrough()

    check if text will be rendered with a strikethrough

    get_strikethrough() -\> bool

    Return True when the font strikethrough is enabled.

    > Note
    >
    > This is the same as the [`strikethrough`](#pygame.font.Font.strikethrough "pygame.font.Font.strikethrough") attribute.
    >
    > New in pygame 2.1.3.
- name: font.Font.get_underline
  id: ref/font#pygame.font.Font.get_underline
  summary: Return True when the font underline is enabled
  belongs_to: font
  description: |-
    get_underline()

    check if text will be rendered with an underline

    get_underline() -\> bool

    Return True when the font underline is enabled.

    > Note
    >
    > This is the same as the [`underline`](#pygame.font.Font.underline "pygame.font.Font.underline") attribute.
- name: font.Font.italic
  id: ref/font#pygame.font.Font.italic
  summary: Gets or sets whether the font should be rendered in (faked) italics
  belongs_to: font
  description: |-
    italic

    Gets or sets whether the font should be rendered in (faked) italics.

    italic -\> bool

    Whether the font should be rendered in italic.

    When set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold, underline and strikethrough modes.

    New in pygame 2.0.0.
- name: font.Font.metrics
  id: ref/font#pygame.font.Font.metrics
  summary: The list contains tuples for each character, which contain the minimum X offset, the maximum X offset, the minimum Y offset, the maximum Y offset and the advance offset (bearing plus width) of the character
  belongs_to: font
  description: |-
    metrics()

    gets the metrics for each character in the passed string

    metrics(text) -\> list

    The list contains tuples for each character, which contain the minimum `X` offset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset and the advance offset (bearing plus width) of the character. \[(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...\]. None is entered in the list for each unrecognized character.
- name: font.Font.render
  id: ref/font#pygame.font.Font.render
  summary: This creates a new Surface with the specified text rendered on it
  belongs_to: font
  description: |-
    render()

    draw text on a new Surface

    render(text, antialias, color, background=None) -\> Surface

    This creates a new Surface with the specified text rendered on it. [`pygame.font`](#module-pygame.font) provides no way to directly draw text on an existing Surface: instead you must use [`Font.render()`](#pygame.font.Font.render "pygame.font.Font.render") to create an image (Surface) of the text, then blit this image onto another Surface.

    The text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('\u0001' to '\uFFFF') were previously supported and any greater unicode codepoint would raise a UnicodeError. Now, characters in the UCS-4 range are supported. For char strings a `LATIN1` encoding is assumed. The antialias argument is a boolean: if True the characters will have smooth edges. The color argument is the color of the text \[e.g.: (0,0,255) for blue\]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.

    The Surface returned will be of the dimensions required to hold the text. (the same as those returned by [`Font.size()`](#pygame.font.Font.size "pygame.font.Font.size")). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.

    Depending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit `RGB` images. If the background is transparent a pixel alpha will be included.

    Optimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.

    If you render '\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle newlines yourself.

    Font rendering is not thread safe: only a single thread can render text at any time.

    Changed in pygame 2.0.3: Rendering UCS4 unicode works and does not raise an exception. Use if hasattr(pygame.font, "UCS4"): to see if pygame supports rendering UCS4 unicode including more languages and emoji.
- name: font.Font.set_bold
  id: ref/font#pygame.font.Font.set_bold
  summary: Enables the bold rendering of text
  belongs_to: font
  description: |-
    set_bold()

    enable fake rendering of bold text

    set_bold(bool) -\> None

    Enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic, underline and strikethrough modes.

    Note

    This is the same as the [`bold`](#pygame.font.Font.bold "pygame.font.Font.bold") attribute.
- name: font.Font.set_italic
  id: ref/font#pygame.font.Font.set_italic
  summary: Enables fake rendering of italic text
  belongs_to: font
  description: |-
    set_italic()

    enable fake rendering of italic text

    set_italic(bool) -\> None

    Enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold, underline and strikethrough modes.

    Note

    This is the same as the [`italic`](#pygame.font.Font.italic "pygame.font.Font.italic") attribute.
- name: font.Font.set_script
  id: ref/font#pygame.font.Font.set_script
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: font
  description: "set_script()\n\nset the script code for text shaping\n\nset_script(str) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave feedback with authors](https://github.com/pygame/pygame/pull/3330)\n\nSets the script used by harfbuzz text shaping, taking a 4 character script code as input. For example, Hindi is written in the Devanagari script, for which the script code is \"Deva\". See the full list of script codes in [ISO 15924](https://www.unicode.org/iso15924/iso15924-codes.html).\n\nThis method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the method will raise a pygame.error.\n\nNew in pygame 2.2.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/font.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/font.html](https://www.pygame.org/docs/ref/font.html)"
- name: font.Font.set_strikethrough
  id: ref/font#pygame.font.Font.set_strikethrough
  summary: When enabled, all rendered fonts will include a strikethrough
  belongs_to: font
  description: |-
    set_strikethrough()

    control if text is rendered with a strikethrough

    set_strikethrough(bool) -\> None

    When enabled, all rendered fonts will include a strikethrough. The strikethrough is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and underline modes.

    Note

    This is the same as the [`strikethrough`](#pygame.font.Font.strikethrough "pygame.font.Font.strikethrough") attribute.

    New in pygame 2.1.3.
- name: font.Font.set_underline
  id: ref/font#pygame.font.Font.set_underline
  summary: When enabled, all rendered fonts will include an underline
  belongs_to: font
  description: |-
    set_underline()

    control if text is rendered with an underline

    set_underline(bool) -\> None

    When enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and strikethrough modes.

    Note

    This is the same as the [`underline`](#pygame.font.Font.underline "pygame.font.Font.underline") attribute.
- name: font.Font.size
  id: ref/font#pygame.font.Font.size
  summary: Returns the dimensions needed to render the text
  belongs_to: font
  description: |-
    size()

    determine the amount of space needed to render text

    size(text) -\> (width, height)

    Returns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for word wrapping and other layout effects.

    Be aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for "ae" will not always match the width for "a" + "e".
- name: font.Font.strikethrough
  id: ref/font#pygame.font.Font.strikethrough
  summary: Gets or sets whether the font should be rendered with a strikethrough
  belongs_to: font
  description: |-
    strikethrough

    Gets or sets whether the font should be rendered with a strikethrough.

    strikethrough -\> bool

    Whether the font should be rendered with a strikethrough.

    When set to True, all rendered fonts will include an strikethrough. The strikethrough is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and underline modes.

    New in pygame 2.1.3.
- name: font.Font.underline
  id: ref/font#pygame.font.Font.underline
  summary: Gets or sets whether the font should be rendered with an underline
  belongs_to: font
  description: |-
    underline

    Gets or sets whether the font should be rendered with an underline.

    underline -\> bool

    Whether the font should be rendered in underline.

    When set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and strikethrough modes.

    New in pygame 2.0.0.
- name: font.get_default_font
  id: ref/font#pygame.font.get_default_font
  summary: Return the filename of the system font
  belongs_to: font
  description: |-
    pygame.font.get_default_font()

    get the filename of the default font

    get_default_font() -\> string

    Return the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives.
- name: font.get_fonts
  id: ref/font#pygame.font.get_fonts
  summary: Returns a list of all the fonts available on the system
  belongs_to: font
  description: |-
    pygame.font.get_fonts()

    get all available fonts

    get_fonts() -\> list of strings

    Returns a list of all the fonts available on the system. The names of the fonts will be set to lowercase with all spaces and punctuation removed. This works on most systems, but some will return an empty list if they cannot find fonts.

    Changed in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.
- name: font.get_init
  id: ref/font#pygame.font.get_init
  summary: Test if the font module is initialized or not
  belongs_to: font
  description: |-
    pygame.font.get_init()

    true if the font module is initialized

    get_init() -\> bool

    Test if the font module is initialized or not.
- name: font.get_sdl_ttf_version
  id: ref/font#pygame.font.get_sdl_ttf_version
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: font
  description: |-
    pygame.font.get_sdl_ttf_version()

    gets SDL_ttf version

    get_sdl_ttf_version(linked=True) -\> (major, minor, patch)

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave get_sdl_ttf_version feedback with authors](https://github.com/pygame/pygame/pull/3095)

    Returns a tuple of integers that identify SDL_ttf's version. SDL_ttf is the underlying font rendering library, written in C, on which pygame's font module depends. If 'linked' is True (the default), the function returns the version of the linked TTF library. Otherwise this function returns the version of TTF pygame was compiled with

    New in pygame 2.1.3.
- name: font.init
  id: ref/font#pygame.font.init
  summary: This method is called automatically by pygame.init()
  belongs_to: font
  description: |-
    pygame.font.init()

    initialize the font module

    init() -\> None

    This method is called automatically by `pygame.init()`. It initializes the font module. The module must be initialized before any other functions will work.

    It is safe to call this function more than once.
- name: font.match_font
  id: ref/font#pygame.font.match_font
  summary: Returns the full path to a font file on the system
  belongs_to: font
  description: |-
    pygame.font.match_font()

    find a specific font on the system

    match_font(name, bold=False, italic=False) -\> path

    Returns the full path to a font file on the system. If bold or italic are set to true, this will attempt to find the correct family of font.

    The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order. If none of the given names are found, None is returned.

    New in pygame 2.0.1: Accept an iterable of font names.

    Changed in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.

    Example:

    ``` python
    print pygame.font.match_font('bitstreamverasans')
    # output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf
    # (but only if you have Vera on your system)
    ```
- name: font.quit
  id: ref/font#pygame.font.quit
  summary: Manually uninitialize SDL_ttf's font system
  belongs_to: font
  description: |-
    pygame.font.quit()

    uninitialize the font module

    quit() -\> None

    Manually uninitialize SDL_ttf's font system. This is called automatically by `pygame.quit()`.

    It is safe to call this function even if font is currently not initialized.
- name: font.SysFont
  id: ref/font#pygame.font.SysFont
  summary: Return a new Font object that is loaded from the system fonts
  belongs_to: font
  description: |-
    pygame.font.SysFont()

    create a Font object from the system fonts

    SysFont(name, size, bold=False, italic=False) -\> Font

    Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.

    The font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.

    New in pygame 2.0.1: Accept an iterable of font names.

    Changed in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.
- name: freetype
  id: ref/freetype
  summary: The pygame.freetype module is a replacement for pygame.font
  description: "pygame.freetype  \nEnhanced pygame module for loading and rendering computer fonts\n\nThe `pygame.freetype` module is a replacement for [`pygame.font`](font#module-pygame.font). It has all of the functionality of the original, plus many new features. Yet is has absolutely no dependencies on the SDL_ttf library. It is implemented directly on the FreeType 2 library. The `pygame.freetype` module is not itself backward compatible with [`pygame.font`](font#module-pygame.font). Instead, use the `pygame.ftfont` module as a drop-in replacement for [`pygame.font`](font#module-pygame.font).\n\nAll font file formats supported by FreeType can be rendered by `pygame.freetype`, namely `TTF`, Type1, `CFF`, OpenType, `SFNT`, `PCF`, `FNT`, `BDF`, `PFR` and Type42 fonts. All glyphs having UTF-32 code points are accessible (see [`Font.ucs4`](#pygame.freetype.Font.ucs4 \"pygame.freetype.Font.ucs4\")).\n\nMost work on fonts is done using [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instances. The module itself only has routines for initialization and creation of [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") objects. You can load fonts from the system using the [`SysFont()`](#pygame.freetype.SysFont \"pygame.freetype.SysFont\") function.\n\nExtra support of bitmap fonts is available. Available bitmap sizes can be listed (see [`Font.get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\")). For bitmap only fonts [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") can set the size for you (see the [`Font.size`](#pygame.freetype.Font.size \"pygame.freetype.Font.size\") property).\n\nFor now undefined character codes are replaced with the `.notdef` (not defined) character. How undefined codes are handled may become configurable in a future release.\n\nPygame comes with a built-in default font. This can always be accessed by passing None as the font name to the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") constructor.\n\nExtra rendering features available to [`pygame.freetype.Font`](#pygame.freetype.Font) are direct to surface rendering (see [`Font.render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\")), character kerning (see [`Font.kerning`](#pygame.freetype.Font.kerning \"pygame.freetype.Font.kerning\")), vertical layout (see [`Font.vertical`](#pygame.freetype.Font.vertical \"pygame.freetype.Font.vertical\")), rotation of rendered text (see [`Font.rotation`](#pygame.freetype.Font.rotation \"pygame.freetype.Font.rotation\")), and the strong style (see [`Font.strong`](#pygame.freetype.Font.strong \"pygame.freetype.Font.strong\")). Some properties are configurable, such as strong style strength (see [`Font.strength`](#pygame.freetype.Font.strength \"pygame.freetype.Font.strength\")) and underline positioning (see [`Font.underline_adjustment`](#pygame.freetype.Font.underline_adjustment \"pygame.freetype.Font.underline_adjustment\")). Text can be positioned by the upper right corner of the text box or by the text baseline (see [`Font.origin`](#pygame.freetype.Font.origin \"pygame.freetype.Font.origin\")). Finally, a font's vertical and horizontal size can be adjusted separately (see [`Font.size`](#pygame.freetype.Font.size \"pygame.freetype.Font.size\")). The [`pygame.examples.freetype_misc`](examples#pygame.examples.freetype_misc.main \"pygame.examples.freetype_misc.main\") example shows these features in use.\n\nThe pygame package does not import `freetype` automatically when loaded. This module must be imported explicitly to be used.\n\n``` python\nimport pygame\nimport pygame.freetype\n```\n\nNew in pygame 1.9.2: `freetype`\n\npygame.freetype.get_error()  \nReturn the latest FreeType error\n\nget_error() -\\> str\n\nget_error() -\\> None\n\nReturn a description of the last error which occurred in the FreeType2 library, or `None` if no errors have occurred.\n\npygame.freetype.get_version()  \nReturn the FreeType version\n\nget_version(linked=True) -\\> (int, int, int)\n\nReturns the version of the FreeType library in use by this module. `linked=True` is the default behavior and returns the linked version of FreeType and `linked=False` returns the compiled version of FreeType.\n\nNote that the `freetype` module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be \"2\".\n\nChanged in pygame 2.2.0: `linked` keyword argument added and default behavior changed from returning compiled version to returning linked version\n\npygame.freetype.init()  \nInitialize the underlying FreeType library.\n\ninit(cache_size=64, resolution=72) -\\> None\n\nThis function initializes the underlying FreeType library and must be called before trying to use any of the functionality of the `freetype` module.\n\nHowever, [`pygame.init()`](pygame#pygame.init) will automatically call this function if the `freetype` module is already imported. It is safe to call this function more than once.\n\nOptionally, you may specify a default *cache_size* for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel *resolution*, in dots per inch, can be given to adjust font scaling.\n\npygame.freetype.quit()  \nShut down the underlying FreeType library.\n\nquit() -\\> None\n\nThis function closes the `freetype` module. After calling this function, you should not invoke any class, method or function related to the `freetype` module as they are likely to fail or might give unpredictable results. It is safe to call this function even if the module hasn't been initialized yet.\n\npygame.freetype.get_init()  \nReturns True if the FreeType module is currently initialized.\n\nget_init() -\\> bool\n\nReturns `True` if the `pygame.freetype` module is currently initialized.\n\nNew in pygame 1.9.5.\n\npygame.freetype.was_init()  \nDEPRECATED: Use get_init() instead.\n\nwas_init() -\\> bool\n\nDEPRECATED: Returns `True` if the `pygame.freetype` module is currently initialized. Use `get_init()` instead.\n\npygame.freetype.get_cache_size()  \nReturn the glyph case size\n\nget_cache_size() -\\> long\n\nSee [`pygame.freetype.init()`](#pygame.freetype.init).\n\npygame.freetype.get_default_resolution()  \nReturn the default pixel size in dots per inch\n\nget_default_resolution() -\\> long\n\nReturns the default pixel size, in dots per inch, for the module. The default is 72 DPI.\n\npygame.freetype.set_default_resolution()  \nSet the default pixel size in dots per inch for the module\n\nset_default_resolution(\\[resolution\\])\n\nSet the default pixel size, in dots per inch, for the module. If the optional argument is omitted or zero the resolution is reset to 72 DPI.\n\npygame.freetype.SysFont()  \ncreate a Font object from the system fonts\n\nSysFont(name, size, bold=False, italic=False) -\\> Font\n\nReturn a new Font object that is loaded from the system fonts. The font will match the requested *bold* and *italic* flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.\n\nThe font *name* can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\npygame.freetype.get_default_font()  \nGet the filename of the default font\n\nget_default_font() -\\> string\n\nReturn the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive.\n\npygame.freetype.Font  \nCreate a new Font instance from a supported font file.\n\nFont(file, size=0, font_index=0, resolution=0, ucs4=False) -\\> Font\n\nFont(pathlib.Path) -\\> Font\n\nArgument *file* can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.\n\nOptionally, a *size* argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no *size* is given, the default size is set to the first available size for the font.\n\nIf the font file has more than one font, the font to load can be chosen with the *index* argument. An exception is raised for an out-of-range font index value.\n\nThe optional *resolution* argument sets the pixel size, in dots per inch, for use in scaling glyphs for this Font instance. If 0 then the default module value, set by [`init()`](#pygame.freetype.init \"pygame.freetype.init\"), is used. The Font object's resolution can only be changed by re-initializing the Font instance.\n\nThe optional *ucs4* argument, an integer, sets the default text translation mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to treat Unicode text as UCS-4, with no surrogate pairs. See [`Font.ucs4`](#pygame.freetype.Font.ucs4 \"pygame.freetype.Font.ucs4\").\n\nname  \nProper font name.\n\nname -\\> string\n\nRead only. Returns the real (long) name of the font, as recorded in the font file.\n\npath  \nFont file path\n\npath -\\> unicode\n\nRead only. Returns the path of the loaded font file\n\nsize  \nThe default point size used in rendering\n\nsize -\\> float\n\nsize -\\> (float, float)\n\nGet or set the default size for text metrics and rendering. It can be a single point size, given as a Python `int` or `float`, or a font ppem (width, height) `tuple`. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by [`get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\"), use the nominal width and height to select an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method [`get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\"). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.\n\nget_rect()  \nReturn the size and offset of rendered text\n\nget_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -\\> rect\n\nGets the final dimensions and origin, in pixels, of *text* using the optional *size* in points, *style*, and *rotation*. For other relevant render properties, and for any optional argument not given, the default values set for the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance are used.\n\nReturns a [`Rect`](rect#pygame.Rect \"pygame.Rect\") instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") method for an example.\n\nIf *text* is a char (byte) string, its encoding is assumed to be `LATIN1`.\n\nOptionally, *text* can be `None`, which will return the bounding rectangle for the text passed to a previous [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"), [`render_raw()`](#pygame.freetype.Font.render_raw \"pygame.freetype.Font.render_raw\"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") call. See [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") for more details.\n\nget_metrics()  \nReturn the glyph metrics for the given text\n\nget_metrics(text, size=0) -\\> \\[(...), ...\\]\n\nReturns the glyph metrics for each character in *text*.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:\n\n``` python\n(min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)\n```\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.\n\nThe calculations are done using the font's default size in points. Optionally you may specify another point size with the *size* argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique settings.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nheight  \nThe unscaled height of the font in font units\n\nheight -\\> int\n\nRead only. Gets the height of the font. This is the average value of all glyphs in the font.\n\nascender  \nThe unscaled ascent of the font in font units\n\nascender -\\> int\n\nRead only. Return the number of units from the font's baseline to the top of the bounding box.\n\ndescender  \nThe unscaled descent of the font in font units\n\ndescender -\\> int\n\nRead only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.\n\nget_sized_ascender()  \nThe scaled ascent of the font in pixels\n\nget_sized_ascender(\\<size\\>=0) -\\> int\n\nReturn the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.\n\nget_sized_descender()  \nThe scaled descent of the font in pixels\n\nget_sized_descender(\\<size\\>=0) -\\> int\n\nReturn the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.\n\nget_sized_height()  \nThe scaled height of the font in pixels\n\nget_sized_height(\\<size\\>=0) -\\> int\n\nReturns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.\n\nget_sized_glyph_height()  \nThe scaled bounding box height of the font in pixels\n\nget_sized_glyph_height(\\<size\\>=0) -\\> int\n\nReturn the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.\n\nget_sizes()  \nreturn the available sizes of embedded bitmaps\n\nget_sizes() -\\> \\[(int, int, int, float, float), ...\\]\n\nget_sizes() -\\> \\[\\]\n\nReturns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels.\n\nrender()  \nReturn rendered text as a surface\n\nrender(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -\\> (Surface, Rect)\n\nReturns a new [`Surface`](surface#pygame.Surface \"pygame.Surface\"), with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, [`fgcolor`](#pygame.freetype.Font.fgcolor \"pygame.freetype.Font.fgcolor\") is used. If `bgcolor` is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if `bgcolor` is `None` and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.\n\nThe return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero width and the height of the font.\n\nOptional *fgcolor*, *style*, *rotation*, and *size* arguments override the default values set for the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance.\n\nIf *text* is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nOptionally, *text* can be `None`, which will render the text passed to a previous [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"), [`render_raw()`](#pygame.freetype.Font.render_raw \"pygame.freetype.Font.render_raw\"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") call. See [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") for details.\n\nrender_to()  \nRender text onto an existing surface\n\nrender_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -\\> Rect\n\nRenders the string *text* to the [`pygame.Surface`](surface#pygame.Surface) *surf*, at position *dest*, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a [`Rect`](rect#pygame.Rect \"pygame.Rect\") instance. As with [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), optional *fgcolor*, *style*, *rotation*, and *size* argument are available.\n\nIf a background color *bgcolor* is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the rendered text within the surface.\n\nIf an empty string is passed for text then the returned [`Rect`](rect#pygame.Rect \"pygame.Rect\") is zero width and the height of the font. The rect will test False.\n\nOptionally, *text* can be set `None`, which will re-render text passed to a previous [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"), [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), [`render_raw()`](#pygame.freetype.Font.render_raw \"pygame.freetype.Font.render_raw\"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") call. Primarily, this feature is an aid to using [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") in combination with [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"). An example:\n\n``` python\ndef word_wrap(surf, text, font, color=(0, 0, 0)):\n    font.origin = True\n    words = text.split(' ')\n    width, height = surf.get_size()\n    line_spacing = font.get_sized_height() + 2\n    x, y = 0, line_spacing\n    space = font.get_rect(' ')\n    for word in words:\n        bounds = font.get_rect(word)\n        if x + bounds.width + bounds.x >= width:\n            x, y = 0, y + line_spacing\n        if x + bounds.width + bounds.x >= width:\n            raise ValueError(\"word too wide for the surface\")\n        if y + bounds.height - bounds.y >= height:\n            raise ValueError(\"text to long for the surface\")\n        font.render_to(surf, (x, y), None, color)\n        x += bounds.width + space.width\n    return x, y\n```\n\nWhen [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") is called with the same font properties ― [`size`](#pygame.freetype.Font.size \"pygame.freetype.Font.size\"), [`style`](#pygame.freetype.Font.style \"pygame.freetype.Font.style\"), [`strength`](#pygame.freetype.Font.strength \"pygame.freetype.Font.strength\"), [`wide`](#pygame.freetype.Font.wide \"pygame.freetype.Font.wide\"), [`antialiased`](#pygame.freetype.Font.antialiased \"pygame.freetype.Font.antialiased\"), [`vertical`](#pygame.freetype.Font.vertical \"pygame.freetype.Font.vertical\"), [`rotation`](#pygame.freetype.Font.rotation \"pygame.freetype.Font.rotation\"), [`kerning`](#pygame.freetype.Font.kerning \"pygame.freetype.Font.kerning\"), and [`use_bitmap_strikes`](#pygame.freetype.Font.use_bitmap_strikes \"pygame.freetype.Font.use_bitmap_strikes\") ― as [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") will use the layout calculated by [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"). Otherwise, [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") will recalculate the layout if called with a text string or one of the above properties has changed after the [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call.\n\nIf *text* is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nrender_raw()  \nReturn rendered text as a string of bytes\n\nrender_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -\\> (bytes, (int, int))\n\nLike [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\") but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.\n\nrender_raw_to()  \nRender text into an array of ints\n\nrender_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -\\> Rect\n\nRender to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default *dest* value, `None`, is equivalent to position (0, 0). See [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"). As with the other render methods, *text* can be `None` to render a text string passed previously to another method.\n\nThe return value is a [`pygame.Rect()`](rect#pygame.Rect) giving the size and position of the rendered text.\n\nstyle  \nThe font's style flags\n\nstyle -\\> int\n\nGets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call. The style value may be a bit-wise OR of one or more of the following constants:\n\n``` python\nSTYLE_NORMAL\nSTYLE_UNDERLINE\nSTYLE_OBLIQUE\nSTYLE_STRONG\nSTYLE_WIDE\nSTYLE_DEFAULT\n```\n\nThese constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).\n\nThe `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by `Font.__new__()`, raises a RuntimeError.\n\nAssigning `STYLE_DEFAULT` to the [`style`](#pygame.freetype.Font.style \"pygame.freetype.Font.style\") property leaves the property unchanged, as this property defines the default. The [`style`](#pygame.freetype.Font.style \"pygame.freetype.Font.style\") property will never return `STYLE_DEFAULT`.\n\nunderline  \nThe state of the font's underline style flag\n\nunderline -\\> bool\n\nGets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call, via the 'style' parameter.\n\nstrong  \nThe state of the font's strong style flag\n\nstrong -\\> bool\n\nGets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call, via the 'style' parameter.\n\noblique  \nThe state of the font's oblique style flag\n\noblique -\\> bool\n\nGets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call, via the *style* parameter.\n\nThe oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by `Font.__new__()`, setting this property raises a RuntimeError.\n\nwide  \nThe state of the font's wide style flag\n\nwide -\\> bool\n\nGets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to [`pygame.font.Font`](font#pygame.font.Font)'s bold. This style not available for rotated text.\n\nstrength  \nThe strength associated with the strong or wide font styles\n\nstrength -\\> float\n\nThe amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the [`pygame.font.Font`](font#pygame.font.Font) bold style. The default is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by `Font.__new__()`, assignment to this property raises a RuntimeError.\n\nunderline_adjustment  \nAdjustment factor for the underline position\n\nunderline_adjustment -\\> float\n\nGets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics [`pygame.font.Font`](font#pygame.font.Font) underlining.\n\nfixed_width  \nGets whether the font is fixed-width\n\nfixed_width -\\> bool\n\nRead only. Returns `True` if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).\n\nfixed_sizes  \nthe number of available bitmap sizes for the font\n\nfixed_sizes -\\> int\n\nRead only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.\n\nscalable  \nGets whether the font is scalable\n\nscalable -\\> bool\n\nRead only. Returns `True` if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.\n\nuse_bitmap_strikes  \nallow the use of embedded bitmaps in an outline font file\n\nuse_bitmap_strikes -\\> bool\n\nSome scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it `False` to disable the loading of any bitmap strike. Set it `True`, the default, to permit bitmap strikes for a non-rotated render with no style other than [`wide`](#pygame.freetype.Font.wide \"pygame.freetype.Font.wide\") or [`underline`](#pygame.freetype.Font.underline \"pygame.freetype.Font.underline\"). This property is ignored for bitmap fonts.\n\nSee also [`fixed_sizes`](#pygame.freetype.Font.fixed_sizes \"pygame.freetype.Font.fixed_sizes\") and [`get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\").\n\nantialiased  \nFont anti-aliasing mode\n\nantialiased -\\> bool\n\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all fonts, which are rendered with full 8 bit blending.\n\nSet to `False` to do monochrome rendering. This should provide a small speed gain and reduce cache memory size.\n\nkerning  \nCharacter kerning mode\n\nkerning -\\> bool\n\nGets or sets the font's kerning mode. This defaults to `False` on all fonts, which will be rendered without kerning.\n\nSet to `True` to add kerning between character pairs, if supported by the font, when positioning glyphs.\n\nvertical  \nFont vertical mode\n\nvertical -\\> bool\n\nGets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.\n\nSet to `True` to switch to a vertical text layout. The default is `False`, place horizontally.\n\nNote that the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") class does not automatically determine script orientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.\n\nrotation  \ntext rotation in degrees counterclockwise\n\nrotation -\\> int\n\nGets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -\\> 390 - 360 -\\> 30, -45 -\\> 360 + -45 -\\> 315, 720 -\\> 720 - (2 \\* 360) -\\> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by `Font.__new__()`, raises a RuntimeError.\n\nfgcolor  \ndefault foreground color\n\nfgcolor -\\> Color\n\nGets or sets the default glyph rendering color. It is initially opaque black ― (0, 0, 0, 255). Applies to [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\") and [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\").\n\nbgcolor  \ndefault background color\n\nbgcolor -\\> Color\n\nGets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\") and [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\").\n\nNew in pygame 2.0.0.\n\norigin  \nFont render to text origin mode\n\norigin -\\> bool\n\nIf set `True`, [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") and [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") will take the *dest* position to be that of the text origin, as opposed to the top-left corner of the bounding box. See [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") for details.\n\npad  \npadded boundary mode\n\npad -\\> bool\n\nIf set `True`, then the text boundary rectangle will be inflated to match that of [`font.Font`](font#pygame.font.Font \"pygame.font.Font\"). Otherwise, the boundary rectangle is just large enough for the text.\n\nucs4  \nEnable UCS-4 mode\n\nucs4 -\\> bool\n\nGets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 `True` turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.\n\nresolution  \nPixel resolution in dots per inch\n\nresolution -\\> int\n\nRead only. Gets pixel size used in scaling font glyphs for this [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/freetype.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/freetype.html](https://www.pygame.org/docs/ref/freetype.html)"
- name: freetype.Font
  id: ref/freetype#pygame.freetype.Font
  summary: Create a new Font instance from a supported font file
  belongs_to: freetype
  description: |-
    pygame.freetype.Font

    Create a new Font instance from a supported font file.

    Font(file, size=0, font_index=0, resolution=0, ucs4=False) -\> Font

    Font(pathlib.Path) -\> Font

    Argument *file* can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.

    Optionally, a *size* argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no *size* is given, the default size is set to the first available size for the font.

    If the font file has more than one font, the font to load can be chosen with the *index* argument. An exception is raised for an out-of-range font index value.

    The optional *resolution* argument sets the pixel size, in dots per inch, for use in scaling glyphs for this Font instance. If 0 then the default module value, set by [`init()`](#pygame.freetype.init "pygame.freetype.init"), is used. The Font object's resolution can only be changed by re-initializing the Font instance.

    The optional *ucs4* argument, an integer, sets the default text translation mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to treat Unicode text as UCS-4, with no surrogate pairs. See [`Font.ucs4`](#pygame.freetype.Font.ucs4 "pygame.freetype.Font.ucs4").
- name: freetype.Font.antialiased
  id: ref/freetype#pygame.freetype.Font.antialiased
  summary: Gets or sets the font's anti-aliasing mode
  belongs_to: freetype
  description: |-
    antialiased

    Font anti-aliasing mode

    antialiased -\> bool

    Gets or sets the font's anti-aliasing mode. This defaults to `True` on all fonts, which are rendered with full 8 bit blending.

    Set to `False` to do monochrome rendering. This should provide a small speed gain and reduce cache memory size.
- name: freetype.Font.ascender
  id: ref/freetype#pygame.freetype.Font.ascender
  summary: Read only
  belongs_to: freetype
  description: |-
    ascender

    The unscaled ascent of the font in font units

    ascender -\> int

    Read only. Return the number of units from the font's baseline to the top of the bounding box.
- name: freetype.Font.bgcolor
  id: ref/freetype#pygame.freetype.Font.bgcolor
  summary: Gets or sets the default background rendering color
  belongs_to: freetype
  description: |-
    bgcolor

    default background color

    bgcolor -\> Color

    Gets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render") and [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to").

    New in pygame 2.0.0.
- name: freetype.Font.descender
  id: ref/freetype#pygame.freetype.Font.descender
  summary: Read only
  belongs_to: freetype
  description: |-
    descender

    The unscaled descent of the font in font units

    descender -\> int

    Read only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.
- name: freetype.Font.fgcolor
  id: ref/freetype#pygame.freetype.Font.fgcolor
  summary: Gets or sets the default glyph rendering color
  belongs_to: freetype
  description: |-
    fgcolor

    default foreground color

    fgcolor -\> Color

    Gets or sets the default glyph rendering color. It is initially opaque black ― (0, 0, 0, 255). Applies to [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render") and [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to").
- name: freetype.Font.fixed_sizes
  id: ref/freetype#pygame.freetype.Font.fixed_sizes
  summary: Read only
  belongs_to: freetype
  description: |-
    fixed_sizes

    the number of available bitmap sizes for the font

    fixed_sizes -\> int

    Read only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.
- name: freetype.Font.fixed_width
  id: ref/freetype#pygame.freetype.Font.fixed_width
  summary: Read only
  belongs_to: freetype
  description: |-
    fixed_width

    Gets whether the font is fixed-width

    fixed_width -\> bool

    Read only. Returns `True` if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).
- name: freetype.Font.get_metrics
  id: ref/freetype#pygame.freetype.Font.get_metrics
  summary: Returns the glyph metrics for each character in text
  belongs_to: freetype
  description: |-
    get_metrics()

    Return the glyph metrics for the given text

    get_metrics(text, size=0) -\> \[(...), ...\]

    Returns the glyph metrics for each character in *text*.

    The glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:

    ``` python
    (min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)
    ```

    The bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.

    The calculations are done using the font's default size in points. Optionally you may specify another point size with the *size* argument.

    The metrics are adjusted for the current rotation, strong, and oblique settings.

    If text is a char (byte) string, then its encoding is assumed to be `LATIN1`.
- name: freetype.Font.get_rect
  id: ref/freetype#pygame.freetype.Font.get_rect
  summary: Gets the final dimensions and origin, in pixels, of text using the optional size in points, style, and rotation
  belongs_to: freetype
  description: |-
    get_rect()

    Return the size and offset of rendered text

    get_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -\> rect

    Gets the final dimensions and origin, in pixels, of *text* using the optional *size* in points, *style*, and *rotation*. For other relevant render properties, and for any optional argument not given, the default values set for the [`Font`](#pygame.freetype.Font "pygame.freetype.Font") instance are used.

    Returns a [`Rect`](rect#pygame.Rect "pygame.Rect") instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") method for an example.

    If *text* is a char (byte) string, its encoding is assumed to be `LATIN1`.

    Optionally, *text* can be `None`, which will return the bounding rectangle for the text passed to a previous [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect"), [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render"), [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to"), [`render_raw()`](#pygame.freetype.Font.render_raw "pygame.freetype.Font.render_raw"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to "pygame.freetype.Font.render_raw_to") call. See [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") for more details.
- name: freetype.Font.get_sized_ascender
  id: ref/freetype#pygame.freetype.Font.get_sized_ascender
  summary: Return the number of units from the font's baseline to the top of the bounding box
  belongs_to: freetype
  description: |-
    get_sized_ascender()

    The scaled ascent of the font in pixels

    get_sized_ascender(\<size\>=0) -\> int

    Return the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.
- name: freetype.Font.get_sized_descender
  id: ref/freetype#pygame.freetype.Font.get_sized_descender
  summary: Return the number of pixels from the font's baseline to the top of the bounding box
  belongs_to: freetype
  description: |-
    get_sized_descender()

    The scaled descent of the font in pixels

    get_sized_descender(\<size\>=0) -\> int

    Return the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.
- name: freetype.Font.get_sized_glyph_height
  id: ref/freetype#pygame.freetype.Font.get_sized_glyph_height
  summary: Return the glyph bounding box height of the font in pixels
  belongs_to: freetype
  description: |-
    get_sized_glyph_height()

    The scaled bounding box height of the font in pixels

    get_sized_glyph_height(\<size\>=0) -\> int

    Return the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.
- name: freetype.Font.get_sized_height
  id: ref/freetype#pygame.freetype.Font.get_sized_height
  summary: Returns the height of the font
  belongs_to: freetype
  description: |-
    get_sized_height()

    The scaled height of the font in pixels

    get_sized_height(\<size\>=0) -\> int

    Returns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.
- name: freetype.Font.get_sizes
  id: ref/freetype#pygame.freetype.Font.get_sizes
  summary: Returns a list of tuple records, one for each point size supported
  belongs_to: freetype
  description: |-
    get_sizes()

    return the available sizes of embedded bitmaps

    get_sizes() -\> \[(int, int, int, float, float), ...\]

    get_sizes() -\> \[\]

    Returns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels.
- name: freetype.Font.height
  id: ref/freetype#pygame.freetype.Font.height
  summary: Read only
  belongs_to: freetype
  description: |-
    height

    The unscaled height of the font in font units

    height -\> int

    Read only. Gets the height of the font. This is the average value of all glyphs in the font.
- name: freetype.Font.kerning
  id: ref/freetype#pygame.freetype.Font.kerning
  summary: Gets or sets the font's kerning mode
  belongs_to: freetype
  description: |-
    kerning

    Character kerning mode

    kerning -\> bool

    Gets or sets the font's kerning mode. This defaults to `False` on all fonts, which will be rendered without kerning.

    Set to `True` to add kerning between character pairs, if supported by the font, when positioning glyphs.
- name: freetype.Font.name
  id: ref/freetype#pygame.freetype.Font.name
  summary: Proper font name
  belongs_to: freetype
  description: |-
    name

    Proper font name.

    name -\> string

    Read only. Returns the real (long) name of the font, as recorded in the font file.
- name: freetype.Font.oblique
  id: ref/freetype#pygame.freetype.Font.oblique
  summary: Gets or sets whether the font will be rendered as oblique
  belongs_to: freetype
  description: |-
    oblique

    The state of the font's oblique style flag

    oblique -\> bool

    Gets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect") call, via the *style* parameter.

    The oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by `Font.__new__()`, setting this property raises a RuntimeError.
- name: freetype.Font.origin
  id: ref/freetype#pygame.freetype.Font.origin
  summary: If set True, render_to() and render_raw_to() will take the dest position to be that of the text origin, as opposed to the top-left corner of the bounding box
  belongs_to: freetype
  description: |-
    origin

    Font render to text origin mode

    origin -\> bool

    If set `True`, [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") and [`render_raw_to()`](#pygame.freetype.Font.render_raw_to "pygame.freetype.Font.render_raw_to") will take the *dest* position to be that of the text origin, as opposed to the top-left corner of the bounding box. See [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect") for details.
- name: freetype.Font.pad
  id: ref/freetype#pygame.freetype.Font.pad
  summary: If set True, then the text boundary rectangle will be inflated to match that of font.Font
  belongs_to: freetype
  description: |-
    pad

    padded boundary mode

    pad -\> bool

    If set `True`, then the text boundary rectangle will be inflated to match that of [`font.Font`](font#pygame.font.Font "pygame.font.Font"). Otherwise, the boundary rectangle is just large enough for the text.
- name: freetype.Font.path
  id: ref/freetype#pygame.freetype.Font.path
  summary: Read only
  belongs_to: freetype
  description: |-
    path

    Font file path

    path -\> unicode

    Read only. Returns the path of the loaded font file
- name: freetype.Font.render
  id: ref/freetype#pygame.freetype.Font.render
  summary: Returns a new Surface, with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, fgcolor is used
  belongs_to: freetype
  description: |-
    render()

    Return rendered text as a surface

    render(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -\> (Surface, Rect)

    Returns a new [`Surface`](surface#pygame.Surface "pygame.Surface"), with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, [`fgcolor`](#pygame.freetype.Font.fgcolor "pygame.freetype.Font.fgcolor") is used. If `bgcolor` is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if `bgcolor` is `None` and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.

    The return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.

    If an empty string is passed for text then the returned Rect is zero width and the height of the font.

    Optional *fgcolor*, *style*, *rotation*, and *size* arguments override the default values set for the [`Font`](#pygame.freetype.Font "pygame.freetype.Font") instance.

    If *text* is a char (byte) string, then its encoding is assumed to be `LATIN1`.

    Optionally, *text* can be `None`, which will render the text passed to a previous [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect"), [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render"), [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to"), [`render_raw()`](#pygame.freetype.Font.render_raw "pygame.freetype.Font.render_raw"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to "pygame.freetype.Font.render_raw_to") call. See [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") for details.
- name: freetype.Font.render_raw
  id: ref/freetype#pygame.freetype.Font.render_raw
  summary: Like render() but with the pixels returned as a byte string of 8-bit gray-scale values
  belongs_to: freetype
  description: |-
    render_raw()

    Return rendered text as a string of bytes

    render_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -\> (bytes, (int, int))

    Like [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render") but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.
- name: freetype.Font.render_raw_to
  id: ref/freetype#pygame.freetype.Font.render_raw_to
  summary: Render to an array object exposing an array struct interface
  belongs_to: freetype
  description: |-
    render_raw_to()

    Render text into an array of ints

    render_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -\> Rect

    Render to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default *dest* value, `None`, is equivalent to position (0, 0). See [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to"). As with the other render methods, *text* can be `None` to render a text string passed previously to another method.

    The return value is a [`pygame.Rect()`](rect#pygame.Rect) giving the size and position of the rendered text.
- name: freetype.Font.render_to
  id: ref/freetype#pygame.freetype.Font.render_to
  summary: Renders the string text to the pygame.Surface surf, at position dest, a (x, y) surface coordinate pair
  belongs_to: freetype
  description: |-
    render_to()

    Render text onto an existing surface

    render_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -\> Rect

    Renders the string *text* to the [`pygame.Surface`](surface#pygame.Surface) *surf*, at position *dest*, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a [`Rect`](rect#pygame.Rect "pygame.Rect") instance. As with [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render"), optional *fgcolor*, *style*, *rotation*, and *size* argument are available.

    If a background color *bgcolor* is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.

    The return value is a rectangle giving the size and position of the rendered text within the surface.

    If an empty string is passed for text then the returned [`Rect`](rect#pygame.Rect "pygame.Rect") is zero width and the height of the font. The rect will test False.

    Optionally, *text* can be set `None`, which will re-render text passed to a previous [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to"), [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect"), [`render()`](#pygame.freetype.Font.render "pygame.freetype.Font.render"), [`render_raw()`](#pygame.freetype.Font.render_raw "pygame.freetype.Font.render_raw"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to "pygame.freetype.Font.render_raw_to") call. Primarily, this feature is an aid to using [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") in combination with [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect"). An example:

    ``` python
    def word_wrap(surf, text, font, color=(0, 0, 0)):
        font.origin = True
        words = text.split(' ')
        width, height = surf.get_size()
        line_spacing = font.get_sized_height() + 2
        x, y = 0, line_spacing
        space = font.get_rect(' ')
        for word in words:
            bounds = font.get_rect(word)
            if x + bounds.width + bounds.x >= width:
                x, y = 0, y + line_spacing
            if x + bounds.width + bounds.x >= width:
                raise ValueError("word too wide for the surface")
            if y + bounds.height - bounds.y >= height:
                raise ValueError("text to long for the surface")
            font.render_to(surf, (x, y), None, color)
            x += bounds.width + space.width
        return x, y
    ```

    When [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") is called with the same font properties ― [`size`](#pygame.freetype.Font.size "pygame.freetype.Font.size"), [`style`](#pygame.freetype.Font.style "pygame.freetype.Font.style"), [`strength`](#pygame.freetype.Font.strength "pygame.freetype.Font.strength"), [`wide`](#pygame.freetype.Font.wide "pygame.freetype.Font.wide"), [`antialiased`](#pygame.freetype.Font.antialiased "pygame.freetype.Font.antialiased"), [`vertical`](#pygame.freetype.Font.vertical "pygame.freetype.Font.vertical"), [`rotation`](#pygame.freetype.Font.rotation "pygame.freetype.Font.rotation"), [`kerning`](#pygame.freetype.Font.kerning "pygame.freetype.Font.kerning"), and [`use_bitmap_strikes`](#pygame.freetype.Font.use_bitmap_strikes "pygame.freetype.Font.use_bitmap_strikes") ― as [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect"), [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") will use the layout calculated by [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect"). Otherwise, [`render_to()`](#pygame.freetype.Font.render_to "pygame.freetype.Font.render_to") will recalculate the layout if called with a text string or one of the above properties has changed after the [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect") call.

    If *text* is a char (byte) string, then its encoding is assumed to be `LATIN1`.
- name: freetype.Font.resolution
  id: ref/freetype#pygame.freetype.Font.resolution
  summary: Read only
  belongs_to: freetype
  description: "resolution\n\nPixel resolution in dots per inch\n\nresolution -\\> int\n\nRead only. Gets pixel size used in scaling font glyphs for this [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/freetype.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/freetype.html](https://www.pygame.org/docs/ref/freetype.html)"
- name: freetype.Font.rotation
  id: ref/freetype#pygame.freetype.Font.rotation
  summary: Gets or sets the baseline angle of the rendered text
  belongs_to: freetype
  description: |-
    rotation

    text rotation in degrees counterclockwise

    rotation -\> int

    Gets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -\> 390 - 360 -\> 30, -45 -\> 360 + -45 -\> 315, 720 -\> 720 - (2 \* 360) -\> 0).

    Only scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by `Font.__new__()`, raises a RuntimeError.
- name: freetype.Font.scalable
  id: ref/freetype#pygame.freetype.Font.scalable
  summary: Read only
  belongs_to: freetype
  description: |-
    scalable

    Gets whether the font is scalable

    scalable -\> bool

    Read only. Returns `True` if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.
- name: freetype.Font.size
  id: ref/freetype#pygame.freetype.Font.size
  summary: Get or set the default size for text metrics and rendering
  belongs_to: freetype
  description: |-
    size

    The default point size used in rendering

    size -\> float

    size -\> (float, float)

    Get or set the default size for text metrics and rendering. It can be a single point size, given as a Python `int` or `float`, or a font ppem (width, height) `tuple`. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.

    For a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by [`get_sizes()`](#pygame.freetype.Font.get_sizes "pygame.freetype.Font.get_sizes"), use the nominal width and height to select an available size.

    Font size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method [`get_sizes()`](#pygame.freetype.Font.get_sizes "pygame.freetype.Font.get_sizes"). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.
- name: freetype.Font.strength
  id: ref/freetype#pygame.freetype.Font.strength
  summary: The amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size
  belongs_to: freetype
  description: |-
    strength

    The strength associated with the strong or wide font styles

    strength -\> float

    The amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the [`pygame.font.Font`](font#pygame.font.Font) bold style. The default is 0.02778 ( 1/36 ).

    The strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by `Font.__new__()`, assignment to this property raises a RuntimeError.
- name: freetype.Font.strong
  id: ref/freetype#pygame.freetype.Font.strong
  summary: Gets or sets whether the font will be bold when drawing text
  belongs_to: freetype
  description: |-
    strong

    The state of the font's strong style flag

    strong -\> bool

    Gets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect") call, via the 'style' parameter.
- name: freetype.Font.style
  id: ref/freetype#pygame.freetype.Font.style
  summary: Gets or sets the default style of the Font
  belongs_to: freetype
  description: |-
    style

    The font's style flags

    style -\> int

    Gets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect") call. The style value may be a bit-wise OR of one or more of the following constants:

    ``` python
    STYLE_NORMAL
    STYLE_UNDERLINE
    STYLE_OBLIQUE
    STYLE_STRONG
    STYLE_WIDE
    STYLE_DEFAULT
    ```

    These constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).

    The `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by `Font.__new__()`, raises a RuntimeError.

    Assigning `STYLE_DEFAULT` to the [`style`](#pygame.freetype.Font.style "pygame.freetype.Font.style") property leaves the property unchanged, as this property defines the default. The [`style`](#pygame.freetype.Font.style "pygame.freetype.Font.style") property will never return `STYLE_DEFAULT`.
- name: freetype.Font.ucs4
  id: ref/freetype#pygame.freetype.Font.ucs4
  summary: Gets or sets the decoding of Unicode text
  belongs_to: freetype
  description: |-
    ucs4

    Enable UCS-4 mode

    ucs4 -\> bool

    Gets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 `True` turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.
- name: freetype.Font.underline
  id: ref/freetype#pygame.freetype.Font.underline
  summary: Gets or sets whether the font will be underlined when drawing text
  belongs_to: freetype
  description: |-
    underline

    The state of the font's underline style flag

    underline -\> bool

    Gets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect "pygame.freetype.Font.get_rect") call, via the 'style' parameter.
- name: freetype.Font.underline_adjustment
  id: ref/freetype#pygame.freetype.Font.underline_adjustment
  summary: Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position
  belongs_to: freetype
  description: |-
    underline_adjustment

    Adjustment factor for the underline position

    underline_adjustment -\> float

    Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics [`pygame.font.Font`](font#pygame.font.Font) underlining.
- name: freetype.Font.use_bitmap_strikes
  id: ref/freetype#pygame.freetype.Font.use_bitmap_strikes
  summary: Some scalable fonts include embedded bitmaps for particular point sizes
  belongs_to: freetype
  description: |-
    use_bitmap_strikes

    allow the use of embedded bitmaps in an outline font file

    use_bitmap_strikes -\> bool

    Some scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it `False` to disable the loading of any bitmap strike. Set it `True`, the default, to permit bitmap strikes for a non-rotated render with no style other than [`wide`](#pygame.freetype.Font.wide "pygame.freetype.Font.wide") or [`underline`](#pygame.freetype.Font.underline "pygame.freetype.Font.underline"). This property is ignored for bitmap fonts.

    See also [`fixed_sizes`](#pygame.freetype.Font.fixed_sizes "pygame.freetype.Font.fixed_sizes") and [`get_sizes()`](#pygame.freetype.Font.get_sizes "pygame.freetype.Font.get_sizes").
- name: freetype.Font.vertical
  id: ref/freetype#pygame.freetype.Font.vertical
  summary: Gets or sets whether the characters are laid out vertically rather than horizontally
  belongs_to: freetype
  description: |-
    vertical

    Font vertical mode

    vertical -\> bool

    Gets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.

    Set to `True` to switch to a vertical text layout. The default is `False`, place horizontally.

    Note that the [`Font`](#pygame.freetype.Font "pygame.freetype.Font") class does not automatically determine script orientation. Vertical layout must be selected explicitly.

    Also note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.
- name: freetype.Font.wide
  id: ref/freetype#pygame.freetype.Font.wide
  summary: Gets or sets whether the font will be stretched horizontally when drawing text
  belongs_to: freetype
  description: |-
    wide

    The state of the font's wide style flag

    wide -\> bool

    Gets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to [`pygame.font.Font`](font#pygame.font.Font)'s bold. This style not available for rotated text.
- name: freetype.get_cache_size
  id: ref/freetype#pygame.freetype.get_cache_size
  summary: See pygame.freetype.init()
  belongs_to: freetype
  description: |-
    pygame.freetype.get_cache_size()

    Return the glyph case size

    get_cache_size() -\> long

    See [`pygame.freetype.init()`](#pygame.freetype.init).
- name: freetype.get_default_font
  id: ref/freetype#pygame.freetype.get_default_font
  summary: Return the filename of the default pygame font
  belongs_to: freetype
  description: |-
    pygame.freetype.get_default_font()

    Get the filename of the default font

    get_default_font() -\> string

    Return the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive.
- name: freetype.get_default_resolution
  id: ref/freetype#pygame.freetype.get_default_resolution
  summary: Returns the default pixel size, in dots per inch, for the module
  belongs_to: freetype
  description: |-
    pygame.freetype.get_default_resolution()

    Return the default pixel size in dots per inch

    get_default_resolution() -\> long

    Returns the default pixel size, in dots per inch, for the module. The default is 72 DPI.
- name: freetype.get_error
  id: ref/freetype#pygame.freetype.get_error
  summary: Return a description of the last error which occurred in the FreeType2 library, or None if no errors have occurred
  belongs_to: freetype
  description: |-
    pygame.freetype.get_error()

    Return the latest FreeType error

    get_error() -\> str

    get_error() -\> None

    Return a description of the last error which occurred in the FreeType2 library, or `None` if no errors have occurred.
- name: freetype.get_init
  id: ref/freetype#pygame.freetype.get_init
  summary: Returns True if the FreeType module is currently initialized
  belongs_to: freetype
  description: |-
    pygame.freetype.get_init()

    Returns True if the FreeType module is currently initialized.

    get_init() -\> bool

    Returns `True` if the `pygame.freetype` module is currently initialized.

    New in pygame 1.9.5.
- name: freetype.get_version
  id: ref/freetype#pygame.freetype.get_version
  summary: Returns the version of the FreeType library in use by this module
  belongs_to: freetype
  description: |-
    pygame.freetype.get_version()

    Return the FreeType version

    get_version(linked=True) -\> (int, int, int)

    Returns the version of the FreeType library in use by this module. `linked=True` is the default behavior and returns the linked version of FreeType and `linked=False` returns the compiled version of FreeType.

    Note that the `freetype` module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be "2".

    Changed in pygame 2.2.0: `linked` keyword argument added and default behavior changed from returning compiled version to returning linked version
- name: freetype.init
  id: ref/freetype#pygame.freetype.init
  summary: Initialize the underlying FreeType library
  belongs_to: freetype
  description: |-
    pygame.freetype.init()

    Initialize the underlying FreeType library.

    init(cache_size=64, resolution=72) -\> None

    This function initializes the underlying FreeType library and must be called before trying to use any of the functionality of the `freetype` module.

    However, [`pygame.init()`](pygame#pygame.init) will automatically call this function if the `freetype` module is already imported. It is safe to call this function more than once.

    Optionally, you may specify a default *cache_size* for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel *resolution*, in dots per inch, can be given to adjust font scaling.
- name: freetype.quit
  id: ref/freetype#pygame.freetype.quit
  summary: Shut down the underlying FreeType library
  belongs_to: freetype
  description: |-
    pygame.freetype.quit()

    Shut down the underlying FreeType library.

    quit() -\> None

    This function closes the `freetype` module. After calling this function, you should not invoke any class, method or function related to the `freetype` module as they are likely to fail or might give unpredictable results. It is safe to call this function even if the module hasn't been initialized yet.
- name: freetype.set_default_resolution
  id: ref/freetype#pygame.freetype.set_default_resolution
  summary: Set the default pixel size, in dots per inch, for the module
  belongs_to: freetype
  description: |-
    pygame.freetype.set_default_resolution()

    Set the default pixel size in dots per inch for the module

    set_default_resolution(\[resolution\])

    Set the default pixel size, in dots per inch, for the module. If the optional argument is omitted or zero the resolution is reset to 72 DPI.
- name: freetype.SysFont
  id: ref/freetype#pygame.freetype.SysFont
  summary: Return a new Font object that is loaded from the system fonts
  belongs_to: freetype
  description: |-
    pygame.freetype.SysFont()

    create a Font object from the system fonts

    SysFont(name, size, bold=False, italic=False) -\> Font

    Return a new Font object that is loaded from the system fonts. The font will match the requested *bold* and *italic* flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.

    The font *name* can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.

    New in pygame 2.0.1: Accept an iterable of font names.
- name: freetype.was_init
  id: ref/freetype#pygame.freetype.was_init
  summary: 'DEPRECATED: Use get_init() instead'
  belongs_to: freetype
  description: |-
    pygame.freetype.was_init()

    DEPRECATED: Use get_init() instead.

    was_init() -\> bool

    DEPRECATED: Returns `True` if the `pygame.freetype` module is currently initialized. Use `get_init()` instead.
- name: get_error
  id: ref/pygame#pygame.get_error
  summary: SDL maintains an internal error message
  belongs_to: module-pygame
  description: |-
    pygame.get_error()

    get the current error message

    get_error() -\> errorstr

    SDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.
- name: get_init
  id: ref/pygame#pygame.get_init
  summary: Returns True if pygame is currently initialized
  belongs_to: module-pygame
  description: |-
    pygame.get_init()

    returns True if pygame is currently initialized

    get_init() -\> bool

    Returns `True` if pygame is currently initialized.

    New in pygame 1.9.5.
- name: get_sdl_byteorder
  id: ref/pygame#pygame.get_sdl_byteorder
  summary: Returns the byte order of the SDL library
  belongs_to: module-pygame
  description: |-
    pygame.get_sdl_byteorder()

    get the byte order of SDL

    get_sdl_byteorder() -\> int

    Returns the byte order of the SDL library. It returns `1234` for little endian byte order and `4321` for big endian byte order.

    New in pygame 1.8.
- name: get_sdl_version
  id: ref/pygame#pygame.get_sdl_version
  summary: Returns the three version numbers of the SDL library
  belongs_to: module-pygame
  description: |-
    pygame.get_sdl_version()

    get the version number of SDL

    get_sdl_version(linked=True) -\> major, minor, patch

    Returns the three version numbers of the SDL library. `linked=True` will cause the function to return the version of the library that pygame is linked against while `linked=False` will cause the function to return the version of the library that pygame is compiled against. It can be used to detect which features may or may not be available through pygame.

    New in pygame 1.7.0.

    Changed in pygame 2.2.0: `linked` keyword argument added
- name: gfxdraw
  id: ref/gfxdraw
  summary: 'EXPERIMENTAL!: This API may change or disappear in later pygame releases'
  description: "pygame.gfxdraw  \npygame module for drawing shapes\n\n**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.\n\nThe pygame package does not import gfxdraw automatically when loaded, so it must imported explicitly to be used.\n\n``` python\nimport pygame\nimport pygame.gfxdraw\n```\n\nFor all functions the arguments are strictly positional and integers are accepted for coordinates and radii. The `color` argument can be one of the following formats:\n\n> - a [`pygame.Color`](color#pygame.Color) object\n>\n> - an `(RGB)` triplet (tuple/list)\n>\n> - an `(RGBA)` quadruplet (tuple/list)\n\nThe functions [`rectangle()`](#pygame.gfxdraw.rectangle \"pygame.gfxdraw.rectangle\") and [`box()`](#pygame.gfxdraw.box \"pygame.gfxdraw.box\") will accept any `(x,`` ``y,`` ``w,`` ``h)` sequence for their `rect` argument, though [`pygame.Rect`](rect#pygame.Rect) instances are preferred.\n\nTo draw a filled antialiased shape, first use the antialiased (aa\\*) version of the function, and then use the filled (filled\\_\\*) version. For example:\n\n``` python\ncol = (255, 0, 0)\nsurf.fill((255, 255, 255))\npygame.gfxdraw.aacircle(surf, x, y, 30, col)\npygame.gfxdraw.filled_circle(surf, x, y, 30, col)\n```\n\nNote\n\nFor threading, each of the functions releases the GIL during the C part of the call.\n\nNote\n\nSee the [`pygame.draw`](draw#module-pygame.draw) module for alternative draw methods. The `pygame.gfxdraw` module differs from the [`pygame.draw`](draw#module-pygame.draw) module in the API it uses and the different draw functions available. `pygame.gfxdraw` wraps the primitives from the library called SDL_gfx, rather than using modified versions.\n\nNew in pygame 1.9.0.\n\npygame.gfxdraw.pixel()  \ndraw a pixel\n\npixel(surface, x, y, color) -\\> None\n\nDraws a single pixel, at position (x ,y), on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the pixel\n\n- **y** (*int*) -- y coordinate of the pixel\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.hline()  \ndraw a horizontal line\n\nhline(surface, x1, x2, y, color) -\\> None\n\nDraws a straight horizontal line (`(x1,`` ``y)` to `(x2,`` ``y)`) on the given surface. There are no endcaps.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of one end of the line\n\n- **x2** (*int*) -- x coordinate of the other end of the line\n\n- **y** (*int*) -- y coordinate of the line\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.vline()  \ndraw a vertical line\n\nvline(surface, x, y1, y2, color) -\\> None\n\nDraws a straight vertical line (`(x,`` ``y1)` to `(x,`` ``y2)`) on the given surface. There are no endcaps.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the line\n\n- **y1** (*int*) -- y coordinate of one end of the line\n\n- **y2** (*int*) -- y coordinate of the other end of the line\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.line()  \ndraw a line\n\nline(surface, x1, y1, x2, y2, color) -\\> None\n\nDraws a straight line (`(x1,`` ``y1)` to `(x2,`` ``y2)`) on the given surface. There are no endcaps.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of one end of the line\n\n- **y1** (*int*) -- y coordinate of one end of the line\n\n- **x2** (*int*) -- x coordinate of the other end of the line\n\n- **y2** (*int*) -- y coordinate of the other end of the line\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.rectangle()  \ndraw a rectangle\n\nrectangle(surface, rect, color) -\\> None\n\nDraws an unfilled rectangle on the given surface. For a filled rectangle use [`box()`](#pygame.gfxdraw.box \"pygame.gfxdraw.box\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](rect#pygame.Rect) always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.\n\npygame.gfxdraw.box()  \ndraw a filled rectangle\n\nbox(surface, rect, color) -\\> None\n\nDraws a filled rectangle on the given surface. For an unfilled rectangle use [`rectangle()`](#pygame.gfxdraw.rectangle \"pygame.gfxdraw.rectangle\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](rect#pygame.Rect) always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.\n\nNote\n\nThe [`pygame.Surface.fill()`](surface#pygame.Surface.fill) method works just as well for drawing filled rectangles. In fact [`pygame.Surface.fill()`](surface#pygame.Surface.fill) can be hardware accelerated on some platforms with both software and hardware display modes.\n\npygame.gfxdraw.circle()  \ndraw a circle\n\ncircle(surface, x, y, r, color) -\\> None\n\nDraws an unfilled circle on the given surface. For a filled circle use [`filled_circle()`](#pygame.gfxdraw.filled_circle \"pygame.gfxdraw.filled_circle\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the circle\n\n- **y** (*int*) -- y coordinate of the center of the circle\n\n- **r** (*int*) -- radius of the circle\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.aacircle()  \ndraw an antialiased circle\n\naacircle(surface, x, y, r, color) -\\> None\n\nDraws an unfilled antialiased circle on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the circle\n\n- **y** (*int*) -- y coordinate of the center of the circle\n\n- **r** (*int*) -- radius of the circle\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.filled_circle()  \ndraw a filled circle\n\nfilled_circle(surface, x, y, r, color) -\\> None\n\nDraws a filled circle on the given surface. For an unfilled circle use [`circle()`](#pygame.gfxdraw.circle \"pygame.gfxdraw.circle\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the circle\n\n- **y** (*int*) -- y coordinate of the center of the circle\n\n- **r** (*int*) -- radius of the circle\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.ellipse()  \ndraw an ellipse\n\nellipse(surface, x, y, rx, ry, color) -\\> None\n\nDraws an unfilled ellipse on the given surface. For a filled ellipse use [`filled_ellipse()`](#pygame.gfxdraw.filled_ellipse \"pygame.gfxdraw.filled_ellipse\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the ellipse\n\n- **y** (*int*) -- y coordinate of the center of the ellipse\n\n- **rx** (*int*) -- horizontal radius of the ellipse\n\n- **ry** (*int*) -- vertical radius of the ellipse\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.aaellipse()  \ndraw an antialiased ellipse\n\naaellipse(surface, x, y, rx, ry, color) -\\> None\n\nDraws an unfilled antialiased ellipse on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the ellipse\n\n- **y** (*int*) -- y coordinate of the center of the ellipse\n\n- **rx** (*int*) -- horizontal radius of the ellipse\n\n- **ry** (*int*) -- vertical radius of the ellipse\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.filled_ellipse()  \ndraw a filled ellipse\n\nfilled_ellipse(surface, x, y, rx, ry, color) -\\> None\n\nDraws a filled ellipse on the given surface. For an unfilled ellipse use [`ellipse()`](#pygame.gfxdraw.ellipse \"pygame.gfxdraw.ellipse\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the ellipse\n\n- **y** (*int*) -- y coordinate of the center of the ellipse\n\n- **rx** (*int*) -- horizontal radius of the ellipse\n\n- **ry** (*int*) -- vertical radius of the ellipse\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.arc()  \ndraw an arc\n\narc(surface, x, y, r, start_angle, stop_angle, color) -\\> None\n\nDraws an arc on the given surface. For an arc with its endpoints connected to its center use [`pie()`](#pygame.gfxdraw.pie \"pygame.gfxdraw.pie\").\n\nThe two angle arguments are given in degrees and indicate the start and stop positions of the arc. The arc is drawn in a clockwise direction from the `start_angle` to the `stop_angle`. If `start_angle`` ``==`` ``stop_angle`, nothing will be drawn\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the arc\n\n- **y** (*int*) -- y coordinate of the center of the arc\n\n- **r** (*int*) -- radius of the arc\n\n- **start_angle** (*int*) -- start angle in degrees\n\n- **stop_angle** (*int*) -- stop angle in degrees\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nNote\n\nThis function uses *degrees* while the [`pygame.draw.arc()`](draw#pygame.draw.arc) function uses *radians*.\n\npygame.gfxdraw.pie()  \ndraw a pie\n\npie(surface, x, y, r, start_angle, stop_angle, color) -\\> None\n\nDraws an unfilled pie on the given surface. A pie is an [`arc()`](#pygame.gfxdraw.arc \"pygame.gfxdraw.arc\") with its endpoints connected to its center.\n\nThe two angle arguments are given in degrees and indicate the start and stop positions of the pie. The pie is drawn in a clockwise direction from the `start_angle` to the `stop_angle`. If `start_angle`` ``==`` ``stop_angle`, a straight line will be drawn from the center position at the given angle, to a length of the radius.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the pie\n\n- **y** (*int*) -- y coordinate of the center of the pie\n\n- **r** (*int*) -- radius of the pie\n\n- **start_angle** (*int*) -- start angle in degrees\n\n- **stop_angle** (*int*) -- stop angle in degrees\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.trigon()  \ndraw a trigon/triangle\n\ntrigon(surface, x1, y1, x2, y2, x3, y3, color) -\\> None\n\nDraws an unfilled trigon (triangle) on the given surface. For a filled trigon use [`filled_trigon()`](#pygame.gfxdraw.filled_trigon \"pygame.gfxdraw.filled_trigon\").\n\nA trigon can also be drawn using [`polygon()`](#pygame.gfxdraw.polygon \"pygame.gfxdraw.polygon\") e.g. `polygon(surface,`` ``((x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)),`` ``color)`\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of the first corner of the trigon\n\n- **y1** (*int*) -- y coordinate of the first corner of the trigon\n\n- **x2** (*int*) -- x coordinate of the second corner of the trigon\n\n- **y2** (*int*) -- y coordinate of the second corner of the trigon\n\n- **x3** (*int*) -- x coordinate of the third corner of the trigon\n\n- **y3** (*int*) -- y coordinate of the third corner of the trigon\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.aatrigon()  \ndraw an antialiased trigon/triangle\n\naatrigon(surface, x1, y1, x2, y2, x3, y3, color) -\\> None\n\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\nAn aatrigon can also be drawn using [`aapolygon()`](#pygame.gfxdraw.aapolygon \"pygame.gfxdraw.aapolygon\") e.g. `aapolygon(surface,`` ``((x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)),`` ``color)`\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of the first corner of the trigon\n\n- **y1** (*int*) -- y coordinate of the first corner of the trigon\n\n- **x2** (*int*) -- x coordinate of the second corner of the trigon\n\n- **y2** (*int*) -- y coordinate of the second corner of the trigon\n\n- **x3** (*int*) -- x coordinate of the third corner of the trigon\n\n- **y3** (*int*) -- y coordinate of the third corner of the trigon\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.filled_trigon()  \ndraw a filled trigon/triangle\n\nfilled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -\\> None\n\nDraws a filled trigon (triangle) on the given surface. For an unfilled trigon use [`trigon()`](#pygame.gfxdraw.trigon \"pygame.gfxdraw.trigon\").\n\nA filled_trigon can also be drawn using [`filled_polygon()`](#pygame.gfxdraw.filled_polygon \"pygame.gfxdraw.filled_polygon\") e.g. `filled_polygon(surface,`` ``((x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)),`` ``color)`\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of the first corner of the trigon\n\n- **y1** (*int*) -- y coordinate of the first corner of the trigon\n\n- **x2** (*int*) -- x coordinate of the second corner of the trigon\n\n- **y2** (*int*) -- y coordinate of the second corner of the trigon\n\n- **x3** (*int*) -- x coordinate of the third corner of the trigon\n\n- **y3** (*int*) -- y coordinate of the third corner of the trigon\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.polygon()  \ndraw a polygon\n\npolygon(surface, points, color) -\\> None\n\nDraws an unfilled polygon on the given surface. For a filled polygon use [`filled_polygon()`](#pygame.gfxdraw.filled_polygon \"pygame.gfxdraw.filled_polygon\").\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.aapolygon()  \ndraw an antialiased polygon\n\naapolygon(surface, points, color) -\\> None\n\nDraws an unfilled antialiased polygon on the given surface.\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.filled_polygon()  \ndraw a filled polygon\n\nfilled_polygon(surface, points, color) -\\> None\n\nDraws a filled polygon on the given surface. For an unfilled polygon use [`polygon()`](#pygame.gfxdraw.polygon \"pygame.gfxdraw.polygon\").\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\\`\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.textured_polygon()  \ndraw a textured polygon\n\ntextured_polygon(surface, points, texture, tx, ty) -\\> None\n\nDraws a textured polygon on the given surface. For better performance, the surface and the texture should have the same format.\n\nA per-pixel alpha texture blit to a per-pixel alpha surface will differ from a [`pygame.Surface.blit()`](surface#pygame.Surface.blit) blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **texture** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- texture to draw on the polygon\n\n- **tx** (*int*) -- x offset of the texture\n\n- **ty** (*int*) -- y offset of the texture\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.bezier()  \ndraw a Bezier curve\n\nbezier(surface, points, steps, color) -\\> None\n\nDraws a Bézier curve on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates used to form a curve, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **steps** (*int*) -- number of steps for the interpolation, the minimum is 2\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `steps`` ``<`` ``2`\n\n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/gfxdraw.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/gfxdraw.html](https://www.pygame.org/docs/ref/gfxdraw.html)"
- name: gfxdraw.aacircle
  id: ref/gfxdraw#pygame.gfxdraw.aacircle
  summary: Draws an unfilled antialiased circle on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.aacircle()

    draw an antialiased circle

    aacircle(surface, x, y, r, color) -\> None

    Draws an unfilled antialiased circle on the given surface.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the circle

    - **y** (*int*) -- y coordinate of the center of the circle

    - **r** (*int*) -- radius of the circle

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.aaellipse
  id: ref/gfxdraw#pygame.gfxdraw.aaellipse
  summary: Draws an unfilled antialiased ellipse on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.aaellipse()

    draw an antialiased ellipse

    aaellipse(surface, x, y, rx, ry, color) -\> None

    Draws an unfilled antialiased ellipse on the given surface.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the ellipse

    - **y** (*int*) -- y coordinate of the center of the ellipse

    - **rx** (*int*) -- horizontal radius of the ellipse

    - **ry** (*int*) -- vertical radius of the ellipse

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.aapolygon
  id: ref/gfxdraw#pygame.gfxdraw.aapolygon
  summary: Draws an unfilled antialiased polygon on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.aapolygon()

    draw an antialiased polygon

    aapolygon(surface, points, color) -\> None

    Draws an unfilled antialiased polygon on the given surface.

    The adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,``y1),``(x2,``y2),``(x3,``y3)]` a line segment will be drawn from `(x1,``y1)` to `(x2,``y2)`, from `(x2,``y2)` to `(x3,``y3)`, and from `(x3,``y3)` to `(x1,``y1)`.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType

    Raises

    - **ValueError** -- if `len(points)``<``3` (must have at least 3 points)

    - **IndexError** -- if `len(coordinate)``<``2` (each coordinate must have at least 2 items)
- name: gfxdraw.aatrigon
  id: ref/gfxdraw#pygame.gfxdraw.aatrigon
  summary: Draws an unfilled antialiased trigon (triangle) on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.aatrigon()

    draw an antialiased trigon/triangle

    aatrigon(surface, x1, y1, x2, y2, x3, y3, color) -\> None

    Draws an unfilled antialiased trigon (triangle) on the given surface.

    An aatrigon can also be drawn using [`aapolygon()`](#pygame.gfxdraw.aapolygon "pygame.gfxdraw.aapolygon") e.g. `aapolygon(surface,``((x1,``y1),``(x2,``y2),``(x3,``y3)),``color)`

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x1** (*int*) -- x coordinate of the first corner of the trigon

    - **y1** (*int*) -- y coordinate of the first corner of the trigon

    - **x2** (*int*) -- x coordinate of the second corner of the trigon

    - **y2** (*int*) -- y coordinate of the second corner of the trigon

    - **x3** (*int*) -- x coordinate of the third corner of the trigon

    - **y3** (*int*) -- y coordinate of the third corner of the trigon

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.arc
  id: ref/gfxdraw#pygame.gfxdraw.arc
  summary: Draws an arc on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.arc()

    draw an arc

    arc(surface, x, y, r, start_angle, stop_angle, color) -\> None

    Draws an arc on the given surface. For an arc with its endpoints connected to its center use [`pie()`](#pygame.gfxdraw.pie "pygame.gfxdraw.pie").

    The two angle arguments are given in degrees and indicate the start and stop positions of the arc. The arc is drawn in a clockwise direction from the `start_angle` to the `stop_angle`. If `start_angle``==``stop_angle`, nothing will be drawn

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the arc

    - **y** (*int*) -- y coordinate of the center of the arc

    - **r** (*int*) -- radius of the arc

    - **start_angle** (*int*) -- start angle in degrees

    - **stop_angle** (*int*) -- stop angle in degrees

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType

    Note

    This function uses *degrees* while the [`pygame.draw.arc()`](draw#pygame.draw.arc) function uses *radians*.
- name: gfxdraw.bezier
  id: ref/gfxdraw#pygame.gfxdraw.bezier
  summary: Draws a Bézier curve on the given surface
  belongs_to: gfxdraw
  description: "pygame.gfxdraw.bezier()\n\ndraw a Bezier curve\n\nbezier(surface, points, steps, color) -\\> None\n\nDraws a Bézier curve on the given surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates used to form a curve, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **steps** (*int*) -- number of steps for the interpolation, the minimum is 2\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns\n\n` ``None`` `\n\nReturn type\n\nNoneType\n\nRaises\n\n- **ValueError** -- if `steps``<``2`\n\n- **ValueError** -- if `len(points)``<``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)``<``2` (each coordinate must have at least 2 items)\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/gfxdraw.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/gfxdraw.html](https://www.pygame.org/docs/ref/gfxdraw.html)"
- name: gfxdraw.box
  id: ref/gfxdraw#pygame.gfxdraw.box
  summary: Draws a filled rectangle on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.box()

    draw a filled rectangle

    box(surface, rect, color) -\> None

    Draws a filled rectangle on the given surface. For an unfilled rectangle use [`rectangle()`](#pygame.gfxdraw.rectangle "pygame.gfxdraw.rectangle").

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **rect** ([*Rect*](rect#pygame.Rect "pygame.Rect")) -- rectangle to draw, position and dimensions

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType

    Note

    The `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](rect#pygame.Rect) always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.

    Note

    The [`pygame.Surface.fill()`](surface#pygame.Surface.fill) method works just as well for drawing filled rectangles. In fact [`pygame.Surface.fill()`](surface#pygame.Surface.fill) can be hardware accelerated on some platforms with both software and hardware display modes.
- name: gfxdraw.circle
  id: ref/gfxdraw#pygame.gfxdraw.circle
  summary: Draws an unfilled circle on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.circle()

    draw a circle

    circle(surface, x, y, r, color) -\> None

    Draws an unfilled circle on the given surface. For a filled circle use [`filled_circle()`](#pygame.gfxdraw.filled_circle "pygame.gfxdraw.filled_circle").

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the circle

    - **y** (*int*) -- y coordinate of the center of the circle

    - **r** (*int*) -- radius of the circle

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.ellipse
  id: ref/gfxdraw#pygame.gfxdraw.ellipse
  summary: Draws an unfilled ellipse on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.ellipse()

    draw an ellipse

    ellipse(surface, x, y, rx, ry, color) -\> None

    Draws an unfilled ellipse on the given surface. For a filled ellipse use [`filled_ellipse()`](#pygame.gfxdraw.filled_ellipse "pygame.gfxdraw.filled_ellipse").

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the ellipse

    - **y** (*int*) -- y coordinate of the center of the ellipse

    - **rx** (*int*) -- horizontal radius of the ellipse

    - **ry** (*int*) -- vertical radius of the ellipse

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.filled_circle
  id: ref/gfxdraw#pygame.gfxdraw.filled_circle
  summary: Draws a filled circle on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.filled_circle()

    draw a filled circle

    filled_circle(surface, x, y, r, color) -\> None

    Draws a filled circle on the given surface. For an unfilled circle use [`circle()`](#pygame.gfxdraw.circle "pygame.gfxdraw.circle").

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the circle

    - **y** (*int*) -- y coordinate of the center of the circle

    - **r** (*int*) -- radius of the circle

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.filled_ellipse
  id: ref/gfxdraw#pygame.gfxdraw.filled_ellipse
  summary: Draws a filled ellipse on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.filled_ellipse()

    draw a filled ellipse

    filled_ellipse(surface, x, y, rx, ry, color) -\> None

    Draws a filled ellipse on the given surface. For an unfilled ellipse use [`ellipse()`](#pygame.gfxdraw.ellipse "pygame.gfxdraw.ellipse").

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the ellipse

    - **y** (*int*) -- y coordinate of the center of the ellipse

    - **rx** (*int*) -- horizontal radius of the ellipse

    - **ry** (*int*) -- vertical radius of the ellipse

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.filled_polygon
  id: ref/gfxdraw#pygame.gfxdraw.filled_polygon
  summary: Draws a filled polygon on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.filled_polygon()

    draw a filled polygon

    filled_polygon(surface, points, color) -\> None

    Draws a filled polygon on the given surface. For an unfilled polygon use [`polygon()`](#pygame.gfxdraw.polygon "pygame.gfxdraw.polygon").

    The adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,``y1),``(x2,``y2),``(x3,``y3)]` a line segment will be drawn from `(x1,``y1)` to `(x2,``y2)`, from `(x2,``y2)` to `(x3,``y3)`, and from `(x3,``y3)` to `(x1,``y1)`.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\`

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType

    Raises

    - **ValueError** -- if `len(points)``<``3` (must have at least 3 points)

    - **IndexError** -- if `len(coordinate)``<``2` (each coordinate must have at least 2 items)
- name: gfxdraw.filled_trigon
  id: ref/gfxdraw#pygame.gfxdraw.filled_trigon
  summary: Draws a filled trigon (triangle) on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.filled_trigon()

    draw a filled trigon/triangle

    filled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -\> None

    Draws a filled trigon (triangle) on the given surface. For an unfilled trigon use [`trigon()`](#pygame.gfxdraw.trigon "pygame.gfxdraw.trigon").

    A filled_trigon can also be drawn using [`filled_polygon()`](#pygame.gfxdraw.filled_polygon "pygame.gfxdraw.filled_polygon") e.g. `filled_polygon(surface,``((x1,``y1),``(x2,``y2),``(x3,``y3)),``color)`

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x1** (*int*) -- x coordinate of the first corner of the trigon

    - **y1** (*int*) -- y coordinate of the first corner of the trigon

    - **x2** (*int*) -- x coordinate of the second corner of the trigon

    - **y2** (*int*) -- y coordinate of the second corner of the trigon

    - **x3** (*int*) -- x coordinate of the third corner of the trigon

    - **y3** (*int*) -- y coordinate of the third corner of the trigon

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.hline
  id: ref/gfxdraw#pygame.gfxdraw.hline
  summary: Draws a straight horizontal line ((x1,``y) to (x2,``y)) on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.hline()

    draw a horizontal line

    hline(surface, x1, x2, y, color) -\> None

    Draws a straight horizontal line (`(x1,``y)` to `(x2,``y)`) on the given surface. There are no endcaps.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x1** (*int*) -- x coordinate of one end of the line

    - **x2** (*int*) -- x coordinate of the other end of the line

    - **y** (*int*) -- y coordinate of the line

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.line
  id: ref/gfxdraw#pygame.gfxdraw.line
  summary: Draws a straight line ((x1,``y1) to (x2,``y2)) on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.line()

    draw a line

    line(surface, x1, y1, x2, y2, color) -\> None

    Draws a straight line (`(x1,``y1)` to `(x2,``y2)`) on the given surface. There are no endcaps.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x1** (*int*) -- x coordinate of one end of the line

    - **y1** (*int*) -- y coordinate of one end of the line

    - **x2** (*int*) -- x coordinate of the other end of the line

    - **y2** (*int*) -- y coordinate of the other end of the line

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.pie
  id: ref/gfxdraw#pygame.gfxdraw.pie
  summary: Draws an unfilled pie on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.pie()

    draw a pie

    pie(surface, x, y, r, start_angle, stop_angle, color) -\> None

    Draws an unfilled pie on the given surface. A pie is an [`arc()`](#pygame.gfxdraw.arc "pygame.gfxdraw.arc") with its endpoints connected to its center.

    The two angle arguments are given in degrees and indicate the start and stop positions of the pie. The pie is drawn in a clockwise direction from the `start_angle` to the `stop_angle`. If `start_angle``==``stop_angle`, a straight line will be drawn from the center position at the given angle, to a length of the radius.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the center of the pie

    - **y** (*int*) -- y coordinate of the center of the pie

    - **r** (*int*) -- radius of the pie

    - **start_angle** (*int*) -- start angle in degrees

    - **stop_angle** (*int*) -- stop angle in degrees

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.pixel
  id: ref/gfxdraw#pygame.gfxdraw.pixel
  summary: Draws a single pixel, at position (x ,y), on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.pixel()

    draw a pixel

    pixel(surface, x, y, color) -\> None

    Draws a single pixel, at position (x ,y), on the given surface.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the pixel

    - **y** (*int*) -- y coordinate of the pixel

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.polygon
  id: ref/gfxdraw#pygame.gfxdraw.polygon
  summary: Draws an unfilled polygon on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.polygon()

    draw a polygon

    polygon(surface, points, color) -\> None

    Draws an unfilled polygon on the given surface. For a filled polygon use [`filled_polygon()`](#pygame.gfxdraw.filled_polygon "pygame.gfxdraw.filled_polygon").

    The adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,``y1),``(x2,``y2),``(x3,``y3)]` a line segment will be drawn from `(x1,``y1)` to `(x2,``y2)`, from `(x2,``y2)` to `(x3,``y3)`, and from `(x3,``y3)` to `(x1,``y1)`.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType

    Raises

    - **ValueError** -- if `len(points)``<``3` (must have at least 3 points)

    - **IndexError** -- if `len(coordinate)``<``2` (each coordinate must have at least 2 items)
- name: gfxdraw.rectangle
  id: ref/gfxdraw#pygame.gfxdraw.rectangle
  summary: Draws an unfilled rectangle on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.rectangle()

    draw a rectangle

    rectangle(surface, rect, color) -\> None

    Draws an unfilled rectangle on the given surface. For a filled rectangle use [`box()`](#pygame.gfxdraw.box "pygame.gfxdraw.box").

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **rect** ([*Rect*](rect#pygame.Rect "pygame.Rect")) -- rectangle to draw, position and dimensions

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType

    Note

    The `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](rect#pygame.Rect) always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.
- name: gfxdraw.textured_polygon
  id: ref/gfxdraw#pygame.gfxdraw.textured_polygon
  summary: Draws a textured polygon on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.textured_polygon()

    draw a textured polygon

    textured_polygon(surface, points, texture, tx, ty) -\> None

    Draws a textured polygon on the given surface. For better performance, the surface and the texture should have the same format.

    A per-pixel alpha texture blit to a per-pixel alpha surface will differ from a [`pygame.Surface.blit()`](surface#pygame.Surface.blit) blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.

    The adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,``y1),``(x2,``y2),``(x3,``y3)]` a line segment will be drawn from `(x1,``y1)` to `(x2,``y2)`, from `(x2,``y2)` to `(x3,``y3)`, and from `(x3,``y3)` to `(x1,``y1)`.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)

    - **texture** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- texture to draw on the polygon

    - **tx** (*int*) -- x offset of the texture

    - **ty** (*int*) -- y offset of the texture

    Returns

    ` ``None`` `

    Return type

    NoneType

    Raises

    - **ValueError** -- if `len(points)``<``3` (must have at least 3 points)

    - **IndexError** -- if `len(coordinate)``<``2` (each coordinate must have at least 2 items)
- name: gfxdraw.trigon
  id: ref/gfxdraw#pygame.gfxdraw.trigon
  summary: Draws an unfilled trigon (triangle) on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.trigon()

    draw a trigon/triangle

    trigon(surface, x1, y1, x2, y2, x3, y3, color) -\> None

    Draws an unfilled trigon (triangle) on the given surface. For a filled trigon use [`filled_trigon()`](#pygame.gfxdraw.filled_trigon "pygame.gfxdraw.filled_trigon").

    A trigon can also be drawn using [`polygon()`](#pygame.gfxdraw.polygon "pygame.gfxdraw.polygon") e.g. `polygon(surface,``((x1,``y1),``(x2,``y2),``(x3,``y3)),``color)`

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x1** (*int*) -- x coordinate of the first corner of the trigon

    - **y1** (*int*) -- y coordinate of the first corner of the trigon

    - **x2** (*int*) -- x coordinate of the second corner of the trigon

    - **y2** (*int*) -- y coordinate of the second corner of the trigon

    - **x3** (*int*) -- x coordinate of the third corner of the trigon

    - **y3** (*int*) -- y coordinate of the third corner of the trigon

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: gfxdraw.vline
  id: ref/gfxdraw#pygame.gfxdraw.vline
  summary: Draws a straight vertical line ((x,``y1) to (x,``y2)) on the given surface
  belongs_to: gfxdraw
  description: |-
    pygame.gfxdraw.vline()

    draw a vertical line

    vline(surface, x, y1, y2, color) -\> None

    Draws a straight vertical line (`(x,``y1)` to `(x,``y2)`) on the given surface. There are no endcaps.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- surface to draw on

    - **x** (*int*) -- x coordinate of the line

    - **y1** (*int*) -- y coordinate of one end of the line

    - **y2** (*int*) -- y coordinate of the other end of the line

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *tuple(int,* *int,* *int,* *\[int\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: image
  id: ref/image
  summary: The image module contains functions for loading and saving pictures, as well as transferring Surfaces to formats usable by other packages
  description: "pygame.image  \npygame module for image transfer\n\nThe image module contains functions for loading and saving pictures, as well as transferring Surfaces to formats usable by other packages.\n\nNote that there is no Image class; an image is loaded as a Surface object. The Surface class allows manipulation (drawing lines, setting pixels, capturing regions, etc.).\n\nIn the vast majority of installations, pygame is built to support extended formats, using the SDL_Image library behind the scenes. However, some installations may only support uncompressed `BMP` images. With full image support, the [`pygame.image.load()`](#pygame.image.load) function can load the following formats.\n\n> - `BMP`\n>\n> - `GIF` (non-animated)\n>\n> - `JPEG`\n>\n> - `LBM` (and `PBM`, `PGM`, `PPM`)\n>\n> - `PCX`\n>\n> - `PNG`\n>\n> - `PNM`\n>\n> - `SVG` (limited support, using Nano SVG)\n>\n> - `TGA` (uncompressed)\n>\n> - `TIFF`\n>\n> - `WEBP`\n>\n> - `XPM`\n\nNew in pygame 2.0: Loading SVG, WebP, PNM\n\nSaving images only supports a limited set of formats. You can save to the following formats.\n\n> - `BMP`\n>\n> - `JPEG`\n>\n> - `PNG`\n>\n> - `TGA`\n\n`JPEG` and `JPG`, as well as `TIF` and `TIFF` refer to the same file format\n\nNew in pygame 1.8: Saving PNG and JPEG files.\n\npygame.image.load()  \nload new image from a file (or file-like object)\n\nload(filename) -\\> Surface\n\nload(fileobj, namehint=\"\") -\\> Surface\n\nLoad an image from a file source. You can pass either a filename, a Python file-like object, or a pathlib.Path.\n\nPygame will automatically determine the image type (e.g., `GIF` or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., `GIF` images should end in \".gif\"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.\n\nThe returned Surface will contain the same color format, colorkey and alpha transparency as the file it came from. You will often want to call [`pygame.Surface.convert()`](surface#pygame.Surface.convert) with no arguments, to create a copy that will draw more quickly on the screen.\n\nFor alpha transparency, like in .png images, use the [`pygame.Surface.convert_alpha()`](surface#pygame.Surface.convert_alpha) method after loading so that the image has per pixel transparency.\n\nPygame may not always be built to support all image formats. At minimum it will support uncompressed `BMP`. If [`pygame.image.get_extended()`](#pygame.image.get_extended) returns `True`, you should be able to load most images (including PNG, JPG and GIF).\n\nYou should use `os.path.join()` for compatibility.\n\n``` python\neg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))\n```\n\npygame.image.save()  \nsave an image to file (or file-like object)\n\nsave(Surface, filename) -\\> None\n\nsave(Surface, fileobj, namehint=\"\") -\\> None\n\nThis will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image. If the filename extension is unrecognized it will default to `TGA`. Both `TGA`, and `BMP` file formats create uncompressed files. You can pass a filename, a pathlib.Path or a Python file-like object. For file-like object, the image is saved to `TGA` format unless a namehint with a recognizable extension is passed in.\n\nNote\n\nWhen saving to a file-like object, it seems that for most formats, the object needs to be flushed after saving to it to make loading from it possible.\n\nChanged in pygame 1.8: Saving PNG and JPEG files.\n\nChanged in pygame 2.0.0: The `namehint` parameter was added to make it possible to save other formats than `TGA` to a file-like object. Saving to a file-like object with JPEG is possible.\n\npygame.image.get_sdl_image_version()  \nget version number of the SDL_Image library being used\n\nget_sdl_image_version(linked=True) -\\> None\n\nget_sdl_image_version(linked=True) -\\> (major, minor, patch)\n\nIf pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers `(major,`` ``minor,`` ``patch)`. If not, then it will return `None`.\n\n`linked=True` is the default behavior and the function will return the version of the library that Pygame is linked against, while `linked=False` will return the version of the library that Pygame is compiled against.\n\nNew in pygame 2.0.0.\n\nChanged in pygame 2.2.0: `linked` keyword argument added and default behavior changed from returning compiled version to returning linked version\n\npygame.image.get_extended()  \ntest if extended image formats can be loaded\n\nget_extended() -\\> bool\n\nIf pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all.\n\npygame.image.tostring()  \ntransfer image to byte buffer\n\ntostring(Surface, format, flipped=False) -\\> bytes\n\nCreates a string of bytes that can be transferred with the `fromstring` or `frombytes` methods in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass `True` for the flipped argument, the byte buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.\n\n> - `P`, 8-bit palettized Surfaces\n>\n> - `RGB`, 24-bit image\n>\n> - `RGBX`, 32-bit image with unused space\n>\n> - `RGBA`, 32-bit image with an alpha channel\n>\n> - `ARGB`, 32-bit image with alpha channel first\n>\n> - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped\n>\n> - `RGBA_PREMULT`, 32-bit image with colors scaled by alpha channel\n>\n> - `ARGB_PREMULT`, 32-bit image with colors scaled by alpha channel, alpha channel first\n\nNote\n\nit is preferred to use [`tobytes()`](#pygame.image.tobytes \"pygame.image.tobytes\") as of pygame 2.1.3\n\nNew in pygame 2.1.3: BGRA format\n\npygame.image.tobytes()  \ntransfer image to byte buffer\n\ntobytes(Surface, format, flipped=False) -\\> bytes\n\nCreates a string of bytes that can be transferred with the `fromstring` or `frombytes` methods in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass `True` for the flipped argument, the byte buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.\n\n> - `P`, 8-bit palettized Surfaces\n>\n> - `RGB`, 24-bit image\n>\n> - `RGBX`, 32-bit image with unused space\n>\n> - `RGBA`, 32-bit image with an alpha channel\n>\n> - `ARGB`, 32-bit image with alpha channel first\n>\n> - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped\n>\n> - `RGBA_PREMULT`, 32-bit image with colors scaled by alpha channel\n>\n> - `ARGB_PREMULT`, 32-bit image with colors scaled by alpha channel, alpha channel first\n\nNote\n\nthis function is an alias for [`tostring()`](#pygame.image.tostring \"pygame.image.tostring\"). The use of this function is recommended over [`tostring()`](#pygame.image.tostring \"pygame.image.tostring\") as of pygame 2.1.3. This function was introduced so it matches nicely with other libraries (PIL, numpy, etc), and with people's expectations.\n\nNew in pygame 2.1.3.\n\npygame.image.fromstring()  \ncreate new Surface from a byte buffer\n\nfromstring(bytes, size, format, flipped=False) -\\> Surface\n\nThis function takes arguments similar to [`pygame.image.tostring()`](#pygame.image.tostring). The size argument is a pair of numbers representing the width and height. Once the new Surface is created it is independent from the memory of the bytes passed in.\n\nThe bytes and format passed must compute to the exact size of image specified. Otherwise a `ValueError` will be raised.\n\nSee the [`pygame.image.frombuffer()`](#pygame.image.frombuffer) method for a potentially faster way to transfer images into pygame.\n\nNote\n\nit is preferred to use [`frombytes()`](#pygame.image.frombytes \"pygame.image.frombytes\") as of pygame 2.1.3\n\npygame.image.frombytes()  \ncreate new Surface from a byte buffer\n\nfrombytes(bytes, size, format, flipped=False) -\\> Surface\n\nThis function takes arguments similar to [`pygame.image.tobytes()`](#pygame.image.tobytes). The size argument is a pair of numbers representing the width and height. Once the new Surface is created it is independent from the memory of the bytes passed in.\n\nThe bytes and format passed must compute to the exact size of image specified. Otherwise a `ValueError` will be raised.\n\nSee the [`pygame.image.frombuffer()`](#pygame.image.frombuffer) method for a potentially faster way to transfer images into pygame.\n\nNote\n\nthis function is an alias for [`fromstring()`](#pygame.image.fromstring \"pygame.image.fromstring\"). The use of this function is recommended over [`fromstring()`](#pygame.image.fromstring \"pygame.image.fromstring\") as of pygame 2.1.3. This function was introduced so it matches nicely with other libraries (PIL, numpy, etc), and with people's expectations.\n\nNew in pygame 2.1.3.\n\npygame.image.frombuffer()  \ncreate a new Surface that shares data inside a bytes buffer\n\nfrombuffer(buffer, size, format) -\\> Surface\n\nCreate a new Surface that shares pixel data directly from a buffer. This buffer can be bytes, a bytearray, a memoryview, a [`pygame.BufferProxy`](bufferproxy#pygame.BufferProxy), or any object that supports the buffer protocol. This method takes similar arguments to [`pygame.image.fromstring()`](#pygame.image.fromstring), but is unable to vertically flip the source data.\n\nThis will run much faster than [`pygame.image.fromstring()`](#pygame.image.fromstring), since no pixel data must be allocated and copied.\n\nIt accepts the following 'format' arguments:\n\n> - `P`, 8-bit palettized Surfaces\n>\n> - `RGB`, 24-bit image\n>\n> - `BGR`, 24-bit image, red and blue channels swapped.\n>\n> - `RGBX`, 32-bit image with unused space\n>\n> - `RGBA`, 32-bit image with an alpha channel\n>\n> - `ARGB`, 32-bit image with alpha channel first\n>\n> - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped\n\nNew in pygame 2.1.3: BGRA format\n\npygame.image.load_basic()  \nload new BMP image from a file (or file-like object)\n\nload_basic(file) -\\> Surface\n\nLoad an image from a file source. You can pass either a filename or a Python file-like object, or a pathlib.Path.\n\nThis function only supports loading \"basic\" image format, ie `BMP` format. This function is always available, no matter how pygame was built.\n\npygame.image.load_extended()  \nload an image from a file (or file-like object)\n\nload_extended(filename) -\\> Surface\n\nload_extended(fileobj, namehint=\"\") -\\> Surface\n\nThis function is similar to [`pygame.image.load()`](#pygame.image.load), except that this function can only be used if pygame was built with extended image format support.\n\nChanged in pygame 2.0.1: This function is always available, but raises an `NotImplementedError` if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.\n\npygame.image.save_extended()  \nsave a png/jpg image to file (or file-like object)\n\nsave_extended(Surface, filename) -\\> None\n\nsave_extended(Surface, fileobj, namehint=\"\") -\\> None\n\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\nIn case the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to `JPEG` in case the namehint was not specified while saving to a file-like object.\n\nChanged in pygame 2.0.1: This function is always available, but raises an `NotImplementedError` if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/image.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/image.html](https://www.pygame.org/docs/ref/image.html)"
- name: image.frombuffer
  id: ref/image#pygame.image.frombuffer
  summary: Create a new Surface that shares pixel data directly from a buffer
  belongs_to: image
  description: |-
    pygame.image.frombuffer()

    create a new Surface that shares data inside a bytes buffer

    frombuffer(buffer, size, format) -\> Surface

    Create a new Surface that shares pixel data directly from a buffer. This buffer can be bytes, a bytearray, a memoryview, a [`pygame.BufferProxy`](bufferproxy#pygame.BufferProxy), or any object that supports the buffer protocol. This method takes similar arguments to [`pygame.image.fromstring()`](#pygame.image.fromstring), but is unable to vertically flip the source data.

    This will run much faster than [`pygame.image.fromstring()`](#pygame.image.fromstring), since no pixel data must be allocated and copied.

    It accepts the following 'format' arguments:

    > - `P`, 8-bit palettized Surfaces
    >
    > - `RGB`, 24-bit image
    >
    > - `BGR`, 24-bit image, red and blue channels swapped.
    >
    > - `RGBX`, 32-bit image with unused space
    >
    > - `RGBA`, 32-bit image with an alpha channel
    >
    > - `ARGB`, 32-bit image with alpha channel first
    >
    > - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped

    New in pygame 2.1.3: BGRA format
- name: image.frombytes
  id: ref/image#pygame.image.frombytes
  summary: This function takes arguments similar to pygame.image.tobytes()
  belongs_to: image
  description: |-
    pygame.image.frombytes()

    create new Surface from a byte buffer

    frombytes(bytes, size, format, flipped=False) -\> Surface

    This function takes arguments similar to [`pygame.image.tobytes()`](#pygame.image.tobytes). The size argument is a pair of numbers representing the width and height. Once the new Surface is created it is independent from the memory of the bytes passed in.

    The bytes and format passed must compute to the exact size of image specified. Otherwise a `ValueError` will be raised.

    See the [`pygame.image.frombuffer()`](#pygame.image.frombuffer) method for a potentially faster way to transfer images into pygame.

    Note

    this function is an alias for [`fromstring()`](#pygame.image.fromstring "pygame.image.fromstring"). The use of this function is recommended over [`fromstring()`](#pygame.image.fromstring "pygame.image.fromstring") as of pygame 2.1.3. This function was introduced so it matches nicely with other libraries (PIL, numpy, etc), and with people's expectations.

    New in pygame 2.1.3.
- name: image.fromstring
  id: ref/image#pygame.image.fromstring
  summary: This function takes arguments similar to pygame.image.tostring()
  belongs_to: image
  description: |-
    pygame.image.fromstring()

    create new Surface from a byte buffer

    fromstring(bytes, size, format, flipped=False) -\> Surface

    This function takes arguments similar to [`pygame.image.tostring()`](#pygame.image.tostring). The size argument is a pair of numbers representing the width and height. Once the new Surface is created it is independent from the memory of the bytes passed in.

    The bytes and format passed must compute to the exact size of image specified. Otherwise a `ValueError` will be raised.

    See the [`pygame.image.frombuffer()`](#pygame.image.frombuffer) method for a potentially faster way to transfer images into pygame.

    Note

    it is preferred to use [`frombytes()`](#pygame.image.frombytes "pygame.image.frombytes") as of pygame 2.1.3
- name: image.get_extended
  id: ref/image#pygame.image.get_extended
  summary: If pygame is built with extended image formats this function will return True
  belongs_to: image
  description: |-
    pygame.image.get_extended()

    test if extended image formats can be loaded

    get_extended() -\> bool

    If pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all.
- name: image.get_sdl_image_version
  id: ref/image#pygame.image.get_sdl_image_version
  summary: If pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers (major,``minor,``patch)
  belongs_to: image
  description: |-
    pygame.image.get_sdl_image_version()

    get version number of the SDL_Image library being used

    get_sdl_image_version(linked=True) -\> None

    get_sdl_image_version(linked=True) -\> (major, minor, patch)

    If pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers `(major,``minor,``patch)`. If not, then it will return `None`.

    `linked=True` is the default behavior and the function will return the version of the library that Pygame is linked against, while `linked=False` will return the version of the library that Pygame is compiled against.

    New in pygame 2.0.0.

    Changed in pygame 2.2.0: `linked` keyword argument added and default behavior changed from returning compiled version to returning linked version
- name: image.load
  id: ref/image#pygame.image.load
  summary: Load an image from a file source
  belongs_to: image
  description: |-
    pygame.image.load()

    load new image from a file (or file-like object)

    load(filename) -\> Surface

    load(fileobj, namehint="") -\> Surface

    Load an image from a file source. You can pass either a filename, a Python file-like object, or a pathlib.Path.

    Pygame will automatically determine the image type (e.g., `GIF` or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., `GIF` images should end in ".gif"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.

    The returned Surface will contain the same color format, colorkey and alpha transparency as the file it came from. You will often want to call [`pygame.Surface.convert()`](surface#pygame.Surface.convert) with no arguments, to create a copy that will draw more quickly on the screen.

    For alpha transparency, like in .png images, use the [`pygame.Surface.convert_alpha()`](surface#pygame.Surface.convert_alpha) method after loading so that the image has per pixel transparency.

    Pygame may not always be built to support all image formats. At minimum it will support uncompressed `BMP`. If [`pygame.image.get_extended()`](#pygame.image.get_extended) returns `True`, you should be able to load most images (including PNG, JPG and GIF).

    You should use `os.path.join()` for compatibility.

    ``` python
    eg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))
    ```
- name: image.load_basic
  id: ref/image#pygame.image.load_basic
  summary: Load an image from a file source
  belongs_to: image
  description: |-
    pygame.image.load_basic()

    load new BMP image from a file (or file-like object)

    load_basic(file) -\> Surface

    Load an image from a file source. You can pass either a filename or a Python file-like object, or a pathlib.Path.

    This function only supports loading "basic" image format, ie `BMP` format. This function is always available, no matter how pygame was built.
- name: image.load_extended
  id: ref/image#pygame.image.load_extended
  summary: This function is similar to pygame.image.load(), except that this function can only be used if pygame was built with extended image format support
  belongs_to: image
  description: |-
    pygame.image.load_extended()

    load an image from a file (or file-like object)

    load_extended(filename) -\> Surface

    load_extended(fileobj, namehint="") -\> Surface

    This function is similar to [`pygame.image.load()`](#pygame.image.load), except that this function can only be used if pygame was built with extended image format support.

    Changed in pygame 2.0.1: This function is always available, but raises an `NotImplementedError` if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.
- name: image.save
  id: ref/image#pygame.image.save
  summary: This will save your Surface as either a BMP, TGA, PNG, or JPEG image
  belongs_to: image
  description: |-
    pygame.image.save()

    save an image to file (or file-like object)

    save(Surface, filename) -\> None

    save(Surface, fileobj, namehint="") -\> None

    This will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image. If the filename extension is unrecognized it will default to `TGA`. Both `TGA`, and `BMP` file formats create uncompressed files. You can pass a filename, a pathlib.Path or a Python file-like object. For file-like object, the image is saved to `TGA` format unless a namehint with a recognizable extension is passed in.

    Note

    When saving to a file-like object, it seems that for most formats, the object needs to be flushed after saving to it to make loading from it possible.

    Changed in pygame 1.8: Saving PNG and JPEG files.

    Changed in pygame 2.0.0: The `namehint` parameter was added to make it possible to save other formats than `TGA` to a file-like object. Saving to a file-like object with JPEG is possible.
- name: image.save_extended
  id: ref/image#pygame.image.save_extended
  summary: This will save your Surface as either a PNG or JPEG image
  belongs_to: image
  description: "pygame.image.save_extended()\n\nsave a png/jpg image to file (or file-like object)\n\nsave_extended(Surface, filename) -\\> None\n\nsave_extended(Surface, fileobj, namehint=\"\") -\\> None\n\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\nIn case the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to `JPEG` in case the namehint was not specified while saving to a file-like object.\n\nChanged in pygame 2.0.1: This function is always available, but raises an `NotImplementedError` if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/image.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/image.html](https://www.pygame.org/docs/ref/image.html)"
- name: image.tobytes
  id: ref/image#pygame.image.tobytes
  summary: Creates a string of bytes that can be transferred with the fromstring or frombytes methods in other Python imaging packages
  belongs_to: image
  description: |-
    pygame.image.tobytes()

    transfer image to byte buffer

    tobytes(Surface, format, flipped=False) -\> bytes

    Creates a string of bytes that can be transferred with the `fromstring` or `frombytes` methods in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass `True` for the flipped argument, the byte buffer will be vertically flipped.

    The format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the "P" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.

    > - `P`, 8-bit palettized Surfaces
    >
    > - `RGB`, 24-bit image
    >
    > - `RGBX`, 32-bit image with unused space
    >
    > - `RGBA`, 32-bit image with an alpha channel
    >
    > - `ARGB`, 32-bit image with alpha channel first
    >
    > - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped
    >
    > - `RGBA_PREMULT`, 32-bit image with colors scaled by alpha channel
    >
    > - `ARGB_PREMULT`, 32-bit image with colors scaled by alpha channel, alpha channel first

    Note

    this function is an alias for [`tostring()`](#pygame.image.tostring "pygame.image.tostring"). The use of this function is recommended over [`tostring()`](#pygame.image.tostring "pygame.image.tostring") as of pygame 2.1.3. This function was introduced so it matches nicely with other libraries (PIL, numpy, etc), and with people's expectations.

    New in pygame 2.1.3.
- name: image.tostring
  id: ref/image#pygame.image.tostring
  summary: Creates a string of bytes that can be transferred with the fromstring or frombytes methods in other Python imaging packages
  belongs_to: image
  description: |-
    pygame.image.tostring()

    transfer image to byte buffer

    tostring(Surface, format, flipped=False) -\> bytes

    Creates a string of bytes that can be transferred with the `fromstring` or `frombytes` methods in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass `True` for the flipped argument, the byte buffer will be vertically flipped.

    The format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the "P" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.

    > - `P`, 8-bit palettized Surfaces
    >
    > - `RGB`, 24-bit image
    >
    > - `RGBX`, 32-bit image with unused space
    >
    > - `RGBA`, 32-bit image with an alpha channel
    >
    > - `ARGB`, 32-bit image with alpha channel first
    >
    > - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped
    >
    > - `RGBA_PREMULT`, 32-bit image with colors scaled by alpha channel
    >
    > - `ARGB_PREMULT`, 32-bit image with colors scaled by alpha channel, alpha channel first

    Note

    it is preferred to use [`tobytes()`](#pygame.image.tobytes "pygame.image.tobytes") as of pygame 2.1.3

    New in pygame 2.1.3: BGRA format
- name: init
  id: ref/pygame#pygame.init
  summary: Initialize all imported pygame modules
  belongs_to: module-pygame
  description: |-
    pygame.init()

    initialize all imported pygame modules

    init() -\> (numpass, numfail)

    Initialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but [`pygame.init()`](#pygame.init) is a convenient way to get everything started. The `init()` functions for individual modules will raise exceptions when they fail.

    You may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.

    It is safe to call this `init()` more than once as repeated calls will have no effect. This is true even if you have `pygame.quit()` all the modules.
- name: joystick
  id: ref/joystick
  summary: pygame.joystick Pygame module for interacting with joysticks, gamepads, and trackballs
  description: "pygame.joystick  \nPygame module for interacting with joysticks, gamepads, and trackballs.\n\nThe joystick module manages the joystick devices on a computer. Joystick devices include trackballs and video-game-style gamepads, and the module allows the use of multiple buttons and \"hats\". Computers may manage multiple joysticks at a time.\n\nEach instance of the Joystick class represents one gaming device plugged into the computer. If a gaming pad has multiple joysticks on it, then the joystick object can actually represent multiple joysticks on that single game device.\n\nFor a quick way to initialise the joystick module and get a list of Joystick instances use the following code:\n\n``` python\npygame.joystick.init()\njoysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]\n```\n\nThe following event types will be generated by the joysticks\n\n``` python\nJOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION\n```\n\nAnd in pygame 2, which supports hotplugging:\n\n``` python\nJOYDEVICEADDED JOYDEVICEREMOVED\n```\n\nNote that in pygame 2, joysticks events use a unique \"instance ID\". The device index passed in the constructor to a Joystick object is not unique after devices have been added and removed. You must call [`Joystick.get_instance_id()`](#pygame.joystick.Joystick.get_instance_id \"pygame.joystick.Joystick.get_instance_id\") to find the instance ID that was assigned to a Joystick on opening.\n\nThe event queue needs to be pumped frequently for some of the methods to work. So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.\n\nTo be able to get joystick events and update the joystick objects while the window is not in focus, you may set the `SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS` environment variable. See [environment variables](pygame#environment-variables) for more details.\n\npygame.joystick.init()  \nInitialize the joystick module.\n\ninit() -\\> None\n\nThis function is called automatically by `pygame.init()`.\n\nIt initializes the joystick module. The module must be initialized before any other functions will work.\n\nIt is safe to call this function more than once.\n\npygame.joystick.quit()  \nUninitialize the joystick module.\n\nquit() -\\> None\n\nUninitialize the joystick module. After you call this any existing joystick objects will no longer work.\n\nIt is safe to call this function more than once.\n\npygame.joystick.get_init()  \nReturns True if the joystick module is initialized.\n\nget_init() -\\> bool\n\nTest if the `pygame.joystick.init()` function has been called.\n\npygame.joystick.get_count()  \nReturns the number of joysticks.\n\nget_count() -\\> count\n\nReturn the number of joystick devices on the system. The count will be `0` if there are no joysticks on the system.\n\nWhen you create Joystick objects using `Joystick(id)`, you pass an integer that must be lower than this count.\n\npygame.joystick.Joystick  \nCreate a new Joystick object.\n\nJoystick(id) -\\> Joystick\n\nCreate a new joystick to access a physical device. The id argument must be a value from `0` to `pygame.joystick.get_count()`` ``-`` ``1`.\n\nJoysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.\n\nChanged in pygame 2.0.0: Joystick objects are now opened immediately on creation.\n\ninit()  \ninitialize the Joystick\n\ninit() -\\> None\n\nInitialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.\n\nDeprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1.\n\nquit()  \nuninitialize the Joystick\n\nquit() -\\> None\n\nClose a Joystick object. After this the pygame event queue will no longer receive events from the device.\n\nIt is safe to call this more than once.\n\nget_init()  \ncheck if the Joystick is initialized\n\nget_init() -\\> bool\n\nReturn True if the Joystick object is currently initialised.\n\nget_id()  \nget the device index (deprecated)\n\nget_id() -\\> int\n\nReturns the original device index for this device. This is the same value that was passed to the `Joystick()` constructor. This method can safely be called while the Joystick is not initialized.\n\nDeprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use [`get_instance_id()`](#pygame.joystick.Joystick.get_instance_id \"pygame.joystick.Joystick.get_instance_id\") instead. Will be removed in Pygame 2.1.\n\nget_instance_id() → int  \nget the joystick instance id\n\nget_instance_id() -\\> int\n\nGet the joystick instance ID. This matches the `instance_id` field that is given in joystick events.\n\nNew in pygame 2.0.0dev11.\n\nget_guid() → str  \nget the joystick GUID\n\nget_guid() -\\> str\n\nGet the GUID string. This identifies the exact hardware of the joystick device.\n\nNew in pygame 2.0.0dev11.\n\nget_power_level() → str  \nget the approximate power status of the device\n\nget_power_level() -\\> str\n\nGet a string giving the power status of the device.\n\nOne of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.\n\nNew in pygame 2.0.0dev11.\n\nget_name()  \nget the Joystick system name\n\nget_name() -\\> string\n\nReturns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized.\n\nget_numaxes()  \nget the number of axes on a Joystick\n\nget_numaxes() -\\> int\n\nReturns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.\n\nThe `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A value of `0.0` means the axis is centered. Gamepad devices will usually be `-1`, `0`, or `1` with no values in between. Older analog joystick axes will not always use the full `-1` to `1` range, and the centered value will be some area around `0`.\n\nAnalog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events.\n\nget_axis()  \nget the current position of an axis\n\nget_axis(axis_number) -\\> float\n\nReturns the current position of a joystick axis. The value will range from `-1` to `1` with a value of `0` being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at `0` or using the full range of position values.\n\nThe axis number must be an integer from `0` to `get_numaxes()`` ``-`` ``1`.\n\nWhen using gamepads both the control sticks and the analog triggers are usually reported as axes.\n\nget_numballs()  \nget the number of trackballs on a Joystick\n\nget_numballs() -\\> int\n\nReturns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.\n\nThe `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It will report the amount of movement on the trackball.\n\nget_ball()  \nget the relative position of a trackball\n\nget_ball(ball_number) -\\> x, y\n\nReturns the relative movement of a joystick button. The value is a `x,`` ``y` pair holding the relative movement since the last call to get_ball.\n\nThe ball number must be an integer from `0` to `get_numballs()`` ``-`` ``1`.\n\nget_numbuttons()  \nget the number of buttons on a Joystick\n\nget_numbuttons() -\\> int\n\nReturns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.\n\nButtons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when they are pressed and released.\n\nget_button()  \nget the current button state\n\nget_button(button) -\\> bool\n\nReturns the current state of a joystick button.\n\nget_numhats()  \nget the number of hat controls on a Joystick\n\nget_numhats() -\\> int\n\nReturns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.\n\nThe `pygame.JOYHATMOTION` event is generated when the hat changes position. The `position` attribute for the event contains a pair of values that are either `-1`, `0`, or `1`. A position of `(0,`` ``0)` means the hat is centered.\n\nget_hat()  \nget the position of a joystick hat\n\nget_hat(hat_number) -\\> x, y\n\nReturns the current position of a position hat. The position is given as two values representing the `x` and `y` position for the hat. `(0,`` ``0)` means centered. A value of `-1` means left/down and a value of `1` means right/up: so `(-1,`` ``0)` means left; `(1,`` ``0)` means right; `(0,`` ``1)` means up; `(1,`` ``1)` means upper-right; etc.\n\nThis value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but never in-between.\n\nThe hat number must be between `0` and `get_numhats()`` ``-`` ``1`.\n\nrumble()  \nStart a rumbling effect\n\nrumble(low_frequency, high_frequency, duration) -\\> bool\n\nStart a rumble effect on the joystick, with the specified strength ranging from 0 to 1. Duration is length of the effect, in ms. Setting the duration to 0 will play the effect until another one overwrites it or [`Joystick.stop_rumble()`](#pygame.joystick.Joystick.stop_rumble \"pygame.joystick.Joystick.stop_rumble\") is called. If an effect is already playing, then it will be overwritten.\n\nReturns True if the rumble was played successfully or False if the joystick does not support it or [`pygame.version.SDL()`](pygame#pygame.version.SDL) is below 2.0.9.\n\nNew in pygame 2.0.2.\n\nstop_rumble()  \nStop any rumble effect playing\n\nstop_rumble() -\\> None\n\nStops any rumble effect playing on the joystick. See [`Joystick.rumble()`](#pygame.joystick.Joystick.rumble \"pygame.joystick.Joystick.rumble\") for more information.\n\nNew in pygame 2.0.2.\n\n[](https://www.pygame.org/docs/_images/joystick_calls.png)\nExample code for joystick module.\n\n``` python\nimport pygame\n\npygame.init()\n\n\n# This is a simple class that will help us print to the screen.\n# It has nothing to do with the joysticks, just outputting the\n# information.\nclass TextPrint:\n    def __init__(self):\n        self.reset()\n        self.font = pygame.font.Font(None, 25)\n\n    def tprint(self, screen, text):\n        text_bitmap = self.font.render(text, True, (0, 0, 0))\n        screen.blit(text_bitmap, (self.x, self.y))\n        self.y += self.line_height\n\n    def reset(self):\n        self.x = 10\n        self.y = 10\n        self.line_height = 15\n\n    def indent(self):\n        self.x += 10\n\n    def unindent(self):\n        self.x -= 10\n\n\ndef main():\n    # Set the width and height of the screen (width, height), and name the window.\n    screen = pygame.display.set_mode((500, 700))\n    pygame.display.set_caption(\"Joystick example\")\n\n    # Used to manage how fast the screen updates.\n    clock = pygame.time.Clock()\n\n    # Get ready to print.\n    text_print = TextPrint()\n\n    # This dict can be left as-is, since pygame will generate a\n    # pygame.JOYDEVICEADDED event for every joystick connected\n    # at the start of the program.\n    joysticks = {}\n\n    done = False\n    while not done:\n        # Event processing step.\n        # Possible joystick events: JOYAXISMOTION, JOYBALLMOTION, JOYBUTTONDOWN,\n        # JOYBUTTONUP, JOYHATMOTION, JOYDEVICEADDED, JOYDEVICEREMOVED\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                done = True  # Flag that we are done so we exit this loop.\n\n            if event.type == pygame.JOYBUTTONDOWN:\n                print(\"Joystick button pressed.\")\n                if event.button == 0:\n                    joystick = joysticks[event.instance_id]\n                    if joystick.rumble(0, 0.7, 500):\n                        print(f\"Rumble effect played on joystick {event.instance_id}\")\n\n            if event.type == pygame.JOYBUTTONUP:\n                print(\"Joystick button released.\")\n\n            # Handle hotplugging\n            if event.type == pygame.JOYDEVICEADDED:\n                # This event will be generated when the program starts for every\n                # joystick, filling up the list without needing to create them manually.\n                joy = pygame.joystick.Joystick(event.device_index)\n                joysticks[joy.get_instance_id()] = joy\n                print(f\"Joystick {joy.get_instance_id()} connencted\")\n\n            if event.type == pygame.JOYDEVICEREMOVED:\n                del joysticks[event.instance_id]\n                print(f\"Joystick {event.instance_id} disconnected\")\n\n        # Drawing step\n        # First, clear the screen to white. Don't put other drawing commands\n        # above this, or they will be erased with this command.\n        screen.fill((255, 255, 255))\n        text_print.reset()\n\n        # Get count of joysticks.\n        joystick_count = pygame.joystick.get_count()\n\n        text_print.tprint(screen, f\"Number of joysticks: {joystick_count}\")\n        text_print.indent()\n\n        # For each joystick:\n        for joystick in joysticks.values():\n            jid = joystick.get_instance_id()\n\n            text_print.tprint(screen, f\"Joystick {jid}\")\n            text_print.indent()\n\n            # Get the name from the OS for the controller/joystick.\n            name = joystick.get_name()\n            text_print.tprint(screen, f\"Joystick name: {name}\")\n\n            guid = joystick.get_guid()\n            text_print.tprint(screen, f\"GUID: {guid}\")\n\n            power_level = joystick.get_power_level()\n            text_print.tprint(screen, f\"Joystick's power level: {power_level}\")\n\n            # Usually axis run in pairs, up/down for one, and left/right for\n            # the other. Triggers count as axes.\n            axes = joystick.get_numaxes()\n            text_print.tprint(screen, f\"Number of axes: {axes}\")\n            text_print.indent()\n\n            for i in range(axes):\n                axis = joystick.get_axis(i)\n                text_print.tprint(screen, f\"Axis {i} value: {axis:>6.3f}\")\n            text_print.unindent()\n\n            buttons = joystick.get_numbuttons()\n            text_print.tprint(screen, f\"Number of buttons: {buttons}\")\n            text_print.indent()\n\n            for i in range(buttons):\n                button = joystick.get_button(i)\n                text_print.tprint(screen, f\"Button {i:>2} value: {button}\")\n            text_print.unindent()\n\n            hats = joystick.get_numhats()\n            text_print.tprint(screen, f\"Number of hats: {hats}\")\n            text_print.indent()\n\n            # Hat position. All or nothing for direction, not a float like\n            # get_axis(). Position is a tuple of int values (x, y).\n            for i in range(hats):\n                hat = joystick.get_hat(i)\n                text_print.tprint(screen, f\"Hat {i} value: {str(hat)}\")\n            text_print.unindent()\n\n            text_print.unindent()\n\n        # Go ahead and update the screen with what we've drawn.\n        pygame.display.flip()\n\n        # Limit to 30 frames per second.\n        clock.tick(30)\n\n\nif __name__ == \"__main__\":\n    main()\n    # If you forget this line, the program will 'hang'\n    # on exit if running from IDLE.\n    pygame.quit()\n```\n\nController mappings are drawn from the underlying SDL library which pygame uses and they differ between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.\n\nAxis and hat mappings are listed from -1 to +1.\n\n## Nintendo Switch Left Joy-Con (pygame 2.x)\n\nThe Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change. The controller is recognized as \"Wireless Gamepad\"\n\n- **Buttons**:\n\n  ``` python\n  D-pad Up        - Button 0\n  D-pad Down      - Button 1\n  D-pad Left      - Button 2\n  D-pad Right     - Button 3\n  SL              - Button 4\n  SR              - Button 5\n  -               - Button 8\n  Stick In        - Button 10\n  Capture         - Button 13\n  L               - Button 14\n  ZL              - Button 15\n  ```\n\n- **Hat/JoyStick**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Nintendo Switch Right Joy-Con (pygame 2.x)\n\nThe Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change. The controller is recognized as \"Wireless Gamepad\"\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  SL              - Button 4\n  SR              - Button 5\n  +               - Button 9\n  Stick In        - Button 11\n  Home            - Button 12\n  R               - Button 14\n  ZR              - Button 15\n  ```\n\n- **Hat/JoyStick**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Nintendo Switch Pro Controller (pygame 2.x)\n\nThe Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats. The controller is recognized as \"Nintendo Switch Pro Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up -> Down      - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up -> Down      - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  - Button        - Button 4\n  Home Button     - Button 5\n  + Button        - Button 6\n  L. Stick In     - Button 7\n  R. Stick In     - Button 8\n  Left Bumper     - Button 9\n  Right Bumper    - Button 10\n  D-pad Up        - Button 11\n  D-pad Down      - Button 12\n  D-pad Left      - Button 13\n  D-pad Right     - Button 14\n  Capture Button  - Button 15\n  ```\n\n## XBox 360 Controller (pygame 2.x)\n\nThe Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat. The controller is recognized as \"Xbox 360 Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 3\n  Up   -> Down    - Axis 4\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 2\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  Back Button     - Button 6\n  Start Button    - Button 7\n  L. Stick In     - Button 8\n  R. Stick In     - Button 9\n  Guide Button    - Button 10\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Playstation 4 Controller (pygame 2.x)\n\nThe PlayStation 4 controller mapping has 6 axes and 16 buttons. The controller is recognized as \"PS4 Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  Cross Button    - Button 0\n  Circle Button   - Button 1\n  Square Button   - Button 2\n  Triangle Button - Button 3\n  Share Button    - Button 4\n  PS Button       - Button 5\n  Options Button  - Button 6\n  L. Stick In     - Button 7\n  R. Stick In     - Button 8\n  Left Bumper     - Button 9\n  Right Bumper    - Button 10\n  D-pad Up        - Button 11\n  D-pad Down      - Button 12\n  D-pad Left      - Button 13\n  D-pad Right     - Button 14\n  Touch Pad Click - Button 15\n  ```\n\n## XBox 360 Controller (pygame 1.x)\n\nThe Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat. The controller is recognized as \"Controller (XBOX 360 For Windows)\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 4\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger & Right Trigger**:\n\n  ``` python\n  RT -> LT        - Axis 2\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  Back Button     - Button 6\n  Start Button    - Button 7\n  L. Stick In     - Button 8\n  R. Stick In     - Button 9\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Playstation 4 Controller (pygame 1.x)\n\nThe PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat. The controller is recognized as \"Wireless Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Buttons**:\n\n  ``` python\n  Cross Button    - Button 0\n  Circle Button   - Button 1\n  Square Button   - Button 2\n  Triangle Button - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  L. Trigger(Full)- Button 6\n  R. Trigger(Full)- Button 7\n  Share Button    - Button 8\n  Options Button  - Button 9\n  L. Stick In     - Button 10\n  R. Stick In     - Button 11\n  PS Button       - Button 12\n  Touch Pad Click - Button 13\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/joystick.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/joystick.html](https://www.pygame.org/docs/ref/joystick.html)"
- name: joystick.get_count
  id: ref/joystick#pygame.joystick.get_count
  summary: Returns the number of joysticks
  belongs_to: joystick
  description: |-
    pygame.joystick.get_count()

    Returns the number of joysticks.

    get_count() -\> count

    Return the number of joystick devices on the system. The count will be `0` if there are no joysticks on the system.

    When you create Joystick objects using `Joystick(id)`, you pass an integer that must be lower than this count.
- name: joystick.get_init
  id: ref/joystick#pygame.joystick.get_init
  summary: Returns True if the joystick module is initialized
  belongs_to: joystick
  description: |-
    pygame.joystick.get_init()

    Returns True if the joystick module is initialized.

    get_init() -\> bool

    Test if the `pygame.joystick.init()` function has been called.
- name: joystick.init
  id: ref/joystick#pygame.joystick.init
  summary: Initialize the joystick module
  belongs_to: joystick
  description: |-
    pygame.joystick.init()

    Initialize the joystick module.

    init() -\> None

    This function is called automatically by `pygame.init()`.

    It initializes the joystick module. The module must be initialized before any other functions will work.

    It is safe to call this function more than once.
- name: joystick.Joystick
  id: ref/joystick#pygame.joystick.Joystick
  summary: Create a new Joystick object
  belongs_to: joystick
  description: |-
    pygame.joystick.Joystick

    Create a new Joystick object.

    Joystick(id) -\> Joystick

    Create a new joystick to access a physical device. The id argument must be a value from `0` to `pygame.joystick.get_count()``-``1`.

    Joysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.

    Changed in pygame 2.0.0: Joystick objects are now opened immediately on creation.
- name: joystick.Joystick.get_axis
  id: ref/joystick#pygame.joystick.Joystick.get_axis
  summary: Returns the current position of a joystick axis
  belongs_to: joystick
  description: |-
    get_axis()

    get the current position of an axis

    get_axis(axis_number) -\> float

    Returns the current position of a joystick axis. The value will range from `-1` to `1` with a value of `0` being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at `0` or using the full range of position values.

    The axis number must be an integer from `0` to `get_numaxes()``-``1`.

    When using gamepads both the control sticks and the analog triggers are usually reported as axes.
- name: joystick.Joystick.get_ball
  id: ref/joystick#pygame.joystick.Joystick.get_ball
  summary: Returns the relative movement of a joystick button
  belongs_to: joystick
  description: |-
    get_ball()

    get the relative position of a trackball

    get_ball(ball_number) -\> x, y

    Returns the relative movement of a joystick button. The value is a `x,``y` pair holding the relative movement since the last call to get_ball.

    The ball number must be an integer from `0` to `get_numballs()``-``1`.
- name: joystick.Joystick.get_button
  id: ref/joystick#pygame.joystick.Joystick.get_button
  summary: Returns the current state of a joystick button
  belongs_to: joystick
  description: |-
    get_button()

    get the current button state

    get_button(button) -\> bool

    Returns the current state of a joystick button.
- name: joystick.Joystick.get_guid
  id: ref/joystick#pygame.joystick.Joystick.get_guid
  summary: Get the GUID string
  belongs_to: joystick
  description: |-
    get_guid() → str

    get the joystick GUID

    get_guid() -\> str

    Get the GUID string. This identifies the exact hardware of the joystick device.

    New in pygame 2.0.0dev11.
- name: joystick.Joystick.get_hat
  id: ref/joystick#pygame.joystick.Joystick.get_hat
  summary: Returns the current position of a position hat
  belongs_to: joystick
  description: |-
    get_hat()

    get the position of a joystick hat

    get_hat(hat_number) -\> x, y

    Returns the current position of a position hat. The position is given as two values representing the `x` and `y` position for the hat. `(0,``0)` means centered. A value of `-1` means left/down and a value of `1` means right/up: so `(-1,``0)` means left; `(1,``0)` means right; `(0,``1)` means up; `(1,``1)` means upper-right; etc.

    This value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but never in-between.

    The hat number must be between `0` and `get_numhats()``-``1`.
- name: joystick.Joystick.get_id
  id: ref/joystick#pygame.joystick.Joystick.get_id
  summary: Returns the original device index for this device
  belongs_to: joystick
  description: |-
    get_id()

    get the device index (deprecated)

    get_id() -\> int

    Returns the original device index for this device. This is the same value that was passed to the `Joystick()` constructor. This method can safely be called while the Joystick is not initialized.

    Deprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use [`get_instance_id()`](#pygame.joystick.Joystick.get_instance_id "pygame.joystick.Joystick.get_instance_id") instead. Will be removed in Pygame 2.1.
- name: joystick.Joystick.get_init
  id: ref/joystick#pygame.joystick.Joystick.get_init
  summary: Return True if the Joystick object is currently initialised
  belongs_to: joystick
  description: |-
    get_init()

    check if the Joystick is initialized

    get_init() -\> bool

    Return True if the Joystick object is currently initialised.
- name: joystick.Joystick.get_instance_id
  id: ref/joystick#pygame.joystick.Joystick.get_instance_id
  summary: Get the joystick instance ID
  belongs_to: joystick
  description: |-
    get_instance_id() → int

    get the joystick instance id

    get_instance_id() -\> int

    Get the joystick instance ID. This matches the `instance_id` field that is given in joystick events.

    New in pygame 2.0.0dev11.
- name: joystick.Joystick.get_name
  id: ref/joystick#pygame.joystick.Joystick.get_name
  summary: Returns the system name for this joystick device
  belongs_to: joystick
  description: |-
    get_name()

    get the Joystick system name

    get_name() -\> string

    Returns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized.
- name: joystick.Joystick.get_numaxes
  id: ref/joystick#pygame.joystick.Joystick.get_numaxes
  summary: Returns the number of input axes are on a Joystick
  belongs_to: joystick
  description: |-
    get_numaxes()

    get the number of axes on a Joystick

    get_numaxes() -\> int

    Returns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.

    The `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A value of `0.0` means the axis is centered. Gamepad devices will usually be `-1`, `0`, or `1` with no values in between. Older analog joystick axes will not always use the full `-1` to `1` range, and the centered value will be some area around `0`.

    Analog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events.
- name: joystick.Joystick.get_numballs
  id: ref/joystick#pygame.joystick.Joystick.get_numballs
  summary: Returns the number of trackball devices on a Joystick
  belongs_to: joystick
  description: |-
    get_numballs()

    get the number of trackballs on a Joystick

    get_numballs() -\> int

    Returns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.

    The `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It will report the amount of movement on the trackball.
- name: joystick.Joystick.get_numbuttons
  id: ref/joystick#pygame.joystick.Joystick.get_numbuttons
  summary: Returns the number of pushable buttons on the joystick
  belongs_to: joystick
  description: |-
    get_numbuttons()

    get the number of buttons on a Joystick

    get_numbuttons() -\> int

    Returns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.

    Buttons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when they are pressed and released.
- name: joystick.Joystick.get_numhats
  id: ref/joystick#pygame.joystick.Joystick.get_numhats
  summary: Returns the number of joystick hats on a Joystick
  belongs_to: joystick
  description: |-
    get_numhats()

    get the number of hat controls on a Joystick

    get_numhats() -\> int

    Returns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.

    The `pygame.JOYHATMOTION` event is generated when the hat changes position. The `position` attribute for the event contains a pair of values that are either `-1`, `0`, or `1`. A position of `(0,``0)` means the hat is centered.
- name: joystick.Joystick.get_power_level
  id: ref/joystick#pygame.joystick.Joystick.get_power_level
  summary: Get a string giving the power status of the device
  belongs_to: joystick
  description: |-
    get_power_level() → str

    get the approximate power status of the device

    get_power_level() -\> str

    Get a string giving the power status of the device.

    One of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.

    New in pygame 2.0.0dev11.
- name: joystick.Joystick.init
  id: ref/joystick#pygame.joystick.Joystick.init
  summary: Initialize the joystick, if it has been closed
  belongs_to: joystick
  description: |-
    init()

    initialize the Joystick

    init() -\> None

    Initialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.

    Deprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1.
- name: joystick.Joystick.quit
  id: ref/joystick#pygame.joystick.Joystick.quit
  summary: Close a Joystick object
  belongs_to: joystick
  description: |-
    quit()

    uninitialize the Joystick

    quit() -\> None

    Close a Joystick object. After this the pygame event queue will no longer receive events from the device.

    It is safe to call this more than once.
- name: joystick.Joystick.rumble
  id: ref/joystick#pygame.joystick.Joystick.rumble
  summary: Start a rumble effect on the joystick, with the specified strength ranging from 0 to 1
  belongs_to: joystick
  description: |-
    rumble()

    Start a rumbling effect

    rumble(low_frequency, high_frequency, duration) -\> bool

    Start a rumble effect on the joystick, with the specified strength ranging from 0 to 1. Duration is length of the effect, in ms. Setting the duration to 0 will play the effect until another one overwrites it or [`Joystick.stop_rumble()`](#pygame.joystick.Joystick.stop_rumble "pygame.joystick.Joystick.stop_rumble") is called. If an effect is already playing, then it will be overwritten.

    Returns True if the rumble was played successfully or False if the joystick does not support it or [`pygame.version.SDL()`](pygame#pygame.version.SDL) is below 2.0.9.

    New in pygame 2.0.2.
- name: joystick.Joystick.stop_rumble
  id: ref/joystick#pygame.joystick.Joystick.stop_rumble
  summary: Stops any rumble effect playing on the joystick
  belongs_to: joystick
  description: "stop_rumble()\n\nStop any rumble effect playing\n\nstop_rumble() -\\> None\n\nStops any rumble effect playing on the joystick. See [`Joystick.rumble()`](#pygame.joystick.Joystick.rumble \"pygame.joystick.Joystick.rumble\") for more information.\n\nNew in pygame 2.0.2.\n\n[](https://www.pygame.org/docs/_images/joystick_calls.png)\n\nExample code for joystick module.\n\n``` python\nimport pygame\n\npygame.init()\n\n\n# This is a simple class that will help us print to the screen.\n# It has nothing to do with the joysticks, just outputting the\n# information.\nclass TextPrint:\n    def __init__(self):\n        self.reset()\n        self.font = pygame.font.Font(None, 25)\n\n    def tprint(self, screen, text):\n        text_bitmap = self.font.render(text, True, (0, 0, 0))\n        screen.blit(text_bitmap, (self.x, self.y))\n        self.y += self.line_height\n\n    def reset(self):\n        self.x = 10\n        self.y = 10\n        self.line_height = 15\n\n    def indent(self):\n        self.x += 10\n\n    def unindent(self):\n        self.x -= 10\n\n\ndef main():\n    # Set the width and height of the screen (width, height), and name the window.\n    screen = pygame.display.set_mode((500, 700))\n    pygame.display.set_caption(\"Joystick example\")\n\n    # Used to manage how fast the screen updates.\n    clock = pygame.time.Clock()\n\n    # Get ready to print.\n    text_print = TextPrint()\n\n    # This dict can be left as-is, since pygame will generate a\n    # pygame.JOYDEVICEADDED event for every joystick connected\n    # at the start of the program.\n    joysticks = {}\n\n    done = False\n    while not done:\n        # Event processing step.\n        # Possible joystick events: JOYAXISMOTION, JOYBALLMOTION, JOYBUTTONDOWN,\n        # JOYBUTTONUP, JOYHATMOTION, JOYDEVICEADDED, JOYDEVICEREMOVED\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                done = True  # Flag that we are done so we exit this loop.\n\n            if event.type == pygame.JOYBUTTONDOWN:\n                print(\"Joystick button pressed.\")\n                if event.button == 0:\n                    joystick = joysticks[event.instance_id]\n                    if joystick.rumble(0, 0.7, 500):\n                        print(f\"Rumble effect played on joystick {event.instance_id}\")\n\n            if event.type == pygame.JOYBUTTONUP:\n                print(\"Joystick button released.\")\n\n            # Handle hotplugging\n            if event.type == pygame.JOYDEVICEADDED:\n                # This event will be generated when the program starts for every\n                # joystick, filling up the list without needing to create them manually.\n                joy = pygame.joystick.Joystick(event.device_index)\n                joysticks[joy.get_instance_id()] = joy\n                print(f\"Joystick {joy.get_instance_id()} connencted\")\n\n            if event.type == pygame.JOYDEVICEREMOVED:\n                del joysticks[event.instance_id]\n                print(f\"Joystick {event.instance_id} disconnected\")\n\n        # Drawing step\n        # First, clear the screen to white. Don't put other drawing commands\n        # above this, or they will be erased with this command.\n        screen.fill((255, 255, 255))\n        text_print.reset()\n\n        # Get count of joysticks.\n        joystick_count = pygame.joystick.get_count()\n\n        text_print.tprint(screen, f\"Number of joysticks: {joystick_count}\")\n        text_print.indent()\n\n        # For each joystick:\n        for joystick in joysticks.values():\n            jid = joystick.get_instance_id()\n\n            text_print.tprint(screen, f\"Joystick {jid}\")\n            text_print.indent()\n\n            # Get the name from the OS for the controller/joystick.\n            name = joystick.get_name()\n            text_print.tprint(screen, f\"Joystick name: {name}\")\n\n            guid = joystick.get_guid()\n            text_print.tprint(screen, f\"GUID: {guid}\")\n\n            power_level = joystick.get_power_level()\n            text_print.tprint(screen, f\"Joystick's power level: {power_level}\")\n\n            # Usually axis run in pairs, up/down for one, and left/right for\n            # the other. Triggers count as axes.\n            axes = joystick.get_numaxes()\n            text_print.tprint(screen, f\"Number of axes: {axes}\")\n            text_print.indent()\n\n            for i in range(axes):\n                axis = joystick.get_axis(i)\n                text_print.tprint(screen, f\"Axis {i} value: {axis:>6.3f}\")\n            text_print.unindent()\n\n            buttons = joystick.get_numbuttons()\n            text_print.tprint(screen, f\"Number of buttons: {buttons}\")\n            text_print.indent()\n\n            for i in range(buttons):\n                button = joystick.get_button(i)\n                text_print.tprint(screen, f\"Button {i:>2} value: {button}\")\n            text_print.unindent()\n\n            hats = joystick.get_numhats()\n            text_print.tprint(screen, f\"Number of hats: {hats}\")\n            text_print.indent()\n\n            # Hat position. All or nothing for direction, not a float like\n            # get_axis(). Position is a tuple of int values (x, y).\n            for i in range(hats):\n                hat = joystick.get_hat(i)\n                text_print.tprint(screen, f\"Hat {i} value: {str(hat)}\")\n            text_print.unindent()\n\n            text_print.unindent()\n\n        # Go ahead and update the screen with what we've drawn.\n        pygame.display.flip()\n\n        # Limit to 30 frames per second.\n        clock.tick(30)\n\n\nif __name__ == \"__main__\":\n    main()\n    # If you forget this line, the program will 'hang'\n    # on exit if running from IDLE.\n    pygame.quit()\n```\n\nController mappings are drawn from the underlying SDL library which pygame uses and they differ between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.\n\nAxis and hat mappings are listed from -1 to +1.\n\n## Nintendo Switch Left Joy-Con (pygame 2.x)\n\nThe Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change. The controller is recognized as \"Wireless Gamepad\"\n\n- **Buttons**:\n\n  ``` python\n  D-pad Up        - Button 0\n  D-pad Down      - Button 1\n  D-pad Left      - Button 2\n  D-pad Right     - Button 3\n  SL              - Button 4\n  SR              - Button 5\n  -               - Button 8\n  Stick In        - Button 10\n  Capture         - Button 13\n  L               - Button 14\n  ZL              - Button 15\n  ```\n\n- **Hat/JoyStick**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Nintendo Switch Right Joy-Con (pygame 2.x)\n\nThe Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change. The controller is recognized as \"Wireless Gamepad\"\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  SL              - Button 4\n  SR              - Button 5\n  +               - Button 9\n  Stick In        - Button 11\n  Home            - Button 12\n  R               - Button 14\n  ZR              - Button 15\n  ```\n\n- **Hat/JoyStick**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Nintendo Switch Pro Controller (pygame 2.x)\n\nThe Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats. The controller is recognized as \"Nintendo Switch Pro Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up -> Down      - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up -> Down      - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  - Button        - Button 4\n  Home Button     - Button 5\n  + Button        - Button 6\n  L. Stick In     - Button 7\n  R. Stick In     - Button 8\n  Left Bumper     - Button 9\n  Right Bumper    - Button 10\n  D-pad Up        - Button 11\n  D-pad Down      - Button 12\n  D-pad Left      - Button 13\n  D-pad Right     - Button 14\n  Capture Button  - Button 15\n  ```\n\n## XBox 360 Controller (pygame 2.x)\n\nThe Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat. The controller is recognized as \"Xbox 360 Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 3\n  Up   -> Down    - Axis 4\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 2\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  Back Button     - Button 6\n  Start Button    - Button 7\n  L. Stick In     - Button 8\n  R. Stick In     - Button 9\n  Guide Button    - Button 10\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Playstation 4 Controller (pygame 2.x)\n\nThe PlayStation 4 controller mapping has 6 axes and 16 buttons. The controller is recognized as \"PS4 Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  Cross Button    - Button 0\n  Circle Button   - Button 1\n  Square Button   - Button 2\n  Triangle Button - Button 3\n  Share Button    - Button 4\n  PS Button       - Button 5\n  Options Button  - Button 6\n  L. Stick In     - Button 7\n  R. Stick In     - Button 8\n  Left Bumper     - Button 9\n  Right Bumper    - Button 10\n  D-pad Up        - Button 11\n  D-pad Down      - Button 12\n  D-pad Left      - Button 13\n  D-pad Right     - Button 14\n  Touch Pad Click - Button 15\n  ```\n\n## XBox 360 Controller (pygame 1.x)\n\nThe Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat. The controller is recognized as \"Controller (XBOX 360 For Windows)\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 4\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger & Right Trigger**:\n\n  ``` python\n  RT -> LT        - Axis 2\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  Back Button     - Button 6\n  Start Button    - Button 7\n  L. Stick In     - Button 8\n  R. Stick In     - Button 9\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Playstation 4 Controller (pygame 1.x)\n\nThe PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat. The controller is recognized as \"Wireless Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Buttons**:\n\n  ``` python\n  Cross Button    - Button 0\n  Circle Button   - Button 1\n  Square Button   - Button 2\n  Triangle Button - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  L. Trigger(Full)- Button 6\n  R. Trigger(Full)- Button 7\n  Share Button    - Button 8\n  Options Button  - Button 9\n  L. Stick In     - Button 10\n  R. Stick In     - Button 11\n  PS Button       - Button 12\n  Touch Pad Click - Button 13\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/joystick.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/joystick.html](https://www.pygame.org/docs/ref/joystick.html)"
- name: joystick.quit
  id: ref/joystick#pygame.joystick.quit
  summary: Uninitialize the joystick module
  belongs_to: joystick
  description: |-
    pygame.joystick.quit()

    Uninitialize the joystick module.

    quit() -\> None

    Uninitialize the joystick module. After you call this any existing joystick objects will no longer work.

    It is safe to call this function more than once.
- name: key
  id: ref/key
  summary: This module contains functions for dealing with the keyboard
  description: "pygame.key  \npygame module to work with the keyboard\n\nThis module contains functions for dealing with the keyboard.\n\nThe [`pygame.event`](event#module-pygame.event) queue gets `pygame.KEYDOWN` and `pygame.KEYUP` events when the keyboard buttons are pressed and released. Both events have `key` and `mod` attributes.\n\n> - `key`: an [integer ID](#key-constants-label) representing every key on the keyboard\n>\n> - `mod`: a bitmask of all the [modifier keys](#key-modifiers-label) that were in a pressed state when the event occurred\n\nThe `pygame.KEYDOWN` event has the additional attributes `unicode` and `scancode`.\n\n> - `unicode`: a single character string that is the fully translated character entered, this takes into account the shift and composition keys\n>\n> - `scancode`: the platform-specific key code, which could be different from keyboard to keyboard, but is useful for key selection of weird keys like the multimedia keys\n\nNew in pygame 2.0.0: The `pygame.TEXTINPUT` event is preferred to the `unicode` attribute of `pygame.KEYDOWN`. The attribute `text` contains the input.\n\nThe following is a list of all the constants (from [`pygame.locals`](locals#module-pygame.locals)) used to represent keyboard keys.\n\nPortability note: The integers for key constants differ between pygame 1 and 2. Always use key constants (`K_a`) rather than integers directly (`97`) so that your key handling code works well on both pygame 1 and pygame 2.\n\n``` python\npygame\nConstant      ASCII   Description\n---------------------------------\nK_BACKSPACE   \\b      backspace\nK_TAB         \\t      tab\nK_CLEAR               clear\nK_RETURN      \\r      return\nK_PAUSE               pause\nK_ESCAPE      ^[      escape\nK_SPACE               space\nK_EXCLAIM     !       exclaim\nK_QUOTEDBL    \"       quotedbl\nK_HASH        #       hash\nK_DOLLAR      $       dollar\nK_AMPERSAND   &       ampersand\nK_QUOTE               quote\nK_LEFTPAREN   (       left parenthesis\nK_RIGHTPAREN  )       right parenthesis\nK_ASTERISK    *       asterisk\nK_PLUS        +       plus sign\nK_COMMA       ,       comma\nK_MINUS       -       minus sign\nK_PERIOD      .       period\nK_SLASH       /       forward slash\nK_0           0       0\nK_1           1       1\nK_2           2       2\nK_3           3       3\nK_4           4       4\nK_5           5       5\nK_6           6       6\nK_7           7       7\nK_8           8       8\nK_9           9       9\nK_COLON       :       colon\nK_SEMICOLON   ;       semicolon\nK_LESS        <       less-than sign\nK_EQUALS      =       equals sign\nK_GREATER     >       greater-than sign\nK_QUESTION    ?       question mark\nK_AT          @       at\nK_LEFTBRACKET [       left bracket\nK_BACKSLASH   \\       backslash\nK_RIGHTBRACKET ]      right bracket\nK_CARET       ^       caret\nK_UNDERSCORE  _       underscore\nK_BACKQUOTE   `       grave\nK_a           a       a\nK_b           b       b\nK_c           c       c\nK_d           d       d\nK_e           e       e\nK_f           f       f\nK_g           g       g\nK_h           h       h\nK_i           i       i\nK_j           j       j\nK_k           k       k\nK_l           l       l\nK_m           m       m\nK_n           n       n\nK_o           o       o\nK_p           p       p\nK_q           q       q\nK_r           r       r\nK_s           s       s\nK_t           t       t\nK_u           u       u\nK_v           v       v\nK_w           w       w\nK_x           x       x\nK_y           y       y\nK_z           z       z\nK_DELETE              delete\nK_KP0                 keypad 0\nK_KP1                 keypad 1\nK_KP2                 keypad 2\nK_KP3                 keypad 3\nK_KP4                 keypad 4\nK_KP5                 keypad 5\nK_KP6                 keypad 6\nK_KP7                 keypad 7\nK_KP8                 keypad 8\nK_KP9                 keypad 9\nK_KP_PERIOD   .       keypad period\nK_KP_DIVIDE   /       keypad divide\nK_KP_MULTIPLY *       keypad multiply\nK_KP_MINUS    -       keypad minus\nK_KP_PLUS     +       keypad plus\nK_KP_ENTER    \\r      keypad enter\nK_KP_EQUALS   =       keypad equals\nK_UP                  up arrow\nK_DOWN                down arrow\nK_RIGHT               right arrow\nK_LEFT                left arrow\nK_INSERT              insert\nK_HOME                home\nK_END                 end\nK_PAGEUP              page up\nK_PAGEDOWN            page down\nK_F1                  F1\nK_F2                  F2\nK_F3                  F3\nK_F4                  F4\nK_F5                  F5\nK_F6                  F6\nK_F7                  F7\nK_F8                  F8\nK_F9                  F9\nK_F10                 F10\nK_F11                 F11\nK_F12                 F12\nK_F13                 F13\nK_F14                 F14\nK_F15                 F15\nK_NUMLOCK             numlock\nK_CAPSLOCK            capslock\nK_SCROLLOCK           scrollock\nK_RSHIFT              right shift\nK_LSHIFT              left shift\nK_RCTRL               right control\nK_LCTRL               left control\nK_RALT                right alt\nK_LALT                left alt\nK_RMETA               right meta\nK_LMETA               left meta\nK_LSUPER              left Windows key\nK_RSUPER              right Windows key\nK_MODE                mode shift\nK_HELP                help\nK_PRINT               print screen\nK_SYSREQ              sysrq\nK_BREAK               break\nK_MENU                menu\nK_POWER               power\nK_EURO                Euro\nK_AC_BACK             Android back button\n```\n\nThe keyboard also has a list of modifier states (from [`pygame.locals`](locals#module-pygame.locals)) that can be assembled by bitwise-ORing them together.\n\n``` python\npygame\nConstant      Description\n-------------------------\nKMOD_NONE     no modifier keys pressed\nKMOD_LSHIFT   left shift\nKMOD_RSHIFT   right shift\nKMOD_SHIFT    left shift or right shift or both\nKMOD_LCTRL    left control\nKMOD_RCTRL    right control\nKMOD_CTRL     left control or right control or both\nKMOD_LALT     left alt\nKMOD_RALT     right alt\nKMOD_ALT      left alt or right alt or both\nKMOD_LMETA    left meta\nKMOD_RMETA    right meta\nKMOD_META     left meta or right meta or both\nKMOD_CAPS     caps lock\nKMOD_NUM      num lock\nKMOD_MODE     AltGr\n```\n\nThe modifier information is contained in the `mod` attribute of the `pygame.KEYDOWN` and `pygame.KEYUP` events. The `mod` attribute is a bitmask of all the modifier keys that were in a pressed state when the event occurred. The modifier information can be decoded using a bitwise AND (except for `KMOD_NONE`, which should be compared using equals `==`). For example:\n\n``` python\nfor event in pygame.event.get():\n    if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:\n        if event.mod == pygame.KMOD_NONE:\n            print('No modifier keys were in a pressed state when this '\n                  'event occurred.')\n        else:\n            if event.mod & pygame.KMOD_LSHIFT:\n                print('Left shift was in a pressed state when this event '\n                      'occurred.')\n            if event.mod & pygame.KMOD_RSHIFT:\n                print('Right shift was in a pressed state when this event '\n                      'occurred.')\n            if event.mod & pygame.KMOD_SHIFT:\n                print('Left shift or right shift or both were in a '\n                      'pressed state when this event occurred.')\n```\n\npygame.key.get_focused()  \ntrue if the display is receiving keyboard input from the system\n\nget_focused() -\\> bool\n\nReturns `True` when the display window has keyboard focus from the system. If the display needs to ensure it does not lose keyboard focus, it can use [`pygame.event.set_grab()`](event#pygame.event.set_grab) to grab all input.\n\npygame.key.get_pressed()  \nget the state of all keyboard buttons\n\nget_pressed() -\\> bools\n\nReturns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A `True` value means that the button is pressed.\n\nNote\n\nGetting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to `pygame.key.get_pressed()`. There is also no way to translate these pushed keys into a fully translated character value. See the `pygame.KEYDOWN` events on the [`pygame.event`](event#module-pygame.event) queue for this functionality.\n\nNew in pygame 2.2.0: The collection of bools returned by `get_pressed` can not be iterated over because the indexes of the internal tuple does not correpsond to the keycodes.\n\npygame.key.get_mods()  \ndetermine which modifier keys are being held\n\nget_mods() -\\> int\n\nReturns a single integer representing a bitmask of all the modifier keys being held. Using bitwise operators you can test if specific [modifier keys](#key-modifiers-label) are pressed.\n\npygame.key.set_mods()  \ntemporarily set which modifier keys are pressed\n\nset_mods(int) -\\> None\n\nCreate a bitmask of the [modifier key constants](#key-modifiers-label) you want to impose on your program.\n\npygame.key.set_repeat()  \ncontrol how held keys are repeated\n\nset_repeat() -\\> None\n\nset_repeat(delay) -\\> None\n\nset_repeat(delay, interval) -\\> None\n\nWhen the keyboard repeat is enabled, keys that are held down will generate multiple `pygame.KEYDOWN` events. The `delay` parameter is the number of milliseconds before the first repeated `pygame.KEYDOWN` event will be sent. After that, another `pygame.KEYDOWN` event will be sent every `interval` milliseconds. If a `delay` value is provided and an `interval` value is not provided or is 0, then the `interval` will be set to the same value as `delay`.\n\nTo disable key repeat call this function with no arguments or with `delay` set to 0.\n\nWhen pygame is initialized the key repeat is disabled.\n\nRaises  \n**ValueError** -- if `delay` or `interval` is \\< 0\n\nChanged in pygame 2.0.0: A `ValueError` is now raised (instead of a `pygame.error`) if `delay` or `interval` is \\< 0.\n\npygame.key.get_repeat()  \nsee how held keys are repeated\n\nget_repeat() -\\> (delay, interval)\n\nGet the `delay` and `interval` keyboard repeat values. Refer to [`pygame.key.set_repeat()`](#pygame.key.set_repeat) for a description of these values.\n\nNew in pygame 1.8.\n\npygame.key.name()  \nget the name of a key identifier\n\nname(key, use_compat=True) -\\> str\n\nGet the descriptive name of the button from a keyboard button id constant. Returns an empty string (`\"\"`) if the key is not found.\n\nIf `use_compat` argument is `True` (which is the default), this function returns the legacy name of a key where applicable. The return value is expected to be the same across different pygame versions (provided the corresponding key constant exists and is unique). If the return value is passed to the `key_code` function, the original constant will be returned.\n\n**Experimental:** `use_compat` paramater still in development for testing and feedback. It may change. [Please leave use_compat feedback with authors](https://github.com/pygame/pygame/pull/3312)\n\nIf this argument is `False`, the returned name may be prettier to display and may cover a wider range of keys than with `use_compat`, but there are no guarantees that this name will be the same across different pygame versions. If the name returned is passed to the `key_code` function, the original constant is returned back (this is an implementation detail which may change later, do not rely on this)\n\nChanged in pygame 2.1.3: Added `use_compat` argument and guaranteed API stability for it\n\npygame.key.key_code()  \nget the key identifier from a key name\n\nkey_code(name=string) -\\> int\n\nGet the key identifier code from the descriptive name of the key. This returns an integer matching one of the K\\_\\* keycodes. For example:\n\n``` python\n>>> pygame.key.key_code(\"return\") == pygame.K_RETURN\nTrue\n>>> pygame.key.key_code(\"0\") == pygame.K_0\nTrue\n>>> pygame.key.key_code(\"space\") == pygame.K_SPACE\nTrue\n```\n\nRaises  \n**ValueError** -- if the key name is not known.\n\nNew in pygame 2.0.0.\n\npygame.key.start_text_input()  \nstart handling Unicode text input events\n\nstart_text_input() -\\> None\n\nStart receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events. If applicable, show the on-screen keyboard or IME editor.\n\nFor many languages, key presses will automatically generate a corresponding `pygame.TEXTINPUT` event. Special keys like escape or function keys, and certain key combinations will not generate `pygame.TEXTINPUT` events.\n\nIn other languages, entering a single symbol may require multiple key presses, or a language-specific user interface. In this case, `pygame.TEXTINPUT` events are preferable to `pygame.KEYDOWN` events for text input.\n\nA `pygame.TEXTEDITING` event is received when an IME composition is started or changed. It contains the composition `text`, `length`, and editing `start` position within the composition (attributes `text`, `length`, and `start`, respectively). When the composition is committed (or non-IME input is received), a `pygame.TEXTINPUT` event is generated.\n\nText input events handling is on by default.\n\nNew in pygame 2.0.0.\n\npygame.key.stop_text_input()  \nstop handling Unicode text input events\n\nstop_text_input() -\\> None\n\nStop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events. If an on-screen keyboard or IME editor was shown with `pygame.key.start_text_input()`, hide it again.\n\nText input events handling is on by default.\n\nTo avoid triggering the IME editor or the on-screen keyboard when the user is holding down a key during gameplay, text input should be disabled once text entry is finished, or when the user clicks outside of a text box.\n\nNew in pygame 2.0.0.\n\npygame.key.set_text_input_rect()  \ncontrols the position of the candidate list\n\nset_text_input_rect(Rect) -\\> None\n\nThis sets the rectangle used for typing with an IME. It controls where the candidate list will open, if supported.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/key.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/key.html](https://www.pygame.org/docs/ref/key.html)"
- name: key.get_focused
  id: ref/key#pygame.key.get_focused
  summary: Returns True when the display window has keyboard focus from the system
  belongs_to: key
  description: |-
    pygame.key.get_focused()

    true if the display is receiving keyboard input from the system

    get_focused() -\> bool

    Returns `True` when the display window has keyboard focus from the system. If the display needs to ensure it does not lose keyboard focus, it can use [`pygame.event.set_grab()`](event#pygame.event.set_grab) to grab all input.
- name: key.get_mods
  id: ref/key#pygame.key.get_mods
  summary: Returns a single integer representing a bitmask of all the modifier keys being held
  belongs_to: key
  description: |-
    pygame.key.get_mods()

    determine which modifier keys are being held

    get_mods() -\> int

    Returns a single integer representing a bitmask of all the modifier keys being held. Using bitwise operators you can test if specific [modifier keys](#key-modifiers-label) are pressed.
- name: key.get_pressed
  id: ref/key#pygame.key.get_pressed
  summary: Returns a sequence of boolean values representing the state of every key on the keyboard
  belongs_to: key
  description: |-
    pygame.key.get_pressed()

    get the state of all keyboard buttons

    get_pressed() -\> bools

    Returns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A `True` value means that the button is pressed.

    Note

    Getting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to `pygame.key.get_pressed()`. There is also no way to translate these pushed keys into a fully translated character value. See the `pygame.KEYDOWN` events on the [`pygame.event`](event#module-pygame.event) queue for this functionality.

    New in pygame 2.2.0: The collection of bools returned by `get_pressed` can not be iterated over because the indexes of the internal tuple does not correpsond to the keycodes.
- name: key.get_repeat
  id: ref/key#pygame.key.get_repeat
  summary: Get the delay and interval keyboard repeat values
  belongs_to: key
  description: |-
    pygame.key.get_repeat()

    see how held keys are repeated

    get_repeat() -\> (delay, interval)

    Get the `delay` and `interval` keyboard repeat values. Refer to [`pygame.key.set_repeat()`](#pygame.key.set_repeat) for a description of these values.

    New in pygame 1.8.
- name: key.key_code
  id: ref/key#pygame.key.key_code
  summary: Get the key identifier code from the descriptive name of the key
  belongs_to: key
  description: |-
    pygame.key.key_code()

    get the key identifier from a key name

    key_code(name=string) -\> int

    Get the key identifier code from the descriptive name of the key. This returns an integer matching one of the K\_\* keycodes. For example:

    ``` python
    >>> pygame.key.key_code("return") == pygame.K_RETURN
    True
    >>> pygame.key.key_code("0") == pygame.K_0
    True
    >>> pygame.key.key_code("space") == pygame.K_SPACE
    True
    ```

    Raises

    **ValueError** -- if the key name is not known.

    New in pygame 2.0.0.
- name: key.name
  id: ref/key#pygame.key.name
  summary: Get the descriptive name of the button from a keyboard button id constant
  belongs_to: key
  description: |-
    pygame.key.name()

    get the name of a key identifier

    name(key, use_compat=True) -\> str

    Get the descriptive name of the button from a keyboard button id constant. Returns an empty string (`""`) if the key is not found.

    If `use_compat` argument is `True` (which is the default), this function returns the legacy name of a key where applicable. The return value is expected to be the same across different pygame versions (provided the corresponding key constant exists and is unique). If the return value is passed to the `key_code` function, the original constant will be returned.

    **Experimental:**`use_compat` paramater still in development for testing and feedback. It may change. [Please leave use_compat feedback with authors](https://github.com/pygame/pygame/pull/3312)

    If this argument is `False`, the returned name may be prettier to display and may cover a wider range of keys than with `use_compat`, but there are no guarantees that this name will be the same across different pygame versions. If the name returned is passed to the `key_code` function, the original constant is returned back (this is an implementation detail which may change later, do not rely on this)

    Changed in pygame 2.1.3: Added `use_compat` argument and guaranteed API stability for it
- name: key.set_mods
  id: ref/key#pygame.key.set_mods
  summary: Create a bitmask of the modifier key constants you want to impose on your program
  belongs_to: key
  description: |-
    pygame.key.set_mods()

    temporarily set which modifier keys are pressed

    set_mods(int) -\> None

    Create a bitmask of the [modifier key constants](#key-modifiers-label) you want to impose on your program.
- name: key.set_repeat
  id: ref/key#pygame.key.set_repeat
  summary: When the keyboard repeat is enabled, keys that are held down will generate multiple pygame.KEYDOWN events
  belongs_to: key
  description: |-
    pygame.key.set_repeat()

    control how held keys are repeated

    set_repeat() -\> None

    set_repeat(delay) -\> None

    set_repeat(delay, interval) -\> None

    When the keyboard repeat is enabled, keys that are held down will generate multiple `pygame.KEYDOWN` events. The `delay` parameter is the number of milliseconds before the first repeated `pygame.KEYDOWN` event will be sent. After that, another `pygame.KEYDOWN` event will be sent every `interval` milliseconds. If a `delay` value is provided and an `interval` value is not provided or is 0, then the `interval` will be set to the same value as `delay`.

    To disable key repeat call this function with no arguments or with `delay` set to 0.

    When pygame is initialized the key repeat is disabled.

    Raises

    **ValueError** -- if `delay` or `interval` is \< 0

    Changed in pygame 2.0.0: A `ValueError` is now raised (instead of a `pygame.error`) if `delay` or `interval` is \< 0.
- name: key.set_text_input_rect
  id: ref/key#pygame.key.set_text_input_rect
  summary: This sets the rectangle used for typing with an IME
  belongs_to: key
  description: "pygame.key.set_text_input_rect()\n\ncontrols the position of the candidate list\n\nset_text_input_rect(Rect) -\\> None\n\nThis sets the rectangle used for typing with an IME. It controls where the candidate list will open, if supported.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/key.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/key.html](https://www.pygame.org/docs/ref/key.html)"
- name: key.start_text_input
  id: ref/key#pygame.key.start_text_input
  summary: Start receiving pygame.TEXTEDITING and pygame.TEXTINPUT events
  belongs_to: key
  description: |-
    pygame.key.start_text_input()

    start handling Unicode text input events

    start_text_input() -\> None

    Start receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events. If applicable, show the on-screen keyboard or IME editor.

    For many languages, key presses will automatically generate a corresponding `pygame.TEXTINPUT` event. Special keys like escape or function keys, and certain key combinations will not generate `pygame.TEXTINPUT` events.

    In other languages, entering a single symbol may require multiple key presses, or a language-specific user interface. In this case, `pygame.TEXTINPUT` events are preferable to `pygame.KEYDOWN` events for text input.

    A `pygame.TEXTEDITING` event is received when an IME composition is started or changed. It contains the composition `text`, `length`, and editing `start` position within the composition (attributes `text`, `length`, and `start`, respectively). When the composition is committed (or non-IME input is received), a `pygame.TEXTINPUT` event is generated.

    Text input events handling is on by default.

    New in pygame 2.0.0.
- name: key.stop_text_input
  id: ref/key#pygame.key.stop_text_input
  summary: Stop receiving pygame.TEXTEDITING and pygame.TEXTINPUT events
  belongs_to: key
  description: |-
    pygame.key.stop_text_input()

    stop handling Unicode text input events

    stop_text_input() -\> None

    Stop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events. If an on-screen keyboard or IME editor was shown with `pygame.key.start_text_input()`, hide it again.

    Text input events handling is on by default.

    To avoid triggering the IME editor or the on-screen keyboard when the user is holding down a key during gameplay, text input should be disabled once text entry is finished, or when the user clicks outside of a text box.

    New in pygame 2.0.0.
- name: locals
  id: ref/locals
  summary: This module contains various constants used by pygame
  description: "pygame.locals  \npygame constants\n\nThis module contains various constants used by pygame. Its contents are automatically placed in the pygame module namespace. However, an application can use `pygame.locals` to include only the pygame constants with a `from`` ``pygame.locals`` ``import`` ``*`.\n\nDetailed descriptions of the various constants can be found throughout the pygame documentation. Here are the locations of some of them.\n\n> - The [`pygame.display`](display#module-pygame.display) module contains flags like `FULLSCREEN` used by [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n>\n> - The [`pygame.event`](event#module-pygame.event) module contains the various event types.\n>\n> - The [`pygame.key`](key#module-pygame.key) module lists the keyboard constants and modifiers (`K_`\\* and `MOD_`\\*) relating to the `key` and `mod` attributes of the `KEYDOWN` and `KEYUP` events.\n>\n> - The [`pygame.time`](time#module-pygame.time) module defines `TIMER_RESOLUTION`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/locals.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/locals.html](https://www.pygame.org/docs/ref/locals.html)"
- name: mask
  id: ref/mask
  summary: pygame.mask pygame module for image masks
  description: "pygame.mask  \npygame module for image masks.\n\nUseful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel to store which parts collide.\n\nNew in pygame 1.8.\n\nChanged in pygame 2.0.2: Mask functions now support keyword arguments.\n\nChanged in pygame 2.0.2: Mask functions that take positions or offsets now support [`pygame.math.Vector2`](math#pygame.math.Vector2) arguments.\n\npygame.mask.from_surface()  \nCreates a Mask from the given surface\n\nfrom_surface(surface) -\\> Mask\n\nfrom_surface(surface, threshold=127) -\\> Mask\n\nCreates a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object from the given surface by setting all the opaque pixels and not setting the transparent pixels.\n\nIf the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are **not** equal to the color-key are **set** and the pixels equal to the color-key are not set.\n\nIf a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value **greater than** the `threshold` parameter are **set** and the pixels with an alpha value less than or equal to the `threshold` are not set.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- the surface to create the mask from\n\n- **threshold** (*int*) -- (optional) the alpha threshold (default is 127) to compare with each surface pixel's alpha value, if the `surface` is color-keyed this parameter is ignored\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object from the given surface\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nNote\n\nThis function is used to create the masks for [`pygame.sprite.collide_mask()`](sprite#pygame.sprite.collide_mask).\n\npygame.mask.from_threshold()  \nCreates a mask by thresholding Surfaces\n\nfrom_threshold(surface, color) -\\> Mask\n\nfrom_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -\\> Mask\n\nThis is a more featureful method of getting a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") from a surface.\n\nIf the optional `othersurface` is not used, all the pixels **within** the `threshold` of the `color` parameter are **set** in the resulting mask.\n\nIf the optional `othersurface` is used, every pixel in the first surface that is **within** the `threshold` of the corresponding pixel in `othersurface` is **set** in the resulting mask.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- the surface to create the mask from\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list\\[int,* *int,* *int,* *\\[int\\]\\]*) -- color used to check if the surface's pixels are within the given `threshold` range, this parameter is ignored if the optional `othersurface` parameter is supplied\n\n- **threshold** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list\\[int,* *int,* *int,* *\\[int\\]\\]*) -- (optional) the threshold range used to check the difference between two colors (default is `(0,`` ``0,`` ``0,`` ``255)`)\n\n- **othersurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- (optional) used to check whether the pixels of the first surface are within the given `threshold` range of the pixels from this surface (default is `None`)\n\n- **palette_colors** (*int*) -- (optional) indicates whether to use the palette colors or not, a nonzero value causes the palette colors to be used and a 0 causes them not to be used (default is 1)\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object from the given surface\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\npygame.mask.Mask  \npygame object for representing 2D bitmasks\n\nMask(size=(width, height)) -\\> Mask\n\nMask(size=(width, height), fill=False) -\\> Mask\n\nA `Mask` object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.\n\nA filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the `fill` parameter. Masks can also be cleared or filled using the [`pygame.mask.Mask.clear()`](#pygame.mask.Mask.clear) and [`pygame.mask.Mask.fill()`](#pygame.mask.Mask.fill) methods respectively.\n\nA mask's coordinates start in the top left corner at `(0,`` ``0)` just like [`pygame.Surface`](surface#pygame.Surface). Individual bits can be accessed using the [`pygame.mask.Mask.get_at()`](#pygame.mask.Mask.get_at) and [`pygame.mask.Mask.set_at()`](#pygame.mask.Mask.set_at) methods.\n\nThe methods [`overlap()`](#pygame.mask.Mask.overlap \"pygame.mask.Mask.overlap\"), [`overlap_area()`](#pygame.mask.Mask.overlap_area \"pygame.mask.Mask.overlap_area\"), [`overlap_mask()`](#pygame.mask.Mask.overlap_mask \"pygame.mask.Mask.overlap_mask\"), [`draw()`](#pygame.mask.Mask.draw \"pygame.mask.Mask.draw\"), [`erase()`](#pygame.mask.Mask.erase \"pygame.mask.Mask.erase\"), and [`convolve()`](#pygame.mask.Mask.convolve \"pygame.mask.Mask.convolve\") use an offset parameter to indicate the offset of another mask's top left corner from the calling mask's top left corner. The calling mask's top left corner is considered to be the origin `(0,`` ``0)`. Offsets are a sequence of two values `(x_offset,`` ``y_offset)`. Positive and negative offset values are supported.\n\n``` python\n0 to x (x_offset)\n           :    :\n   0 ..... +----:---------+\n   to      |    :         |\n   y .......... +-----------+\n(y_offset) |    | othermask |\n           |    +-----------+\n           | calling_mask |\n           +--------------+\n```\n\nParameters  \n- **size** -- the dimensions of the mask (width and height)\n\n- **fill** (*bool*) -- (optional) create an unfilled mask (default: `False`) or filled mask (`True`)\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nChanged in pygame 2.0.0: Shallow copy support added. The [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") class supports the special method `__copy__()` and shallow copying via `copy.copy(mask)`.\n\nChanged in pygame 2.0.0: Subclassing support added. The [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") class can be used as a base class.\n\nChanged in pygame 1.9.5: Added support for keyword arguments.\n\nChanged in pygame 1.9.5: Added the optional keyword parameter `fill`.\n\nChanged in pygame 1.9.5: Added support for masks with a width and/or a height of 0.\n\ncopy()  \nReturns a new copy of the mask\n\ncopy() -\\> Mask\n\nReturns  \na new copy of this mask, the new mask will have the same width, height, and set/unset bits as the original\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nNote\n\nIf a mask subclass needs to copy any instance specific attributes then it should override the `__copy__()` method. The overridden `__copy__()` method needs to call `super().__copy__()` and then copy the required data as in the following example code.\n\n``` python\nclass SubMask(pygame.mask.Mask):\n    def __copy__(self):\n        new_mask = super().__copy__()\n        # Do any SubMask attribute copying here.\n        return new_mask\n```\n\nNew in pygame 2.0.0.\n\nget_size()  \nReturns the size of the mask\n\nget_size() -\\> (width, height)\n\nReturns  \nthe size of the mask, (width, height)\n\nReturn type  \ntuple(int, int)\n\nget_rect()  \nReturns a Rect based on the size of the mask\n\nget_rect(\\*\\*kwargs) -\\> Rect\n\nReturns a new [`pygame.Rect()`](rect#pygame.Rect) object based on the size of this mask. The rect's default position will be `(0,`` ``0)` and its default width and height will be the same as this mask's. The rect's attributes can be altered via [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values passed into this method. As an example, `a_mask.get_rect(center=(10,`` ``5))` would create a [`pygame.Rect()`](rect#pygame.Rect) based on the mask's size centered at the given position.\n\nParameters  \n**kwargs** (*dict*) -- [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values that will be applied to the rect\n\nReturns  \na new [`pygame.Rect()`](rect#pygame.Rect) object based on the size of this mask with any [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values applied to it\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nNew in pygame 2.0.0.\n\nget_at()  \nGets the bit at the given position\n\nget_at(pos) -\\> int\n\nParameters  \n**pos** -- the position of the bit to get (x, y)\n\nReturns  \n1 if the bit is set, 0 if the bit is not set\n\nReturn type  \nint\n\nRaises  \n**IndexError** -- if the position is outside of the mask's bounds\n\nset_at()  \nSets the bit at the given position\n\nset_at(pos) -\\> None\n\nset_at(pos, value=1) -\\> None\n\nParameters  \n- **pos** -- the position of the bit to set (x, y)\n\n- **value** (*int*) -- any nonzero int will set the bit to 1, 0 will set the bit to 0 (default is 1)\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n**IndexError** -- if the position is outside of the mask's bounds\n\noverlap()  \nReturns the point of intersection\n\noverlap(other, offset) -\\> (x, y)\n\noverlap(other, offset) -\\> None\n\nReturns the first point of intersection encountered between this mask and `other`. A point of intersection is 2 overlapping set bits.\n\nThe current algorithm searches the overlapping area in `sizeof(unsigned`` ``long`` ``int)`` ``*`` ``CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned`` ``long`` ``int)`` ``*`` ``CHAR_BIT` is platform dependent, for clarity it will be referred to as `W`). Starting at the top left corner it checks bits 0 to `W`` ``-`` ``1` of the first row (`(0,`` ``0)` to `(W`` ``-`` ``1,`` ``0)`) then continues to the next row (`(0,`` ``1)` to `(W`` ``-`` ``1,`` ``1)`). Once this entire column block is checked, it continues to the next one (`W` to `2`` ``*`` ``W`` ``-`` ``1`). This is repeated until it finds a point of intersection or the entire overlapping area is checked.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the other mask to overlap with this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \npoint of intersection or `None` if no intersection\n\nReturn type  \ntuple(int, int) or NoneType\n\noverlap_area()  \nReturns the number of overlapping set bits\n\noverlap_area(other, offset) -\\> numbits\n\nReturns the number of overlapping set bits between between this mask and `other`.\n\nThis can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.\n\n``` python\ndx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))\ndy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))\n```\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the other mask to overlap with this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \nthe number of overlapping set bits\n\nReturn type  \nint\n\noverlap_mask()  \nReturns a mask of the overlapping set bits\n\noverlap_mask(other, offset) -\\> Mask\n\nReturns a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\"), the same size as this mask, containing the overlapping set bits between this mask and `other`.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the other mask to overlap with this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") with the overlapping bits set\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nfill()  \nSets all bits to 1\n\nfill() -\\> None\n\nSets all bits in the mask to 1.\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nclear()  \nSets all bits to 0\n\nclear() -\\> None\n\nSets all bits in the mask to 0.\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\ninvert()  \nFlips all the bits\n\ninvert() -\\> None\n\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nscale()  \nResizes a mask\n\nscale((width, height)) -\\> Mask\n\nCreates a new [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") of the requested size with its bits scaled from this mask.\n\nParameters  \n**size** -- the width and height (size) of the mask to create\n\nReturns  \na new [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object with its bits scaled from this mask\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nRaises  \n**ValueError** -- if `width`` ``<`` ``0` or `height`` ``<`` ``0`\n\ndraw()  \nDraws a mask onto another\n\ndraw(other, offset) -\\> None\n\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the mask to draw onto this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nerase()  \nErases a mask from another\n\nerase(other, offset) -\\> None\n\nErases (clears) all bits set in `other` from this mask.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the mask to erase from this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\ncount()  \nReturns the number of set bits\n\ncount() -\\> bits\n\nReturns  \nthe number of set bits in the mask\n\nReturn type  \nint\n\ncentroid()  \nReturns the centroid of the set bits\n\ncentroid() -\\> (x, y)\n\nFinds the centroid (the center mass of the set bits) for this mask.\n\nReturns  \na coordinate tuple indicating the centroid of the mask, it will return `(0,`` ``0)` if the mask has no bits set\n\nReturn type  \ntuple(int, int)\n\nangle()  \nReturns the orientation of the set bits\n\nangle() -\\> theta\n\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.\n\nReturns  \nthe orientation of the set bits in the mask, it will return `0.0` if the mask has no bits set\n\nReturn type  \nfloat\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\noutline()  \nReturns a list of points outlining an object\n\noutline() -\\> \\[(x, y), ...\\]\n\noutline(every=1) -\\> \\[(x, y), ...\\]\n\nReturns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.\n\nThe `every` optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.\n\nParameters  \n**every** (*int*) -- (optional) indicates the number of bits to skip over in the outline (default is 1)\n\nReturns  \na list of points outlining the first connected component encountered, an empty list is returned if the mask has no bits set\n\nReturn type  \nlist\\[tuple(int, int)\\]\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\nconvolve()  \nReturns the convolution of this mask with another mask\n\nconvolve(other) -\\> Mask\n\nconvolve(other, output=None, offset=(0, 0)) -\\> Mask\n\nConvolve this mask with the given `other` Mask.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- mask to convolve this mask with\n\n- **output** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\") *or* *NoneType*) -- (optional) mask for output (default is `None`)\n\n- **offset** -- the offset of `other` from this mask, (default is `(0,`` ``0)`)\n\nReturns  \na [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") with the `(i`` ``-`` ``offset[0],`` ``j`` ``-`` ``offset[1])` bit set, if shifting `other` (such that its bottom right corner is at `(i,`` ``j)`) causes it to overlap with this mask\n\nIf an `output` Mask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size `(MAX(0,`` ``width`` ``+`` ``other`` ``mask's`` ``width`` ``-`` ``1),`` ``MAX(0,`` ``height`` ``+`` ``other`` ``mask's`` ``height`` ``-`` ``1))` is created and returned.\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nconnected_component()  \nReturns a mask containing a connected component\n\nconnected_component() -\\> Mask\n\nconnected_component(pos) -\\> Mask\n\nA connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.\n\nBy default this method will return a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") will be empty (no bits set).\n\nParameters  \n**pos** -- (optional) selects the connected component that contains the bit at this position\n\nReturns  \na [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object (same size as this mask) with the largest connected component from this mask, if this mask has no bits set then an empty mask will be returned\n\nIf the `pos` parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the `pos` parameter selects an unset bit.\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nRaises  \n**IndexError** -- if the optional `pos` parameter is outside of the mask's bounds\n\nconnected_components()  \nReturns a list of masks of connected components\n\nconnected_components() -\\> \\[Mask, ...\\]\n\nconnected_components(minimum=0) -\\> \\[Mask, ...\\]\n\nProvides a list containing a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object for each connected component.\n\nParameters  \n**minimum** (*int*) -- (optional) indicates the minimum number of bits (to filter out noise) per connected component (default is 0, which equates to no minimum and is equivalent to setting it to 1, as a connected component must have at least 1 bit set)\n\nReturns  \na list containing a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object for each connected component, an empty list is returned if the mask has no bits set\n\nReturn type  \nlist\\[[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\\]\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\nget_bounding_rects()  \nReturns a list of bounding rects of connected components\n\nget_bounding_rects() -\\> \\[Rect, ...\\]\n\nProvides a list containing a bounding rect for each connected component.\n\nReturns  \na list containing a bounding rect for each connected component, an empty list is returned if the mask has no bits set\n\nReturn type  \nlist\\[[Rect](rect#pygame.Rect \"pygame.Rect\")\\]\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\nto_surface()  \nReturns a surface with the mask drawn on it\n\nto_surface() -\\> Surface\n\nto_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -\\> Surface\n\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) Surface to draw mask onto, if no surface is provided one will be created (default is `None`, which will cause a surface with the parameters `Surface(size=mask.get_size(),`` ``flags=SRCALPHA,`` ``depth=32)` to be created, drawn on, and returned)\n\n- **setsurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) use this surface's color values to draw set bits (default is `None`), if this surface is smaller than the mask any bits outside its bounds will use the `setcolor` value\n\n- **unsetsurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) use this surface's color values to draw unset bits (default is `None`), if this surface is smaller than the mask any bits outside its bounds will use the `unsetcolor` value\n\n- **setcolor** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\]) or* *None*) -- (optional) color to draw set bits (default is `(255,`` ``255,`` ``255,`` ``255)`, white), use `None` to skip drawing the set bits, the `setsurface` parameter (if set) will takes precedence over this parameter\n\n- **unsetcolor** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\]) or* *None*) -- (optional) color to draw unset bits (default is `(0,`` ``0,`` ``0,`` ``255)`, black), use `None` to skip drawing the unset bits, the `unsetsurface` parameter (if set) will takes precedence over this parameter\n\n- **dest** ([*Rect*](rect#pygame.Rect \"pygame.Rect\") *or* *tuple(int,* *int) or* *list(int,* *int) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int,* *int)*) -- (optional) surface destination of where to position the topleft corner of the mask being drawn (default is `(0,`` ``0)`), if a Rect is used as the `dest` parameter, its `x` and `y` attributes will be used as the destination, **NOTE1:** rects with a negative width or height value will not be normalized before using their `x` and `y` values, **NOTE2:** this destination value is only used to position the mask on the surface, it does not offset the `setsurface` and `unsetsurface` from the mask, they are always aligned with the mask (i.e. position `(0,`` ``0)` on the mask always corresponds to position `(0,`` ``0)` on the `setsurface` and `unsetsurface`)\n\nReturns  \nthe `surface` parameter (or a newly created surface if no `surface` parameter was provided) with this mask drawn on it\n\nReturn type  \n[Surface](surface#pygame.Surface \"pygame.Surface\")\n\nRaises  \n**ValueError** -- if the `setsurface` parameter or `unsetsurface` parameter does not have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`. The `setsurface` parameter defaults to `None`, but `setcolor` defaults to a color value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be `None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor` defaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mask.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mask.html](https://www.pygame.org/docs/ref/mask.html)"
- name: mask.from_surface
  id: ref/mask#pygame.mask.from_surface
  summary: Creates a Mask object from the given surface by setting all the opaque pixels and not setting the transparent pixels
  belongs_to: mask
  description: |-
    pygame.mask.from_surface()

    Creates a Mask from the given surface

    from_surface(surface) -\> Mask

    from_surface(surface, threshold=127) -\> Mask

    Creates a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object from the given surface by setting all the opaque pixels and not setting the transparent pixels.

    If the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are **not** equal to the color-key are **set** and the pixels equal to the color-key are not set.

    If a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value **greater than** the `threshold` parameter are **set** and the pixels with an alpha value less than or equal to the `threshold` are not set.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- the surface to create the mask from

    - **threshold** (*int*) -- (optional) the alpha threshold (default is 127) to compare with each surface pixel's alpha value, if the `surface` is color-keyed this parameter is ignored

    Returns

    a newly created [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object from the given surface

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")

    Note

    This function is used to create the masks for [`pygame.sprite.collide_mask()`](sprite#pygame.sprite.collide_mask).
- name: mask.from_threshold
  id: ref/mask#pygame.mask.from_threshold
  summary: This is a more featureful method of getting a Mask from a surface
  belongs_to: mask
  description: |-
    pygame.mask.from_threshold()

    Creates a mask by thresholding Surfaces

    from_threshold(surface, color) -\> Mask

    from_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -\> Mask

    This is a more featureful method of getting a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") from a surface.

    If the optional `othersurface` is not used, all the pixels **within** the `threshold` of the `color` parameter are **set** in the resulting mask.

    If the optional `othersurface` is used, every pixel in the first surface that is **within** the `threshold` of the corresponding pixel in `othersurface` is **set** in the resulting mask.

    Parameters

    - **surface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- the surface to create the mask from

    - **color** ([*Color*](color#pygame.Color "pygame.Color") *or* *int* *or* *tuple(int,* *int,* *int,* *\[int\]) or* *list\[int,* *int,* *int,* *\[int\]\]*) -- color used to check if the surface's pixels are within the given `threshold` range, this parameter is ignored if the optional `othersurface` parameter is supplied

    - **threshold** ([*Color*](color#pygame.Color "pygame.Color") *or* *int* *or* *tuple(int,* *int,* *int,* *\[int\]) or* *list\[int,* *int,* *int,* *\[int\]\]*) -- (optional) the threshold range used to check the difference between two colors (default is `(0,``0,``0,``255)`)

    - **othersurface** ([*Surface*](surface#pygame.Surface "pygame.Surface")) -- (optional) used to check whether the pixels of the first surface are within the given `threshold` range of the pixels from this surface (default is `None`)

    - **palette_colors** (*int*) -- (optional) indicates whether to use the palette colors or not, a nonzero value causes the palette colors to be used and a 0 causes them not to be used (default is 1)

    Returns

    a newly created [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object from the given surface

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")
- name: mask.Mask
  id: ref/mask#pygame.mask.Mask
  summary: A Mask object is used to represent a 2D bitmask
  belongs_to: mask
  description: |-
    pygame.mask.Mask

    pygame object for representing 2D bitmasks

    Mask(size=(width, height)) -\> Mask

    Mask(size=(width, height), fill=False) -\> Mask

    A `Mask` object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.

    A filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the `fill` parameter. Masks can also be cleared or filled using the [`pygame.mask.Mask.clear()`](#pygame.mask.Mask.clear) and [`pygame.mask.Mask.fill()`](#pygame.mask.Mask.fill) methods respectively.

    A mask's coordinates start in the top left corner at `(0,``0)` just like [`pygame.Surface`](surface#pygame.Surface). Individual bits can be accessed using the [`pygame.mask.Mask.get_at()`](#pygame.mask.Mask.get_at) and [`pygame.mask.Mask.set_at()`](#pygame.mask.Mask.set_at) methods.

    The methods [`overlap()`](#pygame.mask.Mask.overlap "pygame.mask.Mask.overlap"), [`overlap_area()`](#pygame.mask.Mask.overlap_area "pygame.mask.Mask.overlap_area"), [`overlap_mask()`](#pygame.mask.Mask.overlap_mask "pygame.mask.Mask.overlap_mask"), [`draw()`](#pygame.mask.Mask.draw "pygame.mask.Mask.draw"), [`erase()`](#pygame.mask.Mask.erase "pygame.mask.Mask.erase"), and [`convolve()`](#pygame.mask.Mask.convolve "pygame.mask.Mask.convolve") use an offset parameter to indicate the offset of another mask's top left corner from the calling mask's top left corner. The calling mask's top left corner is considered to be the origin `(0,``0)`. Offsets are a sequence of two values `(x_offset,``y_offset)`. Positive and negative offset values are supported.

    ``` python
    0 to x (x_offset)
               :    :
       0 ..... +----:---------+
       to      |    :         |
       y .......... +-----------+
    (y_offset) |    | othermask |
               |    +-----------+
               | calling_mask |
               +--------------+
    ```

    Parameters

    - **size** -- the dimensions of the mask (width and height)

    - **fill** (*bool*) -- (optional) create an unfilled mask (default: `False`) or filled mask (`True`)

    Returns

    a newly created [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")

    Changed in pygame 2.0.0: Shallow copy support added. The [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") class supports the special method `__copy__()` and shallow copying via `copy.copy(mask)`.

    Changed in pygame 2.0.0: Subclassing support added. The [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") class can be used as a base class.

    Changed in pygame 1.9.5: Added support for keyword arguments.

    Changed in pygame 1.9.5: Added the optional keyword parameter `fill`.

    Changed in pygame 1.9.5: Added support for masks with a width and/or a height of 0.
- name: mask.Mask.angle
  id: ref/mask#pygame.mask.Mask.angle
  summary: Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask
  belongs_to: mask
  description: |-
    angle()

    Returns the orientation of the set bits

    angle() -\> theta

    Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.

    Returns

    the orientation of the set bits in the mask, it will return `0.0` if the mask has no bits set

    Return type

    float

    Note

    See [`connected_component()`](#pygame.mask.Mask.connected_component "pygame.mask.Mask.connected_component") for details on how a connected component is calculated.
- name: mask.Mask.centroid
  id: ref/mask#pygame.mask.Mask.centroid
  summary: Finds the centroid (the center mass of the set bits) for this mask
  belongs_to: mask
  description: |-
    centroid()

    Returns the centroid of the set bits

    centroid() -\> (x, y)

    Finds the centroid (the center mass of the set bits) for this mask.

    Returns

    a coordinate tuple indicating the centroid of the mask, it will return `(0,``0)` if the mask has no bits set

    Return type

    tuple(int, int)
- name: mask.Mask.clear
  id: ref/mask#pygame.mask.Mask.clear
  summary: Sets all bits in the mask to 0
  belongs_to: mask
  description: |-
    clear()

    Sets all bits to 0

    clear() -\> None

    Sets all bits in the mask to 0.

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: mask.Mask.connected_component
  id: ref/mask#pygame.mask.Mask.connected_component
  summary: A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally)
  belongs_to: mask
  description: |-
    connected_component()

    Returns a mask containing a connected component

    connected_component() -\> Mask

    connected_component(pos) -\> Mask

    A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.

    By default this method will return a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") will be empty (no bits set).

    Parameters

    **pos** -- (optional) selects the connected component that contains the bit at this position

    Returns

    a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object (same size as this mask) with the largest connected component from this mask, if this mask has no bits set then an empty mask will be returned

    If the `pos` parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the `pos` parameter selects an unset bit.

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")

    Raises

    **IndexError** -- if the optional `pos` parameter is outside of the mask's bounds
- name: mask.Mask.connected_components
  id: ref/mask#pygame.mask.Mask.connected_components
  summary: Provides a list containing a Mask object for each connected component
  belongs_to: mask
  description: |-
    connected_components()

    Returns a list of masks of connected components

    connected_components() -\> \[Mask, ...\]

    connected_components(minimum=0) -\> \[Mask, ...\]

    Provides a list containing a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object for each connected component.

    Parameters

    **minimum** (*int*) -- (optional) indicates the minimum number of bits (to filter out noise) per connected component (default is 0, which equates to no minimum and is equivalent to setting it to 1, as a connected component must have at least 1 bit set)

    Returns

    a list containing a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object for each connected component, an empty list is returned if the mask has no bits set

    Return type

    list\[[Mask](#pygame.mask.Mask "pygame.mask.Mask")\]

    Note

    See [`connected_component()`](#pygame.mask.Mask.connected_component "pygame.mask.Mask.connected_component") for details on how a connected component is calculated.
- name: mask.Mask.convolve
  id: ref/mask#pygame.mask.Mask.convolve
  summary: Convolve this mask with the given other Mask
  belongs_to: mask
  description: |-
    convolve()

    Returns the convolution of this mask with another mask

    convolve(other) -\> Mask

    convolve(other, output=None, offset=(0, 0)) -\> Mask

    Convolve this mask with the given `other` Mask.

    Parameters

    - **other** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask")) -- mask to convolve this mask with

    - **output** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask") *or* *NoneType*) -- (optional) mask for output (default is `None`)

    - **offset** -- the offset of `other` from this mask, (default is `(0,``0)`)

    Returns

    a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") with the `(i``-``offset[0],``j``-``offset[1])` bit set, if shifting `other` (such that its bottom right corner is at `(i,``j)`) causes it to overlap with this mask

    If an `output` Mask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size `(MAX(0,``width``+``other``mask's``width``-``1),``MAX(0,``height``+``other``mask's``height``-``1))` is created and returned.

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")
- name: mask.Mask.copy
  id: ref/mask#pygame.mask.Mask.copy
  summary: If a mask subclass needs to copy any instance specific attributes then it should override the __copy__() method
  belongs_to: mask
  description: |-
    copy()

    Returns a new copy of the mask

    copy() -\> Mask

    Returns

    a new copy of this mask, the new mask will have the same width, height, and set/unset bits as the original

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")

    Note

    If a mask subclass needs to copy any instance specific attributes then it should override the `__copy__()` method. The overridden `__copy__()` method needs to call `super().__copy__()` and then copy the required data as in the following example code.

    ``` python
    class SubMask(pygame.mask.Mask):
        def __copy__(self):
            new_mask = super().__copy__()
            # Do any SubMask attribute copying here.
            return new_mask
    ```

    New in pygame 2.0.0.
- name: mask.Mask.count
  id: ref/mask#pygame.mask.Mask.count
  summary: null
  belongs_to: mask
  description: |-
    count()

    Returns the number of set bits

    count() -\> bits

    Returns

    the number of set bits in the mask

    Return type

    int
- name: mask.Mask.draw
  id: ref/mask#pygame.mask.Mask.draw
  summary: Performs a bitwise OR, drawing othermask onto this mask
  belongs_to: mask
  description: |-
    draw()

    Draws a mask onto another

    draw(other, offset) -\> None

    Performs a bitwise OR, drawing `othermask` onto this mask.

    Parameters

    - **other** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask")) -- the mask to draw onto this mask

    - **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: mask.Mask.erase
  id: ref/mask#pygame.mask.Mask.erase
  summary: Erases (clears) all bits set in other from this mask
  belongs_to: mask
  description: |-
    erase()

    Erases a mask from another

    erase(other, offset) -\> None

    Erases (clears) all bits set in `other` from this mask.

    Parameters

    - **other** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask")) -- the mask to erase from this mask

    - **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: mask.Mask.fill
  id: ref/mask#pygame.mask.Mask.fill
  summary: Sets all bits in the mask to 1
  belongs_to: mask
  description: |-
    fill()

    Sets all bits to 1

    fill() -\> None

    Sets all bits in the mask to 1.

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: mask.Mask.get_at
  id: ref/mask#pygame.mask.Mask.get_at
  summary: null
  belongs_to: mask
  description: |-
    get_at()

    Gets the bit at the given position

    get_at(pos) -\> int

    Parameters

    **pos** -- the position of the bit to get (x, y)

    Returns

    1 if the bit is set, 0 if the bit is not set

    Return type

    int

    Raises

    **IndexError** -- if the position is outside of the mask's bounds
- name: mask.Mask.get_bounding_rects
  id: ref/mask#pygame.mask.Mask.get_bounding_rects
  summary: Provides a list containing a bounding rect for each connected component
  belongs_to: mask
  description: |-
    get_bounding_rects()

    Returns a list of bounding rects of connected components

    get_bounding_rects() -\> \[Rect, ...\]

    Provides a list containing a bounding rect for each connected component.

    Returns

    a list containing a bounding rect for each connected component, an empty list is returned if the mask has no bits set

    Return type

    list\[[Rect](rect#pygame.Rect "pygame.Rect")\]

    Note

    See [`connected_component()`](#pygame.mask.Mask.connected_component "pygame.mask.Mask.connected_component") for details on how a connected component is calculated.
- name: mask.Mask.get_rect
  id: ref/mask#pygame.mask.Mask.get_rect
  summary: Returns a new pygame.Rect() object based on the size of this mask
  belongs_to: mask
  description: |-
    get_rect()

    Returns a Rect based on the size of the mask

    get_rect(\*\*kwargs) -\> Rect

    Returns a new [`pygame.Rect()`](rect#pygame.Rect) object based on the size of this mask. The rect's default position will be `(0,``0)` and its default width and height will be the same as this mask's. The rect's attributes can be altered via [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values passed into this method. As an example, `a_mask.get_rect(center=(10,``5))` would create a [`pygame.Rect()`](rect#pygame.Rect) based on the mask's size centered at the given position.

    Parameters

    **kwargs** (*dict*) -- [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values that will be applied to the rect

    Returns

    a new [`pygame.Rect()`](rect#pygame.Rect) object based on the size of this mask with any [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values applied to it

    Return type

    [Rect](rect#pygame.Rect "pygame.Rect")

    New in pygame 2.0.0.
- name: mask.Mask.get_size
  id: ref/mask#pygame.mask.Mask.get_size
  summary: null
  belongs_to: mask
  description: |-
    get_size()

    Returns the size of the mask

    get_size() -\> (width, height)

    Returns

    the size of the mask, (width, height)

    Return type

    tuple(int, int)
- name: mask.Mask.invert
  id: ref/mask#pygame.mask.Mask.invert
  summary: Flips all of the bits in the mask
  belongs_to: mask
  description: |-
    invert()

    Flips all the bits

    invert() -\> None

    Flips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.

    Returns

    ` ``None`` `

    Return type

    NoneType
- name: mask.Mask.outline
  id: ref/mask#pygame.mask.Mask.outline
  summary: Returns a list of points of the outline of the first connected component encountered in the mask
  belongs_to: mask
  description: |-
    outline()

    Returns a list of points outlining an object

    outline() -\> \[(x, y), ...\]

    outline(every=1) -\> \[(x, y), ...\]

    Returns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.

    The `every` optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.

    Parameters

    **every** (*int*) -- (optional) indicates the number of bits to skip over in the outline (default is 1)

    Returns

    a list of points outlining the first connected component encountered, an empty list is returned if the mask has no bits set

    Return type

    list\[tuple(int, int)\]

    Note

    See [`connected_component()`](#pygame.mask.Mask.connected_component "pygame.mask.Mask.connected_component") for details on how a connected component is calculated.
- name: mask.Mask.overlap
  id: ref/mask#pygame.mask.Mask.overlap
  summary: Returns the first point of intersection encountered between this mask and other
  belongs_to: mask
  description: |-
    overlap()

    Returns the point of intersection

    overlap(other, offset) -\> (x, y)

    overlap(other, offset) -\> None

    Returns the first point of intersection encountered between this mask and `other`. A point of intersection is 2 overlapping set bits.

    The current algorithm searches the overlapping area in `sizeof(unsigned``long``int)``*``CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned``long``int)``*``CHAR_BIT` is platform dependent, for clarity it will be referred to as `W`). Starting at the top left corner it checks bits 0 to `W``-``1` of the first row (`(0,``0)` to `(W``-``1,``0)`) then continues to the next row (`(0,``1)` to `(W``-``1,``1)`). Once this entire column block is checked, it continues to the next one (`W` to `2``*``W``-``1`). This is repeated until it finds a point of intersection or the entire overlapping area is checked.

    Parameters

    - **other** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask")) -- the other mask to overlap with this mask

    - **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)

    Returns

    point of intersection or `None` if no intersection

    Return type

    tuple(int, int) or NoneType
- name: mask.Mask.overlap_area
  id: ref/mask#pygame.mask.Mask.overlap_area
  summary: Returns the number of overlapping set bits between between this mask and other
  belongs_to: mask
  description: |-
    overlap_area()

    Returns the number of overlapping set bits

    overlap_area(other, offset) -\> numbits

    Returns the number of overlapping set bits between between this mask and `other`.

    This can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.

    ``` python
    dx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))
    dy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))
    ```

    Parameters

    - **other** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask")) -- the other mask to overlap with this mask

    - **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)

    Returns

    the number of overlapping set bits

    Return type

    int
- name: mask.Mask.overlap_mask
  id: ref/mask#pygame.mask.Mask.overlap_mask
  summary: Returns a Mask, the same size as this mask, containing the overlapping set bits between this mask and other
  belongs_to: mask
  description: |-
    overlap_mask()

    Returns a mask of the overlapping set bits

    overlap_mask(other, offset) -\> Mask

    Returns a [`Mask`](#pygame.mask.Mask "pygame.mask.Mask"), the same size as this mask, containing the overlapping set bits between this mask and `other`.

    Parameters

    - **other** ([*Mask*](#pygame.mask.Mask "pygame.mask.Mask")) -- the other mask to overlap with this mask

    - **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)

    Returns

    a newly created [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") with the overlapping bits set

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")
- name: mask.Mask.scale
  id: ref/mask#pygame.mask.Mask.scale
  summary: Creates a new Mask of the requested size with its bits scaled from this mask
  belongs_to: mask
  description: |-
    scale()

    Resizes a mask

    scale((width, height)) -\> Mask

    Creates a new [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") of the requested size with its bits scaled from this mask.

    Parameters

    **size** -- the width and height (size) of the mask to create

    Returns

    a new [`Mask`](#pygame.mask.Mask "pygame.mask.Mask") object with its bits scaled from this mask

    Return type

    [Mask](#pygame.mask.Mask "pygame.mask.Mask")

    Raises

    **ValueError** -- if `width``<``0` or `height``<``0`
- name: mask.Mask.set_at
  id: ref/mask#pygame.mask.Mask.set_at
  summary: null
  belongs_to: mask
  description: |-
    set_at()

    Sets the bit at the given position

    set_at(pos) -\> None

    set_at(pos, value=1) -\> None

    Parameters

    - **pos** -- the position of the bit to set (x, y)

    - **value** (*int*) -- any nonzero int will set the bit to 1, 0 will set the bit to 0 (default is 1)

    Returns

    ` ``None`` `

    Return type

    NoneType

    Raises

    **IndexError** -- if the position is outside of the mask's bounds
- name: mask.Mask.to_surface
  id: ref/mask#pygame.mask.Mask.to_surface
  summary: Draws this mask on the given surface
  belongs_to: mask
  description: "to_surface()\n\nReturns a surface with the mask drawn on it\n\nto_surface() -\\> Surface\n\nto_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -\\> Surface\n\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.\n\nParameters\n\n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) Surface to draw mask onto, if no surface is provided one will be created (default is `None`, which will cause a surface with the parameters `Surface(size=mask.get_size(),``flags=SRCALPHA,``depth=32)` to be created, drawn on, and returned)\n\n- **setsurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) use this surface's color values to draw set bits (default is `None`), if this surface is smaller than the mask any bits outside its bounds will use the `setcolor` value\n\n- **unsetsurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) use this surface's color values to draw unset bits (default is `None`), if this surface is smaller than the mask any bits outside its bounds will use the `unsetcolor` value\n\n- **setcolor** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\]) or* *None*) -- (optional) color to draw set bits (default is `(255,``255,``255,``255)`, white), use `None` to skip drawing the set bits, the `setsurface` parameter (if set) will takes precedence over this parameter\n\n- **unsetcolor** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\]) or* *None*) -- (optional) color to draw unset bits (default is `(0,``0,``0,``255)`, black), use `None` to skip drawing the unset bits, the `unsetsurface` parameter (if set) will takes precedence over this parameter\n\n- **dest** ([*Rect*](rect#pygame.Rect \"pygame.Rect\") *or* *tuple(int,* *int) or* *list(int,* *int) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int,* *int)*) -- (optional) surface destination of where to position the topleft corner of the mask being drawn (default is `(0,``0)`), if a Rect is used as the `dest` parameter, its `x` and `y` attributes will be used as the destination, **NOTE1:** rects with a negative width or height value will not be normalized before using their `x` and `y` values, **NOTE2:** this destination value is only used to position the mask on the surface, it does not offset the `setsurface` and `unsetsurface` from the mask, they are always aligned with the mask (i.e. position `(0,``0)` on the mask always corresponds to position `(0,``0)` on the `setsurface` and `unsetsurface`)\n\nReturns\n\nthe `surface` parameter (or a newly created surface if no `surface` parameter was provided) with this mask drawn on it\n\nReturn type\n\n[Surface](surface#pygame.Surface \"pygame.Surface\")\n\nRaises\n\n**ValueError** -- if the `setsurface` parameter or `unsetsurface` parameter does not have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`. The `setsurface` parameter defaults to `None`, but `setcolor` defaults to a color value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be `None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor` defaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mask.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mask.html](https://www.pygame.org/docs/ref/mask.html)"
- name: math
  id: ref/math
  summary: The pygame math module currently provides Vector classes in two and three dimensions, Vector2 and Vector3 respectively
  description: "pygame.math  \npygame module for vector classes\n\nThe pygame math module currently provides Vector classes in two and three dimensions, `Vector2` and `Vector3` respectively.\n\nThey support the following numerical operations: `vec`` ``+`` ``vec`, `vec`` ``-`` ``vec`, `vec`` ``*`` ``number`, `number`` ``*`` ``vec`, `vec`` ``/`` ``number`, `vec`` ``//`` ``number`, `vec`` ``+=`` ``vec`, `vec`` ``-=`` ``vec`, `vec`` ``*=`` ``number`, `vec`` ``/=`` ``number`, `vec`` ``//=`` ``number`, `round(vec,`` ``ndigits=0)`.\n\nAll these operations will be performed elementwise. In addition `vec`` ``*`` ``vec` will perform a scalar-product (a.k.a. dot-product). If you want to multiply every element from vector v with every element from vector w you can use the elementwise method: `v.elementwise()`` ``*`` ``w`\n\nThe coordinates of a vector can be retrieved or set using attributes or subscripts\n\n``` python\nv = pygame.Vector3()\n\nv.x = 5\nv[1] = 2 * v.x\nprint(v[1]) # 10\n\nv.x == v[0]\nv.y == v[1]\nv.z == v[2]\n```\n\nMultiple coordinates can be set using slices or swizzling\n\n``` python\nv = pygame.Vector2()\nv.xy = 1, 2\nv[:] = 1, 2\n```\n\nNew in pygame 1.9.2pre.\n\nChanged in pygame 1.9.4: Removed experimental notice.\n\nChanged in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)\n\nChanged in pygame 1.9.4: [`pygame.math`](#module-pygame.math) import not required. More convenient `pygame.Vector2` and `pygame.Vector3`.\n\nChanged in pygame 2.2.0: round returns a new vector with components rounded to the specified digits.\n\npygame.math.clamp()  \nreturns value clamped to min and max.\n\nclamp(value, min, max) -\\> float\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp feedback with authors](https://github.com/pygame/pygame/pull/3326)\n\nClamps a numeric `value` so that it's no lower than `min`, and no higher than `max`.\n\nNew in pygame 2.1.3.\n\npygame.math.lerp()  \ninterpolates between two values by a weight.\n\nlerp(a, b, weight) -\\> float\n\nLinearly interpolates between `a` and `b` by `weight` using the formula `a`` ``+`` ``(b-a)`` ``*`` ``weight`.\n\nIf `weight` is `0.5`, `lerp` will return the value half-way between `a` and `b`. When `a`` ``=`` ``10` and `b`` ``=`` ``20`, `lerp(a,`` ``b,`` ``0.5)` will return `15`. You can think of weight as the percentage of interpolation from `a` to `b`, `0.0` being 0% and `1.0` being 100%.\n\n`lerp` can be used for many things. You could rotate a sprite by a weight with `angle`` ``=`` ``lerp(0,`` ``360,`` ``weight)`. You could even scale an enemy's attack value based on the level you're playing:\n\n``` python\nFINAL_LEVEL = 10\ncurrent_level = 2\n\nattack = lerp(10, 50, current_level/MAX_LEVEL) # 18\n```\n\nIf you're on level 0, `attack` will be `10`, if you're on level 10, `attack` will be `50`. If you're on level 5, the result of `current_level/MAX_LEVEL` will be `0.5` which represents 50%, therefore `attack` will be `30`, which is the midpoint of `10` and `50`.\n\nRaises a ValueError if `weight` is outside the range of `[0,`` ``1]`.\n\nNew in pygame 2.1.3.\n\npygame.math.Vector2  \na 2-Dimensional Vector\n\nVector2() -\\> Vector2(0, 0)\n\nVector2(int) -\\> Vector2\n\nVector2(float) -\\> Vector2\n\nVector2(Vector2) -\\> Vector2\n\nVector2(x, y) -\\> Vector2\n\nVector2((x, y)) -\\> Vector2\n\nSome general information about the `Vector2` class.\n\nChanged in pygame 2.1.3: Inherited methods of vector subclasses now correctly return an instance of the subclass instead of the superclass\n\ndot()  \ncalculates the dot- or scalar-product with the other vector\n\ndot(Vector2) -\\> float\n\ncross()  \ncalculates the cross- or vector-product\n\ncross(Vector2) -\\> float\n\ncalculates the third component of the cross-product.\n\nmagnitude()  \nreturns the Euclidean magnitude of the vector.\n\nmagnitude() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2)`\n\nmagnitude_squared()  \nreturns the squared magnitude of the vector.\n\nmagnitude_squared() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`. This is faster than `vec.magnitude()` because it avoids the square root.\n\nlength()  \nreturns the Euclidean length of the vector.\n\nlength() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2)`\n\nlength_squared()  \nreturns the squared Euclidean length of the vector.\n\nlength_squared() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`. This is faster than `vec.length()` because it avoids the square root.\n\nnormalize()  \nreturns a vector with the same direction but length 1.\n\nnormalize() -\\> Vector2\n\nReturns a new vector that has `length` equal to `1` and the same direction as self.\n\nnormalize_ip()  \nnormalizes the vector in place so that its length is 1.\n\nnormalize_ip() -\\> None\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of the vector is not changed.\n\nis_normalized()  \ntests if the vector is normalized i.e. has length == 1.\n\nis_normalized() -\\> Bool\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns `False`.\n\nscale_to_length()  \nscales the vector to a given length.\n\nscale_to_length(float) -\\> None\n\nScales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length `0`. If the vector is the zero vector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nreflect()  \nreturns a vector reflected of a given normal.\n\nreflect(Vector2) -\\> Vector2\n\nReturns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.\n\nreflect_ip()  \nreflect the vector of a given normal in place.\n\nreflect_ip(Vector2) -\\> None\n\nChanges the direction of self as if it would have been reflected of a surface with the given surface normal.\n\ndistance_to()  \ncalculates the Euclidean distance to a given vector.\n\ndistance_to(Vector2) -\\> float\n\ndistance_squared_to()  \ncalculates the squared Euclidean distance to a given vector.\n\ndistance_squared_to(Vector2) -\\> float\n\nmove_towards()  \nreturns a vector moved toward the target by a given distance.\n\nmove_towards(Vector2, float) -\\> Vector2\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nReturns a Vector which is moved towards the given Vector by a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nmove_towards_ip()  \nmoves the vector toward its target at a given distance.\n\nmove_towards_ip(Vector2, float) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards_ip feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nMoves itself toward the given Vector at a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nlerp()  \nreturns a linear interpolation to the given vector.\n\nlerp(Vector2, float) -\\> Vector2\n\nReturns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between `0` and `1` where `0` means self and `1` means other will be returned.\n\nslerp()  \nreturns a spherical interpolation to the given vector.\n\nslerp(Vector2, float) -\\> Vector2\n\nCalculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range `[-1,`` ``1]`. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.\n\nelementwise()  \nThe next operation will be performed elementwise.\n\nelementwise() -\\> VectorElementwiseProxy\n\nApplies the following operation to each element of the vector.\n\nrotate()  \nrotates a vector by a given angle in degrees.\n\nrotate(angle) -\\> Vector2\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_rad()  \nrotates a vector by a given angle in radians.\n\nrotate_rad(angle) -\\> Vector2\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_ip()  \nrotates the vector by a given angle in degrees in place.\n\nrotate_ip(angle) -\\> None\n\nRotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_ip_rad()  \nrotates the vector by a given angle in radians in place.\n\nrotate_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_rad_ip()  \nrotates the vector by a given angle in radians in place.\n\nrotate_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nangle_to()  \ncalculates the angle to a given vector in degrees.\n\nangle_to(Vector2) -\\> float\n\nReturns the angle from self to the passed `Vector2` that would rotate self to be aligned with the passed `Vector2` without crossing over the negative x-axis.\n\nExample demonstrating the angle returned\n\nas_polar()  \nreturns a tuple with radial distance and azimuthal angle.\n\nas_polar() -\\> (r, phi)\n\nReturns a tuple `(r,`` ``phi)` where r is the radial distance, and phi is the azimuthal angle.\n\nfrom_polar()  \nCreates a Vector2(x, y) or sets x and y from a polar coordinates tuple.\n\nVector2.from_polar((r, phi)) -\\> Vector2\n\nVector2().from_polar((r, phi)) -\\> None\n\nIf used from the class creates a Vector2(x,y), else sets x and y. The values of x and y are defined from a tuple `(r,`` ``phi)` where r is the radial distance, and phi is the azimuthal angle.\n\nproject()  \nprojects a vector onto another.\n\nproject(Vector2) -\\> Vector2\n\nReturns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). For a more detailed explanation see [Wikipedia](https://en.wikipedia.org/wiki/Vector_projection).\n\nNew in pygame 2.0.2.\n\ncopy()  \nReturns a copy of itself.\n\ncopy() -\\> Vector2\n\nReturns a new Vector2 having the same dimensions.\n\nNew in pygame 2.1.1.\n\nclamp_magnitude()  \nReturns a copy of a vector with the magnitude clamped between max_length and min_length.\n\nclamp_magnitude(max_length) -\\> Vector2\n\nclamp_magnitude(min_length, max_length) -\\> Vector2\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nReturns a new copy of a vector with the magnitude clamped between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nclamp_magnitude_ip()  \nClamps the vector's magnitude between max_length and min_length\n\nclamp_magnitude_ip(max_length) -\\> None\n\nclamp_magnitude_ip(min_length, max_length) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude_ip feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nClamps the vector's magnitude between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nupdate()  \nSets the coordinates of the vector.\n\nupdate() -\\> None\n\nupdate(int) -\\> None\n\nupdate(float) -\\> None\n\nupdate(Vector2) -\\> None\n\nupdate(x, y) -\\> None\n\nupdate((x, y)) -\\> None\n\nSets coordinates x and y in place.\n\nNew in pygame 1.9.5.\n\nepsilon  \nDetermines the tolerance of vector calculations.\n\nBoth Vector classes have a value named `epsilon` that defaults to `1e-6`. This value acts as a numerical margin in various methods to account for floating point arithmetic errors. Specifically, `epsilon` is used in the following places:\n\n> - comparing Vectors (`==` and `!=`)\n>\n> - the `is_normalized` method (if the square of the length is within `epsilon` of 1, it's normalized)\n>\n> - slerping (a Vector with a length of `<epsilon` is considered a zero vector, and can't slerp with that)\n>\n> - reflection (can't reflect over the zero vector)\n>\n> - projection (can't project onto the zero vector)\n>\n> - rotation (only used when rotating by a multiple of 90 degrees)\n\nWhile it's possible to change `epsilon` for a specific instance of a Vector, all the other Vectors will retain the default value. Changing `epsilon` on a specific instance however could lead to some asymmetric behavior where symmetry would be expected, such as\n\n``` python\nu = pygame.Vector2(0, 1)\nv = pygame.Vector2(0, 1.2)\nu.epsilon = 0.5 # don't set it nearly this large\n\nprint(u == v) # >> True\nprint(v == u) # >> False\n```\n\nYou'll probably never have to change `epsilon` from the default value, but in rare situations you might find that either the margin is too large or too small, in which case changing `epsilon` slightly might help you out.\n\npygame.math.Vector3  \na 3-Dimensional Vector\n\nVector3() -\\> Vector3(0, 0, 0)\n\nVector3(int) -\\> Vector3\n\nVector3(float) -\\> Vector3\n\nVector3(Vector3) -\\> Vector3\n\nVector3(x, y, z) -\\> Vector3\n\nVector3((x, y, z)) -\\> Vector3\n\nSome general information about the Vector3 class.\n\nChanged in pygame 2.1.3: Inherited methods of vector subclasses now correctly return an instance of the subclass instead of the superclass\n\ndot()  \ncalculates the dot- or scalar-product with the other vector\n\ndot(Vector3) -\\> float\n\ncross()  \ncalculates the cross- or vector-product\n\ncross(Vector3) -\\> Vector3\n\ncalculates the cross-product.\n\nmagnitude()  \nreturns the Euclidean magnitude of the vector.\n\nmagnitude() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2)`\n\nmagnitude_squared()  \nreturns the squared Euclidean magnitude of the vector.\n\nmagnitude_squared() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2`. This is faster than `vec.magnitude()` because it avoids the square root.\n\nlength()  \nreturns the Euclidean length of the vector.\n\nlength() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2)`\n\nlength_squared()  \nreturns the squared Euclidean length of the vector.\n\nlength_squared() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2`. This is faster than `vec.length()` because it avoids the square root.\n\nnormalize()  \nreturns a vector with the same direction but length 1.\n\nnormalize() -\\> Vector3\n\nReturns a new vector that has `length` equal to `1` and the same direction as self.\n\nnormalize_ip()  \nnormalizes the vector in place so that its length is 1.\n\nnormalize_ip() -\\> None\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of the vector is not changed.\n\nis_normalized()  \ntests if the vector is normalized i.e. has length == 1.\n\nis_normalized() -\\> Bool\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns `False`.\n\nscale_to_length()  \nscales the vector to a given length.\n\nscale_to_length(float) -\\> None\n\nScales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length `0`. If the vector is the zero vector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nreflect()  \nreturns a vector reflected of a given normal.\n\nreflect(Vector3) -\\> Vector3\n\nReturns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.\n\nreflect_ip()  \nreflect the vector of a given normal in place.\n\nreflect_ip(Vector3) -\\> None\n\nChanges the direction of self as if it would have been reflected of a surface with the given surface normal.\n\ndistance_to()  \ncalculates the Euclidean distance to a given vector.\n\ndistance_to(Vector3) -\\> float\n\ndistance_squared_to()  \ncalculates the squared Euclidean distance to a given vector.\n\ndistance_squared_to(Vector3) -\\> float\n\nmove_towards()  \nreturns a vector moved toward the target by a given distance.\n\nmove_towards(Vector3, float) -\\> Vector3\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nReturns a Vector which is moved towards the given Vector by a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nmove_towards_ip()  \nmoves the vector toward its target at a given distance.\n\nmove_towards_ip(Vector3, float) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards_ip feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nMoves itself toward the given Vector at a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nlerp()  \nreturns a linear interpolation to the given vector.\n\nlerp(Vector3, float) -\\> Vector3\n\nReturns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between `0` and `1`, where `0` means self and `1` means other will be returned.\n\nslerp()  \nreturns a spherical interpolation to the given vector.\n\nslerp(Vector3, float) -\\> Vector3\n\nCalculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range `[-1,`` ``1]`. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.\n\nelementwise()  \nThe next operation will be performed elementwise.\n\nelementwise() -\\> VectorElementwiseProxy\n\nApplies the following operation to each element of the vector.\n\nrotate()  \nrotates a vector by a given angle in degrees.\n\nrotate(angle, Vector3) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_rad()  \nrotates a vector by a given angle in radians.\n\nrotate_rad(angle, Vector3) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_ip()  \nrotates the vector by a given angle in degrees in place.\n\nrotate_ip(angle, Vector3) -\\> None\n\nRotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_ip_rad()  \nrotates the vector by a given angle in radians in place.\n\nrotate_ip_rad(angle, Vector3) -\\> None\n\nDEPRECATED: Use rotate_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_rad_ip()  \nrotates the vector by a given angle in radians in place.\n\nrotate_rad_ip(angle, Vector3) -\\> None\n\nRotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nrotate_x()  \nrotates a vector around the x-axis by the angle in degrees.\n\nrotate_x(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_x_rad()  \nrotates a vector around the x-axis by the angle in radians.\n\nrotate_x_rad(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_x_ip()  \nrotates the vector around the x-axis by the angle in degrees in place.\n\nrotate_x_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_x_ip_rad()  \nrotates the vector around the x-axis by the angle in radians in place.\n\nrotate_x_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_x_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_x_rad_ip()  \nrotates the vector around the x-axis by the angle in radians in place.\n\nrotate_x_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nrotate_y()  \nrotates a vector around the y-axis by the angle in degrees.\n\nrotate_y(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_y_rad()  \nrotates a vector around the y-axis by the angle in radians.\n\nrotate_y_rad(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_y_ip()  \nrotates the vector around the y-axis by the angle in degrees in place.\n\nrotate_y_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_y_ip_rad()  \nrotates the vector around the y-axis by the angle in radians in place.\n\nrotate_y_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_y_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_y_rad_ip()  \nrotates the vector around the y-axis by the angle in radians in place.\n\nrotate_y_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nrotate_z()  \nrotates a vector around the z-axis by the angle in degrees.\n\nrotate_z(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_z_rad()  \nrotates a vector around the z-axis by the angle in radians.\n\nrotate_z_rad(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_z_ip()  \nrotates the vector around the z-axis by the angle in degrees in place.\n\nrotate_z_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_z_ip_rad()  \nrotates the vector around the z-axis by the angle in radians in place.\n\nrotate_z_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_z_rad_ip() instead.\n\nDeprecated since pygame 2.1.1.\n\nrotate_z_rad_ip()  \nrotates the vector around the z-axis by the angle in radians in place.\n\nrotate_z_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nangle_to()  \ncalculates the angle to a given vector in degrees.\n\nangle_to(Vector3) -\\> float\n\nReturns the angle between self and the given vector.\n\nas_spherical()  \nreturns a tuple with radial distance, inclination and azimuthal angle.\n\nas_spherical() -\\> (r, theta, phi)\n\nReturns a tuple `(r,`` ``theta,`` ``phi)` where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.\n\nfrom_spherical()  \nCreates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.\n\nVector3.from_spherical((r, theta, phi)) -\\> Vector3\n\nVector3().from_spherical((r, theta, phi)) -\\> None\n\nIf used from the class creates a Vector3(x, y, z), else sets x, y, and z. The values of x, y, and z are from a tuple `(r,`` ``theta,`` ``phi)` where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.\n\nproject()  \nprojects a vector onto another.\n\nproject(Vector3) -\\> Vector3\n\nReturns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). For a more detailed explanation see [Wikipedia](https://en.wikipedia.org/wiki/Vector_projection).\n\nNew in pygame 2.0.2.\n\ncopy()  \nReturns a copy of itself.\n\ncopy() -\\> Vector3\n\nReturns a new Vector3 having the same dimensions.\n\nNew in pygame 2.1.1.\n\nclamp_magnitude()  \nReturns a copy of a vector with the magnitude clamped between max_length and min_length.\n\nclamp_magnitude(max_length) -\\> Vector3\n\nclamp_magnitude(min_length, max_length) -\\> Vector3\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nReturns a new copy of a vector with the magnitude clamped between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nclamp_magnitude_ip()  \nClamps the vector's magnitude between max_length and min_length\n\nclamp_magnitude_ip(max_length) -\\> None\n\nclamp_magnitude_ip(min_length, max_length) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude_ip feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nClamps the vector's magnitude between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nupdate()  \nSets the coordinates of the vector.\n\nupdate() -\\> None\n\nupdate(int) -\\> None\n\nupdate(float) -\\> None\n\nupdate(Vector3) -\\> None\n\nupdate(x, y, z) -\\> None\n\nupdate((x, y, z)) -\\> None\n\nSets coordinates x, y, and z in place.\n\nNew in pygame 1.9.5.\n\nepsilon  \nDetermines the tolerance of vector calculations.\n\nWith lengths within this number, vectors are considered equal. For more information see [`pygame.math.Vector2.epsilon`](#pygame.math.Vector2.epsilon)\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/math.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/math.html](https://www.pygame.org/docs/ref/math.html)"
- name: math.clamp
  id: ref/math#pygame.math.clamp
  summary: returns value clamped to min and max
  belongs_to: math
  description: |-
    pygame.math.clamp()

    returns value clamped to min and max.

    clamp(value, min, max) -\> float

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp feedback with authors](https://github.com/pygame/pygame/pull/3326)

    Clamps a numeric `value` so that it's no lower than `min`, and no higher than `max`.

    New in pygame 2.1.3.
- name: math.lerp
  id: ref/math#pygame.math.lerp
  summary: interpolates between two values by a weight
  belongs_to: math
  description: |-
    pygame.math.lerp()

    interpolates between two values by a weight.

    lerp(a, b, weight) -\> float

    Linearly interpolates between `a` and `b` by `weight` using the formula `a``+``(b-a)``*``weight`.

    If `weight` is `0.5`, `lerp` will return the value half-way between `a` and `b`. When `a``=``10` and `b``=``20`, `lerp(a,``b,``0.5)` will return `15`. You can think of weight as the percentage of interpolation from `a` to `b`, `0.0` being 0% and `1.0` being 100%.

    `lerp` can be used for many things. You could rotate a sprite by a weight with `angle``=``lerp(0,``360,``weight)`. You could even scale an enemy's attack value based on the level you're playing:

    ``` python
    FINAL_LEVEL = 10
    current_level = 2

    attack = lerp(10, 50, current_level/MAX_LEVEL) # 18
    ```

    If you're on level 0, `attack` will be `10`, if you're on level 10, `attack` will be `50`. If you're on level 5, the result of `current_level/MAX_LEVEL` will be `0.5` which represents 50%, therefore `attack` will be `30`, which is the midpoint of `10` and `50`.

    Raises a ValueError if `weight` is outside the range of `[0,``1]`.

    New in pygame 2.1.3.
- name: math.Vector2
  id: ref/math#pygame.math.Vector2
  summary: Some general information about the Vector2 class
  belongs_to: math
  description: |-
    pygame.math.Vector2

    a 2-Dimensional Vector

    Vector2() -\> Vector2(0, 0)

    Vector2(int) -\> Vector2

    Vector2(float) -\> Vector2

    Vector2(Vector2) -\> Vector2

    Vector2(x, y) -\> Vector2

    Vector2((x, y)) -\> Vector2

    Some general information about the `Vector2` class.

    Changed in pygame 2.1.3: Inherited methods of vector subclasses now correctly return an instance of the subclass instead of the superclass
- name: math.Vector2.angle_to
  id: ref/math#pygame.math.Vector2.angle_to
  summary: calculates the angle to a given vector in degrees
  belongs_to: math
  description: |-
    angle_to()

    calculates the angle to a given vector in degrees.

    angle_to(Vector2) -\> float

    Returns the angle from self to the passed `Vector2` that would rotate self to be aligned with the passed `Vector2` without crossing over the negative x-axis.

    Example demonstrating the angle returned
- name: math.Vector2.as_polar
  id: ref/math#pygame.math.Vector2.as_polar
  summary: returns a tuple with radial distance and azimuthal angle
  belongs_to: math
  description: |-
    as_polar()

    returns a tuple with radial distance and azimuthal angle.

    as_polar() -\> (r, phi)

    Returns a tuple `(r,``phi)` where r is the radial distance, and phi is the azimuthal angle.
- name: math.Vector2.clamp_magnitude
  id: ref/math#pygame.math.Vector2.clamp_magnitude
  summary: Returns a copy of a vector with the magnitude clamped between max_length and min_length
  belongs_to: math
  description: |-
    clamp_magnitude()

    Returns a copy of a vector with the magnitude clamped between max_length and min_length.

    clamp_magnitude(max_length) -\> Vector2

    clamp_magnitude(min_length, max_length) -\> Vector2

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude feedback with authors](https://github.com/pygame/pygame/pull/2990)

    Returns a new copy of a vector with the magnitude clamped between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`

    This function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.

    New in pygame 2.1.3.
- name: math.Vector2.clamp_magnitude_ip
  id: ref/math#pygame.math.Vector2.clamp_magnitude_ip
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: math
  description: |-
    clamp_magnitude_ip()

    Clamps the vector's magnitude between max_length and min_length

    clamp_magnitude_ip(max_length) -\> None

    clamp_magnitude_ip(min_length, max_length) -\> None

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude_ip feedback with authors](https://github.com/pygame/pygame/pull/2990)

    Clamps the vector's magnitude between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`

    This function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.

    New in pygame 2.1.3.
- name: math.Vector2.copy
  id: ref/math#pygame.math.Vector2.copy
  summary: Returns a copy of itself
  belongs_to: math
  description: |-
    copy()

    Returns a copy of itself.

    copy() -\> Vector2

    Returns a new Vector2 having the same dimensions.

    New in pygame 2.1.1.
- name: math.Vector2.cross
  id: ref/math#pygame.math.Vector2.cross
  summary: calculates the third component of the cross-product
  belongs_to: math
  description: |-
    cross()

    calculates the cross- or vector-product

    cross(Vector2) -\> float

    calculates the third component of the cross-product.
- name: math.Vector2.distance_squared_to
  id: ref/math#pygame.math.Vector2.distance_squared_to
  summary: calculates the squared Euclidean distance to a given vector
  belongs_to: math
  description: |-
    distance_squared_to()

    calculates the squared Euclidean distance to a given vector.

    distance_squared_to(Vector2) -\> float
- name: math.Vector2.distance_to
  id: ref/math#pygame.math.Vector2.distance_to
  summary: calculates the Euclidean distance to a given vector
  belongs_to: math
  description: |-
    distance_to()

    calculates the Euclidean distance to a given vector.

    distance_to(Vector2) -\> float
- name: math.Vector2.dot
  id: ref/math#pygame.math.Vector2.dot
  summary: null
  belongs_to: math
  description: |-
    dot()

    calculates the dot- or scalar-product with the other vector

    dot(Vector2) -\> float
- name: math.Vector2.elementwise
  id: ref/math#pygame.math.Vector2.elementwise
  summary: The next operation will be performed elementwise
  belongs_to: math
  description: |-
    elementwise()

    The next operation will be performed elementwise.

    elementwise() -\> VectorElementwiseProxy

    Applies the following operation to each element of the vector.
- name: math.Vector2.epsilon
  id: ref/math#pygame.math.Vector2.epsilon
  summary: Determines the tolerance of vector calculations
  belongs_to: math
  description: |-
    epsilon

    Determines the tolerance of vector calculations.

    Both Vector classes have a value named `epsilon` that defaults to `1e-6`. This value acts as a numerical margin in various methods to account for floating point arithmetic errors. Specifically, `epsilon` is used in the following places:

    > - comparing Vectors (`==` and `!=`)
    >
    > - the `is_normalized` method (if the square of the length is within `epsilon` of 1, it's normalized)
    >
    > - slerping (a Vector with a length of `<epsilon` is considered a zero vector, and can't slerp with that)
    >
    > - reflection (can't reflect over the zero vector)
    >
    > - projection (can't project onto the zero vector)
    >
    > - rotation (only used when rotating by a multiple of 90 degrees)

    While it's possible to change `epsilon` for a specific instance of a Vector, all the other Vectors will retain the default value. Changing `epsilon` on a specific instance however could lead to some asymmetric behavior where symmetry would be expected, such as

    ``` python
    u = pygame.Vector2(0, 1)
    v = pygame.Vector2(0, 1.2)
    u.epsilon = 0.5 # don't set it nearly this large

    print(u == v) # >> True
    print(v == u) # >> False
    ```

    You'll probably never have to change `epsilon` from the default value, but in rare situations you might find that either the margin is too large or too small, in which case changing `epsilon` slightly might help you out.
- name: math.Vector2.from_polar
  id: ref/math#pygame.math.Vector2.from_polar
  summary: Creates a Vector2(x, y) or sets x and y from a polar coordinates tuple
  belongs_to: math
  description: |-
    from_polar()

    Creates a Vector2(x, y) or sets x and y from a polar coordinates tuple.

    Vector2.from_polar((r, phi)) -\> Vector2

    Vector2().from_polar((r, phi)) -\> None

    If used from the class creates a Vector2(x,y), else sets x and y. The values of x and y are defined from a tuple `(r,``phi)` where r is the radial distance, and phi is the azimuthal angle.
- name: math.Vector2.is_normalized
  id: ref/math#pygame.math.Vector2.is_normalized
  summary: tests if the vector is normalized i.e
  belongs_to: math
  description: |-
    is_normalized()

    tests if the vector is normalized i.e. has length == 1.

    is_normalized() -\> Bool

    Returns True if the vector has `length` equal to `1`. Otherwise it returns `False`.
- name: math.Vector2.length
  id: ref/math#pygame.math.Vector2.length
  summary: returns the Euclidean length of the vector
  belongs_to: math
  description: |-
    length()

    returns the Euclidean length of the vector.

    length() -\> float

    calculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length()``==``math.sqrt(vec.x**2``+``vec.y**2)`
- name: math.Vector2.length_squared
  id: ref/math#pygame.math.Vector2.length_squared
  summary: returns the squared Euclidean length of the vector
  belongs_to: math
  description: |-
    length_squared()

    returns the squared Euclidean length of the vector.

    length_squared() -\> float

    calculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length_squared()``==``vec.x**2``+``vec.y**2`. This is faster than `vec.length()` because it avoids the square root.
- name: math.Vector2.lerp
  id: ref/math#pygame.math.Vector2.lerp
  summary: returns a linear interpolation to the given vector
  belongs_to: math
  description: |-
    lerp()

    returns a linear interpolation to the given vector.

    lerp(Vector2, float) -\> Vector2

    Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between `0` and `1` where `0` means self and `1` means other will be returned.
- name: math.Vector2.magnitude
  id: ref/math#pygame.math.Vector2.magnitude
  summary: returns the Euclidean magnitude of the vector
  belongs_to: math
  description: |-
    magnitude()

    returns the Euclidean magnitude of the vector.

    magnitude() -\> float

    calculates the magnitude of the vector which follows from the theorem: `vec.magnitude()``==``math.sqrt(vec.x**2``+``vec.y**2)`
- name: math.Vector2.magnitude_squared
  id: ref/math#pygame.math.Vector2.magnitude_squared
  summary: returns the squared magnitude of the vector
  belongs_to: math
  description: |-
    magnitude_squared()

    returns the squared magnitude of the vector.

    magnitude_squared() -\> float

    calculates the magnitude of the vector which follows from the theorem: `vec.magnitude_squared()``==``vec.x**2``+``vec.y**2`. This is faster than `vec.magnitude()` because it avoids the square root.
- name: math.Vector2.move_towards
  id: ref/math#pygame.math.Vector2.move_towards
  summary: returns a vector moved toward the target by a given distance
  belongs_to: math
  description: |-
    move_towards()

    returns a vector moved toward the target by a given distance.

    move_towards(Vector2, float) -\> Vector2

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards feedback with authors](https://github.com/pygame/pygame/pull/2929)

    Returns a Vector which is moved towards the given Vector by a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.

    New in pygame 2.1.3.
- name: math.Vector2.move_towards_ip
  id: ref/math#pygame.math.Vector2.move_towards_ip
  summary: moves the vector toward its target at a given distance
  belongs_to: math
  description: |-
    move_towards_ip()

    moves the vector toward its target at a given distance.

    move_towards_ip(Vector2, float) -\> None

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards_ip feedback with authors](https://github.com/pygame/pygame/pull/2929)

    Moves itself toward the given Vector at a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.

    New in pygame 2.1.3.
- name: math.Vector2.normalize
  id: ref/math#pygame.math.Vector2.normalize
  summary: returns a vector with the same direction but length 1
  belongs_to: math
  description: |-
    normalize()

    returns a vector with the same direction but length 1.

    normalize() -\> Vector2

    Returns a new vector that has `length` equal to `1` and the same direction as self.
- name: math.Vector2.normalize_ip
  id: ref/math#pygame.math.Vector2.normalize_ip
  summary: normalizes the vector in place so that its length is 1
  belongs_to: math
  description: |-
    normalize_ip()

    normalizes the vector in place so that its length is 1.

    normalize_ip() -\> None

    Normalizes the vector so that it has `length` equal to `1`. The direction of the vector is not changed.
- name: math.Vector2.project
  id: ref/math#pygame.math.Vector2.project
  summary: projects a vector onto another
  belongs_to: math
  description: |-
    project()

    projects a vector onto another.

    project(Vector2) -\> Vector2

    Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). For a more detailed explanation see [Wikipedia](https://en.wikipedia.org/wiki/Vector_projection).

    New in pygame 2.0.2.
- name: math.Vector2.reflect
  id: ref/math#pygame.math.Vector2.reflect
  summary: returns a vector reflected of a given normal
  belongs_to: math
  description: |-
    reflect()

    returns a vector reflected of a given normal.

    reflect(Vector2) -\> Vector2

    Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.
- name: math.Vector2.reflect_ip
  id: ref/math#pygame.math.Vector2.reflect_ip
  summary: reflect the vector of a given normal in place
  belongs_to: math
  description: |-
    reflect_ip()

    reflect the vector of a given normal in place.

    reflect_ip(Vector2) -\> None

    Changes the direction of self as if it would have been reflected of a surface with the given surface normal.
- name: math.Vector2.rotate
  id: ref/math#pygame.math.Vector2.rotate
  summary: rotates a vector by a given angle in degrees
  belongs_to: math
  description: |-
    rotate()

    rotates a vector by a given angle in degrees.

    rotate(angle) -\> Vector2

    Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector2.rotate_ip
  id: ref/math#pygame.math.Vector2.rotate_ip
  summary: rotates the vector by a given angle in degrees in place
  belongs_to: math
  description: |-
    rotate_ip()

    rotates the vector by a given angle in degrees in place.

    rotate_ip(angle) -\> None

    Rotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector2.rotate_ip_rad
  id: ref/math#pygame.math.Vector2.rotate_ip_rad
  summary: rotates the vector by a given angle in radians in place
  belongs_to: math
  description: |-
    rotate_ip_rad()

    rotates the vector by a given angle in radians in place.

    rotate_ip_rad(angle) -\> None

    DEPRECATED: Use rotate_rad_ip() instead.

    New in pygame 2.0.0.

    Deprecated since pygame 2.1.1.
- name: math.Vector2.rotate_rad
  id: ref/math#pygame.math.Vector2.rotate_rad
  summary: rotates a vector by a given angle in radians
  belongs_to: math
  description: |-
    rotate_rad()

    rotates a vector by a given angle in radians.

    rotate_rad(angle) -\> Vector2

    Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.0.0.
- name: math.Vector2.rotate_rad_ip
  id: ref/math#pygame.math.Vector2.rotate_rad_ip
  summary: rotates the vector by a given angle in radians in place
  belongs_to: math
  description: |-
    rotate_rad_ip()

    rotates the vector by a given angle in radians in place.

    rotate_rad_ip(angle) -\> None

    Rotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.1.1.
- name: math.Vector2.scale_to_length
  id: ref/math#pygame.math.Vector2.scale_to_length
  summary: scales the vector to a given length
  belongs_to: math
  description: |-
    scale_to_length()

    scales the vector to a given length.

    scale_to_length(float) -\> None

    Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length `0`. If the vector is the zero vector (i.e. has length `0` thus no direction) a `ValueError` is raised.
- name: math.Vector2.slerp
  id: ref/math#pygame.math.Vector2.slerp
  summary: returns a spherical interpolation to the given vector
  belongs_to: math
  description: |-
    slerp()

    returns a spherical interpolation to the given vector.

    slerp(Vector2, float) -\> Vector2

    Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range `[-1,``1]`. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.
- name: math.Vector2.update
  id: ref/math#pygame.math.Vector2.update
  summary: Sets the coordinates of the vector
  belongs_to: math
  description: |-
    update()

    Sets the coordinates of the vector.

    update() -\> None

    update(int) -\> None

    update(float) -\> None

    update(Vector2) -\> None

    update(x, y) -\> None

    update((x, y)) -\> None

    Sets coordinates x and y in place.

    New in pygame 1.9.5.
- name: math.Vector3
  id: ref/math#pygame.math.Vector3
  summary: Some general information about the Vector3 class
  belongs_to: math
  description: |-
    pygame.math.Vector3

    a 3-Dimensional Vector

    Vector3() -\> Vector3(0, 0, 0)

    Vector3(int) -\> Vector3

    Vector3(float) -\> Vector3

    Vector3(Vector3) -\> Vector3

    Vector3(x, y, z) -\> Vector3

    Vector3((x, y, z)) -\> Vector3

    Some general information about the Vector3 class.

    Changed in pygame 2.1.3: Inherited methods of vector subclasses now correctly return an instance of the subclass instead of the superclass
- name: math.Vector3.angle_to
  id: ref/math#pygame.math.Vector3.angle_to
  summary: calculates the angle to a given vector in degrees
  belongs_to: math
  description: |-
    angle_to()

    calculates the angle to a given vector in degrees.

    angle_to(Vector3) -\> float

    Returns the angle between self and the given vector.
- name: math.Vector3.as_spherical
  id: ref/math#pygame.math.Vector3.as_spherical
  summary: returns a tuple with radial distance, inclination and azimuthal angle
  belongs_to: math
  description: |-
    as_spherical()

    returns a tuple with radial distance, inclination and azimuthal angle.

    as_spherical() -\> (r, theta, phi)

    Returns a tuple `(r,``theta,``phi)` where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.
- name: math.Vector3.clamp_magnitude
  id: ref/math#pygame.math.Vector3.clamp_magnitude
  summary: Returns a copy of a vector with the magnitude clamped between max_length and min_length
  belongs_to: math
  description: |-
    clamp_magnitude()

    Returns a copy of a vector with the magnitude clamped between max_length and min_length.

    clamp_magnitude(max_length) -\> Vector3

    clamp_magnitude(min_length, max_length) -\> Vector3

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude feedback with authors](https://github.com/pygame/pygame/pull/2990)

    Returns a new copy of a vector with the magnitude clamped between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`

    This function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.

    New in pygame 2.1.3.
- name: math.Vector3.clamp_magnitude_ip
  id: ref/math#pygame.math.Vector3.clamp_magnitude_ip
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: math
  description: |-
    clamp_magnitude_ip()

    Clamps the vector's magnitude between max_length and min_length

    clamp_magnitude_ip(max_length) -\> None

    clamp_magnitude_ip(min_length, max_length) -\> None

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude_ip feedback with authors](https://github.com/pygame/pygame/pull/2990)

    Clamps the vector's magnitude between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`

    This function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.

    New in pygame 2.1.3.
- name: math.Vector3.copy
  id: ref/math#pygame.math.Vector3.copy
  summary: Returns a copy of itself
  belongs_to: math
  description: |-
    copy()

    Returns a copy of itself.

    copy() -\> Vector3

    Returns a new Vector3 having the same dimensions.

    New in pygame 2.1.1.
- name: math.Vector3.cross
  id: ref/math#pygame.math.Vector3.cross
  summary: calculates the cross-product
  belongs_to: math
  description: |-
    cross()

    calculates the cross- or vector-product

    cross(Vector3) -\> Vector3

    calculates the cross-product.
- name: math.Vector3.distance_squared_to
  id: ref/math#pygame.math.Vector3.distance_squared_to
  summary: calculates the squared Euclidean distance to a given vector
  belongs_to: math
  description: |-
    distance_squared_to()

    calculates the squared Euclidean distance to a given vector.

    distance_squared_to(Vector3) -\> float
- name: math.Vector3.distance_to
  id: ref/math#pygame.math.Vector3.distance_to
  summary: calculates the Euclidean distance to a given vector
  belongs_to: math
  description: |-
    distance_to()

    calculates the Euclidean distance to a given vector.

    distance_to(Vector3) -\> float
- name: math.Vector3.dot
  id: ref/math#pygame.math.Vector3.dot
  summary: null
  belongs_to: math
  description: |-
    dot()

    calculates the dot- or scalar-product with the other vector

    dot(Vector3) -\> float
- name: math.Vector3.elementwise
  id: ref/math#pygame.math.Vector3.elementwise
  summary: The next operation will be performed elementwise
  belongs_to: math
  description: |-
    elementwise()

    The next operation will be performed elementwise.

    elementwise() -\> VectorElementwiseProxy

    Applies the following operation to each element of the vector.
- name: math.Vector3.epsilon
  id: ref/math#pygame.math.Vector3.epsilon
  summary: Determines the tolerance of vector calculations
  belongs_to: math
  description: "epsilon\n\nDetermines the tolerance of vector calculations.\n\nWith lengths within this number, vectors are considered equal. For more information see [`pygame.math.Vector2.epsilon`](#pygame.math.Vector2.epsilon)\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/math.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/math.html](https://www.pygame.org/docs/ref/math.html)"
- name: math.Vector3.from_spherical
  id: ref/math#pygame.math.Vector3.from_spherical
  summary: Creates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple
  belongs_to: math
  description: |-
    from_spherical()

    Creates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.

    Vector3.from_spherical((r, theta, phi)) -\> Vector3

    Vector3().from_spherical((r, theta, phi)) -\> None

    If used from the class creates a Vector3(x, y, z), else sets x, y, and z. The values of x, y, and z are from a tuple `(r,``theta,``phi)` where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.
- name: math.Vector3.is_normalized
  id: ref/math#pygame.math.Vector3.is_normalized
  summary: tests if the vector is normalized i.e
  belongs_to: math
  description: |-
    is_normalized()

    tests if the vector is normalized i.e. has length == 1.

    is_normalized() -\> Bool

    Returns True if the vector has `length` equal to `1`. Otherwise it returns `False`.
- name: math.Vector3.length
  id: ref/math#pygame.math.Vector3.length
  summary: returns the Euclidean length of the vector
  belongs_to: math
  description: |-
    length()

    returns the Euclidean length of the vector.

    length() -\> float

    calculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length()``==``math.sqrt(vec.x**2``+``vec.y**2``+``vec.z**2)`
- name: math.Vector3.length_squared
  id: ref/math#pygame.math.Vector3.length_squared
  summary: returns the squared Euclidean length of the vector
  belongs_to: math
  description: |-
    length_squared()

    returns the squared Euclidean length of the vector.

    length_squared() -\> float

    calculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length_squared()``==``vec.x**2``+``vec.y**2``+``vec.z**2`. This is faster than `vec.length()` because it avoids the square root.
- name: math.Vector3.lerp
  id: ref/math#pygame.math.Vector3.lerp
  summary: returns a linear interpolation to the given vector
  belongs_to: math
  description: |-
    lerp()

    returns a linear interpolation to the given vector.

    lerp(Vector3, float) -\> Vector3

    Returns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between `0` and `1`, where `0` means self and `1` means other will be returned.
- name: math.Vector3.magnitude
  id: ref/math#pygame.math.Vector3.magnitude
  summary: returns the Euclidean magnitude of the vector
  belongs_to: math
  description: |-
    magnitude()

    returns the Euclidean magnitude of the vector.

    magnitude() -\> float

    calculates the magnitude of the vector which follows from the theorem: `vec.magnitude()``==``math.sqrt(vec.x**2``+``vec.y**2``+``vec.z**2)`
- name: math.Vector3.magnitude_squared
  id: ref/math#pygame.math.Vector3.magnitude_squared
  summary: returns the squared Euclidean magnitude of the vector
  belongs_to: math
  description: |-
    magnitude_squared()

    returns the squared Euclidean magnitude of the vector.

    magnitude_squared() -\> float

    calculates the magnitude of the vector which follows from the theorem: `vec.magnitude_squared()``==``vec.x**2``+``vec.y**2``+``vec.z**2`. This is faster than `vec.magnitude()` because it avoids the square root.
- name: math.Vector3.move_towards
  id: ref/math#pygame.math.Vector3.move_towards
  summary: returns a vector moved toward the target by a given distance
  belongs_to: math
  description: |-
    move_towards()

    returns a vector moved toward the target by a given distance.

    move_towards(Vector3, float) -\> Vector3

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards feedback with authors](https://github.com/pygame/pygame/pull/2929)

    Returns a Vector which is moved towards the given Vector by a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.

    New in pygame 2.1.3.
- name: math.Vector3.move_towards_ip
  id: ref/math#pygame.math.Vector3.move_towards_ip
  summary: moves the vector toward its target at a given distance
  belongs_to: math
  description: |-
    move_towards_ip()

    moves the vector toward its target at a given distance.

    move_towards_ip(Vector3, float) -\> None

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards_ip feedback with authors](https://github.com/pygame/pygame/pull/2929)

    Moves itself toward the given Vector at a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.

    New in pygame 2.1.3.
- name: math.Vector3.normalize
  id: ref/math#pygame.math.Vector3.normalize
  summary: returns a vector with the same direction but length 1
  belongs_to: math
  description: |-
    normalize()

    returns a vector with the same direction but length 1.

    normalize() -\> Vector3

    Returns a new vector that has `length` equal to `1` and the same direction as self.
- name: math.Vector3.normalize_ip
  id: ref/math#pygame.math.Vector3.normalize_ip
  summary: normalizes the vector in place so that its length is 1
  belongs_to: math
  description: |-
    normalize_ip()

    normalizes the vector in place so that its length is 1.

    normalize_ip() -\> None

    Normalizes the vector so that it has `length` equal to `1`. The direction of the vector is not changed.
- name: math.Vector3.project
  id: ref/math#pygame.math.Vector3.project
  summary: projects a vector onto another
  belongs_to: math
  description: |-
    project()

    projects a vector onto another.

    project(Vector3) -\> Vector3

    Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). For a more detailed explanation see [Wikipedia](https://en.wikipedia.org/wiki/Vector_projection).

    New in pygame 2.0.2.
- name: math.Vector3.reflect
  id: ref/math#pygame.math.Vector3.reflect
  summary: returns a vector reflected of a given normal
  belongs_to: math
  description: |-
    reflect()

    returns a vector reflected of a given normal.

    reflect(Vector3) -\> Vector3

    Returns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.
- name: math.Vector3.reflect_ip
  id: ref/math#pygame.math.Vector3.reflect_ip
  summary: reflect the vector of a given normal in place
  belongs_to: math
  description: |-
    reflect_ip()

    reflect the vector of a given normal in place.

    reflect_ip(Vector3) -\> None

    Changes the direction of self as if it would have been reflected of a surface with the given surface normal.
- name: math.Vector3.rotate
  id: ref/math#pygame.math.Vector3.rotate
  summary: rotates a vector by a given angle in degrees
  belongs_to: math
  description: |-
    rotate()

    rotates a vector by a given angle in degrees.

    rotate(angle, Vector3) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_ip
  id: ref/math#pygame.math.Vector3.rotate_ip
  summary: rotates the vector by a given angle in degrees in place
  belongs_to: math
  description: |-
    rotate_ip()

    rotates the vector by a given angle in degrees in place.

    rotate_ip(angle, Vector3) -\> None

    Rotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_ip_rad
  id: ref/math#pygame.math.Vector3.rotate_ip_rad
  summary: rotates the vector by a given angle in radians in place
  belongs_to: math
  description: |-
    rotate_ip_rad()

    rotates the vector by a given angle in radians in place.

    rotate_ip_rad(angle, Vector3) -\> None

    DEPRECATED: Use rotate_rad_ip() instead.

    New in pygame 2.0.0.

    Deprecated since pygame 2.1.1.
- name: math.Vector3.rotate_rad
  id: ref/math#pygame.math.Vector3.rotate_rad
  summary: rotates a vector by a given angle in radians
  belongs_to: math
  description: |-
    rotate_rad()

    rotates a vector by a given angle in radians.

    rotate_rad(angle, Vector3) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.0.0.
- name: math.Vector3.rotate_rad_ip
  id: ref/math#pygame.math.Vector3.rotate_rad_ip
  summary: rotates the vector by a given angle in radians in place
  belongs_to: math
  description: |-
    rotate_rad_ip()

    rotates the vector by a given angle in radians in place.

    rotate_rad_ip(angle, Vector3) -\> None

    Rotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.1.1.
- name: math.Vector3.rotate_x
  id: ref/math#pygame.math.Vector3.rotate_x
  summary: rotates a vector around the x-axis by the angle in degrees
  belongs_to: math
  description: |-
    rotate_x()

    rotates a vector around the x-axis by the angle in degrees.

    rotate_x(angle) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_x_ip
  id: ref/math#pygame.math.Vector3.rotate_x_ip
  summary: rotates the vector around the x-axis by the angle in degrees in place
  belongs_to: math
  description: |-
    rotate_x_ip()

    rotates the vector around the x-axis by the angle in degrees in place.

    rotate_x_ip(angle) -\> None

    Rotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_x_ip_rad
  id: ref/math#pygame.math.Vector3.rotate_x_ip_rad
  summary: rotates the vector around the x-axis by the angle in radians in place
  belongs_to: math
  description: |-
    rotate_x_ip_rad()

    rotates the vector around the x-axis by the angle in radians in place.

    rotate_x_ip_rad(angle) -\> None

    DEPRECATED: Use rotate_x_rad_ip() instead.

    New in pygame 2.0.0.

    Deprecated since pygame 2.1.1.
- name: math.Vector3.rotate_x_rad
  id: ref/math#pygame.math.Vector3.rotate_x_rad
  summary: rotates a vector around the x-axis by the angle in radians
  belongs_to: math
  description: |-
    rotate_x_rad()

    rotates a vector around the x-axis by the angle in radians.

    rotate_x_rad(angle) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.0.0.
- name: math.Vector3.rotate_x_rad_ip
  id: ref/math#pygame.math.Vector3.rotate_x_rad_ip
  summary: rotates the vector around the x-axis by the angle in radians in place
  belongs_to: math
  description: |-
    rotate_x_rad_ip()

    rotates the vector around the x-axis by the angle in radians in place.

    rotate_x_rad_ip(angle) -\> None

    Rotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.1.1.
- name: math.Vector3.rotate_y
  id: ref/math#pygame.math.Vector3.rotate_y
  summary: rotates a vector around the y-axis by the angle in degrees
  belongs_to: math
  description: |-
    rotate_y()

    rotates a vector around the y-axis by the angle in degrees.

    rotate_y(angle) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_y_ip
  id: ref/math#pygame.math.Vector3.rotate_y_ip
  summary: rotates the vector around the y-axis by the angle in degrees in place
  belongs_to: math
  description: |-
    rotate_y_ip()

    rotates the vector around the y-axis by the angle in degrees in place.

    rotate_y_ip(angle) -\> None

    Rotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_y_ip_rad
  id: ref/math#pygame.math.Vector3.rotate_y_ip_rad
  summary: rotates the vector around the y-axis by the angle in radians in place
  belongs_to: math
  description: |-
    rotate_y_ip_rad()

    rotates the vector around the y-axis by the angle in radians in place.

    rotate_y_ip_rad(angle) -\> None

    DEPRECATED: Use rotate_y_rad_ip() instead.

    New in pygame 2.0.0.

    Deprecated since pygame 2.1.1.
- name: math.Vector3.rotate_y_rad
  id: ref/math#pygame.math.Vector3.rotate_y_rad
  summary: rotates a vector around the y-axis by the angle in radians
  belongs_to: math
  description: |-
    rotate_y_rad()

    rotates a vector around the y-axis by the angle in radians.

    rotate_y_rad(angle) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.0.0.
- name: math.Vector3.rotate_y_rad_ip
  id: ref/math#pygame.math.Vector3.rotate_y_rad_ip
  summary: rotates the vector around the y-axis by the angle in radians in place
  belongs_to: math
  description: |-
    rotate_y_rad_ip()

    rotates the vector around the y-axis by the angle in radians in place.

    rotate_y_rad_ip(angle) -\> None

    Rotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.1.1.
- name: math.Vector3.rotate_z
  id: ref/math#pygame.math.Vector3.rotate_z
  summary: rotates a vector around the z-axis by the angle in degrees
  belongs_to: math
  description: |-
    rotate_z()

    rotates a vector around the z-axis by the angle in degrees.

    rotate_z(angle) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_z_ip
  id: ref/math#pygame.math.Vector3.rotate_z_ip
  summary: rotates the vector around the z-axis by the angle in degrees in place
  belongs_to: math
  description: |-
    rotate_z_ip()

    rotates the vector around the z-axis by the angle in degrees in place.

    rotate_z_ip(angle) -\> None

    Rotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).
- name: math.Vector3.rotate_z_ip_rad
  id: ref/math#pygame.math.Vector3.rotate_z_ip_rad
  summary: rotates the vector around the z-axis by the angle in radians in place
  belongs_to: math
  description: |-
    rotate_z_ip_rad()

    rotates the vector around the z-axis by the angle in radians in place.

    rotate_z_ip_rad(angle) -\> None

    DEPRECATED: Use rotate_z_rad_ip() instead.

    Deprecated since pygame 2.1.1.
- name: math.Vector3.rotate_z_rad
  id: ref/math#pygame.math.Vector3.rotate_z_rad
  summary: rotates a vector around the z-axis by the angle in radians
  belongs_to: math
  description: |-
    rotate_z_rad()

    rotates a vector around the z-axis by the angle in radians.

    rotate_z_rad(angle) -\> Vector3

    Returns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.0.0.
- name: math.Vector3.rotate_z_rad_ip
  id: ref/math#pygame.math.Vector3.rotate_z_rad_ip
  summary: rotates the vector around the z-axis by the angle in radians in place
  belongs_to: math
  description: |-
    rotate_z_rad_ip()

    rotates the vector around the z-axis by the angle in radians in place.

    rotate_z_rad_ip(angle) -\> None

    Rotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).

    New in pygame 2.1.1.
- name: math.Vector3.scale_to_length
  id: ref/math#pygame.math.Vector3.scale_to_length
  summary: scales the vector to a given length
  belongs_to: math
  description: |-
    scale_to_length()

    scales the vector to a given length.

    scale_to_length(float) -\> None

    Scales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length `0`. If the vector is the zero vector (i.e. has length `0` thus no direction) a `ValueError` is raised.
- name: math.Vector3.slerp
  id: ref/math#pygame.math.Vector3.slerp
  summary: returns a spherical interpolation to the given vector
  belongs_to: math
  description: |-
    slerp()

    returns a spherical interpolation to the given vector.

    slerp(Vector3, float) -\> Vector3

    Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range `[-1,``1]`. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.
- name: math.Vector3.update
  id: ref/math#pygame.math.Vector3.update
  summary: Sets the coordinates of the vector
  belongs_to: math
  description: |-
    update()

    Sets the coordinates of the vector.

    update() -\> None

    update(int) -\> None

    update(float) -\> None

    update(Vector3) -\> None

    update(x, y, z) -\> None

    update((x, y, z)) -\> None

    Sets coordinates x, y, and z in place.

    New in pygame 1.9.5.
- name: midi
  id: ref/midi
  summary: pygame.midi pygame module for interacting with midi input and output
  description: "pygame.midi  \npygame module for interacting with midi input and output.\n\nNew in pygame 1.9.0.\n\nThe midi module can send output to midi devices and get input from midi devices. It can also list midi devices on the system.\n\nThe midi module supports real and virtual midi devices.\n\nIt uses the portmidi library. Is portable to which ever platforms portmidi supports (currently Windows, Mac OS X, and Linux).\n\nThis uses pyportmidi for now, but may use its own bindings at some point in the future. The pyportmidi bindings are included with pygame.\n\n  \n\nNew in pygame 2.0.0.\n\nThese are pygame events ([`pygame.event`](event#module-pygame.event)) reserved for midi use. The `MIDIIN` event is used by [`pygame.midi.midis2events()`](#pygame.midi.midis2events) when converting midi events to pygame events.\n\n``` python\nMIDIIN\nMIDIOUT\n```\n\n  \n\npygame.midi.init()  \ninitialize the midi module\n\ninit() -\\> None\n\nInitializes the [`pygame.midi`](#module-pygame.midi) module. Must be called before using the [`pygame.midi`](#module-pygame.midi) module.\n\nIt is safe to call this more than once.\n\npygame.midi.quit()  \nuninitialize the midi module\n\nquit() -\\> None\n\nUninitializes the [`pygame.midi`](#module-pygame.midi) module. If [`pygame.midi.init()`](#pygame.midi.init) was called to initialize the [`pygame.midi`](#module-pygame.midi) module, then this function will be called automatically when your program exits.\n\nIt is safe to call this function more than once.\n\npygame.midi.get_init()  \nreturns True if the midi module is currently initialized\n\nget_init() -\\> bool\n\nGets the initialization state of the [`pygame.midi`](#module-pygame.midi) module.\n\nReturns  \n`True` if the [`pygame.midi`](#module-pygame.midi) module is currently initialized.\n\nReturn type  \nbool\n\nNew in pygame 1.9.5.\n\npygame.midi.Input  \nInput is used to get midi input from midi devices.\n\nInput(device_id) -\\> None\n\nInput(device_id, buffer_size) -\\> None\n\nParameters  \n- **device_id** (*int*) -- midi device id\n\n- **buffer_size** (*int*) -- (optional) the number of input events to be buffered\n\nclose()  \ncloses a midi stream, flushing any pending buffers.\n\nclose() -\\> None\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\npoll()  \nreturns True if there's data, or False if not.\n\npoll() -\\> bool\n\nUsed to indicate if any data exists.\n\nReturns  \n`True` if there is data, `False` otherwise\n\nReturn type  \nbool\n\nRaises  \n[**MidiException**](#pygame.midi.MidiException \"pygame.midi.MidiException\") -- on error\n\nread()  \nreads num_events midi events from the buffer.\n\nread(num_events) -\\> midi_event_list\n\nReads from the input buffer and gives back midi events.\n\nParameters  \n**num_events** (*int*) -- number of input events to read\n\nReturns  \nthe format for midi_event_list is `[[[status,`` ``data1,`` ``data2,`` ``data3],`` ``timestamp],`` ``...]`\n\nReturn type  \nlist\n\npygame.midi.Output  \nOutput is used to send midi to an output device\n\nOutput(device_id) -\\> None\n\nOutput(device_id, latency=0) -\\> None\n\nOutput(device_id, buffer_size=256) -\\> None\n\nOutput(device_id, latency, buffer_size) -\\> None\n\nThe `buffer_size` specifies the number of output events to be buffered waiting for output. In some cases (see below) PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored.\n\n`latency` is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If `latency` is \\<\\<0, 0 is assumed.\n\nIf `latency` is zero, timestamps are ignored and all output is delivered immediately. If `latency` is greater than zero, output is delayed until the message timestamp plus the `latency`. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.\n\nNote\n\nTime is measured relative to the time source indicated by time_proc. Timestamps are absolute, not relative delays or offsets.\n\nabort()  \nterminates outgoing messages immediately\n\nabort() -\\> None\n\nThe caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time.\n\nclose()  \ncloses a midi stream, flushing any pending buffers.\n\nclose() -\\> None\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nnote_off()  \nturns a midi note off (note must be on)\n\nnote_off(note, velocity=None, channel=0) -\\> None\n\nTurn a note off in the output stream. The note must already be on for this to work correctly.\n\nnote_on()  \nturns a midi note on (note must be off)\n\nnote_on(note, velocity=None, channel=0) -\\> None\n\nTurn a note on in the output stream. The note must already be off for this to work correctly.\n\nset_instrument()  \nselect an instrument, with a value between 0 and 127\n\nset_instrument(instrument_id, channel=0) -\\> None\n\nSelect an instrument.\n\npitch_bend()  \nmodify the pitch of a channel.\n\nset_instrument(value=0, channel=0) -\\> None\n\nAdjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means \"no change\", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).\n\nIf no value is given, the pitch bend is returned to \"no change\".\n\nNew in pygame 1.9.4.\n\nwrite()  \nwrites a list of midi data to the Output\n\nwrite(data) -\\> None\n\nWrites series of MIDI information in the form of a list.\n\nParameters  \n**data** (*list*) -- data to write, the expected format is `[[[status,`` ``data1=0,`` ``data2=0,`` ``...],`` ``timestamp],`` ``...]` with the `data#` fields being optional\n\nRaises  \n**IndexError** -- if more than 1024 elements in the data list\n\nExample:\n\n``` python\n# Program change at time 20000 and 500ms later send note 65 with\n# velocity 100.\nwrite([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])\n```\n\nNote\n\n- Timestamps will be ignored if latency = 0\n\n- To get a note to play immediately, send MIDI info with timestamp read from function Time\n\n- Optional data fields: `write([[[0xc0,`` ``0,`` ``0],`` ``20000]])` is equivalent to `write([[[0xc0],`` ``20000]])`\n\nwrite_short()  \nwrites up to 3 bytes of midi data to the Output\n\nwrite_short(status) -\\> None\n\nwrite_short(status, data1=0, data2=0) -\\> None\n\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and assumed to be 0 if omitted.\n\nExamples of status byte values:\n\n``` python\n0xc0  # program change\n0x90  # note on\n# etc.\n```\n\nExample:\n\n``` python\n# note 65 on with velocity 100\nwrite_short(0x90, 65, 100)\n```\n\nwrite_sys_ex()  \nwrites a timestamped system-exclusive midi message.\n\nwrite_sys_ex(when, msg) -\\> None\n\nWrites a timestamped system-exclusive midi message.\n\nParameters  \n- **msg** (*list\\[int\\] or* *str*) -- midi message\n\n- **when** -- timestamp in milliseconds\n\nExample:\n\n``` python\nmidi_output.write_sys_ex(0, '\\xF0\\x7D\\x10\\x11\\x12\\x13\\xF7')\n\n# is equivalent to\n\nmidi_output.write_sys_ex(pygame.midi.time(),\n                         [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])\n```\n\npygame.midi.get_count()  \ngets the number of devices.\n\nget_count() -\\> num_devices\n\nDevice ids range from 0 to `get_count()`` ``-`` ``1`\n\npygame.midi.get_default_input_id()  \ngets default input device number\n\nget_default_input_id() -\\> default_id\n\nThe following describes the usage details for this function and the [`get_default_output_id()`](#pygame.midi.get_default_output_id \"pygame.midi.get_default_output_id\") function.\n\nReturn the default device ID or `-1` if there are no devices. The result can be passed to the [`Input`](#pygame.midi.Input \"pygame.midi.Input\")/[`Output`](#pygame.midi.Output \"pygame.midi.Output\") class.\n\nOn a PC the user can specify a default device by setting an environment variable. To use device \\#1, for example:\n\n``` python\nset PM_RECOMMENDED_INPUT_DEVICE=1\nor\nset PM_RECOMMENDED_OUTPUT_DEVICE=1\n```\n\nThe user should first determine the available device ID by using the supplied application \"testin\" or \"testout\".\n\nIn general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if `PM_RECOMMENDED_INPUT_DEVICE` (or `PM_RECOMMENDED_OUTPUT_DEVICE`) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:\n\n``` python\nHKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device\nor\nHKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device\n```\n\nThe number of the first device with a substring that matches the string exactly is returned. For example, if the string in the registry is \"USB\" and device 1 is named \"In USB MidiSport 1x1\", then that will be the default input because it contains the string \"USB\".\n\nIn addition to the name, [`get_device_info()`](#pygame.midi.get_device_info \"pygame.midi.get_device_info\") returns \"interf\", which is the interface name. The \"interface\" is the underlying software system or API used by PortMidi to access devices. Supported interfaces:\n\n``` python\nMMSystem   # the only Win32 interface currently supported\nALSA       # the only Linux interface currently supported\nCoreMIDI   # the only Mac OS X interface currently supported\n# DirectX - not implemented\n# OSS     - not implemented\n```\n\nTo specify both the interface and the device name in the registry, separate the two with a comma and a space. The string before the comma must be a substring of the \"interf\" string and the string after the space must be a substring of the \"name\" name string in order to match the device. e.g.:\n\n``` python\nMMSystem, In USB MidiSport 1x1\n```\n\nNote\n\nIn the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID).\n\npygame.midi.get_default_output_id()  \ngets default output device number\n\nget_default_output_id() -\\> default_id\n\nSee [`get_default_input_id()`](#pygame.midi.get_default_input_id \"pygame.midi.get_default_input_id\") for usage details.\n\npygame.midi.get_device_info()  \nreturns information about a midi device\n\nget_device_info(an_id) -\\> (interf, name, input, output, opened)\n\nget_device_info(an_id) -\\> None\n\nGets the device info for a given id.\n\nParameters  \n**an_id** (*int*) -- id of the midi device being queried\n\nReturns  \nif the id is out of range `None` is returned, otherwise a tuple of (interf, name, input, output, opened) is returned.\n\n> - interf: string describing the device interface (e.g. 'ALSA')\n>\n> - name: string name of the device (e.g. 'Midi Through Port-0')\n>\n> - input: 1 if the device is an input device, otherwise 0\n>\n> - output: 1 if the device is an output device, otherwise 0\n>\n> - opened: 1 if the device is opened, otherwise 0\n\nReturn type  \ntuple or None\n\npygame.midi.midis2events()  \nconverts midi events to pygame events\n\nmidis2events(midi_events, device_id) -\\> \\[Event, ...\\]\n\nTakes a sequence of midi events and returns list of pygame events.\n\nThe `midi_events` data is expected to be a sequence of `((status,`` ``data1,`` ``data2,`` ``data3),`` ``timestamp)` midi events (all values required).\n\nReturns  \na list of pygame events of event type `MIDIIN`\n\nReturn type  \nlist\n\npygame.midi.time()  \nreturns the current time in ms of the PortMidi timer\n\ntime() -\\> time\n\nThe time is reset to 0 when the [`pygame.midi`](#module-pygame.midi) module is initialized.\n\npygame.midi.frequency_to_midi()  \nConverts a frequency into a MIDI note. Rounds to the closest midi note.\n\nfrequency_to_midi(midi_note) -\\> midi_note\n\nexample:\n\n``` python\nfrequency_to_midi(27.5) == 21\n```\n\nNew in pygame 1.9.5.\n\npygame.midi.midi_to_frequency()  \nConverts a midi note to a frequency.\n\nmidi_to_frequency(midi_note) -\\> frequency\n\nexample:\n\n``` python\nmidi_to_frequency(21) == 27.5\n```\n\nNew in pygame 1.9.5.\n\npygame.midi.midi_to_ansi_note()  \nReturns the Ansi Note name for a midi number.\n\nmidi_to_ansi_note(midi_note) -\\> ansi_note\n\nexample:\n\n``` python\nmidi_to_ansi_note(21) == 'A0'\n```\n\nNew in pygame 1.9.5.\n\nexception pygame.midi.MidiException  \nexception that pygame.midi functions and classes can raise\n\nMidiException(errno) -\\> None\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/midi.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/midi.html](https://www.pygame.org/docs/ref/midi.html)"
- name: midi.frequency_to_midi
  id: ref/midi#pygame.midi.frequency_to_midi
  summary: Converts a frequency into a MIDI note
  belongs_to: midi
  description: |-
    pygame.midi.frequency_to_midi()

    Converts a frequency into a MIDI note. Rounds to the closest midi note.

    frequency_to_midi(midi_note) -\> midi_note

    example:

    ``` python
    frequency_to_midi(27.5) == 21
    ```

    New in pygame 1.9.5.
- name: midi.get_count
  id: ref/midi#pygame.midi.get_count
  summary: gets the number of devices
  belongs_to: midi
  description: |-
    pygame.midi.get_count()

    gets the number of devices.

    get_count() -\> num_devices

    Device ids range from 0 to `get_count()``-``1`
- name: midi.get_default_input_id
  id: ref/midi#pygame.midi.get_default_input_id
  summary: The following describes the usage details for this function and the get_default_output_id() function
  belongs_to: midi
  description: |-
    pygame.midi.get_default_input_id()

    gets default input device number

    get_default_input_id() -\> default_id

    The following describes the usage details for this function and the [`get_default_output_id()`](#pygame.midi.get_default_output_id "pygame.midi.get_default_output_id") function.

    Return the default device ID or `-1` if there are no devices. The result can be passed to the [`Input`](#pygame.midi.Input "pygame.midi.Input")/[`Output`](#pygame.midi.Output "pygame.midi.Output") class.

    On a PC the user can specify a default device by setting an environment variable. To use device \#1, for example:

    ``` python
    set PM_RECOMMENDED_INPUT_DEVICE=1
    or
    set PM_RECOMMENDED_OUTPUT_DEVICE=1
    ```

    The user should first determine the available device ID by using the supplied application "testin" or "testout".

    In general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if `PM_RECOMMENDED_INPUT_DEVICE` (or `PM_RECOMMENDED_OUTPUT_DEVICE`) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:

    ``` python
    HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
    or
    HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device
    ```

    The number of the first device with a substring that matches the string exactly is returned. For example, if the string in the registry is "USB" and device 1 is named "In USB MidiSport 1x1", then that will be the default input because it contains the string "USB".

    In addition to the name, [`get_device_info()`](#pygame.midi.get_device_info "pygame.midi.get_device_info") returns "interf", which is the interface name. The "interface" is the underlying software system or API used by PortMidi to access devices. Supported interfaces:

    ``` python
    MMSystem   # the only Win32 interface currently supported
    ALSA       # the only Linux interface currently supported
    CoreMIDI   # the only Mac OS X interface currently supported
    # DirectX - not implemented
    # OSS     - not implemented
    ```

    To specify both the interface and the device name in the registry, separate the two with a comma and a space. The string before the comma must be a substring of the "interf" string and the string after the space must be a substring of the "name" name string in order to match the device. e.g.:

    ``` python
    MMSystem, In USB MidiSport 1x1
    ```

    Note

    In the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID).
- name: midi.get_default_output_id
  id: ref/midi#pygame.midi.get_default_output_id
  summary: See get_default_input_id() for usage details
  belongs_to: midi
  description: |-
    pygame.midi.get_default_output_id()

    gets default output device number

    get_default_output_id() -\> default_id

    See [`get_default_input_id()`](#pygame.midi.get_default_input_id "pygame.midi.get_default_input_id") for usage details.
- name: midi.get_device_info
  id: ref/midi#pygame.midi.get_device_info
  summary: Gets the device info for a given id
  belongs_to: midi
  description: |-
    pygame.midi.get_device_info()

    returns information about a midi device

    get_device_info(an_id) -\> (interf, name, input, output, opened)

    get_device_info(an_id) -\> None

    Gets the device info for a given id.

    Parameters

    **an_id** (*int*) -- id of the midi device being queried

    Returns

    if the id is out of range `None` is returned, otherwise a tuple of (interf, name, input, output, opened) is returned.

    > - interf: string describing the device interface (e.g. 'ALSA')
    >
    > - name: string name of the device (e.g. 'Midi Through Port-0')
    >
    > - input: 1 if the device is an input device, otherwise 0
    >
    > - output: 1 if the device is an output device, otherwise 0
    >
    > - opened: 1 if the device is opened, otherwise 0

    Return type

    tuple or None
- name: midi.get_init
  id: ref/midi#pygame.midi.get_init
  summary: Gets the initialization state of the pygame.midi module
  belongs_to: midi
  description: |-
    pygame.midi.get_init()

    returns True if the midi module is currently initialized

    get_init() -\> bool

    Gets the initialization state of the [`pygame.midi`](#module-pygame.midi) module.

    Returns

    `True` if the [`pygame.midi`](#module-pygame.midi) module is currently initialized.

    Return type

    bool

    New in pygame 1.9.5.
- name: midi.init
  id: ref/midi#pygame.midi.init
  summary: Initializes the pygame.midi module
  belongs_to: midi
  description: |-
    pygame.midi.init()

    initialize the midi module

    init() -\> None

    Initializes the [`pygame.midi`](#module-pygame.midi) module. Must be called before using the [`pygame.midi`](#module-pygame.midi) module.

    It is safe to call this more than once.
- name: midi.Input
  id: ref/midi#pygame.midi.Input
  summary: Input is used to get midi input from midi devices
  belongs_to: midi
  description: |-
    pygame.midi.Input

    Input is used to get midi input from midi devices.

    Input(device_id) -\> None

    Input(device_id, buffer_size) -\> None

    Parameters

    - **device_id** (*int*) -- midi device id

    - **buffer_size** (*int*) -- (optional) the number of input events to be buffered
- name: midi.Input.close
  id: ref/midi#pygame.midi.Input.close
  summary: closes a midi stream, flushing any pending buffers
  belongs_to: midi
  description: |-
    close()

    closes a midi stream, flushing any pending buffers.

    close() -\> None

    PortMidi attempts to close open streams when the application exits.

    Note

    This is particularly difficult under Windows.
- name: midi.Input.poll
  id: ref/midi#pygame.midi.Input.poll
  summary: returns True if there's data, or False if not
  belongs_to: midi
  description: |-
    poll()

    returns True if there's data, or False if not.

    poll() -\> bool

    Used to indicate if any data exists.

    Returns

    `True` if there is data, `False` otherwise

    Return type

    bool

    Raises

    [**MidiException**](#pygame.midi.MidiException "pygame.midi.MidiException") -- on error
- name: midi.Input.read
  id: ref/midi#pygame.midi.Input.read
  summary: reads num_events midi events from the buffer
  belongs_to: midi
  description: |-
    read()

    reads num_events midi events from the buffer.

    read(num_events) -\> midi_event_list

    Reads from the input buffer and gives back midi events.

    Parameters

    **num_events** (*int*) -- number of input events to read

    Returns

    the format for midi_event_list is `[[[status,``data1,``data2,``data3],``timestamp],``...]`

    Return type

    list
- name: midi.midi_to_ansi_note
  id: ref/midi#pygame.midi.midi_to_ansi_note
  summary: Returns the Ansi Note name for a midi number
  belongs_to: midi
  description: |-
    pygame.midi.midi_to_ansi_note()

    Returns the Ansi Note name for a midi number.

    midi_to_ansi_note(midi_note) -\> ansi_note

    example:

    ``` python
    midi_to_ansi_note(21) == 'A0'
    ```

    New in pygame 1.9.5.
- name: midi.midi_to_frequency
  id: ref/midi#pygame.midi.midi_to_frequency
  summary: Converts a midi note to a frequency
  belongs_to: midi
  description: |-
    pygame.midi.midi_to_frequency()

    Converts a midi note to a frequency.

    midi_to_frequency(midi_note) -\> frequency

    example:

    ``` python
    midi_to_frequency(21) == 27.5
    ```

    New in pygame 1.9.5.
- name: midi.MidiException
  id: ref/midi#pygame.midi.MidiException
  summary: © Pygame Developers
  belongs_to: midi
  description: "exception pygame.midi.MidiException\n\nexception that pygame.midi functions and classes can raise\n\nMidiException(errno) -\\> None\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/midi.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/midi.html](https://www.pygame.org/docs/ref/midi.html)"
- name: midi.midis2events
  id: ref/midi#pygame.midi.midis2events
  summary: Takes a sequence of midi events and returns list of pygame events
  belongs_to: midi
  description: |-
    pygame.midi.midis2events()

    converts midi events to pygame events

    midis2events(midi_events, device_id) -\> \[Event, ...\]

    Takes a sequence of midi events and returns list of pygame events.

    The `midi_events` data is expected to be a sequence of `((status,``data1,``data2,``data3),``timestamp)` midi events (all values required).

    Returns

    a list of pygame events of event type `MIDIIN`

    Return type

    list
- name: midi.Output
  id: ref/midi#pygame.midi.Output
  summary: The buffer_size specifies the number of output events to be buffered waiting for output
  belongs_to: midi
  description: |-
    pygame.midi.Output

    Output is used to send midi to an output device

    Output(device_id) -\> None

    Output(device_id, latency=0) -\> None

    Output(device_id, buffer_size=256) -\> None

    Output(device_id, latency, buffer_size) -\> None

    The `buffer_size` specifies the number of output events to be buffered waiting for output. In some cases (see below) PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored.

    `latency` is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If `latency` is \<\<0, 0 is assumed.

    If `latency` is zero, timestamps are ignored and all output is delivered immediately. If `latency` is greater than zero, output is delayed until the message timestamp plus the `latency`. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.

    Note

    Time is measured relative to the time source indicated by time_proc. Timestamps are absolute, not relative delays or offsets.
- name: midi.Output.abort
  id: ref/midi#pygame.midi.Output.abort
  summary: The caller should immediately close the output port; this call may result in transmission of a partial midi message
  belongs_to: midi
  description: |-
    abort()

    terminates outgoing messages immediately

    abort() -\> None

    The caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time.
- name: midi.Output.close
  id: ref/midi#pygame.midi.Output.close
  summary: closes a midi stream, flushing any pending buffers
  belongs_to: midi
  description: |-
    close()

    closes a midi stream, flushing any pending buffers.

    close() -\> None

    PortMidi attempts to close open streams when the application exits.

    Note

    This is particularly difficult under Windows.
- name: midi.Output.note_off
  id: ref/midi#pygame.midi.Output.note_off
  summary: Turn a note off in the output stream
  belongs_to: midi
  description: |-
    note_off()

    turns a midi note off (note must be on)

    note_off(note, velocity=None, channel=0) -\> None

    Turn a note off in the output stream. The note must already be on for this to work correctly.
- name: midi.Output.note_on
  id: ref/midi#pygame.midi.Output.note_on
  summary: Turn a note on in the output stream
  belongs_to: midi
  description: |-
    note_on()

    turns a midi note on (note must be off)

    note_on(note, velocity=None, channel=0) -\> None

    Turn a note on in the output stream. The note must already be off for this to work correctly.
- name: midi.Output.pitch_bend
  id: ref/midi#pygame.midi.Output.pitch_bend
  summary: modify the pitch of a channel
  belongs_to: midi
  description: |-
    pitch_bend()

    modify the pitch of a channel.

    set_instrument(value=0, channel=0) -\> None

    Adjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means "no change", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).

    If no value is given, the pitch bend is returned to "no change".

    New in pygame 1.9.4.
- name: midi.Output.set_instrument
  id: ref/midi#pygame.midi.Output.set_instrument
  summary: Select an instrument
  belongs_to: midi
  description: |-
    set_instrument()

    select an instrument, with a value between 0 and 127

    set_instrument(instrument_id, channel=0) -\> None

    Select an instrument.
- name: midi.Output.write
  id: ref/midi#pygame.midi.Output.write
  summary: Writes series of MIDI information in the form of a list
  belongs_to: midi
  description: |-
    write()

    writes a list of midi data to the Output

    write(data) -\> None

    Writes series of MIDI information in the form of a list.

    Parameters

    **data** (*list*) -- data to write, the expected format is `[[[status,``data1=0,``data2=0,``...],``timestamp],``...]` with the `data#` fields being optional

    Raises

    **IndexError** -- if more than 1024 elements in the data list

    Example:

    ``` python
    # Program change at time 20000 and 500ms later send note 65 with
    # velocity 100.
    write([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])
    ```

    Note

    - Timestamps will be ignored if latency = 0

    - To get a note to play immediately, send MIDI info with timestamp read from function Time

    - Optional data fields: `write([[[0xc0,``0,``0],``20000]])` is equivalent to `write([[[0xc0],``20000]])`
- name: midi.Output.write_short
  id: ref/midi#pygame.midi.Output.write_short
  summary: Output MIDI information of 3 bytes or less
  belongs_to: midi
  description: |-
    write_short()

    writes up to 3 bytes of midi data to the Output

    write_short(status) -\> None

    write_short(status, data1=0, data2=0) -\> None

    Output MIDI information of 3 bytes or less. The `data` fields are optional and assumed to be 0 if omitted.

    Examples of status byte values:

    ``` python
    0xc0  # program change
    0x90  # note on
    # etc.
    ```

    Example:

    ``` python
    # note 65 on with velocity 100
    write_short(0x90, 65, 100)
    ```
- name: midi.Output.write_sys_ex
  id: ref/midi#pygame.midi.Output.write_sys_ex
  summary: writes a timestamped system-exclusive midi message
  belongs_to: midi
  description: |-
    write_sys_ex()

    writes a timestamped system-exclusive midi message.

    write_sys_ex(when, msg) -\> None

    Writes a timestamped system-exclusive midi message.

    Parameters

    - **msg** (*list\[int\] or* *str*) -- midi message

    - **when** -- timestamp in milliseconds

    Example:

    ``` python
    midi_output.write_sys_ex(0, '\xF0\x7D\x10\x11\x12\x13\xF7')

    # is equivalent to

    midi_output.write_sys_ex(pygame.midi.time(),
                             [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])
    ```
- name: midi.quit
  id: ref/midi#pygame.midi.quit
  summary: Uninitializes the pygame.midi module
  belongs_to: midi
  description: |-
    pygame.midi.quit()

    uninitialize the midi module

    quit() -\> None

    Uninitializes the [`pygame.midi`](#module-pygame.midi) module. If [`pygame.midi.init()`](#pygame.midi.init) was called to initialize the [`pygame.midi`](#module-pygame.midi) module, then this function will be called automatically when your program exits.

    It is safe to call this function more than once.
- name: midi.time
  id: ref/midi#pygame.midi.time
  summary: The time is reset to 0 when the pygame.midi module is initialized
  belongs_to: midi
  description: |-
    pygame.midi.time()

    returns the current time in ms of the PortMidi timer

    time() -\> time

    The time is reset to 0 when the [`pygame.midi`](#module-pygame.midi) module is initialized.
- name: mixer
  id: ref/mixer
  summary: This module contains classes for loading Sound objects and controlling playback
  description: "pygame.mixer  \npygame module for loading and playing sounds\n\nThis module contains classes for loading Sound objects and controlling playback. The mixer module is optional and depends on SDL_mixer. Your program should test that [`pygame.mixer`](#module-pygame.mixer) is available and initialized before using it.\n\nThe mixer module has a limited number of channels for playback of sounds. Usually programs tell pygame to start playing audio and it selects an available channel automatically. The default is 8 simultaneous channels, but complex programs can get more precise control over the number of channels and their use.\n\nAll sound playback is mixed in background threads. When you begin to play a Sound object, it will return immediately while the sound continues to play. A single Sound object can also be actively played back multiple times.\n\nThe mixer also has a special streaming channel. This is for music playback and is accessed through the [`pygame.mixer.music`](music#module-pygame.mixer.music) module. Consider using this module for playing long running music. Unlike mixer module, the music module streams the music from the files without loading music at once into memory.\n\nThe mixer module must be initialized like other pygame modules, but it has some extra conditions. The `pygame.mixer.init()` function takes several optional arguments to control the playback rate and sample size. Pygame will default to reasonable values, but pygame cannot perform Sound resampling, so the mixer should be initialized to match the values of your audio resources.\n\n`NOTE`: For less laggy sound use a smaller buffer size. The default is set to reduce the chance of scratchy sounds on some computers. You can change the default buffer by calling [`pygame.mixer.pre_init()`](#pygame.mixer.pre_init) before [`pygame.mixer.init()`](#pygame.mixer.init) or [`pygame.init()`](pygame#pygame.init) is called. For example: `pygame.mixer.pre_init(44100,-16,2,`` ``1024)`\n\npygame.mixer.init()  \ninitialize the mixer module\n\ninit(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE \\| AUDIO_ALLOW_CHANNELS_CHANGE) -\\> None\n\nInitialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backwards compatibility, argument values of 0 are replaced with the startup defaults, except for `allowedchanges`, where -1 is used. (startup defaults may be changed by a [`pre_init()`](#pygame.mixer.pre_init \"pygame.mixer.pre_init\") call).\n\nThe size argument represents how many bits are used for each audio sample. If the value is negative then signed sample values will be used. Positive values mean unsigned audio samples will be used. An invalid value raises an exception.\n\nThe channels argument is used to specify whether to use mono or stereo. 1 for mono and 2 for stereo.\n\nThe buffer argument controls the number of internal samples used in the sound mixer. The default value should work for most cases. It can be lowered to reduce latency, but sound dropout may occur. It can be raised to larger values to ensure playback never skips, but it will impose latency on sound playback. The buffer size must be a power of two (if not it is rounded up to the next nearest power of 2).\n\nSome platforms require the [`pygame.mixer`](#module-pygame.mixer) module to be initialized after the display modules have initialized. The top level `pygame.init()` takes care of this automatically, but cannot pass any arguments to the mixer init. To solve this, mixer has a function `pygame.mixer.pre_init()` to set the proper defaults before the toplevel init is used.\n\nWhen using allowedchanges=0 it will convert the samples at runtime to match what the hardware supports. For example a sound card may not support 16bit sound samples, so instead it will use 8bit samples internally. If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change to the closest that SDL2 supports.\n\nApart from 0, allowedchanged accepts the following constants ORed together:\n\n> - AUDIO_ALLOW_FREQUENCY_CHANGE\n>\n> - AUDIO_ALLOW_FORMAT_CHANGE\n>\n> - AUDIO_ALLOW_CHANNELS_CHANGE\n>\n> - AUDIO_ALLOW_ANY_CHANGE\n\nIt is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling `pygame.mixer.quit()`.\n\nChanged in pygame 1.8: The default `buffersize` changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` changed from 3072 to 4096.\n\nChanged in pygame 2.0.0: The default `buffersize` changed from 4096 to 512.\n\nChanged in pygame 2.0.0: The default `frequency` changed from 22050 to 44100.\n\nChanged in pygame 2.0.0: `size` can be 32 (32-bit floats).\n\nChanged in pygame 2.0.0: `channels` can also be 4 or 6.\n\nNew in pygame 2.0.0: `allowedchanges`, `devicename` arguments added\n\npygame.mixer.pre_init()  \npreset the mixer init arguments\n\npre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE \\| AUDIO_ALLOW_CHANNELS_CHANGE) -\\> None\n\nCall pre_init to change the defaults used when the real `pygame.mixer.init()` is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call `pygame.mixer.pre_init()` before calling the top level `pygame.init()`. For backwards compatibility, argument values of 0 are replaced with the startup defaults, except for `allowedchanges`, where -1 is used.\n\nChanged in pygame 1.8: The default `buffersize` changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` changed from 3072 to 4096.\n\nChanged in pygame 2.0.0: The default `buffersize` changed from 4096 to 512.\n\nChanged in pygame 2.0.0: The default `frequency` changed from 22050 to 44100.\n\nNew in pygame 2.0.0: `allowedchanges`, `devicename` arguments added\n\npygame.mixer.quit()  \nuninitialize the mixer\n\nquit() -\\> None\n\nThis will uninitialize [`pygame.mixer`](#module-pygame.mixer). All playback will stop and any loaded Sound objects may not be compatible with the mixer if it is reinitialized later.\n\npygame.mixer.get_init()  \ntest if the mixer is initialized\n\nget_init() -\\> (frequency, format, channels)\n\nIf the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns `None`.\n\npygame.mixer.stop()  \nstop playback of all sound channels\n\nstop() -\\> None\n\nThis will stop all playback of all active mixer channels.\n\npygame.mixer.pause()  \ntemporarily stop playback of all sound channels\n\npause() -\\> None\n\nThis will temporarily stop all playback on the active mixer channels. The playback can later be resumed with `pygame.mixer.unpause()`\n\npygame.mixer.unpause()  \nresume paused playback of sound channels\n\nunpause() -\\> None\n\nThis will resume all active sound channels after they have been paused.\n\npygame.mixer.fadeout()  \nfade out the volume on all sounds before stopping\n\nfadeout(time) -\\> None\n\nThis will fade out the volume on all active channels over the time argument in milliseconds. After the sound is muted the playback will stop.\n\npygame.mixer.set_num_channels()  \nset the total number of playback channels\n\nset_num_channels(count) -\\> None\n\nSets the number of available channels for the mixer. The default value is 8. The value can be increased or decreased. If the value is decreased, sounds playing on the truncated channels are stopped.\n\npygame.mixer.get_num_channels()  \nget the total number of playback channels\n\nget_num_channels() -\\> count\n\nReturns the number of currently active playback channels.\n\npygame.mixer.set_reserved()  \nreserve channels from being automatically used\n\nset_reserved(count) -\\> count\n\nThe mixer can reserve any number of channels that will not be automatically selected for playback by Sounds. This means that whenever you play a Sound without specifying a channel, a reserved channel will never be used. If sounds are currently playing on the reserved channels they will not be stopped.\n\nThis allows the application to reserve a specific number of channels for important sounds that must not be dropped or have a guaranteed channel to play on.\n\nWill return number of channels actually reserved, this may be less than requested depending on the number of channels previously allocated.\n\npygame.mixer.find_channel()  \nfind an unused channel\n\nfind_channel(force=False) -\\> Channel\n\nThis will find and return an inactive Channel object. If there are no inactive Channels this function will return `None`. If there are no inactive channels and the force argument is `True`, this will find the Channel with the longest running Sound and return it.\n\npygame.mixer.get_busy()  \ntest if any sound is being mixed\n\nget_busy() -\\> bool\n\nReturns `True` if the mixer is busy mixing any channels. If the mixer is idle then this return `False`.\n\npygame.mixer.get_sdl_mixer_version()  \nget the mixer's SDL version\n\nget_sdl_mixer_version() -\\> (major, minor, patch)\n\nget_sdl_mixer_version(linked=True) -\\> (major, minor, patch)\n\nParameters  \n**linked** (*bool*) -- if `True` (default) the linked version number is returned, otherwise the compiled version number is returned\n\nReturns  \nthe mixer's SDL library version number (linked or compiled depending on the `linked` parameter) as a tuple of 3 integers `(major,`` ``minor,`` ``patch)`\n\nReturn type  \ntuple\n\nNote\n\nThe linked and compile version numbers should be the same.\n\nNew in pygame 2.0.0.\n\npygame.mixer.Sound  \nCreate a new Sound object from a file or buffer object\n\nSound(filename) -\\> Sound\n\nSound(file=filename) -\\> Sound\n\nSound(file=pathlib_path) -\\> Sound\n\nSound(buffer) -\\> Sound\n\nSound(buffer=buffer) -\\> Sound\n\nSound(object) -\\> Sound\n\nSound(file=object) -\\> Sound\n\nSound(array=object) -\\> Sound\n\nLoad a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a new buffer interface (The object is checked for a buffer interface first.)\n\nThe Sound object represents actual sound sample data. Methods that change the state of the Sound object will the all instances of the Sound playback. A Sound object also exports a new buffer interface.\n\nThe Sound can be loaded from an `OGG` audio file or from an uncompressed `WAV`.\n\nNote: The buffer will be copied internally, no data will be shared between it and the Sound object.\n\nFor now buffer and array support is consistent with `sndarray.make_sound` for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.\n\nNew in pygame 1.8: `pygame.mixer.Sound(buffer)`\n\nNew in pygame 1.9.2: [`pygame.mixer.Sound`](#pygame.mixer.Sound) keyword arguments and array interface support\n\nNew in pygame 2.0.1: pathlib.Path support on Python 3.\n\nplay()  \nbegin sound playback\n\nplay(loops=0, maxtime=0, fade_ms=0) -\\> Channel\n\nBegin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.\n\nThe loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call `stop()` to stop it).\n\nThe maxtime argument can be used to stop playback after a given number of milliseconds.\n\nThe fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.\n\nThis returns the Channel object for the channel that was selected.\n\nstop()  \nstop sound playback\n\nstop() -\\> None\n\nThis will stop the playback of this Sound on any active Channels.\n\nfadeout()  \nstop sound playback after fading out\n\nfadeout(time) -\\> None\n\nThis will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels.\n\nset_volume()  \nset the playback volume for this Sound\n\nset_volume(value) -\\> None\n\nThis will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.\n\nParameters  \n**value** (*float*) --\n\nvolume in the range of 0.0 to 1.0 (inclusive)\n\nIf value \\< 0.0, the volume will not be changed\n\nIf value \\> 1.0, the volume will be set to 1.0\n\nget_volume()  \nget the playback volume\n\nget_volume() -\\> value\n\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\nget_num_channels()  \ncount how many times this Sound is playing\n\nget_num_channels() -\\> count\n\nReturn the number of active channels this sound is playing on.\n\nget_length()  \nget the length of the Sound\n\nget_length() -\\> seconds\n\nReturn the length of this Sound in seconds.\n\nget_raw()  \nreturn a bytestring copy of the Sound samples.\n\nget_raw() -\\> bytes\n\nReturn a copy of the Sound object buffer as a bytes.\n\nNew in pygame 1.9.2.\n\npygame.mixer.Channel  \nCreate a Channel object for controlling playback\n\nChannel(id) -\\> Channel\n\nReturn a Channel object for one of the current channels. The id must be a value from 0 to the value of `pygame.mixer.get_num_channels()`.\n\nThe Channel object can be used to get fine control over the playback of Sounds. A channel can only playback a single Sound at time. Using channels is entirely optional since pygame can manage them by default.\n\nplay()  \nplay a Sound on a specific Channel\n\nplay(Sound, loops=0, maxtime=0, fade_ms=0) -\\> None\n\nThis will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.\n\nThe loops argument has the same meaning as in `Sound.play()`: it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.\n\nAs in `Sound.play()`, the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.\n\nAs in `Sound.play()`, the fade_ms argument can be used fade in the sound.\n\nstop()  \nstop playback on a Channel\n\nstop() -\\> None\n\nStop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it.\n\npause()  \ntemporarily stop playback of a channel\n\npause() -\\> None\n\nTemporarily stop the playback of sound on a channel. It can be resumed at a later time with `Channel.unpause()`\n\nunpause()  \nresume pause playback of a channel\n\nunpause() -\\> None\n\nResume the playback on a paused channel.\n\nfadeout()  \nstop playback after fading channel out\n\nfadeout(time) -\\> None\n\nStop playback of a channel after fading out the sound over the given time argument in milliseconds.\n\nset_volume()  \nset the volume of a playing channel\n\nset_volume(value) -\\> None\n\nset_volume(left, right) -\\> None\n\nSet the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.\n\nIf one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is `None`, the first argument will be the volume of both speakers.)\n\nIf the channel is playing a Sound on which `set_volume()` has also been called, both calls are taken into account. For example:\n\n``` python\nsound = pygame.mixer.Sound(\"s.wav\")\nchannel = s.play()      # Sound plays at full volume by default\nsound.set_volume(0.9)   # Now plays at 90% of full volume.\nsound.set_volume(0.6)   # Now plays at 60% (previous value replaced).\nchannel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).\n```\n\nget_volume()  \nget the volume of the playing channel\n\nget_volume() -\\> value\n\nReturn the volume of the channel for the current playing sound. This does not take into account stereo separation used by [`Channel.set_volume()`](#pygame.mixer.Channel.set_volume \"pygame.mixer.Channel.set_volume\"). The Sound object also has its own volume which is mixed with the channel.\n\nget_busy()  \ncheck if the channel is active\n\nget_busy() -\\> bool\n\nReturns `True` if the channel is actively mixing sound. If the channel is idle this returns `False`.\n\nget_sound()  \nget the currently playing Sound\n\nget_sound() -\\> Sound\n\nReturn the actual Sound object currently playing on this channel. If the channel is idle `None` is returned.\n\nqueue()  \nqueue a Sound object to follow the current\n\nqueue(Sound) -\\> None\n\nWhen a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to `Channel.stop()` or `Channel.play()`.\n\nIf there is no sound actively playing on the Channel then the Sound will begin playing immediately.\n\nget_queue()  \nreturn any Sound that is queued\n\nget_queue() -\\> Sound\n\nIf a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.\n\nset_endevent()  \nhave the channel send an event when playback stops\n\nset_endevent() -\\> None\n\nset_endevent(type) -\\> None\n\nWhen an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\nNote that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end event is sent only once: after the sound has been played \"n+1\" times (see the documentation of Sound.play).\n\nIf `Channel.stop()` or `Channel.play()` is called while the sound was still playing, the event will be posted immediately.\n\nThe type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between `pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument is given then the Channel will stop sending endevents.\n\nget_endevent()  \nget the event a channel sends when playback stops\n\nget_endevent() -\\> type\n\nReturns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mixer.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mixer.html](https://www.pygame.org/docs/ref/mixer.html)"
- name: mixer.Channel
  id: ref/mixer#pygame.mixer.Channel
  summary: Return a Channel object for one of the current channels
  belongs_to: mixer
  description: |-
    pygame.mixer.Channel

    Create a Channel object for controlling playback

    Channel(id) -\> Channel

    Return a Channel object for one of the current channels. The id must be a value from 0 to the value of `pygame.mixer.get_num_channels()`.

    The Channel object can be used to get fine control over the playback of Sounds. A channel can only playback a single Sound at time. Using channels is entirely optional since pygame can manage them by default.
- name: mixer.Channel.fadeout
  id: ref/mixer#pygame.mixer.Channel.fadeout
  summary: Stop playback of a channel after fading out the sound over the given time argument in milliseconds
  belongs_to: mixer
  description: |-
    fadeout()

    stop playback after fading channel out

    fadeout(time) -\> None

    Stop playback of a channel after fading out the sound over the given time argument in milliseconds.
- name: mixer.Channel.get_busy
  id: ref/mixer#pygame.mixer.Channel.get_busy
  summary: Returns True if the channel is actively mixing sound
  belongs_to: mixer
  description: |-
    get_busy()

    check if the channel is active

    get_busy() -\> bool

    Returns `True` if the channel is actively mixing sound. If the channel is idle this returns `False`.
- name: mixer.Channel.get_endevent
  id: ref/mixer#pygame.mixer.Channel.get_endevent
  summary: Returns the event type to be sent every time the Channel finishes playback of a Sound
  belongs_to: mixer
  description: "get_endevent()\n\nget the event a channel sends when playback stops\n\nget_endevent() -\\> type\n\nReturns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mixer.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mixer.html](https://www.pygame.org/docs/ref/mixer.html)"
- name: mixer.Channel.get_queue
  id: ref/mixer#pygame.mixer.Channel.get_queue
  summary: If a Sound is already queued on this channel it will be returned
  belongs_to: mixer
  description: |-
    get_queue()

    return any Sound that is queued

    get_queue() -\> Sound

    If a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.
- name: mixer.Channel.get_sound
  id: ref/mixer#pygame.mixer.Channel.get_sound
  summary: Return the actual Sound object currently playing on this channel
  belongs_to: mixer
  description: |-
    get_sound()

    get the currently playing Sound

    get_sound() -\> Sound

    Return the actual Sound object currently playing on this channel. If the channel is idle `None` is returned.
- name: mixer.Channel.get_volume
  id: ref/mixer#pygame.mixer.Channel.get_volume
  summary: Return the volume of the channel for the current playing sound
  belongs_to: mixer
  description: |-
    get_volume()

    get the volume of the playing channel

    get_volume() -\> value

    Return the volume of the channel for the current playing sound. This does not take into account stereo separation used by [`Channel.set_volume()`](#pygame.mixer.Channel.set_volume "pygame.mixer.Channel.set_volume"). The Sound object also has its own volume which is mixed with the channel.
- name: mixer.Channel.pause
  id: ref/mixer#pygame.mixer.Channel.pause
  summary: Temporarily stop the playback of sound on a channel
  belongs_to: mixer
  description: |-
    pause()

    temporarily stop playback of a channel

    pause() -\> None

    Temporarily stop the playback of sound on a channel. It can be resumed at a later time with `Channel.unpause()`
- name: mixer.Channel.play
  id: ref/mixer#pygame.mixer.Channel.play
  summary: This will begin playback of a Sound on a specific Channel
  belongs_to: mixer
  description: |-
    play()

    play a Sound on a specific Channel

    play(Sound, loops=0, maxtime=0, fade_ms=0) -\> None

    This will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.

    The loops argument has the same meaning as in `Sound.play()`: it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.

    As in `Sound.play()`, the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.

    As in `Sound.play()`, the fade_ms argument can be used fade in the sound.
- name: mixer.Channel.queue
  id: ref/mixer#pygame.mixer.Channel.queue
  summary: When a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished
  belongs_to: mixer
  description: |-
    queue()

    queue a Sound object to follow the current

    queue(Sound) -\> None

    When a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to `Channel.stop()` or `Channel.play()`.

    If there is no sound actively playing on the Channel then the Sound will begin playing immediately.
- name: mixer.Channel.set_endevent
  id: ref/mixer#pygame.mixer.Channel.set_endevent
  summary: When an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time)
  belongs_to: mixer
  description: |-
    set_endevent()

    have the channel send an event when playback stops

    set_endevent() -\> None

    set_endevent(type) -\> None

    When an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use `pygame.event.get()` to retrieve the endevent once it's sent.

    Note that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end event is sent only once: after the sound has been played "n+1" times (see the documentation of Sound.play).

    If `Channel.stop()` or `Channel.play()` is called while the sound was still playing, the event will be posted immediately.

    The type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between `pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument is given then the Channel will stop sending endevents.
- name: mixer.Channel.set_volume
  id: ref/mixer#pygame.mixer.Channel.set_volume
  summary: Set the volume (loudness) of a playing sound
  belongs_to: mixer
  description: |-
    set_volume()

    set the volume of a playing channel

    set_volume(value) -\> None

    set_volume(left, right) -\> None

    Set the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.

    If one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is `None`, the first argument will be the volume of both speakers.)

    If the channel is playing a Sound on which `set_volume()` has also been called, both calls are taken into account. For example:

    ``` python
    sound = pygame.mixer.Sound("s.wav")
    channel = s.play()      # Sound plays at full volume by default
    sound.set_volume(0.9)   # Now plays at 90% of full volume.
    sound.set_volume(0.6)   # Now plays at 60% (previous value replaced).
    channel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).
    ```
- name: mixer.Channel.stop
  id: ref/mixer#pygame.mixer.Channel.stop
  summary: Stop sound playback on a channel
  belongs_to: mixer
  description: |-
    stop()

    stop playback on a Channel

    stop() -\> None

    Stop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it.
- name: mixer.Channel.unpause
  id: ref/mixer#pygame.mixer.Channel.unpause
  summary: Resume the playback on a paused channel
  belongs_to: mixer
  description: |-
    unpause()

    resume pause playback of a channel

    unpause() -\> None

    Resume the playback on a paused channel.
- name: mixer.fadeout
  id: ref/mixer#pygame.mixer.fadeout
  summary: This will fade out the volume on all active channels over the time argument in milliseconds
  belongs_to: mixer
  description: |-
    pygame.mixer.fadeout()

    fade out the volume on all sounds before stopping

    fadeout(time) -\> None

    This will fade out the volume on all active channels over the time argument in milliseconds. After the sound is muted the playback will stop.
- name: mixer.find_channel
  id: ref/mixer#pygame.mixer.find_channel
  summary: This will find and return an inactive Channel object
  belongs_to: mixer
  description: |-
    pygame.mixer.find_channel()

    find an unused channel

    find_channel(force=False) -\> Channel

    This will find and return an inactive Channel object. If there are no inactive Channels this function will return `None`. If there are no inactive channels and the force argument is `True`, this will find the Channel with the longest running Sound and return it.
- name: mixer.get_busy
  id: ref/mixer#pygame.mixer.get_busy
  summary: Returns True if the mixer is busy mixing any channels
  belongs_to: mixer
  description: |-
    pygame.mixer.get_busy()

    test if any sound is being mixed

    get_busy() -\> bool

    Returns `True` if the mixer is busy mixing any channels. If the mixer is idle then this return `False`.
- name: mixer.get_init
  id: ref/mixer#pygame.mixer.get_init
  summary: If the mixer is initialized, this returns the playback arguments it is using
  belongs_to: mixer
  description: |-
    pygame.mixer.get_init()

    test if the mixer is initialized

    get_init() -\> (frequency, format, channels)

    If the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns `None`.
- name: mixer.get_num_channels
  id: ref/mixer#pygame.mixer.get_num_channels
  summary: Returns the number of currently active playback channels
  belongs_to: mixer
  description: |-
    pygame.mixer.get_num_channels()

    get the total number of playback channels

    get_num_channels() -\> count

    Returns the number of currently active playback channels.
- name: mixer.get_sdl_mixer_version
  id: ref/mixer#pygame.mixer.get_sdl_mixer_version
  summary: The linked and compile version numbers should be the same
  belongs_to: mixer
  description: |-
    pygame.mixer.get_sdl_mixer_version()

    get the mixer's SDL version

    get_sdl_mixer_version() -\> (major, minor, patch)

    get_sdl_mixer_version(linked=True) -\> (major, minor, patch)

    Parameters

    **linked** (*bool*) -- if `True` (default) the linked version number is returned, otherwise the compiled version number is returned

    Returns

    the mixer's SDL library version number (linked or compiled depending on the `linked` parameter) as a tuple of 3 integers `(major,``minor,``patch)`

    Return type

    tuple

    Note

    The linked and compile version numbers should be the same.

    New in pygame 2.0.0.
- name: mixer.init
  id: ref/mixer#pygame.mixer.init
  summary: Initialize the mixer module for Sound loading and playback
  belongs_to: mixer
  description: |-
    pygame.mixer.init()

    initialize the mixer module

    init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE \| AUDIO_ALLOW_CHANNELS_CHANGE) -\> None

    Initialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backwards compatibility, argument values of 0 are replaced with the startup defaults, except for `allowedchanges`, where -1 is used. (startup defaults may be changed by a [`pre_init()`](#pygame.mixer.pre_init "pygame.mixer.pre_init") call).

    The size argument represents how many bits are used for each audio sample. If the value is negative then signed sample values will be used. Positive values mean unsigned audio samples will be used. An invalid value raises an exception.

    The channels argument is used to specify whether to use mono or stereo. 1 for mono and 2 for stereo.

    The buffer argument controls the number of internal samples used in the sound mixer. The default value should work for most cases. It can be lowered to reduce latency, but sound dropout may occur. It can be raised to larger values to ensure playback never skips, but it will impose latency on sound playback. The buffer size must be a power of two (if not it is rounded up to the next nearest power of 2).

    Some platforms require the [`pygame.mixer`](#module-pygame.mixer) module to be initialized after the display modules have initialized. The top level `pygame.init()` takes care of this automatically, but cannot pass any arguments to the mixer init. To solve this, mixer has a function `pygame.mixer.pre_init()` to set the proper defaults before the toplevel init is used.

    When using allowedchanges=0 it will convert the samples at runtime to match what the hardware supports. For example a sound card may not support 16bit sound samples, so instead it will use 8bit samples internally. If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change to the closest that SDL2 supports.

    Apart from 0, allowedchanged accepts the following constants ORed together:

    > - AUDIO_ALLOW_FREQUENCY_CHANGE
    >
    > - AUDIO_ALLOW_FORMAT_CHANGE
    >
    > - AUDIO_ALLOW_CHANNELS_CHANGE
    >
    > - AUDIO_ALLOW_ANY_CHANGE

    It is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling `pygame.mixer.quit()`.

    Changed in pygame 1.8: The default `buffersize` changed from 1024 to 3072.

    Changed in pygame 1.9.1: The default `buffersize` changed from 3072 to 4096.

    Changed in pygame 2.0.0: The default `buffersize` changed from 4096 to 512.

    Changed in pygame 2.0.0: The default `frequency` changed from 22050 to 44100.

    Changed in pygame 2.0.0: `size` can be 32 (32-bit floats).

    Changed in pygame 2.0.0: `channels` can also be 4 or 6.

    New in pygame 2.0.0: `allowedchanges`, `devicename` arguments added
- name: mixer.music
  id: ref/music
  summary: The music module is closely tied to pygame.mixer
  description: "pygame.mixer.music  \npygame module for controlling streamed audio\n\nThe music module is closely tied to [`pygame.mixer`](mixer#module-pygame.mixer). Use the music module to control the playback of music in the sound mixer.\n\nThe difference between the music playback and regular Sound playback is that the music is streamed, and never actually loaded all at once. The mixer system only supports a single music stream at once.\n\nOn older pygame versions, `MP3` support was limited under Mac and Linux. This changed in pygame `v2.0.2` which got improved MP3 support. Consider using `OGG` file format for music as that can give slightly better compression than MP3 in most cases.\n\npygame.mixer.music.load()  \nLoad a music file for playback\n\nload(filename) -\\> None\n\nload(fileobj, namehint=\"\") -\\> None\n\nThis will load a music filename/file object and prepare it for playback. If a music stream is already playing it will be stopped. This does not start the music playing.\n\nIf you are loading from a file object, the namehint parameter can be used to specify the type of music data in the object. For example: `load(fileobj,`` ``\"ogg\")`.\n\nChanged in pygame 2.0.2: Added optional `namehint` argument\n\npygame.mixer.music.unload()  \nUnload the currently loaded music to free up resources\n\nunload() -\\> None\n\nThis closes resources like files for any music that may be loaded.\n\nNew in pygame 2.0.0.\n\npygame.mixer.music.play()  \nStart the playback of the music stream\n\nplay(loops=0, start=0.0, fade_ms=0) -\\> None\n\nThis will play the loaded music stream. If the music is already playing it will be restarted.\n\n`loops` is an optional integer argument, which is `0` by default, which indicates how many times to repeat the music. The music repeats indefinitely if this argument is set to `-1`.\n\n`start` is an optional float argument, which is `0.0` by default, which denotes the position in time from which the music starts playing. The starting position depends on the format of the music played. `MP3` and `OGG` use the position as time in seconds. For `MP3` files the start time position selected may not be accurate as things like variable bit rate encoding and ID3 tags can throw off the timing calculations. For `MOD` music it is the pattern order number. Passing a start position will raise a NotImplementedError if the start position cannot be set.\n\n`fade_ms` is an optional integer argument, which is `0` by default, which denotes the period of time (in milliseconds) over which the music will fade up from volume level `0.0` to full volume (or the volume level previously set by [`set_volume()`](#pygame.mixer.music.set_volume \"pygame.mixer.music.set_volume\")). The sample may end before the fade-in is complete. If the music is already streaming `fade_ms` is ignored.\n\nChanged in pygame 2.0.0: Added optional `fade_ms` argument\n\npygame.mixer.music.rewind()  \nrestart music\n\nrewind() -\\> None\n\nResets playback of the current music to the beginning. If [`pause()`](#pygame.mixer.music.pause \"pygame.mixer.music.pause\") has previously been used to pause the music, the music will remain paused.\n\nNote\n\n[`rewind()`](#pygame.mixer.music.rewind \"pygame.mixer.music.rewind\") supports a limited number of file types and notably `WAV` files are NOT supported. For unsupported file types use [`play()`](#pygame.mixer.music.play \"pygame.mixer.music.play\") which will restart the music that's already playing (note that this will start the music playing again even if previously paused).\n\npygame.mixer.music.stop()  \nstop the music playback\n\nstop() -\\> None\n\nStops the music playback if it is currently playing. endevent will be triggered, if set. It won't unload the music.\n\npygame.mixer.music.pause()  \ntemporarily stop music playback\n\npause() -\\> None\n\nTemporarily stop playback of the music stream. It can be resumed with the [`unpause()`](#pygame.mixer.music.unpause \"pygame.mixer.music.unpause\") function.\n\npygame.mixer.music.unpause()  \nresume paused music\n\nunpause() -\\> None\n\nThis will resume the playback of a music stream after it has been paused.\n\npygame.mixer.music.fadeout()  \nstop music playback after fading out\n\nfadeout(time) -\\> None\n\nFade out and stop the currently playing music.\n\nThe `time` argument denotes the integer milliseconds for which the fading effect is generated.\n\nNote, that this function blocks until the music has faded out. Calls to [`fadeout()`](#pygame.mixer.music.fadeout \"pygame.mixer.music.fadeout\") and [`set_volume()`](#pygame.mixer.music.set_volume \"pygame.mixer.music.set_volume\") will have no effect during this time. If an event was set using [`set_endevent()`](#pygame.mixer.music.set_endevent \"pygame.mixer.music.set_endevent\") it will be called after the music has faded.\n\npygame.mixer.music.set_volume()  \nset the music volume\n\nset_volume(volume) -\\> None\n\nSet the volume of the music playback.\n\nThe `volume` argument is a float between `0.0` and `1.0` that sets the volume level. When new music is loaded the volume is reset to full volume. If `volume` is a negative value it will be ignored and the volume will remain set at the current level. If the `volume` argument is greater than `1.0`, the volume will be set to `1.0`.\n\npygame.mixer.music.get_volume()  \nget the music volume\n\nget_volume() -\\> value\n\nReturns the current volume for the mixer. The value will be between `0.0` and `1.0`.\n\npygame.mixer.music.get_busy()  \ncheck if the music stream is playing\n\nget_busy() -\\> bool\n\nReturns True when the music stream is actively playing. When the music is idle this returns False. In pygame 2.0.1 and above this function returns False when the music is paused. In pygame 1 it returns True when the music is paused.\n\nChanged in pygame 2.0.1: Returns False when music paused.\n\npygame.mixer.music.set_pos()  \nset position to play from\n\nset_pos(pos) -\\> None\n\nThis sets the position in the music file where playback will start. The meaning of \"pos\", a float (or a number that can be converted to a float), depends on the music format.\n\nFor `MOD` files, pos is the integer pattern number in the module. For `OGG` it is the absolute position, in seconds, from the beginning of the sound. For `MP3` files, it is the relative position, in seconds, from the current position. For absolute positioning in an `MP3` file, first call [`rewind()`](#pygame.mixer.music.rewind \"pygame.mixer.music.rewind\").\n\nOther file formats are unsupported. Newer versions of SDL_mixer have better positioning support than earlier ones. An SDLError is raised if a particular format does not support positioning.\n\nFunction [`set_pos()`](#pygame.mixer.music.set_pos \"pygame.mixer.music.set_pos\") calls underlining SDL_mixer function `Mix_SetMusicPosition`.\n\nNew in pygame 1.9.2.\n\npygame.mixer.music.get_pos()  \nget the music play time\n\nget_pos() -\\> time\n\nThis gets the number of milliseconds that the music has been playing for. The returned time only represents how long the music has been playing; it does not take into account any starting position offsets.\n\npygame.mixer.music.queue()  \nqueue a sound file to follow the current\n\nqueue(filename) -\\> None\n\nqueue(fileobj, namehint=\"\", loops=0) -\\> None\n\nThis will load a sound file and queue it. A queued sound file will begin as soon as the current sound naturally ends. Only one sound can be queued at a time. Queuing a new sound while another sound is queued will result in the new sound becoming the queued sound. Also, if the current sound is ever stopped or changed, the queued sound will be lost.\n\nIf you are loading from a file object, the namehint parameter can be used to specify the type of music data in the object. For example: `queue(fileobj,`` ``\"ogg\")`.\n\nThe following example will play music by Bach six times, then play music by Mozart once:\n\n``` python\npygame.mixer.music.load('bach.ogg')\npygame.mixer.music.play(5)        # Plays six times, not five!\npygame.mixer.music.queue('mozart.ogg')\n```\n\nChanged in pygame 2.0.2: Added optional `namehint` argument\n\npygame.mixer.music.set_endevent()  \nhave the music send an event when playback stops\n\nset_endevent() -\\> None\n\nset_endevent(type) -\\> None\n\nThis causes pygame to signal (by means of the event queue) when the music is done playing. The argument determines the type of event that will be queued.\n\nThe event will be queued every time the music finishes, not just the first time. To stop the event from being queued, call this method with no argument.\n\npygame.mixer.music.get_endevent()  \nget the event a channel sends when playback stops\n\nget_endevent() -\\> type\n\nReturns the event type to be sent every time the music finishes playback. If there is no endevent the function returns `pygame.NOEVENT`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/music.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/music.html](https://www.pygame.org/docs/ref/music.html)"
- name: mixer.music.fadeout
  id: ref/music#pygame.mixer.music.fadeout
  summary: Fade out and stop the currently playing music
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.fadeout()

    stop music playback after fading out

    fadeout(time) -\> None

    Fade out and stop the currently playing music.

    The `time` argument denotes the integer milliseconds for which the fading effect is generated.

    Note, that this function blocks until the music has faded out. Calls to [`fadeout()`](#pygame.mixer.music.fadeout "pygame.mixer.music.fadeout") and [`set_volume()`](#pygame.mixer.music.set_volume "pygame.mixer.music.set_volume") will have no effect during this time. If an event was set using [`set_endevent()`](#pygame.mixer.music.set_endevent "pygame.mixer.music.set_endevent") it will be called after the music has faded.
- name: mixer.music.get_busy
  id: ref/music#pygame.mixer.music.get_busy
  summary: Returns True when the music stream is actively playing
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.get_busy()

    check if the music stream is playing

    get_busy() -\> bool

    Returns True when the music stream is actively playing. When the music is idle this returns False. In pygame 2.0.1 and above this function returns False when the music is paused. In pygame 1 it returns True when the music is paused.

    Changed in pygame 2.0.1: Returns False when music paused.
- name: mixer.music.get_endevent
  id: ref/music#pygame.mixer.music.get_endevent
  summary: Returns the event type to be sent every time the music finishes playback
  belongs_to: mixer.music
  description: "pygame.mixer.music.get_endevent()\n\nget the event a channel sends when playback stops\n\nget_endevent() -\\> type\n\nReturns the event type to be sent every time the music finishes playback. If there is no endevent the function returns `pygame.NOEVENT`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/music.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/music.html](https://www.pygame.org/docs/ref/music.html)"
- name: mixer.music.get_pos
  id: ref/music#pygame.mixer.music.get_pos
  summary: This gets the number of milliseconds that the music has been playing for
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.get_pos()

    get the music play time

    get_pos() -\> time

    This gets the number of milliseconds that the music has been playing for. The returned time only represents how long the music has been playing; it does not take into account any starting position offsets.
- name: mixer.music.get_volume
  id: ref/music#pygame.mixer.music.get_volume
  summary: Returns the current volume for the mixer
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.get_volume()

    get the music volume

    get_volume() -\> value

    Returns the current volume for the mixer. The value will be between `0.0` and `1.0`.
- name: mixer.music.load
  id: ref/music#pygame.mixer.music.load
  summary: This will load a music filename/file object and prepare it for playback
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.load()

    Load a music file for playback

    load(filename) -\> None

    load(fileobj, namehint="") -\> None

    This will load a music filename/file object and prepare it for playback. If a music stream is already playing it will be stopped. This does not start the music playing.

    If you are loading from a file object, the namehint parameter can be used to specify the type of music data in the object. For example: `load(fileobj,``"ogg")`.

    Changed in pygame 2.0.2: Added optional `namehint` argument
- name: mixer.music.pause
  id: ref/music#pygame.mixer.music.pause
  summary: Temporarily stop playback of the music stream
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.pause()

    temporarily stop music playback

    pause() -\> None

    Temporarily stop playback of the music stream. It can be resumed with the [`unpause()`](#pygame.mixer.music.unpause "pygame.mixer.music.unpause") function.
- name: mixer.music.play
  id: ref/music#pygame.mixer.music.play
  summary: This will play the loaded music stream
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.play()

    Start the playback of the music stream

    play(loops=0, start=0.0, fade_ms=0) -\> None

    This will play the loaded music stream. If the music is already playing it will be restarted.

    `loops` is an optional integer argument, which is `0` by default, which indicates how many times to repeat the music. The music repeats indefinitely if this argument is set to `-1`.

    `start` is an optional float argument, which is `0.0` by default, which denotes the position in time from which the music starts playing. The starting position depends on the format of the music played. `MP3` and `OGG` use the position as time in seconds. For `MP3` files the start time position selected may not be accurate as things like variable bit rate encoding and ID3 tags can throw off the timing calculations. For `MOD` music it is the pattern order number. Passing a start position will raise a NotImplementedError if the start position cannot be set.

    `fade_ms` is an optional integer argument, which is `0` by default, which denotes the period of time (in milliseconds) over which the music will fade up from volume level `0.0` to full volume (or the volume level previously set by [`set_volume()`](#pygame.mixer.music.set_volume "pygame.mixer.music.set_volume")). The sample may end before the fade-in is complete. If the music is already streaming `fade_ms` is ignored.

    Changed in pygame 2.0.0: Added optional `fade_ms` argument
- name: mixer.music.queue
  id: ref/music#pygame.mixer.music.queue
  summary: This will load a sound file and queue it
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.queue()

    queue a sound file to follow the current

    queue(filename) -\> None

    queue(fileobj, namehint="", loops=0) -\> None

    This will load a sound file and queue it. A queued sound file will begin as soon as the current sound naturally ends. Only one sound can be queued at a time. Queuing a new sound while another sound is queued will result in the new sound becoming the queued sound. Also, if the current sound is ever stopped or changed, the queued sound will be lost.

    If you are loading from a file object, the namehint parameter can be used to specify the type of music data in the object. For example: `queue(fileobj,``"ogg")`.

    The following example will play music by Bach six times, then play music by Mozart once:

    ``` python
    pygame.mixer.music.load('bach.ogg')
    pygame.mixer.music.play(5)        # Plays six times, not five!
    pygame.mixer.music.queue('mozart.ogg')
    ```

    Changed in pygame 2.0.2: Added optional `namehint` argument
- name: mixer.music.rewind
  id: ref/music#pygame.mixer.music.rewind
  summary: Resets playback of the current music to the beginning
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.rewind()

    restart music

    rewind() -\> None

    Resets playback of the current music to the beginning. If [`pause()`](#pygame.mixer.music.pause "pygame.mixer.music.pause") has previously been used to pause the music, the music will remain paused.

    Note

    [`rewind()`](#pygame.mixer.music.rewind "pygame.mixer.music.rewind") supports a limited number of file types and notably `WAV` files are NOT supported. For unsupported file types use [`play()`](#pygame.mixer.music.play "pygame.mixer.music.play") which will restart the music that's already playing (note that this will start the music playing again even if previously paused).
- name: mixer.music.set_endevent
  id: ref/music#pygame.mixer.music.set_endevent
  summary: This causes pygame to signal (by means of the event queue) when the music is done playing
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.set_endevent()

    have the music send an event when playback stops

    set_endevent() -\> None

    set_endevent(type) -\> None

    This causes pygame to signal (by means of the event queue) when the music is done playing. The argument determines the type of event that will be queued.

    The event will be queued every time the music finishes, not just the first time. To stop the event from being queued, call this method with no argument.
- name: mixer.music.set_pos
  id: ref/music#pygame.mixer.music.set_pos
  summary: This sets the position in the music file where playback will start
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.set_pos()

    set position to play from

    set_pos(pos) -\> None

    This sets the position in the music file where playback will start. The meaning of "pos", a float (or a number that can be converted to a float), depends on the music format.

    For `MOD` files, pos is the integer pattern number in the module. For `OGG` it is the absolute position, in seconds, from the beginning of the sound. For `MP3` files, it is the relative position, in seconds, from the current position. For absolute positioning in an `MP3` file, first call [`rewind()`](#pygame.mixer.music.rewind "pygame.mixer.music.rewind").

    Other file formats are unsupported. Newer versions of SDL_mixer have better positioning support than earlier ones. An SDLError is raised if a particular format does not support positioning.

    Function [`set_pos()`](#pygame.mixer.music.set_pos "pygame.mixer.music.set_pos") calls underlining SDL_mixer function `Mix_SetMusicPosition`.

    New in pygame 1.9.2.
- name: mixer.music.set_volume
  id: ref/music#pygame.mixer.music.set_volume
  summary: Set the volume of the music playback
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.set_volume()

    set the music volume

    set_volume(volume) -\> None

    Set the volume of the music playback.

    The `volume` argument is a float between `0.0` and `1.0` that sets the volume level. When new music is loaded the volume is reset to full volume. If `volume` is a negative value it will be ignored and the volume will remain set at the current level. If the `volume` argument is greater than `1.0`, the volume will be set to `1.0`.
- name: mixer.music.stop
  id: ref/music#pygame.mixer.music.stop
  summary: Stops the music playback if it is currently playing
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.stop()

    stop the music playback

    stop() -\> None

    Stops the music playback if it is currently playing. endevent will be triggered, if set. It won't unload the music.
- name: mixer.music.unload
  id: ref/music#pygame.mixer.music.unload
  summary: This closes resources like files for any music that may be loaded
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.unload()

    Unload the currently loaded music to free up resources

    unload() -\> None

    This closes resources like files for any music that may be loaded.

    New in pygame 2.0.0.
- name: mixer.music.unpause
  id: ref/music#pygame.mixer.music.unpause
  summary: This will resume the playback of a music stream after it has been paused
  belongs_to: mixer.music
  description: |-
    pygame.mixer.music.unpause()

    resume paused music

    unpause() -\> None

    This will resume the playback of a music stream after it has been paused.
- name: mixer.pause
  id: ref/mixer#pygame.mixer.pause
  summary: This will temporarily stop all playback on the active mixer channels
  belongs_to: mixer
  description: |-
    pygame.mixer.pause()

    temporarily stop playback of all sound channels

    pause() -\> None

    This will temporarily stop all playback on the active mixer channels. The playback can later be resumed with `pygame.mixer.unpause()`
- name: mixer.pre_init
  id: ref/mixer#pygame.mixer.pre_init
  summary: Call pre_init to change the defaults used when the real pygame.mixer.init() is called
  belongs_to: mixer
  description: |-
    pygame.mixer.pre_init()

    preset the mixer init arguments

    pre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE \| AUDIO_ALLOW_CHANNELS_CHANGE) -\> None

    Call pre_init to change the defaults used when the real `pygame.mixer.init()` is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call `pygame.mixer.pre_init()` before calling the top level `pygame.init()`. For backwards compatibility, argument values of 0 are replaced with the startup defaults, except for `allowedchanges`, where -1 is used.

    Changed in pygame 1.8: The default `buffersize` changed from 1024 to 3072.

    Changed in pygame 1.9.1: The default `buffersize` changed from 3072 to 4096.

    Changed in pygame 2.0.0: The default `buffersize` changed from 4096 to 512.

    Changed in pygame 2.0.0: The default `frequency` changed from 22050 to 44100.

    New in pygame 2.0.0: `allowedchanges`, `devicename` arguments added
- name: mixer.quit
  id: ref/mixer#pygame.mixer.quit
  summary: This will uninitialize pygame.mixer
  belongs_to: mixer
  description: |-
    pygame.mixer.quit()

    uninitialize the mixer

    quit() -\> None

    This will uninitialize [`pygame.mixer`](#module-pygame.mixer). All playback will stop and any loaded Sound objects may not be compatible with the mixer if it is reinitialized later.
- name: mixer.set_num_channels
  id: ref/mixer#pygame.mixer.set_num_channels
  summary: Sets the number of available channels for the mixer
  belongs_to: mixer
  description: |-
    pygame.mixer.set_num_channels()

    set the total number of playback channels

    set_num_channels(count) -\> None

    Sets the number of available channels for the mixer. The default value is 8. The value can be increased or decreased. If the value is decreased, sounds playing on the truncated channels are stopped.
- name: mixer.set_reserved
  id: ref/mixer#pygame.mixer.set_reserved
  summary: The mixer can reserve any number of channels that will not be automatically selected for playback by Sounds
  belongs_to: mixer
  description: |-
    pygame.mixer.set_reserved()

    reserve channels from being automatically used

    set_reserved(count) -\> count

    The mixer can reserve any number of channels that will not be automatically selected for playback by Sounds. This means that whenever you play a Sound without specifying a channel, a reserved channel will never be used. If sounds are currently playing on the reserved channels they will not be stopped.

    This allows the application to reserve a specific number of channels for important sounds that must not be dropped or have a guaranteed channel to play on.

    Will return number of channels actually reserved, this may be less than requested depending on the number of channels previously allocated.
- name: mixer.Sound
  id: ref/mixer#pygame.mixer.Sound
  summary: Load a new sound buffer from a filename, a python file object or a readable buffer object
  belongs_to: mixer
  description: |-
    pygame.mixer.Sound

    Create a new Sound object from a file or buffer object

    Sound(filename) -\> Sound

    Sound(file=filename) -\> Sound

    Sound(file=pathlib_path) -\> Sound

    Sound(buffer) -\> Sound

    Sound(buffer=buffer) -\> Sound

    Sound(object) -\> Sound

    Sound(file=object) -\> Sound

    Sound(array=object) -\> Sound

    Load a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a new buffer interface (The object is checked for a buffer interface first.)

    The Sound object represents actual sound sample data. Methods that change the state of the Sound object will the all instances of the Sound playback. A Sound object also exports a new buffer interface.

    The Sound can be loaded from an `OGG` audio file or from an uncompressed `WAV`.

    Note: The buffer will be copied internally, no data will be shared between it and the Sound object.

    For now buffer and array support is consistent with `sndarray.make_sound` for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.

    New in pygame 1.8: ` ``pygame.mixer.Sound(buffer)`` `

    New in pygame 1.9.2: [`pygame.mixer.Sound`](#pygame.mixer.Sound) keyword arguments and array interface support

    New in pygame 2.0.1: pathlib.Path support on Python 3.
- name: mixer.Sound.fadeout
  id: ref/mixer#pygame.mixer.Sound.fadeout
  summary: This will stop playback of the sound after fading it out over the time argument in milliseconds
  belongs_to: mixer
  description: |-
    fadeout()

    stop sound playback after fading out

    fadeout(time) -\> None

    This will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels.
- name: mixer.Sound.get_length
  id: ref/mixer#pygame.mixer.Sound.get_length
  summary: Return the length of this Sound in seconds
  belongs_to: mixer
  description: |-
    get_length()

    get the length of the Sound

    get_length() -\> seconds

    Return the length of this Sound in seconds.
- name: mixer.Sound.get_num_channels
  id: ref/mixer#pygame.mixer.Sound.get_num_channels
  summary: Return the number of active channels this sound is playing on
  belongs_to: mixer
  description: |-
    get_num_channels()

    count how many times this Sound is playing

    get_num_channels() -\> count

    Return the number of active channels this sound is playing on.
- name: mixer.Sound.get_raw
  id: ref/mixer#pygame.mixer.Sound.get_raw
  summary: return a bytestring copy of the Sound samples
  belongs_to: mixer
  description: |-
    get_raw()

    return a bytestring copy of the Sound samples.

    get_raw() -\> bytes

    Return a copy of the Sound object buffer as a bytes.

    New in pygame 1.9.2.
- name: mixer.Sound.get_volume
  id: ref/mixer#pygame.mixer.Sound.get_volume
  summary: Return a value from 0.0 to 1.0 representing the volume for this Sound
  belongs_to: mixer
  description: |-
    get_volume()

    get the playback volume

    get_volume() -\> value

    Return a value from 0.0 to 1.0 representing the volume for this Sound.
- name: mixer.Sound.play
  id: ref/mixer#pygame.mixer.Sound.play
  summary: Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel
  belongs_to: mixer
  description: |-
    play()

    begin sound playback

    play(loops=0, maxtime=0, fade_ms=0) -\> Channel

    Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.

    The loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call `stop()` to stop it).

    The maxtime argument can be used to stop playback after a given number of milliseconds.

    The fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.

    This returns the Channel object for the channel that was selected.
- name: mixer.Sound.set_volume
  id: ref/mixer#pygame.mixer.Sound.set_volume
  summary: This will set the playback volume (loudness) for this Sound
  belongs_to: mixer
  description: |-
    set_volume()

    set the playback volume for this Sound

    set_volume(value) -\> None

    This will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.

    Parameters

    **value** (*float*) --

    volume in the range of 0.0 to 1.0 (inclusive)

    If value \< 0.0, the volume will not be changed

    If value \> 1.0, the volume will be set to 1.0
- name: mixer.Sound.stop
  id: ref/mixer#pygame.mixer.Sound.stop
  summary: This will stop the playback of this Sound on any active Channels
  belongs_to: mixer
  description: |-
    stop()

    stop sound playback

    stop() -\> None

    This will stop the playback of this Sound on any active Channels.
- name: mixer.stop
  id: ref/mixer#pygame.mixer.stop
  summary: This will stop all playback of all active mixer channels
  belongs_to: mixer
  description: |-
    pygame.mixer.stop()

    stop playback of all sound channels

    stop() -\> None

    This will stop all playback of all active mixer channels.
- name: mixer.unpause
  id: ref/mixer#pygame.mixer.unpause
  summary: This will resume all active sound channels after they have been paused
  belongs_to: mixer
  description: |-
    pygame.mixer.unpause()

    resume paused playback of sound channels

    unpause() -\> None

    This will resume all active sound channels after they have been paused.
- name: module-_sdl2.controller
  id: ref/sdl2_controller
  summary: pygame._sdl2.controller Pygame module to work with controllers
  description: "pygame.\\_sdl2.controller  \nPygame module to work with controllers.\n\nThis module offers control over common controller types like the dualshock 4 or the xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons, a dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.\n\nPygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but they always refer to the same buttons. For example `CONTROLLER_BUTTON_X` is always the leftmost button of the 4 buttons on the right.\n\nControllers can generate the following events:\n\n``` python\nCONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,\nCONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED\n```\n\nAdditionally if pygame is built with SDL 2.0.14 or higher the following events can also be generated (to get the version of sdl pygame is built with use [`pygame.version.SDL()`](pygame#pygame.version.SDL)):\n\n``` python\nCONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP\n```\n\nThese events can be enabled/disabled by [`pygame._sdl2.controller.set_eventstate()`](#pygame._sdl2.controller.set_eventstate) Note that controllers can generate joystick events as well. This function only toggles events related to controllers.\n\nNote\n\nSee the [`pygame.joystick`](joystick#module-pygame.joystick) for a more versatile but more advanced api.\n\nNew in pygame 2: This module requires SDL2.\n\npygame.\\_sdl2.controller.init()  \ninitialize the controller module\n\ninit() -\\> None\n\nInitialize the controller module.\n\npygame.\\_sdl2.controller.quit()  \nUninitialize the controller module.\n\nquit() -\\> None\n\nUninitialize the controller module.\n\npygame.\\_sdl2.controller.get_init()  \nReturns True if the controller module is initialized.\n\nget_init() -\\> bool\n\nTest if `pygame._sdl2.controller.init()` was called.\n\npygame.\\_sdl2.controller.set_eventstate()  \nSets the current state of events related to controllers\n\nset_eventstate(state) -\\> None\n\nEnable or disable events connected to controllers.\n\nNote\n\nControllers can still generate joystick events, which will not be toggled by this function.\n\nChanged in pygame 2.0.2:: Changed return type from int to None\n\npygame.\\_sdl2.controller.get_eventstate()  \nGets the current state of events related to controllers\n\nget_eventstate() -\\> bool\n\nReturns the current state of events related to controllers, True meaning events will be posted.\n\nNew in pygame 2.0.2.\n\npygame.\\_sdl2.controller.get_count()  \nGet the number of joysticks connected\n\nget_count() -\\> int\n\nGet the number of joysticks connected.\n\npygame.\\_sdl2.controller.is_controller()  \nCheck if the given joystick is supported by the game controller interface\n\nis_controller(index) -\\> bool\n\nReturns True if the index given can be used to create a controller object.\n\npygame.\\_sdl2.controller.name_forindex()  \nGet the name of the controller\n\nname_forindex(index) -\\> name or None\n\nReturns the name of controller, or None if there's no name or the index is invalid.\n\npygame.\\_sdl2.controller.Controller  \n> Create a new Controller object.\n>\n> Controller(index) -\\> Controller\n>\n> Create a new Controller object. Index should be integer between 0 and `pygame._sdl2.controller.get_count()`. Controllers also can be created from a `pygame.joystick.Joystick` using `pygame._sdl2.controller.from_joystick`. Controllers are initialized on creation.\n\nquit()  \nuninitialize the Controller\n\nquit() -\\> None\n\nClose a Controller object. After this the pygame event queue will no longer receive events from the device.\n\nIt is safe to call this more than once.\n\nget_init()  \ncheck if the Controller is initialized\n\nget_init() -\\> bool\n\nReturns True if the Controller object is currently initialised.\n\nstatic from_joystick()  \nCreate a Controller from a pygame.joystick.Joystick object\n\nfrom_joystick(joystick) -\\> Controller\n\nCreate a Controller object from a `pygame.joystick.Joystick` object\n\nattached()  \nCheck if the Controller has been opened and is currently connected.\n\nattached() -\\> bool\n\nReturns True if the Controller object is opened and connected.\n\nas_joystick()  \nReturns a pygame.joystick.Joystick() object\n\nas_joystick() -\\> Joystick object\n\nReturns a pygame.joystick.Joystick() object created from this controller's index\n\nget_axis()  \nGet the current state of a joystick axis\n\nget_axis(axis) -\\> int\n\nGet the current state of a trigger or joystick axis. The axis argument must be one of the following constants:\n\n``` python\nCONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,\nCONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,\nCONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT\n```\n\nJoysticks can return a value between -32768 and 32767. Triggers however can only return a value between 0 and 32768.\n\nget_button()  \nGet the current state of a button\n\nget_button(button) -\\> bool\n\nGet the current state of a button, True meaning it is pressed down. The button argument must be one of the following constants:\n\n``` python\nCONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,\nCONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y\nCONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,\nCONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,\nCONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,\nCONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,\nCONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,\nCONTROLLER_BUTTON_START\n```\n\nget_mapping()  \nGet the mapping assigned to the controller\n\nget_mapping() -\\> mapping\n\nReturns a dict containing the mapping of the Controller. For more information see [`Controller.set_mapping()`](#pygame._sdl2.controller.Controller.set_mapping \"pygame._sdl2.controller.Controller.set_mapping\")\n\nChanged in pygame 2.0.2:: Return type changed from `str` to `dict`\n\nset_mapping()  \nAssign a mapping to the controller\n\nset_mapping(mapping) -\\> int\n\nRebind buttons, axes, triggers and dpads. The mapping should be a dict containing all buttons, hats and axes. The easiest way to get this is to use the dict returned by [`Controller.get_mapping()`](#pygame._sdl2.controller.Controller.get_mapping \"pygame._sdl2.controller.Controller.get_mapping\"). To edit this mapping assign a value to the original button. The value of the dictionary must be a button, hat or axis represented in the following way:\n\n- For a button use: bX where X is the index of the button.\n\n- For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).\n\n- For an axis use: aX where x is the index of the axis.\n\nAn example of mapping:\n\n``` python\nmapping = controller.get_mapping() # Get current mapping\nmapping[\"a\"] = \"b3\" # Remap button a to y\nmapping[\"y\"] = \"b0\" # Remap button y to a\ncontroller.set_mapping(mapping) # Set the mapping\n```\n\nThe function will return 1 if a new mapping is added or 0 if an existing one is updated.\n\nChanged in pygame 2.0.2:: Renamed from `add_mapping` to `set_mapping`\n\nChanged in pygame 2.0.2:: Argument type changed from `str` to `dict`\n\nrumble()  \nStart a rumbling effect\n\nrumble(low_frequency, high_frequency, duration) -\\> bool\n\nStart a rumble effect on the controller, with the specified strength ranging from 0 to 1. Duration is length of the effect, in ms. Setting the duration to 0 will play the effect until another one overwrites it or [`Controller.stop_rumble()`](#pygame._sdl2.controller.Controller.stop_rumble \"pygame._sdl2.controller.Controller.stop_rumble\") is called. If an effect is already playing, then it will be overwritten.\n\nReturns True if the rumble was played successfully or False if the controller does not support it or [`pygame.version.SDL()`](pygame#pygame.version.SDL) is below 2.0.9.\n\nNew in pygame 2.0.2.\n\nstop_rumble()  \nStop any rumble effect playing\n\nstop_rumble() -\\> None\n\nStops any rumble effect playing on the controller. See [`Controller.rumble()`](#pygame._sdl2.controller.Controller.rumble \"pygame._sdl2.controller.Controller.rumble\") for more information.\n\nNew in pygame 2.0.2.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sdl2_controller.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sdl2_controller.html](https://www.pygame.org/docs/ref/sdl2_controller.html)"
- name: module-_sdl2.touch
  id: ref/touch
  summary: 'New in pygame 2: This module requires SDL2'
  description: "pygame.\\_sdl2.touch  \npygame module to work with touch input\n\nNew in pygame 2: This module requires SDL2.\n\npygame.\\_sdl2.touch.get_num_devices()  \nget the number of touch devices\n\nget_num_devices() -\\> int\n\nReturn the number of available touch devices.\n\npygame.\\_sdl2.touch.get_device()  \nget the a touch device id for a given index\n\nget_device(index) -\\> touchid\n\nParameters  \n**index** (*int*) -- This number is at least 0 and less than the [`number`` ``of`` ``devices`](#pygame._sdl2.touch.get_num_devices \"pygame._sdl2.touch.get_num_devices\").\n\nReturn an integer id associated with the given `index`.\n\npygame.\\_sdl2.touch.get_num_fingers()  \nthe number of active fingers for a given touch device\n\nget_num_fingers(touchid) -\\> int\n\nReturn the number of fingers active for the touch device whose id is touchid.\n\npygame.\\_sdl2.touch.get_finger()  \nget information about an active finger\n\nget_finger(touchid, index) -\\> int\n\nParameters  \n- **touchid** (*int*) -- The touch device id.\n\n- **index** (*int*) -- The index of the finger to return information about, between 0 and the [`number`` ``of`` ``active`` ``fingers`](#pygame._sdl2.touch.get_num_fingers \"pygame._sdl2.touch.get_num_fingers\").\n\nReturn a dict for the finger `index` active on `touchid`. The dict contains these keys:\n\n``` python\nid         the id of the finger (an integer).\nx          the normalized x position of the finger, between 0 and 1.\ny          the normalized y position of the finger, between 0 and 1.\npressure   the amount of pressure applied by the finger, between 0 and 1.\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/touch.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/touch.html](https://www.pygame.org/docs/ref/touch.html)"
- name: module-_sdl2.video
  id: ref/sdl2_video
  summary: This module isn't ready for prime time yet, it's still in development
  description: "pygame.sdl2_video  \nWarning\n\nThis module isn't ready for prime time yet, it's still in development. These docs are primarily meant to help the pygame developers and super-early adopters who are in communication with the developers. This API will change.\n\nExperimental pygame module for porting new SDL video systems\n\npygame.\\_sdl2.video.Window  \npygame object that represents a window\n\nWindow(title=\"pygame\", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -\\> Window\n\nclassmethod from_display_module()  \nCreates window using window created by pygame.display.set_mode().\n\nfrom_display_module() -\\> Window\n\nclassmethod from_window()  \nCreate Window from another window. Could be from another UI toolkit.\n\nfrom_window(other) -\\> Window\n\ngrab  \nGets or sets whether the mouse is confined to the window.\n\ngrab -\\> bool\n\nrelative_mouse  \nGets or sets the window's relative mouse motion state.\n\nrelative_mouse -\\> bool\n\nset_windowed()  \nEnable windowed mode (exit fullscreen).\n\nset_windowed() -\\> None\n\nset_fullscreen()  \nEnter fullscreen.\n\nset_fullscreen(desktop=False) -\\> None\n\ntitle  \nGets or sets whether the window title.\n\ntitle -\\> string\n\ndestroy()  \nDestroys the window.\n\ndestroy() -\\> None\n\nhide()  \nHide the window.\n\nhide() -\\> None\n\nshow()  \nShow the window.\n\nshow() -\\> None\n\nfocus()  \nRaise the window above other windows and set the input focus. The \"input_only\" argument is only supported on X11.\n\nfocus(input_only=False) -\\> None\n\nrestore()  \nRestore the size and position of a minimized or maximized window.\n\nrestore() -\\> None\n\nmaximize()  \nMaximize the window.\n\nmaximize() -\\> None\n\nminimize()  \nMinimize the window.\n\nmaximize() -\\> None\n\nresizable  \nGets and sets whether the window is resizable.\n\nresizable -\\> bool\n\nborderless  \nAdd or remove the border from the window.\n\nborderless -\\> bool\n\nset_icon()  \nSet the icon for the window.\n\nset_icon(surface) -\\> None\n\nid  \nGet the unique window ID. \\*Read-only\\*\n\nid -\\> int\n\nsize  \nGets and sets the window size.\n\nsize -\\> (int, int)\n\nposition  \nGets and sets the window position.\n\nposition -\\> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED\n\nopacity  \nGets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).\n\nopacity -\\> float\n\ndisplay_index  \nGet the index of the display that owns the window. \\*Read-only\\*\n\ndisplay_index -\\> int\n\nset_modal_for()  \nSet the window as a modal for a parent window. This function is only supported on X11.\n\nset_modal_for(Window) -\\> None\n\npygame.\\_sdl2.video.Texture  \npygame object that representing a Texture.\n\nTexture(renderer, size, depth=0, static=False, streaming=False, target=False) -\\> Texture\n\nstatic from_surface()  \nCreate a texture from an existing surface.\n\nfrom_surface(renderer, surface) -\\> Texture\n\nrenderer  \nGets the renderer associated with the Texture. \\*Read-only\\*\n\nrenderer -\\> Renderer\n\nwidth  \nGets the width of the Texture. \\*Read-only\\*\n\nwidth -\\> int\n\nheight  \nGets the height of the Texture. \\*Read-only\\*\n\nheight -\\> int\n\nalpha  \nGets and sets an additional alpha value multiplied into render copy operations.\n\nalpha -\\> int\n\nblend_mode  \nGets and sets the blend mode for the Texture.\n\nblend_mode -\\> int\n\ncolor  \nGets and sets an additional color value multiplied into render copy operations.\n\ncolor -\\> color\n\nget_rect()  \nGet the rectangular area of the texture.\n\nget_rect(\\*\\*kwargs) -\\> Rect\n\ndraw()  \nCopy a portion of the texture to the rendering target.\n\ndraw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -\\> None\n\nupdate()  \nUpdate the texture with a Surface. WARNING: Slow operation, use sparingly.\n\nupdate(surface, area=None) -\\> None\n\npygame.\\_sdl2.video.Image  \nEasy way to use a portion of a Texture without worrying about srcrect all the time.\n\nImage(textureOrImage, srcrect=None) -\\> Image\n\nget_rect()  \nGet the rectangular area of the Image.\n\nget_rect() -\\> Rect\n\ndraw()  \nCopy a portion of the Image to the rendering target.\n\ndraw(srcrect=None, dstrect=None) -\\> None\n\nangle  \nGets and sets the angle the Image draws itself with.\n\nangle -\\> float\n\norigin  \nGets and sets the origin. Origin=None means the Image will be rotated around its center.\n\norigin -\\> (float, float) or None.\n\nflip_x  \nGets and sets whether the Image is flipped on the x axis.\n\nflip_x -\\> bool\n\nflip_y  \nGets and sets whether the Image is flipped on the y axis.\n\nflip_y -\\> bool\n\ncolor  \nGets and sets the Image color modifier.\n\ncolor -\\> Color\n\nalpha  \nGets and sets the Image alpha modifier.\n\nalpha -\\> float\n\nblend_mode  \nGets and sets the blend mode for the Image.\n\nblend_mode -\\> int\n\ntexture  \nGets and sets the Texture the Image is based on.\n\ntexture -\\> Texture\n\nsrcrect  \nGets and sets the Rect the Image is based on.\n\nsrcrect -\\> Rect\n\npygame.\\_sdl2.video.Renderer  \nCreate a 2D rendering context for a window.\n\nRenderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -\\> Renderer\n\nclassmethod from_window()  \nEasy way to create a Renderer.\n\nfrom_window(window) -\\> Renderer\n\ndraw_blend_mode  \nGets and sets the blend mode used by the drawing functions.\n\ndraw_blend_mode -\\> int\n\ndraw_color  \nGets and sets the color used by the drawing functions.\n\ndraw_color -\\> Color\n\nclear()  \nClear the current rendering target with the drawing color.\n\nclear() -\\> None\n\npresent()  \nUpdates the screen with any new rendering since previous call.\n\npresent() -\\> None\n\nget_viewport()  \nReturns the drawing area on the target.\n\nget_viewport() -\\> Rect\n\nset_viewport()  \nSet the drawing area on the target. If area is None, the entire target will be used.\n\nset_viewport(area) -\\> None\n\nlogical_size  \nGets and sets the logical size.\n\nlogical_size -\\> (int width, int height)\n\nscale  \nGets and sets the scale.\n\nscale -\\> (float x_scale, float y_scale)\n\ntarget  \nGets and sets the render target. None represents the default target (the renderer).\n\ntarget -\\> Texture or None\n\nblit()  \nFor compatibility purposes. Textures created by different Renderers cannot be shared!\n\nblit(source, dest, area=None, special_flags=0)-\\> Rect\n\ndraw_line()  \nDraws a line.\n\ndraw_line(p1, p2) -\\> None\n\ndraw_point()  \nDraws a point.\n\ndraw_point(point) -\\> None\n\ndraw_rect()  \nDraws a rectangle.\n\ndraw_rect(rect)-\\> None\n\nfill_rect()  \nFills a rectangle.\n\nfill_rect(rect)-\\> None\n\nto_surface()  \nRead pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.\n\nto_surface(surface=None, area=None)-\\> Surface\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sdl2_video.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sdl2_video.html](https://www.pygame.org/docs/ref/sdl2_video.html)"
- name: module-camera
  id: ref/camera
  summary: Pygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively, with wider platform support available via an integrated OpenCV backend
  description: "pygame.camera  \npygame module for camera use\n\nPygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively, with wider platform support available via an integrated OpenCV backend.\n\nNew in pygame 2.0.2: Windows native camera support\n\nNew in pygame 2.0.3: New OpenCV backends\n\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code will very likely break with the next pygame release.\n\nThe Bayer to `RGB` function is based on:\n\n``` python\nSonix SN9C101 based webcam basic I/F routines\nCopyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n```\n\nNew in pygame 1.9.0.\n\npygame.camera.init()  \nModule init\n\ninit(backend = None) -\\> None\n\nThis function starts up the camera module, choosing the best webcam backend it can find for your system. This is not guaranteed to succeed, and may even attempt to import third party modules, like OpenCV. If you want to override its backend choice, you can call pass the name of the backend you want into this function. More about backends in [`get_backends()`](#pygame.camera.get_backends \"pygame.camera.get_backends\").\n\nChanged in pygame 2.0.3: Option to explicitly select backend\n\npygame.camera.get_backends()  \nGet the backends supported on this system\n\nget_backends() -\\> \\[str\\]\n\nThis function returns every backend it thinks has a possibility of working on your system, in order of priority.\n\npygame.camera Backends:\n\n``` python\nBackend           OS        Description\n---------------------------------------------------------------------------------\n_camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3\n_camera (V4L2)    Linux     Builtin\nOpenCV            Any       Uses `opencv-python` module, can't enumerate cameras\nOpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration\nVideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate\n                            cameras, may be removed in the future\n```\n\nThere are two main differences among backends.\n\nThe \\_camera backends are built in to pygame itself, and require no third party imports. All the other backends do. For the OpenCV and VideoCapture backends, those modules need to be installed on your system.\n\nThe other big difference is \"camera enumeration.\" Some backends don't have a way to list out camera names, or even the number of cameras on the system. In these cases, [`list_cameras()`](#pygame.camera.list_cameras \"pygame.camera.list_cameras\") will return something like `[0]`. If you know you have multiple cameras on the system, these backend ports will pass through a \"camera index number\" through if you use that as the `device` parameter.\n\nNew in pygame 2.0.3.\n\npygame.camera.colorspace()  \nSurface colorspace conversion\n\ncolorspace(Surface, format, DestSurface = None) -\\> Surface\n\nAllows for conversion from \"RGB\" to a destination colorspace of \"HSV\" or \"YUV\". The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, `transform.scale()` it even smaller, and then convert the colorspace to `YUV` or `HSV` before doing any processing on it.\n\npygame.camera.list_cameras()  \nreturns a list of available cameras\n\nlist_cameras() -\\> \\[cameras\\]\n\nChecks the computer for available cameras and returns a list of strings of camera names, ready to be fed into [`pygame.camera.Camera`](#pygame.camera.Camera).\n\nIf the camera backend doesn't support webcam enumeration, this will return something like `[0]`. See [`get_backends()`](#pygame.camera.get_backends \"pygame.camera.get_backends\") for much more information.\n\npygame.camera.Camera  \nload a camera\n\nCamera(device, (width, height), format) -\\> Camera\n\nLoads a camera. On Linux, the device is typically something like \"/dev/video0\". Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is `RGB`. The following are supported:\n\n> - `RGB` - Red, Green, Blue\n>\n> - `YUV` - Luma, Blue Chrominance, Red Chrominance\n>\n> - `HSV` - Hue, Saturation, Value\n\nstart()  \nopens, initializes, and starts capturing\n\nstart() -\\> None\n\nOpens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.\n\nstop()  \nstops, uninitializes, and closes the camera\n\nstop() -\\> None\n\nStops recording, uninitializes the camera, and closes it. Once a camera is stopped, the below functions cannot be used until it is started again.\n\nget_controls()  \ngets current values of user controls\n\nget_controls() -\\> (hflip = bool, vflip = bool, brightness)\n\nIf the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.\n\nset_controls()  \nchanges camera settings if supported by the camera\n\nset_controls(hflip = bool, vflip = bool, brightness) -\\> (hflip = bool, vflip = bool, brightness)\n\nAllows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls. On Windows, `hflip` and `vflip` are implemented by pygame, not by the Camera, so they should always work, but `brightness` is unsupported.\n\nget_size()  \nreturns the dimensions of the images being recorded\n\nget_size() -\\> (width, height)\n\nReturns the current dimensions of the images being captured by the camera. This will return the actual size, which may be different than the one specified during initialization if the camera did not support that size.\n\nquery_image()  \nchecks if a frame is ready\n\nquery_image() -\\> bool\n\nIf an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like [`get_image()`](#pygame.camera.Camera.get_image \"pygame.camera.Camera.get_image\"). On Windows (MSMF), and the OpenCV backends, [`query_image()`](#pygame.camera.Camera.query_image \"pygame.camera.Camera.query_image\") should be reliable, though. This is useful to separate the framerate of the game from that of the camera without having to use threading.\n\nget_image()  \ncaptures an image as a Surface\n\nget_image(Surface = None) -\\> Surface\n\nPulls an image off of the buffer as an `RGB` Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is 24 bits on Linux, 32 bits on Windows, or the same as the optionally supplied Surface.\n\nget_raw()  \nreturns an unmodified image as bytes\n\nget_raw() -\\> bytes\n\nGets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries. This returns a bytes object\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/camera.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/camera.html](https://www.pygame.org/docs/ref/camera.html)"
- name: module-cdrom
  id: ref/cdrom
  summary: This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1
  description: "pygame.cdrom  \npygame module for audio cdrom control\n\nWarning\n\nThis module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1. This module will not be supported in the future. One alternative for python cdrom functionality is [pycdio](https://pypi.org/project/pycdio/).\n\nThe cdrom module manages the `CD` and `DVD` drives on a computer. It can also control the playback of audio CDs. This module needs to be initialized before it can do anything. Each `CD` object you create represents a cdrom drive and must also be initialized individually before it can do most things.\n\npygame.cdrom.init()  \ninitialize the cdrom module\n\ninit() -\\> None\n\nInitialize the cdrom module. This will scan the system for all `CD` devices. The module must be initialized before any other functions will work. This automatically happens when you call `pygame.init()`.\n\nIt is safe to call this function more than once.\n\npygame.cdrom.quit()  \nuninitialize the cdrom module\n\nquit() -\\> None\n\nUninitialize the cdrom module. After you call this any existing `CD` objects will no longer work.\n\nIt is safe to call this function more than once.\n\npygame.cdrom.get_init()  \ntrue if the cdrom module is initialized\n\nget_init() -\\> bool\n\nTest if the cdrom module is initialized or not. This is different than the `CD.init()` since each drive must also be initialized individually.\n\npygame.cdrom.get_count()  \nnumber of cd drives on the system\n\nget_count() -\\> count\n\nReturn the number of cd drives on the system. When you create `CD` objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system.\n\npygame.cdrom.CD  \nclass to manage a cdrom drive\n\nCD(id) -\\> CD\n\nYou can create a `CD` object for each cdrom on the system. Use `pygame.cdrom.get_count()` to determine how many drives actually exist. The id argument is an integer of the drive, starting at zero.\n\nThe `CD` object is not initialized, you can only call `CD.get_id()` and `CD.get_name()` on an uninitialized drive.\n\nIt is safe to create multiple `CD` objects for the same drive, they will all cooperate normally.\n\ninit()  \ninitialize a cdrom drive for use\n\ninit() -\\> None\n\nInitialize the cdrom drive for use. The drive must be initialized for most `CD` methods to work. Even if the rest of pygame has been initialized.\n\nThere may be a brief pause while the drive is initialized. Avoid `CD.init()` if the program should not stop for a second or two.\n\nquit()  \nuninitialize a cdrom drive for use\n\nquit() -\\> None\n\nUninitialize a drive for use. Call this when your program will not be accessing the drive for awhile.\n\nget_init()  \ntrue if this cd device initialized\n\nget_init() -\\> bool\n\nTest if this `CDROM` device is initialized. This is different than the `pygame.cdrom.init()` since each drive must also be initialized individually.\n\nplay()  \nstart playing audio\n\nplay(track, start=None, end=None) -\\> None\n\nPlayback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.\n\nIf you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.\n\nSee the `CD.get_numtracks()` and `CD.get_track_audio()` to find tracks to playback.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nstop()  \nstop audio playback\n\nstop() -\\> None\n\nStops playback of audio from the cdrom. This will also lose the current playback position. This method does nothing if the drive isn't already playing audio.\n\npause()  \ntemporarily stop audio playback\n\npause() -\\> None\n\nTemporarily stop audio playback on the `CD`. The playback can be resumed at the same point with the `CD.resume()` method. If the `CD` is not playing this method does nothing.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nresume()  \nunpause audio playback\n\nresume() -\\> None\n\nUnpause a paused `CD`. If the `CD` is not paused or already playing, this method does nothing.\n\neject()  \neject or open the cdrom drive\n\neject() -\\> None\n\nThis will open the cdrom drive and eject the cdrom. If the drive is playing or paused it will be stopped.\n\nget_id()  \nthe index of the cdrom drive\n\nget_id() -\\> id\n\nReturns the integer id that was used to create the `CD` instance. This method can work on an uninitialized `CD`.\n\nget_name()  \nthe system name of the cdrom drive\n\nget_name() -\\> name\n\nReturn the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized `CD`.\n\nget_busy()  \ntrue if the drive is playing audio\n\nget_busy() -\\> bool\n\nReturns True if the drive busy playing back audio.\n\nget_paused()  \ntrue if the drive is paused\n\nget_paused() -\\> bool\n\nReturns True if the drive is currently paused.\n\nget_current()  \nthe current audio playback position\n\nget_current() -\\> track, seconds\n\nReturns both the current track and time of that track. This method works when the drive is either playing or paused.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nget_empty()  \nFalse if a cdrom is in the drive\n\nget_empty() -\\> bool\n\nReturn False if there is a cdrom currently in the drive. If the drive is empty this will return True.\n\nget_numtracks()  \nthe number of tracks on the cdrom\n\nget_numtracks() -\\> count\n\nReturn the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.\n\nget_track_audio()  \ntrue if the cdrom track has audio data\n\nget_track_audio(track) -\\> bool\n\nDetermine if a track on a cdrom contains audio data. You can also call `CD.num_tracks()` and `CD.get_all()` to determine more information about the cdrom.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nget_all()  \nget all track information\n\nget_all() -\\> \\[(audio, start, end, length), ...\\]\n\nReturn a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.\n\nget_track_start()  \nstart time of a cdrom track\n\nget_track_start(track) -\\> seconds\n\nReturn the absolute time in seconds where at start of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\nget_track_length()  \nlength of a cdrom track\n\nget_track_length(track) -\\> seconds\n\nReturn a floating point value in seconds of the length of the cdrom track.\n\nNote, track 0 is the first track on the `CD`. Track numbers start at zero.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/cdrom.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/cdrom.html](https://www.pygame.org/docs/ref/cdrom.html)"
- name: module-cursors
  id: ref/cursors
  summary: Pygame offers control over the system hardware cursor
  description: "pygame.cursors  \npygame module for cursor resources\n\nPygame offers control over the system hardware cursor. Pygame supports black and white cursors (bitmap cursors), as well as system variant cursors and color cursors. You control the cursor with functions inside [`pygame.mouse`](mouse#module-pygame.mouse).\n\nThis cursors module contains functions for loading and decoding various cursor formats. These allow you to easily store your cursors in external files or directly as encoded python strings.\n\nThe module includes several standard cursors. The [`pygame.mouse.set_cursor()`](mouse#pygame.mouse.set_cursor) function takes several arguments. All those arguments have been stored in a single tuple you can call like this:\n\n``` python\n>>> pygame.mouse.set_cursor(*pygame.cursors.arrow)\n```\n\nThe following variables can be passed to `pygame.mouse.set_cursor` function:\n\n> - `pygame.cursors.arrow`\n>\n> - `pygame.cursors.diamond`\n>\n> - `pygame.cursors.broken_x`\n>\n> - `pygame.cursors.tri_left`\n>\n> - `pygame.cursors.tri_right`\n\nThis module also contains a few cursors as formatted strings. You'll need to pass these to `pygame.cursors.compile()` function before you can use them. The example call would look like this:\n\n``` python\n>>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)\n>>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)\n```\n\nThe following strings can be converted into cursor bitmaps with `pygame.cursors.compile()` :\n\n> - `pygame.cursors.thickarrow_strings`\n>\n> - `pygame.cursors.sizer_x_strings`\n>\n> - `pygame.cursors.sizer_y_strings`\n>\n> - `pygame.cursors.sizer_xy_strings`\n>\n> - `pygame.cursor.textmarker_strings`\n\npygame.cursors.compile()  \ncreate binary cursor data from simple strings\n\ncompile(strings, black='X', white='.', xor='o') -\\> data, mask\n\nA sequence of strings can be used to create binary cursor data for the system cursor. This returns the binary data in the form of two tuples. Those can be passed as the third and fourth arguments respectively of the [`pygame.mouse.set_cursor()`](mouse#pygame.mouse.set_cursor) function.\n\nIf you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.\n\nThe height must be divisible by 8. The width of the strings must all be equal and be divisible by 8. If these two conditions are not met, `ValueError` is raised. An example set of cursor strings looks like this\n\n``` python\nthickarrow_strings = (               #sized 24x24\n  \"XX                      \",\n  \"XXX                     \",\n  \"XXXX                    \",\n  \"XX.XX                   \",\n  \"XX..XX                  \",\n  \"XX...XX                 \",\n  \"XX....XX                \",\n  \"XX.....XX               \",\n  \"XX......XX              \",\n  \"XX.......XX             \",\n  \"XX........XX            \",\n  \"XX........XXX           \",\n  \"XX......XXXXX           \",\n  \"XX.XXX..XX              \",\n  \"XXXX XX..XX             \",\n  \"XX   XX..XX             \",\n  \"     XX..XX             \",\n  \"      XX..XX            \",\n  \"      XX..XX            \",\n  \"       XXXX             \",\n  \"       XX               \",\n  \"                        \",\n  \"                        \",\n  \"                        \")\n```\n\npygame.cursors.load_xbm()  \nload cursor data from an XBM file\n\nload_xbm(cursorfile) -\\> cursor_args\n\nload_xbm(cursorfile, maskfile) -\\> cursor_args\n\nThis loads cursors for a simple subset of `XBM` files. `XBM` files are traditionally used to store cursors on UNIX systems, they are an ASCII format used to represent simple images.\n\nSometimes the black and white color values will be split into two separate `XBM` files. You can pass a second maskfile argument to load the two images into a single cursor.\n\nThe cursorfile and maskfile arguments can either be filenames or file-like object with the readlines method.\n\nThe return value cursor_args can be passed directly to the `pygame.mouse.set_cursor()` function.\n\npygame.cursors.Cursor  \npygame object representing a cursor\n\nCursor(size, hotspot, xormasks, andmasks) -\\> Cursor\n\nCursor(hotspot, surface) -\\> Cursor\n\nCursor(constant) -\\> Cursor\n\nCursor(Cursor) -\\> Cursor\n\nCursor() -\\> Cursor\n\nIn pygame 2, there are 3 types of cursors you can create to give your game that little bit of extra polish. There's **bitmap** type cursors, which existed in pygame 1.x, and are compiled from a string or load from an xbm file. Then there are **system** type cursors, where you choose a preset that will convey the same meaning but look native across different operating systems. Finally you can create a **color** cursor, which displays a pygame surface as the cursor.\n\n**Creating a system cursor**\n\nChoose a constant from this list, pass it into `pygame.cursors.Cursor(constant)`, and you're good to go. Be advised that not all systems support every system cursor, and you may get a substitution instead. For example, on MacOS, WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL should show up as a closed hand. And on Wayland, every SIZE cursor should show up as a hand.\n\n``` python\nPygame Cursor Constant           Description\n--------------------------------------------\npygame.SYSTEM_CURSOR_ARROW       arrow\npygame.SYSTEM_CURSOR_IBEAM       i-beam\npygame.SYSTEM_CURSOR_WAIT        wait\npygame.SYSTEM_CURSOR_CROSSHAIR   crosshair\npygame.SYSTEM_CURSOR_WAITARROW   small wait cursor\n                                 (or wait if not available)\npygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing\n                                 northwest and southeast\npygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing\n                                 northeast and southwest\npygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing\n                                 west and east\npygame.SYSTEM_CURSOR_SIZENS      double arrow pointing\n                                 north and south\npygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing\n                                 north, south, east, and west\npygame.SYSTEM_CURSOR_NO          slashed circle or crossbones\npygame.SYSTEM_CURSOR_HAND        hand\n```\n\n**Creating a cursor without passing arguments**\n\nIn addition to the cursor constants available and described above, you can also call `pygame.cursors.Cursor()`, and your cursor is ready (doing that is the same as calling `pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)`. Doing one of those calls actually creates a system cursor using the default native image.\n\n**Creating a color cursor**\n\nTo create a color cursor, create a `Cursor` from a `hotspot` and a `surface`. `hotspot` is an (x,y) coordinate that determines where in the cursor the exact point is. The hotspot position must be within the bounds of the `surface`.\n\n**Creating a bitmap cursor**\n\nWhen the mouse cursor is visible, it will be displayed as a black and white bitmap using the given bitmask arrays. The `size` is a sequence containing the cursor width and height. `hotspot` is a sequence containing the cursor hotspot position.\n\nA cursor has a width and height, but a mouse position is represented by a set of point coordinates. So the value passed into the cursor `hotspot` variable helps pygame to actually determine at what exact point the cursor is at.\n\n`xormasks` is a sequence of bytes containing the cursor xor data masks. Lastly `andmasks`, a sequence of bytes containing the cursor bitmask data. To create these variables, we can make use of the [`pygame.cursors.compile()`](#pygame.cursors.compile) function.\n\nWidth and height must be a multiple of 8, and the mask arrays must be the correct size for the given width and height. Otherwise an exception is raised.\n\ncopy()  \ncopy the current cursor\n\ncopy() -\\> Cursor\n\nReturns a new Cursor object with the same data and hotspot as the original.\n\ntype  \nGets the cursor type\n\ntype -\\> string\n\nThe type will be `\"system\"`, `\"bitmap\"`, or `\"color\"`.\n\ndata  \nGets the cursor data\n\ndata -\\> tuple\n\nReturns the data that was used to create this cursor object, wrapped up in a tuple.\n\nNew in pygame 2.0.1.\n\nExample code for creating and settings cursors. (Click the mouse to switch cursor)\n\n``` python\n# pygame setup\nimport pygame as pg\n\npg.init()\nscreen = pg.display.set_mode([600, 400])\npg.display.set_caption(\"Example code for the cursors module\")\n\n# create a system cursor\nsystem = pg.cursors.Cursor(pg.SYSTEM_CURSOR_NO)\n\n# create bitmap cursors\nbitmap_1 = pg.cursors.Cursor(*pg.cursors.arrow)\nbitmap_2 = pg.cursors.Cursor(\n    (24, 24), (0, 0), *pg.cursors.compile(pg.cursors.thickarrow_strings)\n)\n\n# create a color cursor\nsurf = pg.Surface((40, 40)) # you could also load an image \nsurf.fill((120, 50, 50))        # and use that as your surface\ncolor = pg.cursors.Cursor((20, 20), surf)\n\ncursors = [system, bitmap_1, bitmap_2, color]\ncursor_index = 0\n\npg.mouse.set_cursor(cursors[cursor_index])\n\nclock = pg.time.Clock()\ngoing = True\nwhile going:\n    clock.tick(60)\n    screen.fill((0, 75, 30))\n    pg.display.flip()\n\n    for event in pg.event.get():\n        if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n            going = False\n\n        # if the mouse is clicked it will switch to a new cursor\n        if event.type == pg.MOUSEBUTTONDOWN:\n            cursor_index += 1\n            cursor_index %= len(cursors)\n            pg.mouse.set_cursor(cursors[cursor_index])\n\npg.quit()\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/cursors.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/cursors.html](https://www.pygame.org/docs/ref/cursors.html)"
- name: module-display
  id: ref/display
  summary: This module offers control over the pygame display
  description: "pygame.display  \npygame module to control the display window and screen\n\nThis module offers control over the pygame display. Pygame has a single display Surface that is either contained in a window or runs full screen. Once you create the display you treat it as a regular Surface. Changes are not immediately visible onscreen; you must choose one of the two flipping functions to update the actual display.\n\nThe origin of the display, where x = 0 and y = 0, is the top left of the screen. Both axes increase positively towards the bottom right of the screen.\n\nThe pygame display can actually be initialized in one of several modes. By default, the display is a basic software driven framebuffer. You can request special modules like automatic scaling or OpenGL support. These are controlled by flags passed to `pygame.display.set_mode()`.\n\nPygame can only have a single display active at any time. Creating a new one with `pygame.display.set_mode()` will close the previous display. To detect the number and size of attached screens, you can use `pygame.display.get_desktop_sizes` and then select appropriate window size and display index to pass to `pygame.display.set_mode()`.\n\nFor backward compatibility `pygame.display` allows precise control over the pixel format or display resolutions. This used to be necessary with old graphics cards and CRT screens, but is usually not needed any more. Use the functions `pygame.display.mode_ok()`, `pygame.display.list_modes()`, and `pygame.display.Info()` to query detailed information about the display.\n\nOnce the display Surface is created, the functions from this module affect the single existing display. The Surface becomes invalid if the module is uninitialized. If a new display mode is set, the existing Surface will automatically switch to operate on the new display.\n\nWhen the display mode is set, several events are placed on the pygame event queue. `pygame.QUIT` is sent when the user has requested the program to shut down. The window will receive `pygame.ACTIVEEVENT` events as the display gains and loses input focus. If the display is set with the `pygame.RESIZABLE` flag, `pygame.VIDEORESIZE` events will be sent when the user adjusts the window dimensions. Hardware displays that draw direct to the screen will get `pygame.VIDEOEXPOSE` events when portions of the window must be redrawn.\n\nA new windowevent API was introduced in pygame 2.0.1. Check event module docs for more information on that\n\nSome display environments have an option for automatically stretching all windows. When this option is enabled, this automatic stretching distorts the appearance of the pygame window. In the pygame examples directory, there is example code (prevent_display_stretching.py) which shows how to disable this automatic stretching of the pygame display on Microsoft Windows (Vista or newer required).\n\npygame.display.init()  \nInitialize the display module\n\ninit() -\\> None\n\nInitializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level `pygame.init()`.\n\nPygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable `SDL_VIDEODRIVER` can be set to control which backend is used. The systems with multiple choices are listed here.\n\n``` python\nWindows : windib, directx\nUnix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib\n```\n\nOn some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable `SDL_WINDOWID` must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\npygame.display.quit()  \nUninitialize the display module\n\nquit() -\\> None\n\nThis will shut down the entire display module. This means any active displays will be closed. This will also be handled automatically when the program exits.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\npygame.display.get_init()  \nReturns True if the display module has been initialized\n\nget_init() -\\> bool\n\nReturns True if the [`pygame.display`](#module-pygame.display) module is currently initialized.\n\npygame.display.set_mode()  \nInitialize a window or screen for display\n\nset_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -\\> Surface\n\nThis function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system.\n\nNote that calling this function implicitly initializes `pygame.display`, if it was not initialized before.\n\nThe size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color.\n\nThe Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor.\n\nIf no size is passed or is set to `(0,`` ``0)` and pygame uses `SDL` version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to `0`, the Surface will have the same width or height as the screen resolution. Using a `SDL` version prior to 1.2.10 will raise an exception.\n\nIt is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.\n\nWhen requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size.\n\nOn high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases.\n\nThe flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe \"\\|\" character). Here are the display flags you will want to choose from:\n\n``` python\npygame.FULLSCREEN    create a fullscreen display\npygame.DOUBLEBUF     only applicable with OPENGL\npygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN\npygame.OPENGL        create an OpenGL-renderable display\npygame.RESIZABLE     display window should be sizeable\npygame.NOFRAME       display window will have no border or controls\npygame.SCALED        resolution depends on desktop size and scale graphics\npygame.SHOWN         window is opened in visible mode (default)\npygame.HIDDEN        window is opened in hidden mode\n```\n\nNew in pygame 2.0.0: `SCALED`, `SHOWN` and `HIDDEN`\n\nBy setting the `vsync` parameter to `1`, it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to `set_mode()` with the `pygame.OPENGL` or `pygame.SCALED` flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to `set_mode()` that may give you a display with vsync:\n\n``` python\nflags = pygame.OPENGL | pygame.FULLSCREEN\nwindow_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)\n```\n\nVsync behaviour is considered experimental, and may change in future releases.\n\nNew in pygame 2.0.0: `vsync`\n\nBasic example:\n\n``` python\n# Open a window on the screen\nscreen_width=700\nscreen_height=400\nscreen=pygame.display.set_mode([screen_width, screen_height])\n```\n\nThe display index `0` means the default display is used. If no display index argument is provided, the default display can be overridden with an environment variable.\n\nChanged in pygame 1.9.5: `display` argument added\n\nChanged in pygame 2.1.3: pygame now ensures that subsequent calls to this function clears the window to black. On older versions, this was an implementation detail on the major platforms this function was tested with.\n\npygame.display.get_surface()  \nGet a reference to the currently set display surface\n\nget_surface() -\\> Surface\n\nReturn a reference to the currently set display Surface. If no display mode has been set this will return None.\n\npygame.display.flip()  \nUpdate the full display Surface to the screen\n\nflip() -\\> None\n\nThis will update the contents of the entire display. If your display mode is using the flags `pygame.HWSURFACE` and `pygame.DOUBLEBUF` on pygame 1, this will wait for a vertical retrace and swap the surfaces.\n\nWhen using an `pygame.OPENGL` display mode this will perform a gl buffer swap.\n\npygame.display.update()  \nUpdate portions of the screen for software displays\n\nupdate(rectangle=None) -\\> None\n\nupdate(rectangle_list) -\\> None\n\nThis function is like an optimized version of `pygame.display.flip()` for software displays. It allows only a portion of the screen to be updated, instead of the entire area. If no argument is passed it updates the entire Surface area like `pygame.display.flip()`.\n\nNote that calling `display.update(None)` means no part of the window is updated. Whereas `display.update()` means the whole window is updated.\n\nYou can pass the function a single rectangle, or a sequence of rectangles. It is more efficient to pass many rectangles at once than to call update multiple times with single or a partial list of rectangles. If passing a sequence of rectangles it is safe to include None values in the list, which will be skipped.\n\nThis call cannot be used on `pygame.OPENGL` displays and will generate an exception.\n\npygame.display.get_driver()  \nGet the name of the pygame display backend\n\nget_driver() -\\> name\n\nPygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the `SDL_VIDEODRIVER` flags in `pygame.display.set_mode()` to see some of the common options.\n\npygame.display.Info()  \nCreate a video display information object\n\nInfo() -\\> VideoInfo\n\nCreates a simple object containing several attributes to describe the current graphics environment. If this is called before `pygame.display.set_mode()` some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:\n\n``` python\nhw:         1 if the display is hardware accelerated\nwm:         1 if windowed display modes can be used\nvideo_mem:  The megabytes of video memory on the display. This is 0 if\n            unknown\nbitsize:    Number of bits used to store each pixel\nbytesize:   Number of bytes used to store each pixel\nmasks:      Four values used to pack RGBA values into pixels\nshifts:     Four values used to pack RGBA values into pixels\nlosses:     Four values used to pack RGBA values into pixels\nblit_hw:    1 if hardware Surface blitting is accelerated\nblit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated\nblit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated\nblit_sw:    1 if software Surface blitting is accelerated\nblit_sw_CC: 1 if software Surface colorkey blitting is accelerated\nblit_sw_A:  1 if software Surface pixel alpha blitting is accelerated\ncurrent_h, current_w:  Height and width of the current video mode, or\n            of the desktop mode if called before the display.set_mode\n            is called. (current_h, current_w are available since\n            SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if\n            an old SDL is being used.\n```\n\npygame.display.get_wm_info()  \nGet information about the current windowing system\n\nget_wm_info() -\\> dict\n\nCreates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a \"window\" key with the value set to the system id for the current display.\n\nNew in pygame 1.7.1.\n\npygame.display.get_desktop_sizes()  \nGet sizes of active desktops\n\nget_desktop_sizes() -\\> list\n\nThis function returns the sizes of the currently configured virtual desktops as a list of (x, y) tuples of integers.\n\nThe length of the list is not the same as the number of attached monitors, as a desktop can be mirrored across multiple monitors. The desktop sizes do not indicate the maximum monitor resolutions supported by the hardware, but the desktop size configured in the operating system.\n\nIn order to fit windows into the desktop as it is currently configured, and to respect the resolution configured by the operating system in fullscreen mode, this function *should* be used to replace many use cases of `pygame.display.list_modes()` whenever applicable.\n\nNew in pygame 2.0.0.\n\npygame.display.list_modes()  \nGet list of available fullscreen modes\n\nlist_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -\\> list\n\nThis function returns a list of possible sizes for a specified color depth. The return value will be an empty list if no display modes are available with the given arguments. A return value of `-1` means that any requested size should work (this is likely the case for windowed modes). Mode sizes are sorted from biggest to smallest.\n\nIf depth is `0`, the current/best color depth for the display is used. The flags defaults to `pygame.FULLSCREEN`, but you may need to add additional flags for specific fullscreen modes.\n\nThe display index `0` means the default display is used.\n\nSince pygame 2.0, `pygame.display.get_desktop_sizes()` has taken over some use cases from `pygame.display.list_modes()`:\n\nTo find a suitable size for non-fullscreen windows, it is preferable to use `pygame.display.get_desktop_sizes()` to get the size of the *current* desktop, and to then choose a smaller window size. This way, the window is guaranteed to fit, even when the monitor is configured to a lower resolution than the maximum supported by the hardware.\n\nTo avoid changing the physical monitor resolution, it is also preferable to use `pygame.display.get_desktop_sizes()` to determine the fullscreen resolution. Developers are strongly advised to default to the current physical monitor resolution unless the user explicitly requests a different one (e.g. in an options menu or configuration file).\n\nChanged in pygame 1.9.5: `display` argument added\n\npygame.display.mode_ok()  \nPick the best color depth for a display mode\n\nmode_ok(size, flags=0, depth=0, display=0) -\\> depth\n\nThis function uses the same arguments as `pygame.display.set_mode()`. It is used to determine if a requested display mode is available. It will return `0` if the display mode cannot be set. Otherwise it will return a pixel depth that best matches the display asked for.\n\nUsually the depth argument is not passed, but some platforms can support multiple display depths. If passed it will hint to which depth is a better match.\n\nThe function will return `0` if the passed display flags cannot be set.\n\nThe display index `0` means the default display is used.\n\nChanged in pygame 1.9.5: `display` argument added\n\npygame.display.gl_get_attribute()  \nGet the value for an OpenGL flag for the current display\n\ngl_get_attribute(flag) -\\> value\n\nAfter calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, it is a good idea to check the value of any requested OpenGL attributes. See `pygame.display.gl_set_attribute()` for a list of valid flags.\n\npygame.display.gl_set_attribute()  \nRequest an OpenGL display attribute for the display mode\n\ngl_set_attribute(flag, value) -\\> None\n\nWhen calling `pygame.display.set_mode()` with the `pygame.OPENGL` flag, Pygame automatically handles setting the OpenGL attributes like color and double-buffering. OpenGL offers several other attributes you may want control over. Pass one of these attributes as the flag, and its appropriate value. This must be called before `pygame.display.set_mode()`.\n\nMany settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.\n\nThe `OPENGL` flags are:\n\n``` python\nGL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,\nGL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,\nGL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO\n```\n\n`GL_MULTISAMPLEBUFFERS`\n\n> Whether to enable multisampling anti-aliasing. Defaults to 0 (disabled).\n>\n> Set `GL_MULTISAMPLESAMPLES` to a value above 0 to control the amount of anti-aliasing. A typical value is 2 or 3.\n\n`GL_STENCIL_SIZE`\n\n> Minimum bit size of the stencil buffer. Defaults to 0.\n\n`GL_DEPTH_SIZE`\n\n> Minimum bit size of the depth buffer. Defaults to 16.\n\n`GL_STEREO`\n\n> 1 enables stereo 3D. Defaults to 0.\n\n`GL_BUFFER_SIZE`\n\n> Minimum bit size of the frame buffer. Defaults to 0.\n\nNew in pygame 2.0.0: Additional attributes:\n\n``` python\nGL_ACCELERATED_VISUAL,\nGL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,\nGL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,\nGL_SHARE_WITH_CURRENT_CONTEXT,\nGL_CONTEXT_RELEASE_BEHAVIOR,\nGL_FRAMEBUFFER_SRGB_CAPABLE\n```\n\n`GL_CONTEXT_PROFILE_MASK`\n\n> Sets the OpenGL profile to one of these values:\n>\n> ``` python\n> GL_CONTEXT_PROFILE_CORE             disable deprecated features\n> GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features\n> GL_CONTEXT_PROFILE_ES               allow only the ES feature\n>                                     subset of OpenGL\n> ```\n\n`GL_ACCELERATED_VISUAL`\n\n> Set to 1 to require hardware acceleration, or 0 to force software render. By default, both are allowed.\n\npygame.display.get_active()  \nReturns True when the display is active on the screen\n\nget_active() -\\> bool\n\nReturns True when the display Surface is considered actively renderable on the screen and may be visible to the user. This is the default state immediately after `pygame.display.set_mode()`. This method may return True even if the application is fully hidden behind another application window.\n\nThis will return False if the display Surface has been iconified or minimized (either via `pygame.display.iconify()` or via an OS specific method such as the minimize-icon available on most desktops).\n\nThe method can also return False for other reasons without the application being explicitly iconified or minimized by the user. A notable example being if the user has multiple virtual desktops and the display Surface is not on the active virtual desktop.\n\nNote\n\nThis function returning True is unrelated to whether the application has input focus. Please see `pygame.key.get_focused()` and `pygame.mouse.get_focused()` for APIs related to input focus.\n\npygame.display.iconify()  \nIconify the display surface\n\niconify() -\\> bool\n\nRequest the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.\n\nWhen the display is iconified `pygame.display.get_active()` will return `False`. The event queue should receive an `ACTIVEEVENT` event when the window has been iconified. Additionally, the event queue also receives a `WINDOWEVENT_MINIMIZED` event when the window has been iconified on pygame 2.\n\npygame.display.toggle_fullscreen()  \nSwitch between fullscreen and windowed displays\n\ntoggle_fullscreen() -\\> int\n\nSwitches the display window between windowed and fullscreen modes. Display driver support is not great when using pygame 1, but with pygame 2 it is the most reliable method to switch to and from fullscreen.\n\nSupported display drivers in pygame 1:\n\n> - x11 (Linux/Unix)\n>\n> - wayland (Linux/Unix)\n\nSupported display drivers in pygame 2:\n\n> - windows (Windows)\n>\n> - x11 (Linux/Unix)\n>\n> - wayland (Linux/Unix)\n>\n> - cocoa (OSX/Mac)\n\nNote\n\n[`toggle_fullscreen()`](#pygame.display.toggle_fullscreen \"pygame.display.toggle_fullscreen\") doesn't work on Windows unless the window size is in [`pygame.display.list_modes()`](#pygame.display.list_modes) or the window is created with the flag `pygame.SCALED`. See [issue \\#2380](https://github.com/pygame/pygame/issues/2380).\n\npygame.display.set_gamma()  \nChange the hardware gamma ramps\n\nset_gamma(red, green=None, blue=None) -\\> bool\n\nDEPRECATED: This functionality will go away in SDL3.\n\nSet the red, green, and blue gamma values on the display hardware. If the green and blue arguments are not passed, they will both be the same as red. Not all systems and hardware support gamma ramps, if the function succeeds it will return `True`.\n\nA gamma value of `1.0` creates a linear color table. Lower values will darken the display and higher values will brighten.\n\nDeprecated since pygame 2.2.0.\n\npygame.display.set_gamma_ramp()  \nChange the hardware gamma ramps with a custom lookup\n\nset_gamma_ramp(red, green, blue) -\\> bool\n\nDEPRECATED: This functionality will go away in SDL3.\n\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each argument should be sequence of 256 integers. The integers should range between `0` and `0xffff`. Not all systems and hardware support gamma ramps, if the function succeeds it will return `True`.\n\nDeprecated since pygame 2.2.0.\n\npygame.display.set_icon()  \nChange the system image for the display window\n\nset_icon(Surface) -\\> None\n\nSets the runtime icon the system will use to represent the display window. All windows default to a simple pygame logo for the window icon.\n\nNote that calling this function implicitly initializes `pygame.display`, if it was not initialized before.\n\nYou can pass any surface, but most systems want a smaller image around 32x32. The image can have colorkey transparency which will be passed to the system.\n\nSome systems do not allow the window icon to change after it has been shown. This function can be called before `pygame.display.set_mode()` to create the icon before the display mode is set.\n\npygame.display.set_caption()  \nSet the current window caption\n\nset_caption(title, icontitle=None) -\\> None\n\nIf the display has a window title, this function will change the name on the window. In pygame 1.x, some systems supported an alternate shorter title to be used for minimized displays, but in pygame 2 `icontitle` does nothing.\n\npygame.display.get_caption()  \nGet the current window caption\n\nget_caption() -\\> (title, icontitle)\n\nReturns the title and icontitle for the display window. In pygame 2.x these will always be the same value.\n\npygame.display.set_palette()  \nSet the display color palette for indexed displays\n\nset_palette(palette=None) -\\> None\n\nThis will change the video display color palette for 8-bit displays. This does not change the palette for the actual display Surface, only the palette that is used to display the Surface. If no palette argument is passed, the system default palette will be restored. The palette is a sequence of `RGB` triplets.\n\npygame.display.get_num_displays()  \nReturn the number of displays\n\nget_num_displays() -\\> int\n\nReturns the number of available displays. This is always 1 if [`pygame.get_sdl_version()`](pygame#pygame.get_sdl_version) returns a major version number below 2.\n\nNew in pygame 1.9.5.\n\npygame.display.get_window_size()  \nReturn the size of the window or screen\n\nget_window_size() -\\> tuple\n\nReturns the size of the window initialized with [`pygame.display.set_mode()`](#pygame.display.set_mode). This may differ from the size of the display surface if `SCALED` is used.\n\nNew in pygame 2.0.0.\n\npygame.display.get_allow_screensaver()  \nReturn whether the screensaver is allowed to run.\n\nget_allow_screensaver() -\\> bool\n\nReturn whether screensaver is allowed to run whilst the app is running. Default is `False`. By default pygame does not allow the screensaver during game play.\n\nNote\n\nSome platforms do not have a screensaver or support disabling the screensaver. Please see [`pygame.display.set_allow_screensaver()`](#pygame.display.set_allow_screensaver) for caveats with screensaver support.\n\nNew in pygame 2.0.0.\n\npygame.display.set_allow_screensaver()  \nSet whether the screensaver may run\n\nset_allow_screensaver(bool) -\\> None\n\nChange whether screensavers should be allowed whilst the app is running. The default value of the argument to the function is True. By default pygame does not allow the screensaver during game play.\n\nIf the screensaver has been disallowed due to this function, it will automatically be allowed to run when [`pygame.quit()`](pygame#pygame.quit) is called.\n\nIt is possible to influence the default value via the environment variable `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`, which can be set to either `0` (disable) or `1` (enable).\n\nNote\n\nDisabling screensaver is subject to platform support. When platform support is absent, this function will silently appear to work even though the screensaver state is unchanged. The lack of feedback is due to SDL not providing any supported method for determining whether it supports changing the screensaver state. `SDL_HINT_VIDEO_ALLOW_SCREENSAVER` is available in SDL 2.0.2 or later. SDL1.2 does not implement this.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/display.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/display.html](https://www.pygame.org/docs/ref/display.html)"
- name: module-draw
  id: ref/draw
  summary: Draw several simple shapes to a surface
  description: "pygame.draw  \npygame module for drawing shapes\n\nDraw several simple shapes to a surface. These functions will work for rendering to any format of surface.\n\nMost of the functions take a width argument to represent the size of stroke (thickness) around the edge of the shape. If a width of 0 is passed the shape will be filled (solid).\n\nAll the drawing functions respect the clip area for the surface and will be constrained to that area. The functions return a rectangle representing the bounding area of changed pixels. This bounding rectangle is the 'minimum' bounding box that encloses the affected area.\n\nAll the drawing functions accept a color argument that can be one of the following formats:\n\n> - a [`pygame.Color`](color#pygame.Color) object\n>\n> - an `(RGB)` triplet (tuple/list)\n>\n> - an `(RGBA)` quadruplet (tuple/list)\n>\n> - an integer value that has been mapped to the surface's pixel format (see [`pygame.Surface.map_rgb()`](surface#pygame.Surface.map_rgb) and [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb))\n\nA color's alpha value will be written directly into the surface (if the surface contains pixel alphas), but the draw function will not draw transparently.\n\nThese functions temporarily lock the surface they are operating on. Many sequential drawing calls can be sped up by locking and unlocking the surface object around the draw calls (see [`pygame.Surface.lock()`](surface#pygame.Surface.lock) and [`pygame.Surface.unlock()`](surface#pygame.Surface.unlock)).\n\nNote\n\nSee the [`pygame.gfxdraw`](gfxdraw#module-pygame.gfxdraw) module for alternative draw methods.\n\npygame.draw.rect()  \ndraw a rectangle\n\nrect(surface, color, rect) -\\> Rect\n\nrect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -\\> Rect\n\nDraws a rectangle on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the `rect` parameter)\n\n  > if `width`` ``==`` ``0`, (default) fill the rectangle\n  >\n  > if `width`` ``>`` ``0`, used for line thickness\n  >\n  > if `width`` ``<`` ``0`, nothing will be drawn\n  >\n  >   \n\n  Changed in pygame 2.1.1: Drawing rects with width now draws the width correctly inside the rect's area, rather than using an internal call to draw.lines(), which had half the width spill outside the rect area.\n\n- **border_radius** (*int*) -- (optional) used for drawing rectangle with rounded corners. The supported range is \\[0, min(height, width) / 2\\], with 0 representing a rectangle without rounded corners.\n\n- **border_top_left_radius** (*int*) -- (optional) used for setting the value of top left border. If you don't set this value, it will use the border_radius value.\n\n- **border_top_right_radius** (*int*) -- (optional) used for setting the value of top right border. If you don't set this value, it will use the border_radius value.\n\n- **border_bottom_left_radius** (*int*) -- (optional) used for setting the value of bottom left border. If you don't set this value, it will use the border_radius value.\n\n- **border_bottom_right_radius** (*int*) --\n\n  (optional) used for setting the value of bottom right border. If you don't set this value, it will use the border_radius value.\n\n  > if `border_radius`` ``<`` ``1` it will draw rectangle without rounded corners\n  >\n  > if any of border radii has the value `<`` ``0` it will use value of the border_radius\n  >\n  > If sum of radii on the same side of the rectangle is greater than the rect size the radii\n  >\n  > will get scaled\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nNote\n\nThe [`pygame.Surface.fill()`](surface#pygame.Surface.fill) method works just as well for drawing filled rectangles and can be hardware accelerated on some platforms.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius.\n\npygame.draw.polygon()  \ndraw a polygon\n\npolygon(surface, color, points) -\\> Rect\n\npolygon(surface, color, points, width=0) -\\> Rect\n\nDraws a polygon on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates that make up the vertices of the polygon, each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats, e.g. `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]`\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the polygon is to be filled\n\n  > if width == 0, (default) fill the polygon\n  >\n  > if width \\> 0, used for line thickness\n  >\n  > if width \\< 0, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will grow outside the original boundary of the polygon. For more details on how the thickness for edge lines grow, refer to the `width` notes of the [`pygame.draw.line()`](#pygame.draw.line) function.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nNote\n\nFor an aapolygon, use [`aalines()`](#pygame.draw.aalines \"pygame.draw.aalines\") with `closed=True`.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.circle()  \ndraw a circle\n\ncircle(surface, color, center, radius) -\\> Rect\n\ncircle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -\\> Rect\n\nDraws a circle on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **center** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- center point of the circle as a sequence of 2 ints/floats, e.g. `(x,`` ``y)`\n\n- **radius** (*int* *or* *float*) -- radius of the circle, measured from the `center` parameter, nothing will be drawn if the `radius` is less than 1\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the circle is to be filled\n\n  > if `width`` ``==`` ``0`, (default) fill the circle\n  >\n  > if `width`` ``>`` ``0`, used for line thickness\n  >\n  > if `width`` ``<`` ``0`, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will only grow inward.\n\n- **draw_top_right** (*bool*) -- (optional) if this is set to True then the top right corner of the circle will be drawn\n\n- **draw_top_left** (*bool*) -- (optional) if this is set to True then the top left corner of the circle will be drawn\n\n- **draw_bottom_left** (*bool*) -- (optional) if this is set to True then the bottom left corner of the circle will be drawn\n\n- **draw_bottom_right** (*bool*) --\n\n  (optional) if this is set to True then the bottom right corner of the circle will be drawn\n\n  > if any of the draw_circle_part is True then it will draw all circle parts that have the True\n  >\n  > value, otherwise it will draw the entire circle.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `center` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **TypeError** -- if `center` is not a sequence of two numbers\n\n- **TypeError** -- if `radius` is not a number\n\nChanged in pygame 2.0.0: Added support for keyword arguments. Nothing is drawn when the radius is 0 (a pixel at the `center` coordinates used to be drawn when the radius equaled 0). Floats, and Vector2 are accepted for the `center` param. The drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants.\n\npygame.draw.ellipse()  \ndraw an ellipse\n\nellipse(surface, color, rect) -\\> Rect\n\nellipse(surface, color, rect, width=0) -\\> Rect\n\nDraws an ellipse on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to indicate the position and dimensions of the ellipse, the ellipse will be centered inside the rectangle and bounded by it\n\n- **width** (*int*) --\n\n  (optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the `rect` parameter)\n\n  > if `width`` ``==`` ``0`, (default) fill the ellipse\n  >\n  > if `width`` ``>`` ``0`, used for line thickness\n  >\n  > if `width`` ``<`` ``0`, nothing will be drawn\n  >\n  >   \n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will only grow inward from the original boundary of the `rect` parameter.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.arc()  \ndraw an elliptical arc\n\narc(surface, color, rect, start_angle, stop_angle) -\\> Rect\n\narc(surface, color, rect, start_angle, stop_angle, width=1) -\\> Rect\n\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop positions of the arc. The arc is drawn in a counterclockwise direction from the `start_angle` to the `stop_angle`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to indicate the position and dimensions of the ellipse which the arc will be based on, the ellipse will be centered inside the rectangle\n\n- **start_angle** (*float*) -- start angle of the arc in radians\n\n- **stop_angle** (*float*) --\n\n  stop angle of the arc in radians\n\n  > if `start_angle`` ``<`` ``stop_angle`, the arc is drawn in a counterclockwise direction from the `start_angle` to the `stop_angle`\n  >\n  > if `start_angle`` ``>`` ``stop_angle`, tau (tau == 2 \\* pi) will be added to the `stop_angle`, if the resulting stop angle value is greater than the `start_angle` the above `start_angle`` ``<`` ``stop_angle` case applies, otherwise nothing will be drawn\n  >\n  > if `start_angle`` ``==`` ``stop_angle`, nothing will be drawn\n  >\n  >   \n\n- **width** (*int*) --\n\n  (optional) used for line thickness (not to be confused with the width value of the `rect` parameter)\n\n  > if `width`` ``==`` ``0`, nothing will be drawn\n  >\n  > if `width`` ``>`` ``0`, (default is 1) used for line thickness\n  >\n  > if `width`` ``<`` ``0`, same as `width`` ``==`` ``0`\n  >\n  > Note\n  >\n  > When using `width` values `>`` ``1`, the edge lines will only grow inward from the original boundary of the `rect` parameter.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the given `rect` parameter and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.line()  \ndraw a straight line\n\nline(surface, color, start_pos, end_pos) -\\> Rect\n\nline(surface, color, start_pos, end_pos, width=1) -\\> Rect\n\nDraws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **start_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- start position of the line, (x, y)\n\n- **end_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- end position of the line, (x, y)\n\n- **width** (*int*) --\n\n  (optional) used for line thickness\n\n  if width \\>= 1, used for line thickness (default is 1)\n\n  if width \\< 1, nothing will be drawn\n\n    \n\n  Note\n\n  When using `width` values `>`` ``1`, lines will grow as follows.\n\n  For odd `width` values, the thickness of each line grows with the original line being in the center.\n\n  For even `width` values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope \\< 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope \\>= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `start_pos` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n**TypeError** -- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.lines()  \ndraw multiple contiguous straight line segments\n\nlines(surface, color, closed, points) -\\> Rect\n\nlines(surface, color, closed, points, width=1) -\\> Rect\n\nDraws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **closed** (*bool*) -- if `True` an additional line segment is drawn between the first and last points in the `points` sequence\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 2 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)` and from `(x2,`` ``y2)` to `(x3,`` ``y3)`, additionally if the `closed` parameter is `True` another line segment will be drawn from `(x3,`` ``y3)` to `(x1,`` ``y1)`\n\n- **width** (*int*) --\n\n  (optional) used for line thickness\n\n  if width \\>= 1, used for line thickness (default is 1)\n\n  if width \\< 1, nothing will be drawn\n\n    \n\n  Note\n\n  When using `width` values `>`` ``1` refer to the `width` notes of [`line()`](#pygame.draw.line \"pygame.draw.line\") for details on how thick lines grow.\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``2` (must have at least 2 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.aaline()  \ndraw a straight antialiased line\n\naaline(surface, color, start_pos, end_pos) -\\> Rect\n\naaline(surface, color, start_pos, end_pos, blend=1) -\\> Rect\n\nDraws a straight antialiased line on the given surface.\n\nThe line has a thickness of one pixel and the endpoints have a height and width of one pixel each.\n\nThe way a line and its endpoints are drawn:  \nIf both endpoints are equal, only a single pixel is drawn (after rounding floats to nearest integer).\n\nOtherwise if the line is not steep (i.e. if the length along the x-axis is greater than the height along the y-axis):\n\n> For each endpoint:\n>\n> > If `x`, the endpoint's x-coordinate, is a whole number find which pixels would be covered by it and draw them.\n> >\n> > Otherwise:\n> >\n> > > Calculate the position of the nearest point with a whole number for its x-coordinate, when extending the line past the endpoint.\n> > >\n> > > Find which pixels would be covered and how much by that point.\n> > >\n> > > If the endpoint is the left one, multiply the coverage by (1 - the decimal part of `x`).\n> > >\n> > > Otherwise multiply the coverage by the decimal part of `x`.\n> > >\n> > > Then draw those pixels.\n> > >\n> > > e.g.:  \n> > > The left endpoint of the line `((1,`` ``1.3),`` ``(5,`` ``3))` would cover 70% of the pixel `(1,`` ``1)` and 30% of the pixel `(1,`` ``2)` while the right one would cover 100% of the pixel `(5,`` ``3)`.\n> > >\n> > > The left endpoint of the line `((1.2,`` ``1.4),`` ``(4.6,`` ``3.1))` would cover 56% *(i.e. 0.8 \\* 70%)* of the pixel `(1,`` ``1)` and 24% *(i.e. 0.8 \\* 30%)* of the pixel `(1,`` ``2)` while the right one would cover 42% *(i.e. 0.6 \\* 70%)* of the pixel `(5,`` ``3)` and 18% *(i.e. 0.6 \\* 30%)* of the pixel `(5,`` ``4)` while the right\n>\n> Then for each point between the endpoints, along the line, whose x-coordinate is a whole number:\n>\n> > Find which pixels would be covered and how much by that point and draw them.\n> >\n> > e.g.:  \n> > The points along the line `((1,`` ``1),`` ``(4,`` ``2.5))` would be `(2,`` ``1.5)` and `(3,`` ``2)` and would cover 50% of the pixel `(2,`` ``1)`, 50% of the pixel `(2,`` ``2)` and 100% of the pixel `(3,`` ``2)`.\n> >\n> > The points along the line `((1.2,`` ``1.4),`` ``(4.6,`` ``3.1))` would be `(2,`` ``1.8)` (covering 20% of the pixel `(2,`` ``1)` and 80% of the pixel `(2,`` ``2)`), `(3,`` ``2.3)` (covering 70% of the pixel `(3,`` ``2)` and 30% of the pixel `(3,`` ``3)`) and `(4,`` ``2.8)` (covering 20% of the pixel `(2,`` ``1)` and 80% of the pixel `(2,`` ``2)`)\n\nOtherwise do the same for steep lines as for non-steep lines except along the y-axis instead of the x-axis (using `y` instead of `x`, top instead of left and bottom instead of right).\n\nNote\n\nRegarding float values for coordinates, a point with coordinate consisting of two whole numbers is considered being right in the center of said pixel (and having a height and width of 1 pixel would therefore completely cover it), while a point with coordinate where one (or both) of the numbers have non-zero decimal parts would be partially covering two (or four if both numbers have decimal parts) adjacent pixels, *e.g.* the point `(1.4,`` ``2)` covers 60% of the pixel `(1,`` ``2)` and 40% of the pixel `(2,2)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **start_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- start position of the line, (x, y)\n\n- **end_pos** (*tuple(int* *or* *float,* *int* *or* *float) or* *list(int* *or* *float,* *int* *or* *float) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int* *or* *float,* *int* *or* *float)*) -- end position of the line, (x, y)\n\n- **blend** (*int*) -- (optional) (deprecated) if non-zero (default) the line will be blended with the surface's existing pixel shades, otherwise it will overwrite them\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the `start_pos` parameter value (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n**TypeError** -- if `start_pos` or `end_pos` is not a sequence of two numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\npygame.draw.aalines()  \ndraw multiple contiguous straight antialiased line segments\n\naalines(surface, color, closed, points) -\\> Rect\n\naalines(surface, color, closed, points, blend=1) -\\> Rect\n\nDraws a sequence of contiguous straight antialiased lines on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\n- **closed** (*bool*) -- if `True` an additional line segment is drawn between the first and last points in the `points` sequence\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 2 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)` and from `(x2,`` ``y2)` to `(x3,`` ``y3)`, additionally if the `closed` parameter is `True` another line segment will be drawn from `(x3,`` ``y3)` to `(x1,`` ``y1)`\n\n- **blend** (*int*) -- (optional) (deprecated) if non-zero (default) each line will be blended with the surface's existing pixel shades, otherwise the pixels will be overwritten\n\nReturns  \na rect bounding the changed pixels, if nothing is drawn the bounding rect's position will be the position of the first point in the `points` parameter (float values will be truncated) and its width and height will be 0\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``2` (must have at least 2 points)\n\n- **TypeError** -- if `points` is not a sequence or `points` does not contain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nExample code for draw module.\n\n``` python\nimport pygame\nfrom math import pi\n\n# Initialize pygame\npygame.init()\n\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\n\npygame.display.set_caption(\"Example code for the draw module\")\n\n# Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\n\nwhile not done:\n    # This limits the while loop to a max of 60 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(60)\n\n    for event in pygame.event.get():  # User did something\n        if event.type == pygame.QUIT:  # If user clicked close\n            done = True  # Flag that we are done so we exit this loop\n\n    # Clear the screen and set the screen background\n    screen.fill(\"white\")\n\n    # Draw on the screen a green line from (0, 0) to (50, 30)\n    # 5 pixels wide. Uses (r, g, b) color - medium sea green.\n    pygame.draw.line(screen, (60, 179, 113), [0, 0], [50, 30], 5)\n\n    # Draw on the screen a green line from (0, 50) to (50, 80)\n    # Because it is an antialiased line, it is 1 pixel wide.\n    # Uses (r, g, b) color - medium sea green.\n    pygame.draw.aaline(screen, (60, 179, 113), [0, 50], [50, 80], True)\n\n    # Draw on the screen 3 black lines, each 5 pixels wide.\n    # The 'False' means the first and last points are not connected.\n    pygame.draw.lines(\n        screen, \"black\", False, [[0, 80], [50, 90], [200, 80], [220, 30]], 5\n    )\n\n    # Draw a rectangle outline\n    pygame.draw.rect(screen, \"black\", [75, 10, 50, 20], 2)\n\n    # Draw a solid rectangle. Same color as \"black\" above, specified in a new way\n    pygame.draw.rect(screen, (0, 0, 0), [150, 10, 50, 20])\n\n    # Draw a rectangle with rounded corners\n    pygame.draw.rect(screen, \"green\", [115, 210, 70, 40], 10, border_radius=15)\n    pygame.draw.rect(\n        screen,\n        \"red\",\n        [135, 260, 50, 30],\n        0,\n        border_radius=10,\n        border_top_left_radius=0,\n        border_bottom_right_radius=15,\n    )\n\n    # Draw an ellipse outline, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [225, 10, 50, 20], 2)\n\n    # Draw an solid ellipse, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [300, 10, 50, 20])\n\n    # This draws a triangle using the polygon command\n    pygame.draw.polygon(screen, \"black\", [[100, 100], [0, 200], [200, 200]], 5)\n\n    # Draw an arc as part of an ellipse.\n    # Use radians to determine what angle to draw.\n    pygame.draw.arc(screen, \"black\", [210, 75, 150, 125], 0, pi / 2, 2)\n    pygame.draw.arc(screen, \"green\", [210, 75, 150, 125], pi / 2, pi, 2)\n    pygame.draw.arc(screen, \"blue\", [210, 75, 150, 125], pi, 3 * pi / 2, 2)\n    pygame.draw.arc(screen, \"red\", [210, 75, 150, 125], 3 * pi / 2, 2 * pi, 2)\n\n    # Draw a circle\n    pygame.draw.circle(screen, \"blue\", [60, 250], 40)\n\n    # Draw only one circle quadrant\n    pygame.draw.circle(screen, \"blue\", [250, 250], 40, 0, draw_top_right=True)\n    pygame.draw.circle(screen, \"red\", [250, 250], 40, 30, draw_top_left=True)\n    pygame.draw.circle(screen, \"green\", [250, 250], 40, 20, draw_bottom_left=True)\n    pygame.draw.circle(screen, \"black\", [250, 250], 40, 10, draw_bottom_right=True)\n\n    # Go ahead and update the screen with what we've drawn.\n    # This MUST happen after all the other drawing commands.\n    pygame.display.flip()\n\n# Be IDLE friendly\npygame.quit()\n```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/draw.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/draw.html](https://www.pygame.org/docs/ref/draw.html)"
- name: module-event
  id: ref/event
  summary: Pygame handles all its event messaging through an event queue
  description: "pygame.event  \npygame module for interacting with events and queues\n\nPygame handles all its event messaging through an event queue. The routines in this module help you manage that event queue. The input queue is heavily dependent on the [`pygame.display`](display#module-pygame.display) module. If the display has not been initialized and a video mode not set, the event queue may not work properly.\n\nThe event queue has an upper limit on the number of events it can hold. When the queue becomes full new events are quietly dropped. To prevent lost events, especially input events which signal a quit command, your program must handle events every frame (with `pygame.event.get()`, `pygame.event.pump()`, `pygame.event.wait()`, `pygame.event.peek()` or `pygame.event.clear()`) and process them. Not handling events may cause your system to decide your program has locked up. To speed up queue processing use [`pygame.event.set_blocked()`](#pygame.event.set_blocked) to limit which events get queued.\n\nTo get the state of various input devices, you can forego the event queue and access the input devices directly with their appropriate modules: [`pygame.mouse`](mouse#module-pygame.mouse), [`pygame.key`](key#module-pygame.key), and [`pygame.joystick`](joystick#module-pygame.joystick). If you use this method, remember that pygame requires some form of communication with the system window manager and other parts of the platform. To keep pygame in sync with the system, you will need to call [`pygame.event.pump()`](#pygame.event.pump) to keep everything current. Usually, this should be called once per game loop. Note: Joysticks will not send any events until the device has been initialized.\n\nThe event queue contains [`pygame.event.Event`](#pygame.event.Event) event objects. There are a variety of ways to access the queued events, from simply checking for the existence of events, to grabbing them directly off the stack. The event queue also offers some simple filtering which can slightly help performance by blocking certain event types from the queue. Use [`pygame.event.set_allowed()`](#pygame.event.set_allowed) and [`pygame.event.set_blocked()`](#pygame.event.set_blocked) to change this filtering. By default, all event types can be placed on the queue.\n\nAll [`pygame.event.Event`](#pygame.event.Event) instances contain an event type identifier and attributes specific to that event type. The event type identifier is accessible as the [`pygame.event.Event.type`](#pygame.event.Event.type) property. Any of the event specific attributes can be accessed through the [`pygame.event.Event.__dict__`](#pygame.event.Event.__dict__) attribute or directly as an attribute of the event object (as member lookups are passed through to the object's dictionary values). The event object has no method functions. Users can create their own new events with the [`pygame.event.Event()`](#pygame.event.Event) function.\n\nThe event type identifier is in between the values of `NOEVENT` and `NUMEVENTS`. User defined events should have a value in the inclusive range of `USEREVENT` to `NUMEVENTS`` ``-`` ``1`. User defined events can get a custom event number with [`pygame.event.custom_type()`](#pygame.event.custom_type). It is recommended all user events follow this system.\n\nEvents support equality and inequality comparisons. Two events are equal if they are the same type and have identical attribute values.\n\nWhile debugging and experimenting, you can print an event object for a quick display of its type and members. The function [`pygame.event.event_name()`](#pygame.event.event_name) can be used to get a string representing the name of the event type.\n\nEvents that come from the system will have a guaranteed set of member attributes based on the type. The following is a list event types with their specific attributes.\n\n``` python\nQUIT              none\nACTIVEEVENT       gain, state\nKEYDOWN           key, mod, unicode, scancode\nKEYUP             key, mod, unicode, scancode\nMOUSEMOTION       pos, rel, buttons, touch\nMOUSEBUTTONUP     pos, button, touch\nMOUSEBUTTONDOWN   pos, button, touch\nJOYAXISMOTION     joy (deprecated), instance_id, axis, value\nJOYBALLMOTION     joy (deprecated), instance_id, ball, rel\nJOYHATMOTION      joy (deprecated), instance_id, hat, value\nJOYBUTTONUP       joy (deprecated), instance_id, button\nJOYBUTTONDOWN     joy (deprecated), instance_id, button\nVIDEORESIZE       size, w, h\nVIDEOEXPOSE       none\nUSEREVENT         code\n```\n\nChanged in pygame 2.0.0: The `joy` attribute was deprecated, `instance_id` was added.\n\nChanged in pygame 2.0.1: The `unicode` attribute was added to `KEYUP` event.\n\nNote that `ACTIVEEVENT`, `VIDEORESIZE` and `VIDEOEXPOSE` are considered as \"legacy\" events, the use of pygame2 `WINDOWEVENT` API is recommended over the use of this older API.\n\nYou can also find a list of constants for keyboard keys [here](key#key-constants-label).\n\n  \n\nWhen compiled with SDL2, pygame has these additional events and their attributes.\n\n``` python\nAUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)\nAUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)\nFINGERMOTION       touch_id, finger_id, x, y, dx, dy\nFINGERDOWN         touch_id, finger_id, x, y, dx, dy\nFINGERUP           touch_id, finger_id, x, y, dx, dy\nMOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y\nMULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers\nTEXTEDITING        text, start, length\nTEXTINPUT          text\n```\n\nNew in pygame 1.9.5.\n\nChanged in pygame 2.0.2: Fixed amount horizontal scroll (x, positive to the right and negative to the left).\n\nChanged in pygame 2.0.2: The `touch` attribute was added to all the `MOUSE` events.\n\nThe `touch` attribute of `MOUSE` events indicates whether or not the events were generated by a touch input device, and not a real mouse. You might want to ignore such events, if your application already handles `FINGERMOTION`, `FINGERDOWN` and `FINGERUP` events.\n\nNew in pygame 2.1.3: Added `precise_x` and `precise_y` to `MOUSEWHEEL` events\n\n  \n\nMany new events were introduced in pygame 2.\n\npygame can recognize text or files dropped in its window. If a file is dropped, `DROPFILE` event will be sent, `file` will be its path. The `DROPTEXT` event is only supported on X11.\n\n`MIDIIN` and `MIDIOUT` are events reserved for [`pygame.midi`](midi#module-pygame.midi) use.\n\npygame 2 also supports controller hot-plugging\n\n``` python\nEvent name               Attributes and notes\n\nDROPFILE                 file\nDROPBEGIN                (SDL backend >= 2.0.5)\nDROPCOMPLETE             (SDL backend >= 2.0.5)\nDROPTEXT                 text (SDL backend >= 2.0.5)\nMIDIIN\nMIDIOUT\nCONTROLLERDEVICEADDED    device_index\nJOYDEVICEADDED           device_index\nCONTROLLERDEVICEREMOVED  instance_id\nJOYDEVICEREMOVED         instance_id\nCONTROLLERDEVICEREMAPPED instance_id\nKEYMAPCHANGED            (SDL backend >= 2.0.4)\nCLIPBOARDUPDATE\nRENDER_TARGETS_RESET     (SDL backend >= 2.0.2)\nRENDER_DEVICE_RESET      (SDL backend >= 2.0.4)\nLOCALECHANGED            (SDL backend >= 2.0.14)\n```\n\nAlso in this version, `instance_id` attributes were added to joystick events, and the `joy` attribute was deprecated.\n\n`KEYMAPCHANGED` is a type of an event sent when keymap changes due to a system event such as an input language or keyboard layout change.\n\n`CLIPBOARDUPDATE` is an event sent when clipboard changes. This can still be considered as an experimental feature, some kinds of clipboard changes might not trigger this event.\n\n`LOCALECHANGED` is an event sent when user locale changes\n\nNew in pygame 2.0.0.\n\nNew in pygame 2.1.3: `KEYMAPCHANGED`, `CLIPBOARDUPDATE`, `RENDER_TARGETS_RESET`, `RENDER_DEVICE_RESET` and `LOCALECHANGED`\n\n  \n\nSince pygame 2.0.1, there are a new set of events, called window events. Here is a list of all window events, along with a short description\n\n``` python\nEvent type                Short description\n\nWINDOWSHOWN            Window became shown\nWINDOWHIDDEN           Window became hidden\nWINDOWEXPOSED          Window got updated by some external event\nWINDOWMOVED            Window got moved\nWINDOWRESIZED          Window got resized\nWINDOWSIZECHANGED      Window changed its size\nWINDOWMINIMIZED        Window was minimized\nWINDOWMAXIMIZED        Window was maximized\nWINDOWRESTORED         Window was restored\nWINDOWENTER            Mouse entered the window\nWINDOWLEAVE            Mouse left the window\nWINDOWFOCUSGAINED      Window gained focus\nWINDOWFOCUSLOST        Window lost focus\nWINDOWCLOSE            Window was closed\nWINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)\nWINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)\nWINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)\nWINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)\n```\n\n`WINDOWMOVED`, `WINDOWRESIZED` and `WINDOWSIZECHANGED` have `x` and `y` attributes, `WINDOWDISPLAYCHANGED` has a `display_index` attribute. All windowevents have a `window` attribute.\n\nNew in pygame 2.0.1.\n\nNew in pygame 2.1.3: `WINDOWICCPROFCHANGED` and `WINDOWDISPLAYCHANGED`\n\n  \n\nOn Android, the following events can be generated\n\n``` python\nEvent type                 Short description\n\nAPP_TERMINATING           OS is terminating the application\nAPP_LOWMEMORY             OS is low on memory, try to free memory if possible\nAPP_WILLENTERBACKGROUND   Application is entering background\nAPP_DIDENTERBACKGROUND    Application entered background\nAPP_WILLENTERFOREGROUND   Application is entering foreground\nAPP_DIDENTERFOREGROUND    Application entered foreground\n```\n\nNew in pygame 2.1.3.\n\n  \n\npygame.event.pump()  \ninternally process pygame event handlers\n\npump() -\\> None\n\nFor each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call `pygame.event.pump()` to allow pygame to handle internal actions.\n\nThis function is not necessary if your program is consistently processing events on the queue through the other [`pygame.event`](#module-pygame.event) functions.\n\nThere are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.\n\nCaution\n\nThis function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).\n\npygame.event.get()  \nget events from the queue\n\nget(eventtype=None) -\\> Eventlist\n\nget(eventtype=None, pump=True) -\\> Eventlist\n\nget(eventtype=None, pump=True, exclude=None) -\\> Eventlist\n\nThis will get all the messages and remove them from the queue. If a type or sequence of types is given only those messages will be removed from the queue and returned.\n\nIf a type or sequence of types is passed in the `exclude` argument instead, then all only *other* messages will be removed from the queue. If an `exclude` parameter is passed, the `eventtype` parameter *must* be None.\n\nIf you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.\n\nIf `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\nChanged in pygame 2.0.2: Added `exclude` argument\n\npygame.event.poll()  \nget a single event from the queue\n\npoll() -\\> Event instance\n\nReturns a single event from the queue. If the event queue is empty an event of type `pygame.NOEVENT` will be returned immediately. The returned event is removed from the queue.\n\nCaution\n\nThis function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).\n\npygame.event.wait()  \nwait for a single event from the queue\n\nwait() -\\> Event instance\n\nwait(timeout) -\\> Event instance\n\nReturns a single event from the queue. If the queue is empty this function will wait until one is created. From pygame 2.0.0, if a `timeout` argument is given, the function will return an event of type `pygame.NOEVENT` if no events enter the queue in `timeout` milliseconds. The event is removed from the queue once it has been returned. While the program is waiting it will sleep in an idle state. This is important for programs that want to share the system with other applications.\n\nChanged in pygame 2.0.0.dev13: Added `timeout` argument\n\nCaution\n\nThis function should only be called in the thread that initialized [`pygame.display`](display#module-pygame.display).\n\npygame.event.peek()  \ntest if event types are waiting on the queue\n\npeek(eventtype=None) -\\> bool\n\npeek(eventtype=None, pump=True) -\\> bool\n\nReturns `True` if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return `True` if any of those events are on the queue.\n\nIf `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\npygame.event.clear()  \nremove all events from the queue\n\nclear(eventtype=None) -\\> None\n\nclear(eventtype=None, pump=True) -\\> None\n\nRemoves all events from the queue. If `eventtype` is given, removes the given event or sequence of events. This has the same effect as [`pygame.event.get()`](#pygame.event.get) except `None` is returned. It can be slightly more efficient when clearing a full event queue.\n\nIf `pump` is `True` (the default), then [`pygame.event.pump()`](#pygame.event.pump) will be called.\n\nChanged in pygame 1.9.5: Added `pump` argument\n\npygame.event.event_name()  \nget the string name from an event id\n\nevent_name(type) -\\> string\n\nReturns a string representing the name (in CapWords style) of the given event type.\n\n\"UserEvent\" is returned for all values in the user event id range. \"Unknown\" is returned when the event type does not exist.\n\npygame.event.set_blocked()  \ncontrol which events are allowed on the queue\n\nset_blocked(type) -\\> None\n\nset_blocked(typelist) -\\> None\n\nset_blocked(None) -\\> None\n\nThe given event types are not allowed to appear on the event queue. By default all events can be placed on the queue. It is safe to disable an event type multiple times.\n\nIf `None` is passed as the argument, ALL of the event types are blocked from being placed on the queue.\n\npygame.event.set_allowed()  \ncontrol which events are allowed on the queue\n\nset_allowed(type) -\\> None\n\nset_allowed(typelist) -\\> None\n\nset_allowed(None) -\\> None\n\nThe given event types are allowed to appear on the event queue. By default, all event types can be placed on the queue. It is safe to enable an event type multiple times.\n\nIf `None` is passed as the argument, ALL of the event types are allowed to be placed on the queue.\n\npygame.event.get_blocked()  \ntest if a type of event is blocked from the queue\n\nget_blocked(type) -\\> bool\n\nget_blocked(typelist) -\\> bool\n\nReturns `True` if the given event type is blocked from the queue. If a sequence of event types is passed, this will return `True` if any of those event types are blocked.\n\npygame.event.set_grab()  \ncontrol the sharing of input devices with other applications\n\nset_grab(bool) -\\> None\n\nWhen your program runs in a windowed environment, it will share the mouse and keyboard devices with other applications that have focus. If your program sets the event grab to `True`, it will lock all input into your program.\n\nIt is best to not always grab the input, since it prevents the user from doing other things on their system.\n\npygame.event.get_grab()  \ntest if the program is sharing input devices\n\nget_grab() -\\> bool\n\nReturns `True` when the input events are grabbed for this application.\n\npygame.event.post()  \nplace a new event on the queue\n\npost(Event) -\\> bool\n\nPlaces the given event at the end of the event queue.\n\nThis is usually used for placing custom events on the event queue. Any type of event can be posted, and the events posted can have any attributes.\n\nThis returns a boolean on whether the event was posted or not. Blocked events cannot be posted, and this function returns `False` if you try to post them.\n\nChanged in pygame 2.0.1: returns a boolean, previously returned `None`\n\npygame.event.custom_type()  \nmake custom user event type\n\ncustom_type() -\\> int\n\nReserves a `pygame.USEREVENT` for a custom use.\n\nIf too many events are made a [`pygame.error`](pygame#pygame.error) is raised.\n\nNew in pygame 2.0.0.dev3.\n\npygame.event.Event  \npygame object for representing events\n\nEvent(type, dict) -\\> Event\n\nEvent(type, \\*\\*attributes) -\\> Event\n\nA pygame object used for representing an event. `Event` instances support attribute assignment and deletion.\n\nWhen creating the object, the attributes may come from a dictionary argument with string keys or from keyword arguments.\n\nNote\n\nFrom version 2.1.3 `EventType` is an alias for `Event`. Beforehand, `Event` was a function that returned `EventType` instances. Use of `Event` is preferred over `EventType` wherever it is possible, as the latter could be deprecated in a future version.\n\ntype  \nevent type identifier.\n\ntype -\\> int\n\nRead-only. The event type identifier. For user created event objects, this is the `type` argument passed to [`pygame.event.Event()`](#pygame.event.Event).\n\nFor example, some predefined event identifiers are `QUIT` and `MOUSEMOTION`.\n\n\\_\\_dict\\_\\_  \nevent attribute dictionary\n\n\\_\\_dict\\_\\_ -\\> dict\n\nRead-only. The event type specific attributes of an event. The `dict` attribute is a synonym for backward compatibility.\n\nFor example, the attributes of a `KEYDOWN` event would be `unicode`, `key`, and `mod`\n\nNew in pygame 1.9.2: Mutable attributes.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/event.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/event.html](https://www.pygame.org/docs/ref/event.html)"
- name: module-examples
  id: ref/examples
  summary: These examples should help get you started with pygame
  description: "pygame.examples  \nmodule of example programs\n\nThese examples should help get you started with pygame. Here is a brief rundown of what you get. The source code for these examples is in the public domain. Feel free to use for your own projects.\n\nThere are several ways to run the examples. First they can be run as stand-alone programs. Second they can be imported and their `main()` methods called (see below). Finally, the easiest way is to use the python -m option:\n\n``` python\npython -m pygame.examples.<example name> <example arguments>\n```\n\neg:\n\n``` python\npython -m pygame.examples.scaletest someimage.png\n```\n\nResources such as images and sounds for the examples are found in the pygame/examples/data subdirectory.\n\nYou can find where the example files are installed by using the following commands inside the python interpreter.\n\n``` python\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.__file__\n'/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'\n```\n\nOn each OS and version of Python the location will be slightly different. For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/' On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'\n\nYou can also run the examples in the python interpreter by calling each modules main() function.\n\n``` python\n>>> import pygame.examples.scaletest\n>>> pygame.examples.scaletest.main()\n```\n\nWe're always on the lookout for more examples and/or example requests. Code like this is probably the best way to start getting involved with python gaming.\n\nexamples as a package is new to pygame 1.9.0. But most of the examples came with pygame much earlier.\n\naliens.main()  \nplay the full aliens example\n\naliens.main() -\\> None\n\nThis started off as a port of the `SDL` demonstration, Aliens. Now it has evolved into something sort of resembling fun. This demonstrates a lot of different uses of sprites and optimized blitting. Also transparency, colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is 117! goodluck)\n\nstars.main()  \nrun a simple starfield example\n\nstars.main() -\\> None\n\nA simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen.\n\nchimp.main()  \nhit the moving chimp\n\nchimp.main() -\\> None\n\nThis simple example is derived from the line-by-line tutorial that comes with pygame. It is based on a 'popular' web banner. Note there are comments here, but for the full explanation, follow along in the tutorial.\n\nmoveit.main()  \ndisplay animated objects on the screen\n\nmoveit.main() -\\> None\n\nThis is the full and final example from the Pygame Tutorial, \"How Do I Make It Move\". It creates 10 objects and animates them on the screen.\n\nNote it's a bit scant on error checking, but it's easy to read. :\\] Fortunately, this is python, and we needn't wrestle with a pile of error codes.\n\nfonty.main()  \nrun a font rendering example\n\nfonty.main() -\\> None\n\nSuper quick, super simple application demonstrating the different ways to render fonts with the font module\n\nfreetype_misc.main()  \nrun a FreeType rendering example\n\nfreetype_misc.main() -\\> None\n\nA showcase of rendering features the [`pygame.freetype.Font`](freetype#pygame.freetype.Font) class provides in addition to those available with [`pygame.font.Font`](font#pygame.font.Font). It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text.\n\nvgrade.main()  \ndisplay a vertical gradient\n\nvgrade.main() -\\> None\n\nDemonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :\\]\n\neventlist.main()  \ndisplay pygame events\n\neventlist.main() -\\> None\n\nEventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.\n\nThis is not quality 'ui' code at all, but you can see how to implement very non-interactive status displays, or even a crude text output control.\n\narraydemo.main()  \nshow various surfarray effects\n\narraydemo.main(arraytype=None) -\\> None\n\nAnother example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy' will raise ValueError.\n\nsound.main()  \nload and play a sound\n\nsound.main(file_path=None) -\\> None\n\nExtremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.\n\nIf provided, use the audio file 'file_path', otherwise use a default file.\n\n`sound.py` optional command line argument: an audio file\n\nsound_array_demos.main()  \nplay various sndarray effects\n\nsound_array_demos.main(arraytype=None) -\\> None\n\nUses sndarray and NumPy to create offset faded copies of the original sound. Currently it just uses hardcoded values for the number of echoes and the delay. Easy for you to recreate as needed.\n\nThe `arraytype` parameter is deprecated; passing any value besides 'numpy' will raise ValueError.\n\nliquid.main()  \ndisplay an animated liquid effect\n\nliquid.main() -\\> None\n\nThis example was created in a quick comparison with the BlitzBasic gaming language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).\n\nglcube.main()  \ndisplay an animated 3D cube using OpenGL\n\nglcube.main() -\\> None\n\nUsing PyOpenGL and pygame, this creates a spinning 3D multicolored cube.\n\nscrap_clipboard.main()  \naccess the clipboard\n\nscrap_clipboard.main() -\\> None\n\nA simple demonstration example for the clipboard support.\n\nmask.main()  \ndisplay multiple images bounce off each other using collision detection\n\nmask.main(\\*args) -\\> None\n\nPositional arguments:\n\n``` python\none or more image file names.\n```\n\nThis `pygame.masks` demo will display multiple moving sprites bouncing off each other. More than one sprite image can be provided.\n\nIf run as a program then `mask.py` takes one or more image files as command line arguments.\n\ntestsprite.main()  \nshow lots of sprites moving around\n\ntestsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = \\[640, 480\\], use_alpha = False, flags = 0) -\\> None\n\nOptional keyword arguments:\n\n``` python\nupdate_rects - use the RenderUpdate sprite group class\nuse_static - include non-moving images\nuse_FastRenderGroup - Use the FastRenderGroup sprite group\nscreen_dims - pygame window dimensions\nuse_alpha - use alpha blending\nflags - additional display mode flags\n```\n\nLike the `testsprite.c` that comes with SDL, this pygame version shows lots of sprites moving around.\n\nIf run as a stand-alone program then no command line arguments are taken.\n\nheadless_no_windows_needed.main()  \nwrite an image file that is smoothscaled copy of an input file\n\nheadless_no_windows_needed.main(fin, fout, w, h) -\\> None\n\narguments:\n\n``` python\nfin - name of an input image file\nfout - name of the output file to create/overwrite\nw, h - size of the rescaled image, as integer width and height\n```\n\nHow to use pygame with no windowing system, like on headless servers.\n\nThumbnail generation with scaling is an example of what you can do with pygame.\n\n`NOTE`: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.\n\nIf `headless_no_windows_needed.py` is run as a program it takes the following command line arguments:\n\n``` python\n-scale inputimage outputimage new_width new_height\neg. -scale in.png outpng 50 50\n```\n\njoystick.main()  \ndemonstrate joystick functionality\n\njoystick.main() -\\> None\n\nA demo showing full joystick support.\n\nNew in pygame 2.0.2.\n\nblend_fill.main()  \ndemonstrate the various surface.fill method blend options\n\nblend_fill.main() -\\> None\n\nA interactive demo that lets one choose which BLEND_xxx option to apply to a surface.\n\nblit_blends.main()  \nuses alternative additive fill to that of surface.fill\n\nblit_blends.main() -\\> None\n\nFake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill.\n\ncursors.main()  \ndisplay two different custom cursors\n\ncursors.main() -\\> None\n\nDisplay an arrow or circle with crossbar cursor.\n\npixelarray.main()  \ndisplay various pixelarray generated effects\n\npixelarray.main() -\\> None\n\nDisplay various pixelarray generated effects.\n\nscaletest.main()  \ninteractively scale an image using smoothscale\n\nscaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -\\> None\n\narguments:\n\n``` python\nimagefile - file name of source image (required)\nconvert_alpha - use convert_alpha() on the surf (default False)\nrun_speed_test - (default False)\n```\n\nA smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.\n\nIf `scaletest.py` is run as a program then the command line options are:\n\n``` python\nImageFile [-t] [-convert_alpha]\n[-t] = Run Speed Test\n[-convert_alpha] = Use convert_alpha() on the surf.\n```\n\nmidi.main()  \nrun a midi example\n\nmidi.main(mode='output', device_id=None) -\\> None\n\nArguments:\n\n``` python\nmode - if 'output' run a midi keyboard output example\n          'input' run a midi event logger input example\n          'list' list available midi devices\n       (default 'output')\ndevice_id - midi device number; if None then use the default midi input or\n            output device for the system\n```\n\nThe output example shows how to translate mouse clicks or computer keyboard events into midi notes. It implements a rudimentary button widget and state machine.\n\nThe input example shows how to translate midi input to pygame events.\n\nWith the use of a virtual midi patch cord the output and input examples can be run as separate processes and connected so the keyboard output is displayed on a console.\n\nnew to pygame 1.9.0\n\nscroll.main()  \nrun a Surface.scroll example that shows a magnified image\n\nscroll.main(image_file=None) -\\> None\n\nThis example shows a scrollable image that has a zoom factor of eight. It uses the [`Surface.scroll()`](surface#pygame.Surface.scroll \"pygame.Surface.scroll\") function to shift the image on the display surface. A clip rectangle protects a margin area. If called as a function, the example accepts an optional image file path. If run as a program it takes an optional file path command line argument. If no file is provided a default image file is used.\n\nWhen running click on a black triangle to move one pixel in the direction the triangle points. Or use the arrow keys. Close the window or press `ESC` to quit.\n\ncamera.main()  \ndisplay video captured live from an attached camera\n\ncamera.main() -\\> None\n\nA simple live video player, it uses the first available camera it finds on the system.\n\nplaymus.main()  \nplay an audio file\n\nplaymus.main(file_path) -\\> None\n\nA simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/examples.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/examples.html](https://www.pygame.org/docs/ref/examples.html)"
- name: module-fastevent
  id: ref/fastevent
  summary: In older pygame versions before pygame 2, pygame.event was not well suited for posting events from different threads
  description: "pygame.fastevent  \npygame module for interacting with events and queues\n\nIMPORTANT NOTE: THIS MODULE IS DEPRECATED IN PYGAME 2.2\n\nIn older pygame versions before pygame 2, [`pygame.event`](event#module-pygame.event) was not well suited for posting events from different threads. This module served as a replacement (with less features) for multithreaded use. Now, the usage of this module is highly discouraged in favour of use of the main [`pygame.event`](event#module-pygame.event) module. This module will be removed in a future pygame version.\n\nBelow, the legacy docs of the module is provided\n\npygame.fastevent.init()  \ninitialize pygame.fastevent\n\ninit() -\\> None\n\nInitialize the pygame.fastevent module.\n\npygame.fastevent.get_init()  \nreturns True if the fastevent module is currently initialized\n\nget_init() -\\> bool\n\nReturns True if the pygame.fastevent module is currently initialized.\n\npygame.fastevent.pump()  \ninternally process pygame event handlers\n\npump() -\\> None\n\nFor each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system.\n\nThis function is not necessary if your program is consistently processing events on the queue through the other [`pygame.fastevent`](#module-pygame.fastevent) functions.\n\nThere are important things that must be dealt with internally in the event queue. The main window may need to be repainted or respond to the system. If you fail to make a call to the event queue for too long, the system may decide your program has locked up.\n\npygame.fastevent.wait()  \nwait for an event\n\nwait() -\\> Event\n\nReturns the current event on the queue. If there are no messages waiting on the queue, this will not return until one is available. Sometimes it is important to use this wait to get events from the queue, it will allow your application to idle when the user isn't doing anything with it.\n\npygame.fastevent.poll()  \nget an available event\n\npoll() -\\> Event\n\nReturns next event on queue. If there is no event waiting on the queue, this will return an event with type NOEVENT.\n\npygame.fastevent.get()  \nget all events from the queue\n\nget() -\\> list of Events\n\nThis will get all the messages and remove them from the queue.\n\npygame.fastevent.post()  \nplace an event on the queue\n\npost(Event) -\\> None\n\nThis will post your own event objects onto the event queue. You can post any event type you want, but some care must be taken. For example, if you post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving the event will expect the standard MOUSEBUTTONDOWN attributes to be available, like 'pos' and 'button'.\n\nBecause pygame.fastevent.post() may have to wait for the queue to empty, you can get into a dead lock if you try to append an event on to a full queue from the thread that processes events. For that reason I do not recommend using this function in the main thread of an SDL program.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/fastevent.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/fastevent.html](https://www.pygame.org/docs/ref/fastevent.html)"
- name: module-font
  id: ref/font
  summary: The font module allows for rendering TrueType fonts into Surface objects
  description: "pygame.font  \npygame module for loading and rendering fonts\n\nThe font module allows for rendering TrueType fonts into Surface objects. This module is built on top of the SDL_ttf library, which comes with all normal pygame installations.\n\nMost of the work done with fonts are done by using the actual Font objects. The module by itself only has routines to support the creation of Font objects with [`pygame.font.Font()`](#pygame.font.Font).\n\nYou can load fonts from the system by using the [`pygame.font.SysFont()`](#pygame.font.SysFont) function. There are a few other functions to help look up the system fonts.\n\nPygame comes with a builtin default font, freesansbold. This can always be accessed by passing `None` as the font name.\n\nBefore pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character ('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf 2.0.15 accepts any valid UCS-4 / UTF-32 character (like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')). More about this in [`Font.render()`](#pygame.font.Font.render \"pygame.font.Font.render\").\n\nBefore pygame 2.0.3, this character space restriction can be avoided by using the [`pygame.freetype`](freetype#module-pygame.freetype) based `pygame.ftfont` to emulate the Font module. This can be used by defining the environment variable PYGAME_FREETYPE before the first import of [`pygame`](pygame#module-pygame). Since the problem `pygame.ftfont` solves no longer exists, it will likely be removed in the future.\n\npygame.font.init()  \ninitialize the font module\n\ninit() -\\> None\n\nThis method is called automatically by `pygame.init()`. It initializes the font module. The module must be initialized before any other functions will work.\n\nIt is safe to call this function more than once.\n\npygame.font.quit()  \nuninitialize the font module\n\nquit() -\\> None\n\nManually uninitialize SDL_ttf's font system. This is called automatically by `pygame.quit()`.\n\nIt is safe to call this function even if font is currently not initialized.\n\npygame.font.get_init()  \ntrue if the font module is initialized\n\nget_init() -\\> bool\n\nTest if the font module is initialized or not.\n\npygame.font.get_default_font()  \nget the filename of the default font\n\nget_default_font() -\\> string\n\nReturn the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives.\n\npygame.font.get_sdl_ttf_version()  \ngets SDL_ttf version\n\nget_sdl_ttf_version(linked=True) -\\> (major, minor, patch)\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave get_sdl_ttf_version feedback with authors](https://github.com/pygame/pygame/pull/3095)\n\nReturns a tuple of integers that identify SDL_ttf's version. SDL_ttf is the underlying font rendering library, written in C, on which pygame's font module depends. If 'linked' is True (the default), the function returns the version of the linked TTF library. Otherwise this function returns the version of TTF pygame was compiled with\n\nNew in pygame 2.1.3.\n\npygame.font.get_fonts()  \nget all available fonts\n\nget_fonts() -\\> list of strings\n\nReturns a list of all the fonts available on the system. The names of the fonts will be set to lowercase with all spaces and punctuation removed. This works on most systems, but some will return an empty list if they cannot find fonts.\n\nChanged in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\npygame.font.match_font()  \nfind a specific font on the system\n\nmatch_font(name, bold=False, italic=False) -\\> path\n\nReturns the full path to a font file on the system. If bold or italic are set to true, this will attempt to find the correct family of font.\n\nThe font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order. If none of the given names are found, None is returned.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nChanged in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\nExample:\n\n``` python\nprint pygame.font.match_font('bitstreamverasans')\n# output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf\n# (but only if you have Vera on your system)\n```\n\npygame.font.SysFont()  \ncreate a Font object from the system fonts\n\nSysFont(name, size, bold=False, italic=False) -\\> Font\n\nReturn a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nChanged in pygame 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\npygame.font.Font  \ncreate a new Font object from a file\n\nFont(file_path=None, size=12) -\\> Font\n\nFont(file_path, size) -\\> Font\n\nFont(pathlib.Path, size) -\\> Font\n\nFont(object, size) -\\> Font\n\nLoad a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is `None` the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed. If no arguments are given then the default font will be used and a font size of 12 is used.\n\nFont objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs.\n\nbold  \nGets or sets whether the font should be rendered in (faked) bold.\n\nbold -\\> bool\n\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic, underline and strikethrough modes.\n\nNew in pygame 2.0.0.\n\nitalic  \nGets or sets whether the font should be rendered in (faked) italics.\n\nitalic -\\> bool\n\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold, underline and strikethrough modes.\n\nNew in pygame 2.0.0.\n\nunderline  \nGets or sets whether the font should be rendered with an underline.\n\nunderline -\\> bool\n\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and strikethrough modes.\n\nNew in pygame 2.0.0.\n\nstrikethrough  \nGets or sets whether the font should be rendered with a strikethrough.\n\nstrikethrough -\\> bool\n\nWhether the font should be rendered with a strikethrough.\n\nWhen set to True, all rendered fonts will include an strikethrough. The strikethrough is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and underline modes.\n\nNew in pygame 2.1.3.\n\nrender()  \ndraw text on a new Surface\n\nrender(text, antialias, color, background=None) -\\> Surface\n\nThis creates a new Surface with the specified text rendered on it. [`pygame.font`](#module-pygame.font) provides no way to directly draw text on an existing Surface: instead you must use [`Font.render()`](#pygame.font.Font.render \"pygame.font.Font.render\") to create an image (Surface) of the text, then blit this image onto another Surface.\n\nThe text can only be a single line: newline characters are not rendered. Null characters ('x00') raise a TypeError. Both Unicode and char (byte) strings are accepted. For Unicode strings only UCS-2 characters ('\\u0001' to '\\uFFFF') were previously supported and any greater unicode codepoint would raise a UnicodeError. Now, characters in the UCS-4 range are supported. For char strings a `LATIN1` encoding is assumed. The antialias argument is a boolean: if True the characters will have smooth edges. The color argument is the color of the text \\[e.g.: (0,0,255) for blue\\]. The optional background argument is a color to use for the text background. If no background is passed the area outside the text will be transparent.\n\nThe Surface returned will be of the dimensions required to hold the text. (the same as those returned by [`Font.size()`](#pygame.font.Font.size \"pygame.font.Font.size\")). If an empty string is passed for the text, a blank surface will be returned that is zero pixel wide and the height of the font.\n\nDepending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit `RGB` images. If the background is transparent a pixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.\n\nIf you render '\\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle newlines yourself.\n\nFont rendering is not thread safe: only a single thread can render text at any time.\n\nChanged in pygame 2.0.3: Rendering UCS4 unicode works and does not raise an exception. Use if hasattr(pygame.font, \"UCS4\"): to see if pygame supports rendering UCS4 unicode including more languages and emoji.\n\nsize()  \ndetermine the amount of space needed to render text\n\nsize(text) -\\> (width, height)\n\nReturns the dimensions needed to render the text. This can be used to help determine the positioning needed for text before it is rendered. It can also be used for word wrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for \"ae\" will not always match the width for \"a\" + \"e\".\n\nset_underline()  \ncontrol if text is rendered with an underline\n\nset_underline(bool) -\\> None\n\nWhen enabled, all rendered fonts will include an underline. The underline is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and strikethrough modes.\n\nNote\n\nThis is the same as the [`underline`](#pygame.font.Font.underline \"pygame.font.Font.underline\") attribute.\n\nget_underline()  \ncheck if text will be rendered with an underline\n\nget_underline() -\\> bool\n\nReturn True when the font underline is enabled.\n\n> Note\n>\n> This is the same as the [`underline`](#pygame.font.Font.underline \"pygame.font.Font.underline\") attribute.\n\nset_strikethrough()  \ncontrol if text is rendered with a strikethrough\n\nset_strikethrough(bool) -\\> None\n\nWhen enabled, all rendered fonts will include a strikethrough. The strikethrough is always one pixel thick, regardless of font size. This can be mixed with the bold, italic and underline modes.\n\nNote\n\nThis is the same as the [`strikethrough`](#pygame.font.Font.strikethrough \"pygame.font.Font.strikethrough\") attribute.\n\nNew in pygame 2.1.3.\n\nget_strikethrough()  \ncheck if text will be rendered with a strikethrough\n\nget_strikethrough() -\\> bool\n\nReturn True when the font strikethrough is enabled.\n\n> Note\n>\n> This is the same as the [`strikethrough`](#pygame.font.Font.strikethrough \"pygame.font.Font.strikethrough\") attribute.\n>\n> New in pygame 2.1.3.\n\nset_bold()  \nenable fake rendering of bold text\n\nset_bold(bool) -\\> None\n\nEnables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic, underline and strikethrough modes.\n\nNote\n\nThis is the same as the [`bold`](#pygame.font.Font.bold \"pygame.font.Font.bold\") attribute.\n\nget_bold()  \ncheck if text will be rendered bold\n\nget_bold() -\\> bool\n\nReturn True when the font bold rendering mode is enabled.\n\nNote\n\nThis is the same as the [`bold`](#pygame.font.Font.bold \"pygame.font.Font.bold\") attribute.\n\nset_italic()  \nenable fake rendering of italic text\n\nset_italic(bool) -\\> None\n\nEnables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold, underline and strikethrough modes.\n\nNote\n\nThis is the same as the [`italic`](#pygame.font.Font.italic \"pygame.font.Font.italic\") attribute.\n\nmetrics()  \ngets the metrics for each character in the passed string\n\nmetrics(text) -\\> list\n\nThe list contains tuples for each character, which contain the minimum `X` offset, the maximum `X` offset, the minimum `Y` offset, the maximum `Y` offset and the advance offset (bearing plus width) of the character. \\[(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy, advance), ...\\]. None is entered in the list for each unrecognized character.\n\nget_italic()  \ncheck if the text will be rendered italic\n\nget_italic() -\\> bool\n\nReturn True when the font italic rendering mode is enabled.\n\nNote\n\nThis is the same as the [`italic`](#pygame.font.Font.italic \"pygame.font.Font.italic\") attribute.\n\nget_linesize()  \nget the line space of the font text\n\nget_linesize() -\\> int\n\nReturn the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.\n\nget_height()  \nget the height of the font\n\nget_height() -\\> int\n\nReturn the height in pixels of the actual rendered text. This is the average size for each glyph in the font.\n\nget_ascent()  \nget the ascent of the font\n\nget_ascent() -\\> int\n\nReturn the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.\n\nget_descent()  \nget the descent of the font\n\nget_descent() -\\> int\n\nReturn the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font.\n\nset_script()  \nset the script code for text shaping\n\nset_script(str) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave feedback with authors](https://github.com/pygame/pygame/pull/3330)\n\nSets the script used by harfbuzz text shaping, taking a 4 character script code as input. For example, Hindi is written in the Devanagari script, for which the script code is \"Deva\". See the full list of script codes in [ISO 15924](https://www.unicode.org/iso15924/iso15924-codes.html).\n\nThis method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the method will raise a pygame.error.\n\nNew in pygame 2.2.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/font.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/font.html](https://www.pygame.org/docs/ref/font.html)"
- name: module-freetype
  id: ref/freetype
  summary: The pygame.freetype module is a replacement for pygame.font
  description: "pygame.freetype  \nEnhanced pygame module for loading and rendering computer fonts\n\nThe `pygame.freetype` module is a replacement for [`pygame.font`](font#module-pygame.font). It has all of the functionality of the original, plus many new features. Yet is has absolutely no dependencies on the SDL_ttf library. It is implemented directly on the FreeType 2 library. The `pygame.freetype` module is not itself backward compatible with [`pygame.font`](font#module-pygame.font). Instead, use the `pygame.ftfont` module as a drop-in replacement for [`pygame.font`](font#module-pygame.font).\n\nAll font file formats supported by FreeType can be rendered by `pygame.freetype`, namely `TTF`, Type1, `CFF`, OpenType, `SFNT`, `PCF`, `FNT`, `BDF`, `PFR` and Type42 fonts. All glyphs having UTF-32 code points are accessible (see [`Font.ucs4`](#pygame.freetype.Font.ucs4 \"pygame.freetype.Font.ucs4\")).\n\nMost work on fonts is done using [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instances. The module itself only has routines for initialization and creation of [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") objects. You can load fonts from the system using the [`SysFont()`](#pygame.freetype.SysFont \"pygame.freetype.SysFont\") function.\n\nExtra support of bitmap fonts is available. Available bitmap sizes can be listed (see [`Font.get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\")). For bitmap only fonts [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") can set the size for you (see the [`Font.size`](#pygame.freetype.Font.size \"pygame.freetype.Font.size\") property).\n\nFor now undefined character codes are replaced with the `.notdef` (not defined) character. How undefined codes are handled may become configurable in a future release.\n\nPygame comes with a built-in default font. This can always be accessed by passing None as the font name to the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") constructor.\n\nExtra rendering features available to [`pygame.freetype.Font`](#pygame.freetype.Font) are direct to surface rendering (see [`Font.render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\")), character kerning (see [`Font.kerning`](#pygame.freetype.Font.kerning \"pygame.freetype.Font.kerning\")), vertical layout (see [`Font.vertical`](#pygame.freetype.Font.vertical \"pygame.freetype.Font.vertical\")), rotation of rendered text (see [`Font.rotation`](#pygame.freetype.Font.rotation \"pygame.freetype.Font.rotation\")), and the strong style (see [`Font.strong`](#pygame.freetype.Font.strong \"pygame.freetype.Font.strong\")). Some properties are configurable, such as strong style strength (see [`Font.strength`](#pygame.freetype.Font.strength \"pygame.freetype.Font.strength\")) and underline positioning (see [`Font.underline_adjustment`](#pygame.freetype.Font.underline_adjustment \"pygame.freetype.Font.underline_adjustment\")). Text can be positioned by the upper right corner of the text box or by the text baseline (see [`Font.origin`](#pygame.freetype.Font.origin \"pygame.freetype.Font.origin\")). Finally, a font's vertical and horizontal size can be adjusted separately (see [`Font.size`](#pygame.freetype.Font.size \"pygame.freetype.Font.size\")). The [`pygame.examples.freetype_misc`](examples#pygame.examples.freetype_misc.main \"pygame.examples.freetype_misc.main\") example shows these features in use.\n\nThe pygame package does not import `freetype` automatically when loaded. This module must be imported explicitly to be used.\n\n``` python\nimport pygame\nimport pygame.freetype\n```\n\nNew in pygame 1.9.2: `freetype`\n\npygame.freetype.get_error()  \nReturn the latest FreeType error\n\nget_error() -\\> str\n\nget_error() -\\> None\n\nReturn a description of the last error which occurred in the FreeType2 library, or `None` if no errors have occurred.\n\npygame.freetype.get_version()  \nReturn the FreeType version\n\nget_version(linked=True) -\\> (int, int, int)\n\nReturns the version of the FreeType library in use by this module. `linked=True` is the default behavior and returns the linked version of FreeType and `linked=False` returns the compiled version of FreeType.\n\nNote that the `freetype` module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be \"2\".\n\nChanged in pygame 2.2.0: `linked` keyword argument added and default behavior changed from returning compiled version to returning linked version\n\npygame.freetype.init()  \nInitialize the underlying FreeType library.\n\ninit(cache_size=64, resolution=72) -\\> None\n\nThis function initializes the underlying FreeType library and must be called before trying to use any of the functionality of the `freetype` module.\n\nHowever, [`pygame.init()`](pygame#pygame.init) will automatically call this function if the `freetype` module is already imported. It is safe to call this function more than once.\n\nOptionally, you may specify a default *cache_size* for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel *resolution*, in dots per inch, can be given to adjust font scaling.\n\npygame.freetype.quit()  \nShut down the underlying FreeType library.\n\nquit() -\\> None\n\nThis function closes the `freetype` module. After calling this function, you should not invoke any class, method or function related to the `freetype` module as they are likely to fail or might give unpredictable results. It is safe to call this function even if the module hasn't been initialized yet.\n\npygame.freetype.get_init()  \nReturns True if the FreeType module is currently initialized.\n\nget_init() -\\> bool\n\nReturns `True` if the `pygame.freetype` module is currently initialized.\n\nNew in pygame 1.9.5.\n\npygame.freetype.was_init()  \nDEPRECATED: Use get_init() instead.\n\nwas_init() -\\> bool\n\nDEPRECATED: Returns `True` if the `pygame.freetype` module is currently initialized. Use `get_init()` instead.\n\npygame.freetype.get_cache_size()  \nReturn the glyph case size\n\nget_cache_size() -\\> long\n\nSee [`pygame.freetype.init()`](#pygame.freetype.init).\n\npygame.freetype.get_default_resolution()  \nReturn the default pixel size in dots per inch\n\nget_default_resolution() -\\> long\n\nReturns the default pixel size, in dots per inch, for the module. The default is 72 DPI.\n\npygame.freetype.set_default_resolution()  \nSet the default pixel size in dots per inch for the module\n\nset_default_resolution(\\[resolution\\])\n\nSet the default pixel size, in dots per inch, for the module. If the optional argument is omitted or zero the resolution is reset to 72 DPI.\n\npygame.freetype.SysFont()  \ncreate a Font object from the system fonts\n\nSysFont(name, size, bold=False, italic=False) -\\> Font\n\nReturn a new Font object that is loaded from the system fonts. The font will match the requested *bold* and *italic* flags. Pygame uses a small set of common font aliases. If the specific font you ask for is not available, a reasonable alternative may be used. If a suitable system font is not found this will fall back on loading the default pygame font.\n\nThe font *name* can also be an iterable of font names, a string of comma-separated font names, or a bytes of comma-separated font names, in which case the set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\npygame.freetype.get_default_font()  \nGet the filename of the default font\n\nget_default_font() -\\> string\n\nReturn the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive.\n\npygame.freetype.Font  \nCreate a new Font instance from a supported font file.\n\nFont(file, size=0, font_index=0, resolution=0, ucs4=False) -\\> Font\n\nFont(pathlib.Path) -\\> Font\n\nArgument *file* can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.\n\nOptionally, a *size* argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no *size* is given, the default size is set to the first available size for the font.\n\nIf the font file has more than one font, the font to load can be chosen with the *index* argument. An exception is raised for an out-of-range font index value.\n\nThe optional *resolution* argument sets the pixel size, in dots per inch, for use in scaling glyphs for this Font instance. If 0 then the default module value, set by [`init()`](#pygame.freetype.init \"pygame.freetype.init\"), is used. The Font object's resolution can only be changed by re-initializing the Font instance.\n\nThe optional *ucs4* argument, an integer, sets the default text translation mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True), to treat Unicode text as UCS-4, with no surrogate pairs. See [`Font.ucs4`](#pygame.freetype.Font.ucs4 \"pygame.freetype.Font.ucs4\").\n\nname  \nProper font name.\n\nname -\\> string\n\nRead only. Returns the real (long) name of the font, as recorded in the font file.\n\npath  \nFont file path\n\npath -\\> unicode\n\nRead only. Returns the path of the loaded font file\n\nsize  \nThe default point size used in rendering\n\nsize -\\> float\n\nsize -\\> (float, float)\n\nGet or set the default size for text metrics and rendering. It can be a single point size, given as a Python `int` or `float`, or a font ppem (width, height) `tuple`. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by [`get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\"), use the nominal width and height to select an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method [`get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\"). If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.\n\nget_rect()  \nReturn the size and offset of rendered text\n\nget_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -\\> rect\n\nGets the final dimensions and origin, in pixels, of *text* using the optional *size* in points, *style*, and *rotation*. For other relevant render properties, and for any optional argument not given, the default values set for the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance are used.\n\nReturns a [`Rect`](rect#pygame.Rect \"pygame.Rect\") instance containing the width and height of the text's bounding box and the position of the text's origin. The origin is useful in aligning separately rendered pieces of text. It gives the baseline position and bearing at the start of the text. See the [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") method for an example.\n\nIf *text* is a char (byte) string, its encoding is assumed to be `LATIN1`.\n\nOptionally, *text* can be `None`, which will return the bounding rectangle for the text passed to a previous [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"), [`render_raw()`](#pygame.freetype.Font.render_raw \"pygame.freetype.Font.render_raw\"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") call. See [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") for more details.\n\nget_metrics()  \nReturn the glyph metrics for the given text\n\nget_metrics(text, size=0) -\\> \\[(...), ...\\]\n\nReturns the glyph metrics for each character in *text*.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives metrics of a single character glyph. The glyph metrics are:\n\n``` python\n(min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)\n```\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as grid-fitted pixel coordinates of type int. The advance values are float values.\n\nThe calculations are done using the font's default size in points. Optionally you may specify another point size with the *size* argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique settings.\n\nIf text is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nheight  \nThe unscaled height of the font in font units\n\nheight -\\> int\n\nRead only. Gets the height of the font. This is the average value of all glyphs in the font.\n\nascender  \nThe unscaled ascent of the font in font units\n\nascender -\\> int\n\nRead only. Return the number of units from the font's baseline to the top of the bounding box.\n\ndescender  \nThe unscaled descent of the font in font units\n\ndescender -\\> int\n\nRead only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.\n\nget_sized_ascender()  \nThe scaled ascent of the font in pixels\n\nget_sized_ascender(\\<size\\>=0) -\\> int\n\nReturn the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.\n\nget_sized_descender()  \nThe scaled descent of the font in pixels\n\nget_sized_descender(\\<size\\>=0) -\\> int\n\nReturn the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.\n\nget_sized_height()  \nThe scaled height of the font in pixels\n\nget_sized_height(\\<size\\>=0) -\\> int\n\nReturns the height of the font. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.\n\nget_sized_glyph_height()  \nThe scaled bounding box height of the font in pixels\n\nget_sized_glyph_height(\\<size\\>=0) -\\> int\n\nReturn the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.\n\nget_sizes()  \nreturn the available sizes of embedded bitmaps\n\nget_sizes() -\\> \\[(int, int, int, float, float), ...\\]\n\nget_sizes() -\\> \\[\\]\n\nReturns a list of tuple records, one for each point size supported. Each tuple containing the point size, the height in pixels, width in pixels, horizontal ppem (nominal width) in fractional pixels, and vertical ppem (nominal height) in fractional pixels.\n\nrender()  \nReturn rendered text as a surface\n\nrender(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -\\> (Surface, Rect)\n\nReturns a new [`Surface`](surface#pygame.Surface \"pygame.Surface\"), with the text rendered to it in the color given by 'fgcolor'. If no foreground color is given, the default foreground color, [`fgcolor`](#pygame.freetype.Font.fgcolor \"pygame.freetype.Font.fgcolor\") is used. If `bgcolor` is given, the surface will be filled with this color. When no background color is given, the surface background is transparent, zero alpha. Normally the returned surface has a 32 bit pixel size. However, if `bgcolor` is `None` and anti-aliasing is disabled a monochrome 8 bit colorkey surface, with colorkey set for the background color, is returned.\n\nThe return value is a tuple: the new surface and the bounding rectangle giving the size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero width and the height of the font.\n\nOptional *fgcolor*, *style*, *rotation*, and *size* arguments override the default values set for the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance.\n\nIf *text* is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nOptionally, *text* can be `None`, which will render the text passed to a previous [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"), [`render_raw()`](#pygame.freetype.Font.render_raw \"pygame.freetype.Font.render_raw\"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") call. See [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") for details.\n\nrender_to()  \nRender text onto an existing surface\n\nrender_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -\\> Rect\n\nRenders the string *text* to the [`pygame.Surface`](surface#pygame.Surface) *surf*, at position *dest*, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a [`Rect`](rect#pygame.Rect \"pygame.Rect\") instance. As with [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), optional *fgcolor*, *style*, *rotation*, and *size* argument are available.\n\nIf a background color *bgcolor* is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the rendered text within the surface.\n\nIf an empty string is passed for text then the returned [`Rect`](rect#pygame.Rect \"pygame.Rect\") is zero width and the height of the font. The rect will test False.\n\nOptionally, *text* can be set `None`, which will re-render text passed to a previous [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"), [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\"), [`render_raw()`](#pygame.freetype.Font.render_raw \"pygame.freetype.Font.render_raw\"), or [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") call. Primarily, this feature is an aid to using [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") in combination with [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"). An example:\n\n``` python\ndef word_wrap(surf, text, font, color=(0, 0, 0)):\n    font.origin = True\n    words = text.split(' ')\n    width, height = surf.get_size()\n    line_spacing = font.get_sized_height() + 2\n    x, y = 0, line_spacing\n    space = font.get_rect(' ')\n    for word in words:\n        bounds = font.get_rect(word)\n        if x + bounds.width + bounds.x >= width:\n            x, y = 0, y + line_spacing\n        if x + bounds.width + bounds.x >= width:\n            raise ValueError(\"word too wide for the surface\")\n        if y + bounds.height - bounds.y >= height:\n            raise ValueError(\"text to long for the surface\")\n        font.render_to(surf, (x, y), None, color)\n        x += bounds.width + space.width\n    return x, y\n```\n\nWhen [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") is called with the same font properties ― [`size`](#pygame.freetype.Font.size \"pygame.freetype.Font.size\"), [`style`](#pygame.freetype.Font.style \"pygame.freetype.Font.style\"), [`strength`](#pygame.freetype.Font.strength \"pygame.freetype.Font.strength\"), [`wide`](#pygame.freetype.Font.wide \"pygame.freetype.Font.wide\"), [`antialiased`](#pygame.freetype.Font.antialiased \"pygame.freetype.Font.antialiased\"), [`vertical`](#pygame.freetype.Font.vertical \"pygame.freetype.Font.vertical\"), [`rotation`](#pygame.freetype.Font.rotation \"pygame.freetype.Font.rotation\"), [`kerning`](#pygame.freetype.Font.kerning \"pygame.freetype.Font.kerning\"), and [`use_bitmap_strikes`](#pygame.freetype.Font.use_bitmap_strikes \"pygame.freetype.Font.use_bitmap_strikes\") ― as [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"), [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") will use the layout calculated by [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\"). Otherwise, [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") will recalculate the layout if called with a text string or one of the above properties has changed after the [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call.\n\nIf *text* is a char (byte) string, then its encoding is assumed to be `LATIN1`.\n\nrender_raw()  \nReturn rendered text as a string of bytes\n\nrender_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -\\> (bytes, (int, int))\n\nLike [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\") but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.\n\nrender_raw_to()  \nRender text into an array of ints\n\nrender_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -\\> Rect\n\nRender to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default *dest* value, `None`, is equivalent to position (0, 0). See [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\"). As with the other render methods, *text* can be `None` to render a text string passed previously to another method.\n\nThe return value is a [`pygame.Rect()`](rect#pygame.Rect) giving the size and position of the rendered text.\n\nstyle  \nThe font's style flags\n\nstyle -\\> int\n\nGets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call. The style value may be a bit-wise OR of one or more of the following constants:\n\n``` python\nSTYLE_NORMAL\nSTYLE_UNDERLINE\nSTYLE_OBLIQUE\nSTYLE_STRONG\nSTYLE_WIDE\nSTYLE_DEFAULT\n```\n\nThese constants may be found on the FreeType constants module. Optionally, the default style can be modified or obtained accessing the individual style attributes (underline, oblique, strong).\n\nThe `STYLE_OBLIQUE` and `STYLE_STRONG` styles are for scalable fonts only. An attempt to set either for a bitmap font raises an AttributeError. An attempt to set either for an inactive font, as returned by `Font.__new__()`, raises a RuntimeError.\n\nAssigning `STYLE_DEFAULT` to the [`style`](#pygame.freetype.Font.style \"pygame.freetype.Font.style\") property leaves the property unchanged, as this property defines the default. The [`style`](#pygame.freetype.Font.style \"pygame.freetype.Font.style\") property will never return `STYLE_DEFAULT`.\n\nunderline  \nThe state of the font's underline style flag\n\nunderline -\\> bool\n\nGets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call, via the 'style' parameter.\n\nstrong  \nThe state of the font's strong style flag\n\nstrong -\\> bool\n\nGets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call, via the 'style' parameter.\n\noblique  \nThe state of the font's oblique style flag\n\noblique -\\> bool\n\nGets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") call, via the *style* parameter.\n\nThe oblique style is only supported for scalable (outline) fonts. An attempt to set this style on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by `Font.__new__()`, setting this property raises a RuntimeError.\n\nwide  \nThe state of the font's wide style flag\n\nwide -\\> bool\n\nGets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to [`pygame.font.Font`](font#pygame.font.Font)'s bold. This style not available for rotated text.\n\nstrength  \nThe strength associated with the strong or wide font styles\n\nstrength -\\> float\n\nThe amount by which a font glyph's size is enlarged for the strong or wide transformations, as a fraction of the untransformed size. For the wide style only the horizontal dimension is increased. For strong text both the horizontal and vertical dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is equivalent to the [`pygame.font.Font`](font#pygame.font.Font) bold style. The default is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts. An attempt to set this property on a bitmap font will raise an AttributeError. If the font object is inactive, as returned by `Font.__new__()`, assignment to this property raises a RuntimeError.\n\nunderline_adjustment  \nAdjustment factor for the underline position\n\nunderline_adjustment -\\> float\n\nGets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics [`pygame.font.Font`](font#pygame.font.Font) underlining.\n\nfixed_width  \nGets whether the font is fixed-width\n\nfixed_width -\\> bool\n\nRead only. Returns `True` if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).\n\nfixed_sizes  \nthe number of available bitmap sizes for the font\n\nfixed_sizes -\\> int\n\nRead only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.\n\nscalable  \nGets whether the font is scalable\n\nscalable -\\> bool\n\nRead only. Returns `True` if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.\n\nuse_bitmap_strikes  \nallow the use of embedded bitmaps in an outline font file\n\nuse_bitmap_strikes -\\> bool\n\nSome scalable fonts include embedded bitmaps for particular point sizes. This property controls whether or not those bitmap strikes are used. Set it `False` to disable the loading of any bitmap strike. Set it `True`, the default, to permit bitmap strikes for a non-rotated render with no style other than [`wide`](#pygame.freetype.Font.wide \"pygame.freetype.Font.wide\") or [`underline`](#pygame.freetype.Font.underline \"pygame.freetype.Font.underline\"). This property is ignored for bitmap fonts.\n\nSee also [`fixed_sizes`](#pygame.freetype.Font.fixed_sizes \"pygame.freetype.Font.fixed_sizes\") and [`get_sizes()`](#pygame.freetype.Font.get_sizes \"pygame.freetype.Font.get_sizes\").\n\nantialiased  \nFont anti-aliasing mode\n\nantialiased -\\> bool\n\nGets or sets the font's anti-aliasing mode. This defaults to `True` on all fonts, which are rendered with full 8 bit blending.\n\nSet to `False` to do monochrome rendering. This should provide a small speed gain and reduce cache memory size.\n\nkerning  \nCharacter kerning mode\n\nkerning -\\> bool\n\nGets or sets the font's kerning mode. This defaults to `False` on all fonts, which will be rendered without kerning.\n\nSet to `True` to add kerning between character pairs, if supported by the font, when positioning glyphs.\n\nvertical  \nFont vertical mode\n\nvertical -\\> bool\n\nGets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.\n\nSet to `True` to switch to a vertical text layout. The default is `False`, place horizontally.\n\nNote that the [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") class does not automatically determine script orientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.\n\nrotation  \ntext rotation in degrees counterclockwise\n\nrotation -\\> int\n\nGets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -\\> 390 - 360 -\\> 30, -45 -\\> 360 + -45 -\\> 315, 720 -\\> 720 - (2 \\* 360) -\\> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by `Font.__new__()`, raises a RuntimeError.\n\nfgcolor  \ndefault foreground color\n\nfgcolor -\\> Color\n\nGets or sets the default glyph rendering color. It is initially opaque black ― (0, 0, 0, 255). Applies to [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\") and [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\").\n\nbgcolor  \ndefault background color\n\nbgcolor -\\> Color\n\nGets or sets the default background rendering color. Initially it is unset and text will render with a transparent background by default. Applies to [`render()`](#pygame.freetype.Font.render \"pygame.freetype.Font.render\") and [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\").\n\nNew in pygame 2.0.0.\n\norigin  \nFont render to text origin mode\n\norigin -\\> bool\n\nIf set `True`, [`render_to()`](#pygame.freetype.Font.render_to \"pygame.freetype.Font.render_to\") and [`render_raw_to()`](#pygame.freetype.Font.render_raw_to \"pygame.freetype.Font.render_raw_to\") will take the *dest* position to be that of the text origin, as opposed to the top-left corner of the bounding box. See [`get_rect()`](#pygame.freetype.Font.get_rect \"pygame.freetype.Font.get_rect\") for details.\n\npad  \npadded boundary mode\n\npad -\\> bool\n\nIf set `True`, then the text boundary rectangle will be inflated to match that of [`font.Font`](font#pygame.font.Font \"pygame.font.Font\"). Otherwise, the boundary rectangle is just large enough for the text.\n\nucs4  \nEnable UCS-4 mode\n\nucs4 -\\> bool\n\nGets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 `True` turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.\n\nresolution  \nPixel resolution in dots per inch\n\nresolution -\\> int\n\nRead only. Gets pixel size used in scaling font glyphs for this [`Font`](#pygame.freetype.Font \"pygame.freetype.Font\") instance.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/freetype.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/freetype.html](https://www.pygame.org/docs/ref/freetype.html)"
- name: module-gfxdraw
  id: ref/gfxdraw
  summary: 'EXPERIMENTAL!: This API may change or disappear in later pygame releases'
  description: "pygame.gfxdraw  \npygame module for drawing shapes\n\n**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.\n\nThe pygame package does not import gfxdraw automatically when loaded, so it must imported explicitly to be used.\n\n``` python\nimport pygame\nimport pygame.gfxdraw\n```\n\nFor all functions the arguments are strictly positional and integers are accepted for coordinates and radii. The `color` argument can be one of the following formats:\n\n> - a [`pygame.Color`](color#pygame.Color) object\n>\n> - an `(RGB)` triplet (tuple/list)\n>\n> - an `(RGBA)` quadruplet (tuple/list)\n\nThe functions [`rectangle()`](#pygame.gfxdraw.rectangle \"pygame.gfxdraw.rectangle\") and [`box()`](#pygame.gfxdraw.box \"pygame.gfxdraw.box\") will accept any `(x,`` ``y,`` ``w,`` ``h)` sequence for their `rect` argument, though [`pygame.Rect`](rect#pygame.Rect) instances are preferred.\n\nTo draw a filled antialiased shape, first use the antialiased (aa\\*) version of the function, and then use the filled (filled\\_\\*) version. For example:\n\n``` python\ncol = (255, 0, 0)\nsurf.fill((255, 255, 255))\npygame.gfxdraw.aacircle(surf, x, y, 30, col)\npygame.gfxdraw.filled_circle(surf, x, y, 30, col)\n```\n\nNote\n\nFor threading, each of the functions releases the GIL during the C part of the call.\n\nNote\n\nSee the [`pygame.draw`](draw#module-pygame.draw) module for alternative draw methods. The `pygame.gfxdraw` module differs from the [`pygame.draw`](draw#module-pygame.draw) module in the API it uses and the different draw functions available. `pygame.gfxdraw` wraps the primitives from the library called SDL_gfx, rather than using modified versions.\n\nNew in pygame 1.9.0.\n\npygame.gfxdraw.pixel()  \ndraw a pixel\n\npixel(surface, x, y, color) -\\> None\n\nDraws a single pixel, at position (x ,y), on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the pixel\n\n- **y** (*int*) -- y coordinate of the pixel\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.hline()  \ndraw a horizontal line\n\nhline(surface, x1, x2, y, color) -\\> None\n\nDraws a straight horizontal line (`(x1,`` ``y)` to `(x2,`` ``y)`) on the given surface. There are no endcaps.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of one end of the line\n\n- **x2** (*int*) -- x coordinate of the other end of the line\n\n- **y** (*int*) -- y coordinate of the line\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.vline()  \ndraw a vertical line\n\nvline(surface, x, y1, y2, color) -\\> None\n\nDraws a straight vertical line (`(x,`` ``y1)` to `(x,`` ``y2)`) on the given surface. There are no endcaps.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the line\n\n- **y1** (*int*) -- y coordinate of one end of the line\n\n- **y2** (*int*) -- y coordinate of the other end of the line\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.line()  \ndraw a line\n\nline(surface, x1, y1, x2, y2, color) -\\> None\n\nDraws a straight line (`(x1,`` ``y1)` to `(x2,`` ``y2)`) on the given surface. There are no endcaps.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of one end of the line\n\n- **y1** (*int*) -- y coordinate of one end of the line\n\n- **x2** (*int*) -- x coordinate of the other end of the line\n\n- **y2** (*int*) -- y coordinate of the other end of the line\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.rectangle()  \ndraw a rectangle\n\nrectangle(surface, rect, color) -\\> None\n\nDraws an unfilled rectangle on the given surface. For a filled rectangle use [`box()`](#pygame.gfxdraw.box \"pygame.gfxdraw.box\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](rect#pygame.Rect) always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.\n\npygame.gfxdraw.box()  \ndraw a filled rectangle\n\nbox(surface, rect, color) -\\> None\n\nDraws a filled rectangle on the given surface. For an unfilled rectangle use [`rectangle()`](#pygame.gfxdraw.rectangle \"pygame.gfxdraw.rectangle\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **rect** ([*Rect*](rect#pygame.Rect \"pygame.Rect\")) -- rectangle to draw, position and dimensions\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](rect#pygame.Rect) always lie one pixel outside of its actual border. Therefore, these values will not be included as part of the drawing.\n\nNote\n\nThe [`pygame.Surface.fill()`](surface#pygame.Surface.fill) method works just as well for drawing filled rectangles. In fact [`pygame.Surface.fill()`](surface#pygame.Surface.fill) can be hardware accelerated on some platforms with both software and hardware display modes.\n\npygame.gfxdraw.circle()  \ndraw a circle\n\ncircle(surface, x, y, r, color) -\\> None\n\nDraws an unfilled circle on the given surface. For a filled circle use [`filled_circle()`](#pygame.gfxdraw.filled_circle \"pygame.gfxdraw.filled_circle\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the circle\n\n- **y** (*int*) -- y coordinate of the center of the circle\n\n- **r** (*int*) -- radius of the circle\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.aacircle()  \ndraw an antialiased circle\n\naacircle(surface, x, y, r, color) -\\> None\n\nDraws an unfilled antialiased circle on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the circle\n\n- **y** (*int*) -- y coordinate of the center of the circle\n\n- **r** (*int*) -- radius of the circle\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.filled_circle()  \ndraw a filled circle\n\nfilled_circle(surface, x, y, r, color) -\\> None\n\nDraws a filled circle on the given surface. For an unfilled circle use [`circle()`](#pygame.gfxdraw.circle \"pygame.gfxdraw.circle\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the circle\n\n- **y** (*int*) -- y coordinate of the center of the circle\n\n- **r** (*int*) -- radius of the circle\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.ellipse()  \ndraw an ellipse\n\nellipse(surface, x, y, rx, ry, color) -\\> None\n\nDraws an unfilled ellipse on the given surface. For a filled ellipse use [`filled_ellipse()`](#pygame.gfxdraw.filled_ellipse \"pygame.gfxdraw.filled_ellipse\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the ellipse\n\n- **y** (*int*) -- y coordinate of the center of the ellipse\n\n- **rx** (*int*) -- horizontal radius of the ellipse\n\n- **ry** (*int*) -- vertical radius of the ellipse\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.aaellipse()  \ndraw an antialiased ellipse\n\naaellipse(surface, x, y, rx, ry, color) -\\> None\n\nDraws an unfilled antialiased ellipse on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the ellipse\n\n- **y** (*int*) -- y coordinate of the center of the ellipse\n\n- **rx** (*int*) -- horizontal radius of the ellipse\n\n- **ry** (*int*) -- vertical radius of the ellipse\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.filled_ellipse()  \ndraw a filled ellipse\n\nfilled_ellipse(surface, x, y, rx, ry, color) -\\> None\n\nDraws a filled ellipse on the given surface. For an unfilled ellipse use [`ellipse()`](#pygame.gfxdraw.ellipse \"pygame.gfxdraw.ellipse\").\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the ellipse\n\n- **y** (*int*) -- y coordinate of the center of the ellipse\n\n- **rx** (*int*) -- horizontal radius of the ellipse\n\n- **ry** (*int*) -- vertical radius of the ellipse\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.arc()  \ndraw an arc\n\narc(surface, x, y, r, start_angle, stop_angle, color) -\\> None\n\nDraws an arc on the given surface. For an arc with its endpoints connected to its center use [`pie()`](#pygame.gfxdraw.pie \"pygame.gfxdraw.pie\").\n\nThe two angle arguments are given in degrees and indicate the start and stop positions of the arc. The arc is drawn in a clockwise direction from the `start_angle` to the `stop_angle`. If `start_angle`` ``==`` ``stop_angle`, nothing will be drawn\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the arc\n\n- **y** (*int*) -- y coordinate of the center of the arc\n\n- **r** (*int*) -- radius of the arc\n\n- **start_angle** (*int*) -- start angle in degrees\n\n- **stop_angle** (*int*) -- stop angle in degrees\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nNote\n\nThis function uses *degrees* while the [`pygame.draw.arc()`](draw#pygame.draw.arc) function uses *radians*.\n\npygame.gfxdraw.pie()  \ndraw a pie\n\npie(surface, x, y, r, start_angle, stop_angle, color) -\\> None\n\nDraws an unfilled pie on the given surface. A pie is an [`arc()`](#pygame.gfxdraw.arc \"pygame.gfxdraw.arc\") with its endpoints connected to its center.\n\nThe two angle arguments are given in degrees and indicate the start and stop positions of the pie. The pie is drawn in a clockwise direction from the `start_angle` to the `stop_angle`. If `start_angle`` ``==`` ``stop_angle`, a straight line will be drawn from the center position at the given angle, to a length of the radius.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x** (*int*) -- x coordinate of the center of the pie\n\n- **y** (*int*) -- y coordinate of the center of the pie\n\n- **r** (*int*) -- radius of the pie\n\n- **start_angle** (*int*) -- start angle in degrees\n\n- **stop_angle** (*int*) -- stop angle in degrees\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.trigon()  \ndraw a trigon/triangle\n\ntrigon(surface, x1, y1, x2, y2, x3, y3, color) -\\> None\n\nDraws an unfilled trigon (triangle) on the given surface. For a filled trigon use [`filled_trigon()`](#pygame.gfxdraw.filled_trigon \"pygame.gfxdraw.filled_trigon\").\n\nA trigon can also be drawn using [`polygon()`](#pygame.gfxdraw.polygon \"pygame.gfxdraw.polygon\") e.g. `polygon(surface,`` ``((x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)),`` ``color)`\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of the first corner of the trigon\n\n- **y1** (*int*) -- y coordinate of the first corner of the trigon\n\n- **x2** (*int*) -- x coordinate of the second corner of the trigon\n\n- **y2** (*int*) -- y coordinate of the second corner of the trigon\n\n- **x3** (*int*) -- x coordinate of the third corner of the trigon\n\n- **y3** (*int*) -- y coordinate of the third corner of the trigon\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.aatrigon()  \ndraw an antialiased trigon/triangle\n\naatrigon(surface, x1, y1, x2, y2, x3, y3, color) -\\> None\n\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\nAn aatrigon can also be drawn using [`aapolygon()`](#pygame.gfxdraw.aapolygon \"pygame.gfxdraw.aapolygon\") e.g. `aapolygon(surface,`` ``((x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)),`` ``color)`\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of the first corner of the trigon\n\n- **y1** (*int*) -- y coordinate of the first corner of the trigon\n\n- **x2** (*int*) -- x coordinate of the second corner of the trigon\n\n- **y2** (*int*) -- y coordinate of the second corner of the trigon\n\n- **x3** (*int*) -- x coordinate of the third corner of the trigon\n\n- **y3** (*int*) -- y coordinate of the third corner of the trigon\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.filled_trigon()  \ndraw a filled trigon/triangle\n\nfilled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -\\> None\n\nDraws a filled trigon (triangle) on the given surface. For an unfilled trigon use [`trigon()`](#pygame.gfxdraw.trigon \"pygame.gfxdraw.trigon\").\n\nA filled_trigon can also be drawn using [`filled_polygon()`](#pygame.gfxdraw.filled_polygon \"pygame.gfxdraw.filled_polygon\") e.g. `filled_polygon(surface,`` ``((x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)),`` ``color)`\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **x1** (*int*) -- x coordinate of the first corner of the trigon\n\n- **y1** (*int*) -- y coordinate of the first corner of the trigon\n\n- **x2** (*int*) -- x coordinate of the second corner of the trigon\n\n- **y2** (*int*) -- y coordinate of the second corner of the trigon\n\n- **x3** (*int*) -- x coordinate of the third corner of the trigon\n\n- **y3** (*int*) -- y coordinate of the third corner of the trigon\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\npygame.gfxdraw.polygon()  \ndraw a polygon\n\npolygon(surface, points, color) -\\> None\n\nDraws an unfilled polygon on the given surface. For a filled polygon use [`filled_polygon()`](#pygame.gfxdraw.filled_polygon \"pygame.gfxdraw.filled_polygon\").\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.aapolygon()  \ndraw an antialiased polygon\n\naapolygon(surface, points, color) -\\> None\n\nDraws an unfilled antialiased polygon on the given surface.\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.filled_polygon()  \ndraw a filled polygon\n\nfilled_polygon(surface, points, color) -\\> None\n\nDraws a filled polygon on the given surface. For an unfilled polygon use [`polygon()`](#pygame.gfxdraw.polygon \"pygame.gfxdraw.polygon\").\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\\`\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.textured_polygon()  \ndraw a textured polygon\n\ntextured_polygon(surface, points, texture, tx, ty) -\\> None\n\nDraws a textured polygon on the given surface. For better performance, the surface and the texture should have the same format.\n\nA per-pixel alpha texture blit to a per-pixel alpha surface will differ from a [`pygame.Surface.blit()`](surface#pygame.Surface.blit) blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.\n\nThe adjacent coordinates in the `points` argument, as well as the first and last points, will be connected by line segments. e.g. For the points `[(x1,`` ``y1),`` ``(x2,`` ``y2),`` ``(x3,`` ``y3)]` a line segment will be drawn from `(x1,`` ``y1)` to `(x2,`` ``y2)`, from `(x2,`` ``y2)` to `(x3,`` ``y3)`, and from `(x3,`` ``y3)` to `(x1,`` ``y1)`.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **texture** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- texture to draw on the polygon\n\n- **tx** (*int*) -- x offset of the texture\n\n- **ty** (*int*) -- y offset of the texture\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\npygame.gfxdraw.bezier()  \ndraw a Bezier curve\n\nbezier(surface, points, steps, color) -\\> None\n\nDraws a Bézier curve on the given surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- surface to draw on\n\n- **points** (*tuple(coordinate) or* *list(coordinate)*) -- a sequence of 3 or more (x, y) coordinates used to form a curve, where each *coordinate* in the sequence must be a tuple/list/[`pygame.math.Vector2`](math#pygame.math.Vector2) of 2 ints/floats (float values will be truncated)\n\n- **steps** (*int*) -- number of steps for the interpolation, the minimum is 2\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *tuple(int,* *int,* *int,* *\\[int\\])*) -- color to draw with, the alpha value is optional if using a tuple `(RGB[A])`\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n- **ValueError** -- if `steps`` ``<`` ``2`\n\n- **ValueError** -- if `len(points)`` ``<`` ``3` (must have at least 3 points)\n\n- **IndexError** -- if `len(coordinate)`` ``<`` ``2` (each coordinate must have at least 2 items)\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/gfxdraw.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/gfxdraw.html](https://www.pygame.org/docs/ref/gfxdraw.html)"
- name: module-image
  id: ref/image
  summary: The image module contains functions for loading and saving pictures, as well as transferring Surfaces to formats usable by other packages
  description: "pygame.image  \npygame module for image transfer\n\nThe image module contains functions for loading and saving pictures, as well as transferring Surfaces to formats usable by other packages.\n\nNote that there is no Image class; an image is loaded as a Surface object. The Surface class allows manipulation (drawing lines, setting pixels, capturing regions, etc.).\n\nIn the vast majority of installations, pygame is built to support extended formats, using the SDL_Image library behind the scenes. However, some installations may only support uncompressed `BMP` images. With full image support, the [`pygame.image.load()`](#pygame.image.load) function can load the following formats.\n\n> - `BMP`\n>\n> - `GIF` (non-animated)\n>\n> - `JPEG`\n>\n> - `LBM` (and `PBM`, `PGM`, `PPM`)\n>\n> - `PCX`\n>\n> - `PNG`\n>\n> - `PNM`\n>\n> - `SVG` (limited support, using Nano SVG)\n>\n> - `TGA` (uncompressed)\n>\n> - `TIFF`\n>\n> - `WEBP`\n>\n> - `XPM`\n\nNew in pygame 2.0: Loading SVG, WebP, PNM\n\nSaving images only supports a limited set of formats. You can save to the following formats.\n\n> - `BMP`\n>\n> - `JPEG`\n>\n> - `PNG`\n>\n> - `TGA`\n\n`JPEG` and `JPG`, as well as `TIF` and `TIFF` refer to the same file format\n\nNew in pygame 1.8: Saving PNG and JPEG files.\n\npygame.image.load()  \nload new image from a file (or file-like object)\n\nload(filename) -\\> Surface\n\nload(fileobj, namehint=\"\") -\\> Surface\n\nLoad an image from a file source. You can pass either a filename, a Python file-like object, or a pathlib.Path.\n\nPygame will automatically determine the image type (e.g., `GIF` or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., `GIF` images should end in \".gif\"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.\n\nThe returned Surface will contain the same color format, colorkey and alpha transparency as the file it came from. You will often want to call [`pygame.Surface.convert()`](surface#pygame.Surface.convert) with no arguments, to create a copy that will draw more quickly on the screen.\n\nFor alpha transparency, like in .png images, use the [`pygame.Surface.convert_alpha()`](surface#pygame.Surface.convert_alpha) method after loading so that the image has per pixel transparency.\n\nPygame may not always be built to support all image formats. At minimum it will support uncompressed `BMP`. If [`pygame.image.get_extended()`](#pygame.image.get_extended) returns `True`, you should be able to load most images (including PNG, JPG and GIF).\n\nYou should use `os.path.join()` for compatibility.\n\n``` python\neg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))\n```\n\npygame.image.save()  \nsave an image to file (or file-like object)\n\nsave(Surface, filename) -\\> None\n\nsave(Surface, fileobj, namehint=\"\") -\\> None\n\nThis will save your Surface as either a `BMP`, `TGA`, `PNG`, or `JPEG` image. If the filename extension is unrecognized it will default to `TGA`. Both `TGA`, and `BMP` file formats create uncompressed files. You can pass a filename, a pathlib.Path or a Python file-like object. For file-like object, the image is saved to `TGA` format unless a namehint with a recognizable extension is passed in.\n\nNote\n\nWhen saving to a file-like object, it seems that for most formats, the object needs to be flushed after saving to it to make loading from it possible.\n\nChanged in pygame 1.8: Saving PNG and JPEG files.\n\nChanged in pygame 2.0.0: The `namehint` parameter was added to make it possible to save other formats than `TGA` to a file-like object. Saving to a file-like object with JPEG is possible.\n\npygame.image.get_sdl_image_version()  \nget version number of the SDL_Image library being used\n\nget_sdl_image_version(linked=True) -\\> None\n\nget_sdl_image_version(linked=True) -\\> (major, minor, patch)\n\nIf pygame is built with extended image formats, then this function will return the SDL_Image library's version number as a tuple of 3 integers `(major,`` ``minor,`` ``patch)`. If not, then it will return `None`.\n\n`linked=True` is the default behavior and the function will return the version of the library that Pygame is linked against, while `linked=False` will return the version of the library that Pygame is compiled against.\n\nNew in pygame 2.0.0.\n\nChanged in pygame 2.2.0: `linked` keyword argument added and default behavior changed from returning compiled version to returning linked version\n\npygame.image.get_extended()  \ntest if extended image formats can be loaded\n\nget_extended() -\\> bool\n\nIf pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all.\n\npygame.image.tostring()  \ntransfer image to byte buffer\n\ntostring(Surface, format, flipped=False) -\\> bytes\n\nCreates a string of bytes that can be transferred with the `fromstring` or `frombytes` methods in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass `True` for the flipped argument, the byte buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.\n\n> - `P`, 8-bit palettized Surfaces\n>\n> - `RGB`, 24-bit image\n>\n> - `RGBX`, 32-bit image with unused space\n>\n> - `RGBA`, 32-bit image with an alpha channel\n>\n> - `ARGB`, 32-bit image with alpha channel first\n>\n> - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped\n>\n> - `RGBA_PREMULT`, 32-bit image with colors scaled by alpha channel\n>\n> - `ARGB_PREMULT`, 32-bit image with colors scaled by alpha channel, alpha channel first\n\nNote\n\nit is preferred to use [`tobytes()`](#pygame.image.tobytes \"pygame.image.tobytes\") as of pygame 2.1.3\n\nNew in pygame 2.1.3: BGRA format\n\npygame.image.tobytes()  \ntransfer image to byte buffer\n\ntobytes(Surface, format, flipped=False) -\\> bytes\n\nCreates a string of bytes that can be transferred with the `fromstring` or `frombytes` methods in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass `True` for the flipped argument, the byte buffer will be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that only 8-bit Surfaces can use the \"P\" format. The other formats will work for any Surface. Also note that other Python image packages support more formats than pygame.\n\n> - `P`, 8-bit palettized Surfaces\n>\n> - `RGB`, 24-bit image\n>\n> - `RGBX`, 32-bit image with unused space\n>\n> - `RGBA`, 32-bit image with an alpha channel\n>\n> - `ARGB`, 32-bit image with alpha channel first\n>\n> - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped\n>\n> - `RGBA_PREMULT`, 32-bit image with colors scaled by alpha channel\n>\n> - `ARGB_PREMULT`, 32-bit image with colors scaled by alpha channel, alpha channel first\n\nNote\n\nthis function is an alias for [`tostring()`](#pygame.image.tostring \"pygame.image.tostring\"). The use of this function is recommended over [`tostring()`](#pygame.image.tostring \"pygame.image.tostring\") as of pygame 2.1.3. This function was introduced so it matches nicely with other libraries (PIL, numpy, etc), and with people's expectations.\n\nNew in pygame 2.1.3.\n\npygame.image.fromstring()  \ncreate new Surface from a byte buffer\n\nfromstring(bytes, size, format, flipped=False) -\\> Surface\n\nThis function takes arguments similar to [`pygame.image.tostring()`](#pygame.image.tostring). The size argument is a pair of numbers representing the width and height. Once the new Surface is created it is independent from the memory of the bytes passed in.\n\nThe bytes and format passed must compute to the exact size of image specified. Otherwise a `ValueError` will be raised.\n\nSee the [`pygame.image.frombuffer()`](#pygame.image.frombuffer) method for a potentially faster way to transfer images into pygame.\n\nNote\n\nit is preferred to use [`frombytes()`](#pygame.image.frombytes \"pygame.image.frombytes\") as of pygame 2.1.3\n\npygame.image.frombytes()  \ncreate new Surface from a byte buffer\n\nfrombytes(bytes, size, format, flipped=False) -\\> Surface\n\nThis function takes arguments similar to [`pygame.image.tobytes()`](#pygame.image.tobytes). The size argument is a pair of numbers representing the width and height. Once the new Surface is created it is independent from the memory of the bytes passed in.\n\nThe bytes and format passed must compute to the exact size of image specified. Otherwise a `ValueError` will be raised.\n\nSee the [`pygame.image.frombuffer()`](#pygame.image.frombuffer) method for a potentially faster way to transfer images into pygame.\n\nNote\n\nthis function is an alias for [`fromstring()`](#pygame.image.fromstring \"pygame.image.fromstring\"). The use of this function is recommended over [`fromstring()`](#pygame.image.fromstring \"pygame.image.fromstring\") as of pygame 2.1.3. This function was introduced so it matches nicely with other libraries (PIL, numpy, etc), and with people's expectations.\n\nNew in pygame 2.1.3.\n\npygame.image.frombuffer()  \ncreate a new Surface that shares data inside a bytes buffer\n\nfrombuffer(buffer, size, format) -\\> Surface\n\nCreate a new Surface that shares pixel data directly from a buffer. This buffer can be bytes, a bytearray, a memoryview, a [`pygame.BufferProxy`](bufferproxy#pygame.BufferProxy), or any object that supports the buffer protocol. This method takes similar arguments to [`pygame.image.fromstring()`](#pygame.image.fromstring), but is unable to vertically flip the source data.\n\nThis will run much faster than [`pygame.image.fromstring()`](#pygame.image.fromstring), since no pixel data must be allocated and copied.\n\nIt accepts the following 'format' arguments:\n\n> - `P`, 8-bit palettized Surfaces\n>\n> - `RGB`, 24-bit image\n>\n> - `BGR`, 24-bit image, red and blue channels swapped.\n>\n> - `RGBX`, 32-bit image with unused space\n>\n> - `RGBA`, 32-bit image with an alpha channel\n>\n> - `ARGB`, 32-bit image with alpha channel first\n>\n> - `BGRA`, 32-bit image with alpha channel, red and blue channels swapped\n\nNew in pygame 2.1.3: BGRA format\n\npygame.image.load_basic()  \nload new BMP image from a file (or file-like object)\n\nload_basic(file) -\\> Surface\n\nLoad an image from a file source. You can pass either a filename or a Python file-like object, or a pathlib.Path.\n\nThis function only supports loading \"basic\" image format, ie `BMP` format. This function is always available, no matter how pygame was built.\n\npygame.image.load_extended()  \nload an image from a file (or file-like object)\n\nload_extended(filename) -\\> Surface\n\nload_extended(fileobj, namehint=\"\") -\\> Surface\n\nThis function is similar to [`pygame.image.load()`](#pygame.image.load), except that this function can only be used if pygame was built with extended image format support.\n\nChanged in pygame 2.0.1: This function is always available, but raises an `NotImplementedError` if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.\n\npygame.image.save_extended()  \nsave a png/jpg image to file (or file-like object)\n\nsave_extended(Surface, filename) -\\> None\n\nsave_extended(Surface, fileobj, namehint=\"\") -\\> None\n\nThis will save your Surface as either a `PNG` or `JPEG` image.\n\nIn case the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to `JPEG` in case the namehint was not specified while saving to a file-like object.\n\nChanged in pygame 2.0.1: This function is always available, but raises an `NotImplementedError` if extended image formats are not supported. Previously, this function may or may not be available, depending on the state of extended image format support.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/image.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/image.html](https://www.pygame.org/docs/ref/image.html)"
- name: module-joystick
  id: ref/joystick
  summary: pygame.joystick Pygame module for interacting with joysticks, gamepads, and trackballs
  description: "pygame.joystick  \nPygame module for interacting with joysticks, gamepads, and trackballs.\n\nThe joystick module manages the joystick devices on a computer. Joystick devices include trackballs and video-game-style gamepads, and the module allows the use of multiple buttons and \"hats\". Computers may manage multiple joysticks at a time.\n\nEach instance of the Joystick class represents one gaming device plugged into the computer. If a gaming pad has multiple joysticks on it, then the joystick object can actually represent multiple joysticks on that single game device.\n\nFor a quick way to initialise the joystick module and get a list of Joystick instances use the following code:\n\n``` python\npygame.joystick.init()\njoysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]\n```\n\nThe following event types will be generated by the joysticks\n\n``` python\nJOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION\n```\n\nAnd in pygame 2, which supports hotplugging:\n\n``` python\nJOYDEVICEADDED JOYDEVICEREMOVED\n```\n\nNote that in pygame 2, joysticks events use a unique \"instance ID\". The device index passed in the constructor to a Joystick object is not unique after devices have been added and removed. You must call [`Joystick.get_instance_id()`](#pygame.joystick.Joystick.get_instance_id \"pygame.joystick.Joystick.get_instance_id\") to find the instance ID that was assigned to a Joystick on opening.\n\nThe event queue needs to be pumped frequently for some of the methods to work. So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.\n\nTo be able to get joystick events and update the joystick objects while the window is not in focus, you may set the `SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS` environment variable. See [environment variables](pygame#environment-variables) for more details.\n\npygame.joystick.init()  \nInitialize the joystick module.\n\ninit() -\\> None\n\nThis function is called automatically by `pygame.init()`.\n\nIt initializes the joystick module. The module must be initialized before any other functions will work.\n\nIt is safe to call this function more than once.\n\npygame.joystick.quit()  \nUninitialize the joystick module.\n\nquit() -\\> None\n\nUninitialize the joystick module. After you call this any existing joystick objects will no longer work.\n\nIt is safe to call this function more than once.\n\npygame.joystick.get_init()  \nReturns True if the joystick module is initialized.\n\nget_init() -\\> bool\n\nTest if the `pygame.joystick.init()` function has been called.\n\npygame.joystick.get_count()  \nReturns the number of joysticks.\n\nget_count() -\\> count\n\nReturn the number of joystick devices on the system. The count will be `0` if there are no joysticks on the system.\n\nWhen you create Joystick objects using `Joystick(id)`, you pass an integer that must be lower than this count.\n\npygame.joystick.Joystick  \nCreate a new Joystick object.\n\nJoystick(id) -\\> Joystick\n\nCreate a new joystick to access a physical device. The id argument must be a value from `0` to `pygame.joystick.get_count()`` ``-`` ``1`.\n\nJoysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.\n\nChanged in pygame 2.0.0: Joystick objects are now opened immediately on creation.\n\ninit()  \ninitialize the Joystick\n\ninit() -\\> None\n\nInitialize the joystick, if it has been closed. It is safe to call this even if the joystick is already initialized.\n\nDeprecated since pygame 2.0.0: In future it will not be possible to reinitialise a closed Joystick object. Will be removed in Pygame 2.1.\n\nquit()  \nuninitialize the Joystick\n\nquit() -\\> None\n\nClose a Joystick object. After this the pygame event queue will no longer receive events from the device.\n\nIt is safe to call this more than once.\n\nget_init()  \ncheck if the Joystick is initialized\n\nget_init() -\\> bool\n\nReturn True if the Joystick object is currently initialised.\n\nget_id()  \nget the device index (deprecated)\n\nget_id() -\\> int\n\nReturns the original device index for this device. This is the same value that was passed to the `Joystick()` constructor. This method can safely be called while the Joystick is not initialized.\n\nDeprecated since pygame 2.0.0: The original device index is not useful in pygame 2. Use [`get_instance_id()`](#pygame.joystick.Joystick.get_instance_id \"pygame.joystick.Joystick.get_instance_id\") instead. Will be removed in Pygame 2.1.\n\nget_instance_id() → int  \nget the joystick instance id\n\nget_instance_id() -\\> int\n\nGet the joystick instance ID. This matches the `instance_id` field that is given in joystick events.\n\nNew in pygame 2.0.0dev11.\n\nget_guid() → str  \nget the joystick GUID\n\nget_guid() -\\> str\n\nGet the GUID string. This identifies the exact hardware of the joystick device.\n\nNew in pygame 2.0.0dev11.\n\nget_power_level() → str  \nget the approximate power status of the device\n\nget_power_level() -\\> str\n\nGet a string giving the power status of the device.\n\nOne of: `empty`, `low`, `medium`, `full`, `wired`, `max`, or `unknown`.\n\nNew in pygame 2.0.0dev11.\n\nget_name()  \nget the Joystick system name\n\nget_name() -\\> string\n\nReturns the system name for this joystick device. It is unknown what name the system will give to the Joystick, but it should be a unique name that identifies the device. This method can safely be called while the Joystick is not initialized.\n\nget_numaxes()  \nget the number of axes on a Joystick\n\nget_numaxes() -\\> int\n\nReturns the number of input axes are on a Joystick. There will usually be two for the position. Controls like rudders and throttles are treated as additional axes.\n\nThe `pygame.JOYAXISMOTION` events will be in the range from `-1.0` to `1.0`. A value of `0.0` means the axis is centered. Gamepad devices will usually be `-1`, `0`, or `1` with no values in between. Older analog joystick axes will not always use the full `-1` to `1` range, and the centered value will be some area around `0`.\n\nAnalog joysticks usually have a bit of noise in their axis, which will generate a lot of rapid small motion events.\n\nget_axis()  \nget the current position of an axis\n\nget_axis(axis_number) -\\> float\n\nReturns the current position of a joystick axis. The value will range from `-1` to `1` with a value of `0` being centered. You may want to take into account some tolerance to handle jitter, and joystick drift may keep the joystick from centering at `0` or using the full range of position values.\n\nThe axis number must be an integer from `0` to `get_numaxes()`` ``-`` ``1`.\n\nWhen using gamepads both the control sticks and the analog triggers are usually reported as axes.\n\nget_numballs()  \nget the number of trackballs on a Joystick\n\nget_numballs() -\\> int\n\nReturns the number of trackball devices on a Joystick. These devices work similar to a mouse but they have no absolute position; they only have relative amounts of movement.\n\nThe `pygame.JOYBALLMOTION` event will be sent when the trackball is rolled. It will report the amount of movement on the trackball.\n\nget_ball()  \nget the relative position of a trackball\n\nget_ball(ball_number) -\\> x, y\n\nReturns the relative movement of a joystick button. The value is a `x,`` ``y` pair holding the relative movement since the last call to get_ball.\n\nThe ball number must be an integer from `0` to `get_numballs()`` ``-`` ``1`.\n\nget_numbuttons()  \nget the number of buttons on a Joystick\n\nget_numbuttons() -\\> int\n\nReturns the number of pushable buttons on the joystick. These buttons have a boolean (on or off) state.\n\nButtons generate a `pygame.JOYBUTTONDOWN` and `pygame.JOYBUTTONUP` event when they are pressed and released.\n\nget_button()  \nget the current button state\n\nget_button(button) -\\> bool\n\nReturns the current state of a joystick button.\n\nget_numhats()  \nget the number of hat controls on a Joystick\n\nget_numhats() -\\> int\n\nReturns the number of joystick hats on a Joystick. Hat devices are like miniature digital joysticks on a joystick. Each hat has two axes of input.\n\nThe `pygame.JOYHATMOTION` event is generated when the hat changes position. The `position` attribute for the event contains a pair of values that are either `-1`, `0`, or `1`. A position of `(0,`` ``0)` means the hat is centered.\n\nget_hat()  \nget the position of a joystick hat\n\nget_hat(hat_number) -\\> x, y\n\nReturns the current position of a position hat. The position is given as two values representing the `x` and `y` position for the hat. `(0,`` ``0)` means centered. A value of `-1` means left/down and a value of `1` means right/up: so `(-1,`` ``0)` means left; `(1,`` ``0)` means right; `(0,`` ``1)` means up; `(1,`` ``1)` means upper-right; etc.\n\nThis value is digital, `i.e.`, each coordinate can be `-1`, `0` or `1` but never in-between.\n\nThe hat number must be between `0` and `get_numhats()`` ``-`` ``1`.\n\nrumble()  \nStart a rumbling effect\n\nrumble(low_frequency, high_frequency, duration) -\\> bool\n\nStart a rumble effect on the joystick, with the specified strength ranging from 0 to 1. Duration is length of the effect, in ms. Setting the duration to 0 will play the effect until another one overwrites it or [`Joystick.stop_rumble()`](#pygame.joystick.Joystick.stop_rumble \"pygame.joystick.Joystick.stop_rumble\") is called. If an effect is already playing, then it will be overwritten.\n\nReturns True if the rumble was played successfully or False if the joystick does not support it or [`pygame.version.SDL()`](pygame#pygame.version.SDL) is below 2.0.9.\n\nNew in pygame 2.0.2.\n\nstop_rumble()  \nStop any rumble effect playing\n\nstop_rumble() -\\> None\n\nStops any rumble effect playing on the joystick. See [`Joystick.rumble()`](#pygame.joystick.Joystick.rumble \"pygame.joystick.Joystick.rumble\") for more information.\n\nNew in pygame 2.0.2.\n\n[](https://www.pygame.org/docs/_images/joystick_calls.png)\nExample code for joystick module.\n\n``` python\nimport pygame\n\npygame.init()\n\n\n# This is a simple class that will help us print to the screen.\n# It has nothing to do with the joysticks, just outputting the\n# information.\nclass TextPrint:\n    def __init__(self):\n        self.reset()\n        self.font = pygame.font.Font(None, 25)\n\n    def tprint(self, screen, text):\n        text_bitmap = self.font.render(text, True, (0, 0, 0))\n        screen.blit(text_bitmap, (self.x, self.y))\n        self.y += self.line_height\n\n    def reset(self):\n        self.x = 10\n        self.y = 10\n        self.line_height = 15\n\n    def indent(self):\n        self.x += 10\n\n    def unindent(self):\n        self.x -= 10\n\n\ndef main():\n    # Set the width and height of the screen (width, height), and name the window.\n    screen = pygame.display.set_mode((500, 700))\n    pygame.display.set_caption(\"Joystick example\")\n\n    # Used to manage how fast the screen updates.\n    clock = pygame.time.Clock()\n\n    # Get ready to print.\n    text_print = TextPrint()\n\n    # This dict can be left as-is, since pygame will generate a\n    # pygame.JOYDEVICEADDED event for every joystick connected\n    # at the start of the program.\n    joysticks = {}\n\n    done = False\n    while not done:\n        # Event processing step.\n        # Possible joystick events: JOYAXISMOTION, JOYBALLMOTION, JOYBUTTONDOWN,\n        # JOYBUTTONUP, JOYHATMOTION, JOYDEVICEADDED, JOYDEVICEREMOVED\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                done = True  # Flag that we are done so we exit this loop.\n\n            if event.type == pygame.JOYBUTTONDOWN:\n                print(\"Joystick button pressed.\")\n                if event.button == 0:\n                    joystick = joysticks[event.instance_id]\n                    if joystick.rumble(0, 0.7, 500):\n                        print(f\"Rumble effect played on joystick {event.instance_id}\")\n\n            if event.type == pygame.JOYBUTTONUP:\n                print(\"Joystick button released.\")\n\n            # Handle hotplugging\n            if event.type == pygame.JOYDEVICEADDED:\n                # This event will be generated when the program starts for every\n                # joystick, filling up the list without needing to create them manually.\n                joy = pygame.joystick.Joystick(event.device_index)\n                joysticks[joy.get_instance_id()] = joy\n                print(f\"Joystick {joy.get_instance_id()} connencted\")\n\n            if event.type == pygame.JOYDEVICEREMOVED:\n                del joysticks[event.instance_id]\n                print(f\"Joystick {event.instance_id} disconnected\")\n\n        # Drawing step\n        # First, clear the screen to white. Don't put other drawing commands\n        # above this, or they will be erased with this command.\n        screen.fill((255, 255, 255))\n        text_print.reset()\n\n        # Get count of joysticks.\n        joystick_count = pygame.joystick.get_count()\n\n        text_print.tprint(screen, f\"Number of joysticks: {joystick_count}\")\n        text_print.indent()\n\n        # For each joystick:\n        for joystick in joysticks.values():\n            jid = joystick.get_instance_id()\n\n            text_print.tprint(screen, f\"Joystick {jid}\")\n            text_print.indent()\n\n            # Get the name from the OS for the controller/joystick.\n            name = joystick.get_name()\n            text_print.tprint(screen, f\"Joystick name: {name}\")\n\n            guid = joystick.get_guid()\n            text_print.tprint(screen, f\"GUID: {guid}\")\n\n            power_level = joystick.get_power_level()\n            text_print.tprint(screen, f\"Joystick's power level: {power_level}\")\n\n            # Usually axis run in pairs, up/down for one, and left/right for\n            # the other. Triggers count as axes.\n            axes = joystick.get_numaxes()\n            text_print.tprint(screen, f\"Number of axes: {axes}\")\n            text_print.indent()\n\n            for i in range(axes):\n                axis = joystick.get_axis(i)\n                text_print.tprint(screen, f\"Axis {i} value: {axis:>6.3f}\")\n            text_print.unindent()\n\n            buttons = joystick.get_numbuttons()\n            text_print.tprint(screen, f\"Number of buttons: {buttons}\")\n            text_print.indent()\n\n            for i in range(buttons):\n                button = joystick.get_button(i)\n                text_print.tprint(screen, f\"Button {i:>2} value: {button}\")\n            text_print.unindent()\n\n            hats = joystick.get_numhats()\n            text_print.tprint(screen, f\"Number of hats: {hats}\")\n            text_print.indent()\n\n            # Hat position. All or nothing for direction, not a float like\n            # get_axis(). Position is a tuple of int values (x, y).\n            for i in range(hats):\n                hat = joystick.get_hat(i)\n                text_print.tprint(screen, f\"Hat {i} value: {str(hat)}\")\n            text_print.unindent()\n\n            text_print.unindent()\n\n        # Go ahead and update the screen with what we've drawn.\n        pygame.display.flip()\n\n        # Limit to 30 frames per second.\n        clock.tick(30)\n\n\nif __name__ == \"__main__\":\n    main()\n    # If you forget this line, the program will 'hang'\n    # on exit if running from IDLE.\n    pygame.quit()\n```\n\nController mappings are drawn from the underlying SDL library which pygame uses and they differ between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.\n\nAxis and hat mappings are listed from -1 to +1.\n\n## Nintendo Switch Left Joy-Con (pygame 2.x)\n\nThe Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change. The controller is recognized as \"Wireless Gamepad\"\n\n- **Buttons**:\n\n  ``` python\n  D-pad Up        - Button 0\n  D-pad Down      - Button 1\n  D-pad Left      - Button 2\n  D-pad Right     - Button 3\n  SL              - Button 4\n  SR              - Button 5\n  -               - Button 8\n  Stick In        - Button 10\n  Capture         - Button 13\n  L               - Button 14\n  ZL              - Button 15\n  ```\n\n- **Hat/JoyStick**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Nintendo Switch Right Joy-Con (pygame 2.x)\n\nThe Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change. The controller is recognized as \"Wireless Gamepad\"\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  SL              - Button 4\n  SR              - Button 5\n  +               - Button 9\n  Stick In        - Button 11\n  Home            - Button 12\n  R               - Button 14\n  ZR              - Button 15\n  ```\n\n- **Hat/JoyStick**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Nintendo Switch Pro Controller (pygame 2.x)\n\nThe Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats. The controller is recognized as \"Nintendo Switch Pro Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up -> Down      - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up -> Down      - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  - Button        - Button 4\n  Home Button     - Button 5\n  + Button        - Button 6\n  L. Stick In     - Button 7\n  R. Stick In     - Button 8\n  Left Bumper     - Button 9\n  Right Bumper    - Button 10\n  D-pad Up        - Button 11\n  D-pad Down      - Button 12\n  D-pad Left      - Button 13\n  D-pad Right     - Button 14\n  Capture Button  - Button 15\n  ```\n\n## XBox 360 Controller (pygame 2.x)\n\nThe Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat. The controller is recognized as \"Xbox 360 Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 3\n  Up   -> Down    - Axis 4\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 2\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  Back Button     - Button 6\n  Start Button    - Button 7\n  L. Stick In     - Button 8\n  R. Stick In     - Button 9\n  Guide Button    - Button 10\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Playstation 4 Controller (pygame 2.x)\n\nThe PlayStation 4 controller mapping has 6 axes and 16 buttons. The controller is recognized as \"PS4 Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Buttons**:\n\n  ``` python\n  Cross Button    - Button 0\n  Circle Button   - Button 1\n  Square Button   - Button 2\n  Triangle Button - Button 3\n  Share Button    - Button 4\n  PS Button       - Button 5\n  Options Button  - Button 6\n  L. Stick In     - Button 7\n  R. Stick In     - Button 8\n  Left Bumper     - Button 9\n  Right Bumper    - Button 10\n  D-pad Up        - Button 11\n  D-pad Down      - Button 12\n  D-pad Left      - Button 13\n  D-pad Right     - Button 14\n  Touch Pad Click - Button 15\n  ```\n\n## XBox 360 Controller (pygame 1.x)\n\nThe Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat. The controller is recognized as \"Controller (XBOX 360 For Windows)\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 4\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger & Right Trigger**:\n\n  ``` python\n  RT -> LT        - Axis 2\n  ```\n\n- **Buttons**:\n\n  ``` python\n  A Button        - Button 0\n  B Button        - Button 1\n  X Button        - Button 2\n  Y Button        - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  Back Button     - Button 6\n  Start Button    - Button 7\n  L. Stick In     - Button 8\n  R. Stick In     - Button 9\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n## Playstation 4 Controller (pygame 1.x)\n\nThe PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat. The controller is recognized as \"Wireless Controller\".\n\n- **Left Stick**:\n\n  ``` python\n  Left -> Right   - Axis 0\n  Up   -> Down    - Axis 1\n  ```\n\n- **Right Stick**:\n\n  ``` python\n  Left -> Right   - Axis 2\n  Up   -> Down    - Axis 3\n  ```\n\n- **Left Trigger**:\n\n  ``` python\n  Out -> In       - Axis 5\n  ```\n\n- **Right Trigger**:\n\n  ``` python\n  Out -> In       - Axis 4\n  ```\n\n- **Buttons**:\n\n  ``` python\n  Cross Button    - Button 0\n  Circle Button   - Button 1\n  Square Button   - Button 2\n  Triangle Button - Button 3\n  Left Bumper     - Button 4\n  Right Bumper    - Button 5\n  L. Trigger(Full)- Button 6\n  R. Trigger(Full)- Button 7\n  Share Button    - Button 8\n  Options Button  - Button 9\n  L. Stick In     - Button 10\n  R. Stick In     - Button 11\n  PS Button       - Button 12\n  Touch Pad Click - Button 13\n  ```\n\n- **Hat/D-pad**:\n\n  ``` python\n  Down -> Up      - Y Axis\n  Left -> Right   - X Axis\n  ```\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/joystick.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/joystick.html](https://www.pygame.org/docs/ref/joystick.html)"
- name: module-key
  id: ref/key
  summary: This module contains functions for dealing with the keyboard
  description: "pygame.key  \npygame module to work with the keyboard\n\nThis module contains functions for dealing with the keyboard.\n\nThe [`pygame.event`](event#module-pygame.event) queue gets `pygame.KEYDOWN` and `pygame.KEYUP` events when the keyboard buttons are pressed and released. Both events have `key` and `mod` attributes.\n\n> - `key`: an [integer ID](#key-constants-label) representing every key on the keyboard\n>\n> - `mod`: a bitmask of all the [modifier keys](#key-modifiers-label) that were in a pressed state when the event occurred\n\nThe `pygame.KEYDOWN` event has the additional attributes `unicode` and `scancode`.\n\n> - `unicode`: a single character string that is the fully translated character entered, this takes into account the shift and composition keys\n>\n> - `scancode`: the platform-specific key code, which could be different from keyboard to keyboard, but is useful for key selection of weird keys like the multimedia keys\n\nNew in pygame 2.0.0: The `pygame.TEXTINPUT` event is preferred to the `unicode` attribute of `pygame.KEYDOWN`. The attribute `text` contains the input.\n\nThe following is a list of all the constants (from [`pygame.locals`](locals#module-pygame.locals)) used to represent keyboard keys.\n\nPortability note: The integers for key constants differ between pygame 1 and 2. Always use key constants (`K_a`) rather than integers directly (`97`) so that your key handling code works well on both pygame 1 and pygame 2.\n\n``` python\npygame\nConstant      ASCII   Description\n---------------------------------\nK_BACKSPACE   \\b      backspace\nK_TAB         \\t      tab\nK_CLEAR               clear\nK_RETURN      \\r      return\nK_PAUSE               pause\nK_ESCAPE      ^[      escape\nK_SPACE               space\nK_EXCLAIM     !       exclaim\nK_QUOTEDBL    \"       quotedbl\nK_HASH        #       hash\nK_DOLLAR      $       dollar\nK_AMPERSAND   &       ampersand\nK_QUOTE               quote\nK_LEFTPAREN   (       left parenthesis\nK_RIGHTPAREN  )       right parenthesis\nK_ASTERISK    *       asterisk\nK_PLUS        +       plus sign\nK_COMMA       ,       comma\nK_MINUS       -       minus sign\nK_PERIOD      .       period\nK_SLASH       /       forward slash\nK_0           0       0\nK_1           1       1\nK_2           2       2\nK_3           3       3\nK_4           4       4\nK_5           5       5\nK_6           6       6\nK_7           7       7\nK_8           8       8\nK_9           9       9\nK_COLON       :       colon\nK_SEMICOLON   ;       semicolon\nK_LESS        <       less-than sign\nK_EQUALS      =       equals sign\nK_GREATER     >       greater-than sign\nK_QUESTION    ?       question mark\nK_AT          @       at\nK_LEFTBRACKET [       left bracket\nK_BACKSLASH   \\       backslash\nK_RIGHTBRACKET ]      right bracket\nK_CARET       ^       caret\nK_UNDERSCORE  _       underscore\nK_BACKQUOTE   `       grave\nK_a           a       a\nK_b           b       b\nK_c           c       c\nK_d           d       d\nK_e           e       e\nK_f           f       f\nK_g           g       g\nK_h           h       h\nK_i           i       i\nK_j           j       j\nK_k           k       k\nK_l           l       l\nK_m           m       m\nK_n           n       n\nK_o           o       o\nK_p           p       p\nK_q           q       q\nK_r           r       r\nK_s           s       s\nK_t           t       t\nK_u           u       u\nK_v           v       v\nK_w           w       w\nK_x           x       x\nK_y           y       y\nK_z           z       z\nK_DELETE              delete\nK_KP0                 keypad 0\nK_KP1                 keypad 1\nK_KP2                 keypad 2\nK_KP3                 keypad 3\nK_KP4                 keypad 4\nK_KP5                 keypad 5\nK_KP6                 keypad 6\nK_KP7                 keypad 7\nK_KP8                 keypad 8\nK_KP9                 keypad 9\nK_KP_PERIOD   .       keypad period\nK_KP_DIVIDE   /       keypad divide\nK_KP_MULTIPLY *       keypad multiply\nK_KP_MINUS    -       keypad minus\nK_KP_PLUS     +       keypad plus\nK_KP_ENTER    \\r      keypad enter\nK_KP_EQUALS   =       keypad equals\nK_UP                  up arrow\nK_DOWN                down arrow\nK_RIGHT               right arrow\nK_LEFT                left arrow\nK_INSERT              insert\nK_HOME                home\nK_END                 end\nK_PAGEUP              page up\nK_PAGEDOWN            page down\nK_F1                  F1\nK_F2                  F2\nK_F3                  F3\nK_F4                  F4\nK_F5                  F5\nK_F6                  F6\nK_F7                  F7\nK_F8                  F8\nK_F9                  F9\nK_F10                 F10\nK_F11                 F11\nK_F12                 F12\nK_F13                 F13\nK_F14                 F14\nK_F15                 F15\nK_NUMLOCK             numlock\nK_CAPSLOCK            capslock\nK_SCROLLOCK           scrollock\nK_RSHIFT              right shift\nK_LSHIFT              left shift\nK_RCTRL               right control\nK_LCTRL               left control\nK_RALT                right alt\nK_LALT                left alt\nK_RMETA               right meta\nK_LMETA               left meta\nK_LSUPER              left Windows key\nK_RSUPER              right Windows key\nK_MODE                mode shift\nK_HELP                help\nK_PRINT               print screen\nK_SYSREQ              sysrq\nK_BREAK               break\nK_MENU                menu\nK_POWER               power\nK_EURO                Euro\nK_AC_BACK             Android back button\n```\n\nThe keyboard also has a list of modifier states (from [`pygame.locals`](locals#module-pygame.locals)) that can be assembled by bitwise-ORing them together.\n\n``` python\npygame\nConstant      Description\n-------------------------\nKMOD_NONE     no modifier keys pressed\nKMOD_LSHIFT   left shift\nKMOD_RSHIFT   right shift\nKMOD_SHIFT    left shift or right shift or both\nKMOD_LCTRL    left control\nKMOD_RCTRL    right control\nKMOD_CTRL     left control or right control or both\nKMOD_LALT     left alt\nKMOD_RALT     right alt\nKMOD_ALT      left alt or right alt or both\nKMOD_LMETA    left meta\nKMOD_RMETA    right meta\nKMOD_META     left meta or right meta or both\nKMOD_CAPS     caps lock\nKMOD_NUM      num lock\nKMOD_MODE     AltGr\n```\n\nThe modifier information is contained in the `mod` attribute of the `pygame.KEYDOWN` and `pygame.KEYUP` events. The `mod` attribute is a bitmask of all the modifier keys that were in a pressed state when the event occurred. The modifier information can be decoded using a bitwise AND (except for `KMOD_NONE`, which should be compared using equals `==`). For example:\n\n``` python\nfor event in pygame.event.get():\n    if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:\n        if event.mod == pygame.KMOD_NONE:\n            print('No modifier keys were in a pressed state when this '\n                  'event occurred.')\n        else:\n            if event.mod & pygame.KMOD_LSHIFT:\n                print('Left shift was in a pressed state when this event '\n                      'occurred.')\n            if event.mod & pygame.KMOD_RSHIFT:\n                print('Right shift was in a pressed state when this event '\n                      'occurred.')\n            if event.mod & pygame.KMOD_SHIFT:\n                print('Left shift or right shift or both were in a '\n                      'pressed state when this event occurred.')\n```\n\npygame.key.get_focused()  \ntrue if the display is receiving keyboard input from the system\n\nget_focused() -\\> bool\n\nReturns `True` when the display window has keyboard focus from the system. If the display needs to ensure it does not lose keyboard focus, it can use [`pygame.event.set_grab()`](event#pygame.event.set_grab) to grab all input.\n\npygame.key.get_pressed()  \nget the state of all keyboard buttons\n\nget_pressed() -\\> bools\n\nReturns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A `True` value means that the button is pressed.\n\nNote\n\nGetting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to `pygame.key.get_pressed()`. There is also no way to translate these pushed keys into a fully translated character value. See the `pygame.KEYDOWN` events on the [`pygame.event`](event#module-pygame.event) queue for this functionality.\n\nNew in pygame 2.2.0: The collection of bools returned by `get_pressed` can not be iterated over because the indexes of the internal tuple does not correpsond to the keycodes.\n\npygame.key.get_mods()  \ndetermine which modifier keys are being held\n\nget_mods() -\\> int\n\nReturns a single integer representing a bitmask of all the modifier keys being held. Using bitwise operators you can test if specific [modifier keys](#key-modifiers-label) are pressed.\n\npygame.key.set_mods()  \ntemporarily set which modifier keys are pressed\n\nset_mods(int) -\\> None\n\nCreate a bitmask of the [modifier key constants](#key-modifiers-label) you want to impose on your program.\n\npygame.key.set_repeat()  \ncontrol how held keys are repeated\n\nset_repeat() -\\> None\n\nset_repeat(delay) -\\> None\n\nset_repeat(delay, interval) -\\> None\n\nWhen the keyboard repeat is enabled, keys that are held down will generate multiple `pygame.KEYDOWN` events. The `delay` parameter is the number of milliseconds before the first repeated `pygame.KEYDOWN` event will be sent. After that, another `pygame.KEYDOWN` event will be sent every `interval` milliseconds. If a `delay` value is provided and an `interval` value is not provided or is 0, then the `interval` will be set to the same value as `delay`.\n\nTo disable key repeat call this function with no arguments or with `delay` set to 0.\n\nWhen pygame is initialized the key repeat is disabled.\n\nRaises  \n**ValueError** -- if `delay` or `interval` is \\< 0\n\nChanged in pygame 2.0.0: A `ValueError` is now raised (instead of a `pygame.error`) if `delay` or `interval` is \\< 0.\n\npygame.key.get_repeat()  \nsee how held keys are repeated\n\nget_repeat() -\\> (delay, interval)\n\nGet the `delay` and `interval` keyboard repeat values. Refer to [`pygame.key.set_repeat()`](#pygame.key.set_repeat) for a description of these values.\n\nNew in pygame 1.8.\n\npygame.key.name()  \nget the name of a key identifier\n\nname(key, use_compat=True) -\\> str\n\nGet the descriptive name of the button from a keyboard button id constant. Returns an empty string (`\"\"`) if the key is not found.\n\nIf `use_compat` argument is `True` (which is the default), this function returns the legacy name of a key where applicable. The return value is expected to be the same across different pygame versions (provided the corresponding key constant exists and is unique). If the return value is passed to the `key_code` function, the original constant will be returned.\n\n**Experimental:** `use_compat` paramater still in development for testing and feedback. It may change. [Please leave use_compat feedback with authors](https://github.com/pygame/pygame/pull/3312)\n\nIf this argument is `False`, the returned name may be prettier to display and may cover a wider range of keys than with `use_compat`, but there are no guarantees that this name will be the same across different pygame versions. If the name returned is passed to the `key_code` function, the original constant is returned back (this is an implementation detail which may change later, do not rely on this)\n\nChanged in pygame 2.1.3: Added `use_compat` argument and guaranteed API stability for it\n\npygame.key.key_code()  \nget the key identifier from a key name\n\nkey_code(name=string) -\\> int\n\nGet the key identifier code from the descriptive name of the key. This returns an integer matching one of the K\\_\\* keycodes. For example:\n\n``` python\n>>> pygame.key.key_code(\"return\") == pygame.K_RETURN\nTrue\n>>> pygame.key.key_code(\"0\") == pygame.K_0\nTrue\n>>> pygame.key.key_code(\"space\") == pygame.K_SPACE\nTrue\n```\n\nRaises  \n**ValueError** -- if the key name is not known.\n\nNew in pygame 2.0.0.\n\npygame.key.start_text_input()  \nstart handling Unicode text input events\n\nstart_text_input() -\\> None\n\nStart receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events. If applicable, show the on-screen keyboard or IME editor.\n\nFor many languages, key presses will automatically generate a corresponding `pygame.TEXTINPUT` event. Special keys like escape or function keys, and certain key combinations will not generate `pygame.TEXTINPUT` events.\n\nIn other languages, entering a single symbol may require multiple key presses, or a language-specific user interface. In this case, `pygame.TEXTINPUT` events are preferable to `pygame.KEYDOWN` events for text input.\n\nA `pygame.TEXTEDITING` event is received when an IME composition is started or changed. It contains the composition `text`, `length`, and editing `start` position within the composition (attributes `text`, `length`, and `start`, respectively). When the composition is committed (or non-IME input is received), a `pygame.TEXTINPUT` event is generated.\n\nText input events handling is on by default.\n\nNew in pygame 2.0.0.\n\npygame.key.stop_text_input()  \nstop handling Unicode text input events\n\nstop_text_input() -\\> None\n\nStop receiving `pygame.TEXTEDITING` and `pygame.TEXTINPUT` events. If an on-screen keyboard or IME editor was shown with `pygame.key.start_text_input()`, hide it again.\n\nText input events handling is on by default.\n\nTo avoid triggering the IME editor or the on-screen keyboard when the user is holding down a key during gameplay, text input should be disabled once text entry is finished, or when the user clicks outside of a text box.\n\nNew in pygame 2.0.0.\n\npygame.key.set_text_input_rect()  \ncontrols the position of the candidate list\n\nset_text_input_rect(Rect) -\\> None\n\nThis sets the rectangle used for typing with an IME. It controls where the candidate list will open, if supported.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/key.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/key.html](https://www.pygame.org/docs/ref/key.html)"
- name: module-locals
  id: ref/locals
  summary: This module contains various constants used by pygame
  description: "pygame.locals  \npygame constants\n\nThis module contains various constants used by pygame. Its contents are automatically placed in the pygame module namespace. However, an application can use `pygame.locals` to include only the pygame constants with a `from`` ``pygame.locals`` ``import`` ``*`.\n\nDetailed descriptions of the various constants can be found throughout the pygame documentation. Here are the locations of some of them.\n\n> - The [`pygame.display`](display#module-pygame.display) module contains flags like `FULLSCREEN` used by [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n>\n> - The [`pygame.event`](event#module-pygame.event) module contains the various event types.\n>\n> - The [`pygame.key`](key#module-pygame.key) module lists the keyboard constants and modifiers (`K_`\\* and `MOD_`\\*) relating to the `key` and `mod` attributes of the `KEYDOWN` and `KEYUP` events.\n>\n> - The [`pygame.time`](time#module-pygame.time) module defines `TIMER_RESOLUTION`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/locals.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/locals.html](https://www.pygame.org/docs/ref/locals.html)"
- name: module-mask
  id: ref/mask
  summary: pygame.mask pygame module for image masks
  description: "pygame.mask  \npygame module for image masks.\n\nUseful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel to store which parts collide.\n\nNew in pygame 1.8.\n\nChanged in pygame 2.0.2: Mask functions now support keyword arguments.\n\nChanged in pygame 2.0.2: Mask functions that take positions or offsets now support [`pygame.math.Vector2`](math#pygame.math.Vector2) arguments.\n\npygame.mask.from_surface()  \nCreates a Mask from the given surface\n\nfrom_surface(surface) -\\> Mask\n\nfrom_surface(surface, threshold=127) -\\> Mask\n\nCreates a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object from the given surface by setting all the opaque pixels and not setting the transparent pixels.\n\nIf the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are **not** equal to the color-key are **set** and the pixels equal to the color-key are not set.\n\nIf a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value **greater than** the `threshold` parameter are **set** and the pixels with an alpha value less than or equal to the `threshold` are not set.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- the surface to create the mask from\n\n- **threshold** (*int*) -- (optional) the alpha threshold (default is 127) to compare with each surface pixel's alpha value, if the `surface` is color-keyed this parameter is ignored\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object from the given surface\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nNote\n\nThis function is used to create the masks for [`pygame.sprite.collide_mask()`](sprite#pygame.sprite.collide_mask).\n\npygame.mask.from_threshold()  \nCreates a mask by thresholding Surfaces\n\nfrom_threshold(surface, color) -\\> Mask\n\nfrom_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -\\> Mask\n\nThis is a more featureful method of getting a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") from a surface.\n\nIf the optional `othersurface` is not used, all the pixels **within** the `threshold` of the `color` parameter are **set** in the resulting mask.\n\nIf the optional `othersurface` is used, every pixel in the first surface that is **within** the `threshold` of the corresponding pixel in `othersurface` is **set** in the resulting mask.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- the surface to create the mask from\n\n- **color** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list\\[int,* *int,* *int,* *\\[int\\]\\]*) -- color used to check if the surface's pixels are within the given `threshold` range, this parameter is ignored if the optional `othersurface` parameter is supplied\n\n- **threshold** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list\\[int,* *int,* *int,* *\\[int\\]\\]*) -- (optional) the threshold range used to check the difference between two colors (default is `(0,`` ``0,`` ``0,`` ``255)`)\n\n- **othersurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\")) -- (optional) used to check whether the pixels of the first surface are within the given `threshold` range of the pixels from this surface (default is `None`)\n\n- **palette_colors** (*int*) -- (optional) indicates whether to use the palette colors or not, a nonzero value causes the palette colors to be used and a 0 causes them not to be used (default is 1)\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object from the given surface\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\npygame.mask.Mask  \npygame object for representing 2D bitmasks\n\nMask(size=(width, height)) -\\> Mask\n\nMask(size=(width, height), fill=False) -\\> Mask\n\nA `Mask` object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.\n\nA filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the `fill` parameter. Masks can also be cleared or filled using the [`pygame.mask.Mask.clear()`](#pygame.mask.Mask.clear) and [`pygame.mask.Mask.fill()`](#pygame.mask.Mask.fill) methods respectively.\n\nA mask's coordinates start in the top left corner at `(0,`` ``0)` just like [`pygame.Surface`](surface#pygame.Surface). Individual bits can be accessed using the [`pygame.mask.Mask.get_at()`](#pygame.mask.Mask.get_at) and [`pygame.mask.Mask.set_at()`](#pygame.mask.Mask.set_at) methods.\n\nThe methods [`overlap()`](#pygame.mask.Mask.overlap \"pygame.mask.Mask.overlap\"), [`overlap_area()`](#pygame.mask.Mask.overlap_area \"pygame.mask.Mask.overlap_area\"), [`overlap_mask()`](#pygame.mask.Mask.overlap_mask \"pygame.mask.Mask.overlap_mask\"), [`draw()`](#pygame.mask.Mask.draw \"pygame.mask.Mask.draw\"), [`erase()`](#pygame.mask.Mask.erase \"pygame.mask.Mask.erase\"), and [`convolve()`](#pygame.mask.Mask.convolve \"pygame.mask.Mask.convolve\") use an offset parameter to indicate the offset of another mask's top left corner from the calling mask's top left corner. The calling mask's top left corner is considered to be the origin `(0,`` ``0)`. Offsets are a sequence of two values `(x_offset,`` ``y_offset)`. Positive and negative offset values are supported.\n\n``` python\n0 to x (x_offset)\n           :    :\n   0 ..... +----:---------+\n   to      |    :         |\n   y .......... +-----------+\n(y_offset) |    | othermask |\n           |    +-----------+\n           | calling_mask |\n           +--------------+\n```\n\nParameters  \n- **size** -- the dimensions of the mask (width and height)\n\n- **fill** (*bool*) -- (optional) create an unfilled mask (default: `False`) or filled mask (`True`)\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nChanged in pygame 2.0.0: Shallow copy support added. The [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") class supports the special method `__copy__()` and shallow copying via `copy.copy(mask)`.\n\nChanged in pygame 2.0.0: Subclassing support added. The [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") class can be used as a base class.\n\nChanged in pygame 1.9.5: Added support for keyword arguments.\n\nChanged in pygame 1.9.5: Added the optional keyword parameter `fill`.\n\nChanged in pygame 1.9.5: Added support for masks with a width and/or a height of 0.\n\ncopy()  \nReturns a new copy of the mask\n\ncopy() -\\> Mask\n\nReturns  \na new copy of this mask, the new mask will have the same width, height, and set/unset bits as the original\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nNote\n\nIf a mask subclass needs to copy any instance specific attributes then it should override the `__copy__()` method. The overridden `__copy__()` method needs to call `super().__copy__()` and then copy the required data as in the following example code.\n\n``` python\nclass SubMask(pygame.mask.Mask):\n    def __copy__(self):\n        new_mask = super().__copy__()\n        # Do any SubMask attribute copying here.\n        return new_mask\n```\n\nNew in pygame 2.0.0.\n\nget_size()  \nReturns the size of the mask\n\nget_size() -\\> (width, height)\n\nReturns  \nthe size of the mask, (width, height)\n\nReturn type  \ntuple(int, int)\n\nget_rect()  \nReturns a Rect based on the size of the mask\n\nget_rect(\\*\\*kwargs) -\\> Rect\n\nReturns a new [`pygame.Rect()`](rect#pygame.Rect) object based on the size of this mask. The rect's default position will be `(0,`` ``0)` and its default width and height will be the same as this mask's. The rect's attributes can be altered via [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values passed into this method. As an example, `a_mask.get_rect(center=(10,`` ``5))` would create a [`pygame.Rect()`](rect#pygame.Rect) based on the mask's size centered at the given position.\n\nParameters  \n**kwargs** (*dict*) -- [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values that will be applied to the rect\n\nReturns  \na new [`pygame.Rect()`](rect#pygame.Rect) object based on the size of this mask with any [`pygame.Rect()`](rect#pygame.Rect) attribute keyword arguments/values applied to it\n\nReturn type  \n[Rect](rect#pygame.Rect \"pygame.Rect\")\n\nNew in pygame 2.0.0.\n\nget_at()  \nGets the bit at the given position\n\nget_at(pos) -\\> int\n\nParameters  \n**pos** -- the position of the bit to get (x, y)\n\nReturns  \n1 if the bit is set, 0 if the bit is not set\n\nReturn type  \nint\n\nRaises  \n**IndexError** -- if the position is outside of the mask's bounds\n\nset_at()  \nSets the bit at the given position\n\nset_at(pos) -\\> None\n\nset_at(pos, value=1) -\\> None\n\nParameters  \n- **pos** -- the position of the bit to set (x, y)\n\n- **value** (*int*) -- any nonzero int will set the bit to 1, 0 will set the bit to 0 (default is 1)\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nRaises  \n**IndexError** -- if the position is outside of the mask's bounds\n\noverlap()  \nReturns the point of intersection\n\noverlap(other, offset) -\\> (x, y)\n\noverlap(other, offset) -\\> None\n\nReturns the first point of intersection encountered between this mask and `other`. A point of intersection is 2 overlapping set bits.\n\nThe current algorithm searches the overlapping area in `sizeof(unsigned`` ``long`` ``int)`` ``*`` ``CHAR_BIT` bit wide column blocks (the value of `sizeof(unsigned`` ``long`` ``int)`` ``*`` ``CHAR_BIT` is platform dependent, for clarity it will be referred to as `W`). Starting at the top left corner it checks bits 0 to `W`` ``-`` ``1` of the first row (`(0,`` ``0)` to `(W`` ``-`` ``1,`` ``0)`) then continues to the next row (`(0,`` ``1)` to `(W`` ``-`` ``1,`` ``1)`). Once this entire column block is checked, it continues to the next one (`W` to `2`` ``*`` ``W`` ``-`` ``1`). This is repeated until it finds a point of intersection or the entire overlapping area is checked.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the other mask to overlap with this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \npoint of intersection or `None` if no intersection\n\nReturn type  \ntuple(int, int) or NoneType\n\noverlap_area()  \nReturns the number of overlapping set bits\n\noverlap_area(other, offset) -\\> numbits\n\nReturns the number of overlapping set bits between between this mask and `other`.\n\nThis can be useful for collision detection. An approximate collision normal can be found by calculating the gradient of the overlapping area through the finite difference.\n\n``` python\ndx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))\ndy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))\n```\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the other mask to overlap with this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \nthe number of overlapping set bits\n\nReturn type  \nint\n\noverlap_mask()  \nReturns a mask of the overlapping set bits\n\noverlap_mask(other, offset) -\\> Mask\n\nReturns a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\"), the same size as this mask, containing the overlapping set bits between this mask and `other`.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the other mask to overlap with this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \na newly created [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") with the overlapping bits set\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nfill()  \nSets all bits to 1\n\nfill() -\\> None\n\nSets all bits in the mask to 1.\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nclear()  \nSets all bits to 0\n\nclear() -\\> None\n\nSets all bits in the mask to 0.\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\ninvert()  \nFlips all the bits\n\ninvert() -\\> None\n\nFlips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nscale()  \nResizes a mask\n\nscale((width, height)) -\\> Mask\n\nCreates a new [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") of the requested size with its bits scaled from this mask.\n\nParameters  \n**size** -- the width and height (size) of the mask to create\n\nReturns  \na new [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object with its bits scaled from this mask\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nRaises  \n**ValueError** -- if `width`` ``<`` ``0` or `height`` ``<`` ``0`\n\ndraw()  \nDraws a mask onto another\n\ndraw(other, offset) -\\> None\n\nPerforms a bitwise OR, drawing `othermask` onto this mask.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the mask to draw onto this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\nerase()  \nErases a mask from another\n\nerase(other, offset) -\\> None\n\nErases (clears) all bits set in `other` from this mask.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- the mask to erase from this mask\n\n- **offset** -- the offset of `other` from this mask, for more details refer to the [Mask offset notes](#mask-offset-label)\n\nReturns  \n`None`\n\nReturn type  \nNoneType\n\ncount()  \nReturns the number of set bits\n\ncount() -\\> bits\n\nReturns  \nthe number of set bits in the mask\n\nReturn type  \nint\n\ncentroid()  \nReturns the centroid of the set bits\n\ncentroid() -\\> (x, y)\n\nFinds the centroid (the center mass of the set bits) for this mask.\n\nReturns  \na coordinate tuple indicating the centroid of the mask, it will return `(0,`` ``0)` if the mask has no bits set\n\nReturn type  \ntuple(int, int)\n\nangle()  \nReturns the orientation of the set bits\n\nangle() -\\> theta\n\nFinds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.\n\nReturns  \nthe orientation of the set bits in the mask, it will return `0.0` if the mask has no bits set\n\nReturn type  \nfloat\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\noutline()  \nReturns a list of points outlining an object\n\noutline() -\\> \\[(x, y), ...\\]\n\noutline(every=1) -\\> \\[(x, y), ...\\]\n\nReturns a list of points of the outline of the first connected component encountered in the mask. To find a connected component, the mask is searched per row (left to right) starting in the top left corner.\n\nThe `every` optional parameter skips set bits in the outline. For example, setting it to 10 would return a list of every 10th set bit in the outline.\n\nParameters  \n**every** (*int*) -- (optional) indicates the number of bits to skip over in the outline (default is 1)\n\nReturns  \na list of points outlining the first connected component encountered, an empty list is returned if the mask has no bits set\n\nReturn type  \nlist\\[tuple(int, int)\\]\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\nconvolve()  \nReturns the convolution of this mask with another mask\n\nconvolve(other) -\\> Mask\n\nconvolve(other, output=None, offset=(0, 0)) -\\> Mask\n\nConvolve this mask with the given `other` Mask.\n\nParameters  \n- **other** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\")) -- mask to convolve this mask with\n\n- **output** ([*Mask*](#pygame.mask.Mask \"pygame.mask.Mask\") *or* *NoneType*) -- (optional) mask for output (default is `None`)\n\n- **offset** -- the offset of `other` from this mask, (default is `(0,`` ``0)`)\n\nReturns  \na [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") with the `(i`` ``-`` ``offset[0],`` ``j`` ``-`` ``offset[1])` bit set, if shifting `other` (such that its bottom right corner is at `(i,`` ``j)`) causes it to overlap with this mask\n\nIf an `output` Mask is specified, the output is drawn onto it and it is returned. Otherwise a mask of size `(MAX(0,`` ``width`` ``+`` ``other`` ``mask's`` ``width`` ``-`` ``1),`` ``MAX(0,`` ``height`` ``+`` ``other`` ``mask's`` ``height`` ``-`` ``1))` is created and returned.\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nconnected_component()  \nReturns a mask containing a connected component\n\nconnected_component() -\\> Mask\n\nconnected_component(pos) -\\> Mask\n\nA connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.\n\nBy default this method will return a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") will be empty (no bits set).\n\nParameters  \n**pos** -- (optional) selects the connected component that contains the bit at this position\n\nReturns  \na [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object (same size as this mask) with the largest connected component from this mask, if this mask has no bits set then an empty mask will be returned\n\nIf the `pos` parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the `pos` parameter selects an unset bit.\n\nReturn type  \n[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\n\nRaises  \n**IndexError** -- if the optional `pos` parameter is outside of the mask's bounds\n\nconnected_components()  \nReturns a list of masks of connected components\n\nconnected_components() -\\> \\[Mask, ...\\]\n\nconnected_components(minimum=0) -\\> \\[Mask, ...\\]\n\nProvides a list containing a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object for each connected component.\n\nParameters  \n**minimum** (*int*) -- (optional) indicates the minimum number of bits (to filter out noise) per connected component (default is 0, which equates to no minimum and is equivalent to setting it to 1, as a connected component must have at least 1 bit set)\n\nReturns  \na list containing a [`Mask`](#pygame.mask.Mask \"pygame.mask.Mask\") object for each connected component, an empty list is returned if the mask has no bits set\n\nReturn type  \nlist\\[[Mask](#pygame.mask.Mask \"pygame.mask.Mask\")\\]\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\nget_bounding_rects()  \nReturns a list of bounding rects of connected components\n\nget_bounding_rects() -\\> \\[Rect, ...\\]\n\nProvides a list containing a bounding rect for each connected component.\n\nReturns  \na list containing a bounding rect for each connected component, an empty list is returned if the mask has no bits set\n\nReturn type  \nlist\\[[Rect](rect#pygame.Rect \"pygame.Rect\")\\]\n\nNote\n\nSee [`connected_component()`](#pygame.mask.Mask.connected_component \"pygame.mask.Mask.connected_component\") for details on how a connected component is calculated.\n\nto_surface()  \nReturns a surface with the mask drawn on it\n\nto_surface() -\\> Surface\n\nto_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -\\> Surface\n\nDraws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.\n\nParameters  \n- **surface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) Surface to draw mask onto, if no surface is provided one will be created (default is `None`, which will cause a surface with the parameters `Surface(size=mask.get_size(),`` ``flags=SRCALPHA,`` ``depth=32)` to be created, drawn on, and returned)\n\n- **setsurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) use this surface's color values to draw set bits (default is `None`), if this surface is smaller than the mask any bits outside its bounds will use the `setcolor` value\n\n- **unsetsurface** ([*Surface*](surface#pygame.Surface \"pygame.Surface\") *or* *None*) -- (optional) use this surface's color values to draw unset bits (default is `None`), if this surface is smaller than the mask any bits outside its bounds will use the `unsetcolor` value\n\n- **setcolor** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\]) or* *None*) -- (optional) color to draw set bits (default is `(255,`` ``255,`` ``255,`` ``255)`, white), use `None` to skip drawing the set bits, the `setsurface` parameter (if set) will takes precedence over this parameter\n\n- **unsetcolor** ([*Color*](color#pygame.Color \"pygame.Color\") *or* *str* *or* *int* *or* *tuple(int,* *int,* *int,* *\\[int\\]) or* *list(int,* *int,* *int,* *\\[int\\]) or* *None*) -- (optional) color to draw unset bits (default is `(0,`` ``0,`` ``0,`` ``255)`, black), use `None` to skip drawing the unset bits, the `unsetsurface` parameter (if set) will takes precedence over this parameter\n\n- **dest** ([*Rect*](rect#pygame.Rect \"pygame.Rect\") *or* *tuple(int,* *int) or* *list(int,* *int) or* [*Vector2*](math#pygame.math.Vector2 \"pygame.math.Vector2\")*(int,* *int)*) -- (optional) surface destination of where to position the topleft corner of the mask being drawn (default is `(0,`` ``0)`), if a Rect is used as the `dest` parameter, its `x` and `y` attributes will be used as the destination, **NOTE1:** rects with a negative width or height value will not be normalized before using their `x` and `y` values, **NOTE2:** this destination value is only used to position the mask on the surface, it does not offset the `setsurface` and `unsetsurface` from the mask, they are always aligned with the mask (i.e. position `(0,`` ``0)` on the mask always corresponds to position `(0,`` ``0)` on the `setsurface` and `unsetsurface`)\n\nReturns  \nthe `surface` parameter (or a newly created surface if no `surface` parameter was provided) with this mask drawn on it\n\nReturn type  \n[Surface](surface#pygame.Surface \"pygame.Surface\")\n\nRaises  \n**ValueError** -- if the `setsurface` parameter or `unsetsurface` parameter does not have the same format (bytesize/bitsize/alpha) as the `surface` parameter\n\nNote\n\nTo skip drawing the set bits, both `setsurface` and `setcolor` must be `None`. The `setsurface` parameter defaults to `None`, but `setcolor` defaults to a color value and therefore must be set to `None`.\n\nNote\n\nTo skip drawing the unset bits, both `unsetsurface` and `unsetcolor` must be `None`. The `unsetsurface` parameter defaults to `None`, but `unsetcolor` defaults to a color value and therefore must be set to `None`.\n\nNew in pygame 2.0.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mask.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mask.html](https://www.pygame.org/docs/ref/mask.html)"
- name: module-math
  id: ref/math
  summary: The pygame math module currently provides Vector classes in two and three dimensions, Vector2 and Vector3 respectively
  description: "pygame.math  \npygame module for vector classes\n\nThe pygame math module currently provides Vector classes in two and three dimensions, `Vector2` and `Vector3` respectively.\n\nThey support the following numerical operations: `vec`` ``+`` ``vec`, `vec`` ``-`` ``vec`, `vec`` ``*`` ``number`, `number`` ``*`` ``vec`, `vec`` ``/`` ``number`, `vec`` ``//`` ``number`, `vec`` ``+=`` ``vec`, `vec`` ``-=`` ``vec`, `vec`` ``*=`` ``number`, `vec`` ``/=`` ``number`, `vec`` ``//=`` ``number`, `round(vec,`` ``ndigits=0)`.\n\nAll these operations will be performed elementwise. In addition `vec`` ``*`` ``vec` will perform a scalar-product (a.k.a. dot-product). If you want to multiply every element from vector v with every element from vector w you can use the elementwise method: `v.elementwise()`` ``*`` ``w`\n\nThe coordinates of a vector can be retrieved or set using attributes or subscripts\n\n``` python\nv = pygame.Vector3()\n\nv.x = 5\nv[1] = 2 * v.x\nprint(v[1]) # 10\n\nv.x == v[0]\nv.y == v[1]\nv.z == v[2]\n```\n\nMultiple coordinates can be set using slices or swizzling\n\n``` python\nv = pygame.Vector2()\nv.xy = 1, 2\nv[:] = 1, 2\n```\n\nNew in pygame 1.9.2pre.\n\nChanged in pygame 1.9.4: Removed experimental notice.\n\nChanged in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)\n\nChanged in pygame 1.9.4: [`pygame.math`](#module-pygame.math) import not required. More convenient `pygame.Vector2` and `pygame.Vector3`.\n\nChanged in pygame 2.2.0: round returns a new vector with components rounded to the specified digits.\n\npygame.math.clamp()  \nreturns value clamped to min and max.\n\nclamp(value, min, max) -\\> float\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp feedback with authors](https://github.com/pygame/pygame/pull/3326)\n\nClamps a numeric `value` so that it's no lower than `min`, and no higher than `max`.\n\nNew in pygame 2.1.3.\n\npygame.math.lerp()  \ninterpolates between two values by a weight.\n\nlerp(a, b, weight) -\\> float\n\nLinearly interpolates between `a` and `b` by `weight` using the formula `a`` ``+`` ``(b-a)`` ``*`` ``weight`.\n\nIf `weight` is `0.5`, `lerp` will return the value half-way between `a` and `b`. When `a`` ``=`` ``10` and `b`` ``=`` ``20`, `lerp(a,`` ``b,`` ``0.5)` will return `15`. You can think of weight as the percentage of interpolation from `a` to `b`, `0.0` being 0% and `1.0` being 100%.\n\n`lerp` can be used for many things. You could rotate a sprite by a weight with `angle`` ``=`` ``lerp(0,`` ``360,`` ``weight)`. You could even scale an enemy's attack value based on the level you're playing:\n\n``` python\nFINAL_LEVEL = 10\ncurrent_level = 2\n\nattack = lerp(10, 50, current_level/MAX_LEVEL) # 18\n```\n\nIf you're on level 0, `attack` will be `10`, if you're on level 10, `attack` will be `50`. If you're on level 5, the result of `current_level/MAX_LEVEL` will be `0.5` which represents 50%, therefore `attack` will be `30`, which is the midpoint of `10` and `50`.\n\nRaises a ValueError if `weight` is outside the range of `[0,`` ``1]`.\n\nNew in pygame 2.1.3.\n\npygame.math.Vector2  \na 2-Dimensional Vector\n\nVector2() -\\> Vector2(0, 0)\n\nVector2(int) -\\> Vector2\n\nVector2(float) -\\> Vector2\n\nVector2(Vector2) -\\> Vector2\n\nVector2(x, y) -\\> Vector2\n\nVector2((x, y)) -\\> Vector2\n\nSome general information about the `Vector2` class.\n\nChanged in pygame 2.1.3: Inherited methods of vector subclasses now correctly return an instance of the subclass instead of the superclass\n\ndot()  \ncalculates the dot- or scalar-product with the other vector\n\ndot(Vector2) -\\> float\n\ncross()  \ncalculates the cross- or vector-product\n\ncross(Vector2) -\\> float\n\ncalculates the third component of the cross-product.\n\nmagnitude()  \nreturns the Euclidean magnitude of the vector.\n\nmagnitude() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2)`\n\nmagnitude_squared()  \nreturns the squared magnitude of the vector.\n\nmagnitude_squared() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`. This is faster than `vec.magnitude()` because it avoids the square root.\n\nlength()  \nreturns the Euclidean length of the vector.\n\nlength() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2)`\n\nlength_squared()  \nreturns the squared Euclidean length of the vector.\n\nlength_squared() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`. This is faster than `vec.length()` because it avoids the square root.\n\nnormalize()  \nreturns a vector with the same direction but length 1.\n\nnormalize() -\\> Vector2\n\nReturns a new vector that has `length` equal to `1` and the same direction as self.\n\nnormalize_ip()  \nnormalizes the vector in place so that its length is 1.\n\nnormalize_ip() -\\> None\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of the vector is not changed.\n\nis_normalized()  \ntests if the vector is normalized i.e. has length == 1.\n\nis_normalized() -\\> Bool\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns `False`.\n\nscale_to_length()  \nscales the vector to a given length.\n\nscale_to_length(float) -\\> None\n\nScales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length `0`. If the vector is the zero vector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nreflect()  \nreturns a vector reflected of a given normal.\n\nreflect(Vector2) -\\> Vector2\n\nReturns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.\n\nreflect_ip()  \nreflect the vector of a given normal in place.\n\nreflect_ip(Vector2) -\\> None\n\nChanges the direction of self as if it would have been reflected of a surface with the given surface normal.\n\ndistance_to()  \ncalculates the Euclidean distance to a given vector.\n\ndistance_to(Vector2) -\\> float\n\ndistance_squared_to()  \ncalculates the squared Euclidean distance to a given vector.\n\ndistance_squared_to(Vector2) -\\> float\n\nmove_towards()  \nreturns a vector moved toward the target by a given distance.\n\nmove_towards(Vector2, float) -\\> Vector2\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nReturns a Vector which is moved towards the given Vector by a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nmove_towards_ip()  \nmoves the vector toward its target at a given distance.\n\nmove_towards_ip(Vector2, float) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards_ip feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nMoves itself toward the given Vector at a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nlerp()  \nreturns a linear interpolation to the given vector.\n\nlerp(Vector2, float) -\\> Vector2\n\nReturns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self and other the result is going to be. It must be a value between `0` and `1` where `0` means self and `1` means other will be returned.\n\nslerp()  \nreturns a spherical interpolation to the given vector.\n\nslerp(Vector2, float) -\\> Vector2\n\nCalculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range `[-1,`` ``1]`. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.\n\nelementwise()  \nThe next operation will be performed elementwise.\n\nelementwise() -\\> VectorElementwiseProxy\n\nApplies the following operation to each element of the vector.\n\nrotate()  \nrotates a vector by a given angle in degrees.\n\nrotate(angle) -\\> Vector2\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_rad()  \nrotates a vector by a given angle in radians.\n\nrotate_rad(angle) -\\> Vector2\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_ip()  \nrotates the vector by a given angle in degrees in place.\n\nrotate_ip(angle) -\\> None\n\nRotates the vector counterclockwise by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_ip_rad()  \nrotates the vector by a given angle in radians in place.\n\nrotate_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_rad_ip()  \nrotates the vector by a given angle in radians in place.\n\nrotate_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nangle_to()  \ncalculates the angle to a given vector in degrees.\n\nangle_to(Vector2) -\\> float\n\nReturns the angle from self to the passed `Vector2` that would rotate self to be aligned with the passed `Vector2` without crossing over the negative x-axis.\n\nExample demonstrating the angle returned\n\nas_polar()  \nreturns a tuple with radial distance and azimuthal angle.\n\nas_polar() -\\> (r, phi)\n\nReturns a tuple `(r,`` ``phi)` where r is the radial distance, and phi is the azimuthal angle.\n\nfrom_polar()  \nCreates a Vector2(x, y) or sets x and y from a polar coordinates tuple.\n\nVector2.from_polar((r, phi)) -\\> Vector2\n\nVector2().from_polar((r, phi)) -\\> None\n\nIf used from the class creates a Vector2(x,y), else sets x and y. The values of x and y are defined from a tuple `(r,`` ``phi)` where r is the radial distance, and phi is the azimuthal angle.\n\nproject()  \nprojects a vector onto another.\n\nproject(Vector2) -\\> Vector2\n\nReturns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). For a more detailed explanation see [Wikipedia](https://en.wikipedia.org/wiki/Vector_projection).\n\nNew in pygame 2.0.2.\n\ncopy()  \nReturns a copy of itself.\n\ncopy() -\\> Vector2\n\nReturns a new Vector2 having the same dimensions.\n\nNew in pygame 2.1.1.\n\nclamp_magnitude()  \nReturns a copy of a vector with the magnitude clamped between max_length and min_length.\n\nclamp_magnitude(max_length) -\\> Vector2\n\nclamp_magnitude(min_length, max_length) -\\> Vector2\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nReturns a new copy of a vector with the magnitude clamped between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nclamp_magnitude_ip()  \nClamps the vector's magnitude between max_length and min_length\n\nclamp_magnitude_ip(max_length) -\\> None\n\nclamp_magnitude_ip(min_length, max_length) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude_ip feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nClamps the vector's magnitude between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nupdate()  \nSets the coordinates of the vector.\n\nupdate() -\\> None\n\nupdate(int) -\\> None\n\nupdate(float) -\\> None\n\nupdate(Vector2) -\\> None\n\nupdate(x, y) -\\> None\n\nupdate((x, y)) -\\> None\n\nSets coordinates x and y in place.\n\nNew in pygame 1.9.5.\n\nepsilon  \nDetermines the tolerance of vector calculations.\n\nBoth Vector classes have a value named `epsilon` that defaults to `1e-6`. This value acts as a numerical margin in various methods to account for floating point arithmetic errors. Specifically, `epsilon` is used in the following places:\n\n> - comparing Vectors (`==` and `!=`)\n>\n> - the `is_normalized` method (if the square of the length is within `epsilon` of 1, it's normalized)\n>\n> - slerping (a Vector with a length of `<epsilon` is considered a zero vector, and can't slerp with that)\n>\n> - reflection (can't reflect over the zero vector)\n>\n> - projection (can't project onto the zero vector)\n>\n> - rotation (only used when rotating by a multiple of 90 degrees)\n\nWhile it's possible to change `epsilon` for a specific instance of a Vector, all the other Vectors will retain the default value. Changing `epsilon` on a specific instance however could lead to some asymmetric behavior where symmetry would be expected, such as\n\n``` python\nu = pygame.Vector2(0, 1)\nv = pygame.Vector2(0, 1.2)\nu.epsilon = 0.5 # don't set it nearly this large\n\nprint(u == v) # >> True\nprint(v == u) # >> False\n```\n\nYou'll probably never have to change `epsilon` from the default value, but in rare situations you might find that either the margin is too large or too small, in which case changing `epsilon` slightly might help you out.\n\npygame.math.Vector3  \na 3-Dimensional Vector\n\nVector3() -\\> Vector3(0, 0, 0)\n\nVector3(int) -\\> Vector3\n\nVector3(float) -\\> Vector3\n\nVector3(Vector3) -\\> Vector3\n\nVector3(x, y, z) -\\> Vector3\n\nVector3((x, y, z)) -\\> Vector3\n\nSome general information about the Vector3 class.\n\nChanged in pygame 2.1.3: Inherited methods of vector subclasses now correctly return an instance of the subclass instead of the superclass\n\ndot()  \ncalculates the dot- or scalar-product with the other vector\n\ndot(Vector3) -\\> float\n\ncross()  \ncalculates the cross- or vector-product\n\ncross(Vector3) -\\> Vector3\n\ncalculates the cross-product.\n\nmagnitude()  \nreturns the Euclidean magnitude of the vector.\n\nmagnitude() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2)`\n\nmagnitude_squared()  \nreturns the squared Euclidean magnitude of the vector.\n\nmagnitude_squared() -\\> float\n\ncalculates the magnitude of the vector which follows from the theorem: `vec.magnitude_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2`. This is faster than `vec.magnitude()` because it avoids the square root.\n\nlength()  \nreturns the Euclidean length of the vector.\n\nlength() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length()`` ``==`` ``math.sqrt(vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2)`\n\nlength_squared()  \nreturns the squared Euclidean length of the vector.\n\nlength_squared() -\\> float\n\ncalculates the Euclidean length of the vector which follows from the Pythagorean theorem: `vec.length_squared()`` ``==`` ``vec.x**2`` ``+`` ``vec.y**2`` ``+`` ``vec.z**2`. This is faster than `vec.length()` because it avoids the square root.\n\nnormalize()  \nreturns a vector with the same direction but length 1.\n\nnormalize() -\\> Vector3\n\nReturns a new vector that has `length` equal to `1` and the same direction as self.\n\nnormalize_ip()  \nnormalizes the vector in place so that its length is 1.\n\nnormalize_ip() -\\> None\n\nNormalizes the vector so that it has `length` equal to `1`. The direction of the vector is not changed.\n\nis_normalized()  \ntests if the vector is normalized i.e. has length == 1.\n\nis_normalized() -\\> Bool\n\nReturns True if the vector has `length` equal to `1`. Otherwise it returns `False`.\n\nscale_to_length()  \nscales the vector to a given length.\n\nscale_to_length(float) -\\> None\n\nScales the vector so that it has the given length. The direction of the vector is not changed. You can also scale to length `0`. If the vector is the zero vector (i.e. has length `0` thus no direction) a `ValueError` is raised.\n\nreflect()  \nreturns a vector reflected of a given normal.\n\nreflect(Vector3) -\\> Vector3\n\nReturns a new vector that points in the direction as if self would bounce of a surface characterized by the given surface normal. The length of the new vector is the same as self's.\n\nreflect_ip()  \nreflect the vector of a given normal in place.\n\nreflect_ip(Vector3) -\\> None\n\nChanges the direction of self as if it would have been reflected of a surface with the given surface normal.\n\ndistance_to()  \ncalculates the Euclidean distance to a given vector.\n\ndistance_to(Vector3) -\\> float\n\ndistance_squared_to()  \ncalculates the squared Euclidean distance to a given vector.\n\ndistance_squared_to(Vector3) -\\> float\n\nmove_towards()  \nreturns a vector moved toward the target by a given distance.\n\nmove_towards(Vector3, float) -\\> Vector3\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nReturns a Vector which is moved towards the given Vector by a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nmove_towards_ip()  \nmoves the vector toward its target at a given distance.\n\nmove_towards_ip(Vector3, float) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave move_towards_ip feedback with authors](https://github.com/pygame/pygame/pull/2929)\n\nMoves itself toward the given Vector at a given distance and does not overshoot past its target Vector. The first parameter determines the target Vector, while the second parameter determines the delta distance. If the distance is in the negatives, then it will move away from the target Vector.\n\nNew in pygame 2.1.3.\n\nlerp()  \nreturns a linear interpolation to the given vector.\n\nlerp(Vector3, float) -\\> Vector3\n\nReturns a Vector which is a linear interpolation between self and the given Vector. The second parameter determines how far between self an other the result is going to be. It must be a value between `0` and `1`, where `0` means self and `1` means other will be returned.\n\nslerp()  \nreturns a spherical interpolation to the given vector.\n\nslerp(Vector3, float) -\\> Vector3\n\nCalculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range `[-1,`` ``1]`. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.\n\nelementwise()  \nThe next operation will be performed elementwise.\n\nelementwise() -\\> VectorElementwiseProxy\n\nApplies the following operation to each element of the vector.\n\nrotate()  \nrotates a vector by a given angle in degrees.\n\nrotate(angle, Vector3) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in degrees around the given axis. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_rad()  \nrotates a vector by a given angle in radians.\n\nrotate_rad(angle, Vector3) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise by the given angle in radians around the given axis. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_ip()  \nrotates the vector by a given angle in degrees in place.\n\nrotate_ip(angle, Vector3) -\\> None\n\nRotates the vector counterclockwise around the given axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_ip_rad()  \nrotates the vector by a given angle in radians in place.\n\nrotate_ip_rad(angle, Vector3) -\\> None\n\nDEPRECATED: Use rotate_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_rad_ip()  \nrotates the vector by a given angle in radians in place.\n\nrotate_rad_ip(angle, Vector3) -\\> None\n\nRotates the vector counterclockwise around the given axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nrotate_x()  \nrotates a vector around the x-axis by the angle in degrees.\n\nrotate_x(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_x_rad()  \nrotates a vector around the x-axis by the angle in radians.\n\nrotate_x_rad(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the x-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_x_ip()  \nrotates the vector around the x-axis by the angle in degrees in place.\n\nrotate_x_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the x-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_x_ip_rad()  \nrotates the vector around the x-axis by the angle in radians in place.\n\nrotate_x_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_x_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_x_rad_ip()  \nrotates the vector around the x-axis by the angle in radians in place.\n\nrotate_x_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the x-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nrotate_y()  \nrotates a vector around the y-axis by the angle in degrees.\n\nrotate_y(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_y_rad()  \nrotates a vector around the y-axis by the angle in radians.\n\nrotate_y_rad(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the y-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_y_ip()  \nrotates the vector around the y-axis by the angle in degrees in place.\n\nrotate_y_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the y-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_y_ip_rad()  \nrotates the vector around the y-axis by the angle in radians in place.\n\nrotate_y_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_y_rad_ip() instead.\n\nNew in pygame 2.0.0.\n\nDeprecated since pygame 2.1.1.\n\nrotate_y_rad_ip()  \nrotates the vector around the y-axis by the angle in radians in place.\n\nrotate_y_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the y-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nrotate_z()  \nrotates a vector around the z-axis by the angle in degrees.\n\nrotate_z(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in degrees. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_z_rad()  \nrotates a vector around the z-axis by the angle in radians.\n\nrotate_z_rad(angle) -\\> Vector3\n\nReturns a vector which has the same length as self but is rotated counterclockwise around the z-axis by the given angle in radians. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.0.0.\n\nrotate_z_ip()  \nrotates the vector around the z-axis by the angle in degrees in place.\n\nrotate_z_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the z-axis by the given angle in degrees. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nrotate_z_ip_rad()  \nrotates the vector around the z-axis by the angle in radians in place.\n\nrotate_z_ip_rad(angle) -\\> None\n\nDEPRECATED: Use rotate_z_rad_ip() instead.\n\nDeprecated since pygame 2.1.1.\n\nrotate_z_rad_ip()  \nrotates the vector around the z-axis by the angle in radians in place.\n\nrotate_z_rad_ip(angle) -\\> None\n\nRotates the vector counterclockwise around the z-axis by the given angle in radians. The length of the vector is not changed. (Note that due to pygame's inverted y coordinate system, the rotation will look clockwise if displayed).\n\nNew in pygame 2.1.1.\n\nangle_to()  \ncalculates the angle to a given vector in degrees.\n\nangle_to(Vector3) -\\> float\n\nReturns the angle between self and the given vector.\n\nas_spherical()  \nreturns a tuple with radial distance, inclination and azimuthal angle.\n\nas_spherical() -\\> (r, theta, phi)\n\nReturns a tuple `(r,`` ``theta,`` ``phi)` where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.\n\nfrom_spherical()  \nCreates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.\n\nVector3.from_spherical((r, theta, phi)) -\\> Vector3\n\nVector3().from_spherical((r, theta, phi)) -\\> None\n\nIf used from the class creates a Vector3(x, y, z), else sets x, y, and z. The values of x, y, and z are from a tuple `(r,`` ``theta,`` ``phi)` where r is the radial distance, theta is the inclination angle and phi is the azimuthal angle.\n\nproject()  \nprojects a vector onto another.\n\nproject(Vector3) -\\> Vector3\n\nReturns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). For a more detailed explanation see [Wikipedia](https://en.wikipedia.org/wiki/Vector_projection).\n\nNew in pygame 2.0.2.\n\ncopy()  \nReturns a copy of itself.\n\ncopy() -\\> Vector3\n\nReturns a new Vector3 having the same dimensions.\n\nNew in pygame 2.1.1.\n\nclamp_magnitude()  \nReturns a copy of a vector with the magnitude clamped between max_length and min_length.\n\nclamp_magnitude(max_length) -\\> Vector3\n\nclamp_magnitude(min_length, max_length) -\\> Vector3\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nReturns a new copy of a vector with the magnitude clamped between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nclamp_magnitude_ip()  \nClamps the vector's magnitude between max_length and min_length\n\nclamp_magnitude_ip(max_length) -\\> None\n\nclamp_magnitude_ip(min_length, max_length) -\\> None\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave clamp_magnitude_ip feedback with authors](https://github.com/pygame/pygame/pull/2990)\n\nClamps the vector's magnitude between `max_length` and `min_length`. If only one argument is passed, it is taken to be the `max_length`\n\nThis function raises `ValueError` if `min_length` is greater than `max_length`, or if either of these values are negative.\n\nNew in pygame 2.1.3.\n\nupdate()  \nSets the coordinates of the vector.\n\nupdate() -\\> None\n\nupdate(int) -\\> None\n\nupdate(float) -\\> None\n\nupdate(Vector3) -\\> None\n\nupdate(x, y, z) -\\> None\n\nupdate((x, y, z)) -\\> None\n\nSets coordinates x, y, and z in place.\n\nNew in pygame 1.9.5.\n\nepsilon  \nDetermines the tolerance of vector calculations.\n\nWith lengths within this number, vectors are considered equal. For more information see [`pygame.math.Vector2.epsilon`](#pygame.math.Vector2.epsilon)\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/math.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/math.html](https://www.pygame.org/docs/ref/math.html)"
- name: module-midi
  id: ref/midi
  summary: pygame.midi pygame module for interacting with midi input and output
  description: "pygame.midi  \npygame module for interacting with midi input and output.\n\nNew in pygame 1.9.0.\n\nThe midi module can send output to midi devices and get input from midi devices. It can also list midi devices on the system.\n\nThe midi module supports real and virtual midi devices.\n\nIt uses the portmidi library. Is portable to which ever platforms portmidi supports (currently Windows, Mac OS X, and Linux).\n\nThis uses pyportmidi for now, but may use its own bindings at some point in the future. The pyportmidi bindings are included with pygame.\n\n  \n\nNew in pygame 2.0.0.\n\nThese are pygame events ([`pygame.event`](event#module-pygame.event)) reserved for midi use. The `MIDIIN` event is used by [`pygame.midi.midis2events()`](#pygame.midi.midis2events) when converting midi events to pygame events.\n\n``` python\nMIDIIN\nMIDIOUT\n```\n\n  \n\npygame.midi.init()  \ninitialize the midi module\n\ninit() -\\> None\n\nInitializes the [`pygame.midi`](#module-pygame.midi) module. Must be called before using the [`pygame.midi`](#module-pygame.midi) module.\n\nIt is safe to call this more than once.\n\npygame.midi.quit()  \nuninitialize the midi module\n\nquit() -\\> None\n\nUninitializes the [`pygame.midi`](#module-pygame.midi) module. If [`pygame.midi.init()`](#pygame.midi.init) was called to initialize the [`pygame.midi`](#module-pygame.midi) module, then this function will be called automatically when your program exits.\n\nIt is safe to call this function more than once.\n\npygame.midi.get_init()  \nreturns True if the midi module is currently initialized\n\nget_init() -\\> bool\n\nGets the initialization state of the [`pygame.midi`](#module-pygame.midi) module.\n\nReturns  \n`True` if the [`pygame.midi`](#module-pygame.midi) module is currently initialized.\n\nReturn type  \nbool\n\nNew in pygame 1.9.5.\n\npygame.midi.Input  \nInput is used to get midi input from midi devices.\n\nInput(device_id) -\\> None\n\nInput(device_id, buffer_size) -\\> None\n\nParameters  \n- **device_id** (*int*) -- midi device id\n\n- **buffer_size** (*int*) -- (optional) the number of input events to be buffered\n\nclose()  \ncloses a midi stream, flushing any pending buffers.\n\nclose() -\\> None\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\npoll()  \nreturns True if there's data, or False if not.\n\npoll() -\\> bool\n\nUsed to indicate if any data exists.\n\nReturns  \n`True` if there is data, `False` otherwise\n\nReturn type  \nbool\n\nRaises  \n[**MidiException**](#pygame.midi.MidiException \"pygame.midi.MidiException\") -- on error\n\nread()  \nreads num_events midi events from the buffer.\n\nread(num_events) -\\> midi_event_list\n\nReads from the input buffer and gives back midi events.\n\nParameters  \n**num_events** (*int*) -- number of input events to read\n\nReturns  \nthe format for midi_event_list is `[[[status,`` ``data1,`` ``data2,`` ``data3],`` ``timestamp],`` ``...]`\n\nReturn type  \nlist\n\npygame.midi.Output  \nOutput is used to send midi to an output device\n\nOutput(device_id) -\\> None\n\nOutput(device_id, latency=0) -\\> None\n\nOutput(device_id, buffer_size=256) -\\> None\n\nOutput(device_id, latency, buffer_size) -\\> None\n\nThe `buffer_size` specifies the number of output events to be buffered waiting for output. In some cases (see below) PortMidi does not buffer output at all and merely passes data to a lower-level API, in which case buffersize is ignored.\n\n`latency` is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If `latency` is \\<\\<0, 0 is assumed.\n\nIf `latency` is zero, timestamps are ignored and all output is delivered immediately. If `latency` is greater than zero, output is delayed until the message timestamp plus the `latency`. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.\n\nNote\n\nTime is measured relative to the time source indicated by time_proc. Timestamps are absolute, not relative delays or offsets.\n\nabort()  \nterminates outgoing messages immediately\n\nabort() -\\> None\n\nThe caller should immediately close the output port; this call may result in transmission of a partial midi message. There is no abort for Midi input because the user can simply ignore messages in the buffer and close an input device at any time.\n\nclose()  \ncloses a midi stream, flushing any pending buffers.\n\nclose() -\\> None\n\nPortMidi attempts to close open streams when the application exits.\n\nNote\n\nThis is particularly difficult under Windows.\n\nnote_off()  \nturns a midi note off (note must be on)\n\nnote_off(note, velocity=None, channel=0) -\\> None\n\nTurn a note off in the output stream. The note must already be on for this to work correctly.\n\nnote_on()  \nturns a midi note on (note must be off)\n\nnote_on(note, velocity=None, channel=0) -\\> None\n\nTurn a note on in the output stream. The note must already be off for this to work correctly.\n\nset_instrument()  \nselect an instrument, with a value between 0 and 127\n\nset_instrument(instrument_id, channel=0) -\\> None\n\nSelect an instrument.\n\npitch_bend()  \nmodify the pitch of a channel.\n\nset_instrument(value=0, channel=0) -\\> None\n\nAdjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means \"no change\", +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).\n\nIf no value is given, the pitch bend is returned to \"no change\".\n\nNew in pygame 1.9.4.\n\nwrite()  \nwrites a list of midi data to the Output\n\nwrite(data) -\\> None\n\nWrites series of MIDI information in the form of a list.\n\nParameters  \n**data** (*list*) -- data to write, the expected format is `[[[status,`` ``data1=0,`` ``data2=0,`` ``...],`` ``timestamp],`` ``...]` with the `data#` fields being optional\n\nRaises  \n**IndexError** -- if more than 1024 elements in the data list\n\nExample:\n\n``` python\n# Program change at time 20000 and 500ms later send note 65 with\n# velocity 100.\nwrite([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])\n```\n\nNote\n\n- Timestamps will be ignored if latency = 0\n\n- To get a note to play immediately, send MIDI info with timestamp read from function Time\n\n- Optional data fields: `write([[[0xc0,`` ``0,`` ``0],`` ``20000]])` is equivalent to `write([[[0xc0],`` ``20000]])`\n\nwrite_short()  \nwrites up to 3 bytes of midi data to the Output\n\nwrite_short(status) -\\> None\n\nwrite_short(status, data1=0, data2=0) -\\> None\n\nOutput MIDI information of 3 bytes or less. The `data` fields are optional and assumed to be 0 if omitted.\n\nExamples of status byte values:\n\n``` python\n0xc0  # program change\n0x90  # note on\n# etc.\n```\n\nExample:\n\n``` python\n# note 65 on with velocity 100\nwrite_short(0x90, 65, 100)\n```\n\nwrite_sys_ex()  \nwrites a timestamped system-exclusive midi message.\n\nwrite_sys_ex(when, msg) -\\> None\n\nWrites a timestamped system-exclusive midi message.\n\nParameters  \n- **msg** (*list\\[int\\] or* *str*) -- midi message\n\n- **when** -- timestamp in milliseconds\n\nExample:\n\n``` python\nmidi_output.write_sys_ex(0, '\\xF0\\x7D\\x10\\x11\\x12\\x13\\xF7')\n\n# is equivalent to\n\nmidi_output.write_sys_ex(pygame.midi.time(),\n                         [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])\n```\n\npygame.midi.get_count()  \ngets the number of devices.\n\nget_count() -\\> num_devices\n\nDevice ids range from 0 to `get_count()`` ``-`` ``1`\n\npygame.midi.get_default_input_id()  \ngets default input device number\n\nget_default_input_id() -\\> default_id\n\nThe following describes the usage details for this function and the [`get_default_output_id()`](#pygame.midi.get_default_output_id \"pygame.midi.get_default_output_id\") function.\n\nReturn the default device ID or `-1` if there are no devices. The result can be passed to the [`Input`](#pygame.midi.Input \"pygame.midi.Input\")/[`Output`](#pygame.midi.Output \"pygame.midi.Output\") class.\n\nOn a PC the user can specify a default device by setting an environment variable. To use device \\#1, for example:\n\n``` python\nset PM_RECOMMENDED_INPUT_DEVICE=1\nor\nset PM_RECOMMENDED_OUTPUT_DEVICE=1\n```\n\nThe user should first determine the available device ID by using the supplied application \"testin\" or \"testout\".\n\nIn general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if `PM_RECOMMENDED_INPUT_DEVICE` (or `PM_RECOMMENDED_OUTPUT_DEVICE`) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:\n\n``` python\nHKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device\nor\nHKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device\n```\n\nThe number of the first device with a substring that matches the string exactly is returned. For example, if the string in the registry is \"USB\" and device 1 is named \"In USB MidiSport 1x1\", then that will be the default input because it contains the string \"USB\".\n\nIn addition to the name, [`get_device_info()`](#pygame.midi.get_device_info \"pygame.midi.get_device_info\") returns \"interf\", which is the interface name. The \"interface\" is the underlying software system or API used by PortMidi to access devices. Supported interfaces:\n\n``` python\nMMSystem   # the only Win32 interface currently supported\nALSA       # the only Linux interface currently supported\nCoreMIDI   # the only Mac OS X interface currently supported\n# DirectX - not implemented\n# OSS     - not implemented\n```\n\nTo specify both the interface and the device name in the registry, separate the two with a comma and a space. The string before the comma must be a substring of the \"interf\" string and the string after the space must be a substring of the \"name\" name string in order to match the device. e.g.:\n\n``` python\nMMSystem, In USB MidiSport 1x1\n```\n\nNote\n\nIn the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID).\n\npygame.midi.get_default_output_id()  \ngets default output device number\n\nget_default_output_id() -\\> default_id\n\nSee [`get_default_input_id()`](#pygame.midi.get_default_input_id \"pygame.midi.get_default_input_id\") for usage details.\n\npygame.midi.get_device_info()  \nreturns information about a midi device\n\nget_device_info(an_id) -\\> (interf, name, input, output, opened)\n\nget_device_info(an_id) -\\> None\n\nGets the device info for a given id.\n\nParameters  \n**an_id** (*int*) -- id of the midi device being queried\n\nReturns  \nif the id is out of range `None` is returned, otherwise a tuple of (interf, name, input, output, opened) is returned.\n\n> - interf: string describing the device interface (e.g. 'ALSA')\n>\n> - name: string name of the device (e.g. 'Midi Through Port-0')\n>\n> - input: 1 if the device is an input device, otherwise 0\n>\n> - output: 1 if the device is an output device, otherwise 0\n>\n> - opened: 1 if the device is opened, otherwise 0\n\nReturn type  \ntuple or None\n\npygame.midi.midis2events()  \nconverts midi events to pygame events\n\nmidis2events(midi_events, device_id) -\\> \\[Event, ...\\]\n\nTakes a sequence of midi events and returns list of pygame events.\n\nThe `midi_events` data is expected to be a sequence of `((status,`` ``data1,`` ``data2,`` ``data3),`` ``timestamp)` midi events (all values required).\n\nReturns  \na list of pygame events of event type `MIDIIN`\n\nReturn type  \nlist\n\npygame.midi.time()  \nreturns the current time in ms of the PortMidi timer\n\ntime() -\\> time\n\nThe time is reset to 0 when the [`pygame.midi`](#module-pygame.midi) module is initialized.\n\npygame.midi.frequency_to_midi()  \nConverts a frequency into a MIDI note. Rounds to the closest midi note.\n\nfrequency_to_midi(midi_note) -\\> midi_note\n\nexample:\n\n``` python\nfrequency_to_midi(27.5) == 21\n```\n\nNew in pygame 1.9.5.\n\npygame.midi.midi_to_frequency()  \nConverts a midi note to a frequency.\n\nmidi_to_frequency(midi_note) -\\> frequency\n\nexample:\n\n``` python\nmidi_to_frequency(21) == 27.5\n```\n\nNew in pygame 1.9.5.\n\npygame.midi.midi_to_ansi_note()  \nReturns the Ansi Note name for a midi number.\n\nmidi_to_ansi_note(midi_note) -\\> ansi_note\n\nexample:\n\n``` python\nmidi_to_ansi_note(21) == 'A0'\n```\n\nNew in pygame 1.9.5.\n\nexception pygame.midi.MidiException  \nexception that pygame.midi functions and classes can raise\n\nMidiException(errno) -\\> None\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/midi.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/midi.html](https://www.pygame.org/docs/ref/midi.html)"
- name: module-mixer
  id: ref/mixer
  summary: This module contains classes for loading Sound objects and controlling playback
  description: "pygame.mixer  \npygame module for loading and playing sounds\n\nThis module contains classes for loading Sound objects and controlling playback. The mixer module is optional and depends on SDL_mixer. Your program should test that [`pygame.mixer`](#module-pygame.mixer) is available and initialized before using it.\n\nThe mixer module has a limited number of channels for playback of sounds. Usually programs tell pygame to start playing audio and it selects an available channel automatically. The default is 8 simultaneous channels, but complex programs can get more precise control over the number of channels and their use.\n\nAll sound playback is mixed in background threads. When you begin to play a Sound object, it will return immediately while the sound continues to play. A single Sound object can also be actively played back multiple times.\n\nThe mixer also has a special streaming channel. This is for music playback and is accessed through the [`pygame.mixer.music`](music#module-pygame.mixer.music) module. Consider using this module for playing long running music. Unlike mixer module, the music module streams the music from the files without loading music at once into memory.\n\nThe mixer module must be initialized like other pygame modules, but it has some extra conditions. The `pygame.mixer.init()` function takes several optional arguments to control the playback rate and sample size. Pygame will default to reasonable values, but pygame cannot perform Sound resampling, so the mixer should be initialized to match the values of your audio resources.\n\n`NOTE`: For less laggy sound use a smaller buffer size. The default is set to reduce the chance of scratchy sounds on some computers. You can change the default buffer by calling [`pygame.mixer.pre_init()`](#pygame.mixer.pre_init) before [`pygame.mixer.init()`](#pygame.mixer.init) or [`pygame.init()`](pygame#pygame.init) is called. For example: `pygame.mixer.pre_init(44100,-16,2,`` ``1024)`\n\npygame.mixer.init()  \ninitialize the mixer module\n\ninit(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE \\| AUDIO_ALLOW_CHANNELS_CHANGE) -\\> None\n\nInitialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backwards compatibility, argument values of 0 are replaced with the startup defaults, except for `allowedchanges`, where -1 is used. (startup defaults may be changed by a [`pre_init()`](#pygame.mixer.pre_init \"pygame.mixer.pre_init\") call).\n\nThe size argument represents how many bits are used for each audio sample. If the value is negative then signed sample values will be used. Positive values mean unsigned audio samples will be used. An invalid value raises an exception.\n\nThe channels argument is used to specify whether to use mono or stereo. 1 for mono and 2 for stereo.\n\nThe buffer argument controls the number of internal samples used in the sound mixer. The default value should work for most cases. It can be lowered to reduce latency, but sound dropout may occur. It can be raised to larger values to ensure playback never skips, but it will impose latency on sound playback. The buffer size must be a power of two (if not it is rounded up to the next nearest power of 2).\n\nSome platforms require the [`pygame.mixer`](#module-pygame.mixer) module to be initialized after the display modules have initialized. The top level `pygame.init()` takes care of this automatically, but cannot pass any arguments to the mixer init. To solve this, mixer has a function `pygame.mixer.pre_init()` to set the proper defaults before the toplevel init is used.\n\nWhen using allowedchanges=0 it will convert the samples at runtime to match what the hardware supports. For example a sound card may not support 16bit sound samples, so instead it will use 8bit samples internally. If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will change to the closest that SDL2 supports.\n\nApart from 0, allowedchanged accepts the following constants ORed together:\n\n> - AUDIO_ALLOW_FREQUENCY_CHANGE\n>\n> - AUDIO_ALLOW_FORMAT_CHANGE\n>\n> - AUDIO_ALLOW_CHANNELS_CHANGE\n>\n> - AUDIO_ALLOW_ANY_CHANGE\n\nIt is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling `pygame.mixer.quit()`.\n\nChanged in pygame 1.8: The default `buffersize` changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` changed from 3072 to 4096.\n\nChanged in pygame 2.0.0: The default `buffersize` changed from 4096 to 512.\n\nChanged in pygame 2.0.0: The default `frequency` changed from 22050 to 44100.\n\nChanged in pygame 2.0.0: `size` can be 32 (32-bit floats).\n\nChanged in pygame 2.0.0: `channels` can also be 4 or 6.\n\nNew in pygame 2.0.0: `allowedchanges`, `devicename` arguments added\n\npygame.mixer.pre_init()  \npreset the mixer init arguments\n\npre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE \\| AUDIO_ALLOW_CHANNELS_CHANGE) -\\> None\n\nCall pre_init to change the defaults used when the real `pygame.mixer.init()` is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call `pygame.mixer.pre_init()` before calling the top level `pygame.init()`. For backwards compatibility, argument values of 0 are replaced with the startup defaults, except for `allowedchanges`, where -1 is used.\n\nChanged in pygame 1.8: The default `buffersize` changed from 1024 to 3072.\n\nChanged in pygame 1.9.1: The default `buffersize` changed from 3072 to 4096.\n\nChanged in pygame 2.0.0: The default `buffersize` changed from 4096 to 512.\n\nChanged in pygame 2.0.0: The default `frequency` changed from 22050 to 44100.\n\nNew in pygame 2.0.0: `allowedchanges`, `devicename` arguments added\n\npygame.mixer.quit()  \nuninitialize the mixer\n\nquit() -\\> None\n\nThis will uninitialize [`pygame.mixer`](#module-pygame.mixer). All playback will stop and any loaded Sound objects may not be compatible with the mixer if it is reinitialized later.\n\npygame.mixer.get_init()  \ntest if the mixer is initialized\n\nget_init() -\\> (frequency, format, channels)\n\nIf the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns `None`.\n\npygame.mixer.stop()  \nstop playback of all sound channels\n\nstop() -\\> None\n\nThis will stop all playback of all active mixer channels.\n\npygame.mixer.pause()  \ntemporarily stop playback of all sound channels\n\npause() -\\> None\n\nThis will temporarily stop all playback on the active mixer channels. The playback can later be resumed with `pygame.mixer.unpause()`\n\npygame.mixer.unpause()  \nresume paused playback of sound channels\n\nunpause() -\\> None\n\nThis will resume all active sound channels after they have been paused.\n\npygame.mixer.fadeout()  \nfade out the volume on all sounds before stopping\n\nfadeout(time) -\\> None\n\nThis will fade out the volume on all active channels over the time argument in milliseconds. After the sound is muted the playback will stop.\n\npygame.mixer.set_num_channels()  \nset the total number of playback channels\n\nset_num_channels(count) -\\> None\n\nSets the number of available channels for the mixer. The default value is 8. The value can be increased or decreased. If the value is decreased, sounds playing on the truncated channels are stopped.\n\npygame.mixer.get_num_channels()  \nget the total number of playback channels\n\nget_num_channels() -\\> count\n\nReturns the number of currently active playback channels.\n\npygame.mixer.set_reserved()  \nreserve channels from being automatically used\n\nset_reserved(count) -\\> count\n\nThe mixer can reserve any number of channels that will not be automatically selected for playback by Sounds. This means that whenever you play a Sound without specifying a channel, a reserved channel will never be used. If sounds are currently playing on the reserved channels they will not be stopped.\n\nThis allows the application to reserve a specific number of channels for important sounds that must not be dropped or have a guaranteed channel to play on.\n\nWill return number of channels actually reserved, this may be less than requested depending on the number of channels previously allocated.\n\npygame.mixer.find_channel()  \nfind an unused channel\n\nfind_channel(force=False) -\\> Channel\n\nThis will find and return an inactive Channel object. If there are no inactive Channels this function will return `None`. If there are no inactive channels and the force argument is `True`, this will find the Channel with the longest running Sound and return it.\n\npygame.mixer.get_busy()  \ntest if any sound is being mixed\n\nget_busy() -\\> bool\n\nReturns `True` if the mixer is busy mixing any channels. If the mixer is idle then this return `False`.\n\npygame.mixer.get_sdl_mixer_version()  \nget the mixer's SDL version\n\nget_sdl_mixer_version() -\\> (major, minor, patch)\n\nget_sdl_mixer_version(linked=True) -\\> (major, minor, patch)\n\nParameters  \n**linked** (*bool*) -- if `True` (default) the linked version number is returned, otherwise the compiled version number is returned\n\nReturns  \nthe mixer's SDL library version number (linked or compiled depending on the `linked` parameter) as a tuple of 3 integers `(major,`` ``minor,`` ``patch)`\n\nReturn type  \ntuple\n\nNote\n\nThe linked and compile version numbers should be the same.\n\nNew in pygame 2.0.0.\n\npygame.mixer.Sound  \nCreate a new Sound object from a file or buffer object\n\nSound(filename) -\\> Sound\n\nSound(file=filename) -\\> Sound\n\nSound(file=pathlib_path) -\\> Sound\n\nSound(buffer) -\\> Sound\n\nSound(buffer=buffer) -\\> Sound\n\nSound(object) -\\> Sound\n\nSound(file=object) -\\> Sound\n\nSound(array=object) -\\> Sound\n\nLoad a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a new buffer interface (The object is checked for a buffer interface first.)\n\nThe Sound object represents actual sound sample data. Methods that change the state of the Sound object will the all instances of the Sound playback. A Sound object also exports a new buffer interface.\n\nThe Sound can be loaded from an `OGG` audio file or from an uncompressed `WAV`.\n\nNote: The buffer will be copied internally, no data will be shared between it and the Sound object.\n\nFor now buffer and array support is consistent with `sndarray.make_sound` for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.\n\nNew in pygame 1.8: `pygame.mixer.Sound(buffer)`\n\nNew in pygame 1.9.2: [`pygame.mixer.Sound`](#pygame.mixer.Sound) keyword arguments and array interface support\n\nNew in pygame 2.0.1: pathlib.Path support on Python 3.\n\nplay()  \nbegin sound playback\n\nplay(loops=0, maxtime=0, fade_ms=0) -\\> Channel\n\nBegin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.\n\nThe loops argument controls how many times the sample will be repeated after being played the first time. A value of 5 means that the sound will be played once, then repeated five times, and so is played a total of six times. The default value (zero) means the Sound is not repeated, and so is only played once. If loops is set to -1 the Sound will loop indefinitely (though you can still call `stop()` to stop it).\n\nThe maxtime argument can be used to stop playback after a given number of milliseconds.\n\nThe fade_ms argument will make the sound start playing at 0 volume and fade up to full volume over the time given. The sample may end before the fade-in is complete.\n\nThis returns the Channel object for the channel that was selected.\n\nstop()  \nstop sound playback\n\nstop() -\\> None\n\nThis will stop the playback of this Sound on any active Channels.\n\nfadeout()  \nstop sound playback after fading out\n\nfadeout(time) -\\> None\n\nThis will stop playback of the sound after fading it out over the time argument in milliseconds. The Sound will fade and stop on all actively playing channels.\n\nset_volume()  \nset the playback volume for this Sound\n\nset_volume(value) -\\> None\n\nThis will set the playback volume (loudness) for this Sound. This will immediately affect the Sound if it is playing. It will also affect any future playback of this Sound.\n\nParameters  \n**value** (*float*) --\n\nvolume in the range of 0.0 to 1.0 (inclusive)\n\nIf value \\< 0.0, the volume will not be changed\n\nIf value \\> 1.0, the volume will be set to 1.0\n\nget_volume()  \nget the playback volume\n\nget_volume() -\\> value\n\nReturn a value from 0.0 to 1.0 representing the volume for this Sound.\n\nget_num_channels()  \ncount how many times this Sound is playing\n\nget_num_channels() -\\> count\n\nReturn the number of active channels this sound is playing on.\n\nget_length()  \nget the length of the Sound\n\nget_length() -\\> seconds\n\nReturn the length of this Sound in seconds.\n\nget_raw()  \nreturn a bytestring copy of the Sound samples.\n\nget_raw() -\\> bytes\n\nReturn a copy of the Sound object buffer as a bytes.\n\nNew in pygame 1.9.2.\n\npygame.mixer.Channel  \nCreate a Channel object for controlling playback\n\nChannel(id) -\\> Channel\n\nReturn a Channel object for one of the current channels. The id must be a value from 0 to the value of `pygame.mixer.get_num_channels()`.\n\nThe Channel object can be used to get fine control over the playback of Sounds. A channel can only playback a single Sound at time. Using channels is entirely optional since pygame can manage them by default.\n\nplay()  \nplay a Sound on a specific Channel\n\nplay(Sound, loops=0, maxtime=0, fade_ms=0) -\\> None\n\nThis will begin playback of a Sound on a specific Channel. If the Channel is currently playing any other Sound it will be stopped.\n\nThe loops argument has the same meaning as in `Sound.play()`: it is the number of times to repeat the sound after the first time. If it is 3, the sound will be played 4 times (the first time, then three more). If loops is -1 then the playback will repeat indefinitely.\n\nAs in `Sound.play()`, the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.\n\nAs in `Sound.play()`, the fade_ms argument can be used fade in the sound.\n\nstop()  \nstop playback on a Channel\n\nstop() -\\> None\n\nStop sound playback on a channel. After playback is stopped the channel becomes available for new Sounds to play on it.\n\npause()  \ntemporarily stop playback of a channel\n\npause() -\\> None\n\nTemporarily stop the playback of sound on a channel. It can be resumed at a later time with `Channel.unpause()`\n\nunpause()  \nresume pause playback of a channel\n\nunpause() -\\> None\n\nResume the playback on a paused channel.\n\nfadeout()  \nstop playback after fading channel out\n\nfadeout(time) -\\> None\n\nStop playback of a channel after fading out the sound over the given time argument in milliseconds.\n\nset_volume()  \nset the volume of a playing channel\n\nset_volume(value) -\\> None\n\nset_volume(left, right) -\\> None\n\nSet the volume (loudness) of a playing sound. When a channel starts to play its volume value is reset. This only affects the current sound. The value argument is between 0.0 and 1.0.\n\nIf one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is `None`, the first argument will be the volume of both speakers.)\n\nIf the channel is playing a Sound on which `set_volume()` has also been called, both calls are taken into account. For example:\n\n``` python\nsound = pygame.mixer.Sound(\"s.wav\")\nchannel = s.play()      # Sound plays at full volume by default\nsound.set_volume(0.9)   # Now plays at 90% of full volume.\nsound.set_volume(0.6)   # Now plays at 60% (previous value replaced).\nchannel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).\n```\n\nget_volume()  \nget the volume of the playing channel\n\nget_volume() -\\> value\n\nReturn the volume of the channel for the current playing sound. This does not take into account stereo separation used by [`Channel.set_volume()`](#pygame.mixer.Channel.set_volume \"pygame.mixer.Channel.set_volume\"). The Sound object also has its own volume which is mixed with the channel.\n\nget_busy()  \ncheck if the channel is active\n\nget_busy() -\\> bool\n\nReturns `True` if the channel is actively mixing sound. If the channel is idle this returns `False`.\n\nget_sound()  \nget the currently playing Sound\n\nget_sound() -\\> Sound\n\nReturn the actual Sound object currently playing on this channel. If the channel is idle `None` is returned.\n\nqueue()  \nqueue a Sound object to follow the current\n\nqueue(Sound) -\\> None\n\nWhen a Sound is queued on a Channel, it will begin playing immediately after the current Sound is finished. Each channel can only have a single Sound queued at a time. The queued Sound will only play if the current playback finished automatically. It is cleared on any other call to `Channel.stop()` or `Channel.play()`.\n\nIf there is no sound actively playing on the Channel then the Sound will begin playing immediately.\n\nget_queue()  \nreturn any Sound that is queued\n\nget_queue() -\\> Sound\n\nIf a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.\n\nset_endevent()  \nhave the channel send an event when playback stops\n\nset_endevent() -\\> None\n\nset_endevent(type) -\\> None\n\nWhen an endevent is set for a channel, it will send an event to the pygame queue every time a sound finishes playing on that channel (not just the first time). Use `pygame.event.get()` to retrieve the endevent once it's sent.\n\nNote that if you called `Sound.play(n)` or `Channel.play(sound,n)`, the end event is sent only once: after the sound has been played \"n+1\" times (see the documentation of Sound.play).\n\nIf `Channel.stop()` or `Channel.play()` is called while the sound was still playing, the event will be posted immediately.\n\nThe type argument will be the event id sent to the queue. This can be any valid event type, but a good choice would be a value between `pygame.locals.USEREVENT` and `pygame.locals.NUMEVENTS`. If no type argument is given then the Channel will stop sending endevents.\n\nget_endevent()  \nget the event a channel sends when playback stops\n\nget_endevent() -\\> type\n\nReturns the event type to be sent every time the Channel finishes playback of a Sound. If there is no endevent the function returns `pygame.NOEVENT`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mixer.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mixer.html](https://www.pygame.org/docs/ref/mixer.html)"
- name: module-mixer.music
  id: ref/music
  summary: The music module is closely tied to pygame.mixer
  description: "pygame.mixer.music  \npygame module for controlling streamed audio\n\nThe music module is closely tied to [`pygame.mixer`](mixer#module-pygame.mixer). Use the music module to control the playback of music in the sound mixer.\n\nThe difference between the music playback and regular Sound playback is that the music is streamed, and never actually loaded all at once. The mixer system only supports a single music stream at once.\n\nOn older pygame versions, `MP3` support was limited under Mac and Linux. This changed in pygame `v2.0.2` which got improved MP3 support. Consider using `OGG` file format for music as that can give slightly better compression than MP3 in most cases.\n\npygame.mixer.music.load()  \nLoad a music file for playback\n\nload(filename) -\\> None\n\nload(fileobj, namehint=\"\") -\\> None\n\nThis will load a music filename/file object and prepare it for playback. If a music stream is already playing it will be stopped. This does not start the music playing.\n\nIf you are loading from a file object, the namehint parameter can be used to specify the type of music data in the object. For example: `load(fileobj,`` ``\"ogg\")`.\n\nChanged in pygame 2.0.2: Added optional `namehint` argument\n\npygame.mixer.music.unload()  \nUnload the currently loaded music to free up resources\n\nunload() -\\> None\n\nThis closes resources like files for any music that may be loaded.\n\nNew in pygame 2.0.0.\n\npygame.mixer.music.play()  \nStart the playback of the music stream\n\nplay(loops=0, start=0.0, fade_ms=0) -\\> None\n\nThis will play the loaded music stream. If the music is already playing it will be restarted.\n\n`loops` is an optional integer argument, which is `0` by default, which indicates how many times to repeat the music. The music repeats indefinitely if this argument is set to `-1`.\n\n`start` is an optional float argument, which is `0.0` by default, which denotes the position in time from which the music starts playing. The starting position depends on the format of the music played. `MP3` and `OGG` use the position as time in seconds. For `MP3` files the start time position selected may not be accurate as things like variable bit rate encoding and ID3 tags can throw off the timing calculations. For `MOD` music it is the pattern order number. Passing a start position will raise a NotImplementedError if the start position cannot be set.\n\n`fade_ms` is an optional integer argument, which is `0` by default, which denotes the period of time (in milliseconds) over which the music will fade up from volume level `0.0` to full volume (or the volume level previously set by [`set_volume()`](#pygame.mixer.music.set_volume \"pygame.mixer.music.set_volume\")). The sample may end before the fade-in is complete. If the music is already streaming `fade_ms` is ignored.\n\nChanged in pygame 2.0.0: Added optional `fade_ms` argument\n\npygame.mixer.music.rewind()  \nrestart music\n\nrewind() -\\> None\n\nResets playback of the current music to the beginning. If [`pause()`](#pygame.mixer.music.pause \"pygame.mixer.music.pause\") has previously been used to pause the music, the music will remain paused.\n\nNote\n\n[`rewind()`](#pygame.mixer.music.rewind \"pygame.mixer.music.rewind\") supports a limited number of file types and notably `WAV` files are NOT supported. For unsupported file types use [`play()`](#pygame.mixer.music.play \"pygame.mixer.music.play\") which will restart the music that's already playing (note that this will start the music playing again even if previously paused).\n\npygame.mixer.music.stop()  \nstop the music playback\n\nstop() -\\> None\n\nStops the music playback if it is currently playing. endevent will be triggered, if set. It won't unload the music.\n\npygame.mixer.music.pause()  \ntemporarily stop music playback\n\npause() -\\> None\n\nTemporarily stop playback of the music stream. It can be resumed with the [`unpause()`](#pygame.mixer.music.unpause \"pygame.mixer.music.unpause\") function.\n\npygame.mixer.music.unpause()  \nresume paused music\n\nunpause() -\\> None\n\nThis will resume the playback of a music stream after it has been paused.\n\npygame.mixer.music.fadeout()  \nstop music playback after fading out\n\nfadeout(time) -\\> None\n\nFade out and stop the currently playing music.\n\nThe `time` argument denotes the integer milliseconds for which the fading effect is generated.\n\nNote, that this function blocks until the music has faded out. Calls to [`fadeout()`](#pygame.mixer.music.fadeout \"pygame.mixer.music.fadeout\") and [`set_volume()`](#pygame.mixer.music.set_volume \"pygame.mixer.music.set_volume\") will have no effect during this time. If an event was set using [`set_endevent()`](#pygame.mixer.music.set_endevent \"pygame.mixer.music.set_endevent\") it will be called after the music has faded.\n\npygame.mixer.music.set_volume()  \nset the music volume\n\nset_volume(volume) -\\> None\n\nSet the volume of the music playback.\n\nThe `volume` argument is a float between `0.0` and `1.0` that sets the volume level. When new music is loaded the volume is reset to full volume. If `volume` is a negative value it will be ignored and the volume will remain set at the current level. If the `volume` argument is greater than `1.0`, the volume will be set to `1.0`.\n\npygame.mixer.music.get_volume()  \nget the music volume\n\nget_volume() -\\> value\n\nReturns the current volume for the mixer. The value will be between `0.0` and `1.0`.\n\npygame.mixer.music.get_busy()  \ncheck if the music stream is playing\n\nget_busy() -\\> bool\n\nReturns True when the music stream is actively playing. When the music is idle this returns False. In pygame 2.0.1 and above this function returns False when the music is paused. In pygame 1 it returns True when the music is paused.\n\nChanged in pygame 2.0.1: Returns False when music paused.\n\npygame.mixer.music.set_pos()  \nset position to play from\n\nset_pos(pos) -\\> None\n\nThis sets the position in the music file where playback will start. The meaning of \"pos\", a float (or a number that can be converted to a float), depends on the music format.\n\nFor `MOD` files, pos is the integer pattern number in the module. For `OGG` it is the absolute position, in seconds, from the beginning of the sound. For `MP3` files, it is the relative position, in seconds, from the current position. For absolute positioning in an `MP3` file, first call [`rewind()`](#pygame.mixer.music.rewind \"pygame.mixer.music.rewind\").\n\nOther file formats are unsupported. Newer versions of SDL_mixer have better positioning support than earlier ones. An SDLError is raised if a particular format does not support positioning.\n\nFunction [`set_pos()`](#pygame.mixer.music.set_pos \"pygame.mixer.music.set_pos\") calls underlining SDL_mixer function `Mix_SetMusicPosition`.\n\nNew in pygame 1.9.2.\n\npygame.mixer.music.get_pos()  \nget the music play time\n\nget_pos() -\\> time\n\nThis gets the number of milliseconds that the music has been playing for. The returned time only represents how long the music has been playing; it does not take into account any starting position offsets.\n\npygame.mixer.music.queue()  \nqueue a sound file to follow the current\n\nqueue(filename) -\\> None\n\nqueue(fileobj, namehint=\"\", loops=0) -\\> None\n\nThis will load a sound file and queue it. A queued sound file will begin as soon as the current sound naturally ends. Only one sound can be queued at a time. Queuing a new sound while another sound is queued will result in the new sound becoming the queued sound. Also, if the current sound is ever stopped or changed, the queued sound will be lost.\n\nIf you are loading from a file object, the namehint parameter can be used to specify the type of music data in the object. For example: `queue(fileobj,`` ``\"ogg\")`.\n\nThe following example will play music by Bach six times, then play music by Mozart once:\n\n``` python\npygame.mixer.music.load('bach.ogg')\npygame.mixer.music.play(5)        # Plays six times, not five!\npygame.mixer.music.queue('mozart.ogg')\n```\n\nChanged in pygame 2.0.2: Added optional `namehint` argument\n\npygame.mixer.music.set_endevent()  \nhave the music send an event when playback stops\n\nset_endevent() -\\> None\n\nset_endevent(type) -\\> None\n\nThis causes pygame to signal (by means of the event queue) when the music is done playing. The argument determines the type of event that will be queued.\n\nThe event will be queued every time the music finishes, not just the first time. To stop the event from being queued, call this method with no argument.\n\npygame.mixer.music.get_endevent()  \nget the event a channel sends when playback stops\n\nget_endevent() -\\> type\n\nReturns the event type to be sent every time the music finishes playback. If there is no endevent the function returns `pygame.NOEVENT`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/music.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/music.html](https://www.pygame.org/docs/ref/music.html)"
- name: module-mouse
  id: ref/mouse
  summary: The mouse functions can be used to get the current state of the mouse device
  description: "pygame.mouse  \npygame module to work with the mouse\n\nThe mouse functions can be used to get the current state of the mouse device. These functions can also alter the system cursor for the mouse.\n\nWhen the display mode is set, the event queue will start receiving mouse events. The mouse buttons generate `pygame.MOUSEBUTTONDOWN` and `pygame.MOUSEBUTTONUP` events when they are pressed and released. These events contain a button attribute representing which button was pressed. The mouse wheel will generate `pygame.MOUSEBUTTONDOWN` and `pygame.MOUSEBUTTONUP` events when rolled. The button will be set to 4 when the wheel is rolled up, and to button 5 when the wheel is rolled down. Whenever the mouse is moved it generates a `pygame.MOUSEMOTION` event. The mouse movement is broken into small and accurate motion events. As the mouse is moving many motion events will be placed on the queue. Mouse motion events that are not properly cleaned from the event queue are the primary reason the event queue fills up.\n\nIf the mouse cursor is hidden, and input is grabbed to the current display the mouse will enter a virtual input mode, where the relative movements of the mouse will never be stopped by the borders of the screen. See the functions `pygame.mouse.set_visible()` and `pygame.event.set_grab()` to get this configured.\n\n**Mouse Wheel Behavior in pygame 2**\n\nThere is proper functionality for mouse wheel behaviour with pygame 2 supporting `pygame.MOUSEWHEEL` events. The new events support horizontal and vertical scroll movements, with signed integer values representing the amount scrolled (`x` and `y`), as well as `flipped` direction (the set positive and negative values for each axis is flipped). Read more about SDL2 input-related changes here [https://wiki.libsdl.org/MigrationGuide#input](https://wiki.libsdl.org/MigrationGuide#input)\n\nIn pygame 2, the mouse wheel functionality can be used by listening for the `pygame.MOUSEWHEEL` type of an event (Bear in mind they still emit `pygame.MOUSEBUTTONDOWN` events like in pygame 1.x, as well). When this event is triggered, a developer can access the appropriate `Event` object with `pygame.event.get()`. The object can be used to access data about the mouse scroll, such as `which` (it will tell you what exact mouse device trigger the event).\n\nCode example of mouse scroll (tested on 2.0.0.dev7)\n\n    # Taken from husano896's PR thread (slightly modified)\n    import pygame\n    from pygame.locals import *\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    clock = pygame.time.Clock()\n\n    def main():\n       while True:\n          for event in pygame.event.get():\n                if event.type == QUIT:\n                   pygame.quit()\n                   return\n                elif event.type == MOUSEWHEEL:\n                   print(event)\n                   print(event.x, event.y)\n                   print(event.flipped)\n                   print(event.which)\n                   # can access properties with\n                   # proper notation(ex: event.y)\n          clock.tick(60)\n\n    # Execute game:\n    main()\n\npygame.mouse.get_pressed()  \nget the state of the mouse buttons\n\nget_pressed(num_buttons=3) -\\> (button1, button2, button3)\n\nget_pressed(num_buttons=5) -\\> (button1, button2, button3, button4, button5)\n\nReturns a sequence of booleans representing the state of all the mouse buttons. A true value means the mouse is currently being pressed at the time of the call.\n\nNote, to get all of the mouse events it is better to use either `pygame.event.wait()` or `pygame.event.get()` and check all of those events to see if they are `MOUSEBUTTONDOWN`, `MOUSEBUTTONUP`, or `MOUSEMOTION`.\n\nNote, that on `X11` some X servers use middle button emulation. When you click both buttons `1` and `3` at the same time a `2` button event can be emitted.\n\nNote, remember to call `pygame.event.get()` before this function. Otherwise it will not work as expected.\n\nTo support five button mice, an optional parameter `num_buttons` has been added in pygame 2. When this is set to `5`, `button4` and `button5` are added to the returned tuple. Only `3` and `5` are valid values for this parameter.\n\nChanged in pygame 2.0.0: `num_buttons` argument added\n\npygame.mouse.get_pos()  \nget the mouse cursor position\n\nget_pos() -\\> (x, y)\n\nReturns the `x` and `y` position of the mouse cursor. The position is relative to the top-left corner of the display. The cursor position can be located outside of the display window, but is always constrained to the screen.\n\npygame.mouse.get_rel()  \nget the amount of mouse movement\n\nget_rel() -\\> (x, y)\n\nReturns the amount of movement in `x` and `y` since the previous call to this function. The relative movement of the mouse cursor is constrained to the edges of the screen, but see the virtual input mouse mode for a way around this. Virtual input mode is described at the top of the page.\n\npygame.mouse.set_pos()  \nset the mouse cursor position\n\nset_pos(\\[x, y\\]) -\\> None\n\nSet the current mouse position to arguments given. If the mouse cursor is visible it will jump to the new coordinates. Moving the mouse will generate a new `pygame.MOUSEMOTION` event.\n\npygame.mouse.set_visible()  \nhide or show the mouse cursor\n\nset_visible(bool) -\\> bool\n\nIf the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor.\n\npygame.mouse.get_visible()  \nget the current visibility state of the mouse cursor\n\nget_visible() -\\> bool\n\nGet the current visibility state of the mouse cursor. `True` if the mouse is visible, `False` otherwise.\n\nNew in pygame 2.0.0.\n\npygame.mouse.get_focused()  \ncheck if the display is receiving mouse input\n\nget_focused() -\\> bool\n\nReturns true when pygame is receiving mouse input events (or, in windowing terminology, is \"active\" or has the \"focus\").\n\nThis method is most useful when working in a window. By contrast, in full-screen mode, this method always returns true.\n\nNote: under `MS` Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. `pygame.mouse.get_focused()` indicates whether the pygame window receives mouse events.\n\npygame.mouse.set_cursor()  \nset the mouse cursor to a new cursor\n\nset_cursor(pygame.cursors.Cursor) -\\> None\n\nset_cursor(size, hotspot, xormasks, andmasks) -\\> None\n\nset_cursor(hotspot, surface) -\\> None\n\nset_cursor(constant) -\\> None\n\nSet the mouse cursor to something new. This function accepts either an explicit `Cursor` object or arguments to create a `Cursor` object.\n\nSee [`pygame.cursors.Cursor`](cursors#pygame.cursors.Cursor) for help creating cursors and for examples.\n\nChanged in pygame 2.0.1.\n\npygame.mouse.get_cursor()  \nget the current mouse cursor\n\nget_cursor() -\\> pygame.cursors.Cursor\n\nGet the information about the mouse system cursor. The return value contains the same data as the arguments passed into [`pygame.mouse.set_cursor()`](#pygame.mouse.set_cursor).\n\nNote\n\nCode that unpacked a get_cursor() call into `size,`` ``hotspot,`` ``xormasks,`` ``andmasks` will still work, assuming the call returns an old school type cursor.\n\nChanged in pygame 2.0.1.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mouse.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mouse.html](https://www.pygame.org/docs/ref/mouse.html)"
- name: module-pixelcopy
  id: ref/pixelcopy
  summary: The pygame.pixelcopy module contains functions for copying between surfaces and objects exporting an array structure interface
  description: "pygame.pixelcopy  \npygame module for general pixel array copying\n\nThe `pygame.pixelcopy` module contains functions for copying between surfaces and objects exporting an array structure interface. It is a backend for [`pygame.surfarray`](surfarray#module-pygame.surfarray), adding NumPy support. But pixelcopy is more general, and intended for direct use.\n\nThe array struct interface exposes an array's data in a standard way. It was introduced in NumPy. In Python 2.7 and above it is replaced by the new buffer protocol, though the buffer protocol is still a work in progress. The array struct interface, on the other hand, is stable and works with earlier Python versions. So for now the array struct interface is the predominate way pygame handles array introspection.\n\nFor 2d arrays of integer pixel values, the values are mapped to the pixel format of the related surface. To get the actual color of a pixel value use [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb). 2d arrays can only be used directly between surfaces having the same pixel layout.\n\nNew in pygame 1.9.2.\n\npygame.pixelcopy.surface_to_array()  \ncopy surface pixels to an array object\n\nsurface_to_array(array, surface, kind='P', opaque=255, clear=0) -\\> None\n\nThe surface_to_array function copies pixels from a Surface object to a 2D or 3D array. Depending on argument `kind` and the target array dimension, a copy may be raw pixel value, RGB, a color component slice, or colorkey alpha transparency value. Recognized `kind` values are the single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is equivalent to 'P'. The first two dimensions of the target must be the surface size (w, h).\n\nThe default 'P' kind code does a direct raw integer pixel (mapped) value copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having shape (w, h, 3). For an 8 bit colormap surface this means the table index is copied to a 2D array, not the table value itself. A 2D array's item size must be at least as large as the surface's pixel byte size. The item size of a 3D array must be at least one byte.\n\nFor the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with [`Surface.set_colorkey()`](surface#pygame.Surface.set_colorkey \"pygame.Surface.set_colorkey\")), or has a blanket alpha (set with [`Surface.set_alpha()`](surface#pygame.Surface.set_alpha \"pygame.Surface.set_alpha\")) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional `opaque` surface_to_array argument (default 255: not transparent).\n\nCopy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the `clear` argument value is used for colorkey matches, `opaque` otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of [`pygame.surfarray.array_colorkey()`](surfarray#pygame.surfarray.array_colorkey).\n\nSpecific to surface_to_array, a ValueError is raised for target arrays with incorrect shape or item size. A TypeError is raised for an incorrect kind code. Surface specific problems, such as locking, raise a pygame.error.\n\npygame.pixelcopy.array_to_surface()  \ncopy an array object to a surface\n\narray_to_surface(\\<surface\\>, \\<array\\>) -\\> None\n\nSee [`pygame.surfarray.blit_array()`](surfarray#pygame.surfarray.blit_array).\n\npygame.pixelcopy.map_array()  \ncopy an array to another array, using surface format\n\nmap_array(\\<array\\>, \\<array\\>, \\<surface\\>) -\\> None\n\nMap an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of \\<surface\\>.\n\npygame.pixelcopy.make_surface()  \nCopy an array to a new surface\n\npygame.pixelcopy.make_surface(array) -\\> Surface\n\nCreate a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pixelcopy.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pixelcopy.html](https://www.pygame.org/docs/ref/pixelcopy.html)"
- name: module-pygame
  id: ref/pygame
  summary: The pygame package represents the top-level package for others to use
  description: "pygame  \nthe top level pygame package\n\nThe pygame package represents the top-level package for others to use. Pygame itself is broken into many submodules, but this does not affect programs that use pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed inside a module named [`pygame.locals`](locals#module-pygame.locals). This is meant to be used with `from`` ``pygame.locals`` ``import`` ``*`, in addition to `import`` ``pygame`.\n\nWhen you `import`` ``pygame` all available pygame submodules are automatically imported. Be aware that some of the pygame modules are considered *optional*, and may not be available. In that case, pygame will provide a placeholder object instead of the module, which can be used to test for availability.\n\npygame.init()  \ninitialize all imported pygame modules\n\ninit() -\\> (numpass, numfail)\n\nInitialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but [`pygame.init()`](#pygame.init) is a convenient way to get everything started. The `init()` functions for individual modules will raise exceptions when they fail.\n\nYou may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no effect. This is true even if you have `pygame.quit()` all the modules.\n\npygame.quit()  \nuninitialize all pygame modules\n\nquit() -\\> None\n\nUninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.\n\nNote\n\nCalling [`pygame.quit()`](#pygame.quit) will not exit your program. Consider letting your program end in the same way a normal Python program will end.\n\npygame.get_init()  \nreturns True if pygame is currently initialized\n\nget_init() -\\> bool\n\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\nexception pygame.error  \nstandard pygame exception\n\nraise pygame.error(message)\n\nThis exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch these raised errors.\n\npygame.get_error()  \nget the current error message\n\nget_error() -\\> errorstr\n\nSDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.\n\npygame.set_error()  \nset the current error message\n\nset_error(error_msg) -\\> None\n\nSDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.\n\npygame.get_sdl_version()  \nget the version number of SDL\n\nget_sdl_version(linked=True) -\\> major, minor, patch\n\nReturns the three version numbers of the SDL library. `linked=True` will cause the function to return the version of the library that pygame is linked against while `linked=False` will cause the function to return the version of the library that pygame is compiled against. It can be used to detect which features may or may not be available through pygame.\n\nNew in pygame 1.7.0.\n\nChanged in pygame 2.2.0: `linked` keyword argument added\n\npygame.get_sdl_byteorder()  \nget the byte order of SDL\n\nget_sdl_byteorder() -\\> int\n\nReturns the byte order of the SDL library. It returns `1234` for little endian byte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\npygame.register_quit()  \nregister a function to be called when pygame quits\n\nregister_quit(callable) -\\> None\n\nWhen [`pygame.quit()`](#pygame.quit) is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.\n\npygame.encode_string()  \nEncode a Unicode or bytes object\n\nencode_string(\\[obj \\[, encoding \\[, errors \\[, etype\\]\\]\\]\\]) -\\> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is `'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default is `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`. For the default encoding and errors values there should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\npygame.encode_file_path()  \nEncode a Unicode or bytes object as a file system path\n\nencode_file_path(\\[obj \\[, etype\\]\\]) -\\> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec as returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\npygame.version  \nsmall module containing version information\n\nThis module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.\n\npygame.version.ver  \nversion number as a string\n\nver = '1.2'\n\nThis is the version represented as a string. It can contain a micro release number as well, e.g. `'1.5.2'`\n\npygame.version.vernum  \ntupled integers of the version\n\nvernum = (1, 5, 3)\n\nThis version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:\n\n``` python\nif pygame.version.vernum < (1, 5):\n    print('Warning, older version of pygame (%s)' %  pygame.version.ver)\n    disable_advanced_features = True\n```\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\n``` python\nvernum.major == vernum[0]\nvernum.minor == vernum[1]\nvernum.patch == vernum[2]\n```\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like `\"2.0.0\"` instead of `\"(2,`` ``0,`` ``0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like `\"PygameVersion(major=2,`` ``minor=0,`` ``patch=0)\"` instead of `\"(2,`` ``0,`` ``0)\"`.\n\npygame.version.rev  \nrepository revision of the build\n\nrev = 'a6f89747b551+'\n\nThe Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string `\"\"`. It has always been returning an empty string since `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\npygame.version.SDL  \ntupled integers of the SDL library version\n\nSDL = '(2, 0, 12)'\n\nThis is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:\n\n``` python\n>>> pygame.version.SDL.major\n2\n```\n\nprinting the whole thing returns a string like this:\n\n``` python\n>>> pygame.version.SDL\nSDLVersion(major=2, minor=0, patch=12)\n```\n\nNew in pygame 2.0.0.\n\n**Setting Environment Variables**\n\nSome aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\n``` python\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n```\n\nOr to preserve users ability to override the variable:\n\n``` python\nimport os\nos.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')\n```\n\nIf the variable is more useful for users of an app to set than the developer then they can set it like this:\n\n**Windows**:\n\n``` python\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\npython my_application.py\n```\n\n**Linux/Mac**:\n\n``` python\nENV_VAR=value python my_application.py\n```\n\nFor some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief description of what they do.\n\n  \n\n**Pygame Environment Variables**\n\nThese variables are defined by pygame itself.\n\n  \n\n``` python\nPYGAME_DISPLAY - Experimental (subject to change)\nSet index of the display to use, \"0\" is the default.\n```\n\nThis sets the display where pygame will open its window or screen. The value set here will be used if set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode), and as long as no 'display' parameter is passed into [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_FORCE_SCALE -\nSet to \"photo\" or \"default\".\n```\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0\nSet to \"1\" to enable the SDL2 blitter.\n```\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before [`pygame.init()`](#pygame.init) is called.\n\n  \n\n``` python\nPYGAME_HIDE_SUPPORT_PROMPT -\nSet to \"1\" to hide the prompt.\n```\n\nThis stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_FREETYPE -\nSet to \"1\" to enable.\n```\n\nThis switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_CAMERA -\nSet to \"opencv\" or \"vidcapture\"\n```\n\nForces the library backend used in the camera module, overriding the platform defaults. Must be set before calling [`pygame.camera.init()`](camera#pygame.camera.init).\n\nIn pygame 2.0.3, backends can be set programmatically instead, and the old OpenCV backend has been replaced with one on top of \"opencv-python,\" rather than the old \"highgui\" OpenCV port. Also, there is a new native Windows backend available.\n\n  \n\n  \n\n**SDL Environment Variables**\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try [here](https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html). For Pygame 2, some selected environment variables are listed below.\n\n  \n\n``` python\nSDL_VIDEO_CENTERED -\nSet to \"1\" to enable centering the window.\n```\n\nThis will make the pygame window open in the centre of the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEO_WINDOW_POS -\nSet to \"x,y\" to position the top left corner of the window.\n```\n\nThis allows control over the placement of the pygame window within the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEODRIVER -\nSet to \"drivername\" to change the video driver used.\n```\n\nOn some platforms there are multiple video drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.display.init()`](display#pygame.display.init).\n\n  \n\n``` python\nSDL_AUDIODRIVER -\nSet to \"drivername\" to change the audio driver used.\n```\n\nOn some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.mixer.init()`](mixer#pygame.mixer.init).\n\n  \n\n``` python\nSDL_VIDEO_ALLOW_SCREENSAVER\nSet to \"1\" to allow screensavers while pygame apps are running.\n```\n\nBy default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.\n\n  \n\n``` python\nSDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\nSet to \"0\" to re-enable the compositor.\n```\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which *doesn't* update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms.\n\n  \n\n``` python\nSDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\nSet to \"1\" to allow joysticks to be updated even when the window is out of focus\n```\n\nBy default, when the window is not in focus, input devices do not get updated. However, using this environment variable it is possible to get joystick updates even when the window is in the background. Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.joystick.init()`](joystick#pygame.joystick.init).\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pygame.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pygame.html](https://www.pygame.org/docs/ref/pygame.html)"
- name: module-scrap
  id: ref/scrap
  summary: pygame.scrap pygame module for clipboard support
  description: "pygame.scrap  \npygame module for clipboard support.\n\n**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.\n\nThe scrap module is for transferring data to/from the clipboard. This allows for cutting and pasting data between pygame and other applications. Some basic data (MIME) types are defined and registered:\n\n``` python\npygame         string\nconstant        value        description\n--------------------------------------------------\nSCRAP_TEXT   \"text/plain\"    plain text\nSCRAP_BMP    \"image/bmp\"     BMP encoded image data\nSCRAP_PBM    \"image/pbm\"     PBM encoded image data\nSCRAP_PPM    \"image/ppm\"     PPM encoded image data\n```\n\n`pygame.SCRAP_PPM`, `pygame.SCRAP_PBM` and `pygame.SCRAP_BMP` are suitable for surface buffers to be shared with other applications. `pygame.SCRAP_TEXT` is an alias for the plain text clipboard type.\n\nDepending on the platform, additional types are automatically registered when data is placed into the clipboard to guarantee a consistent sharing behaviour with other applications. The following listed types can be used as strings to be passed to the respective [`pygame.scrap`](#module-pygame.scrap) module functions.\n\nFor **Windows** platforms, these additional types are supported automatically and resolve to their internal definitions:\n\n``` python\n\"text/plain;charset=utf-8\"   UTF-8 encoded text\n\"audio/wav\"                  WAV encoded audio\n\"image/tiff\"                 TIFF encoded image data\n```\n\nFor **X11** platforms, these additional types are supported automatically and resolve to their internal definitions:\n\n``` python\n\"text/plain;charset=utf-8\"   UTF-8 encoded text\n\"UTF8_STRING\"                UTF-8 encoded text\n\"COMPOUND_TEXT\"              COMPOUND text\n```\n\nUser defined types can be used, but the data might not be accessible by other applications unless they know what data type to look for. Example: Data placed into the clipboard by `pygame.scrap.put(\"my_data_type\",`` ``byte_data)` can only be accessed by applications which query the clipboard for the `\"my_data_type\"` data type.\n\nFor an example of how the scrap module works refer to the examples page ([`pygame.examples.scrap_clipboard.main()`](examples#pygame.examples.scrap_clipboard.main)) or the code directly in GitHub ([pygame/examples/scrap_clipboard.py](https://github.com/pygame/pygame/blob/main/examples/scrap_clipboard.py)).\n\nNew in pygame 1.8.\n\nNote\n\nThe scrap module is currently only supported for Windows, X11 and Mac OS X. On Mac OS X only text works at the moment - other types may be supported in future releases.\n\npygame.scrap.init()  \nInitializes the scrap module.\n\ninit() -\\> None\n\nInitialize the scrap module.\n\nRaises  \n[**pygame.error**](pygame#pygame.error) -- if unable to initialize scrap module\n\nNote\n\nThe scrap module requires [`pygame.display.set_mode()`](display#pygame.display.set_mode) be called before being initialized.\n\npygame.scrap.get_init()  \nReturns True if the scrap module is currently initialized.\n\nget_init() -\\> bool\n\nGets the scrap module's initialization state.\n\nReturns  \n`True` if the [`pygame.scrap`](#module-pygame.scrap) module is currently initialized, `False` otherwise\n\nReturn type  \nbool\n\nNew in pygame 1.9.5.\n\npygame.scrap.get()  \nGets the data for the specified type from the clipboard.\n\nget(type) -\\> bytes \\| None\n\nRetrieves the data for the specified type from the clipboard. The data is returned as a byte string and might need further processing (such as decoding to Unicode).\n\nParameters  \n**type** (*string*) -- data type to retrieve from the clipboard\n\nReturns  \ndata (bytes object) for the given type identifier or `None` if no data for the given type is available\n\nReturn type  \nbytes \\| None\n\n``` python\ntext = pygame.scrap.get(pygame.SCRAP_TEXT)\nif text:\n    print(\"There is text in the clipboard.\")\nelse:\n    print(\"There does not seem to be text in the clipboard.\")\n```\n\npygame.scrap.get_types()  \nGets a list of the available clipboard types.\n\nget_types() -\\> list\n\nGets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the [`pygame.scrap.get()`](#pygame.scrap.get) method to get the clipboard content of the specific type.\n\nReturns  \nlist of strings of the available clipboard data types, if there is no data in the clipboard an empty list is returned\n\nReturn type  \nlist\n\n``` python\nfor t in pygame.scrap.get_types():\n    if \"text\" in t:\n        # There is some content with the word \"text\" in its type string.\n        print(pygame.scrap.get(t))\n```\n\npygame.scrap.put()  \nPlaces data into the clipboard.\n\nput(type, data) -\\> None\n\nPlaces data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`, `pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user defined string identifier.\n\nParameters  \n- **type** (*string*) -- type identifier of the data to be placed into the clipboard\n\n- **data** (*bytes*) -- data to be place into the clipboard, a bytes object\n\nRaises  \n[**pygame.error**](pygame#pygame.error) -- if unable to put the data into the clipboard\n\n``` python\nwith open(\"example.bmp\", \"rb\") as fp:\n    pygame.scrap.put(pygame.SCRAP_BMP, fp.read())\n# The image data is now on the clipboard for other applications to access\n# it.\npygame.scrap.put(pygame.SCRAP_TEXT, b\"A text to copy\")\npygame.scrap.put(\"Plain text\", b\"Data for user defined type 'Plain text'\")\n```\n\npygame.scrap.contains()  \nChecks whether data for a given type is available in the clipboard.\n\ncontains(type) -\\> bool\n\nChecks whether data for the given type is currently available in the clipboard.\n\nParameters  \n**type** (*string*) -- data type to check availability of\n\nReturns  \n`True` if data for the passed type is available in the clipboard, `False` otherwise\n\nReturn type  \nbool\n\n``` python\nif pygame.scrap.contains(pygame.SCRAP_TEXT):\n    print(\"There is text in the clipboard.\")\nif pygame.scrap.contains(\"own_data_type\"):\n    print(\"There is stuff in the clipboard.\")\n```\n\npygame.scrap.lost()  \nIndicates if the clipboard ownership has been lost by the pygame application.\n\nlost() -\\> bool\n\nIndicates if the clipboard ownership has been lost by the pygame application.\n\nReturns  \n`True`, if the clipboard ownership has been lost by the pygame application, `False` if the pygame application still owns the clipboard\n\nReturn type  \nbool\n\n``` python\nif pygame.scrap.lost():\n    print(\"The clipboard is in use by another application.\")\n```\n\npygame.scrap.set_mode()  \nSets the clipboard access mode.\n\nset_mode(mode) -\\> None\n\nSets the access mode for the clipboard. This is only of interest for X11 environments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse selections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available. Setting the mode to `pygame.SCRAP_SELECTION` in other environments will not change the mode from `pygame.SCRAP_CLIPBOARD`.\n\nParameters  \n**mode** -- access mode, supported values are `pygame.SCRAP_CLIPBOARD` and `pygame.SCRAP_SELECTION` (`pygame.SCRAP_SELECTION` only has an effect when used on X11 platforms)\n\nRaises  \n**ValueError** -- if the `mode` parameter is not `pygame.SCRAP_CLIPBOARD` or `pygame.SCRAP_SELECTION`\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/scrap.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/scrap.html](https://www.pygame.org/docs/ref/scrap.html)"
- name: module-sndarray
  id: ref/sndarray
  summary: Functions to convert between NumPy arrays and Sound objects
  description: "pygame.sndarray  \npygame module for accessing sound sample data\n\nFunctions to convert between NumPy arrays and Sound objects. This module will only be functional when pygame can use the external NumPy package. If NumPy can't be imported, `surfarray` becomes a `MissingModule` object.\n\nSound data is made of thousands of samples per second, and each sample is the amplitude of the wave at a particular moment in time. For example, in 22-kHz format, element number 5 of the array is the amplitude of the wave after 5/22000 seconds.\n\nThe arrays are indexed by the `X` axis first, followed by the `Y` axis. Each sample is an 8-bit or 16-bit integer, depending on the data format. A stereo sound file has two values per sample, while a mono sound file only has one.\n\npygame.sndarray.array()  \ncopy Sound samples into an array\n\narray(Sound) -\\> array\n\nCreates a new array for the sound data and copies the samples. The array will always be in the format returned from `pygame.mixer.get_init()`.\n\npygame.sndarray.samples()  \nreference Sound samples into an array\n\nsamples(Sound) -\\> array\n\nCreates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from `pygame.mixer.get_init()`.\n\npygame.sndarray.make_sound()  \nconvert an array into a Sound object\n\nmake_sound(array) -\\> Sound\n\nCreate a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format.\n\npygame.sndarray.use_arraytype()  \nSets the array system to be used for sound arrays\n\nuse_arraytype (arraytype) -\\> None\n\nDEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is `'numpy'`. Other values will raise ValueError. Using this function will raise a `DeprecationWarning`. .. \\## pygame.sndarray.use_arraytype \\##\n\npygame.sndarray.get_arraytype()  \nGets the currently active array type.\n\nget_arraytype () -\\> str\n\nDEPRECATED: Returns the currently active array type. This will be a value of the `get_arraytypes()` tuple and indicates which type of array module is used for the array creation. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\npygame.sndarray.get_arraytypes()  \nGets the array system types currently supported.\n\nget_arraytypes () -\\> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the [`pygame.sndarray.use_arraytype()`](#pygame.sndarray.use_arraytype) () method. If no supported array system could be found, None will be returned. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sndarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sndarray.html](https://www.pygame.org/docs/ref/sndarray.html)"
- name: module-sprite
  id: ref/sprite
  summary: This module contains several simple classes to be used within games
  description: "pygame.sprite  \npygame module with basic game object classes\n\nThis module contains several simple classes to be used within games. There is the main Sprite class and several Group classes that contain Sprites. The use of these classes is entirely optional when using pygame. The classes are fairly lightweight and only provide a starting place for the code that is common to most games.\n\nThe Sprite class is intended to be used as a base class for the different types of objects in the game. There is also a base Group class that simply stores sprites. A game could create new types of Group classes that operate on specially customized Sprite instances they contain.\n\nThe basic Group class can draw the Sprites it contains to a Surface. The `Group.draw()` method requires that each Sprite have a `Surface.image` attribute and a `Surface.rect`. The `Group.clear()` method requires these same attributes, and can be used to erase all the Sprites with background. There are also more advanced Groups: `pygame.sprite.RenderUpdates()` and `pygame.sprite.OrderedUpdates()`.\n\nLastly, this module contains several collision functions. These help find sprites inside multiple groups that have intersecting bounding rectangles. To find the collisions, the Sprites are required to have a `Surface.rect` attribute assigned.\n\nThe groups are designed for high efficiency in removing and adding Sprites to them. They also allow cheap testing to see if a Sprite already exists in a Group. A given Sprite can exist in any number of groups. A game could use some groups to control object rendering, and a completely separate set of groups to control interaction or player movement. Instead of adding type attributes or bools to a derived Sprite class, consider keeping the Sprites inside organized Groups. This will allow for easier lookup later in the game.\n\nSprites and Groups manage their relationships with the `add()` and `remove()` methods. These methods can accept a single or multiple targets for membership. The default initializers for these classes also takes a single or list of targets for initial membership. It is safe to repeatedly add and remove the same Sprite from a Group.\n\nWhile it is possible to design sprite and group classes that don't derive from the Sprite and AbstractGroup classes below, it is strongly recommended that you extend those when you add a Sprite or Group class.\n\nSprites are not thread safe. So lock them yourself if using threads.\n\npygame.sprite.Sprite  \nSimple base class for visible game objects.\n\nSprite(\\*groups) -\\> Sprite\n\nThe base class for visible game objects. Derived classes will want to override the `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect` attributes. The initializer can accept any number of Group instances to be added to.\n\nWhen subclassing the Sprite, be sure to call the base initializer before adding the Sprite to Groups. For example:\n\n    class Block(pygame.sprite.Sprite):\n\n        # Constructor. Pass in the color of the block,\n        # and its x and y position\n        def __init__(self, color, width, height):\n           # Call the parent class (Sprite) constructor\n           pygame.sprite.Sprite.__init__(self)\n\n           # Create an image of the block, and fill it with a color.\n           # This could also be an image loaded from the disk.\n           self.image = pygame.Surface([width, height])\n           self.image.fill(color)\n\n           # Fetch the rectangle object that has the dimensions of the image\n           # Update the position of this object by setting the values of rect.x and rect.y\n           self.rect = self.image.get_rect()\n\nupdate()  \nmethod to control sprite behavior\n\nupdate(\\*args, \\*\\*kwargs) -\\> None\n\nThe default implementation of this method does nothing; it's just a convenient \"hook\" that you can override. This method is called by `Group.update()` with whatever arguments you give it.\n\nThere is no need to use this method if not using the convenience method by the same name in the Group class.\n\nadd()  \nadd the sprite to groups\n\nadd(\\*groups) -\\> None\n\nAny number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.\n\nremove()  \nremove the sprite from groups\n\nremove(\\*groups) -\\> None\n\nAny number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.\n\nkill()  \nremove the Sprite from all Groups\n\nkill() -\\> None\n\nThe Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups.\n\nalive()  \ndoes the sprite belong to any groups\n\nalive() -\\> bool\n\nReturns True when the Sprite belongs to one or more Groups.\n\ngroups()  \nlist of Groups that contain this Sprite\n\ngroups() -\\> group_list\n\nReturn a list of all the Groups that contain this Sprite.\n\npygame.sprite.DirtySprite  \nA subclass of Sprite with more attributes and features.\n\nDirtySprite(\\*groups) -\\> DirtySprite\n\nExtra DirtySprite attributes with their default values:\n\ndirty = 1\n\n``` python\nif set to 1, it is repainted and then set to 0 again\nif set to 2 then it is always dirty ( repainted each frame,\nflag is not reset)\n0 means that it is not dirty and therefore not repainted again\n```\n\nblendmode = 0\n\n``` python\nits the special_flags argument of blit, blendmodes\n```\n\nsource_rect = None\n\n``` python\nsource rect to use, remember that it is relative to\ntopleft (0,0) of self.image\n```\n\nvisible = 1\n\n``` python\nnormally 1, if set to 0 it will not be repainted\n(you must set it dirty too to be erased from screen)\n```\n\nlayer = 0\n\n``` python\n(READONLY value, it is read when adding it to the\nLayeredDirty, for details see doc of LayeredDirty)\n```\n\npygame.sprite.Group  \nA container class to hold and manage multiple Sprite objects.\n\nGroup(\\*sprites) -\\> Group\n\nA simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:\n\n``` python\nin      test if a Sprite is contained\nlen     the number of Sprites contained\nbool    test if any Sprites are contained\niter    iterate through all the Sprites\n```\n\nThe Sprites in the Group are ordered only on python 3.6 and higher. Below python 3.6 drawing and iterating over the Sprites is in no particular order.\n\nsprites()  \nlist of the Sprites this Group contains\n\nsprites() -\\> sprite_list\n\nReturn a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it.\n\ncopy()  \nduplicate the Group\n\ncopy() -\\> Group\n\nCreates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.\n\nadd()  \nadd Sprites to this Group\n\nadd(\\*sprites) -\\> None\n\nAdd any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nremove()  \nremove Sprites from the Group\n\nremove(\\*sprites) -\\> None\n\nRemove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nhas()  \ntest if a Group contains Sprites\n\nhas(\\*sprites) -\\> bool\n\nReturn True if the Group contains all of the given sprites. This is similar to using the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests if a single Sprite belongs to a Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nupdate()  \ncall the update method on contained Sprites\n\nupdate(\\*args, \\*\\*kwargs) -\\> None\n\nCalls the `update()` method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to `Group.update()` will be passed to each Sprite.\n\nThere is no way to get the return value from the `Sprite.update()` methods.\n\ndraw()  \nblit the Sprite images\n\ndraw(Surface, bgsurf=None, special_flags=0) -\\> List\\[Rect\\]\n\nDraws the contained Sprites to the Surface argument. This uses the `Sprite.image` attribute for the source surface, and `Sprite.rect` for the position. `special_flags` is passed to `Surface.blit()`. `bgsurf` is unused in this method but `LayeredDirty.draw()` uses it.\n\nThe Group does not keep sprites in any order, so the draw order is arbitrary.\n\nclear()  \ndraw a background over the Sprites\n\nclear(Surface_dest, background) -\\> None\n\nErases the Sprites used in the last `Group.draw()` call. The destination Surface is cleared by filling the drawn Sprite positions with the background.\n\nThe background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.\n\nHere is an example callback that will clear the Sprites with solid red:\n\n``` python\ndef clear_callback(surf, rect):\n    color = 255, 0, 0\n    surf.fill(color, rect)\n```\n\nempty()  \nremove all Sprites\n\nempty() -\\> None\n\nRemoves all Sprites from this Group.\n\npygame.sprite.RenderPlain  \nSame as pygame.sprite.Group\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional functionality.\n\npygame.sprite.RenderClear  \nSame as pygame.sprite.Group\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional functionality.\n\npygame.sprite.RenderUpdates  \nGroup sub-class that tracks dirty updates.\n\nRenderUpdates(\\*sprites) -\\> RenderUpdates\n\nThis class is derived from `pygame.sprite.Group()`. It has an extended `draw()` method that tracks the changed areas of the screen.\n\ndraw()  \nblit the Sprite images and track changed areas\n\ndraw(surface, bgsurf=None, special_flags=0) -\\> Rect_list\n\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous `Group.clear()` calls. `special_flags` is passed to `Surface.blit()`.\n\nThe returned Rect list should be passed to `pygame.display.update()`. This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds.\n\npygame.sprite.OrderedUpdates()  \nRenderUpdates sub-class that draws Sprites in order of addition.\n\nOrderedUpdates(\\*sprites) -\\> OrderedUpdates\n\nThis class derives from `pygame.sprite.RenderUpdates()`. It maintains the order in which the Sprites were added to the Group for rendering. This makes adding and removing Sprites from the Group a little slower than regular Groups.\n\npygame.sprite.LayeredUpdates  \nLayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.\n\nLayeredUpdates(\\*sprites, \\*\\*kwargs) -\\> LayeredUpdates\n\nThis group is fully compatible with [`pygame.sprite.Sprite`](#pygame.sprite.Sprite).\n\nYou can set the default layer through kwargs using 'default_layer' and an integer for the layer. The default layer is 0.\n\nIf the sprite you add has an attribute \\_layer then that layer will be used. If the \\*\\*kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the `sprite.layer` attribute). If neither sprite has attribute layer nor \\*\\*kwarg then the default layer is used to add the sprites.\n\nNew in pygame 1.8.\n\nadd()  \nadd a sprite or sequence of sprites to a group\n\nadd(\\*sprites, \\*\\*kwargs) -\\> None\n\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If \\*\\*kwargs contains 'layer' then the `sprite(s)` will be added to that argument (overriding the sprite layer attribute). If neither is passed then the `sprite(s)` will be added to the default layer.\n\nsprites()  \nreturns a ordered list of sprites (first back, last top).\n\nsprites() -\\> sprites\n\ndraw()  \ndraw all sprites in the right order onto the passed surface.\n\ndraw(surface, bgsurf=None, special_flags=0) -\\> Rect_list\n\nget_sprites_at()  \nreturns a list with all sprites at that position.\n\nget_sprites_at(pos) -\\> colliding_sprites\n\nBottom sprites first, top last.\n\nget_sprite()  \nreturns the sprite at the index idx from the groups sprites\n\nget_sprite(idx) -\\> sprite\n\nRaises IndexOutOfBounds if the idx is not within range.\n\nremove_sprites_of_layer()  \nremoves all sprites from a layer and returns them as a list.\n\nremove_sprites_of_layer(layer_nr) -\\> sprites\n\nlayers()  \nreturns a list of layers defined (unique), sorted from bottom up.\n\nlayers() -\\> layers\n\nchange_layer()  \nchanges the layer of the sprite\n\nchange_layer(sprite, new_layer) -\\> None\n\nsprite must have been added to the renderer. It is not checked.\n\nget_layer_of_sprite()  \nreturns the layer that sprite is currently in.\n\nget_layer_of_sprite(sprite) -\\> layer\n\nIf the sprite is not found then it will return the default layer.\n\nget_top_layer()  \nreturns the top layer\n\nget_top_layer() -\\> layer\n\nget_bottom_layer()  \nreturns the bottom layer\n\nget_bottom_layer() -\\> layer\n\nmove_to_front()  \nbrings the sprite to front layer\n\nmove_to_front(sprite) -\\> None\n\nBrings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).\n\nmove_to_back()  \nmoves the sprite to the bottom layer\n\nmove_to_back(sprite) -\\> None\n\nMoves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.\n\nget_top_sprite()  \nreturns the topmost sprite\n\nget_top_sprite() -\\> Sprite\n\nget_sprites_from_layer()  \nreturns all sprites from a layer, ordered by how they where added\n\nget_sprites_from_layer(layer) -\\> sprites\n\nReturns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer.\n\nswitch_layer()  \nswitches the sprites from layer1 to layer2\n\nswitch_layer(layer1_nr, layer2_nr) -\\> None\n\nThe layers number must exist, it is not checked.\n\npygame.sprite.LayeredDirty  \nLayeredDirty group is for DirtySprite objects. Subclasses LayeredUpdates.\n\nLayeredDirty(\\*sprites, \\*\\*kwargs) -\\> LayeredDirty\n\nThis group requires [`pygame.sprite.DirtySprite`](#pygame.sprite.DirtySprite) or any sprite that has the following attributes:\n\n``` python\nimage, rect, dirty, visible, blendmode (see doc of DirtySprite).\n```\n\nIt uses the dirty flag technique and is therefore faster than the [`pygame.sprite.RenderUpdates`](#pygame.sprite.RenderUpdates) if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do not have to worry what would be faster.\n\nSame as for the [`pygame.sprite.Group`](#pygame.sprite.Group). You can specify some additional attributes through kwargs:\n\n``` python\n_use_update: True/False   default is False\n_default_layer: default layer where sprites without a layer are added.\n_time_threshold: threshold time for switching between dirty rect mode\n    and fullscreen mode, defaults to 1000./80  == 1000./fps\n```\n\nNew in pygame 1.8.\n\ndraw()  \ndraw all sprites in the right order onto the passed surface.\n\ndraw(surface, bgsurf=None, special_flags=None) -\\> Rect_list\n\nYou can pass the background too. If a background is already set, then the bgsurf argument has no effect. If present, the `special_flags` argument is always passed to `Surface.blit()`, overriding `DirtySprite.blendmode`. If `special_flags` is not present, `DirtySprite.blendmode` is passed to the `Surface.blit()` instead.\n\nclear()  \nused to set background\n\nclear(surface, bgd) -\\> None\n\nrepaint_rect()  \nrepaints the given area\n\nrepaint_rect(screen_rect) -\\> None\n\nscreen_rect is in screen coordinates.\n\nset_clip()  \nclip the area where to draw. Just pass None (default) to reset the clip\n\nset_clip(screen_rect=None) -\\> None\n\nget_clip()  \nclip the area where to draw. Just pass None (default) to reset the clip\n\nget_clip() -\\> Rect\n\nchange_layer()  \nchanges the layer of the sprite\n\nchange_layer(sprite, new_layer) -\\> None\n\nsprite must have been added to the renderer. It is not checked.\n\nset_timing_treshold()  \nsets the threshold in milliseconds\n\nset_timing_treshold(time_ms) -\\> None\n\nDEPRECATED: Use set_timing_threshold() instead.\n\nDeprecated since pygame 2.1.1.\n\nset_timing_threshold()  \nsets the threshold in milliseconds\n\nset_timing_threshold(time_ms) -\\> None\n\nDefaults to 1000.0 / 80.0. This means that the screen will be painted using the flip method rather than the update method if the update method is taking so long to update the screen that the frame rate falls below 80 frames per second.\n\nNew in pygame 2.1.1.\n\nRaises  \n**TypeError** -- if `time_ms` is not int or float\n\npygame.sprite.GroupSingle()  \nGroup container that holds a single sprite.\n\nGroupSingle(sprite=None) -\\> GroupSingle\n\nThe GroupSingle container only holds a single Sprite. When a new Sprite is added, the old one is removed.\n\nThere is a special property, `GroupSingle.sprite`, that accesses the Sprite that this Group contains. It can be None when the Group is empty. The property can also be assigned to add a Sprite into the GroupSingle container.\n\npygame.sprite.spritecollide()  \nFind sprites in a group that intersect another sprite.\n\nspritecollide(sprite, group, dokill, collided = None) -\\> Sprite_list\n\nReturn a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the `Sprite.rect` attribute of each Sprite.\n\nThe dokill argument is a bool. If set to True, all Sprites that collide will be removed from the Group.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. it should take two sprites as values, and return a bool value indicating if they are colliding. If collided is not passed, all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\ncollided callables:\n\n``` python\ncollide_rect, collide_rect_ratio, collide_circle,\ncollide_circle_ratio, collide_mask\n```\n\nExample:\n\n    # See if the Sprite block has collided with anything in the Group block_list\n    # The True flag will remove the sprite in block_list\n    blocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)\n\n    # Check the list of colliding sprites, and add one to the score for each one\n    for block in blocks_hit_list:\n        score +=1\n\npygame.sprite.collide_rect()  \nCollision detection between two sprites, using rects.\n\ncollide_rect(left, right) -\\> bool\n\nTests for collision between two sprites. Uses the pygame rect colliderect function to calculate the collision. Intended to be passed as a collided callback function to the \\*collide functions. Sprites must have a \"rect\" attributes.\n\nNew in pygame 1.8.\n\npygame.sprite.collide_rect_ratio()  \nCollision detection between two sprites, using rects scaled to a ratio.\n\ncollide_rect_ratio(ratio) -\\> collided_callable\n\nA callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.\n\nIs created with a ratio, the instance is then intended to be passed as a collided callback function to the \\*collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.\n\nNew in pygame 1.8.1.\n\npygame.sprite.collide_circle()  \nCollision detection between two sprites, using circles.\n\ncollide_circle(left, right) -\\> bool\n\nTests for collision between two sprites, by testing to see if two circles centered on the sprites overlap. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the \\*collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\npygame.sprite.collide_circle_ratio()  \nCollision detection between two sprites, using circles scaled to a ratio.\n\ncollide_circle_ratio(ratio) -\\> collided_callable\n\nA callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.\n\nIs created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the \\*collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.\n\nThe created callable tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap, after scaling the circles radius by the stored ratio. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the \\*collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\npygame.sprite.collide_mask()  \nCollision detection between two sprites, using masks.\n\ncollide_mask(sprite1, sprite2) -\\> (int, int)\n\ncollide_mask(sprite1, sprite2) -\\> None\n\nTests for collision between two sprites, by testing if their bitmasks overlap (uses [`pygame.mask.Mask.overlap()`](mask#pygame.mask.Mask.overlap)). If the sprites have a `mask` attribute, it is used as the mask, otherwise a mask is created from the sprite's `image` (uses [`pygame.mask.from_surface()`](mask#pygame.mask.from_surface)). Sprites must have a `rect` attribute; the `mask` attribute is optional.\n\nThe first point of collision between the masks is returned. The collision point is offset from `sprite1`'s mask's topleft corner (which is always (0, 0)). The collision point is a position within the mask and is not related to the actual screen position of `sprite1`.\n\nThis function is intended to be passed as a `collided` callback function to the group collide functions (see [`spritecollide()`](#pygame.sprite.spritecollide \"pygame.sprite.spritecollide\"), [`groupcollide()`](#pygame.sprite.groupcollide \"pygame.sprite.groupcollide\"), [`spritecollideany()`](#pygame.sprite.spritecollideany \"pygame.sprite.spritecollideany\")).\n\nNote\n\nTo increase performance, create and set a `mask` attribute for all sprites that will use this function to check for collisions. Otherwise, each time this function is called it will create new masks.\n\nNote\n\nA new mask needs to be recreated each time a sprite's image is changed (e.g. if a new image is used or the existing image is rotated).\n\n``` python\n# Example of mask creation for a sprite.\nsprite.mask = pygame.mask.from_surface(sprite.image)\n```\n\nReturns  \nfirst point of collision between the masks or `None` if no collision\n\nReturn type  \ntuple(int, int) or NoneType\n\nNew in pygame 1.8.0.\n\npygame.sprite.groupcollide()  \nFind all sprites that collide between two groups.\n\ngroupcollide(group1, group2, dokill1, dokill2, collided = None) -\\> Sprite_dict\n\nThis will find collisions between all the Sprites in two groups. Collision is determined by comparing the `Sprite.rect` attribute of each Sprite or by using the collided function if it is not None.\n\nEvery Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.\n\nIf either dokill argument is True, the colliding Sprites will be removed from their respective Group.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\npygame.sprite.spritecollideany()  \nSimple test if a sprite intersects anything in a group.\n\nspritecollideany(sprite, group, collided = None) -\\> Sprite Collision with the returned sprite.\n\nspritecollideany(sprite, group, collided = None) -\\> None No collision\n\nIf the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.\n\nIf you don't need all the features of the `pygame.sprite.spritecollide()` function, this function will be a bit quicker.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sprite.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sprite.html](https://www.pygame.org/docs/ref/sprite.html)"
- name: module-surfarray
  id: ref/surfarray
  summary: Functions to convert between NumPy arrays and Surface objects
  description: "pygame.surfarray  \npygame module for accessing surface pixel data using array interfaces\n\nFunctions to convert between NumPy arrays and Surface objects. This module will only be functional when pygame can use the external NumPy package. If NumPy can't be imported, `surfarray` becomes a `MissingModule` object.\n\nEvery pixel is stored as a single integer value to represent the red, green, and blue colors. The 8-bit images use a value that looks into a colormap. Pixels with higher depth use a bit packing process to place three or four values into a single number.\n\nThe arrays are indexed by the `X` axis first, followed by the `Y` axis. Arrays that treat the pixels as a single integer are referred to as 2D arrays. This module can also separate the red, green, and blue color values into separate indices. These types of arrays are referred to as 3D arrays, and the last index is 0 for red, 1 for green, and 2 for blue.\n\nThe pixels of a 2D array as returned by [`array2d()`](#pygame.surfarray.array2d \"pygame.surfarray.array2d\") and [`pixels2d()`](#pygame.surfarray.pixels2d \"pygame.surfarray.pixels2d\") are mapped to the specific surface. Use [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb) to convert to a color, and [`pygame.Surface.map_rgb()`](surface#pygame.Surface.map_rgb) to get the surface specific pixel value of a color. Integer pixel values can only be used directly between surfaces with matching pixel layouts (see [`pygame.Surface`](surface#pygame.Surface)).\n\nAll functions that refer to \"array\" will copy the surface information to a new numpy array. All functions that refer to \"pixels\" will directly reference the pixels from the surface and any changes performed to the array will make changes in the surface. As this last functions share memory with the surface, this one will be locked during the lifetime of the array.\n\npygame.surfarray.array2d()  \nCopy pixels into a 2d array\n\narray2d(Surface) -\\> array\n\nCopy the [`mapped`](surface#pygame.Surface.map_rgb \"pygame.Surface.map_rgb\") (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\npygame.surfarray.pixels2d()  \nReference pixels into a 2d array\n\npixels2d(Surface) -\\> array\n\nCreate a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nPixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array3d()  \nCopy pixels into a 3d array\n\narray3d(Surface) -\\> array\n\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\npygame.surfarray.pixels3d()  \nReference pixels into a 3d array\n\npixels3d(Surface) -\\> array\n\nCreate a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel formats cannot be referenced.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_alpha()  \nCopy pixel alphas into a 2d array\n\narray_alpha(Surface) -\\> array\n\nCopy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\npygame.surfarray.pixels_alpha()  \nReference pixel alphas into a 2d array\n\npixels_alpha(Surface) -\\> array\n\nCreate a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 32-bit Surfaces with a per-pixel alpha value.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_red()  \nCopy red pixels into a 2d array\n\narray_red(Surface) -\\> array\n\nCopy the pixel red values from a Surface into a 2D array. This will work for any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\nNew in pygame 2.0.2.\n\npygame.surfarray.pixels_red()  \nReference pixel red into a 2d array.\n\npixels_red (Surface) -\\> array\n\nCreate a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_green()  \nCopy green pixels into a 2d array\n\narray_green(Surface) -\\> array\n\nCopy the pixel green values from a Surface into a 2D array. This will work for any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\nNew in pygame 2.0.2.\n\npygame.surfarray.pixels_green()  \nReference pixel green into a 2d array.\n\npixels_green (Surface) -\\> array\n\nCreate a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_blue()  \nCopy blue pixels into a 2d array\n\narray_blue(Surface) -\\> array\n\nCopy the pixel blue values from a Surface into a 2D array. This will work for any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\nNew in pygame 2.0.2.\n\npygame.surfarray.pixels_blue()  \nReference pixel blue into a 2d array.\n\npixels_blue (Surface) -\\> array\n\nCreate a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_colorkey()  \nCopy the colorkey values into a 2d array\n\narray_colorkey(Surface) -\\> array\n\nCreate a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.\n\nThis will work on any type of Surface format. If the image has no colorkey a solid opaque array will be returned.\n\nThis function will temporarily lock the Surface as pixels are copied.\n\npygame.surfarray.make_surface()  \nCopy an array to a new surface\n\nmake_surface(array) -\\> Surface\n\nCreate a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See [`pygame.pixelcopy`](pixelcopy#module-pygame.pixelcopy).\n\nNew in pygame 1.9.2: array struct interface support.\n\npygame.surfarray.blit_array()  \nBlit directly from a array values\n\nblit_array(Surface, array) -\\> None\n\nDirectly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.\n\nThis function will temporarily lock the Surface as the new values are copied.\n\npygame.surfarray.map_array()  \nMap a 3d array into a 2d array\n\nmap_array(Surface, array3d) -\\> array2d\n\nConvert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.\n\npygame.surfarray.use_arraytype()  \nSets the array system to be used for surface arrays\n\nuse_arraytype (arraytype) -\\> None\n\nDEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is `'numpy'`. Other values will raise ValueError. Using this function will raise a `DeprecationWarning`.\n\npygame.surfarray.get_arraytype()  \nGets the currently active array type.\n\nget_arraytype () -\\> str\n\nDEPRECATED: Returns the currently active array type. This will be a value of the `get_arraytypes()` tuple and indicates which type of array module is used for the array creation. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\npygame.surfarray.get_arraytypes()  \nGets the array system types currently supported.\n\nget_arraytypes () -\\> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the [`pygame.surfarray.use_arraytype()`](#pygame.surfarray.use_arraytype) () method. If no supported array system could be found, None will be returned. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/surfarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/surfarray.html](https://www.pygame.org/docs/ref/surfarray.html)"
- name: module-tests
  id: ref/tests
  summary: Command line option --help displays a usage message
  description: "pygame.tests  \nPygame unit test suite package\n\nA quick way to run the test suite package from the command line is to import the go submodule with the Python -m option:\n\n``` python\npython -m pygame.tests [<test options>]\n```\n\nCommand line option --help displays a usage message. Available options correspond to the [`pygame.tests.run()`](#pygame.tests.run) arguments.\n\nThe xxxx_test submodules of the tests package are unit test suites for individual parts of pygame. Each can also be run as a main program. This is useful if the test, such as cdrom_test, is interactive.\n\nFor pygame development the test suite can be run from a pygame distribution root directory. Program `run_tests.py` is provided for convenience, though test/go.py can be run directly.\n\nModule level tags control which modules are included in a unit test run. Tags are assigned to a unit test module with a corresponding \\<name\\>\\_tags.py module. The tags module has the global \\_\\_tags\\_\\_, a list of tag names. For example, `cdrom_test.py` has a tag file `cdrom_tags.py` containing a tags list that has the 'interactive' string. The 'interactive' tag indicates `cdrom_test.py` expects user input. It is excluded from a `run_tests.py` or `pygame.tests.go` run. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These two tags indicate unit tests that will not run on a particular platform, or for which no corresponding pygame module is available. The test runner will list each excluded module along with the tag responsible.\n\npygame.tests.run()  \nRun the pygame unit test suite\n\nrun(\\*args, \\*\\*kwds) -\\> tuple\n\nPositional arguments (optional):\n\n``` python\nThe names of tests to include. If omitted then all tests are run. Test names\nneed not include the trailing '_test'.\n```\n\nKeyword arguments:\n\n``` python\nincomplete - fail incomplete tests (default False)\nnosubprocess - run all test suites in the current process\n               (default False, use separate subprocesses)\ndump - dump failures/errors as dict ready to eval (default False)\nfile - if provided, the name of a file into which to dump failures/errors\ntimings - if provided, the number of times to run each individual test to\n          get an average run time (default is run each test once)\nexclude - A list of TAG names to exclude from the run\nshow_output - show silenced stderr/stdout on errors (default False)\nall - dump all results, not just errors (default False)\nrandomize - randomize order of tests (default False)\nseed - if provided, a seed randomizer integer\nmulti_thread - if provided, the number of THREADS in which to run\n               subprocessed tests\ntime_out - if subprocess is True then the time limit in seconds before\n           killing a test (default 30)\nfake - if provided, the name of the fake tests package in the\n       run_tests__tests subpackage to run instead of the normal\n       pygame tests\npython - the path to a python executable to run subprocessed tests\n         (default sys.executable)\n```\n\nReturn value:\n\n``` python\nA tuple of total number of tests run, dictionary of error information.\nThe dictionary is empty if no errors were recorded.\n```\n\nBy default individual test modules are run in separate subprocesses. This recreates normal pygame usage where `pygame.init()` and `pygame.quit()` are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when their time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.\n\nTests are run in a randomized order if the randomize argument is True or a seed argument is provided. If no seed integer is provided then the system time is used.\n\nIndividual test modules may have a \\_\\_tags\\_\\_ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.\n\nThis function can only be called once per Python session. It is not reentrant.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/tests.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/tests.html](https://www.pygame.org/docs/ref/tests.html)"
- name: module-time
  id: ref/time
  summary: Times in pygame are represented in milliseconds (1/1000 seconds)
  description: "pygame.time  \npygame module for monitoring time\n\nTimes in pygame are represented in milliseconds (1/1000 seconds). Most platforms have a limited time resolution of around 10 milliseconds. This resolution, in milliseconds, is given in the `TIMER_RESOLUTION` constant.\n\npygame.time.get_ticks()  \nget the time in milliseconds\n\nget_ticks() -\\> milliseconds\n\nReturn the number of milliseconds since `pygame.init()` was called. Before pygame is initialized this will always be 0.\n\npygame.time.wait()  \npause the program for an amount of time\n\nwait(milliseconds) -\\> time\n\nWill pause for a given number of milliseconds. This function sleeps the process to share the processor with other programs. A program that waits for even a few milliseconds will consume very little processor time. It is slightly less accurate than the `pygame.time.delay()` function.\n\nThis returns the actual number of milliseconds used.\n\npygame.time.delay()  \npause the program for an amount of time\n\ndelay(milliseconds) -\\> time\n\nWill pause for a given number of milliseconds. This function will use the processor (rather than sleeping) in order to make the delay more accurate than `pygame.time.wait()`.\n\nThis returns the actual number of milliseconds used.\n\npygame.time.set_timer()  \nrepeatedly create an event on the event queue\n\nset_timer(event, millis) -\\> None\n\nset_timer(event, millis, loops=0) -\\> None\n\nSet an event to appear on the event queue every given number of milliseconds. The first event will not appear until the amount of time has passed.\n\nThe `event` attribute can be a `pygame.event.Event` object or an integer type that denotes an event.\n\n`loops` is an integer that denotes the number of events posted. If 0 (default) then the events will keep getting posted, unless explicitly stopped.\n\nTo disable the timer for such an event, call the function again with the same event argument with `millis` argument set to 0.\n\nIt is also worth mentioning that a particular event type can only be put on a timer once. In other words, there cannot be two timers for the same event type. Setting an event timer for a particular event discards the old one for that event type.\n\n`loops` replaces the `once` argument, and this does not break backward compatibility\n\nNew in pygame 2.0.0.dev3: once argument added.\n\nChanged in pygame 2.0.1: event argument supports `pygame.event.Event` object\n\nNew in pygame 2.0.1: added loops argument to replace once argument\n\npygame.time.Clock  \ncreate an object to help track time\n\nClock() -\\> Clock\n\nCreates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.\n\ntick()  \nupdate the clock\n\ntick(framerate=0) -\\> milliseconds\n\nThis method should be called once per frame. It will compute how many milliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling `Clock.tick(40)` once per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.\n\ntick_busy_loop()  \nupdate the clock\n\ntick_busy_loop(framerate=0) -\\> milliseconds\n\nThis method should be called once per frame. It will compute how many milliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)` once per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses [`pygame.time.delay()`](#pygame.time.delay), which uses lots of CPU in a busy loop to make sure that timing is more accurate.\n\nNew in pygame 1.8.\n\nget_time()  \ntime used in the previous tick\n\nget_time() -\\> milliseconds\n\nThe number of milliseconds that passed between the previous two calls to `Clock.tick()`.\n\nget_rawtime()  \nactual time used in the previous tick\n\nget_rawtime() -\\> milliseconds\n\nSimilar to `Clock.get_time()`, but does not include any time used while `Clock.tick()` was delaying to limit the framerate.\n\nget_fps()  \ncompute the clock framerate\n\nget_fps() -\\> float\n\nCompute your game's framerate (in frames per second). It is computed by averaging the last ten calls to `Clock.tick()`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/time.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/time.html](https://www.pygame.org/docs/ref/time.html)"
- name: module-transform
  id: ref/transform
  summary: A Surface transform is an operation that moves or resizes the pixels
  description: "pygame.transform\n\npygame module to transform surfaces\n\nA Surface transform is an operation that moves or resizes the pixels. All these functions take a Surface to operate on and return a new Surface with the results.\n\nSome of the transforms are considered destructive. These means every time they are performed they lose pixel data. Common examples of this are resizing and rotating. For this reason, it is better to re-transform the original surface than to keep transforming an image multiple times. (For example, suppose you are animating a bouncing spring which expands and contracts. If you applied the size changes incrementally to the previous images, you would lose detail. Instead, always begin with the original image and scale to the desired size.)\n\nChanged in pygame 2.0.2: transform functions now support keyword arguments.\n\npygame.transform.flip()  \nflip vertically and horizontally\n\nflip(surface, flip_x, flip_y) -\\> Surface\n\nThis can flip a Surface either vertically, horizontally, or both. The arguments `flip_x` and `flip_y` are booleans that control whether to flip each axis. Flipping a Surface is non-destructive and returns a new Surface with the same dimensions.\n\npygame.transform.scale()  \nresize to new resolution\n\nscale(surface, size, dest_surface=None) -\\> Surface\n\nResizes the Surface to a new size, given as (width, height). This is a fast scale operation that does not sample the results.\n\nAn optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the size (width, height) passed in. Also the destination surface must be the same format.\n\n&nbsp;\n\npygame.transform.scale_by()  \nresize to new resolution, using scalar(s)\n\nscale_by(surface, factor, dest_surface=None) -\\> Surface\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave scale_by feedback with authors](https://github.com/pygame/pygame/pull/2723)\n\nSame as [`scale()`](#pygame.transform.scale \"pygame.transform.scale\"), but scales by some factor, rather than taking the new size explicitly. For example, `transform.scale_by(surf,`` ``3)` will triple the size of the surface in both dimensions. Optionally, the scale factor can be a sequence of two numbers, controlling x and y scaling separately. For example, `transform.scale_by(surf,`` ``(2,`` ``1))` doubles the image width but keeps the height the same.\n\nNew in pygame 2.1.3.\n\n&nbsp;\n\npygame.transform.rotate()  \nrotate an image\n\nrotate(surface, angle) -\\> Surface\n\nUnfiltered counterclockwise rotation. The angle argument represents degrees and can be any floating point value. Negative angle amounts will rotate clockwise.\n\nUnless rotating by 90 degree increments, the image will be padded larger to hold the new size. If the image has pixel alphas, the padded area will be transparent. Otherwise pygame will pick a color that matches the Surface colorkey or the topleft pixel value.\n\n&nbsp;\n\npygame.transform.rotozoom()  \nfiltered scale and rotation\n\nrotozoom(surface, angle, scale) -\\> Surface\n\nThis is a combined scale and rotation transform. The resulting Surface will be a filtered 32-bit Surface. The scale argument is a floating point value that will be multiplied by the current resolution. The angle argument is a floating point value that represents the counterclockwise degrees to rotate. A negative rotation angle will rotate clockwise.\n\n&nbsp;\n\npygame.transform.scale2x()  \nspecialized image doubler\n\nscale2x(surface, dest_surface=None) -\\> Surface\n\nThis will return a new image that is double the size of the original. It uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap graphics.\n\nThis really only has an effect on simple images with solid colors. On photographic and antialiased images it will look like a regular unfiltered scale.\n\nAn optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format.\n\n&nbsp;\n\npygame.transform.smoothscale()  \nscale a surface to an arbitrary size smoothly\n\nsmoothscale(surface, size, dest_surface=None) -\\> Surface\n\nUses one of two different algorithms for scaling each dimension of the input surface as required. For shrinkage, the output pixels are area averages of the colors they cover. For expansion, a bilinear filter is used. For the x86-64 and i686 architectures, optimized `MMX` routines are included and will run much faster than other machine types. The size is a 2 number sequence for (width, height). This function only works for 24-bit or 32-bit surfaces. An exception will be thrown if the input surface bit depth is less than 24.\n\nNew in pygame 1.8.\n\n&nbsp;\n\npygame.transform.smoothscale_by()  \nresize to new resolution, using scalar(s)\n\nsmoothscale_by(surface, factor, dest_surface=None) -\\> Surface\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave smoothscale_by feedback with authors](https://github.com/pygame/pygame/pull/2723)\n\nSame as [`smoothscale()`](#pygame.transform.smoothscale \"pygame.transform.smoothscale\"), but scales by some factor, rather than taking the new size explicitly. For example, `transform.smoothscale_by(surf,`` ``3)` will triple the size of the surface in both dimensions. Optionally, the scale factor can be a sequence of two numbers, controlling x and y scaling separately. For example, `transform.smoothscale_by(surf,`` ``(2,`` ``1))` doubles the image width but keeps the height the same.\n\nNew in pygame 2.1.3.\n\n&nbsp;\n\npygame.transform.get_smoothscale_backend()  \nreturn smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'\n\nget_smoothscale_backend() -\\> string\n\nShows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no acceleration is available then \"GENERIC\" is returned. For a x86 processor the level of acceleration to use is determined at runtime.\n\nThis function is provided for pygame testing and debugging.\n\n&nbsp;\n\npygame.transform.set_smoothscale_backend()  \nset smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'\n\nset_smoothscale_backend(backend) -\\> None\n\nSets smoothscale acceleration. Takes a string argument. A value of 'GENERIC' turns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE` extensions as well. A value error is raised if type is not recognized or not supported by the current processor.\n\nThis function is provided for pygame testing and debugging. If smoothscale causes an invalid instruction error then it is a pygame/SDL bug that should be reported. Use this function as a temporary fix only.\n\n&nbsp;\n\npygame.transform.chop()  \ngets a copy of an image with an interior area removed\n\nchop(surface, rect) -\\> Surface\n\nExtracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)\n\n`NOTE`: If you want a \"crop\" that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface.\n\n&nbsp;\n\npygame.transform.laplacian()  \nfind edges in a surface\n\nlaplacian(surface, dest_surface=None) -\\> Surface\n\nFinds the edges in a surface using the laplacian algorithm.\n\nNew in pygame 1.8.\n\n&nbsp;\n\npygame.transform.average_surfaces()  \nfind the average surface from many surfaces.\n\naverage_surfaces(surfaces, dest_surface=None, palette_colors=1) -\\> Surface\n\nTakes a sequence of surfaces and returns a surface with average colors from each of the surfaces.\n\npalette_colors - if true we average the colors in palette, otherwise we average the pixel values. This is useful if the surface is actually greyscale colors, and not palette colors.\n\nNote, this function currently does not handle palette using surfaces correctly.\n\nNew in pygame 1.8.\n\nNew in pygame 1.9: `palette_colors` argument\n\n&nbsp;\n\npygame.transform.average_color()  \nfinds the average color of a surface\n\naverage_color(surface, rect=None, consider_alpha=False) -\\> Color\n\nFinds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is taken into account (removing the black artifacts).\n\nNew in pygame 2.1.2: `consider_alpha` argument\n\n&nbsp;\n\npygame.transform.grayscale()  \ngrayscale a surface\n\ngrayscale(surface, dest_surface=None) -\\> Surface\n\nReturns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.\n\nAn optional destination surface can be passed which is faster than creating a new Surface. This destination surface must have the same dimensions (width, height) and depth as the source Surface.\n\npygame.transform.threshold()\n\nfinds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.\n\nthreshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -\\> num_threshold_pixels\n\nThis versatile function can be used for find colors in a 'surf' close to a 'search_color' or close to colors in a separate 'search_surf'.\n\nIt can also be used to transfer pixels into a 'dest_surf' that match or don't match.\n\nBy default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.\n\nIf the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.\n\nParameters\n\n- **dest_surf** ([*pygame.Surface*](surface#pygame.Surface) *or* *None*) -- Surface we are changing. See 'set_behavior'. Should be None if counting (set_behavior is 0).\n\n- **surf** ([*pygame.Surface*](surface#pygame.Surface)) -- Surface we are looking at.\n\n- **search_color** ([*pygame.Color*](color#pygame.Color)) -- Color we are searching for.\n\n- **threshold** ([*pygame.Color*](color#pygame.Color)) -- Within this distance from search_color (or search_surf). You can use a threshold of (r,g,b,a) where the r,g,b can have different thresholds. So you could use an r threshold of 40 and a blue threshold of 2 if you like.\n\n- **set_color** ([*pygame.Color*](color#pygame.Color) *or* *None*) -- Color we set in dest_surf.\n\n- **set_behavior** (*int*) --\n\n  - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.\n\n  - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.\n\n  - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.\n\n- **search_surf** ([*pygame.Surface*](surface#pygame.Surface) *or* *None*) --\n\n  - search_surf=None (default). Search against 'search_color' instead.\n\n  - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.\n\n- **inverse_set** (*bool*) --\n\n  - False, default. Pixels outside of threshold are changed.\n\n  - True, Pixels within threshold are changed.\n\nReturn type\n\nint\n\nReturns\n\nThe number of pixels that are within the 'threshold' in 'surf' compared to either 'search_color' or search_surf.\n\nExamples\n\nSee the threshold tests for a full of examples: [https://github.com/pygame/pygame/blob/main/test/transform_test.py](https://github.com/pygame/pygame/blob/main/test/transform_test.py)\n\n``` python\ndef test_threshold_dest_surf_not_change(self):\n        \"\"\"the pixels within the threshold.\n\n        All pixels not within threshold are changed to set_color.\n        So there should be none changed in this test.\n        \"\"\"\n        (w, h) = size = (32, 32)\n        threshold = (20, 20, 20, 20)\n        original_color = (25, 25, 25, 25)\n        original_dest_color = (65, 65, 65, 55)\n        threshold_color = (10, 10, 10, 10)\n        set_color = (255, 10, 10, 10)\n\n        surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n        dest_surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n        search_surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n\n        surf.fill(original_color)\n        search_surf.fill(threshold_color)\n        dest_surf.fill(original_dest_color)\n\n        # set_behavior=1, set dest_surface from set_color.\n        # all within threshold of third_surface, so no color is set.\n\n        THRESHOLD_BEHAVIOR_FROM_SEARCH_COLOR = 1\n        pixels_within_threshold = pygame.transform.threshold(\n            dest_surface=dest_surf,\n            surface=surf,\n            search_color=None,\n            threshold=threshold,\n            set_color=set_color,\n            set_behavior=THRESHOLD_BEHAVIOR_FROM_SEARCH_COLOR,\n            search_surf=search_surf,\n        )\n\n        # # Return, of pixels within threshold is correct\n        self.assertEqual(w * h, pixels_within_threshold)\n\n        # # Size of dest surface is correct\n        dest_rect = dest_surf.get_rect()\n        dest_size = dest_rect.size\n        self.assertEqual(size, dest_size)\n\n        # The color is not the change_color specified for every pixel As all\n        # pixels are within threshold\n\n        for pt in test_utils.rect_area_pts(dest_rect):\n            self.assertNotEqual(dest_surf.get_at(pt), set_color)\n            self.assertEqual(dest_surf.get_at(pt), original_dest_color)\n```\n\nNew in pygame 1.8.\n\nChanged in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/transform.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/transform.html](https://www.pygame.org/docs/ref/transform.html)"
- name: module-version
  id: ref/pygame
  summary: The pygame package represents the top-level package for others to use
  description: "pygame  \nthe top level pygame package\n\nThe pygame package represents the top-level package for others to use. Pygame itself is broken into many submodules, but this does not affect programs that use pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed inside a module named [`pygame.locals`](locals#module-pygame.locals). This is meant to be used with `from`` ``pygame.locals`` ``import`` ``*`, in addition to `import`` ``pygame`.\n\nWhen you `import`` ``pygame` all available pygame submodules are automatically imported. Be aware that some of the pygame modules are considered *optional*, and may not be available. In that case, pygame will provide a placeholder object instead of the module, which can be used to test for availability.\n\npygame.init()  \ninitialize all imported pygame modules\n\ninit() -\\> (numpass, numfail)\n\nInitialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but [`pygame.init()`](#pygame.init) is a convenient way to get everything started. The `init()` functions for individual modules will raise exceptions when they fail.\n\nYou may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no effect. This is true even if you have `pygame.quit()` all the modules.\n\npygame.quit()  \nuninitialize all pygame modules\n\nquit() -\\> None\n\nUninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.\n\nNote\n\nCalling [`pygame.quit()`](#pygame.quit) will not exit your program. Consider letting your program end in the same way a normal Python program will end.\n\npygame.get_init()  \nreturns True if pygame is currently initialized\n\nget_init() -\\> bool\n\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\nexception pygame.error  \nstandard pygame exception\n\nraise pygame.error(message)\n\nThis exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch these raised errors.\n\npygame.get_error()  \nget the current error message\n\nget_error() -\\> errorstr\n\nSDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.\n\npygame.set_error()  \nset the current error message\n\nset_error(error_msg) -\\> None\n\nSDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.\n\npygame.get_sdl_version()  \nget the version number of SDL\n\nget_sdl_version(linked=True) -\\> major, minor, patch\n\nReturns the three version numbers of the SDL library. `linked=True` will cause the function to return the version of the library that pygame is linked against while `linked=False` will cause the function to return the version of the library that pygame is compiled against. It can be used to detect which features may or may not be available through pygame.\n\nNew in pygame 1.7.0.\n\nChanged in pygame 2.2.0: `linked` keyword argument added\n\npygame.get_sdl_byteorder()  \nget the byte order of SDL\n\nget_sdl_byteorder() -\\> int\n\nReturns the byte order of the SDL library. It returns `1234` for little endian byte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\npygame.register_quit()  \nregister a function to be called when pygame quits\n\nregister_quit(callable) -\\> None\n\nWhen [`pygame.quit()`](#pygame.quit) is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.\n\npygame.encode_string()  \nEncode a Unicode or bytes object\n\nencode_string(\\[obj \\[, encoding \\[, errors \\[, etype\\]\\]\\]\\]) -\\> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is `'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default is `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`. For the default encoding and errors values there should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\npygame.encode_file_path()  \nEncode a Unicode or bytes object as a file system path\n\nencode_file_path(\\[obj \\[, etype\\]\\]) -\\> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec as returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\npygame.version  \nsmall module containing version information\n\nThis module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.\n\npygame.version.ver  \nversion number as a string\n\nver = '1.2'\n\nThis is the version represented as a string. It can contain a micro release number as well, e.g. `'1.5.2'`\n\npygame.version.vernum  \ntupled integers of the version\n\nvernum = (1, 5, 3)\n\nThis version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:\n\n``` python\nif pygame.version.vernum < (1, 5):\n    print('Warning, older version of pygame (%s)' %  pygame.version.ver)\n    disable_advanced_features = True\n```\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\n``` python\nvernum.major == vernum[0]\nvernum.minor == vernum[1]\nvernum.patch == vernum[2]\n```\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like `\"2.0.0\"` instead of `\"(2,`` ``0,`` ``0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like `\"PygameVersion(major=2,`` ``minor=0,`` ``patch=0)\"` instead of `\"(2,`` ``0,`` ``0)\"`.\n\npygame.version.rev  \nrepository revision of the build\n\nrev = 'a6f89747b551+'\n\nThe Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string `\"\"`. It has always been returning an empty string since `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\npygame.version.SDL  \ntupled integers of the SDL library version\n\nSDL = '(2, 0, 12)'\n\nThis is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:\n\n``` python\n>>> pygame.version.SDL.major\n2\n```\n\nprinting the whole thing returns a string like this:\n\n``` python\n>>> pygame.version.SDL\nSDLVersion(major=2, minor=0, patch=12)\n```\n\nNew in pygame 2.0.0.\n\n**Setting Environment Variables**\n\nSome aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\n``` python\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n```\n\nOr to preserve users ability to override the variable:\n\n``` python\nimport os\nos.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')\n```\n\nIf the variable is more useful for users of an app to set than the developer then they can set it like this:\n\n**Windows**:\n\n``` python\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\npython my_application.py\n```\n\n**Linux/Mac**:\n\n``` python\nENV_VAR=value python my_application.py\n```\n\nFor some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief description of what they do.\n\n  \n\n**Pygame Environment Variables**\n\nThese variables are defined by pygame itself.\n\n  \n\n``` python\nPYGAME_DISPLAY - Experimental (subject to change)\nSet index of the display to use, \"0\" is the default.\n```\n\nThis sets the display where pygame will open its window or screen. The value set here will be used if set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode), and as long as no 'display' parameter is passed into [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_FORCE_SCALE -\nSet to \"photo\" or \"default\".\n```\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0\nSet to \"1\" to enable the SDL2 blitter.\n```\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before [`pygame.init()`](#pygame.init) is called.\n\n  \n\n``` python\nPYGAME_HIDE_SUPPORT_PROMPT -\nSet to \"1\" to hide the prompt.\n```\n\nThis stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_FREETYPE -\nSet to \"1\" to enable.\n```\n\nThis switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_CAMERA -\nSet to \"opencv\" or \"vidcapture\"\n```\n\nForces the library backend used in the camera module, overriding the platform defaults. Must be set before calling [`pygame.camera.init()`](camera#pygame.camera.init).\n\nIn pygame 2.0.3, backends can be set programmatically instead, and the old OpenCV backend has been replaced with one on top of \"opencv-python,\" rather than the old \"highgui\" OpenCV port. Also, there is a new native Windows backend available.\n\n  \n\n  \n\n**SDL Environment Variables**\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try [here](https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html). For Pygame 2, some selected environment variables are listed below.\n\n  \n\n``` python\nSDL_VIDEO_CENTERED -\nSet to \"1\" to enable centering the window.\n```\n\nThis will make the pygame window open in the centre of the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEO_WINDOW_POS -\nSet to \"x,y\" to position the top left corner of the window.\n```\n\nThis allows control over the placement of the pygame window within the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEODRIVER -\nSet to \"drivername\" to change the video driver used.\n```\n\nOn some platforms there are multiple video drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.display.init()`](display#pygame.display.init).\n\n  \n\n``` python\nSDL_AUDIODRIVER -\nSet to \"drivername\" to change the audio driver used.\n```\n\nOn some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.mixer.init()`](mixer#pygame.mixer.init).\n\n  \n\n``` python\nSDL_VIDEO_ALLOW_SCREENSAVER\nSet to \"1\" to allow screensavers while pygame apps are running.\n```\n\nBy default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.\n\n  \n\n``` python\nSDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\nSet to \"0\" to re-enable the compositor.\n```\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which *doesn't* update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms.\n\n  \n\n``` python\nSDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\nSet to \"1\" to allow joysticks to be updated even when the window is out of focus\n```\n\nBy default, when the window is not in focus, input devices do not get updated. However, using this environment variable it is possible to get joystick updates even when the window is in the background. Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.joystick.init()`](joystick#pygame.joystick.init).\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pygame.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pygame.html](https://www.pygame.org/docs/ref/pygame.html)"
- name: mouse
  id: ref/mouse
  summary: The mouse functions can be used to get the current state of the mouse device
  description: "pygame.mouse  \npygame module to work with the mouse\n\nThe mouse functions can be used to get the current state of the mouse device. These functions can also alter the system cursor for the mouse.\n\nWhen the display mode is set, the event queue will start receiving mouse events. The mouse buttons generate `pygame.MOUSEBUTTONDOWN` and `pygame.MOUSEBUTTONUP` events when they are pressed and released. These events contain a button attribute representing which button was pressed. The mouse wheel will generate `pygame.MOUSEBUTTONDOWN` and `pygame.MOUSEBUTTONUP` events when rolled. The button will be set to 4 when the wheel is rolled up, and to button 5 when the wheel is rolled down. Whenever the mouse is moved it generates a `pygame.MOUSEMOTION` event. The mouse movement is broken into small and accurate motion events. As the mouse is moving many motion events will be placed on the queue. Mouse motion events that are not properly cleaned from the event queue are the primary reason the event queue fills up.\n\nIf the mouse cursor is hidden, and input is grabbed to the current display the mouse will enter a virtual input mode, where the relative movements of the mouse will never be stopped by the borders of the screen. See the functions `pygame.mouse.set_visible()` and `pygame.event.set_grab()` to get this configured.\n\n**Mouse Wheel Behavior in pygame 2**\n\nThere is proper functionality for mouse wheel behaviour with pygame 2 supporting `pygame.MOUSEWHEEL` events. The new events support horizontal and vertical scroll movements, with signed integer values representing the amount scrolled (`x` and `y`), as well as `flipped` direction (the set positive and negative values for each axis is flipped). Read more about SDL2 input-related changes here [https://wiki.libsdl.org/MigrationGuide#input](https://wiki.libsdl.org/MigrationGuide#input)\n\nIn pygame 2, the mouse wheel functionality can be used by listening for the `pygame.MOUSEWHEEL` type of an event (Bear in mind they still emit `pygame.MOUSEBUTTONDOWN` events like in pygame 1.x, as well). When this event is triggered, a developer can access the appropriate `Event` object with `pygame.event.get()`. The object can be used to access data about the mouse scroll, such as `which` (it will tell you what exact mouse device trigger the event).\n\nCode example of mouse scroll (tested on 2.0.0.dev7)\n\n    # Taken from husano896's PR thread (slightly modified)\n    import pygame\n    from pygame.locals import *\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    clock = pygame.time.Clock()\n\n    def main():\n       while True:\n          for event in pygame.event.get():\n                if event.type == QUIT:\n                   pygame.quit()\n                   return\n                elif event.type == MOUSEWHEEL:\n                   print(event)\n                   print(event.x, event.y)\n                   print(event.flipped)\n                   print(event.which)\n                   # can access properties with\n                   # proper notation(ex: event.y)\n          clock.tick(60)\n\n    # Execute game:\n    main()\n\npygame.mouse.get_pressed()  \nget the state of the mouse buttons\n\nget_pressed(num_buttons=3) -\\> (button1, button2, button3)\n\nget_pressed(num_buttons=5) -\\> (button1, button2, button3, button4, button5)\n\nReturns a sequence of booleans representing the state of all the mouse buttons. A true value means the mouse is currently being pressed at the time of the call.\n\nNote, to get all of the mouse events it is better to use either `pygame.event.wait()` or `pygame.event.get()` and check all of those events to see if they are `MOUSEBUTTONDOWN`, `MOUSEBUTTONUP`, or `MOUSEMOTION`.\n\nNote, that on `X11` some X servers use middle button emulation. When you click both buttons `1` and `3` at the same time a `2` button event can be emitted.\n\nNote, remember to call `pygame.event.get()` before this function. Otherwise it will not work as expected.\n\nTo support five button mice, an optional parameter `num_buttons` has been added in pygame 2. When this is set to `5`, `button4` and `button5` are added to the returned tuple. Only `3` and `5` are valid values for this parameter.\n\nChanged in pygame 2.0.0: `num_buttons` argument added\n\npygame.mouse.get_pos()  \nget the mouse cursor position\n\nget_pos() -\\> (x, y)\n\nReturns the `x` and `y` position of the mouse cursor. The position is relative to the top-left corner of the display. The cursor position can be located outside of the display window, but is always constrained to the screen.\n\npygame.mouse.get_rel()  \nget the amount of mouse movement\n\nget_rel() -\\> (x, y)\n\nReturns the amount of movement in `x` and `y` since the previous call to this function. The relative movement of the mouse cursor is constrained to the edges of the screen, but see the virtual input mouse mode for a way around this. Virtual input mode is described at the top of the page.\n\npygame.mouse.set_pos()  \nset the mouse cursor position\n\nset_pos(\\[x, y\\]) -\\> None\n\nSet the current mouse position to arguments given. If the mouse cursor is visible it will jump to the new coordinates. Moving the mouse will generate a new `pygame.MOUSEMOTION` event.\n\npygame.mouse.set_visible()  \nhide or show the mouse cursor\n\nset_visible(bool) -\\> bool\n\nIf the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor.\n\npygame.mouse.get_visible()  \nget the current visibility state of the mouse cursor\n\nget_visible() -\\> bool\n\nGet the current visibility state of the mouse cursor. `True` if the mouse is visible, `False` otherwise.\n\nNew in pygame 2.0.0.\n\npygame.mouse.get_focused()  \ncheck if the display is receiving mouse input\n\nget_focused() -\\> bool\n\nReturns true when pygame is receiving mouse input events (or, in windowing terminology, is \"active\" or has the \"focus\").\n\nThis method is most useful when working in a window. By contrast, in full-screen mode, this method always returns true.\n\nNote: under `MS` Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. `pygame.mouse.get_focused()` indicates whether the pygame window receives mouse events.\n\npygame.mouse.set_cursor()  \nset the mouse cursor to a new cursor\n\nset_cursor(pygame.cursors.Cursor) -\\> None\n\nset_cursor(size, hotspot, xormasks, andmasks) -\\> None\n\nset_cursor(hotspot, surface) -\\> None\n\nset_cursor(constant) -\\> None\n\nSet the mouse cursor to something new. This function accepts either an explicit `Cursor` object or arguments to create a `Cursor` object.\n\nSee [`pygame.cursors.Cursor`](cursors#pygame.cursors.Cursor) for help creating cursors and for examples.\n\nChanged in pygame 2.0.1.\n\npygame.mouse.get_cursor()  \nget the current mouse cursor\n\nget_cursor() -\\> pygame.cursors.Cursor\n\nGet the information about the mouse system cursor. The return value contains the same data as the arguments passed into [`pygame.mouse.set_cursor()`](#pygame.mouse.set_cursor).\n\nNote\n\nCode that unpacked a get_cursor() call into `size,`` ``hotspot,`` ``xormasks,`` ``andmasks` will still work, assuming the call returns an old school type cursor.\n\nChanged in pygame 2.0.1.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mouse.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mouse.html](https://www.pygame.org/docs/ref/mouse.html)"
- name: mouse.get_cursor
  id: ref/mouse#pygame.mouse.get_cursor
  summary: Get the information about the mouse system cursor
  belongs_to: module-mouse
  description: "pygame.mouse.get_cursor()\n\nget the current mouse cursor\n\nget_cursor() -\\> pygame.cursors.Cursor\n\nGet the information about the mouse system cursor. The return value contains the same data as the arguments passed into [`pygame.mouse.set_cursor()`](#pygame.mouse.set_cursor).\n\nNote\n\nCode that unpacked a get_cursor() call into `size,``hotspot,``xormasks,``andmasks` will still work, assuming the call returns an old school type cursor.\n\nChanged in pygame 2.0.1.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/mouse.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/mouse.html](https://www.pygame.org/docs/ref/mouse.html)"
- name: mouse.get_focused
  id: ref/mouse#pygame.mouse.get_focused
  summary: Returns true when pygame is receiving mouse input events (or, in windowing terminology, is "active" or has the "focus")
  belongs_to: module-mouse
  description: |-
    pygame.mouse.get_focused()

    check if the display is receiving mouse input

    get_focused() -\> bool

    Returns true when pygame is receiving mouse input events (or, in windowing terminology, is "active" or has the "focus").

    This method is most useful when working in a window. By contrast, in full-screen mode, this method always returns true.

    Note: under `MS` Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. `pygame.mouse.get_focused()` indicates whether the pygame window receives mouse events.
- name: mouse.get_pos
  id: ref/mouse#pygame.mouse.get_pos
  summary: Returns the x and y position of the mouse cursor
  belongs_to: module-mouse
  description: |-
    pygame.mouse.get_pos()

    get the mouse cursor position

    get_pos() -\> (x, y)

    Returns the `x` and `y` position of the mouse cursor. The position is relative to the top-left corner of the display. The cursor position can be located outside of the display window, but is always constrained to the screen.
- name: mouse.get_pressed
  id: ref/mouse#pygame.mouse.get_pressed
  summary: Returns a sequence of booleans representing the state of all the mouse buttons
  belongs_to: module-mouse
  description: |-
    pygame.mouse.get_pressed()

    get the state of the mouse buttons

    get_pressed(num_buttons=3) -\> (button1, button2, button3)

    get_pressed(num_buttons=5) -\> (button1, button2, button3, button4, button5)

    Returns a sequence of booleans representing the state of all the mouse buttons. A true value means the mouse is currently being pressed at the time of the call.

    Note, to get all of the mouse events it is better to use either `pygame.event.wait()` or `pygame.event.get()` and check all of those events to see if they are `MOUSEBUTTONDOWN`, `MOUSEBUTTONUP`, or `MOUSEMOTION`.

    Note, that on `X11` some X servers use middle button emulation. When you click both buttons `1` and `3` at the same time a `2` button event can be emitted.

    Note, remember to call `pygame.event.get()` before this function. Otherwise it will not work as expected.

    To support five button mice, an optional parameter `num_buttons` has been added in pygame 2. When this is set to `5`, `button4` and `button5` are added to the returned tuple. Only `3` and `5` are valid values for this parameter.

    Changed in pygame 2.0.0: `num_buttons` argument added
- name: mouse.get_rel
  id: ref/mouse#pygame.mouse.get_rel
  summary: Returns the amount of movement in x and y since the previous call to this function
  belongs_to: module-mouse
  description: |-
    pygame.mouse.get_rel()

    get the amount of mouse movement

    get_rel() -\> (x, y)

    Returns the amount of movement in `x` and `y` since the previous call to this function. The relative movement of the mouse cursor is constrained to the edges of the screen, but see the virtual input mouse mode for a way around this. Virtual input mode is described at the top of the page.
- name: mouse.get_visible
  id: ref/mouse#pygame.mouse.get_visible
  summary: Get the current visibility state of the mouse cursor
  belongs_to: module-mouse
  description: |-
    pygame.mouse.get_visible()

    get the current visibility state of the mouse cursor

    get_visible() -\> bool

    Get the current visibility state of the mouse cursor. `True` if the mouse is visible, `False` otherwise.

    New in pygame 2.0.0.
- name: mouse.set_cursor
  id: ref/mouse#pygame.mouse.set_cursor
  summary: Set the mouse cursor to something new
  belongs_to: module-mouse
  description: |-
    pygame.mouse.set_cursor()

    set the mouse cursor to a new cursor

    set_cursor(pygame.cursors.Cursor) -\> None

    set_cursor(size, hotspot, xormasks, andmasks) -\> None

    set_cursor(hotspot, surface) -\> None

    set_cursor(constant) -\> None

    Set the mouse cursor to something new. This function accepts either an explicit `Cursor` object or arguments to create a `Cursor` object.

    See [`pygame.cursors.Cursor`](cursors#pygame.cursors.Cursor) for help creating cursors and for examples.

    Changed in pygame 2.0.1.
- name: mouse.set_pos
  id: ref/mouse#pygame.mouse.set_pos
  summary: Set the current mouse position to arguments given
  belongs_to: module-mouse
  description: |-
    pygame.mouse.set_pos()

    set the mouse cursor position

    set_pos(\[x, y\]) -\> None

    Set the current mouse position to arguments given. If the mouse cursor is visible it will jump to the new coordinates. Moving the mouse will generate a new `pygame.MOUSEMOTION` event.
- name: mouse.set_visible
  id: ref/mouse#pygame.mouse.set_visible
  summary: If the bool argument is true, the mouse cursor will be visible
  belongs_to: module-mouse
  description: |-
    pygame.mouse.set_visible()

    hide or show the mouse cursor

    set_visible(bool) -\> bool

    If the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor.
- name: Overlay
  id: ref/overlay
  summary: This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1
  description: "Warning\n\nThis module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1. This module will not be supported in the future.\n\npygame.Overlay  \npygame object for video overlay graphics\n\nOverlay(format, (width, height)) -\\> Overlay\n\nThe Overlay objects provide support for accessing hardware video overlays. Video overlays do not use standard `RGB` pixel formats, and can use multiple resolutions of data to create a single image.\n\nThe Overlay objects represent lower level access to the display hardware. To use the object you must understand the technical details of video overlays.\n\nThe Overlay format determines the type of pixel data used. Not all hardware will support all types of overlay formats. Here is a list of available format types:\n\n``` python\nYV12_OVERLAY, IYUV_OVERLAY, YUY2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY\n```\n\nThe width and height arguments control the size for the overlay image data. The overlay image can be displayed at any size, not just the resolution of the overlay.\n\nThe overlay objects are always visible, and always show above the regular display contents.\n\ndisplay()  \nset the overlay pixel data\n\ndisplay((y, u, v)) -\\> None\n\ndisplay() -\\> None\n\nDisplay the YUV data in SDL's overlay planes. The y, u, and v arguments are strings of binary data. The data must be in the correct format used to create the Overlay.\n\nIf no argument is passed in, the Overlay will simply be redrawn with the current data. This can be useful when the Overlay is not really hardware accelerated.\n\nThe strings are not validated, and improperly sized strings could crash the program.\n\nset_location()  \ncontrol where the overlay is displayed\n\nset_location(rect) -\\> None\n\nSet the location for the overlay. The overlay will always be shown relative to the main display Surface. This does not actually redraw the overlay, it will be updated on the next call to `Overlay.display()`.\n\nget_hardware()  \ntest if the Overlay is hardware accelerated\n\nget_hardware(rect) -\\> int\n\nReturns a True value when the Overlay is hardware accelerated. If the platform does not support acceleration, software rendering is used.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/overlay.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/overlay.html](https://www.pygame.org/docs/ref/overlay.html)"
- name: Overlay.display
  id: ref/overlay#pygame.Overlay.display
  summary: Display the YUV data in SDL's overlay planes
  belongs_to: Overlay
  description: |-
    display()

    set the overlay pixel data

    display((y, u, v)) -\> None

    display() -\> None

    Display the YUV data in SDL's overlay planes. The y, u, and v arguments are strings of binary data. The data must be in the correct format used to create the Overlay.

    If no argument is passed in, the Overlay will simply be redrawn with the current data. This can be useful when the Overlay is not really hardware accelerated.

    The strings are not validated, and improperly sized strings could crash the program.
- name: Overlay.get_hardware
  id: ref/overlay#pygame.Overlay.get_hardware
  summary: Returns a True value when the Overlay is hardware accelerated
  belongs_to: Overlay
  description: "get_hardware()\n\ntest if the Overlay is hardware accelerated\n\nget_hardware(rect) -\\> int\n\nReturns a True value when the Overlay is hardware accelerated. If the platform does not support acceleration, software rendering is used.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/overlay.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/overlay.html](https://www.pygame.org/docs/ref/overlay.html)"
- name: Overlay.set_location
  id: ref/overlay#pygame.Overlay.set_location
  summary: Set the location for the overlay
  belongs_to: Overlay
  description: |-
    set_location()

    control where the overlay is displayed

    set_location(rect) -\> None

    Set the location for the overlay. The overlay will always be shown relative to the main display Surface. This does not actually redraw the overlay, it will be updated on the next call to `Overlay.display()`.
- name: PixelArray
  id: ref/pixelarray
  summary: The PixelArray wraps a Surface and provides direct access to the surface's pixels
  description: "pygame.PixelArray  \npygame object for direct pixel access of surfaces\n\nPixelArray(Surface) -\\> PixelArray\n\nThe PixelArray wraps a Surface and provides direct access to the surface's pixels. A pixel array can be one or two dimensional. A two dimensional array, like its surface, is indexed \\[column, row\\]. Pixel arrays support slicing, both for returning a subarray or for assignment. A pixel array sliced on a single column or row returns a one dimensional pixel array. Arithmetic and other operations are not supported. A pixel array can be safely assigned to itself. Finally, pixel arrays export an array struct interface, allowing them to interact with [`pygame.pixelcopy`](pixelcopy#module-pygame.pixelcopy) methods and NumPy arrays.\n\nA PixelArray pixel item can be assigned a raw integer values, a [`pygame.Color`](color#pygame.Color) instance, or a (r, g, b\\[, a\\]) tuple.\n\n``` python\npxarray[x, y] = 0xFF00FF\npxarray[x, y] = pygame.Color(255, 0, 255)\npxarray[x, y] = (255, 0, 255)\n```\n\nHowever, only a pixel's integer value is returned. So, to compare a pixel to a particular color the color needs to be first mapped using the [`Surface.map_rgb()`](surface#pygame.Surface.map_rgb \"pygame.Surface.map_rgb\") method of the Surface object for which the PixelArray was created.\n\n``` python\npxarray = pygame.PixelArray(surface)\n# Check, if the first pixel at the topleft corner is blue\nif pxarray[0, 0] == surface.map_rgb((0, 0, 255)):\n    ...\n```\n\nWhen assigning to a range of of pixels, a non tuple sequence of colors or a PixelArray can be used as the value. For a sequence, the length must match the PixelArray width.\n\n``` python\npxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF\npxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,\n                                          # second pixel  = 0xAACCEE, ...\npxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above\npxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above\npxarray[a:b] = otherarray[x:y]            # slice sizes must match\n```\n\nFor PixelArray assignment, if the right hand side array has a row length of 1, then the column is broadcast over the target array's rows. An array of height 1 is broadcast over the target's columns, and is equivalent to assigning a 1D PixelArray.\n\nSubscript slices can also be used to assign to a rectangular subview of the target PixelArray.\n\n``` python\n# Create some new PixelArray objects providing a different view\n# of the original array/surface.\nnewarray = pxarray[2:4, 3:5]\notherarray = pxarray[::2, ::2]\n```\n\nSubscript slices can also be used to do fast rectangular pixel manipulations instead of iterating over the x or y axis. The\n\n``` python\npxarray[::2, :] = (0, 0, 0)               # Make even columns black.\npxarray[::2] = (0, 0, 0)                  # Same as [::2, :]\n```\n\nDuring its lifetime, the PixelArray locks the surface, thus you explicitly have to close() it once its not used any more and the surface should perform operations in the same scope. It is best to use it as a context manager using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.\n\nA simple `:` slice index for the column can be omitted.\n\n``` python\npxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]\npxarray[...] = (255, 0, 0)                # Same as pxarray[:]\n```\n\nA note about PixelArray to PixelArray assignment, for arrays with an item size of 3 (created from 24 bit surfaces) pixel values are translated from the source to the destinations format. The red, green, and blue color elements of each pixel are shifted to match the format of the target surface. For all other pixel sizes no such remapping occurs. This should change in later pygame releases, where format conversions are performed for all pixel sizes. To avoid code breakage when full mapped copying is implemented it is suggested PixelArray to PixelArray copies be only between surfaces of identical format.\n\nNew in pygame 1.9.4:\n\n- close() method was added. For explicitly cleaning up.\n\n- being able to use PixelArray as a context manager for cleanup.\n\n- both of these are useful for when working without reference counting (pypy).\n\nNew in pygame 1.9.2:\n\n- array struct interface\n\n- transpose method\n\n- broadcasting for a length 1 dimension\n\nChanged in pygame 1.9.2:\n\n- A 2D PixelArray can have a length 1 dimension. Only an integer index on a 2D PixelArray returns a 1D array.\n\n- For assignment, a tuple can only be a color. Any other sequence type is a sequence of colors.\n\nsurface  \nGets the Surface the PixelArray uses.\n\nsurface -\\> Surface\n\nThe Surface the PixelArray was created for.\n\nitemsize  \nReturns the byte size of a pixel array item\n\nitemsize -\\> int\n\nThis is the same as [`Surface.get_bytesize()`](surface#pygame.Surface.get_bytesize \"pygame.Surface.get_bytesize\") for the pixel array's surface.\n\nNew in pygame 1.9.2.\n\nndim  \nReturns the number of dimensions.\n\nndim -\\> int\n\nA pixel array can be 1 or 2 dimensional.\n\nNew in pygame 1.9.2.\n\nshape  \nReturns the array size.\n\nshape -\\> tuple of int's\n\nA tuple or length [`ndim`](#pygame.PixelArray.ndim \"pygame.PixelArray.ndim\") giving the length of each dimension. Analogous to [`Surface.get_size()`](surface#pygame.Surface.get_size \"pygame.Surface.get_size\").\n\nNew in pygame 1.9.2.\n\nstrides  \nReturns byte offsets for each array dimension.\n\nstrides -\\> tuple of int's\n\nA tuple or length [`ndim`](#pygame.PixelArray.ndim \"pygame.PixelArray.ndim\") byte counts. When a stride is multiplied by the corresponding index it gives the offset of that index from the start of the array. A stride is negative for an array that has is inverted (has a negative step).\n\nNew in pygame 1.9.2.\n\nmake_surface()  \nCreates a new Surface from the current PixelArray.\n\nmake_surface() -\\> Surface\n\nCreates a new Surface from the current PixelArray. Depending on the current PixelArray the size, pixel order etc. will be different from the original Surface.\n\n``` python\n# Create a new surface flipped around the vertical axis.\nsf = pxarray[:,::-1].make_surface ()\n```\n\nNew in pygame 1.8.1.\n\nreplace()  \nReplaces the passed color in the PixelArray with another one.\n\nreplace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -\\> None\n\nReplaces the pixels with the passed color in the PixelArray by changing them them to the passed replacement color.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the replacement to take pixels with a similar, but not exactly identical color, into account as well.\n\nThis is an in place operation that directly affects the pixels of the PixelArray.\n\nNew in pygame 1.8.1.\n\nextract()  \nExtracts the passed color from the PixelArray.\n\nextract(color, distance=0, weights=(0.299, 0.587, 0.114)) -\\> PixelArray\n\nExtracts the passed color by changing all matching pixels to white, while non-matching pixels are changed to black. This returns a new PixelArray with the black/white color mask.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the extraction to take pixels with a similar, but not exactly identical color, into account as well.\n\nNew in pygame 1.8.1.\n\ncompare()  \nCompares the PixelArray with another one.\n\ncompare(array, distance=0, weights=(0.299, 0.587, 0.114)) -\\> PixelArray\n\nCompares the contents of the PixelArray with those from the passed in PixelArray. It returns a new PixelArray with a black/white color mask that indicates the differences (black) of both arrays. Both PixelArray objects must have identical bit depths and dimensions.\n\nIt uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as a threshold for the color detection. This causes the comparison to mark pixels with a similar, but not exactly identical color, as white.\n\nNew in pygame 1.8.1.\n\ntranspose()  \nExchanges the x and y axis.\n\ntranspose() -\\> PixelArray\n\nThis method returns a new view of the pixel array with the rows and columns swapped. So for a (w, h) sized array a (h, w) slice is returned. If an array is one dimensional, then a length 1 x dimension is added, resulting in a 2D pixel array.\n\nNew in pygame 1.9.2.\n\nclose()  \nCloses the PixelArray, and releases Surface lock.\n\nclose() -\\> PixelArray\n\nThis method is for explicitly closing the PixelArray, and releasing a lock on the Surface.\n\nNew in pygame 1.9.4.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pixelarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pixelarray.html](https://www.pygame.org/docs/ref/pixelarray.html)"
- name: PixelArray.close
  id: ref/pixelarray#pygame.PixelArray.close
  summary: Closes the PixelArray, and releases Surface lock
  belongs_to: PixelArray
  description: "close()\n\nCloses the PixelArray, and releases Surface lock.\n\nclose() -\\> PixelArray\n\nThis method is for explicitly closing the PixelArray, and releasing a lock on the Surface.\n\nNew in pygame 1.9.4.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pixelarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pixelarray.html](https://www.pygame.org/docs/ref/pixelarray.html)"
- name: PixelArray.compare
  id: ref/pixelarray#pygame.PixelArray.compare
  summary: Compares the PixelArray with another one
  belongs_to: PixelArray
  description: |-
    compare()

    Compares the PixelArray with another one.

    compare(array, distance=0, weights=(0.299, 0.587, 0.114)) -\> PixelArray

    Compares the contents of the PixelArray with those from the passed in PixelArray. It returns a new PixelArray with a black/white color mask that indicates the differences (black) of both arrays. Both PixelArray objects must have identical bit depths and dimensions.

    It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as a threshold for the color detection. This causes the comparison to mark pixels with a similar, but not exactly identical color, as white.

    New in pygame 1.8.1.
- name: PixelArray.extract
  id: ref/pixelarray#pygame.PixelArray.extract
  summary: Extracts the passed color from the PixelArray
  belongs_to: PixelArray
  description: |-
    extract()

    Extracts the passed color from the PixelArray.

    extract(color, distance=0, weights=(0.299, 0.587, 0.114)) -\> PixelArray

    Extracts the passed color by changing all matching pixels to white, while non-matching pixels are changed to black. This returns a new PixelArray with the black/white color mask.

    It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the extraction to take pixels with a similar, but not exactly identical color, into account as well.

    New in pygame 1.8.1.
- name: PixelArray.itemsize
  id: ref/pixelarray#pygame.PixelArray.itemsize
  summary: This is the same as Surface.get_bytesize() for the pixel array's surface
  belongs_to: PixelArray
  description: |-
    itemsize

    Returns the byte size of a pixel array item

    itemsize -\> int

    This is the same as [`Surface.get_bytesize()`](surface#pygame.Surface.get_bytesize "pygame.Surface.get_bytesize") for the pixel array's surface.

    New in pygame 1.9.2.
- name: PixelArray.make_surface
  id: ref/pixelarray#pygame.PixelArray.make_surface
  summary: Creates a new Surface from the current PixelArray
  belongs_to: PixelArray
  description: |-
    make_surface()

    Creates a new Surface from the current PixelArray.

    make_surface() -\> Surface

    Creates a new Surface from the current PixelArray. Depending on the current PixelArray the size, pixel order etc. will be different from the original Surface.

    ``` python
    # Create a new surface flipped around the vertical axis.
    sf = pxarray[:,::-1].make_surface ()
    ```

    New in pygame 1.8.1.
- name: PixelArray.ndim
  id: ref/pixelarray#pygame.PixelArray.ndim
  summary: Returns the number of dimensions
  belongs_to: PixelArray
  description: |-
    ndim

    Returns the number of dimensions.

    ndim -\> int

    A pixel array can be 1 or 2 dimensional.

    New in pygame 1.9.2.
- name: PixelArray.replace
  id: ref/pixelarray#pygame.PixelArray.replace
  summary: Replaces the passed color in the PixelArray with another one
  belongs_to: PixelArray
  description: |-
    replace()

    Replaces the passed color in the PixelArray with another one.

    replace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -\> None

    Replaces the pixels with the passed color in the PixelArray by changing them them to the passed replacement color.

    It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the replacement to take pixels with a similar, but not exactly identical color, into account as well.

    This is an in place operation that directly affects the pixels of the PixelArray.

    New in pygame 1.8.1.
- name: PixelArray.shape
  id: ref/pixelarray#pygame.PixelArray.shape
  summary: Returns the array size
  belongs_to: PixelArray
  description: |-
    shape

    Returns the array size.

    shape -\> tuple of int's

    A tuple or length [`ndim`](#pygame.PixelArray.ndim "pygame.PixelArray.ndim") giving the length of each dimension. Analogous to [`Surface.get_size()`](surface#pygame.Surface.get_size "pygame.Surface.get_size").

    New in pygame 1.9.2.
- name: PixelArray.strides
  id: ref/pixelarray#pygame.PixelArray.strides
  summary: Returns byte offsets for each array dimension
  belongs_to: PixelArray
  description: |-
    strides

    Returns byte offsets for each array dimension.

    strides -\> tuple of int's

    A tuple or length [`ndim`](#pygame.PixelArray.ndim "pygame.PixelArray.ndim") byte counts. When a stride is multiplied by the corresponding index it gives the offset of that index from the start of the array. A stride is negative for an array that has is inverted (has a negative step).

    New in pygame 1.9.2.
- name: PixelArray.surface
  id: ref/pixelarray#pygame.PixelArray.surface
  summary: Gets the Surface the PixelArray uses
  belongs_to: PixelArray
  description: |-
    surface

    Gets the Surface the PixelArray uses.

    surface -\> Surface

    The Surface the PixelArray was created for.
- name: PixelArray.transpose
  id: ref/pixelarray#pygame.PixelArray.transpose
  summary: Exchanges the x and y axis
  belongs_to: PixelArray
  description: |-
    transpose()

    Exchanges the x and y axis.

    transpose() -\> PixelArray

    This method returns a new view of the pixel array with the rows and columns swapped. So for a (w, h) sized array a (h, w) slice is returned. If an array is one dimensional, then a length 1 x dimension is added, resulting in a 2D pixel array.

    New in pygame 1.9.2.
- name: pixelcopy
  id: ref/pixelcopy
  summary: The pygame.pixelcopy module contains functions for copying between surfaces and objects exporting an array structure interface
  description: "pygame.pixelcopy  \npygame module for general pixel array copying\n\nThe `pygame.pixelcopy` module contains functions for copying between surfaces and objects exporting an array structure interface. It is a backend for [`pygame.surfarray`](surfarray#module-pygame.surfarray), adding NumPy support. But pixelcopy is more general, and intended for direct use.\n\nThe array struct interface exposes an array's data in a standard way. It was introduced in NumPy. In Python 2.7 and above it is replaced by the new buffer protocol, though the buffer protocol is still a work in progress. The array struct interface, on the other hand, is stable and works with earlier Python versions. So for now the array struct interface is the predominate way pygame handles array introspection.\n\nFor 2d arrays of integer pixel values, the values are mapped to the pixel format of the related surface. To get the actual color of a pixel value use [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb). 2d arrays can only be used directly between surfaces having the same pixel layout.\n\nNew in pygame 1.9.2.\n\npygame.pixelcopy.surface_to_array()  \ncopy surface pixels to an array object\n\nsurface_to_array(array, surface, kind='P', opaque=255, clear=0) -\\> None\n\nThe surface_to_array function copies pixels from a Surface object to a 2D or 3D array. Depending on argument `kind` and the target array dimension, a copy may be raw pixel value, RGB, a color component slice, or colorkey alpha transparency value. Recognized `kind` values are the single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is equivalent to 'P'. The first two dimensions of the target must be the surface size (w, h).\n\nThe default 'P' kind code does a direct raw integer pixel (mapped) value copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having shape (w, h, 3). For an 8 bit colormap surface this means the table index is copied to a 2D array, not the table value itself. A 2D array's item size must be at least as large as the surface's pixel byte size. The item size of a 3D array must be at least one byte.\n\nFor the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with [`Surface.set_colorkey()`](surface#pygame.Surface.set_colorkey \"pygame.Surface.set_colorkey\")), or has a blanket alpha (set with [`Surface.set_alpha()`](surface#pygame.Surface.set_alpha \"pygame.Surface.set_alpha\")) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional `opaque` surface_to_array argument (default 255: not transparent).\n\nCopy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the `clear` argument value is used for colorkey matches, `opaque` otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of [`pygame.surfarray.array_colorkey()`](surfarray#pygame.surfarray.array_colorkey).\n\nSpecific to surface_to_array, a ValueError is raised for target arrays with incorrect shape or item size. A TypeError is raised for an incorrect kind code. Surface specific problems, such as locking, raise a pygame.error.\n\npygame.pixelcopy.array_to_surface()  \ncopy an array object to a surface\n\narray_to_surface(\\<surface\\>, \\<array\\>) -\\> None\n\nSee [`pygame.surfarray.blit_array()`](surfarray#pygame.surfarray.blit_array).\n\npygame.pixelcopy.map_array()  \ncopy an array to another array, using surface format\n\nmap_array(\\<array\\>, \\<array\\>, \\<surface\\>) -\\> None\n\nMap an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of \\<surface\\>.\n\npygame.pixelcopy.make_surface()  \nCopy an array to a new surface\n\npygame.pixelcopy.make_surface(array) -\\> Surface\n\nCreate a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pixelcopy.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pixelcopy.html](https://www.pygame.org/docs/ref/pixelcopy.html)"
- name: pixelcopy.array_to_surface
  id: ref/pixelcopy#pygame.pixelcopy.array_to_surface
  summary: See pygame.surfarray.blit_array()
  belongs_to: module-pixelcopy
  description: |-
    pygame.pixelcopy.array_to_surface()

    copy an array object to a surface

    array_to_surface(\<surface\>, \<array\>) -\> None

    See [`pygame.surfarray.blit_array()`](surfarray#pygame.surfarray.blit_array).
- name: pixelcopy.make_surface
  id: ref/pixelcopy#pygame.pixelcopy.make_surface
  summary: Create a new Surface that best resembles the data and format of the array
  belongs_to: module-pixelcopy
  description: "pygame.pixelcopy.make_surface()\n\nCopy an array to a new surface\n\npygame.pixelcopy.make_surface(array) -\\> Surface\n\nCreate a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pixelcopy.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pixelcopy.html](https://www.pygame.org/docs/ref/pixelcopy.html)"
- name: pixelcopy.map_array
  id: ref/pixelcopy#pygame.pixelcopy.map_array
  summary: null
  belongs_to: module-pixelcopy
  description: |-
    pygame.pixelcopy.map_array()

    copy an array to another array, using surface format

    map_array(\<array\>, \<array\>, \<surface\>) -\> None

    Map an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of \<surface\>.
- name: pixelcopy.surface_to_array
  id: ref/pixelcopy#pygame.pixelcopy.surface_to_array
  summary: The surface_to_array function copies pixels from a Surface object to a 2D or 3D array
  belongs_to: module-pixelcopy
  description: |-
    pygame.pixelcopy.surface_to_array()

    copy surface pixels to an array object

    surface_to_array(array, surface, kind='P', opaque=255, clear=0) -\> None

    The surface_to_array function copies pixels from a Surface object to a 2D or 3D array. Depending on argument `kind` and the target array dimension, a copy may be raw pixel value, RGB, a color component slice, or colorkey alpha transparency value. Recognized `kind` values are the single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case insensitive, so 'p' is equivalent to 'P'. The first two dimensions of the target must be the surface size (w, h).

    The default 'P' kind code does a direct raw integer pixel (mapped) value copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array having shape (w, h, 3). For an 8 bit colormap surface this means the table index is copied to a 2D array, not the table value itself. A 2D array's item size must be at least as large as the surface's pixel byte size. The item size of a 3D array must be at least one byte.

    For the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with [`Surface.set_colorkey()`](surface#pygame.Surface.set_colorkey "pygame.Surface.set_colorkey")), or has a blanket alpha (set with [`Surface.set_alpha()`](surface#pygame.Surface.set_alpha "pygame.Surface.set_alpha")) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional `opaque` surface_to_array argument (default 255: not transparent).

    Copy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the `clear` argument value is used for colorkey matches, `opaque` otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of [`pygame.surfarray.array_colorkey()`](surfarray#pygame.surfarray.array_colorkey).

    Specific to surface_to_array, a ValueError is raised for target arrays with incorrect shape or item size. A TypeError is raised for an incorrect kind code. Surface specific problems, such as locking, raise a pygame.error.
- name: pygame
  id: ref/pygame
  summary: The pygame package represents the top-level package for others to use
  description: "pygame  \nthe top level pygame package\n\nThe pygame package represents the top-level package for others to use. Pygame itself is broken into many submodules, but this does not affect programs that use pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed inside a module named [`pygame.locals`](locals#module-pygame.locals). This is meant to be used with `from`` ``pygame.locals`` ``import`` ``*`, in addition to `import`` ``pygame`.\n\nWhen you `import`` ``pygame` all available pygame submodules are automatically imported. Be aware that some of the pygame modules are considered *optional*, and may not be available. In that case, pygame will provide a placeholder object instead of the module, which can be used to test for availability.\n\npygame.init()  \ninitialize all imported pygame modules\n\ninit() -\\> (numpass, numfail)\n\nInitialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but [`pygame.init()`](#pygame.init) is a convenient way to get everything started. The `init()` functions for individual modules will raise exceptions when they fail.\n\nYou may want to initialize the different modules separately to speed up your program or to not use modules your game does not require.\n\nIt is safe to call this `init()` more than once as repeated calls will have no effect. This is true even if you have `pygame.quit()` all the modules.\n\npygame.quit()  \nuninitialize all pygame modules\n\nquit() -\\> None\n\nUninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.\n\nNote\n\nCalling [`pygame.quit()`](#pygame.quit) will not exit your program. Consider letting your program end in the same way a normal Python program will end.\n\npygame.get_init()  \nreturns True if pygame is currently initialized\n\nget_init() -\\> bool\n\nReturns `True` if pygame is currently initialized.\n\nNew in pygame 1.9.5.\n\nexception pygame.error  \nstandard pygame exception\n\nraise pygame.error(message)\n\nThis exception is raised whenever a pygame or SDL operation fails. You can catch any anticipated problems and deal with the error. The exception is always raised with a descriptive message about the problem.\n\nDerived from the `RuntimeError` exception, which can also be used to catch these raised errors.\n\npygame.get_error()  \nget the current error message\n\nget_error() -\\> errorstr\n\nSDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.\n\npygame.set_error()  \nset the current error message\n\nset_error(error_msg) -\\> None\n\nSDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.\n\npygame.get_sdl_version()  \nget the version number of SDL\n\nget_sdl_version(linked=True) -\\> major, minor, patch\n\nReturns the three version numbers of the SDL library. `linked=True` will cause the function to return the version of the library that pygame is linked against while `linked=False` will cause the function to return the version of the library that pygame is compiled against. It can be used to detect which features may or may not be available through pygame.\n\nNew in pygame 1.7.0.\n\nChanged in pygame 2.2.0: `linked` keyword argument added\n\npygame.get_sdl_byteorder()  \nget the byte order of SDL\n\nget_sdl_byteorder() -\\> int\n\nReturns the byte order of the SDL library. It returns `1234` for little endian byte order and `4321` for big endian byte order.\n\nNew in pygame 1.8.\n\npygame.register_quit()  \nregister a function to be called when pygame quits\n\nregister_quit(callable) -\\> None\n\nWhen [`pygame.quit()`](#pygame.quit) is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.\n\npygame.encode_string()  \nEncode a Unicode or bytes object\n\nencode_string(\\[obj \\[, encoding \\[, errors \\[, etype\\]\\]\\]\\]) -\\> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.\n\nencoding (string): If present, encoding to use. The default is `'unicode_escape'`.\n\nerrors (string): If given, how to handle unencodable characters. The default is `'backslashreplace'`.\n\netype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`. For the default encoding and errors values there should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\npygame.encode_file_path()  \nEncode a Unicode or bytes object as a file system path\n\nencode_file_path(\\[obj \\[, etype\\]\\]) -\\> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else, return `None`; if not given, raise `SyntaxError`.\n\netype (exception type): If given, the exception type to raise for an encoding error. The default is `UnicodeEncodeError`, as returned by `PyUnicode_AsEncodedString()`.\n\nThis function is used to encode file paths in pygame. Encoding is to the codec as returned by `sys.getfilesystemencoding()`. Keyword arguments are supported.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)\n\npygame.version  \nsmall module containing version information\n\nThis module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.\n\npygame.version.ver  \nversion number as a string\n\nver = '1.2'\n\nThis is the version represented as a string. It can contain a micro release number as well, e.g. `'1.5.2'`\n\npygame.version.vernum  \ntupled integers of the version\n\nvernum = (1, 5, 3)\n\nThis version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:\n\n``` python\nif pygame.version.vernum < (1, 5):\n    print('Warning, older version of pygame (%s)' %  pygame.version.ver)\n    disable_advanced_features = True\n```\n\nNew in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.\n\n``` python\nvernum.major == vernum[0]\nvernum.minor == vernum[1]\nvernum.patch == vernum[2]\n```\n\nChanged in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like `\"2.0.0\"` instead of `\"(2,`` ``0,`` ``0)\"`.\n\nChanged in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like `\"PygameVersion(major=2,`` ``minor=0,`` ``patch=0)\"` instead of `\"(2,`` ``0,`` ``0)\"`.\n\npygame.version.rev  \nrepository revision of the build\n\nrev = 'a6f89747b551+'\n\nThe Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string `\"\"`. It has always been returning an empty string since `v1.9.5`.\n\nChanged in pygame 1.9.5: Always returns an empty string `\"\"`.\n\npygame.version.SDL  \ntupled integers of the SDL library version\n\nSDL = '(2, 0, 12)'\n\nThis is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:\n\n``` python\n>>> pygame.version.SDL.major\n2\n```\n\nprinting the whole thing returns a string like this:\n\n``` python\n>>> pygame.version.SDL\nSDLVersion(major=2, minor=0, patch=12)\n```\n\nNew in pygame 2.0.0.\n\n**Setting Environment Variables**\n\nSome aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\n``` python\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n```\n\nOr to preserve users ability to override the variable:\n\n``` python\nimport os\nos.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')\n```\n\nIf the variable is more useful for users of an app to set than the developer then they can set it like this:\n\n**Windows**:\n\n``` python\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\npython my_application.py\n```\n\n**Linux/Mac**:\n\n``` python\nENV_VAR=value python my_application.py\n```\n\nFor some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief description of what they do.\n\n  \n\n**Pygame Environment Variables**\n\nThese variables are defined by pygame itself.\n\n  \n\n``` python\nPYGAME_DISPLAY - Experimental (subject to change)\nSet index of the display to use, \"0\" is the default.\n```\n\nThis sets the display where pygame will open its window or screen. The value set here will be used if set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode), and as long as no 'display' parameter is passed into [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_FORCE_SCALE -\nSet to \"photo\" or \"default\".\n```\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0\nSet to \"1\" to enable the SDL2 blitter.\n```\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before [`pygame.init()`](#pygame.init) is called.\n\n  \n\n``` python\nPYGAME_HIDE_SUPPORT_PROMPT -\nSet to \"1\" to hide the prompt.\n```\n\nThis stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_FREETYPE -\nSet to \"1\" to enable.\n```\n\nThis switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_CAMERA -\nSet to \"opencv\" or \"vidcapture\"\n```\n\nForces the library backend used in the camera module, overriding the platform defaults. Must be set before calling [`pygame.camera.init()`](camera#pygame.camera.init).\n\nIn pygame 2.0.3, backends can be set programmatically instead, and the old OpenCV backend has been replaced with one on top of \"opencv-python,\" rather than the old \"highgui\" OpenCV port. Also, there is a new native Windows backend available.\n\n  \n\n  \n\n**SDL Environment Variables**\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try [here](https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html). For Pygame 2, some selected environment variables are listed below.\n\n  \n\n``` python\nSDL_VIDEO_CENTERED -\nSet to \"1\" to enable centering the window.\n```\n\nThis will make the pygame window open in the centre of the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEO_WINDOW_POS -\nSet to \"x,y\" to position the top left corner of the window.\n```\n\nThis allows control over the placement of the pygame window within the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEODRIVER -\nSet to \"drivername\" to change the video driver used.\n```\n\nOn some platforms there are multiple video drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.display.init()`](display#pygame.display.init).\n\n  \n\n``` python\nSDL_AUDIODRIVER -\nSet to \"drivername\" to change the audio driver used.\n```\n\nOn some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.mixer.init()`](mixer#pygame.mixer.init).\n\n  \n\n``` python\nSDL_VIDEO_ALLOW_SCREENSAVER\nSet to \"1\" to allow screensavers while pygame apps are running.\n```\n\nBy default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.\n\n  \n\n``` python\nSDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\nSet to \"0\" to re-enable the compositor.\n```\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which *doesn't* update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms.\n\n  \n\n``` python\nSDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\nSet to \"1\" to allow joysticks to be updated even when the window is out of focus\n```\n\nBy default, when the window is not in focus, input devices do not get updated. However, using this environment variable it is possible to get joystick updates even when the window is in the background. Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.joystick.init()`](joystick#pygame.joystick.init).\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pygame.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pygame.html](https://www.pygame.org/docs/ref/pygame.html)"
- name: quit
  id: ref/pygame#pygame.quit
  summary: Uninitialize all pygame modules that have previously been initialized
  belongs_to: module-pygame
  description: |-
    pygame.quit()

    uninitialize all pygame modules

    quit() -\> None

    Uninitialize all pygame modules that have previously been initialized. When the Python interpreter shuts down, this method is called regardless, so your program should not need it, except when it wants to terminate its pygame resources and continue. It is safe to call this function more than once as repeated calls have no effect.

    Note

    Calling [`pygame.quit()`](#pygame.quit) will not exit your program. Consider letting your program end in the same way a normal Python program will end.
- name: Rect
  id: ref/rect
  summary: Pygame uses Rect objects to store and manipulate rectangular areas
  description: "pygame.Rect  \npygame object for storing rectangular coordinates\n\nRect(left, top, width, height) -\\> Rect\n\nRect((left, top), (width, height)) -\\> Rect\n\nRect(object) -\\> Rect\n\nPygame uses Rect objects to store and manipulate rectangular areas. A Rect can be created from a combination of left, top, width, and height values. Rects can also be created from python objects that are already a Rect or have an attribute named \"rect\".\n\nAny pygame function that requires a Rect argument also accepts any of these values to construct a Rect. This makes it easier to create Rects on the fly as arguments to functions.\n\nThe Rect functions that change the position or size of a Rect return a new copy of the Rect with the affected changes. The original Rect is not modified. Some methods have an alternate \"in-place\" version that returns None but affects the original Rect. These \"in-place\" methods are denoted with the \"ip\" suffix.\n\nThe Rect object has several virtual attributes which can be used to move and align the Rect:\n\n``` python\nx,y\ntop, left, bottom, right\ntopleft, bottomleft, topright, bottomright\nmidtop, midleft, midbottom, midright\ncenter, centerx, centery\nsize, width, height\nw,h\n```\n\nAll of these attributes can be assigned to:\n\n``` python\nrect1.right = 10\nrect2.center = (20,30)\n```\n\nAssigning to size, width or height changes the dimensions of the rectangle; all other assignments move the rectangle without resizing it. Notice that some attributes are integers and others are pairs of integers.\n\nIf a Rect has a nonzero width or height, it will return `True` for a nonzero test. Some methods return a Rect with 0 size to represent an invalid rectangle. A Rect with a 0 size will not collide when using collision detection methods (e.g. [`collidepoint()`](#pygame.Rect.collidepoint \"pygame.Rect.collidepoint\"), [`colliderect()`](#pygame.Rect.colliderect \"pygame.Rect.colliderect\"), etc.).\n\nThe coordinates for Rect objects are all integers. The size values can be programmed to have negative values, but these are considered illegal Rects for most operations.\n\nThere are several collision tests between other rectangles. Most python containers can be searched for collisions against a single Rect.\n\nThe area covered by a Rect does not include the right- and bottom-most edge of pixels. If one Rect's bottom border is another Rect's top border (i.e., rect1.bottom=rect2.top), the two meet exactly on the screen but do not overlap, and `rect1.colliderect(rect2)` returns false.\n\nThe Rect object is also iterable:\n\n``` python\nr = Rect(0, 1, 2, 3)\nx, y, w, h = r\n```\n\nNew in pygame 1.9.2: The Rect class can be subclassed. Methods such as `copy()` and `move()` will recognize this and return instances of the subclass. However, the subclass's `__init__()` method is not called, and `__new__()` is assumed to take no arguments. So these methods should be overridden if any extra attributes need to be copied.\n\ncopy()  \ncopy the rectangle\n\ncopy() -\\> Rect\n\nReturns a new rectangle having the same position and size as the original.\n\nNew in pygame 1.9\n\nmove()  \nmoves the rectangle\n\nmove(x, y) -\\> Rect\n\nReturns a new rectangle that is moved by the given offset. The x and y arguments can be any integer value, positive or negative.\n\nmove_ip()  \nmoves the rectangle, in place\n\nmove_ip(x, y) -\\> None\n\nSame as the `Rect.move()` method, but operates in place.\n\ninflate()  \ngrow or shrink the rectangle size\n\ninflate(x, y) -\\> Rect\n\nReturns a new rectangle with the size changed by the given offset. The rectangle remains centered around its current center. Negative values will shrink the rectangle. Note, uses integers, if the offset given is too small(\\< 2 \\> -2), center will be off.\n\ninflate_ip()  \ngrow or shrink the rectangle size, in place\n\ninflate_ip(x, y) -\\> None\n\nSame as the `Rect.inflate()` method, but operates in place.\n\nscale_by()  \nscale the rectangle by given a multiplier\n\nscale_by(scalar) -\\> Rect\n\nscale_by(scalex, scaley) -\\> Rect\n\nReturns a new rectangle with the size scaled by the given multipliers. The rectangle remains centered around its current center. A single scalar or separate width and height scalars are allowed. Values above one will increase the size of the rectangle, whereas values between zero and one will decrease the size of the rectangle.\n\nscale_by_ip()  \ngrow or shrink the rectangle size, in place\n\nscale_by_ip(scalar) -\\> None\n\nscale_by_ip(scalex, scaley) -\\> None\n\nSame as the `Rect.scale_by()` method, but operates in place.\n\nupdate()  \nsets the position and size of the rectangle\n\nupdate(left, top, width, height) -\\> None\n\nupdate((left, top), (width, height)) -\\> None\n\nupdate(object) -\\> None\n\nSets the position and size of the rectangle, in place. See parameters for [`pygame.Rect()`](#pygame.Rect) for the parameters of this function.\n\nNew in pygame 2.0.1.\n\nclamp()  \nmoves the rectangle inside another\n\nclamp(Rect) -\\> Rect\n\nReturns a new rectangle that is moved to be completely inside the argument Rect. If the rectangle is too large to fit inside, it is centered inside the argument Rect, but its size is not changed.\n\nclamp_ip()  \nmoves the rectangle inside another, in place\n\nclamp_ip(Rect) -\\> None\n\nSame as the `Rect.clamp()` method, but operates in place.\n\nclip()  \ncrops a rectangle inside another\n\nclip(Rect) -\\> Rect\n\nReturns a new rectangle that is cropped to be completely inside the argument Rect. If the two rectangles do not overlap to begin with, a Rect with 0 size is returned.\n\nclipline()  \ncrops a line inside a rectangle\n\nclipline(x1, y1, x2, y2) -\\> ((cx1, cy1), (cx2, cy2))\n\nclipline(x1, y1, x2, y2) -\\> ()\n\nclipline((x1, y1), (x2, y2)) -\\> ((cx1, cy1), (cx2, cy2))\n\nclipline((x1, y1), (x2, y2)) -\\> ()\n\nclipline((x1, y1, x2, y2)) -\\> ((cx1, cy1), (cx2, cy2))\n\nclipline((x1, y1, x2, y2)) -\\> ()\n\nclipline(((x1, y1), (x2, y2))) -\\> ((cx1, cy1), (cx2, cy2))\n\nclipline(((x1, y1), (x2, y2))) -\\> ()\n\nReturns the coordinates of a line that is cropped to be completely inside the rectangle. If the line does not overlap the rectangle, then an empty tuple is returned.\n\nThe line to crop can be any of the following formats (floats can be used in place of ints, but they will be truncated):\n\n> - four ints\n>\n> - 2 lists/tuples/Vector2s of 2 ints\n>\n> - a list/tuple of four ints\n>\n> - a list/tuple of 2 lists/tuples/Vector2s of 2 ints\n\nReturns  \na tuple with the coordinates of the given line cropped to be completely inside the rectangle is returned, if the given line does not overlap the rectangle, an empty tuple is returned\n\nReturn type  \ntuple(tuple(int, int), tuple(int, int)) or ()\n\nRaises  \n**TypeError** -- if the line coordinates are not given as one of the above described line formats\n\nNote\n\nThis method can be used for collision detection between a rect and a line. See example code below.\n\nNote\n\nThe `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](#pygame.Rect) always lie one pixel outside of its actual border.\n\n``` python\n# Example using clipline().\nclipped_line = rect.clipline(line)\n\nif clipped_line:\n    # If clipped_line is not an empty tuple then the line\n    # collides/overlaps with the rect. The returned value contains\n    # the endpoints of the clipped line.\n    start, end = clipped_line\n    x1, y1 = start\n    x2, y2 = end\nelse:\n    print(\"No clipping. The line is fully outside the rect.\")\n```\n\nNew in pygame 2.0.0.\n\nunion()  \njoins two rectangles into one\n\nunion(Rect) -\\> Rect\n\nReturns a new rectangle that completely covers the area of the two provided rectangles. There may be area inside the new Rect that is not covered by the originals.\n\nunion_ip()  \njoins two rectangles into one, in place\n\nunion_ip(Rect) -\\> None\n\nSame as the `Rect.union()` method, but operates in place.\n\nunionall()  \nthe union of many rectangles\n\nunionall(Rect_sequence) -\\> Rect\n\nReturns the union of one rectangle with a sequence of many rectangles.\n\nunionall_ip()  \nthe union of many rectangles, in place\n\nunionall_ip(Rect_sequence) -\\> None\n\nThe same as the `Rect.unionall()` method, but operates in place.\n\nfit()  \nresize and move a rectangle with aspect ratio\n\nfit(Rect) -\\> Rect\n\nReturns a new rectangle that is moved and resized to fit another. The aspect ratio of the original Rect is preserved, so the new rectangle may be smaller than the target in either width or height.\n\nnormalize()  \ncorrect negative sizes\n\nnormalize() -\\> None\n\nThis will flip the width or height of a rectangle if it has a negative size. The rectangle will remain in the same place, with only the sides swapped.\n\ncontains()  \ntest if one rectangle is inside another\n\ncontains(Rect) -\\> bool\n\nReturns true when the argument is completely inside the Rect.\n\ncollidepoint()  \ntest if a point is inside a rectangle\n\ncollidepoint(x, y) -\\> bool\n\ncollidepoint((x,y)) -\\> bool\n\nReturns true if the given point is inside the rectangle. A point along the right or bottom edge is not considered to be inside the rectangle.\n\nNote\n\nFor collision detection between a rect and a line the [`clipline()`](#pygame.Rect.clipline \"pygame.Rect.clipline\") method can be used.\n\ncolliderect()  \ntest if two rectangles overlap\n\ncolliderect(Rect) -\\> bool\n\nReturns true if any portion of either rectangle overlap (except the top+bottom or left+right edges).\n\nNote\n\nFor collision detection between a rect and a line the [`clipline()`](#pygame.Rect.clipline \"pygame.Rect.clipline\") method can be used.\n\ncollidelist()  \ntest if one rectangle in a list intersects\n\ncollidelist(list) -\\> index\n\nTest whether the rectangle collides with any in a sequence of rectangles. The index of the first collision found is returned. If no collisions are found an index of -1 is returned.\n\ncollidelistall()  \ntest if all rectangles in a list intersect\n\ncollidelistall(list) -\\> indices\n\nReturns a list of all the indices that contain rectangles that collide with the Rect. If no intersecting rectangles are found, an empty list is returned.\n\nNot only Rects are valid arguments, but these are all valid calls:\n\n     1Rect = pygame.Rect\n     2r = Rect(0, 0, 10, 10)\n     3\n     4list_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]\n     5indices0 = r.collidelistall(list_of_rects)\n     6\n     7list_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]\n     8indices1 = r.collidelistall(list_of_lists)\n     9\n    10list_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]\n    11indices2 = r.collidelistall(list_of_tuples)\n    12\n    13list_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]\n    14indices3 = r.collidelistall(list_of_double_tuples)\n    15\n    16class ObjectWithRectAttribute(object):\n    17    def __init__(self, r):\n    18        self.rect = r\n    19\n    20list_of_object_with_rect_attribute = [\n    21    ObjectWithRectAttribute(Rect(1, 1, 1, 1)),\n    22    ObjectWithRectAttribute(Rect(2, 2, 2, 2)),\n    23]\n    24indices4 = r.collidelistall(list_of_object_with_rect_attribute)\n    25\n    26class ObjectWithCallableRectAttribute(object):\n    27    def __init__(self, r):\n    28        self._rect = r\n    29\n    30    def rect(self):\n    31        return self._rect\n    32\n    33list_of_object_with_callable_rect = [\n    34    ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),\n    35    ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),\n    36]\n    37indices5 = r.collidelistall(list_of_object_with_callable_rect)\n\ncollideobjects()  \ntest if any object in a list intersects\n\ncollideobjects(rect_list) -\\> object\n\ncollideobjects(obj_list, key=func) -\\> object\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave collideobjects feedback with authors](https://github.com/pygame/pygame/pull/3026)\n\nTest whether the rectangle collides with any object in the sequence. The object of the first collision found is returned. If no collisions are found then `None` is returned\n\nIf key is given, then it should be a method taking an object from the list as input and returning a rect like object e.g. `lambda`` ``obj:`` ``obj.rectangle`. If an object has multiple attributes of type Rect then key could return one of them.\n\n     1r = Rect(1, 1, 10, 10)\n     2\n     3rects = [\n     4    Rect(1, 1, 10, 10),\n     5    Rect(5, 5, 10, 10),\n     6    Rect(15, 15, 1, 1),\n     7    Rect(2, 2, 1, 1),\n     8]\n     9\n    10result = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>\n    11print(result)\n    12\n    13class ObjectWithSomRectAttribute:\n    14    def __init__(self, name, collision_box, draw_rect):\n    15        self.name = name\n    16        self.draw_rect = draw_rect\n    17        self.collision_box = collision_box\n    18\n    19    def __repr__(self):\n    20        return f'<{self.__class__.__name__}(\"{self.name}\", {list(self.collision_box)}, {list(self.draw_rect)})>'\n    21\n    22objects = [\n    23    ObjectWithSomRectAttribute(\"A\", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),\n    24    ObjectWithSomRectAttribute(\"B\", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),\n    25    ObjectWithSomRectAttribute(\"C\", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),\n    26]\n    27\n    28# collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object\n    29collision = r.collideobjects(\n    30    objects, key=lambda o: o.collision_box\n    31)  # -> <ObjectWithSomRectAttribute(\"B\", [1, 1, 10, 10], [300, 300, 50, 50])>\n    32print(collision)\n    33\n    34screen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None\n    35print(screen_rect)\n\nNew in pygame 2.1.3.\n\ncollideobjectsall()  \ntest if all objects in a list intersect\n\ncollideobjectsall(rect_list) -\\> objects\n\ncollideobjectsall(obj_list, key=func) -\\> objects\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave collideobjectsall feedback with authors](https://github.com/pygame/pygame/pull/3026)\n\nReturns a list of all the objects that contain rectangles that collide with the Rect. If no intersecting objects are found, an empty list is returned.\n\nIf key is given, then it should be a method taking an object from the list as input and returning a rect like object e.g. `lambda`` ``obj:`` ``obj.rectangle`. If an object has multiple attributes of type Rect then key could return one of them.\n\n     1r = Rect(1, 1, 10, 10)\n     2\n     3rects = [\n     4    Rect(1, 1, 10, 10),\n     5    Rect(5, 5, 10, 10),\n     6    Rect(15, 15, 1, 1),\n     7    Rect(2, 2, 1, 1),\n     8]\n     9\n    10result = r.collideobjectsall(\n    11    rects\n    12)  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]\n    13print(result)\n    14\n    15class ObjectWithSomRectAttribute:\n    16    def __init__(self, name, collision_box, draw_rect):\n    17        self.name = name\n    18        self.draw_rect = draw_rect\n    19        self.collision_box = collision_box\n    20\n    21    def __repr__(self):\n    22        return f'<{self.__class__.__name__}(\"{self.name}\", {list(self.collision_box)}, {list(self.draw_rect)})>'\n    23\n    24objects = [\n    25    ObjectWithSomRectAttribute(\"A\", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),\n    26    ObjectWithSomRectAttribute(\"B\", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),\n    27    ObjectWithSomRectAttribute(\"C\", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),\n    28]\n    29\n    30# collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object\n    31collisions = r.collideobjectsall(\n    32    objects, key=lambda o: o.collision_box\n    33)  # -> [<ObjectWithSomRectAttribute(\"A\", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute(\"B\", [5, 5, 10, 10], [200, 500, 50, 50])>]\n    34print(collisions)\n    35\n    36screen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []\n    37print(screen_rects)\n\nNew in pygame 2.1.3.\n\ncollidedict()  \ntest if one rectangle in a dictionary intersects\n\ncollidedict(dict) -\\> (key, value)\n\ncollidedict(dict) -\\> None\n\ncollidedict(dict, use_values=0) -\\> (key, value)\n\ncollidedict(dict, use_values=0) -\\> None\n\nReturns the first key and value pair that intersects with the calling Rect object. If no collisions are found, `None` is returned. If `use_values` is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple. e.g. `rect.collidedict({tuple(key_rect)`` ``:`` ``value})`\n\ncollidedictall()  \ntest if all rectangles in a dictionary intersect\n\ncollidedictall(dict) -\\> \\[(key, value), ...\\]\n\ncollidedictall(dict, use_values=0) -\\> \\[(key, value), ...\\]\n\nReturns a list of all the key and value pairs that intersect with the calling Rect object. If no collisions are found an empty list is returned. If `use_values` is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple. e.g. `rect.collidedictall({tuple(key_rect)`` ``:`` ``value})`\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/rect.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/rect.html](https://www.pygame.org/docs/ref/rect.html)"
- name: Rect.clamp
  id: ref/rect#pygame.Rect.clamp
  summary: Returns a new rectangle that is moved to be completely inside the argument Rect
  belongs_to: Rect
  description: |-
    clamp()

    moves the rectangle inside another

    clamp(Rect) -\> Rect

    Returns a new rectangle that is moved to be completely inside the argument Rect. If the rectangle is too large to fit inside, it is centered inside the argument Rect, but its size is not changed.
- name: Rect.clamp_ip
  id: ref/rect#pygame.Rect.clamp_ip
  summary: Same as the Rect.clamp() method, but operates in place
  belongs_to: Rect
  description: |-
    clamp_ip()

    moves the rectangle inside another, in place

    clamp_ip(Rect) -\> None

    Same as the `Rect.clamp()` method, but operates in place.
- name: Rect.clip
  id: ref/rect#pygame.Rect.clip
  summary: Returns a new rectangle that is cropped to be completely inside the argument Rect
  belongs_to: Rect
  description: |-
    clip()

    crops a rectangle inside another

    clip(Rect) -\> Rect

    Returns a new rectangle that is cropped to be completely inside the argument Rect. If the two rectangles do not overlap to begin with, a Rect with 0 size is returned.
- name: Rect.clipline
  id: ref/rect#pygame.Rect.clipline
  summary: Returns the coordinates of a line that is cropped to be completely inside the rectangle
  belongs_to: Rect
  description: |-
    clipline()

    crops a line inside a rectangle

    clipline(x1, y1, x2, y2) -\> ((cx1, cy1), (cx2, cy2))

    clipline(x1, y1, x2, y2) -\> ()

    clipline((x1, y1), (x2, y2)) -\> ((cx1, cy1), (cx2, cy2))

    clipline((x1, y1), (x2, y2)) -\> ()

    clipline((x1, y1, x2, y2)) -\> ((cx1, cy1), (cx2, cy2))

    clipline((x1, y1, x2, y2)) -\> ()

    clipline(((x1, y1), (x2, y2))) -\> ((cx1, cy1), (cx2, cy2))

    clipline(((x1, y1), (x2, y2))) -\> ()

    Returns the coordinates of a line that is cropped to be completely inside the rectangle. If the line does not overlap the rectangle, then an empty tuple is returned.

    The line to crop can be any of the following formats (floats can be used in place of ints, but they will be truncated):

    > - four ints
    >
    > - 2 lists/tuples/Vector2s of 2 ints
    >
    > - a list/tuple of four ints
    >
    > - a list/tuple of 2 lists/tuples/Vector2s of 2 ints

    Returns

    a tuple with the coordinates of the given line cropped to be completely inside the rectangle is returned, if the given line does not overlap the rectangle, an empty tuple is returned

    Return type

    tuple(tuple(int, int), tuple(int, int)) or ()

    Raises

    **TypeError** -- if the line coordinates are not given as one of the above described line formats

    Note

    This method can be used for collision detection between a rect and a line. See example code below.

    Note

    The `rect.bottom` and `rect.right` attributes of a [`pygame.Rect`](#pygame.Rect) always lie one pixel outside of its actual border.

    ``` python
    # Example using clipline().
    clipped_line = rect.clipline(line)

    if clipped_line:
        # If clipped_line is not an empty tuple then the line
        # collides/overlaps with the rect. The returned value contains
        # the endpoints of the clipped line.
        start, end = clipped_line
        x1, y1 = start
        x2, y2 = end
    else:
        print("No clipping. The line is fully outside the rect.")
    ```

    New in pygame 2.0.0.
- name: Rect.collidedict
  id: ref/rect#pygame.Rect.collidedict
  summary: Returns the first key and value pair that intersects with the calling Rect object
  belongs_to: Rect
  description: |-
    collidedict()

    test if one rectangle in a dictionary intersects

    collidedict(dict) -\> (key, value)

    collidedict(dict) -\> None

    collidedict(dict, use_values=0) -\> (key, value)

    collidedict(dict, use_values=0) -\> None

    Returns the first key and value pair that intersects with the calling Rect object. If no collisions are found, `None` is returned. If `use_values` is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.

    Note

    Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple. e.g. `rect.collidedict({tuple(key_rect)``:``value})`
- name: Rect.collidedictall
  id: ref/rect#pygame.Rect.collidedictall
  summary: Returns a list of all the key and value pairs that intersect with the calling Rect object
  belongs_to: Rect
  description: "collidedictall()\n\ntest if all rectangles in a dictionary intersect\n\ncollidedictall(dict) -\\> \\[(key, value), ...\\]\n\ncollidedictall(dict, use_values=0) -\\> \\[(key, value), ...\\]\n\nReturns a list of all the key and value pairs that intersect with the calling Rect object. If no collisions are found an empty list is returned. If `use_values` is 0 (default) then the dict's keys will be used in the collision detection, otherwise the dict's values will be used.\n\nNote\n\nRect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple. e.g. `rect.collidedictall({tuple(key_rect)``:``value})`\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/rect.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/rect.html](https://www.pygame.org/docs/ref/rect.html)"
- name: Rect.collidelist
  id: ref/rect#pygame.Rect.collidelist
  summary: Test whether the rectangle collides with any in a sequence of rectangles
  belongs_to: Rect
  description: |-
    collidelist()

    test if one rectangle in a list intersects

    collidelist(list) -\> index

    Test whether the rectangle collides with any in a sequence of rectangles. The index of the first collision found is returned. If no collisions are found an index of -1 is returned.
- name: Rect.collidelistall
  id: ref/rect#pygame.Rect.collidelistall
  summary: Returns a list of all the indices that contain rectangles that collide with the Rect
  belongs_to: Rect
  description: |-
    collidelistall()

    test if all rectangles in a list intersect

    collidelistall(list) -\> indices

    Returns a list of all the indices that contain rectangles that collide with the Rect. If no intersecting rectangles are found, an empty list is returned.

    Not only Rects are valid arguments, but these are all valid calls:

                             1
                            Rect
                            =
                            pygame
                            .
                            Rect
                             2
                            r
                            =
                            Rect
                            (
                            0
                            ,
                            0
                            ,
                            10
                            ,
                            10
                            )
                             3
                             4
                            list_of_rects
                            =
                            [
                            Rect
                            (
                            1
                            ,
                            1
                            ,
                            1
                            ,
                            1
                            ),
                            Rect
                            (
                            2
                            ,
                            2
                            ,
                            2
                            ,
                            2
                            )]
                             5
                            indices0
                            =
                            r
                            .
                            collidelistall
                            (
                            list_of_rects
                            )
                             6
                             7
                            list_of_lists
                            =
                            [[
                            1
                            ,
                            1
                            ,
                            1
                            ,
                            1
                            ],
                            [
                            2
                            ,
                            2
                            ,
                            2
                            ,
                            2
                            ]]
                             8
                            indices1
                            =
                            r
                            .
                            collidelistall
                            (
                            list_of_lists
                            )
                             9
                            10
                            list_of_tuples
                            =
                            [(
                            1
                            ,
                            1
                            ,
                            1
                            ,
                            1
                            ),
                            (
                            2
                            ,
                            2
                            ,
                            2
                            ,
                            2
                            )]
                            11
                            indices2
                            =
                            r
                            .
                            collidelistall
                            (
                            list_of_tuples
                            )
                            12
                            13
                            list_of_double_tuples
                            =
                            [((
                            1
                            ,
                            1
                            ),
                            (
                            1
                            ,
                            1
                            )),
                            ((
                            2
                            ,
                            2
                            ),
                            (
                            2
                            ,
                            2
                            ))]
                            14
                            indices3
                            =
                            r
                            .
                            collidelistall
                            (
                            list_of_double_tuples
                            )
                            15
                            16
                            class
                            ObjectWithRectAttribute
                            (
                            object
                            ):
                            17
                            def
                            __init__
                            (
                            self
                            ,
                            r
                            ):
                            18
                            self
                            .
                            rect
                            =
                            r
                            19
                            20
                            list_of_object_with_rect_attribute
                            =
                            [
                            21
                            ObjectWithRectAttribute
                            (
                            Rect
                            (
                            1
                            ,
                            1
                            ,
                            1
                            ,
                            1
                            )),
                            22
                            ObjectWithRectAttribute
                            (
                            Rect
                            (
                            2
                            ,
                            2
                            ,
                            2
                            ,
                            2
                            )),
                            23
                            ]
                            24
                            indices4
                            =
                            r
                            .
                            collidelistall
                            (
                            list_of_object_with_rect_attribute
                            )
                            25
                            26
                            class
                            ObjectWithCallableRectAttribute
                            (
                            object
                            ):
                            27
                            def
                            __init__
                            (
                            self
                            ,
                            r
                            ):
                            28
                            self
                            .
                            _rect
                            =
                            r
                            29
                            30
                            def
                            rect
                            (
                            self
                            ):
                            31
                            return
                            self
                            .
                            _rect
                            32
                            33
                            list_of_object_with_callable_rect
                            =
                            [
                            34
                            ObjectWithCallableRectAttribute
                            (
                            Rect
                            (
                            1
                            ,
                            1
                            ,
                            1
                            ,
                            1
                            )),
                            35
                            ObjectWithCallableRectAttribute
                            (
                            Rect
                            (
                            2
                            ,
                            2
                            ,
                            2
                            ,
                            2
                            )),
                            36
                            ]
                            37
                            indices5
                            =
                            r
                            .
                            collidelistall
                            (
                            list_of_object_with_callable_rect
                            )
- name: Rect.collideobjects
  id: ref/rect#pygame.Rect.collideobjects
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: Rect
  description: "collideobjects()\n\ntest if any object in a list intersects\n\ncollideobjects(rect_list) -\\> object\n\ncollideobjects(obj_list, key=func) -\\> object\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave collideobjects feedback with authors](https://github.com/pygame/pygame/pull/3026)\n\nTest whether the rectangle collides with any object in the sequence. The object of the first collision found is returned. If no collisions are found then `None` is returned\n\nIf key is given, then it should be a method taking an object from the list as input and returning a rect like object e.g. `lambda``obj:``obj.rectangle`. If an object has multiple attributes of type Rect then key could return one of them.\n\n                         1\n                        r\n                        =\n                        Rect\n                        (\n                        1\n                        ,\n                        1\n                        ,\n                        10\n                        ,\n                        10\n                        )\n                         2\n                         3\n                        rects\n                        =\n                        [\n                         4\n                        Rect\n                        (\n                        1\n                        ,\n                        1\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                         5\n                        Rect\n                        (\n                        5\n                        ,\n                        5\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                         6\n                        Rect\n                        (\n                        15\n                        ,\n                        15\n                        ,\n                        1\n                        ,\n                        1\n                        ),\n                         7\n                        Rect\n                        (\n                        2\n                        ,\n                        2\n                        ,\n                        1\n                        ,\n                        1\n                        ),\n                         8\n                        ]\n                         9\n                        10\n                        result\n                        =\n                        r\n                        .\n                        collideobjects\n                        (\n                        rects\n                        )\n                        # -> <rect(1, 1, 10, 10)>\n                        11\n                        print\n                        (\n                        result\n                        )\n                        12\n                        13\n                        class\n                        ObjectWithSomRectAttribute\n                        :\n                        14\n                        def\n                        __init__\n                        (\n                        self\n                        ,\n                        name\n                        ,\n                        collision_box\n                        ,\n                        draw_rect\n                        ):\n                        15\n                        self\n                        .\n                        name\n                        =\n                        name\n                        16\n                        self\n                        .\n                        draw_rect\n                        =\n                        draw_rect\n                        17\n                        self\n                        .\n                        collision_box\n                        =\n                        collision_box\n                        18\n                        19\n                        def\n                        __repr__\n                        (\n                        self\n                        ):\n                        20\n                        return\n                        f\n                        '<\n                        {\n                        self\n                        .\n                        __class__\n                        .\n                        __name__\n                        }\n                        (\"\n                        {\n                        self\n                        .\n                        name\n                        }\n                        \", \n                        {\n                        list\n                        (\n                        self\n                        .\n                        collision_box\n                        )\n                        }\n                        , \n                        {\n                        list\n                        (\n                        self\n                        .\n                        draw_rect\n                        )\n                        }\n                        )>'\n                        21\n                        22\n                        objects\n                        =\n                        [\n                        23\n                        ObjectWithSomRectAttribute\n                        (\n                        \"A\"\n                        ,\n                        Rect\n                        (\n                        15\n                        ,\n                        15\n                        ,\n                        1\n                        ,\n                        1\n                        ),\n                        Rect\n                        (\n                        150\n                        ,\n                        150\n                        ,\n                        50\n                        ,\n                        50\n                        )),\n                        24\n                        ObjectWithSomRectAttribute\n                        (\n                        \"B\"\n                        ,\n                        Rect\n                        (\n                        1\n                        ,\n                        1\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                        Rect\n                        (\n                        300\n                        ,\n                        300\n                        ,\n                        50\n                        ,\n                        50\n                        )),\n                        25\n                        ObjectWithSomRectAttribute\n                        (\n                        \"C\"\n                        ,\n                        Rect\n                        (\n                        5\n                        ,\n                        5\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                        Rect\n                        (\n                        200\n                        ,\n                        500\n                        ,\n                        50\n                        ,\n                        50\n                        )),\n                        26\n                        ]\n                        27\n                        28\n                        # collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object\n                        29\n                        collision\n                        =\n                        r\n                        .\n                        collideobjects\n                        (\n                        30\n                        objects\n                        ,\n                        key\n                        =\n                        lambda\n                        o\n                        :\n                        o\n                        .\n                        collision_box\n                        31\n                        )\n                        # -> <ObjectWithSomRectAttribute(\"B\", [1, 1, 10, 10], [300, 300, 50, 50])>\n                        32\n                        print\n                        (\n                        collision\n                        )\n                        33\n                        34\n                        screen_rect\n                        =\n                        r\n                        .\n                        collideobjects\n                        (\n                        objects\n                        ,\n                        key\n                        =\n                        lambda\n                        o\n                        :\n                        o\n                        .\n                        draw_rect\n                        )\n                        # -> None\n                        35\n                        print\n                        (\n                        screen_rect\n                        )\n                      \n\nNew in pygame 2.1.3."
- name: Rect.collideobjectsall
  id: ref/rect#pygame.Rect.collideobjectsall
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: Rect
  description: "collideobjectsall()\n\ntest if all objects in a list intersect\n\ncollideobjectsall(rect_list) -\\> objects\n\ncollideobjectsall(obj_list, key=func) -\\> objects\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave collideobjectsall feedback with authors](https://github.com/pygame/pygame/pull/3026)\n\nReturns a list of all the objects that contain rectangles that collide with the Rect. If no intersecting objects are found, an empty list is returned.\n\nIf key is given, then it should be a method taking an object from the list as input and returning a rect like object e.g. `lambda``obj:``obj.rectangle`. If an object has multiple attributes of type Rect then key could return one of them.\n\n                         1\n                        r\n                        =\n                        Rect\n                        (\n                        1\n                        ,\n                        1\n                        ,\n                        10\n                        ,\n                        10\n                        )\n                         2\n                         3\n                        rects\n                        =\n                        [\n                         4\n                        Rect\n                        (\n                        1\n                        ,\n                        1\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                         5\n                        Rect\n                        (\n                        5\n                        ,\n                        5\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                         6\n                        Rect\n                        (\n                        15\n                        ,\n                        15\n                        ,\n                        1\n                        ,\n                        1\n                        ),\n                         7\n                        Rect\n                        (\n                        2\n                        ,\n                        2\n                        ,\n                        1\n                        ,\n                        1\n                        ),\n                         8\n                        ]\n                         9\n                        10\n                        result\n                        =\n                        r\n                        .\n                        collideobjectsall\n                        (\n                        11\n                        rects\n                        12\n                        )\n                        # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]\n                        13\n                        print\n                        (\n                        result\n                        )\n                        14\n                        15\n                        class\n                        ObjectWithSomRectAttribute\n                        :\n                        16\n                        def\n                        __init__\n                        (\n                        self\n                        ,\n                        name\n                        ,\n                        collision_box\n                        ,\n                        draw_rect\n                        ):\n                        17\n                        self\n                        .\n                        name\n                        =\n                        name\n                        18\n                        self\n                        .\n                        draw_rect\n                        =\n                        draw_rect\n                        19\n                        self\n                        .\n                        collision_box\n                        =\n                        collision_box\n                        20\n                        21\n                        def\n                        __repr__\n                        (\n                        self\n                        ):\n                        22\n                        return\n                        f\n                        '<\n                        {\n                        self\n                        .\n                        __class__\n                        .\n                        __name__\n                        }\n                        (\"\n                        {\n                        self\n                        .\n                        name\n                        }\n                        \", \n                        {\n                        list\n                        (\n                        self\n                        .\n                        collision_box\n                        )\n                        }\n                        , \n                        {\n                        list\n                        (\n                        self\n                        .\n                        draw_rect\n                        )\n                        }\n                        )>'\n                        23\n                        24\n                        objects\n                        =\n                        [\n                        25\n                        ObjectWithSomRectAttribute\n                        (\n                        \"A\"\n                        ,\n                        Rect\n                        (\n                        1\n                        ,\n                        1\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                        Rect\n                        (\n                        300\n                        ,\n                        300\n                        ,\n                        50\n                        ,\n                        50\n                        )),\n                        26\n                        ObjectWithSomRectAttribute\n                        (\n                        \"B\"\n                        ,\n                        Rect\n                        (\n                        5\n                        ,\n                        5\n                        ,\n                        10\n                        ,\n                        10\n                        ),\n                        Rect\n                        (\n                        200\n                        ,\n                        500\n                        ,\n                        50\n                        ,\n                        50\n                        )),\n                        27\n                        ObjectWithSomRectAttribute\n                        (\n                        \"C\"\n                        ,\n                        Rect\n                        (\n                        15\n                        ,\n                        15\n                        ,\n                        1\n                        ,\n                        1\n                        ),\n                        Rect\n                        (\n                        150\n                        ,\n                        150\n                        ,\n                        50\n                        ,\n                        50\n                        )),\n                        28\n                        ]\n                        29\n                        30\n                        # collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object\n                        31\n                        collisions\n                        =\n                        r\n                        .\n                        collideobjectsall\n                        (\n                        32\n                        objects\n                        ,\n                        key\n                        =\n                        lambda\n                        o\n                        :\n                        o\n                        .\n                        collision_box\n                        33\n                        )\n                        # -> [<ObjectWithSomRectAttribute(\"A\", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute(\"B\", [5, 5, 10, 10], [200, 500, 50, 50])>]\n                        34\n                        print\n                        (\n                        collisions\n                        )\n                        35\n                        36\n                        screen_rects\n                        =\n                        r\n                        .\n                        collideobjectsall\n                        (\n                        objects\n                        ,\n                        key\n                        =\n                        lambda\n                        o\n                        :\n                        o\n                        .\n                        draw_rect\n                        )\n                        # -> []\n                        37\n                        print\n                        (\n                        screen_rects\n                        )\n                      \n\nNew in pygame 2.1.3."
- name: Rect.collidepoint
  id: ref/rect#pygame.Rect.collidepoint
  summary: Returns true if the given point is inside the rectangle
  belongs_to: Rect
  description: |-
    collidepoint()

    test if a point is inside a rectangle

    collidepoint(x, y) -\> bool

    collidepoint((x,y)) -\> bool

    Returns true if the given point is inside the rectangle. A point along the right or bottom edge is not considered to be inside the rectangle.

    Note

    For collision detection between a rect and a line the [`clipline()`](#pygame.Rect.clipline "pygame.Rect.clipline") method can be used.
- name: Rect.colliderect
  id: ref/rect#pygame.Rect.colliderect
  summary: Returns true if any portion of either rectangle overlap (except the top+bottom or left+right edges)
  belongs_to: Rect
  description: |-
    colliderect()

    test if two rectangles overlap

    colliderect(Rect) -\> bool

    Returns true if any portion of either rectangle overlap (except the top+bottom or left+right edges).

    Note

    For collision detection between a rect and a line the [`clipline()`](#pygame.Rect.clipline "pygame.Rect.clipline") method can be used.
- name: Rect.contains
  id: ref/rect#pygame.Rect.contains
  summary: Returns true when the argument is completely inside the Rect
  belongs_to: Rect
  description: |-
    contains()

    test if one rectangle is inside another

    contains(Rect) -\> bool

    Returns true when the argument is completely inside the Rect.
- name: Rect.copy
  id: ref/rect#pygame.Rect.copy
  summary: Returns a new rectangle having the same position and size as the original
  belongs_to: Rect
  description: |-
    copy()

    copy the rectangle

    copy() -\> Rect

    Returns a new rectangle having the same position and size as the original.

    New in pygame 1.9
- name: Rect.fit
  id: ref/rect#pygame.Rect.fit
  summary: Returns a new rectangle that is moved and resized to fit another
  belongs_to: Rect
  description: |-
    fit()

    resize and move a rectangle with aspect ratio

    fit(Rect) -\> Rect

    Returns a new rectangle that is moved and resized to fit another. The aspect ratio of the original Rect is preserved, so the new rectangle may be smaller than the target in either width or height.
- name: Rect.inflate
  id: ref/rect#pygame.Rect.inflate
  summary: Returns a new rectangle with the size changed by the given offset
  belongs_to: Rect
  description: |-
    inflate()

    grow or shrink the rectangle size

    inflate(x, y) -\> Rect

    Returns a new rectangle with the size changed by the given offset. The rectangle remains centered around its current center. Negative values will shrink the rectangle. Note, uses integers, if the offset given is too small(\< 2 \> -2), center will be off.
- name: Rect.inflate_ip
  id: ref/rect#pygame.Rect.inflate_ip
  summary: Same as the Rect.inflate() method, but operates in place
  belongs_to: Rect
  description: |-
    inflate_ip()

    grow or shrink the rectangle size, in place

    inflate_ip(x, y) -\> None

    Same as the `Rect.inflate()` method, but operates in place.
- name: Rect.move
  id: ref/rect#pygame.Rect.move
  summary: Returns a new rectangle that is moved by the given offset
  belongs_to: Rect
  description: |-
    move()

    moves the rectangle

    move(x, y) -\> Rect

    Returns a new rectangle that is moved by the given offset. The x and y arguments can be any integer value, positive or negative.
- name: Rect.move_ip
  id: ref/rect#pygame.Rect.move_ip
  summary: Same as the Rect.move() method, but operates in place
  belongs_to: Rect
  description: |-
    move_ip()

    moves the rectangle, in place

    move_ip(x, y) -\> None

    Same as the `Rect.move()` method, but operates in place.
- name: Rect.normalize
  id: ref/rect#pygame.Rect.normalize
  summary: This will flip the width or height of a rectangle if it has a negative size
  belongs_to: Rect
  description: |-
    normalize()

    correct negative sizes

    normalize() -\> None

    This will flip the width or height of a rectangle if it has a negative size. The rectangle will remain in the same place, with only the sides swapped.
- name: Rect.scale_by
  id: ref/rect#pygame.Rect.scale_by
  summary: Returns a new rectangle with the size scaled by the given multipliers
  belongs_to: Rect
  description: |-
    scale_by()

    scale the rectangle by given a multiplier

    scale_by(scalar) -\> Rect

    scale_by(scalex, scaley) -\> Rect

    Returns a new rectangle with the size scaled by the given multipliers. The rectangle remains centered around its current center. A single scalar or separate width and height scalars are allowed. Values above one will increase the size of the rectangle, whereas values between zero and one will decrease the size of the rectangle.
- name: Rect.scale_by_ip
  id: ref/rect#pygame.Rect.scale_by_ip
  summary: Same as the Rect.scale_by() method, but operates in place
  belongs_to: Rect
  description: |-
    scale_by_ip()

    grow or shrink the rectangle size, in place

    scale_by_ip(scalar) -\> None

    scale_by_ip(scalex, scaley) -\> None

    Same as the `Rect.scale_by()` method, but operates in place.
- name: Rect.union
  id: ref/rect#pygame.Rect.union
  summary: Returns a new rectangle that completely covers the area of the two provided rectangles
  belongs_to: Rect
  description: |-
    union()

    joins two rectangles into one

    union(Rect) -\> Rect

    Returns a new rectangle that completely covers the area of the two provided rectangles. There may be area inside the new Rect that is not covered by the originals.
- name: Rect.union_ip
  id: ref/rect#pygame.Rect.union_ip
  summary: Same as the Rect.union() method, but operates in place
  belongs_to: Rect
  description: |-
    union_ip()

    joins two rectangles into one, in place

    union_ip(Rect) -\> None

    Same as the `Rect.union()` method, but operates in place.
- name: Rect.unionall
  id: ref/rect#pygame.Rect.unionall
  summary: Returns the union of one rectangle with a sequence of many rectangles
  belongs_to: Rect
  description: |-
    unionall()

    the union of many rectangles

    unionall(Rect_sequence) -\> Rect

    Returns the union of one rectangle with a sequence of many rectangles.
- name: Rect.unionall_ip
  id: ref/rect#pygame.Rect.unionall_ip
  summary: The same as the Rect.unionall() method, but operates in place
  belongs_to: Rect
  description: |-
    unionall_ip()

    the union of many rectangles, in place

    unionall_ip(Rect_sequence) -\> None

    The same as the `Rect.unionall()` method, but operates in place.
- name: Rect.update
  id: ref/rect#pygame.Rect.update
  summary: Sets the position and size of the rectangle, in place
  belongs_to: Rect
  description: |-
    update()

    sets the position and size of the rectangle

    update(left, top, width, height) -\> None

    update((left, top), (width, height)) -\> None

    update(object) -\> None

    Sets the position and size of the rectangle, in place. See parameters for [`pygame.Rect()`](#pygame.Rect) for the parameters of this function.

    New in pygame 2.0.1.
- name: register_quit
  id: ref/pygame#pygame.register_quit
  summary: When pygame.quit() is called, all registered quit functions are called
  belongs_to: module-pygame
  description: |-
    pygame.register_quit()

    register a function to be called when pygame quits

    register_quit(callable) -\> None

    When [`pygame.quit()`](#pygame.quit) is called, all registered quit functions are called. Pygame modules do this automatically when they are initializing, so this function will rarely be needed.
- name: scrap
  id: ref/scrap
  summary: pygame.scrap pygame module for clipboard support
  description: "pygame.scrap  \npygame module for clipboard support.\n\n**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.\n\nThe scrap module is for transferring data to/from the clipboard. This allows for cutting and pasting data between pygame and other applications. Some basic data (MIME) types are defined and registered:\n\n``` python\npygame         string\nconstant        value        description\n--------------------------------------------------\nSCRAP_TEXT   \"text/plain\"    plain text\nSCRAP_BMP    \"image/bmp\"     BMP encoded image data\nSCRAP_PBM    \"image/pbm\"     PBM encoded image data\nSCRAP_PPM    \"image/ppm\"     PPM encoded image data\n```\n\n`pygame.SCRAP_PPM`, `pygame.SCRAP_PBM` and `pygame.SCRAP_BMP` are suitable for surface buffers to be shared with other applications. `pygame.SCRAP_TEXT` is an alias for the plain text clipboard type.\n\nDepending on the platform, additional types are automatically registered when data is placed into the clipboard to guarantee a consistent sharing behaviour with other applications. The following listed types can be used as strings to be passed to the respective [`pygame.scrap`](#module-pygame.scrap) module functions.\n\nFor **Windows** platforms, these additional types are supported automatically and resolve to their internal definitions:\n\n``` python\n\"text/plain;charset=utf-8\"   UTF-8 encoded text\n\"audio/wav\"                  WAV encoded audio\n\"image/tiff\"                 TIFF encoded image data\n```\n\nFor **X11** platforms, these additional types are supported automatically and resolve to their internal definitions:\n\n``` python\n\"text/plain;charset=utf-8\"   UTF-8 encoded text\n\"UTF8_STRING\"                UTF-8 encoded text\n\"COMPOUND_TEXT\"              COMPOUND text\n```\n\nUser defined types can be used, but the data might not be accessible by other applications unless they know what data type to look for. Example: Data placed into the clipboard by `pygame.scrap.put(\"my_data_type\",`` ``byte_data)` can only be accessed by applications which query the clipboard for the `\"my_data_type\"` data type.\n\nFor an example of how the scrap module works refer to the examples page ([`pygame.examples.scrap_clipboard.main()`](examples#pygame.examples.scrap_clipboard.main)) or the code directly in GitHub ([pygame/examples/scrap_clipboard.py](https://github.com/pygame/pygame/blob/main/examples/scrap_clipboard.py)).\n\nNew in pygame 1.8.\n\nNote\n\nThe scrap module is currently only supported for Windows, X11 and Mac OS X. On Mac OS X only text works at the moment - other types may be supported in future releases.\n\npygame.scrap.init()  \nInitializes the scrap module.\n\ninit() -\\> None\n\nInitialize the scrap module.\n\nRaises  \n[**pygame.error**](pygame#pygame.error) -- if unable to initialize scrap module\n\nNote\n\nThe scrap module requires [`pygame.display.set_mode()`](display#pygame.display.set_mode) be called before being initialized.\n\npygame.scrap.get_init()  \nReturns True if the scrap module is currently initialized.\n\nget_init() -\\> bool\n\nGets the scrap module's initialization state.\n\nReturns  \n`True` if the [`pygame.scrap`](#module-pygame.scrap) module is currently initialized, `False` otherwise\n\nReturn type  \nbool\n\nNew in pygame 1.9.5.\n\npygame.scrap.get()  \nGets the data for the specified type from the clipboard.\n\nget(type) -\\> bytes \\| None\n\nRetrieves the data for the specified type from the clipboard. The data is returned as a byte string and might need further processing (such as decoding to Unicode).\n\nParameters  \n**type** (*string*) -- data type to retrieve from the clipboard\n\nReturns  \ndata (bytes object) for the given type identifier or `None` if no data for the given type is available\n\nReturn type  \nbytes \\| None\n\n``` python\ntext = pygame.scrap.get(pygame.SCRAP_TEXT)\nif text:\n    print(\"There is text in the clipboard.\")\nelse:\n    print(\"There does not seem to be text in the clipboard.\")\n```\n\npygame.scrap.get_types()  \nGets a list of the available clipboard types.\n\nget_types() -\\> list\n\nGets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the [`pygame.scrap.get()`](#pygame.scrap.get) method to get the clipboard content of the specific type.\n\nReturns  \nlist of strings of the available clipboard data types, if there is no data in the clipboard an empty list is returned\n\nReturn type  \nlist\n\n``` python\nfor t in pygame.scrap.get_types():\n    if \"text\" in t:\n        # There is some content with the word \"text\" in its type string.\n        print(pygame.scrap.get(t))\n```\n\npygame.scrap.put()  \nPlaces data into the clipboard.\n\nput(type, data) -\\> None\n\nPlaces data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`, `pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user defined string identifier.\n\nParameters  \n- **type** (*string*) -- type identifier of the data to be placed into the clipboard\n\n- **data** (*bytes*) -- data to be place into the clipboard, a bytes object\n\nRaises  \n[**pygame.error**](pygame#pygame.error) -- if unable to put the data into the clipboard\n\n``` python\nwith open(\"example.bmp\", \"rb\") as fp:\n    pygame.scrap.put(pygame.SCRAP_BMP, fp.read())\n# The image data is now on the clipboard for other applications to access\n# it.\npygame.scrap.put(pygame.SCRAP_TEXT, b\"A text to copy\")\npygame.scrap.put(\"Plain text\", b\"Data for user defined type 'Plain text'\")\n```\n\npygame.scrap.contains()  \nChecks whether data for a given type is available in the clipboard.\n\ncontains(type) -\\> bool\n\nChecks whether data for the given type is currently available in the clipboard.\n\nParameters  \n**type** (*string*) -- data type to check availability of\n\nReturns  \n`True` if data for the passed type is available in the clipboard, `False` otherwise\n\nReturn type  \nbool\n\n``` python\nif pygame.scrap.contains(pygame.SCRAP_TEXT):\n    print(\"There is text in the clipboard.\")\nif pygame.scrap.contains(\"own_data_type\"):\n    print(\"There is stuff in the clipboard.\")\n```\n\npygame.scrap.lost()  \nIndicates if the clipboard ownership has been lost by the pygame application.\n\nlost() -\\> bool\n\nIndicates if the clipboard ownership has been lost by the pygame application.\n\nReturns  \n`True`, if the clipboard ownership has been lost by the pygame application, `False` if the pygame application still owns the clipboard\n\nReturn type  \nbool\n\n``` python\nif pygame.scrap.lost():\n    print(\"The clipboard is in use by another application.\")\n```\n\npygame.scrap.set_mode()  \nSets the clipboard access mode.\n\nset_mode(mode) -\\> None\n\nSets the access mode for the clipboard. This is only of interest for X11 environments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse selections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available. Setting the mode to `pygame.SCRAP_SELECTION` in other environments will not change the mode from `pygame.SCRAP_CLIPBOARD`.\n\nParameters  \n**mode** -- access mode, supported values are `pygame.SCRAP_CLIPBOARD` and `pygame.SCRAP_SELECTION` (`pygame.SCRAP_SELECTION` only has an effect when used on X11 platforms)\n\nRaises  \n**ValueError** -- if the `mode` parameter is not `pygame.SCRAP_CLIPBOARD` or `pygame.SCRAP_SELECTION`\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/scrap.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/scrap.html](https://www.pygame.org/docs/ref/scrap.html)"
- name: scrap.contains
  id: ref/scrap#pygame.scrap.contains
  summary: Checks whether data for a given type is available in the clipboard
  belongs_to: module-scrap
  description: |-
    pygame.scrap.contains()

    Checks whether data for a given type is available in the clipboard.

    contains(type) -\> bool

    Checks whether data for the given type is currently available in the clipboard.

    Parameters

    **type** (*string*) -- data type to check availability of

    Returns

    `True` if data for the passed type is available in the clipboard, `False` otherwise

    Return type

    bool

    ``` python
    if pygame.scrap.contains(pygame.SCRAP_TEXT):
        print("There is text in the clipboard.")
    if pygame.scrap.contains("own_data_type"):
        print("There is stuff in the clipboard.")
    ```
- name: scrap.get
  id: ref/scrap#pygame.scrap.get
  summary: Gets the data for the specified type from the clipboard
  belongs_to: module-scrap
  description: |-
    pygame.scrap.get()

    Gets the data for the specified type from the clipboard.

    get(type) -\> bytes \| None

    Retrieves the data for the specified type from the clipboard. The data is returned as a byte string and might need further processing (such as decoding to Unicode).

    Parameters

    **type** (*string*) -- data type to retrieve from the clipboard

    Returns

    data (bytes object) for the given type identifier or `None` if no data for the given type is available

    Return type

    bytes \| None

    ``` python
    text = pygame.scrap.get(pygame.SCRAP_TEXT)
    if text:
        print("There is text in the clipboard.")
    else:
        print("There does not seem to be text in the clipboard.")
    ```
- name: scrap.get_init
  id: ref/scrap#pygame.scrap.get_init
  summary: Returns True if the scrap module is currently initialized
  belongs_to: module-scrap
  description: |-
    pygame.scrap.get_init()

    Returns True if the scrap module is currently initialized.

    get_init() -\> bool

    Gets the scrap module's initialization state.

    Returns

    `True` if the [`pygame.scrap`](#module-pygame.scrap) module is currently initialized, `False` otherwise

    Return type

    bool

    New in pygame 1.9.5.
- name: scrap.get_types
  id: ref/scrap#pygame.scrap.get_types
  summary: Gets a list of the available clipboard types
  belongs_to: module-scrap
  description: |-
    pygame.scrap.get_types()

    Gets a list of the available clipboard types.

    get_types() -\> list

    Gets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the [`pygame.scrap.get()`](#pygame.scrap.get) method to get the clipboard content of the specific type.

    Returns

    list of strings of the available clipboard data types, if there is no data in the clipboard an empty list is returned

    Return type

    list

    ``` python
    for t in pygame.scrap.get_types():
        if "text" in t:
            # There is some content with the word "text" in its type string.
            print(pygame.scrap.get(t))
    ```
- name: scrap.init
  id: ref/scrap#pygame.scrap.init
  summary: Initializes the scrap module
  belongs_to: module-scrap
  description: |-
    pygame.scrap.init()

    Initializes the scrap module.

    init() -\> None

    Initialize the scrap module.

    Raises

    [**pygame.error**](pygame#pygame.error) -- if unable to initialize scrap module

    Note

    The scrap module requires [`pygame.display.set_mode()`](display#pygame.display.set_mode) be called before being initialized.
- name: scrap.lost
  id: ref/scrap#pygame.scrap.lost
  summary: Indicates if the clipboard ownership has been lost by the pygame application
  belongs_to: module-scrap
  description: |-
    pygame.scrap.lost()

    Indicates if the clipboard ownership has been lost by the pygame application.

    lost() -\> bool

    Indicates if the clipboard ownership has been lost by the pygame application.

    Returns

    `True`, if the clipboard ownership has been lost by the pygame application, `False` if the pygame application still owns the clipboard

    Return type

    bool

    ``` python
    if pygame.scrap.lost():
        print("The clipboard is in use by another application.")
    ```
- name: scrap.put
  id: ref/scrap#pygame.scrap.put
  summary: Places data into the clipboard
  belongs_to: module-scrap
  description: |-
    pygame.scrap.put()

    Places data into the clipboard.

    put(type, data) -\> None

    Places data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined `pygame.SCRAP_PBM`, `pygame.SCRAP_PPM`, `pygame.SCRAP_BMP` or `pygame.SCRAP_TEXT` values or a user defined string identifier.

    Parameters

    - **type** (*string*) -- type identifier of the data to be placed into the clipboard

    - **data** (*bytes*) -- data to be place into the clipboard, a bytes object

    Raises

    [**pygame.error**](pygame#pygame.error) -- if unable to put the data into the clipboard

    ``` python
    with open("example.bmp", "rb") as fp:
        pygame.scrap.put(pygame.SCRAP_BMP, fp.read())
    # The image data is now on the clipboard for other applications to access
    # it.
    pygame.scrap.put(pygame.SCRAP_TEXT, b"A text to copy")
    pygame.scrap.put("Plain text", b"Data for user defined type 'Plain text'")
    ```
- name: scrap.set_mode
  id: ref/scrap#pygame.scrap.set_mode
  summary: Sets the clipboard access mode
  belongs_to: module-scrap
  description: "pygame.scrap.set_mode()\n\nSets the clipboard access mode.\n\nset_mode(mode) -\\> None\n\nSets the access mode for the clipboard. This is only of interest for X11 environments where clipboard modes `pygame.SCRAP_SELECTION` (for mouse selections) and `pygame.SCRAP_CLIPBOARD` (for the clipboard) are available. Setting the mode to `pygame.SCRAP_SELECTION` in other environments will not change the mode from `pygame.SCRAP_CLIPBOARD`.\n\nParameters\n\n**mode** -- access mode, supported values are `pygame.SCRAP_CLIPBOARD` and `pygame.SCRAP_SELECTION` (`pygame.SCRAP_SELECTION` only has an effect when used on X11 platforms)\n\nRaises\n\n**ValueError** -- if the `mode` parameter is not `pygame.SCRAP_CLIPBOARD` or `pygame.SCRAP_SELECTION`\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/scrap.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/scrap.html](https://www.pygame.org/docs/ref/scrap.html)"
- name: sdl2_video
  id: ref/sdl2_video
  summary: This module isn't ready for prime time yet, it's still in development
  description: "pygame.sdl2_video  \nWarning\n\nThis module isn't ready for prime time yet, it's still in development. These docs are primarily meant to help the pygame developers and super-early adopters who are in communication with the developers. This API will change.\n\nExperimental pygame module for porting new SDL video systems\n\npygame.\\_sdl2.video.Window  \npygame object that represents a window\n\nWindow(title=\"pygame\", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -\\> Window\n\nclassmethod from_display_module()  \nCreates window using window created by pygame.display.set_mode().\n\nfrom_display_module() -\\> Window\n\nclassmethod from_window()  \nCreate Window from another window. Could be from another UI toolkit.\n\nfrom_window(other) -\\> Window\n\ngrab  \nGets or sets whether the mouse is confined to the window.\n\ngrab -\\> bool\n\nrelative_mouse  \nGets or sets the window's relative mouse motion state.\n\nrelative_mouse -\\> bool\n\nset_windowed()  \nEnable windowed mode (exit fullscreen).\n\nset_windowed() -\\> None\n\nset_fullscreen()  \nEnter fullscreen.\n\nset_fullscreen(desktop=False) -\\> None\n\ntitle  \nGets or sets whether the window title.\n\ntitle -\\> string\n\ndestroy()  \nDestroys the window.\n\ndestroy() -\\> None\n\nhide()  \nHide the window.\n\nhide() -\\> None\n\nshow()  \nShow the window.\n\nshow() -\\> None\n\nfocus()  \nRaise the window above other windows and set the input focus. The \"input_only\" argument is only supported on X11.\n\nfocus(input_only=False) -\\> None\n\nrestore()  \nRestore the size and position of a minimized or maximized window.\n\nrestore() -\\> None\n\nmaximize()  \nMaximize the window.\n\nmaximize() -\\> None\n\nminimize()  \nMinimize the window.\n\nmaximize() -\\> None\n\nresizable  \nGets and sets whether the window is resizable.\n\nresizable -\\> bool\n\nborderless  \nAdd or remove the border from the window.\n\nborderless -\\> bool\n\nset_icon()  \nSet the icon for the window.\n\nset_icon(surface) -\\> None\n\nid  \nGet the unique window ID. \\*Read-only\\*\n\nid -\\> int\n\nsize  \nGets and sets the window size.\n\nsize -\\> (int, int)\n\nposition  \nGets and sets the window position.\n\nposition -\\> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED\n\nopacity  \nGets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).\n\nopacity -\\> float\n\ndisplay_index  \nGet the index of the display that owns the window. \\*Read-only\\*\n\ndisplay_index -\\> int\n\nset_modal_for()  \nSet the window as a modal for a parent window. This function is only supported on X11.\n\nset_modal_for(Window) -\\> None\n\npygame.\\_sdl2.video.Texture  \npygame object that representing a Texture.\n\nTexture(renderer, size, depth=0, static=False, streaming=False, target=False) -\\> Texture\n\nstatic from_surface()  \nCreate a texture from an existing surface.\n\nfrom_surface(renderer, surface) -\\> Texture\n\nrenderer  \nGets the renderer associated with the Texture. \\*Read-only\\*\n\nrenderer -\\> Renderer\n\nwidth  \nGets the width of the Texture. \\*Read-only\\*\n\nwidth -\\> int\n\nheight  \nGets the height of the Texture. \\*Read-only\\*\n\nheight -\\> int\n\nalpha  \nGets and sets an additional alpha value multiplied into render copy operations.\n\nalpha -\\> int\n\nblend_mode  \nGets and sets the blend mode for the Texture.\n\nblend_mode -\\> int\n\ncolor  \nGets and sets an additional color value multiplied into render copy operations.\n\ncolor -\\> color\n\nget_rect()  \nGet the rectangular area of the texture.\n\nget_rect(\\*\\*kwargs) -\\> Rect\n\ndraw()  \nCopy a portion of the texture to the rendering target.\n\ndraw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -\\> None\n\nupdate()  \nUpdate the texture with a Surface. WARNING: Slow operation, use sparingly.\n\nupdate(surface, area=None) -\\> None\n\npygame.\\_sdl2.video.Image  \nEasy way to use a portion of a Texture without worrying about srcrect all the time.\n\nImage(textureOrImage, srcrect=None) -\\> Image\n\nget_rect()  \nGet the rectangular area of the Image.\n\nget_rect() -\\> Rect\n\ndraw()  \nCopy a portion of the Image to the rendering target.\n\ndraw(srcrect=None, dstrect=None) -\\> None\n\nangle  \nGets and sets the angle the Image draws itself with.\n\nangle -\\> float\n\norigin  \nGets and sets the origin. Origin=None means the Image will be rotated around its center.\n\norigin -\\> (float, float) or None.\n\nflip_x  \nGets and sets whether the Image is flipped on the x axis.\n\nflip_x -\\> bool\n\nflip_y  \nGets and sets whether the Image is flipped on the y axis.\n\nflip_y -\\> bool\n\ncolor  \nGets and sets the Image color modifier.\n\ncolor -\\> Color\n\nalpha  \nGets and sets the Image alpha modifier.\n\nalpha -\\> float\n\nblend_mode  \nGets and sets the blend mode for the Image.\n\nblend_mode -\\> int\n\ntexture  \nGets and sets the Texture the Image is based on.\n\ntexture -\\> Texture\n\nsrcrect  \nGets and sets the Rect the Image is based on.\n\nsrcrect -\\> Rect\n\npygame.\\_sdl2.video.Renderer  \nCreate a 2D rendering context for a window.\n\nRenderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -\\> Renderer\n\nclassmethod from_window()  \nEasy way to create a Renderer.\n\nfrom_window(window) -\\> Renderer\n\ndraw_blend_mode  \nGets and sets the blend mode used by the drawing functions.\n\ndraw_blend_mode -\\> int\n\ndraw_color  \nGets and sets the color used by the drawing functions.\n\ndraw_color -\\> Color\n\nclear()  \nClear the current rendering target with the drawing color.\n\nclear() -\\> None\n\npresent()  \nUpdates the screen with any new rendering since previous call.\n\npresent() -\\> None\n\nget_viewport()  \nReturns the drawing area on the target.\n\nget_viewport() -\\> Rect\n\nset_viewport()  \nSet the drawing area on the target. If area is None, the entire target will be used.\n\nset_viewport(area) -\\> None\n\nlogical_size  \nGets and sets the logical size.\n\nlogical_size -\\> (int width, int height)\n\nscale  \nGets and sets the scale.\n\nscale -\\> (float x_scale, float y_scale)\n\ntarget  \nGets and sets the render target. None represents the default target (the renderer).\n\ntarget -\\> Texture or None\n\nblit()  \nFor compatibility purposes. Textures created by different Renderers cannot be shared!\n\nblit(source, dest, area=None, special_flags=0)-\\> Rect\n\ndraw_line()  \nDraws a line.\n\ndraw_line(p1, p2) -\\> None\n\ndraw_point()  \nDraws a point.\n\ndraw_point(point) -\\> None\n\ndraw_rect()  \nDraws a rectangle.\n\ndraw_rect(rect)-\\> None\n\nfill_rect()  \nFills a rectangle.\n\nfill_rect(rect)-\\> None\n\nto_surface()  \nRead pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.\n\nto_surface(surface=None, area=None)-\\> Surface\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sdl2_video.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sdl2_video.html](https://www.pygame.org/docs/ref/sdl2_video.html)"
- name: set_error
  id: ref/pygame#pygame.set_error
  summary: SDL maintains an internal error message
  belongs_to: module-pygame
  description: |-
    pygame.set_error()

    set the current error message

    set_error(error_msg) -\> None

    SDL maintains an internal error message. This message will usually be given to you when [`pygame.error()`](#pygame.error) is raised, so this function will rarely be needed.
- name: sndarray
  id: ref/sndarray
  summary: Functions to convert between NumPy arrays and Sound objects
  description: "pygame.sndarray  \npygame module for accessing sound sample data\n\nFunctions to convert between NumPy arrays and Sound objects. This module will only be functional when pygame can use the external NumPy package. If NumPy can't be imported, `surfarray` becomes a `MissingModule` object.\n\nSound data is made of thousands of samples per second, and each sample is the amplitude of the wave at a particular moment in time. For example, in 22-kHz format, element number 5 of the array is the amplitude of the wave after 5/22000 seconds.\n\nThe arrays are indexed by the `X` axis first, followed by the `Y` axis. Each sample is an 8-bit or 16-bit integer, depending on the data format. A stereo sound file has two values per sample, while a mono sound file only has one.\n\npygame.sndarray.array()  \ncopy Sound samples into an array\n\narray(Sound) -\\> array\n\nCreates a new array for the sound data and copies the samples. The array will always be in the format returned from `pygame.mixer.get_init()`.\n\npygame.sndarray.samples()  \nreference Sound samples into an array\n\nsamples(Sound) -\\> array\n\nCreates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from `pygame.mixer.get_init()`.\n\npygame.sndarray.make_sound()  \nconvert an array into a Sound object\n\nmake_sound(array) -\\> Sound\n\nCreate a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format.\n\npygame.sndarray.use_arraytype()  \nSets the array system to be used for sound arrays\n\nuse_arraytype (arraytype) -\\> None\n\nDEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is `'numpy'`. Other values will raise ValueError. Using this function will raise a `DeprecationWarning`. .. \\## pygame.sndarray.use_arraytype \\##\n\npygame.sndarray.get_arraytype()  \nGets the currently active array type.\n\nget_arraytype () -\\> str\n\nDEPRECATED: Returns the currently active array type. This will be a value of the `get_arraytypes()` tuple and indicates which type of array module is used for the array creation. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\npygame.sndarray.get_arraytypes()  \nGets the array system types currently supported.\n\nget_arraytypes () -\\> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the [`pygame.sndarray.use_arraytype()`](#pygame.sndarray.use_arraytype) () method. If no supported array system could be found, None will be returned. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sndarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sndarray.html](https://www.pygame.org/docs/ref/sndarray.html)"
- name: sndarray.array
  id: ref/sndarray#pygame.sndarray.array
  summary: Creates a new array for the sound data and copies the samples
  belongs_to: module-sndarray
  description: |-
    pygame.sndarray.array()

    copy Sound samples into an array

    array(Sound) -\> array

    Creates a new array for the sound data and copies the samples. The array will always be in the format returned from `pygame.mixer.get_init()`.
- name: sndarray.get_arraytype
  id: ref/sndarray#pygame.sndarray.get_arraytype
  summary: Gets the currently active array type
  belongs_to: module-sndarray
  description: |-
    pygame.sndarray.get_arraytype()

    Gets the currently active array type.

    get_arraytype () -\> str

    DEPRECATED: Returns the currently active array type. This will be a value of the `get_arraytypes()` tuple and indicates which type of array module is used for the array creation. Using this function will raise a `DeprecationWarning`.

    New in pygame 1.8.
- name: sndarray.get_arraytypes
  id: ref/sndarray#pygame.sndarray.get_arraytypes
  summary: Gets the array system types currently supported
  belongs_to: module-sndarray
  description: "pygame.sndarray.get_arraytypes()\n\nGets the array system types currently supported.\n\nget_arraytypes () -\\> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the [`pygame.sndarray.use_arraytype()`](#pygame.sndarray.use_arraytype) () method. If no supported array system could be found, None will be returned. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sndarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sndarray.html](https://www.pygame.org/docs/ref/sndarray.html)"
- name: sndarray.make_sound
  id: ref/sndarray#pygame.sndarray.make_sound
  summary: Create a new playable Sound object from an array
  belongs_to: module-sndarray
  description: |-
    pygame.sndarray.make_sound()

    convert an array into a Sound object

    make_sound(array) -\> Sound

    Create a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format.
- name: sndarray.samples
  id: ref/sndarray#pygame.sndarray.samples
  summary: Creates a new array that directly references the samples in a Sound object
  belongs_to: module-sndarray
  description: |-
    pygame.sndarray.samples()

    reference Sound samples into an array

    samples(Sound) -\> array

    Creates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from `pygame.mixer.get_init()`.
- name: sndarray.use_arraytype
  id: ref/sndarray#pygame.sndarray.use_arraytype
  summary: 'DEPRECATED: Uses the requested array type for the module functions'
  belongs_to: module-sndarray
  description: |-
    pygame.sndarray.use_arraytype()

    Sets the array system to be used for sound arrays

    use_arraytype (arraytype) -\> None

    DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is `'numpy'`. Other values will raise ValueError. Using this function will raise a `DeprecationWarning`. .. \## pygame.sndarray.use_arraytype \##
- name: sprite
  id: ref/sprite
  summary: This module contains several simple classes to be used within games
  description: "pygame.sprite  \npygame module with basic game object classes\n\nThis module contains several simple classes to be used within games. There is the main Sprite class and several Group classes that contain Sprites. The use of these classes is entirely optional when using pygame. The classes are fairly lightweight and only provide a starting place for the code that is common to most games.\n\nThe Sprite class is intended to be used as a base class for the different types of objects in the game. There is also a base Group class that simply stores sprites. A game could create new types of Group classes that operate on specially customized Sprite instances they contain.\n\nThe basic Group class can draw the Sprites it contains to a Surface. The `Group.draw()` method requires that each Sprite have a `Surface.image` attribute and a `Surface.rect`. The `Group.clear()` method requires these same attributes, and can be used to erase all the Sprites with background. There are also more advanced Groups: `pygame.sprite.RenderUpdates()` and `pygame.sprite.OrderedUpdates()`.\n\nLastly, this module contains several collision functions. These help find sprites inside multiple groups that have intersecting bounding rectangles. To find the collisions, the Sprites are required to have a `Surface.rect` attribute assigned.\n\nThe groups are designed for high efficiency in removing and adding Sprites to them. They also allow cheap testing to see if a Sprite already exists in a Group. A given Sprite can exist in any number of groups. A game could use some groups to control object rendering, and a completely separate set of groups to control interaction or player movement. Instead of adding type attributes or bools to a derived Sprite class, consider keeping the Sprites inside organized Groups. This will allow for easier lookup later in the game.\n\nSprites and Groups manage their relationships with the `add()` and `remove()` methods. These methods can accept a single or multiple targets for membership. The default initializers for these classes also takes a single or list of targets for initial membership. It is safe to repeatedly add and remove the same Sprite from a Group.\n\nWhile it is possible to design sprite and group classes that don't derive from the Sprite and AbstractGroup classes below, it is strongly recommended that you extend those when you add a Sprite or Group class.\n\nSprites are not thread safe. So lock them yourself if using threads.\n\npygame.sprite.Sprite  \nSimple base class for visible game objects.\n\nSprite(\\*groups) -\\> Sprite\n\nThe base class for visible game objects. Derived classes will want to override the `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect` attributes. The initializer can accept any number of Group instances to be added to.\n\nWhen subclassing the Sprite, be sure to call the base initializer before adding the Sprite to Groups. For example:\n\n    class Block(pygame.sprite.Sprite):\n\n        # Constructor. Pass in the color of the block,\n        # and its x and y position\n        def __init__(self, color, width, height):\n           # Call the parent class (Sprite) constructor\n           pygame.sprite.Sprite.__init__(self)\n\n           # Create an image of the block, and fill it with a color.\n           # This could also be an image loaded from the disk.\n           self.image = pygame.Surface([width, height])\n           self.image.fill(color)\n\n           # Fetch the rectangle object that has the dimensions of the image\n           # Update the position of this object by setting the values of rect.x and rect.y\n           self.rect = self.image.get_rect()\n\nupdate()  \nmethod to control sprite behavior\n\nupdate(\\*args, \\*\\*kwargs) -\\> None\n\nThe default implementation of this method does nothing; it's just a convenient \"hook\" that you can override. This method is called by `Group.update()` with whatever arguments you give it.\n\nThere is no need to use this method if not using the convenience method by the same name in the Group class.\n\nadd()  \nadd the sprite to groups\n\nadd(\\*groups) -\\> None\n\nAny number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.\n\nremove()  \nremove the sprite from groups\n\nremove(\\*groups) -\\> None\n\nAny number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.\n\nkill()  \nremove the Sprite from all Groups\n\nkill() -\\> None\n\nThe Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups.\n\nalive()  \ndoes the sprite belong to any groups\n\nalive() -\\> bool\n\nReturns True when the Sprite belongs to one or more Groups.\n\ngroups()  \nlist of Groups that contain this Sprite\n\ngroups() -\\> group_list\n\nReturn a list of all the Groups that contain this Sprite.\n\npygame.sprite.DirtySprite  \nA subclass of Sprite with more attributes and features.\n\nDirtySprite(\\*groups) -\\> DirtySprite\n\nExtra DirtySprite attributes with their default values:\n\ndirty = 1\n\n``` python\nif set to 1, it is repainted and then set to 0 again\nif set to 2 then it is always dirty ( repainted each frame,\nflag is not reset)\n0 means that it is not dirty and therefore not repainted again\n```\n\nblendmode = 0\n\n``` python\nits the special_flags argument of blit, blendmodes\n```\n\nsource_rect = None\n\n``` python\nsource rect to use, remember that it is relative to\ntopleft (0,0) of self.image\n```\n\nvisible = 1\n\n``` python\nnormally 1, if set to 0 it will not be repainted\n(you must set it dirty too to be erased from screen)\n```\n\nlayer = 0\n\n``` python\n(READONLY value, it is read when adding it to the\nLayeredDirty, for details see doc of LayeredDirty)\n```\n\npygame.sprite.Group  \nA container class to hold and manage multiple Sprite objects.\n\nGroup(\\*sprites) -\\> Group\n\nA simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:\n\n``` python\nin      test if a Sprite is contained\nlen     the number of Sprites contained\nbool    test if any Sprites are contained\niter    iterate through all the Sprites\n```\n\nThe Sprites in the Group are ordered only on python 3.6 and higher. Below python 3.6 drawing and iterating over the Sprites is in no particular order.\n\nsprites()  \nlist of the Sprites this Group contains\n\nsprites() -\\> sprite_list\n\nReturn a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it.\n\ncopy()  \nduplicate the Group\n\ncopy() -\\> Group\n\nCreates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.\n\nadd()  \nadd Sprites to this Group\n\nadd(\\*sprites) -\\> None\n\nAdd any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nremove()  \nremove Sprites from the Group\n\nremove(\\*sprites) -\\> None\n\nRemove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nhas()  \ntest if a Group contains Sprites\n\nhas(\\*sprites) -\\> bool\n\nReturn True if the Group contains all of the given sprites. This is similar to using the \"in\" operator on the Group (\"if sprite in group: ...\"), which tests if a single Sprite belongs to a Group.\n\nEach sprite argument can also be a iterator containing Sprites.\n\nupdate()  \ncall the update method on contained Sprites\n\nupdate(\\*args, \\*\\*kwargs) -\\> None\n\nCalls the `update()` method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to `Group.update()` will be passed to each Sprite.\n\nThere is no way to get the return value from the `Sprite.update()` methods.\n\ndraw()  \nblit the Sprite images\n\ndraw(Surface, bgsurf=None, special_flags=0) -\\> List\\[Rect\\]\n\nDraws the contained Sprites to the Surface argument. This uses the `Sprite.image` attribute for the source surface, and `Sprite.rect` for the position. `special_flags` is passed to `Surface.blit()`. `bgsurf` is unused in this method but `LayeredDirty.draw()` uses it.\n\nThe Group does not keep sprites in any order, so the draw order is arbitrary.\n\nclear()  \ndraw a background over the Sprites\n\nclear(Surface_dest, background) -\\> None\n\nErases the Sprites used in the last `Group.draw()` call. The destination Surface is cleared by filling the drawn Sprite positions with the background.\n\nThe background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.\n\nHere is an example callback that will clear the Sprites with solid red:\n\n``` python\ndef clear_callback(surf, rect):\n    color = 255, 0, 0\n    surf.fill(color, rect)\n```\n\nempty()  \nremove all Sprites\n\nempty() -\\> None\n\nRemoves all Sprites from this Group.\n\npygame.sprite.RenderPlain  \nSame as pygame.sprite.Group\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional functionality.\n\npygame.sprite.RenderClear  \nSame as pygame.sprite.Group\n\nThis class is an alias to `pygame.sprite.Group()`. It has no additional functionality.\n\npygame.sprite.RenderUpdates  \nGroup sub-class that tracks dirty updates.\n\nRenderUpdates(\\*sprites) -\\> RenderUpdates\n\nThis class is derived from `pygame.sprite.Group()`. It has an extended `draw()` method that tracks the changed areas of the screen.\n\ndraw()  \nblit the Sprite images and track changed areas\n\ndraw(surface, bgsurf=None, special_flags=0) -\\> Rect_list\n\nDraws all the Sprites to the surface, the same as `Group.draw()`. This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous `Group.clear()` calls. `special_flags` is passed to `Surface.blit()`.\n\nThe returned Rect list should be passed to `pygame.display.update()`. This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds.\n\npygame.sprite.OrderedUpdates()  \nRenderUpdates sub-class that draws Sprites in order of addition.\n\nOrderedUpdates(\\*sprites) -\\> OrderedUpdates\n\nThis class derives from `pygame.sprite.RenderUpdates()`. It maintains the order in which the Sprites were added to the Group for rendering. This makes adding and removing Sprites from the Group a little slower than regular Groups.\n\npygame.sprite.LayeredUpdates  \nLayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.\n\nLayeredUpdates(\\*sprites, \\*\\*kwargs) -\\> LayeredUpdates\n\nThis group is fully compatible with [`pygame.sprite.Sprite`](#pygame.sprite.Sprite).\n\nYou can set the default layer through kwargs using 'default_layer' and an integer for the layer. The default layer is 0.\n\nIf the sprite you add has an attribute \\_layer then that layer will be used. If the \\*\\*kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the `sprite.layer` attribute). If neither sprite has attribute layer nor \\*\\*kwarg then the default layer is used to add the sprites.\n\nNew in pygame 1.8.\n\nadd()  \nadd a sprite or sequence of sprites to a group\n\nadd(\\*sprites, \\*\\*kwargs) -\\> None\n\nIf the `sprite(s)` have an attribute layer then that is used for the layer. If \\*\\*kwargs contains 'layer' then the `sprite(s)` will be added to that argument (overriding the sprite layer attribute). If neither is passed then the `sprite(s)` will be added to the default layer.\n\nsprites()  \nreturns a ordered list of sprites (first back, last top).\n\nsprites() -\\> sprites\n\ndraw()  \ndraw all sprites in the right order onto the passed surface.\n\ndraw(surface, bgsurf=None, special_flags=0) -\\> Rect_list\n\nget_sprites_at()  \nreturns a list with all sprites at that position.\n\nget_sprites_at(pos) -\\> colliding_sprites\n\nBottom sprites first, top last.\n\nget_sprite()  \nreturns the sprite at the index idx from the groups sprites\n\nget_sprite(idx) -\\> sprite\n\nRaises IndexOutOfBounds if the idx is not within range.\n\nremove_sprites_of_layer()  \nremoves all sprites from a layer and returns them as a list.\n\nremove_sprites_of_layer(layer_nr) -\\> sprites\n\nlayers()  \nreturns a list of layers defined (unique), sorted from bottom up.\n\nlayers() -\\> layers\n\nchange_layer()  \nchanges the layer of the sprite\n\nchange_layer(sprite, new_layer) -\\> None\n\nsprite must have been added to the renderer. It is not checked.\n\nget_layer_of_sprite()  \nreturns the layer that sprite is currently in.\n\nget_layer_of_sprite(sprite) -\\> layer\n\nIf the sprite is not found then it will return the default layer.\n\nget_top_layer()  \nreturns the top layer\n\nget_top_layer() -\\> layer\n\nget_bottom_layer()  \nreturns the bottom layer\n\nget_bottom_layer() -\\> layer\n\nmove_to_front()  \nbrings the sprite to front layer\n\nmove_to_front(sprite) -\\> None\n\nBrings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).\n\nmove_to_back()  \nmoves the sprite to the bottom layer\n\nmove_to_back(sprite) -\\> None\n\nMoves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.\n\nget_top_sprite()  \nreturns the topmost sprite\n\nget_top_sprite() -\\> Sprite\n\nget_sprites_from_layer()  \nreturns all sprites from a layer, ordered by how they where added\n\nget_sprites_from_layer(layer) -\\> sprites\n\nReturns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer.\n\nswitch_layer()  \nswitches the sprites from layer1 to layer2\n\nswitch_layer(layer1_nr, layer2_nr) -\\> None\n\nThe layers number must exist, it is not checked.\n\npygame.sprite.LayeredDirty  \nLayeredDirty group is for DirtySprite objects. Subclasses LayeredUpdates.\n\nLayeredDirty(\\*sprites, \\*\\*kwargs) -\\> LayeredDirty\n\nThis group requires [`pygame.sprite.DirtySprite`](#pygame.sprite.DirtySprite) or any sprite that has the following attributes:\n\n``` python\nimage, rect, dirty, visible, blendmode (see doc of DirtySprite).\n```\n\nIt uses the dirty flag technique and is therefore faster than the [`pygame.sprite.RenderUpdates`](#pygame.sprite.RenderUpdates) if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do not have to worry what would be faster.\n\nSame as for the [`pygame.sprite.Group`](#pygame.sprite.Group). You can specify some additional attributes through kwargs:\n\n``` python\n_use_update: True/False   default is False\n_default_layer: default layer where sprites without a layer are added.\n_time_threshold: threshold time for switching between dirty rect mode\n    and fullscreen mode, defaults to 1000./80  == 1000./fps\n```\n\nNew in pygame 1.8.\n\ndraw()  \ndraw all sprites in the right order onto the passed surface.\n\ndraw(surface, bgsurf=None, special_flags=None) -\\> Rect_list\n\nYou can pass the background too. If a background is already set, then the bgsurf argument has no effect. If present, the `special_flags` argument is always passed to `Surface.blit()`, overriding `DirtySprite.blendmode`. If `special_flags` is not present, `DirtySprite.blendmode` is passed to the `Surface.blit()` instead.\n\nclear()  \nused to set background\n\nclear(surface, bgd) -\\> None\n\nrepaint_rect()  \nrepaints the given area\n\nrepaint_rect(screen_rect) -\\> None\n\nscreen_rect is in screen coordinates.\n\nset_clip()  \nclip the area where to draw. Just pass None (default) to reset the clip\n\nset_clip(screen_rect=None) -\\> None\n\nget_clip()  \nclip the area where to draw. Just pass None (default) to reset the clip\n\nget_clip() -\\> Rect\n\nchange_layer()  \nchanges the layer of the sprite\n\nchange_layer(sprite, new_layer) -\\> None\n\nsprite must have been added to the renderer. It is not checked.\n\nset_timing_treshold()  \nsets the threshold in milliseconds\n\nset_timing_treshold(time_ms) -\\> None\n\nDEPRECATED: Use set_timing_threshold() instead.\n\nDeprecated since pygame 2.1.1.\n\nset_timing_threshold()  \nsets the threshold in milliseconds\n\nset_timing_threshold(time_ms) -\\> None\n\nDefaults to 1000.0 / 80.0. This means that the screen will be painted using the flip method rather than the update method if the update method is taking so long to update the screen that the frame rate falls below 80 frames per second.\n\nNew in pygame 2.1.1.\n\nRaises  \n**TypeError** -- if `time_ms` is not int or float\n\npygame.sprite.GroupSingle()  \nGroup container that holds a single sprite.\n\nGroupSingle(sprite=None) -\\> GroupSingle\n\nThe GroupSingle container only holds a single Sprite. When a new Sprite is added, the old one is removed.\n\nThere is a special property, `GroupSingle.sprite`, that accesses the Sprite that this Group contains. It can be None when the Group is empty. The property can also be assigned to add a Sprite into the GroupSingle container.\n\npygame.sprite.spritecollide()  \nFind sprites in a group that intersect another sprite.\n\nspritecollide(sprite, group, dokill, collided = None) -\\> Sprite_list\n\nReturn a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the `Sprite.rect` attribute of each Sprite.\n\nThe dokill argument is a bool. If set to True, all Sprites that collide will be removed from the Group.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. it should take two sprites as values, and return a bool value indicating if they are colliding. If collided is not passed, all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\ncollided callables:\n\n``` python\ncollide_rect, collide_rect_ratio, collide_circle,\ncollide_circle_ratio, collide_mask\n```\n\nExample:\n\n    # See if the Sprite block has collided with anything in the Group block_list\n    # The True flag will remove the sprite in block_list\n    blocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)\n\n    # Check the list of colliding sprites, and add one to the score for each one\n    for block in blocks_hit_list:\n        score +=1\n\npygame.sprite.collide_rect()  \nCollision detection between two sprites, using rects.\n\ncollide_rect(left, right) -\\> bool\n\nTests for collision between two sprites. Uses the pygame rect colliderect function to calculate the collision. Intended to be passed as a collided callback function to the \\*collide functions. Sprites must have a \"rect\" attributes.\n\nNew in pygame 1.8.\n\npygame.sprite.collide_rect_ratio()  \nCollision detection between two sprites, using rects scaled to a ratio.\n\ncollide_rect_ratio(ratio) -\\> collided_callable\n\nA callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.\n\nIs created with a ratio, the instance is then intended to be passed as a collided callback function to the \\*collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.\n\nNew in pygame 1.8.1.\n\npygame.sprite.collide_circle()  \nCollision detection between two sprites, using circles.\n\ncollide_circle(left, right) -\\> bool\n\nTests for collision between two sprites, by testing to see if two circles centered on the sprites overlap. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the \\*collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\npygame.sprite.collide_circle_ratio()  \nCollision detection between two sprites, using circles scaled to a ratio.\n\ncollide_circle_ratio(ratio) -\\> collided_callable\n\nA callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.\n\nIs created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the \\*collide functions.\n\nA ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.\n\nThe created callable tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap, after scaling the circles radius by the stored ratio. If the sprites have a \"radius\" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the \"rect\" attribute. Intended to be passed as a collided callback function to the \\*collide functions. Sprites must have a \"rect\" and an optional \"radius\" attribute.\n\nNew in pygame 1.8.1.\n\npygame.sprite.collide_mask()  \nCollision detection between two sprites, using masks.\n\ncollide_mask(sprite1, sprite2) -\\> (int, int)\n\ncollide_mask(sprite1, sprite2) -\\> None\n\nTests for collision between two sprites, by testing if their bitmasks overlap (uses [`pygame.mask.Mask.overlap()`](mask#pygame.mask.Mask.overlap)). If the sprites have a `mask` attribute, it is used as the mask, otherwise a mask is created from the sprite's `image` (uses [`pygame.mask.from_surface()`](mask#pygame.mask.from_surface)). Sprites must have a `rect` attribute; the `mask` attribute is optional.\n\nThe first point of collision between the masks is returned. The collision point is offset from `sprite1`'s mask's topleft corner (which is always (0, 0)). The collision point is a position within the mask and is not related to the actual screen position of `sprite1`.\n\nThis function is intended to be passed as a `collided` callback function to the group collide functions (see [`spritecollide()`](#pygame.sprite.spritecollide \"pygame.sprite.spritecollide\"), [`groupcollide()`](#pygame.sprite.groupcollide \"pygame.sprite.groupcollide\"), [`spritecollideany()`](#pygame.sprite.spritecollideany \"pygame.sprite.spritecollideany\")).\n\nNote\n\nTo increase performance, create and set a `mask` attribute for all sprites that will use this function to check for collisions. Otherwise, each time this function is called it will create new masks.\n\nNote\n\nA new mask needs to be recreated each time a sprite's image is changed (e.g. if a new image is used or the existing image is rotated).\n\n``` python\n# Example of mask creation for a sprite.\nsprite.mask = pygame.mask.from_surface(sprite.image)\n```\n\nReturns  \nfirst point of collision between the masks or `None` if no collision\n\nReturn type  \ntuple(int, int) or NoneType\n\nNew in pygame 1.8.0.\n\npygame.sprite.groupcollide()  \nFind all sprites that collide between two groups.\n\ngroupcollide(group1, group2, dokill1, dokill2, collided = None) -\\> Sprite_dict\n\nThis will find collisions between all the Sprites in two groups. Collision is determined by comparing the `Sprite.rect` attribute of each Sprite or by using the collided function if it is not None.\n\nEvery Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.\n\nIf either dokill argument is True, the colliding Sprites will be removed from their respective Group.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\npygame.sprite.spritecollideany()  \nSimple test if a sprite intersects anything in a group.\n\nspritecollideany(sprite, group, collided = None) -\\> Sprite Collision with the returned sprite.\n\nspritecollideany(sprite, group, collided = None) -\\> None No collision\n\nIf the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.\n\nIf you don't need all the features of the `pygame.sprite.spritecollide()` function, this function will be a bit quicker.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sprite.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sprite.html](https://www.pygame.org/docs/ref/sprite.html)"
- name: sprite.collide_circle
  id: ref/sprite#pygame.sprite.collide_circle
  summary: Collision detection between two sprites, using circles
  belongs_to: module-sprite
  description: |-
    pygame.sprite.collide_circle()

    Collision detection between two sprites, using circles.

    collide_circle(left, right) -\> bool

    Tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap. If the sprites have a "radius" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the "rect" attribute. Intended to be passed as a collided callback function to the \*collide functions. Sprites must have a "rect" and an optional "radius" attribute.

    New in pygame 1.8.1.
- name: sprite.collide_circle_ratio
  id: ref/sprite#pygame.sprite.collide_circle_ratio
  summary: Collision detection between two sprites, using circles scaled to a ratio
  belongs_to: module-sprite
  description: |-
    pygame.sprite.collide_circle_ratio()

    Collision detection between two sprites, using circles scaled to a ratio.

    collide_circle_ratio(ratio) -\> collided_callable

    A callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.

    Is created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the \*collide functions.

    A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.

    The created callable tests for collision between two sprites, by testing to see if two circles centered on the sprites overlap, after scaling the circles radius by the stored ratio. If the sprites have a "radius" attribute, that is used to create the circle, otherwise a circle is created that is big enough to completely enclose the sprites rect as given by the "rect" attribute. Intended to be passed as a collided callback function to the \*collide functions. Sprites must have a "rect" and an optional "radius" attribute.

    New in pygame 1.8.1.
- name: sprite.collide_mask
  id: ref/sprite#pygame.sprite.collide_mask
  summary: Collision detection between two sprites, using masks
  belongs_to: module-sprite
  description: |-
    pygame.sprite.collide_mask()

    Collision detection between two sprites, using masks.

    collide_mask(sprite1, sprite2) -\> (int, int)

    collide_mask(sprite1, sprite2) -\> None

    Tests for collision between two sprites, by testing if their bitmasks overlap (uses [`pygame.mask.Mask.overlap()`](mask#pygame.mask.Mask.overlap)). If the sprites have a `mask` attribute, it is used as the mask, otherwise a mask is created from the sprite's `image` (uses [`pygame.mask.from_surface()`](mask#pygame.mask.from_surface)). Sprites must have a `rect` attribute; the `mask` attribute is optional.

    The first point of collision between the masks is returned. The collision point is offset from `sprite1`'s mask's topleft corner (which is always (0, 0)). The collision point is a position within the mask and is not related to the actual screen position of `sprite1`.

    This function is intended to be passed as a `collided` callback function to the group collide functions (see [`spritecollide()`](#pygame.sprite.spritecollide "pygame.sprite.spritecollide"), [`groupcollide()`](#pygame.sprite.groupcollide "pygame.sprite.groupcollide"), [`spritecollideany()`](#pygame.sprite.spritecollideany "pygame.sprite.spritecollideany")).

    Note

    To increase performance, create and set a `mask` attribute for all sprites that will use this function to check for collisions. Otherwise, each time this function is called it will create new masks.

    Note

    A new mask needs to be recreated each time a sprite's image is changed (e.g. if a new image is used or the existing image is rotated).

    ``` python
    # Example of mask creation for a sprite.
    sprite.mask = pygame.mask.from_surface(sprite.image)
    ```

    Returns

    first point of collision between the masks or `None` if no collision

    Return type

    tuple(int, int) or NoneType

    New in pygame 1.8.0.
- name: sprite.collide_rect
  id: ref/sprite#pygame.sprite.collide_rect
  summary: Collision detection between two sprites, using rects
  belongs_to: module-sprite
  description: |-
    pygame.sprite.collide_rect()

    Collision detection between two sprites, using rects.

    collide_rect(left, right) -\> bool

    Tests for collision between two sprites. Uses the pygame rect colliderect function to calculate the collision. Intended to be passed as a collided callback function to the \*collide functions. Sprites must have a "rect" attributes.

    New in pygame 1.8.
- name: sprite.collide_rect_ratio
  id: ref/sprite#pygame.sprite.collide_rect_ratio
  summary: Collision detection between two sprites, using rects scaled to a ratio
  belongs_to: module-sprite
  description: |-
    pygame.sprite.collide_rect_ratio()

    Collision detection between two sprites, using rects scaled to a ratio.

    collide_rect_ratio(ratio) -\> collided_callable

    A callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.

    Is created with a ratio, the instance is then intended to be passed as a collided callback function to the \*collide functions.

    A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.

    New in pygame 1.8.1.
- name: sprite.DirtySprite
  id: ref/sprite#pygame.sprite.DirtySprite
  summary: A subclass of Sprite with more attributes and features
  belongs_to: module-sprite
  description: |-
    pygame.sprite.DirtySprite

    A subclass of Sprite with more attributes and features.

    DirtySprite(\*groups) -\> DirtySprite

    Extra DirtySprite attributes with their default values:

    dirty = 1

    ``` python
    if set to 1, it is repainted and then set to 0 again
    if set to 2 then it is always dirty ( repainted each frame,
    flag is not reset)
    0 means that it is not dirty and therefore not repainted again
    ```

    blendmode = 0

    ``` python
    its the special_flags argument of blit, blendmodes
    ```

    source_rect = None

    ``` python
    source rect to use, remember that it is relative to
    topleft (0,0) of self.image
    ```

    visible = 1

    ``` python
    normally 1, if set to 0 it will not be repainted
    (you must set it dirty too to be erased from screen)
    ```

    layer = 0

    ``` python
    (READONLY value, it is read when adding it to the
    LayeredDirty, for details see doc of LayeredDirty)
    ```
- name: sprite.Group
  id: ref/sprite#pygame.sprite.Group
  summary: A container class to hold and manage multiple Sprite objects
  belongs_to: module-sprite
  description: |-
    pygame.sprite.Group

    A container class to hold and manage multiple Sprite objects.

    Group(\*sprites) -\> Group

    A simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:

    ``` python
    in      test if a Sprite is contained
    len     the number of Sprites contained
    bool    test if any Sprites are contained
    iter    iterate through all the Sprites
    ```

    The Sprites in the Group are ordered only on python 3.6 and higher. Below python 3.6 drawing and iterating over the Sprites is in no particular order.
- name: sprite.Group.add
  id: ref/sprite#pygame.sprite.Group.add
  summary: Add any number of Sprites to this Group
  belongs_to: module-sprite
  description: |-
    add()

    add Sprites to this Group

    add(\*sprites) -\> None

    Add any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.

    Each sprite argument can also be a iterator containing Sprites.
- name: sprite.Group.clear
  id: ref/sprite#pygame.sprite.Group.clear
  summary: Erases the Sprites used in the last Group.draw() call
  belongs_to: module-sprite
  description: |-
    clear()

    draw a background over the Sprites

    clear(Surface_dest, background) -\> None

    Erases the Sprites used in the last `Group.draw()` call. The destination Surface is cleared by filling the drawn Sprite positions with the background.

    The background is usually a Surface image the same dimensions as the destination Surface. However, it can also be a callback function that takes two arguments; the destination Surface and an area to clear. The background callback function will be called several times each clear.

    Here is an example callback that will clear the Sprites with solid red:

    ``` python
    def clear_callback(surf, rect):
        color = 255, 0, 0
        surf.fill(color, rect)
    ```
- name: sprite.Group.copy
  id: ref/sprite#pygame.sprite.Group.copy
  summary: Creates a new Group with all the same Sprites as the original
  belongs_to: module-sprite
  description: |-
    copy()

    duplicate the Group

    copy() -\> Group

    Creates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.
- name: sprite.Group.draw
  id: ref/sprite#pygame.sprite.Group.draw
  summary: Draws the contained Sprites to the Surface argument
  belongs_to: module-sprite
  description: |-
    draw()

    blit the Sprite images

    draw(Surface, bgsurf=None, special_flags=0) -\> List\[Rect\]

    Draws the contained Sprites to the Surface argument. This uses the `Sprite.image` attribute for the source surface, and `Sprite.rect` for the position. `special_flags` is passed to `Surface.blit()`. `bgsurf` is unused in this method but `LayeredDirty.draw()` uses it.

    The Group does not keep sprites in any order, so the draw order is arbitrary.
- name: sprite.Group.empty
  id: ref/sprite#pygame.sprite.Group.empty
  summary: Removes all Sprites from this Group
  belongs_to: module-sprite
  description: |-
    empty()

    remove all Sprites

    empty() -\> None

    Removes all Sprites from this Group.
- name: sprite.Group.has
  id: ref/sprite#pygame.sprite.Group.has
  summary: Return True if the Group contains all of the given sprites
  belongs_to: module-sprite
  description: |-
    has()

    test if a Group contains Sprites

    has(\*sprites) -\> bool

    Return True if the Group contains all of the given sprites. This is similar to using the "in" operator on the Group ("if sprite in group: ..."), which tests if a single Sprite belongs to a Group.

    Each sprite argument can also be a iterator containing Sprites.
- name: sprite.Group.remove
  id: ref/sprite#pygame.sprite.Group.remove
  summary: Remove any number of Sprites from the Group
  belongs_to: module-sprite
  description: |-
    remove()

    remove Sprites from the Group

    remove(\*sprites) -\> None

    Remove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.

    Each sprite argument can also be a iterator containing Sprites.
- name: sprite.Group.sprites
  id: ref/sprite#pygame.sprite.Group.sprites
  summary: Return a list of all the Sprites this group contains
  belongs_to: module-sprite
  description: |-
    sprites()

    list of the Sprites this Group contains

    sprites() -\> sprite_list

    Return a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterate over a Group while modifying it.
- name: sprite.Group.update
  id: ref/sprite#pygame.sprite.Group.update
  summary: Calls the update() method on all Sprites in the Group
  belongs_to: module-sprite
  description: |-
    update()

    call the update method on contained Sprites

    update(\*args, \*\*kwargs) -\> None

    Calls the `update()` method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to `Group.update()` will be passed to each Sprite.

    There is no way to get the return value from the `Sprite.update()` methods.
- name: sprite.groupcollide
  id: ref/sprite#pygame.sprite.groupcollide
  summary: Find all sprites that collide between two groups
  belongs_to: module-sprite
  description: |-
    pygame.sprite.groupcollide()

    Find all sprites that collide between two groups.

    groupcollide(group1, group2, dokill1, dokill2, collided = None) -\> Sprite_dict

    This will find collisions between all the Sprites in two groups. Collision is determined by comparing the `Sprite.rect` attribute of each Sprite or by using the collided function if it is not None.

    Every Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.

    If either dokill argument is True, the colliding Sprites will be removed from their respective Group.

    The collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a "rect" value, which is a rectangle of the sprite area, which will be used to calculate the collision.
- name: sprite.GroupSingle
  id: ref/sprite#pygame.sprite.GroupSingle
  summary: Group container that holds a single sprite
  belongs_to: module-sprite
  description: |-
    pygame.sprite.GroupSingle()

    Group container that holds a single sprite.

    GroupSingle(sprite=None) -\> GroupSingle

    The GroupSingle container only holds a single Sprite. When a new Sprite is added, the old one is removed.

    There is a special property, `GroupSingle.sprite`, that accesses the Sprite that this Group contains. It can be None when the Group is empty. The property can also be assigned to add a Sprite into the GroupSingle container.
- name: sprite.LayeredDirty
  id: ref/sprite#pygame.sprite.LayeredDirty
  summary: LayeredDirty group is for DirtySprite objects
  belongs_to: module-sprite
  description: |-
    pygame.sprite.LayeredDirty

    LayeredDirty group is for DirtySprite objects. Subclasses LayeredUpdates.

    LayeredDirty(\*sprites, \*\*kwargs) -\> LayeredDirty

    This group requires [`pygame.sprite.DirtySprite`](#pygame.sprite.DirtySprite) or any sprite that has the following attributes:

    ``` python
    image, rect, dirty, visible, blendmode (see doc of DirtySprite).
    ```

    It uses the dirty flag technique and is therefore faster than the [`pygame.sprite.RenderUpdates`](#pygame.sprite.RenderUpdates) if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do not have to worry what would be faster.

    Same as for the [`pygame.sprite.Group`](#pygame.sprite.Group). You can specify some additional attributes through kwargs:

    ``` python
    _use_update: True/False   default is False
    _default_layer: default layer where sprites without a layer are added.
    _time_threshold: threshold time for switching between dirty rect mode
        and fullscreen mode, defaults to 1000./80  == 1000./fps
    ```

    New in pygame 1.8.
- name: sprite.LayeredDirty.change_layer
  id: ref/sprite#pygame.sprite.LayeredDirty.change_layer
  summary: sprite must have been added to the renderer
  belongs_to: module-sprite
  description: |-
    change_layer()

    changes the layer of the sprite

    change_layer(sprite, new_layer) -\> None

    sprite must have been added to the renderer. It is not checked.
- name: sprite.LayeredDirty.clear
  id: ref/sprite#pygame.sprite.LayeredDirty.clear
  summary: null
  belongs_to: module-sprite
  description: |-
    clear()

    used to set background

    clear(surface, bgd) -\> None
- name: sprite.LayeredDirty.draw
  id: ref/sprite#pygame.sprite.LayeredDirty.draw
  summary: draw all sprites in the right order onto the passed surface
  belongs_to: module-sprite
  description: |-
    draw()

    draw all sprites in the right order onto the passed surface.

    draw(surface, bgsurf=None, special_flags=None) -\> Rect_list

    You can pass the background too. If a background is already set, then the bgsurf argument has no effect. If present, the `special_flags` argument is always passed to `Surface.blit()`, overriding `DirtySprite.blendmode`. If `special_flags` is not present, `DirtySprite.blendmode` is passed to the `Surface.blit()` instead.
- name: sprite.LayeredDirty.get_clip
  id: ref/sprite#pygame.sprite.LayeredDirty.get_clip
  summary: clip the area where to draw
  belongs_to: module-sprite
  description: |-
    get_clip()

    clip the area where to draw. Just pass None (default) to reset the clip

    get_clip() -\> Rect
- name: sprite.LayeredDirty.repaint_rect
  id: ref/sprite#pygame.sprite.LayeredDirty.repaint_rect
  summary: screen_rect is in screen coordinates
  belongs_to: module-sprite
  description: |-
    repaint_rect()

    repaints the given area

    repaint_rect(screen_rect) -\> None

    screen_rect is in screen coordinates.
- name: sprite.LayeredDirty.set_clip
  id: ref/sprite#pygame.sprite.LayeredDirty.set_clip
  summary: clip the area where to draw
  belongs_to: module-sprite
  description: |-
    set_clip()

    clip the area where to draw. Just pass None (default) to reset the clip

    set_clip(screen_rect=None) -\> None
- name: sprite.LayeredDirty.set_timing_threshold
  id: ref/sprite#pygame.sprite.LayeredDirty.set_timing_threshold
  summary: Defaults to 1000.0 / 80.0
  belongs_to: module-sprite
  description: |-
    set_timing_threshold()

    sets the threshold in milliseconds

    set_timing_threshold(time_ms) -\> None

    Defaults to 1000.0 / 80.0. This means that the screen will be painted using the flip method rather than the update method if the update method is taking so long to update the screen that the frame rate falls below 80 frames per second.

    New in pygame 2.1.1.

    Raises

    **TypeError** -- if `time_ms` is not int or float
- name: sprite.LayeredDirty.set_timing_treshold
  id: ref/sprite#pygame.sprite.LayeredDirty.set_timing_treshold
  summary: 'DEPRECATED: Use set_timing_threshold() instead'
  belongs_to: module-sprite
  description: |-
    set_timing_treshold()

    sets the threshold in milliseconds

    set_timing_treshold(time_ms) -\> None

    DEPRECATED: Use set_timing_threshold() instead.

    Deprecated since pygame 2.1.1.
- name: sprite.LayeredUpdates
  id: ref/sprite#pygame.sprite.LayeredUpdates
  summary: LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates
  belongs_to: module-sprite
  description: |-
    pygame.sprite.LayeredUpdates

    LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.

    LayeredUpdates(\*sprites, \*\*kwargs) -\> LayeredUpdates

    This group is fully compatible with [`pygame.sprite.Sprite`](#pygame.sprite.Sprite).

    You can set the default layer through kwargs using 'default_layer' and an integer for the layer. The default layer is 0.

    If the sprite you add has an attribute \_layer then that layer will be used. If the \*\*kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the `sprite.layer` attribute). If neither sprite has attribute layer nor \*\*kwarg then the default layer is used to add the sprites.

    New in pygame 1.8.
- name: sprite.LayeredUpdates.add
  id: ref/sprite#pygame.sprite.LayeredUpdates.add
  summary: If the sprite(s) have an attribute layer then that is used for the layer
  belongs_to: module-sprite
  description: |-
    add()

    add a sprite or sequence of sprites to a group

    add(\*sprites, \*\*kwargs) -\> None

    If the `sprite(s)` have an attribute layer then that is used for the layer. If \*\*kwargs contains 'layer' then the `sprite(s)` will be added to that argument (overriding the sprite layer attribute). If neither is passed then the `sprite(s)` will be added to the default layer.
- name: sprite.LayeredUpdates.change_layer
  id: ref/sprite#pygame.sprite.LayeredUpdates.change_layer
  summary: sprite must have been added to the renderer
  belongs_to: module-sprite
  description: |-
    change_layer()

    changes the layer of the sprite

    change_layer(sprite, new_layer) -\> None

    sprite must have been added to the renderer. It is not checked.
- name: sprite.LayeredUpdates.draw
  id: ref/sprite#pygame.sprite.LayeredUpdates.draw
  summary: draw all sprites in the right order onto the passed surface
  belongs_to: module-sprite
  description: |-
    draw()

    draw all sprites in the right order onto the passed surface.

    draw(surface, bgsurf=None, special_flags=0) -\> Rect_list
- name: sprite.LayeredUpdates.get_bottom_layer
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_bottom_layer
  summary: null
  belongs_to: module-sprite
  description: |-
    get_bottom_layer()

    returns the bottom layer

    get_bottom_layer() -\> layer
- name: sprite.LayeredUpdates.get_layer_of_sprite
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_layer_of_sprite
  summary: returns the layer that sprite is currently in
  belongs_to: module-sprite
  description: |-
    get_layer_of_sprite()

    returns the layer that sprite is currently in.

    get_layer_of_sprite(sprite) -\> layer

    If the sprite is not found then it will return the default layer.
- name: sprite.LayeredUpdates.get_sprite
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_sprite
  summary: Raises IndexOutOfBounds if the idx is not within range
  belongs_to: module-sprite
  description: |-
    get_sprite()

    returns the sprite at the index idx from the groups sprites

    get_sprite(idx) -\> sprite

    Raises IndexOutOfBounds if the idx is not within range.
- name: sprite.LayeredUpdates.get_sprites_at
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_at
  summary: returns a list with all sprites at that position
  belongs_to: module-sprite
  description: |-
    get_sprites_at()

    returns a list with all sprites at that position.

    get_sprites_at(pos) -\> colliding_sprites

    Bottom sprites first, top last.
- name: sprite.LayeredUpdates.get_sprites_from_layer
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_sprites_from_layer
  summary: Returns all sprites from a layer, ordered by how they where added
  belongs_to: module-sprite
  description: |-
    get_sprites_from_layer()

    returns all sprites from a layer, ordered by how they where added

    get_sprites_from_layer(layer) -\> sprites

    Returns all sprites from a layer, ordered by how they where added. It uses linear search and the sprites are not removed from layer.
- name: sprite.LayeredUpdates.get_top_layer
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_top_layer
  summary: null
  belongs_to: module-sprite
  description: |-
    get_top_layer()

    returns the top layer

    get_top_layer() -\> layer
- name: sprite.LayeredUpdates.get_top_sprite
  id: ref/sprite#pygame.sprite.LayeredUpdates.get_top_sprite
  summary: null
  belongs_to: module-sprite
  description: |-
    get_top_sprite()

    returns the topmost sprite

    get_top_sprite() -\> Sprite
- name: sprite.LayeredUpdates.layers
  id: ref/sprite#pygame.sprite.LayeredUpdates.layers
  summary: returns a list of layers defined (unique), sorted from bottom up
  belongs_to: module-sprite
  description: |-
    layers()

    returns a list of layers defined (unique), sorted from bottom up.

    layers() -\> layers
- name: sprite.LayeredUpdates.move_to_back
  id: ref/sprite#pygame.sprite.LayeredUpdates.move_to_back
  summary: Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer
  belongs_to: module-sprite
  description: |-
    move_to_back()

    moves the sprite to the bottom layer

    move_to_back(sprite) -\> None

    Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.
- name: sprite.LayeredUpdates.move_to_front
  id: ref/sprite#pygame.sprite.LayeredUpdates.move_to_front
  summary: Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer)
  belongs_to: module-sprite
  description: |-
    move_to_front()

    brings the sprite to front layer

    move_to_front(sprite) -\> None

    Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).
- name: sprite.LayeredUpdates.remove_sprites_of_layer
  id: ref/sprite#pygame.sprite.LayeredUpdates.remove_sprites_of_layer
  summary: removes all sprites from a layer and returns them as a list
  belongs_to: module-sprite
  description: |-
    remove_sprites_of_layer()

    removes all sprites from a layer and returns them as a list.

    remove_sprites_of_layer(layer_nr) -\> sprites
- name: sprite.LayeredUpdates.sprites
  id: ref/sprite#pygame.sprite.LayeredUpdates.sprites
  summary: returns a ordered list of sprites (first back, last top)
  belongs_to: module-sprite
  description: |-
    sprites()

    returns a ordered list of sprites (first back, last top).

    sprites() -\> sprites
- name: sprite.LayeredUpdates.switch_layer
  id: ref/sprite#pygame.sprite.LayeredUpdates.switch_layer
  summary: The layers number must exist, it is not checked
  belongs_to: module-sprite
  description: |-
    switch_layer()

    switches the sprites from layer1 to layer2

    switch_layer(layer1_nr, layer2_nr) -\> None

    The layers number must exist, it is not checked.
- name: sprite.OrderedUpdates
  id: ref/sprite#pygame.sprite.OrderedUpdates
  summary: RenderUpdates sub-class that draws Sprites in order of addition
  belongs_to: module-sprite
  description: |-
    pygame.sprite.OrderedUpdates()

    RenderUpdates sub-class that draws Sprites in order of addition.

    OrderedUpdates(\*sprites) -\> OrderedUpdates

    This class derives from `pygame.sprite.RenderUpdates()`. It maintains the order in which the Sprites were added to the Group for rendering. This makes adding and removing Sprites from the Group a little slower than regular Groups.
- name: sprite.RenderClear
  id: ref/sprite#pygame.sprite.RenderClear
  summary: This class is an alias to pygame.sprite.Group()
  belongs_to: module-sprite
  description: |-
    pygame.sprite.RenderClear

    Same as pygame.sprite.Group

    This class is an alias to `pygame.sprite.Group()`. It has no additional functionality.
- name: sprite.RenderPlain
  id: ref/sprite#pygame.sprite.RenderPlain
  summary: This class is an alias to pygame.sprite.Group()
  belongs_to: module-sprite
  description: |-
    pygame.sprite.RenderPlain

    Same as pygame.sprite.Group

    This class is an alias to `pygame.sprite.Group()`. It has no additional functionality.
- name: sprite.RenderUpdates
  id: ref/sprite#pygame.sprite.RenderUpdates
  summary: Group sub-class that tracks dirty updates
  belongs_to: module-sprite
  description: |-
    pygame.sprite.RenderUpdates

    Group sub-class that tracks dirty updates.

    RenderUpdates(\*sprites) -\> RenderUpdates

    This class is derived from `pygame.sprite.Group()`. It has an extended `draw()` method that tracks the changed areas of the screen.
- name: sprite.RenderUpdates.draw
  id: ref/sprite#pygame.sprite.RenderUpdates.draw
  summary: Draws all the Sprites to the surface, the same as Group.draw()
  belongs_to: module-sprite
  description: |-
    draw()

    blit the Sprite images and track changed areas

    draw(surface, bgsurf=None, special_flags=0) -\> Rect_list

    Draws all the Sprites to the surface, the same as `Group.draw()`. This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous `Group.clear()` calls. `special_flags` is passed to `Surface.blit()`.

    The returned Rect list should be passed to `pygame.display.update()`. This will help performance on software driven display modes. This type of updating is usually only helpful on destinations with non-animating backgrounds.
- name: sprite.Sprite
  id: ref/sprite#pygame.sprite.Sprite
  summary: Simple base class for visible game objects
  belongs_to: module-sprite
  description: |-
    pygame.sprite.Sprite

    Simple base class for visible game objects.

    Sprite(\*groups) -\> Sprite

    The base class for visible game objects. Derived classes will want to override the `Sprite.update()` and assign a `Sprite.image` and `Sprite.rect` attributes. The initializer can accept any number of Group instances to be added to.

    When subclassing the Sprite, be sure to call the base initializer before adding the Sprite to Groups. For example:

                            class
                            Block
                            (
                            pygame
                            .
                            sprite
                            .
                            Sprite
                            ):
                            # Constructor. Pass in the color of the block,
                            # and its x and y position
                            def
                            __init__
                            (
                            self
                            ,
                            color
                            ,
                            width
                            ,
                            height
                            ):
                            # Call the parent class (Sprite) constructor
                            pygame
                            .
                            sprite
                            .
                            Sprite
                            .
                            __init__
                            (
                            self
                            )
                            # Create an image of the block, and fill it with a color.
                            # This could also be an image loaded from the disk.
                            self
                            .
                            image
                            =
                            pygame
                            .
                            Surface
                            ([
                            width
                            ,
                            height
                            ])
                            self
                            .
                            image
                            .
                            fill
                            (
                            color
                            )
                            # Fetch the rectangle object that has the dimensions of the image
                            # Update the position of this object by setting the values of rect.x and rect.y
                            self
                            .
                            rect
                            =
                            self
                            .
                            image
                            .
                            get_rect
                            ()
- name: sprite.Sprite.add
  id: ref/sprite#pygame.sprite.Sprite.add
  summary: Any number of Group instances can be passed as arguments
  belongs_to: module-sprite
  description: |-
    add()

    add the sprite to groups

    add(\*groups) -\> None

    Any number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.
- name: sprite.Sprite.alive
  id: ref/sprite#pygame.sprite.Sprite.alive
  summary: Returns True when the Sprite belongs to one or more Groups
  belongs_to: module-sprite
  description: |-
    alive()

    does the sprite belong to any groups

    alive() -\> bool

    Returns True when the Sprite belongs to one or more Groups.
- name: sprite.Sprite.groups
  id: ref/sprite#pygame.sprite.Sprite.groups
  summary: Return a list of all the Groups that contain this Sprite
  belongs_to: module-sprite
  description: |-
    groups()

    list of Groups that contain this Sprite

    groups() -\> group_list

    Return a list of all the Groups that contain this Sprite.
- name: sprite.Sprite.kill
  id: ref/sprite#pygame.sprite.Sprite.kill
  summary: The Sprite is removed from all the Groups that contain it
  belongs_to: module-sprite
  description: |-
    kill()

    remove the Sprite from all Groups

    kill() -\> None

    The Sprite is removed from all the Groups that contain it. This won't change anything about the state of the Sprite. It is possible to continue to use the Sprite after this method has been called, including adding it to Groups.
- name: sprite.Sprite.remove
  id: ref/sprite#pygame.sprite.Sprite.remove
  summary: Any number of Group instances can be passed as arguments
  belongs_to: module-sprite
  description: |-
    remove()

    remove the sprite from groups

    remove(\*groups) -\> None

    Any number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.
- name: sprite.Sprite.update
  id: ref/sprite#pygame.sprite.Sprite.update
  summary: The default implementation of this method does nothing; it's just a convenient "hook" that you can override
  belongs_to: module-sprite
  description: |-
    update()

    method to control sprite behavior

    update(\*args, \*\*kwargs) -\> None

    The default implementation of this method does nothing; it's just a convenient "hook" that you can override. This method is called by `Group.update()` with whatever arguments you give it.

    There is no need to use this method if not using the convenience method by the same name in the Group class.
- name: sprite.spritecollide
  id: ref/sprite#pygame.sprite.spritecollide
  summary: Find sprites in a group that intersect another sprite
  belongs_to: module-sprite
  description: |-
    pygame.sprite.spritecollide()

    Find sprites in a group that intersect another sprite.

    spritecollide(sprite, group, dokill, collided = None) -\> Sprite_list

    Return a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the `Sprite.rect` attribute of each Sprite.

    The dokill argument is a bool. If set to True, all Sprites that collide will be removed from the Group.

    The collided argument is a callback function used to calculate if two sprites are colliding. it should take two sprites as values, and return a bool value indicating if they are colliding. If collided is not passed, all sprites must have a "rect" value, which is a rectangle of the sprite area, which will be used to calculate the collision.

    collided callables:

    ``` python
    collide_rect, collide_rect_ratio, collide_circle,
    collide_circle_ratio, collide_mask
    ```

    Example:

                            # See if the Sprite block has collided with anything in the Group block_list
                            # The True flag will remove the sprite in block_list
                            blocks_hit_list
                            =
                            pygame
                            .
                            sprite
                            .
                            spritecollide
                            (
                            player
                            ,
                            block_list
                            ,
                            True
                            )
                            # Check the list of colliding sprites, and add one to the score for each one
                            for
                            block
                            in
                            blocks_hit_list
                            :
                            score
                            +=
                            1
- name: sprite.spritecollideany
  id: ref/sprite#pygame.sprite.spritecollideany
  summary: Simple test if a sprite intersects anything in a group
  belongs_to: module-sprite
  description: "pygame.sprite.spritecollideany()\n\nSimple test if a sprite intersects anything in a group.\n\nspritecollideany(sprite, group, collided = None) -\\> Sprite Collision with the returned sprite.\n\nspritecollideany(sprite, group, collided = None) -\\> None No collision\n\nIf the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.\n\nIf you don't need all the features of the `pygame.sprite.spritecollide()` function, this function will be a bit quicker.\n\nThe collided argument is a callback function used to calculate if two sprites are colliding. It should take two sprites as values and return a bool value indicating if they are colliding. If collided is not passed, then all sprites must have a \"rect\" value, which is a rectangle of the sprite area, which will be used to calculate the collision.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/sprite.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/sprite.html](https://www.pygame.org/docs/ref/sprite.html)"
- name: Surface
  id: ref/surface
  summary: A pygame Surface is used to represent any image
  description: "pygame.Surface  \npygame object for representing images\n\nSurface((width, height), flags=0, depth=0, masks=None) -\\> Surface\n\nSurface((width, height), flags=0, Surface) -\\> Surface\n\nA pygame Surface is used to represent any image. The Surface has a fixed resolution and pixel format. Surfaces with 8-bit pixels use a color palette to map to 24-bit color.\n\nCall [`pygame.Surface()`](#pygame.Surface) to create a new image object. The Surface will be cleared to all black. The only required arguments are the sizes. With no additional arguments, the Surface will be created in a format that best matches the display Surface.\n\nThe pixel format can be controlled by passing the bit depth or an existing Surface. The flags argument is a bitmask of additional features for the surface. You can pass any combination of these flags:\n\n``` python\nHWSURFACE    (obsolete in pygame 2) creates the image in video memory\nSRCALPHA     the pixel format will include a per-pixel alpha\n```\n\nBoth flags are only a request, and may not be possible for all displays and formats.\n\nAdvance users can combine a set of bitmasks with a depth value. The masks are a set of 4 integers representing which bits in a pixel will represent each color. Normal Surfaces should not require the masks argument.\n\nSurfaces can have many extra attributes like alpha planes, colorkeys, source rectangle clipping. These functions mainly effect how the Surface is blitted to other Surfaces. The blit routines will attempt to use hardware acceleration when possible, otherwise they will use highly optimized software blitting methods.\n\nThere are three types of transparency supported in pygame: colorkeys, surface alphas, and pixel alphas. Surface alphas can be mixed with colorkeys, but an image with per pixel alphas cannot use the other modes. Colorkey transparency makes a single color value transparent. Any pixels matching the colorkey will not be drawn. The surface alpha value is a single value that changes the transparency for the entire image. A surface alpha of 255 is opaque, and a value of 0 is completely transparent.\n\nPer pixel alphas are different because they store a transparency value for every pixel. This allows for the most precise transparency effects, but it also the slowest. Per pixel alphas cannot be mixed with surface alpha and colorkeys.\n\nThere is support for pixel access for the Surfaces. Pixel access on hardware surfaces is slow and not recommended. Pixels can be accessed using the [`get_at()`](#pygame.Surface.get_at \"pygame.Surface.get_at\") and [`set_at()`](#pygame.Surface.set_at \"pygame.Surface.set_at\") functions. These methods are fine for simple access, but will be considerably slow when doing of pixel work with them. If you plan on doing a lot of pixel level work, it is recommended to use a [`pygame.PixelArray`](pixelarray#pygame.PixelArray), which gives an array like view of the surface. For involved mathematical manipulations try the [`pygame.surfarray`](surfarray#module-pygame.surfarray) module (It's quite quick, but requires NumPy.)\n\nAny functions that directly access a surface's pixel data will need that surface to be lock()'ed. These functions can [`lock()`](#pygame.Surface.lock \"pygame.Surface.lock\") and [`unlock()`](#pygame.Surface.unlock \"pygame.Surface.unlock\") the surfaces themselves without assistance. But, if a function will be called many times, there will be a lot of overhead for multiple locking and unlocking of the surface. It is best to lock the surface manually before making the function call many times, and then unlocking when you are finished. All functions that need a locked surface will say so in their docs. Remember to leave the Surface locked only while necessary.\n\nSurface pixels are stored internally as a single number that has all the colors encoded into it. Use the [`map_rgb()`](#pygame.Surface.map_rgb \"pygame.Surface.map_rgb\") and [`unmap_rgb()`](#pygame.Surface.unmap_rgb \"pygame.Surface.unmap_rgb\") to convert between individual red, green, and blue values into a packed integer for that Surface.\n\nSurfaces can also reference sections of other Surfaces. These are created with the [`subsurface()`](#pygame.Surface.subsurface \"pygame.Surface.subsurface\") method. Any change to either Surface will effect the other.\n\nEach Surface contains a clipping area. By default the clip area covers the entire Surface. If it is changed, all drawing operations will only effect the smaller area.\n\nblit()  \ndraw one image onto another\n\nblit(source, dest, area=None, special_flags=0) -\\> Rect\n\nDraws a source Surface onto this Surface. The draw can be positioned with the dest argument. The dest argument can either be a pair of coordinates representing the position of the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the position for the blit. The size of the destination rectangle does not effect the blit.\n\nAn optional area rectangle can be passed as well. This represents a smaller portion of the source Surface to draw.\n\nNew in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`, `BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.\n\nNew in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`, `BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX` `BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`, `BLEND_RGB_MAX`.\n\nNew in pygame 1.9.2: Optional `special_flags`: `BLEND_PREMULTIPLIED`\n\nNew in pygame 2.0.0: Optional `special_flags`: `BLEND_ALPHA_SDL2` - Uses the SDL2 blitter for alpha blending, this gives different results than the default blitter, which is modelled after SDL1, due to different approximations used for the alpha blending formula. The SDL2 blitter also supports RLE on alpha blended surfaces which the pygame one does not.\n\nThe return rectangle is the area of the affected pixels, excluding any pixels outside the destination Surface, or outside the clipping area.\n\nPixel alphas will be ignored when blitting to an 8 bit Surface.\n\nFor a surface with colorkey or blanket alpha, a blit to self may give slightly different colors than a non self-blit.\n\nblits()  \ndraw many images onto another\n\nblits(blit_sequence=((source, dest), ...), doreturn=1) -\\> \\[Rect, ...\\] or None\n\nblits(((source, dest, area), ...)) -\\> \\[Rect, ...\\]\n\nblits(((source, dest, area, special_flags), ...)) -\\> \\[Rect, ...\\]\n\nDraws many surfaces onto this Surface. It takes a sequence as input, with each of the elements corresponding to the ones of [`blit()`](#pygame.Surface.blit \"pygame.Surface.blit\"). It needs at minimum a sequence of (source, dest).\n\nParameters  \n- **blit_sequence** -- a sequence of surfaces and arguments to blit them, they correspond to the [`blit()`](#pygame.Surface.blit \"pygame.Surface.blit\") arguments\n\n- **doreturn** -- if `True`, return a list of rects of the areas changed, otherwise return `None`\n\nReturns  \na list of rects of the areas changed if `doreturn` is `True`, otherwise `None`\n\nReturn type  \nlist or None\n\nNew in pygame 1.9.4.\n\nconvert()  \nchange the pixel format of an image\n\nconvert(Surface=None) -\\> Surface\n\nconvert(depth, flags=0) -\\> Surface\n\nconvert(masks, flags=0) -\\> Surface\n\nCreates a new copy of the Surface with the pixel format changed. The new pixel format can be determined from another existing Surface. Otherwise depth, flags, and masks arguments can be used, similar to the [`pygame.Surface()`](#pygame.Surface) call.\n\nIf no arguments are passed the new Surface will have the same pixel format as the display Surface. This is always the fastest format for blitting. It is a good idea to convert all Surfaces before they are blitted many times.\n\nThe converted Surface will have no pixel alphas. They will be stripped if the original had them. See [`convert_alpha()`](#pygame.Surface.convert_alpha \"pygame.Surface.convert_alpha\") for preserving or creating per-pixel alphas.\n\nThe new copy will have the same class as the copied surface. This lets as Surface subclass inherit this method without the need to override, unless subclass specific instance attributes also need copying.\n\nconvert_alpha()  \nchange the pixel format of an image including per pixel alphas\n\nconvert_alpha(Surface) -\\> Surface\n\nconvert_alpha() -\\> Surface\n\nCreates a new copy of the surface with the desired pixel format. The new surface will be in a format suited for quick blitting to the given format with per pixel alpha. If no surface is given, the new surface will be optimized for blitting to the current display.\n\nUnlike the [`convert()`](#pygame.Surface.convert \"pygame.Surface.convert\") method, the pixel format for the new image will not be exactly the same as the requested source, but it will be optimized for fast alpha blitting to the destination.\n\nAs with [`convert()`](#pygame.Surface.convert \"pygame.Surface.convert\") the returned surface has the same class as the converted surface.\n\ncopy()  \ncreate a new copy of a Surface\n\ncopy() -\\> Surface\n\nMakes a duplicate copy of a Surface. The new surface will have the same pixel formats, color palettes, transparency settings, and class as the original. If a Surface subclass also needs to copy any instance specific attributes then it should override `copy()`.\n\nfill()  \nfill Surface with a solid color\n\nfill(color, rect=None, special_flags=0) -\\> Rect\n\nFill the Surface with a solid color. If no rect argument is given the entire Surface will be filled. The rect argument will limit the fill to a specific area. The fill will also be contained by the Surface clip area.\n\nThe color argument can be either a `RGB` sequence, a `RGBA` sequence or a mapped color index. If using `RGBA`, the Alpha (A part of `RGBA`) is ignored unless the surface uses per pixel alpha (Surface has the `SRCALPHA` flag).\n\nNew in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`, `BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.\n\nNew in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`, `BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX` `BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`, `BLEND_RGB_MAX`.\n\nThis will return the affected Surface area.\n\nscroll()  \nShift the surface image in place\n\nscroll(dx=0, dy=0) -\\> None\n\nMove the image by dx pixels right and dy pixels down. dx and dy may be negative for left and up scrolls respectively. Areas of the surface that are not overwritten retain their original pixel values. Scrolling is contained by the Surface clip area. It is safe to have dx and dy values that exceed the surface size.\n\nNew in pygame 1.9.\n\nset_colorkey()  \nSet the transparent colorkey\n\nset_colorkey(Color, flags=0) -\\> None\n\nset_colorkey(None) -\\> None\n\nSet the current color key for the Surface. When blitting this Surface onto a destination, any pixels that have the same color as the colorkey will be transparent. The color can be an `RGB` color or a mapped color integer. If `None` is passed, the colorkey will be unset.\n\nThe colorkey will be ignored if the Surface is formatted to use per pixel alpha values. The colorkey can be mixed with the full Surface alpha value.\n\nThe optional flags argument can be set to `pygame.RLEACCEL` to provide better performance on non accelerated displays. An `RLEACCEL` Surface will be slower to modify, but quicker to blit as a source.\n\nget_colorkey()  \nGet the current transparent colorkey\n\nget_colorkey() -\\> RGB or None\n\nReturn the current colorkey value for the Surface. If the colorkey is not set then `None` is returned.\n\nset_alpha()  \nset the alpha value for the full Surface image\n\nset_alpha(value, flags=0) -\\> None\n\nset_alpha(None) -\\> None\n\nSet the current alpha value for the Surface. When blitting this Surface onto a destination, the pixels will be drawn slightly transparent. The alpha value is an integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If `None` is passed for the alpha value, then alpha blending will be disabled, including per-pixel alpha.\n\nThis value is different than the per pixel Surface alpha. For a surface with per pixel alpha, blanket alpha is ignored and `None` is returned.\n\nChanged in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.\n\nThe optional flags argument can be set to `pygame.RLEACCEL` to provide better performance on non accelerated displays. An `RLEACCEL` Surface will be slower to modify, but quicker to blit as a source.\n\nget_alpha()  \nget the current Surface transparency value\n\nget_alpha() -\\> int_value\n\nReturn the current alpha value for the Surface.\n\nlock()  \nlock the Surface memory for pixel access\n\nlock() -\\> None\n\nLock the pixel data of a Surface for access. On accelerated Surfaces, the pixel data may be stored in volatile video memory or nonlinear compressed forms. When a Surface is locked the pixel memory becomes available to access by regular software. Code that reads or writes pixel values will need the Surface to be locked.\n\nSurfaces should not remain locked for more than necessary. A locked Surface can often not be displayed or managed by pygame.\n\nNot all Surfaces require locking. The [`mustlock()`](#pygame.Surface.mustlock \"pygame.Surface.mustlock\") method can determine if it is actually required. There is no performance penalty for locking and unlocking a Surface that does not need it.\n\nAll pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.\n\nIt is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.\n\nunlock()  \nunlock the Surface memory from pixel access\n\nunlock() -\\> None\n\nUnlock the Surface pixel data after it has been locked. The unlocked Surface can once again be drawn and managed by pygame. See the [`lock()`](#pygame.Surface.lock \"pygame.Surface.lock\") documentation for more details.\n\nAll pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.\n\nIt is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.\n\nmustlock()  \ntest if the Surface requires locking\n\nmustlock() -\\> bool\n\nReturns `True` if the Surface is required to be locked to access pixel data. Usually pure software Surfaces do not require locking. This method is rarely needed, since it is safe and quickest to just lock all Surfaces as needed.\n\nAll pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.\n\nget_locked()  \ntest if the Surface is current locked\n\nget_locked() -\\> bool\n\nReturns `True` when the Surface is locked. It doesn't matter how many times the Surface is locked.\n\nget_locks()  \nGets the locks for the Surface\n\nget_locks() -\\> tuple\n\nReturns the currently existing locks for the Surface.\n\nget_at()  \nget the color value at a single pixel\n\nget_at((x, y)) -\\> Color\n\nReturn a copy of the `RGBA` Color value at the given pixel. If the Surface has no per pixel alpha, then the alpha value will always be 255 (opaque). If the pixel position is outside the area of the Surface an `IndexError` exception will be raised.\n\nGetting and setting pixels one at a time is generally too slow to be used in a game or realtime situation. It is better to use methods which operate on many pixels at a time like with the blit, fill and draw methods - or by using [`pygame.surfarray`](surfarray#module-pygame.surfarray)/[`pygame.PixelArray`](pixelarray#pygame.PixelArray).\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.9: Returning a Color instead of tuple. Use `tuple(surf.get_at((x,y)))` if you want a tuple, and not a Color. This should only matter if you want to use the color as a key in a dict.\n\nset_at()  \nset the color value for a single pixel\n\nset_at((x, y), Color) -\\> None\n\nSet the `RGBA` or mapped integer color value for a single pixel. If the Surface does not have per pixel alphas, the alpha value is ignored. Setting pixels outside the Surface area or outside the Surface clipping will have no effect.\n\nGetting and setting pixels one at a time is generally too slow to be used in a game or realtime situation.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNote\n\nIf the surface is palettized, the pixel color will be set to the most similar color in the palette.\n\nget_at_mapped()  \nget the mapped color value at a single pixel\n\nget_at_mapped((x, y)) -\\> Color\n\nReturn the integer value of the given pixel. If the pixel position is outside the area of the Surface an `IndexError` exception will be raised.\n\nThis method is intended for pygame unit testing. It unlikely has any use in an application.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.9.2.\n\nget_palette()  \nget the color index palette for an 8-bit Surface\n\nget_palette() -\\> \\[RGB, RGB, RGB, ...\\]\n\nReturn a list of up to 256 color elements that represent the indexed colors used in an 8-bit Surface. The returned list is a copy of the palette, and changes will have no effect on the Surface.\n\nReturning a list of `Color(with`` ``length`` ``3)` instances instead of tuples.\n\nNew in pygame 1.9.\n\nget_palette_at()  \nget the color for a single entry in a palette\n\nget_palette_at(index) -\\> RGB\n\nReturns the red, green, and blue color values for a single index in a Surface palette. The index should be a value from 0 to 255.\n\nNew in pygame 1.9: Returning `Color(with`` ``length`` ``3)` instance instead of a tuple.\n\nset_palette()  \nset the color palette for an 8-bit Surface\n\nset_palette(\\[RGB, RGB, RGB, ...\\]) -\\> None\n\nSet the full palette for an 8-bit Surface. This will replace the colors in the existing palette. A partial palette can be passed and only the first colors in the original palette will be changed.\n\nThis function has no effect on a Surface with more than 8-bits per pixel.\n\nset_palette_at()  \nset the color for a single index in an 8-bit Surface palette\n\nset_palette_at(index, RGB) -\\> None\n\nSet the palette value for a single entry in a Surface palette. The index should be a value from 0 to 255.\n\nThis function has no effect on a Surface with more than 8-bits per pixel.\n\nmap_rgb()  \nconvert a color into a mapped color value\n\nmap_rgb(Color) -\\> mapped_int\n\nConvert an `RGBA` color into the mapped integer value for this Surface. The returned integer will contain no more bits than the bit depth of the Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.\n\nSee the Surface object documentation for more information about colors and pixel formats.\n\nunmap_rgb()  \nconvert a mapped integer color value into a Color\n\nunmap_rgb(mapped_int) -\\> Color\n\nConvert an mapped integer color into the `RGB` color components for this Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.\n\nSee the Surface object documentation for more information about colors and pixel formats.\n\nset_clip()  \nset the current clipping area of the Surface\n\nset_clip(rect) -\\> None\n\nset_clip(None) -\\> None\n\nEach Surface has an active clipping area. This is a rectangle that represents the only pixels on the Surface that can be modified. If `None` is passed for the rectangle the full Surface will be available for changes.\n\nThe clipping area is always restricted to the area of the Surface itself. If the clip rectangle is too large it will be shrunk to fit inside the Surface.\n\nget_clip()  \nget the current clipping area of the Surface\n\nget_clip() -\\> Rect\n\nReturn a rectangle of the current clipping area. The Surface will always return a valid rectangle that will never be outside the bounds of the image. If the Surface has had `None` set for the clipping area, the Surface will return a rectangle with the full area of the Surface.\n\nsubsurface()  \ncreate a new surface that references its parent\n\nsubsurface(Rect) -\\> Surface\n\nReturns a new Surface that shares its pixels with its new parent. The new Surface is considered a child of the original. Modifications to either Surface pixels will effect each other. Surface information like clipping area and color keys are unique to each Surface.\n\nThe new Surface will inherit the palette, color key, and alpha settings from its parent.\n\nIt is possible to have any number of subsurfaces and subsubsurfaces on the parent. It is also possible to subsurface the display Surface if the display mode is not hardware accelerated.\n\nSee [`get_offset()`](#pygame.Surface.get_offset \"pygame.Surface.get_offset\") and [`get_parent()`](#pygame.Surface.get_parent \"pygame.Surface.get_parent\") to learn more about the state of a subsurface.\n\nA subsurface will have the same class as the parent surface.\n\nget_parent()  \nfind the parent of a subsurface\n\nget_parent() -\\> Surface\n\nReturns the parent Surface of a subsurface. If this is not a subsurface then `None` will be returned.\n\nget_abs_parent()  \nfind the top level parent of a subsurface\n\nget_abs_parent() -\\> Surface\n\nReturns the parent Surface of a subsurface. If this is not a subsurface then this surface will be returned.\n\nget_offset()  \nfind the position of a child subsurface inside a parent\n\nget_offset() -\\> (x, y)\n\nGet the offset position of a child subsurface inside of a parent. If the Surface is not a subsurface this will return (0, 0).\n\nget_abs_offset()  \nfind the absolute position of a child subsurface inside its top level parent\n\nget_abs_offset() -\\> (x, y)\n\nGet the offset position of a child subsurface inside of its top level parent Surface. If the Surface is not a subsurface this will return (0, 0).\n\nget_size()  \nget the dimensions of the Surface\n\nget_size() -\\> (width, height)\n\nReturn the width and height of the Surface in pixels.\n\nget_width()  \nget the width of the Surface\n\nget_width() -\\> width\n\nReturn the width of the Surface in pixels.\n\nget_height()  \nget the height of the Surface\n\nget_height() -\\> height\n\nReturn the height of the Surface in pixels.\n\nget_rect()  \nget the rectangular area of the Surface\n\nget_rect(\\*\\*kwargs) -\\> Rect\n\nReturns a new rectangle covering the entire surface. This rectangle will always start at (0, 0) with a width and height the same size as the image.\n\nYou can pass keyword argument values to this function. These named values will be applied to the attributes of the Rect before it is returned. An example would be `mysurf.get_rect(center=(100,`` ``100))` to create a rectangle for the Surface centered at a given position.\n\nget_bitsize()  \nget the bit depth of the Surface pixel format\n\nget_bitsize() -\\> int\n\nReturns the number of bits used to represent each pixel. This value may not exactly fill the number of bytes used per pixel. For example a 15 bit Surface still requires a full 2 bytes.\n\nget_bytesize()  \nget the bytes used per Surface pixel\n\nget_bytesize() -\\> int\n\nReturn the number of bytes used per pixel.\n\nget_flags()  \nget the additional flags used for the Surface\n\nget_flags() -\\> int\n\nReturns a set of current Surface features. Each feature is a bit in the flags bitmask. Typical flags are `RLEACCEL`, `SRCALPHA`, and `SRCCOLORKEY`.\n\nHere is a more complete list of flags. A full list can be found in `SDL_video.h`\n\n``` python\nSWSURFACE      0x00000000    # Surface is in system memory\nHWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory\nASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible\n```\n\nSee [`pygame.display.set_mode()`](display#pygame.display.set_mode) for flags exclusive to the display surface.\n\nUsed internally (read-only)\n\n``` python\nHWACCEL        0x00000100    # Blit uses hardware acceleration\nSRCCOLORKEY    0x00001000    # Blit uses a source color key\nRLEACCELOK     0x00002000    # Private flag\nRLEACCEL       0x00004000    # Surface is RLE encoded\nSRCALPHA       0x00010000    # Blit uses source alpha blending\nPREALLOC       0x01000000    # Surface uses preallocated memory\n```\n\nget_pitch()  \nget the number of bytes used per Surface row\n\nget_pitch() -\\> int\n\nReturn the number of bytes separating each row in the Surface. Surfaces in video memory are not always linearly packed. Subsurfaces will also have a larger pitch than their real width.\n\nThis value is not needed for normal pygame usage.\n\nget_masks()  \nthe bitmasks needed to convert between a color and a mapped integer\n\nget_masks() -\\> (R, G, B, A)\n\nReturns the bitmasks used to isolate each color in a mapped integer.\n\nThis value is not needed for normal pygame usage.\n\nset_masks()  \nset the bitmasks needed to convert between a color and a mapped integer\n\nset_masks((r,g,b,a)) -\\> None\n\nThis is not needed for normal pygame usage.\n\nNote\n\nStarting in pygame 2.0, the masks are read-only and accordingly this method will raise a TypeError if called.\n\nDeprecated since pygame 2.0.0.\n\nNew in pygame 1.8.1.\n\nget_shifts()  \nthe bit shifts needed to convert between a color and a mapped integer\n\nget_shifts() -\\> (R, G, B, A)\n\nReturns the pixel shifts need to convert between each color and a mapped integer.\n\nThis value is not needed for normal pygame usage.\n\nset_shifts()  \nsets the bit shifts needed to convert between a color and a mapped integer\n\nset_shifts((r,g,b,a)) -\\> None\n\nThis is not needed for normal pygame usage.\n\nNote\n\nStarting in pygame 2.0, the shifts are read-only and accordingly this method will raise a TypeError if called.\n\nDeprecated since pygame 2.0.0.\n\nNew in pygame 1.8.1.\n\nget_losses()  \nthe significant bits used to convert between a color and a mapped integer\n\nget_losses() -\\> (R, G, B, A)\n\nReturn the least significant number of bits stripped from each color in a mapped integer.\n\nThis value is not needed for normal pygame usage.\n\nget_bounding_rect()  \nfind the smallest rect containing data\n\nget_bounding_rect(min_alpha = 1) -\\> Rect\n\nReturns the smallest rectangular region that contains all the pixels in the surface that have an alpha value greater than or equal to the minimum alpha value.\n\nThis function will temporarily lock and unlock the Surface as needed.\n\nNew in pygame 1.8.\n\nget_view()  \nreturn a buffer view of the Surface's pixels.\n\nget_view(\\<kind\\>='2') -\\> BufferProxy\n\nReturn an object which exports a surface's internal pixel buffer as a C level array struct, Python level array interface or a C level buffer interface. The new buffer protocol is supported.\n\nThe kind argument is the length 1 string '0', '1', '2', '3', 'r', 'g', 'b', or 'a'. The letters are case insensitive; 'A' will work as well. The argument can be either a Unicode or byte (char) string. The default is '2'.\n\n'0' returns a contiguous unstructured bytes view. No surface shape information is given. A `ValueError` is raised if the surface's pixels are discontinuous.\n\n'1' returns a (surface-width \\* surface-height) array of continuous pixels. A `ValueError` is raised if the surface pixels are discontinuous.\n\n'2' returns a (surface-width, surface-height) array of raw pixels. The pixels are surface-bytesize-d unsigned integers. The pixel format is surface specific. The 3 byte unsigned integers of 24 bit surfaces are unlikely accepted by anything other than other pygame functions.\n\n'3' returns a (surface-width, surface-height, 3) array of `RGB` color components. Each of the red, green, and blue components are unsigned bytes. Only 24-bit and 32-bit surfaces are supported. The color components must be in either `RGB` or `BGR` order within the pixel.\n\n'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-width, surface-height) view of a single color component within a surface: a color plane. Color components are unsigned bytes. Both 24-bit and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with `SRCALPHA` support 'a'.\n\nThe surface is locked only when an exposed interface is accessed. For new buffer interface accesses, the surface is unlocked once the last buffer view is released. For array interface and old buffer interface accesses, the surface remains locked until the BufferProxy object is released.\n\nNew in pygame 1.9.2.\n\nget_buffer()  \nacquires a buffer object for the pixels of the Surface.\n\nget_buffer() -\\> BufferProxy\n\nReturn a buffer object for the pixels of the Surface. The buffer can be used for direct pixel access and manipulation. Surface pixel data is represented as an unstructured block of memory, with a start address and length in bytes. The data need not be contiguous. Any gaps are included in the length, but otherwise ignored.\n\nThis method implicitly locks the Surface. The lock will be released when the returned [`pygame.BufferProxy`](bufferproxy#pygame.BufferProxy) object is garbage collected.\n\nNew in pygame 1.8.\n\n\\_pixels_address  \npixel buffer address\n\n\\_pixels_address -\\> int\n\nThe starting address of the surface's raw pixel bytes.\n\nNew in pygame 1.9.2.\n\npremul_alpha()  \nreturns a copy of the surface with the RGB channels pre-multiplied by the alpha channel.\n\npremul_alpha() -\\> Surface\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave premul_alpha feedback with authors](https://github.com/pygame/pygame/pull/3276)\n\nReturns a copy of the initial surface with the red, green and blue color channels multiplied by the alpha channel. This is intended to make it easier to work with the BLEND_PREMULTIPLED blend mode flag of the blit() method. Surfaces which have called this method will only look correct after blitting if the BLEND_PREMULTIPLED special flag is used.\n\nIt is worth noting that after calling this method, methods that return the colour of a pixel such as get_at() will return the alpha multiplied colour values. It is not possible to fully reverse an alpha multiplication of the colours in a surface as integer colour channel data is generally reduced by the operation (e.g. 255 x 0 = 0, from there it is not possible to reconstruct the original 255 from just the two remaining zeros in the colour and alpha channels).\n\nIf you call this method, and then call it again, it will multiply the colour channels by the alpha channel twice. There are many possible ways to obtain a surface with the colour channels pre-multiplied by the alpha channel in pygame, and it is not possible to tell the difference just from the information in the pixels. It is completely possible to have two identical surfaces - one intended for pre-multiplied alpha blending and one intended for normal blending. For this reason we do not store state on surfaces intended for pre-multiplied alpha blending.\n\nSurfaces without an alpha channel cannot use this method and will return an error if you use it on them. It is best used on 32 bit surfaces (the default on most platforms) as the blitting on these surfaces can be accelerated by SIMD versions of the pre-multiplied blitter.\n\nIn general pre-multiplied alpha blitting is faster then 'straight alpha' blitting and produces superior results when blitting an alpha surface onto another surface with alpha - assuming both surfaces contain pre-multiplied alpha colours.\n\nNew in pygame 2.2.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/surface.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/surface.html](https://www.pygame.org/docs/ref/surface.html)"
- name: Surface._pixels_address
  id: ref/surface#pygame.Surface._pixels_address
  summary: The starting address of the surface's raw pixel bytes
  belongs_to: Surface
  description: |-
    \_pixels_address

    pixel buffer address

    \_pixels_address -\> int

    The starting address of the surface's raw pixel bytes.

    New in pygame 1.9.2.
- name: Surface.blit
  id: ref/surface#pygame.Surface.blit
  summary: Draws a source Surface onto this Surface
  belongs_to: Surface
  description: |-
    blit()

    draw one image onto another

    blit(source, dest, area=None, special_flags=0) -\> Rect

    Draws a source Surface onto this Surface. The draw can be positioned with the dest argument. The dest argument can either be a pair of coordinates representing the position of the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the position for the blit. The size of the destination rectangle does not effect the blit.

    An optional area rectangle can be passed as well. This represents a smaller portion of the source Surface to draw.

    New in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`, `BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.

    New in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`, `BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX``BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`, `BLEND_RGB_MAX`.

    New in pygame 1.9.2: Optional `special_flags`: `BLEND_PREMULTIPLIED`

    New in pygame 2.0.0: Optional `special_flags`: `BLEND_ALPHA_SDL2` - Uses the SDL2 blitter for alpha blending, this gives different results than the default blitter, which is modelled after SDL1, due to different approximations used for the alpha blending formula. The SDL2 blitter also supports RLE on alpha blended surfaces which the pygame one does not.

    The return rectangle is the area of the affected pixels, excluding any pixels outside the destination Surface, or outside the clipping area.

    Pixel alphas will be ignored when blitting to an 8 bit Surface.

    For a surface with colorkey or blanket alpha, a blit to self may give slightly different colors than a non self-blit.
- name: Surface.blits
  id: ref/surface#pygame.Surface.blits
  summary: Draws many surfaces onto this Surface
  belongs_to: Surface
  description: |-
    blits()

    draw many images onto another

    blits(blit_sequence=((source, dest), ...), doreturn=1) -\> \[Rect, ...\] or None

    blits(((source, dest, area), ...)) -\> \[Rect, ...\]

    blits(((source, dest, area, special_flags), ...)) -\> \[Rect, ...\]

    Draws many surfaces onto this Surface. It takes a sequence as input, with each of the elements corresponding to the ones of [`blit()`](#pygame.Surface.blit "pygame.Surface.blit"). It needs at minimum a sequence of (source, dest).

    Parameters

    - **blit_sequence** -- a sequence of surfaces and arguments to blit them, they correspond to the [`blit()`](#pygame.Surface.blit "pygame.Surface.blit") arguments

    - **doreturn** -- if `True`, return a list of rects of the areas changed, otherwise return `None`

    Returns

    a list of rects of the areas changed if `doreturn` is `True`, otherwise `None`

    Return type

    list or None

    New in pygame 1.9.4.
- name: Surface.convert
  id: ref/surface#pygame.Surface.convert
  summary: Creates a new copy of the Surface with the pixel format changed
  belongs_to: Surface
  description: |-
    convert()

    change the pixel format of an image

    convert(Surface=None) -\> Surface

    convert(depth, flags=0) -\> Surface

    convert(masks, flags=0) -\> Surface

    Creates a new copy of the Surface with the pixel format changed. The new pixel format can be determined from another existing Surface. Otherwise depth, flags, and masks arguments can be used, similar to the [`pygame.Surface()`](#pygame.Surface) call.

    If no arguments are passed the new Surface will have the same pixel format as the display Surface. This is always the fastest format for blitting. It is a good idea to convert all Surfaces before they are blitted many times.

    The converted Surface will have no pixel alphas. They will be stripped if the original had them. See [`convert_alpha()`](#pygame.Surface.convert_alpha "pygame.Surface.convert_alpha") for preserving or creating per-pixel alphas.

    The new copy will have the same class as the copied surface. This lets as Surface subclass inherit this method without the need to override, unless subclass specific instance attributes also need copying.
- name: Surface.convert_alpha
  id: ref/surface#pygame.Surface.convert_alpha
  summary: Creates a new copy of the surface with the desired pixel format
  belongs_to: Surface
  description: |-
    convert_alpha()

    change the pixel format of an image including per pixel alphas

    convert_alpha(Surface) -\> Surface

    convert_alpha() -\> Surface

    Creates a new copy of the surface with the desired pixel format. The new surface will be in a format suited for quick blitting to the given format with per pixel alpha. If no surface is given, the new surface will be optimized for blitting to the current display.

    Unlike the [`convert()`](#pygame.Surface.convert "pygame.Surface.convert") method, the pixel format for the new image will not be exactly the same as the requested source, but it will be optimized for fast alpha blitting to the destination.

    As with [`convert()`](#pygame.Surface.convert "pygame.Surface.convert") the returned surface has the same class as the converted surface.
- name: Surface.copy
  id: ref/surface#pygame.Surface.copy
  summary: Makes a duplicate copy of a Surface
  belongs_to: Surface
  description: |-
    copy()

    create a new copy of a Surface

    copy() -\> Surface

    Makes a duplicate copy of a Surface. The new surface will have the same pixel formats, color palettes, transparency settings, and class as the original. If a Surface subclass also needs to copy any instance specific attributes then it should override `copy()`.
- name: Surface.fill
  id: ref/surface#pygame.Surface.fill
  summary: Fill the Surface with a solid color
  belongs_to: Surface
  description: |-
    fill()

    fill Surface with a solid color

    fill(color, rect=None, special_flags=0) -\> Rect

    Fill the Surface with a solid color. If no rect argument is given the entire Surface will be filled. The rect argument will limit the fill to a specific area. The fill will also be contained by the Surface clip area.

    The color argument can be either a `RGB` sequence, a `RGBA` sequence or a mapped color index. If using `RGBA`, the Alpha (A part of `RGBA`) is ignored unless the surface uses per pixel alpha (Surface has the `SRCALPHA` flag).

    New in pygame 1.8: Optional `special_flags`: `BLEND_ADD`, `BLEND_SUB`, `BLEND_MULT`, `BLEND_MIN`, `BLEND_MAX`.

    New in pygame 1.8.1: Optional `special_flags`: `BLEND_RGBA_ADD`, `BLEND_RGBA_SUB`, `BLEND_RGBA_MULT`, `BLEND_RGBA_MIN`, `BLEND_RGBA_MAX``BLEND_RGB_ADD`, `BLEND_RGB_SUB`, `BLEND_RGB_MULT`, `BLEND_RGB_MIN`, `BLEND_RGB_MAX`.

    This will return the affected Surface area.
- name: Surface.get_abs_offset
  id: ref/surface#pygame.Surface.get_abs_offset
  summary: Get the offset position of a child subsurface inside of its top level parent Surface
  belongs_to: Surface
  description: |-
    get_abs_offset()

    find the absolute position of a child subsurface inside its top level parent

    get_abs_offset() -\> (x, y)

    Get the offset position of a child subsurface inside of its top level parent Surface. If the Surface is not a subsurface this will return (0, 0).
- name: Surface.get_abs_parent
  id: ref/surface#pygame.Surface.get_abs_parent
  summary: Returns the parent Surface of a subsurface
  belongs_to: Surface
  description: |-
    get_abs_parent()

    find the top level parent of a subsurface

    get_abs_parent() -\> Surface

    Returns the parent Surface of a subsurface. If this is not a subsurface then this surface will be returned.
- name: Surface.get_alpha
  id: ref/surface#pygame.Surface.get_alpha
  summary: Return the current alpha value for the Surface
  belongs_to: Surface
  description: |-
    get_alpha()

    get the current Surface transparency value

    get_alpha() -\> int_value

    Return the current alpha value for the Surface.
- name: Surface.get_at
  id: ref/surface#pygame.Surface.get_at
  summary: Return a copy of the RGBA Color value at the given pixel
  belongs_to: Surface
  description: |-
    get_at()

    get the color value at a single pixel

    get_at((x, y)) -\> Color

    Return a copy of the `RGBA` Color value at the given pixel. If the Surface has no per pixel alpha, then the alpha value will always be 255 (opaque). If the pixel position is outside the area of the Surface an `IndexError` exception will be raised.

    Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation. It is better to use methods which operate on many pixels at a time like with the blit, fill and draw methods - or by using [`pygame.surfarray`](surfarray#module-pygame.surfarray)/[`pygame.PixelArray`](pixelarray#pygame.PixelArray).

    This function will temporarily lock and unlock the Surface as needed.

    New in pygame 1.9: Returning a Color instead of tuple. Use `tuple(surf.get_at((x,y)))` if you want a tuple, and not a Color. This should only matter if you want to use the color as a key in a dict.
- name: Surface.get_at_mapped
  id: ref/surface#pygame.Surface.get_at_mapped
  summary: Return the integer value of the given pixel
  belongs_to: Surface
  description: |-
    get_at_mapped()

    get the mapped color value at a single pixel

    get_at_mapped((x, y)) -\> Color

    Return the integer value of the given pixel. If the pixel position is outside the area of the Surface an `IndexError` exception will be raised.

    This method is intended for pygame unit testing. It unlikely has any use in an application.

    This function will temporarily lock and unlock the Surface as needed.

    New in pygame 1.9.2.
- name: Surface.get_bitsize
  id: ref/surface#pygame.Surface.get_bitsize
  summary: Returns the number of bits used to represent each pixel
  belongs_to: Surface
  description: |-
    get_bitsize()

    get the bit depth of the Surface pixel format

    get_bitsize() -\> int

    Returns the number of bits used to represent each pixel. This value may not exactly fill the number of bytes used per pixel. For example a 15 bit Surface still requires a full 2 bytes.
- name: Surface.get_bounding_rect
  id: ref/surface#pygame.Surface.get_bounding_rect
  summary: Returns the smallest rectangular region that contains all the pixels in the surface that have an alpha value greater than or equal to the minimum alpha value
  belongs_to: Surface
  description: |-
    get_bounding_rect()

    find the smallest rect containing data

    get_bounding_rect(min_alpha = 1) -\> Rect

    Returns the smallest rectangular region that contains all the pixels in the surface that have an alpha value greater than or equal to the minimum alpha value.

    This function will temporarily lock and unlock the Surface as needed.

    New in pygame 1.8.
- name: Surface.get_buffer
  id: ref/surface#pygame.Surface.get_buffer
  summary: acquires a buffer object for the pixels of the Surface
  belongs_to: Surface
  description: |-
    get_buffer()

    acquires a buffer object for the pixels of the Surface.

    get_buffer() -\> BufferProxy

    Return a buffer object for the pixels of the Surface. The buffer can be used for direct pixel access and manipulation. Surface pixel data is represented as an unstructured block of memory, with a start address and length in bytes. The data need not be contiguous. Any gaps are included in the length, but otherwise ignored.

    This method implicitly locks the Surface. The lock will be released when the returned [`pygame.BufferProxy`](bufferproxy#pygame.BufferProxy) object is garbage collected.

    New in pygame 1.8.
- name: Surface.get_bytesize
  id: ref/surface#pygame.Surface.get_bytesize
  summary: Return the number of bytes used per pixel
  belongs_to: Surface
  description: |-
    get_bytesize()

    get the bytes used per Surface pixel

    get_bytesize() -\> int

    Return the number of bytes used per pixel.
- name: Surface.get_clip
  id: ref/surface#pygame.Surface.get_clip
  summary: Return a rectangle of the current clipping area
  belongs_to: Surface
  description: |-
    get_clip()

    get the current clipping area of the Surface

    get_clip() -\> Rect

    Return a rectangle of the current clipping area. The Surface will always return a valid rectangle that will never be outside the bounds of the image. If the Surface has had `None` set for the clipping area, the Surface will return a rectangle with the full area of the Surface.
- name: Surface.get_colorkey
  id: ref/surface#pygame.Surface.get_colorkey
  summary: Return the current colorkey value for the Surface
  belongs_to: Surface
  description: |-
    get_colorkey()

    Get the current transparent colorkey

    get_colorkey() -\> RGB or None

    Return the current colorkey value for the Surface. If the colorkey is not set then `None` is returned.
- name: Surface.get_flags
  id: ref/surface#pygame.Surface.get_flags
  summary: Returns a set of current Surface features
  belongs_to: Surface
  description: |-
    get_flags()

    get the additional flags used for the Surface

    get_flags() -\> int

    Returns a set of current Surface features. Each feature is a bit in the flags bitmask. Typical flags are `RLEACCEL`, `SRCALPHA`, and `SRCCOLORKEY`.

    Here is a more complete list of flags. A full list can be found in `SDL_video.h`

    ``` python
    SWSURFACE      0x00000000    # Surface is in system memory
    HWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory
    ASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible
    ```

    See [`pygame.display.set_mode()`](display#pygame.display.set_mode) for flags exclusive to the display surface.

    Used internally (read-only)

    ``` python
    HWACCEL        0x00000100    # Blit uses hardware acceleration
    SRCCOLORKEY    0x00001000    # Blit uses a source color key
    RLEACCELOK     0x00002000    # Private flag
    RLEACCEL       0x00004000    # Surface is RLE encoded
    SRCALPHA       0x00010000    # Blit uses source alpha blending
    PREALLOC       0x01000000    # Surface uses preallocated memory
    ```
- name: Surface.get_height
  id: ref/surface#pygame.Surface.get_height
  summary: Return the height of the Surface in pixels
  belongs_to: Surface
  description: |-
    get_height()

    get the height of the Surface

    get_height() -\> height

    Return the height of the Surface in pixels.
- name: Surface.get_locked
  id: ref/surface#pygame.Surface.get_locked
  summary: Returns True when the Surface is locked
  belongs_to: Surface
  description: |-
    get_locked()

    test if the Surface is current locked

    get_locked() -\> bool

    Returns `True` when the Surface is locked. It doesn't matter how many times the Surface is locked.
- name: Surface.get_locks
  id: ref/surface#pygame.Surface.get_locks
  summary: Returns the currently existing locks for the Surface
  belongs_to: Surface
  description: |-
    get_locks()

    Gets the locks for the Surface

    get_locks() -\> tuple

    Returns the currently existing locks for the Surface.
- name: Surface.get_losses
  id: ref/surface#pygame.Surface.get_losses
  summary: Return the least significant number of bits stripped from each color in a mapped integer
  belongs_to: Surface
  description: |-
    get_losses()

    the significant bits used to convert between a color and a mapped integer

    get_losses() -\> (R, G, B, A)

    Return the least significant number of bits stripped from each color in a mapped integer.

    This value is not needed for normal pygame usage.
- name: Surface.get_masks
  id: ref/surface#pygame.Surface.get_masks
  summary: Returns the bitmasks used to isolate each color in a mapped integer
  belongs_to: Surface
  description: |-
    get_masks()

    the bitmasks needed to convert between a color and a mapped integer

    get_masks() -\> (R, G, B, A)

    Returns the bitmasks used to isolate each color in a mapped integer.

    This value is not needed for normal pygame usage.
- name: Surface.get_offset
  id: ref/surface#pygame.Surface.get_offset
  summary: Get the offset position of a child subsurface inside of a parent
  belongs_to: Surface
  description: |-
    get_offset()

    find the position of a child subsurface inside a parent

    get_offset() -\> (x, y)

    Get the offset position of a child subsurface inside of a parent. If the Surface is not a subsurface this will return (0, 0).
- name: Surface.get_palette
  id: ref/surface#pygame.Surface.get_palette
  summary: Return a list of up to 256 color elements that represent the indexed colors used in an 8-bit Surface
  belongs_to: Surface
  description: |-
    get_palette()

    get the color index palette for an 8-bit Surface

    get_palette() -\> \[RGB, RGB, RGB, ...\]

    Return a list of up to 256 color elements that represent the indexed colors used in an 8-bit Surface. The returned list is a copy of the palette, and changes will have no effect on the Surface.

    Returning a list of `Color(with``length``3)` instances instead of tuples.

    New in pygame 1.9.
- name: Surface.get_palette_at
  id: ref/surface#pygame.Surface.get_palette_at
  summary: Returns the red, green, and blue color values for a single index in a Surface palette
  belongs_to: Surface
  description: |-
    get_palette_at()

    get the color for a single entry in a palette

    get_palette_at(index) -\> RGB

    Returns the red, green, and blue color values for a single index in a Surface palette. The index should be a value from 0 to 255.

    New in pygame 1.9: Returning `Color(with``length``3)` instance instead of a tuple.
- name: Surface.get_parent
  id: ref/surface#pygame.Surface.get_parent
  summary: Returns the parent Surface of a subsurface
  belongs_to: Surface
  description: |-
    get_parent()

    find the parent of a subsurface

    get_parent() -\> Surface

    Returns the parent Surface of a subsurface. If this is not a subsurface then `None` will be returned.
- name: Surface.get_pitch
  id: ref/surface#pygame.Surface.get_pitch
  summary: Return the number of bytes separating each row in the Surface
  belongs_to: Surface
  description: |-
    get_pitch()

    get the number of bytes used per Surface row

    get_pitch() -\> int

    Return the number of bytes separating each row in the Surface. Surfaces in video memory are not always linearly packed. Subsurfaces will also have a larger pitch than their real width.

    This value is not needed for normal pygame usage.
- name: Surface.get_rect
  id: ref/surface#pygame.Surface.get_rect
  summary: Returns a new rectangle covering the entire surface
  belongs_to: Surface
  description: |-
    get_rect()

    get the rectangular area of the Surface

    get_rect(\*\*kwargs) -\> Rect

    Returns a new rectangle covering the entire surface. This rectangle will always start at (0, 0) with a width and height the same size as the image.

    You can pass keyword argument values to this function. These named values will be applied to the attributes of the Rect before it is returned. An example would be `mysurf.get_rect(center=(100,``100))` to create a rectangle for the Surface centered at a given position.
- name: Surface.get_shifts
  id: ref/surface#pygame.Surface.get_shifts
  summary: Returns the pixel shifts need to convert between each color and a mapped integer
  belongs_to: Surface
  description: |-
    get_shifts()

    the bit shifts needed to convert between a color and a mapped integer

    get_shifts() -\> (R, G, B, A)

    Returns the pixel shifts need to convert between each color and a mapped integer.

    This value is not needed for normal pygame usage.
- name: Surface.get_size
  id: ref/surface#pygame.Surface.get_size
  summary: Return the width and height of the Surface in pixels
  belongs_to: Surface
  description: |-
    get_size()

    get the dimensions of the Surface

    get_size() -\> (width, height)

    Return the width and height of the Surface in pixels.
- name: Surface.get_view
  id: ref/surface#pygame.Surface.get_view
  summary: return a buffer view of the Surface's pixels
  belongs_to: Surface
  description: |-
    get_view()

    return a buffer view of the Surface's pixels.

    get_view(\<kind\>='2') -\> BufferProxy

    Return an object which exports a surface's internal pixel buffer as a C level array struct, Python level array interface or a C level buffer interface. The new buffer protocol is supported.

    The kind argument is the length 1 string '0', '1', '2', '3', 'r', 'g', 'b', or 'a'. The letters are case insensitive; 'A' will work as well. The argument can be either a Unicode or byte (char) string. The default is '2'.

    '0' returns a contiguous unstructured bytes view. No surface shape information is given. A `ValueError` is raised if the surface's pixels are discontinuous.

    '1' returns a (surface-width \* surface-height) array of continuous pixels. A `ValueError` is raised if the surface pixels are discontinuous.

    '2' returns a (surface-width, surface-height) array of raw pixels. The pixels are surface-bytesize-d unsigned integers. The pixel format is surface specific. The 3 byte unsigned integers of 24 bit surfaces are unlikely accepted by anything other than other pygame functions.

    '3' returns a (surface-width, surface-height, 3) array of `RGB` color components. Each of the red, green, and blue components are unsigned bytes. Only 24-bit and 32-bit surfaces are supported. The color components must be in either `RGB` or `BGR` order within the pixel.

    'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-width, surface-height) view of a single color component within a surface: a color plane. Color components are unsigned bytes. Both 24-bit and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with `SRCALPHA` support 'a'.

    The surface is locked only when an exposed interface is accessed. For new buffer interface accesses, the surface is unlocked once the last buffer view is released. For array interface and old buffer interface accesses, the surface remains locked until the BufferProxy object is released.

    New in pygame 1.9.2.
- name: Surface.get_width
  id: ref/surface#pygame.Surface.get_width
  summary: Return the width of the Surface in pixels
  belongs_to: Surface
  description: |-
    get_width()

    get the width of the Surface

    get_width() -\> width

    Return the width of the Surface in pixels.
- name: Surface.lock
  id: ref/surface#pygame.Surface.lock
  summary: Lock the pixel data of a Surface for access
  belongs_to: Surface
  description: |-
    lock()

    lock the Surface memory for pixel access

    lock() -\> None

    Lock the pixel data of a Surface for access. On accelerated Surfaces, the pixel data may be stored in volatile video memory or nonlinear compressed forms. When a Surface is locked the pixel memory becomes available to access by regular software. Code that reads or writes pixel values will need the Surface to be locked.

    Surfaces should not remain locked for more than necessary. A locked Surface can often not be displayed or managed by pygame.

    Not all Surfaces require locking. The [`mustlock()`](#pygame.Surface.mustlock "pygame.Surface.mustlock") method can determine if it is actually required. There is no performance penalty for locking and unlocking a Surface that does not need it.

    All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.

    It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.
- name: Surface.map_rgb
  id: ref/surface#pygame.Surface.map_rgb
  summary: Convert an RGBA color into the mapped integer value for this Surface
  belongs_to: Surface
  description: |-
    map_rgb()

    convert a color into a mapped color value

    map_rgb(Color) -\> mapped_int

    Convert an `RGBA` color into the mapped integer value for this Surface. The returned integer will contain no more bits than the bit depth of the Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.

    See the Surface object documentation for more information about colors and pixel formats.
- name: Surface.mustlock
  id: ref/surface#pygame.Surface.mustlock
  summary: Returns True if the Surface is required to be locked to access pixel data
  belongs_to: Surface
  description: |-
    mustlock()

    test if the Surface requires locking

    mustlock() -\> bool

    Returns `True` if the Surface is required to be locked to access pixel data. Usually pure software Surfaces do not require locking. This method is rarely needed, since it is safe and quickest to just lock all Surfaces as needed.

    All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.
- name: Surface.premul_alpha
  id: ref/surface#pygame.Surface.premul_alpha
  summary: returns a copy of the surface with the RGB channels pre-multiplied by the alpha channel
  belongs_to: Surface
  description: "premul_alpha()\n\nreturns a copy of the surface with the RGB channels pre-multiplied by the alpha channel.\n\npremul_alpha() -\\> Surface\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave premul_alpha feedback with authors](https://github.com/pygame/pygame/pull/3276)\n\nReturns a copy of the initial surface with the red, green and blue color channels multiplied by the alpha channel. This is intended to make it easier to work with the BLEND_PREMULTIPLED blend mode flag of the blit() method. Surfaces which have called this method will only look correct after blitting if the BLEND_PREMULTIPLED special flag is used.\n\nIt is worth noting that after calling this method, methods that return the colour of a pixel such as get_at() will return the alpha multiplied colour values. It is not possible to fully reverse an alpha multiplication of the colours in a surface as integer colour channel data is generally reduced by the operation (e.g. 255 x 0 = 0, from there it is not possible to reconstruct the original 255 from just the two remaining zeros in the colour and alpha channels).\n\nIf you call this method, and then call it again, it will multiply the colour channels by the alpha channel twice. There are many possible ways to obtain a surface with the colour channels pre-multiplied by the alpha channel in pygame, and it is not possible to tell the difference just from the information in the pixels. It is completely possible to have two identical surfaces - one intended for pre-multiplied alpha blending and one intended for normal blending. For this reason we do not store state on surfaces intended for pre-multiplied alpha blending.\n\nSurfaces without an alpha channel cannot use this method and will return an error if you use it on them. It is best used on 32 bit surfaces (the default on most platforms) as the blitting on these surfaces can be accelerated by SIMD versions of the pre-multiplied blitter.\n\nIn general pre-multiplied alpha blitting is faster then 'straight alpha' blitting and produces superior results when blitting an alpha surface onto another surface with alpha - assuming both surfaces contain pre-multiplied alpha colours.\n\nNew in pygame 2.2.0.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/surface.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/surface.html](https://www.pygame.org/docs/ref/surface.html)"
- name: Surface.scroll
  id: ref/surface#pygame.Surface.scroll
  summary: Move the image by dx pixels right and dy pixels down
  belongs_to: Surface
  description: |-
    scroll()

    Shift the surface image in place

    scroll(dx=0, dy=0) -\> None

    Move the image by dx pixels right and dy pixels down. dx and dy may be negative for left and up scrolls respectively. Areas of the surface that are not overwritten retain their original pixel values. Scrolling is contained by the Surface clip area. It is safe to have dx and dy values that exceed the surface size.

    New in pygame 1.9.
- name: Surface.set_alpha
  id: ref/surface#pygame.Surface.set_alpha
  summary: Set the current alpha value for the Surface
  belongs_to: Surface
  description: |-
    set_alpha()

    set the alpha value for the full Surface image

    set_alpha(value, flags=0) -\> None

    set_alpha(None) -\> None

    Set the current alpha value for the Surface. When blitting this Surface onto a destination, the pixels will be drawn slightly transparent. The alpha value is an integer from 0 to 255, 0 is fully transparent and 255 is fully opaque. If `None` is passed for the alpha value, then alpha blending will be disabled, including per-pixel alpha.

    This value is different than the per pixel Surface alpha. For a surface with per pixel alpha, blanket alpha is ignored and `None` is returned.

    Changed in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.

    The optional flags argument can be set to `pygame.RLEACCEL` to provide better performance on non accelerated displays. An `RLEACCEL` Surface will be slower to modify, but quicker to blit as a source.
- name: Surface.set_at
  id: ref/surface#pygame.Surface.set_at
  summary: Set the RGBA or mapped integer color value for a single pixel
  belongs_to: Surface
  description: |-
    set_at()

    set the color value for a single pixel

    set_at((x, y), Color) -\> None

    Set the `RGBA` or mapped integer color value for a single pixel. If the Surface does not have per pixel alphas, the alpha value is ignored. Setting pixels outside the Surface area or outside the Surface clipping will have no effect.

    Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation.

    This function will temporarily lock and unlock the Surface as needed.

    Note

    If the surface is palettized, the pixel color will be set to the most similar color in the palette.
- name: Surface.set_clip
  id: ref/surface#pygame.Surface.set_clip
  summary: Each Surface has an active clipping area
  belongs_to: Surface
  description: |-
    set_clip()

    set the current clipping area of the Surface

    set_clip(rect) -\> None

    set_clip(None) -\> None

    Each Surface has an active clipping area. This is a rectangle that represents the only pixels on the Surface that can be modified. If `None` is passed for the rectangle the full Surface will be available for changes.

    The clipping area is always restricted to the area of the Surface itself. If the clip rectangle is too large it will be shrunk to fit inside the Surface.
- name: Surface.set_colorkey
  id: ref/surface#pygame.Surface.set_colorkey
  summary: Set the current color key for the Surface
  belongs_to: Surface
  description: |-
    set_colorkey()

    Set the transparent colorkey

    set_colorkey(Color, flags=0) -\> None

    set_colorkey(None) -\> None

    Set the current color key for the Surface. When blitting this Surface onto a destination, any pixels that have the same color as the colorkey will be transparent. The color can be an `RGB` color or a mapped color integer. If `None` is passed, the colorkey will be unset.

    The colorkey will be ignored if the Surface is formatted to use per pixel alpha values. The colorkey can be mixed with the full Surface alpha value.

    The optional flags argument can be set to `pygame.RLEACCEL` to provide better performance on non accelerated displays. An `RLEACCEL` Surface will be slower to modify, but quicker to blit as a source.
- name: Surface.set_masks
  id: ref/surface#pygame.Surface.set_masks
  summary: This is not needed for normal pygame usage
  belongs_to: Surface
  description: |-
    set_masks()

    set the bitmasks needed to convert between a color and a mapped integer

    set_masks((r,g,b,a)) -\> None

    This is not needed for normal pygame usage.

    Note

    Starting in pygame 2.0, the masks are read-only and accordingly this method will raise a TypeError if called.

    Deprecated since pygame 2.0.0.

    New in pygame 1.8.1.
- name: Surface.set_palette
  id: ref/surface#pygame.Surface.set_palette
  summary: Set the full palette for an 8-bit Surface
  belongs_to: Surface
  description: |-
    set_palette()

    set the color palette for an 8-bit Surface

    set_palette(\[RGB, RGB, RGB, ...\]) -\> None

    Set the full palette for an 8-bit Surface. This will replace the colors in the existing palette. A partial palette can be passed and only the first colors in the original palette will be changed.

    This function has no effect on a Surface with more than 8-bits per pixel.
- name: Surface.set_palette_at
  id: ref/surface#pygame.Surface.set_palette_at
  summary: Set the palette value for a single entry in a Surface palette
  belongs_to: Surface
  description: |-
    set_palette_at()

    set the color for a single index in an 8-bit Surface palette

    set_palette_at(index, RGB) -\> None

    Set the palette value for a single entry in a Surface palette. The index should be a value from 0 to 255.

    This function has no effect on a Surface with more than 8-bits per pixel.
- name: Surface.set_shifts
  id: ref/surface#pygame.Surface.set_shifts
  summary: This is not needed for normal pygame usage
  belongs_to: Surface
  description: |-
    set_shifts()

    sets the bit shifts needed to convert between a color and a mapped integer

    set_shifts((r,g,b,a)) -\> None

    This is not needed for normal pygame usage.

    Note

    Starting in pygame 2.0, the shifts are read-only and accordingly this method will raise a TypeError if called.

    Deprecated since pygame 2.0.0.

    New in pygame 1.8.1.
- name: Surface.subsurface
  id: ref/surface#pygame.Surface.subsurface
  summary: Returns a new Surface that shares its pixels with its new parent
  belongs_to: Surface
  description: |-
    subsurface()

    create a new surface that references its parent

    subsurface(Rect) -\> Surface

    Returns a new Surface that shares its pixels with its new parent. The new Surface is considered a child of the original. Modifications to either Surface pixels will effect each other. Surface information like clipping area and color keys are unique to each Surface.

    The new Surface will inherit the palette, color key, and alpha settings from its parent.

    It is possible to have any number of subsurfaces and subsubsurfaces on the parent. It is also possible to subsurface the display Surface if the display mode is not hardware accelerated.

    See [`get_offset()`](#pygame.Surface.get_offset "pygame.Surface.get_offset") and [`get_parent()`](#pygame.Surface.get_parent "pygame.Surface.get_parent") to learn more about the state of a subsurface.

    A subsurface will have the same class as the parent surface.
- name: Surface.unlock
  id: ref/surface#pygame.Surface.unlock
  summary: Unlock the Surface pixel data after it has been locked
  belongs_to: Surface
  description: |-
    unlock()

    unlock the Surface memory from pixel access

    unlock() -\> None

    Unlock the Surface pixel data after it has been locked. The unlocked Surface can once again be drawn and managed by pygame. See the [`lock()`](#pygame.Surface.lock "pygame.Surface.lock") documentation for more details.

    All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.

    It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.
- name: Surface.unmap_rgb
  id: ref/surface#pygame.Surface.unmap_rgb
  summary: Convert an mapped integer color into the RGB color components for this Surface
  belongs_to: Surface
  description: |-
    unmap_rgb()

    convert a mapped integer color value into a Color

    unmap_rgb(mapped_int) -\> Color

    Convert an mapped integer color into the `RGB` color components for this Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.

    See the Surface object documentation for more information about colors and pixel formats.
- name: surfarray
  id: ref/surfarray
  summary: Functions to convert between NumPy arrays and Surface objects
  description: "pygame.surfarray  \npygame module for accessing surface pixel data using array interfaces\n\nFunctions to convert between NumPy arrays and Surface objects. This module will only be functional when pygame can use the external NumPy package. If NumPy can't be imported, `surfarray` becomes a `MissingModule` object.\n\nEvery pixel is stored as a single integer value to represent the red, green, and blue colors. The 8-bit images use a value that looks into a colormap. Pixels with higher depth use a bit packing process to place three or four values into a single number.\n\nThe arrays are indexed by the `X` axis first, followed by the `Y` axis. Arrays that treat the pixels as a single integer are referred to as 2D arrays. This module can also separate the red, green, and blue color values into separate indices. These types of arrays are referred to as 3D arrays, and the last index is 0 for red, 1 for green, and 2 for blue.\n\nThe pixels of a 2D array as returned by [`array2d()`](#pygame.surfarray.array2d \"pygame.surfarray.array2d\") and [`pixels2d()`](#pygame.surfarray.pixels2d \"pygame.surfarray.pixels2d\") are mapped to the specific surface. Use [`pygame.Surface.unmap_rgb()`](surface#pygame.Surface.unmap_rgb) to convert to a color, and [`pygame.Surface.map_rgb()`](surface#pygame.Surface.map_rgb) to get the surface specific pixel value of a color. Integer pixel values can only be used directly between surfaces with matching pixel layouts (see [`pygame.Surface`](surface#pygame.Surface)).\n\nAll functions that refer to \"array\" will copy the surface information to a new numpy array. All functions that refer to \"pixels\" will directly reference the pixels from the surface and any changes performed to the array will make changes in the surface. As this last functions share memory with the surface, this one will be locked during the lifetime of the array.\n\npygame.surfarray.array2d()  \nCopy pixels into a 2d array\n\narray2d(Surface) -\\> array\n\nCopy the [`mapped`](surface#pygame.Surface.map_rgb \"pygame.Surface.map_rgb\") (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\npygame.surfarray.pixels2d()  \nReference pixels into a 2d array\n\npixels2d(Surface) -\\> array\n\nCreate a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nPixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array3d()  \nCopy pixels into a 3d array\n\narray3d(Surface) -\\> array\n\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\npygame.surfarray.pixels3d()  \nReference pixels into a 3d array\n\npixels3d(Surface) -\\> array\n\nCreate a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel formats cannot be referenced.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_alpha()  \nCopy pixel alphas into a 2d array\n\narray_alpha(Surface) -\\> array\n\nCopy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\npygame.surfarray.pixels_alpha()  \nReference pixel alphas into a 2d array\n\npixels_alpha(Surface) -\\> array\n\nCreate a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 32-bit Surfaces with a per-pixel alpha value.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_red()  \nCopy red pixels into a 2d array\n\narray_red(Surface) -\\> array\n\nCopy the pixel red values from a Surface into a 2D array. This will work for any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\nNew in pygame 2.0.2.\n\npygame.surfarray.pixels_red()  \nReference pixel red into a 2d array.\n\npixels_red (Surface) -\\> array\n\nCreate a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_green()  \nCopy green pixels into a 2d array\n\narray_green(Surface) -\\> array\n\nCopy the pixel green values from a Surface into a 2D array. This will work for any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\nNew in pygame 2.0.2.\n\npygame.surfarray.pixels_green()  \nReference pixel green into a 2d array.\n\npixels_green (Surface) -\\> array\n\nCreate a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_blue()  \nCopy blue pixels into a 2d array\n\narray_blue(Surface) -\\> array\n\nCopy the pixel blue values from a Surface into a 2D array. This will work for any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).\n\nNew in pygame 2.0.2.\n\npygame.surfarray.pixels_blue()  \nReference pixel blue into a 2d array.\n\npixels_blue (Surface) -\\> array\n\nCreate a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.\n\npygame.surfarray.array_colorkey()  \nCopy the colorkey values into a 2d array\n\narray_colorkey(Surface) -\\> array\n\nCreate a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.\n\nThis will work on any type of Surface format. If the image has no colorkey a solid opaque array will be returned.\n\nThis function will temporarily lock the Surface as pixels are copied.\n\npygame.surfarray.make_surface()  \nCopy an array to a new surface\n\nmake_surface(array) -\\> Surface\n\nCreate a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See [`pygame.pixelcopy`](pixelcopy#module-pygame.pixelcopy).\n\nNew in pygame 1.9.2: array struct interface support.\n\npygame.surfarray.blit_array()  \nBlit directly from a array values\n\nblit_array(Surface, array) -\\> None\n\nDirectly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.\n\nThis function will temporarily lock the Surface as the new values are copied.\n\npygame.surfarray.map_array()  \nMap a 3d array into a 2d array\n\nmap_array(Surface, array3d) -\\> array2d\n\nConvert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.\n\npygame.surfarray.use_arraytype()  \nSets the array system to be used for surface arrays\n\nuse_arraytype (arraytype) -\\> None\n\nDEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is `'numpy'`. Other values will raise ValueError. Using this function will raise a `DeprecationWarning`.\n\npygame.surfarray.get_arraytype()  \nGets the currently active array type.\n\nget_arraytype () -\\> str\n\nDEPRECATED: Returns the currently active array type. This will be a value of the `get_arraytypes()` tuple and indicates which type of array module is used for the array creation. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\npygame.surfarray.get_arraytypes()  \nGets the array system types currently supported.\n\nget_arraytypes () -\\> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the [`pygame.surfarray.use_arraytype()`](#pygame.surfarray.use_arraytype) () method. If no supported array system could be found, None will be returned. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/surfarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/surfarray.html](https://www.pygame.org/docs/ref/surfarray.html)"
- name: surfarray.array2d
  id: ref/surfarray#pygame.surfarray.array2d
  summary: Copy the mapped (raw) pixels from a Surface into a 2D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array2d()

    Copy pixels into a 2d array

    array2d(Surface) -\> array

    Copy the [`mapped`](surface#pygame.Surface.map_rgb "pygame.Surface.map_rgb") (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.

    This function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).
- name: surfarray.array3d
  id: ref/surfarray#pygame.surfarray.array3d
  summary: Copy the pixels from a Surface into a 3D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array3d()

    Copy pixels into a 3d array

    array3d(Surface) -\> array

    Copy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.

    This function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).
- name: surfarray.array_alpha
  id: ref/surfarray#pygame.surfarray.array_alpha
  summary: Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array_alpha()

    Copy pixel alphas into a 2d array

    array_alpha(Surface) -\> array

    Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.

    This function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).
- name: surfarray.array_blue
  id: ref/surfarray#pygame.surfarray.array_blue
  summary: Copy the pixel blue values from a Surface into a 2D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array_blue()

    Copy blue pixels into a 2d array

    array_blue(Surface) -\> array

    Copy the pixel blue values from a Surface into a 2D array. This will work for any type of Surface format.

    This function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).

    New in pygame 2.0.2.
- name: surfarray.array_colorkey
  id: ref/surfarray#pygame.surfarray.array_colorkey
  summary: Create a new array with the colorkey transparency value from each pixel
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array_colorkey()

    Copy the colorkey values into a 2d array

    array_colorkey(Surface) -\> array

    Create a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.

    This will work on any type of Surface format. If the image has no colorkey a solid opaque array will be returned.

    This function will temporarily lock the Surface as pixels are copied.
- name: surfarray.array_green
  id: ref/surfarray#pygame.surfarray.array_green
  summary: Copy the pixel green values from a Surface into a 2D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array_green()

    Copy green pixels into a 2d array

    array_green(Surface) -\> array

    Copy the pixel green values from a Surface into a 2D array. This will work for any type of Surface format.

    This function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).

    New in pygame 2.0.2.
- name: surfarray.array_red
  id: ref/surfarray#pygame.surfarray.array_red
  summary: Copy the pixel red values from a Surface into a 2D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.array_red()

    Copy red pixels into a 2d array

    array_red(Surface) -\> array

    Copy the pixel red values from a Surface into a 2D array. This will work for any type of Surface format.

    This function will temporarily lock the Surface as pixels are copied (see the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method).

    New in pygame 2.0.2.
- name: surfarray.blit_array
  id: ref/surfarray#pygame.surfarray.blit_array
  summary: Directly copy values from an array into a Surface
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.blit_array()

    Blit directly from a array values

    blit_array(Surface, array) -\> None

    Directly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.

    This function will temporarily lock the Surface as the new values are copied.
- name: surfarray.get_arraytype
  id: ref/surfarray#pygame.surfarray.get_arraytype
  summary: Gets the currently active array type
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.get_arraytype()

    Gets the currently active array type.

    get_arraytype () -\> str

    DEPRECATED: Returns the currently active array type. This will be a value of the `get_arraytypes()` tuple and indicates which type of array module is used for the array creation. Using this function will raise a `DeprecationWarning`.

    New in pygame 1.8.
- name: surfarray.get_arraytypes
  id: ref/surfarray#pygame.surfarray.get_arraytypes
  summary: Gets the array system types currently supported
  belongs_to: module-surfarray
  description: "pygame.surfarray.get_arraytypes()\n\nGets the array system types currently supported.\n\nget_arraytypes () -\\> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the [`pygame.surfarray.use_arraytype()`](#pygame.surfarray.use_arraytype) () method. If no supported array system could be found, None will be returned. Using this function will raise a `DeprecationWarning`.\n\nNew in pygame 1.8.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/surfarray.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/surfarray.html](https://www.pygame.org/docs/ref/surfarray.html)"
- name: surfarray.make_surface
  id: ref/surfarray#pygame.surfarray.make_surface
  summary: Create a new Surface that best resembles the data and format on the array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.make_surface()

    Copy an array to a new surface

    make_surface(array) -\> Surface

    Create a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See [`pygame.pixelcopy`](pixelcopy#module-pygame.pixelcopy).

    New in pygame 1.9.2: array struct interface support.
- name: surfarray.map_array
  id: ref/surfarray#pygame.surfarray.map_array
  summary: Convert a 3D array into a 2D array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.map_array()

    Map a 3d array into a 2d array

    map_array(Surface, array3d) -\> array2d

    Convert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.
- name: surfarray.pixels2d
  id: ref/surfarray#pygame.surfarray.pixels2d
  summary: Create a new 2D array that directly references the pixel values in a Surface
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.pixels2d()

    Reference pixels into a 2d array

    pixels2d(Surface) -\> array

    Create a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.

    Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.

    The Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.
- name: surfarray.pixels3d
  id: ref/surfarray#pygame.surfarray.pixels3d
  summary: Create a new 3D array that directly references the pixel values in a Surface
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.pixels3d()

    Reference pixels into a 3d array

    pixels3d(Surface) -\> array

    Create a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.

    This will only work on Surfaces that have 24-bit or 32-bit formats. Lower pixel formats cannot be referenced.

    The Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.
- name: surfarray.pixels_alpha
  id: ref/surfarray#pygame.surfarray.pixels_alpha
  summary: Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.pixels_alpha()

    Reference pixel alphas into a 2d array

    pixels_alpha(Surface) -\> array

    Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.

    This can only work on 32-bit Surfaces with a per-pixel alpha value.

    The Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.
- name: surfarray.pixels_blue
  id: ref/surfarray#pygame.surfarray.pixels_blue
  summary: Reference pixel blue into a 2d array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.pixels_blue()

    Reference pixel blue into a 2d array.

    pixels_blue (Surface) -\> array

    Create a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.
- name: surfarray.pixels_green
  id: ref/surfarray#pygame.surfarray.pixels_green
  summary: Reference pixel green into a 2d array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.pixels_green()

    Reference pixel green into a 2d array.

    pixels_green (Surface) -\> array

    Create a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.
- name: surfarray.pixels_red
  id: ref/surfarray#pygame.surfarray.pixels_red
  summary: Reference pixel red into a 2d array
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.pixels_red()

    Reference pixel red into a 2d array.

    pixels_red (Surface) -\> array

    Create a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.

    This can only work on 24-bit or 32-bit Surfaces.

    The Surface this references will remain locked for the lifetime of the array, since the array generated by this function shares memory with the surface. See the [`pygame.Surface.lock()`](surface#pygame.Surface.lock) - lock the Surface memory for pixel access method.
- name: surfarray.use_arraytype
  id: ref/surfarray#pygame.surfarray.use_arraytype
  summary: 'DEPRECATED: Uses the requested array type for the module functions'
  belongs_to: module-surfarray
  description: |-
    pygame.surfarray.use_arraytype()

    Sets the array system to be used for surface arrays

    use_arraytype (arraytype) -\> None

    DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is `'numpy'`. Other values will raise ValueError. Using this function will raise a `DeprecationWarning`.
- name: tests
  id: ref/tests
  summary: Command line option --help displays a usage message
  description: "pygame.tests  \nPygame unit test suite package\n\nA quick way to run the test suite package from the command line is to import the go submodule with the Python -m option:\n\n``` python\npython -m pygame.tests [<test options>]\n```\n\nCommand line option --help displays a usage message. Available options correspond to the [`pygame.tests.run()`](#pygame.tests.run) arguments.\n\nThe xxxx_test submodules of the tests package are unit test suites for individual parts of pygame. Each can also be run as a main program. This is useful if the test, such as cdrom_test, is interactive.\n\nFor pygame development the test suite can be run from a pygame distribution root directory. Program `run_tests.py` is provided for convenience, though test/go.py can be run directly.\n\nModule level tags control which modules are included in a unit test run. Tags are assigned to a unit test module with a corresponding \\<name\\>\\_tags.py module. The tags module has the global \\_\\_tags\\_\\_, a list of tag names. For example, `cdrom_test.py` has a tag file `cdrom_tags.py` containing a tags list that has the 'interactive' string. The 'interactive' tag indicates `cdrom_test.py` expects user input. It is excluded from a `run_tests.py` or `pygame.tests.go` run. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These two tags indicate unit tests that will not run on a particular platform, or for which no corresponding pygame module is available. The test runner will list each excluded module along with the tag responsible.\n\npygame.tests.run()  \nRun the pygame unit test suite\n\nrun(\\*args, \\*\\*kwds) -\\> tuple\n\nPositional arguments (optional):\n\n``` python\nThe names of tests to include. If omitted then all tests are run. Test names\nneed not include the trailing '_test'.\n```\n\nKeyword arguments:\n\n``` python\nincomplete - fail incomplete tests (default False)\nnosubprocess - run all test suites in the current process\n               (default False, use separate subprocesses)\ndump - dump failures/errors as dict ready to eval (default False)\nfile - if provided, the name of a file into which to dump failures/errors\ntimings - if provided, the number of times to run each individual test to\n          get an average run time (default is run each test once)\nexclude - A list of TAG names to exclude from the run\nshow_output - show silenced stderr/stdout on errors (default False)\nall - dump all results, not just errors (default False)\nrandomize - randomize order of tests (default False)\nseed - if provided, a seed randomizer integer\nmulti_thread - if provided, the number of THREADS in which to run\n               subprocessed tests\ntime_out - if subprocess is True then the time limit in seconds before\n           killing a test (default 30)\nfake - if provided, the name of the fake tests package in the\n       run_tests__tests subpackage to run instead of the normal\n       pygame tests\npython - the path to a python executable to run subprocessed tests\n         (default sys.executable)\n```\n\nReturn value:\n\n``` python\nA tuple of total number of tests run, dictionary of error information.\nThe dictionary is empty if no errors were recorded.\n```\n\nBy default individual test modules are run in separate subprocesses. This recreates normal pygame usage where `pygame.init()` and `pygame.quit()` are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when their time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.\n\nTests are run in a randomized order if the randomize argument is True or a seed argument is provided. If no seed integer is provided then the system time is used.\n\nIndividual test modules may have a \\_\\_tags\\_\\_ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.\n\nThis function can only be called once per Python session. It is not reentrant.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/tests.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/tests.html](https://www.pygame.org/docs/ref/tests.html)"
- name: tests.run
  id: ref/tests#pygame.tests.run
  summary: By default individual test modules are run in separate subprocesses
  belongs_to: module-tests
  description: "pygame.tests.run()\n\nRun the pygame unit test suite\n\nrun(\\*args, \\*\\*kwds) -\\> tuple\n\nPositional arguments (optional):\n\n``` python\nThe names of tests to include. If omitted then all tests are run. Test names\nneed not include the trailing '_test'.\n```\n\nKeyword arguments:\n\n``` python\nincomplete - fail incomplete tests (default False)\nnosubprocess - run all test suites in the current process\n               (default False, use separate subprocesses)\ndump - dump failures/errors as dict ready to eval (default False)\nfile - if provided, the name of a file into which to dump failures/errors\ntimings - if provided, the number of times to run each individual test to\n          get an average run time (default is run each test once)\nexclude - A list of TAG names to exclude from the run\nshow_output - show silenced stderr/stdout on errors (default False)\nall - dump all results, not just errors (default False)\nrandomize - randomize order of tests (default False)\nseed - if provided, a seed randomizer integer\nmulti_thread - if provided, the number of THREADS in which to run\n               subprocessed tests\ntime_out - if subprocess is True then the time limit in seconds before\n           killing a test (default 30)\nfake - if provided, the name of the fake tests package in the\n       run_tests__tests subpackage to run instead of the normal\n       pygame tests\npython - the path to a python executable to run subprocessed tests\n         (default sys.executable)\n```\n\nReturn value:\n\n``` python\nA tuple of total number of tests run, dictionary of error information.\nThe dictionary is empty if no errors were recorded.\n```\n\nBy default individual test modules are run in separate subprocesses. This recreates normal pygame usage where `pygame.init()` and `pygame.quit()` are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when their time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.\n\nTests are run in a randomized order if the randomize argument is True or a seed argument is provided. If no seed integer is provided then the system time is used.\n\nIndividual test modules may have a \\_\\_tags\\_\\_ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.\n\nThis function can only be called once per Python session. It is not reentrant.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/tests.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/tests.html](https://www.pygame.org/docs/ref/tests.html)"
- name: time
  id: ref/time
  summary: Times in pygame are represented in milliseconds (1/1000 seconds)
  description: "pygame.time  \npygame module for monitoring time\n\nTimes in pygame are represented in milliseconds (1/1000 seconds). Most platforms have a limited time resolution of around 10 milliseconds. This resolution, in milliseconds, is given in the `TIMER_RESOLUTION` constant.\n\npygame.time.get_ticks()  \nget the time in milliseconds\n\nget_ticks() -\\> milliseconds\n\nReturn the number of milliseconds since `pygame.init()` was called. Before pygame is initialized this will always be 0.\n\npygame.time.wait()  \npause the program for an amount of time\n\nwait(milliseconds) -\\> time\n\nWill pause for a given number of milliseconds. This function sleeps the process to share the processor with other programs. A program that waits for even a few milliseconds will consume very little processor time. It is slightly less accurate than the `pygame.time.delay()` function.\n\nThis returns the actual number of milliseconds used.\n\npygame.time.delay()  \npause the program for an amount of time\n\ndelay(milliseconds) -\\> time\n\nWill pause for a given number of milliseconds. This function will use the processor (rather than sleeping) in order to make the delay more accurate than `pygame.time.wait()`.\n\nThis returns the actual number of milliseconds used.\n\npygame.time.set_timer()  \nrepeatedly create an event on the event queue\n\nset_timer(event, millis) -\\> None\n\nset_timer(event, millis, loops=0) -\\> None\n\nSet an event to appear on the event queue every given number of milliseconds. The first event will not appear until the amount of time has passed.\n\nThe `event` attribute can be a `pygame.event.Event` object or an integer type that denotes an event.\n\n`loops` is an integer that denotes the number of events posted. If 0 (default) then the events will keep getting posted, unless explicitly stopped.\n\nTo disable the timer for such an event, call the function again with the same event argument with `millis` argument set to 0.\n\nIt is also worth mentioning that a particular event type can only be put on a timer once. In other words, there cannot be two timers for the same event type. Setting an event timer for a particular event discards the old one for that event type.\n\n`loops` replaces the `once` argument, and this does not break backward compatibility\n\nNew in pygame 2.0.0.dev3: once argument added.\n\nChanged in pygame 2.0.1: event argument supports `pygame.event.Event` object\n\nNew in pygame 2.0.1: added loops argument to replace once argument\n\npygame.time.Clock  \ncreate an object to help track time\n\nClock() -\\> Clock\n\nCreates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.\n\ntick()  \nupdate the clock\n\ntick(framerate=0) -\\> milliseconds\n\nThis method should be called once per frame. It will compute how many milliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling `Clock.tick(40)` once per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.\n\ntick_busy_loop()  \nupdate the clock\n\ntick_busy_loop(framerate=0) -\\> milliseconds\n\nThis method should be called once per frame. It will compute how many milliseconds have passed since the previous call.\n\nIf you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)` once per frame, the program will never run at more than 40 frames per second.\n\nNote that this function uses [`pygame.time.delay()`](#pygame.time.delay), which uses lots of CPU in a busy loop to make sure that timing is more accurate.\n\nNew in pygame 1.8.\n\nget_time()  \ntime used in the previous tick\n\nget_time() -\\> milliseconds\n\nThe number of milliseconds that passed between the previous two calls to `Clock.tick()`.\n\nget_rawtime()  \nactual time used in the previous tick\n\nget_rawtime() -\\> milliseconds\n\nSimilar to `Clock.get_time()`, but does not include any time used while `Clock.tick()` was delaying to limit the framerate.\n\nget_fps()  \ncompute the clock framerate\n\nget_fps() -\\> float\n\nCompute your game's framerate (in frames per second). It is computed by averaging the last ten calls to `Clock.tick()`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/time.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/time.html](https://www.pygame.org/docs/ref/time.html)"
- name: time.Clock
  id: ref/time#pygame.time.Clock
  summary: Creates a new Clock object that can be used to track an amount of time
  belongs_to: module-time
  description: |-
    pygame.time.Clock

    create an object to help track time

    Clock() -\> Clock

    Creates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.
- name: time.Clock.get_fps
  id: ref/time#pygame.time.Clock.get_fps
  summary: Compute your game's framerate (in frames per second)
  belongs_to: module-time
  description: "get_fps()\n\ncompute the clock framerate\n\nget_fps() -\\> float\n\nCompute your game's framerate (in frames per second). It is computed by averaging the last ten calls to `Clock.tick()`.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/time.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/time.html](https://www.pygame.org/docs/ref/time.html)"
- name: time.Clock.get_rawtime
  id: ref/time#pygame.time.Clock.get_rawtime
  summary: Similar to Clock.get_time(), but does not include any time used while Clock.tick() was delaying to limit the framerate
  belongs_to: module-time
  description: |-
    get_rawtime()

    actual time used in the previous tick

    get_rawtime() -\> milliseconds

    Similar to `Clock.get_time()`, but does not include any time used while `Clock.tick()` was delaying to limit the framerate.
- name: time.Clock.get_time
  id: ref/time#pygame.time.Clock.get_time
  summary: The number of milliseconds that passed between the previous two calls to Clock.tick()
  belongs_to: module-time
  description: |-
    get_time()

    time used in the previous tick

    get_time() -\> milliseconds

    The number of milliseconds that passed between the previous two calls to `Clock.tick()`.
- name: time.Clock.tick
  id: ref/time#pygame.time.Clock.tick
  summary: This method should be called once per frame
  belongs_to: module-time
  description: |-
    tick()

    update the clock

    tick(framerate=0) -\> milliseconds

    This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.

    If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling `Clock.tick(40)` once per frame, the program will never run at more than 40 frames per second.

    Note that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.
- name: time.Clock.tick_busy_loop
  id: ref/time#pygame.time.Clock.tick_busy_loop
  summary: This method should be called once per frame
  belongs_to: module-time
  description: |-
    tick_busy_loop()

    update the clock

    tick_busy_loop(framerate=0) -\> milliseconds

    This method should be called once per frame. It will compute how many milliseconds have passed since the previous call.

    If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling `Clock.tick_busy_loop(40)` once per frame, the program will never run at more than 40 frames per second.

    Note that this function uses [`pygame.time.delay()`](#pygame.time.delay), which uses lots of CPU in a busy loop to make sure that timing is more accurate.

    New in pygame 1.8.
- name: time.delay
  id: ref/time#pygame.time.delay
  summary: Will pause for a given number of milliseconds
  belongs_to: module-time
  description: |-
    pygame.time.delay()

    pause the program for an amount of time

    delay(milliseconds) -\> time

    Will pause for a given number of milliseconds. This function will use the processor (rather than sleeping) in order to make the delay more accurate than `pygame.time.wait()`.

    This returns the actual number of milliseconds used.
- name: time.get_ticks
  id: ref/time#pygame.time.get_ticks
  summary: Return the number of milliseconds since pygame.init() was called
  belongs_to: module-time
  description: |-
    pygame.time.get_ticks()

    get the time in milliseconds

    get_ticks() -\> milliseconds

    Return the number of milliseconds since `pygame.init()` was called. Before pygame is initialized this will always be 0.
- name: time.set_timer
  id: ref/time#pygame.time.set_timer
  summary: Set an event to appear on the event queue every given number of milliseconds
  belongs_to: module-time
  description: |-
    pygame.time.set_timer()

    repeatedly create an event on the event queue

    set_timer(event, millis) -\> None

    set_timer(event, millis, loops=0) -\> None

    Set an event to appear on the event queue every given number of milliseconds. The first event will not appear until the amount of time has passed.

    The `event` attribute can be a `pygame.event.Event` object or an integer type that denotes an event.

    `loops` is an integer that denotes the number of events posted. If 0 (default) then the events will keep getting posted, unless explicitly stopped.

    To disable the timer for such an event, call the function again with the same event argument with `millis` argument set to 0.

    It is also worth mentioning that a particular event type can only be put on a timer once. In other words, there cannot be two timers for the same event type. Setting an event timer for a particular event discards the old one for that event type.

    `loops` replaces the `once` argument, and this does not break backward compatibility

    New in pygame 2.0.0.dev3: once argument added.

    Changed in pygame 2.0.1: event argument supports `pygame.event.Event` object

    New in pygame 2.0.1: added loops argument to replace once argument
- name: time.wait
  id: ref/time#pygame.time.wait
  summary: Will pause for a given number of milliseconds
  belongs_to: module-time
  description: |-
    pygame.time.wait()

    pause the program for an amount of time

    wait(milliseconds) -\> time

    Will pause for a given number of milliseconds. This function sleeps the process to share the processor with other programs. A program that waits for even a few milliseconds will consume very little processor time. It is slightly less accurate than the `pygame.time.delay()` function.

    This returns the actual number of milliseconds used.
- name: transform
  id: ref/transform
  summary: A Surface transform is an operation that moves or resizes the pixels
  description: "pygame.transform\n\npygame module to transform surfaces\n\nA Surface transform is an operation that moves or resizes the pixels. All these functions take a Surface to operate on and return a new Surface with the results.\n\nSome of the transforms are considered destructive. These means every time they are performed they lose pixel data. Common examples of this are resizing and rotating. For this reason, it is better to re-transform the original surface than to keep transforming an image multiple times. (For example, suppose you are animating a bouncing spring which expands and contracts. If you applied the size changes incrementally to the previous images, you would lose detail. Instead, always begin with the original image and scale to the desired size.)\n\nChanged in pygame 2.0.2: transform functions now support keyword arguments.\n\npygame.transform.flip()  \nflip vertically and horizontally\n\nflip(surface, flip_x, flip_y) -\\> Surface\n\nThis can flip a Surface either vertically, horizontally, or both. The arguments `flip_x` and `flip_y` are booleans that control whether to flip each axis. Flipping a Surface is non-destructive and returns a new Surface with the same dimensions.\n\npygame.transform.scale()  \nresize to new resolution\n\nscale(surface, size, dest_surface=None) -\\> Surface\n\nResizes the Surface to a new size, given as (width, height). This is a fast scale operation that does not sample the results.\n\nAn optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the size (width, height) passed in. Also the destination surface must be the same format.\n\n&nbsp;\n\npygame.transform.scale_by()  \nresize to new resolution, using scalar(s)\n\nscale_by(surface, factor, dest_surface=None) -\\> Surface\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave scale_by feedback with authors](https://github.com/pygame/pygame/pull/2723)\n\nSame as [`scale()`](#pygame.transform.scale \"pygame.transform.scale\"), but scales by some factor, rather than taking the new size explicitly. For example, `transform.scale_by(surf,`` ``3)` will triple the size of the surface in both dimensions. Optionally, the scale factor can be a sequence of two numbers, controlling x and y scaling separately. For example, `transform.scale_by(surf,`` ``(2,`` ``1))` doubles the image width but keeps the height the same.\n\nNew in pygame 2.1.3.\n\n&nbsp;\n\npygame.transform.rotate()  \nrotate an image\n\nrotate(surface, angle) -\\> Surface\n\nUnfiltered counterclockwise rotation. The angle argument represents degrees and can be any floating point value. Negative angle amounts will rotate clockwise.\n\nUnless rotating by 90 degree increments, the image will be padded larger to hold the new size. If the image has pixel alphas, the padded area will be transparent. Otherwise pygame will pick a color that matches the Surface colorkey or the topleft pixel value.\n\n&nbsp;\n\npygame.transform.rotozoom()  \nfiltered scale and rotation\n\nrotozoom(surface, angle, scale) -\\> Surface\n\nThis is a combined scale and rotation transform. The resulting Surface will be a filtered 32-bit Surface. The scale argument is a floating point value that will be multiplied by the current resolution. The angle argument is a floating point value that represents the counterclockwise degrees to rotate. A negative rotation angle will rotate clockwise.\n\n&nbsp;\n\npygame.transform.scale2x()  \nspecialized image doubler\n\nscale2x(surface, dest_surface=None) -\\> Surface\n\nThis will return a new image that is double the size of the original. It uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap graphics.\n\nThis really only has an effect on simple images with solid colors. On photographic and antialiased images it will look like a regular unfiltered scale.\n\nAn optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format.\n\n&nbsp;\n\npygame.transform.smoothscale()  \nscale a surface to an arbitrary size smoothly\n\nsmoothscale(surface, size, dest_surface=None) -\\> Surface\n\nUses one of two different algorithms for scaling each dimension of the input surface as required. For shrinkage, the output pixels are area averages of the colors they cover. For expansion, a bilinear filter is used. For the x86-64 and i686 architectures, optimized `MMX` routines are included and will run much faster than other machine types. The size is a 2 number sequence for (width, height). This function only works for 24-bit or 32-bit surfaces. An exception will be thrown if the input surface bit depth is less than 24.\n\nNew in pygame 1.8.\n\n&nbsp;\n\npygame.transform.smoothscale_by()  \nresize to new resolution, using scalar(s)\n\nsmoothscale_by(surface, factor, dest_surface=None) -\\> Surface\n\n**Experimental:** feature still in development available for testing and feedback. It may change. [Please leave smoothscale_by feedback with authors](https://github.com/pygame/pygame/pull/2723)\n\nSame as [`smoothscale()`](#pygame.transform.smoothscale \"pygame.transform.smoothscale\"), but scales by some factor, rather than taking the new size explicitly. For example, `transform.smoothscale_by(surf,`` ``3)` will triple the size of the surface in both dimensions. Optionally, the scale factor can be a sequence of two numbers, controlling x and y scaling separately. For example, `transform.smoothscale_by(surf,`` ``(2,`` ``1))` doubles the image width but keeps the height the same.\n\nNew in pygame 2.1.3.\n\n&nbsp;\n\npygame.transform.get_smoothscale_backend()  \nreturn smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'\n\nget_smoothscale_backend() -\\> string\n\nShows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no acceleration is available then \"GENERIC\" is returned. For a x86 processor the level of acceleration to use is determined at runtime.\n\nThis function is provided for pygame testing and debugging.\n\n&nbsp;\n\npygame.transform.set_smoothscale_backend()  \nset smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'\n\nset_smoothscale_backend(backend) -\\> None\n\nSets smoothscale acceleration. Takes a string argument. A value of 'GENERIC' turns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE` extensions as well. A value error is raised if type is not recognized or not supported by the current processor.\n\nThis function is provided for pygame testing and debugging. If smoothscale causes an invalid instruction error then it is a pygame/SDL bug that should be reported. Use this function as a temporary fix only.\n\n&nbsp;\n\npygame.transform.chop()  \ngets a copy of an image with an interior area removed\n\nchop(surface, rect) -\\> Surface\n\nExtracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)\n\n`NOTE`: If you want a \"crop\" that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface.\n\n&nbsp;\n\npygame.transform.laplacian()  \nfind edges in a surface\n\nlaplacian(surface, dest_surface=None) -\\> Surface\n\nFinds the edges in a surface using the laplacian algorithm.\n\nNew in pygame 1.8.\n\n&nbsp;\n\npygame.transform.average_surfaces()  \nfind the average surface from many surfaces.\n\naverage_surfaces(surfaces, dest_surface=None, palette_colors=1) -\\> Surface\n\nTakes a sequence of surfaces and returns a surface with average colors from each of the surfaces.\n\npalette_colors - if true we average the colors in palette, otherwise we average the pixel values. This is useful if the surface is actually greyscale colors, and not palette colors.\n\nNote, this function currently does not handle palette using surfaces correctly.\n\nNew in pygame 1.8.\n\nNew in pygame 1.9: `palette_colors` argument\n\n&nbsp;\n\npygame.transform.average_color()  \nfinds the average color of a surface\n\naverage_color(surface, rect=None, consider_alpha=False) -\\> Color\n\nFinds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is taken into account (removing the black artifacts).\n\nNew in pygame 2.1.2: `consider_alpha` argument\n\n&nbsp;\n\npygame.transform.grayscale()  \ngrayscale a surface\n\ngrayscale(surface, dest_surface=None) -\\> Surface\n\nReturns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.\n\nAn optional destination surface can be passed which is faster than creating a new Surface. This destination surface must have the same dimensions (width, height) and depth as the source Surface.\n\npygame.transform.threshold()\n\nfinds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.\n\nthreshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -\\> num_threshold_pixels\n\nThis versatile function can be used for find colors in a 'surf' close to a 'search_color' or close to colors in a separate 'search_surf'.\n\nIt can also be used to transfer pixels into a 'dest_surf' that match or don't match.\n\nBy default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.\n\nIf the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.\n\nParameters\n\n- **dest_surf** ([*pygame.Surface*](surface#pygame.Surface) *or* *None*) -- Surface we are changing. See 'set_behavior'. Should be None if counting (set_behavior is 0).\n\n- **surf** ([*pygame.Surface*](surface#pygame.Surface)) -- Surface we are looking at.\n\n- **search_color** ([*pygame.Color*](color#pygame.Color)) -- Color we are searching for.\n\n- **threshold** ([*pygame.Color*](color#pygame.Color)) -- Within this distance from search_color (or search_surf). You can use a threshold of (r,g,b,a) where the r,g,b can have different thresholds. So you could use an r threshold of 40 and a blue threshold of 2 if you like.\n\n- **set_color** ([*pygame.Color*](color#pygame.Color) *or* *None*) -- Color we set in dest_surf.\n\n- **set_behavior** (*int*) --\n\n  - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.\n\n  - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.\n\n  - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.\n\n- **search_surf** ([*pygame.Surface*](surface#pygame.Surface) *or* *None*) --\n\n  - search_surf=None (default). Search against 'search_color' instead.\n\n  - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.\n\n- **inverse_set** (*bool*) --\n\n  - False, default. Pixels outside of threshold are changed.\n\n  - True, Pixels within threshold are changed.\n\nReturn type\n\nint\n\nReturns\n\nThe number of pixels that are within the 'threshold' in 'surf' compared to either 'search_color' or search_surf.\n\nExamples\n\nSee the threshold tests for a full of examples: [https://github.com/pygame/pygame/blob/main/test/transform_test.py](https://github.com/pygame/pygame/blob/main/test/transform_test.py)\n\n``` python\ndef test_threshold_dest_surf_not_change(self):\n        \"\"\"the pixels within the threshold.\n\n        All pixels not within threshold are changed to set_color.\n        So there should be none changed in this test.\n        \"\"\"\n        (w, h) = size = (32, 32)\n        threshold = (20, 20, 20, 20)\n        original_color = (25, 25, 25, 25)\n        original_dest_color = (65, 65, 65, 55)\n        threshold_color = (10, 10, 10, 10)\n        set_color = (255, 10, 10, 10)\n\n        surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n        dest_surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n        search_surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n\n        surf.fill(original_color)\n        search_surf.fill(threshold_color)\n        dest_surf.fill(original_dest_color)\n\n        # set_behavior=1, set dest_surface from set_color.\n        # all within threshold of third_surface, so no color is set.\n\n        THRESHOLD_BEHAVIOR_FROM_SEARCH_COLOR = 1\n        pixels_within_threshold = pygame.transform.threshold(\n            dest_surface=dest_surf,\n            surface=surf,\n            search_color=None,\n            threshold=threshold,\n            set_color=set_color,\n            set_behavior=THRESHOLD_BEHAVIOR_FROM_SEARCH_COLOR,\n            search_surf=search_surf,\n        )\n\n        # # Return, of pixels within threshold is correct\n        self.assertEqual(w * h, pixels_within_threshold)\n\n        # # Size of dest surface is correct\n        dest_rect = dest_surf.get_rect()\n        dest_size = dest_rect.size\n        self.assertEqual(size, dest_size)\n\n        # The color is not the change_color specified for every pixel As all\n        # pixels are within threshold\n\n        for pt in test_utils.rect_area_pts(dest_rect):\n            self.assertNotEqual(dest_surf.get_at(pt), set_color)\n            self.assertEqual(dest_surf.get_at(pt), original_dest_color)\n```\n\nNew in pygame 1.8.\n\nChanged in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/transform.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/transform.html](https://www.pygame.org/docs/ref/transform.html)"
- name: transform.average_color
  id: ref/transform#pygame.transform.average_color
  summary: Finds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color
  belongs_to: module-transform
  description: |-
    pygame.transform.average_color()

    finds the average color of a surface

    average_color(surface, rect=None, consider_alpha=False) -\> Color

    Finds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is taken into account (removing the black artifacts).

    New in pygame 2.1.2: `consider_alpha` argument
- name: transform.average_surfaces
  id: ref/transform#pygame.transform.average_surfaces
  summary: find the average surface from many surfaces
  belongs_to: module-transform
  description: |-
    pygame.transform.average_surfaces()

    find the average surface from many surfaces.

    average_surfaces(surfaces, dest_surface=None, palette_colors=1) -\> Surface

    Takes a sequence of surfaces and returns a surface with average colors from each of the surfaces.

    palette_colors - if true we average the colors in palette, otherwise we average the pixel values. This is useful if the surface is actually greyscale colors, and not palette colors.

    Note, this function currently does not handle palette using surfaces correctly.

    New in pygame 1.8.

    New in pygame 1.9: `palette_colors` argument
- name: transform.chop
  id: ref/transform#pygame.transform.chop
  summary: Extracts a portion of an image
  belongs_to: module-transform
  description: |-
    pygame.transform.chop()

    gets a copy of an image with an interior area removed

    chop(surface, rect) -\> Surface

    Extracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)

    `NOTE`: If you want a "crop" that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface.
- name: transform.flip
  id: ref/transform#pygame.transform.flip
  summary: This can flip a Surface either vertically, horizontally, or both
  belongs_to: module-transform
  description: |-
    pygame.transform.flip()

    flip vertically and horizontally

    flip(surface, flip_x, flip_y) -\> Surface

    This can flip a Surface either vertically, horizontally, or both. The arguments `flip_x` and `flip_y` are booleans that control whether to flip each axis. Flipping a Surface is non-destructive and returns a new Surface with the same dimensions.
- name: transform.get_smoothscale_backend
  id: ref/transform#pygame.transform.get_smoothscale_backend
  summary: Shows whether or not smoothscale is using MMX or SSE acceleration
  belongs_to: module-transform
  description: |-
    pygame.transform.get_smoothscale_backend()

    return smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'

    get_smoothscale_backend() -\> string

    Shows whether or not smoothscale is using `MMX` or `SSE` acceleration. If no acceleration is available then "GENERIC" is returned. For a x86 processor the level of acceleration to use is determined at runtime.

    This function is provided for pygame testing and debugging.
- name: transform.grayscale
  id: ref/transform#pygame.transform.grayscale
  summary: Returns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths
  belongs_to: module-transform
  description: |-
    pygame.transform.grayscale()

    grayscale a surface

    grayscale(surface, dest_surface=None) -\> Surface

    Returns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.

    An optional destination surface can be passed which is faster than creating a new Surface. This destination surface must have the same dimensions (width, height) and depth as the source Surface.
- name: transform.laplacian
  id: ref/transform#pygame.transform.laplacian
  summary: Finds the edges in a surface using the laplacian algorithm
  belongs_to: module-transform
  description: |-
    pygame.transform.laplacian()

    find edges in a surface

    laplacian(surface, dest_surface=None) -\> Surface

    Finds the edges in a surface using the laplacian algorithm.

    New in pygame 1.8.
- name: transform.rotate
  id: ref/transform#pygame.transform.rotate
  summary: Unfiltered counterclockwise rotation
  belongs_to: module-transform
  description: |-
    pygame.transform.rotate()

    rotate an image

    rotate(surface, angle) -\> Surface

    Unfiltered counterclockwise rotation. The angle argument represents degrees and can be any floating point value. Negative angle amounts will rotate clockwise.

    Unless rotating by 90 degree increments, the image will be padded larger to hold the new size. If the image has pixel alphas, the padded area will be transparent. Otherwise pygame will pick a color that matches the Surface colorkey or the topleft pixel value.
- name: transform.rotozoom
  id: ref/transform#pygame.transform.rotozoom
  summary: This is a combined scale and rotation transform
  belongs_to: module-transform
  description: |-
    pygame.transform.rotozoom()

    filtered scale and rotation

    rotozoom(surface, angle, scale) -\> Surface

    This is a combined scale and rotation transform. The resulting Surface will be a filtered 32-bit Surface. The scale argument is a floating point value that will be multiplied by the current resolution. The angle argument is a floating point value that represents the counterclockwise degrees to rotate. A negative rotation angle will rotate clockwise.
- name: transform.scale
  id: ref/transform#pygame.transform.scale
  summary: Resizes the Surface to a new size, given as (width, height)
  belongs_to: module-transform
  description: |-
    pygame.transform.scale()

    resize to new resolution

    scale(surface, size, dest_surface=None) -\> Surface

    Resizes the Surface to a new size, given as (width, height). This is a fast scale operation that does not sample the results.

    An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the size (width, height) passed in. Also the destination surface must be the same format.
- name: transform.scale2x
  id: ref/transform#pygame.transform.scale2x
  summary: This will return a new image that is double the size of the original
  belongs_to: module-transform
  description: |-
    pygame.transform.scale2x()

    specialized image doubler

    scale2x(surface, dest_surface=None) -\> Surface

    This will return a new image that is double the size of the original. It uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of bitmap graphics.

    This really only has an effect on simple images with solid colors. On photographic and antialiased images it will look like a regular unfiltered scale.

    An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format.
- name: transform.scale_by
  id: ref/transform#pygame.transform.scale_by
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: module-transform
  description: |-
    pygame.transform.scale_by()

    resize to new resolution, using scalar(s)

    scale_by(surface, factor, dest_surface=None) -\> Surface

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave scale_by feedback with authors](https://github.com/pygame/pygame/pull/2723)

    Same as [`scale()`](#pygame.transform.scale "pygame.transform.scale"), but scales by some factor, rather than taking the new size explicitly. For example, `transform.scale_by(surf,``3)` will triple the size of the surface in both dimensions. Optionally, the scale factor can be a sequence of two numbers, controlling x and y scaling separately. For example, `transform.scale_by(surf,``(2,``1))` doubles the image width but keeps the height the same.

    New in pygame 2.1.3.
- name: transform.set_smoothscale_backend
  id: ref/transform#pygame.transform.set_smoothscale_backend
  summary: Sets smoothscale acceleration
  belongs_to: module-transform
  description: |-
    pygame.transform.set_smoothscale_backend()

    set smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'

    set_smoothscale_backend(backend) -\> None

    Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC' turns off acceleration. 'MMX' uses `MMX` instructions only. 'SSE' allows `SSE` extensions as well. A value error is raised if type is not recognized or not supported by the current processor.

    This function is provided for pygame testing and debugging. If smoothscale causes an invalid instruction error then it is a pygame/SDL bug that should be reported. Use this function as a temporary fix only.
- name: transform.smoothscale
  id: ref/transform#pygame.transform.smoothscale
  summary: Uses one of two different algorithms for scaling each dimension of the input surface as required
  belongs_to: module-transform
  description: |-
    pygame.transform.smoothscale()

    scale a surface to an arbitrary size smoothly

    smoothscale(surface, size, dest_surface=None) -\> Surface

    Uses one of two different algorithms for scaling each dimension of the input surface as required. For shrinkage, the output pixels are area averages of the colors they cover. For expansion, a bilinear filter is used. For the x86-64 and i686 architectures, optimized `MMX` routines are included and will run much faster than other machine types. The size is a 2 number sequence for (width, height). This function only works for 24-bit or 32-bit surfaces. An exception will be thrown if the input surface bit depth is less than 24.

    New in pygame 1.8.
- name: transform.smoothscale_by
  id: ref/transform#pygame.transform.smoothscale_by
  summary: 'Experimental: feature still in development available for testing and feedback'
  belongs_to: module-transform
  description: |-
    pygame.transform.smoothscale_by()

    resize to new resolution, using scalar(s)

    smoothscale_by(surface, factor, dest_surface=None) -\> Surface

    **Experimental:** feature still in development available for testing and feedback. It may change. [Please leave smoothscale_by feedback with authors](https://github.com/pygame/pygame/pull/2723)

    Same as [`smoothscale()`](#pygame.transform.smoothscale "pygame.transform.smoothscale"), but scales by some factor, rather than taking the new size explicitly. For example, `transform.smoothscale_by(surf,``3)` will triple the size of the surface in both dimensions. Optionally, the scale factor can be a sequence of two numbers, controlling x and y scaling separately. For example, `transform.smoothscale_by(surf,``(2,``1))` doubles the image width but keeps the height the same.

    New in pygame 2.1.3.
- name: transform.threshold
  id: ref/transform#pygame.transform.threshold
  summary: It can also be used to transfer pixels into a 'dest_surf' that match or don't match
  belongs_to: module-transform
  description: "pygame.transform.threshold()\n\nfinds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.\n\nthreshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -\\> num_threshold_pixels\n\nThis versatile function can be used for find colors in a 'surf' close to a 'search_color' or close to colors in a separate 'search_surf'.\n\nIt can also be used to transfer pixels into a 'dest_surf' that match or don't match.\n\nBy default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.\n\nIf the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.\n\nParameters\n\n- **dest_surf** ([*pygame.Surface*](surface#pygame.Surface) *or* *None*) -- Surface we are changing. See 'set_behavior'. Should be None if counting (set_behavior is 0).\n\n- **surf** ([*pygame.Surface*](surface#pygame.Surface)) -- Surface we are looking at.\n\n- **search_color** ([*pygame.Color*](color#pygame.Color)) -- Color we are searching for.\n\n- **threshold** ([*pygame.Color*](color#pygame.Color)) -- Within this distance from search_color (or search_surf). You can use a threshold of (r,g,b,a) where the r,g,b can have different thresholds. So you could use an r threshold of 40 and a blue threshold of 2 if you like.\n\n- **set_color** ([*pygame.Color*](color#pygame.Color) *or* *None*) -- Color we set in dest_surf.\n\n- **set_behavior** (*int*) --\n\n  - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.\n\n  - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.\n\n  - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.\n\n- **search_surf** ([*pygame.Surface*](surface#pygame.Surface) *or* *None*) --\n\n  - search_surf=None (default). Search against 'search_color' instead.\n\n  - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.\n\n- **inverse_set** (*bool*) --\n\n  - False, default. Pixels outside of threshold are changed.\n\n  - True, Pixels within threshold are changed.\n\nReturn type\n\nint\n\nReturns\n\nThe number of pixels that are within the 'threshold' in 'surf' compared to either 'search_color' or search_surf.\n\nExamples\n\nSee the threshold tests for a full of examples: [https://github.com/pygame/pygame/blob/main/test/transform_test.py](https://github.com/pygame/pygame/blob/main/test/transform_test.py)\n\n``` python\ndef test_threshold_dest_surf_not_change(self):\n        \"\"\"the pixels within the threshold.\n\n        All pixels not within threshold are changed to set_color.\n        So there should be none changed in this test.\n        \"\"\"\n        (w, h) = size = (32, 32)\n        threshold = (20, 20, 20, 20)\n        original_color = (25, 25, 25, 25)\n        original_dest_color = (65, 65, 65, 55)\n        threshold_color = (10, 10, 10, 10)\n        set_color = (255, 10, 10, 10)\n\n        surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n        dest_surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n        search_surf = pygame.Surface(size, pygame.SRCALPHA, 32)\n\n        surf.fill(original_color)\n        search_surf.fill(threshold_color)\n        dest_surf.fill(original_dest_color)\n\n        # set_behavior=1, set dest_surface from set_color.\n        # all within threshold of third_surface, so no color is set.\n\n        THRESHOLD_BEHAVIOR_FROM_SEARCH_COLOR = 1\n        pixels_within_threshold = pygame.transform.threshold(\n            dest_surface=dest_surf,\n            surface=surf,\n            search_color=None,\n            threshold=threshold,\n            set_color=set_color,\n            set_behavior=THRESHOLD_BEHAVIOR_FROM_SEARCH_COLOR,\n            search_surf=search_surf,\n        )\n\n        # # Return, of pixels within threshold is correct\n        self.assertEqual(w * h, pixels_within_threshold)\n\n        # # Size of dest surface is correct\n        dest_rect = dest_surf.get_rect()\n        dest_size = dest_rect.size\n        self.assertEqual(size, dest_size)\n\n        # The color is not the change_color specified for every pixel As all\n        # pixels are within threshold\n\n        for pt in test_utils.rect_area_pts(dest_rect):\n            self.assertNotEqual(dest_surf.get_at(pt), set_color)\n            self.assertEqual(dest_surf.get_at(pt), original_dest_color)\n```\n\nNew in pygame 1.8.\n\nChanged in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code.\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/transform.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/transform.html](https://www.pygame.org/docs/ref/transform.html)"
- name: version.rev
  id: ref/pygame#pygame.version.rev
  summary: The Mercurial node identifier of the repository checkout from which this package was built
  belongs_to: module-pygame
  description: |-
    pygame.version.rev

    repository revision of the build

    rev = 'a6f89747b551+'

    The Mercurial node identifier of the repository checkout from which this package was built. If the identifier ends with a plus sign '+' then the package contains uncommitted changes. Please include this revision number in bug reports, especially for non-release pygame builds.

    Important note: pygame development has moved to github, this variable is obsolete now. As soon as development shifted to github, this variable started returning an empty string `""`. It has always been returning an empty string since `v1.9.5`.

    Changed in pygame 1.9.5: Always returns an empty string `""`.
- name: version.SDL
  id: ref/pygame#pygame.version.SDL
  summary: This is the SDL library version represented as an extended tuple
  belongs_to: module-pygame
  description: "pygame.version.SDL\n\ntupled integers of the SDL library version\n\nSDL = '(2, 0, 12)'\n\nThis is the SDL library version represented as an extended tuple. It also has attributes 'major', 'minor' & 'patch' that can be accessed like this:\n\n``` python\n>>> pygame.version.SDL.major\n2\n```\n\nprinting the whole thing returns a string like this:\n\n``` python\n>>> pygame.version.SDL\nSDLVersion(major=2, minor=0, patch=12)\n```\n\nNew in pygame 2.0.0.\n\n**Setting Environment Variables**\n\nSome aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\n``` python\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n```\n\nOr to preserve users ability to override the variable:\n\n``` python\nimport os\nos.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')\n```\n\nIf the variable is more useful for users of an app to set than the developer then they can set it like this:\n\n**Windows**:\n\n``` python\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\npython my_application.py\n```\n\n**Linux/Mac**:\n\n``` python\nENV_VAR=value python my_application.py\n```\n\nFor some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief description of what they do.\n\n  \n\n**Pygame Environment Variables**\n\nThese variables are defined by pygame itself.\n\n  \n\n``` python\nPYGAME_DISPLAY - Experimental (subject to change)\nSet index of the display to use, \"0\" is the default.\n```\n\nThis sets the display where pygame will open its window or screen. The value set here will be used if set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode), and as long as no 'display' parameter is passed into [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_FORCE_SCALE -\nSet to \"photo\" or \"default\".\n```\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nPYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0\nSet to \"1\" to enable the SDL2 blitter.\n```\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before [`pygame.init()`](#pygame.init) is called.\n\n  \n\n``` python\nPYGAME_HIDE_SUPPORT_PROMPT -\nSet to \"1\" to hide the prompt.\n```\n\nThis stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_FREETYPE -\nSet to \"1\" to enable.\n```\n\nThis switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.\n\n  \n\n``` python\nPYGAME_CAMERA -\nSet to \"opencv\" or \"vidcapture\"\n```\n\nForces the library backend used in the camera module, overriding the platform defaults. Must be set before calling [`pygame.camera.init()`](camera#pygame.camera.init).\n\nIn pygame 2.0.3, backends can be set programmatically instead, and the old OpenCV backend has been replaced with one on top of \"opencv-python,\" rather than the old \"highgui\" OpenCV port. Also, there is a new native Windows backend available.\n\n  \n\n  \n\n**SDL Environment Variables**\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try [here](https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html). For Pygame 2, some selected environment variables are listed below.\n\n  \n\n``` python\nSDL_VIDEO_CENTERED -\nSet to \"1\" to enable centering the window.\n```\n\nThis will make the pygame window open in the centre of the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEO_WINDOW_POS -\nSet to \"x,y\" to position the top left corner of the window.\n```\n\nThis allows control over the placement of the pygame window within the display. Must be set before calling [`pygame.display.set_mode()`](display#pygame.display.set_mode).\n\n  \n\n``` python\nSDL_VIDEODRIVER -\nSet to \"drivername\" to change the video driver used.\n```\n\nOn some platforms there are multiple video drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.display.init()`](display#pygame.display.init).\n\n  \n\n``` python\nSDL_AUDIODRIVER -\nSet to \"drivername\" to change the audio driver used.\n```\n\nOn some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available [here](https://wiki.libsdl.org/FAQUsingSDL). Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.mixer.init()`](mixer#pygame.mixer.init).\n\n  \n\n``` python\nSDL_VIDEO_ALLOW_SCREENSAVER\nSet to \"1\" to allow screensavers while pygame apps are running.\n```\n\nBy default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.\n\n  \n\n``` python\nSDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\nSet to \"0\" to re-enable the compositor.\n```\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which *doesn't* update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms.\n\n  \n\n``` python\nSDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\nSet to \"1\" to allow joysticks to be updated even when the window is out of focus\n```\n\nBy default, when the window is not in focus, input devices do not get updated. However, using this environment variable it is possible to get joystick updates even when the window is in the background. Must be set before calling [`pygame.init()`](#pygame.init) or [`pygame.joystick.init()`](joystick#pygame.joystick.init).\n\n  \n  \n\n------------------------------------------------------------------------\n\n[Edit on GitHub](https://github.com/pygame/pygame/edit/main/docs/reST/ref/pygame.rst)\n\n© Pygame Developers.  \nLicensed under the GNU LGPL License version 2.1.  \n[https://www.pygame.org/docs/ref/pygame.html](https://www.pygame.org/docs/ref/pygame.html)"
- name: version.ver
  id: ref/pygame#pygame.version.ver
  summary: This is the version represented as a string
  belongs_to: module-pygame
  description: |-
    pygame.version.ver

    version number as a string

    ver = '1.2'

    This is the version represented as a string. It can contain a micro release number as well, e.g. `'1.5.2'`
- name: version.vernum
  id: ref/pygame#pygame.version.vernum
  summary: This version information can easily be compared with other version numbers of the same format
  belongs_to: module-pygame
  description: |-
    pygame.version.vernum

    tupled integers of the version

    vernum = (1, 5, 3)

    This version information can easily be compared with other version numbers of the same format. An example of checking pygame version numbers would look like this:

    ``` python
    if pygame.version.vernum < (1, 5):
        print('Warning, older version of pygame (%s)' %  pygame.version.ver)
        disable_advanced_features = True
    ```

    New in pygame 1.9.6: Attributes `major`, `minor`, and `patch`.

    ``` python
    vernum.major == vernum[0]
    vernum.minor == vernum[1]
    vernum.patch == vernum[2]
    ```

    Changed in pygame 1.9.6: `str(pygame.version.vernum)` returns a string like `"2.0.0"` instead of `"(2,``0,``0)"`.

    Changed in pygame 1.9.6: `repr(pygame.version.vernum)` returns a string like `"PygameVersion(major=2,``minor=0,``patch=0)"` instead of `"(2,``0,``0)"`.
