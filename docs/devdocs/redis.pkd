---
name: Redis
slug: redis
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2006–2022 Salvatore Sanfilippo
  Licensed under the Creative Commons Attribution-ShareAlike License 4.0.
  https://redis.io/commands
homepage: https://redis.io/

---
- name: acl cat
  id: acl-cat/index
  summary: 'Time complexity: O(1) since the categories and commands are a fixed set'
  description: "# ACL\n\n    ACL CAT\n\nSyntax\n\n``` command-syntax\nACL CAT [category]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1) since the categories and commands are a fixed set.\n\nACL categories:  \n`@slow`,\n\nThe command shows the available ACL categories if called without arguments. If a category name is given, the command shows all the Redis commands in the specified category.\n\nACL categories are very useful in order to create ACL rules that include or exclude a large set of commands at once, without specifying every single command. For instance, the following rule will let the user `karin` perform everything but the most dangerous operations that may affect the server stability:\n\n    ACL SETUSER karin on +@all -@dangerous\n\nWe first add all the commands to the set of commands that `karin` is able to execute, but then we remove all the dangerous commands.\n\nChecking for all the available categories is as simple as:\n\n```\n> ACL CAT\n 1) \"keyspace\"\n 2) \"read\"\n 3) \"write\"\n 4) \"set\"\n 5) \"sortedset\"\n 6) \"list\"\n 7) \"hash\"\n 8) \"string\"\n 9) \"bitmap\"\n10) \"hyperloglog\"\n11) \"geo\"\n12) \"stream\"\n13) \"pubsub\"\n14) \"admin\"\n15) \"fast\"\n16) \"slow\"\n17) \"blocking\"\n18) \"dangerous\"\n19) \"connection\"\n20) \"transaction\"\n21) \"scripting\"\n```\n\nThen we may want to know what commands are part of a given category:\n\n```\n> ACL CAT dangerous\n 1) \"flushdb\"\n 2) \"acl\"\n 3) \"slowlog\"\n 4) \"debug\"\n 5) \"role\"\n 6) \"keys\"\n 7) \"pfselftest\"\n 8) \"client\"\n 9) \"bgrewriteaof\"\n10) \"replicaof\"\n11) \"monitor\"\n12) \"restore-asking\"\n13) \"latency\"\n14) \"replconf\"\n15) \"pfdebug\"\n16) \"bgsave\"\n17) \"sync\"\n18) \"config\"\n19) \"flushall\"\n20) \"cluster\"\n21) \"info\"\n22) \"lastsave\"\n23) \"slaveof\"\n24) \"swapdb\"\n25) \"module\"\n26) \"restore\"\n27) \"migrate\"\n28) \"save\"\n29) \"shutdown\"\n30) \"psync\"\n31) \"sort\"\n```\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of ACL categories or a list of commands inside a given category. The command may return an error if an invalid category name is given as argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-cat/](https://redis.io/commands/acl-cat/)"
- name: acl deluser
  id: acl-deluser/index
  summary: 'Time complexity: O(1) amortized time considering the typical user'
  description: "# ACL\n\n    ACL DELUSER\n\nSyntax\n\n``` command-syntax\nACL DELUSER username [username ...]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1) amortized time considering the typical user.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nDelete all the specified ACL users and terminate all the connections that are authenticated with such users. Note: the special `default` user cannot be removed from the system, this is the default user that every new connection is authenticated with. The list of users may include usernames that do not exist, in such case no operation is performed for the non existing users.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of users that were deleted. This number will not always match the number of arguments since certain users may not exist.\n\n## Examples\n\n```\n> ACL DELUSER antirez\n1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-deluser/](https://redis.io/commands/acl-deluser/)"
- name: acl dryrun
  id: acl-dryrun/index
  summary: 'Time complexity: O(1)'
  description: "# ACL\n\n    ACL DRYRUN\n\nSyntax\n\n``` command-syntax\nACL DRYRUN username command [arg [arg ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1).\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nSimulate the execution of a given command by a given user. This command can be used to test the permissions of a given user without having to enable the user or cause the side effects of running the command.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` on success. [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): An error describing why the user can't execute the command.\n\n## Examples\n\n```\n> ACL SETUSER VIRGINIA +SET ~*\n\"OK\"\n> ACL DRYRUN VIRGINIA SET foo bar\n\"OK\"\n> ACL DRYRUN VIRGINIA GET foo bar\n\"This user has no permissions to run the 'GET' command\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-dryrun/](https://redis.io/commands/acl-dryrun/)"
- name: acl genpass
  id: acl-genpass/index
  summary: ACL users need a solid password in order to authenticate to the server without security risks
  description: "# ACL\n\n    ACL GENPASS\n\nSyntax\n\n``` command-syntax\nACL GENPASS [bits]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\nACL users need a solid password in order to authenticate to the server without security risks. Such password does not need to be remembered by humans, but only by computers, so it can be very long and strong (unguessable by an external attacker). The `ACL GENPASS` command generates a password starting from /dev/urandom if available, otherwise (in systems without /dev/urandom) it uses a weaker system that is likely still better than picking a weak password by hand.\n\nBy default (if /dev/urandom is available) the password is strong and can be used for other uses in the context of a Redis application, for instance in order to create unique session identifiers or other kind of unguessable and not colliding IDs. The password generation is also very cheap because we don't really ask /dev/urandom for bits at every execution. At startup Redis creates a seed using /dev/urandom, then it will use SHA256 in counter mode, with HMAC-SHA256(seed,counter) as primitive, in order to create more random bytes as needed. This means that the application developer should be feel free to abuse `ACL GENPASS` to create as many secure pseudorandom strings as needed.\n\nThe command output is a hexadecimal representation of a binary string. By default it emits 256 bits (so 64 hex characters). The user can provide an argument in form of number of bits to emit from 1 to 1024 to change the output length. Note that the number of bits provided is always rounded to the next multiple of 4. So for instance asking for just 1 bit password will result in 4 bits to be emitted, in the form of a single hex character.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): by default 64 bytes string representing 256 bits of pseudorandom data. Otherwise if an argument if needed, the output string length is the number of specified bits (rounded to the next multiple of 4) divided by 4.\n\n## Examples\n\n```\n> ACL GENPASS\n\"dd721260bfe1b3d9601e7fbab36de6d04e2e67b0ef1c53de59d45950db0dd3cc\"\n\n> ACL GENPASS 32\n\"355ef3dd\"\n\n> ACL GENPASS 5\n\"90\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-genpass/](https://redis.io/commands/acl-genpass/)"
- name: acl getuser
  id: acl-getuser/index
  summary: 'Time complexity: O(N)'
  description: "# ACL\n\n    ACL GETUSER\n\nSyntax\n\n``` command-syntax\nACL GETUSER username\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N). Where N is the number of password, command and pattern rules that the user has.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command returns all the rules defined for an existing ACL user.\n\nSpecifically, it lists the user's ACL flags, password hashes, commands, key patterns, channel patterns (Added in version 6.2) and selectors (Added in version 7.0). Additional information may be returned in the future if more metadata is added to the user.\n\nCommand rules are always returned in the same format as the one used in the [`ACL SETUSER`](../acl-setuser) command. Before version 7.0, keys and channels were returned as an array of patterns, however in version 7.0 later they are now also returned in same format as the one used in the [`ACL SETUSER`](../acl-setuser) command. Note: This description of command rules reflects the user's effective permissions, so while it may not be identical to the set of rules used to configure the user, it is still functionally identical.\n\nSelectors are listed in the order they were applied to the user, and include information about commands, key patterns, and channel patterns.\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of ACL rule definitions for the user.\n\nIf `user` does not exist a [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) is returned.\n\n## Examples\n\nHere's an example configuration for a user\n\n```\n> ACL SETUSER sample on nopass +GET allkeys &* (+SET ~key2)\n\"OK\"\n> ACL GETUSER sample\n1) \"flags\"\n2) 1) \"on\"\n   2) \"allkeys\"\n   3) \"nopass\"\n3) \"passwords\"\n4) (empty array)\n5) \"commands\"\n6) \"+@all\"\n7) \"keys\"\n8) \"~*\"\n9) \"channels\"\n10) \"&*\"\n11) \"selectors\"\n12) 1) 1) \"commands\"\n       6) \"+SET\"\n       7) \"keys\"\n       8) \"~key2\"\n       9) \"channels\"\n       10) \"&*\"\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added Pub/Sub channel patterns.\n- Starting with Redis version 7.0.0: Added selectors and changed the format of key and channel patterns from a list to their rule representation.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-getuser/](https://redis.io/commands/acl-getuser/)"
- name: acl list
  id: acl-list/index
  summary: 'Time complexity: O(N)'
  description: "# ACL\n\n    ACL LIST\n\nSyntax\n\n``` command-syntax\nACL LIST\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N). Where N is the number of configured users.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command shows the currently active ACL rules in the Redis server. Each line in the returned array defines a different user, and the format is the same used in the redis.conf file or the external ACL file, so you can cut and paste what is returned by the ACL LIST command directly inside a configuration file if you wish (but make sure to check [`ACL SAVE`](../acl-save)).\n\n## Return\n\nAn array of strings.\n\n## Examples\n\n```\n> ACL LIST\n1) \"user antirez on #9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 ~objects:* &* +@all -@admin -@dangerous\"\n2) \"user default on nopass ~* &* +@all\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-list/](https://redis.io/commands/acl-list/)"
- name: acl load
  id: acl-load/index
  summary: 'Time complexity: O(N)'
  description: "# ACL\n\n    ACL LOAD\n\nSyntax\n\n``` command-syntax\nACL LOAD\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N). Where N is the number of configured users.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nWhen Redis is configured to use an ACL file (with the `aclfile` configuration option), this command will reload the ACLs from the file, replacing all the current ACL rules with the ones defined in the file. The command makes sure to have an *all or nothing* behavior, that is:\n\n- If every line in the file is valid, all the ACLs are loaded.\n- If one or more line in the file is not valid, nothing is loaded, and the old ACL rules defined in the server memory continue to be used.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` on success.\n\nThe command may fail with an error for several reasons: if the file is not readable, if there is an error inside the file, and in such case the error will be reported to the user in the error. Finally the command will fail if the server is not configured to use an external ACL file.\n\n## Examples\n\n```\n> ACL LOAD\n+OK\n\n> ACL LOAD\n-ERR /tmp/foo:1: Unknown command or category name in ACL...\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-load/](https://redis.io/commands/acl-load/)"
- name: acl log
  id: acl-log/index
  summary: 'Time complexity: O(N) with N being the number of entries shown'
  description: "# ACL\n\n    ACL LOG\n\nSyntax\n\n``` command-syntax\nACL LOG [count | RESET]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N) with N being the number of entries shown.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command shows a list of recent ACL security events:\n\n1.  Failures to authenticate their connections with [`AUTH`](../auth) or [`HELLO`](../hello).\n2.  Commands denied because against the current ACL rules.\n3.  Commands denied because accessing keys not allowed in the current ACL rules.\n\nThe optional argument specifies how many entries to show. By default up to ten failures are returned. The special [`RESET`](../reset) argument clears the log. Entries are displayed starting from the most recent.\n\n## Return\n\nWhen called to show security events:\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of ACL security events.\n\nWhen called with [`RESET`](../reset):\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the security log was cleared.\n\n## Examples\n\n```\n> AUTH someuser wrongpassword\n(error) WRONGPASS invalid username-password pair\n> ACL LOG 1\n1)  1) \"count\"\n    2) (integer) 1\n    3) \"reason\"\n    4) \"auth\"\n    5) \"context\"\n    6) \"toplevel\"\n    7) \"object\"\n    8) \"AUTH\"\n    9) \"username\"\n   10) \"someuser\"\n   11) \"age-seconds\"\n   12) \"8.038\"\n   13) \"client-info\"\n   14) \"id=3 addr=127.0.0.1:57275 laddr=127.0.0.1:6379 fd=8 name= age=16 idle=0 flags=N db=0 sub=0 psub=0 ssub=0 multi=-1 qbuf=48 qbuf-free=16842 argv-mem=25 multi-mem=0 rbs=1024 rbp=0 obl=0 oll=0 omem=0 tot-mem=18737 events=r cmd=auth user=default redir=-1 resp=2\"\n   15) \"entry-id\"\n   16) (integer) 0\n   17) \"timestamp-created\"\n   18) (integer) 1675361492408\n   19) \"timestamp-last-updated\"\n   20) (integer) 1675361492408\n```\n\nEach log entry is composed of the following fields:\n\n1.  `count`: The number of security events detected within a 60 second period that are represented by this entry.\n2.  `reason`: The reason that the security events were logged. Either `command`, `key`, `channel`, or `auth`.\n3.  `context`: The context that the security events were detected in. Either `toplevel`, `multi`, `lua`, or `module`.\n4.  `object`: The resource that the user had insufficient permissions to access. `auth` when the reason is `auth`.\n5.  `username`: The username that executed the command that caused the security events or the username that had a failed authentication attempt.\n6.  `age-seconds`: Age of the log entry in seconds.\n7.  `client-info`: Displays the client info of a client which caused one of the security events.\n8.  `entry-id`: The sequence number of the entry (starting at 0) since the server process started. Can also be used to check if items were “lost”, if they fell between periods.\n9.  `timestamp-created`: A UNIX timestamp in `milliseconds` at the time the entry was first created.\n10. `timestamp-last-updated`: A UNIX timestamp in `milliseconds` at the time the entry was last updated.\n\n## History\n\n- Starting with Redis version 7.2.0: Added entry ID, timestamp created, and timestamp last updated.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-log/](https://redis.io/commands/acl-log/)"
- name: acl save
  id: acl-save/index
  summary: 'Time complexity: O(N)'
  description: "# ACL\n\n    ACL SAVE\n\nSyntax\n\n``` command-syntax\nACL SAVE\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N). Where N is the number of configured users.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nWhen Redis is configured to use an ACL file (with the `aclfile` configuration option), this command will save the currently defined ACLs from the server memory to the ACL file.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` on success.\n\nThe command may fail with an error for several reasons: if the file cannot be written or if the server is not configured to use an external ACL file.\n\n## Examples\n\n```\n> ACL SAVE\n+OK\n\n> ACL SAVE\n-ERR There was an error trying to save the ACLs. Please check the server logs for more information\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-save/](https://redis.io/commands/acl-save/)"
- name: acl setuser
  id: acl-setuser/index
  summary: 'Time complexity: O(N)'
  description: "# ACL\n\n    ACL SETUSER\n\nSyntax\n\n``` command-syntax\nACL SETUSER username [rule [rule ...]]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N). Where N is the number of rules provided.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nCreate an ACL user with the specified rules or modify the rules of an existing user.\n\nManipulate Redis ACL users interactively. If the username does not exist, the command creates the username without any privilege. It then reads from left to right all the [rules](#acl-rules) provided as successive arguments, setting the user ACL rules as specified. If the user already exists, the provided ACL rules are simply applied *in addition* to the rules already set. For example:\n\n    ACL SETUSER virginia on allkeys +set\n\nThe above command creates a user called `virginia` who is active(the *on* rule), can access any key (*allkeys* rule), and can call the set command (*+set* rule). Then, you can use another `ACL SETUSER` call to modify the user rules:\n\n    ACL SETUSER virginia +get\n\nThe above rule applies the new rule to the user `virginia`, so other than [`SET`](../set), the user `virginia` can now also use the [`GET`](../get) command.\n\nStarting from Redis 7.0, ACL rules can also be grouped into multiple distinct sets of rules, called *selectors*. Selectors are added by wrapping the rules in parentheses and providing them just like any other rule. In order to execute a command, either the root permissions (rules defined outside of parenthesis) or any of the selectors (rules defined inside parenthesis) must match the given command. For example:\n\n    ACL SETUSER virginia on +GET allkeys (+SET ~app1*)\n\nThis sets a user with two sets of permissions, one defined on the user and one defined with a selector. The root user permissions only allow executing the get command, but can be executed on any keys. The selector then grants a secondary set of permissions: access to the [`SET`](../set) command to be executed on any key that starts with `app1`. Using multiple selectors allows you to grant permissions that are different depending on what keys are being accessed.\n\nWhen we want to be sure to define a user from scratch, without caring if it had previously defined rules associated, we can use the special rule `reset` as first rule, in order to flush all the other existing rules:\n\n    ACL SETUSER antirez reset [... other rules ...]\n\nAfter resetting a user, its ACL rules revert to the default: inactive, passwordless, can't execute any command nor access any key or channel:\n\n    > ACL SETUSER antirez reset\n    +OK\n    > ACL LIST\n    1) \"user antirez off -@all\"\n\nACL rules are either words like \"on\", \"off\", \"reset\", \"allkeys\", or are special rules that start with a special character, and are followed by another string (without any space in between), like \"+SET\".\n\nThe following documentation is a reference manual about the capabilities of this command, however our [ACL tutorial](https://redis.io/topics/acl) may be a more gentle introduction to how the ACL system works in general.\n\n## ACL rules\n\nRedis ACL rules are split into two categories: rules that define command permissions or *command rules*, and rules that define the user state or *user management rules*. This is a list of all the supported Redis ACL rules:\n\n### Command rules\n\n- `~<pattern>`: Adds the specified key pattern (glob style pattern, like in the [`KEYS`](../keys) command), to the list of key patterns accessible by the user. This grants both read and write permissions to keys that match the pattern. You can add multiple key patterns to the same user. Example: `~objects:*`\n- `%R~<pattern>`: (Available in Redis 7.0 and later) Adds the specified read key pattern. This behaves similar to the regular key pattern but only grants permission to read from keys that match the given pattern. See [key permissions](https://redis.io/topics/acl#key-permissions) for more information.\n- `%W~<pattern>`: (Available in Redis 7.0 and later) Adds the specified write key pattern. This behaves similar to the regular key pattern but only grants permission to write to keys that match the given pattern. See [key permissions](https://redis.io/topics/acl#key-permissions) for more information.\n- `%RW~<pattern>`: (Available in Redis 7.0 and later) Alias for `~<pattern>`.\n- `allkeys`: Alias for `~*`, it allows the user to access all the keys.\n- `resetkeys`: Removes all the key patterns from the list of key patterns the user can access.\n- `&<pattern>`: (Available in Redis 6.2 and later) Adds the specified glob style pattern to the list of Pub/Sub channel patterns accessible by the user. You can add multiple channel patterns to the same user. Example: `&chatroom:*`\n- `allchannels`: Alias for `&*`, it allows the user to access all Pub/Sub channels.\n- `resetchannels`: Removes all channel patterns from the list of Pub/Sub channel patterns the user can access.\n- `+<command>`: Adds the command to the list of commands the user can call. Can be used with `|` for allowing subcommands (e.g \"+config\\|get\").\n- `+@<category>`: Adds all the commands in the specified category to the list of commands the user is able to execute. Example: `+@string` (adds all the string commands). For a list of categories, check the [`ACL CAT`](../acl-cat) command.\n- `+<command>|first-arg`: Allows a specific first argument of an otherwise disabled command. It is only supported on commands with no sub-commands, and is not allowed as negative form like -SELECT\\|1, only additive starting with \"+\". This feature is deprecated and may be removed in the future.\n- `allcommands`: Alias of `+@all`. Adds all the commands there are in the server, including *future commands* loaded via module, to be executed by this user.\n- `-<command>`: Remove the command to the list of commands the user can call. Starting Redis 7.0, it can be used with `|` for blocking subcommands (e.g., \"-config\\|set\").\n- `-@<category>`: Like `+@<category>` but removes all the commands in the category instead of adding them.\n- `nocommands`: Alias for `-@all`. Removes all the commands, and the user is no longer able to execute anything.\n\n### User management rules\n\n- `on`: Set the user as active, it will be possible to authenticate as this user using `AUTH <username> <password>`.\n- `off`: Set user as not active, it will be impossible to log as this user. Please note that if a user gets disabled (set to off) after there are connections already authenticated with such a user, the connections will continue to work as expected. To also kill the old connections you can use [`CLIENT KILL`](../client-kill) with the user option. An alternative is to delete the user with [`ACL DELUSER`](../acl-deluser), that will result in all the connections authenticated as the deleted user to be disconnected.\n- `nopass`: The user is set as a *no password* user. It means that it will be possible to authenticate as such user with any password. By default, the `default` special user is set as \"nopass\". The `nopass` rule will also reset all the configured passwords for the user.\n- `>password`: Adds the specified clear text password as a hashed password in the list of the users passwords. Every user can have many active passwords, so that password rotation will be simpler. The specified password is not stored as clear text inside the server. Example: `>mypassword`.\n- `#<hashedpassword>`: Adds the specified hashed password to the list of user passwords. A Redis hashed password is hashed with SHA256 and translated into a hexadecimal string. Example: `#c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2`.\n- `<password`: Like `>password` but removes the password instead of adding it.\n- `!<hashedpassword>`: Like `#<hashedpassword>` but removes the password instead of adding it.\n- `(<rule list>)`: (Available in Redis 7.0 and later) Creates a new selector to match rules against. Selectors are evaluated after the user permissions, and are evaluated according to the order they are defined. If a command matches either the user permissions or any selector, it is allowed. See [selectors](https://redis.io/docs/management/security/acl#selectors) for more information.\n- `clearselectors`: (Available in Redis 7.0 and later) Deletes all of the selectors attached to the user.\n- `reset`: Removes any capability from the user. They are set to off, without passwords, unable to execute any command, unable to access any key.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` on success.\n\nIf the rules contain errors, the error is returned.\n\n## Examples\n\n```\n> ACL SETUSER alan allkeys +@string +@set -SADD >alanpassword\n+OK\n\n> ACL SETUSER antirez heeyyyy\n(error) ERR Error in ACL SETUSER modifier 'heeyyyy': Syntax error\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added Pub/Sub channel patterns.\n- Starting with Redis version 7.0.0: Added selectors and key based permissions.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-setuser/](https://redis.io/commands/acl-setuser/)"
- name: acl users
  id: acl-users/index
  summary: 'Time complexity: O(N)'
  description: "# ACL\n\n    ACL USERS\n\nSyntax\n\n``` command-syntax\nACL USERS\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(N). Where N is the number of configured users.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command shows a list of all the usernames of the currently configured users in the Redis ACL system.\n\n## Return\n\nAn array of strings.\n\n## Examples\n\n```\n> ACL USERS\n1) \"anna\"\n2) \"antirez\"\n3) \"default\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-users/](https://redis.io/commands/acl-users/)"
- name: acl whoami
  id: acl-whoami/index
  summary: Return the username the current connection is authenticated with
  description: "# ACL\n\n    ACL WHOAMI\n\nSyntax\n\n``` command-syntax\nACL WHOAMI\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\nReturn the username the current connection is authenticated with. New connections are authenticated with the \"default\" user. They can change user using [`AUTH`](../auth).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the username of the current connection.\n\n## Examples\n\n```\n> ACL WHOAMI\n\"default\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/acl-whoami/](https://redis.io/commands/acl-whoami/)"
- name: append
  id: append/index
  summary: 'Time complexity: O(1)'
  description: "# APPEND\n\n    APPEND\n\nSyntax\n\n``` command-syntax\nAPPEND key value\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nIf `key` already exists and is a string, this command appends the `value` at the end of the string. If `key` does not exist it is created and set as an empty string, so `APPEND` will be similar to [`SET`](../set) in this special case.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the string after the append operation.\n\n## Examples\n\n``` redis-cli\nEXISTS mykey\nAPPEND mykey \"Hello\"\nAPPEND mykey \" World\"\nGET mykey\n```\n\n## Pattern: Time series\n\nThe `APPEND` command can be used to create a very compact representation of a list of fixed-size samples, usually referred as *time series*. Every time a new sample arrives we can store it using the command\n\n```\nAPPEND timeseries \"fixed-size sample\"\n```\n\nAccessing individual elements in the time series is not hard:\n\n- [`STRLEN`](../strlen) can be used in order to obtain the number of samples.\n- [`GETRANGE`](../getrange) allows for random access of elements. If our time series have associated time information we can easily implement a binary search to get range combining [`GETRANGE`](../getrange) with the Lua scripting engine available in Redis 2.6.\n- [`SETRANGE`](../setrange) can be used to overwrite an existing time series.\n\nThe limitation of this pattern is that we are forced into an append-only mode of operation, there is no way to cut the time series to a given size easily because Redis currently lacks a command able to trim string objects. However the space efficiency of time series stored in this way is remarkable.\n\nHint: it is possible to switch to a different key based on the current Unix time, in this way it is possible to have just a relatively small amount of samples per key, to avoid dealing with very big keys, and to make this pattern more friendly to be distributed across many Redis instances.\n\nAn example sampling the temperature of a sensor using fixed-size strings (using a binary format is better in real implementations).\n\n``` redis-cli\nAPPEND ts \"0043\"\nAPPEND ts \"0035\"\nGETRANGE ts 0 3\nGETRANGE ts 4 7\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/append/](https://redis.io/commands/append/)"
- name: asking
  id: asking/index
  summary: When a cluster client receives an -ASK redirect, the ASKING command is sent to the target node followed by the command which was redirected
  description: "# ASKING\n\n    ASKING\n\nSyntax\n\n``` command-syntax\nASKING\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nWhen a cluster client receives an `-ASK` redirect, the `ASKING` command is sent to the target node followed by the command which was redirected. This is normally done automatically by cluster clients.\n\nIf an `-ASK` redirect is received during a transaction, only one ASKING command needs to be sent to the target node before sending the complete transaction to the target node.\n\nSee [ASK redirection in the Redis Cluster Specification](https://redis.io/topics/cluster-spec#ask-redirection) for details.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/asking/](https://redis.io/commands/asking/)"
- name: auth
  id: auth/index
  summary: This form just authenticates against the password set with requirepass
  description: "# AUTH\n\n    AUTH\n\nSyntax\n\n``` command-syntax\nAUTH [username] password\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of passwords defined for the user\n\nACL categories:  \n`@fast`, `@connection`,\n\nThe AUTH command authenticates the current connection in two cases:\n\n1.  If the Redis server is password protected via the `requirepass` option.\n2.  A Redis 6.0 instance, or greater, is using the [Redis ACL system](https://redis.io/topics/acl).\n\nRedis versions prior of Redis 6 were only able to understand the one argument version of the command:\n\n    AUTH <password>\n\nThis form just authenticates against the password set with `requirepass`. In this configuration Redis will deny any command executed by the just connected clients, unless the connection gets authenticated via `AUTH`.\n\nIf the password provided via AUTH matches the password in the configuration file, the server replies with the `OK` status code and starts accepting commands. Otherwise, an error is returned and the clients needs to try a new password.\n\nWhen Redis ACLs are used, the command should be given in an extended way:\n\n    AUTH <username> <password>\n\nIn order to authenticate the current connection with one of the connections defined in the ACL list (see [`ACL SETUSER`](../acl-setuser)) and the official [ACL guide](https://redis.io/topics/acl) for more information.\n\nWhen ACLs are used, the single argument form of the command, where only the password is specified, assumes that the implicit username is \"default\".\n\n## Security notice\n\nBecause of the high performance nature of Redis, it is possible to try a lot of passwords in parallel in very short time, so make sure to generate a strong and very long password so that this attack is infeasible. A good way to generate strong passwords is via the [`ACL GENPASS`](../acl-genpass) command.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) or an error if the password, or username/password pair, is invalid.\n\n## History\n\n- Starting with Redis version 6.0.0: Added ACL style (username and password).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/auth/](https://redis.io/commands/auth/)"
- name: bf.add
  id: bf.add/index
  summary: Creates an empty Bloom Filter with a single sub-filter for the initial capacity requested and with an upper bound error_rate
  description: "# BF.ADD\n\n    BF.ADD\n\nSyntax\n\n``` command-syntax\nBF.ADD key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k), where k is the number of hash functions used by the last sub-filter\n\nCreates an empty Bloom Filter with a single sub-filter for the initial capacity requested and with an upper bound `error_rate`. By default, the filter auto-scales by creating additional sub-filters when `capacity` is reached. The new sub-filter is created with size of the previous sub-filter multiplied by `expansion`.\n\nThough the filter can scale up by creating sub-filters, it is recommended to reserve the estimated required `capacity` since maintaining and querying sub-filters requires additional memory (each sub-filter uses an extra bits and hash function) and consume further CPU time than an equivalent filter that had the right capacity at creation time.\n\nThe number of hash functions is `-log(error)/ln(2)^2`. The number of bits per item is `-log(error)/ln(2)` ≈ 1.44.\n\n- **1%** error rate requires 7 hash functions and 10.08 bits per item.\n- **0.1%** error rate requires 10 hash functions and 14.4 bits per item.\n- **0.01%** error rate requires 14 hash functions and 20.16 bits per item.\n\n### Parameters:\n\n- **key**: The key under which the filter is found\n- **error_rate**: The desired probability for false positives. The rate is a decimal value between 0 and 1. For example, for a desired false positive rate of 0.1% (1 in 1000), error_rate should be set to 0.001.\n- **capacity**: The number of entries intended to be added to the filter. If your filter allows scaling, performance will begin to degrade after adding more items than this number. The actual degradation depends on how far the limit has been exceeded. Performance degrades linearly with the number of `sub-filters`.\n\nOptional parameters:\n\n- **NONSCALING**: Prevents the filter from creating additional sub-filters if initial capacity is reached. Non-scaling filters requires slightly less memory than their scaling counterparts. The filter returns an error when `capacity` is reached.\n- **EXPANSION**: When `capacity` is reached, an additional sub-filter is created. The size of the new sub-filter is the size of the last sub-filter multiplied by `expansion`. If the number of elements to be stored in the filter is unknown, we recommend that you use an `expansion` of 2 or more to reduce the number of sub-filters. Otherwise, we recommend that you use an `expansion` of 1 to reduce memory consumption. The default expansion value is 2.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - \"1\" if such item did not exist in the filter, \"0\" if such item was likely added to the filter before (false positives are possible).\n\n## Examples\n\n```\nredis> BF.ADD bf item1\n(integer) 0\nredis> BF.ADD bf item_new\n(integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.add/](https://redis.io/commands/bf.add/)"
- name: bf.card
  id: bf.card/index
  summary: 'Note: when key exists - return the same value as BF.INFO key ITEMS'
  description: "# BF.CARD\n\n    BF.CARD\n\nSyntax\n\n``` command-syntax\nBF.CARD key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.4](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns the cardinality of a Bloom filter - number of items that were added to a Bloom filter and detected as unique (items that caused at least one bit to be set in at least one sub-filter)\n\n(since RedisBloom 2.4.4)\n\n### Parameters\n\n- **key**: The name of the filter\n\n## Return\n\n- [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - the number of items that were added to this Bloom filter and detected as unique (items that caused at least one bit to be set in at least one sub-filter).\n- 0 when `key` does not exist.\n- Error when `key` is of a type other than Bloom filter.\n\nNote: when `key` exists - return the same value as `BF.INFO key ITEMS`.\n\n## Examples\n\n```\nredis> BF.ADD bf1 item_foo\n(integer) 1\nredis> BF.CARD bf1\n(integer) 1\nredis> BF.CARD bf_new\n(integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.card/](https://redis.io/commands/bf.card/)"
- name: bf.exists
  id: bf.exists/index
  summary: Determines whether an item may exist in the Bloom Filter or not
  description: "# BF.EXISTS\n\n    BF.EXISTS\n\nSyntax\n\n``` command-syntax\nBF.EXISTS key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k), where k is the number of hash functions used by the last sub-filter\n\nDetermines whether an item may exist in the Bloom Filter or not.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: The item to check for\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - where \"1\" value means the item may exist in the filter, and a \"0\" value means it does not exist in the filter.\n\n## Examples\n\n```\nredis> BF.EXISTS bf item1\n(integer) 1\nredis> BF.EXISTS bf item_new\n(integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.exists/](https://redis.io/commands/bf.exists/)"
- name: bf.info
  id: bf.info/index
  summary: Return information about a Bloom filter
  description: "# BF.INFO\n\n    BF.INFO\n\nSyntax\n\n``` command-syntax\nBF.INFO key [CAPACITY | SIZE | FILTERS | ITEMS | EXPANSION]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturn information about a Bloom filter.\n\n### Parameters\n\n- **key**: key name for an existing Bloom filter.\n\nOptional parameters:\n\n- `CAPACITY` Number of unique items that can be stored in this Bloom filter before scaling would be required (including already added items)\n- `SIZE` Memory size: number of bytes allocated for this Bloom filter\n- `FILTERS` Number of sub-filters\n- `ITEMS` Number of items that were added to this Bloom filter and detected as unique (items that caused at least one bit to be set in at least one sub-filter)\n- `EXPANSION` Expansion rate\n\nWhen no optional parameter is specified: return all information fields.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information about the Bloom filter.\n\nError when `key` does not exist.\n\nError when `key` is of a type other than Bloom filter.\n\n## Examples\n\n``` chroma\nredis>BF.ADDbf1observation1(integer)1redis>BF.INFObf11)Capacity2)(integer)1003)Size4)(integer)2405)Numberoffilters6)(integer)17)Numberofitemsinserted8)(integer)19)Expansionrate10)(integer)2redis>BF.INFObf1CAPACITY1)(integer)100\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.info/](https://redis.io/commands/bf.info/)"
- name: bf.insert
  id: bf.insert/index
  summary: BF.INSERT is a sugarcoated combination of BF.RESERVE and BF.ADD
  description: "# BF.INSERT\n\n    BF.INSERT\n\nSyntax\n\n``` command-syntax\nBF.INSERT key [CAPACITY capacity] [ERROR error]\n  [EXPANSION expansion] [NOCREATE] [NONSCALING] ITEMS item [item\n  ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k \\* n), where k is the number of hash functions and n is the number of items\n\nBF.INSERT is a sugarcoated combination of BF.RESERVE and BF.ADD. It creates a new filter if the `key` does not exist using the relevant arguments (see BF.RESERVE). Next, all `ITEMS` are inserted.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: One or more items to add. The `ITEMS` keyword must precede the list of items to add.\n\nOptional parameters:\n\n- **NOCREATE**: (Optional) Indicates that the filter should not be created if it does not already exist. If the filter does not yet exist, an error is returned rather than creating it automatically. This may be used where a strict separation between filter creation and filter addition is desired. It is an error to specify `NOCREATE` together with either `CAPACITY` or `ERROR`.\n- **capacity**: (Optional) Specifies the desired `capacity` for the filter to be created. This parameter is ignored if the filter already exists. If the filter is automatically created and this parameter is absent, then the module-level `capacity` is used. See [`BF.RESERVE`](../bf.reserve) for more information about the impact of this value.\n- **error**: (Optional) Specifies the `error` ratio of the newly created filter if it does not yet exist. If the filter is automatically created and `error` is not specified then the module-level error rate is used. See [`BF.RESERVE`](../bf.reserve) for more information about the format of this value.\n- **NONSCALING**: Prevents the filter from creating additional sub-filters if initial capacity is reached. Non-scaling filters require slightly less memory than their scaling counterparts. The filter returns an error when `capacity` is reached.\n- **expansion**: When `capacity` is reached, an additional sub-filter is created. The size of the new sub-filter is the size of the last sub-filter multiplied by `expansion`. If the number of elements to be stored in the filter is unknown, we recommend that you use an `expansion` of 2 or more to reduce the number of sub-filters. Otherwise, we recommend that you use an `expansion` of 1 to reduce memory consumption. The default expansion value is 2.\n\n## Return\n\nAn array of booleans (integers). Each element is either true or false depending on whether the corresponding input element was newly added to the filter or may have previously existed.\n\n## Examples\n\nAdd three items to a filter with default parameters if the filter does not already exist:\n\n```\nBF.INSERT filter ITEMS foo bar baz\n```\n\nAdd one item to a filter with a capacity of 10000 if the filter does not already exist:\n\n```\nBF.INSERT filter CAPACITY 10000 ITEMS hello\n```\n\nAdd 2 items to a filter with an error if the filter does not already exist:\n\n```\nBF.INSERT filter NOCREATE ITEMS foo bar\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.insert/](https://redis.io/commands/bf.insert/)"
- name: bf.loadchunk
  id: bf.loadchunk/index
  summary: Restores a filter previously saved using SCANDUMP
  description: "# BF.LOADCHUNK\n\n    BF.LOADCHUNK\n\nSyntax\n\n``` command-syntax\nBF.LOADCHUNK key iterator data\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n), where n is the capacity\n\nRestores a filter previously saved using `SCANDUMP`. See the `SCANDUMP` command for example usage.\n\nThis command overwrites any bloom filter stored under `key`. Make sure that the bloom filter is not be changed between invocations.\n\n### Parameters\n\n- **key**: Name of the key to restore\n- **iter**: Iterator value associated with `data` (returned by `SCANDUMP`)\n- **data**: Current data chunk (returned by `SCANDUMP`)\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\nSee BF.SCANDUMP for an example.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.loadchunk/](https://redis.io/commands/bf.loadchunk/)"
- name: bf.madd
  id: bf.madd/index
  summary: Adds one or more items to the Bloom Filter and creates the filter if it does not exist yet
  description: "# BF.MADD\n\n    BF.MADD\n\nSyntax\n\n``` command-syntax\nBF.MADD key item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k \\* n), where k is the number of hash functions and n is the number of items\n\nAdds one or more items to the Bloom Filter and creates the filter if it does not exist yet. This command operates identically to [`BF.ADD`](../bf.add) except that it allows multiple inputs and returns multiple values.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: One or more items to add\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - for each item which is either \"1\" or \"0\" depending on whether the corresponding input element was newly added to the filter or may have previously existed.\n\n## Examples\n\n```\nredis> BF.MADD bf item1 item2\n1) (integer) 0\n2) (integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.madd/](https://redis.io/commands/bf.madd/)"
- name: bf.mexists
  id: bf.mexists/index
  summary: Determines if one or more items may exist in the filter or not
  description: "# BF.MEXISTS\n\n    BF.MEXISTS\n\nSyntax\n\n``` command-syntax\nBF.MEXISTS key item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k \\* n), where k is the number of hash functions and n is the number of items\n\nDetermines if one or more items may exist in the filter or not.\n\n### Parameters\n\n- **key**: The name of the filter\n- **items**: One or more items to check\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - for each item where \"1\" value means the corresponding item may exist in the filter, and a \"0\" value means it does not exist in the filter.\n\n## Examples\n\n```\nredis> BF.MEXISTS bf item1 item_new\n1) (integer) 1\n2) (integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.mexists/](https://redis.io/commands/bf.mexists/)"
- name: bf.reserve
  id: bf.reserve/index
  summary: Creates an empty Bloom Filter with a single sub-filter for the initial capacity requested and with an upper bound error_rate
  description: "# BF.RESERVE\n\n    BF.RESERVE\n\nSyntax\n\n``` command-syntax\nBF.RESERVE key error_rate capacity [EXPANSION expansion]\n  [NONSCALING]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nCreates an empty Bloom Filter with a single sub-filter for the initial capacity requested and with an upper bound `error_rate`. By default, the filter auto-scales by creating additional sub-filters when `capacity` is reached. The new sub-filter is created with size of the previous sub-filter multiplied by `expansion`.\n\nThough the filter can scale up by creating sub-filters, it is recommended to reserve the estimated required `capacity` since maintaining and querying sub-filters requires additional memory (each sub-filter uses an extra bits and hash function) and consume further CPU time than an equivalent filter that had the right capacity at creation time.\n\nThe number of hash functions is `-log(error)/ln(2)^2`. The number of bits per item is `-log(error)/ln(2)` ≈ 1.44.\n\n- **1%** error rate requires 7 hash functions and 10.08 bits per item.\n- **0.1%** error rate requires 10 hash functions and 14.4 bits per item.\n- **0.01%** error rate requires 14 hash functions and 20.16 bits per item.\n\n### Parameters:\n\n- **key**: The key under which the filter is found\n- **error_rate**: The desired probability for false positives. The rate is a decimal value between 0 and 1. For example, for a desired false positive rate of 0.1% (1 in 1000), error_rate should be set to 0.001.\n- **capacity**: The number of entries intended to be added to the filter. If your filter allows scaling, performance will begin to degrade after adding more items than this number. The actual degradation depends on how far the limit has been exceeded. Performance degrades linearly with the number of `sub-filters`.\n\nOptional parameters:\n\n- **NONSCALING**: Prevents the filter from creating additional sub-filters if initial capacity is reached. Non-scaling filters requires slightly less memory than their scaling counterparts. The filter returns an error when `capacity` is reached.\n- **EXPANSION**: When `capacity` is reached, an additional sub-filter is created. The size of the new sub-filter is the size of the last sub-filter multiplied by `expansion`. If the number of elements to be stored in the filter is unknown, we recommend that you use an `expansion` of 2 or more to reduce the number of sub-filters. Otherwise, we recommend that you use an `expansion` of 1 to reduce memory consumption. The default expansion value is 2.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> BF.RESERVE bf 0.01 1000\nOK\n```\n\n```\nredis> BF.RESERVE bf 0.01 1000\n(error) ERR item exists\n```\n\n```\nredis> BF.RESERVE bf_exp 0.01 1000 EXPANSION 2\nOK\n```\n\n```\nredis> BF.RESERVE bf_non 0.01 1000 NONSCALING\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.reserve/](https://redis.io/commands/bf.reserve/)"
- name: bf.scandump
  id: bf.scandump/index
  summary: Begins an incremental save of the bloom filter
  description: "# BF.SCANDUMP\n\n    BF.SCANDUMP\n\nSyntax\n\n``` command-syntax\nBF.SCANDUMP key iterator\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n), where n is the capacity\n\nBegins an incremental save of the bloom filter. This is useful for large bloom filters which cannot fit into the normal [`DUMP`](../dump) and [`RESTORE`](../restore) model.\n\nThe first time this command is called, the value of `iter` should be 0. This command returns successive `(iter, data)` pairs until `(0, NULL)` to indicate completion.\n\n### Parameters\n\n- **key**: Name of the filter\n- **iter**: Iterator value; either 0 or the iterator from a previous invocation of this command\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) (*Iterator*) and \\[\\] (*Data*). The Iterator is passed as input to the next invocation of `SCANDUMP`. If *Iterator* is 0, then it means iteration has completed.\n\nThe iterator-data pair should also be passed to `LOADCHUNK` when restoring the filter.\n\n@example\n\n```\nredis> BF.RESERVE bf 0.1 10\nOK\nredis> BF.ADD bf item1\n1) (integer) 1\nredis> BF.SCANDUMP bf 0\n1) (integer) 1\n2) \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\b\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x9a\\x99\\x99\\x99\\x99\\x99\\xa9?J\\xf7\\xd4\\x9e\\xde\\xf0\\x18@\\x05\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\nredis> BF.SCANDUMP bf 1\n1) (integer) 9\n2) \"\\x01\\b\\x00\\x80\\x00\\x04 \\x00\"\nredis> BF.SCANDUMP bf 9\n1) (integer) 0\n2) \"\"\nredis> FLUSHALL\nOK\nredis> BF.LOADCHUNK bf 1 \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\b\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x9a\\x99\\x99\\x99\\x99\\x99\\xa9?J\\xf7\\xd4\\x9e\\xde\\xf0\\x18@\\x05\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\nOK\nredis> BF.LOADCHUNK bf 9 \"\\x01\\b\\x00\\x80\\x00\\x04 \\x00\"\nOK\nredis> BF.EXISTS bf item1\n(integer) 1\n```\n\npython code:\n\n```\nchunks = []\niter = 0\nwhile True:\n    iter, data = BF.SCANDUMP(key, iter)\n    if iter == 0:\n        break\n    else:\n        chunks.append([iter, data])\n\n# Load it back\nfor chunk in chunks:\n    iter, data = chunk\n    BF.LOADCHUNK(key, iter, data)\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bf.scandump/](https://redis.io/commands/bf.scandump/)"
- name: bgrewriteaof
  id: bgrewriteaof/index
  summary: Instruct Redis to start an Append Only File rewrite process
  description: "# BGREWRITEAOF\n\n    BGREWRITEAOF\n\nSyntax\n\n``` command-syntax\nBGREWRITEAOF\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nInstruct Redis to start an [Append Only File](https://redis.io/topics/persistence#append-only-file) rewrite process. The rewrite will create a small optimized version of the current Append Only File.\n\nIf `BGREWRITEAOF` fails, no data gets lost as the old AOF will be untouched.\n\nThe rewrite will be only triggered by Redis if there is not already a background process doing persistence.\n\nSpecifically:\n\n- If a Redis child is creating a snapshot on disk, the AOF rewrite is *scheduled* but not started until the saving child producing the RDB file terminates. In this case the `BGREWRITEAOF` will still return a positive status reply, but with an appropriate message. You can check if an AOF rewrite is scheduled looking at the [`INFO`](../info) command as of Redis 2.6 or successive versions.\n- If an AOF rewrite is already in progress the command returns an error and no AOF rewrite will be scheduled for a later time.\n- If the AOF rewrite could start, but the attempt at starting it fails (for instance because of an error in creating the child process), an error is returned to the caller.\n\nSince Redis 2.4 the AOF rewrite is automatically triggered by Redis, however the `BGREWRITEAOF` command can be used to trigger a rewrite at any time.\n\nPlease refer to the [persistence documentation](https://redis.io/topics/persistence) for detailed information.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): A simple string reply indicating that the rewriting started or is about to start ASAP, when the call is executed with success.\n\nThe command may reply with an error in certain cases, as documented above.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bgrewriteaof/](https://redis.io/commands/bgrewriteaof/)"
- name: bgsave
  id: bgsave/index
  summary: Save the DB in background
  description: "# BGSAVE\n\n    BGSAVE\n\nSyntax\n\n``` command-syntax\nBGSAVE [SCHEDULE]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nSave the DB in background.\n\nNormally the OK code is immediately returned. Redis forks, the parent continues to serve the clients, the child saves the DB on disk then exits.\n\nAn error is returned if there is already a background save running or if there is another non-background-save process running, specifically an in-progress AOF rewrite.\n\nIf `BGSAVE SCHEDULE` is used, the command will immediately return `OK` when an AOF rewrite is in progress and schedule the background save to run at the next opportunity.\n\nA client may be able to check if the operation succeeded using the [`LASTSAVE`](../lastsave) command.\n\nPlease refer to the [persistence documentation](https://redis.io/topics/persistence) for detailed information.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `Background saving started` if `BGSAVE` started correctly or `Background saving scheduled` when used with the `SCHEDULE` subcommand.\n\n## History\n\n- Starting with Redis version 3.2.2: Added the `SCHEDULE` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bgsave/](https://redis.io/commands/bgsave/)"
- name: bitcount
  id: bitcount/index
  summary: Count the number of set bits (population counting) in a string
  description: "# BITCOUNT\n\n    BITCOUNT\n\nSyntax\n\n``` command-syntax\nBITCOUNT key [start end [BYTE | BIT]]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(N)\n\nACL categories:  \n`@read`, `@bitmap`, `@slow`,\n\nCount the number of set bits (population counting) in a string.\n\nBy default all the bytes contained in the string are examined. It is possible to specify the counting operation only in an interval passing the additional arguments *start* and *end*.\n\nLike for the [`GETRANGE`](../getrange) command start and end can contain negative values in order to index bytes starting from the end of the string, where -1 is the last byte, -2 is the penultimate, and so forth.\n\nNon-existent keys are treated as empty strings, so the command will return zero.\n\nBy default, the additional arguments *start* and *end* specify a byte index. We can use an additional argument `BIT` to specify a bit index. So 0 is the first bit, 1 is the second bit, and so forth. For negative values, -1 is the last bit, -2 is the penultimate, and so forth.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe number of bits set to 1.\n\n## Examples\n\n``` redis-cli\nSET mykey \"foobar\"\nBITCOUNT mykey\nBITCOUNT mykey 0 0\nBITCOUNT mykey 1 1\nBITCOUNT mykey 1 1 BYTE\nBITCOUNT mykey 5 30 BIT\n```\n\n## Pattern: real-time metrics using bitmaps\n\nBitmaps are a very space-efficient representation of certain kinds of information. One example is a Web application that needs the history of user visits, so that for instance it is possible to determine what users are good targets of beta features.\n\nUsing the [`SETBIT`](../setbit) command this is trivial to accomplish, identifying every day with a small progressive integer. For instance day 0 is the first day the application was put online, day 1 the next day, and so forth.\n\nEvery time a user performs a page view, the application can register that in the current day the user visited the web site using the [`SETBIT`](../setbit) command setting the bit corresponding to the current day.\n\nLater it will be trivial to know the number of single days the user visited the web site simply calling the `BITCOUNT` command against the bitmap.\n\nA similar pattern where user IDs are used instead of days is described in the article called \"[Fast easy realtime metrics using Redis bitmaps](http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps)\".\n\n## Performance considerations\n\nIn the above example of counting days, even after 10 years the application is online we still have just `365*10` bits of data per user, that is just 456 bytes per user. With this amount of data `BITCOUNT` is still as fast as any other O(1) Redis command like [`GET`](../get) or [`INCR`](../incr).\n\nWhen the bitmap is big, there are two alternatives:\n\n- Taking a separated key that is incremented every time the bitmap is modified. This can be very efficient and atomic using a small Redis Lua script.\n- Running the bitmap incrementally using the `BITCOUNT` *start* and *end* optional parameters, accumulating the results client-side, and optionally caching the result into a key.\n\n## History\n\n- Starting with Redis version 7.0.0: Added the `BYTE|BIT` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bitcount/](https://redis.io/commands/bitcount/)"
- name: bitfield
  id: bitfield/index
  summary: The command treats a Redis string as an array of bits, and is capable of addressing specific integer fields of varying bit widths and arbitrary non (necessary) aligned offset
  description: "# BITFIELD\n\n    BITFIELD\n\nSyntax\n\n``` command-syntax\nBITFIELD key [GET encoding offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET encoding offset value | INCRBY encoding offset increment>\n  [GET encoding offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET encoding offset value | INCRBY encoding offset increment>\n  ...]]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(1) for each subcommand specified\n\nACL categories:  \n`@write`, `@bitmap`, `@slow`,\n\nThe command treats a Redis string as an array of bits, and is capable of addressing specific integer fields of varying bit widths and arbitrary non (necessary) aligned offset. In practical terms using this command you can set, for example, a signed 5 bits integer at bit offset 1234 to a specific value, retrieve a 31 bit unsigned integer from offset 4567. Similarly the command handles increments and decrements of the specified integers, providing guaranteed and well specified overflow and underflow behavior that the user can configure.\n\n`BITFIELD` is able to operate with multiple bit fields in the same command call. It takes a list of operations to perform, and returns an array of replies, where each array matches the corresponding operation in the list of arguments.\n\nFor example the following command increments a 5 bit signed integer at bit offset 100, and gets the value of the 4 bit unsigned integer at bit offset 0:\n\n    > BITFIELD mykey INCRBY i5 100 1 GET u4 0\n    1) (integer) 1\n    2) (integer) 0\n\nNote that:\n\n1.  Addressing with `GET` bits outside the current string length (including the case the key does not exist at all), results in the operation to be performed like the missing part all consists of bits set to 0.\n2.  Addressing with `SET` or `INCRBY` bits outside the current string length will enlarge the string, zero-padding it, as needed, for the minimal length needed, according to the most far bit touched.\n\n## Supported subcommands and integer encoding\n\nThe following is the list of supported commands.\n\n- **GET** `<encoding>` `<offset>` -- Returns the specified bit field.\n- **SET** `<encoding>` `<offset>` `<value>` -- Set the specified bit field and returns its old value.\n- **INCRBY** `<encoding>` `<offset>` `<increment>` -- Increments or decrements (if a negative increment is given) the specified bit field and returns the new value.\n\nThere is another subcommand that only changes the behavior of successive `INCRBY` and `SET` subcommands calls by setting the overflow behavior:\n\n- **OVERFLOW** `[WRAP|SAT|FAIL]`\n\nWhere an integer encoding is expected, it can be composed by prefixing with `i` for signed integers and `u` for unsigned integers with the number of bits of our integer encoding. So for example `u8` is an unsigned integer of 8 bits and `i16` is a signed integer of 16 bits.\n\nThe supported encodings are up to 64 bits for signed integers, and up to 63 bits for unsigned integers. This limitation with unsigned integers is due to the fact that currently the Redis protocol is unable to return 64 bit unsigned integers as replies.\n\n## Bits and positional offsets\n\nThere are two ways in order to specify offsets in the bitfield command. If a number without any prefix is specified, it is used just as a zero based bit offset inside the string.\n\nHowever if the offset is prefixed with a `#` character, the specified offset is multiplied by the integer encoding's width, so for example:\n\n    BITFIELD mystring SET i8 #0 100 SET i8 #1 200\n\nWill set the first i8 integer at offset 0 and the second at offset 8. This way you don't have to do the math yourself inside your client if what you want is a plain array of integers of a given size.\n\n## Overflow control\n\nUsing the `OVERFLOW` command the user is able to fine-tune the behavior of the increment or decrement overflow (or underflow) by specifying one of the following behaviors:\n\n- **WRAP**: wrap around, both with signed and unsigned integers. In the case of unsigned integers, wrapping is like performing the operation modulo the maximum value the integer can contain (the C standard behavior). With signed integers instead wrapping means that overflows restart towards the most negative value and underflows towards the most positive ones, so for example if an `i8` integer is set to the value 127, incrementing it by 1 will yield `-128`.\n- **SAT**: uses saturation arithmetic, that is, on underflows the value is set to the minimum integer value, and on overflows to the maximum integer value. For example incrementing an `i8` integer starting from value 120 with an increment of 10, will result into the value 127, and further increments will always keep the value at 127. The same happens on underflows, but towards the value is blocked at the most negative value.\n- **FAIL**: in this mode no operation is performed on overflows or underflows detected. The corresponding return value is set to NULL to signal the condition to the caller.\n\nNote that each `OVERFLOW` statement only affects the `INCRBY` and `SET` commands that follow it in the list of subcommands, up to the next `OVERFLOW` statement.\n\nBy default, **WRAP** is used if not otherwise specified.\n\n    > BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n    1) (integer) 1\n    2) (integer) 1\n    > BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n    1) (integer) 2\n    2) (integer) 2\n    > BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n    1) (integer) 3\n    2) (integer) 3\n    > BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n    1) (integer) 0\n    2) (integer) 3\n\n## Return value\n\nThe command returns an array with each entry being the corresponding result of the sub command given at the same position. `OVERFLOW` subcommands don't count as generating a reply.\n\nThe following is an example of `OVERFLOW FAIL` returning NULL.\n\n    > BITFIELD mykey OVERFLOW FAIL incrby u2 102 1\n    1) (nil)\n\n## Motivations\n\nThe motivation for this command is that the ability to store many small integers as a single large bitmap (or segmented over a few keys to avoid having huge keys) is extremely memory efficient, and opens new use cases for Redis to be applied, especially in the field of real time analytics. This use cases are supported by the ability to specify the overflow in a controlled way.\n\nFun fact: Reddit's 2017 April fools' project [r/place](https://reddit.com/r/place) was [built using the Redis BITFIELD command](https://redditblog.com/2017/04/13/how-we-built-rplace/) in order to take an in-memory representation of the collaborative canvas.\n\n## Performance considerations\n\nUsually `BITFIELD` is a fast command, however note that addressing far bits of currently short strings will trigger an allocation that may be more costly than executing the command on bits already existing.\n\n## Orders of bits\n\nThe representation used by `BITFIELD` considers the bitmap as having the bit number 0 to be the most significant bit of the first byte, and so forth, so for example setting a 5 bits unsigned integer to value 23 at offset 7 into a bitmap previously set to all zeroes, will produce the following representation:\n\n    +--------+--------+\n    |00000001|01110000|\n    +--------+--------+\n\nWhen offsets and integer sizes are aligned to bytes boundaries, this is the same as big endian, however when such alignment does not exist, its important to also understand how the bits inside a byte are ordered.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bitfield/](https://redis.io/commands/bitfield/)"
- name: bitfield_ro
  id: bitfield_ro/index
  summary: Read-only variant of the BITFIELD command
  description: "# BITFIELD_RO\n\n    BITFIELD_RO\n\nSyntax\n\n``` command-syntax\nBITFIELD_RO key [GET encoding offset [GET encoding offset ...]]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1) for each subcommand specified\n\nACL categories:  \n`@read`, `@bitmap`, `@fast`,\n\nRead-only variant of the [`BITFIELD`](../bitfield) command. It is like the original [`BITFIELD`](../bitfield) but only accepts `GET` subcommand and can safely be used in read-only replicas.\n\nSince the original [`BITFIELD`](../bitfield) has `SET` and `INCRBY` options it is technically flagged as a writing command in the Redis command table. For this reason read-only replicas in a Redis Cluster will redirect it to the master instance even if the connection is in read-only mode (see the [`READONLY`](../readonly) command of Redis Cluster).\n\nSince Redis 6.2, the `BITFIELD_RO` variant was introduced in order to allow [`BITFIELD`](../bitfield) behavior in read-only replicas without breaking compatibility on command flags.\n\nSee original [`BITFIELD`](../bitfield) for more details.\n\n## Examples\n\n```\nBITFIELD_RO hello GET i8 16\n```\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): An array with each entry being the corresponding result of the subcommand given at the same position.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bitfield_ro/](https://redis.io/commands/bitfield_ro/)"
- name: bitop
  id: bitop/index
  summary: Perform a bitwise operation between multiple keys (containing string values) and store the result in the destination key
  description: "# BITOP\n\n    BITOP\n\nSyntax\n\n``` command-syntax\nBITOP <AND | OR | XOR | NOT> destkey key [key ...]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(N)\n\nACL categories:  \n`@write`, `@bitmap`, `@slow`,\n\nPerform a bitwise operation between multiple keys (containing string values) and store the result in the destination key.\n\nThe `BITOP` command supports four bitwise operations: **AND**, **OR**, **XOR** and **NOT**, thus the valid forms to call the command are:\n\n- `BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN`\n- `BITOP OR destkey srckey1 srckey2 srckey3 ... srckeyN`\n- `BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN`\n- `BITOP NOT destkey srckey`\n\nAs you can see **NOT** is special as it only takes an input key, because it performs inversion of bits so it only makes sense as a unary operator.\n\nThe result of the operation is always stored at `destkey`.\n\n## Handling of strings with different lengths\n\nWhen an operation is performed between strings having different lengths, all the strings shorter than the longest string in the set are treated as if they were zero-padded up to the length of the longest string.\n\nThe same holds true for non-existent keys, that are considered as a stream of zero bytes up to the length of the longest string.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe size of the string stored in the destination key, that is equal to the size of the longest input string.\n\n## Examples\n\n``` redis-cli\nSET key1 \"foobar\"\nSET key2 \"abcdef\"\nBITOP AND dest key1 key2\nGET dest\n```\n\n## Pattern: real time metrics using bitmaps\n\n`BITOP` is a good complement to the pattern documented in the [`BITCOUNT`](../bitcount) command documentation. Different bitmaps can be combined in order to obtain a target bitmap where the population counting operation is performed.\n\nSee the article called \"[Fast easy realtime metrics using Redis bitmaps](http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps)\" for an interesting use cases.\n\n## Performance considerations\n\n`BITOP` is a potentially slow command as it runs in O(N) time. Care should be taken when running it against long input strings.\n\nFor real-time metrics and statistics involving large inputs a good approach is to use a replica (with replica-read-only option enabled) where the bit-wise operations are performed to avoid blocking the master instance.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bitop/](https://redis.io/commands/bitop/)"
- name: bitpos
  id: bitpos/index
  summary: Return the position of the first bit set to 1 or 0 in a string
  description: "# BITPOS\n\n    BITPOS\n\nSyntax\n\n``` command-syntax\nBITPOS key bit [start [end [BYTE | BIT]]]\n```\n\nAvailable since:  \n2.8.7\n\nTime complexity:  \nO(N)\n\nACL categories:  \n`@read`, `@bitmap`, `@slow`,\n\nReturn the position of the first bit set to 1 or 0 in a string.\n\nThe position is returned, thinking of the string as an array of bits from left to right, where the first byte's most significant bit is at position 0, the second byte's most significant bit is at position 8, and so forth.\n\nThe same bit position convention is followed by [`GETBIT`](../getbit) and [`SETBIT`](../setbit).\n\nBy default, all the bytes contained in the string are examined. It is possible to look for bits only in a specified interval passing the additional arguments *start* and *end* (it is possible to just pass *start*, the operation will assume that the end is the last byte of the string. However there are semantic differences as explained later). By default, the range is interpreted as a range of bytes and not a range of bits, so `start=0` and `end=2` means to look at the first three bytes.\n\nYou can use the optional `BIT` modifier to specify that the range should be interpreted as a range of bits. So `start=0` and `end=2` means to look at the first three bits.\n\nNote that bit positions are returned always as absolute values starting from bit zero even when *start* and *end* are used to specify a range.\n\nLike for the [`GETRANGE`](../getrange) command start and end can contain negative values in order to index bytes starting from the end of the string, where -1 is the last byte, -2 is the penultimate, and so forth. When `BIT` is specified, -1 is the last bit, -2 is the penultimate, and so forth.\n\nNon-existent keys are treated as empty strings.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe command returns the position of the first bit set to 1 or 0 according to the request.\n\nIf we look for set bits (the bit argument is 1) and the string is empty or composed of just zero bytes, -1 is returned.\n\nIf we look for clear bits (the bit argument is 0) and the string only contains bit set to 1, the function returns the first bit not part of the string on the right. So if the string is three bytes set to the value `0xff` the command `BITPOS key 0` will return 24, since up to bit 23 all the bits are 1.\n\nBasically, the function considers the right of the string as padded with zeros if you look for clear bits and specify no range or the *start* argument **only**.\n\nHowever, this behavior changes if you are looking for clear bits and specify a range with both **start** and **end**. If no clear bit is found in the specified range, the function returns -1 as the user specified a clear range and there are no 0 bits in that range.\n\n## Examples\n\n``` redis-cli\nSET mykey \"\\xff\\xf0\\x00\"\nBITPOS mykey 0\nSET mykey \"\\x00\\xff\\xf0\"\nBITPOS mykey 1 0\nBITPOS mykey 1 2\nBITPOS mykey 1 2 -1 BYTE\nBITPOS mykey 1 7 15 BIT\nset mykey \"\\x00\\x00\\x00\"\nBITPOS mykey 1\nBITPOS mykey 1 7 -3 BIT\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added the `BYTE|BIT` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bitpos/](https://redis.io/commands/bitpos/)"
- name: blmove
  id: blmove/index
  summary: BLMOVE is the blocking variant of LMOVE
  description: "# BLMOVE\n\n    BLMOVE\n\nSyntax\n\n``` command-syntax\nBLMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT> timeout\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@list`, `@slow`, `@blocking`,\n\n`BLMOVE` is the blocking variant of [`LMOVE`](../lmove). When `source` contains elements, this command behaves exactly like [`LMOVE`](../lmove). When used inside a [`MULTI`](../multi)/[`EXEC`](../exec) block, this command behaves exactly like [`LMOVE`](../lmove). When `source` is empty, Redis will block the connection until another client pushes to it or until `timeout` (a double value specifying the maximum number of seconds to block) is reached. A `timeout` of zero can be used to block indefinitely.\n\nThis command comes in place of the now deprecated [`BRPOPLPUSH`](../brpoplpush). Doing `BLMOVE RIGHT LEFT` is equivalent.\n\nSee [`LMOVE`](../lmove) for more information.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the element being popped from `source` and pushed to `destination`. If `timeout` is reached, a [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) is returned.\n\n## Pattern: Reliable queue\n\nPlease see the pattern description in the [`LMOVE`](../lmove) documentation.\n\n## Pattern: Circular list\n\nPlease see the pattern description in the [`LMOVE`](../lmove) documentation.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/blmove/](https://redis.io/commands/blmove/)"
- name: blmpop
  id: blmpop/index
  summary: 'Time complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned'
  description: "# BLMPOP\n\n    BLMPOP\n\nSyntax\n\n``` command-syntax\nBLMPOP timeout numkeys key [key ...] <LEFT | RIGHT> [COUNT count]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N+M) where N is the number of provided keys and M is the number of elements returned.\n\nACL categories:  \n`@write`, `@list`, `@slow`, `@blocking`,\n\n`BLMPOP` is the blocking variant of [`LMPOP`](../lmpop).\n\nWhen any of the lists contains elements, this command behaves exactly like [`LMPOP`](../lmpop). When used inside a [`MULTI`](../multi)/[`EXEC`](../exec) block, this command behaves exactly like [`LMPOP`](../lmpop). When all lists are empty, Redis will block the connection until another client pushes to it or until the `timeout` (a double value specifying the maximum number of seconds to block) elapses. A `timeout` of zero can be used to block indefinitely.\n\nSee [`LMPOP`](../lmpop) for more information.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` when no element could be popped, and timeout is reached.\n- A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of elements.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/blmpop/](https://redis.io/commands/blmpop/)"
- name: blpop
  id: blpop/index
  summary: 'Time complexity: O(N) where N is the number of provided keys'
  description: "# BLPOP\n\n    BLPOP\n\nSyntax\n\n``` command-syntax\nBLPOP key [key ...] timeout\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of provided keys.\n\nACL categories:  \n`@write`, `@list`, `@slow`, `@blocking`,\n\n`BLPOP` is a blocking list pop primitive. It is the blocking version of [`LPOP`](../lpop) because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the head of the first list that is non-empty, with the given keys being checked in the order that they are given.\n\n## Non-blocking behavior\n\nWhen `BLPOP` is called, if at least one of the specified keys contains a non-empty list, an element is popped from the head of the list and returned to the caller together with the `key` it was popped from.\n\nKeys are checked in the order that they are given. Let's say that the key `list1` doesn't exist and `list2` and `list3` hold non-empty lists. Consider the following command:\n\n```\nBLPOP list1 list2 list3 0\n```\n\n`BLPOP` guarantees to return an element from the list stored at `list2` (since it is the first non empty list when checking `list1`, `list2` and `list3` in that order).\n\n## Blocking behavior\n\nIf none of the specified keys exist, `BLPOP` blocks the connection until another client performs an [`LPUSH`](../lpush) or [`RPUSH`](../rpush) operation against one of the keys.\n\nOnce new data is present on one of the lists, the client returns with the name of the key unblocking it and the popped value.\n\nWhen `BLPOP` causes a client to block and a non-zero timeout is specified, the client will unblock returning a `nil` multi-bulk value when the specified timeout has expired without a push operation against at least one of the specified keys.\n\n**The timeout argument is interpreted as a double value specifying the maximum number of seconds to block**. A timeout of zero can be used to block indefinitely.\n\n## What key is served first? What client? What element? Priority ordering details.\n\n- If the client tries to blocks for multiple keys, but at least one key contains elements, the returned key / element pair is the first key from left to right that has one or more elements. In this case the client is not blocked. So for instance `BLPOP key1 key2 key3 key4 0`, assuming that both `key2` and `key4` are non-empty, will always return an element from `key2`.\n- If multiple clients are blocked for the same key, the first client to be served is the one that was waiting for more time (the first that blocked for the key). Once a client is unblocked it does not retain any priority, when it blocks again with the next call to `BLPOP` it will be served accordingly to the number of clients already blocked for the same key, that will all be served before it (from the first to the last that blocked).\n- When a client is blocking for multiple keys at the same time, and elements are available at the same time in multiple keys (because of a transaction or a Lua script added elements to multiple lists), the client will be unblocked using the first key that received a push operation (assuming it has enough elements to serve our client, as there may be other clients as well waiting for this key). Basically after the execution of every command Redis will run a list of all the keys that received data AND that have at least a client blocked. The list is ordered by new element arrival time, from the first key that received data to the last. For every key processed, Redis will serve all the clients waiting for that key in a FIFO fashion, as long as there are elements in this key. When the key is empty or there are no longer clients waiting for this key, the next key that received new data in the previous command / transaction / script is processed, and so forth.\n\n## Behavior of `BLPOP` when multiple elements are pushed inside a list.\n\nThere are times when a list can receive multiple elements in the context of the same conceptual command:\n\n- Variadic push operations such as `LPUSH mylist a b c`.\n- After an [`EXEC`](../exec) of a [`MULTI`](../multi) block with multiple push operations against the same list.\n- Executing a Lua Script with Redis 2.6 or newer.\n\nWhen multiple elements are pushed inside a list where there are clients blocking, the behavior is different for Redis 2.4 and Redis 2.6 or newer.\n\nFor Redis 2.6 what happens is that the command performing multiple pushes is executed, and *only after* the execution of the command the blocked clients are served. Consider this sequence of commands.\n\n    Client A:   BLPOP foo 0\n    Client B:   LPUSH foo a b c\n\nIf the above condition happens using a Redis 2.6 server or greater, Client **A** will be served with the `c` element, because after the [`LPUSH`](../lpush) command the list contains `c,b,a`, so taking an element from the left means to return `c`.\n\nInstead Redis 2.4 works in a different way: clients are served *in the context* of the push operation, so as long as `LPUSH foo a b c` starts pushing the first element to the list, it will be delivered to the Client **A**, that will receive `a` (the first element pushed).\n\nThe behavior of Redis 2.4 creates a lot of problems when replicating or persisting data into the AOF file, so the much more generic and semantically simpler behavior was introduced into Redis 2.6 to prevent problems.\n\nNote that for the same reason a Lua script or a `MULTI/EXEC` block may push elements into a list and afterward **delete the list**. In this case the blocked clients will not be served at all and will continue to be blocked as long as no data is present on the list after the execution of a single command, transaction, or script.\n\n## `BLPOP` inside a `MULTI` / `EXEC` transaction\n\n`BLPOP` can be used with pipelining (sending multiple commands and reading the replies in batch), however this setup makes sense almost solely when it is the last command of the pipeline.\n\nUsing `BLPOP` inside a [`MULTI`](../multi) / [`EXEC`](../exec) block does not make a lot of sense as it would require blocking the entire server in order to execute the block atomically, which in turn does not allow other clients to perform a push operation. For this reason the behavior of `BLPOP` inside [`MULTI`](../multi) / [`EXEC`](../exec) when the list is empty is to return a `nil` multi-bulk reply, which is the same thing that happens when the timeout is reached.\n\nIf you like science fiction, think of time flowing at infinite speed inside a [`MULTI`](../multi) / [`EXEC`](../exec) block...\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` multi-bulk when no element could be popped and the timeout expired.\n- A two-element multi-bulk with the first element being the name of the key where an element was popped and the second element being the value of the popped element.\n\n## Examples\n\n```\nredis> DEL list1 list2\n(integer) 0\nredis> RPUSH list1 a b c\n(integer) 3\nredis> BLPOP list1 list2 0\n1) \"list1\"\n2) \"a\"\n```\n\n## Reliable queues\n\nWhen `BLPOP` returns an element to the client, it also removes the element from the list. This means that the element only exists in the context of the client: if the client crashes while processing the returned element, it is lost forever.\n\nThis can be a problem with some application where we want a more reliable messaging system. When this is the case, please check the [`BRPOPLPUSH`](../brpoplpush) command, that is a variant of `BLPOP` that adds the returned element to a target list before returning it to the client.\n\n## Pattern: Event notification\n\nUsing blocking list operations it is possible to mount different blocking primitives. For instance for some application you may need to block waiting for elements into a Redis Set, so that as far as a new element is added to the Set, it is possible to retrieve it without resort to polling. This would require a blocking version of [`SPOP`](../spop) that is not available, but using blocking list operations we can easily accomplish this task.\n\nThe consumer will do:\n\n```\nLOOP forever\n    WHILE SPOP(key) returns elements\n        ... process elements ...\n    END\n    BRPOP helper_key\nEND\n```\n\nWhile in the producer side we'll use simply:\n\n```\nMULTI\nSADD key element\nLPUSH helper_key x\nEXEC\n```\n\n## History\n\n- Starting with Redis version 6.0.0: `timeout` is interpreted as a double instead of an integer.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/blpop/](https://redis.io/commands/blpop/)"
- name: brpop
  id: brpop/index
  summary: 'Time complexity: O(N) where N is the number of provided keys'
  description: "# BRPOP\n\n    BRPOP\n\nSyntax\n\n``` command-syntax\nBRPOP key [key ...] timeout\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of provided keys.\n\nACL categories:  \n`@write`, `@list`, `@slow`, `@blocking`,\n\n`BRPOP` is a blocking list pop primitive. It is the blocking version of [`RPOP`](../rpop) because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the tail of the first list that is non-empty, with the given keys being checked in the order that they are given.\n\nSee the [BLPOP documentation](../blpop) for the exact semantics, since `BRPOP` is identical to [`BLPOP`](../blpop) with the only difference being that it pops elements from the tail of a list instead of popping from the head.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` multi-bulk when no element could be popped and the timeout expired.\n- A two-element multi-bulk with the first element being the name of the key where an element was popped and the second element being the value of the popped element.\n\n## Examples\n\n```\nredis> DEL list1 list2\n(integer) 0\nredis> RPUSH list1 a b c\n(integer) 3\nredis> BRPOP list1 list2 0\n1) \"list1\"\n2) \"c\"\n```\n\n## History\n\n- Starting with Redis version 6.0.0: `timeout` is interpreted as a double instead of an integer.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/brpop/](https://redis.io/commands/brpop/)"
- name: brpoplpush
  id: brpoplpush/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# BRPOPLPUSH\n\n    BRPOPLPUSH (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`BLMOVE`](../blmove) with the `RIGHT` and `LEFT` arguments when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nBRPOPLPUSH source destination timeout\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@list`, `@slow`, `@blocking`,\n\n`BRPOPLPUSH` is the blocking variant of [`RPOPLPUSH`](../rpoplpush). When `source` contains elements, this command behaves exactly like [`RPOPLPUSH`](../rpoplpush). When used inside a [`MULTI`](../multi)/[`EXEC`](../exec) block, this command behaves exactly like [`RPOPLPUSH`](../rpoplpush). When `source` is empty, Redis will block the connection until another client pushes to it or until `timeout` is reached. A `timeout` of zero can be used to block indefinitely.\n\nSee [`RPOPLPUSH`](../rpoplpush) for more information.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the element being popped from `source` and pushed to `destination`. If `timeout` is reached, a [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) is returned.\n\n## Pattern: Reliable queue\n\nPlease see the pattern description in the [`RPOPLPUSH`](../rpoplpush) documentation.\n\n## Pattern: Circular list\n\nPlease see the pattern description in the [`RPOPLPUSH`](../rpoplpush) documentation.\n\n## History\n\n- Starting with Redis version 6.0.0: `timeout` is interpreted as a double instead of an integer.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/brpoplpush/](https://redis.io/commands/brpoplpush/)"
- name: bzmpop
  id: bzmpop/index
  summary: 'Time complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped'
  description: "# BZMPOP\n\n    BZMPOP\n\nSyntax\n\n``` command-syntax\nBZMPOP timeout numkeys key [key ...] <MIN | MAX> [COUNT count]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(K) + O(M\\*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`, `@blocking`,\n\n`BZMPOP` is the blocking variant of [`ZMPOP`](../zmpop).\n\nWhen any of the sorted sets contains elements, this command behaves exactly like [`ZMPOP`](../zmpop). When used inside a [`MULTI`](../multi)/[`EXEC`](../exec) block, this command behaves exactly like [`ZMPOP`](../zmpop). When all sorted sets are empty, Redis will block the connection until another client adds members to one of the keys or until the `timeout` (a double value specifying the maximum number of seconds to block) elapses. A `timeout` of zero can be used to block indefinitely.\n\nSee [`ZMPOP`](../zmpop) for more information.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` when no element could be popped.\n- A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bzmpop/](https://redis.io/commands/bzmpop/)"
- name: bzpopmax
  id: bzpopmax/index
  summary: 'Time complexity: O(log(N)) with N being the number of elements in the sorted set'
  description: "# BZPOPMAX\n\n    BZPOPMAX\n\nSyntax\n\n``` command-syntax\nBZPOPMAX key [key ...] timeout\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(log(N)) with N being the number of elements in the sorted set.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`, `@blocking`,\n\n`BZPOPMAX` is the blocking variant of the sorted set [`ZPOPMAX`](../zpopmax) primitive.\n\nIt is the blocking version because it blocks the connection when there are no members to pop from any of the given sorted sets. A member with the highest score is popped from first sorted set that is non-empty, with the given keys being checked in the order that they are given.\n\nThe `timeout` argument is interpreted as a double value specifying the maximum number of seconds to block. A timeout of zero can be used to block indefinitely.\n\nSee the [BZPOPMIN documentation](../bzpopmin) for the exact semantics, since `BZPOPMAX` is identical to [`BZPOPMIN`](../bzpopmin) with the only difference being that it pops members with the highest scores instead of popping the ones with the lowest scores.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` multi-bulk when no element could be popped and the timeout expired.\n- A three-element multi-bulk with the first element being the name of the key where a member was popped, the second element is the popped member itself, and the third element is the score of the popped element.\n\n## Examples\n\n```\nredis> DEL zset1 zset2\n(integer) 0\nredis> ZADD zset1 0 a 1 b 2 c\n(integer) 3\nredis> BZPOPMAX zset1 zset2 0\n1) \"zset1\"\n2) \"c\"\n3) \"2\"\n```\n\n## History\n\n- Starting with Redis version 6.0.0: `timeout` is interpreted as a double instead of an integer.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bzpopmax/](https://redis.io/commands/bzpopmax/)"
- name: bzpopmin
  id: bzpopmin/index
  summary: 'Time complexity: O(log(N)) with N being the number of elements in the sorted set'
  description: "# BZPOPMIN\n\n    BZPOPMIN\n\nSyntax\n\n``` command-syntax\nBZPOPMIN key [key ...] timeout\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(log(N)) with N being the number of elements in the sorted set.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`, `@blocking`,\n\n`BZPOPMIN` is the blocking variant of the sorted set [`ZPOPMIN`](../zpopmin) primitive.\n\nIt is the blocking version because it blocks the connection when there are no members to pop from any of the given sorted sets. A member with the lowest score is popped from first sorted set that is non-empty, with the given keys being checked in the order that they are given.\n\nThe `timeout` argument is interpreted as a double value specifying the maximum number of seconds to block. A timeout of zero can be used to block indefinitely.\n\nSee the [BLPOP documentation](../blpop) for the exact semantics, since `BZPOPMIN` is identical to [`BLPOP`](../blpop) with the only difference being the data structure being popped from.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` multi-bulk when no element could be popped and the timeout expired.\n- A three-element multi-bulk with the first element being the name of the key where a member was popped, the second element is the popped member itself, and the third element is the score of the popped element.\n\n## Examples\n\n```\nredis> DEL zset1 zset2\n(integer) 0\nredis> ZADD zset1 0 a 1 b 2 c\n(integer) 3\nredis> BZPOPMIN zset1 zset2 0\n1) \"zset1\"\n2) \"a\"\n3) \"0\"\n```\n\n## History\n\n- Starting with Redis version 6.0.0: `timeout` is interpreted as a double instead of an integer.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/bzpopmin/](https://redis.io/commands/bzpopmin/)"
- name: cf.add
  id: cf.add/index
  summary: Adds an item to the cuckoo filter, creating the filter if it does not exist
  description: "# CF.ADD\n\n    CF.ADD\n\nSyntax\n\n``` command-syntax\nCF.ADD key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k + i), where k is the number of sub-filters and i is maxIterations\n\nAdds an item to the cuckoo filter, creating the filter if it does not exist.\n\nCuckoo filters can contain the same item multiple times, and consider each insert as separate. You can use [`CF.ADDNX`](../cf.addnx) to only add the item if it does not exist yet. Keep in mind that deleting an element inserted using [`CF.ADDNX`](../cf.addnx) may cause false-negative errors.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: The item to add\n\n### Complexity\n\nO(n + i), where n is the number of `sub-filters` and i is `maxIterations`. Adding items requires up to 2 memory accesses per `sub-filter`. But as the filter fills up, both locations for an item might be full. The filter attempts to `Cuckoo` swap items up to `maxIterations` times.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - \"1\" if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n```\nredis> CF.ADD cf item\n(integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.add/](https://redis.io/commands/cf.add/)"
- name: cf.addnx
  id: cf.addnx/index
  summary: Adds an item to a cuckoo filter if the item did not exist previously
  description: "# CF.ADDNX\n\n    CF.ADDNX\n\nSyntax\n\n``` command-syntax\nCF.ADDNX key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k + i), where k is the number of sub-filters and i is maxIterations\n\nAdds an item to a cuckoo filter if the item did not exist previously. See documentation on [`CF.ADD`](../cf.add) for more information on this command.\n\nThis command is equivalent to a [`CF.EXISTS`](../cf.exists) + [`CF.ADD`](../cf.add) command. It does not insert an element into the filter if its fingerprint already exists in order to use the available capacity more efficiently. However, deleting elements can introduce **false negative** error rate!\n\nNote that this command is slower than [`CF.ADD`](../cf.add) because it first checks whether the item exists.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: The item to add\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - where \"1\" means the item has been added to the filter, and \"0\" mean, the item already existed.\n\n## Examples\n\n```\nredis> CF.ADDNX cf item1\n(integer) 0\nredis> CF.ADDNX cf item_new\n(integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.addnx/](https://redis.io/commands/cf.addnx/)"
- name: cf.count
  id: cf.count/index
  summary: Returns the number of times an item may be in the filter
  description: "# CF.COUNT\n\n    CF.COUNT\n\nSyntax\n\n``` command-syntax\nCF.COUNT key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k), where k is the number of sub-filters\n\nReturns the number of times an item may be in the filter. Because this is a probabilistic data structure, this may not necessarily be accurate.\n\nIf you just want to know if an item exists in the filter, use [`CF.EXISTS`](../cf.exists) because it is more efficient for that purpose.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: The item to count\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - with the count of possible matching copies of the item in the filter.\n\n## Examples\n\n```\nredis> CF.COUNT cf item1\n(integer) 42\n```\n\n```\nredis> CF.COUNT cf item_new\n(integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.count/](https://redis.io/commands/cf.count/)"
- name: cf.del
  id: cf.del/index
  summary: Deletes an item once from the filter
  description: "# CF.DEL\n\n    CF.DEL\n\nSyntax\n\n``` command-syntax\nCF.DEL key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k), where k is the number of sub-filters\n\nDeletes an item once from the filter. If the item exists only once, it will be removed from the filter. If the item was added multiple times, it will still be present.\n\nWarning\n\nDeleting elements that are not in the filter may delete a different item, resulting in false negatives.\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: The item to delete from the filter\n\n### Complexity\n\nO(n), where n is the number of `sub-filters`. Both alternative locations are checked on all `sub-filters`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - where \"1\" means the item has been deleted from the filter, and \"0\" mean, the item was not found.\n\n## Examples\n\n```\nredis> CF.DEL cf item1\n(integer) 1\n```\n\n```\nredis> CF.DEL cf item_new\n(integer) 0\n```\n\n```\nredis> CF.DEL cf1 item_new\n(error) Not found\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.del/](https://redis.io/commands/cf.del/)"
- name: cf.exists
  id: cf.exists/index
  summary: Integer reply - where "1" value means the item may exist in the filter, and a "0" value means it does not exist in the filter
  description: "# CF.EXISTS\n\n    CF.EXISTS\n\nSyntax\n\n``` command-syntax\nCF.EXISTS key item\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k), where k is the number of sub-filters\n\nCheck if an `item` exists in a Cuckoo Filter `key`\n\n### Parameters\n\n- **key**: The name of the filter\n- **item**: The item to check for\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - where \"1\" value means the item may exist in the filter, and a \"0\" value means it does not exist in the filter.\n\n## Examples\n\n```\nredis> CF.EXISTS cf item1\n(integer) 1\n```\n\n```\nredis> CF.EXISTS cf item_new\n(integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.exists/](https://redis.io/commands/cf.exists/)"
- name: cf.info
  id: cf.info/index
  summary: Array reply with information of the filter
  description: "# CF.INFO\n\n    CF.INFO\n\nSyntax\n\n``` command-syntax\nCF.INFO key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturn information about `key`\n\n### Parameters\n\n- **key**: Name of the key to restore\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information of the filter.\n\n@example\n\n```\nredis> CF.INFO cf\n 1) Size\n 2) (integer) 1080\n 3) Number of buckets\n 4) (integer) 512\n 5) Number of filter\n 6) (integer) 1\n 7) Number of items inserted\n 8) (integer) 0\n 9) Number of items deleted\n10) (integer) 0\n11) Bucket size\n12) (integer) 2\n13) Expansion rate\n14) (integer) 1\n15) Max iteration\n16) (integer) 20\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.info/](https://redis.io/commands/cf.info/)"
- name: cf.insert
  id: cf.insert/index
  summary: Adds one or more items to a cuckoo filter, allowing the filter to be created with a custom capacity if it does not exist yet
  description: "# CF.INSERT\n\n    CF.INSERT\n\nSyntax\n\n``` command-syntax\nCF.INSERT key [CAPACITY capacity] [NOCREATE] ITEMS item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n \\* (k + i)), where n is the number of items, k is the number of sub-filters and i is maxIterations\n\nAdds one or more items to a cuckoo filter, allowing the filter to be created with a custom capacity if it does not exist yet.\n\nThese commands offers more flexibility over the `ADD` command, at the cost of more verbosity.\n\n### Parameters\n\n- **key**: The name of the filter\n- **capacity**: Specifies the desired capacity of the new filter, if this filter does not exist yet. If the filter already exists, then this parameter is ignored. If the filter does not exist yet and this parameter is *not* specified, then the filter is created with the module-level default capacity which is 1024. See [`CF.RESERVE`](../cf.reserve) for more information on cuckoo filter capacities.\n- **NOCREATE**: If specified, prevents automatic filter creation if the filter does not exist. Instead, an error is returned if the filter does not already exist. This option is mutually exclusive with `CAPACITY`.\n- **item**: One or more items to add. The `ITEMS` keyword must precede the list of items to add.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - \"1\" if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> CF.INSERT cf CAPACITY 1000 ITEMS item1 item2 \n1) (integer) 1\n2) (integer) 1\n```\n\n```\nredis> CF.INSERT cf1 CAPACITY 1000 NOCREATE ITEMS item1 item2 \n(error) ERR not found\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.insert/](https://redis.io/commands/cf.insert/)"
- name: cf.insertnx
  id: cf.insertnx/index
  summary: 'Note: CF.INSERTNX is an advanced command that can have unintended impact if used incorrectly'
  description: "# CF.INSERTNX\n\n    CF.INSERTNX\n\nSyntax\n\n``` command-syntax\nCF.INSERTNX key [CAPACITY capacity] [NOCREATE] ITEMS item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n \\* (k + i)), where n is the number of items, k is the number of sub-filters and i is maxIterations\n\n## CF.INSERT\n\n## CF.INSERTNX\n\nNote: `CF.INSERTNX` is an advanced command that can have unintended impact if used incorrectly.\n\n```\nCF.INSERT {key} [CAPACITY {capacity}] [NOCREATE] ITEMS {item ...}\nCF.INSERTNX {key} [CAPACITY {capacity}] [NOCREATE] ITEMS {item ...}\n```\n\n### Description\n\nAdds one or more items to a cuckoo filter, allowing the filter to be created with a custom capacity if it does not exist yet.\n\nThis command is equivalent to a [`CF.EXISTS`](../cf.exists) + [`CF.ADD`](../cf.add) command. It does not insert an element into the filter if its fingerprint already exists and therefore better utilizes the available capacity. However, if you delete elements it might introduce **false negative** error rate!\n\nThese commands offers more flexibility over the `ADD` and `ADDNX` commands, at the cost of more verbosity.\n\n### Parameters\n\n- **key**: The name of the filter\n- **capacity**: Specifies the desired capacity of the new filter, if this filter does not exist yet. If the filter already exists, then this parameter is ignored. If the filter does not exist yet and this parameter is *not* specified, then the filter is created with the module-level default capacity which is 1024. See [`CF.RESERVE`](../cf.reserve) for more information on cuckoo filter capacities.\n- **NOCREATE**: If specified, prevents automatic filter creation if the filter does not exist. Instead, an error is returned if the filter does not already exist. This option is mutually exclusive with `CAPACITY`.\n- **item**: One or more items to add. The `ITEMS` keyword must precede the list of items to add.\n\n### Complexity\n\nO(n + i), where n is the number of `sub-filters` and i is `maxIterations`. Adding items requires up to 2 memory accesses per `sub-filter`. But as the filter fills up, both locations for an item might be full. The filter attempts to `Cuckoo` swap items up to `maxIterations` times.\n\n### Returns\n\nAn array of booleans (as integers) corresponding to the items specified. Possible values for each element are:\n\n- `> 0` if the item was successfully inserted\n- `0` if the item already existed *and* `INSERTNX` is used.\n- `<0` if an error occurred\n\nNote that for [`CF.INSERT`](../cf.insert), the return value is always be an array of `>0` values, unless an error occurs.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - where \"1\" means the item has been added to the filter, and \"0\" mean, the item already existed. [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) when filter parameters are erroneous\n\n## Examples\n\n```\nredis> CF.INSERTNX cf CAPACITY 1000 ITEMS item1 item2 \n1) (integer) 1\n2) (integer) 1\n```\n\n```\nredis> CF.INSERTNX cf CAPACITY 1000 ITEMS item1 item2 item3\n1) (integer) 0\n2) (integer) 0\n3) (integer) 1\n```\n\n```\nredis> CF.INSERTNX cf_new CAPACITY 1000 NOCREATE ITEMS item1 item2 \n(error) ERR not found\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.insertnx/](https://redis.io/commands/cf.insertnx/)"
- name: cf.loadchunk
  id: cf.loadchunk/index
  summary: Restores a filter previously saved using SCANDUMP
  description: "# CF.LOADCHUNK\n\n    CF.LOADCHUNK\n\nSyntax\n\n``` command-syntax\nCF.LOADCHUNK key iterator data\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n), where n is the capacity\n\nRestores a filter previously saved using `SCANDUMP`. See the `SCANDUMP` command for example usage.\n\nThis command overwrites any cuckoo filter stored under `key`. Make sure that the cuckoo filter is not be modified between invocations.\n\n### Parameters\n\n- **key**: Name of the key to restore\n- **iter**: Iterator value associated with `data` (returned by `SCANDUMP`)\n- **data**: Current data chunk (returned by `SCANDUMP`)\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\nSee BF.SCANDUMP for an example.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.loadchunk/](https://redis.io/commands/cf.loadchunk/)"
- name: cf.mexists
  id: cf.mexists/index
  summary: Array reply of Integer reply - for each item where "1" value means the corresponding item may exist in the filter, and a "0" value means it does not exist in the filter
  description: "# CF.MEXISTS\n\n    CF.MEXISTS\n\nSyntax\n\n``` command-syntax\nCF.MEXISTS key item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k \\* n), where k is the number of sub-filters and n is the number of items\n\nCheck if one or more `items` exists in a Cuckoo Filter `key`\n\n### Parameters\n\n- **key**: The name of the filter\n- **items**: The item to check for\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - for each item where \"1\" value means the corresponding item may exist in the filter, and a \"0\" value means it does not exist in the filter.\n\n## Examples\n\n```\nredis> CF.MEXISTS cf item1 item_new\n1) (integer) 1\n2) (integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.mexists/](https://redis.io/commands/cf.mexists/)"
- name: cf.reserve
  id: cf.reserve/index
  summary: Create a Cuckoo Filter as key with a single sub-filter for the initial amount of capacity for items
  description: "# CF.RESERVE\n\n    CF.RESERVE\n\nSyntax\n\n``` command-syntax\nCF.RESERVE key capacity [BUCKETSIZE bucketsize]\n  [MAXITERATIONS maxiterations] [EXPANSION expansion]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nCreate a Cuckoo Filter as `key` with a single sub-filter for the initial amount of `capacity` for items. Because of how Cuckoo Filters work, the filter is likely to declare itself full before `capacity` is reached and therefore fill rate will likely never reach 100%. The fill rate can be improved by using a larger `bucketsize` at the cost of a higher error rate. When the filter self-declare itself `full`, it will auto-expand by generating additional sub-filters at the cost of reduced performance and increased error rate. The new sub-filter is created with size of the previous sub-filter multiplied by `expansion`. Like bucket size, additional sub-filters grow the error rate linearly. The size of the new sub-filter is the size of the last sub-filter multiplied by `expansion`.\n\nThe minimal false positive error rate is 2/255 ≈ 0.78% when bucket size of 1 is used. Larger buckets increase the error rate linearly (for example, a bucket size of 3 yields a 2.35% error rate) but improve the fill rate of the filter.\n\n`maxiterations` dictates the number of attempts to find a slot for the incoming fingerprint. Once the filter gets full, high `maxIterations` value will slow down insertions.\n\nUnused capacity in prior sub-filters is automatically used when possible. The filter can grow up to 32 times.\n\n## Parameters:\n\n- **key**: The key under which the filter is found.\n- **capacity**: Estimated capacity for the filter. Capacity is rounded to the next `2^n` number. The filter will likely not fill up to 100% of it's capacity. Make sure to reserve extra capacity if you want to avoid expansions.\n\nOptional parameters:\n\n- **bucketsize**: Number of items in each bucket. A higher bucket size value improves the fill rate but also causes a higher error rate and slightly slower performance. The default value is 2.\n- **maxiterations**: Number of attempts to swap items between buckets before declaring filter as full and creating an additional filter. A low value is better for performance and a higher number is better for filter fill rate. The default value is 20.\n- **expansion**: When a new filter is created, its size is the size of the current filter multiplied by `expansion`. Expansion is rounded to the next `2^n` number. The default value is 1.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> CF.RESERVE cf 1000\nOK\n```\n\n```\nredis> CF.RESERVE cf 1000\n(error) ERR item exists\n```\n\n```\nredis> CF.RESERVE cf_params 1000 BUCKETSIZE 8 MAXITERATIONS 20 EXPANSION 2\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.reserve/](https://redis.io/commands/cf.reserve/)"
- name: cf.scandump
  id: cf.scandump/index
  summary: Begins an incremental save of the cuckoo filter
  description: "# CF.SCANDUMP\n\n    CF.SCANDUMP\n\nSyntax\n\n``` command-syntax\nCF.SCANDUMP key iterator\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 1.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n), where n is the capacity\n\nBegins an incremental save of the cuckoo filter. This is useful for large cuckoo filters which cannot fit into the normal [`DUMP`](../dump) and [`RESTORE`](../restore) model.\n\nThe first time this command is called, the value of `iter` should be 0. This command returns successive `(iter, data)` pairs until `(0, NULL)` indicates completion.\n\n### Parameters\n\n- **key**: Name of the filter\n- **iter**: Iterator value. This is either 0, or the iterator from a previous invocation of this command\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) (*Iterator*) and \\[\\] (*Data*). The Iterator is passed as input to the next invocation of `SCANDUMP`. If *Iterator* is 0, then it means iteration has completed.\n\nThe iterator-data pair should also be passed to `LOADCHUNK` when restoring the filter.\n\n@exmaples\n\n```\nredis> CF.RESERVE cf 8\nOK\nredis> CF.ADD cf item1\n(integer) 1\nredis> CF.SCANDUMP cf 0\n1) (integer) 1\n2) \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x14\\x00\\x01\\x008\\x9a\\xe0\\xd8\\xc3\\x7f\\x00\\x00\"\nredis> CF.SCANDUMP cf 1\n1) (integer) 9\n2) \"\\x00\\x00\\x00\\x00\\a\\x00\\x00\\x00\"\nredis> CF.SCANDUMP cf 9\n1) (integer) 0\n2) (nil)\nredis> FLUSHALL\nOK\nredis> CF.LOADCHUNK cf 1 \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x14\\x00\\x01\\x008\\x9a\\xe0\\xd8\\xc3\\x7f\\x00\\x00\"\nOK\nredis> CF.LOADCHUNK cf 9 \"\\x00\\x00\\x00\\x00\\a\\x00\\x00\\x00\"\nOK\nredis> CF.EXISTS cf item1\n(integer) 1\n```\n\npython code:\n\n```\nchunks = []\niter = 0\nwhile True:\n    iter, data = CF.SCANDUMP(key, iter)\n    if iter == 0:\n        break\n    else:\n        chunks.append([iter, data])\n\n# Load it back\nfor chunk in chunks:\n    iter, data = chunk\n    CF.LOADCHUNK(key, iter, data)\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cf.scandump/](https://redis.io/commands/cf.scandump/)"
- name: client caching
  id: client-caching/index
  summary: This command controls the tracking of the keys in the next command executed by the connection, when tracking is enabled in OPTIN or OPTOUT mode
  description: "# CLIENT\n\n    CLIENT CACHING\n\nSyntax\n\n``` command-syntax\nCLIENT CACHING <YES | NO>\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThis command controls the tracking of the keys in the next command executed by the connection, when tracking is enabled in `OPTIN` or `OPTOUT` mode. Please check the [client side caching documentation](https://redis.io/topics/client-side-caching) for background information.\n\nWhen tracking is enabled Redis, using the [`CLIENT TRACKING`](../client-tracking) command, it is possible to specify the `OPTIN` or `OPTOUT` options, so that keys in read only commands are not automatically remembered by the server to be invalidated later. When we are in `OPTIN` mode, we can enable the tracking of the keys in the next command by calling `CLIENT CACHING yes` immediately before it. Similarly when we are in `OPTOUT` mode, and keys are normally tracked, we can avoid the keys in the next command to be tracked using `CLIENT CACHING no`.\n\nBasically the command sets a state in the connection, that is valid only for the next command execution, that will modify the behavior of client tracking.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` or an error if the argument is not yes or no.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-caching/](https://redis.io/commands/client-caching/)"
- name: client getname
  id: client-getname/index
  summary: The CLIENT GETNAME returns the name of the current connection as set by CLIENT SETNAME
  description: "# CLIENT\n\n    CLIENT GETNAME\n\nSyntax\n\n``` command-syntax\nCLIENT GETNAME\n```\n\nAvailable since:  \n2.6.9\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThe `CLIENT GETNAME` returns the name of the current connection as set by [`CLIENT SETNAME`](../client-setname). Since every new connection starts without an associated name, if no name was assigned a null bulk reply is returned.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): The connection name, or a null bulk reply if no name is set.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-getname/](https://redis.io/commands/client-getname/)"
- name: client getredir
  id: client-getredir/index
  summary: This command returns the client ID we are redirecting our tracking notifications to
  description: "# CLIENT\n\n    CLIENT GETREDIR\n\nSyntax\n\n``` command-syntax\nCLIENT GETREDIR\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThis command returns the client ID we are redirecting our [tracking](https://redis.io/topics/client-side-caching) notifications to. We set a client to redirect to when using [`CLIENT TRACKING`](../client-tracking) to enable tracking. However in order to avoid forcing client libraries implementations to remember the ID notifications are redirected to, this command exists in order to improve introspection and allow clients to check later if redirection is active and towards which client ID.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the ID of the client we are redirecting the notifications to. The command returns `-1` if client tracking is not enabled, or `0` if client tracking is enabled but we are not redirecting the notifications to any client.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-getredir/](https://redis.io/commands/client-getredir/)"
- name: client id
  id: client-id/index
  summary: The command just returns the ID of the current connection
  description: "# CLIENT\n\n    CLIENT ID\n\nSyntax\n\n``` command-syntax\nCLIENT ID\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThe command just returns the ID of the current connection. Every connection ID has certain guarantees:\n\n1.  It is never repeated, so if `CLIENT ID` returns the same number, the caller can be sure that the underlying client did not disconnect and reconnect the connection, but it is still the same connection.\n2.  The ID is monotonically incremental. If the ID of a connection is greater than the ID of another connection, it is guaranteed that the second connection was established with the server at a later time.\n\nThis command is especially useful together with [`CLIENT UNBLOCK`](../client-unblock) which was introduced also in Redis 5 together with `CLIENT ID`. Check the [`CLIENT UNBLOCK`](../client-unblock) command page for a pattern involving the two commands.\n\n## Examples\n\n``` redis-cli\nCLIENT ID\n```\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe id of the client.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-id/](https://redis.io/commands/client-id/)"
- name: client info
  id: client-info/index
  summary: The command returns information and statistics about the current client connection in a mostly human readable format
  description: "# CLIENT\n\n    CLIENT INFO\n\nSyntax\n\n``` command-syntax\nCLIENT INFO\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThe command returns information and statistics about the current client connection in a mostly human readable format.\n\nThe reply format is identical to that of [`CLIENT LIST`](../client-list), and the content consists only of information about the current client.\n\n## Examples\n\n``` redis-cli\nCLIENT INFO\n```\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): a unique string, as described at the [`CLIENT LIST`](../client-list) page, for the current client.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-info/](https://redis.io/commands/client-info/)"
- name: client kill
  id: client-kill/index
  summary: The CLIENT KILL command closes a given client connection
  description: "# CLIENT\n\n    CLIENT KILL\n\nSyntax\n\n``` command-syntax\nCLIENT KILL <ip:port | <[ID client-id] | [TYPE <NORMAL | MASTER |\n  SLAVE | REPLICA | PUBSUB>] | [USER username] | [ADDR ip:port] |\n  [LADDR ip:port] | [SKIPME <YES | NO>] [[ID client-id] |\n  [TYPE <NORMAL | MASTER | SLAVE | REPLICA | PUBSUB>] |\n  [USER username] | [ADDR ip:port] | [LADDR ip:port] | [SKIPME <YES\n  | NO>] ...]>>\n```\n\nAvailable since:  \n2.4.0\n\nTime complexity:  \nO(N) where N is the number of client connections\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`, `@connection`,\n\nThe `CLIENT KILL` command closes a given client connection. This command support two formats, the old format:\n\n    CLIENT KILL addr:port\n\nThe `ip:port` should match a line returned by the [`CLIENT LIST`](../client-list) command (`addr` field).\n\nThe new format:\n\n    CLIENT KILL <filter> <value> ... ... <filter> <value>\n\nWith the new form it is possible to kill clients by different attributes instead of killing just by address. The following filters are available:\n\n- `CLIENT KILL ADDR ip:port`. This is exactly the same as the old three-arguments behavior.\n- `CLIENT KILL LADDR ip:port`. Kill all clients connected to specified local (bind) address.\n- `CLIENT KILL ID client-id`. Allows to kill a client by its unique `ID` field. Client `ID`'s are retrieved using the [`CLIENT LIST`](../client-list) command.\n- `CLIENT KILL TYPE type`, where *type* is one of `normal`, `master`, `replica` and `pubsub`. This closes the connections of **all the clients** in the specified class. Note that clients blocked into the [`MONITOR`](../monitor) command are considered to belong to the `normal` class.\n- `CLIENT KILL USER username`. Closes all the connections that are authenticated with the specified [ACL](https://redis.io/topics/acl) username, however it returns an error if the username does not map to an existing ACL user.\n- `CLIENT KILL SKIPME yes/no`. By default this option is set to `yes`, that is, the client calling the command will not get killed, however setting this option to `no` will have the effect of also killing the client calling the command.\n\nIt is possible to provide multiple filters at the same time. The command will handle multiple filters via logical AND. For example:\n\n    CLIENT KILL addr 127.0.0.1:12345 type pubsub\n\nis valid and will kill only a pubsub client with the specified address. This format containing multiple filters is rarely useful currently.\n\nWhen the new form is used the command no longer returns `OK` or an error, but instead the number of killed clients, that may be zero.\n\n## CLIENT KILL and Redis Sentinel\n\nRecent versions of Redis Sentinel (Redis 2.8.12 or greater) use CLIENT KILL in order to kill clients when an instance is reconfigured, in order to force clients to perform the handshake with one Sentinel again and update its configuration.\n\n## Notes\n\nDue to the single-threaded nature of Redis, it is not possible to kill a client connection while it is executing a command. From the client point of view, the connection can never be closed in the middle of the execution of a command. However, the client will notice the connection has been closed only when the next command is sent (and results in network error).\n\n## Return\n\nWhen called with the three arguments format:\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the connection exists and has been closed\n\nWhen called with the filter / value format:\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of clients killed.\n\n## History\n\n- Starting with Redis version 2.8.12: Added new filter format.\n- Starting with Redis version 2.8.12: `ID` option.\n- Starting with Redis version 3.2.0: Added `master` type in for `TYPE` option.\n- Starting with Redis version 5.0.0: Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility.\n- Starting with Redis version 6.2.0: `LADDR` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-kill/](https://redis.io/commands/client-kill/)"
- name: client list
  id: client-list/index
  summary: The CLIENT LIST command returns information and statistics about the client connections server in a mostly human readable format
  description: "# CLIENT\n\n    CLIENT LIST\n\nSyntax\n\n``` command-syntax\nCLIENT LIST [TYPE <NORMAL | MASTER | REPLICA | PUBSUB>]\n  [ID client-id [client-id ...]]\n```\n\nAvailable since:  \n2.4.0\n\nTime complexity:  \nO(N) where N is the number of client connections\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`, `@connection`,\n\nThe `CLIENT LIST` command returns information and statistics about the client connections server in a mostly human readable format.\n\nYou can use one of the optional subcommands to filter the list. The `TYPE type` subcommand filters the list by clients' type, where *type* is one of `normal`, `master`, `replica`, and `pubsub`. Note that clients blocked by the [`MONITOR`](../monitor) command belong to the `normal` class.\n\nThe `ID` filter only returns entries for clients with IDs matching the `client-id` arguments.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): a unique string, formatted as follows:\n\n- One client connection per line (separated by LF)\n- Each line is composed of a succession of `property=value` fields separated by a space character.\n\nHere is the meaning of the fields:\n\n- `id`: a unique 64-bit client ID\n- `addr`: address/port of the client\n- `laddr`: address/port of local address client connected to (bind address)\n- `fd`: file descriptor corresponding to the socket\n- `name`: the name set by the client with [`CLIENT SETNAME`](../client-setname)\n- `age`: total duration of the connection in seconds\n- `idle`: idle time of the connection in seconds\n- `flags`: client flags (see below)\n- `db`: current database ID\n- `sub`: number of channel subscriptions\n- `psub`: number of pattern matching subscriptions\n- `ssub`: number of shard channel subscriptions. Added in Redis 7.0.3\n- `multi`: number of commands in a MULTI/EXEC context\n- `qbuf`: query buffer length (0 means no query pending)\n- `qbuf-free`: free space of the query buffer (0 means the buffer is full)\n- `argv-mem`: incomplete arguments for the next command (already extracted from query buffer)\n- `multi-mem`: memory is used up by buffered multi commands. Added in Redis 7.0\n- `obl`: output buffer length\n- `oll`: output list length (replies are queued in this list when the buffer is full)\n- `omem`: output buffer memory usage\n- `tot-mem`: total memory consumed by this client in its various buffers\n- `events`: file descriptor events (see below)\n- `cmd`: last command played\n- `user`: the authenticated username of the client\n- `redir`: client id of current client tracking redirection\n- `resp`: client RESP protocol version. Added in Redis 7.0\n\nThe client flags can be a combination of:\n\n```\nA: connection to be closed ASAP\nb: the client is waiting in a blocking operation\nc: connection to be closed after writing entire reply\nd: a watched keys has been modified - EXEC will fail\ni: the client is waiting for a VM I/O (deprecated)\nM: the client is a master\nN: no specific flag set\nO: the client is a client in MONITOR mode\nP: the client is a Pub/Sub subscriber\nr: the client is in readonly mode against a cluster node\nS: the client is a replica node connection to this instance\nu: the client is unblocked\nU: the client is connected via a Unix domain socket\nx: the client is in a MULTI/EXEC context\nt: the client enabled keys tracking in order to perform client side caching\nR: the client tracking target client is invalid\nB: the client enabled broadcast tracking mode \n```\n\nThe file descriptor events can be:\n\n```\nr: the client socket is readable (event loop)\nw: the client socket is writable (event loop)\n```\n\n## Notes\n\nNew fields are regularly added for debugging purpose. Some could be removed in the future. A version safe Redis client using this command should parse the output accordingly (i.e. handling gracefully missing fields, skipping unknown fields).\n\n## History\n\n- Starting with Redis version 2.8.12: Added unique client `id` field.\n- Starting with Redis version 5.0.0: Added optional `TYPE` filter.\n- Starting with Redis version 6.0.0: Added `user` field.\n- Starting with Redis version 6.2.0: Added `argv-mem`, `tot-mem`, `laddr` and `redir` fields and the optional `ID` filter.\n- Starting with Redis version 7.0.0: Added `resp`, `multi-mem`, `rbs` and `rbp` fields.\n- Starting with Redis version 7.0.3: Added `ssub` field.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-list/](https://redis.io/commands/client-list/)"
- name: client no evict
  id: client-no-evict/index
  summary: The CLIENT NO-EVICT command sets the client eviction mode for the current connection
  description: "# CLIENT\n\n    CLIENT NO-EVICT\n\nSyntax\n\n``` command-syntax\nCLIENT NO-EVICT <ON | OFF>\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`, `@connection`,\n\nThe `CLIENT NO-EVICT` command sets the [client eviction](https://redis.io/topics/clients#client-eviction) mode for the current connection.\n\nWhen turned on and client eviction is configured, the current connection will be excluded from the client eviction process even if we're above the configured client eviction threshold.\n\nWhen turned off, the current client will be re-included in the pool of potential clients to be evicted (and evicted if needed).\n\nSee [client eviction](https://redis.io/topics/clients#client-eviction) for more details.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-no-evict/](https://redis.io/commands/client-no-evict/)"
- name: client pause
  id: client-pause/index
  summary: CLIENT PAUSE is a connections control command able to suspend all the Redis clients for the specified amount of time (in milliseconds)
  description: "# CLIENT\n\n    CLIENT PAUSE\n\nSyntax\n\n``` command-syntax\nCLIENT PAUSE timeout [WRITE | ALL]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`, `@connection`,\n\n`CLIENT PAUSE` is a connections control command able to suspend all the Redis clients for the specified amount of time (in milliseconds).\n\nThe command performs the following actions:\n\n- It stops processing all the pending commands from normal and pub/sub clients for the given mode. However interactions with replicas will continue normally. Note that clients are formally paused when they try to execute a command, so no work is taken on the server side for inactive clients.\n- However it returns OK to the caller ASAP, so the `CLIENT PAUSE` command execution is not paused by itself.\n- When the specified amount of time has elapsed, all the clients are unblocked: this will trigger the processing of all the commands accumulated in the query buffer of every client during the pause.\n\nClient pause currently supports two modes:\n\n- `ALL`: This is the default mode. All client commands are blocked.\n- `WRITE`: Clients are only blocked if they attempt to execute a write command.\n\nFor the `WRITE` mode, some commands have special behavior:\n\n- [`EVAL`](../eval)/[`EVALSHA`](../evalsha): Will block client for all scripts.\n- [`PUBLISH`](../publish): Will block client.\n- [`PFCOUNT`](../pfcount): Will block client.\n- [`WAIT`](../wait): Acknowledgments will be delayed, so this command will appear blocked.\n\nThis command is useful as it makes able to switch clients from a Redis instance to another one in a controlled way. For example during an instance upgrade the system administrator could do the following:\n\n- Pause the clients using `CLIENT PAUSE`\n- Wait a few seconds to make sure the replicas processed the latest replication stream from the master.\n- Turn one of the replicas into a master.\n- Reconfigure clients to connect with the new master.\n\nSince Redis 6.2, the recommended mode for client pause is `WRITE`. This mode will stop all replication traffic, can be aborted with the [`CLIENT UNPAUSE`](../client-unpause) command, and allows reconfiguring the old master without risking accepting writes after the failover. This is also the mode used during cluster failover.\n\nFor versions before 6.2, it is possible to send `CLIENT PAUSE` in a MULTI/EXEC block together with the `INFO replication` command in order to get the current master offset at the time the clients are blocked. This way it is possible to wait for a specific offset in the replica side in order to make sure all the replication stream was processed.\n\nSince Redis 3.2.10 / 4.0.0, this command also prevents keys to be evicted or expired during the time clients are paused. This way the dataset is guaranteed to be static not just from the point of view of clients not being able to write, but also from the point of view of internal operations.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The command returns OK or an error if the timeout is invalid.\n\n## Behavior change history\n\n- `>= 3.2.0`: Client pause prevents client pause and key eviction as well.\n\n## History\n\n- Starting with Redis version 6.2.0: `CLIENT PAUSE WRITE` mode added along with the `mode` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-pause/](https://redis.io/commands/client-pause/)"
- name: client reply
  id: client-reply/index
  summary: Sometimes it can be useful for clients to completely disable replies from the Redis server
  description: "# CLIENT\n\n    CLIENT REPLY\n\nSyntax\n\n``` command-syntax\nCLIENT REPLY <ON | OFF | SKIP>\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nSometimes it can be useful for clients to completely disable replies from the Redis server. For example when the client sends fire and forget commands or performs a mass loading of data, or in caching contexts where new data is streamed constantly. In such contexts to use server time and bandwidth in order to send back replies to clients, which are going to be ignored, is considered wasteful.\n\nThe `CLIENT REPLY` command controls whether the server will reply the client's commands. The following modes are available:\n\n- `ON`. This is the default mode in which the server returns a reply to every command.\n- `OFF`. In this mode the server will not reply to client commands.\n- `SKIP`. This mode skips the reply of command immediately after it.\n\n## Return\n\nWhen called with either `OFF` or `SKIP` subcommands, no reply is made. When called with `ON`:\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-reply/](https://redis.io/commands/client-reply/)"
- name: client setname
  id: client-setname/index
  summary: The CLIENT SETNAME command assigns a name to the current connection
  description: "# CLIENT\n\n    CLIENT SETNAME\n\nSyntax\n\n``` command-syntax\nCLIENT SETNAME connection-name\n```\n\nAvailable since:  \n2.6.9\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThe `CLIENT SETNAME` command assigns a name to the current connection.\n\nThe assigned name is displayed in the output of [`CLIENT LIST`](../client-list) so that it is possible to identify the client that performed a given connection.\n\nFor instance when Redis is used in order to implement a queue, producers and consumers of messages may want to set the name of the connection according to their role.\n\nThere is no limit to the length of the name that can be assigned if not the usual limits of the Redis string type (512 MB). However it is not possible to use spaces in the connection name as this would violate the format of the [`CLIENT LIST`](../client-list) reply.\n\nIt is possible to entirely remove the connection name setting it to the empty string, that is not a valid connection name since it serves to this specific purpose.\n\nThe connection name can be inspected using [`CLIENT GETNAME`](../client-getname).\n\nEvery new connection starts without an assigned name.\n\nTip: setting names to connections is a good way to debug connection leaks due to bugs in the application using Redis.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the connection name was successfully set.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-setname/](https://redis.io/commands/client-setname/)"
- name: client tracking
  id: client-tracking/index
  summary: 'Time complexity: O(1)'
  description: "# CLIENT\n\n    CLIENT TRACKING\n\nSyntax\n\n``` command-syntax\nCLIENT TRACKING <ON | OFF> [REDIRECT client-id] [PREFIX prefix\n  [PREFIX prefix ...]] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1). Some options may introduce additional complexity.\n\nACL categories:  \n`@slow`, `@connection`,\n\nThis command enables the tracking feature of the Redis server, that is used for [server assisted client side caching](https://redis.io/topics/client-side-caching).\n\nWhen tracking is enabled Redis remembers the keys that the connection requested, in order to send later invalidation messages when such keys are modified. Invalidation messages are sent in the same connection (only available when the RESP3 protocol is used) or redirected in a different connection (available also with RESP2 and Pub/Sub). A special *broadcasting* mode is available where clients participating in this protocol receive every notification just subscribing to given key prefixes, regardless of the keys that they requested. Given the complexity of the argument please refer to [the main client side caching documentation](https://redis.io/topics/client-side-caching) for the details. This manual page is only a reference for the options of this subcommand.\n\nIn order to enable tracking, use:\n\n    CLIENT TRACKING on ... options ...\n\nThe feature will remain active in the current connection for all its life, unless tracking is turned off with `CLIENT TRACKING off` at some point.\n\nThe following are the list of options that modify the behavior of the command when enabling tracking:\n\n- `REDIRECT <id>`: send invalidation messages to the connection with the specified ID. The connection must exist. You can get the ID of a connection using [`CLIENT ID`](../client-id). If the connection we are redirecting to is terminated, when in RESP3 mode the connection with tracking enabled will receive `tracking-redir-broken` push messages in order to signal the condition.\n- `BCAST`: enable tracking in broadcasting mode. In this mode invalidation messages are reported for all the prefixes specified, regardless of the keys requested by the connection. Instead when the broadcasting mode is not enabled, Redis will track which keys are fetched using read-only commands, and will report invalidation messages only for such keys.\n- `PREFIX <prefix>`: for broadcasting, register a given key prefix, so that notifications will be provided only for keys starting with this string. This option can be given multiple times to register multiple prefixes. If broadcasting is enabled without this option, Redis will send notifications for every key. You can't delete a single prefix, but you can delete all prefixes by disabling and re-enabling tracking. Using this option adds the additional time complexity of O(N^2), where N is the total number of prefixes tracked.\n- `OPTIN`: when broadcasting is NOT active, normally don't track keys in read only commands, unless they are called immediately after a `CLIENT CACHING yes` command.\n- `OPTOUT`: when broadcasting is NOT active, normally track keys in read only commands, unless they are called immediately after a `CLIENT CACHING no` command.\n- `NOLOOP`: don't send notifications about keys modified by this connection itself.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the connection was successfully put in tracking mode or if the tracking mode was successfully disabled. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-tracking/](https://redis.io/commands/client-tracking/)"
- name: client trackinginfo
  id: client-trackinginfo/index
  summary: The command returns information about the current client connection's use of the server assisted client side caching feature
  description: "# CLIENT\n\n    CLIENT TRACKINGINFO\n\nSyntax\n\n``` command-syntax\nCLIENT TRACKINGINFO\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThe command returns information about the current client connection's use of the [server assisted client side caching](https://redis.io/topics/client-side-caching) feature.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of tracking information sections and their respective values, specifically:\n\n- **flags**: A list of tracking flags used by the connection. The flags and their meanings are as follows:\n  - `off`: The connection isn't using server assisted client side caching.\n  - `on`: Server assisted client side caching is enabled for the connection.\n  - `bcast`: The client uses broadcasting mode.\n  - `optin`: The client does not cache keys by default.\n  - `optout`: The client caches keys by default.\n  - `caching-yes`: The next command will cache keys (exists only together with `optin`).\n  - `caching-no`: The next command won't cache keys (exists only together with `optout`).\n  - `noloop`: The client isn't notified about keys modified by itself.\n  - `broken_redirect`: The client ID used for redirection isn't valid anymore.\n- **redirect**: The client ID used for notifications redirection, or -1 when none.\n- **prefixes**: A list of key prefixes for which notifications are sent to the client.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-trackinginfo/](https://redis.io/commands/client-trackinginfo/)"
- name: client unblock
  id: client-unblock/index
  summary: This command can unblock, from a different connection, a client blocked in a blocking operation, such as for instance BRPOP or XREAD or WAIT
  description: "# CLIENT\n\n    CLIENT UNBLOCK\n\nSyntax\n\n``` command-syntax\nCLIENT UNBLOCK client-id [TIMEOUT | ERROR]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(log N) where N is the number of client connections\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`, `@connection`,\n\nThis command can unblock, from a different connection, a client blocked in a blocking operation, such as for instance [`BRPOP`](../brpop) or [`XREAD`](../xread) or [`WAIT`](../wait).\n\nBy default the client is unblocked as if the timeout of the command was reached, however if an additional (and optional) argument is passed, it is possible to specify the unblocking behavior, that can be **TIMEOUT** (the default) or **ERROR**. If **ERROR** is specified, the behavior is to unblock the client returning as error the fact that the client was force-unblocked. Specifically the client will receive the following error:\n\n    -UNBLOCKED client unblocked via CLIENT UNBLOCK\n\nNote: of course as usually it is not guaranteed that the error text remains the same, however the error code will remain `-UNBLOCKED`.\n\nThis command is useful especially when we are monitoring many keys with a limited number of connections. For instance we may want to monitor multiple streams with [`XREAD`](../xread) without using more than N connections. However at some point the consumer process is informed that there is one more stream key to monitor. In order to avoid using more connections, the best behavior would be to stop the blocking command from one of the connections in the pool, add the new key, and issue the blocking command again.\n\nTo obtain this behavior the following pattern is used. The process uses an additional *control connection* in order to send the `CLIENT UNBLOCK` command if needed. In the meantime, before running the blocking operation on the other connections, the process runs [`CLIENT ID`](../client-id) in order to get the ID associated with that connection. When a new key should be added, or when a key should no longer be monitored, the relevant connection blocking command is aborted by sending `CLIENT UNBLOCK` in the control connection. The blocking command will return and can be finally reissued.\n\nThis example shows the application in the context of Redis streams, however the pattern is a general one and can be applied to other cases.\n\n## Examples\n\n```\nConnection A (blocking connection):\n> CLIENT ID\n2934\n> BRPOP key1 key2 key3 0\n(client is blocked)\n\n... Now we want to add a new key ...\n\nConnection B (control connection):\n> CLIENT UNBLOCK 2934\n1\n\nConnection A (blocking connection):\n... BRPOP reply with timeout ...\nNULL\n> BRPOP key1 key2 key3 key4 0\n(client is blocked again)\n```\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the client was unblocked successfully.\n- `0` if the client wasn't unblocked.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-unblock/](https://redis.io/commands/client-unblock/)"
- name: client unpause
  id: client-unpause/index
  summary: CLIENT UNPAUSE is used to resume command processing for all clients that were paused by CLIENT PAUSE
  description: "# CLIENT\n\n    CLIENT UNPAUSE\n\nSyntax\n\n``` command-syntax\nCLIENT UNPAUSE\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N) Where N is the number of paused clients\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`, `@connection`,\n\n`CLIENT UNPAUSE` is used to resume command processing for all clients that were paused by [`CLIENT PAUSE`](../client-pause).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The command returns `OK`\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/client-unpause/](https://redis.io/commands/client-unpause/)"
- name: cluster addslots
  id: cluster-addslots/index
  summary: This command is useful in order to modify a node's view of the cluster configuration
  description: "# CLUSTER\n\n    CLUSTER ADDSLOTS\n\nSyntax\n\n``` command-syntax\nCLUSTER ADDSLOTS slot [slot ...]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the total number of hash slot arguments\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThis command is useful in order to modify a node's view of the cluster configuration. Specifically it assigns a set of hash slots to the node receiving the command. If the command is successful, the node will map the specified hash slots to itself, and will start broadcasting the new configuration.\n\nHowever note that:\n\n1.  The command only works if all the specified slots are, from the point of view of the node receiving the command, currently not assigned. A node will refuse to take ownership for slots that already belong to some other node (including itself).\n2.  The command fails if the same slot is specified multiple times.\n3.  As a side effect of the command execution, if a slot among the ones specified as argument is set as `importing`, this state gets cleared once the node assigns the (previously unbound) slot to itself.\n\n## Example\n\nFor example the following command assigns slots 1 2 3 to the node receiving the command:\n\n    > CLUSTER ADDSLOTS 1 2 3\n    OK\n\nHowever trying to execute it again results into an error since the slots are already assigned:\n\n    > CLUSTER ADDSLOTS 1 2 3\n    ERR Slot 1 is already busy\n\n## Usage in Redis Cluster\n\nThis command only works in cluster mode and is useful in the following Redis Cluster operations:\n\n1.  To create a new cluster ADDSLOTS is used in order to initially setup master nodes splitting the available hash slots among them.\n2.  In order to fix a broken cluster where certain slots are unassigned.\n\n## Information about slots propagation and warnings\n\nNote that once a node assigns a set of slots to itself, it will start propagating this information in heartbeat packet headers. However the other nodes will accept the information only if they have the slot as not already bound with another node, or if the configuration epoch of the node advertising the new hash slot, is greater than the node currently listed in the table.\n\nThis means that this command should be used with care only by applications orchestrating Redis Cluster, like `redis-cli`, and the command if used out of the right context can leave the cluster in a wrong state or cause data loss.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was successful. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-addslots/](https://redis.io/commands/cluster-addslots/)"
- name: cluster addslotsrange
  id: cluster-addslotsrange/index
  summary: 'Time complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments'
  description: "# CLUSTER\n\n    CLUSTER ADDSLOTSRANGE\n\nSyntax\n\n``` command-syntax\nCLUSTER ADDSLOTSRANGE start-slot end-slot [start-slot end-slot ...]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the total number of the slots between the start slot and end slot arguments.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `CLUSTER ADDSLOTSRANGE` is similar to the [`CLUSTER ADDSLOTS`](../cluster-addslots) command in that they both assign hash slots to nodes.\n\nThe difference between the two commands is that `ADDSLOTS` takes a list of slots to assign to the node, while `ADDSLOTSRANGE` takes a list of slot ranges (specified by start and end slots) to assign to the node.\n\n## Example\n\nTo assign slots 1 2 3 4 5 to the node, the `ADDSLOTS` command is:\n\n    > CLUSTER ADDSLOTS 1 2 3 4 5\n    OK\n\nThe same operation can be completed with the following `ADDSLOTSRANGE` command:\n\n    > CLUSTER ADDSLOTSRANGE 1 5\n    OK\n\n## Usage in Redis Cluster\n\nThis command only works in cluster mode and is useful in the following Redis Cluster operations:\n\n1.  To create a new cluster ADDSLOTSRANGE is used in order to initially setup master nodes splitting the available hash slots among them.\n2.  In order to fix a broken cluster where certain slots are unassigned.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was successful. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-addslotsrange/](https://redis.io/commands/cluster-addslotsrange/)"
- name: cluster bumpepoch
  id: cluster-bumpepoch/index
  summary: Advances the cluster config epoch
  description: "# CLUSTER\n\n    CLUSTER BUMPEPOCH\n\nSyntax\n\n``` command-syntax\nCLUSTER BUMPEPOCH\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nAdvances the cluster config epoch.\n\nThe `CLUSTER BUMPEPOCH` command triggers an increment to the cluster's config epoch from the connected node. The epoch will be incremented if the node's config epoch is zero, or if it is less than the cluster's greatest epoch.\n\n**Note:** config epoch management is performed internally by the cluster, and relies on obtaining a consensus of nodes. The `CLUSTER BUMPEPOCH` attempts to increment the config epoch **WITHOUT** getting the consensus, so using it may violate the \"last failover wins\" rule. Use it with caution.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `BUMPED` if the epoch was incremented, or `STILL` if the node already has the greatest config epoch in the cluster.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-bumpepoch/](https://redis.io/commands/cluster-bumpepoch/)"
- name: cluster count failure reports
  id: cluster-count-failure-reports/index
  summary: The command returns the number of failure reports for the specified node
  description: "# CLUSTER\n\n    CLUSTER COUNT-FAILURE-REPORTS\n\nSyntax\n\n``` command-syntax\nCLUSTER COUNT-FAILURE-REPORTS node-id\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the number of failure reports\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command returns the number of *failure reports* for the specified node. Failure reports are the way Redis Cluster uses in order to promote a `PFAIL` state, that means a node is not reachable, to a `FAIL` state, that means that the majority of masters in the cluster agreed within a window of time that the node is not reachable.\n\nA few more details:\n\n- A node flags another node with `PFAIL` when the node is not reachable for a time greater than the configured *node timeout*, which is a fundamental configuration parameter of a Redis Cluster.\n- Nodes in `PFAIL` state are provided in gossip sections of heartbeat packets.\n- Every time a node processes gossip packets from other nodes, it creates (and refreshes the TTL if needed) **failure reports**, remembering that a given node said another given node is in `PFAIL` condition.\n- Each failure report has a time to live of two times the *node timeout* time.\n- If at a given time a node has another node flagged with `PFAIL`, and at the same time collected the majority of other master nodes *failure reports* about this node (including itself if it is a master), then it elevates the failure state of the node from `PFAIL` to `FAIL`, and broadcasts a message forcing all the nodes that can be reached to flag the node as `FAIL`.\n\nThis command returns the number of failure reports for the current node which are currently not expired (so received within two times the *node timeout* time). The count does not include what the node we are asking this count believes about the node ID we pass as argument, the count *only* includes the failure reports the node received from other nodes.\n\nThis command is mainly useful for debugging, when the failure detector of Redis Cluster is not operating as we believe it should.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of active failure reports for the node.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-count-failure-reports/](https://redis.io/commands/cluster-count-failure-reports/)"
- name: cluster countkeysinslot
  id: cluster-countkeysinslot/index
  summary: Returns the number of keys in the specified Redis Cluster hash slot
  description: "# CLUSTER\n\n    CLUSTER COUNTKEYSINSLOT\n\nSyntax\n\n``` command-syntax\nCLUSTER COUNTKEYSINSLOT slot\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\nReturns the number of keys in the specified Redis Cluster hash slot. The command only queries the local data set, so contacting a node that is not serving the specified hash slot will always result in a count of zero being returned.\n\n```\n> CLUSTER COUNTKEYSINSLOT 7000\n(integer) 50341\n```\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of keys in the specified hash slot, or an error if the hash slot is invalid.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-countkeysinslot/](https://redis.io/commands/cluster-countkeysinslot/)"
- name: cluster delslots
  id: cluster-delslots/index
  summary: In Redis Cluster, each node keeps track of which master is serving a particular hash slot
  description: "# CLUSTER\n\n    CLUSTER DELSLOTS\n\nSyntax\n\n``` command-syntax\nCLUSTER DELSLOTS slot [slot ...]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the total number of hash slot arguments\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nIn Redis Cluster, each node keeps track of which master is serving a particular hash slot.\n\nThe `CLUSTER DELSLOTS` command asks a particular Redis Cluster node to forget which master is serving the hash slots specified as arguments.\n\nIn the context of a node that has received a `CLUSTER DELSLOTS` command and has consequently removed the associations for the passed hash slots, we say those hash slots are *unbound*. Note that the existence of unbound hash slots occurs naturally when a node has not been configured to handle them (something that can be done with the [`CLUSTER ADDSLOTS`](../cluster-addslots) command) and if it has not received any information about who owns those hash slots (something that it can learn from heartbeat or update messages).\n\nIf a node with unbound hash slots receives a heartbeat packet from another node that claims to be the owner of some of those hash slots, the association is established instantly. Moreover, if a heartbeat or update message is received with a configuration epoch greater than the node's own, the association is re-established.\n\nHowever, note that:\n\n1.  The command only works if all the specified slots are already associated with some node.\n2.  The command fails if the same slot is specified multiple times.\n3.  As a side effect of the command execution, the node may go into *down* state because not all hash slots are covered.\n\n## Example\n\nThe following command removes the association for slots 5000 and 5001 from the node receiving the command:\n\n    > CLUSTER DELSLOTS 5000 5001\n    OK\n\n## Usage in Redis Cluster\n\nThis command only works in cluster mode and may be useful for debugging and in order to manually orchestrate a cluster configuration when a new cluster is created. It is currently not used by `redis-cli`, and mainly exists for API completeness.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was successful. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-delslots/](https://redis.io/commands/cluster-delslots/)"
- name: cluster delslotsrange
  id: cluster-delslotsrange/index
  summary: 'Time complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments'
  description: "# CLUSTER\n\n    CLUSTER DELSLOTSRANGE\n\nSyntax\n\n``` command-syntax\nCLUSTER DELSLOTSRANGE start-slot end-slot [start-slot end-slot ...]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the total number of the slots between the start slot and end slot arguments.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `CLUSTER DELSLOTSRANGE` command is similar to the [`CLUSTER DELSLOTS`](../cluster-delslots) command in that they both remove hash slots from the node. The difference is that [`CLUSTER DELSLOTS`](../cluster-delslots) takes a list of hash slots to remove from the node, while `CLUSTER DELSLOTSRANGE` takes a list of slot ranges (specified by start and end slots) to remove from the node.\n\n## Example\n\nTo remove slots 1 2 3 4 5 from the node, the [`CLUSTER DELSLOTS`](../cluster-delslots) command is:\n\n    > CLUSTER DELSLOTS 1 2 3 4 5\n    OK\n\nThe same operation can be completed with the following `CLUSTER DELSLOTSRANGE` command:\n\n    > CLUSTER DELSLOTSRANGE 1 5\n    OK\n\nHowever, note that:\n\n1.  The command only works if all the specified slots are already associated with the node.\n2.  The command fails if the same slot is specified multiple times.\n3.  As a side effect of the command execution, the node may go into *down* state because not all hash slots are covered.\n\n## Usage in Redis Cluster\n\nThis command only works in cluster mode and may be useful for debugging and in order to manually orchestrate a cluster configuration when a new cluster is created. It is currently not used by `redis-cli`, and mainly exists for API completeness.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was successful. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-delslotsrange/](https://redis.io/commands/cluster-delslotsrange/)"
- name: cluster failover
  id: cluster-failover/index
  summary: This command, that can only be sent to a Redis Cluster replica node, forces the replica to start a manual failover of its master instance
  description: "# CLUSTER\n\n    CLUSTER FAILOVER\n\nSyntax\n\n``` command-syntax\nCLUSTER FAILOVER [FORCE | TAKEOVER]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThis command, that can only be sent to a Redis Cluster replica node, forces the replica to start a manual failover of its master instance.\n\nA manual failover is a special kind of failover that is usually executed when there are no actual failures, but we wish to swap the current master with one of its replicas (which is the node we send the command to), in a safe way, without any window for data loss. It works in the following way:\n\n1.  The replica tells the master to stop processing queries from clients.\n2.  The master replies to the replica with the current *replication offset*.\n3.  The replica waits for the replication offset to match on its side, to make sure it processed all the data from the master before it continues.\n4.  The replica starts a failover, obtains a new configuration epoch from the majority of the masters, and broadcasts the new configuration.\n5.  The old master receives the configuration update: unblocks its clients and starts replying with redirection messages so that they'll continue the chat with the new master.\n\nThis way clients are moved away from the old master to the new master atomically and only when the replica that is turning into the new master has processed all of the replication stream from the old master.\n\n## FORCE option: manual failover when the master is down\n\nThe command behavior can be modified by two options: **FORCE** and **TAKEOVER**.\n\nIf the **FORCE** option is given, the replica does not perform any handshake with the master, that may be not reachable, but instead just starts a failover ASAP starting from point 4. This is useful when we want to start a manual failover while the master is no longer reachable.\n\nHowever using **FORCE** we still need the majority of masters to be available in order to authorize the failover and generate a new configuration epoch for the replica that is going to become master.\n\n## TAKEOVER option: manual failover without cluster consensus\n\nThere are situations where this is not enough, and we want a replica to failover without any agreement with the rest of the cluster. A real world use case for this is to mass promote replicas in a different data center to masters in order to perform a data center switch, while all the masters are down or partitioned away.\n\nThe **TAKEOVER** option implies everything **FORCE** implies, but also does not uses any cluster authorization in order to failover. A replica receiving `CLUSTER FAILOVER TAKEOVER` will instead:\n\n1.  Generate a new `configEpoch` unilaterally, just taking the current greatest epoch available and incrementing it if its local configuration epoch is not already the greatest.\n2.  Assign itself all the hash slots of its master, and propagate the new configuration to every node which is reachable ASAP, and eventually to every other node.\n\nNote that **TAKEOVER violates the last-failover-wins principle** of Redis Cluster, since the configuration epoch generated by the replica violates the normal generation of configuration epochs in several ways:\n\n1.  There is no guarantee that it is actually the higher configuration epoch, since, for example, we can use the **TAKEOVER** option within a minority, nor any message exchange is performed to generate the new configuration epoch.\n2.  If we generate a configuration epoch which happens to collide with another instance, eventually our configuration epoch, or the one of another instance with our same epoch, will be moved away using the *configuration epoch collision resolution algorithm*.\n\nBecause of this the **TAKEOVER** option should be used with care.\n\n## Implementation details and notes\n\n- `CLUSTER FAILOVER`, unless the **TAKEOVER** option is specified, does not execute a failover synchronously. It only *schedules* a manual failover, bypassing the failure detection stage.\n- An `OK` reply is no guarantee that the failover will succeed.\n- A replica can only be promoted to a master if it is known as a replica by a majority of the masters in the cluster. If the replica is a new node that has just been added to the cluster (for example after upgrading it), it may not yet be known to all the masters in the cluster. To check that the masters are aware of a new replica, you can send [`CLUSTER NODES`](../cluster-nodes) or [`CLUSTER REPLICAS`](../cluster-replicas) to each of the master nodes and check that it appears as a replica, before sending `CLUSTER FAILOVER` to the replica.\n- To check that the failover has actually happened you can use [`ROLE`](../role), `INFO REPLICATION` (which indicates \"role:master\" after successful failover), or [`CLUSTER NODES`](../cluster-nodes) to verify that the state of the cluster has changed sometime after the command was sent.\n- To check if the failover has failed, check the replica's log for \"Manual failover timed out\", which is logged if the replica has given up after a few seconds.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if we are talking with a node which is already a master.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-failover/](https://redis.io/commands/cluster-failover/)"
- name: cluster flushslots
  id: cluster-flushslots/index
  summary: Deletes all slots from a node
  description: "# CLUSTER\n\n    CLUSTER FLUSHSLOTS\n\nSyntax\n\n``` command-syntax\nCLUSTER FLUSHSLOTS\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nDeletes all slots from a node.\n\nThe `CLUSTER FLUSHSLOTS` deletes all information about slots from the connected node. It can only be called when the database is empty.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK`\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-flushslots/](https://redis.io/commands/cluster-flushslots/)"
- name: cluster forget
  id: cluster-forget/index
  summary: The command is used in order to remove a node, specified via its node ID, from the set of known nodes of the Redis Cluster node receiving the command
  description: "# CLUSTER\n\n    CLUSTER FORGET\n\nSyntax\n\n``` command-syntax\nCLUSTER FORGET node-id\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command is used in order to remove a node, specified via its node ID, from the set of *known nodes* of the Redis Cluster node receiving the command. In other words the specified node is removed from the *nodes table* of the node receiving the command.\n\nBecause when a given node is part of the cluster, all the other nodes participating in the cluster knows about it, in order for a node to be completely removed from a cluster, the `CLUSTER FORGET` command must be sent to all the remaining nodes, regardless of the fact they are masters or replicas.\n\nHowever the command cannot simply drop the node from the internal node table of the node receiving the command, it also implements a ban-list, not allowing the same node to be added again as a side effect of processing the *gossip section* of the heartbeat packets received from other nodes.\n\n## Details on why the ban-list is needed\n\nIn the following example we'll show why the command must not just remove a given node from the nodes table, but also prevent it for being re-inserted again for some time.\n\nLet's assume we have four nodes, A, B, C and D. In order to end with just a three nodes cluster A, B, C we may follow these steps:\n\n1.  Reshard all the hash slots from D to nodes A, B, C.\n2.  D is now empty, but still listed in the nodes table of A, B and C.\n3.  We contact A, and send `CLUSTER FORGET D`.\n4.  B sends node A a heartbeat packet, where node D is listed.\n5.  A does no longer known node D (see step 3), so it starts a handshake with D.\n6.  D ends re-added in the nodes table of A.\n\nAs you can see in this way removing a node is fragile, we need to send `CLUSTER FORGET` commands to all the nodes ASAP hoping there are no gossip sections processing in the meantime. Because of this problem the command implements a ban-list with an expire time for each entry.\n\nSo what the command really does is:\n\n1.  The specified node gets removed from the nodes table.\n2.  The node ID of the removed node gets added to the ban-list, for 1 minute.\n3.  The node will skip all the node IDs listed in the ban-list when processing gossip sections received in heartbeat packets from other nodes.\n\nThis way we have a 60 second window to inform all the nodes in the cluster that we want to remove a node.\n\n## Special conditions not allowing the command execution\n\nThe command does not succeed and returns an error in the following cases:\n\n1.  The specified node ID is not found in the nodes table.\n2.  The node receiving the command is a replica, and the specified node ID identifies its current master.\n3.  The node ID identifies the same node we are sending the command to.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was executed successfully, otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-forget/](https://redis.io/commands/cluster-forget/)"
- name: cluster getkeysinslot
  id: cluster-getkeysinslot/index
  summary: The command returns an array of keys names stored in the contacted node and hashing to the specified hash slot
  description: "# CLUSTER\n\n    CLUSTER GETKEYSINSLOT\n\nSyntax\n\n``` command-syntax\nCLUSTER GETKEYSINSLOT slot count\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the number of requested keys\n\nACL categories:  \n`@slow`,\n\nThe command returns an array of keys names stored in the contacted node and hashing to the specified hash slot. The maximum number of keys to return is specified via the `count` argument, so that it is possible for the user of this API to batch-processing keys.\n\nThe main usage of this command is during rehashing of cluster slots from one node to another. The way the rehashing is performed is exposed in the Redis Cluster specification, or in a more simple to digest form, as an appendix of the [`CLUSTER SETSLOT`](../cluster-setslot) command documentation.\n\n```\n> CLUSTER GETKEYSINSLOT 7000 3\n1) \"key_39015\"\n2) \"key_89793\"\n3) \"key_92937\"\n```\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): From 0 to *count* key names in a Redis array reply.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-getkeysinslot/](https://redis.io/commands/cluster-getkeysinslot/)"
- name: cluster info
  id: cluster-info/index
  summary: CLUSTER INFO provides INFO style information about Redis Cluster vital parameters
  description: "# CLUSTER\n\n    CLUSTER INFO\n\nSyntax\n\n``` command-syntax\nCLUSTER INFO\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\n`CLUSTER INFO` provides [`INFO`](../info) style information about Redis Cluster vital parameters. The following fields are always present in the reply:\n\n```\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:2\ncluster_stats_messages_sent:1483972\ncluster_stats_messages_received:1483968\ntotal_cluster_links_buffer_limit_exceeded:0\n```\n\n- `cluster_state`: State is `ok` if the node is able to receive queries. `fail` if there is at least one hash slot which is unbound (no node associated), in error state (node serving it is flagged with FAIL flag), or if the majority of masters can't be reached by this node.\n- `cluster_slots_assigned`: Number of slots which are associated to some node (not unbound). This number should be 16384 for the node to work properly, which means that each hash slot should be mapped to a node.\n- `cluster_slots_ok`: Number of hash slots mapping to a node not in `FAIL` or `PFAIL` state.\n- `cluster_slots_pfail`: Number of hash slots mapping to a node in `PFAIL` state. Note that those hash slots still work correctly, as long as the `PFAIL` state is not promoted to `FAIL` by the failure detection algorithm. `PFAIL` only means that we are currently not able to talk with the node, but may be just a transient error.\n- `cluster_slots_fail`: Number of hash slots mapping to a node in `FAIL` state. If this number is not zero the node is not able to serve queries unless `cluster-require-full-coverage` is set to `no` in the configuration.\n- `cluster_known_nodes`: The total number of known nodes in the cluster, including nodes in `HANDSHAKE` state that may not currently be proper members of the cluster.\n- `cluster_size`: The number of master nodes serving at least one hash slot in the cluster.\n- `cluster_current_epoch`: The local `Current Epoch` variable. This is used in order to create unique increasing version numbers during fail overs.\n- `cluster_my_epoch`: The `Config Epoch` of the node we are talking with. This is the current configuration version assigned to this node.\n- `cluster_stats_messages_sent`: Number of messages sent via the cluster node-to-node binary bus.\n- `cluster_stats_messages_received`: Number of messages received via the cluster node-to-node binary bus.\n- `total_cluster_links_buffer_limit_exceeded`: Accumulated count of cluster links freed due to exceeding the `cluster-link-sendbuf-limit` configuration.\n\nThe following message-related fields may be included in the reply if the value is not 0: Each message type includes statistics on the number of messages sent and received. Here are the explanation of these fields:\n\n- `cluster_stats_messages_ping_sent` and `cluster_stats_messages_ping_received`: Cluster bus PING (not to be confused with the client command [`PING`](../ping)).\n- `cluster_stats_messages_pong_sent` and `cluster_stats_messages_pong_received`: PONG (reply to PING).\n- `cluster_stats_messages_meet_sent` and `cluster_stats_messages_meet_received`: Handshake message sent to a new node, either through gossip or [`CLUSTER MEET`](../cluster-meet).\n- `cluster_stats_messages_fail_sent` and `cluster_stats_messages_fail_received`: Mark node xxx as failing.\n- `cluster_stats_messages_publish_sent` and `cluster_stats_messages_publish_received`: Pub/Sub Publish propagation, see [Pubsub](https://redis.io/topics/pubsub#pubsub).\n- `cluster_stats_messages_auth-req_sent` and `cluster_stats_messages_auth-req_received`: Replica initiated leader election to replace its master.\n- `cluster_stats_messages_auth-ack_sent` and `cluster_stats_messages_auth-ack_received`: Message indicating a vote during leader election.\n- `cluster_stats_messages_update_sent` and `cluster_stats_messages_update_received`: Another node slots configuration.\n- `cluster_stats_messages_mfstart_sent` and `cluster_stats_messages_mfstart_received`: Pause clients for manual failover.\n- `cluster_stats_messages_module_sent` and `cluster_stats_messages_module_received`: Module cluster API message.\n- `cluster_stats_messages_publishshard_sent` and `cluster_stats_messages_publishshard_received`: Pub/Sub Publish shard propagation, see [Sharded Pubsub](https://redis.io/topics/pubsub#sharded-pubsub).\n\nMore information about the Current Epoch and Config Epoch variables are available in the [Redis Cluster specification document](https://redis.io/topics/cluster-spec#cluster-current-epoch).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): A map between named fields and values in the form of `<field>:<value>` lines separated by newlines composed by the two bytes `CRLF`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-info/](https://redis.io/commands/cluster-info/)"
- name: cluster keyslot
  id: cluster-keyslot/index
  summary: Returns an integer identifying the hash slot the specified key hashes to
  description: "# CLUSTER\n\n    CLUSTER KEYSLOT\n\nSyntax\n\n``` command-syntax\nCLUSTER KEYSLOT key\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the number of bytes in the key\n\nACL categories:  \n`@slow`,\n\nReturns an integer identifying the hash slot the specified key hashes to. This command is mainly useful for debugging and testing, since it exposes via an API the underlying Redis implementation of the hashing algorithm. Example use cases for this command:\n\n1.  Client libraries may use Redis in order to test their own hashing algorithm, generating random keys and hashing them with both their local implementation and using Redis `CLUSTER KEYSLOT` command, then checking if the result is the same.\n2.  Humans may use this command in order to check what is the hash slot, and then the associated Redis Cluster node, responsible for a given key.\n\n## Example\n\n```\n> CLUSTER KEYSLOT somekey\n(integer) 11058\n> CLUSTER KEYSLOT foo{hash_tag}\n(integer) 2515\n> CLUSTER KEYSLOT bar{hash_tag}\n(integer) 2515\n```\n\nNote that the command implements the full hashing algorithm, including support for **hash tags**, that is the special property of Redis Cluster key hashing algorithm, of hashing just what is between `{` and `}` if such a pattern is found inside the key name, in order to force multiple keys to be handled by the same node.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The hash slot number.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-keyslot/](https://redis.io/commands/cluster-keyslot/)"
- name: cluster links
  id: cluster-links/index
  summary: 'Each node in a Redis Cluster maintains a pair of long-lived TCP link with each peer in the cluster: One for sending outbound messages towards the peer and one for receiving inbound messages from the peer'
  description: "# CLUSTER\n\n    CLUSTER LINKS\n\nSyntax\n\n``` command-syntax\nCLUSTER LINKS\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the total number of Cluster nodes\n\nACL categories:  \n`@slow`,\n\nEach node in a Redis Cluster maintains a pair of long-lived TCP link with each peer in the cluster: One for sending outbound messages towards the peer and one for receiving inbound messages from the peer.\n\n`CLUSTER LINKS` outputs information of all such peer links as an array, where each array element is a map that contains attributes and their values for an individual link.\n\n## Examples\n\nThe following is an example output:\n\n```\n> CLUSTER LINKS\n1)  1) \"direction\"\n    2) \"to\"\n    3) \"node\"\n    4) \"8149d745fa551e40764fecaf7cab9dbdf6b659ae\"\n    5) \"create-time\"\n    6) (integer) 1639442739375\n    7) \"events\"\n    8) \"rw\"\n    9) \"send-buffer-allocated\"\n   10) (integer) 4512\n   11) \"send-buffer-used\"\n   12) (integer) 0\n2)  1) \"direction\"\n    2) \"from\"\n    3) \"node\"\n    4) \"8149d745fa551e40764fecaf7cab9dbdf6b659ae\"\n    5) \"create-time\"\n    6) (integer) 1639442739411\n    7) \"events\"\n    8) \"r\"\n    9) \"send-buffer-allocated\"\n   10) (integer) 0\n   11) \"send-buffer-used\"\n   12) (integer) 0\n```\n\nEach map is composed of the following attributes of the corresponding cluster link and their values:\n\n1.  `direction`: This link is established by the local node `to` the peer, or accepted by the local node `from` the peer.\n2.  `node`: The node id of the peer.\n3.  `create-time`: Creation time of the link. (In the case of a `to` link, this is the time when the TCP link is created by the local node, not the time when it is actually established.)\n4.  `events`: Events currently registered for the link. `r` means readable event, `w` means writable event.\n5.  `send-buffer-allocated`: Allocated size of the link's send buffer, which is used to buffer outgoing messages toward the peer.\n6.  `send-buffer-used`: Size of the portion of the link's send buffer that is currently holding data(messages).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): An array of maps where each map contains various attributes and their values of a cluster link.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-links/](https://redis.io/commands/cluster-links/)"
- name: cluster meet
  id: cluster-meet/index
  summary: CLUSTER MEET is used in order to connect different Redis nodes with cluster support enabled, into a working cluster
  description: "# CLUSTER\n\n    CLUSTER MEET\n\nSyntax\n\n``` command-syntax\nCLUSTER MEET ip port [cluster-bus-port]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\n`CLUSTER MEET` is used in order to connect different Redis nodes with cluster support enabled, into a working cluster.\n\nThe basic idea is that nodes by default don't trust each other, and are considered unknown, so that it is unlikely that different cluster nodes will mix into a single one because of system administration errors or network addresses modifications.\n\nSo in order for a given node to accept another one into the list of nodes composing a Redis Cluster, there are only two ways:\n\n1.  The system administrator sends a `CLUSTER MEET` command to force a node to meet another one.\n2.  An already known node sends a list of nodes in the gossip section that we are not aware of. If the receiving node trusts the sending node as a known node, it will process the gossip section and send a handshake to the nodes that are still not known.\n\nNote that Redis Cluster needs to form a full mesh (each node is connected with each other node), but in order to create a cluster, there is no need to send all the `CLUSTER MEET` commands needed to form the full mesh. What matter is to send enough `CLUSTER MEET` messages so that each node can reach each other node through a *chain of known nodes*. Thanks to the exchange of gossip information in heartbeat packets, the missing links will be created.\n\nSo, if we link node A with node B via `CLUSTER MEET`, and B with C, A and C will find their ways to handshake and create a link.\n\nAnother example: if we imagine a cluster formed of the following four nodes called A, B, C and D, we may send just the following set of commands to A:\n\n1.  `CLUSTER MEET B-ip B-port`\n2.  `CLUSTER MEET C-ip C-port`\n3.  `CLUSTER MEET D-ip D-port`\n\nAs a side effect of `A` knowing and being known by all the other nodes, it will send gossip sections in the heartbeat packets that will allow each other node to create a link with each other one, forming a full mesh in a matter of seconds, even if the cluster is large.\n\nMoreover `CLUSTER MEET` does not need to be reciprocal. If I send the command to A in order to join B, I don't need to also send it to B in order to join A.\n\nIf the optional `cluster_bus_port` argument is not provided, the default of port + 10000 will be used.\n\n## Implementation details: MEET and PING packets\n\nWhen a given node receives a `CLUSTER MEET` message, the node specified in the command still does not know the node we sent the command to. So in order for the node to force the receiver to accept it as a trusted node, it sends a `MEET` packet instead of a [`PING`](../ping) packet. The two packets have exactly the same format, but the former forces the receiver to acknowledge the node as trusted.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was successful. If the address or port specified are invalid an error is returned.\n\n## History\n\n- Starting with Redis version 4.0.0: Added the optional `cluster_bus_port` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-meet/](https://redis.io/commands/cluster-meet/)"
- name: cluster myid
  id: cluster-myid/index
  summary: Returns the node's id
  description: "# CLUSTER\n\n    CLUSTER MYID\n\nSyntax\n\n``` command-syntax\nCLUSTER MYID\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\nReturns the node's id.\n\nThe `CLUSTER MYID` command returns the unique, auto-generated identifier that is associated with the connected cluster node.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): The node id.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-myid/](https://redis.io/commands/cluster-myid/)"
- name: cluster nodes
  id: cluster-nodes/index
  summary: Each node in a Redis Cluster has its view of the current cluster configuration, given by the set of known nodes, the state of the connection we have with such nodes, their flags, properties and assigned slots, and so forth
  description: "# CLUSTER\n\n    CLUSTER NODES\n\nSyntax\n\n``` command-syntax\nCLUSTER NODES\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the total number of Cluster nodes\n\nACL categories:  \n`@slow`,\n\nEach node in a Redis Cluster has its view of the current cluster configuration, given by the set of known nodes, the state of the connection we have with such nodes, their flags, properties and assigned slots, and so forth.\n\n`CLUSTER NODES` provides all this information, that is, the current cluster configuration of the node we are contacting, in a serialization format which happens to be exactly the same as the one used by Redis Cluster itself in order to store on disk the cluster state (however the on disk cluster state has a few additional info appended at the end).\n\nNote that normally clients willing to fetch the map between Cluster hash slots and node addresses should use [`CLUSTER SLOTS`](../cluster-slots) instead. `CLUSTER NODES`, that provides more information, should be used for administrative tasks, debugging, and configuration inspections. It is also used by `redis-cli` in order to manage a cluster.\n\n## Serialization format\n\nThe output of the command is just a space-separated CSV string, where each line represents a node in the cluster. Starting from 7.2.0, the output of the command always contains a new auxiliary field called shard-id. The following is an example of output on Redis 7.2.0.\n\n```\n07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004@31004,,shard-id=69bc080733d1355567173199cff4a6a039a2f024 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected\n67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002@31002,,shard-id=114f6674a35b84949fe567f5dfd41415ee776261 master - 0 1426238316232 2 connected 5461-10922\n292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003@31003,,shard-id=fdb36c73e72dd027bc19811b7c219ef6e55c550e master - 0 1426238318243 3 connected 10923-16383\n6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005@31005,,shard-id=114f6674a35b84949fe567f5dfd41415ee776261 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected\n824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006@31006,,shard-id=fdb36c73e72dd027bc19811b7c219ef6e55c550e slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected\ne7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001@31001,,shard-id=69bc080733d1355567173199cff4a6a039a2f024 myself,master - 0 0 1 connected 0-5460\n```\n\nEach line is composed of the following fields:\n\n```\n<id> <ip:port@cport[,hostname[,auxiliary_field=value]*]> <flags> <master> <ping-sent> <pong-recv> <config-epoch> <link-state> <slot> <slot> ... <slot>\n```\n\nThe meaning of each filed is the following:\n\n1.  `id`: The node ID, a 40-character globally unique string generated when a node is created and never changed again (unless `CLUSTER RESET HARD` is used).\n2.  `ip:port@cport`: The node address that clients should contact to run queries.\n3.  `hostname`: A human readable string that can be configured via the `cluster-annouce-hostname` setting. The max length of the string is 256 characters, excluding the null terminator. The name can contain ASCII alphanumeric characters, '-', and '.' only.\n4.  `[,auxiliary_field=value]*`: A list of comma-separated key-value pairs that represent various node properties, such as `shard-id`. There is no intrinsic order among auxiliary fields. The auxiliary fields can appear at different position in the list from release to release. Both the key name and value can contain ASCII alphanumeric characters and the characters in `!#$%&()*+-.:;<>?@[]^_{|}~` only. Auxiliary fields are explained in detail in the section below.\n5.  `flags`: A list of comma separated flags: `myself`, `master`, `slave`, `fail?`, `fail`, `handshake`, `noaddr`, `nofailover`, `noflags`. Flags are explained below.\n6.  `master`: If the node is a replica, and the primary is known, the primary node ID, otherwise the \"-\" character.\n7.  `ping-sent`: Unix time at which the currently active ping was sent, or zero if there are no pending pings, in milliseconds.\n8.  `pong-recv`: Unix time the last pong was received, in milliseconds.\n9.  `config-epoch`: The configuration epoch (or version) of the current node (or of the current primary if the node is a replica). Each time there is a failover, a new, unique, monotonically increasing configuration epoch is created. If multiple nodes claim to serve the same hash slots, the one with the higher configuration epoch wins.\n10. `link-state`: The state of the link used for the node-to-node cluster bus. Use this link to communicate with the node. Can be `connected` or `disconnected`.\n11. `slot`: A hash slot number or range. Starting from argument number 9, but there may be up to 16384 entries in total (limit never reached). This is the list of hash slots served by this node. If the entry is just a number, it is parsed as such. If it is a range, it is in the form `start-end`, and means that the node is responsible for all the hash slots from `start` to `end` including the start and end values.\n\nAuxiliary fields are:\n\n- `shard-id`: a 40-character globally unique string generated when a node is created. A node's shard id changes only when the node joins a different shard via `cluster replicate` and there the node's shard id is updated to its primary's.\n\nFlags are:\n\n- `myself`: The node you are contacting.\n- `master`: Node is a primary.\n- `slave`: Node is a replica.\n- `fail?`: Node is in `PFAIL` state. Not reachable for the node you are contacting, but still logically reachable (not in `FAIL` state).\n- `fail`: Node is in `FAIL` state. It was not reachable for multiple nodes that promoted the `PFAIL` state to `FAIL`.\n- `handshake`: Untrusted node, we are handshaking.\n- `noaddr`: No address known for this node.\n- `nofailover`: Replica will not try to failover.\n- `noflags`: No flags at all.\n\n## Notes on published config epochs\n\nReplicas broadcast their primary's config epochs (in order to get an `UPDATE` message if they are found to be stale), so the real config epoch of the replica (which is meaningless more or less, since they don't serve hash slots) can be only obtained checking the node flagged as `myself`, which is the entry of the node we are asking to generate `CLUSTER NODES` output. The other replicas epochs reflect what they publish in heartbeat packets, which is, the configuration epoch of the primaries they are currently replicating.\n\n## Special slot entries\n\nNormally hash slots associated to a given node are in one of the following formats, as already explained above:\n\n1.  Single number: 3894\n2.  Range: 3900-4000\n\nHowever node hash slots can be in a special state, used in order to communicate errors after a node restart (mismatch between the keys in the AOF/RDB file, and the node hash slots configuration), or when there is a resharding operation in progress. This two states are **importing** and **migrating**.\n\nThe meaning of the two states is explained in the Redis Specification, however the gist of the two states is the following:\n\n- **Importing** slots are yet not part of the nodes hash slot, there is a migration in progress. The node will accept queries about these slots only if the `ASK` command is used.\n- **Migrating** slots are assigned to the node, but are being migrated to some other node. The node will accept queries if all the keys in the command exist already, otherwise it will emit what is called an **ASK redirection**, to force new keys creation directly in the importing node.\n\nImporting and migrating slots are emitted in the `CLUSTER NODES` output as follows:\n\n- **Importing slot:** `[slot_number-<-importing_from_node_id]`\n- **Migrating slot:** `[slot_number->-migrating_to_node_id]`\n\nThe following are a few examples of importing and migrating slots:\n\n- `[93-<-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]`\n- `[1002-<-67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1]`\n- `[77->-e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca]`\n- `[16311->-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]`\n\nNote that the format does not have any space, so `CLUSTER NODES` output format is plain CSV with space as separator even when this special slots are emitted. However a complete parser for the format should be able to handle them.\n\nNote that:\n\n1.  Migration and importing slots are only added to the node flagged as `myself`. This information is local to a node, for its own slots.\n2.  Importing and migrating slots are provided as **additional info**. If the node has a given hash slot assigned, it will be also a plain number in the list of hash slots, so clients that don't have a clue about hash slots migrations can just skip this special fields.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): The serialized cluster configuration.\n\n**A note about the word slave used in this man page and command name**: Starting with Redis 5, if not for backward compatibility, the Redis project no longer uses the word slave. Unfortunately in this command the word slave is part of the protocol, so we'll be able to remove such occurrences only when this API will be naturally deprecated.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-nodes/](https://redis.io/commands/cluster-nodes/)"
- name: cluster replicas
  id: cluster-replicas/index
  summary: The command provides a list of replica nodes replicating from the specified master node
  description: "# CLUSTER\n\n    CLUSTER REPLICAS\n\nSyntax\n\n``` command-syntax\nCLUSTER REPLICAS node-id\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command provides a list of replica nodes replicating from the specified master node. The list is provided in the same format used by [`CLUSTER NODES`](../cluster-nodes) (please refer to its documentation for the specification of the format).\n\nThe command will fail if the specified node is not known or if it is not a master according to the node table of the node receiving the command.\n\nNote that if a replica is added, moved, or removed from a given master node, and we ask `CLUSTER REPLICAS` to a node that has not yet received the configuration update, it may show stale information. However eventually (in a matter of seconds if there are no network partitions) all the nodes will agree about the set of nodes associated with a given master.\n\n## Return\n\nThe command returns data in the same format as [`CLUSTER NODES`](../cluster-nodes).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-replicas/](https://redis.io/commands/cluster-replicas/)"
- name: cluster replicate
  id: cluster-replicate/index
  summary: The command reconfigures a node as a replica of the specified master
  description: "# CLUSTER\n\n    CLUSTER REPLICATE\n\nSyntax\n\n``` command-syntax\nCLUSTER REPLICATE node-id\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command reconfigures a node as a replica of the specified master. If the node receiving the command is an *empty master*, as a side effect of the command, the node role is changed from master to replica.\n\nOnce a node is turned into the replica of another master node, there is no need to inform the other cluster nodes about the change: heartbeat packets exchanged between nodes will propagate the new configuration automatically.\n\nA replica will always accept the command, assuming that:\n\n1.  The specified node ID exists in its nodes table.\n2.  The specified node ID does not identify the instance we are sending the command to.\n3.  The specified node ID is a master.\n\nIf the node receiving the command is not already a replica, but is a master, the command will only succeed, and the node will be converted into a replica, only if the following additional conditions are met:\n\n1.  The node is not serving any hash slots.\n2.  The node is empty, no keys are stored at all in the key space.\n\nIf the command succeeds the new replica will immediately try to contact its master in order to replicate from it.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was executed successfully, otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-replicate/](https://redis.io/commands/cluster-replicate/)"
- name: cluster reset
  id: cluster-reset/index
  summary: 'Time complexity: O(N) where N is the number of known nodes'
  description: "# CLUSTER\n\n    CLUSTER RESET\n\nSyntax\n\n``` command-syntax\nCLUSTER RESET [HARD | SOFT]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nReset a Redis Cluster node, in a more or less drastic way depending on the reset type, that can be **hard** or **soft**. Note that this command **does not work for masters if they hold one or more keys**, in that case to completely reset a master node keys must be removed first, e.g. by using [`FLUSHALL`](../flushall) first, and then `CLUSTER RESET`.\n\nEffects on the node:\n\n1.  All the other nodes in the cluster are forgotten.\n2.  All the assigned / open slots are reset, so the slots-to-nodes mapping is totally cleared.\n3.  If the node is a replica it is turned into an (empty) master. Its dataset is flushed, so at the end the node will be an empty master.\n4.  **Hard reset only**: a new Node ID is generated.\n5.  **Hard reset only**: `currentEpoch` and `configEpoch` vars are set to 0.\n6.  The new configuration is persisted on disk in the node cluster configuration file.\n\nThis command is mainly useful to re-provision a Redis Cluster node in order to be used in the context of a new, different cluster. The command is also extensively used by the Redis Cluster testing framework in order to reset the state of the cluster every time a new test unit is executed.\n\nIf no reset type is specified, the default is **soft**.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was successful. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-reset/](https://redis.io/commands/cluster-reset/)"
- name: cluster saveconfig
  id: cluster-saveconfig/index
  summary: Forces a node to save the nodes.conf configuration on disk
  description: "# CLUSTER\n\n    CLUSTER SAVECONFIG\n\nSyntax\n\n``` command-syntax\nCLUSTER SAVECONFIG\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nForces a node to save the `nodes.conf` configuration on disk. Before to return the command calls `fsync(2)` in order to make sure the configuration is flushed on the computer disk.\n\nThis command is mainly used in the event a `nodes.conf` node state file gets lost / deleted for some reason, and we want to generate it again from scratch. It can also be useful in case of mundane alterations of a node cluster configuration via the [`CLUSTER`](../cluster) command in order to ensure the new configuration is persisted on disk, however all the commands should normally be able to auto schedule to persist the configuration on disk when it is important to do so for the correctness of the system in the event of a restart.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` or an error if the operation fails.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-saveconfig/](https://redis.io/commands/cluster-saveconfig/)"
- name: cluster set config epoch
  id: cluster-set-config-epoch/index
  summary: This command sets a specific config epoch in a fresh node
  description: "# CLUSTER\n\n    CLUSTER SET-CONFIG-EPOCH\n\nSyntax\n\n``` command-syntax\nCLUSTER SET-CONFIG-EPOCH config-epoch\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThis command sets a specific *config epoch* in a fresh node. It only works when:\n\n1.  The nodes table of the node is empty.\n2.  The node current *config epoch* is zero.\n\nThese prerequisites are needed since usually, manually altering the configuration epoch of a node is unsafe, we want to be sure that the node with the higher configuration epoch value (that is the last that failed over) wins over other nodes in claiming the hash slots ownership.\n\nHowever there is an exception to this rule, and it is when a new cluster is created from scratch. Redis Cluster *config epoch collision resolution* algorithm can deal with new nodes all configured with the same configuration at startup, but this process is slow and should be the exception, only to make sure that whatever happens, two more nodes eventually always move away from the state of having the same configuration epoch.\n\nSo, using `CLUSTER SET-CONFIG-EPOCH`, when a new cluster is created, we can assign a different progressive configuration epoch to each node before joining the cluster together.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was executed successfully, otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-set-config-epoch/](https://redis.io/commands/cluster-set-config-epoch/)"
- name: cluster setslot
  id: cluster-setslot/index
  summary: CLUSTER SETSLOT is responsible of changing the state of a hash slot in the receiving node in different ways
  description: "# CLUSTER\n\n    CLUSTER SETSLOT\n\nSyntax\n\n``` command-syntax\nCLUSTER SETSLOT slot <IMPORTING node-id | MIGRATING node-id |\n  NODE node-id | STABLE>\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\n`CLUSTER SETSLOT` is responsible of changing the state of a hash slot in the receiving node in different ways. It can, depending on the subcommand used:\n\n1.  `MIGRATING` subcommand: Set a hash slot in *migrating* state.\n2.  `IMPORTING` subcommand: Set a hash slot in *importing* state.\n3.  `STABLE` subcommand: Clear any importing / migrating state from hash slot.\n4.  `NODE` subcommand: Bind the hash slot to a different node.\n\nThe command with its set of subcommands is useful in order to start and end cluster live resharding operations, which are accomplished by setting a hash slot in migrating state in the source node, and importing state in the destination node.\n\nEach subcommand is documented below. At the end you'll find a description of how live resharding is performed using this command and other related commands.\n\n## CLUSTER SETSLOT `<slot>` MIGRATING `<destination-node-id>`\n\nThis subcommand sets a slot to *migrating* state. In order to set a slot in this state, the node receiving the command must be the hash slot owner, otherwise an error is returned.\n\nWhen a slot is set in migrating state, the node changes behavior in the following way:\n\n1.  If a command is received about an existing key, the command is processed as usually.\n2.  If a command is received about a key that does not exists, an `ASK` redirection is emitted by the node, asking the client to retry only that specific query into `destination-node`. In this case the client should not update its hash slot to node mapping.\n3.  If the command contains multiple keys, in case none exist, the behavior is the same as point 2, if all exist, it is the same as point 1, however if only a partial number of keys exist, the command emits a `TRYAGAIN` error in order for the keys interested to finish being migrated to the target node, so that the multi keys command can be executed.\n\n## CLUSTER SETSLOT `<slot>` IMPORTING `<source-node-id>`\n\nThis subcommand is the reverse of `MIGRATING`, and prepares the destination node to import keys from the specified source node. The command only works if the node is not already owner of the specified hash slot.\n\nWhen a slot is set in importing state, the node changes behavior in the following way:\n\n1.  Commands about this hash slot are refused and a `MOVED` redirection is generated as usually, but in the case the command follows an [`ASKING`](../asking) command, in this case the command is executed.\n\nIn this way when a node in migrating state generates an `ASK` redirection, the client contacts the target node, sends [`ASKING`](../asking), and immediately after sends the command. This way commands about non-existing keys in the old node or keys already migrated to the target node are executed in the target node, so that:\n\n1.  New keys are always created in the target node. During a hash slot migration we'll have to move only old keys, not new ones.\n2.  Commands about keys already migrated are correctly processed in the context of the node which is the target of the migration, the new hash slot owner, in order to guarantee consistency.\n3.  Without [`ASKING`](../asking) the behavior is the same as usually. This guarantees that clients with a broken hash slots mapping will not write for error in the target node, creating a new version of a key that has yet to be migrated.\n\n## CLUSTER SETSLOT `<slot>` STABLE\n\nThis subcommand just clears migrating / importing state from the slot. It is mainly used to fix a cluster stuck in a wrong state by `redis-cli --cluster fix`. Normally the two states are cleared automatically at the end of the migration using the `SETSLOT ... NODE ...` subcommand as explained in the next section.\n\n## CLUSTER SETSLOT `<slot>` NODE `<node-id>`\n\nThe `NODE` subcommand is the one with the most complex semantics. It associates the hash slot with the specified node, however the command works only in specific situations and has different side effects depending on the slot state. The following is the set of pre-conditions and side effects of the command:\n\n1.  If the current hash slot owner is the node receiving the command, but for effect of the command the slot would be assigned to a different node, the command will return an error if there are still keys for that hash slot in the node receiving the command.\n2.  If the slot is in *migrating* state, the state gets cleared when the slot is assigned to another node.\n3.  If the slot was in *importing* state in the node receiving the command, and the command assigns the slot to this node (which happens in the target node at the end of the resharding of a hash slot from one node to another), the command has the following side effects: A) the *importing* state is cleared. B) If the node config epoch is not already the greatest of the cluster, it generates a new one and assigns the new config epoch to itself. This way its new hash slot ownership will win over any past configuration created by previous failovers or slot migrations.\n\nIt is important to note that step 3 is the only time when a Redis Cluster node will create a new config epoch without agreement from other nodes. This only happens when a manual configuration is operated. However it is impossible that this creates a non-transient setup where two nodes have the same config epoch, since Redis Cluster uses a config epoch collision resolution algorithm.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): All the subcommands return `OK` if the command was successful. Otherwise an error is returned.\n\n## Redis Cluster live resharding explained\n\nThe `CLUSTER SETSLOT` command is an important piece used by Redis Cluster in order to migrate all the keys contained in one hash slot from one node to another. This is how the migration is orchestrated, with the help of other commands as well. We'll call the node that has the current ownership of the hash slot the `source` node, and the node where we want to migrate the `destination` node.\n\n1.  Set the destination node slot to *importing* state using `CLUSTER SETSLOT <slot> IMPORTING <source-node-id>`.\n2.  Set the source node slot to *migrating* state using `CLUSTER SETSLOT <slot> MIGRATING <destination-node-id>`.\n3.  Get keys from the source node with [`CLUSTER GETKEYSINSLOT`](../cluster-getkeysinslot) command and move them into the destination node using the [`MIGRATE`](../migrate) command.\n4.  Send `CLUSTER SETSLOT <slot> NODE <destination-node-id>` to the destination node.\n5.  Send `CLUSTER SETSLOT <slot> NODE <destination-node-id>` to the source node.\n6.  Send `CLUSTER SETSLOT <slot> NODE <destination-node-id>` to the other master nodes (optional).\n\nNotes:\n\n- The order of step 1 and 2 is important. We want the destination node to be ready to accept `ASK` redirections when the source node is configured to redirect.\n- The order of step 4 and 5 is important. The destination node is responsible for propagating the change to the rest of the cluster. If the source node is informed before the destination node and the destination node crashes before it is set as new slot owner, the slot is left with no owner, even after a successful failover.\n- Step 6, sending `SETSLOT` to the nodes not involved in the resharding, is not technically necessary since the configuration will eventually propagate itself. However, it is a good idea to do so in order to stop nodes from pointing to the wrong node for the hash slot moved as soon as possible, resulting in less redirections to find the right node.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-setslot/](https://redis.io/commands/cluster-setslot/)"
- name: cluster shards
  id: cluster-shards/index
  summary: CLUSTER SHARDS returns details about the shards of the cluster
  description: "# CLUSTER\n\n    CLUSTER SHARDS\n\nSyntax\n\n``` command-syntax\nCLUSTER SHARDS\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the total number of cluster nodes\n\nACL categories:  \n`@slow`,\n\n`CLUSTER SHARDS` returns details about the shards of the cluster. A shard is defined as a collection of nodes that serve the same set of slots and that replicate from each other. A shard may only have a single master at a given time, but may have multiple or no replicas. It is possible for a shard to not be serving any slots while still having replicas.\n\nThis command replaces the [`CLUSTER SLOTS`](../cluster-slots) command, by providing a more efficient and extensible representation of the cluster.\n\nThe command is suitable to be used by Redis Cluster client libraries in order to understand the topology of the cluster. A client should issue this command on startup in order to retrieve the map associating cluster *hash slots* with actual node information. This map should be used to direct commands to the node that is likely serving the slot associated with a given command. In the event the command is sent to the wrong node, in that it received a '-MOVED' redirect, this command can then be used to update the topology of the cluster.\n\nThe command returns an array of shards, with each shard containing two fields, 'slots' and 'nodes'.\n\nThe 'slots' field is a list of slot ranges served by this shard, stored as pair of integers representing the inclusive start and end slots of the ranges. For example, if a node owns the slots 1, 2, 3, 5, 7, 8 and 9, the slots ranges would be stored as \\[1-3\\], \\[5-5\\], \\[7-9\\]. The slots field would therefore be represented by the following list of integers.\n\n```\n1) 1) \"slots\"\n   2) 1) (integer) 1\n      2) (integer) 3\n      3) (integer) 5\n      4) (integer) 5\n      5) (integer) 7\n      6) (integer) 9\n```\n\nThe 'nodes' field contains a list of all nodes within the shard. Each individual node is a map of attributes that describe the node. Some attributes are optional and more attributes may be added in the future. The current list of attributes:\n\n- id: The unique node id for this particular node.\n- endpoint: The preferred endpoint to reach the node, see below for more information about the possible values of this field.\n- ip: The IP address to send requests to for this node.\n- hostname (optional): The announced hostname to send requests to for this node.\n- port (optional): The TCP (non-TLS) port of the node. At least one of port or tls-port will be present.\n- tls-port (optional): The TLS port of the node. At least one of port or tls-port will be present.\n- role: The replication role of this node.\n- replication-offset: The replication offset of this node. This information can be used to send commands to the most up to date replicas.\n- health: Either `online`, `failed`, or `loading`. This information should be used to determine which nodes should be sent traffic. The `loading` health state should be used to know that a node is not currently eligible to serve traffic, but may be eligible in the future.\n\nThe endpoint, along with the port, defines the location that clients should use to send requests for a given slot. A NULL value for the endpoint indicates the node has an unknown endpoint and the client should connect to the same endpoint it used to send the `CLUSTER SHARDS` command but with the port returned from the command. This unknown endpoint configuration is useful when the Redis nodes are behind a load balancer that Redis doesn't know the endpoint of. Which endpoint is set is determined by the `cluster-preferred-endpoint-type` config.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): nested list of a map of hash ranges and shard nodes.\n\n## Examples\n\n```\n> CLUSTER SHARDS\n1) 1) \"slots\"\n   2) 1) (integer) 0\n      2) (integer) 5460\n   3) \"nodes\"\n   4) 1)  1) \"id\"\n          2) \"e10b7051d6bf2d5febd39a2be297bbaea6084111\"\n          3) \"port\"\n          4) (integer) 30001\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"master\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n      2)  1) \"id\"\n          2) \"1901f5962d865341e81c85f9f596b1e7160c35ce\"\n          3) \"port\"\n          4) (integer) 30006\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"replica\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n2) 1) \"slots\"\n   2) 1) (integer) 10923\n      2) (integer) 16383\n   3) \"nodes\"\n   4) 1)  1) \"id\"\n          2) \"fd20502fe1b32fc32c15b69b0a9537551f162f1f\"\n          3) \"port\"\n          4) (integer) 30003\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"master\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n      2)  1) \"id\"\n          2) \"6daa25c08025a0c7e4cc0d1ab255949ce6cee902\"\n          3) \"port\"\n          4) (integer) 30005\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"replica\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n3) 1) \"slots\"\n   2) 1) (integer) 5461\n      2) (integer) 10922\n   3) \"nodes\"\n   4) 1)  1) \"id\"\n          2) \"a4a3f445ead085eb3eb9ee7d8c644ec4481ec9be\"\n          3) \"port\"\n          4) (integer) 30002\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"master\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n      2)  1) \"id\"\n          2) \"da6d5847aa019e9b9d2a8aa24a75f856fd3456cc\"\n          3) \"port\"\n          4) (integer) 30004\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"replica\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-shards/](https://redis.io/commands/cluster-shards/)"
- name: cluster slaves
  id: cluster-slaves/index
  summary: As of Redis version 5.0.0, this command is regarded as deprecated
  description: "# CLUSTER\n\n    CLUSTER SLAVES (deprecated)\n\nAs of Redis version 5.0.0, this command is regarded as deprecated.\n\nIt can be replaced by [`CLUSTER REPLICAS`](../cluster-replicas) when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nCLUSTER SLAVES node-id\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\n**A note about the word slave used in this man page and command name**: starting with Redis version 5, if not for backward compatibility, the Redis project no longer uses the word slave. Please use the new command [`CLUSTER REPLICAS`](../cluster-replicas). The command `CLUSTER SLAVES` will continue to work for backward compatibility.\n\nThe command provides a list of replica nodes replicating from the specified master node. The list is provided in the same format used by [`CLUSTER NODES`](../cluster-nodes) (please refer to its documentation for the specification of the format).\n\nThe command will fail if the specified node is not known or if it is not a master according to the node table of the node receiving the command.\n\nNote that if a replica is added, moved, or removed from a given master node, and we ask `CLUSTER SLAVES` to a node that has not yet received the configuration update, it may show stale information. However eventually (in a matter of seconds if there are no network partitions) all the nodes will agree about the set of nodes associated with a given master.\n\n## Return\n\nThe command returns data in the same format as [`CLUSTER NODES`](../cluster-nodes).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-slaves/](https://redis.io/commands/cluster-slaves/)"
- name: cluster slots
  id: cluster-slots/index
  summary: As of Redis version 7.0.0, this command is regarded as deprecated
  description: "# CLUSTER\n\n    CLUSTER SLOTS (deprecated)\n\nAs of Redis version 7.0.0, this command is regarded as deprecated.\n\nIt can be replaced by [`CLUSTER SHARDS`](../cluster-shards) when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nCLUSTER SLOTS\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(N) where N is the total number of Cluster nodes\n\nACL categories:  \n`@slow`,\n\n`CLUSTER SLOTS` returns details about which cluster slots map to which Redis instances. The command is suitable to be used by Redis Cluster client libraries implementations in order to retrieve (or update when a redirection is received) the map associating cluster *hash slots* with actual nodes network information, so that when a command is received, it can be sent to what is likely the right instance for the keys specified in the command.\n\nThe networking information for each node is an array containing the following elements:\n\n- Preferred endpoint (Either an IP address, hostname, or NULL)\n- Port number\n- The node ID\n- A map of additional networking metadata\n\nThe preferred endpoint, along with the port, defines the location that clients should use to send requests for a given slot. A NULL value for the endpoint indicates the node has an unknown endpoint and the client should connect to the same endpoint it used to send the `CLUSTER SLOTS` command but with the port returned from the command. This unknown endpoint configuration is useful when the Redis nodes are behind a load balancer that Redis doesn't know the endpoint of. Which endpoint is set as preferred is determined by the `cluster-preferred-endpoint-type` config.\n\nAdditional networking metadata is provided as a map on the fourth argument for each node. The following networking metadata may be returned:\n\n- IP: When the preferred endpoint is not set to IP.\n- Hostname: When a node has an announced hostname but the primary endpoint is not set to hostname.\n\n## Nested Result Array\n\nEach nested result is:\n\n- Start slot range\n- End slot range\n- Master for slot range represented as nested networking information\n- First replica of master for slot range\n- Second replica\n- ...continues until all replicas for this master are returned.\n\nEach result includes all active replicas of the master instance for the listed slot range. Failed replicas are not returned.\n\nThe third nested reply is guaranteed to be the networking information of the master instance for the slot range. All networking information after the third nested reply are replicas of the master.\n\nIf a cluster instance has non-contiguous slots (e.g. 1-400,900,1800-6000) then master and replica networking information results will be duplicated for each top-level slot range reply.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): nested list of slot ranges with networking information.\n\n## Examples\n\n```\n> CLUSTER SLOTS\n1) 1) (integer) 0\n   2) (integer) 5460\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30001\n      3) \"09dbe9720cda62f7865eabc5fd8857c5d2678366\"\n      4) 1) hostname\n         2) \"host-1.redis.example.com\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30004\n      3) \"821d8ca00d7ccf931ed3ffc7e3db0599d2271abf\"\n      4) 1) hostname\n         2) \"host-2.redis.example.com\"\n2) 1) (integer) 5461\n   2) (integer) 10922\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30002\n      3) \"c9d93d9f2c0c524ff34cc11838c2003d8c29e013\"\n      4) 1) hostname\n         2) \"host-3.redis.example.com\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30005\n      3) \"faadb3eb99009de4ab72ad6b6ed87634c7ee410f\"\n      4) 1) hostname\n         2) \"host-4.redis.example.com\"\n3) 1) (integer) 10923\n   2) (integer) 16383\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30003\n      3) \"044ec91f325b7595e76dbcb18cc688b6a5b434a1\"\n      4) 1) hostname\n         2) \"host-5.redis.example.com\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30006\n      3) \"58e6e48d41228013e5d9c1c37c5060693925e97e\"\n      4) 1) hostname\n         2) \"host-6.redis.example.com\"\n```\n\n**Warning:** In future versions there could be more elements describing the node better. In general a client implementation should just rely on the fact that certain parameters are at fixed positions as specified, but more parameters may follow and should be ignored. Similarly a client library should try if possible to cope with the fact that older versions may just have the primary endpoint and port parameter.\n\n## Behavior change history\n\n- `>= 7.0.0`: Added support for hostnames and unknown endpoints in first field of node response.\n\n## History\n\n- Starting with Redis version 4.0.0: Added node IDs.\n- Starting with Redis version 7.0.0: Added additional networking metadata field.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cluster-slots/](https://redis.io/commands/cluster-slots/)"
- name: cms.incrby
  id: cms.incrby/index
  summary: Increases the count of item by increment
  description: "# CMS.INCRBY\n\n    CMS.INCRBY\n\nSyntax\n\n``` command-syntax\nCMS.INCRBY key item increment [item increment ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n) where n is the number of items\n\nIncreases the count of item by increment. Multiple items can be increased with one call.\n\n### Parameters:\n\n- **key**: The name of the sketch.\n- **item**: The item which counter is to be increased.\n- **increment**: Amount by which the item counter is to be increased.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) with an updated min-count of each of the items in the sketch.\n\nCount of each item after increment.\n\n## Examples\n\n```\nredis> CMS.INCRBY test foo 10 bar 42\n1) (integer) 10\n2) (integer) 42\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cms.incrby/](https://redis.io/commands/cms.incrby/)"
- name: cms.info
  id: cms.info/index
  summary: Returns width, depth and total count of the sketch
  description: "# CMS.INFO\n\n    CMS.INFO\n\nSyntax\n\n``` command-syntax\nCMS.INFO key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns width, depth and total count of the sketch.\n\n### Parameters:\n\n- **key**: The name of the sketch.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information of the filter.\n\n## Examples\n\n```\nredis> CMS.INFO test\n 1) width\n 2) (integer) 2000\n 3) depth\n 4) (integer) 7\n 5) count\n 6) (integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cms.info/](https://redis.io/commands/cms.info/)"
- name: cms.initbydim
  id: cms.initbydim/index
  summary: Initializes a Count-Min Sketch to dimensions specified by user
  description: "# CMS.INITBYDIM\n\n    CMS.INITBYDIM\n\nSyntax\n\n``` command-syntax\nCMS.INITBYDIM key width depth\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nInitializes a Count-Min Sketch to dimensions specified by user.\n\n### Parameters:\n\n- **key**: The name of the sketch.\n- **width**: Number of counters in each array. Reduces the error size.\n- **depth**: Number of counter-arrays. Reduces the probability for an error of a certain size (percentage of total count).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> CMS.INITBYDIM test 2000 5\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cms.initbydim/](https://redis.io/commands/cms.initbydim/)"
- name: cms.initbyprob
  id: cms.initbyprob/index
  summary: Initializes a Count-Min Sketch to accommodate requested tolerances
  description: "# CMS.INITBYPROB\n\n    CMS.INITBYPROB\n\nSyntax\n\n``` command-syntax\nCMS.INITBYPROB key error probability\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nInitializes a Count-Min Sketch to accommodate requested tolerances.\n\n### Parameters:\n\n- **key**: The name of the sketch.\n- **error**: Estimate size of error. The error is a percent of total counted items. This effects the width of the sketch.\n- **probability**: The desired probability for inflated count. This should be a decimal value between 0 and 1. This effects the depth of the sketch. For example, for a desired false positive rate of 0.1% (1 in 1000), error_rate should be set to 0.001. The closer this number is to zero, the greater the memory consumption per item and the more CPU usage per operation.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> CMS.INITBYPROB test 0.001 0.01\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cms.initbyprob/](https://redis.io/commands/cms.initbyprob/)"
- name: cms.merge
  id: cms.merge/index
  summary: Merges several sketches into one sketch
  description: "# CMS.MERGE\n\n    CMS.MERGE\n\nSyntax\n\n``` command-syntax\nCMS.MERGE destination numKeys source [source ...] [WEIGHTS weight\n  [weight ...]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n) where n is the number of sketches\n\nMerges several sketches into one sketch. All sketches must have identical width and depth. Weights can be used to multiply certain sketches. Default weight is 1.\n\n### Parameters:\n\n- **dest**: The name of destination sketch. Must be initialized.\n- **numKeys**: Number of sketches to be merged.\n- **src**: Names of source sketches to be merged.\n- **weight**: Multiple of each sketch. Default =1.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> CMS.MERGE dest 2 test1 test2 WEIGHTS 1 3\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cms.merge/](https://redis.io/commands/cms.merge/)"
- name: cms.query
  id: cms.query/index
  summary: Returns the count for one or more items in a sketch
  description: "# CMS.QUERY\n\n    CMS.QUERY\n\nSyntax\n\n``` command-syntax\nCMS.QUERY key item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n) where n is the number of items\n\nReturns the count for one or more items in a sketch.\n\n### Parameters:\n\n- **key**: The name of the sketch.\n- **item**: One or more items for which to return the count.\n\n## Return\n\nCount of one or more items\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) with a min-count of each of the items in the sketch.\n\n## Examples\n\n```\nredis> CMS.QUERY test foo bar\n1) (integer) 10\n2) (integer) 42\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/cms.query/](https://redis.io/commands/cms.query/)"
- name: command
  id: command/index
  summary: Return an array with details about every Redis command
  description: "# COMMAND\n\n    COMMAND\n\nSyntax\n\n``` command-syntax\nCOMMAND\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(N) where N is the total number of Redis commands\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturn an array with details about every Redis command.\n\nThe `COMMAND` command is introspective. Its reply describes all commands that the server can process. Redis clients can call it to obtain the server's runtime capabilities during the handshake.\n\n`COMMAND` also has several subcommands. Please refer to its subcommands for further details.\n\n**Cluster note:** this command is especially beneficial for cluster-aware clients. Such clients must identify the names of keys in commands to route requests to the correct shard. Although most commands accept a single key as their first argument, there are many exceptions to this rule. You can call `COMMAND` and then keep the mapping between commands and their respective key specification rules cached in the client.\n\nThe reply it returns is an array with an element per command. Each element that describes a Redis command is represented as an array by itself.\n\nThe command's array consists of a fixed number of elements. The exact number of elements in the array depends on the server's version.\n\n1.  Name\n2.  Arity\n3.  Flags\n4.  First key\n5.  Last key\n6.  Step\n7.  [ACL categories](https://redis.io/topics/acl) (as of Redis 6.0)\n8.  [Tips](https://redis.io/topics/command-tips) (as of Redis 7.0)\n9.  [Key specifications](https://redis.io/topics/key-specs) (as of Redis 7.0)\n10. Subcommands (as of Redis 7.0)\n\n## Name\n\nThis is the command's name in lowercase.\n\n**Note:** Redis command names are case-insensitive.\n\n## Arity\n\nArity is the number of arguments a command expects. It follows a simple pattern:\n\n- A positive integer means a fixed number of arguments.\n- A negative integer means a minimal number of arguments.\n\nCommand arity *always includes* the command's name itself (and the subcommand when applicable).\n\nExamples:\n\n- [`GET`](../get)'s arity is *2* since the command only accepts one argument and always has the format `GET _key_`.\n- [`MGET`](../mget)'s arity is *-2* since the command accepts at least one argument, but possibly multiple ones: `MGET _key1_ [key2] [key3] ...`.\n\n## Flags\n\nCommand flags are an array. It can contain the following simple strings (status reply):\n\n- **admin:** the command is an administrative command.\n- **asking:** the command is allowed even during hash slot migration. This flag is relevant in Redis Cluster deployments.\n- **blocking:** the command may block the requesting client.\n- **denyoom**: the command is rejected if the server's memory usage is too high (see the *maxmemory* configuration directive).\n- **fast:** the command operates in constant or log(N) time. This flag is used for monitoring latency with the [`LATENCY`](../latency) command.\n- **loading:** the command is allowed while the database is loading.\n- **movablekeys:** the *first key*, *last key*, and *step* values don't determine all key positions. Clients need to use [`COMMAND GETKEYS`](../command-getkeys) or [key specifications](https://redis.io/topics/key-specs) in this case. See below for more details.\n- **no_auth:** executing the command doesn't require authentication.\n- **no_async_loading:** the command is denied during asynchronous loading (that is when a replica uses disk-less `SWAPDB SYNC`, and allows access to the old dataset).\n- **no_mandatory_keys:** the command may accept key name arguments, but these aren't mandatory.\n- **no_multi:** the command isn't allowed inside the context of a [transaction](https://redis.io/topics/transactions).\n- **noscript:** the command can't be called from [scripts](https://redis.io/topics/eval-intro) or [functions](https://redis.io/topics/functions-intro).\n- **pubsub:** the command is related to [Redis Pub/Sub](https://redis.io/topics/pubsub).\n- **random**: the command returns random results, which is a concern with verbatim script replication. As of Redis 7.0, this flag is a [command tip](https://redis.io/topics/command-tips).\n- **readonly:** the command doesn't modify data.\n- **sort_for_script:** the command's output is sorted when called from a script.\n- **skip_monitor:** the command is not shown in [`MONITOR`](../monitor)'s output.\n- **skip_slowlog:** the command is not shown in [`SLOWLOG`](../slowlog)'s output. As of Redis 7.0, this flag is a [command tip](https://redis.io/topics/command-tips).\n- **stale:** the command is allowed while a replica has stale data.\n- **write:** the command may modify data.\n\n### Movablekeys\n\nConsider [`SORT`](../sort):\n\n```\n1) 1) \"sort\"\n   2) (integer) -2\n   3) 1) write\n      2) denyoom\n      3) movablekeys\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n   ...\n```\n\nSome Redis commands have no predetermined key locations or are not easy to find. For those commands, the *movablekeys* flag indicates that the *first key*, *last key*, and *step* values are insufficient to find all the keys.\n\nHere are several examples of commands that have the *movablekeys* flag:\n\n- [`SORT`](../sort): the optional *STORE*, *BY*, and *GET* modifiers are followed by names of keys.\n- [`ZUNION`](../zunion): the *numkeys* argument specifies the number key name arguments.\n- [`MIGRATE`](../migrate): the keys appear *KEYS* keyword and only when the second argument is the empty string.\n\nRedis Cluster clients need to use other measures, as follows, to locate the keys for such commands.\n\nYou can use the [`COMMAND GETKEYS`](../command-getkeys) command and have your Redis server report all keys of a given command's invocation.\n\nAs of Redis 7.0, clients can use the [key specifications](#key-specifications) to identify the positions of key names. The only commands that require using [`COMMAND GETKEYS`](../command-getkeys) are [`SORT`](../sort) and [`MIGRATE`](../migrate) for clients that parse keys' specifications.\n\nFor more information, please refer to the [key specifications page](https://redis.io/topics/key-specs).\n\n## First key\n\nThe position of the command's first key name argument. For most commands, the first key's position is 1. Position 0 is always the command name itself.\n\n## Last key\n\nThe position of the command's last key name argument. Redis commands usually accept one, two or multiple number of keys.\n\nCommands that accept a single key have both *first key* and *last key* set to 1.\n\nCommands that accept two key name arguments, e.g. [`BRPOPLPUSH`](../brpoplpush), [`SMOVE`](../smove) and [`RENAME`](../rename), have this value set to the position of their second key.\n\nMulti-key commands that accept an arbitrary number of keys, such as [`MSET`](../mset), use the value -1.\n\n## Step\n\nThe step, or increment, between the *first key* and the position of the next key.\n\nConsider the following two examples:\n\n```\n1) 1) \"mset\"\n   2) (integer) -3\n   3) 1) write\n      2) denyoom\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 2\n   ...\n```\n\n```\n1) 1) \"mget\"\n   2) (integer) -2\n   3) 1) readonly\n      2) fast\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 1\n   ...\n```\n\nThe step count allows us to find keys' positions. For example [`MSET`](../mset): Its syntax is `MSET _key1_ _val1_ [key2] [val2] [key3] [val3]...`, so the keys are at every other position (step value of *2*). Unlike [`MGET`](../mget), which uses a step value of *1*.\n\n## ACL categories\n\nThis is an array of simple strings that are the ACL categories to which the command belongs. Please refer to the [Access Control List](https://redis.io/topics/acl) page for more information.\n\n## Command tips\n\nHelpful information about the command. To be used by clients/proxies.\n\nPlease check the [Command tips](https://redis.io/topics/command-tips) page for more information.\n\n## Key specifications\n\nThis is an array consisting of the command's key specifications. Each element in the array is a map describing a method for locating keys in the command's arguments.\n\nFor more information please check the [key specifications page](https://redis.io/topics/key-specs).\n\n## Subcommands\n\nThis is an array containing all of the command's subcommands, if any. Some Redis commands have subcommands (e.g., the `REWRITE` subcommand of [`CONFIG`](../config)). Each element in the array represents one subcommand and follows the same specifications as those of `COMMAND`'s reply.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a nested list of command details.\n\nThe order of commands in the array is random.\n\n## Examples\n\nThe following is `COMMAND`'s output for the [`GET`](../get) command:\n\n```\n1)  1) \"get\"\n    2) (integer) 2\n    3) 1) readonly\n       2) fast\n    4) (integer) 1\n    5) (integer) 1\n    6) (integer) 1\n    7) 1) @read\n       2) @string\n       3) @fast\n    8) (empty array)\n    9) 1) 1) \"flags\"\n          2) 1) read\n          3) \"begin_search\"\n          4) 1) \"type\"\n             2) \"index\"\n             3) \"spec\"\n             4) 1) \"index\"\n                2) (integer) 1\n          5) \"find_keys\"\n          6) 1) \"type\"\n             2) \"range\"\n             3) \"spec\"\n             4) 1) \"lastkey\"\n                2) (integer) 0\n                3) \"keystep\"\n                4) (integer) 1\n                5) \"limit\"\n                6) (integer) 0\n   10) (empty array)\n...\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command/](https://redis.io/commands/command/)"
- name: command count
  id: command-count/index
  summary: Returns Integer reply of number of total commands in this Redis server
  description: "# COMMAND\n\n    COMMAND COUNT\n\nSyntax\n\n``` command-syntax\nCOMMAND COUNT\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturns [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) of number of total commands in this Redis server.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): number of commands returned by [`COMMAND`](../command)\n\n## Examples\n\n``` redis-cli\nCOMMAND COUNT\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command-count/](https://redis.io/commands/command-count/)"
- name: command docs
  id: command-docs/index
  summary: Return documentary information about commands
  description: "# COMMAND\n\n    COMMAND DOCS\n\nSyntax\n\n``` command-syntax\nCOMMAND DOCS [command-name [command-name ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of commands to look up\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturn documentary information about commands.\n\nBy default, the reply includes all of the server's commands. You can use the optional *command-name* argument to specify the names of one or more commands.\n\nThe reply includes a map for each returned command. The following keys may be included in the mapped reply:\n\n- **summary:** short command description.\n- **since:** the Redis version that added the command (or for module commands, the module version).\n- **group:** the functional group to which the command belongs. Possible values are:\n  - *bitmap*\n  - *cluster*\n  - *connection*\n  - *generic*\n  - *geo*\n  - *hash*\n  - *hyperloglog*\n  - *list*\n  - *module*\n  - *pubsub*\n  - *scripting*\n  - *sentinel*\n  - *server*\n  - *set*\n  - *sorted-set*\n  - *stream*\n  - *string*\n  - *transactions*\n- **complexity:** a short explanation about the command's time complexity.\n- **doc_flags:** an array of documentation flags. Possible values are:\n  - *deprecated:* the command is deprecated.\n  - *syscmd:* a system command that isn't meant to be called by users.\n- **deprecated_since:** the Redis version that deprecated the command (or for module commands, the module version)..\n- **replaced_by:** the alternative for a deprecated command.\n- **history:** an array of historical notes describing changes to the command's behavior or arguments. Each entry is an array itself, made up of two elements:\n  1.  The Redis version that the entry applies to.\n  2.  The description of the change.\n- **arguments:** an array of maps that describe the command's arguments. Please refer to the [Redis command arguments](https://redis.io/topics/command-arguments) page for more information.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a map as a flattened array as described above.\n\n## Examples\n\n``` redis-cli\nCOMMAND DOCS SET\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command-docs/](https://redis.io/commands/command-docs/)"
- name: command getkeys
  id: command-getkeys/index
  summary: Returns Array reply of keys from a full Redis command
  description: "# COMMAND\n\n    COMMAND GETKEYS\n\nSyntax\n\n``` command-syntax\nCOMMAND GETKEYS command [arg [arg ...]]\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(N) where N is the number of arguments to the command\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturns [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of keys from a full Redis command.\n\n`COMMAND GETKEYS` is a helper command to let you find the keys from a full Redis command.\n\n[`COMMAND`](../command) provides information on how to find the key names of each command (see `firstkey`, [key specifications](https://redis.io/topics/key-specs#logical-operation-flags), and `movablekeys`), but in some cases it's not possible to find keys of certain commands and then the entire command must be parsed to discover some / all key names. You can use `COMMAND GETKEYS` or [`COMMAND GETKEYSANDFLAGS`](../command-getkeysandflags) to discover key names directly from how Redis parses the commands.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of keys from your command.\n\n## Examples\n\n``` redis-cli\nCOMMAND GETKEYS MSET a b c d e f\nCOMMAND GETKEYS EVAL \"not consulted\" 3 key1 key2 key3 arg1 arg2 arg3 argN\nCOMMAND GETKEYS SORT mylist ALPHA STORE outlist\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command-getkeys/](https://redis.io/commands/command-getkeys/)"
- name: command getkeysandflags
  id: command-getkeysandflags/index
  summary: Returns Array reply of keys from a full Redis command and their usage flags
  description: "# COMMAND\n\n    COMMAND GETKEYSANDFLAGS\n\nSyntax\n\n``` command-syntax\nCOMMAND GETKEYSANDFLAGS command [arg [arg ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of arguments to the command\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturns [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of keys from a full Redis command and their usage flags.\n\n`COMMAND GETKEYSANDFLAGS` is a helper command to let you find the keys from a full Redis command together with flags indicating what each key is used for.\n\n[`COMMAND`](../command) provides information on how to find the key names of each command (see `firstkey`, [key specifications](https://redis.io/topics/key-specs#logical-operation-flags), and `movablekeys`), but in some cases it's not possible to find keys of certain commands and then the entire command must be parsed to discover some / all key names. You can use [`COMMAND GETKEYS`](../command-getkeys) or `COMMAND GETKEYSANDFLAGS` to discover key names directly from how Redis parses the commands.\n\nRefer to [key specifications](https://redis.io/topics/key-specs#logical-operation-flags) for information about the meaning of the key flags.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of keys from your command. Each element of the array is an array containing key name in the first entry, and flags in the second.\n\n## Examples\n\n``` redis-cli\nCOMMAND GETKEYS MSET a b c d e f\nCOMMAND GETKEYS EVAL \"not consulted\" 3 key1 key2 key3 arg1 arg2 arg3 argN\nCOMMAND GETKEYSANDFLAGS LMOVE mylist1 mylist2 left left\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command-getkeysandflags/](https://redis.io/commands/command-getkeysandflags/)"
- name: command info
  id: command-info/index
  summary: Returns Array reply of details about multiple Redis commands
  description: "# COMMAND\n\n    COMMAND INFO\n\nSyntax\n\n``` command-syntax\nCOMMAND INFO [command-name [command-name ...]]\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(N) where N is the number of commands to look up\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturns [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of details about multiple Redis commands.\n\nSame result format as [`COMMAND`](../command) except you can specify which commands get returned.\n\nIf you request details about non-existing commands, their return position will be nil.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): nested list of command details.\n\n## Examples\n\n``` redis-cli\nCOMMAND INFO get set eval\nCOMMAND INFO foo evalsha config bar\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Allowed to be called with no argument to get info on all commands.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command-info/](https://redis.io/commands/command-info/)"
- name: command list
  id: command-list/index
  summary: Return an array of the server's command names
  description: "# COMMAND\n\n    COMMAND LIST\n\nSyntax\n\n``` command-syntax\nCOMMAND LIST [FILTERBY <MODULE module-name | ACLCAT category |\n  PATTERN pattern>]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the total number of Redis commands\n\nACL categories:  \n`@slow`, `@connection`,\n\nReturn an array of the server's command names.\n\nYou can use the optional *FILTERBY* modifier to apply one of the following filters:\n\n- **MODULE module-name**: get the commands that belong to the module specified by *module-name*.\n- **ACLCAT category**: get the commands in the [ACL category](https://redis.io/docs/management/security/acl/#command-categories) specified by *category*.\n- **PATTERN pattern**: get the commands that match the given glob-like *pattern*.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of command names.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/command-list/](https://redis.io/commands/command-list/)"
- name: config get
  id: config-get/index
  summary: The CONFIG GET command is used to read the configuration parameters of a running Redis server
  description: "# CONFIG\n\n    CONFIG GET\n\nSyntax\n\n``` command-syntax\nCONFIG GET parameter [parameter ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) when N is the number of configuration parameters provided\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `CONFIG GET` command is used to read the configuration parameters of a running Redis server. Not all the configuration parameters are supported in Redis 2.4, while Redis 2.6 can read the whole configuration of a server using this command.\n\nThe symmetric command used to alter the configuration at run time is `CONFIG SET`.\n\n`CONFIG GET` takes multiple arguments, which are glob-style patterns. Any configuration parameter matching any of the patterns are reported as a list of key-value pairs. Example:\n\n```\nredis> config get *max-*-entries* maxmemory\n 1) \"maxmemory\"\n 2) \"0\"\n 3) \"hash-max-listpack-entries\"\n 4) \"512\"\n 5) \"hash-max-ziplist-entries\"\n 6) \"512\"\n 7) \"set-max-intset-entries\"\n 8) \"512\"\n 9) \"zset-max-listpack-entries\"\n10) \"128\"\n11) \"zset-max-ziplist-entries\"\n12) \"128\"\n```\n\nYou can obtain a list of all the supported configuration parameters by typing `CONFIG GET *` in an open `redis-cli` prompt.\n\nAll the supported parameters have the same meaning of the equivalent configuration parameter used in the [redis.conf](http://github.com/redis/redis/raw/unstable/redis.conf) file:\n\nNote that you should look at the redis.conf file relevant to the version you're working with as configuration options might change between versions. The link above is to the latest development version.\n\n## Return\n\nThe return type of the command is a [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays).\n\n## History\n\n- Starting with Redis version 7.0.0: Added the ability to pass multiple pattern parameters in one call\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/config-get/](https://redis.io/commands/config-get/)"
- name: config resetstat
  id: config-resetstat/index
  summary: Resets the statistics reported by Redis using the INFO and LATENCY HISTOGRAM commands
  description: "# CONFIG\n\n    CONFIG RESETSTAT\n\nSyntax\n\n``` command-syntax\nCONFIG RESETSTAT\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nResets the statistics reported by Redis using the [`INFO`](../info) and [`LATENCY HISTOGRAM`](../latency-histogram) commands.\n\nThe following is a non-exhaustive list of values that are reset:\n\n- Keyspace hits and misses\n- Number of expired keys\n- Command and error statistics\n- Connections received, rejected and evicted\n- Persistence statistics\n- Active defragmentation statistics\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/config-resetstat/](https://redis.io/commands/config-resetstat/)"
- name: config rewrite
  id: config-rewrite/index
  summary: The CONFIG REWRITE command rewrites the redis.conf file the server was started with, applying the minimal changes needed to make it reflect the configuration currently used by the server, which may be different compared to the original one because of the use of the CONFIG SET command
  description: "# CONFIG\n\n    CONFIG REWRITE\n\nSyntax\n\n``` command-syntax\nCONFIG REWRITE\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `CONFIG REWRITE` command rewrites the `redis.conf` file the server was started with, applying the minimal changes needed to make it reflect the configuration currently used by the server, which may be different compared to the original one because of the use of the [`CONFIG SET`](../config-set) command.\n\nThe rewrite is performed in a very conservative way:\n\n- Comments and the overall structure of the original redis.conf are preserved as much as possible.\n- If an option already exists in the old redis.conf file, it will be rewritten at the same position (line number).\n- If an option was not already present, but it is set to its default value, it is not added by the rewrite process.\n- If an option was not already present, but it is set to a non-default value, it is appended at the end of the file.\n- Non used lines are blanked. For instance if you used to have multiple `save` directives, but the current configuration has fewer or none as you disabled RDB persistence, all the lines will be blanked.\n\nCONFIG REWRITE is also able to rewrite the configuration file from scratch if the original one no longer exists for some reason. However if the server was started without a configuration file at all, the CONFIG REWRITE will just return an error.\n\n## Atomic rewrite process\n\nIn order to make sure the redis.conf file is always consistent, that is, on errors or crashes you always end with the old file, or the new one, the rewrite is performed with a single `write(2)` call that has enough content to be at least as big as the old file. Sometimes additional padding in the form of comments is added in order to make sure the resulting file is big enough, and later the file gets truncated to remove the padding at the end.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` when the configuration was rewritten properly. Otherwise an error is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/config-rewrite/](https://redis.io/commands/config-rewrite/)"
- name: config set
  id: config-set/index
  summary: The CONFIG SET command is used in order to reconfigure the server at run time without the need to restart Redis
  description: "# CONFIG\n\n    CONFIG SET\n\nSyntax\n\n``` command-syntax\nCONFIG SET parameter value [parameter value ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) when N is the number of configuration parameters provided\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `CONFIG SET` command is used in order to reconfigure the server at run time without the need to restart Redis. You can change both trivial parameters or switch from one to another persistence option using this command.\n\nThe list of configuration parameters supported by `CONFIG SET` can be obtained issuing a `CONFIG GET *` command, that is the symmetrical command used to obtain information about the configuration of a running Redis instance.\n\nAll the configuration parameters set using `CONFIG SET` are immediately loaded by Redis and will take effect starting with the next command executed.\n\nAll the supported parameters have the same meaning of the equivalent configuration parameter used in the [redis.conf](http://github.com/redis/redis/raw/unstable/redis.conf) file.\n\nNote that you should look at the redis.conf file relevant to the version you're working with as configuration options might change between versions. The link above is to the latest development version.\n\nIt is possible to switch persistence from RDB snapshotting to append-only file (and the other way around) using the `CONFIG SET` command. For more information about how to do that please check the [persistence page](https://redis.io/topics/persistence).\n\nIn general what you should know is that setting the `appendonly` parameter to `yes` will start a background process to save the initial append-only file (obtained from the in memory data set), and will append all the subsequent commands on the append-only file, thus obtaining exactly the same effect of a Redis server that started with AOF turned on since the start.\n\nYou can have both the AOF enabled with RDB snapshotting if you want, the two options are not mutually exclusive.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` when the configuration was set properly. Otherwise an error is returned.\n\n## History\n\n- Starting with Redis version 7.0.0: Added the ability to set multiple parameters in one call.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/config-set/](https://redis.io/commands/config-set/)"
- name: copy
  id: copy/index
  summary: 'Time complexity: O(N) worst case for collections, where N is the number of nested items'
  description: "# COPY\n\n    COPY\n\nSyntax\n\n``` command-syntax\nCOPY source destination [DB destination-db] [REPLACE]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N) worst case for collections, where N is the number of nested items. O(1) for string values.\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`,\n\nThis command copies the value stored at the `source` key to the `destination` key.\n\nBy default, the `destination` key is created in the logical database used by the connection. The `DB` option allows specifying an alternative logical database index for the destination key.\n\nThe command returns an error when the `destination` key already exists. The `REPLACE` option removes the `destination` key before copying the value to it.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if `source` was copied.\n- `0` if `source` was not copied.\n\n## Examples\n\n```\nSET dolly \"sheep\"\nCOPY dolly clone\nGET clone\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/copy/](https://redis.io/commands/copy/)"
- name: dbsize
  id: dbsize/index
  summary: Return the number of keys in the currently-selected database
  description: "# DBSIZE\n\n    DBSIZE\n\nSyntax\n\n``` command-syntax\nDBSIZE\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nReturn the number of keys in the currently-selected database.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/dbsize/](https://redis.io/commands/dbsize/)"
- name: decr
  id: decr/index
  summary: Decrements the number stored at key by one
  description: "# DECR\n\n    DECR\n\nSyntax\n\n``` command-syntax\nDECR key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nDecrements the number stored at `key` by one. If the key does not exist, it is set to `0` before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to **64 bit signed integers**.\n\nSee [`INCR`](../incr) for extra information on increment/decrement operations.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the value of `key` after the decrement\n\n## Examples\n\n``` redis-cli\nSET mykey \"10\"\nDECR mykey\nSET mykey \"234293482390480948029348230948\"\nDECR mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/decr/](https://redis.io/commands/decr/)"
- name: decrby
  id: decrby/index
  summary: Decrements the number stored at key by decrement
  description: "# DECRBY\n\n    DECRBY\n\nSyntax\n\n``` command-syntax\nDECRBY key decrement\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nDecrements the number stored at `key` by `decrement`. If the key does not exist, it is set to `0` before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.\n\nSee [`INCR`](../incr) for extra information on increment/decrement operations.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the value of `key` after the decrement\n\n## Examples\n\n``` redis-cli\nSET mykey \"10\"\nDECRBY mykey 3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/decrby/](https://redis.io/commands/decrby/)"
- name: del
  id: del/index
  summary: 'Time complexity: O(N) where N is the number of keys that will be removed'
  description: "# DEL\n\n    DEL\n\nSyntax\n\n``` command-syntax\nDEL key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`,\n\nRemoves the specified keys. A key is ignored if it does not exist.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of keys that were removed.\n\n## Examples\n\n``` redis-cli\nSET key1 \"Hello\"\nSET key2 \"World\"\nDEL key1 key2 key3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/del/](https://redis.io/commands/del/)"
- name: discard
  id: discard/index
  summary: Flushes all previously queued commands in a transaction and restores the connection state to normal
  description: "# DISCARD\n\n    DISCARD\n\nSyntax\n\n``` command-syntax\nDISCARD\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N), when N is the number of queued commands\n\nACL categories:  \n`@fast`, `@transaction`,\n\nFlushes all previously queued commands in a [transaction](https://redis.io/topics/transactions) and restores the connection state to normal.\n\nIf [`WATCH`](../watch) was used, `DISCARD` unwatches all keys watched by the connection.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/discard/](https://redis.io/commands/discard/)"
- name: dump
  id: dump/index
  summary: 'Time complexity: O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size'
  description: "# DUMP\n\n    DUMP\n\nSyntax\n\n``` command-syntax\nDUMP key\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1) to access the key and additional O(N\\*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1\\*M) where M is small, so simply O(1).\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nSerialize the value stored at key in a Redis-specific format and return it to the user. The returned value can be synthesized back into a Redis key using the [`RESTORE`](../restore) command.\n\nThe serialization format is opaque and non-standard, however it has a few semantic characteristics:\n\n- It contains a 64-bit checksum that is used to make sure errors will be detected. The [`RESTORE`](../restore) command makes sure to check the checksum before synthesizing a key using the serialized value.\n- Values are encoded in the same format used by RDB.\n- An RDB version is encoded inside the serialized value, so that different Redis versions with incompatible RDB formats will refuse to process the serialized value.\n\nThe serialized value does NOT contain expire information. In order to capture the time to live of the current value the [`PTTL`](../pttl) command should be used.\n\nIf `key` does not exist a nil bulk reply is returned.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the serialized value.\n\n## Examples\n\n```\n> SET mykey 10\nOK\n> DUMP mykey\n\"\\x00\\xc0\\n\\n\\x00n\\x9fWE\\x0e\\xaec\\xbb\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/dump/](https://redis.io/commands/dump/)"
- name: echo
  id: echo/index
  summary: Returns message
  description: "# ECHO\n\n    ECHO\n\nSyntax\n\n``` command-syntax\nECHO message\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nReturns `message`.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)\n\n## Examples\n\n``` redis-cli\nECHO \"Hello World!\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/echo/](https://redis.io/commands/echo/)"
- name: eval
  id: eval/index
  summary: 'Time complexity: Depends on the script that is executed'
  description: "# EVAL\n\n    EVAL\n\nSyntax\n\n``` command-syntax\nEVAL script numkeys [key [key ...]] [arg [arg ...]]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nDepends on the script that is executed.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nInvoke the execution of a server-side Lua script.\n\nThe first argument is the script's source code. Scripts are written in [Lua](https://lua.org) and executed by the embedded [Lua 5.1](https://redis.io/topics/lua-api) interpreter in Redis.\n\nThe second argument is the number of input key name arguments, followed by all the keys accessed by the script. These names of input keys are available to the script as the [*KEYS* global runtime variable](https://redis.io/topics/lua-api#the-keys-global-variable) Any additional input arguments **should not** represent names of keys.\n\n**Important:** to ensure the correct execution of scripts, both in standalone and clustered deployments, all names of keys that a script accesses must be explicitly provided as input key arguments. The script **should only** access keys whose names are given as input arguments. Scripts **should never** access keys with programmatically-generated names or based on the contents of data structures stored in the database.\n\nPlease refer to the [Redis Programmability](https://redis.io/topics/programmability) and [Introduction to Eval Scripts](https://redis.io/topics/eval-intro) for more information about Lua scripts.\n\n## Examples\n\nThe following example will run a script that returns the first argument that it gets.\n\n```\n> EVAL \"return ARGV[1]\" 0 hello\n\"hello\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/eval/](https://redis.io/commands/eval/)"
- name: eval_ro
  id: eval_ro/index
  summary: 'Time complexity: Depends on the script that is executed'
  description: "# EVAL_RO\n\n    EVAL_RO\n\nSyntax\n\n``` command-syntax\nEVAL_RO script numkeys [key [key ...]] [arg [arg ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nDepends on the script that is executed.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nThis is a read-only variant of the [`EVAL`](../eval) command that cannot execute commands that modify data.\n\nFor more information about when to use this command vs [`EVAL`](../eval), please refer to [Read-only scripts](https://redis.io/docs/manual/programmability/#read-only_scripts).\n\nFor more information about [`EVAL`](../eval) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n## Examples\n\n```\n> SET mykey \"Hello\"\nOK\n\n> EVAL_RO \"return redis.call('GET', KEYS[1])\" 1 mykey\n\"Hello\"\n\n> EVAL_RO \"return redis.call('DEL', KEYS[1])\" 1 mykey\n(error) ERR Error running script (call to b0d697da25b13e49157b2c214a4033546aba2104): @user_script:1: @user_script: 1: Write commands are not allowed from read-only scripts.\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/eval_ro/](https://redis.io/commands/eval_ro/)"
- name: evalsha
  id: evalsha/index
  summary: 'Time complexity: Depends on the script that is executed'
  description: "# EVALSHA\n\n    EVALSHA\n\nSyntax\n\n``` command-syntax\nEVALSHA sha1 numkeys [key [key ...]] [arg [arg ...]]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nDepends on the script that is executed.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nEvaluate a script from the server's cache by its SHA1 digest.\n\nThe server caches scripts by using the [`SCRIPT LOAD`](../script-load) command. The command is otherwise identical to [`EVAL`](../eval).\n\nPlease refer to the [Redis Programmability](https://redis.io/topics/programmability) and [Introduction to Eval Scripts](https://redis.io/topics/eval-intro) for more information about Lua scripts.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/evalsha/](https://redis.io/commands/evalsha/)"
- name: evalsha_ro
  id: evalsha_ro/index
  summary: 'Time complexity: Depends on the script that is executed'
  description: "# EVALSHA_RO\n\n    EVALSHA_RO\n\nSyntax\n\n``` command-syntax\nEVALSHA_RO sha1 numkeys [key [key ...]] [arg [arg ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nDepends on the script that is executed.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nThis is a read-only variant of the [`EVALSHA`](../evalsha) command that cannot execute commands that modify data.\n\nFor more information about when to use this command vs [`EVALSHA`](../evalsha), please refer to [Read-only scripts](https://redis.io/docs/manual/programmability/#read-only_scripts).\n\nFor more information about [`EVALSHA`](../evalsha) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/evalsha_ro/](https://redis.io/commands/evalsha_ro/)"
- name: exec
  id: exec/index
  summary: Executes all previously queued commands in a transaction and restores the connection state to normal
  description: "# EXEC\n\n    EXEC\n\nSyntax\n\n``` command-syntax\nEXEC\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nDepends on commands in the transaction\n\nACL categories:  \n`@slow`, `@transaction`,\n\nExecutes all previously queued commands in a [transaction](https://redis.io/topics/transactions) and restores the connection state to normal.\n\nWhen using [`WATCH`](../watch), `EXEC` will execute commands only if the watched keys were not modified, allowing for a [check-and-set mechanism](https://redis.io/topics/transactions#cas).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): each element being the reply to each of the commands in the atomic transaction.\n\nWhen using [`WATCH`](../watch), `EXEC` can return a [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) if the execution was aborted.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/exec/](https://redis.io/commands/exec/)"
- name: exists
  id: exists/index
  summary: 'Time complexity: O(N) where N is the number of keys to check'
  description: "# EXISTS\n\n    EXISTS\n\nSyntax\n\n``` command-syntax\nEXISTS key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of keys to check.\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nReturns if `key` exists.\n\nThe user should be aware that if the same existing key is mentioned in the arguments multiple times, it will be counted multiple times. So if `somekey` exists, `EXISTS somekey somekey` will return 2.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically the number of keys that exist from those specified as arguments.\n\n## Examples\n\n``` redis-cli\nSET key1 \"Hello\"\nEXISTS key1\nEXISTS nosuchkey\nSET key2 \"World\"\nEXISTS key1 key2 nosuchkey\n```\n\n## History\n\n- Starting with Redis version 3.0.3: Accepts multiple `key` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/exists/](https://redis.io/commands/exists/)"
- name: expire
  id: expire/index
  summary: Set a timeout on key
  description: "# EXPIRE\n\n    EXPIRE\n\nSyntax\n\n``` command-syntax\nEXPIRE key seconds [NX | XX | GT | LT]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\nSet a timeout on `key`. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is often said to be *volatile* in Redis terminology.\n\nThe timeout will only be cleared by commands that delete or overwrite the contents of the key, including [`DEL`](../del), [`SET`](../set), [`GETSET`](../getset) and all the `*STORE` commands. This means that all the operations that conceptually *alter* the value stored at the key without replacing it with a new one will leave the timeout untouched. For instance, incrementing the value of a key with [`INCR`](../incr), pushing a new value into a list with [`LPUSH`](../lpush), or altering the field value of a hash with [`HSET`](../hset) are all operations that will leave the timeout untouched.\n\nThe timeout can also be cleared, turning the key back into a persistent key, using the [`PERSIST`](../persist) command.\n\nIf a key is renamed with [`RENAME`](../rename), the associated time to live is transferred to the new key name.\n\nIf a key is overwritten by [`RENAME`](../rename), like in the case of an existing key `Key_A` that is overwritten by a call like `RENAME Key_B Key_A`, it does not matter if the original `Key_A` had a timeout associated or not, the new key `Key_A` will inherit all the characteristics of `Key_B`.\n\nNote that calling `EXPIRE`/[`PEXPIRE`](../pexpire) with a non-positive timeout or [`EXPIREAT`](../expireat)/[`PEXPIREAT`](../pexpireat) with a time in the past will result in the key being [deleted](../del) rather than expired (accordingly, the emitted [key event](https://redis.io/topics/notifications) will be `del`, not `expired`).\n\n## Options\n\nThe `EXPIRE` command supports a set of options:\n\n- `NX` -- Set expiry only when the key has no expiry\n- `XX` -- Set expiry only when the key has an existing expiry\n- `GT` -- Set expiry only when the new expiry is greater than current one\n- `LT` -- Set expiry only when the new expiry is less than current one\n\nA non-volatile key is treated as an infinite TTL for the purpose of `GT` and `LT`. The `GT`, `LT` and `NX` options are mutually exclusive.\n\n## Refreshing expires\n\nIt is possible to call `EXPIRE` using as argument a key that already has an existing expire set. In this case the time to live of a key is *updated* to the new value. There are many useful applications for this, an example is documented in the *Navigation session* pattern section below.\n\n## Differences in Redis prior 2.1.3\n\nIn Redis versions prior **2.1.3** altering a key with an expire set using a command altering its value had the effect of removing the key entirely. This semantics was needed because of limitations in the replication layer that are now fixed.\n\n`EXPIRE` would return 0 and not alter the timeout for a key with a timeout set.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the timeout was set.\n- `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nEXPIRE mykey 10\nTTL mykey\nSET mykey \"Hello World\"\nTTL mykey\nEXPIRE mykey 10 XX\nTTL mykey\nEXPIRE mykey 10 NX\nTTL mykey\n```\n\n## Pattern: Navigation session\n\nImagine you have a web service and you are interested in the latest N pages *recently* visited by your users, such that each adjacent page view was not performed more than 60 seconds after the previous. Conceptually you may consider this set of page views as a *Navigation session* of your user, that may contain interesting information about what kind of products he or she is looking for currently, so that you can recommend related products.\n\nYou can easily model this pattern in Redis using the following strategy: every time the user does a page view you call the following commands:\n\n```\nMULTI\nRPUSH pagewviews.user:<userid> http://.....\nEXPIRE pagewviews.user:<userid> 60\nEXEC\n```\n\nIf the user will be idle more than 60 seconds, the key will be deleted and only subsequent page views that have less than 60 seconds of difference will be recorded.\n\nThis pattern is easily modified to use counters using [`INCR`](../incr) instead of lists using [`RPUSH`](../rpush).\n\n# Appendix: Redis expires\n\n## Keys with an expire\n\nNormally Redis keys are created without an associated time to live. The key will simply live forever, unless it is removed by the user in an explicit way, for instance using the [`DEL`](../del) command.\n\nThe `EXPIRE` family of commands is able to associate an expire to a given key, at the cost of some additional memory used by the key. When a key has an expire set, Redis will make sure to remove the key when the specified amount of time elapsed.\n\nThe key time to live can be updated or entirely removed using the `EXPIRE` and [`PERSIST`](../persist) command (or other strictly related commands).\n\n## Expire accuracy\n\nIn Redis 2.4 the expire might not be pin-point accurate, and it could be between zero to one seconds out.\n\nSince Redis 2.6 the expire error is from 0 to 1 milliseconds.\n\n## Expires and persistence\n\nKeys expiring information is stored as absolute Unix timestamps (in milliseconds in case of Redis version 2.6 or greater). This means that the time is flowing even when the Redis instance is not active.\n\nFor expires to work well, the computer time must be taken stable. If you move an RDB file from two computers with a big desync in their clocks, funny things may happen (like all the keys loaded to be expired at loading time).\n\nEven running instances will always check the computer clock, so for instance if you set a key with a time to live of 1000 seconds, and then set your computer time 2000 seconds in the future, the key will be expired immediately, instead of lasting for 1000 seconds.\n\n## How Redis expires keys\n\nRedis keys are expired in two ways: a passive way, and an active way.\n\nA key is passively expired simply when some client tries to access it, and the key is found to be timed out.\n\nOf course this is not enough as there are expired keys that will never be accessed again. These keys should be expired anyway, so periodically Redis tests a few keys at random among keys with an expire set. All the keys that are already expired are deleted from the keyspace.\n\nSpecifically this is what Redis does 10 times per second:\n\n1.  Test 20 random keys from the set of keys with an associated expire.\n2.  Delete all the keys found expired.\n3.  If more than 25% of keys were expired, start again from step 1.\n\nThis is a trivial probabilistic algorithm, basically the assumption is that our sample is representative of the whole key space, and we continue to expire until the percentage of keys that are likely to be expired is under 25%\n\nThis means that at any given moment the maximum amount of keys already expired that are using memory is at max equal to max amount of write operations per second divided by 4.\n\n## How expires are handled in the replication link and AOF file\n\nIn order to obtain a correct behavior without sacrificing consistency, when a key expires, a [`DEL`](../del) operation is synthesized in both the AOF file and gains all the attached replicas nodes. This way the expiration process is centralized in the master instance, and there is no chance of consistency errors.\n\nHowever while the replicas connected to a master will not expire keys independently (but will wait for the [`DEL`](../del) coming from the master), they'll still take the full state of the expires existing in the dataset, so when a replica is elected to master it will be able to expire the keys independently, fully acting as a master.\n\n## History\n\n- Starting with Redis version 7.0.0: Added options: `NX`, `XX`, `GT` and `LT`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/expire/](https://redis.io/commands/expire/)"
- name: expireat
  id: expireat/index
  summary: EXPIREAT has the same effect and semantic as EXPIRE, but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970)
  description: "# EXPIREAT\n\n    EXPIREAT\n\nSyntax\n\n``` command-syntax\nEXPIREAT key unix-time-seconds [NX | XX | GT | LT]\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\n`EXPIREAT` has the same effect and semantic as [`EXPIRE`](../expire), but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time) (seconds since January 1, 1970). A timestamp in the past will delete the key immediately.\n\nPlease for the specific semantics of the command refer to the documentation of [`EXPIRE`](../expire).\n\n## Background\n\n`EXPIREAT` was introduced in order to convert relative timeouts to absolute timeouts for the AOF persistence mode. Of course, it can be used directly to specify that a given key should expire at a given time in the future.\n\n## Options\n\nThe `EXPIREAT` command supports a set of options:\n\n- `NX` -- Set expiry only when the key has no expiry\n- `XX` -- Set expiry only when the key has an existing expiry\n- `GT` -- Set expiry only when the new expiry is greater than current one\n- `LT` -- Set expiry only when the new expiry is less than current one\n\nA non-volatile key is treated as an infinite TTL for the purpose of `GT` and `LT`. The `GT`, `LT` and `NX` options are mutually exclusive.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the timeout was set.\n- `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nEXISTS mykey\nEXPIREAT mykey 1293840000\nEXISTS mykey\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added options: `NX`, `XX`, `GT` and `LT`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/expireat/](https://redis.io/commands/expireat/)"
- name: expiretime
  id: expiretime/index
  summary: Returns the absolute Unix timestamp (since January 1, 1970) in seconds at which the given key will expire
  description: "# EXPIRETIME\n\n    EXPIRETIME\n\nSyntax\n\n``` command-syntax\nEXPIRETIME key\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nReturns the absolute Unix timestamp (since January 1, 1970) in seconds at which the given key will expire.\n\nSee also the [`PEXPIRETIME`](../pexpiretime) command which returns the same information with milliseconds resolution.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): Expiration Unix timestamp in seconds, or a negative value in order to signal an error (see the description below).\n\n- The command returns `-1` if the key exists but has no associated expiration time.\n- The command returns `-2` if the key does not exist.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nEXPIREAT mykey 33177117420\nEXPIRETIME mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/expiretime/](https://redis.io/commands/expiretime/)"
- name: failover
  id: failover/index
  summary: This command will start a coordinated failover between the currently-connected-to master and one of its replicas
  description: "# FAILOVER\n\n    FAILOVER\n\nSyntax\n\n``` command-syntax\nFAILOVER [TO host port [FORCE]] [ABORT] [TIMEOUT milliseconds]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThis command will start a coordinated failover between the currently-connected-to master and one of its replicas. The failover is not synchronous, instead a background task will handle coordinating the failover. It is designed to limit data loss and unavailability of the cluster during the failover. This command is analogous to the [`CLUSTER FAILOVER`](../cluster-failover) command for non-clustered Redis and is similar to the failover support provided by sentinel.\n\nThe specific details of the default failover flow are as follows:\n\n1.  The master will internally start a `CLIENT PAUSE WRITE`, which will pause incoming writes and prevent the accumulation of new data in the replication stream.\n2.  The master will monitor its replicas, waiting for a replica to indicate that it has fully consumed the replication stream. If the master has multiple replicas, it will only wait for the first replica to catch up.\n3.  The master will then demote itself to a replica. This is done to prevent any dual master scenarios. NOTE: The master will not discard its data, so it will be able to rollback if the replica rejects the failover request in the next step.\n4.  The previous master will send a special PSYNC request to the target replica, `PSYNC FAILOVER`, instructing the target replica to become a master.\n5.  Once the previous master receives acknowledgement the `PSYNC FAILOVER` was accepted it will unpause its clients. If the PSYNC request is rejected, the master will abort the failover and return to normal.\n\nThe field `master_failover_state` in `INFO replication` can be used to track the current state of the failover, which has the following values:\n\n- `no-failover`: There is no ongoing coordinated failover.\n- `waiting-for-sync`: The master is waiting for the replica to catch up to its replication offset.\n- `failover-in-progress`: The master has demoted itself, and is attempting to hand off ownership to a target replica.\n\nIf the previous master had additional replicas attached to it, they will continue replicating from it as chained replicas. You will need to manually execute a [`REPLICAOF`](../replicaof) on these replicas to start replicating directly from the new master.\n\n## Optional arguments\n\nThe following optional arguments exist to modify the behavior of the failover flow:\n\n- `TIMEOUT` *milliseconds* -- This option allows specifying a maximum time a master will wait in the `waiting-for-sync` state before aborting the failover attempt and rolling back. This is intended to set an upper bound on the write outage the Redis cluster can experience. Failovers typically happen in less than a second, but could take longer if there is a large amount of write traffic or the replica is already behind in consuming the replication stream. If this value is not specified, the timeout can be considered to be \"infinite\".\n\n- `TO` *HOST* *PORT* -- This option allows designating a specific replica, by its host and port, to failover to. The master will wait specifically for this replica to catch up to its replication offset, and then failover to it.\n\n- `FORCE` -- If both the `TIMEOUT` and `TO` options are set, the force flag can also be used to designate that that once the timeout has elapsed, the master should failover to the target replica instead of rolling back. This can be used for a best-effort attempt at a failover without data loss, but limiting write outage.\n\nNOTE: The master will always rollback if the `PSYNC FAILOVER` request is rejected by the target replica.\n\n## Failover abort\n\nThe failover command is intended to be safe from data loss and corruption, but can encounter some scenarios it can not automatically remediate from and may get stuck. For this purpose, the `FAILOVER ABORT` command exists, which will abort an ongoing failover and return the master to its normal state. The command has no side effects if issued in the `waiting-for-sync` state but can introduce multi-master scenarios in the `failover-in-progress` state. If a multi-master scenario is encountered, you will need to manually identify which master has the latest data and designate it as the master and have the other replicas.\n\nNOTE: [`REPLICAOF`](../replicaof) is disabled while a failover is in progress, this is to prevent unintended interactions with the failover that might cause data loss.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if the command was accepted and a coordinated failover is in progress. An error if the operation cannot be executed.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/failover/](https://redis.io/commands/failover/)"
- name: fcall
  id: fcall/index
  summary: 'Time complexity: Depends on the function that is executed'
  description: "# FCALL\n\n    FCALL\n\nSyntax\n\n``` command-syntax\nFCALL function numkeys [key [key ...]] [arg [arg ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nDepends on the function that is executed.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nInvoke a function.\n\nFunctions are loaded to the server with the [`FUNCTION LOAD`](../function-load) command. The first argument is the name of a loaded function.\n\nThe second argument is the number of input key name arguments, followed by all the keys accessed by the function. In Lua, these names of input keys are available to the function as a table that is the callback's first argument.\n\n**Important:** To ensure the correct execution of functions, both in standalone and clustered deployments, all names of keys that a function accesses must be explicitly provided as input key arguments. The function **should only** access keys whose names are given as input arguments. Functions **should never** access keys with programmatically-generated names or based on the contents of data structures stored in the database.\n\nAny additional input argument **should not** represent names of keys. These are regular arguments and are passed in a Lua table as the callback's second argument.\n\nFor more information please refer to the [Redis Programmability](https://redis.io/topics/programmability) and [Introduction to Redis Functions](https://redis.io/topics/functions-intro) pages.\n\n## Examples\n\nThe following example will create a library named `mylib` with a single function, `myfunc`, that returns the first argument it gets.\n\n```\nredis> FUNCTION LOAD \"#!lua name=mylib \\n redis.register_function('myfunc', function(keys, args) return args[1] end)\"\n\"mylib\"\nredis> FCALL myfunc 0 hello\n\"hello\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/fcall/](https://redis.io/commands/fcall/)"
- name: fcall_ro
  id: fcall_ro/index
  summary: 'Time complexity: Depends on the function that is executed'
  description: "# FCALL_RO\n\n    FCALL_RO\n\nSyntax\n\n``` command-syntax\nFCALL_RO function numkeys [key [key ...]] [arg [arg ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nDepends on the function that is executed.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nThis is a read-only variant of the [`FCALL`](../fcall) command that cannot execute commands that modify data.\n\nFor more information about when to use this command vs [`FCALL`](../fcall), please refer to [Read-only scripts](https://redis.io/docs/manual/programmability/#read-only_scripts).\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/fcall_ro/](https://redis.io/commands/fcall_ro/)"
- name: flushall
  id: flushall/index
  summary: Delete all the keys of all the existing databases, not just the currently selected one
  description: "# FLUSHALL\n\n    FLUSHALL\n\nSyntax\n\n``` command-syntax\nFLUSHALL [ASYNC | SYNC]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the total number of keys in all databases\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`, `@dangerous`,\n\nDelete all the keys of all the existing databases, not just the currently selected one. This command never fails.\n\nBy default, `FLUSHALL` will synchronously flush all the databases. Starting with Redis 6.2, setting the **lazyfree-lazy-user-flush** configuration directive to \"yes\" changes the default flush mode to asynchronous.\n\nIt is possible to use one of the following modifiers to dictate the flushing mode explicitly:\n\n- `ASYNC`: flushes the databases asynchronously\n- `SYNC`: flushes the databases synchronously\n\nNote: an asynchronous `FLUSHALL` command only deletes keys that were present at the time the command was invoked. Keys created during an asynchronous flush will be unaffected.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Behavior change history\n\n- `>= 6.2.0`: Default flush behavior now configurable by the **lazyfree-lazy-user-flush** configuration directive.\n\n## History\n\n- Starting with Redis version 4.0.0: Added the `ASYNC` flushing mode modifier.\n- Starting with Redis version 6.2.0: Added the `SYNC` flushing mode modifier.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/flushall/](https://redis.io/commands/flushall/)"
- name: flushdb
  id: flushdb/index
  summary: Delete all the keys of the currently selected DB
  description: "# FLUSHDB\n\n    FLUSHDB\n\nSyntax\n\n``` command-syntax\nFLUSHDB [ASYNC | SYNC]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of keys in the selected database\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`, `@dangerous`,\n\nDelete all the keys of the currently selected DB. This command never fails.\n\nBy default, `FLUSHDB` will synchronously flush all keys from the database. Starting with Redis 6.2, setting the **lazyfree-lazy-user-flush** configuration directive to \"yes\" changes the default flush mode to asynchronous.\n\nIt is possible to use one of the following modifiers to dictate the flushing mode explicitly:\n\n- `ASYNC`: flushes the database asynchronously\n- `SYNC`: flushes the database synchronously\n\nNote: an asynchronous `FLUSHDB` command only deletes keys that were present at the time the command was invoked. Keys created during an asynchronous flush will be unaffected.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Behavior change history\n\n- `>= 6.2.0`: Default flush behavior now configurable by the **lazyfree-lazy-user-flush** configuration directive.\n\n## History\n\n- Starting with Redis version 4.0.0: Added the `ASYNC` flushing mode modifier.\n- Starting with Redis version 6.2.0: Added the `SYNC` flushing mode modifier.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/flushdb/](https://redis.io/commands/flushdb/)"
- name: ft._list
  id: ft._list/index
  summary: Returns a list of all existing indexes
  description: "# FT.\\_LIST\n\n    FT._LIST\n\nSyntax\n\n``` command-syntax\nFT._LIST\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 2.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nReturns a list of all existing indexes.\n\nTemporary command\n\nThe prefix `_` in the command indicates, this is a temporary command.\n\nIn the future, a [`SCAN`](../scan) type of command will be added, for use when a database contains a large number of indices.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with index names.\n\n## Examples\n\n``` chroma\nFT._LIST1)\"idx\"2)\"movies\"3)\"imdb\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.\\_list/](https://redis.io/commands/ft._list/)"
- name: ft.aggregate
  id: ft.aggregate/index
  summary: is index name against which the query is executed
  description: "# FT.AGGREGATE\n\n    FT.AGGREGATE\n\nSyntax\n\n``` command-syntax\nFT.AGGREGATE index query \n  [VERBATIM] \n  [ LOAD count field [field ...]] \n  [TIMEOUT timeout] \n  [LOAD *] \n  [ GROUPBY nargs property [property ...] [ REDUCE function nargs arg [arg ...] [AS name] [ REDUCE function nargs arg [arg ...] [AS name] ...]] \n  [ GROUPBY nargs property [property ...] [ REDUCE function nargs arg [arg ...] [AS name] [ REDUCE function nargs arg [arg ...] [AS name] ...]] ...]] \n  [ SORTBY nargs [ property ASC | DESC [ property ASC | DESC ...]] [MAX num]] \n  [ APPLY expression AS name [ APPLY expression AS name ...]] \n  [ LIMIT offset num] \n  [FILTER filter] \n  [ WITHCURSOR [COUNT read_size] [MAXIDLE idle_time]] \n  [ PARAMS nargs name value [ name value ...]] \n  [DIALECT dialect]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.1.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nRun a search query on an index, and perform aggregate transformations on the results, extracting statistics etc from them\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name against which the query is executed. You must first create the index using [`FT.CREATE`](../ft.create).\n\n`query`\n\nis base filtering query that retrieves the documents. It follows the exact same syntax as the search query, including filters, unions, not, optional, and so on.\n\n## Optional arguments\n\n`VERBATIM`\n\nif set, does not try to use stemming for query expansion but searches the query terms verbatim.\n\n`LOAD {nargs} {identifier} AS {property} …`\n\nloads document attributes from the source document.\n\n- `identifier` is either an attribute name for hashes and JSON or a JSON Path expression for JSON.\n- `property` is the optional name used in the result. If it is not provided, the `identifier` is used. This should be avoided.\n- If `*` is used as `nargs`, all attributes in a document are loaded.\n\nAttributes needed for aggregations should be stored as `SORTABLE`, where they are available to the aggregation pipeline with very low latency. `LOAD` hurts the performance of aggregate queries considerably because every processed record needs to execute the equivalent of [`HMGET`](../hmget) against a Redis key, which when executed over millions of keys, amounts to high processing times.\n\n`GROUPBY {nargs} {property}`\n\ngroups the results in the pipeline based on one or more properties. Each group should have at least one *reducer*, a function that handles the group entries, either counting them, or performing multiple aggregate operations (see below).\n\n`REDUCE {func} {nargs} {arg} … [AS {name}]`\n\nreduces the matching results in each group into a single record, using a reduction function. For example, `COUNT` counts the number of records in the group. The reducers can have their own property names using the `AS {name}` optional argument. If a name is not given, the resulting name will be the name of the reduce function and the group properties. For example, if a name is not given to `COUNT_DISTINCT` by property `@foo`, the resulting name will be `count_distinct(@foo)`.\n\nSee [Supported GROUPBY reducers](https://redis.io/docs/stack/search/reference/aggregations/#supported-groupby-reducers) for more details.\n\n`SORTBY {nargs} {property} {ASC|DESC} [MAX {num}]`\n\nsorts the pipeline up until the point of `SORTBY`, using a list of properties.\n\n- By default, sorting is ascending, but `ASC` or `DESC ` can be added for each property.\n- `nargs` is the number of sorting parameters, including `ASC` and `DESC`, for example, `SORTBY 4 @foo ASC @bar DESC`.\n- `MAX` is used to optimized sorting, by sorting only for the n-largest elements. Although it is not connected to `LIMIT`, you usually need just `SORTBY … MAX` for common queries.\n\nAttributes needed for `SORTBY` should be stored as `SORTABLE` to be available with very low latency.\n\n`APPLY {expr} AS {name}`\n\napplies a 1-to-1 transformation on one or more properties and either stores the result as a new property down the pipeline or replaces any property using this transformation.\n\n`expr` is an expression that can be used to perform arithmetic operations on numeric properties, or functions that can be applied on properties depending on their types (see below), or any combination thereof. For example, `APPLY \"sqrt(@foo)/log(@bar) + 5\" AS baz` evaluates this expression dynamically for each record in the pipeline and store the result as a new property called `baz`, which can be referenced by further `APPLY`/`SORTBY`/`GROUPBY`/`REDUCE` operations down the pipeline.\n\n`LIMIT {offset} {num}`\n\nlimits the number of results to return just `num` results starting at index `offset` (zero-based). It is much more efficient to use `SORTBY … MAX` if you are interested in just limiting the output of a sort operation. If a key expires during the query, an attempt to `load` the key's value will return a null array.\n\nHowever, limit can be used to limit results without sorting, or for paging the n-largest results as determined by `SORTBY MAX`. For example, getting results 50-100 of the top 100 results is most efficiently expressed as `SORTBY 1 @foo MAX 100 LIMIT 50 50`. Removing the `MAX` from `SORTBY` results in the pipeline sorting *all* the records and then paging over results 50-100.\n\n`FILTER {expr}`\n\nfilters the results using predicate expressions relating to values in each result. They are applied post query and relate to the current state of the pipeline.\n\n`WITHCURSOR {COUNT} {read_size} [MAXIDLE {idle_time}]`\n\nScan part of the results with a quicker alternative than `LIMIT`. See [Cursor API](https://redis.io/docs/stack/search/reference/aggregations/#cursor-api) for more details.\n\n`TIMEOUT {milliseconds}`\n\nif set, overrides the timeout parameter of the module.\n\n`PARAMS {nargs} {name} {value}`\n\ndefines one or more value parameters. Each parameter has a name and a value.\n\nYou can reference parameters in the `query` by a `$`, followed by the parameter name, for example, `$user`. Each such reference in the search query to a parameter name is substituted by the corresponding parameter value. For example, with parameter definition `PARAMS 4 lon 29.69465 lat 34.95126`, the expression `@loc:[$lon $lat 10 km]` is evaluated to `@loc:[29.69465 34.95126 10 km]`. You cannot reference parameters in the query string where concrete values are not allowed, such as in field names, for example, `@loc`. To use `PARAMS`, set `DIALECT` to `2` or greater than `2`.\n\n`DIALECT {dialect_version}`\n\nselects the dialect version under which to execute the query. If not specified, the query will execute under the default dialect version set during module initial loading or via [`FT.CONFIG SET`](../ft.config-set) command.\n\n## Return\n\nFT.AGGREGATE returns an array reply where each row is an array reply and represents a single aggregate result. The [integer reply](https://redis.io/docs/reference/protocol-spec/#resp-integers) at position `1` does not represent a valid value.\n\n### Return multiple values\n\nSee [Return multiple values](../ft.search#return-multiple-values) in [`FT.SEARCH`](../ft.search) The `DIALECT` can be specified as a parameter in the FT.AGGREGATE command. If it is not specified, the `DEFAULT_DIALECT` is used, which can be set using [`FT.CONFIG SET`](../ft.config-set) or by passing it as an argument to the `redisearch` module when it is loaded. For example, with the following document and index:\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc:1 $ '[{\"arr\": [1, 2, 3]}, {\"val\": \"hello\"}, {\"val\": \"world\"}]'\nOK\n127.0.0.1:6379> FT.CREATE idx ON JSON PREFIX 1 doc: SCHEMA $..arr AS arr NUMERIC $..val AS val TEXT\nOK\n```\n\nNotice the different replies, with and without `DIALECT 3`:\n\n``` chroma\n127.0.0.1:6379> FT.AGGREGATE idx * LOAD 2 arr val \n1) (integer) 1\n2) 1) \"arr\"\n   2) \"[1,2,3]\"\n   3) \"val\"\n   4) \"hello\"\n127.0.0.1:6379> FT.AGGREGATE idx * LOAD 2 arr val DIALECT 3\n1) (integer) 1\n2) 1) \"arr\"\n   2) \"[[1,2,3]]\"\n   3) \"val\"\n   4) \"[\\\"hello\\\",\\\"world\\\"]\"\n```\n\n## Complexity\n\nNon-deterministic. Depends on the query and aggregations performed, but it is usually linear to the number of results returned.\n\n## Examples\n\n**Sort page visits by day**\n\nFind visits to the page `about.html`, group them by the day of the visit, count the number of visits, and sort them by day.\n\n``` chroma\nFT.AGGREGATE idx \"@url:\\\"about.html\\\"\"\n    APPLY \"day(@timestamp)\" AS day\n    GROUPBY 2 @day @country\n      REDUCE count 0 AS num_visits\n    SORTBY 4 @day\n```\n\n**Find most books ever published**\n\nFind most books ever published in a single year.\n\n``` chroma\nFT.AGGREGATE books-idx *\n    GROUPBY 1 @published_year\n      REDUCE COUNT 0 AS num_published\n    GROUPBY 0\n      REDUCE MAX 1 @num_published AS max_books_published_per_year\n```\n\n**Reduce all results**\n\nThe last example used `GROUPBY 0`. Use `GROUPBY 0` to apply a `REDUCE` function over all results from the last step of an aggregation pipeline -- this works on both the initial query and subsequent `GROUPBY` operations.\n\nSearch for libraries within 10 kilometers of the longitude -73.982254 and latitude 40.753181 then annotate them with the distance between their location and those coordinates.\n\n``` chroma\n FT.AGGREGATE libraries-idx \"@location:[-73.982254 40.753181 10 km]\"\n    LOAD 1 @location\n    APPLY \"geodistance(@location, -73.982254, 40.753181)\"\n```\n\nHere, we needed to use `LOAD` to pre-load the `@location` attribute because it is a GEO attribute.\n\nNext, count GitHub events by user (actor), to produce the most active users.\n\n``` chroma\n127.0.0.1:6379> FT.AGGREGATE gh \"*\" GROUPBY 1 @actor REDUCE COUNT 0 AS num SORTBY 2 @num DESC MAX 10\n 1) (integer) 284784\n 2) 1) \"actor\"\n    2) \"lombiqbot\"\n    3) \"num\"\n    4) \"22197\"\n 3) 1) \"actor\"\n    2) \"codepipeline-test\"\n    3) \"num\"\n    4) \"17746\"\n 4) 1) \"actor\"\n    2) \"direwolf-github\"\n    3) \"num\"\n    4) \"10683\"\n 5) 1) \"actor\"\n    2) \"ogate\"\n    3) \"num\"\n    4) \"6449\"\n 6) 1) \"actor\"\n    2) \"openlocalizationtest\"\n    3) \"num\"\n    4) \"4759\"\n 7) 1) \"actor\"\n    2) \"digimatic\"\n    3) \"num\"\n    4) \"3809\"\n 8) 1) \"actor\"\n    2) \"gugod\"\n    3) \"num\"\n    4) \"3512\"\n 9) 1) \"actor\"\n    2) \"xdzou\"\n    3) \"num\"\n    4) \"3216\"\n[10](10)) 1) \"actor\"\n    2) \"opstest\"\n    3) \"num\"\n    4) \"2863\"\n11) 1) \"actor\"\n    2) \"jikker\"\n    3) \"num\"\n    4) \"2794\"\n(0.59s)\n```\n\n## See also\n\n[`FT.CONFIG SET`](../ft.config-set) \\| [`FT.SEARCH`](../ft.search)\n\n## Related topics\n\n- [Aggregations](https://redis.io/docs/stack/search/reference/aggregations)\n- [RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.aggregate/](https://redis.io/commands/ft.aggregate/)"
- name: ft.aliasadd
  id: ft.aliasadd/index
  summary: is alias to be added to an index
  description: "# FT.ALIASADD\n\n    FT.ALIASADD\n\nSyntax\n\n``` command-syntax\nFT.ALIASADD alias index\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nAdd an alias to an index\n\n[Examples](#examples)\n\n## Required arguments\n\n`alias index`\n\nis alias to be added to an index.\n\nIndexes can have more than one alias, but an alias cannot refer to another alias.\n\nFT.ALISSADD allows administrators to transparently redirect application queries to alternative indexes.\n\n## Return\n\nFT.ALIASADD returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Add an alias to an index**\n\nAdd an alias to an index.\n\n``` chroma\n127.0.0.1:6379> FT.ALIASADD alias idx\nOK\n```\n\nAttempting to add the same alias returns a message that the alias already exists.\n\n``` chroma\n127.0.0.1:6379> FT.ALIASADD alias idx\n(error) Alias already exists\n```\n\n## See also\n\n[`FT.ALIASDEL`](../ft.aliasdel) \\| [`FT.ALIASUPDATE`](../ft.aliasupdate)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.aliasadd/](https://redis.io/commands/ft.aliasadd/)"
- name: ft.aliasdel
  id: ft.aliasdel/index
  summary: is index alias to be removed
  description: "# FT.ALIASDEL\n\n    FT.ALIASDEL\n\nSyntax\n\n``` command-syntax\nFT.ALIASDEL alias\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nRemove an alias from an index\n\n[Examples](#examples)\n\n## Required arguments\n\n`alias`\n\nis index alias to be removed.\n\n## Return\n\nFT.ALIASDEL returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Remove an alias from an index**\n\nRemove an alias from an index.\n\n``` chroma\n127.0.0.1:6379> FT.ALIASDEL alias\nOK\n```\n\n## See also\n\n[`FT.ALIASADD`](../ft.aliasadd) \\| [`FT.ALIASUPDATE`](../ft.aliasupdate)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.aliasdel/](https://redis.io/commands/ft.aliasdel/)"
- name: ft.aliasupdate
  id: ft.aliasupdate/index
  summary: Add an alias to an index
  description: "# FT.ALIASUPDATE\n\n    FT.ALIASUPDATE\n\nSyntax\n\n``` command-syntax\nFT.ALIASUPDATE alias index\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nAdd an alias to an index. If the alias is already associated with another index, FT.ALIASUPDATE removes the alias association with the previous index.\n\n[Examples](#examples)\n\n## Required arguments\n\n`alias index`\n\nis alias to be added to an index.\n\n## Return\n\nFT.ALIASUPDATE returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Update an index alias**\n\nUpdate the alias of an index.\n\n``` chroma\n127.0.0.1:6379> FT.ALIASUPDATE alias idx\nOK\n```\n\n## See also\n\n[`FT.ALIASADD`](../ft.aliasadd) \\| [`FT.ALIASDEL`](../ft.aliasdel)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.aliasupdate/](https://redis.io/commands/ft.aliasupdate/)"
- name: ft.alter
  id: ft.alter/index
  summary: Add a new attribute to the index
  description: "# FT.ALTER\n\n    FT.ALTER\n\nSyntax\n\n``` command-syntax\nFT.ALTER {index} [SKIPINITIALSCAN] SCHEMA ADD {attribute} {options} ...\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(N) where N is the number of keys in the keyspace\n\nAdd a new attribute to the index. Adding an attribute to the index causes any future document updates to use the new attribute when indexing and reindexing existing documents.\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name to create.\n\n`SKIPINITIALSCAN`\n\nif set, does not scan and index.\n\n`SCHEMA ADD {attribute} {options} ...`\n\nafter the SCHEMA keyword, declares which fields to add:\n\n- `attribute` is attribute to add.\n- `options` are attribute options. Refer to [`FT.CREATE`](../ft.create) for more information.\n\n**Note:**\n\nDepending on how the index was created, you may be limited by the number of additional text attributes which can be added to an existing index. If the current index contains fewer than 32 text attributes, then `SCHEMA ADD` will only be able to add attributes up to 32 total attributes (meaning that the index will only ever be able to contain 32 total text attributes). If you wish for the index to contain more than 32 attributes, create it with the `MAXTEXTFIELDS` option.\n\n## Return\n\nFT.CREATE returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Alter an index**\n\n``` chroma\n127.0.0.1:6379> FT.ALTER idx SCHEMA ADD id2 NUMERIC SORTABLE\nOK\n```\n\n## See also\n\n[`FT.CREATE`](../ft.create)\n\n## Related topics\n\n- [RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.alter/](https://redis.io/commands/ft.alter/)"
- name: ft.config get
  id: ft.config-get/index
  summary: is name of the configuration option, or '*' for all
  description: "# FT.CONFIG\n\n    FT.CONFIG GET\n\nSyntax\n\n``` command-syntax\nFT.CONFIG GET option\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nRetrieve configuration options\n\n[Examples](#examples)\n\n## Required arguments\n\n`option`\n\nis name of the configuration option, or '\\*' for all.\n\n## Return\n\nFT.CONFIG GET returns an array reply of the configuration name and value.\n\n## Examples\n\n**Retrieve configuration options**\n\n``` chroma\n127.0.0.1:6379> FT.CONFIG GET TIMEOUT\n1) 1) TIMEOUT\n   2) 42\n```\n\n``` chroma\n127.0.0.1:6379> FT.CONFIG GET *\n 1) 1) EXTLOAD\n    2) (nil)\n 2) 1) SAFEMODE\n    2) true\n 3) 1) CONCURRENT_WRITE_MODE\n    2) false\n 4) 1) NOGC\n    2) false\n 5) 1) MINPREFIX\n    2) 2\n 6) 1) FORKGC_SLEEP_BEFORE_EXIT\n    2) 0\n 7) 1) MAXDOCTABLESIZE\n    2) 1000000\n 8) 1) MAXSEARCHRESULTS\n    2) 1000000\n 9) 1) MAXAGGREGATERESULTS\n    2) unlimited\n10) 1) MAXEXPANSIONS\n    2) 200\n11) 1) MAXPREFIXEXPANSIONS\n    2) 200\n12) 1) TIMEOUT\n    2) 42\n13) 1) INDEX_THREADS\n    2) 8\n14) 1) SEARCH_THREADS\n    2) 20\n15) 1) FRISOINI\n    2) (nil)\n16) 1) ON_TIMEOUT\n    2) return\n17) 1) GCSCANSIZE\n    2) 100\n18) 1) MIN_PHONETIC_TERM_LEN\n    2) 3\n19) 1) GC_POLICY\n    2) fork\n20) 1) FORK_GC_RUN_INTERVAL\n    2) 30\n21) 1) FORK_GC_CLEAN_THRESHOLD\n    2) 100\n22) 1) FORK_GC_RETRY_INTERVAL\n    2) 5\n23) 1) FORK_GC_CLEAN_NUMERIC_EMPTY_NODES\n    2) true\n24) 1) _FORK_GC_CLEAN_NUMERIC_EMPTY_NODES\n    2) true\n25) 1) _MAX_RESULTS_TO_UNSORTED_MODE\n    2) 1000\n26) 1) UNION_ITERATOR_HEAP\n    2) 20\n27) 1) CURSOR_MAX_IDLE\n    2) 300000\n28) 1) NO_MEM_POOLS\n    2) false\n29) 1) PARTIAL_INDEXED_DOCS\n    2) false\n30) 1) UPGRADE_INDEX\n    2) Upgrade config for upgrading\n31) 1) _NUMERIC_COMPRESS\n    2) false\n32) 1) _FREE_RESOURCE_ON_THREAD\n    2) true\n33) 1) _PRINT_PROFILE_CLOCK\n    2) true\n34) 1) RAW_DOCID_ENCODING\n    2) false\n35) 1) _NUMERIC_RANGES_PARENTS\n    2) 0\n```\n\n## See also\n\n[`FT.CONFIG SET`](../ft.config-set) \\| [`FT.CONFIG HELP`](../ft.config-help)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.config-get/](https://redis.io/commands/ft.config-get/)"
- name: ft.config set
  id: ft.config-set/index
  summary: Set the value of a RediSearch configuration parameter
  description: "# FT.CONFIG\n\n    FT.CONFIG SET\n\nSyntax\n\n``` command-syntax\nFT.CONFIG SET option value\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nSet the value of a RediSearch configuration parameter.\n\nValues set using `FT.CONFIG SET` are not persisted after server restart.\n\nRediSearch configuration parameters are detailed in [Configuration parameters](https://redis.io/docs/stack/search/configuring).\n\nNote\n\nAs detailed in the link above, not all RediSearch configuration parameters can be set at runtime.\n\n[Examples](#examples)\n\n## Required arguments\n\n`option`\n\nis name of the configuration option, or '\\*' for all.\n\n`value`\n\nis value of the configuration option.\n\n## Return\n\nFT.CONFIG SET returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Set runtime configuration options**\n\n``` chroma\n127.0.0.1:6379> FT.CONFIG SET TIMEOUT 42\nOK\n```\n\n## See also\n\n[`FT.CONFIG GET`](../ft.config-get) \\| [`FT.CONFIG HELP`](../ft.config-help)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.config-set/](https://redis.io/commands/ft.config-set/)"
- name: ft.create
  id: ft.create/index
  summary: Create an index with the given specification
  description: "# FT.CREATE\n\n    FT.CREATE\n\nSyntax\n\n``` command-syntax\nFT.CREATE index \n  [ON HASH | JSON] \n  [PREFIX count prefix [prefix ...]] \n  [FILTER {filter}]\n  [LANGUAGE default_lang] \n  [LANGUAGE_FIELD lang_attribute] \n  [SCORE default_score] \n  [SCORE_FIELD score_attribute] \n  [PAYLOAD_FIELD payload_attribute] \n  [MAXTEXTFIELDS] \n  [TEMPORARY seconds] \n  [NOOFFSETS] \n  [NOHL] \n  [NOFIELDS] \n  [NOFREQS] \n  [STOPWORDS count [stopword ...]] \n  [SKIPINITIALSCAN]\n  SCHEMA field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR [ SORTABLE [UNF]] \n  [NOINDEX] [ field_name [AS alias] TEXT | TAG | NUMERIC | GEO | VECTOR [ SORTABLE [UNF]] [NOINDEX] ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(K) at creation where K is the number of fields, O(N) if scanning the keyspace is triggered, where N is the number of keys in the keyspace\n\n## Description\n\nCreate an index with the given specification. For usage, see [Examples](#examples).\n\n## Required arguments\n\n`index`\n\nis index name to create. If it exists, the old specification is overwritten.\n\n`SCHEMA {identifier} AS {attribute} {attribute type} {options...`\n\nafter the SCHEMA keyword, declares which fields to index:\n\n- `{identifier}` for hashes, is a field name within the hash. For JSON, the identifier is a JSON Path expression.\n\n- `AS {attribute}` defines the attribute associated to the identifier. For example, you can use this feature to alias a complex JSONPath expression with more memorable (and easier to type) name.\n\nField types are:\n\n- `TEXT` - Allows full-text search queries against the value in this attribute.\n\n- `TAG` - Allows exact-match queries, such as categories or primary keys, against the value in this attribute. For more information, see [Tag Fields](https://redis.io/docs/stack/search/reference/tags).\n\n- `NUMERIC` - Allows numeric range queries against the value in this attribute. See [query syntax docs](https://redis.io/docs/stack/search/reference/query_syntax) for details on how to use numeric ranges.\n\n- `GEO` - Allows geographic range queries against the value in this attribute. The value of the attribute must be a string containing a longitude (first) and latitude separated by a comma.\n\n- `VECTOR` - Allows vector similarity queries against the value in this attribute. For more information, see [Vector Fields](https://redis.io/docs/stack/search/reference/vectors).\n\nField options are:\n\n- `SORTABLE` - `NUMERIC`, `TAG`, `TEXT`, or `GEO` attributes can have an optional **SORTABLE** argument. As the user [sorts the results by the value of this attribute](https://redis.io/docs/stack/search/reference/sorting), the results are available with very low latency. Note that his adds memory overhead, so consider not declaring it on large text attributes. You can sort an attribute without the `SORTABLE` option, but the latency is not as good as with `SORTABLE`.\n\n- `UNF` - By default, for hashes (not with JSON) `SORTABLE` applies a normalization to the indexed value (characters set to lowercase, removal of diacritics). When using the unnormalized form (UNF), you can disable the normalization and keep the original form of the value. With JSON, `UNF` is implicit with `SORTABLE` (normalization is disabled).\n\n- `NOSTEM` - Text attributes can have the NOSTEM argument that disables stemming when indexing its values. This may be ideal for things like proper names.\n\n- `NOINDEX` - Attributes can have the `NOINDEX` option, which means they will not be indexed. This is useful in conjunction with `SORTABLE`, to create attributes whose update using PARTIAL will not cause full reindexing of the document. If an attribute has NOINDEX and doesn't have SORTABLE, it will just be ignored by the index.\n\n- `PHONETIC {matcher}` - Declaring a text attribute as `PHONETIC` will perform phonetic matching on it in searches by default. The obligatory {matcher} argument specifies the phonetic algorithm and language used. The following matchers are supported:\n\n  - `dm:en` - Double metaphone for English\n  - `dm:fr` - Double metaphone for French\n  - `dm:pt` - Double metaphone for Portuguese\n  - `dm:es` - Double metaphone for Spanish\n\n  For more information, see [Phonetic Matching](https://redis.io/docs/stack/search/reference/phonetic_matching).\n\n- `WEIGHT {weight}` for `TEXT` attributes, declares the importance of this attribute when calculating result accuracy. This is a multiplication factor, and defaults to 1 if not specified.\n\n- `SEPARATOR {sep}` for `TAG` attributes, indicates how the text contained in the attribute is to be split into individual tags. The default is `,`. The value must be a single character.\n\n- `CASESENSITIVE` for `TAG` attributes, keeps the original letter cases of the tags. If not specified, the characters are converted to lowercase.\n\n- `WITHSUFFIXTRIE` for `TEXT` and `TAG` attributes, keeps a suffix trie with all terms which match the suffix. It is used to optimize `contains` (*foo*) and `suffix` (\\*foo) queries. Otherwise, a brute-force search on the trie is performed. If suffix trie exists for some fields, these queries will be disabled for other fields.\n\n## Optional arguments\n\n`ON {data_type}`\n\ncurrently supports HASH (default) and JSON. To index JSON, you must have the [RedisJSON](https://redis.io/docs/stack/json) module installed.\n\n`PREFIX {count} {prefix}`\n\ntells the index which keys it should index. You can add several prefixes to index. Because the argument is optional, the default is `*` (all keys).\n\n`FILTER {filter}`\n\nis a filter expression with the full RediSearch aggregation expression language. It is possible to use `@__key` to access the key that was just added/changed. A field can be used to set field name by passing `'FILTER @indexName==\"myindexname\"'`.\n\n`LANGUAGE {default_lang}`\n\nif set, indicates the default language for documents in the index. Default is English.\n\n`LANGUAGE_FIELD {lang_attribute}`\n\nis document attribute set as the document language.\n\nA stemmer is used for the supplied language during indexing. If an unsupported language is sent, the command returns an error. The supported languages are Arabic, Basque, Catalan, Danish, Dutch, English, Finnish, French, German, Greek, Hungarian, Indonesian, Irish, Italian, Lithuanian, Nepali, Norwegian, Portuguese, Romanian, Russian, Spanish, Swedish, Tamil, Turkish, and Chinese.\n\nWhen adding Chinese language documents, set `LANGUAGE chinese` for the indexer to properly tokenize the terms. If you use the default language, then search terms are extracted based on punctuation characters and whitespace. The Chinese language tokenizer makes use of a segmentation algorithm (via [Friso](https://github.com/lionsoul2014/friso)), which segments text and checks it against a predefined dictionary. See [Stemming](https://redis.io/docs/stack/search/reference/stemming) for more information.\n\n`SCORE {default_score}`\n\nis default score for documents in the index. Default score is 1.0.\n\n`SCORE_FIELD {score_attribute}`\n\nis document attribute that you use as the document rank based on the user ranking. Ranking must be between 0.0 and 1.0. If not set, the default score is 1.\n\n`PAYLOAD_FIELD {payload_attribute}`\n\nis document attribute that you use as a binary safe payload string to the document that can be evaluated at query time by a custom scoring function or retrieved to the client.\n\n`MAXTEXTFIELDS`\n\nforces RediSearch to encode indexes as if there were more than 32 text attributes, which allows you to add additional attributes (beyond 32) using [`FT.ALTER`](../ft.alter). For efficiency, RediSearch encodes indexes differently if they are created with less than 32 text attributes.\n\n`NOOFFSETS`\n\ndoes not store term offsets for documents. It saves memory, but does not allow exact searches or highlighting. It implies `NOHL`.\n\n`TEMPORARY {seconds}`\n\ncreates a lightweight temporary index that expires after a specified period of inactivity, in seconds. The internal idle timer is reset whenever the index is searched or added to. Because such indexes are lightweight, you can create thousands of such indexes without negative performance implications and, therefore, you should consider using `SKIPINITIALSCAN` to avoid costly scanning.\n\nWarning\n\nWhen temporary indexes expire, they drop all the records associated with them. [`FT.DROPINDEX`](../ft.dropindex) was introduced with a default of not deleting docs and a `DD` flag that enforced deletion. However, for temporary indexes, documents are deleted along with the index. Historically, RediSearch used an FT.ADD command, which made a connection between the document and the index. Then, FT.DROP, also a hystoric command, deleted documents by default. In version 2.x, RediSearch indexes hashes and JSONs, and the dependency between the index and documents no longer exists.\n\n`NOHL`\n\nconserves storage space and memory by disabling highlighting support. If set, the corresponding byte offsets for term positions are not stored. `NOHL` is also implied by `NOOFFSETS`.\n\n`NOFIELDS`\n\ndoes not store attribute bits for each term. It saves memory, but it does not allow filtering by specific attributes.\n\n`NOFREQS`\n\navoids saving the term frequencies in the index. It saves memory, but does not allow sorting based on the frequencies of a given term within the document.\n\n`STOPWORDS {count}`\n\nsets the index with a custom stopword list, to be ignored during indexing and search time. `{count}` is the number of stopwords, followed by a list of stopword arguments exactly the length of `{count}`.\n\nIf not set, FT.CREATE takes the default list of stopwords. If `{count}` is set to 0, the index does not have stopwords.\n\n`SKIPINITIALSCAN`\n\nif set, does not scan and index.\n\n**Notes:**\n\n- **Attribute number limits:** RediSearch supports up to 1024 attributes per schema, out of which at most 128 can be TEXT attributes. On 32 bit builds, at most 64 attributes can be TEXT attributes. The more attributes you have, the larger your index, as each additional 8 attributes require one extra byte per index record to encode. You can always use the `NOFIELDS` option and not encode attribute information into the index, for saving space, if you do not need filtering by text attributes. This will still allow filtering by numeric and geo attributes.\n\n- **Running in clustered databases:** When having several indices in a clustered database, you need to make sure the documents you want to index reside on the same shard as the index. You can achieve this by having your documents tagged by the index name.\n\n  ``` chroma\n  127.0.0.1:6379> HSET doc:1{idx} ...\n  127.0.0.1:6379> FT.CREATE idx ... PREFIX 1 doc: ...\n  ```\n\n  When Running RediSearch in a clustered database, you can span the index across shards using [RSCoordinator](https://github.com/RedisLabsModules/RSCoordinator). In this case the above does not apply.\n\n## Return\n\nFT.CREATE returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Create an index**\n\nCreate an index that stores the title, publication date, and categories of blog post hashes whose keys start with `blog:post:` (for example, `blog:post:1`).\n\n``` chroma\n127.0.0.1:6379> FT.CREATE idx ON HASH PREFIX 1 blog:post: SCHEMA title TEXT SORTABLE published_at NUMERIC SORTABLE category TAG SORTABLE\nOK\n```\n\nIndex the `sku` attribute from a hash as both a `TAG` and as `TEXT`:\n\n``` chroma\n127.0.0.1:6379> FT.CREATE idx ON HASH PREFIX 1 blog:post: SCHEMA sku AS sku_text TEXT sku AS sku_tag TAG SORTABLE\n```\n\nIndex two different hashes, one containing author data and one containing books, in the same index:\n\n``` chroma\n127.0.0.1:6379> FT.CREATE author-books-idx ON HASH PREFIX 2 author:details: book:details: SCHEMA\nauthor_id TAG SORTABLE author_ids TAG title TEXT name TEXT\n```\n\nIn this example, keys for author data use the key pattern `author:details:<id>` while keys for book data use the pattern `book:details:<id>`.\n\n**Index a JSON document using a JSON Path expression**\n\nIndex authors whose names start with G.\n\n``` chroma\n127.0.0.1:6379> FT.CREATE g-authors-idx ON HASH PREFIX 1 author:details FILTER 'startswith(@name, \"G\")' SCHEMA name TEXT\n```\n\nIndex only books that have a subtitle.\n\n``` chroma\n127.0.0.1:6379> FT.CREATE subtitled-books-idx ON HASH PREFIX 1 book:details FILTER '@subtitle != \"\"' SCHEMA title TEXT\n```\n\nIndex books that have a \"categories\" attribute where each category is separated by a `;` character.\n\n``` chroma\n127.0.0.1:6379> FT.CREATE books-idx ON HASH PREFIX 1 book:details FILTER SCHEMA title TEXT categories TAG SEPARATOR \";\"\n```\n\nIndex a JSON document using a JSON Path expression.\n\n``` chroma\n127.0.0.1:6379> FT.CREATE idx ON JSON SCHEMA $.title AS title TEXT $.categories AS categories TAG\n```\n\n## See also\n\n[`FT.ALTER`](../ft.alter) \\| [`FT.DROPINDEX`](../ft.dropindex)\n\n## Related topics\n\n- [RediSearch](https://redis.io/docs/stack/search)\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Friso](https://github.com/lionsoul2014/friso)\n- [Stemming](https://redis.io/docs/stack/search/reference/stemming)\n- [Phonetic Matching](https://redis.io/docs/stack/search/reference/phonetic_matching)\n- [RSCoordinator](https://github.com/RedisLabsModules/RSCoordinator)\n\n## History\n\n- Starting with Redis version 2.0.0: Added `PAYLOAD_FIELD` argument for backward support of `FT.SEARCH` deprecated `WITHPAYLOADS` argument\n- Starting with Redis version 2.0.0: Deprecated `PAYLOAD_FIELD` argument\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.create/](https://redis.io/commands/ft.create/)"
- name: ft.cursor del
  id: ft.cursor-del/index
  summary: is index name
  description: "# FT.CURSOR\n\n    FT.CURSOR DEL\n\nSyntax\n\n``` command-syntax\nFT.CURSOR DEL index cursor_id\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.1.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nDelete a cursor\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name.\n\n`cursor_id`\n\nis id of the cursor.\n\n## Returns\n\nFT.CURSOR DEL returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Delete a cursor**\n\n``` chroma\nredis> FT.CURSOR DEL idx 342459320\nOK\n```\n\nCheck that the cursor is deleted.\n\n``` chroma\n127.0.0.1:6379> FT.CURSOR DEL idx 342459320\n(error) Cursor does not exist\n```\n\n## See also\n\n[`FT.CURSOR READ`](../ft.cursor-read)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.cursor-del/](https://redis.io/commands/ft.cursor-del/)"
- name: ft.cursor read
  id: ft.cursor-read/index
  summary: See Cursor API for more details
  description: "# FT.CURSOR\n\n    FT.CURSOR READ\n\nSyntax\n\n``` command-syntax\nFT.CURSOR READ index cursor_id [COUNT read_size]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.1.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nRead next results from an existing cursor\n\n[Examples](#examples)\n\nSee [Cursor API](https://redis.io/docs/stack/search/reference/aggregations/#cursor-api) for more details.\n\n## Required arguments\n\n`index`\n\nis index name.\n\n`cursor_id`\n\nis id of the cursor.\n\n`[COUNT read_size]`\n\nis number of results to read. This parameter overrides `COUNT` specified in [`FT.AGGREGATE`](../ft.aggregate).\n\n## Return\n\nFT.CURSOR DEL returns an array reply where each row is an array reply and represents a single aggregate result.\n\n## Examples\n\n**Read next results from a cursor**\n\n``` chroma\n127.0.0.1:6379> FT.CURSOR READ idx 342459320 COUNT 50\n```\n\n## See also\n\n[`FT.CURSOR DEL`](../ft.cursor-del) \\| [`FT.AGGREGATE`](../ft.aggregate)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.cursor-read/](https://redis.io/commands/ft.cursor-read/)"
- name: ft.dictadd
  id: ft.dictadd/index
  summary: is dictionary name
  description: "# FT.DICTADD\n\n    FT.DICTADD\n\nSyntax\n\n``` command-syntax\nFT.DICTADD dict term [term ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.4.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nAdd terms to a dictionary\n\n[Examples](#examples)\n\n## Required arguments\n\n`dict`\n\nis dictionary name.\n\n`term`\n\nterm to add to the dictionary.\n\n## Return\n\nFT.DICTADD returns an integer reply, the number of new terms that were added.\n\n## Examples\n\n**Add terms to a dictionary**\n\n``` chroma\n127.0.0.1:6379> FT.DICTADD dict foo bar \"hello world\"\n(integer) 3\n```\n\n## See also\n\n[`FT.DICTDEL`](../ft.dictdel) \\| [`FT.DICTDUMP`](../ft.dictdump)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.dictadd/](https://redis.io/commands/ft.dictadd/)"
- name: ft.dictdel
  id: ft.dictdel/index
  summary: is dictionary name
  description: "# FT.DICTDEL\n\n    FT.DICTDEL\n\nSyntax\n\n``` command-syntax\nFT.DICTDEL dict term [term ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.4.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nDelete terms from a dictionary\n\n[Examples](#examples)\n\n## Required arguments\n\n`dict`\n\nis dictionary name.\n\n`term`\n\nterm to delete from the dictionary.\n\n## Return\n\nFT.DICTDEL returns an integer reply, the number of new terms that were deleted.\n\n## Examples\n\n**Delete terms from a dictionary**\n\n``` chroma\n127.0.0.1:6379> FT.DICTDEL dict foo bar \"hello world\"\n(integer) 3\n```\n\n## See also\n\n[`FT.DICTADD`](../ft.dictadd) \\| [`FT.DICTDUMP`](../ft.dictdump)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.dictdel/](https://redis.io/commands/ft.dictdel/)"
- name: ft.dictdump
  id: ft.dictdump/index
  summary: is dictionary name
  description: "# FT.DICTDUMP\n\n    FT.DICTDUMP\n\nSyntax\n\n``` command-syntax\nFT.DICTDUMP dict\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.4.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(N), where N is the size of the dictionary\n\nDump all terms in the given dictionary\n\n[Examples](#examples)\n\n## Required argumemts\n\n`dict`\n\nis dictionary name.\n\n## Return\n\nFT.DICTDUMP returns an array, where each element is term (string).\n\n## Examples\n\n**Dump all terms in the dictionary**\n\n``` chroma\n127.0.0.1:6379> FT.DICTDUMP dict\n1) \"foo\"\n2) \"bar\"\n3) \"hello world\"\n```\n\n## See also\n\n[`FT.DICTADD`](../ft.dictadd) \\| [`FT.DICTDEL`](../ft.dictdel)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.dictdump/](https://redis.io/commands/ft.dictdump/)"
- name: ft.dropindex
  id: ft.dropindex/index
  summary: is full-text index name
  description: "# FT.DROPINDEX\n\n    FT.DROPINDEX\n\nSyntax\n\n``` command-syntax\nFT.DROPINDEX index \n  [DD]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 2.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace\n\nDelete an index\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis full-text index name. You must first create the index using [`FT.CREATE`](../ft.create).\n\n## Optional arguments\n\n`DD`\n\ndrop operation that, if set, deletes the actual document hashes.\n\nBy default, FT.DROPINDEX does not delete the documents associated with the index. Adding the `DD` option deletes the documents as well. If an index creation is still running ([`FT.CREATE`](../ft.create) is running asynchronously), only the document hashes that have already been indexed are deleted. The document hashes left to be indexed remain in the database. To check the completion of the indexing, use [`FT.INFO`](../ft.info).\n\n## Return\n\nFT.DROPINDEX returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Delete an index**\n\n``` chroma\n127.0.0.1:6379> FT.DROPINDEX idx DD\nOK\n```\n\n## See also\n\n[`FT.CREATE`](../ft.create) \\| [`FT.INFO`](../ft.info)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.dropindex/](https://redis.io/commands/ft.dropindex/)"
- name: ft.explain
  id: ft.explain/index
  summary: is index name
  description: "# FT.EXPLAIN\n\n    FT.EXPLAIN\n\nSyntax\n\n``` command-syntax\nFT.EXPLAIN index query \n  [DIALECT dialect]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nReturn the execution plan for a complex query\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name. You must first create the index using [`FT.CREATE`](../ft.create).\n\n`query`\n\nis query string, as if sent to FT.SEARCH\\`.\n\n## Optional arguments\n\n`DIALECT {dialect_version}`\n\nis dialect version under which to execute the query. If not specified, the query executes under the default dialect version set during module initial loading or via [`FT.CONFIG SET`](../ft.config-set) command.\n\nNotes\n\n- In the returned response, a `+` on a term is an indication of stemming.\n- Use `redis-cli --raw` to properly read line-breaks in the returned response.\n\n## Return\n\nFT.EXPLAIN returns a string representing the execution plan.\n\n## Examples\n\n**Return the execution plan for a complex query**\n\n``` chroma\n$ redis-cli --raw\n127.0.0.1:6379> FT.EXPLAIN rd \"(foo bar)|(hello world) @date:[100 200]|@date:[500 +inf]\"\nINTERSECT {\n  UNION {\n    INTERSECT {\n      foo\n      bar\n    }\n    INTERSECT {\n      hello\n      world\n    }\n  }\n  UNION {\n    NUMERIC {100.000000 <= x <= 200.000000}\n    NUMERIC {500.000000 <= x <= inf}\n  }\n}\n```\n\n## See also\n\n[`FT.CREATE`](../ft.create) \\| [`FT.SEARCH`](../ft.search) \\| [`FT.CONFIG SET`](../ft.config-set)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.explain/](https://redis.io/commands/ft.explain/)"
- name: ft.explaincli
  id: ft.explaincli/index
  summary: is index name
  description: "# FT.EXPLAINCLI\n\n    FT.EXPLAINCLI\n\nSyntax\n\n``` command-syntax\nFT.EXPLAINCLI index query \n  [DIALECT dialect]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nReturn the execution plan for a complex query but formatted for easier reading without using `redis-cli --raw`\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name. You must first create the index using [`FT.CREATE`](../ft.create).\n\n`query`\n\nis query string, as if sent to FT.SEARCH\\`.\n\n## Optional arguments\n\n`DIALECT {dialect_version}`\n\nis dialect version under which to execute the query. If not specified, the query executes under the default dialect version set during module initial loading or via [`FT.CONFIG SET`](../ft.config-set) command.\n\nNote\n\nIn the returned response, a `+` on a term is an indication of stemming.\n\n## Return\n\nFT.EXPLAINCLI returns an array reply with a string representing the execution plan.\n\n## Examples\n\n**Return the execution plan for a complex query**\n\n``` chroma\n$ redis-cli\n127.0.0.1:6379> FT.EXPLAINCLI rd \"(foo bar)|(hello world) @date:[100 200]|@date:[500 +inf]\"\n 1) INTERSECT {\n 2)   UNION {\n 3)     INTERSECT {\n 4)       UNION {\n 5)         foo\n 6)         +foo(expanded)\n 7)       }\n 8)       UNION {\n 9)         bar\n10)         +bar(expanded)\n11)       }\n12)     }\n13)     INTERSECT {\n14)       UNION {\n15)         hello\n16)         +hello(expanded)\n17)       }\n18)       UNION {\n19)         world\n20)         +world(expanded)\n21)       }\n22)     }\n23)   }\n24)   UNION {\n25)     NUMERIC {100.000000 <= @date <= 200.000000}\n26)     NUMERIC {500.000000 <= @date <= inf}\n27)   }\n28) }\n29)\n```\n\n## See also\n\n[`FT.CREATE`](../ft.create) \\| [`FT.SEARCH`](../ft.search) \\| [`FT.CONFIG SET`](../ft.config-set)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.explaincli/](https://redis.io/commands/ft.explaincli/)"
- name: ft.info
  id: ft.info/index
  summary: is full-text index name
  description: "# FT.INFO\n\n    FT.INFO\n\nSyntax\n\n``` command-syntax\nFT.INFO index\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nReturn information and statistics on the index\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis full-text index name. You must first create the index using [`FT.CREATE`](../ft.create).\n\n## Return\n\nFT.INFO returns an array reply with pairs of keys and values.\n\nReturned values include:\n\n- `index_definition`: reflection of [`FT.CREATE`](../ft.create) command parameters.\n- `fields`: index schema - field names, types, and attributes.\n- Number of documents.\n- Number of distinct terms.\n- Average bytes per record.\n- Size and capacity of the index buffers.\n- Indexing state and percentage as well as failures:\n  - `indexing`: whether of not the index is being scanned in the background.\n  - `percent_indexed`: progress of background indexing (1 if complete).\n  - `hash_indexing_failures`: number of failures due to operations not compatible with index schema.\n\nOptional statistics include:\n\n- `garbage collector` for all options other than NOGC.\n- `cursors` if a cursor exists for the index.\n- `stopword lists` if a custom stopword list is used.\n\n## Examples\n\n**Return statistics about an index**\n\n``` chroma\n127.0.0.1:6379> FT.INFO idx\n1) index_name\n 2) wikipedia\n 3) index_options\n 4) (empty array)\n    11) score_field\n    12) __score\n    13) payload_field\n    14) __payload\n 7) fields\n 8) 1) 1) title\n       2) type\n       3) TEXT\n       4) WEIGHT\n       5) \"1\"\n       6) SORTABLE\n    2) 1) body\n       2) type\n       3) TEXT\n       4) WEIGHT\n       5) \"1\"\n    3) 1) id\n       2) type\n       3) NUMERIC\n    4) 1) subject location\n       2) type\n       3) GEO\n 9) num_docs\n10) \"0\"\n11) max_doc_id\n12) \"345678\"\n13) num_terms\n14) \"691356\"\n15) num_records\n16) \"0\"\n17) inverted_sz_mb\n18) \"0\"\n19) vector_index_sz_mb\n20) \"0\"\n21) total_inverted_index_blocks\n22) \"933290\"\n23) offset_vectors_sz_mb\n24) \"0.65932846069335938\"\n25) doc_table_size_mb\n26) \"29.893482208251953\"\n27) sortable_values_size_mb\n28) \"11.432285308837891\"\n29) key_table_size_mb\n30) \"1.239776611328125e-05\"\n31) records_per_doc_avg\n32) \"-nan\"\n33) bytes_per_record_avg\n34) \"-nan\"\n35) offsets_per_term_avg\n36) \"inf\"\n37) offset_bits_per_record_avg\n38) \"8\"\n39) hash_indexing_failures\n40) \"0\"\n41) indexing\n42) \"0\"\n43) percent_indexed\n44) \"1\"\n45) number_of_uses\n46) 1\n47) gc_stats\n48)  1) bytes_collected\n     2) \"4148136\"\n     3) total_ms_run\n     4) \"14796\"\n     5) total_cycles\n     6) \"1\"\n     7) average_cycle_time_ms\n     8) \"14796\"\n     9) last_run_time_ms\n    10) \"14796\"\n    11) gc_numeric_trees_missed\n    12) \"0\"\n    13) gc_blocks_denied\n    14) \"0\"\n49) cursor_stats\n50) 1) global_idle\n    2) (integer) 0\n    3) global_total\n    4) (integer) 0\n    5) index_capacity\n    6) (integer) 128\n    7) index_total\n    8) (integer) 0\n51) stopwords_list\n52) 1) \"tlv\"\n    2) \"summer\"\n    3) \"2020\"\n```\n\n## See also\n\n[`FT.CREATE`](../ft.create) \\| [`FT.SEARCH`](../ft.search)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.info/](https://redis.io/commands/ft.info/)"
- name: ft.profile
  id: ft.profile/index
  summary: is index name, created using FT.CREATE
  description: "# FT.PROFILE\n\n    FT.PROFILE\n\nSyntax\n\n``` command-syntax\nFT.PROFILE index SEARCH | AGGREGATE [LIMITED] QUERY query\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 2.2.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(N)\n\nApply [`FT.SEARCH`](../ft.search) or [`FT.AGGREGATE`](../ft.aggregate) command to collect performance details\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name, created using [`FT.CREATE`](../ft.create).\n\n`SEARCH | AGGREGATE`\n\nis difference between [`FT.SEARCH`](../ft.search) and [`FT.AGGREGATE`](../ft.aggregate).\n\n`LIMITED`\n\nremoves details of `reader` iterator.\n\n`QUERY {query}`\n\nis query string, sent to [`FT.SEARCH`](../ft.search).\n\n**Note:** To reduce the size of the output, use `NOCONTENT` or `LIMIT 0 0` to reduce the reply results or `LIMITED` to not reply with details of `reader iterators` inside built-in unions such as `fuzzy` or `prefix`.\n\n## Return\n\n`FT.PROFILE` returns an array reply, with the first array reply identical to the reply of [`FT.SEARCH`](../ft.search) and [`FT.AGGREGATE`](../ft.aggregate) and a second array reply with information of time in milliseconds (ms) used to create the query and time and count of calls of iterators and result-processors.\n\nReturn value has an array with two elements:\n\n- Results - The normal reply from RediSearch, similar to a cursor.\n- Profile - The details in the profile are:\n  - Total profile time - The total runtime of the query, in ms.\n  - Parsing time - Parsing time of the query and parameters into an execution plan, in ms.\n  - Pipeline creation time - Creation time of execution plan including iterators, result processors, and reducers creation, in ms.\n  - Iterators profile - Index iterators information including their type, term, count, and time data. Inverted-index iterators have in addition the number of elements they contain. Hybrid vector iterators returning the top results from the vector index in batches, include the number of batches.\n  - Result processors profile - Result processors chain with type, count, and time data.\n\n## Examples\n\n**Collect performance information about an index**\n\n``` chroma\n127.0.0.1:6379> FT.PROFILE idx SEARCH QUERY \"hello world\"\n1) 1) (integer) 1\n   2) \"doc1\"\n   3) 1) \"t\"\n      2) \"hello world\"\n2) 1) 1) Total profile time\n      2) \"0.47199999999999998\"\n   2) 1) Parsing time\n      2) \"0.218\"\n   3) 1) Pipeline creation time\n      2) \"0.032000000000000001\"\n   4) 1) Iterators profile\n      2) 1) Type\n         2) INTERSECT\n         3) Time\n         4) \"0.025000000000000001\"\n         5) Counter\n         6) (integer) 1\n         7) Child iterators\n         8)  1) Type\n             2) TEXT\n             3) Term\n             4) hello\n             5) Time\n             6) \"0.0070000000000000001\"\n             7) Counter\n             8) (integer) 1\n             9) Size\n            10) (integer) 1\n         9)  1) Type\n             2) TEXT\n             3) Term\n             4) world\n             5) Time\n             6) \"0.0030000000000000001\"\n             7) Counter\n             8) (integer) 1\n             9) Size\n            10) (integer) 1\n   5) 1) Result processors profile\n      2) 1) Type\n         2) Index\n         3) Time\n         4) \"0.036999999999999998\"\n         5) Counter\n         6) (integer) 1\n      3) 1) Type\n         2) Scorer\n         3) Time\n         4) \"0.025000000000000001\"\n         5) Counter\n         6) (integer) 1\n      4) 1) Type\n         2) Sorter\n         3) Time\n         4) \"0.013999999999999999\"\n         5) Counter\n         6) (integer) 1\n      5) 1) Type\n         2) Loader\n         3) Time\n         4) \"0.10299999999999999\"\n         5) Counter\n         6) (integer) 1\n```\n\n## See also\n\n[`FT.SEARCH`](../ft.search) \\| [`FT.AGGREGATE`](../ft.aggregate)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.profile/](https://redis.io/commands/ft.profile/)"
- name: ft.search
  id: ft.search/index
  summary: is index name
  description: "# FT.SEARCH\n\n    FT.SEARCH\n\nSyntax\n\n``` command-syntax\nFT.SEARCH index query \n  [NOCONTENT] \n  [VERBATIM] [NOSTOPWORDS] \n  [WITHSCORES] \n  [WITHPAYLOADS] \n  [WITHSORTKEYS] \n  [FILTER numeric_field min max [ FILTER numeric_field min max ...]] \n  [GEOFILTER geo_field lon lat radius m | km | mi | ft [ GEOFILTER geo_field lon lat radius m | km | mi | ft ...]] \n  [INKEYS count key [key ...]] [ INFIELDS count field [field ...]] \n  [RETURN count identifier [AS property] [ identifier [AS property] ...]] \n  [SUMMARIZE [ FIELDS count field [field ...]] [FRAGS num] [LEN fragsize] [SEPARATOR separator]] \n  [HIGHLIGHT [ FIELDS count field [field ...]] [ TAGS open close]] \n  [SLOP slop] \n  [TIMEOUT timeout] \n  [INORDER] \n  [LANGUAGE language] \n  [EXPANDER expander] \n  [SCORER scorer] \n  [EXPLAINSCORE] \n  [PAYLOAD payload] \n  [SORTBY sortby [ ASC | DESC]] \n  [LIMIT offset num] \n  [PARAMS nargs name value [ name value ...]] \n  [DIALECT dialect]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(N)\n\nSearch the index with a textual query, returning either documents or just ids\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name. You must first create the index using [`FT.CREATE`](../ft.create).\n\n`query`\n\nis text query to search. If it's more than a single word, put it in quotes. Refer to [Query syntax](https://redis.io/docs/stack/search/reference/query_syntax) for more details.\n\n## Optional arguments\n\n`NOCONTENT`\n\nreturns the document ids and not the content. This is useful if RediSearch is only an index on an external document collection.\n\n`VERBATIM`\n\ndoes not try to use stemming for query expansion but searches the query terms verbatim.\n\n`WITHSCORES`\n\nalso returns the relative internal score of each document. This can be used to merge results from multiple instances.\n\n`WITHPAYLOADS`\n\nretrieves optional document payloads. See [`FT.CREATE`](../ft.create). The payloads follow the document id and, if `WITHSCORES` is set, the scores.\n\n`WITHSORTKEYS`\n\nreturns the value of the sorting key, right after the id and score and/or payload, if requested. This is usually not needed, and exists for distributed search coordination purposes. This option is relevant only if used in conjunction with `SORTBY`.\n\n`FILTER numeric_attribute min max`\n\nlimits results to those having numeric values ranging between `min` and `max`, if numeric_attribute is defined as a numeric attribute in [`FT.CREATE`](../ft.create). `min` and `max` follow [`ZRANGE`](../zrange) syntax, and can be `-inf`, `+inf`, and use `(` for exclusive ranges. Multiple numeric filters for different attributes are supported in one query.\n\n`GEOFILTER {geo_attribute} {lon} {lat} {radius} m|km|mi|ft`\n\nfilter the results to a given `radius` from `lon` and `lat`. Radius is given as a number and units. See [`GEORADIUS`](../georadius) for more details.\n\n`INKEYS {num} {attribute} ...`\n\nlimits the result to a given set of keys specified in the list. The first argument must be the length of the list and greater than zero. Non-existent keys are ignored, unless all the keys are non-existent.\n\n`INFIELDS {num} {attribute} ...`\n\nfilters the results to those appearing only in specific attributes of the document, like `title` or `URL`. You must include `num`, which is the number of attributes you're filtering by. For example, if you request `title` and `URL`, then `num` is 2.\n\n`RETURN {num} {identifier} AS {property} ...`\n\nlimits the attributes returned from the document. `num` is the number of attributes following the keyword. If `num` is 0, it acts like `NOCONTENT`. `identifier` is either an attribute name (for hashes and JSON) or a JSON Path expression (for JSON). `property` is an optional name used in the result. If not provided, the `identifier` is used in the result.\n\n`SUMMARIZE ...`\n\nreturns only the sections of the attribute that contain the matched text. See [Highlighting](https://redis.io/docs/stack/search/reference/highlight) for more information.\n\n`HIGHLIGHT ...`\n\nformats occurrences of matched text. See [Highlighting](https://redis.io/docs/stack/search/reference/highlight) for more information.\n\n`SLOP {slop}`\n\nis the number of intermediate terms allowed to appear between the terms of the query. Suppose you're searching for a phrase *hello world*. If some terms appear in-between *hello* and *world*, a `SLOP` greater than `0` allows for these text attributes to match. By default, there is no `SLOP` constraint.\n\n`INORDER`\n\nrequires the terms in the document to have the same order as the terms in the query, regardless of the offsets between them. Typically used in conjunction with `SLOP`. Default is `false`.\n\n`LANGUAGE {language}`\n\nuse a stemmer for the supplied language during search for query expansion. If querying documents in Chinese, set to `chinese` to properly tokenize the query terms. Defaults to English. If an unsupported language is sent, the command returns an error. See [`FT.CREATE`](../ft.create) for the list of languages.\n\n`EXPANDER {expander}`\n\nuses a custom query expander instead of the stemmer. See [Extensions](https://redis.io/docs/stack/search/reference/extensions).\n\n`SCORER {scorer}`\n\nuses a custom scoring function you define. See [Extensions](https://redis.io/docs/stack/search/reference/extensions).\n\n`EXPLAINSCORE`\n\nreturns a textual description of how the scores were calculated. Using this option requires `WITHSCORES`.\n\n`PAYLOAD {payload}`\n\nadds an arbitrary, binary safe payload that is exposed to custom scoring functions. See [Extensions](https://redis.io/docs/stack/search/reference/extensions).\n\n`SORTBY {attribute} [ASC|DESC]`\n\norders the results by the value of this attribute. This applies to both text and numeric attributes. Attributes needed for `SORTBY` should be declared as `SORTABLE` in the index, in order to be available with very low latency. Note that this adds memory overhead.\n\n`LIMIT first num`\n\nlimits the results to the offset and number of results given. Note that the offset is zero-indexed. The default is 0 10, which returns 10 items starting from the first result. You can use `LIMIT 0 0` to count the number of documents in the result set without actually returning them.\n\n`TIMEOUT {milliseconds}`\n\noverrides the timeout parameter of the module.\n\n`PARAMS {nargs} {name} {value}`\n\ndefines one or more value parameters. Each parameter has a name and a value.\n\nYou can reference parameters in the `query` by a `$`, followed by the parameter name, for example, `$user`. Each such reference in the search query to a parameter name is substituted by the corresponding parameter value. For example, with parameter definition `PARAMS 4 lon 29.69465 lat 34.95126`, the expression `@loc:[$lon $lat 10 km]` is evaluated to `@loc:[29.69465 34.95126 10 km]`. You cannot reference parameters in the query string where concrete values are not allowed, such as in field names, for example, `@loc`. To use `PARAMS`, set `DIALECT` to `2` or greater than `2`.\n\n`DIALECT {dialect_version}`\n\nselects the dialect version under which to execute the query. If not specified, the query will execute under the default dialect version set during module initial loading or via [`FT.CONFIG SET`](../ft.config-set) command.\n\n## Return\n\nFT.SEARCH returns an array reply, where the first element is an integer reply of the total number of results, and then array reply pairs of document ids, and array replies of attribute/value pairs.\n\nNotes\n\n- If `NOCONTENT` is given, an array is returned where the first element is the total number of results, and the rest of the members are document ids.\n- If a hash expires after the query process starts, the hash is counted in the total number of results, but the key name and content return as null.\n\n### Return multiple values\n\nWhen the index is defined `ON JSON`, a reply for a single attribute or a single JSONPath may return multiple values when the JSONPath matches multiple values, or when the JSONPath matches an array.\n\nPrior to RediSearch v2.6, only the first of the matched values was returned. Starting with RediSearch v2.6, all values are returned, wrapped with a top-level array.\n\nIn order to maintain backward compatibility, the default behavior with RediSearch v2.6 is to return only the first value.\n\nTo return all the values, use `DIALECT` 3 (or greater, when available).\n\nThe `DIALECT` can be specified as a parameter in the FT.SEARCH command. If it is not specified, the `DEFAULT_DIALECT` is used, which can be set using [`FT.CONFIG SET`](../ft.config-set) or by passing it as an argument to the `redisearch` module when it is loaded.\n\nFor example, with the following document and index:\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc:1 $ '[{\"arr\": [1, 2, 3]}, {\"val\": \"hello\"}, {\"val\": \"world\"}]'\nOK\n127.0.0.1:6379> FT.CREATE idx ON JSON PREFIX 1 doc: SCHEMA $..arr AS arr NUMERIC $..val AS val TEXT\nOK\n```\n\nNotice the different replies, with and without `DIALECT 3`:\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH idx * RETURN 2 arr val\n1) (integer) 1\n2) \"doc:1\"\n3) 1) \"arr\"\n   2) \"[1,2,3]\"\n   3) \"val\"\n   4) \"hello\"\n127.0.0.1:6379> FT.SEARCH idx * RETURN 2 arr val DIALECT 3\n1) (integer) 1\n2) \"doc:1\"\n3) 1) \"arr\"\n   2) \"[[1,2,3]]\"\n   3) \"val\"\n   4) \"[\\\"hello\\\",\\\"world\\\"]\"\n```\n\n## Complexity\n\nFT.SEARCH complexity is O(n) for single word queries. `n` is the number of the results in the result set. Finding all the documents that have a specific term is O(1), however, a scan on all those documents is needed to load the documents data from redis hashes and return them.\n\nThe time complexity for more complex queries varies, but in general it's proportional to the number of words, the number of intersection points between them and the number of results in the result set.\n\n## Examples\n\n**Search for a term in every text attribute**\n\nSearch for the term \"wizard\" in every TEXT attribute of an index containing book data.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"wizard\"\n```\n\n**Search for a term in title attribute**\n\nSearch for the term *dogs* in the `title` attribute.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"@title:dogs\"\n```\n\n**Search for books from specific years**\n\nSearch for books published in 2020 or 2021.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"@published_at:[2020 2021]\"\n```\n\n**Search for a restaurant by distance from longitude/latitude**\n\nSearch for Chinese restaurants within 5 kilometers of longitude -122.41, latitude 37.77 (San Francisco).\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH restaurants-idx \"chinese @location:[-122.41 37.77 5 km]\"\n```\n\n**Search for a book by terms but boost specific term**\n\nSearch for the term *dogs* or *cats* in the `title` attribute, but give matches of *dogs* a higher relevance score (also known as *boosting*).\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"(@title:dogs | @title:cats) | (@title:dogs) => { $weight: 5.0; }\"\n```\n\n**Search for a book by a term and EXPLAINSCORE**\n\nSearch for books with *dogs* in any TEXT attribute in the index and request an explanation of scoring for each result.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"dogs\" WITHSCORES EXPLAINSCORE\n```\n\n**Search for a book by a term and TAG**\n\nSearch for books with *space* in the title that have `science` in the TAG attribute `categories`.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"@title:space @categories:{science}\"\n```\n\n**Search for a book by a term but limit the number**\n\nSearch for books with *Python* in any `TEXT` attribute, returning 10 results starting with the 11th result in the entire result set (the offset parameter is zero-based), and return only the `title` attribute for each result.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"python\" LIMIT 10 10 RETURN 1 title\n```\n\n**Search for a book by a term and price**\n\nSearch for books with *Python* in any `TEXT` attribute, returning the price stored in the original JSON document.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"python\" RETURN 3 $.book.price AS price\n```\n\n**Search for a book by title and distance**\n\nSearch for books with semantically similar title to *Planet Earth*. Return top 10 results sorted by distance.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH books-idx \"*=>[KNN 10 @title_embedding $query_vec AS title_score]\" PARAMS 2 query_vec <\"Planet Earth\" embedding BLOB> SORTBY title_score DIALECT 2\n```\n\n**Search for a phrase using SLOP**\n\nSearch for a phrase *hello world*. First, create an index.\n\n``` chroma\n127.0.0.1:6379> FT.CREATE memes SCHEMA phrase TEXT\nOK\n```\n\nAdd variations of the phrase *hello world*.\n\n``` chroma\n127.0.0.1:6379> HSET s1 phrase \"hello world\"\n(integer) 1\n127.0.0.1:6379> HSET s2 phrase \"hello simple world\"\n(integer) 1\n127.0.0.1:6379> HSET s3 phrase \"hello somewhat less simple world\"\n(integer) 1\n127.0.0.1:6379> HSET s4 phrase \"hello complicated yet encouraging problem solving world\"\n(integer) 1\n127.0.0.1:6379> HSET s5 phrase \"hello complicated yet amazingly encouraging problem solving world\"\n(integer) 1\n```\n\nThen, search for the phrase *hello world*. The result returns all documents that contain the phrase.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello world)' NOCONTENT \n1) (integer) 5\n2) \"s1\"\n3) \"s2\"\n4) \"s3\"\n5) \"s4\"\n6) \"s5\"\n```\n\nNow, return all documents that have one of fewer words between *hello* and *world*.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello world)' NOCONTENT SLOP 1\n1) (integer) 2\n2) \"s1\"\n3) \"s2\"\n```\n\nNow, return all documents with three or fewer words between *hello* and *world*.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello world)' NOCONTENT SLOP 3\n1) (integer) 3\n2) \"s1\"\n3) \"s2\"\n4) \"s3\"\n```\n\n`s5` needs a higher `SLOP` to match, `SLOP 6` or higher, to be exact. See what happens when you set `SLOP` to `5`.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello world)' NOCONTENT SLOP 5\n1) (integer) 4\n2) \"s1\"\n3) \"s2\"\n4) \"s3\"\n5) \"s4\"\n```\n\nIf you add additional terms (and stemming), you get these results.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello amazing world)' NOCONTENT \n1) (integer) 1\n2) \"s5\"\n```\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello encouraged world)' NOCONTENT SLOP 5\n1) (integer) 2\n2) \"s4\"\n3) \"s5\"\n```\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(hello encouraged world)' NOCONTENT SLOP 4\n1) (integer) 1\n2) \"s4\"\n```\n\nIf you swap the terms, you can still retrieve the correct phrase.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(amazing hello world)' NOCONTENT\n1) (integer) 1\n2) \"s5\"\n```\n\nBut, if you use `INORDER`, you get zero results.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(amazing hello world)' NOCONTENT INORDER\n1) (integer) 0\n```\n\nLikewise, if you use a query attribute `$inorder` set to `true`, `s5` is not retrieved.\n\n``` chroma\n127.0.0.1:6379> FT.SEARCH memes '@phrase:(amazing hello world)=>{$inorder: true;}' NOCONTENT\n1) (integer) 0\n```\n\nTo sum up, the `INORDER` argument or `$inorder` query attribute require the query terms to match terms with similar ordering.\n\n## See also\n\n[`FT.CREATE`](../ft.create) \\| [`FT.AGGREGATE`](../ft.aggregate)\n\n## Related topics\n\n- [Extensions](https://redis.io/docs/stack/search/reference/extensions)\n- [Highlighting](https://redis.io/docs/stack/search/reference/highlight)\n- [Query syntax](https://redis.io/docs/stack/search/reference/query_syntax)\n- [RediSearch](https://redis.io/docs/stack/search)\n\n## History\n\n- Starting with Redis version 2.0.0: Deprecated `WITHPAYLOADS` and `PAYLOAD` arguments\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.search/](https://redis.io/commands/ft.search/)"
- name: ft.spellcheck
  id: ft.spellcheck/index
  summary: is index with the indexed terms
  description: "# FT.SPELLCHECK\n\n    FT.SPELLCHECK\n\nSyntax\n\n``` command-syntax\nFT.SPELLCHECK index query \n  [DISTANCE distance] \n  [TERMS INCLUDE | EXCLUDE dictionary [terms [terms ...]]] \n  [DIALECT dialect]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.4.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nPerform spelling correction on a query, returning suggestions for misspelled terms\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index with the indexed terms.\n\n`query`\n\nis search query.\n\nSee [Spellchecking](https://redis.io/docs/stack/search/reference/spellcheck) for more details.\n\n## Optional arguments\n\n`TERMS`\n\nspecifies an inclusion (`INCLUDE`) or exclusion (`EXCLUDE`) of a custom dictionary named `{dict}`. Refer to [`FT.DICTADD`](../ft.dictadd), [`FT.DICTDEL`](../ft.dictdel) and [`FT.DICTDUMP`](../ft.dictdump) about managing custom dictionaries.\n\n`DISTANCE`\n\nis maximum Levenshtein distance for spelling suggestions (default: 1, max: 4).\n\n`DIALECT {dialect_version}`\n\nselects the dialect version under which to execute the query. If not specified, the query will execute under the default dialect version set during module initial loading or via [`FT.CONFIG SET`](../ft.config-set) command.\n\n## Return\n\nFT.SPELLCHECK returns an array reply, in which each element represents a misspelled term from the query. The misspelled terms are ordered by their order of appearance in the query. Each misspelled term, in turn, is a 3-element array consisting of the constant string `TERM`, the term itself and an array of suggestions for spelling corrections. Each element in the spelling corrections array consists of the score of the suggestion and the suggestion itself. The suggestions array, per misspelled term, is ordered in descending order by score. The score is calculated by dividing the number of documents in which the suggested term exists by the total number of documents in the index. Results can be normalized by dividing scores by the highest score.\n\n## Examples\n\n**Perform spelling correction on a query**\n\n``` chroma\n127.0.0.1:6379> FT.SPELLCHECK idx held DISTANCE 2\n1) 1) \"TERM\"\n   2) \"held\"\n   3) 1) 1) \"0.66666666666666663\"\n         2) \"hello\"\n      2) 1) \"0.33333333333333331\"\n         2) \"help\"\n```\n\n## See also\n\n[`FT.CONFIG SET`](../ft.config-set) \\| [`FT.DICTADD`](../ft.dictadd) \\| [`FT.DICTDEL`](../ft.dictdel) \\| [`FT.DICTDUMP`](../ft.dictdump)\n\n## Related topics\n\n- [Spellchecking](https://redis.io/docs/stack/search/reference/spellcheck)\n- [RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.spellcheck/](https://redis.io/commands/ft.spellcheck/)"
- name: ft.sugadd
  id: ft.sugadd/index
  summary: is suggestion dictionary key
  description: "# FT.SUGADD\n\n    FT.SUGADD\n\nSyntax\n\n``` command-syntax\nFT.SUGADD key string score \n  [INCR] \n  [PAYLOAD payload]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nAdd a suggestion string to an auto-complete suggestion dictionary\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis suggestion dictionary key.\n\n`string`\n\nis suggestion string to index.\n\n`score`\n\nis floating point number of the suggestion string's weight.\n\nThe auto-complete suggestion dictionary is disconnected from the index definitions and leaves creating and updating suggestions dictionaries to the user.\n\n## Optional arguments\n\n`INCR`\n\nincrements the existing entry of the suggestion by the given score, instead of replacing the score. This is useful for updating the dictionary based on user queries in real time.\n\n`PAYLOAD {payload}`\n\nsaves an extra payload with the suggestion, that can be fetched by adding the `WITHPAYLOADS` argument to [`FT.SUGGET`](../ft.sugget).\n\n## Return\n\nFT.SUGADD returns an integer reply, which is the current size of the suggestion dictionary.\n\n## Examples\n\n**Add a suggestion string to an auto-complete suggestion dictionary**\n\n``` chroma\n127.0.0.1:6379> FT.SUGADD sug \"hello world\" 1\n(integer) 3\n```\n\n## See also\n\n[`FT.SUGGET`](../ft.sugget) \\| [`FT.SUGDEL`](../ft.sugdel) \\| [`FT.SUGLEN`](../ft.suglen)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n## History\n\n- Starting with Redis version 2.0.0: Deprecated `PAYLOAD` argument\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.sugadd/](https://redis.io/commands/ft.sugadd/)"
- name: ft.sugdel
  id: ft.sugdel/index
  summary: is suggestion dictionary key
  description: "# FT.SUGDEL\n\n    FT.SUGDEL\n\nSyntax\n\n``` command-syntax\nFT.SUGDEL key string\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nDelete a string from a suggestion index\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis suggestion dictionary key.\n\n`string`\n\nis suggestion string to index.\n\n## Return\n\nFT.SUGDEL returns an integer reply, 1 if the string was found and deleted, 0 otherwise.\n\n## Examples\n\n**Delete a string from a suggestion index**\n\n``` chroma\n127.0.0.1:6379> FT.SUGDEL sug \"hello\"\n(integer) 1\n127.0.0.1:6379> FT.SUGDEL sug \"hello\"\n(integer) 0\n```\n\n## See also\n\n[`FT.SUGGET`](../ft.sugget) \\| [`FT.SUGADD`](../ft.sugadd) \\| [`FT.SUGLEN`](../ft.suglen)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.sugdel/](https://redis.io/commands/ft.sugdel/)"
- name: ft.sugget
  id: ft.sugget/index
  summary: is suggestion dictionary key
  description: "# FT.SUGGET\n\n    FT.SUGGET\n\nSyntax\n\n``` command-syntax\nFT.SUGGET key prefix \n  [FUZZY] \n  [WITHSCORES] \n  [WITHPAYLOADS] \n  [MAX max]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nGet completion suggestions for a prefix\n\n## Syntax\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis suggestion dictionary key.\n\n`prefix`\n\nis prefix to complete on.\n\n## Optional arguments\n\n`FUZZY`\n\nperforms a fuzzy prefix search, including prefixes at Levenshtein distance of 1 from the prefix sent.\n\n`MAX num`\n\nlimits the results to a maximum of `num` (default: 5).\n\n`WITHSCORES`\n\nalso returns the score of each suggestion. This can be used to merge results from multiple instances.\n\n`WITHPAYLOADS`\n\nreturns optional payloads saved along with the suggestions. If no payload is present for an entry, it returns a null reply.\n\n## Return\n\nFT.SUGGET returns an array reply, which is a list of the top suggestions matching the prefix, optionally with score after each entry.\n\n## Examples\n\n**Get completion suggestions for a prefix**\n\n``` chroma\n127.0.0.1:6379> FT.SUGGET sug hell FUZZY MAX 3 WITHSCORES\n1) \"hell\"\n2) \"2147483648\"\n3) \"hello\"\n4) \"0.70710676908493042\"\n```\n\n## See also\n\n[`FT.SUGADD`](../ft.sugadd) \\| [`FT.SUGDEL`](../ft.sugdel) \\| [`FT.SUGLEN`](../ft.suglen)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n## History\n\n- Starting with Redis version 2.0.0: Deprecated `WITHPAYLOADS` argument\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.sugget/](https://redis.io/commands/ft.sugget/)"
- name: ft.suglen
  id: ft.suglen/index
  summary: is suggestion dictionary key
  description: "# FT.SUGLEN\n\n    FT.SUGLEN\n\nSyntax\n\n``` command-syntax\nFT.SUGLEN key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nGet the size of an auto-complete suggestion dictionary\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis suggestion dictionary key.\n\n## Return\n\nFT.SUGLEN returns an integer reply, which is the current size of the suggestion dictionary.\n\n## Examples\n\n**Get the size of an auto-complete suggestion dictionary**\n\n``` chroma\n127.0.0.1:6379> FT.SUGLEN sug\n(integer) 2\n```\n\n## See also\n\n[`FT.SUGADD`](../ft.sugadd) \\| [`FT.SUGDEL`](../ft.sugdel) \\| [`FT.SUGGET`](../ft.sugget)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.suglen/](https://redis.io/commands/ft.suglen/)"
- name: ft.syndump
  id: ft.syndump/index
  summary: is index name
  description: "# FT.SYNDUMP\n\n    FT.SYNDUMP\n\nSyntax\n\n``` command-syntax\nFT.SYNDUMP index\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.2.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nDump the contents of a synonym group\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name.\n\nUse FT.SYNDUMP to dump the synonyms data structure. This command returns a list of synonym terms and their synonym group ids.\n\n## Return\n\nFT.SYNDUMP returns an array reply, with a pair of `term` and an array of synonym groups.\n\n## Examples\n\n**Return the contents of a synonym group**\n\n``` chroma\n127.0.0.1:6379> FT.SYNDUMP idx\n1) \"shalom\"\n2) 1) \"synonym1\"\n   2) \"synonym2\"\n3) \"hi\"\n4) 1) \"synonym1\"\n5) \"hello\"\n6) 1) \"synonym1\"\n```\n\n## See also\n\n[`FT.SYNUPDATE`](../ft.synupdate)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.syndump/](https://redis.io/commands/ft.syndump/)"
- name: ft.synupdate
  id: ft.synupdate/index
  summary: is index name
  description: "# FT.SYNUPDATE\n\n    FT.SYNUPDATE\n\nSyntax\n\n``` command-syntax\nFT.SYNUPDATE index synonym_group_id \n  [SKIPINITIALSCAN] term [term ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.2.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(1)\n\nUpdate a synonym group\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis index name.\n\n`synonym_group_id`\n\nis synonym group to return.\n\nUse FT.SYNUPDATE to create or update a synonym group with additional terms. The command triggers a scan of all documents.\n\n## Optional parameters\n\n`SKIPINITIALSCAN`\n\ndoes not scan and index, and only documents that are indexed after the update are affected.\n\n## Return\n\nFT.SYNUPDATE returns a simple string reply `OK` if executed correctly, or an error reply otherwise.\n\n## Examples\n\n**Update a synonym group**\n\n``` chroma\n127.0.0.1:6379> FT.SYNUPDATE idx synonym hello hi shalom\nOK\n```\n\n``` chroma\n127.0.0.1:6379> FT.SYNUPDATE idx synonym SKIPINITIALSCAN hello hi shalom\nOK\n```\n\n## See also\n\n[`FT.SYNDUMP`](../ft.syndump)\n\n## Related topics\n\n[RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.synupdate/](https://redis.io/commands/ft.synupdate/)"
- name: ft.tagvals
  id: ft.tagvals/index
  summary: is full-text index name
  description: "# FT.TAGVALS\n\n    FT.TAGVALS\n\nSyntax\n\n``` command-syntax\nFT.TAGVALS index field_name\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Search 1.0.0](https://redis.io/docs/stack/search)\n\nTime complexity:  \nO(N)\n\nReturn a distinct set of values indexed in a Tag field\n\n[Examples](#examples)\n\n## Required arguments\n\n`index`\n\nis full-text index name. You must first create the index using [`FT.CREATE`](../ft.create).\n\n`field_name`\n\nis name of a Tag file defined in the schema.\n\nUse FT.TAGVALS if your tag indexes things like cities, categories, and so on.\n\n## Limitations\n\nFT.TAGVALS provides no paging or sorting, and the tags are not alphabetically sorted. FT.TAGVALS only operates on [tag fields](https://redis.io/docs/stack/search/reference/tags). The returned strings are lowercase with whitespaces removed, but otherwise unchanged.\n\n## Return\n\nFT.TAGVALS returns an array reply of all distinct tags in the tag index.\n\n## Examples\n\n**Return a set of values indexed in a Tag field**\n\n``` chroma\n127.0.0.1:6379> FT.TAGVALS idx myTag\n1) \"Hello\"\n2) \"World\"\n```\n\n## See also\n\n[`FT.CREATE`](../ft.create)\n\n## Related topics\n\n- [Tag fields](https://redis.io/docs/stack/search/reference/tags)\n- [RediSearch](https://redis.io/docs/stack/search)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ft.tagvals/](https://redis.io/commands/ft.tagvals/)"
- name: function delete
  id: function-delete/index
  summary: Delete a library and all its functions
  description: "# FUNCTION\n\n    FUNCTION DELETE\n\nSyntax\n\n``` command-syntax\nFUNCTION DELETE library-name\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@slow`, `@scripting`,\n\nDelete a library and all its functions.\n\nThis command deletes the library called *library-name* and all functions in it. If the library doesn't exist, the server returns an error.\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n```\nredis> FUNCTION LOAD Lua mylib \"redis.register_function('myfunc', function(keys, args) return 'hello' end)\"\nOK\nredis> FCALL myfunc 0\n\"hello\"\nredis> FUNCTION DELETE mylib\nOK\nredis> FCALL myfunc 0\n(error) ERR Function not found\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-delete/](https://redis.io/commands/function-delete/)"
- name: function dump
  id: function-dump/index
  summary: Return the serialized payload of loaded libraries
  description: "# FUNCTION\n\n    FUNCTION DUMP\n\nSyntax\n\n``` command-syntax\nFUNCTION DUMP\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of functions\n\nACL categories:  \n`@slow`, `@scripting`,\n\nReturn the serialized payload of loaded libraries. You can restore the serialized payload later with the [`FUNCTION RESTORE`](../function-restore) command.\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the serialized payload\n\n## Examples\n\nThe following example shows how to dump loaded libraries using `FUNCTION DUMP` and then it calls [`FUNCTION FLUSH`](../function-flush) deletes all the libraries. Then, it restores the original libraries from the serialized payload with [`FUNCTION RESTORE`](../function-restore).\n\n```\nredis> FUNCTION DUMP\n\"\\xf6\\x05mylib\\x03LUA\\x00\\xc3@D@J\\x1aredis.register_function('my@\\x0b\\x02', @\\x06`\\x12\\x11keys, args) return`\\x0c\\a[1] end)\\n\\x00@\\n)\\x11\\xc8|\\x9b\\xe4\"\nredis> FUNCTION FLUSH\nOK\nredis> FUNCTION RESTORE \"\\xf6\\x05mylib\\x03LUA\\x00\\xc3@D@J\\x1aredis.register_function('my@\\x0b\\x02', @\\x06`\\x12\\x11keys, args) return`\\x0c\\a[1] end)\\n\\x00@\\n)\\x11\\xc8|\\x9b\\xe4\"\nOK\nredis> FUNCTION LIST\n1) 1) \"library_name\"\n   2) \"mylib\"\n   3) \"engine\"\n   4) \"LUA\"\n   5) \"description\"\n   6) (nil)\n   7) \"functions\"\n   8) 1) 1) \"name\"\n         2) \"myfunc\"\n         3) \"description\"\n         4) (nil)\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-dump/](https://redis.io/commands/function-dump/)"
- name: function flush
  id: function-flush/index
  summary: Deletes all the libraries
  description: "# FUNCTION\n\n    FUNCTION FLUSH\n\nSyntax\n\n``` command-syntax\nFUNCTION FLUSH [ASYNC | SYNC]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of functions deleted\n\nACL categories:  \n`@write`, `@slow`, `@scripting`,\n\nDeletes all the libraries.\n\nUnless called with the optional mode argument, the `lazyfree-lazy-user-flush` configuration directive sets the effective behavior. Valid modes are:\n\n- `ASYNC`: Asynchronously flush the libraries.\n- `SYNC`: Synchronously flush the libraries.\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-flush/](https://redis.io/commands/function-flush/)"
- name: function kill
  id: function-kill/index
  summary: Kill a function that is currently executing
  description: "# FUNCTION\n\n    FUNCTION KILL\n\nSyntax\n\n``` command-syntax\nFUNCTION KILL\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@scripting`,\n\nKill a function that is currently executing.\n\nThe `FUNCTION KILL` command can be used only on functions that did not modify the dataset during their execution (since stopping a read-only function does not violate the scripting engine's guaranteed atomicity).\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-kill/](https://redis.io/commands/function-kill/)"
- name: function list
  id: function-list/index
  summary: Return information about the functions and libraries
  description: "# FUNCTION\n\n    FUNCTION LIST\n\nSyntax\n\n``` command-syntax\nFUNCTION LIST [LIBRARYNAME library-name-pattern] [WITHCODE]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of functions\n\nACL categories:  \n`@slow`, `@scripting`,\n\nReturn information about the functions and libraries.\n\nYou can use the optional `LIBRARYNAME` argument to specify a pattern for matching library names. The optional `WITHCODE` modifier will cause the server to include the libraries source implementation in the reply.\n\nThe following information is provided for each of the libraries in the response:\n\n- **library_name:** the name of the library.\n- **engine:** the engine of the library.\n- **functions:** the list of functions in the library. Each function has the following fields:\n  - **name:** the name of the function.\n  - **description:** the function's description.\n  - **flags:** an array of [function flags](https://redis.io/docs/manual/programmability/functions-intro/#function-flags).\n- **library_code:** the library's source code (when given the `WITHCODE` modifier).\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-list/](https://redis.io/commands/function-list/)"
- name: function load
  id: function-load/index
  summary: Load a library to Redis
  description: "# FUNCTION\n\n    FUNCTION LOAD\n\nSyntax\n\n``` command-syntax\nFUNCTION LOAD [REPLACE] function-code\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1) (considering compilation time is redundant)\n\nACL categories:  \n`@write`, `@slow`, `@scripting`,\n\nLoad a library to Redis.\n\nThe command's gets a single mandatory parameter which is the source code that implements the library. The library payload must start with Shebang statement that provides a metadata about the library (like the engine to use and the library name). Shebang format: `#!<engine name> name=<library name>`. Currently engine name must be `lua`.\n\nFor the Lua engine, the implementation should declare one or more entry points to the library with the [`redis.register_function()` API](https://redis.io/topics/lua-api#redis.register_function). Once loaded, you can call the functions in the library with the [`FCALL`](../fcall) (or [`FCALL_RO`](../fcall_ro) when applicable) command.\n\nWhen attempting to load a library with a name that already exists, the Redis server returns an error. The `REPLACE` modifier changes this behavior and overwrites the existing library with the new contents.\n\nThe command will return an error in the following circumstances:\n\n- An invalid *engine-name* was provided.\n- The library's name already exists without the `REPLACE` modifier.\n- A function in the library is created with a name that already exists in another library (even when `REPLACE` is specified).\n- The engine failed in creating the library's functions (due to a compilation error, for example).\n- No functions were declared by the library.\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n@string - the library name that was loaded\n\n## Examples\n\nThe following example will create a library named `mylib` with a single function, `myfunc`, that returns the first argument it gets.\n\n```\nredis> FUNCTION LOAD \"#!lua name=mylib \\n redis.register_function('myfunc', function(keys, args) return args[1] end)\"\nmylib\nredis> FCALL myfunc 0 hello\n\"hello\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-load/](https://redis.io/commands/function-load/)"
- name: function restore
  id: function-restore/index
  summary: Restore libraries from the serialized payload
  description: "# FUNCTION\n\n    FUNCTION RESTORE\n\nSyntax\n\n``` command-syntax\nFUNCTION RESTORE serialized-value [FLUSH | APPEND | REPLACE]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of functions on the payload\n\nACL categories:  \n`@write`, `@slow`, `@scripting`,\n\nRestore libraries from the serialized payload.\n\nYou can use the optional *policy* argument to provide a policy for handling existing libraries. The following policies are allowed:\n\n- **APPEND:** appends the restored libraries to the existing libraries and aborts on collision. This is the default policy.\n- **FLUSH:** deletes all existing libraries before restoring the payload.\n- **REPLACE:** appends the restored libraries to the existing libraries, replacing any existing ones in case of name collisions. Note that this policy doesn't prevent function name collisions, only libraries.\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-restore/](https://redis.io/commands/function-restore/)"
- name: function stats
  id: function-stats/index
  summary: Return information about the function that's currently running and information about the available execution engines
  description: "# FUNCTION\n\n    FUNCTION STATS\n\nSyntax\n\n``` command-syntax\nFUNCTION STATS\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@scripting`,\n\nReturn information about the function that's currently running and information about the available execution engines.\n\nThe reply is map with two keys:\n\n1.  `running_script`: information about the running script. If there's no in-flight function, the server replies with a *nil*. Otherwise, this is a map with the following keys:\n\n- **name:** the name of the function.\n- **command:** the command and arguments used for invoking the function.\n- **duration_ms:** the function's runtime duration in milliseconds.\n\n2.  `engines`: this is a map of maps. Each entry in the map represent a single engine. Engine map contains statistics about the engine like number of functions and number of libraries.\n\nYou can use this command to inspect the invocation of a long-running function and decide whether kill it with the [`FUNCTION KILL`](../function-kill) command.\n\nFor more information please refer to [Introduction to Redis Functions](https://redis.io/topics/functions-intro).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/function-stats/](https://redis.io/commands/function-stats/)"
- name: geoadd
  id: geoadd/index
  summary: 'Time complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set'
  description: "# GEOADD\n\n    GEOADD\n\nSyntax\n\n``` command-syntax\nGEOADD key [NX | XX] [CH] longitude latitude member [longitude\n  latitude member ...]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(log(N)) for each item added, where N is the number of elements in the sorted set.\n\nACL categories:  \n`@write`, `@geo`, `@slow`,\n\nAdds the specified geospatial items (longitude, latitude, name) to the specified key. Data is stored into the key as a sorted set, in a way that makes it possible to query the items with the [`GEOSEARCH`](../geosearch) command.\n\nThe command takes arguments in the standard format x,y so the longitude must be specified before the latitude. There are limits to the coordinates that can be indexed: areas very near to the poles are not indexable.\n\nThe exact limits, as specified by EPSG:900913 / EPSG:3785 / OSGEO:41001 are the following:\n\n- Valid longitudes are from -180 to 180 degrees.\n- Valid latitudes are from -85.05112878 to 85.05112878 degrees.\n\nThe command will report an error when the user attempts to index coordinates outside the specified ranges.\n\n**Note:** there is no **GEODEL** command because you can use [`ZREM`](../zrem) to remove elements. The Geo index structure is just a sorted set.\n\n## GEOADD options\n\n`GEOADD` also provides the following options:\n\n- **XX**: Only update elements that already exist. Never add elements.\n- **NX**: Don't update already existing elements. Always add new elements.\n- **CH**: Modify the return value from the number of new elements added, to the total number of elements changed (CH is an abbreviation of *changed*). Changed elements are **new elements added** and elements already existing for which **the coordinates was updated**. So elements specified in the command line having the same score as they had in the past are not counted. Note: normally, the return value of `GEOADD` only counts the number of new elements added.\n\nNote: The **XX** and **NX** options are mutually exclusive.\n\n## How does it work?\n\nThe way the sorted set is populated is using a technique called [Geohash](https://en.wikipedia.org/wiki/Geohash). Latitude and Longitude bits are interleaved to form a unique 52-bit integer. We know that a sorted set double score can represent a 52-bit integer without losing precision.\n\nThis format allows for bounding box and radius querying by checking the 1+8 areas needed to cover the whole shape and discarding elements outside it. The areas are checked by calculating the range of the box covered, removing enough bits from the less significant part of the sorted set score, and computing the score range to query in the sorted set for each area.\n\n## What Earth model does it use?\n\nThe model assumes that the Earth is a sphere since it uses the Haversine formula to calculate distance. This formula is only an approximation when applied to the Earth, which is not a perfect sphere. The introduced errors are not an issue when used, for example, by social networks and similar applications requiring this type of querying. However, in the worst case, the error may be up to 0.5%, so you may want to consider other systems for error-critical applications.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- When used without optional arguments, the number of elements added to the sorted set (excluding score updates).\n- If the `CH` option is specified, the number of elements that were changed (added or updated).\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEODIST Sicily Palermo Catania\nGEORADIUS Sicily 15 37 100 km\nGEORADIUS Sicily 15 37 200 km\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `CH`, `NX` and `XX` options.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/geoadd/](https://redis.io/commands/geoadd/)"
- name: geodist
  id: geodist/index
  summary: Return the distance between two members in the geospatial index represented by the sorted set
  description: "# GEODIST\n\n    GEODIST\n\nSyntax\n\n``` command-syntax\nGEODIST key member1 member2 [M | KM | FT | MI]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(log(N))\n\nACL categories:  \n`@read`, `@geo`, `@slow`,\n\nReturn the distance between two members in the geospatial index represented by the sorted set.\n\nGiven a sorted set representing a geospatial index, populated using the [`GEOADD`](../geoadd) command, the command returns the distance between the two specified members in the specified unit.\n\nIf one or both the members are missing, the command returns NULL.\n\nThe unit must be one of the following, and defaults to meters:\n\n- **m** for meters.\n- **km** for kilometers.\n- **mi** for miles.\n- **ft** for feet.\n\nThe distance is computed assuming that the Earth is a perfect sphere, so errors up to 0.5% are possible in edge cases.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), specifically:\n\nThe command returns the distance as a double (represented as a string) in the specified unit, or NULL if one or both the elements are missing.\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEODIST Sicily Palermo Catania\nGEODIST Sicily Palermo Catania km\nGEODIST Sicily Palermo Catania mi\nGEODIST Sicily Foo Bar\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/geodist/](https://redis.io/commands/geodist/)"
- name: geohash
  id: geohash/index
  summary: 'Time complexity: O(log(N)) for each member requested, where N is the number of elements in the sorted set'
  description: "# GEOHASH\n\n    GEOHASH\n\nSyntax\n\n``` command-syntax\nGEOHASH key [member [member ...]]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(log(N)) for each member requested, where N is the number of elements in the sorted set.\n\nACL categories:  \n`@read`, `@geo`, `@slow`,\n\nReturn valid [Geohash](https://en.wikipedia.org/wiki/Geohash) strings representing the position of one or more elements in a sorted set value representing a geospatial index (where elements were added using [`GEOADD`](../geoadd)).\n\nNormally Redis represents positions of elements using a variation of the Geohash technique where positions are encoded using 52 bit integers. The encoding is also different compared to the standard because the initial min and max coordinates used during the encoding and decoding process are different. This command however **returns a standard Geohash** in the form of a string as described in the [Wikipedia article](https://en.wikipedia.org/wiki/Geohash) and compatible with the [geohash.org](http://geohash.org) web site.\n\n## Geohash string properties\n\nThe command returns 11 characters Geohash strings, so no precision is lost compared to the Redis internal 52 bit representation. The returned Geohashes have the following properties:\n\n1.  They can be shortened removing characters from the right. It will lose precision but will still point to the same area.\n2.  It is possible to use them in `geohash.org` URLs such as `http://geohash.org/<geohash-string>`. This is an [example of such URL](http://geohash.org/sqdtr74hyu0).\n3.  Strings with a similar prefix are nearby, but the contrary is not true, it is possible that strings with different prefixes are nearby too.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns an array where each element is the Geohash corresponding to each member name passed as argument to the command.\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOHASH Sicily Palermo Catania\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/geohash/](https://redis.io/commands/geohash/)"
- name: geopos
  id: geopos/index
  summary: 'Time complexity: O(N) where N is the number of members requested'
  description: "# GEOPOS\n\n    GEOPOS\n\nSyntax\n\n``` command-syntax\nGEOPOS key [member [member ...]]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(N) where N is the number of members requested.\n\nACL categories:  \n`@read`, `@geo`, `@slow`,\n\nReturn the positions (longitude,latitude) of all the specified members of the geospatial index represented by the sorted set at *key*.\n\nGiven a sorted set representing a geospatial index, populated using the [`GEOADD`](../geoadd) command, it is often useful to obtain back the coordinates of specified members. When the geospatial index is populated via [`GEOADD`](../geoadd) the coordinates are converted into a 52 bit geohash, so the coordinates returned may not be exactly the ones used in order to add the elements, but small errors may be introduced.\n\nThe command can accept a variable number of arguments so it always returns an array of positions even when a single element is specified.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns an array where each element is a two elements array representing longitude and latitude (x,y) of each member name passed as argument to the command.\n\nNon existing elements are reported as NULL elements of the array.\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOPOS Sicily Palermo Catania NonExisting\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/geopos/](https://redis.io/commands/geopos/)"
- name: georadius
  id: georadius/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# GEORADIUS\n\n    GEORADIUS (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`GEOSEARCH`](../geosearch) and [`GEOSEARCHSTORE`](../geosearchstore) with the `BYRADIUS` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nGEORADIUS key longitude latitude radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n  [STORE key] [STOREDIST key]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nACL categories:  \n`@write`, `@geo`, `@slow`,\n\nReturn the members of a sorted set populated with geospatial information using [`GEOADD`](../geoadd), which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).\n\nThis manual page also covers the [`GEORADIUS_RO`](../georadius_ro) and [`GEORADIUSBYMEMBER_RO`](../georadiusbymember_ro) variants (see the section below for more information).\n\nThe common use case for this command is to retrieve geospatial items near a specified point not farther than a given amount of meters (or other units). This allows, for example, to suggest mobile users of an application nearby places.\n\nThe radius is specified in one of the following units:\n\n- **m** for meters.\n- **km** for kilometers.\n- **mi** for miles.\n- **ft** for feet.\n\nThe command optionally returns additional information using the following options:\n\n- `WITHDIST`: Also return the distance of the returned items from the specified center. The distance is returned in the same unit as the unit specified as the radius argument of the command.\n- `WITHCOORD`: Also return the longitude,latitude coordinates of the matching items.\n- `WITHHASH`: Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user.\n\nThe command default is to return unsorted items. Two different sorting methods can be invoked using the following two options:\n\n- `ASC`: Sort returned items from the nearest to the farthest, relative to the center.\n- `DESC`: Sort returned items from the farthest to the nearest, relative to the center.\n\nBy default all the matching items are returned. It is possible to limit the results to the first N matching items by using the **COUNT `<count>`** option. When `ANY` is provided the command will return as soon as enough matches are found, so the results may not be the ones closest to the specified point, but on the other hand, the effort invested by the server is significantly lower. When `ANY` is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them, so to query very large areas with a very small `COUNT` option may be slow even if just a few results are returned.\n\nBy default the command returns the items to the client. It is possible to store the results with one of these options:\n\n- `STORE`: Store the items in a sorted set populated with their geospatial information.\n- `STOREDIST`: Store the items in a sorted set populated with their distance from the center as a floating point number, in the same unit specified in the radius.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\n- Without any `WITH` option specified, the command just returns a linear array like \\[\"New York\",\"Milan\",\"Paris\"\\].\n- If `WITHCOORD`, `WITHDIST` or `WITHHASH` options are specified, the command returns an array of arrays, where each sub-array represents a single item.\n\nWhen additional information is returned as an array of arrays for each item, the first item in the sub-array is always the name of the returned item. The other information is returned in the following order as successive elements of the sub-array.\n\n1.  The distance from the center as a floating point number, in the same unit specified in the radius.\n2.  The geohash integer.\n3.  The coordinates as a two items x,y array (longitude,latitude).\n\nSo for example the command `GEORADIUS Sicily 15 37 200 km WITHCOORD WITHDIST` will return each item in the following way:\n\n    [\"Palermo\",\"190.4424\",[\"13.361389338970184\",\"38.115556395496299\"]]\n\n## Read-only variants\n\nSince `GEORADIUS` and [`GEORADIUSBYMEMBER`](../georadiusbymember) have a `STORE` and `STOREDIST` option they are technically flagged as writing commands in the Redis command table. For this reason read-only replicas will flag them, and Redis Cluster replicas will redirect them to the master instance even if the connection is in read-only mode (see the [`READONLY`](../readonly) command of Redis Cluster).\n\nBreaking the compatibility with the past was considered but rejected, at least for Redis 4.0, so instead two read-only variants of the commands were added. They are exactly like the original commands but refuse the `STORE` and `STOREDIST` options. The two variants are called [`GEORADIUS_RO`](../georadius_ro) and [`GEORADIUSBYMEMBER_RO`](../georadiusbymember_ro), and can safely be used in replicas.\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEORADIUS Sicily 15 37 200 km WITHDIST\nGEORADIUS Sicily 15 37 200 km WITHCOORD\nGEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `ANY` option for `COUNT`.\n- Starting with Redis version 7.0.0: Added support for uppercase unit names.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/georadius/](https://redis.io/commands/georadius/)"
- name: georadius_ro
  id: georadius_ro/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# GEORADIUS_RO\n\n    GEORADIUS_RO (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`GEOSEARCH`](../geosearch) with the `BYRADIUS` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nGEORADIUS_RO key longitude latitude radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n```\n\nAvailable since:  \n3.2.10\n\nTime complexity:  \nO(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nACL categories:  \n`@read`, `@geo`, `@slow`,\n\nRead-only variant of the [`GEORADIUS`](../georadius) command.\n\nThis command is identical to the [`GEORADIUS`](../georadius) command, except that it doesn't support the optional `STORE` and `STOREDIST` parameters.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): An array with each entry being the corresponding result of the subcommand given at the same position.\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `ANY` option for `COUNT`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/georadius_ro/](https://redis.io/commands/georadius_ro/)"
- name: georadiusbymember
  id: georadiusbymember/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# GEORADIUSBYMEMBER\n\n    GEORADIUSBYMEMBER (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`GEOSEARCH`](../geosearch) and [`GEOSEARCHSTORE`](../geosearchstore) with the `BYRADIUS` and `FROMMEMBER` arguments when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nGEORADIUSBYMEMBER key member radius <M | KM | FT | MI> [WITHCOORD]\n  [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC] [STORE key]\n  [STOREDIST key]\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nACL categories:  \n`@write`, `@geo`, `@slow`,\n\nThis command is exactly like [`GEORADIUS`](../georadius) with the sole difference that instead of taking, as the center of the area to query, a longitude and latitude value, it takes the name of a member already existing inside the geospatial index represented by the sorted set.\n\nThe position of the specified member is used as the center of the query.\n\nPlease check the example below and the [`GEORADIUS`](../georadius) documentation for more information about the command and its options.\n\nNote that [`GEORADIUSBYMEMBER_RO`](../georadiusbymember_ro) is also available since Redis 3.2.10 and Redis 4.0.0 in order to provide a read-only command that can be used in replicas. See the [`GEORADIUS`](../georadius) page for more information.\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.583333 37.316667 \"Agrigento\"\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEORADIUSBYMEMBER Sicily Agrigento 100 km\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added support for uppercase unit names.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/georadiusbymember/](https://redis.io/commands/georadiusbymember/)"
- name: georadiusbymember_ro
  id: georadiusbymember_ro/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# GEORADIUSBYMEMBER_RO\n\n    GEORADIUSBYMEMBER_RO (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`GEOSEARCH`](../geosearch) with the `BYRADIUS` and `FROMMEMBER` arguments when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nGEORADIUSBYMEMBER_RO key member radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n```\n\nAvailable since:  \n3.2.10\n\nTime complexity:  \nO(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\n\nACL categories:  \n`@read`, `@geo`, `@slow`,\n\nRead-only variant of the [`GEORADIUSBYMEMBER`](../georadiusbymember) command.\n\nThis command is identical to the [`GEORADIUSBYMEMBER`](../georadiusbymember) command, except that it doesn't support the optional `STORE` and `STOREDIST` parameters.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/georadiusbymember_ro/](https://redis.io/commands/georadiusbymember_ro/)"
- name: geosearch
  id: geosearch/index
  summary: Return the members of a sorted set populated with geospatial information using GEOADD, which are within the borders of the area specified by a given shape
  description: "# GEOSEARCH\n\n    GEOSEARCH\n\nSyntax\n\n``` command-syntax\nGEOSEARCH key <FROMMEMBER member | FROMLONLAT longitude latitude>\n  <BYRADIUS radius <M | KM | FT | MI> | BYBOX width height <M | KM |\n  FT | MI>> [ASC | DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST]\n  [WITHHASH]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape\n\nACL categories:  \n`@read`, `@geo`, `@slow`,\n\nReturn the members of a sorted set populated with geospatial information using [`GEOADD`](../geoadd), which are within the borders of the area specified by a given shape. This command extends the [`GEORADIUS`](../georadius) command, so in addition to searching within circular areas, it supports searching within rectangular areas.\n\nThis command should be used in place of the deprecated [`GEORADIUS`](../georadius) and [`GEORADIUSBYMEMBER`](../georadiusbymember) commands.\n\nThe query's center point is provided by one of these mandatory options:\n\n- `FROMMEMBER`: Use the position of the given existing `<member>` in the sorted set.\n- `FROMLONLAT`: Use the given `<longitude>` and `<latitude>` position.\n\nThe query's shape is provided by one of these mandatory options:\n\n- `BYRADIUS`: Similar to [`GEORADIUS`](../georadius), search inside circular area according to given `<radius>`.\n- `BYBOX`: Search inside an axis-aligned rectangle, determined by `<height>` and `<width>`.\n\nThe command optionally returns additional information using the following options:\n\n- `WITHDIST`: Also return the distance of the returned items from the specified center point. The distance is returned in the same unit as specified for the radius or height and width arguments.\n- `WITHCOORD`: Also return the longitude and latitude of the matching items.\n- `WITHHASH`: Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user.\n\nMatching items are returned unsorted by default. To sort them, use one of the following two options:\n\n- `ASC`: Sort returned items from the nearest to the farthest, relative to the center point.\n- `DESC`: Sort returned items from the farthest to the nearest, relative to the center point.\n\nAll matching items are returned by default. To limit the results to the first N matching items, use the **COUNT `<count>`** option. When the `ANY` option is used, the command returns as soon as enough matches are found. This means that the results returned may not be the ones closest to the specified point, but the effort invested by the server to generate them is significantly less. When `ANY` is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them, so to query very large areas with a very small `COUNT` option may be slow even if just a few results are returned.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\n- Without any `WITH` option specified, the command just returns a linear array like \\[\"New York\",\"Milan\",\"Paris\"\\].\n- If `WITHCOORD`, `WITHDIST` or `WITHHASH` options are specified, the command returns an array of arrays, where each sub-array represents a single item.\n\nWhen additional information is returned as an array of arrays for each item, the first item in the sub-array is always the name of the returned item. The other information is returned in the following order as successive elements of the sub-array.\n\n1.  The distance from the center as a floating point number, in the same unit specified in the shape.\n2.  The geohash integer.\n3.  The coordinates as a two items x,y array (longitude,latitude).\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOADD Sicily 12.758489 38.788135 \"edge1\"   17.241510 38.788135 \"edge2\" \nGEOSEARCH Sicily FROMLONLAT 15 37 BYRADIUS 200 km ASC\nGEOSEARCH Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added support for uppercase unit names.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/geosearch/](https://redis.io/commands/geosearch/)"
- name: geosearchstore
  id: geosearchstore/index
  summary: This command is like GEOSEARCH, but stores the result in destination key
  description: "# GEOSEARCHSTORE\n\n    GEOSEARCHSTORE\n\nSyntax\n\n``` command-syntax\nGEOSEARCHSTORE destination source <FROMMEMBER member |\n  FROMLONLAT longitude latitude> <BYRADIUS radius <M | KM | FT | MI>\n  | BYBOX width height <M | KM | FT | MI>> [ASC | DESC] [COUNT count\n  [ANY]] [STOREDIST]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape\n\nACL categories:  \n`@write`, `@geo`, `@slow`,\n\nThis command is like [`GEOSEARCH`](../geosearch), but stores the result in destination key.\n\nThis command replaces the now deprecated [`GEORADIUS`](../georadius) and [`GEORADIUSBYMEMBER`](../georadiusbymember).\n\nBy default, it stores the results in the `destination` sorted set with their geospatial information.\n\nWhen using the `STOREDIST` option, the command stores the items in a sorted set populated with their distance from the center of the circle or box, as a floating-point number, in the same unit specified for that shape.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting set.\n\n## Examples\n\n``` redis-cli\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOADD Sicily 12.758489 38.788135 \"edge1\"   17.241510 38.788135 \"edge2\" \nGEOSEARCHSTORE key1 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3\nGEOSEARCH key1 FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST WITHHASH\nGEOSEARCHSTORE key2 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3 STOREDIST\nZRANGE key2 0 -1 WITHSCORES\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added support for uppercase unit names.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/geosearchstore/](https://redis.io/commands/geosearchstore/)"
- name: get
  id: get/index
  summary: Get the value of key
  description: "# GET\n\n    GET\n\nSyntax\n\n``` command-syntax\nGET key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@string`, `@fast`,\n\nGet the value of `key`. If the key does not exist the special value `nil` is returned. An error is returned if the value stored at `key` is not a string, because `GET` only handles string values.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of `key`, or `nil` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nGET nonexisting\nSET mykey \"Hello\"\nGET mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/get/](https://redis.io/commands/get/)"
- name: getbit
  id: getbit/index
  summary: Returns the bit value at offset in the string value stored at key
  description: "# GETBIT\n\n    GETBIT\n\nSyntax\n\n``` command-syntax\nGETBIT key offset\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@bitmap`, `@fast`,\n\nReturns the bit value at *offset* in the string value stored at *key*.\n\nWhen *offset* is beyond the string length, the string is assumed to be a contiguous space with 0 bits. When *key* does not exist it is assumed to be an empty string, so *offset* is always out of range and the value is also assumed to be a contiguous space with 0 bits.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the bit value stored at *offset*.\n\n## Examples\n\n``` redis-cli\nSETBIT mykey 7 1\nGETBIT mykey 0\nGETBIT mykey 7\nGETBIT mykey 100\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/getbit/](https://redis.io/commands/getbit/)"
- name: getdel
  id: getdel/index
  summary: Get the value of key and delete the key
  description: "# GETDEL\n\n    GETDEL\n\nSyntax\n\n``` command-syntax\nGETDEL key\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nGet the value of `key` and delete the key. This command is similar to [`GET`](../get), except for the fact that it also deletes the key on success (if and only if the key's value type is a string).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of `key`, `nil` when `key` does not exist, or an error if the key's value type isn't a string.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nGETDEL mykey\nGET mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/getdel/](https://redis.io/commands/getdel/)"
- name: getex
  id: getex/index
  summary: Get the value of key and optionally set its expiration
  description: "# GETEX\n\n    GETEX\n\nSyntax\n\n``` command-syntax\nGETEX key [EX seconds | PX milliseconds | EXAT unix-time-seconds |\n  PXAT unix-time-milliseconds | PERSIST]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nGet the value of `key` and optionally set its expiration. `GETEX` is similar to [`GET`](../get), but is a write command with additional options.\n\n## Options\n\nThe `GETEX` command supports a set of options that modify its behavior:\n\n- `EX` *seconds* -- Set the specified expire time, in seconds.\n- `PX` *milliseconds* -- Set the specified expire time, in milliseconds.\n- `EXAT` *timestamp-seconds* -- Set the specified Unix time at which the key will expire, in seconds.\n- `PXAT` *timestamp-milliseconds* -- Set the specified Unix time at which the key will expire, in milliseconds.\n- [`PERSIST`](../persist) -- Remove the time to live associated with the key.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of `key`, or `nil` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nGETEX mykey\nTTL mykey\nGETEX mykey EX 60\nTTL mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/getex/](https://redis.io/commands/getex/)"
- name: getrange
  id: getrange/index
  summary: 'Time complexity: O(N) where N is the length of the returned string'
  description: "# GETRANGE\n\n    GETRANGE\n\nSyntax\n\n``` command-syntax\nGETRANGE key start end\n```\n\nAvailable since:  \n2.4.0\n\nTime complexity:  \nO(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.\n\nACL categories:  \n`@read`, `@string`, `@slow`,\n\nReturns the substring of the string value stored at `key`, determined by the offsets `start` and `end` (both are inclusive). Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character, -2 the penultimate and so forth.\n\nThe function handles out of range requests by limiting the resulting range to the actual length of the string.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)\n\n## Examples\n\n``` redis-cli\nSET mykey \"This is a string\"\nGETRANGE mykey 0 3\nGETRANGE mykey -3 -1\nGETRANGE mykey 0 -1\nGETRANGE mykey 10 100\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/getrange/](https://redis.io/commands/getrange/)"
- name: getset
  id: getset/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# GETSET\n\n    GETSET (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`SET`](../set) with the `GET` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nGETSET key value\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nAtomically sets `key` to `value` and returns the old value stored at `key`. Returns an error when `key` exists but does not hold a string value. Any previous time to live associated with the key is discarded on successful [`SET`](../set) operation.\n\n## Design pattern\n\n`GETSET` can be used together with [`INCR`](../incr) for counting with atomic reset. For example: a process may call [`INCR`](../incr) against the key `mycounter` every time some event occurs, but from time to time we need to get the value of the counter and reset it to zero atomically. This can be done using `GETSET mycounter \"0\"`:\n\n``` redis-cli\nINCR mycounter\nGETSET mycounter \"0\"\nGET mycounter\n```\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the old value stored at `key`, or `nil` when `key` did not exist.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nGETSET mykey \"World\"\nGET mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/getset/](https://redis.io/commands/getset/)"
- name: graph.config get
  id: graph.config-get/index
  summary: Retrieves the current value of a RedisGraph configuration parameter
  description: "# GRAPH.CONFIG\n\n    GRAPH.CONFIG GET\n\nSyntax\n\n``` command-syntax\nGRAPH.CONFIG GET name\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.2.11](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nRetrieves the current value of a RedisGraph configuration parameter.\n\nRedisGraph configuration parameters are detailed [here](https://redis.io/docs/stack/graph/configuration).\n\n`*` can be used to retrieve the value of all RedisGraph configuration parameters.\n\n```\n127.0.0.1:6379> graph.config get *\n 1) 1) \"TIMEOUT\"\n    2) (integer) 0\n 2) 1) \"CACHE_SIZE\"\n    2) (integer) 25\n 3) 1) \"ASYNC_DELETE\"\n    2) (integer) 1\n 4) 1) \"OMP_THREAD_COUNT\"\n    2) (integer) 8\n 5) 1) \"THREAD_COUNT\"\n    2) (integer) 8\n 6) 1) \"RESULTSET_SIZE\"\n    2) (integer) -1\n 7) 1) \"VKEY_MAX_ENTITY_COUNT\"\n    2) (integer) 100000\n 8) 1) \"MAX_QUEUED_QUERIES\"\n    2) (integer) 4294967295\n 9) 1) \"QUERY_MEM_CAPACITY\"\n    2) (integer) 0\n10) 1) \"DELTA_MAX_PENDING_CHANGES\"\n    2) (integer) 10000\n11) 1) \"NODE_CREATION_BUFFER\"\n    2) (integer) 16384\n```\n\n```\n127.0.0.1:6379> graph.config get TIMEOUT\n1) \"TIMEOUT\"\n2) (integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.config-get/](https://redis.io/commands/graph.config-get/)"
- name: graph.config set
  id: graph.config-set/index
  summary: Set the value of a RedisGraph configuration parameter
  description: "# GRAPH.CONFIG\n\n    GRAPH.CONFIG SET\n\nSyntax\n\n``` command-syntax\nGRAPH.CONFIG SET name value\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.2.11](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nSet the value of a RedisGraph configuration parameter.\n\nValues set using `GRAPH.CONFIG SET` are not persisted after server restart.\n\nRedisGraph configuration parameters are detailed [here](https://redis.io/docs/stack/graph/configuration).\n\nNote: As detailed in the link above, not all RedisGraph configuration parameters can be set at run-time.\n\n```\n127.0.0.1:6379> graph.config get TIMEOUT\n1) \"TIMEOUT\"\n2) (integer) 0\n127.0.0.1:6379> graph.config set TIMEOUT 10000\nOK\n127.0.0.1:6379> graph.config get TIMEOUT\n1) \"TIMEOUT\"\n2) (integer) 10000\n```\n\n```\n127.0.0.1:6379> graph.config set THREAD_COUNT 10\n(error) This configuration parameter cannot be set at run-time\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.config-set/](https://redis.io/commands/graph.config-set/)"
- name: graph.delete
  id: graph.delete/index
  summary: Completely removes the graph and all of its entities
  description: "# GRAPH.DELETE\n\n    GRAPH.DELETE\n\nSyntax\n\n``` command-syntax\nGRAPH.DELETE graph\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 1.0.0](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nCompletely removes the graph and all of its entities.\n\nArguments: `Graph name`\n\nReturns: `String indicating if operation succeeded or failed.`\n\n``` chroma\nGRAPH.DELETE us_government\n```\n\nNote: To delete a node from the graph (not the entire graph), execute a `MATCH` query and pass the alias to the `DELETE` clause:\n\n```\nGRAPH.QUERY DEMO_GRAPH \"MATCH (x:Y {propname: propvalue}) DELETE x\"\n```\n\nWARNING: When you delete a node, all of the node's incoming/outgoing relationships are also removed.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.delete/](https://redis.io/commands/graph.delete/)"
- name: graph.explain
  id: graph.explain/index
  summary: Constructs a query execution plan but does not run it
  description: "# GRAPH.EXPLAIN\n\n    GRAPH.EXPLAIN\n\nSyntax\n\n``` command-syntax\nGRAPH.EXPLAIN graph query\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.0.0](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nConstructs a query execution plan but does not run it. Inspect this execution plan to better understand how your query will get executed.\n\nArguments: `Graph name, Query`\n\nReturns: `String representation of a query execution plan`\n\n``` chroma\nGRAPH.EXPLAIN us_government \"MATCH (p:President)-[:BORN]->(h:State {name:'Hawaii'}) RETURN p\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.explain/](https://redis.io/commands/graph.explain/)"
- name: graph.list
  id: graph.list/index
  summary: Lists all graph keys in the keyspace
  description: "# GRAPH.LIST\n\n    GRAPH.LIST\n\nSyntax\n\n``` command-syntax\nGRAPH.LIST\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.4.3](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nLists all graph keys in the keyspace.\n\n``` chroma\n127.0.0.1:6379> GRAPH.LIST\n2) G\n3) resources\n4) players\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.list/](https://redis.io/commands/graph.list/)"
- name: graph.profile
  id: graph.profile/index
  summary: Executes a query and produces an execution plan augmented with metrics for each operation's execution
  description: "# GRAPH.PROFILE\n\n    GRAPH.PROFILE\n\nSyntax\n\n``` command-syntax\nGRAPH.PROFILE graph query [TIMEOUT timeout]\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.0.0](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nExecutes a query and produces an execution plan augmented with metrics for each operation's execution.\n\nArguments: `Graph name, Query`\n\nReturns: `String representation of a query execution plan, with details on results produced by and time spent in each operation.`\n\n`GRAPH.PROFILE` is a parallel entrypoint to [`GRAPH.QUERY`](../graph.query). It accepts and executes the same queries, but it will not emit results, instead returning the operation tree structure alongside the number of records produced and total runtime of each operation.\n\nIt is important to note that this blends elements of [GRAPH.QUERY](../graph.query) and [GRAPH.EXPLAIN](../graph.explain). It is not a dry run and will perform all graph modifications expected of the query, but will not output results produced by a `RETURN` clause or query statistics.\n\n``` chroma\nGRAPH.PROFILE imdb\n\"MATCH (actor_a:Actor)-[:ACT]->(:Movie)<-[:ACT]-(actor_b:Actor)\nWHERE actor_a <> actor_b\nCREATE (actor_a)-[:COSTARRED_WITH]->(actor_b)\"\n1) \"Create | Records produced: 11208, Execution time: 168.208661 ms\"\n2) \"    Filter | Records produced: 11208, Execution time: 1.250565 ms\"\n3) \"        Conditional Traverse | Records produced: 12506, Execution time: 7.705860 ms\"\n4) \"            Node By Label Scan | (actor_a:Actor) | Records produced: 1317, Execution time: 0.104346 ms\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.profile/](https://redis.io/commands/graph.profile/)"
- name: graph.query
  id: graph.query/index
  summary: Executes the given query against a specified graph
  description: "# GRAPH.QUERY\n\n    GRAPH.QUERY\n\nSyntax\n\n``` command-syntax\nGRAPH.QUERY graph query [TIMEOUT timeout]\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 1.0.0](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nExecutes the given query against a specified graph.\n\nArguments: `Graph name, Query, Timeout [optional]`\n\nReturns: [Result set](https://redis.io/docs/stack/graph/design/result_structure)\n\n### Queries and Parameterized Queries\n\nThe execution plans of queries, both regular and parameterized, are cached (up to [CACHE_SIZE](https://redis.io/docs/stack/graph/configuration/#cache_size) unique queries are cached). Therefore, it is recommended to use parametrized queries when executing many queries with the same pattern but different constants.\n\nQuery-level timeouts can be set as described in [the configuration section](https://redis.io/docs/stack/graph/configuration#timeout).\n\n#### Query structure:\n\n`GRAPH.QUERY graph_name \"query\"`\n\nexample:\n\n``` chroma\nGRAPH.QUERY us_government \"MATCH (p:president)-[:born]->(:state {name:'Hawaii'}) RETURN p\"\n```\n\n#### Parametrized query structure:\n\n`GRAPH.QUERY graph_name \"CYPHER param=val [param=val ...] query\"`\n\nexample:\n\n``` chroma\nGRAPH.QUERY us_government \"CYPHER state_name='Hawaii' MATCH (p:president)-[:born]->(:state {name:$state_name}) RETURN p\"\n```\n\n### Query language\n\nThe syntax is based on [Cypher](http://www.opencypher.org/). [Most](https://redis.io/docs/stack/graph/cypher_support/) of the language is supported. RedisGraph-specific extensions are also described below.\n\n1.  [Clauses](#query-structure)\n2.  [Functions](#functions)\n\n### Query structure\n\n- [MATCH](#match)\n- [OPTIONAL MATCH](#optional-match)\n- [WHERE](#where)\n- [RETURN](#return)\n- [ORDER BY](#order-by)\n- [SKIP](#skip)\n- [LIMIT](#limit)\n- [CREATE](#create)\n- [MERGE](#merge)\n- [DELETE](#delete)\n- [SET](#set)\n- [WITH](#with)\n- [UNION](#union)\n- [UNWIND](#unwind)\n- [FOREACH](#foreach)\n\n#### MATCH\n\nMatch describes the relationship between queried entities, using ascii art to represent pattern(s) to match against.\n\nNodes are represented by parentheses `()`, and Relationships are represented by brackets `[]`.\n\nEach graph entity node/relationship can contain an alias and a label/relationship type, but both can be left empty if necessary.\n\nEntity structure: `alias:label {filters}`.\n\nAlias, label/relationship type, and filters are all optional.\n\nExample:\n\n``` chroma\n(a:Actor)-[:ACT]->(m:Movie {title:\"straight outta compton\"})\n```\n\n`a` is an alias for the source node, which we'll be able to refer to at different places within our query.\n\n`Actor` is the label under which this node is marked.\n\n`ACT` is the relationship type.\n\n`m` is an alias for the destination node.\n\n`Movie` destination node is of \"type\" movie.\n\n`{title:\"straight outta compton\"}` requires the node's title attribute to equal \"straight outta compton\".\n\nIn this example, we're interested in actor entities which have the relation \"act\" with **the** entity representing the \"straight outta compton\" movie.\n\nIt is possible to describe broader relationships by composing a multi-hop query such as:\n\n``` chroma\n(me {name:'swilly'})-[:FRIENDS_WITH]->()-[:FRIENDS_WITH]->(foaf)\n```\n\nHere we're interested in finding out who my friends' friends are.\n\nNodes can have more than one relationship coming in or out of them, for instance:\n\n``` chroma\n(me {name:'swilly'})-[:VISITED]->(c:Country)<-[:VISITED]-(friend)<-[:FRIENDS_WITH]-(me)\n```\n\nHere we're interested in knowing which of my friends have visited at least one country I've been to.\n\n##### Variable length relationships\n\nNodes that are a variable number of relationship→node hops away can be found using the following syntax:\n\n``` chroma\n-[:TYPE*minHops..maxHops]->\n```\n\n[`TYPE`](../type), `minHops` and `maxHops` are all optional and default to type agnostic, 1 and infinity, respectively.\n\nWhen no bounds are given the dots may be omitted. The dots may also be omitted when setting only one bound and this implies a fixed length pattern.\n\nExample:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (charlie:Actor { name: 'Charlie Sheen' })-[:PLAYED_WITH*1..3]->(colleague:Actor)\nRETURN colleague\"\n```\n\nReturns all actors related to 'Charlie Sheen' by 1 to 3 hops.\n\n##### Bidirectional path traversal\n\nIf a relationship pattern does not specify a direction, it will match regardless of which node is the source and which is the destination:\n\n``` chroma\n-[:TYPE]-\n```\n\nExample:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (person_a:Person)-[:KNOWS]-(person_b:Person)\nRETURN person_a, person_b\"\n```\n\nReturns all pairs of people connected by a `KNOWS` relationship. Note that each pair will be returned twice, once with each node in the `person_a` field and once in the `person_b` field.\n\nThe syntactic sugar `(person_a)<-[:KNOWS]->(person_b)` will return the same results.\n\nThe bracketed edge description can be omitted if all relations should be considered: `(person_a)--(person_b)`.\n\n##### Named paths\n\nNamed path variables are created by assigning a path in a MATCH clause to a single alias with the syntax: `MATCH named_path = (path)-[to]->(capture)`\n\nThe named path includes all entities in the path, regardless of whether they have been explicitly aliased. Named paths can be accessed using [designated built-in functions](#path-functions) or returned directly if using a language-specific client.\n\nExample:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH p=(charlie:Actor { name: 'Charlie Sheen' })-[:PLAYED_WITH*1..3]->(:Actor)\nRETURN nodes(p) as actors\"\n```\n\nThis query will produce all the paths matching the pattern contained in the named path `p`. All of these paths will share the same starting point, the actor node representing Charlie Sheen, but will otherwise vary in length and contents. Though the variable-length traversal and `(:Actor)` endpoint are not explicitly aliased, all nodes and edges traversed along the path will be included in `p`. In this case, we are only interested in the nodes of each path, which we'll collect using the built-in function `nodes()`. The returned value will contain, in order, Charlie Sheen, between 0 and 2 intermediate nodes, and the unaliased endpoint.\n\n##### All shortest paths\n\nThe `allShortestPaths` function returns all the shortest paths between a pair of entities.\n\n`allShortestPaths()` is a MATCH mode in which only the shortest paths matching all criteria are captured. Both the source and the target nodes must be bound in an earlier WITH-demarcated scope to invoke `allShortestPaths()`.\n\nA minimal length (must be 1) and maximal length (must be at least 1) for the search may be specified. Zero or more relationship types may be specified (e.g. \\[:R\\|Q\\*1..3\\]). No property filters may be introduced in the pattern.\n\n`allShortestPaths()` can have any number of hops for its minimum and maximum, including zero. This number represents how many edges can be traversed in fulfilling the pattern, with a value of 0 entailing that the source node will be included in the returned path.\n\nFilters on properties are supported, and any number of labels may be specified.\n\nExample:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (charlie:Actor {name: 'Charlie Sheen'}), (kevin:Actor {name: 'Kevin Bacon'})\nWITH charlie, kevin\nMATCH p=allShortestPaths((charlie)-[:PLAYED_WITH*]->(kevin))\nRETURN nodes(p) as actors\"\n```\n\nThis query will produce all paths of the minimum length connecting the actor node representing Charlie Sheen to the one representing Kevin Bacon. There are several 2-hop paths between the two actors, and all of these will be returned. The computation of paths then terminates, as we are not interested in any paths of length greater than 2.\n\n##### Single-Pair minimal-weight bounded-cost bounded-length paths\n\n(Since RedisGraph v2.10)\n\nThe `algo.SPpaths` procedure returns one, *n*, or all minimal-weight, \\[optionally\\] bounded-cost, \\[optionally\\] bounded-length distinct paths between a pair of entities. Each path is a sequence of distinct nodes connected by distinct edges.\n\n`algo.SPpaths()` is a MATCH mode in which only the paths matching all criteria are captured. Both the source and the target nodes must be bound in an earlier WITH-demarcated scope to invoke `algo.SPpaths()`.\n\nInput arguments:\n\n- A map containing:\n  - `sourceNode`: Mandatory. Must be of type node\n\n  - `targetNode`: Mandatory. Must be of type node\n\n  - `relTypes`: Optional. Array of zero or more relationship types. A relationship must have one of these types to be part of the path. If not specified or empty: the path may contain any relationship.\n\n  - `relDirection`: Optional. string. one of `'incoming'`, `'outgoing'`, `'both'`. If not specified: `'outgoing'`.\n\n  - `pathCount`: Optional. Number of minimal-weight paths to retrieve. Non-negative integer. If not specified: 1\n\n    - `0`: retrieve all minimal-weight paths (all reported paths have the same weight)\n\n      Order: 1st : minimal cost, 2nd: minimal length.\n\n    - `1`: retrieve a single minimal-weight path\n\n      When multiple equal-weight paths exist: (preferences: 1st : minimal cost, 2nd: minimal length)\n\n    - *n* \\> 1: retrieve up to *n* minimal-weight paths (reported paths may have different weights)\n\n      When multiple equal-weight paths exist: (preferences: 1st : minimal cost, 2nd: minimal length)\n\n  - `weightProp`: Optional. If not specified: use the default weight: 1 for each relationship.\n\n    The name of the property that represents the weight of each relationship (integer / float)\n\n    If such property doesn’t exist, of if its value is not a positive numeric - use the default weight: 1\n\n    Note: when all weights are equal: minimal-weight ≡ shortest-path.\n\n  - `costProp`: Optional. If not specified: use the default cost: 1 for each relationship.\n\n    The name of the property that represents the cost of each relationship (integer / float)\n\n    If such property doesn't exist, or if its value is not a positive numeric - use the default cost: 1\n\n  - `maxLen`: Optional. Maximal path length (number of relationships along the path). Positive integer.\n\n    If not specified: no maximal length constraint.\n\n  - `maxCost`: Optional. Positive numeric. If not specified: no maximal cost constraint.\n\n    The maximal cumulative cost for the relationships along the path.\n\nResult:\n\n- Paths conforming to the input arguments. For each reported path:\n\n  - `path` - the path\n\n  - `pathWeight` - the path’s weight\n\n  - `pathCost` - the path’s cost\n\n  To retrieve additional information:\n\n  - The path’s length can be retrieved with `length(path)`\n\n  - An array of the nodes along the path can be retrieved with `nodes(path)`\n\n  - The path’s first node can be retrieved with `nodes(path)[0]`\n\n  - The path’s last node can be retrieved with `nodes(path)[-1]`\n\n  - An array of the relationship's costs along the path can be retrieved with `[r in relationships(path) | r.cost]` where cost is the name of the cost property\n\n  - An array of the relationship's weights along the path can be retrieved with `[r in relationships(path) | r.weight]` where weight is the name of the weight property\n\nBehavior in presence on multiple-edges:\n\n- multi-edges are two or more edges connecting the same pair of vertices (possibly with different weights and costs).\n\n- All matching edges are considered. Paths with identical vertices and different edges are different paths. The following are 3 different paths ('n1', 'n2', and 'n3' are nodes; 'e1', 'e2', 'e3', and 'e4' are edges): (n1)-\\[e1\\]-(n2)-\\[e2\\]-(n3), (n1)-\\[e1\\]-(n2)-\\[e3\\]-(n3), (n1)-\\[e4\\]-(n2)-\\[e3\\]-(n3)\n\nExample:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \n\"MATCH (s:Actor {name: 'Charlie Sheen'}), (t:Actor {name: 'Kevin Bacon'}) \nCALL algo.SPpaths( {sourceNode: s, targetNode: t, relTypes: ['r1', 'r2', 'r3'], relDirection: 'outgoing', pathCount: 1, weightProp: 'weight', costProp: 'cost', maxLen: 3, maxCost: 100} ) \nYIELD path, pathCost, pathWeight\nRETURN path ORDER BY pathCost\"\n```\n\n##### Single-Source minimal-weight bounded-cost bounded-length paths\n\n(Since RedisGraph v2.10)\n\nThe `algo.SSpaths` procedure returns one, *n*, or all minimal-weight, \\[optionally\\] bounded-cost, \\[optionally\\] bounded-length distinct paths from a given entity. Each path is a sequence of distinct nodes connected by distinct edges.\n\n`algo.SSpaths()` is a MATCH mode in which only the paths matching all criteria are captured. The source node must be bound in an earlier WITH-demarcated scope to invoke `algo.SSpaths()`.\n\nInput arguments:\n\n- A map containing:\n  - `sourceNode`: Mandatory. Must be of type node\n\n  - `relTypes`: Optional. Array of zero or more relationship types. A relationship must have one of these types to be part of the path. If not specified or empty: the path may contain any relationship.\n\n  - `relDirection`: Optional. string. one of `'incoming'`, `'outgoing'`, `'both'`. If not specified: `'outgoing'`.\n\n  - `pathCount`: Optional. Number of minimal-weight paths to retrieve. Non-negative integer. If not specified: 1\n\n    This number is global (not per source-target pair); all returned paths may be with the same target.\n\n    - `0`: retrieve all minimal-weight paths (all reported paths have the same weight)\n\n      Order: 1st : minimal cost, 2nd: minimal length.\n\n    - `1`: retrieve a single minimal-weight path\n\n      When multiple equal-weight paths exist: (preferences: 1st : minimal cost, 2nd: minimal length)\n\n    - *n* \\> 1: retrieve up to *n* minimal-weight paths (reported paths may have different weights)\n\n      When multiple equal-weight paths exist: (preferences: 1st : minimal cost, 2nd: minimal length)\n\n  - `weightProp`: Optional. If not specified: use the default weight: 1 for each relationship.\n\n    The name of the property that represents the weight of each relationship (integer / float)\n\n    If such property doesn’t exist, of if its value is not a positive numeric - use the default weight: 1\n\n    Note: when all weights are equal: minimal-weight ≡ shortest-path.\n\n  - `costProp`: Optional. If not specified: use the default cost: 1 for each relationship.\n\n    The name of the property that represents the cost of each relationship (integer / float)\n\n    If such property doesn't exist, or if its value is not a positive numeric - use the default cost: 1\n\n  - `maxLen`: Optional. Maximal path length (number of relationships along the path). Positive integer.\n\n    If not specified: no maximal length constraint.\n\n  - `maxCost`: Optional. Positive numeric. If not specified: no maximal cost constraint.\n\n    The maximal cumulative cost for the relationships along the path.\n\nResult:\n\n- Paths conforming to the input arguments. For each reported path:\n\n  - `path` - the path\n\n  - `pathWeight` - the path’s weight\n\n  - `pathCost` - the path’s cost\n\n  To retrieve additional information:\n\n  - The path’s length can be retrieved with `length(path)`\n\n  - An array of the nodes along the path can be retrieved with `nodes(path)`\n\n  - The path’s first node can be retrieved with `nodes(path)[0]`\n\n  - The path’s last node can be retrieved with `nodes(path)[-1]`\n\n  - An array of the relationship's costs along the path can be retrieved with `[r in relationships(path) | r.cost]` where cost is the name of the cost property\n\n  - An array of the relationship's weights along the path can be retrieved with `[r in relationships(path) | r.weight]` where weight is the name of the weight property\n\nBehavior in presence on multiple-edges:\n\n- multi-edges are two or more edges connecting the same pair of vertices (possibly with different weights and costs).\n\n- All matching edges are considered. Paths with identical vertices and different edges are different paths. The following are 3 different paths ('n1', 'n2', and 'n3' are nodes; 'e1', 'e2', 'e3', and 'e4' are edges): (n1)-\\[e1\\]-(n2)-\\[e2\\]-(n3), (n1)-\\[e1\\]-(n2)-\\[e3\\]-(n3), (n1)-\\[e4\\]-(n2)-\\[e3\\]-(n3)\n\nExample:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \n\"MATCH (s:Actor {name: 'Charlie Sheen'})\nCALL algo.SSpaths( {sourceNode: s, relTypes: ['r1', 'r2', 'r3'], relDirection: 'outgoing', pathCount: 1, weightProp: 'weight', costProp: 'cost', maxLen: 3, maxCost: 100} ) \nYIELD path, pathCost, pathWeight\nRETURN path ORDER BY pathCost\"\n```\n\n#### OPTIONAL MATCH\n\nThe OPTIONAL MATCH clause is a MATCH variant that produces null values for elements that do not match successfully, rather than the all-or-nothing logic for patterns in MATCH clauses.\n\nIt can be considered to fill the same role as LEFT/RIGHT JOIN does in SQL, as MATCH entities must be resolved but nodes and edges introduced in OPTIONAL MATCH will be returned as nulls if they cannot be found.\n\nOPTIONAL MATCH clauses accept the same patterns as standard MATCH clauses, and may similarly be modified by WHERE clauses.\n\nMultiple MATCH and OPTIONAL MATCH clauses can be chained together, though a mandatory MATCH cannot follow an optional one.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (p:Person) OPTIONAL MATCH (p)-[w:WORKS_AT]->(c:Company)\nWHERE w.start_date > 2016\nRETURN p, w, c\"\n```\n\nAll `Person` nodes are returned, as well as any `WORKS_AT` relations and `Company` nodes that can be resolved and satisfy the `start_date` constraint. For each `Person` that does not resolve the optional pattern, the person will be returned as normal and the non-matching elements will be returned as null.\n\nCypher is lenient in its handling of null values, so actions like property accesses and function calls on null values will return null values rather than emit errors.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (p:Person) OPTIONAL MATCH (p)-[w:WORKS_AT]->(c:Company)\nRETURN p, w.department, ID(c) as ID\"\n```\n\nIn this case, `w.department` and `ID` will be returned if the OPTIONAL MATCH was successful, and will be null otherwise.\n\nClauses like SET, CREATE, MERGE, and DELETE will ignore null inputs and perform the expected updates on real inputs. One exception to this is that attempting to create a relation with a null endpoint will cause an error:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (p:Person) OPTIONAL MATCH (p)-[w:WORKS_AT]->(c:Company)\nCREATE (c)-[:NEW_RELATION]->(:NEW_NODE)\"\n```\n\nIf `c` is null for any record, this query will emit an error. In this case, no changes to the graph are committed, even if some values for `c` were resolved.\n\n#### WHERE\n\nThis clause is not mandatory, but if you want to filter results, you can specify your predicates here.\n\nSupported operations:\n\n- `=`\n- `<>`\n- `<`\n- `<=`\n- `>`\n- `>=`\n- `CONTAINS`\n- `ENDS WITH`\n- `IN`\n- `STARTS WITH`\n\nPredicates can be combined using AND / OR / NOT.\n\nBe sure to wrap predicates within parentheses to control precedence.\n\nExamples:\n\n```\nWHERE (actor.name = \"john doe\" OR movie.rating > 8.8) AND movie.votes <= 250)\n```\n\n```\nWHERE actor.age >= director.age AND actor.age > 32\n```\n\nIt is also possible to specify equality predicates within nodes using the curly braces as such:\n\n```\n(:President {name:\"Jed Bartlett\"})-[:WON]->(:State)\n```\n\nHere we've required that the president node's name will have the value \"Jed Bartlett\".\n\nThere's no difference between inline predicates and predicates specified within the WHERE clause.\n\nIt is also possible to filter on graph patterns. The following queries, which return all presidents and the states they won in, produce the same results:\n\n``` chroma\nMATCH (p:President), (s:State) WHERE (p)-[:WON]->(s) RETURN p, s\n```\n\nand\n\n``` chroma\nMATCH (p:President)-[:WON]->(s:State) RETURN p, s\n```\n\nPattern predicates can be also negated and combined with the logical operators AND, OR, and NOT. The following query returns all the presidents that did not win in the states where they were governors:\n\n``` chroma\nMATCH (p:President), (s:State) WHERE NOT (p)-[:WON]->(s) AND (p)->[:governor]->(s) RETURN p, s\n```\n\nNodes can also be filtered by label:\n\n``` chroma\nMATCH (n)-[:R]->() WHERE n:L1 OR n:L2 RETURN n \n```\n\nWhen possible, it is preferable to specify the label in the node pattern of the MATCH clause.\n\n#### RETURN\n\nIn its simple form, Return defines which properties the returned result-set will contain.\n\nIts structure is a list of `alias.property` separated by commas.\n\nFor convenience, it's possible to specify the alias only when you're interested in every attribute an entity possesses, and don't want to specify each attribute individually. For example:\n\n``` chroma\nRETURN movie.title, actor\n```\n\nUse the DISTINCT keyword to remove duplications within the result-set:\n\n``` chroma\nRETURN DISTINCT friend_of_friend.name\n```\n\nIn the above example, suppose we have two friends, Joe and Miesha, and both know Dominick.\n\nDISTINCT will make sure Dominick will only appear once in the final result set.\n\nReturn can also be used to aggregate data, similar to group by in SQL.\n\nOnce an aggregation function is added to the return list, all other \"none\" aggregated values are considered as group keys, for example:\n\n``` chroma\nRETURN movie.title, MAX(actor.age), MIN(actor.age)\n```\n\nHere we group data by movie title and for each movie, and we find its youngest and oldest actor age.\n\n#### Aggregations\n\nSupported aggregation functions include:\n\n- `avg`\n- `collect`\n- `count`\n- `max`\n- `min`\n- `percentileCont`\n- `percentileDisc`\n- `stDev`\n- `sum`\n\n#### ORDER BY\n\nOrder by specifies that the output be sorted and how.\n\nYou can order by multiple properties by stating each variable in the ORDER BY clause.\n\nEach property may specify its sort order with `ASC`/`ASCENDING` or `DESC`/`DESCENDING`. If no order is specified, it defaults to ascending.\n\nThe result will be sorted by the first variable listed.\n\nFor equal values, it will go to the next property in the ORDER BY clause, and so on.\n\n``` chroma\nORDER BY <alias.property [ASC/DESC] list>\n```\n\nBelow we sort our friends by height. For equal heights, weight is used to break ties.\n\n``` chroma\nORDER BY friend.height, friend.weight DESC\n```\n\n#### SKIP\n\nThe optional skip clause allows a specified number of records to be omitted from the result set.\n\n``` chroma\nSKIP <number of records to skip>\n```\n\nThis can be useful when processing results in batches. A query that would examine the second 100-element batch of nodes with the label `Person`, for example, would be:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MATCH (p:Person) RETURN p ORDER BY p.name SKIP 100 LIMIT 100\"\n```\n\n#### LIMIT\n\nAlthough not mandatory, you can use the limit clause to limit the number of records returned by a query:\n\n```\nLIMIT <max records to return>\n```\n\nIf not specified, there's no limit to the number of records returned by a query.\n\n#### CREATE\n\nCREATE is used to introduce new nodes and relationships.\n\nThe simplest example of CREATE would be a single node creation:\n\n``` chroma\nCREATE (n)\n```\n\nIt's possible to create multiple entities by separating them with a comma.\n\n``` chroma\nCREATE (n),(m)\n```\n\n``` chroma\nCREATE (:Person {name: 'Kurt', age: 27})\n```\n\nTo add relations between nodes, in the following example we first find an existing source node. After it's found, we create a new relationship and destination node.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (a:Person)\nWHERE a.name = 'Kurt'\nCREATE (a)-[:MEMBER]->(:Band {name:'Nirvana'})\"\n```\n\nHere the source node is a bounded node, while the destination node is unbounded.\n\nAs a result, a new node is created representing the band Nirvana and a new relation connects Kurt to the band.\n\nLastly we create a complete pattern.\n\nAll entities within the pattern which are not bounded will be created.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"CREATE (jim:Person{name:'Jim', age:29})-[:FRIENDS]->(pam:Person {name:'Pam', age:27})-[:WORKS]->(:Employer {name:'Dunder Mifflin'})\"\n```\n\nThis query will create three nodes and two relationships.\n\n#### DELETE\n\nDELETE is used to remove both nodes and relationships.\n\nNote that deleting a node also deletes all of its incoming and outgoing relationships.\n\nTo delete a node and all of its relationships:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MATCH (p:Person {name:'Jim'}) DELETE p\"\n```\n\nTo delete relationship:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MATCH (:Person {name:'Jim'})-[r:FRIENDS]->() DELETE r\"\n```\n\nThis query will delete all `friend` outgoing relationships from the node with the name 'Jim'.\n\n#### SET\n\nSET is used to create or update properties on nodes and relationships.\n\nTo set a property on a node, use [`SET`](../set).\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MATCH (n { name: 'Jim' }) SET n.name = 'Bob'\"\n```\n\nIf you want to set multiple properties in one go, simply separate them with a comma to set multiple properties using a single SET clause.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (n { name: 'Jim', age:32 })\nSET n.age = 33, n.name = 'Bob'\"\n```\n\nThe same can be accomplished by setting the graph entity variable to a map:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (n { name: 'Jim', age:32 })\nSET n = {age: 33, name: 'Bob'}\"\n```\n\nUsing `=` in this way replaces all of the entity's previous properties, while `+=` will only set the properties it explicitly mentions.\n\nIn the same way, the full property set of a graph entity can be assigned or merged:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (jim {name: 'Jim'}), (pam {name: 'Pam'})\nSET jim = pam\"\n```\n\nAfter executing this query, the `jim` node will have the same property set as the `pam` node.\n\nTo remove a node's property, simply set property value to NULL.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MATCH (n { name: 'Jim' }) SET n.name = NULL\"\n```\n\n#### MERGE\n\nThe MERGE clause ensures that a path exists in the graph (either the path already exists, or it needs to be created).\n\nMERGE either matches existing nodes and binds them, or it creates new data and binds that.\n\nIt’s like a combination of MATCH and CREATE that also allows you to specify what happens if the data was matched or created.\n\nFor example, you can specify that the graph must contain a node for a user with a certain name.\n\nIf there isn’t a node with the correct name, a new node will be created and its name property set.\n\nAny aliases in the MERGE path that were introduced by earlier clauses can only be matched; MERGE will not create them.\n\nWhen the MERGE path doesn't rely on earlier clauses, the whole path will always either be matched or created.\n\nIf all path elements are introduced by MERGE, a match failure will cause all elements to be created, even if part of the match succeeded.\n\nThe MERGE path can be followed by ON MATCH SET and ON CREATE SET directives to conditionally set properties depending on whether or not the match succeeded.\n\n**Merging nodes**\n\nTo merge a single node with a label:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MERGE (robert:Critic)\"\n```\n\nTo merge a single node with properties:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MERGE (charlie { name: 'Charlie Sheen', age: 10 })\"\n```\n\nTo merge a single node, specifying both label and property:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"MERGE (michael:Person { name: 'Michael Douglas' })\"\n```\n\n**Merging paths**\n\nBecause MERGE either matches or creates a full path, it is easy to accidentally create duplicate nodes.\n\nFor example, if we run the following query on our sample graph:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MERGE (charlie { name: 'Charlie Sheen '})-[r:ACTED_IN]->(wallStreet:Movie { name: 'Wall Street' })\"\n```\n\nEven though a node with the name 'Charlie Sheen' already exists, the full pattern does not match, so 1 relation and 2 nodes - including a duplicate 'Charlie Sheen' node - will be created.\n\nWe should use multiple MERGE clauses to merge a relation and only create non-existent endpoints:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MERGE (charlie { name: 'Charlie Sheen' })\n MERGE (wallStreet:Movie { name: 'Wall Street' })\n MERGE (charlie)-[r:ACTED_IN]->(wallStreet)\"\n```\n\nIf we don't want to create anything if pattern elements don't exist, we can combine MATCH and MERGE clauses. The following query merges a relation only if both of its endpoints already exist:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (charlie { name: 'Charlie Sheen' })\n MATCH (wallStreet:Movie { name: 'Wall Street' })\n MERGE (charlie)-[r:ACTED_IN]->(wallStreet)\"\n```\n\n**On Match and On Create directives**\n\nUsing ON MATCH and ON CREATE, MERGE can set properties differently depending on whether a pattern is matched or created.\n\nIn this query, we'll merge paths based on a list of properties and conditionally set a property when creating new entities:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"UNWIND ['Charlie Sheen', 'Michael Douglas', 'Tamara Tunie'] AS actor_name\n MATCH (movie:Movie { name: 'Wall Street' })\n MERGE (person {name: actor_name})-[:ACTED_IN]->(movie)\n ON CREATE SET person.first_role = movie.name\"\n```\n\n#### WITH\n\nThe WITH clause allows parts of queries to be independently executed and have their results handled uniquely.\n\nThis allows for more flexible query composition as well as data manipulations that would otherwise not be possible in a single query.\n\nIf, for example, we wanted to find all children in our graph who are above the average age of all people:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (p:Person) WITH AVG(p.age) AS average_age MATCH (:Person)-[:PARENT_OF]->(child:Person) WHERE child.age > average_age return child\n```\n\nThis also allows us to use modifiers like `DISTINCT`, `SKIP`, `LIMIT`, and `ORDER` that otherwise require `RETURN` clauses.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (u:User)  WITH u AS nonrecent ORDER BY u.lastVisit LIMIT 3 SET nonrecent.should_contact = true\"\n```\n\n#### UNWIND\n\nThe UNWIND clause breaks down a given list into a sequence of records; each contains a single element in the list.\n\nThe order of the records preserves the original list order.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"CREATE (p {array:[1,2,3]})\"\n```\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (p) UNWIND p.array AS y RETURN y\"\n```\n\n#### FOREACH\n\n(Since RedisGraph v2.12)\n\nThe `FOREACH` clause feeds the components of a list to a sub-query comprised of **updating clauses only** (`CREATE`, `MERGE`, [`SET`](../set), `REMOVE`, `DELETE` and `FOREACH`), while passing on the records it receives without change.\n\nThe clauses within the sub-query recognize the bound variables defined prior to the `FOREACH` clause, but are local in the sense that later clauses are not aware of the variables defined inside them. In other words, `FOREACH` uses the current context, and does not affect it.\n\nThe `FOREACH` clause can be used for numerous purposes, such as: Updating and creating graph entities in a concise manner, marking nodes\\edges that satisfy some condition or are part of a path of interest and performing conditional queries.\n\nWe show examples of queries performing the above 3 use-cases.\n\nThe following query will create 5 nodes, each with property `v` with the values from 0 to 4 corresponding to the appropriate index in the list.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"FOREACH(i in [1, 2, 3, 4] | CREATE (n:N {v: i}))\"\n```\n\nThe following query marks the nodes of all paths of length up to 15 km from a hotel in Toronto to a steakhouse with at least 2 Michelin stars.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH p = (hotel:HOTEL {City: 'Toronto'})-[r:ROAD*..5]->(rest:RESTAURANT {type: 'Steakhouse'}) WHERE sum(r.length) <= 15 AND hotel.stars >= 4 AND rest.Michelin_stars >= 2\nFOREACH(n in nodes(p) | SET n.part_of_path = true)\"\n```\n\nThe following query searches for all the hotels, checks whether they buy directly from a bakery, and if not - makes sure they are marked as buying from a supplier that supplies bread, and that they do not buy directly from a bakery.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (h:HOTEL) OPTIONAL MATCH (h)-[b:BUYS_FROM]->(bakery:BAKERY)\nFOREACH(do_perform IN CASE WHEN b = NULL THEN [1] ELSE [] END | MERGE (h)-[b2:BUYS_FROM]->(s:SUPPLIER {supplies_bread: true}) SET b2.direct = false)\"\n```\n\n#### UNION\n\nThe UNION clause is used to combine the result of multiple queries.\n\nUNION combines the results of two or more queries into a single result set that includes all the rows that belong to all queries in the union.\n\nThe number and the names of the columns must be identical in all queries combined by using UNION.\n\nTo keep all the result rows, use UNION ALL.\n\nUsing just UNION will combine and remove duplicates from the result set.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (n:Actor) RETURN n.name AS name\nUNION ALL\nMATCH (n:Movie) RETURN n.title AS name\"\n```\n\n### Functions\n\nThis section contains information on all supported functions from the Cypher query language.\n\n- [Predicate functions](#predicate-functions)\n- [Scalar functions](#scalar-functions)\n- [Aggregating functions](#aggregating-functions)\n- [List functions](#list-functions)\n- [Mathematical operators](#mathematical-operators)\n- [Mathematical functions](#mathematical-functions)\n- [Trigonometric functions](#trigonometric-functions)\n- [String functions](#string-functions)\n- [Point functions](#point-functions)\n- [Type conversion functions](#type-conversion-functions)\n- [Node functions](#node-functions)\n- [Path functions](#path-functions)\n\n## Predicate functions\n\n| Function                                                                          | Description                                                                                                                                            |\n|-----------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [all(*var* IN *list* WHERE *predicate*)](#existential-comprehension-functions)    | Returns true when *predicate* holds true for all elements in *list*                                                                                    |\n| [any(*var* IN *list* WHERE *predicate*)](#existential-comprehension-functions)    | Returns true when *predicate* holds true for at least one element in *list*                                                                            |\n| exists(*pattern*)                                                                 | Returns true when at least one match for *pattern* exists                                                                                              |\n| isEmpty(*list*\\|*map*\\|*string*)                                                  | Returns true if the input list or map contains no elements or if the input string contains no characters Returns null when the input evaluates to null |\n| [none(*var* IN *list* WHERE *predicate*)](#existential-comprehension-functions)   | Returns true when *predicate* holds false for all elements in *list*                                                                                   |\n| [single(*var* IN *list* WHERE *predicate*)](#existential-comprehension-functions) | Returns true when *predicate* holds true for exactly one element in *list*                                                                             |\n\n## Scalar functions\n\n| Function                           | Description                                                                                                                                                                                                                                                                       |\n|------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| coalesce(*expr*\\[, expr...\\])      | Returns the evaluation of the first argument that evaluates to a non-null value Returns null when all arguments evaluate to null                                                                                                                                                  |\n| endNode(*relationship*)            | Returns the destination node of a relationship Returns null when *relationship* evaluates to null                                                                                                                                                                                 |\n| hasLabels(*node*, *labelsList*) \\* | Returns true when *node* contains all labels in *labelsList*, otherwise false Return true when *labelsList* evaluates to an empty list                                                                                                                                            |\n| id(*node*\\|*relationship*)         | Returns the internal ID of a node or relationship (which is not immutable)                                                                                                                                                                                                        |\n| labels(*node*)                     | Returns a list of strings: all labels of *node* Returns null when *node* evaluates to null                                                                                                                                                                                        |\n| properties(*expr*)                 | When *expr* is a node or relationship: Returns a map containing all the properties of the given node or relationship When *expr* evaluates to a map: Returns *expr* unchanged Returns null when *expr* evaluates to null                                                          |\n| randomUUID()                       | Returns a random UUID (Universal Unique IDentifier)                                                                                                                                                                                                                               |\n| startNode(*relationship*)          | Returns the source node of a relationship Returns null when *relationship* evaluates to null                                                                                                                                                                                      |\n| timestamp()                        | Returns the current system timestamp (milliseconds since epoch)                                                                                                                                                                                                                   |\n| type(*relationship*)               | Returns a string: the type of *relationship* Returns null when *relationship* evaluates to null                                                                                                                                                                                   |\n| typeOf(*expr*) \\*                  | (Since RedisGraph v2.12) Returns a string: the type of a literal, an expression's evaluation, an alias, a node's property, or a relationship's property Return value is one of `Map`, `String`, `Integer`, `Boolean`, `Float`, `Node`, `Edge`, `List`, `Path`, `Point`, or `Null` |\n\n\\* RedisGraph-specific extensions to Cypher\n\n## Aggregating functions\n\n| Function                             | Description                                                                                                                                                      |\n|--------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| avg(*expr*)                          | Returns the average of a set of numeric values. null values are ignored Returns null when *expr* has no evaluations                                              |\n| collect(*expr*)                      | Returns a list containing all non-null elements which evaluated from a given expression                                                                          |\n| count(*expr*\\|\\*)                    | When argument is *expr*: returns the number of non-null evaluations of *expr* When argument is `*`: returns the total number of evaluations (including nulls)    |\n| max(*expr*)                          | Returns the maximum value in a set of values (taking into account type ordering). null values are ignored Returns null when *expr* has no evaluations            |\n| min(*expr*)                          | Returns the minimum value in a set of values (taking into account type ordering). null values are ignored Returns null when *expr* has no evaluations            |\n| percentileCont(*expr*, *percentile*) | Returns a linear-interpolated percentile (between 0.0 and 1.0) over a set of numeric values. null values are ignored Returns null when *expr* has no evaluations |\n| percentileDisc(*expr*, *percentile*) | Returns a nearest-value percentile (between 0.0 and 1.0) over a set of numeric values. null values are ignored Returns null when *expr* has no evaluations       |\n| stDev(*expr*)                        | Returns the sample standard deviation over a set of numeric values. null values are ignored Returns null when *expr* has no evaluations                          |\n| stDevP(*expr*)                       | Returns the population standard deviation over a set of numeric values. null values are ignored Returns null when *expr* has no evaluations                      |\n| sum(*expr*)                          | Returns the sum of a set of numeric values. null values are ignored Returns 0 when *expr* has no evaluations                                                     |\n\n## List functions\n\n| Function                                                              | Description|\n|-----------------------------------------------------------------------||\n| head(*expr*)                                                          | Returns the first element of a list Returns null when *expr* evaluates to null or an empty list|\n| keys(*expr*)                                                          | Returns a list of strings: all key names for given map or all property names for a given node or edge Returns null when *expr* evaluates to null|\n| last(*expr*)                                                          | Returns the last element of a list Returns null when *expr* evaluates to null or an empty list|\n| list.dedup(*list*) \\*                                                 | (Since RedisGraph v2.12) Given a list, returns a similar list after removing duplicate elements Order is preserved, duplicates are removed from the end of the list Returns null when *list* evaluates to null Emit an error when *list* does not evaluate to a list or to null|\n| list.insert(*list*, *idx*, *val*\\[, *dups* = TRUE\\]) \\*               | (Since RedisGraph v2.12) Given a list, returns a list after inserting a given value at a given index *idx* is 0-based when non-negative, or from the end of the list when negative Returns null when *list* evaluates to null Returns *list* when *val* evaluates to null Returns *list* when *idx* evaluates to an integer not in \\[-NumItems-1 .. NumItems\\] When *dups* evaluats to FALSE: returns *list* when *val* evaluates to a value that is already an element of *list* Emit an error when *list* does not evaluate to a list or to null Emit an error when *idx* does not evaluate to an integer Emit an error when *dups*, if specified, does not evaluate to a Boolean                                                                                                                                                                                                   |\n| list.insertListElements(*list*, *list2*, *idx*\\[, *dups* = TRUE\\]) \\* | (Since RedisGraph v2.12) Given a list, returns a list after inserting the elements of a second list at a given index *idx* is 0-based when non-negative, or from the end of the list when negative Returns null when *list* evaluates to null Returns *list* when *list2* evaluates to null Returns *list* when *idx* evaluates to an integer not in \\[-NumItems-1 .. NumItems\\] When *dups* evaluates to FALSE: If an element of *list2* evaluates to an element of *list* it would be skipped; If multiple elements of *list2* evaluate to the same value - this value would be inserted at most once to *list* Emit an error when *list* does not evaluate to a list or to null Emit an error when *list2* does not evaluate to a list or to null Emit an error when *idx* does not evaluate to an integer Emit an error when *dups*, if specified, does not evaluate to a Boolean |\n| list.remove(*list*, *idx*\\[, *count* = 1\\]) \\*                        | (Since RedisGraph v2.12) Given a list, returns a list after removing a given number of consecutive elements (or less, if the end of the list has been reached). starting at a given index. *idx* is 0-based when non-negative, or from the end of the list when negative Returns *null* when *list* evaluates to null Returns *list* when *idx* evaluates to an integer not in \\[-NumItems .. NumItems-1\\] Returns *list* when *count* evaluates to a non-positive integer Emit an error when *list* does not evaluate to a list or to null Emit an error when *idx* does not evaluate to an integer Emit an error when *count*, if specified, does not evaluate to an integer                                                                                                                                                                                                        |\n| list.sort(*list*\\[, *ascending* = TRUE\\]) \\*                          | (Since RedisGraph v2.12) Given a list, returns a list with similar elements, but sorted (inversely-sorted if *ascending* is evaluated to FALSE) Returns null when *list* evaluates to null Emit an error when *list* does not evaluate to a list or to null Emit an error when *ascending*, if specified, does not evaluate to a Boolean|\n| range(*first*, *last*\\[, *step* = 1\\])                                | Returns a list of integers in the range of \\[start, end\\]. *step*, an optional integer argument, is the increment between consequtive elements|\n| size(*expr*)                                                          | Returns the number of elements in a list Returns null with *expr* evaluates to null|\n| tail(*expr*)                                                          | Returns a sublist of a list, which contains all its elements except the first Returns an empty list when *expr* containst less than 2 elements. Returns null when *expr* evaluates to null|\n| [reduce(...)](#reduce)                                                | Returns a scalar produced by evaluating an expression against each list member|\n\n\\* RedisGraph-specific extensions to Cypher\n\n## Mathematical operators\n\n| Function | Description                                              |\n|----------|:---------------------------------------------------------|\n| \\+       | Add two values                                           |\n| \\-       | Subtract second value from first                         |\n| \\*       | Multiply two values                                      |\n| /        | Divide first value by the second                         |\n| ^        | Raise the first value to the power of the second         |\n| %        | Perform modulo division of the first value by the second |\n\n## Mathematical functions\n\n| Function                   | Description                                                                                                                                                                                                                             |\n|----------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| abs(*expr*)                | Returns the absolute value of a numeric value Returns null when *expr* evaluates to null                                                                                                                                                |\n| ceil(*expr*) \\*\\*          | When *expr* evaluates to an integer: returns its evaluation When *expr* evaluates to floating point: returns a floating point equals to the smallest integer greater than or equal to *expr* Returns null when *expr* evaluates to null |\n| e()                        | Returns the constant *e*, the base of the natural logarithm                                                                                                                                                                             |\n| exp(*expr*)                | Returns *e*^*expr*, where *e* is the base of the natural logarithm Returns null when *expr* evaluates to null                                                                                                                           |\n| floor(*expr*) \\*\\*         | When *expr* evaluates to an integer: returns its evaluation When *expr* evaluates to a floating point: returns a floating point equals to the greatest integer less than or equal to *expr* Returns null when *expr* evaluates to null  |\n| log(*expr*)                | Returns the natural logarithm of a numeric value Returns nan when *expr* evaluates to a negative numeric value, -inf when *expr* evaluates to 0, and null when *expr* evaluates to null                                                 |\n| log10(*expr*)              | Returns the base-10 logarithm of a numeric value Returns nan when *expr* evaluates to a negative numeric value, -inf when *expr* evaluates to 0, and null when *expr* evaluates to null                                                 |\n| pow(*base*, *exponent*) \\* | Returns *base* raised to the power of *exponent* (equivalent to *base*^*exponent*) Returns null when either evaluates to null                                                                                                           |\n| rand()                     | Returns a random floating point in the range \\[0,1\\]                                                                                                                                                                                    |\n| round(*expr*) \\*\\* \\*\\*\\*  | When *expr* evaluates to an integer: returns its evaluation When *expr* evaluates to a floating point: returns a floating point equals to the integer closest to *expr* Returns null when *expr* evaluates to null                      |\n| sign(*expr*)               | Returns the signum of a numeric value: 0 when *expr* evaluates to 0, -1 when *expr* evaluates to a negative numeric value, and 1 when *expr* evaluates to a positive numeric value Returns null when *expr* evaluates to null           |\n| sqrt(*expr*)               | Returns the square root of a numeric value Returns nan when *expr* evaluates to a negative value and null when *expr* evaluates to null                                                                                                 |\n\n\\* RedisGraph-specific extensions to Cypher\n\n\\*\\* RedisGraph-specific behavior: to avoid possible loss of precision, when *expr* evaluates to an integer - the result is an integer as well\n\n\\*\\*\\* RedisGraph-specific behavior: tie-breaking method is \"half away from zero\"\n\n## Trigonometric functions\n\n| Function              | Description                                                                                                                                                                                            |\n|-----------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| acos(*expr*)          | Returns the arccosine, in radians, of a numeric value Returns nan when *expr* evaluates to a numeric value not in \\[-1, 1\\] and null when *expr* evaluates to null                                     |\n| asin(*expr*)          | Returns the arcsine, in radians, of a numeric value Returns nan when *expr* evaluates to a numeric value not in \\[-1, 1\\] and null when *expr* evaluates to null                                       |\n| atan(*expr*)          | Returns the arctangent, in radians, of a numeric value Returns null when *expr* evaluates to null                                                                                                      |\n| atan2(*expr*, *expr*) | Returns the 2-argument arctangent, in radians, of a pair of numeric values (Cartesian coordinates) Returns 0 when both expressions evaluate to 0 Returns null when either expression evaluates to null |\n| cos(*expr*)           | Returns the cosine of a numeric value that represents an angle in radians Returns null when *expr* evaluates to null                                                                                   |\n| cot(*expr*)           | Returns the cotangent of a numeric value that represents an angle in radians Returns inf when *expr* evaluates to 0 and null when *expr* evaluates to null                                             |\n| degrees(*expr*)       | Converts a numeric value from radians to degrees Returns null when *expr* evaluates to null                                                                                                            |\n| haversin(*expr*)      | Returns half the versine of a numeric value that represents an angle in radians Returns null when *expr* evaluates to null                                                                             |\n| pi()                  | Returns the mathematical constant *pi*                                                                                                                                                                 |\n| radians(*expr*)       | Converts a numeric value from degrees to radians Returns null when *expr* evaluates to null                                                                                                            |\n| sin(*expr*)           | Returns the sine of a numeric value that represents an angle in radians Returns null when *expr* evaluates to null                                                                                     |\n| tan(*expr*)           | Returns the tangent of a numeric value that represents an angle in radians Returns null when *expr* evaluates to null                                                                                  |\n\n## String functions\n\n| Function                                              | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n|-------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| left(*str*, *len*)                                    | Returns a string containing the *len* leftmost characters of *str* Returns null when *str* evaluates to null, otherwise emit an error if *len* evaluates to null                                                                                                                                                                                                                                                                                                                                                 |\n| lTrim(*str*)                                          | Returns *str* with leading whitespace removed Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| replace(*str*, *search*, *replace*)                   | Returns *str* with all occurrences of *search* replaced with *replace* Returns null when any argument evaluates to null                                                                                                                                                                                                                                                                                                                                                                                          |\n| reverse(*str*)                                        | Returns a string in which the order of all characters in *str* are reversed Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                            |\n| right(*str*, *len*)                                   | Returns a string containing the *len* rightmost characters of *str* Returns null when *str* evaluates to null, otherwise emit an error if *len* evaluates to null                                                                                                                                                                                                                                                                                                                                                |\n| rTrim(*str*)                                          | Returns *str* with trailing whitespace removed Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| split(*str*, *delimiter*)                             | Returns a list of strings from splitting *str* by *delimiter* Returns null when any argument evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                   |\n| string.join(*strList*\\[, *delimiter* = ''\\]) \\*       | (Since RedisGraph v2.12) Returns a concatenation of a list of strings using a given delimiter Returns null when *strList* evaluates to null Returns null when *delimiter*, if specified, evaluates to null Emit an error when *strList* does not evaluate to a list or to null Emit an error when an element of *strList* does not evaluate to a string Emit an error when *delimiter*, if specified, does not evaluate to a string or to null                                                                   |\n| string.matchRegEx(*str*, *regex*) \\*                  | (Since RedisGraph v2.12) Given a string and a regular expression, returns a list of all matches and matching regions Returns an empty list when *str* evaluates to null Returns an empty list when *regex* evaluates to null Emit an error when *str* does not evaluate to a string or to null Emit an error when *regex* does not evaluate to a valid regex string or to null                                                                                                                                   |\n| string.replaceRegEx(*str*, *regex*, *replacement*) \\* | (Since RedisGraph v2.12) Given a string and a regular expression, returns a string after replacing each regex match with a given replacement Returns null when *str* evaluates to null Returns null when *regex* evaluates to null Returns null when *replacement* evaluates to null Emit an error when *str* does not evaluate to a string or to null Emit an error when *regex* does not evaluate to a valid regex string or to null Emit an error when *replacement* does not evaluate to a string or to null |\n| substring(*str*, *start*\\[, *len*\\])                  | When *len* is specified: returns a substring of *str* beginning with a 0-based index *start* and with length *len* When *len* is not specified: returns a substring of *str* beginning with a 0-based index *start* and extending to the end of *str* Returns null when *str* evaluates to null Emit an error when *start* or *len* evaluate to null                                                                                                                                                             |\n| toLower(*str*)                                        | Returns *str* in lowercase Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| toJSON(*expr*) \\*                                     | Returns a [JSON representation](#json-format) of a value Returns null when *expr* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                              |\n| toUpper(*str*)                                        | Returns *str* in uppercase Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| trim(*str*)                                           | Returns *str* with leading and trailing whitespace removed Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                             |\n| size(*str*)                                           | Returns the number of characters in *str* Returns null when *str* evaluates to null                                                                                                                                                                                                                                                                                                                                                                                                                              |\n\n\\* RedisGraph-specific extensions to Cypher\n\n## Point functions\n\n| Function                     | Description                                                                                            |\n|------------------------------|:-------------------------------------------------------------------------------------------------------|\n| [point(*map*)](#point)       | Returns a Point representing a lat/lon coordinates                                                     |\n| distance(*point1*, *point2*) | Returns the distance in meters between the two given points Returns null when either evaluates to null |\n\n## Type conversion functions\n\n| Function                     | Description                                                                                                                                                                                                                                                                                                                               |\n|------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| toBoolean(*expr*)            | Returns a Boolean when *expr* evaluates to a Boolean Converts a string to Boolean (`\"true\"` (case insensitive) to true, `\"false\"` (case insensitive) to false, any other value to null) Converts an integer to Boolean (0 to `false`, any other values to `true`) Returns null when *expr* evaluates to null Emit an error on other types |\n| toBooleanList(*exprList*)    | Converts a list to a list of Booleans. Each element in the list is converted using toBooleanOrNull()                                                                                                                                                                                                                                      |\n| toBooleanOrNull(*expr*)      | Returns a Boolean when *expr* evaluates to a Boolean Converts a string to Boolean (`\"true\"` (case insensitive) to true, `\"false\"` (case insensitive) to false, any other value to null) Converts an integer to Boolean (0 to `false`, any other values to `true`) Returns null when *expr* evaluates to null Returns null for other types |\n| toFloat(*expr*)              | Returns a floating point when *expr* evaluates to a floating point Converts an integer to a floating point Converts a string to a floating point or null Returns null when *expr* evaluates to null Emit an error on other types                                                                                                          |\n| toFloatList(*exprList*)      | Converts a list to a list of floating points. Each element in the list is converted using toFloatOrNull()                                                                                                                                                                                                                                 |\n| toFloatOrNull(*expr*)        | Returns a floating point when *expr* evaluates to a floating point Converts an integer to a floating point Converts a string to a floating point or null Returns null when *expr* evaluates to null Returns null for other types                                                                                                          |\n| toInteger(*expr*) \\*         | Returns an integer when *expr* evaluates to an integer Converts a floating point to integer Converts a string to an integer or null Converts a Boolean to an integer (false to 0, true to 1) (Since RedisGraph v2.10.8) Returns null when *expr* evaluates to null Emit an error on other types                                           |\n| toIntegerList(*exprList*) \\* | Converts a list to a list of integer values. Each element in the list is converted using toIntegerOrNull()                                                                                                                                                                                                                                |\n| toIntegerOrNull(*expr*) \\*   | Returns an integer when *expr* evaluates to an integer Converts a floating point to integer Converts a string to an integer or null Converts a Boolean to an integer (false to 0, true to 1) (Since RedisGraph v2.10.8) Returns null when *expr* evaluates to null Returns null for other types                                           |\n| toString(*expr*)             | Returns a string when *expr* evaluates to a string Converts an integer, float, Boolean, string, or point to a string representation Returns null when *expr* evaluates to null Emit an error on other types                                                                                                                               |\n| toStringList(*exprList*)     | Converts a list to a list of strings. Each element in the list is converted using toStringOrNull()                                                                                                                                                                                                                                        |\n| toStringOrNull(*expr*)       | Returns a string when *expr* evaluates to a string Converts an integer, float, Boolean, string, or point to a string representation Returns null when *expr* evaluates to null Returns null for other types                                                                                                                               |\n\n\\* RedisGraph-specific behavior: rounding method when converting a floating point to an integer is \"toward negative infinity (floor)\"\n\n## Node functions\n\n| Function                                                                          | Description                                                                                                                                                                                                                                                                                                                                |\n|-----------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| indegree(*node* \\[, *reltype* ...\\]) \\* indegree(*node* \\[, *reltypeList*\\]) \\*   | When no relationship types are specified: Returns the number of *node*'s incoming edges When one or more relationship types are specified: Returns the number of *node's* incoming edges with one of the given relationship types Return null when *node* evaluates to null the *reltypeList* syntax is supported since RedisGraph v2.10.8 |\n| outdegree(*node* \\[, *reltype* ...\\]) \\* outdegree(*node* \\[, *reltypeList*\\]) \\* | When no relationship types are specified: Returns the number of *node*'s outgoing edges When one or more relationship types are specified: Returns the number of *node's* outgoing edges with one of the given relationship types Return null when *node* evaluates to null the *reltypeList* syntax is supported since RedisGraph v2.10.8 |\n\n\\* RedisGraph-specific extensions to Cypher\n\n## Path functions\n\n| Function                              | Description                                                                                        |\n|---------------------------------------|:---------------------------------------------------------------------------------------------------|\n| nodes(*path*)                         | Returns a list containing all the nodes in *path* Returns null if *path* evaluates to null         |\n| relationships(*path*)                 | Returns a list containing all the relationships in *path* Returns null if *path* evaluates to null |\n| length(*path*)                        | Return the length (number of edges) of *path* Returns null if *path* evaluates to null             |\n| [shortestPath(...)](#shortestPath) \\* | Return the shortest path that resolves the given pattern                                           |\n\n\\* RedisGraph-specific extensions to Cypher\n\n### List comprehensions\n\nList comprehensions are a syntactical construct that accepts an array and produces another based on the provided map and filter directives.\n\nThey are a common construct in functional languages and modern high-level languages. In Cypher, they use the syntax:\n\n``` chroma\n[element IN array WHERE condition | output elem]\n```\n\n- `array` can be any expression that produces an array: a literal, a property reference, or a function call.\n- `WHERE condition` is an optional argument to only project elements that pass a certain criteria. If omitted, all elements in the array will be represented in the output.\n- `| output elem` is an optional argument that allows elements to be transformed in the output array. If omitted, the output elements will be the same as their corresponding inputs.\n\nThe following query collects all paths of any length, then for each produces an array containing the `name` property of every node with a `rank` property greater than 10:\n\n``` chroma\nMATCH p=()-[*]->() RETURN [node IN nodes(p) WHERE node.rank > 10 | node.name]\n```\n\n#### Existential comprehension functions\n\nThe functions `any()`, `all()`, `single()` and `none()` use a simplified form of the list comprehension syntax and return a boolean value.\n\n``` chroma\nany(element IN array WHERE condition)\n```\n\nThey can operate on any form of input array, but are particularly useful for path filtering. The following query collects all paths of any length in which all traversed edges have a weight less than 3:\n\n``` chroma\nMATCH p=()-[*]->() WHERE all(edge IN relationships(p) WHERE edge.weight < 3) RETURN p\n```\n\n### Pattern comprehensions\n\nPattern comprehensions are a method of producing a list composed of values found by performing the traversal of a given graph pattern.\n\nThe following query returns the name of a `Person` node and a list of all their friends' ages:\n\n``` chroma\nMATCH (n:Person)\nRETURN\nn.name,\n[(n)-[:FRIEND_OF]->(f:Person) | f.age]\n```\n\nOptionally, a `WHERE` clause may be embedded in the pattern comprehension to filter results. In this query, all friends' ages will be gathered for friendships that started before 2010:\n\n``` chroma\nMATCH (n:Person)\nRETURN\nn.name,\n[(n)-[e:FRIEND_OF]->(f:Person) WHERE e.since < 2010 | f.age]\n```\n\n### CASE WHEN\n\nThe case statement comes in two variants. Both accept an input argument and evaluates it against one or more expressions. The first `WHEN` argument that specifies a value matching the result will be accepted, and the value specified by the corresponding `THEN` keyword will be returned.\n\nOptionally, an `ELSE` argument may also be specified to indicate what to do if none of the `WHEN` arguments match successfully.\n\nIn its simple form, there is only one expression to evaluate and it immediately follows the `CASE` keyword:\n\n``` chroma\nMATCH (n)\nRETURN\nCASE n.title\nWHEN 'Engineer' THEN 100\nWHEN 'Scientist' THEN 80\nELSE n.privileges\nEND\n```\n\nIn its generic form, no expression follows the `CASE` keyword. Instead, each `WHEN` statement specifies its own expression:\n\n``` chroma\nMATCH (n)\nRETURN\nCASE\nWHEN n.age < 18 THEN '0-18'\nWHEN n.age < 30 THEN '18-30'\nELSE '30+'\nEND\n```\n\n#### Reduce\n\nThe `reduce()` function accepts a starting value and updates it by evaluating an expression against each element of the list:\n\n``` chroma\nRETURN reduce(sum = 0, n IN [1,2,3] | sum + n)\n```\n\n`sum` will successively have the values 0, 1, 3, and 6, with 6 being the output of the function call.\n\n### Point\n\nThe `point()` function expects one map argument of the form:\n\n``` chroma\nRETURN point({latitude: lat_value, longitude: lon_val})\n```\n\nThe key names `latitude` and `longitude` are case-sensitive.\n\nThe point constructed by this function can be saved as a node/relationship property or used within the query, such as in a `distance` function call.\n\n### shortestPath\n\nThe `shortestPath()` function is invoked with the form:\n\n``` chroma\nMATCH (a {v: 1}), (b {v: 4}) RETURN shortestPath((a)-[:L*]->(b))\n```\n\nThe sole `shortestPath` argument is a traversal pattern. This pattern's endpoints must be resolved prior to the function call, and no property filters may be introduced in the pattern. The relationship pattern may specify any number of relationship types (including zero) to be considered. If a minimum number of edges to traverse is specified, it may only be 0 or 1, while any number may be used for the maximum. If 0 is specified as the minimum, the source node will be included in the returned path. If no shortest path can be found, NULL is returned.\n\n### JSON format\n\n`toJSON()` returns the input value in JSON formatting. For primitive data types and arrays, this conversion is conventional. Maps and map projections (`toJSON(node { .prop} )`) are converted to JSON objects, as are nodes and relationships.\n\nThe format for a node object in JSON is:\n\n``` chroma\n{\n  \"type\": \"node\",\n  \"id\": id(int),\n  \"labels\": [label(string) X N],\n  \"properties\": {\n    property_key(string): property_value X N\n  }\n}\n```\n\nThe format for a relationship object in JSON is:\n\n``` chroma\n{\n  \"type\": \"relationship\",\n  \"id\": id(int),\n  \"relationship\": type(string),\n  \"properties\": {\n    property_key(string): property_value X N\n  }\n  \"start\": src_node(node),\n  \"end\": dest_node(node)\n}\n```\n\n## Procedures\n\nProcedures are invoked using the syntax:\n\n``` chroma\nGRAPH.QUERY social \"CALL db.labels()\"\n```\n\nOr the variant:\n\n``` chroma\nGRAPH.QUERY social \"CALL db.labels() YIELD label\"\n```\n\nYIELD modifiers are only required if explicitly specified; by default the value in the 'Yields' column will be emitted automatically.\n\n| Procedure                       | Arguments                                       | Yields                                                                       | Description                                                                                                                                                                                  |\n|---------------------------------|:------------------------------------------------|:-----------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| db.labels                       | none                                            | `label`                                                                      | Yields all node labels in the graph.                                                                                                                                                         |\n| db.relationshipTypes            | none                                            | `relationshipType`                                                           | Yields all relationship types in the graph.                                                                                                                                                  |\n| db.propertyKeys                 | none                                            | `propertyKey`                                                                | Yields all property keys in the graph.                                                                                                                                                       |\n| db.indexes                      | none                                            | `type`, `label`, `properties`, `language`, `stopwords`, `entitytype`, `info` | Yield all indexes in the graph, denoting whether they are exact-match or full-text and which label and properties each covers and whether they are indexing node or relationship attributes. |\n| db.constraints                  | none                                            | `type`, `label`, `properties`, `entitytype`, `status`                        | Yield all constraints in the graph, denoting constraint type (UNIQIE/MANDATORY), which label/relationship-type and properties each enforces.                                                 |\n| db.idx.fulltext.createNodeIndex | `label`, `property` \\[, `property` ...\\]        | none                                                                         | Builds a full-text searchable index on a label and the 1 or more specified properties.                                                                                                       |\n| db.idx.fulltext.drop            | `label`                                         | none                                                                         | Deletes the full-text index associated with the given label.                                                                                                                                 |\n| db.idx.fulltext.queryNodes      | `label`, `string`                               | `node`, `score`                                                              | Retrieve all nodes that contain the specified string in the full-text indexes on the given label.                                                                                            |\n| algo.pageRank                   | `label`, `relationship-type`                    | `node`, `score`                                                              | Runs the pagerank algorithm over nodes of given label, considering only edges of given relationship type.                                                                                    |\n| [algo.BFS](#BFS)                | `source-node`, `max-level`, `relationship-type` | `nodes`, `edges`                                                             | Performs BFS to find all nodes connected to the source. A `max level` of 0 indicates unlimited and a non-NULL `relationship-type` defines the relationship type that may be traversed.       |\n| dbms.procedures()               | none                                            | `name`, `mode`                                                               | List all procedures in the DBMS, yields for every procedure its name and mode (read/write).                                                                                                  |\n\n### Algorithms\n\n#### BFS\n\nThe breadth-first-search algorithm accepts 4 arguments:\n\n`source-node (node)` - The root of the search.\n\n`max-level (integer)` - If greater than zero, this argument indicates how many levels should be traversed by BFS. 1 would retrieve only the source's neighbors, 2 would retrieve all nodes within 2 hops, and so on.\n\n`relationship-type (string)` - If this argument is NULL, all relationship types will be traversed. Otherwise, it specifies a single relationship type to perform BFS over.\n\nIt can yield two outputs:\n\n`nodes` - An array of all nodes connected to the source without violating the input constraints.\n\n`edges` - An array of all edges traversed during the search. This does not necessarily contain all edges connecting nodes in the tree, as cycles or multiple edges connecting the same source and destination do not have a bearing on the reachability this algorithm tests for. These can be used to construct the directed acyclic graph that represents the BFS tree. Emitting edges incurs a small performance penalty.\n\n## Indexing\n\nRedisGraph supports single-property indexes for node labels and for relationship type. String, numeric, and geospatial data types can be indexed.\n\n### Creating an index for a node label\n\nFor a node label, the index creation syntax is:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CREATE INDEX FOR (p:Person) ON (p.age)\"\n```\n\nAn old syntax is also supported:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CREATE INDEX ON :Person(age)\"\n```\n\nAfter an index is explicitly created, it will automatically be used by queries that reference that label and any indexed property in a filter.\n\n``` chroma\nGRAPH.EXPLAIN DEMO_GRAPH \"MATCH (p:Person) WHERE p.age > 80 RETURN p\"\n1) \"Results\"\n2) \"    Project\"\n3) \"        Index Scan | (p:Person)\"\n```\n\nThis can significantly improve the runtime of queries with very specific filters. An index on `:employer(name)`, for example, will dramatically benefit the query:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"MATCH (:Employer {name: 'Dunder Mifflin'})-[:EMPLOYS]->(p:Person) RETURN p\"\n```\n\nAn example of utilizing a geospatial index to find `Employer` nodes within 5 kilometers of Scranton is:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"WITH point({latitude:41.4045886, longitude:-75.6969532}) AS scranton MATCH (e:Employer) WHERE distance(e.location, scranton) < 5000 RETURN e\"\n```\n\nGeospatial indexes can currently only be leveraged with `<` and `<=` filters; matching nodes outside of the given radius is performed using conventional matching.\n\n### Creating an index for a relationship type\n\nFor a relationship type, the index creation syntax is:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CREATE INDEX FOR ()-[f:FOLLOW]-() ON (f.created_at)\"\n```\n\nThen the execution plan for using the index:\n\n``` chroma\nGRAPH.EXPLAIN DEMO_GRAPH \"MATCH (p:Person {id: 0})-[f:FOLLOW]->(fp) WHERE 0 < f.created_at AND f.created_at < 1000 RETURN fp\"\n1) \"Results\"\n2) \"    Project\"\n3) \"        Edge By Index Scan | [f:FOLLOW]\"\n4) \"            Node By Index Scan | (p:Person)\"\n```\n\nThis can significantly improve the runtime of queries that traverse super nodes or when we want to start traverse from relationships.\n\n### Deleting an index for a node label\n\nFor a node label, the index deletion syntax is:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"DROP INDEX ON :Person(age)\"\n```\n\n### Deleting an index for a relationship type\n\nFor a relationship type, the index deletion syntax is:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"DROP INDEX ON :FOLLOW(created_at)\"\n```\n\n## Full-text indexing\n\nRedisGraph leverages the indexing capabilities of [RediSearch](https://redis.io/docs/stack/search/index.html) to provide full-text indices through procedure calls.\n\n### Creating a full-text index for a node label\n\nTo construct a full-text index on the `title` property of all nodes with label `Movie`, use the syntax:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CALL db.idx.fulltext.createNodeIndex('Movie', 'title')\"\n```\n\nMore properties can be added to this index by adding their names to the above set of arguments, or using this syntax again with the additional names.\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CALL db.idx.fulltext.createNodeIndex('Person', 'firstName', 'lastName')\"\n```\n\nRediSearch provide 2 index configuration options:\n\n1.  Language - Define which language to use for stemming text which is adding the base form of a word to the index. This allows the query for \"going\" to also return results for \"go\" and \"gone\", for example.\n2.  Stopwords - These are words that are usually so common that they do not add much information to search, but take up a lot of space and CPU time in the index.\n\nTo construct a full-text index on the `title` property using `German` language and using custom stopwords of all nodes with label `Movie`, use the syntax:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CALL db.idx.fulltext.createNodeIndex({ label: 'Movie', language: 'German', stopwords: ['a', 'ab'] }, 'title')\"\n```\n\nRediSearch provide 3 additional field configuration options:\n\n1.  Weight - The importance of the text in the field\n2.  Nostem - Skip stemming when indexing text\n3.  Phonetic - Enable phonetic search on the text\n\nTo construct a full-text index on the `title` property with phonetic search of all nodes with label `Movie`, use the syntax:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH \"CALL db.idx.fulltext.createNodeIndex('Movie', {field: 'title', phonetic: 'dm:en'})\"\n```\n\n### Utilizing a full-text index for a node label\n\nAn index can be invoked to match any whole words contained within:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"CALL db.idx.fulltext.queryNodes('Movie', 'Book') YIELD node RETURN node.title\"\n1) 1) \"node.title\"\n2) 1) 1) \"The Jungle Book\"\n   2) 1) \"The Book of Life\"\n3) 1) \"Query internal execution time: 0.927409 milliseconds\"\n```\n\nThis CALL clause can be interleaved with other Cypher clauses to perform more elaborate manipulations:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"CALL db.idx.fulltext.queryNodes('Movie', 'Book') YIELD node AS m\nWHERE m.genre = 'Adventure'\nRETURN m ORDER BY m.rating\"\n1) 1) \"m\"\n2) 1) 1) 1) 1) \"id\"\n            2) (integer) 1168\n         2) 1) \"labels\"\n            2) 1) \"Movie\"\n         3) 1) \"properties\"\n            2) 1) 1) \"genre\"\n                  2) \"Adventure\"\n               2) 1) \"rating\"\n                  2) \"7.6\"\n               3) 1) \"votes\"\n                  2) (integer) 151342\n               4) 1) \"year\"\n                  2) (integer) 2016\n               5) 1) \"title\"\n                  2) \"The Jungle Book\"\n3) 1) \"Query internal execution time: 0.226914 milliseconds\"\n```\n\nIn addition to yielding matching nodes, full-text index scans will return the score of each node. This is the [TF-IDF](https://redis.io/docs/stack/search/reference/scoring/#tfidf-default) score of the node, which is informed by how many times the search terms appear in the node and how closely grouped they are. This can be observed in the example:\n\n``` chroma\nGRAPH.QUERY DEMO_GRAPH\n\"CALL db.idx.fulltext.queryNodes('Node', 'hello world') YIELD node, score RETURN score, node.val\"\n1) 1) \"score\"\n   2) \"node.val\"\n2) 1) 1) \"2\"\n      2) \"hello world\"\n   2) 1) \"1\"\n      2) \"hello to a different world\"\n3) 1) \"Cached execution: 1\"\n   2) \"Query internal execution time: 0.335401 milliseconds\"\n```\n\n### Deleting a full-text index for a node label\n\nFor a node label, the full-text index deletion syntax is:\n\n```\nGRAPH.QUERY DEMO_GRAPH \"CALL db.idx.fulltext.drop('Movie')\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.query/](https://redis.io/commands/graph.query/)"
- name: graph.ro_query
  id: graph.ro_query/index
  summary: Executes a given read only query against a specified graph
  description: "# GRAPH.RO_QUERY\n\n    GRAPH.RO_QUERY\n\nSyntax\n\n``` command-syntax\nGRAPH.RO_QUERY graph query [TIMEOUT timeout]\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.2.8](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nExecutes a given read only query against a specified graph.\n\nArguments: `Graph name, Query, Timeout [optional]`\n\nReturns: [Result set](https://redis.io/docs/stack/graph/design/result_structure) for a read only query or an error if a write query was given.\n\n``` chroma\nGRAPH.RO_QUERY us_government \"MATCH (p:president)-[:born]->(:state {name:'Hawaii'}) RETURN p\"\n```\n\nQuery-level timeouts can be set as described in [the configuration section](https://redis.io/docs/stack/graph/configuration#timeout).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.ro_query/](https://redis.io/commands/graph.ro_query/)"
- name: graph.slowlog
  id: graph.slowlog/index
  summary: Returns a list containing up to 10 of the slowest queries issued against the given graph ID
  description: "# GRAPH.SLOWLOG\n\n    GRAPH.SLOWLOG\n\nSyntax\n\n``` command-syntax\nGRAPH.SLOWLOG graph\n```\n\nAvailable in:\n\n[Redis Stack](https://redis.io/docs/stack) / [Graph 2.0.12](https://redis.io/docs/stack/graph)\n\nTime complexity:\n\nReturns a list containing up to 10 of the slowest queries issued against the given graph ID.\n\nEach item in the list has the following structure:\n\n1.  A Unix timestamp at which the log entry was processed.\n2.  The issued command.\n3.  The issued query.\n4.  The amount of time needed for its execution, in milliseconds.\n\n``` chroma\nGRAPH.SLOWLOG graph_id\n 1) 1) \"1581932396\"\n    2) \"GRAPH.QUERY\"\n    3) \"MATCH (a:Person)-[:FRIEND]->(e) RETURN e.name\"\n    4) \"0.831\"\n 2) 1) \"1581932396\"\n    2) \"GRAPH.QUERY\"\n    3) \"MATCH (me:Person)-[:FRIEND]->(:Person)-[:FRIEND]->(fof:Person) RETURN fof.name\"\n    4) \"0.288\"\n```\n\nTo reset a graph's slowlog issue the following command:\n\n``` chroma\nGRAPH.SLOWLOG graph_id RESET\n```\n\nOnce cleared the information is lost forever.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/graph.slowlog/](https://redis.io/commands/graph.slowlog/)"
- name: hdel
  id: hdel/index
  summary: 'Time complexity: O(N) where N is the number of fields to be removed'
  description: "# HDEL\n\n    HDEL\n\nSyntax\n\n``` command-syntax\nHDEL key field [field ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of fields to be removed.\n\nACL categories:  \n`@write`, `@hash`, `@fast`,\n\nRemoves the specified fields from the hash stored at `key`. Specified fields that do not exist within this hash are ignored. If `key` does not exist, it is treated as an empty hash and this command returns `0`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of fields that were removed from the hash, not including specified but non existing fields.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"foo\"\nHDEL myhash field1\nHDEL myhash field2\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple `field` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hdel/](https://redis.io/commands/hdel/)"
- name: hello
  id: hello/index
  summary: Switch to a different protocol, optionally authenticating and setting the connection's name, or provide a contextual client report
  description: "# HELLO\n\n    HELLO\n\nSyntax\n\n``` command-syntax\nHELLO [protover [AUTH username password] [SETNAME clientname]]\n```\n\nAvailable since:  \n6.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nSwitch to a different protocol, optionally authenticating and setting the connection's name, or provide a contextual client report.\n\nRedis version 6 and above supports two protocols: the old protocol, RESP2, and a new one introduced with Redis 6, RESP3. RESP3 has certain advantages since when the connection is in this mode, Redis is able to reply with more semantical replies: for instance, [`HGETALL`](../hgetall) will return a *map type*, so a client library implementation no longer requires to know in advance to translate the array into a hash before returning it to the caller. For a full coverage of RESP3, please check the [RESP3 specification](https://github.com/redis/redis-specifications/blob/master/protocol/RESP3.md).\n\nIn Redis 6 connections start in RESP2 mode, so clients implementing RESP2 do not need to updated or changed. There are no short term plans to drop support for RESP2, although future version may default to RESP3.\n\n`HELLO` always replies with a list of current server and connection properties, such as: versions, modules loaded, client ID, replication role and so forth. When called without any arguments in Redis 6.2 and its default use of RESP2 protocol, the reply looks like this:\n\n    > HELLO\n     1) \"server\"\n     2) \"redis\"\n     3) \"version\"\n     4) \"255.255.255\"\n     5) \"proto\"\n     6) (integer) 2\n     7) \"id\"\n     8) (integer) 5\n     9) \"mode\"\n    10) \"standalone\"\n    11) \"role\"\n    12) \"master\"\n    13) \"modules\"\n    14) (empty array)\n\nClients that want to handshake using the RESP3 mode need to call the `HELLO` command and specify the value \"3\" as the `protover` argument, like so:\n\n    > HELLO 3\n    1# \"server\" => \"redis\"\n    2# \"version\" => \"6.0.0\"\n    3# \"proto\" => (integer) 3\n    4# \"id\" => (integer) 10\n    5# \"mode\" => \"standalone\"\n    6# \"role\" => \"master\"\n    7# \"modules\" => (empty array)\n\nBecause `HELLO` replies with useful information, and given that `protover` is optional or can be set to \"2\", client library authors may consider using this command instead of the canonical [`PING`](../ping) when setting up the connection.\n\nWhen called with the optional `protover` argument, this command switches the protocol to the specified version and also accepts the following options:\n\n- `AUTH <username> <password>`: directly authenticate the connection in addition to switching to the specified protocol version. This makes calling [`AUTH`](../auth) before `HELLO` unnecessary when setting up a new connection. Note that the `username` can be set to \"default\" to authenticate against a server that does not use ACLs, but rather the simpler `requirepass` mechanism of Redis prior to version 6.\n- `SETNAME <clientname>`: this is the equivalent of calling [`CLIENT SETNAME`](../client-setname).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of server properties. The reply is a map instead of an array when RESP3 is selected. The command returns an error if the `protover` requested does not exist.\n\n## History\n\n- Starting with Redis version 6.2.0: `protover` made optional; when called without arguments the command reports the current connection's context.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hello/](https://redis.io/commands/hello/)"
- name: hexists
  id: hexists/index
  summary: Returns if field is an existing field in the hash stored at key
  description: "# HEXISTS\n\n    HEXISTS\n\nSyntax\n\n``` command-syntax\nHEXISTS key field\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@hash`, `@fast`,\n\nReturns if `field` is an existing field in the hash stored at `key`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the hash contains `field`.\n- `0` if the hash does not contain `field`, or `key` does not exist.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"foo\"\nHEXISTS myhash field1\nHEXISTS myhash field2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hexists/](https://redis.io/commands/hexists/)"
- name: hget
  id: hget/index
  summary: Returns the value associated with field in the hash stored at key
  description: "# HGET\n\n    HGET\n\nSyntax\n\n``` command-syntax\nHGET key field\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@hash`, `@fast`,\n\nReturns the value associated with `field` in the hash stored at `key`.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value associated with `field`, or `nil` when `field` is not present in the hash or `key` does not exist.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"foo\"\nHGET myhash field1\nHGET myhash field2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hget/](https://redis.io/commands/hget/)"
- name: hgetall
  id: hgetall/index
  summary: 'Time complexity: O(N) where N is the size of the hash'
  description: "# HGETALL\n\n    HGETALL\n\nSyntax\n\n``` command-syntax\nHGETALL key\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the size of the hash.\n\nACL categories:  \n`@read`, `@hash`, `@slow`,\n\nReturns all fields and values of the hash stored at `key`. In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of fields and their values stored in the hash, or an empty list when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHGETALL myhash\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hgetall/](https://redis.io/commands/hgetall/)"
- name: hincrby
  id: hincrby/index
  summary: Increments the number stored at field in the hash stored at key by increment
  description: "# HINCRBY\n\n    HINCRBY\n\nSyntax\n\n``` command-syntax\nHINCRBY key field increment\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@hash`, `@fast`,\n\nIncrements the number stored at `field` in the hash stored at `key` by `increment`. If `key` does not exist, a new key holding a hash is created. If `field` does not exist the value is set to `0` before the operation is performed.\n\nThe range of values supported by `HINCRBY` is limited to 64 bit signed integers.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the value at `field` after the increment operation.\n\n## Examples\n\nSince the `increment` argument is signed, both increment and decrement operations can be performed:\n\n``` redis-cli\nHSET myhash field 5\nHINCRBY myhash field 1\nHINCRBY myhash field -1\nHINCRBY myhash field -10\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hincrby/](https://redis.io/commands/hincrby/)"
- name: hincrbyfloat
  id: hincrbyfloat/index
  summary: Increment the specified field of a hash stored at key, and representing a floating point number, by the specified increment
  description: "# HINCRBYFLOAT\n\n    HINCRBYFLOAT\n\nSyntax\n\n``` command-syntax\nHINCRBYFLOAT key field increment\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@hash`, `@fast`,\n\nIncrement the specified `field` of a hash stored at `key`, and representing a floating point number, by the specified `increment`. If the increment value is negative, the result is to have the hash field value **decremented** instead of incremented. If the field does not exist, it is set to `0` before performing the operation. An error is returned if one of the following conditions occur:\n\n- The field contains a value of the wrong type (not a string).\n- The current field content or the specified increment are not parsable as a double precision floating point number.\n\nThe exact behavior of this command is identical to the one of the [`INCRBYFLOAT`](../incrbyfloat) command, please refer to the documentation of [`INCRBYFLOAT`](../incrbyfloat) for further information.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of `field` after the increment.\n\n## Examples\n\n``` redis-cli\nHSET mykey field 10.50\nHINCRBYFLOAT mykey field 0.1\nHINCRBYFLOAT mykey field -5\nHSET mykey field 5.0e3\nHINCRBYFLOAT mykey field 2.0e2\n```\n\n## Implementation details\n\nThe command is always propagated in the replication link and the Append Only File as a [`HSET`](../hset) operation, so that differences in the underlying floating point math implementation will not be sources of inconsistency.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hincrbyfloat/](https://redis.io/commands/hincrbyfloat/)"
- name: hkeys
  id: hkeys/index
  summary: 'Time complexity: O(N) where N is the size of the hash'
  description: "# HKEYS\n\n    HKEYS\n\nSyntax\n\n``` command-syntax\nHKEYS key\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the size of the hash.\n\nACL categories:  \n`@read`, `@hash`, `@slow`,\n\nReturns all field names in the hash stored at `key`.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of fields in the hash, or an empty list when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHKEYS myhash\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hkeys/](https://redis.io/commands/hkeys/)"
- name: hlen
  id: hlen/index
  summary: Returns the number of fields contained in the hash stored at key
  description: "# HLEN\n\n    HLEN\n\nSyntax\n\n``` command-syntax\nHLEN key\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@hash`, `@fast`,\n\nReturns the number of fields contained in the hash stored at `key`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): number of fields in the hash, or `0` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHLEN myhash\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hlen/](https://redis.io/commands/hlen/)"
- name: hmget
  id: hmget/index
  summary: 'Time complexity: O(N) where N is the number of fields being requested'
  description: "# HMGET\n\n    HMGET\n\nSyntax\n\n``` command-syntax\nHMGET key field [field ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of fields being requested.\n\nACL categories:  \n`@read`, `@hash`, `@fast`,\n\nReturns the values associated with the specified `fields` in the hash stored at `key`.\n\nFor every `field` that does not exist in the hash, a `nil` value is returned. Because non-existing keys are treated as empty hashes, running `HMGET` against a non-existing `key` will return a list of `nil` values.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of values associated with the given fields, in the same order as they are requested.\n\n``` redis-cli\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHMGET myhash field1 field2 nofield\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hmget/](https://redis.io/commands/hmget/)"
- name: hmset
  id: hmset/index
  summary: As of Redis version 4.0.0, this command is regarded as deprecated
  description: "# HMSET\n\n    HMSET (deprecated)\n\nAs of Redis version 4.0.0, this command is regarded as deprecated.\n\nIt can be replaced by [`HSET`](../hset) with multiple field-value pairs when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nHMSET key field value [field value ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of fields being set.\n\nACL categories:  \n`@write`, `@hash`, `@fast`,\n\nSets the specified fields to their respective values in the hash stored at `key`. This command overwrites any specified fields already existing in the hash. If `key` does not exist, a new key holding a hash is created.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n``` redis-cli\nHMSET myhash field1 \"Hello\" field2 \"World\"\nHGET myhash field1\nHGET myhash field2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hmset/](https://redis.io/commands/hmset/)"
- name: hrandfield
  id: hrandfield/index
  summary: When called with just the key argument, return a random field from the hash value stored at key
  description: "# HRANDFIELD\n\n    HRANDFIELD\n\nSyntax\n\n``` command-syntax\nHRANDFIELD key [count [WITHVALUES]]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N) where N is the number of fields returned\n\nACL categories:  \n`@read`, `@hash`, `@slow`,\n\nWhen called with just the `key` argument, return a random field from the hash value stored at `key`.\n\nIf the provided `count` argument is positive, return an array of **distinct fields**. The array's length is either `count` or the hash's number of fields ([`HLEN`](../hlen)), whichever is lower.\n\nIf called with a negative `count`, the behavior changes and the command is allowed to return the **same field multiple times**. In this case, the number of returned fields is the absolute value of the specified `count`.\n\nThe optional `WITHVALUES` modifier changes the reply so it includes the respective values of the randomly selected hash fields.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): without the additional `count` argument, the command returns a Bulk Reply with the randomly selected field, or `nil` when `key` does not exist.\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): when the additional `count` argument is passed, the command returns an array of fields, or an empty array when `key` does not exist. If the `WITHVALUES` modifier is used, the reply is a list fields and their values from the hash.\n\n## Examples\n\n``` redis-cli\nHMSET coin heads obverse tails reverse edge null\nHRANDFIELD coin\nHRANDFIELD coin\nHRANDFIELD coin -5 WITHVALUES\n```\n\n## Specification of the behavior when count is passed\n\nWhen the `count` argument is a positive value this command behaves as follows:\n\n- No repeated fields are returned.\n- If `count` is bigger than the number of fields in the hash, the command will only return the whole hash without additional fields.\n- The order of fields in the reply is not truly random, so it is up to the client to shuffle them if needed.\n\nWhen the `count` is a negative value, the behavior changes as follows:\n\n- Repeating fields are possible.\n- Exactly `count` fields, or an empty array if the hash is empty (non-existing key), are always returned.\n- The order of fields in the reply is truly random.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hrandfield/](https://redis.io/commands/hrandfield/)"
- name: hscan
  id: hscan/index
  summary: 'Time complexity: O(1) for every call'
  description: "# HSCAN\n\n    HSCAN\n\nSyntax\n\n``` command-syntax\nHSCAN key cursor [MATCH pattern] [COUNT count]\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nACL categories:  \n`@read`, `@hash`, `@slow`,\n\nSee [`SCAN`](../scan) for `HSCAN` documentation.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hscan/](https://redis.io/commands/hscan/)"
- name: hset
  id: hset/index
  summary: 'Time complexity: O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs'
  description: "# HSET\n\n    HSET\n\nSyntax\n\n``` command-syntax\nHSET key field value [field value ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.\n\nACL categories:  \n`@write`, `@hash`, `@fast`,\n\nSets the specified fields to their respective values in the hash stored at `key`.\n\nThis command overwrites the values of specified fields that exist in the hash. If `key` doesn't exist, a new key holding a hash is created.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of fields that were added.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"Hello\"\nHGET myhash field1\nHSET myhash field2 \"Hi\" field3 \"World\"\nHGET myhash field2\nHGET myhash field3\nHGETALL myhash\n```\n\n## History\n\n- Starting with Redis version 4.0.0: Accepts multiple `field` and `value` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hset/](https://redis.io/commands/hset/)"
- name: hsetnx
  id: hsetnx/index
  summary: Sets field in the hash stored at key to value, only if field does not yet exist
  description: "# HSETNX\n\n    HSETNX\n\nSyntax\n\n``` command-syntax\nHSETNX key field value\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@hash`, `@fast`,\n\nSets `field` in the hash stored at `key` to `value`, only if `field` does not yet exist. If `key` does not exist, a new key holding a hash is created. If `field` already exists, this operation has no effect.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if `field` is a new field in the hash and `value` was set.\n- `0` if `field` already exists in the hash and no operation was performed.\n\n## Examples\n\n``` redis-cli\nHSETNX myhash field \"Hello\"\nHSETNX myhash field \"World\"\nHGET myhash field\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hsetnx/](https://redis.io/commands/hsetnx/)"
- name: hstrlen
  id: hstrlen/index
  summary: Returns the string length of the value associated with field in the hash stored at key
  description: "# HSTRLEN\n\n    HSTRLEN\n\nSyntax\n\n``` command-syntax\nHSTRLEN key field\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@hash`, `@fast`,\n\nReturns the string length of the value associated with `field` in the hash stored at `key`. If the `key` or the `field` do not exist, 0 is returned.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the string length of the value associated with `field`, or zero when `field` is not present in the hash or `key` does not exist at all.\n\n## Examples\n\n``` redis-cli\nHMSET myhash f1 HelloWorld f2 99 f3 -256\nHSTRLEN myhash f1\nHSTRLEN myhash f2\nHSTRLEN myhash f3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hstrlen/](https://redis.io/commands/hstrlen/)"
- name: hvals
  id: hvals/index
  summary: 'Time complexity: O(N) where N is the size of the hash'
  description: "# HVALS\n\n    HVALS\n\nSyntax\n\n``` command-syntax\nHVALS key\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the size of the hash.\n\nACL categories:  \n`@read`, `@hash`, `@slow`,\n\nReturns all values in the hash stored at `key`.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of values in the hash, or an empty list when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHVALS myhash\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/hvals/](https://redis.io/commands/hvals/)"
- name: incr
  id: incr/index
  summary: Increments the number stored at key by one
  description: "# INCR\n\n    INCR\n\nSyntax\n\n``` command-syntax\nINCR key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nIncrements the number stored at `key` by one. If the key does not exist, it is set to `0` before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.\n\n**Note**: this is a string operation because Redis does not have a dedicated integer type. The string stored at the key is interpreted as a base-10 **64 bit signed integer** to execute the operation.\n\nRedis stores integers in their integer representation, so for string values that actually hold an integer, there is no overhead for storing the string representation of the integer.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the value of `key` after the increment\n\n## Examples\n\n``` redis-cli\nSET mykey \"10\"\nINCR mykey\nGET mykey\n```\n\n## Pattern: Counter\n\nThe counter pattern is the most obvious thing you can do with Redis atomic increment operations. The idea is simply send an `INCR` command to Redis every time an operation occurs. For instance in a web application we may want to know how many page views this user did every day of the year.\n\nTo do so the web application may simply increment a key every time the user performs a page view, creating the key name concatenating the User ID and a string representing the current date.\n\nThis simple pattern can be extended in many ways:\n\n- It is possible to use `INCR` and [`EXPIRE`](../expire) together at every page view to have a counter counting only the latest N page views separated by less than the specified amount of seconds.\n- A client may use GETSET in order to atomically get the current counter value and reset it to zero.\n- Using other atomic increment/decrement commands like [`DECR`](../decr) or [`INCRBY`](../incrby) it is possible to handle values that may get bigger or smaller depending on the operations performed by the user. Imagine for instance the score of different users in an online game.\n\n## Pattern: Rate limiter\n\nThe rate limiter pattern is a special counter that is used to limit the rate at which an operation can be performed. The classical materialization of this pattern involves limiting the number of requests that can be performed against a public API.\n\nWe provide two implementations of this pattern using `INCR`, where we assume that the problem to solve is limiting the number of API calls to a maximum of *ten requests per second per IP address*.\n\n## Pattern: Rate limiter 1\n\nThe more simple and direct implementation of this pattern is the following:\n\n```\nFUNCTION LIMIT_API_CALL(ip)\nts = CURRENT_UNIX_TIME()\nkeyname = ip+\":\"+ts\nMULTI\n    INCR(keyname)\n    EXPIRE(keyname,10)\nEXEC\ncurrent = RESPONSE_OF_INCR_WITHIN_MULTI\nIF current > 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    PERFORM_API_CALL()\nEND\n```\n\nBasically we have a counter for every IP, for every different second. But this counters are always incremented setting an expire of 10 seconds so that they'll be removed by Redis automatically when the current second is a different one.\n\nNote the used of [`MULTI`](../multi) and [`EXEC`](../exec) in order to make sure that we'll both increment and set the expire at every API call.\n\n## Pattern: Rate limiter 2\n\nAn alternative implementation uses a single counter, but is a bit more complex to get it right without race conditions. We'll examine different variants.\n\n```\nFUNCTION LIMIT_API_CALL(ip):\ncurrent = GET(ip)\nIF current != NULL AND current > 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    value = INCR(ip)\n    IF value == 1 THEN\n        EXPIRE(ip,1)\n    END\n    PERFORM_API_CALL()\nEND\n```\n\nThe counter is created in a way that it only will survive one second, starting from the first request performed in the current second. If there are more than 10 requests in the same second the counter will reach a value greater than 10, otherwise it will expire and start again from 0.\n\n**In the above code there is a race condition**. If for some reason the client performs the `INCR` command but does not perform the [`EXPIRE`](../expire) the key will be leaked until we'll see the same IP address again.\n\nThis can be fixed easily turning the `INCR` with optional [`EXPIRE`](../expire) into a Lua script that is send using the [`EVAL`](../eval) command (only available since Redis version 2.6).\n\n```\nlocal current\ncurrent = redis.call(\"incr\",KEYS[1])\nif current == 1 then\n    redis.call(\"expire\",KEYS[1],1)\nend\n```\n\nThere is a different way to fix this issue without using scripting, by using Redis lists instead of counters. The implementation is more complex and uses more advanced features but has the advantage of remembering the IP addresses of the clients currently performing an API call, that may be useful or not depending on the application.\n\n```\nFUNCTION LIMIT_API_CALL(ip)\ncurrent = LLEN(ip)\nIF current > 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    IF EXISTS(ip) == FALSE\n        MULTI\n            RPUSH(ip,ip)\n            EXPIRE(ip,1)\n        EXEC\n    ELSE\n        RPUSHX(ip,ip)\n    END\n    PERFORM_API_CALL()\nEND\n```\n\nThe [`RPUSHX`](../rpushx) command only pushes the element if the key already exists.\n\nNote that we have a race here, but it is not a problem: [`EXISTS`](../exists) may return false but the key may be created by another client before we create it inside the [`MULTI`](../multi) / [`EXEC`](../exec) block. However this race will just miss an API call under rare conditions, so the rate limiting will still work correctly.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/incr/](https://redis.io/commands/incr/)"
- name: incrby
  id: incrby/index
  summary: Increments the number stored at key by increment
  description: "# INCRBY\n\n    INCRBY\n\nSyntax\n\n``` command-syntax\nINCRBY key increment\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nIncrements the number stored at `key` by `increment`. If the key does not exist, it is set to `0` before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.\n\nSee [`INCR`](../incr) for extra information on increment/decrement operations.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the value of `key` after the increment\n\n## Examples\n\n``` redis-cli\nSET mykey \"10\"\nINCRBY mykey 5\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/incrby/](https://redis.io/commands/incrby/)"
- name: incrbyfloat
  id: incrbyfloat/index
  summary: Increment the string representing a floating point number stored at key by the specified increment
  description: "# INCRBYFLOAT\n\n    INCRBYFLOAT\n\nSyntax\n\n``` command-syntax\nINCRBYFLOAT key increment\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nIncrement the string representing a floating point number stored at `key` by the specified `increment`. By using a negative `increment` value, the result is that the value stored at the key is decremented (by the obvious properties of addition). If the key does not exist, it is set to `0` before performing the operation. An error is returned if one of the following conditions occur:\n\n- The key contains a value of the wrong type (not a string).\n- The current key content or the specified increment are not parsable as a double precision floating point number.\n\nIf the command is successful the new incremented value is stored as the new value of the key (replacing the old one), and returned to the caller as a string.\n\nBoth the value already contained in the string key and the increment argument can be optionally provided in exponential notation, however the value computed after the increment is stored consistently in the same format, that is, an integer number followed (if needed) by a dot, and a variable number of digits representing the decimal part of the number. Trailing zeroes are always removed.\n\nThe precision of the output is fixed at 17 digits after the decimal point regardless of the actual internal precision of the computation.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of `key` after the increment.\n\n## Examples\n\n``` redis-cli\nSET mykey 10.50\nINCRBYFLOAT mykey 0.1\nINCRBYFLOAT mykey -5\nSET mykey 5.0e3\nINCRBYFLOAT mykey 2.0e2\n```\n\n## Implementation details\n\nThe command is always propagated in the replication link and the Append Only File as a [`SET`](../set) operation, so that differences in the underlying floating point math implementation will not be sources of inconsistency.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/incrbyfloat/](https://redis.io/commands/incrbyfloat/)"
- name: info
  id: info/index
  summary: The INFO command returns information and statistics about the server in a format that is simple to parse by computers and easy to read by humans
  description: "# INFO\n\n    INFO\n\nSyntax\n\n``` command-syntax\nINFO [section [section ...]]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@dangerous`,\n\nThe `INFO` command returns information and statistics about the server in a format that is simple to parse by computers and easy to read by humans.\n\nThe optional parameter can be used to select a specific section of information:\n\n- `server`: General information about the Redis server\n- `clients`: Client connections section\n- `memory`: Memory consumption related information\n- `persistence`: RDB and AOF related information\n- `stats`: General statistics\n- `replication`: Master/replica replication information\n- `cpu`: CPU consumption statistics\n- `commandstats`: Redis command statistics\n- `latencystats`: Redis command latency percentile distribution statistics\n- `sentinel`: Redis Sentinel section (only applicable to Sentinel instances)\n- `cluster`: Redis Cluster section\n- `modules`: Modules section\n- `keyspace`: Database related statistics\n- `modules`: Module related sections\n- `errorstats`: Redis error statistics\n\nIt can also take the following values:\n\n- `all`: Return all sections (excluding module generated ones)\n- `default`: Return only the default set of sections\n- `everything`: Includes `all` and `modules`\n\nWhen no parameter is provided, the `default` option is assumed.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): as a collection of text lines.\n\nLines can contain a section name (starting with a \\# character) or a property. All the properties are in the form of `field:value` terminated by `\\r\\n`.\n\n``` redis-cli\nINFO\n```\n\n## Notes\n\nPlease note depending on the version of Redis some of the fields have been added or removed. A robust client application should therefore parse the result of this command by skipping unknown properties, and gracefully handle missing fields.\n\nHere is the description of fields for Redis \\>= 2.4.\n\nHere is the meaning of all fields in the **server** section:\n\n- `redis_version`: Version of the Redis server\n- `redis_git_sha1`: Git SHA1\n- `redis_git_dirty`: Git dirty flag\n- `redis_build_id`: The build id\n- `redis_mode`: The server's mode (\"standalone\", \"sentinel\" or \"cluster\")\n- `os`: Operating system hosting the Redis server\n- `arch_bits`: Architecture (32 or 64 bits)\n- `multiplexing_api`: Event loop mechanism used by Redis\n- `atomicvar_api`: Atomicvar API used by Redis\n- `gcc_version`: Version of the GCC compiler used to compile the Redis server\n- `process_id`: PID of the server process\n- `process_supervised`: Supervised system (\"upstart\", \"systemd\", \"unknown\" or \"no\")\n- `run_id`: Random value identifying the Redis server (to be used by Sentinel and Cluster)\n- `tcp_port`: TCP/IP listen port\n- `server_time_usec`: Epoch-based system time with microsecond precision\n- `uptime_in_seconds`: Number of seconds since Redis server start\n- `uptime_in_days`: Same value expressed in days\n- `hz`: The server's current frequency setting\n- `configured_hz`: The server's configured frequency setting\n- `lru_clock`: Clock incrementing every minute, for LRU management\n- `executable`: The path to the server's executable\n- `config_file`: The path to the config file\n- `io_threads_active`: Flag indicating if I/O threads are active\n- `shutdown_in_milliseconds`: The maximum time remaining for replicas to catch up the replication before completing the shutdown sequence. This field is only present during shutdown.\n\nHere is the meaning of all fields in the **clients** section:\n\n- `connected_clients`: Number of client connections (excluding connections from replicas)\n- `cluster_connections`: An approximation of the number of sockets used by the cluster's bus\n- `maxclients`: The value of the `maxclients` configuration directive. This is the upper limit for the sum of `connected_clients`, `connected_slaves` and `cluster_connections`.\n- `client_recent_max_input_buffer`: Biggest input buffer among current client connections\n- `client_recent_max_output_buffer`: Biggest output buffer among current client connections\n- `blocked_clients`: Number of clients pending on a blocking call ([`BLPOP`](../blpop), [`BRPOP`](../brpop), [`BRPOPLPUSH`](../brpoplpush), [`BLMOVE`](../blmove), [`BZPOPMIN`](../bzpopmin), [`BZPOPMAX`](../bzpopmax))\n- `tracking_clients`: Number of clients being tracked ([`CLIENT TRACKING`](../client-tracking))\n- `clients_in_timeout_table`: Number of clients in the clients timeout table\n\nHere is the meaning of all fields in the **memory** section:\n\n- `used_memory`: Total number of bytes allocated by Redis using its allocator (either standard **libc**, **jemalloc**, or an alternative allocator such as [**tcmalloc**](http://code.google.com/p/google-perftools/))\n- `used_memory_human`: Human readable representation of previous value\n- `used_memory_rss`: Number of bytes that Redis allocated as seen by the operating system (a.k.a resident set size). This is the number reported by tools such as `top(1)` and `ps(1)`\n- `used_memory_rss_human`: Human readable representation of previous value\n- `used_memory_peak`: Peak memory consumed by Redis (in bytes)\n- `used_memory_peak_human`: Human readable representation of previous value\n- `used_memory_peak_perc`: The percentage of `used_memory_peak` out of `used_memory`\n- `used_memory_overhead`: The sum in bytes of all overheads that the server allocated for managing its internal data structures\n- `used_memory_startup`: Initial amount of memory consumed by Redis at startup in bytes\n- `used_memory_dataset`: The size in bytes of the dataset (`used_memory_overhead` subtracted from `used_memory`)\n- `used_memory_dataset_perc`: The percentage of `used_memory_dataset` out of the net memory usage (`used_memory` minus `used_memory_startup`)\n- `total_system_memory`: The total amount of memory that the Redis host has\n- `total_system_memory_human`: Human readable representation of previous value\n- `used_memory_lua`: Number of bytes used by the Lua engine\n- `used_memory_lua_human`: Human readable representation of previous value\n- `used_memory_scripts`: Number of bytes used by cached Lua scripts\n- `used_memory_scripts_human`: Human readable representation of previous value\n- `maxmemory`: The value of the `maxmemory` configuration directive\n- `maxmemory_human`: Human readable representation of previous value\n- `maxmemory_policy`: The value of the `maxmemory-policy` configuration directive\n- `mem_fragmentation_ratio`: Ratio between `used_memory_rss` and `used_memory`. Note that this doesn't only includes fragmentation, but also other process overheads (see the `allocator_*` metrics), and also overheads like code, shared libraries, stack, etc.\n- `mem_fragmentation_bytes`: Delta between `used_memory_rss` and `used_memory`. Note that when the total fragmentation bytes is low (few megabytes), a high ratio (e.g. 1.5 and above) is not an indication of an issue.\n- `allocator_frag_ratio:`: Ratio between `allocator_active` and `allocator_allocated`. This is the true (external) fragmentation metric (not `mem_fragmentation_ratio`).\n- `allocator_frag_bytes` Delta between `allocator_active` and `allocator_allocated`. See note about `mem_fragmentation_bytes`.\n- `allocator_rss_ratio`: Ratio between `allocator_resident` and `allocator_active`. This usually indicates pages that the allocator can and probably will soon release back to the OS.\n- `allocator_rss_bytes`: Delta between `allocator_resident` and `allocator_active`\n- `rss_overhead_ratio`: Ratio between `used_memory_rss` (the process RSS) and `allocator_resident`. This includes RSS overheads that are not allocator or heap related.\n- `rss_overhead_bytes`: Delta between `used_memory_rss` (the process RSS) and `allocator_resident`\n- `allocator_allocated`: Total bytes allocated form the allocator, including internal-fragmentation. Normally the same as `used_memory`.\n- `allocator_active`: Total bytes in the allocator active pages, this includes external-fragmentation.\n- `allocator_resident`: Total bytes resident (RSS) in the allocator, this includes pages that can be released to the OS (by [`MEMORY PURGE`](../memory-purge), or just waiting).\n- `mem_not_counted_for_evict`: Used memory that's not counted for key eviction. This is basically transient replica and AOF buffers.\n- `mem_clients_slaves`: Memory used by replica clients - Starting Redis 7.0, replica buffers share memory with the replication backlog, so this field can show 0 when replicas don't trigger an increase of memory usage.\n- `mem_clients_normal`: Memory used by normal clients\n- `mem_cluster_links`: Memory used by links to peers on the cluster bus when cluster mode is enabled.\n- `mem_aof_buffer`: Transient memory used for AOF and AOF rewrite buffers\n- `mem_replication_backlog`: Memory used by replication backlog\n- `mem_total_replication_buffers`: Total memory consumed for replication buffers - Added in Redis 7.0.\n- `mem_allocator`: Memory allocator, chosen at compile time.\n- `active_defrag_running`: When `activedefrag` is enabled, this indicates whether defragmentation is currently active, and the CPU percentage it intends to utilize.\n- `lazyfree_pending_objects`: The number of objects waiting to be freed (as a result of calling [`UNLINK`](../unlink), or [`FLUSHDB`](../flushdb) and [`FLUSHALL`](../flushall) with the **ASYNC** option)\n- `lazyfreed_objects`: The number of objects that have been lazy freed.\n\nIdeally, the `used_memory_rss` value should be only slightly higher than `used_memory`. When rss \\>\\> used, a large difference may mean there is (external) memory fragmentation, which can be evaluated by checking `allocator_frag_ratio`, `allocator_frag_bytes`. When used \\>\\> rss, it means part of Redis memory has been swapped off by the operating system: expect some significant latencies.\n\nBecause Redis does not have control over how its allocations are mapped to memory pages, high `used_memory_rss` is often the result of a spike in memory usage.\n\nWhen Redis frees memory, the memory is given back to the allocator, and the allocator may or may not give the memory back to the system. There may be a discrepancy between the `used_memory` value and memory consumption as reported by the operating system. It may be due to the fact memory has been used and released by Redis, but not given back to the system. The `used_memory_peak` value is generally useful to check this point.\n\nAdditional introspective information about the server's memory can be obtained by referring to the [`MEMORY STATS`](../memory-stats) command and the [`MEMORY DOCTOR`](../memory-doctor).\n\nHere is the meaning of all fields in the **persistence** section:\n\n- `loading`: Flag indicating if the load of a dump file is on-going\n- `async_loading`: Currently loading replication data-set asynchronously while serving old data. This means `repl-diskless-load` is enabled and set to `swapdb`. Added in Redis 7.0.\n- `current_cow_peak`: The peak size in bytes of copy-on-write memory while a child fork is running\n- `current_cow_size`: The size in bytes of copy-on-write memory while a child fork is running\n- `current_cow_size_age`: The age, in seconds, of the `current_cow_size` value.\n- `current_fork_perc`: The percentage of progress of the current fork process. For AOF and RDB forks it is the percentage of `current_save_keys_processed` out of `current_save_keys_total`.\n- `current_save_keys_processed`: Number of keys processed by the current save operation\n- `current_save_keys_total`: Number of keys at the beginning of the current save operation\n- `rdb_changes_since_last_save`: Number of changes since the last dump\n- `rdb_bgsave_in_progress`: Flag indicating a RDB save is on-going\n- `rdb_last_save_time`: Epoch-based timestamp of last successful RDB save\n- `rdb_last_bgsave_status`: Status of the last RDB save operation\n- `rdb_last_bgsave_time_sec`: Duration of the last RDB save operation in seconds\n- `rdb_current_bgsave_time_sec`: Duration of the on-going RDB save operation if any\n- `rdb_last_cow_size`: The size in bytes of copy-on-write memory during the last RDB save operation\n- `rdb_last_load_keys_expired`: Number of volatile keys deleted during the last RDB loading. Added in Redis 7.0.\n- `rdb_last_load_keys_loaded`: Number of keys loaded during the last RDB loading. Added in Redis 7.0.\n- `aof_enabled`: Flag indicating AOF logging is activated\n- `aof_rewrite_in_progress`: Flag indicating a AOF rewrite operation is on-going\n- `aof_rewrite_scheduled`: Flag indicating an AOF rewrite operation will be scheduled once the on-going RDB save is complete.\n- `aof_last_rewrite_time_sec`: Duration of the last AOF rewrite operation in seconds\n- `aof_current_rewrite_time_sec`: Duration of the on-going AOF rewrite operation if any\n- `aof_last_bgrewrite_status`: Status of the last AOF rewrite operation\n- `aof_last_write_status`: Status of the last write operation to the AOF\n- `aof_last_cow_size`: The size in bytes of copy-on-write memory during the last AOF rewrite operation\n- `module_fork_in_progress`: Flag indicating a module fork is on-going\n- `module_fork_last_cow_size`: The size in bytes of copy-on-write memory during the last module fork operation\n- `aof_rewrites`: Number of AOF rewrites performed since startup\n- `rdb_saves`: Number of RDB snapshots performed since startup\n\n`rdb_changes_since_last_save` refers to the number of operations that produced some kind of changes in the dataset since the last time either [`SAVE`](../save) or [`BGSAVE`](../bgsave) was called.\n\nIf AOF is activated, these additional fields will be added:\n\n- `aof_current_size`: AOF current file size\n- `aof_base_size`: AOF file size on latest startup or rewrite\n- `aof_pending_rewrite`: Flag indicating an AOF rewrite operation will be scheduled once the on-going RDB save is complete.\n- `aof_buffer_length`: Size of the AOF buffer\n- `aof_rewrite_buffer_length`: Size of the AOF rewrite buffer. Note this field was removed in Redis 7.0\n- `aof_pending_bio_fsync`: Number of fsync pending jobs in background I/O queue\n- `aof_delayed_fsync`: Delayed fsync counter\n\nIf a load operation is on-going, these additional fields will be added:\n\n- `loading_start_time`: Epoch-based timestamp of the start of the load operation\n- `loading_total_bytes`: Total file size\n- `loading_rdb_used_mem`: The memory usage of the server that had generated the RDB file at the time of the file's creation\n- `loading_loaded_bytes`: Number of bytes already loaded\n- `loading_loaded_perc`: Same value expressed as a percentage\n- `loading_eta_seconds`: ETA in seconds for the load to be complete\n\nHere is the meaning of all fields in the **stats** section:\n\n- `total_connections_received`: Total number of connections accepted by the server\n- `total_commands_processed`: Total number of commands processed by the server\n- `instantaneous_ops_per_sec`: Number of commands processed per second\n- `total_net_input_bytes`: The total number of bytes read from the network\n- `total_net_output_bytes`: The total number of bytes written to the network\n- `total_net_repl_input_bytes`: The total number of bytes read from the network for replication purposes\n- `total_net_repl_output_bytes`: The total number of bytes written to the network for replication purposes\n- `instantaneous_input_kbps`: The network's read rate per second in KB/sec\n- `instantaneous_output_kbps`: The network's write rate per second in KB/sec\n- `instantaneous_input_repl_kbps`: The network's read rate per second in KB/sec for replication purposes\n- `instantaneous_output_repl_kbps`: The network's write rate per second in KB/sec for replication purposes\n- `rejected_connections`: Number of connections rejected because of `maxclients` limit\n- `sync_full`: The number of full resyncs with replicas\n- `sync_partial_ok`: The number of accepted partial resync requests\n- `sync_partial_err`: The number of denied partial resync requests\n- `expired_keys`: Total number of key expiration events\n- `expired_stale_perc`: The percentage of keys probably expired\n- `expired_time_cap_reached_count`: The count of times that active expiry cycles have stopped early\n- `expire_cycle_cpu_milliseconds`: The cumulative amount of time spend on active expiry cycles\n- `evicted_keys`: Number of evicted keys due to `maxmemory` limit\n- `evicted_clients`: Number of evicted clients due to `maxmemory-clients` limit. Added in Redis 7.0.\n- `total_eviction_exceeded_time`: Total time `used_memory` was greater than `maxmemory` since server startup, in milliseconds\n- `current_eviction_exceeded_time`: The time passed since `used_memory` last rose above `maxmemory`, in milliseconds\n- `keyspace_hits`: Number of successful lookup of keys in the main dictionary\n- `keyspace_misses`: Number of failed lookup of keys in the main dictionary\n- `pubsub_channels`: Global number of pub/sub channels with client subscriptions\n- `pubsub_patterns`: Global number of pub/sub pattern with client subscriptions\n- `pubsubshard_channels`: Global number of pub/sub shard channels with client subscriptions. Added in Redis 7.0.3\n- `latest_fork_usec`: Duration of the latest fork operation in microseconds\n- `total_forks`: Total number of fork operations since the server start\n- `migrate_cached_sockets`: The number of sockets open for [`MIGRATE`](../migrate) purposes\n- `slave_expires_tracked_keys`: The number of keys tracked for expiry purposes (applicable only to writable replicas)\n- `active_defrag_hits`: Number of value reallocations performed by active the defragmentation process\n- `active_defrag_misses`: Number of aborted value reallocations started by the active defragmentation process\n- `active_defrag_key_hits`: Number of keys that were actively defragmented\n- `active_defrag_key_misses`: Number of keys that were skipped by the active defragmentation process\n- `total_active_defrag_time`: Total time memory fragmentation was over the limit, in milliseconds\n- `current_active_defrag_time`: The time passed since memory fragmentation last was over the limit, in milliseconds\n- `tracking_total_keys`: Number of keys being tracked by the server\n- `tracking_total_items`: Number of items, that is the sum of clients number for each key, that are being tracked\n- `tracking_total_prefixes`: Number of tracked prefixes in server's prefix table (only applicable for broadcast mode)\n- `unexpected_error_replies`: Number of unexpected error replies, that are types of errors from an AOF load or replication\n- `total_error_replies`: Total number of issued error replies, that is the sum of rejected commands (errors prior command execution) and failed commands (errors within the command execution)\n- `dump_payload_sanitizations`: Total number of dump payload deep integrity validations (see `sanitize-dump-payload` config).\n- `total_reads_processed`: Total number of read events processed\n- `total_writes_processed`: Total number of write events processed\n- `io_threaded_reads_processed`: Number of read events processed by the main and I/O threads\n- `io_threaded_writes_processed`: Number of write events processed by the main and I/O threads\n- `acl_access_denied_auth`: Number of authentication failures\n- `acl_access_denied_cmd`: Number of commands rejected because of access denied to the command\n- `acl_access_denied_key`: Number of commands rejected because of access denied to a key\n- `acl_access_denied_channel`: Number of commands rejected because of access denied to a channel\n\nHere is the meaning of all fields in the **replication** section:\n\n- `role`: Value is \"master\" if the instance is replica of no one, or \"slave\" if the instance is a replica of some master instance. Note that a replica can be master of another replica (chained replication).\n- `master_failover_state`: The state of an ongoing failover, if any.\n- `master_replid`: The replication ID of the Redis server.\n- `master_replid2`: The secondary replication ID, used for PSYNC after a failover.\n- `master_repl_offset`: The server's current replication offset\n- `second_repl_offset`: The offset up to which replication IDs are accepted\n- `repl_backlog_active`: Flag indicating replication backlog is active\n- `repl_backlog_size`: Total size in bytes of the replication backlog buffer\n- `repl_backlog_first_byte_offset`: The master offset of the replication backlog buffer\n- `repl_backlog_histlen`: Size in bytes of the data in the replication backlog buffer\n\nIf the instance is a replica, these additional fields are provided:\n\n- `master_host`: Host or IP address of the master\n- `master_port`: Master listening TCP port\n- `master_link_status`: Status of the link (up/down)\n- `master_last_io_seconds_ago`: Number of seconds since the last interaction with master\n- `master_sync_in_progress`: Indicate the master is syncing to the replica\n- `slave_read_repl_offset`: The read replication offset of the replica instance.\n- `slave_repl_offset`: The replication offset of the replica instance\n- `slave_priority`: The priority of the instance as a candidate for failover\n- `slave_read_only`: Flag indicating if the replica is read-only\n- `replica_announced`: Flag indicating if the replica is announced by Sentinel.\n\nIf a SYNC operation is on-going, these additional fields are provided:\n\n- `master_sync_total_bytes`: Total number of bytes that need to be transferred. this may be 0 when the size is unknown (for example, when the `repl-diskless-sync` configuration directive is used)\n- `master_sync_read_bytes`: Number of bytes already transferred\n- `master_sync_left_bytes`: Number of bytes left before syncing is complete (may be negative when `master_sync_total_bytes` is 0)\n- `master_sync_perc`: The percentage `master_sync_read_bytes` from `master_sync_total_bytes`, or an approximation that uses `loading_rdb_used_mem` when `master_sync_total_bytes` is 0\n- `master_sync_last_io_seconds_ago`: Number of seconds since last transfer I/O during a SYNC operation\n\nIf the link between master and replica is down, an additional field is provided:\n\n- `master_link_down_since_seconds`: Number of seconds since the link is down\n\nThe following field is always provided:\n\n- `connected_slaves`: Number of connected replicas\n\nIf the server is configured with the `min-slaves-to-write` (or starting with Redis 5 with the `min-replicas-to-write`) directive, an additional field is provided:\n\n- `min_slaves_good_slaves`: Number of replicas currently considered good\n\nFor each replica, the following line is added:\n\n- `slaveXXX`: id, IP address, port, state, offset, lag\n\nHere is the meaning of all fields in the **cpu** section:\n\n- `used_cpu_sys`: System CPU consumed by the Redis server, which is the sum of system CPU consumed by all threads of the server process (main thread and background threads)\n- `used_cpu_user`: User CPU consumed by the Redis server, which is the sum of user CPU consumed by all threads of the server process (main thread and background threads)\n- `used_cpu_sys_children`: System CPU consumed by the background processes\n- `used_cpu_user_children`: User CPU consumed by the background processes\n- `used_cpu_sys_main_thread`: System CPU consumed by the Redis server main thread\n- `used_cpu_user_main_thread`: User CPU consumed by the Redis server main thread\n\nThe **commandstats** section provides statistics based on the command type, including the number of calls that reached command execution (not rejected), the total CPU time consumed by these commands, the average CPU consumed per command execution, the number of rejected calls (errors prior command execution), and the number of failed calls (errors within the command execution).\n\nFor each command type, the following line is added:\n\n- `cmdstat_XXX`: `calls=XXX,usec=XXX,usec_per_call=XXX,rejected_calls=XXX,failed_calls=XXX`\n\nThe **latencystats** section provides latency percentile distribution statistics based on the command type.\n\nBy default, the exported latency percentiles are the p50, p99, and p999. If you need to change the exported percentiles, use `CONFIG SET latency-tracking-info-percentiles \"50.0 99.0 99.9\"`.\n\nThis section requires the extended latency monitoring feature to be enabled (by default it's enabled). If you need to enable it, use `CONFIG SET latency-tracking yes`.\n\nFor each command type, the following line is added:\n\n- `latency_percentiles_usec_XXX: p<percentile 1>=<percentile 1 value>,p<percentile 2>=<percentile 2 value>,...`\n\nThe **errorstats** section enables keeping track of the different errors that occurred within Redis, based upon the reply error prefix ( The first word after the \"-\", up to the first space. Example: `ERR` ).\n\nFor each error type, the following line is added:\n\n- `errorstat_XXX`: `count=XXX`\n\nThe **sentinel** section is only available in Redis Sentinel instances. It consists of the following fields:\n\n- `sentinel_masters`: Number of Redis masters monitored by this Sentinel instance\n- `sentinel_tilt`: A value of 1 means this sentinel is in TILT mode\n- `sentinel_tilt_since_seconds`: Duration in seconds of current TILT, or -1 if not TILTed. Added in Redis 7.0.0\n- `sentinel_running_scripts`: The number of scripts this Sentinel is currently executing\n- `sentinel_scripts_queue_length`: The length of the queue of user scripts that are pending execution\n- `sentinel_simulate_failure_flags`: Flags for the `SENTINEL SIMULATE-FAILURE` command\n\nThe **cluster** section currently only contains a unique field:\n\n- `cluster_enabled`: Indicate Redis cluster is enabled\n\nThe **modules** section contains additional information about loaded modules if the modules provide it. The field part of properties lines in this section is always prefixed with the module's name.\n\nThe **keyspace** section provides statistics on the main dictionary of each database. The statistics are the number of keys, and the number of keys with an expiration.\n\nFor each database, the following line is added:\n\n- `dbXXX`: `keys=XXX,expires=XXX`\n\n**A note about the word slave used in this man page**: Starting with Redis 5, if not for backward compatibility, the Redis project no longer uses the word slave. Unfortunately in this command the word slave is part of the protocol, so we'll be able to remove such occurrences only when this API will be naturally deprecated.\n\n**Modules generated sections**: Starting with Redis 6, modules can inject their info into the `INFO` command, these are excluded by default even when the `all` argument is provided (it will include a list of loaded modules but not their generated info fields). To get these you must use either the `modules` argument or `everything`.,\n\n## History\n\n- Starting with Redis version 7.0.0: Added support for taking multiple section arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/info/](https://redis.io/commands/info/)"
- name: json.arrappend
  id: json.arrappend/index
  summary: is key to modify
  description: "# JSON.ARRAPPEND\n\n    JSON.ARRAPPEND\n\nSyntax\n\n``` command-syntax\nJSON.ARRAPPEND key [path] value [value ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nAppend the `json` values into the array at `path` after the last element in it\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`value`\n\nis one or more values to append to one or more arrays.\n\nAbout using strings with JSON commands\n\nTo specify a string as an array value to append, wrap the quoted string with an additional set of single quotes. Example: `'\"silver\"'`. For more detailed use, see [Examples](#examples).\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return value\n\n`JSON.ARRAPEND` returns an [array](https://redis.io/docs/reference/protocol-spec/#resp-arrays) of integer replies for each path, the array's new size, or `nil`, if the matching JSON value is not an array. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Add a new color to a list of product colors**\n\nCreate a document for noise-cancelling headphones in black and silver colors.\n\n``` chroma\n127.0.0.1:6379> JSON.SET item:1 $ '{\"name\":\"Noise-cancelling Bluetooth headphones\",\"description\":\"Wireless Bluetooth headphones with noise-cancelling technology\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":99.98,\"stock\":25,\"colors\":[\"black\",\"silver\"]}'\nOK\n```\n\nAdd color `blue` to the end of the `colors` array. `JSON.ARRAPEND` returns the array's new size.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRAPPEND item:1 $.colors '\"blue\"'\n1) (integer) 3\n```\n\nReturn the new length of the `colors` array.\n\n``` chroma\n127.0.0.1:6379> JSON.GET item:1\n\"{\\\"name\\\":\\\"Noise-cancelling Bluetooth headphones\\\",\\\"description\\\":\\\"Wireless Bluetooth headphones with noise-cancelling technology\\\",\\\"connection\\\":{\\\"wireless\\\":true,\\\"type\\\":\\\"Bluetooth\\\"},\\\"price\\\":99.98,\\\"stock\\\":25,\\\"colors\\\":[\\\"black\\\",\\\"silver\\\",\\\"blue\\\"]}\"\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.arrappend/](https://redis.io/commands/json.arrappend/)"
- name: json.arrindex
  id: json.arrindex/index
  summary: is key to parse
  description: "# JSON.ARRINDEX\n\n    JSON.ARRINDEX\n\nSyntax\n\n``` command-syntax\nJSON.ARRINDEX key path value [start [stop]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nSearch for the first occurrence of a JSON value in an array\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n`path`\n\nis JSONPath to specify.\n\n`value`\n\nis value to find its index in one or more arrays.\n\nAbout using strings with JSON commands\n\nTo specify a string as an array value to index, wrap the quoted string with an additional set of single quotes. Example: `'\"silver\"'`. For more detailed use, see [Examples](#examples).\n\n## Optional arguments\n\n`start`\n\nis inclusive start value to specify in a slice of the array to search. Default is `0`.\n\n`stop`\n\nis exclusive stop value to specify in a slice of the array to search, including the last element. Default is `0`. Negative values are interpreted as starting from the end.\n\nAbout out-of-range indexes\n\nOut-of-range indexes round to the array's start and end. An inverse index range (such as the range from 1 to 0) returns unfound or `-1`.\n\n## Return value\n\n`JSON.ARRINDEX` returns an [array](https://redis.io/docs/reference/protocol-spec/#resp-arrays) of integer replies for each path, the first position in the array of each JSON value that matches the path, `-1` if unfound in the array, or `nil`, if the matching JSON value is not an array. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Find the specific place of a color in a list of product colors**\n\nCreate a document for noise-cancelling headphones in black and silver colors.\n\n``` chroma\n127.0.0.1:6379> JSON.SET item:1 $ '{\"name\":\"Noise-cancelling Bluetooth headphones\",\"description\":\"Wireless Bluetooth headphones with noise-cancelling technology\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":99.98,\"stock\":25,\"colors\":[\"black\",\"silver\"]}'\nOK\n```\n\nAdd color `blue` to the end of the `colors` array. `JSON.ARRAPEND` returns the array's new size.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRAPPEND item:1 $.colors '\"blue\"'\n1) (integer) 3\n```\n\nReturn the new length of the `colors` array.\n\n``` chroma\nJSON.GET item:1\n\"{\\\"name\\\":\\\"Noise-cancelling Bluetooth headphones\\\",\\\"description\\\":\\\"Wireless Bluetooth headphones with noise-cancelling technology\\\",\\\"connection\\\":{\\\"wireless\\\":true,\\\"type\\\":\\\"Bluetooth\\\"},\\\"price\\\":99.98,\\\"stock\\\":25,\\\"colors\\\":[\\\"black\\\",\\\"silver\\\",\\\"blue\\\"]}\"\n```\n\nGet the list of colors for the product.\n\n``` chroma\n127.0.0.1:6379> JSON.GET item:1 '$.colors[*]'\n\"[\\\"black\\\",\\\"silver\\\",\\\"blue\\\"]\"\n```\n\nInsert two more colors after the second color. You now have five colors.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRINSERT item:1 $.colors 2 '\"yellow\"' '\"gold\"'\n1) (integer) 5\n```\n\nGet the updated list of colors.\n\n``` chroma\n127.0.0.1:6379> JSON.GET item:1 $.colors\n\"[[\\\"black\\\",\\\"silver\\\",\\\"yellow\\\",\\\"gold\\\",\\\"blue\\\"]]\"\n```\n\nFind the place where color `silver` is located.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRINDEX item:1 $..colors '\"silver\"'\n1) (integer) 1\n```\n\n## See also\n\n[`JSON.ARRAPPEND`](../json.arrappend) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.arrindex/](https://redis.io/commands/json.arrindex/)"
- name: json.arrinsert
  id: json.arrinsert/index
  summary: is key to modify
  description: "# JSON.ARRINSERT\n\n    JSON.ARRINSERT\n\nSyntax\n\n``` command-syntax\nJSON.ARRINSERT key path index value [value ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nInsert the `json` values into the array at `path` before the `index` (shifts to the right)\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`value`\n\nis one or more values to insert in one or more arrays.\n\nAbout using strings with JSON commands\n\nTo specify a string as an array value to insert, wrap the quoted string with an additional set of single quotes. Example: `'\"silver\"'`. For more detailed use, see [Examples](#examples).\n\n`index`\n\nis position in the array where you want to insert a value. The index must be in the array's range. Inserting at `index` 0 prepends to the array. Negative index values start from the end of the array.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return value\n\n`JSON.ARRINSERT` returns an [array](https://redis.io/docs/reference/protocol-spec/#resp-arrays) of integer replies for each path, the array's new size, or `nil`, if the matching JSON value is not an array. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Add new colors to a specific place in a list of product colors**\n\nCreate a document for noise-cancelling headphones in black and silver colors.\n\n``` chroma\n127.0.0.1:6379> JSON.SET item:1 $ '{\"name\":\"Noise-cancelling Bluetooth headphones\",\"description\":\"Wireless Bluetooth headphones with noise-cancelling technology\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":99.98,\"stock\":25,\"colors\":[\"black\",\"silver\"]}'\nOK\n```\n\nAdd color `blue` to the end of the `colors` array. `JSON.ARRAPEND` returns the array's new size.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRAPPEND item:1 $.colors '\"blue\"'\n1) (integer) 3\n```\n\nReturn the new length of the `colors` array.\n\n``` chroma\nJSON.GET item:1\n\"{\\\"name\\\":\\\"Noise-cancelling Bluetooth headphones\\\",\\\"description\\\":\\\"Wireless Bluetooth headphones with noise-cancelling technology\\\",\\\"connection\\\":{\\\"wireless\\\":true,\\\"type\\\":\\\"Bluetooth\\\"},\\\"price\\\":99.98,\\\"stock\\\":25,\\\"colors\\\":[\\\"black\\\",\\\"silver\\\",\\\"blue\\\"]}\"\n```\n\nGet the list of colors for the product.\n\n``` chroma\n127.0.0.1:6379> JSON.GET item:1 '$.colors[*]'\n\"[\\\"black\\\",\\\"silver\\\",\\\"blue\\\"]\"\n```\n\nInsert two more colors after the second color. You now have five colors.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRINSERT item:1 $.colors 2 '\"yellow\"' '\"gold\"'\n1) (integer) 5\n```\n\nGet the updated list of colors.\n\n``` chroma\n127.0.0.1:6379> JSON.GET item:1 $.colors\n\"[[\\\"black\\\",\\\"silver\\\",\\\"yellow\\\",\\\"gold\\\",\\\"blue\\\"]]\"\n```\n\n## See also\n\n[`JSON.ARRAPPEND`](../json.arrappend) \\| [`JSON.ARRINDEX`](../json.arrindex)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.arrinsert/](https://redis.io/commands/json.arrinsert/)"
- name: json.arrlen
  id: json.arrlen/index
  summary: is key to parse
  description: "# JSON.ARRLEN\n\n    JSON.ARRLEN\n\nSyntax\n\n``` command-syntax\nJSON.ARRLEN key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) where path is evaluated to a single value, O(N) where path is evaluated to multiple values, where N is the size of the key\n\nReport the length of the JSON array at `path` in `key`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`, if not provided. Returns null if the `key` or `path` do not exist.\n\n## Return\n\n`JSON.ARRLEN` returns an [array](https://redis.io/docs/reference/protocol-spec/#resp-arrays) of integer replies, an integer for each matching value, each is the array's length, or `nil`, if the matching value is not an array. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Get lengths of JSON arrays in a document**\n\nCreate a document for wireless earbuds.\n\n``` chroma\n127.0.0.1:6379> JSON.SET item:2 $ '{\"name\":\"Wireless earbuds\",\"description\":\"Wireless Bluetooth in-ear headphones\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":64.99,\"stock\":17,\"colors\":[\"black\",\"white\"], \"max_level\":[80, 100, 120]}'\nOK\n```\n\nFind lengths of arrays in all objects of the document.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRLEN item:2 '$.[*]'\n1) (nil)\n2) (nil)\n3) (nil)\n4) (nil)\n5) (nil)\n6) (integer) 2\n7) (integer) 3\n```\n\nReturn the length of the `max_level` array.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRLEN item:2 '$..max_level'\n1) (integer) 3\n```\n\nGet all the maximum level values.\n\n``` chroma\n127.0.0.1:6379> JSON.GET item:2 '$..max_level'\n\"[[80,100,120]]\"\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.arrlen/](https://redis.io/commands/json.arrlen/)"
- name: json.arrpop
  id: json.arrpop/index
  summary: is key to modify
  description: "# JSON.ARRPOP\n\n    JSON.ARRPOP\n\nSyntax\n\n``` command-syntax\nJSON.ARRPOP key [path [index]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the array and the specified index is not the last element, O(1) when path is evaluated to a single value and the specified index is the last element, or O(N) when path is evaluated to multiple values, where N is the size of the key\n\nRemove and return an element from the index in the array\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`index`\n\nis position in the array to start popping from. Default is `-1`, meaning the last element. Out-of-range indexes round to their respective array ends. Popping an empty array returns null.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return\n\n`JSON.ARRPOP` returns an [array](https://redis.io/docs/reference/protocol-spec/#resp-arrays) of bulk string replies for each path, each reply is the popped JSON value, or `nil`, if the matching JSON value is not an array. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Pop a value from an index and insert a new value**\n\nCreate two headphone products with maximum sound levels.\n\n``` chroma\n127.0.0.1:6379> JSON.SET key $ '[{\"name\":\"Healthy headphones\",\"description\":\"Wireless Bluetooth headphones with noise-cancelling technology\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":99.98,\"stock\":25,\"colors\":[\"black\",\"silver\"],\"max_level\":[60,70,80]},{\"name\":\"Noisy headphones\",\"description\":\"Wireless Bluetooth headphones with noise-cancelling technology\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":99.98,\"stock\":25,\"colors\":[\"black\",\"silver\"],\"max_level\":[80,90,100,120]}]'\nOK\n```\n\nGet all maximum values for the second product.\n\n``` chroma\n127.0.0.1:6379> JSON.GET key $.[1].max_level\n\"[[80,90,100,120]]\"\n```\n\nUpdate the `max_level` field of the product: remove an unavailable value and add a newly available value.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRPOP key $.[1].max_level 0\n1) \"80\"\n```\n\nGet the updated array.\n\n``` chroma\n127.0.0.1:6379> JSON.GET key $.[1].max_level\n\"[[90,100,120]]\"\n```\n\nNow insert a new lowest value.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRINSERT key $.[1].max_level 0 85\n1) (integer) 4\n```\n\nGet the updated array.\n\n``` chroma\n127.0.0.1:6379> JSON.GET key $.[1].max_level\n\"[[85,90,100,120]]\"\n```\n\n## See also\n\n[`JSON.ARRAPPEND`](../json.arrappend) \\| [`JSON.ARRINDEX`](../json.arrindex)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.arrpop/](https://redis.io/commands/json.arrpop/)"
- name: json.arrtrim
  id: json.arrtrim/index
  summary: is key to modify
  description: "# JSON.ARRTRIM\n\n    JSON.ARRTRIM\n\nSyntax\n\n``` command-syntax\nJSON.ARRTRIM key path start stop\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nTrim an array so that it contains only the specified inclusive range of elements\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n`start`\n\nis index of the first element to keep (previous elements are trimmed). Default is 0.\n\n`stop`\n\nis the index of the last element to keep (following elements are trimmed), including the last element. Default is 0. Negative values are interpreted as starting from the end.\n\nAbout out-of-range indexes\n\nJSON.ARRTRIM is extremely forgiving, and using it with out-of-range indexes does not produce an error. Note a few differences between how RedisJSON v2.0 and legacy versions handle out-of-range indexes.\n\nBehavior as of RedisJSON v2.0:\n\n- If `start` is larger than the array's size or `start` \\> `stop`, returns 0 and an empty array.\n- If `start` is \\< 0, then start from the end of the array.\n- If `stop` is larger than the end of the array, it is treated like the last element.\n\n## Return\n\nJSON.ARRTRIM returns an array of integer replies for each path, the array's new size, or `nil`, if the matching JSON value is not an array. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Trim an array to a specific set of values**\n\nCreate two headphone products with maximum sound levels.\n\n``` chroma\n127.0.0.1:6379> JSON.GET key $\n\"[[{\\\"name\\\":\\\"Healthy headphones\\\",\\\"description\\\":\\\"Wireless Bluetooth headphones with noise-cancelling technology\\\",\\\"connection\\\":{\\\"wireless\\\":true,\\\"type\\\":\\\"Bluetooth\\\"},\\\"price\\\":99.98,\\\"stock\\\":25,\\\"colors\\\":[\\\"black\\\",\\\"silver\\\"],\\\"max_level\\\":[60,70,80]},{\\\"name\\\":\\\"Noisy headphones\\\",\\\"description\\\":\\\"Wireless Bluetooth headphones with noise-cancelling technology\\\",\\\"connection\\\":{\\\"wireless\\\":true,\\\"type\\\":\\\"Bluetooth\\\"},\\\"price\\\":99.98,\\\"stock\\\":25,\\\"colors\\\":[\\\"black\\\",\\\"silver\\\"],\\\"max_level\\\":[85,90,100,120]}]]\"\nOK\n```\n\nAdd new sound level values to the second product.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRAPPEND key $.[1].max_level 140 160 180 200 220 240 260 280\n1) (integer) 12\n```\n\nGet the updated array.\n\n``` chroma\n127.0.0.1:6379> JSON.GET key $.[1].max_level\n\"[[85,90,100,120,140,160,180,200,220,240,260,280]]\"\n```\n\nKeep only the values between the fifth and the ninth element, inclusive of that last element.\n\n``` chroma\n127.0.0.1:6379> JSON.ARRTRIM key $.[1].max_level 4 8\n1) (integer) 5\n```\n\nGet the updated array.\n\n``` chroma\n127.0.0.1:6379> JSON.GET key $.[1].max_level\n\"[[140,160,180,200,220]]\"\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.arrtrim/](https://redis.io/commands/json.arrtrim/)"
- name: json.clear
  id: json.clear/index
  summary: is key to parse
  description: "# JSON.CLEAR\n\n    JSON.CLEAR\n\nSyntax\n\n``` command-syntax\nJSON.CLEAR key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 2.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the values, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nClear container values (arrays/objects) and set numeric values to `0`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. Nonexisting paths are ignored.\n\n## Return\n\nJSON.CLEAR returns an integer reply specified as the number of values cleared. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\nNote\n\nAlready cleared values are ignored for empty containers and zero numbers.\n\n## Examples\n\n**Clear container values and set numeric values to `0`**\n\nCreate a JSON document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"obj\":{\"a\":1, \"b\":2}, \"arr\":[1,2,3], \"str\": \"foo\", \"bool\": true, \"int\": 42, \"float\": 3.14}'\nOK\n```\n\nClear all container values. This returns the number of objects with cleared values.\n\n``` chroma\n127.0.0.1:6379> JSON.CLEAR doc $.*\n(integer) 4\n```\n\nGet the updated document. Note that numeric values have been set to `0`.\n\n``` chroma\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"obj\\\":{},\\\"arr\\\":[],\\\"str\\\":\\\"foo\\\",\\\"bool\\\":true,\\\"int\\\":0,\\\"float\\\":0}]\"\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.clear/](https://redis.io/commands/json.clear/)"
- name: json.debug
  id: json.debug/index
  summary: This is a container command for debugging related tasks
  description: "# JSON.DEBUG\n\n    JSON.DEBUG\n\nSyntax\n\n``` command-syntax\nJSON.DEBUG\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nN/A\n\nThis is a container command for debugging related tasks.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.debug/](https://redis.io/commands/json.debug/)"
- name: json.debug memory
  id: json.debug-memory/index
  summary: is key to parse
  description: "# JSON.DEBUG\n\n    JSON.DEBUG MEMORY\n\nSyntax\n\n``` command-syntax\nJSON.DEBUG MEMORY key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value, where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReport a value's memory usage in bytes\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return\n\nJSON.DEBUG MEMORY returns an integer reply specified as the value size in bytes. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Report a value's memory usage in bytes**\n\nCreate a JSON document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET item:2 $ '{\"name\":\"Wireless earbuds\",\"description\":\"Wireless Bluetooth in-ear headphones\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":64.99,\"stock\":17,\"colors\":[\"black\",\"white\"], \"max_level\":[80, 100, 120]}'\nOK\n```\n\nGet the values' memory usage in bytes.\n\n``` chroma\n127.0.0.1:6379> JSON.DEBUG MEMORY item:2\n(integer) 253\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.ARRLEN`](../json.arrlen)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.debug-memory/](https://redis.io/commands/json.debug-memory/)"
- name: json.del
  id: json.del/index
  summary: is key to modify
  description: "# JSON.DEL\n\n    JSON.DEL\n\nSyntax\n\n``` command-syntax\nJSON.DEL key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the deleted value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nDelete a value\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. Nonexisting paths are ignored.\n\nNote\n\nDeleting an object's root is equivalent to deleting the key from Redis.\n\n## Return\n\nJSON.DEL returns an integer reply specified as the number of paths deleted (0 or more). For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Delete a value**\n\nCreate a JSON document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\": 1, \"nested\": {\"a\": 2, \"b\": 3}}'\nOK\n```\n\nDelete specified values.\n\n``` chroma\n127.0.0.1:6379> JSON.DEL doc $..a\n(integer) 2\n```\n\nGet the updated document.\n\n``` chroma\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"nested\\\":{\\\"b\\\":3}}]\"\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.ARRLEN`](../json.arrlen)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.del/](https://redis.io/commands/json.del/)"
- name: json.forget
  id: json.forget/index
  summary: See JSON.DEL
  description: "# JSON.FORGET\n\n    JSON.FORGET\n\nSyntax\n\n``` command-syntax\nJSON.FORGET key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the deleted value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nSee [`JSON.DEL`](../json.del).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.forget/](https://redis.io/commands/json.forget/)"
- name: json.get
  id: json.get/index
  summary: is key to parse
  description: "# JSON.GET\n\n    JSON.GET\n\nSyntax\n\n``` command-syntax\nJSON.GET key [INDENT indent] [NEWLINE newline] [SPACE space] [path\n  [path ...]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReturn the value at `path` in JSON serialized form\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. JSON.GET accepts multiple `path` arguments.\n\nNote\n\nWhen using a single JSONPath, the root of the matching values is a JSON string with a top-level **array** of serialized JSON value. In contrast, a legacy path returns a single value.\n\nWhen using multiple JSONPath arguments, the root of the matching values is a JSON string with a top-level **object**, with each object value being a top-level array of serialized JSON value. In contrast, if all paths are legacy paths, each object value is a single serialized JSON value. If there are multiple paths that include both legacy path and JSONPath, the returned value conforms to the JSONPath version (an array of values).\n\n`INDENT`\n\nsets the indentation string for nested levels.\n\n`NEWLINE`\n\nsets the string that's printed at the end of each line.\n\n`SPACE`\n\nsets the string that's put between a key and a value.\n\nNote\n\nProduce pretty-formatted JSON with `redis-cli` by following this example:\n\n``` chroma\n~/$ redis-cli --raw\n127.0.0.1:6379> JSON.GET myjsonkey INDENT \"\\t\" NEWLINE \"\\n\" SPACE \" \" path.to.value[1]\n```\n\n## Return\n\nJSON.GET returns a bulk string representing a JSON array of string replies. Each string is the JSON serialization of each JSON value that matches a path. Using multiple paths, JSON.GET returns a bulk string representing a JSON object with string values. Each string value is an array of the JSON serialization of each JSON value that matches a path. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Return the value at `path` in JSON serialized form**\n\nCreate a JSON document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":2, \"b\": 3, \"nested\": {\"a\": 4, \"b\": null}}'\nOK\n```\n\nWith a single JSONPath (JSON array bulk string):\n\n``` chroma\n127.0.0.1:6379>  JSON.GET doc $..b\n\"[3,null]\"\n```\n\nUsing multiple paths with at least one JSONPath returns a JSON string with a top-level object with an array of JSON values per path:\n\n``` chroma\n127.0.0.1:6379> JSON.GET doc ..a $..b\n\"{\\\"$..b\\\":[3,null],\\\"..a\\\":[2,4]}\"\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.MGET`](../json.mget)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.get/](https://redis.io/commands/json.get/)"
- name: json.mget
  id: json.mget/index
  summary: is key to parse
  description: "# JSON.MGET\n\n    JSON.MGET\n\nSyntax\n\n``` command-syntax\nJSON.MGET key [key ...] path\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(M\\*N) when path is evaluated to a single value where M is the number of keys and N is the size of the value, O(N1+N2+...+Nm) when path is evaluated to multiple values where m is the number of keys and Ni is the size of the i-th key\n\nReturn the values at `path` from multiple `key` arguments\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse. Returns `null` for nonexistent keys.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. Returns `null` for nonexistent paths.\n\n## Return\n\nJSON.MGET returns an array of bulk string replies specified as the JSON serialization of the value at each key's path. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Return the values at `path` from multiple `key` arguments**\n\nCreate two JSON documents.\n\n``` chroma\nredis> JSON.SET doc1 $ '{\"a\":1, \"b\": 2, \"nested\": {\"a\": 3}, \"c\": null}'\nOK\nredis> JSON.SET doc2 $ '{\"a\":4, \"b\": 5, \"nested\": {\"a\": 6}, \"c\": null}'\nOK\n```\n\nGet values from all arguments in the documents.\n\n``` chroma\nredis> JSON.MGET doc1 doc2 $..a\n1) \"[1,3]\"\n2) \"[4,6]\"\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.GET`](../json.get)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.mget/](https://redis.io/commands/json.mget/)"
- name: json.numincrby
  id: json.numincrby/index
  summary: is key to modify
  description: "# JSON.NUMINCRBY\n\n    JSON.NUMINCRBY\n\nSyntax\n\n``` command-syntax\nJSON.NUMINCRBY key path value\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nIncrement the number value stored at `path` by `number`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`path`\n\nis JSONPath to specify.\n\n`value`\n\nis number value to increment.\n\n## Return\n\nJSON.NUMINCRBY returns a bulk string reply specified as a stringified new value for each path, or `nil`, if the matching JSON value is not a number. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Increment number values**\n\nCreate a document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc . '{\"a\":\"b\",\"b\":[{\"a\":2}, {\"a\":5}, {\"a\":\"c\"}]}'\nOK\n```\n\nIncrement a value of `a` object by 2. The command fails to find a number and returns `null`.\n\n``` chroma\n127.0.0.1:6379> JSON.NUMINCRBY doc $.a 2\n\"[null]\"\n```\n\nRecursively find and increment a value of all `a` objects. The command increments numbers it finds and returns `null` for nonnumber values.\n\n``` chroma\n127.0.0.1:6379> JSON.NUMINCRBY doc $..a 2\n\"[null,4,7,null]\"\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.numincrby/](https://redis.io/commands/json.numincrby/)"
- name: json.nummultby
  id: json.nummultby/index
  summary: As of Redis version 2.0, this command is regarded as deprecated
  description: "# JSON.NUMMULTBY\n\n    JSON.NUMMULTBY (deprecated)\n\nAs of Redis version 2.0, this command is regarded as deprecated.\n\nSyntax\n\n``` command-syntax\nJSON.NUMMULTBY key path value\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nMultiply the number value stored at `path` by `number`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`value`\n\nis number value to multiply.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return\n\nJSON.NUMMULTBY returns a bulk string reply specified as a stringified new values for each path, or `nil` element if the matching JSON value is not a number. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc . '{\"a\":\"b\",\"b\":[{\"a\":2}, {\"a\":5}, {\"a\":\"c\"}]}'\nOK\n127.0.0.1:6379> JSON.NUMMULTBY doc $.a 2\n\"[null]\"\n127.0.0.1:6379> JSON.NUMMULTBY doc $..a 2\n\"[null,4,10,null]\"\n```\n\n## See also\n\n[`JSON.NUMINCRBY`](../json.numincrby) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.nummultby/](https://redis.io/commands/json.nummultby/)"
- name: json.objkeys
  id: json.objkeys/index
  summary: is key to parse
  description: "# JSON.OBJKEYS\n\n    JSON.OBJKEYS\n\nSyntax\n\n``` command-syntax\nJSON.OBJKEYS key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value, where N is the number of keys in the object, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReturn the keys in the object that's referenced by `path`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse. Returns `null` for nonexistent keys.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. Returns `null` for nonexistant path.\n\n## Return\n\nJSON.OBJKEYS returns an array of array replies for each path, an array of the key names in the object as a bulk string reply, or `nil` if the matching JSON value is not an object. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":[3], \"nested\": {\"a\": {\"b\":2, \"c\": 1}}}'\nOK\n127.0.0.1:6379> JSON.OBJKEYS doc $..a\n1) (nil)\n2) 1) \"b\"\n   2) \"c\"\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.objkeys/](https://redis.io/commands/json.objkeys/)"
- name: json.objlen
  id: json.objlen/index
  summary: is key to parse
  description: "# JSON.OBJLEN\n\n    JSON.OBJLEN\n\nSyntax\n\n``` command-syntax\nJSON.OBJLEN key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReport the number of keys in the JSON object at `path` in `key`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse. Returns `null` for nonexistent keys.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. Returns `null` for nonexistant path.\n\n## Return\n\nJSON.OBJLEN returns an array of integer replies for each path specified as the number of keys in the object or `nil`, if the matching JSON value is not an object. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":[3], \"nested\": {\"a\": {\"b\":2, \"c\": 1}}}'\nOK\n127.0.0.1:6379> JSON.OBJLEN doc $..a\n1) (nil)\n2) (integer) 2\n```\n\n## See also\n\n[`JSON.ARRINDEX`](../json.arrindex) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.objlen/](https://redis.io/commands/json.objlen/)"
- name: json.resp
  id: json.resp/index
  summary: is key to parse
  description: "# JSON.RESP\n\n    JSON.RESP\n\nSyntax\n\n``` command-syntax\nJSON.RESP key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(N) when path is evaluated to a single value, where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReturn the JSON in `key` in [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec) form\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. This command uses the following mapping from JSON to RESP:\n\n- JSON `null` maps to the bulk string reply.\n- JSON `false` and `true` values map to the simple string reply.\n- JSON number maps to the integer reply or bulk string reply, depending on type.\n- JSON string maps to the bulk string reply.\n- JSON array is represented as an array reply in which the first element is the simple string reply `[`, followed by the array's elements.\n- JSON object is represented as an array reply in which the first element is the simple string reply `{`. Each successive entry represents a key-value pair as a two-entry array reply of the bulk string reply.\n\nFor more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Return\n\nJSON.RESP returns an array reply specified as the JSON's RESP form detailed in [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Return an array of RESP details about a document**\n\nCreate a JSON document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET item:2 $ '{\"name\":\"Wireless earbuds\",\"description\":\"Wireless Bluetooth in-ear headphones\",\"connection\":{\"wireless\":true,\"type\":\"Bluetooth\"},\"price\":64.99,\"stock\":17,\"colors\":[\"black\",\"white\"], \"max_level\":[80, 100, 120]}'\nOK\n```\n\nGet all RESP details about the document.\n\n``` chroma\n127.0.0.1:6379> JSON.RESP item:2\n 1) {\n 2) \"name\"\n 3) \"Wireless earbuds\"\n 4) \"description\"\n 5) \"Wireless Bluetooth in-ear headphones\"\n 6) \"connection\"\n 7) 1) {\n    2) \"wireless\"\n    3) true\n    4) \"type\"\n    5) \"Bluetooth\"\n 8) \"price\"\n 9) \"64.989999999999995\"\n10) \"stock\"\n11) (integer) 17\n12) \"colors\"\n13) 1) [\n    2) \"black\"\n    3) \"white\"\n14) \"max_level\"\n15) 1) [\n    2) (integer) 80\n    3) (integer) 100\n    4) (integer) 120\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.ARRLEN`](../json.arrlen)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.resp/](https://redis.io/commands/json.resp/)"
- name: json.set
  id: json.set/index
  summary: is key to modify
  description: "# JSON.SET\n\n    JSON.SET\n\nSyntax\n\n``` command-syntax\nJSON.SET key path value [NX | XX]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(M+N) when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, O(M+N) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value\n\nSet the JSON value at `path` in `key`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`value`\n\nis value to set at the specified path\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. For new Redis keys the `path` must be the root. For existing keys, when the entire `path` exists, the value that it contains is replaced with the `json` value. For existing keys, when the `path` exists, except for the last element, a new child is added with the `json` value.\n\nAdds a key (with its respective value) to a JSON Object (in a RedisJSON data type key) only if it is the last child in the `path`, or it is the parent of a new child being added in the `path`. Optional arguments `NX` and `XX` modify this behavior for both new RedisJSON data type keys as well as the JSON Object keys in them.\n\n`NX`\n\nsets the key only if it does not already exist.\n\n`XX`\n\nsets the key only if it already exists.\n\n## Return value\n\nJSET.SET returns a simple string reply: `OK` if executed correctly or `nil` if the specified `NX` or `XX` conditions were not met. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Replace an existing value**\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":2}'\nOK\n127.0.0.1:6379> JSON.SET doc $.a '3'\nOK\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"a\\\":3}]\"\n```\n\n**Add a new value**\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":2}'\nOK\n127.0.0.1:6379> JSON.SET doc $.b '8'\nOK\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"a\\\":2,\\\"b\\\":8}]\"\n```\n\n**Update multi-paths**\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"f1\": {\"a\":1}, \"f2\":{\"a\":2}}'\nOK\n127.0.0.1:6379> JSON.SET doc $..a 3\nOK\n127.0.0.1:6379> JSON.GET doc\n\"{\\\"f1\\\":{\\\"a\\\":3},\\\"f2\\\":{\\\"a\\\":3}}\"\n```\n\n## See also\n\n[`JSON.GET`](../json.get) \\| [`JSON.MGET`](../json.mget)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.set/](https://redis.io/commands/json.set/)"
- name: json.strappend
  id: json.strappend/index
  summary: is key to modify
  description: "# JSON.STRAPPEND\n\n    JSON.STRAPPEND\n\nSyntax\n\n``` command-syntax\nJSON.STRAPPEND key [path] value\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nAppend the `json-string` values to the string at `path`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n`value`\n\nis value to append to one or more strings.\n\nAbout using strings with JSON commands\n\nTo specify a string as an array value to append, wrap the quoted string with an additional set of single quotes. Example: `'\"silver\"'`. For more detailed use, see [Examples](#examples).\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return value\n\nJSON.STRAPPEND returns an array of integer replies for each path, the string's new length, or `nil`, if the matching JSON value is not a string. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":\"foo\", \"nested\": {\"a\": \"hello\"}, \"nested2\": {\"a\": 31}}'\nOK\n127.0.0.1:6379> JSON.STRAPPEND doc $..a '\"baz\"'\n1) (integer) 6\n2) (integer) 8\n3) (nil)\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"a\\\":\\\"foobaz\\\",\\\"nested\\\":{\\\"a\\\":\\\"hellobaz\\\"},\\\"nested2\\\":{\\\"a\\\":31}}]\"\n```\n\n## See also\n\n`JSON.ARRAPEND` \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.strappend/](https://redis.io/commands/json.strappend/)"
- name: json.strlen
  id: json.strlen/index
  summary: is key to parse
  description: "# JSON.STRLEN\n\n    JSON.STRLEN\n\nSyntax\n\n``` command-syntax\nJSON.STRLEN key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReport the length of the JSON String at `path` in `key`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`, if not provided. Returns null if the `key` or `path` do not exist.\n\n## Return\n\nJSON.STRLEN returns by recursive descent an array of integer replies for each path, the array's length, or `nil`, if the matching JSON value is not a string. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":\"foo\", \"nested\": {\"a\": \"hello\"}, \"nested2\": {\"a\": 31}}'\nOK\n127.0.0.1:6379> JSON.STRLEN doc $..a\n1) (integer) 3\n2) (integer) 5\n3) (nil)\n```\n\n## See also\n\n[`JSON.ARRLEN`](../json.arrlen) \\| [`JSON.ARRINSERT`](../json.arrinsert)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.strlen/](https://redis.io/commands/json.strlen/)"
- name: json.toggle
  id: json.toggle/index
  summary: is key to modify
  description: "# JSON.TOGGLE\n\n    JSON.TOGGLE\n\nSyntax\n\n``` command-syntax\nJSON.TOGGLE key path\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 2.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nToggle a Boolean value stored at `path`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to modify.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`.\n\n## Return\n\nJSON.TOGGLE returns an array of integer replies for each path, the new value (`0` if `false` or `1` if `true`), or `nil` for JSON values matching the path that are not Boolean. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n**Toogle a Boolean value stored at `path`**\n\nCreate a JSON document.\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"bool\": true}'\nOK\n```\n\nToggle the Boolean value.\n\n``` chroma\n127.0.0.1:6379> JSON.TOGGLE doc $.bool\n1) (integer) 0\n```\n\nGet the updated document.\n\n``` chroma\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"bool\\\":false}]\"\n```\n\nToggle the Boolean value.\n\n``` chroma\n127.0.0.1:6379> JSON.TOGGLE doc $.bool\n1) (integer) 1\n```\n\nGet the updated document.\n\n``` chroma\n127.0.0.1:6379> JSON.GET doc $\n\"[{\\\"bool\\\":true}]\"\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.GET`](../json.get)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.toggle/](https://redis.io/commands/json.toggle/)"
- name: json.type
  id: json.type/index
  summary: is key to parse
  description: "# JSON.TYPE\n\n    JSON.TYPE\n\nSyntax\n\n``` command-syntax\nJSON.TYPE key [path]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [JSON 1.0.0](https://redis.io/docs/stack/json)\n\nTime complexity:  \nO(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key\n\nReport the type of JSON value at `path`\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key to parse.\n\n## Optional arguments\n\n`path`\n\nis JSONPath to specify. Default is root `$`. Returns null if the `key` or `path` do not exist.\n\n## Return\n\nJSON.TYPE returns an array of string replies for each path, specified as the value's type. For more information about replies, see [Redis serialization protocol specification](https://redis.io/docs/reference/protocol-spec).\n\n## Examples\n\n``` chroma\n127.0.0.1:6379> JSON.SET doc $ '{\"a\":2, \"nested\": {\"a\": true}, \"foo\": \"bar\"}'\nOK\n127.0.0.1:6379> JSON.TYPE doc $..foo\n1) \"string\"\n127.0.0.1:6379> JSON.TYPE doc $..a\n1) \"integer\"\n2) \"boolean\"\n127.0.0.1:6379> JSON.TYPE doc $..dummy\n```\n\n## See also\n\n[`JSON.SET`](../json.set) \\| [`JSON.ARRLEN`](../json.arrlen)\n\n## Related topics\n\n- [RedisJSON](https://redis.io/docs/stack/json)\n- [Index and search JSON documents](https://redis.io/docs/stack/search/indexing_json)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/json.type/](https://redis.io/commands/json.type/)"
- name: keys
  id: keys/index
  summary: 'Time complexity: O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length'
  description: "# KEYS\n\n    KEYS\n\nSyntax\n\n``` command-syntax\nKEYS pattern\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`, `@dangerous`,\n\nReturns all keys matching `pattern`.\n\nWhile the time complexity for this operation is O(N), the constant times are fairly low. For example, Redis running on an entry level laptop can scan a 1 million key database in 40 milliseconds.\n\n**Warning**: consider `KEYS` as a command that should only be used in production environments with extreme care. It may ruin performance when it is executed against large databases. This command is intended for debugging and special operations, such as changing your keyspace layout. Don't use `KEYS` in your regular application code. If you're looking for a way to find keys in a subset of your keyspace, consider using [`SCAN`](../scan) or [sets](https://redis.io/topics/data-types#sets).\n\nSupported glob-style patterns:\n\n- `h?llo` matches `hello`, `hallo` and `hxllo`\n- `h*llo` matches `hllo` and `heeeello`\n- `h[ae]llo` matches `hello` and `hallo,` but not `hillo`\n- `h[^e]llo` matches `hallo`, `hbllo`, ... but not `hello`\n- `h[a-b]llo` matches `hallo` and `hbllo`\n\nUse `\\` to escape special characters if you want to match them verbatim.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of keys matching `pattern`.\n\n## Examples\n\n``` redis-cli\nMSET firstname Jack lastname Stuntman age 35\nKEYS *name*\nKEYS a??\nKEYS *\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/keys/](https://redis.io/commands/keys/)"
- name: lastsave
  id: lastsave/index
  summary: Return the UNIX TIME of the last DB save executed with success
  description: "# LASTSAVE\n\n    LASTSAVE\n\nSyntax\n\n``` command-syntax\nLASTSAVE\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@fast`, `@dangerous`,\n\nReturn the UNIX TIME of the last DB save executed with success. A client may check if a [`BGSAVE`](../bgsave) command succeeded reading the `LASTSAVE` value, then issuing a [`BGSAVE`](../bgsave) command and checking at regular intervals every N seconds if `LASTSAVE` changed. Redis considers the database saved successfully at startup.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): an UNIX time stamp.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lastsave/](https://redis.io/commands/lastsave/)"
- name: latency doctor
  id: latency-doctor/index
  summary: The LATENCY DOCTOR command reports about different latency-related issues and advises about possible remedies
  description: "# LATENCY\n\n    LATENCY DOCTOR\n\nSyntax\n\n``` command-syntax\nLATENCY DOCTOR\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `LATENCY DOCTOR` command reports about different latency-related issues and advises about possible remedies.\n\nThis command is the most powerful analysis tool in the latency monitoring framework, and is able to provide additional statistical data like the average period between latency spikes, the median deviation, and a human-readable analysis of the event. For certain events, like `fork`, additional information is provided, like the rate at which the system forks processes.\n\nThis is the output you should post in the Redis mailing list if you are looking for help about Latency related issues.\n\n## Examples\n\n```\n127.0.0.1:6379> latency doctor\n\nDave, I have observed latency spikes in this Redis instance.\nYou don't mind talking about it, do you Dave?\n\n1. command: 5 latency spikes (average 300ms, mean deviation 120ms,\n    period 73.40 sec). Worst all time event 500ms.\n\nI have a few advices for you:\n\n- Your current Slow Log configuration only logs events that are\n    slower than your configured latency monitor threshold. Please\n    use 'CONFIG SET slowlog-log-slower-than 1000'.\n- Check your Slow Log to understand what are the commands you are\n    running which are too slow to execute. Please check\n    http://redis.io/commands/slowlog for more information.\n- Deleting, expiring or evicting (because of maxmemory policy)\n    large objects is a blocking operation. If you have very large\n    objects that are often deleted, expired, or evicted, try to\n    fragment those objects into multiple smaller objects.\n```\n\n**Note:** the doctor has erratic psychological behaviors, so we recommend interacting with it carefully.\n\nFor more information refer to the [Latency Monitoring Framework page](https://redis.io/topics/latency-monitor).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/latency-doctor/](https://redis.io/commands/latency-doctor/)"
- name: latency graph
  id: latency-graph/index
  summary: Produces an ASCII-art style graph for the specified event
  description: "# LATENCY\n\n    LATENCY GRAPH\n\nSyntax\n\n``` command-syntax\nLATENCY GRAPH event\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nProduces an ASCII-art style graph for the specified event.\n\n`LATENCY GRAPH` lets you intuitively understand the latency trend of an `event` via state-of-the-art visualization. It can be used for quickly grasping the situation before resorting to means such parsing the raw data from [`LATENCY HISTORY`](../latency-history) or external tooling.\n\nValid values for `event` are:\n\n- `active-defrag-cycle`\n- `aof-fsync-always`\n- `aof-stat`\n- `aof-rewrite-diff-write`\n- `aof-rename`\n- `aof-write`\n- `aof-write-active-child`\n- `aof-write-alone`\n- `aof-write-pending-fsync`\n- `command`\n- `expire-cycle`\n- `eviction-cycle`\n- `eviction-del`\n- `fast-command`\n- `fork`\n- `rdb-unlink-temp-file`\n\n## Examples\n\n```\n127.0.0.1:6379> latency reset command\n(integer) 0\n127.0.0.1:6379> debug sleep .1\nOK\n127.0.0.1:6379> debug sleep .2\nOK\n127.0.0.1:6379> debug sleep .3\nOK\n127.0.0.1:6379> debug sleep .5\nOK\n127.0.0.1:6379> debug sleep .4\nOK\n127.0.0.1:6379> latency graph command\ncommand - high 500 ms, low 101 ms (all time high 500 ms)\n--------------------------------------------------------------------------------\n   #_\n  _||\n _|||\n_||||\n\n11186\n542ss\nsss\n```\n\nThe vertical labels under each graph column represent the amount of seconds, minutes, hours or days ago the event happened. For example \"15s\" means that the first graphed event happened 15 seconds ago.\n\nThe graph is normalized in the min-max scale so that the zero (the underscore in the lower row) is the minimum, and a \\# in the higher row is the maximum.\n\nFor more information refer to the [Latency Monitoring Framework page](https://redis.io/topics/latency-monitor).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/latency-graph/](https://redis.io/commands/latency-graph/)"
- name: latency histogram
  id: latency-histogram/index
  summary: 'Time complexity: O(N) where N is the number of commands with latency information being retrieved'
  description: "# LATENCY\n\n    LATENCY HISTOGRAM\n\nSyntax\n\n``` command-syntax\nLATENCY HISTOGRAM [command [command ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of commands with latency information being retrieved.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\n`LATENCY HISTOGRAM` returns a cumulative distribution of commands' latencies in histogram format.\n\nBy default, all available latency histograms are returned. You can filter the reply by providing specific command names.\n\nEach histogram consists of the following fields:\n\n- Command name\n- The total calls for that command\n- A map of time buckets:\n  - Each bucket represents a latency range\n  - Each bucket covers twice the previous bucket's range\n  - Empty buckets are excluded from the reply\n  - The tracked latencies are between 1 microsecond and roughly 1 second\n  - Everything above 1 second is considered +Inf\n  - At max, there will be log2(1,000,000,000)=30 buckets\n\nThis command requires the extended latency monitoring feature to be enabled, which is the default. If you need to enable it, call `CONFIG SET latency-tracking yes`.\n\nTo delete the latency histograms' data use the [`CONFIG RESETSTAT`](../config-resetstat) command.\n\n## Examples\n\n```\n127.0.0.1:6379> LATENCY HISTOGRAM set\n1# \"set\" =>\n   1# \"calls\" => (integer) 100000\n   2# \"histogram_usec\" =>\n      1# (integer) 1 => (integer) 99583\n      2# (integer) 2 => (integer) 99852\n      3# (integer) 4 => (integer) 99914\n      4# (integer) 8 => (integer) 99940\n      5# (integer) 16 => (integer) 99968\n      6# (integer) 33 => (integer) 100000\n```\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\nThe command returns a map where each key is a command name. The value is a map with a key for the total calls, and a map of the histogram time buckets.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/latency-histogram/](https://redis.io/commands/latency-histogram/)"
- name: latency history
  id: latency-history/index
  summary: The LATENCY HISTORY command returns the raw data of the event's latency spikes time series
  description: "# LATENCY\n\n    LATENCY HISTORY\n\nSyntax\n\n``` command-syntax\nLATENCY HISTORY event\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `LATENCY HISTORY` command returns the raw data of the `event`'s latency spikes time series.\n\nThis is useful to an application that wants to fetch raw data in order to perform monitoring, display graphs, and so forth.\n\nThe command will return up to 160 timestamp-latency pairs for the `event`.\n\nValid values for `event` are:\n\n- `active-defrag-cycle`\n- `aof-fsync-always`\n- `aof-stat`\n- `aof-rewrite-diff-write`\n- `aof-rename`\n- `aof-write`\n- `aof-write-active-child`\n- `aof-write-alone`\n- `aof-write-pending-fsync`\n- `command`\n- `expire-cycle`\n- `eviction-cycle`\n- `eviction-del`\n- `fast-command`\n- `fork`\n- `rdb-unlink-temp-file`\n\n## Examples\n\n```\n127.0.0.1:6379> latency history command\n1) 1) (integer) 1405067822\n   2) (integer) 251\n2) 1) (integer) 1405067941\n   2) (integer) 1001\n```\n\nFor more information refer to the [Latency Monitoring Framework page](https://redis.io/topics/latency-monitor).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\nThe command returns an array where each element is a two elements array representing the timestamp and the latency of the event.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/latency-history/](https://redis.io/commands/latency-history/)"
- name: latency latest
  id: latency-latest/index
  summary: The LATENCY LATEST command reports the latest latency events logged
  description: "# LATENCY\n\n    LATENCY LATEST\n\nSyntax\n\n``` command-syntax\nLATENCY LATEST\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `LATENCY LATEST` command reports the latest latency events logged.\n\nEach reported event has the following fields:\n\n- Event name.\n- Unix timestamp of the latest latency spike for the event.\n- Latest event latency in millisecond.\n- All-time maximum latency for this event.\n\n\"All-time\" means the maximum latency since the Redis instance was started, or the time that events were reset [`LATENCY RESET`](../latency-reset).\n\n## Examples\n\n```\n127.0.0.1:6379> debug sleep 1\nOK\n(1.00s)\n127.0.0.1:6379> debug sleep .25\nOK\n127.0.0.1:6379> latency latest\n1) 1) \"command\"\n   2) (integer) 1405067976\n   3) (integer) 251\n   4) (integer) 1001\n```\n\nFor more information refer to the [Latency Monitoring Framework page](https://redis.io/topics/latency-monitor).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\nThe command returns an array where each element is a four elements array representing the event's name, timestamp, latest and all-time latency measurements.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/latency-latest/](https://redis.io/commands/latency-latest/)"
- name: latency reset
  id: latency-reset/index
  summary: The LATENCY RESET command resets the latency spikes time series of all, or only some, events
  description: "# LATENCY\n\n    LATENCY RESET\n\nSyntax\n\n``` command-syntax\nLATENCY RESET [event [event ...]]\n```\n\nAvailable since:  \n2.8.13\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `LATENCY RESET` command resets the latency spikes time series of all, or only some, events.\n\nWhen the command is called without arguments, it resets all the events, discarding the currently logged latency spike events, and resetting the maximum event time register.\n\nIt is possible to reset only specific events by providing the `event` names as arguments.\n\nValid values for `event` are:\n\n- `active-defrag-cycle`\n- `aof-fsync-always`\n- `aof-stat`\n- `aof-rewrite-diff-write`\n- `aof-rename`\n- `aof-write`\n- `aof-write-active-child`\n- `aof-write-alone`\n- `aof-write-pending-fsync`\n- `command`\n- `expire-cycle`\n- `eviction-cycle`\n- `eviction-del`\n- `fast-command`\n- `fork`\n- `rdb-unlink-temp-file`\n\nFor more information refer to the [Latency Monitoring Framework page](https://redis.io/topics/latency-monitor).\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of event time series that were reset.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/latency-reset/](https://redis.io/commands/latency-reset/)"
- name: lcs
  id: lcs/index
  summary: The LCS command implements the longest common subsequence algorithm
  description: "# LCS\n\n    LCS\n\nSyntax\n\n``` command-syntax\nLCS key1 key2 [LEN] [IDX] [MINMATCHLEN min-match-len] [WITHMATCHLEN]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N\\*M) where N and M are the lengths of s1 and s2, respectively\n\nACL categories:  \n`@read`, `@string`, `@slow`,\n\nThe LCS command implements the longest common subsequence algorithm. Note that this is different than the longest common string algorithm, since matching characters in the string does not need to be contiguous.\n\nFor instance the LCS between \"foo\" and \"fao\" is \"fo\", since scanning the two strings from left to right, the longest common set of characters is composed of the first \"f\" and then the \"o\".\n\nLCS is very useful in order to evaluate how similar two strings are. Strings can represent many things. For instance if two strings are DNA sequences, the LCS will provide a measure of similarity between the two DNA sequences. If the strings represent some text edited by some user, the LCS could represent how different the new text is compared to the old one, and so forth.\n\nNote that this algorithm runs in `O(N*M)` time, where N is the length of the first string and M is the length of the second string. So either spin a different Redis instance in order to run this algorithm, or make sure to run it against very small strings.\n\n```\n> MSET key1 ohmytext key2 mynewtext\nOK\n> LCS key1 key2\n\"mytext\"\n```\n\nSometimes we need just the length of the match:\n\n```\n> LCS key1 key2 LEN\n(integer) 6\n```\n\nHowever what is often very useful, is to know the match position in each strings:\n\n```\n> LCS key1 key2 IDX\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n   2) 1) 1) (integer) 2\n         2) (integer) 3\n      2) 1) (integer) 0\n         2) (integer) 1\n3) \"len\"\n4) (integer) 6\n```\n\nMatches are produced from the last one to the first one, since this is how the algorithm works, and it more efficient to emit things in the same order. The above array means that the first match (second element of the array) is between positions 2-3 of the first string and 0-1 of the second. Then there is another match between 4-7 and 5-8.\n\nTo restrict the list of matches to the ones of a given minimal length:\n\n```\n> LCS key1 key2 IDX MINMATCHLEN 4\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n3) \"len\"\n4) (integer) 6\n```\n\nFinally to also have the match len:\n\n```\n> LCS key1 key2 IDX MINMATCHLEN 4 WITHMATCHLEN\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n      3) (integer) 4\n3) \"len\"\n4) (integer) 6\n```\n\n## Return\n\n- Without modifiers the string representing the longest common substring is returned.\n- When `LEN` is given the command returns the length of the longest common substring.\n- When `IDX` is given the command returns an array with the LCS length and all the ranges in both the strings, start and end offset for each string, where there are matches. When `WITHMATCHLEN` is given each array representing a match will also have the length of the match (see examples).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lcs/](https://redis.io/commands/lcs/)"
- name: lindex
  id: lindex/index
  summary: 'Time complexity: O(N) where N is the number of elements to traverse to get to the element at index'
  description: "# LINDEX\n\n    LINDEX\n\nSyntax\n\n``` command-syntax\nLINDEX key index\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).\n\nACL categories:  \n`@read`, `@list`, `@slow`,\n\nReturns the element at index `index` in the list stored at `key`. The index is zero-based, so `0` means the first element, `1` the second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, `-1` means the last element, `-2` means the penultimate and so forth.\n\nWhen the value at `key` is not a list, an error is returned.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the requested element, or `nil` when `index` is out of range.\n\n## Examples\n\n``` redis-cli\nLPUSH mylist \"World\"\nLPUSH mylist \"Hello\"\nLINDEX mylist 0\nLINDEX mylist -1\nLINDEX mylist 3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lindex/](https://redis.io/commands/lindex/)"
- name: linsert
  id: linsert/index
  summary: 'Time complexity: O(N) where N is the number of elements to traverse before seeing the value pivot'
  description: "# LINSERT\n\n    LINSERT\n\nSyntax\n\n``` command-syntax\nLINSERT key <BEFORE | AFTER> pivot element\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nInserts `element` in the list stored at `key` either before or after the reference value `pivot`.\n\nWhen `key` does not exist, it is considered an empty list and no operation is performed.\n\nAn error is returned when `key` exists but does not hold a list value.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the list length after a successful insert operation, `0` if the `key` doesn't exist, and `-1` when the `pivot` wasn't found.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"Hello\"\nRPUSH mylist \"World\"\nLINSERT mylist BEFORE \"World\" \"There\"\nLRANGE mylist 0 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/linsert/](https://redis.io/commands/linsert/)"
- name: llen
  id: llen/index
  summary: Returns the length of the list stored at key
  description: "# LLEN\n\n    LLEN\n\nSyntax\n\n``` command-syntax\nLLEN key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@list`, `@fast`,\n\nReturns the length of the list stored at `key`. If `key` does not exist, it is interpreted as an empty list and `0` is returned. An error is returned when the value stored at `key` is not a list.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the list at `key`.\n\n## Examples\n\n``` redis-cli\nLPUSH mylist \"World\"\nLPUSH mylist \"Hello\"\nLLEN mylist\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/llen/](https://redis.io/commands/llen/)"
- name: lmove
  id: lmove/index
  summary: Atomically returns and removes the first/last element (head/tail depending on the wherefrom argument) of the list stored at source, and pushes the element at the first/last element (head/tail depending on the whereto argument) of the list stored at destination
  description: "# LMOVE\n\n    LMOVE\n\nSyntax\n\n``` command-syntax\nLMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT>\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nAtomically returns and removes the first/last element (head/tail depending on the `wherefrom` argument) of the list stored at `source`, and pushes the element at the first/last element (head/tail depending on the `whereto` argument) of the list stored at `destination`.\n\nFor example: consider `source` holding the list `a,b,c`, and `destination` holding the list `x,y,z`. Executing `LMOVE source destination RIGHT LEFT` results in `source` holding `a,b` and `destination` holding `c,x,y,z`.\n\nIf `source` does not exist, the value `nil` is returned and no operation is performed. If `source` and `destination` are the same, the operation is equivalent to removing the first/last element from the list and pushing it as first/last element of the list, so it can be considered as a list rotation command (or a no-op if `wherefrom` is the same as `whereto`).\n\nThis command comes in place of the now deprecated [`RPOPLPUSH`](../rpoplpush). Doing `LMOVE RIGHT LEFT` is equivalent.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the element being popped and pushed.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLMOVE mylist myotherlist RIGHT LEFT\nLMOVE mylist myotherlist LEFT RIGHT\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n## Pattern: Reliable queue\n\nRedis is often used as a messaging server to implement processing of background jobs or other kinds of messaging tasks. A simple form of queue is often obtained pushing values into a list in the producer side, and waiting for this values in the consumer side using [`RPOP`](../rpop) (using polling), or [`BRPOP`](../brpop) if the client is better served by a blocking operation.\n\nHowever in this context the obtained queue is not *reliable* as messages can be lost, for example in the case there is a network problem or if the consumer crashes just after the message is received but it is still to process.\n\n`LMOVE` (or [`BLMOVE`](../blmove) for the blocking variant) offers a way to avoid this problem: the consumer fetches the message and at the same time pushes it into a *processing* list. It will use the [`LREM`](../lrem) command in order to remove the message from the *processing* list once the message has been processed.\n\nAn additional client may monitor the *processing* list for items that remain there for too much time, and will push those timed out items into the queue again if needed.\n\n## Pattern: Circular list\n\nUsing `LMOVE` with the same source and destination key, a client can visit all the elements of an N-elements list, one after the other, in O(N) without transferring the full list from the server to the client using a single [`LRANGE`](../lrange) operation.\n\nThe above pattern works even in the following conditions:\n\n- There are multiple clients rotating the list: they'll fetch different elements, until all the elements of the list are visited, and the process restarts.\n- Even if other clients are actively pushing new items at the end of the list.\n\nThe above makes it very simple to implement a system where a set of items must be processed by N workers continuously as fast as possible. An example is a monitoring system that must check that a set of web sites are reachable, with the smallest delay possible, using a number of parallel workers.\n\nNote that this implementation of workers is trivially scalable and reliable, because even if a message is lost the item is still in the queue and will be processed at the next iteration.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lmove/](https://redis.io/commands/lmove/)"
- name: lmpop
  id: lmpop/index
  summary: 'Time complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned'
  description: "# LMPOP\n\n    LMPOP\n\nSyntax\n\n``` command-syntax\nLMPOP numkeys key [key ...] <LEFT | RIGHT> [COUNT count]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N+M) where N is the number of provided keys and M is the number of elements returned.\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nPops one or more elements from the first non-empty list key from the list of provided key names.\n\n`LMPOP` and [`BLMPOP`](../blmpop) are similar to the following, more limited, commands:\n\n- [`LPOP`](../lpop) or [`RPOP`](../rpop) which take only one key, and can return multiple elements.\n- [`BLPOP`](../blpop) or [`BRPOP`](../brpop) which take multiple keys, but return only one element from just one key.\n\nSee [`BLMPOP`](../blmpop) for the blocking variant of this command.\n\nElements are popped from either the left or right of the first non-empty list based on the passed argument. The number of returned elements is limited to the lower between the non-empty list's length, and the count argument (which defaults to 1).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` when no element could be popped.\n- A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of elements.\n\n## Examples\n\n``` redis-cli\nLMPOP 2 non1 non2 LEFT COUNT 10\nLPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nLMPOP 1 mylist LEFT\nLRANGE mylist 0 -1\nLMPOP 1 mylist RIGHT COUNT 10\nLPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nLPUSH mylist2 \"a\" \"b\" \"c\" \"d\" \"e\"\nLMPOP 2 mylist mylist2 right count 3\nLRANGE mylist 0 -1\nLMPOP 2 mylist mylist2 right count 5\nLMPOP 2 mylist mylist2 right count 10\nEXISTS mylist mylist2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lmpop/](https://redis.io/commands/lmpop/)"
- name: lolwut
  id: lolwut/index
  summary: 'The LOLWUT command displays the Redis version: however as a side effect of doing so, it also creates a piece of generative computer art that is different with each version of Redis'
  description: "# LOLWUT\n\n    LOLWUT\n\nSyntax\n\n``` command-syntax\nLOLWUT [VERSION version]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nACL categories:  \n`@read`, `@fast`,\n\nThe LOLWUT command displays the Redis version: however as a side effect of doing so, it also creates a piece of generative computer art that is different with each version of Redis. The command was introduced in Redis 5 and announced with this [blog post](http://antirez.com/news/123).\n\nBy default the `LOLWUT` command will display the piece corresponding to the current Redis version, however it is possible to display a specific version using the following form:\n\n    LOLWUT VERSION 5 ... other optional arguments ...\n\nOf course the \"5\" above is an example. Each LOLWUT version takes a different set of arguments in order to change the output. The user is encouraged to play with it to discover how the output changes adding more numerical arguments.\n\nLOLWUT wants to be a reminder that there is more in programming than just putting some code together in order to create something useful. Every LOLWUT version should have the following properties:\n\n1.  It should display some computer art. There are no limits as long as the output works well in a normal terminal display. However the output should not be limited to graphics (like LOLWUT 5 and 6 actually do), but can be generative poetry and other non graphical things.\n2.  LOLWUT output should be completely useless. Displaying some useful Redis internal metrics does not count as a valid LOLWUT.\n3.  LOLWUT output should be fast to generate so that the command can be called in production instances without issues. It should remain fast even when the user experiments with odd parameters.\n4.  LOLWUT implementations should be safe and carefully checked for security, and resist to untrusted inputs if they take arguments.\n5.  LOLWUT must always display the Redis version at the end.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) (or verbatim reply when using the RESP3 protocol): the string containing the generative computer art, and a text with the Redis version.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lolwut/](https://redis.io/commands/lolwut/)"
- name: lpop
  id: lpop/index
  summary: Removes and returns the first elements of the list stored at key
  description: "# LPOP\n\n    LPOP\n\nSyntax\n\n``` command-syntax\nLPOP key [count]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of elements returned\n\nACL categories:  \n`@write`, `@list`, `@fast`,\n\nRemoves and returns the first elements of the list stored at `key`.\n\nBy default, the command pops a single element from the beginning of the list. When provided with the optional `count` argument, the reply will consist of up to `count` elements, depending on the list's length.\n\n## Return\n\nWhen called without the `count` argument:\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of the first element, or `nil` when `key` does not exist.\n\nWhen called with the `count` argument:\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of popped elements, or `nil` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nLPOP mylist\nLPOP mylist 2\nLRANGE mylist 0 -1\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `count` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lpop/](https://redis.io/commands/lpop/)"
- name: lpos
  id: lpos/index
  summary: 'Time complexity: O(N) where N is the number of elements in the list, for the average case'
  description: "# LPOS\n\n    LPOS\n\nSyntax\n\n``` command-syntax\nLPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len]\n```\n\nAvailable since:  \n6.0.6\n\nTime complexity:  \nO(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.\n\nACL categories:  \n`@read`, `@list`, `@slow`,\n\nThe command returns the index of matching elements inside a Redis list. By default, when no options are given, it will scan the list from head to tail, looking for the first match of \"element\". If the element is found, its index (the zero-based position in the list) is returned. Otherwise, if no match is found, `nil` is returned.\n\n```\n> RPUSH mylist a b c 1 2 3 c c\n> LPOS mylist c\n2\n```\n\nThe optional arguments and options can modify the command's behavior. The `RANK` option specifies the \"rank\" of the first element to return, in case there are multiple matches. A rank of 1 means to return the first match, 2 to return the second match, and so forth.\n\nFor instance, in the above example the element \"c\" is present multiple times, if I want the index of the second match, I'll write:\n\n```\n> LPOS mylist c RANK 2\n6\n```\n\nThat is, the second occurrence of \"c\" is at position 6. A negative \"rank\" as the `RANK` argument tells `LPOS` to invert the search direction, starting from the tail to the head.\n\nSo, we want to say, give me the first element starting from the tail of the list:\n\n```\n> LPOS mylist c RANK -1\n7\n```\n\nNote that the indexes are still reported in the \"natural\" way, that is, considering the first element starting from the head of the list at index 0, the next element at index 1, and so forth. This basically means that the returned indexes are stable whatever the rank is positive or negative.\n\nSometimes we want to return not just the Nth matching element, but the position of all the first N matching elements. This can be achieved using the `COUNT` option.\n\n```\n> LPOS mylist c COUNT 2\n[2,6]\n```\n\nWe can combine `COUNT` and `RANK`, so that `COUNT` will try to return up to the specified number of matches, but starting from the Nth match, as specified by the `RANK` option.\n\n```\n> LPOS mylist c RANK -1 COUNT 2\n[7,6]\n```\n\nWhen `COUNT` is used, it is possible to specify 0 as the number of matches, as a way to tell the command we want all the matches found returned as an array of indexes. This is better than giving a very large `COUNT` option because it is more general.\n\n```\n> LPOS mylist c COUNT 0\n[2,6,7]\n```\n\nWhen `COUNT` is used and no match is found, an empty array is returned. However when `COUNT` is not used and there are no matches, the command returns `nil`.\n\nFinally, the `MAXLEN` option tells the command to compare the provided element only with a given maximum number of list items. So for instance specifying `MAXLEN 1000` will make sure that the command performs only 1000 comparisons, effectively running the algorithm on a subset of the list (the first part or the last part depending on the fact we use a positive or negative rank). This is useful to limit the maximum complexity of the command. It is also useful when we expect the match to be found very early, but want to be sure that in case this is not true, the command does not take too much time to run.\n\nWhen `MAXLEN` is used, it is possible to specify 0 as the maximum number of comparisons, as a way to tell the command we want unlimited comparisons. This is better than giving a very large `MAXLEN` option because it is more general.\n\n## Return\n\nThe command returns the integer representing the matching element, or `nil` if there is no match. However, if the `COUNT` option is given the command returns an array (empty if there are no matches).\n\n## Examples\n\n``` redis-cli\nRPUSH mylist a b c d 1 2 3 4 3 3 3\nLPOS mylist 3\nLPOS mylist 3 COUNT 0 RANK 2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lpos/](https://redis.io/commands/lpos/)"
- name: lpush
  id: lpush/index
  summary: 'Time complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments'
  description: "# LPUSH\n\n    LPUSH\n\nSyntax\n\n``` command-syntax\nLPUSH key element [element ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nACL categories:  \n`@write`, `@list`, `@fast`,\n\nInsert all the specified values at the head of the list stored at `key`. If `key` does not exist, it is created as empty list before performing the push operations. When `key` holds a value that is not a list, an error is returned.\n\nIt is possible to push multiple elements using a single command call just specifying multiple arguments at the end of the command. Elements are inserted one after the other to the head of the list, from the leftmost element to the rightmost element. So for instance the command `LPUSH mylist a b c` will result into a list containing `c` as first element, `b` as second element and `a` as third element.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the list after the push operations.\n\n## Examples\n\n``` redis-cli\nLPUSH mylist \"world\"\nLPUSH mylist \"hello\"\nLRANGE mylist 0 -1\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple `element` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lpush/](https://redis.io/commands/lpush/)"
- name: lpushx
  id: lpushx/index
  summary: 'Time complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments'
  description: "# LPUSHX\n\n    LPUSHX\n\nSyntax\n\n``` command-syntax\nLPUSHX key element [element ...]\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nACL categories:  \n`@write`, `@list`, `@fast`,\n\nInserts specified values at the head of the list stored at `key`, only if `key` already exists and holds a list. In contrary to [`LPUSH`](../lpush), no operation will be performed when `key` does not yet exist.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the list after the push operation.\n\n## Examples\n\n``` redis-cli\nLPUSH mylist \"World\"\nLPUSHX mylist \"Hello\"\nLPUSHX myotherlist \"Hello\"\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n## History\n\n- Starting with Redis version 4.0.0: Accepts multiple `element` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lpushx/](https://redis.io/commands/lpushx/)"
- name: lrange
  id: lrange/index
  summary: 'Time complexity: O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range'
  description: "# LRANGE\n\n    LRANGE\n\nSyntax\n\n``` command-syntax\nLRANGE key start stop\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.\n\nACL categories:  \n`@read`, `@list`, `@slow`,\n\nReturns the specified elements of the list stored at `key`. The offsets `start` and `stop` are zero-based indexes, with `0` being the first element of the list (the head of the list), `1` being the next element and so on.\n\nThese offsets can also be negative numbers indicating offsets starting at the end of the list. For example, `-1` is the last element of the list, `-2` the penultimate, and so on.\n\n## Consistency with range functions in various programming languages\n\nNote that if you have a list of numbers from 0 to 100, `LRANGE list 0 10` will return 11 elements, that is, the rightmost item is included. This **may or may not** be consistent with behavior of range-related functions in your programming language of choice (think Ruby's `Range.new`, `Array#slice` or Python's `range()` function).\n\n## Out-of-range indexes\n\nOut of range indexes will not produce an error. If `start` is larger than the end of the list, an empty list is returned. If `stop` is larger than the actual end of the list, Redis will treat it like the last element of the list.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified range.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLRANGE mylist 0 0\nLRANGE mylist -3 2\nLRANGE mylist -100 100\nLRANGE mylist 5 10\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lrange/](https://redis.io/commands/lrange/)"
- name: lrem
  id: lrem/index
  summary: 'Time complexity: O(N+M) where N is the length of the list and M is the number of elements removed'
  description: "# LREM\n\n    LREM\n\nSyntax\n\n``` command-syntax\nLREM key count element\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N+M) where N is the length of the list and M is the number of elements removed.\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nRemoves the first `count` occurrences of elements equal to `element` from the list stored at `key`. The `count` argument influences the operation in the following ways:\n\n- `count > 0`: Remove elements equal to `element` moving from head to tail.\n- `count < 0`: Remove elements equal to `element` moving from tail to head.\n- `count = 0`: Remove all elements equal to `element`.\n\nFor example, `LREM list -2 \"hello\"` will remove the last two occurrences of `\"hello\"` in the list stored at `list`.\n\nNote that non-existing keys are treated like empty lists, so when `key` does not exist, the command will always return `0`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of removed elements.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"hello\"\nRPUSH mylist \"hello\"\nRPUSH mylist \"foo\"\nRPUSH mylist \"hello\"\nLREM mylist -2 \"hello\"\nLRANGE mylist 0 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lrem/](https://redis.io/commands/lrem/)"
- name: lset
  id: lset/index
  summary: 'Time complexity: O(N) where N is the length of the list'
  description: "# LSET\n\n    LSET\n\nSyntax\n\n``` command-syntax\nLSET key index element\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nSets the list element at `index` to `element`. For more information on the `index` argument, see [`LINDEX`](../lindex).\n\nAn error is returned for out of range indexes.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLSET mylist 0 \"four\"\nLSET mylist -2 \"five\"\nLRANGE mylist 0 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/lset/](https://redis.io/commands/lset/)"
- name: ltrim
  id: ltrim/index
  summary: 'Time complexity: O(N) where N is the number of elements to be removed by the operation'
  description: "# LTRIM\n\n    LTRIM\n\nSyntax\n\n``` command-syntax\nLTRIM key start stop\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of elements to be removed by the operation.\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nTrim an existing list so that it will contain only the specified range of elements specified. Both `start` and `stop` are zero-based indexes, where `0` is the first element of the list (the head), `1` the next element and so on.\n\nFor example: `LTRIM foobar 0 2` will modify the list stored at `foobar` so that only the first three elements of the list will remain.\n\n`start` and `end` can also be negative numbers indicating offsets from the end of the list, where `-1` is the last element of the list, `-2` the penultimate element and so on.\n\nOut of range indexes will not produce an error: if `start` is larger than the end of the list, or `start > end`, the result will be an empty list (which causes `key` to be removed). If `end` is larger than the end of the list, Redis will treat it like the last element of the list.\n\nA common use of `LTRIM` is together with [`LPUSH`](../lpush) / [`RPUSH`](../rpush). For example:\n\n```\nLPUSH mylist someelement\nLTRIM mylist 0 99\n```\n\nThis pair of commands will push a new element on the list, while making sure that the list will not grow larger than 100 elements. This is very useful when using Redis to store logs for example. It is important to note that when used in this way `LTRIM` is an O(1) operation because in the average case just one element is removed from the tail of the list.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLTRIM mylist 1 -1\nLRANGE mylist 0 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ltrim/](https://redis.io/commands/ltrim/)"
- name: memory doctor
  id: memory-doctor/index
  summary: The MEMORY DOCTOR command reports about different memory-related issues that the Redis server experiences, and advises about possible remedies
  description: "# MEMORY\n\n    MEMORY DOCTOR\n\nSyntax\n\n``` command-syntax\nMEMORY DOCTOR\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\nThe `MEMORY DOCTOR` command reports about different memory-related issues that the Redis server experiences, and advises about possible remedies.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/memory-doctor/](https://redis.io/commands/memory-doctor/)"
- name: memory malloc stats
  id: memory-malloc-stats/index
  summary: The MEMORY MALLOC-STATS command provides an internal statistics report from the memory allocator
  description: "# MEMORY\n\n    MEMORY MALLOC-STATS\n\nSyntax\n\n``` command-syntax\nMEMORY MALLOC-STATS\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nDepends on how much memory is allocated, could be slow\n\nACL categories:  \n`@slow`,\n\nThe `MEMORY MALLOC-STATS` command provides an internal statistics report from the memory allocator.\n\nThis command is currently implemented only when using **jemalloc** as an allocator, and evaluates to a benign NOOP for all others.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the memory allocator's internal statistics report\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/memory-malloc-stats/](https://redis.io/commands/memory-malloc-stats/)"
- name: memory purge
  id: memory-purge/index
  summary: The MEMORY PURGE command attempts to purge dirty pages so these can be reclaimed by the allocator
  description: "# MEMORY\n\n    MEMORY PURGE\n\nSyntax\n\n``` command-syntax\nMEMORY PURGE\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nDepends on how much memory is allocated, could be slow\n\nACL categories:  \n`@slow`,\n\nThe `MEMORY PURGE` command attempts to purge dirty pages so these can be reclaimed by the allocator.\n\nThis command is currently implemented only when using **jemalloc** as an allocator, and evaluates to a benign NOOP for all others.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/memory-purge/](https://redis.io/commands/memory-purge/)"
- name: memory stats
  id: memory-stats/index
  summary: The MEMORY STATS command returns an Array reply about the memory usage of the server
  description: "# MEMORY\n\n    MEMORY STATS\n\nSyntax\n\n``` command-syntax\nMEMORY STATS\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`,\n\nThe `MEMORY STATS` command returns an [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) about the memory usage of the server.\n\nThe information about memory usage is provided as metrics and their respective values. The following metrics are reported:\n\n- `peak.allocated`: Peak memory consumed by Redis in bytes (see [`INFO`](../info)'s `used_memory_peak`)\n- `total.allocated`: Total number of bytes allocated by Redis using its allocator (see [`INFO`](../info)'s `used_memory`)\n- `startup.allocated`: Initial amount of memory consumed by Redis at startup in bytes (see [`INFO`](../info)'s `used_memory_startup`)\n- `replication.backlog`: Size in bytes of the replication backlog (see [`INFO`](../info)'s `repl_backlog_active`)\n- `clients.slaves`: The total size in bytes of all replicas overheads (output and query buffers, connection contexts)\n- `clients.normal`: The total size in bytes of all clients overheads (output and query buffers, connection contexts)\n- `cluster.links`: Memory usage by cluster links (Added in Redis 7.0, see [`INFO`](../info)'s `mem_cluster_links`).\n- `aof.buffer`: The summed size in bytes of AOF related buffers.\n- `lua.caches`: the summed size in bytes of the overheads of the Lua scripts' caches\n- `dbXXX`: For each of the server's databases, the overheads of the main and expiry dictionaries (`overhead.hashtable.main` and `overhead.hashtable.expires`, respectively) are reported in bytes\n- `overhead.total`: The sum of all overheads, i.e. `startup.allocated`, `replication.backlog`, `clients.slaves`, `clients.normal`, `aof.buffer` and those of the internal data structures that are used in managing the Redis keyspace (see [`INFO`](../info)'s `used_memory_overhead`)\n- `keys.count`: The total number of keys stored across all databases in the server\n- `keys.bytes-per-key`: The ratio between **net memory usage** (`total.allocated` minus `startup.allocated`) and `keys.count`\n- `dataset.bytes`: The size in bytes of the dataset, i.e. `overhead.total` subtracted from `total.allocated` (see [`INFO`](../info)'s `used_memory_dataset`)\n- `dataset.percentage`: The percentage of `dataset.bytes` out of the net memory usage\n- `peak.percentage`: The percentage of `peak.allocated` out of `total.allocated`\n- `fragmentation`: See [`INFO`](../info)'s `mem_fragmentation_ratio`\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): nested list of memory usage metrics and their values\n\n**A note about the word slave used in this man page**: Starting with Redis 5, if not for backward compatibility, the Redis project no longer uses the word slave. Unfortunately in this command the word slave is part of the protocol, so we'll be able to remove such occurrences only when this API will be naturally deprecated.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/memory-stats/](https://redis.io/commands/memory-stats/)"
- name: memory usage
  id: memory-usage/index
  summary: 'Time complexity: O(N) where N is the number of samples'
  description: "# MEMORY\n\n    MEMORY USAGE\n\nSyntax\n\n``` command-syntax\nMEMORY USAGE key [SAMPLES count]\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(N) where N is the number of samples.\n\nACL categories:  \n`@read`, `@slow`,\n\nThe `MEMORY USAGE` command reports the number of bytes that a key and its value require to be stored in RAM.\n\nThe reported usage is the total of memory allocations for data and administrative overheads that a key its value require.\n\nFor nested data types, the optional `SAMPLES` option can be provided, where `count` is the number of sampled nested values. The samples are averaged to estimate the total size. By default, this option is set to `5`. To sample the all of the nested values, use `SAMPLES 0`.\n\n## Examples\n\nWith Redis v4.0.1 64-bit and **jemalloc**, the empty string measures as follows:\n\n```\n> SET \"\" \"\"\nOK\n> MEMORY USAGE \"\"\n(integer) 51\n```\n\nThese bytes are pure overhead at the moment as no actual data is stored, and are used for maintaining the internal data structures of the server. Longer keys and values show asymptotically linear usage.\n\n```\n> SET foo bar\nOK\n> MEMORY USAGE foo\n(integer) 54\n> SET cento 01234567890123456789012345678901234567890123\n45678901234567890123456789012345678901234567890123456789\nOK\n127.0.0.1:6379> MEMORY USAGE cento\n(integer) 153\n```\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the memory usage in bytes, or `nil` when the key does not exist.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/memory-usage/](https://redis.io/commands/memory-usage/)"
- name: mget
  id: mget/index
  summary: 'Time complexity: O(N) where N is the number of keys to retrieve'
  description: "# MGET\n\n    MGET\n\nSyntax\n\n``` command-syntax\nMGET key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of keys to retrieve.\n\nACL categories:  \n`@read`, `@string`, `@fast`,\n\nReturns the values of all specified keys. For every key that does not hold a string value or does not exist, the special value `nil` is returned. Because of this, the operation never fails.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of values at the specified keys.\n\n## Examples\n\n``` redis-cli\nSET key1 \"Hello\"\nSET key2 \"World\"\nMGET key1 key2 nonexisting\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/mget/](https://redis.io/commands/mget/)"
- name: migrate
  id: migrate/index
  summary: 'Time complexity: This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance'
  description: "# MIGRATE\n\n    MIGRATE\n\nSyntax\n\n``` command-syntax\nMIGRATE host port <key | \"\"> destination-db timeout [COPY] [REPLACE]\n  [AUTH password | AUTH2 username password] [KEYS key [key ...]]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nThis command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`, `@dangerous`,\n\nAtomically transfer a key from a source Redis instance to a destination Redis instance. On success the key is deleted from the original instance and is guaranteed to exist in the target instance.\n\nThe command is atomic and blocks the two instances for the time required to transfer the key, at any given time the key will appear to exist in a given instance or in the other instance, unless a timeout error occurs. In 3.2 and above, multiple keys can be pipelined in a single call to `MIGRATE` by passing the empty string (\"\") as key and adding the `KEYS` clause.\n\nThe command internally uses [`DUMP`](../dump) to generate the serialized version of the key value, and [`RESTORE`](../restore) in order to synthesize the key in the target instance. The source instance acts as a client for the target instance. If the target instance returns OK to the [`RESTORE`](../restore) command, the source instance deletes the key using [`DEL`](../del).\n\nThe timeout specifies the maximum idle time in any moment of the communication with the destination instance in milliseconds. This means that the operation does not need to be completed within the specified amount of milliseconds, but that the transfer should make progresses without blocking for more than the specified amount of milliseconds.\n\n`MIGRATE` needs to perform I/O operations and to honor the specified timeout. When there is an I/O error during the transfer or if the timeout is reached the operation is aborted and the special error - `IOERR` returned. When this happens the following two cases are possible:\n\n- The key may be on both the instances.\n- The key may be only in the source instance.\n\nIt is not possible for the key to get lost in the event of a timeout, but the client calling `MIGRATE`, in the event of a timeout error, should check if the key is *also* present in the target instance and act accordingly.\n\nWhen any other error is returned (starting with `ERR`) `MIGRATE` guarantees that the key is still only present in the originating instance (unless a key with the same name was also *already* present on the target instance).\n\nIf there are no keys to migrate in the source instance `NOKEY` is returned. Because missing keys are possible in normal conditions, from expiry for example, `NOKEY` isn't an error.\n\n## Migrating multiple keys with a single command call\n\nStarting with Redis 3.0.6 `MIGRATE` supports a new bulk-migration mode that uses pipelining in order to migrate multiple keys between instances without incurring in the round trip time latency and other overheads that there are when moving each key with a single `MIGRATE` call.\n\nIn order to enable this form, the `KEYS` option is used, and the normal *key* argument is set to an empty string. The actual key names will be provided after the `KEYS` argument itself, like in the following example:\n\n    MIGRATE 192.168.1.34 6379 \"\" 0 5000 KEYS key1 key2 key3\n\nWhen this form is used the `NOKEY` status code is only returned when none of the keys is present in the instance, otherwise the command is executed, even if just a single key exists.\n\n## Options\n\n- `COPY` -- Do not remove the key from the local instance.\n- `REPLACE` -- Replace existing key on the remote instance.\n- `KEYS` -- If the key argument is an empty string, the command will instead migrate all the keys that follow the `KEYS` option (see the above section for more info).\n- `AUTH` -- Authenticate with the given password to the remote instance.\n- `AUTH2` -- Authenticate with the given username and password pair (Redis 6 or greater ACL auth style).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The command returns OK on success, or `NOKEY` if no keys were found in the source instance.\n\n## History\n\n- Starting with Redis version 3.0.0: Added the `COPY` and `REPLACE` options.\n- Starting with Redis version 3.0.6: Added the `KEYS` option.\n- Starting with Redis version 4.0.7: Added the `AUTH` option.\n- Starting with Redis version 6.0.0: Added the `AUTH2` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/migrate/](https://redis.io/commands/migrate/)"
- name: module list
  id: module-list/index
  summary: 'Time complexity: O(N) where N is the number of loaded modules'
  description: "# MODULE\n\n    MODULE LIST\n\nSyntax\n\n``` command-syntax\nMODULE LIST\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(N) where N is the number of loaded modules.\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nReturns information about the modules loaded to the server.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of loaded modules. Each element in the list represents a module, and is in itself a list of property names and their values. The following properties is reported for each loaded module:\n\n- `name`: Name of the module\n- `ver`: Version of the module\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/module-list/](https://redis.io/commands/module-list/)"
- name: module load
  id: module-load/index
  summary: Loads a module from a dynamic library at runtime
  description: "# MODULE\n\n    MODULE LOAD\n\nSyntax\n\n``` command-syntax\nMODULE LOAD path [arg [arg ...]]\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nLoads a module from a dynamic library at runtime.\n\nThis command loads and initializes the Redis module from the dynamic library specified by the `path` argument. The `path` should be the absolute path of the library, including the full filename. Any additional arguments are passed unmodified to the module.\n\n**Note**: modules can also be loaded at server startup with `loadmodule` configuration directive in `redis.conf`.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if module was loaded.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/module-load/](https://redis.io/commands/module-load/)"
- name: module loadex
  id: module-loadex/index
  summary: Loads a module from a dynamic library at runtime with configuration directives
  description: "# MODULE\n\n    MODULE LOADEX\n\nSyntax\n\n``` command-syntax\nMODULE LOADEX path [CONFIG name value [CONFIG name value ...]]\n  [ARGS args [args ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nLoads a module from a dynamic library at runtime with configuration directives.\n\nThis is an extended version of the [`MODULE LOAD`](../module-load) command.\n\nIt loads and initializes the Redis module from the dynamic library specified by the `path` argument. The `path` should be the absolute path of the library, including the full filename.\n\nYou can use the optional `CONFIG` argument to provide the module with configuration directives. Any additional arguments that follow the `ARGS` keyword are passed unmodified to the module.\n\n**Note**: modules can also be loaded at server startup with `loadmodule` configuration directive in `redis.conf`.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if module was loaded.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/module-loadex/](https://redis.io/commands/module-loadex/)"
- name: module unload
  id: module-unload/index
  summary: Unloads a module
  description: "# MODULE\n\n    MODULE UNLOAD\n\nSyntax\n\n``` command-syntax\nMODULE UNLOAD name\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nUnloads a module.\n\nThis command unloads the module specified by `name`. Note that the module's name is reported by the [`MODULE LIST`](../module-list) command, and may differ from the dynamic library's filename.\n\nKnown limitations:\n\n- Modules that register custom data types can not be unloaded.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if module was unloaded.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/module-unload/](https://redis.io/commands/module-unload/)"
- name: monitor
  id: monitor/index
  summary: MONITOR is a debugging command that streams back every command processed by the Redis server
  description: "# MONITOR\n\n    MONITOR\n\nSyntax\n\n``` command-syntax\nMONITOR\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\n`MONITOR` is a debugging command that streams back every command processed by the Redis server. It can help in understanding what is happening to the database. This command can both be used via `redis-cli` and via `telnet`.\n\nThe ability to see all the requests processed by the server is useful in order to spot bugs in an application both when using Redis as a database and as a distributed caching system.\n\n```\n$ redis-cli monitor\n1339518083.107412 [0 127.0.0.1:60866] \"keys\" \"*\"\n1339518087.877697 [0 127.0.0.1:60866] \"dbsize\"\n1339518090.420270 [0 127.0.0.1:60866] \"set\" \"x\" \"6\"\n1339518096.506257 [0 127.0.0.1:60866] \"get\" \"x\"\n1339518099.363765 [0 127.0.0.1:60866] \"eval\" \"return redis.call('set','x','7')\" \"0\"\n1339518100.363799 [0 lua] \"set\" \"x\" \"7\"\n1339518100.544926 [0 127.0.0.1:60866] \"del\" \"x\"\n```\n\nUse `SIGINT` (Ctrl-C) to stop a `MONITOR` stream running via `redis-cli`.\n\n```\n$ telnet localhost 6379\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nMONITOR\n+OK\n+1339518083.107412 [0 127.0.0.1:60866] \"keys\" \"*\"\n+1339518087.877697 [0 127.0.0.1:60866] \"dbsize\"\n+1339518090.420270 [0 127.0.0.1:60866] \"set\" \"x\" \"6\"\n+1339518096.506257 [0 127.0.0.1:60866] \"get\" \"x\"\n+1339518099.363765 [0 127.0.0.1:60866] \"del\" \"x\"\n+1339518100.544926 [0 127.0.0.1:60866] \"get\" \"x\"\nQUIT\n+OK\nConnection closed by foreign host.\n```\n\nManually issue the [`QUIT`](../quit) or [`RESET`](../reset) commands to stop a `MONITOR` stream running via `telnet`.\n\n## Commands not logged by MONITOR\n\nBecause of security concerns, no administrative commands are logged by `MONITOR`'s output and sensitive data is redacted in the command [`AUTH`](../auth).\n\nFurthermore, the command [`QUIT`](../quit) is also not logged.\n\n## Cost of running MONITOR\n\nBecause `MONITOR` streams back **all** commands, its use comes at a cost. The following (totally unscientific) benchmark numbers illustrate what the cost of running `MONITOR` can be.\n\nBenchmark result **without** `MONITOR` running:\n\n```\n$ src/redis-benchmark -c 10 -n 100000 -q\nPING_INLINE: 101936.80 requests per second\nPING_BULK: 102880.66 requests per second\nSET: 95419.85 requests per second\nGET: 104275.29 requests per second\nINCR: 93283.58 requests per second\n```\n\nBenchmark result **with** `MONITOR` running (`redis-cli monitor > /dev/null`):\n\n```\n$ src/redis-benchmark -c 10 -n 100000 -q\nPING_INLINE: 58479.53 requests per second\nPING_BULK: 59136.61 requests per second\nSET: 41823.50 requests per second\nGET: 45330.91 requests per second\nINCR: 41771.09 requests per second\n```\n\nIn this particular case, running a single `MONITOR` client can reduce the throughput by more than 50%. Running more `MONITOR` clients will reduce throughput even more.\n\n## Return\n\n**Non standard return value**, just dumps the received commands in an infinite flow.\n\n## Behavior change history\n\n- `>= 6.0.0`: [`AUTH`](../auth) excluded from the command's output.\n- `>= 6.2.0`: \"[`RESET`](../reset) can be called to exit monitor mode.\n- `>= 6.2.4`: \"[`AUTH`](../auth), [`HELLO`](../hello), [`EVAL`](../eval), [`EVAL_RO`](../eval_ro), [`EVALSHA`](../evalsha) and [`EVALSHA_RO`](../evalsha_ro) included in the command's output.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/monitor/](https://redis.io/commands/monitor/)"
- name: move
  id: move/index
  summary: Move key from the currently selected database (see SELECT) to the specified destination database
  description: "# MOVE\n\n    MOVE\n\nSyntax\n\n``` command-syntax\nMOVE key db\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\nMove `key` from the currently selected database (see [`SELECT`](../select)) to the specified destination database. When `key` already exists in the destination database, or it does not exist in the source database, it does nothing. It is possible to use `MOVE` as a locking primitive because of this.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if `key` was moved.\n- `0` if `key` was not moved.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/move/](https://redis.io/commands/move/)"
- name: mset
  id: mset/index
  summary: 'Time complexity: O(N) where N is the number of keys to set'
  description: "# MSET\n\n    MSET\n\nSyntax\n\n``` command-syntax\nMSET key value [key value ...]\n```\n\nAvailable since:  \n1.0.1\n\nTime complexity:  \nO(N) where N is the number of keys to set.\n\nACL categories:  \n`@write`, `@string`, `@slow`,\n\nSets the given keys to their respective values. `MSET` replaces existing values with new values, just as regular [`SET`](../set). See [`MSETNX`](../msetnx) if you don't want to overwrite existing values.\n\n`MSET` is atomic, so all given keys are set at once. It is not possible for clients to see that some of the keys were updated while others are unchanged.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always `OK` since `MSET` can't fail.\n\n## Examples\n\n``` redis-cli\nMSET key1 \"Hello\" key2 \"World\"\nGET key1\nGET key2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/mset/](https://redis.io/commands/mset/)"
- name: msetnx
  id: msetnx/index
  summary: 'Time complexity: O(N) where N is the number of keys to set'
  description: "# MSETNX\n\n    MSETNX\n\nSyntax\n\n``` command-syntax\nMSETNX key value [key value ...]\n```\n\nAvailable since:  \n1.0.1\n\nTime complexity:  \nO(N) where N is the number of keys to set.\n\nACL categories:  \n`@write`, `@string`, `@slow`,\n\nSets the given keys to their respective values. `MSETNX` will not perform any operation at all even if just a single key already exists.\n\nBecause of this semantic `MSETNX` can be used in order to set different keys representing different fields of a unique logic object in a way that ensures that either all the fields or none at all are set.\n\n`MSETNX` is atomic, so all given keys are set at once. It is not possible for clients to see that some of the keys were updated while others are unchanged.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the all the keys were set.\n- `0` if no key was set (at least one key already existed).\n\n## Examples\n\n``` redis-cli\nMSETNX key1 \"Hello\" key2 \"there\"\nMSETNX key2 \"new\" key3 \"world\"\nMGET key1 key2 key3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/msetnx/](https://redis.io/commands/msetnx/)"
- name: multi
  id: multi/index
  summary: Marks the start of a transaction block
  description: "# MULTI\n\n    MULTI\n\nSyntax\n\n``` command-syntax\nMULTI\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@transaction`,\n\nMarks the start of a [transaction](https://redis.io/topics/transactions) block. Subsequent commands will be queued for atomic execution using [`EXEC`](../exec).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/multi/](https://redis.io/commands/multi/)"
- name: object encoding
  id: object-encoding/index
  summary: Lists can be encoded as ziplist or linkedlist
  description: "# OBJECT\n\n    OBJECT ENCODING\n\nSyntax\n\n``` command-syntax\nOBJECT ENCODING key\n```\n\nAvailable since:  \n2.2.3\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nReturns the internal encoding for the Redis object stored at `<key>`\n\nRedis objects can be encoded in different ways:\n\n- Strings can be encoded as:\n\n  - `raw`, normal string encoding.\n  - `int`, strings representing integers in a 64-bit signed interval, encoded in this way to save space.\n  - `embstr`, an embedded string, which is an object where the internal simple dynamic string, `sds`, is an unmodifiable string allocated in the same chuck as the object itself. `embstr` can be strings with lengths up to the hardcoded limit of `OBJ_ENCODING_EMBSTR_SIZE_LIMIT` or 44 bytes.\n\n- Lists can be encoded as `ziplist` or `linkedlist`. The `ziplist` is the special representation that is used to save space for small lists.\n\n- Sets can be encoded as `intset` or `hashtable`. The `intset` is a special encoding used for small sets composed solely of integers.\n\n- Hashes can be encoded as `ziplist` or `hashtable`. The `ziplist` is a special encoding used for small hashes.\n\n- Sorted Sets can be encoded as `ziplist` or `skiplist` format. As for the List type small sorted sets can be specially encoded using `ziplist`, while the `skiplist` encoding is the one that works with sorted sets of any size.\n\nAll the specially encoded types are automatically converted to the general type once you perform an operation that makes it impossible for Redis to retain the space saving encoding.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the encoding of the object, or `nil` if the key doesn't exist\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/object-encoding/](https://redis.io/commands/object-encoding/)"
- name: object freq
  id: object-freq/index
  summary: The command is only available when the maxmemory-policy configuration directive is set to one of the LFU policies
  description: "# OBJECT\n\n    OBJECT FREQ\n\nSyntax\n\n``` command-syntax\nOBJECT FREQ key\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nThis command returns the logarithmic access frequency counter of a Redis object stored at `<key>`.\n\nThe command is only available when the `maxmemory-policy` configuration directive is set to one of the LFU policies.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe counter's value.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/object-freq/](https://redis.io/commands/object-freq/)"
- name: object idletime
  id: object-idletime/index
  summary: The command is only available when the maxmemory-policy configuration directive is not set to one of the LFU policies
  description: "# OBJECT\n\n    OBJECT IDLETIME\n\nSyntax\n\n``` command-syntax\nOBJECT IDLETIME key\n```\n\nAvailable since:  \n2.2.3\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nThis command returns the time in seconds since the last access to the value stored at `<key>`.\n\nThe command is only available when the `maxmemory-policy` configuration directive is not set to one of the LFU policies.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe idle time in seconds.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/object-idletime/](https://redis.io/commands/object-idletime/)"
- name: object refcount
  id: object-refcount/index
  summary: The number of references
  description: "# OBJECT\n\n    OBJECT REFCOUNT\n\nSyntax\n\n``` command-syntax\nOBJECT REFCOUNT key\n```\n\nAvailable since:  \n2.2.3\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nThis command returns the reference count of the stored at `<key>`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe number of references.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/object-refcount/](https://redis.io/commands/object-refcount/)"
- name: persist
  id: persist/index
  summary: Remove the existing timeout on key, turning the key from volatile (a key with an expire set) to persistent (a key that will never expire as no timeout is associated)
  description: "# PERSIST\n\n    PERSIST\n\nSyntax\n\n``` command-syntax\nPERSIST key\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\nRemove the existing timeout on `key`, turning the key from *volatile* (a key with an expire set) to *persistent* (a key that will never expire as no timeout is associated).\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the timeout was removed.\n- `0` if `key` does not exist or does not have an associated timeout.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nEXPIRE mykey 10\nTTL mykey\nPERSIST mykey\nTTL mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/persist/](https://redis.io/commands/persist/)"
- name: pexpire
  id: pexpire/index
  summary: This command works exactly like EXPIRE but the time to live of the key is specified in milliseconds instead of seconds
  description: "# PEXPIRE\n\n    PEXPIRE\n\nSyntax\n\n``` command-syntax\nPEXPIRE key milliseconds [NX | XX | GT | LT]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\nThis command works exactly like [`EXPIRE`](../expire) but the time to live of the key is specified in milliseconds instead of seconds.\n\n## Options\n\nThe `PEXPIRE` command supports a set of options since Redis 7.0:\n\n- `NX` -- Set expiry only when the key has no expiry\n- `XX` -- Set expiry only when the key has an existing expiry\n- `GT` -- Set expiry only when the new expiry is greater than current one\n- `LT` -- Set expiry only when the new expiry is less than current one\n\nA non-volatile key is treated as an infinite TTL for the purpose of `GT` and `LT`. The `GT`, `LT` and `NX` options are mutually exclusive.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the timeout was set.\n- `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nPEXPIRE mykey 1500\nTTL mykey\nPTTL mykey\nPEXPIRE mykey 1000 XX\nTTL mykey\nPEXPIRE mykey 1000 NX\nTTL mykey\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added options: `NX`, `XX`, `GT` and `LT`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pexpire/](https://redis.io/commands/pexpire/)"
- name: pexpireat
  id: pexpireat/index
  summary: PEXPIREAT has the same effect and semantic as EXPIREAT, but the Unix time at which the key will expire is specified in milliseconds instead of seconds
  description: "# PEXPIREAT\n\n    PEXPIREAT\n\nSyntax\n\n``` command-syntax\nPEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\n`PEXPIREAT` has the same effect and semantic as [`EXPIREAT`](../expireat), but the Unix time at which the key will expire is specified in milliseconds instead of seconds.\n\n## Options\n\nThe `PEXPIREAT` command supports a set of options since Redis 7.0:\n\n- `NX` -- Set expiry only when the key has no expiry\n- `XX` -- Set expiry only when the key has an existing expiry\n- `GT` -- Set expiry only when the new expiry is greater than current one\n- `LT` -- Set expiry only when the new expiry is less than current one\n\nA non-volatile key is treated as an infinite TTL for the purpose of `GT` and `LT`. The `GT`, `LT` and `NX` options are mutually exclusive.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the timeout was set.\n- `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nPEXPIREAT mykey 1555555555005\nTTL mykey\nPTTL mykey\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added options: `NX`, `XX`, `GT` and `LT`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pexpireat/](https://redis.io/commands/pexpireat/)"
- name: pexpiretime
  id: pexpiretime/index
  summary: PEXPIRETIME has the same semantic as EXPIRETIME, but returns the absolute Unix expiration timestamp in milliseconds instead of seconds
  description: "# PEXPIRETIME\n\n    PEXPIRETIME\n\nSyntax\n\n``` command-syntax\nPEXPIRETIME key\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\n`PEXPIRETIME` has the same semantic as [`EXPIRETIME`](../expiretime), but returns the absolute Unix expiration timestamp in milliseconds instead of seconds.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): Expiration Unix timestamp in milliseconds, or a negative value in order to signal an error (see the description below).\n\n- The command returns `-1` if the key exists but has no associated expiration time.\n- The command returns `-2` if the key does not exist.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nPEXPIREAT mykey 33177117420000\nPEXPIRETIME mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pexpiretime/](https://redis.io/commands/pexpiretime/)"
- name: pfadd
  id: pfadd/index
  summary: 'Time complexity: O(1) to add every element'
  description: "# PFADD\n\n    PFADD\n\nSyntax\n\n``` command-syntax\nPFADD key [element [element ...]]\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(1) to add every element.\n\nACL categories:  \n`@write`, `@hyperloglog`, `@fast`,\n\nAdds all the element arguments to the HyperLogLog data structure stored at the variable name specified as first argument.\n\nAs a side effect of this command the HyperLogLog internals may be updated to reflect a different estimation of the number of unique items added so far (the cardinality of the set).\n\nIf the approximated cardinality estimated by the HyperLogLog changed after executing the command, `PFADD` returns 1, otherwise 0 is returned. The command automatically creates an empty HyperLogLog structure (that is, a Redis String of a specified length and with a given encoding) if the specified key does not exist.\n\nTo call the command without elements but just the variable name is valid, this will result into no operation performed if the variable already exists, or just the creation of the data structure if the key does not exist (in the latter case 1 is returned).\n\nFor an introduction to HyperLogLog data structure check the [`PFCOUNT`](../pfcount) command page.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- 1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.\n\n## Examples\n\n``` redis-cli\nPFADD hll a b c d e f g\nPFCOUNT hll\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pfadd/](https://redis.io/commands/pfadd/)"
- name: pfcount
  id: pfcount/index
  summary: 'Time complexity: O(1) with a very small average constant time when called with a single key'
  description: "# PFCOUNT\n\n    PFCOUNT\n\nSyntax\n\n``` command-syntax\nPFCOUNT key [key ...]\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.\n\nACL categories:  \n`@read`, `@hyperloglog`, `@slow`,\n\nWhen called with a single key, returns the approximated cardinality computed by the HyperLogLog data structure stored at the specified variable, which is 0 if the variable does not exist.\n\nWhen called with multiple keys, returns the approximated cardinality of the union of the HyperLogLogs passed, by internally merging the HyperLogLogs stored at the provided keys into a temporary HyperLogLog.\n\nThe HyperLogLog data structure can be used in order to count **unique** elements in a set using just a small constant amount of memory, specifically 12k bytes for every HyperLogLog (plus a few bytes for the key itself).\n\nThe returned cardinality of the observed set is not exact, but approximated with a standard error of 0.81%.\n\nFor example in order to take the count of all the unique search queries performed in a day, a program needs to call [`PFADD`](../pfadd) every time a query is processed. The estimated number of unique queries can be retrieved with `PFCOUNT` at any time.\n\nNote: as a side effect of calling this function, it is possible that the HyperLogLog is modified, since the last 8 bytes encode the latest computed cardinality for caching purposes. So `PFCOUNT` is technically a write command.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- The approximated number of unique elements observed via [`PFADD`](../pfadd).\n\n## Examples\n\n``` redis-cli\nPFADD hll foo bar zap\nPFADD hll zap zap zap\nPFADD hll foo bar\nPFCOUNT hll\nPFADD some-other-hll 1 2 3\nPFCOUNT hll some-other-hll\n```\n\n## Performances\n\nWhen `PFCOUNT` is called with a single key, performances are excellent even if in theory constant times to process a dense HyperLogLog are high. This is possible because the `PFCOUNT` uses caching in order to remember the cardinality previously computed, that rarely changes because most [`PFADD`](../pfadd) operations will not update any register. Hundreds of operations per second are possible.\n\nWhen `PFCOUNT` is called with multiple keys, an on-the-fly merge of the HyperLogLogs is performed, which is slow, moreover the cardinality of the union can't be cached, so when used with multiple keys `PFCOUNT` may take a time in the order of magnitude of the millisecond, and should be not abused.\n\nThe user should take in mind that single-key and multiple-keys executions of this command are semantically different and have different performances.\n\n## HyperLogLog representation\n\nRedis HyperLogLogs are represented using a double representation: the *sparse* representation suitable for HLLs counting a small number of elements (resulting in a small number of registers set to non-zero value), and a *dense* representation suitable for higher cardinalities. Redis automatically switches from the sparse to the dense representation when needed.\n\nThe sparse representation uses a run-length encoding optimized to store efficiently a big number of registers set to zero. The dense representation is a Redis string of 12288 bytes in order to store 16384 6-bit counters. The need for the double representation comes from the fact that using 12k (which is the dense representation memory requirement) to encode just a few registers for smaller cardinalities is extremely suboptimal.\n\nBoth representations are prefixed with a 16 bytes header, that includes a magic, an encoding / version field, and the cached cardinality estimation computed, stored in little endian format (the most significant bit is 1 if the estimation is invalid since the HyperLogLog was updated since the cardinality was computed).\n\nThe HyperLogLog, being a Redis string, can be retrieved with [`GET`](../get) and restored with [`SET`](../set). Calling [`PFADD`](../pfadd), `PFCOUNT` or [`PFMERGE`](../pfmerge) commands with a corrupted HyperLogLog is never a problem, it may return random values but does not affect the stability of the server. Most of the times when corrupting a sparse representation, the server recognizes the corruption and returns an error.\n\nThe representation is neutral from the point of view of the processor word size and endianness, so the same representation is used by 32 bit and 64 bit processor, big endian or little endian.\n\nMore details about the Redis HyperLogLog implementation can be found in [this blog post](http://antirez.com/news/75). The source code of the implementation in the `hyperloglog.c` file is also easy to read and understand, and includes a full specification for the exact encoding used for the sparse and dense representations.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pfcount/](https://redis.io/commands/pfcount/)"
- name: pfdebug
  id: pfdebug/index
  summary: The PFDEBUG command is an internal command
  description: "# PFDEBUG\n\n    PFDEBUG\n\nSyntax\n\n``` command-syntax\nPFDEBUG subcommand key\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nN/A\n\nACL categories:  \n`@write`, `@hyperloglog`, `@admin`, `@slow`, `@dangerous`,\n\nThe `PFDEBUG` command is an internal command. It is meant to be used for developing and testing Redis.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pfdebug/](https://redis.io/commands/pfdebug/)"
- name: pfmerge
  id: pfmerge/index
  summary: 'Time complexity: O(N) to merge N HyperLogLogs, but with high constant times'
  description: "# PFMERGE\n\n    PFMERGE\n\nSyntax\n\n``` command-syntax\nPFMERGE destkey [sourcekey [sourcekey ...]]\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(N) to merge N HyperLogLogs, but with high constant times.\n\nACL categories:  \n`@write`, `@hyperloglog`, `@slow`,\n\nMerge multiple HyperLogLog values into a unique value that will approximate the cardinality of the union of the observed Sets of the source HyperLogLog structures.\n\nThe computed merged HyperLogLog is set to the destination variable, which is created if does not exist (defaulting to an empty HyperLogLog).\n\nIf the destination variable exists, it is treated as one of the source sets and its cardinality will be included in the cardinality of the computed HyperLogLog.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The command just returns `OK`.\n\n## Examples\n\n``` redis-cli\nPFADD hll1 foo bar zap a\nPFADD hll2 a b c foo\nPFMERGE hll3 hll1 hll2\nPFCOUNT hll3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pfmerge/](https://redis.io/commands/pfmerge/)"
- name: pfselftest
  id: pfselftest/index
  summary: The PFSELFTEST command is an internal command
  description: "# PFSELFTEST\n\n    PFSELFTEST\n\nSyntax\n\n``` command-syntax\nPFSELFTEST\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nN/A\n\nACL categories:  \n`@hyperloglog`, `@admin`, `@slow`, `@dangerous`,\n\nThe `PFSELFTEST` command is an internal command. It is meant to be used for developing and testing Redis.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pfselftest/](https://redis.io/commands/pfselftest/)"
- name: ping
  id: ping/index
  summary: Returns PONG if no argument is provided, otherwise return a copy of the argument as a bulk
  description: "# PING\n\n    PING\n\nSyntax\n\n``` command-syntax\nPING [message]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nReturns `PONG` if no argument is provided, otherwise return a copy of the argument as a bulk. This command is useful for:\n\n1.  Testing whether a connection is still alive.\n2.  Verifying the server's ability to serve data - an error is returned when this isn't the case (e.g., during load from persistence or accessing a stale replica).\n3.  Measuring latency.\n\nIf the client is subscribed to a channel or a pattern, it will instead return a multi-bulk with a \"pong\" in the first position and an empty bulk in the second position, unless an argument is provided in which case it returns a copy of the argument.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings), and specifically `PONG`, when no argument is provided.\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) the argument provided, when applicable.\n\n## Examples\n\n``` redis-cli\nPING\n```\n\nPING \"hello world\"\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ping/](https://redis.io/commands/ping/)"
- name: psetex
  id: psetex/index
  summary: As of Redis version 2.6.12, this command is regarded as deprecated
  description: "# PSETEX\n\n    PSETEX (deprecated)\n\nAs of Redis version 2.6.12, this command is regarded as deprecated.\n\nIt can be replaced by [`SET`](../set) with the `PX` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nPSETEX key milliseconds value\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@slow`,\n\n`PSETEX` works exactly like [`SETEX`](../setex) with the sole difference that the expire time is specified in milliseconds instead of seconds.\n\n## Examples\n\n``` redis-cli\nPSETEX mykey 1000 \"Hello\"\nPTTL mykey\nGET mykey\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/psetex/](https://redis.io/commands/psetex/)"
- name: psubscribe
  id: psubscribe/index
  summary: 'Time complexity: O(N) where N is the number of patterns the client is already subscribed to'
  description: "# PSUBSCRIBE\n\n    PSUBSCRIBE\n\nSyntax\n\n``` command-syntax\nPSUBSCRIBE pattern [pattern ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of patterns the client is already subscribed to.\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nSubscribes the client to the given patterns.\n\nSupported glob-style patterns:\n\n- `h?llo` subscribes to `hello`, `hallo` and `hxllo`\n- `h*llo` subscribes to `hllo` and `heeeello`\n- `h[ae]llo` subscribes to `hello` and `hallo,` but not `hillo`\n\nUse `\\` to escape special characters if you want to match them verbatim.\n\nOnce the client enters the subscribed state it is not supposed to issue any other commands, except for additional [`SUBSCRIBE`](../subscribe), [`SSUBSCRIBE`](../ssubscribe), `PSUBSCRIBE`, [`UNSUBSCRIBE`](../unsubscribe), [`SUNSUBSCRIBE`](../sunsubscribe), [`PUNSUBSCRIBE`](../punsubscribe), [`PING`](../ping), [`RESET`](../reset) and [`QUIT`](../quit) commands. However, if RESP3 is used (see [`HELLO`](../hello)) it is possible for a client to issue any commands while in subscribed state.\n\nFor more information, see [Pub/sub](https://redis.io/docs/manual/pubsub/).\n\n## Return\n\nWhen successful, this command doesn't return anything. Instead, for each pattern, one message with the first element being the string \"psubscribe\" is pushed as a confirmation that the command succeeded.\n\n## Behavior change history\n\n- `>= 6.2.0`: [`RESET`](../reset) can be called to exit subscribed state.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/psubscribe/](https://redis.io/commands/psubscribe/)"
- name: psync
  id: psync/index
  summary: Initiates a replication stream from the master
  description: "# PSYNC\n\n    PSYNC\n\nSyntax\n\n``` command-syntax\nPSYNC replicationid offset\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nInitiates a replication stream from the master.\n\nThe `PSYNC` command is called by Redis replicas for initiating a replication stream from the master.\n\nFor more information about replication in Redis please check the [replication page](https://redis.io/topics/replication).\n\n## Return\n\n**Non standard return value**, a bulk transfer of the data followed by [`PING`](../ping) and write requests from the master.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/psync/](https://redis.io/commands/psync/)"
- name: pttl
  id: pttl/index
  summary: Like TTL this command returns the remaining time to live of a key that has an expire set, with the sole difference that TTL returns the amount of remaining time in seconds while PTTL returns it in milliseconds
  description: "# PTTL\n\n    PTTL\n\nSyntax\n\n``` command-syntax\nPTTL key\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nLike [`TTL`](../ttl) this command returns the remaining time to live of a key that has an expire set, with the sole difference that [`TTL`](../ttl) returns the amount of remaining time in seconds while `PTTL` returns it in milliseconds.\n\nIn Redis 2.6 or older the command returns `-1` if the key does not exist or if the key exist but has no associated expire.\n\nStarting with Redis 2.8 the return value in case of error changed:\n\n- The command returns `-2` if the key does not exist.\n- The command returns `-1` if the key exists but has no associated expire.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): TTL in milliseconds, or a negative value in order to signal an error (see the description above).\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nEXPIRE mykey 1\nPTTL mykey\n```\n\n## History\n\n- Starting with Redis version 2.8.0: Added the -2 reply.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pttl/](https://redis.io/commands/pttl/)"
- name: publish
  id: publish/index
  summary: 'Time complexity: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client)'
  description: "# PUBLISH\n\n    PUBLISH\n\nSyntax\n\n``` command-syntax\nPUBLISH channel message\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).\n\nACL categories:  \n`@pubsub`, `@fast`,\n\nPosts a message to the given channel.\n\nIn a Redis Cluster clients can publish to every node. The cluster makes sure that published messages are forwarded as needed, so clients can subscribe to any channel by connecting to any one of the nodes.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of clients that received the message. Note that in a Redis Cluster, only clients that are connected to the same node as the publishing client are included in the count.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/publish/](https://redis.io/commands/publish/)"
- name: pubsub channels
  id: pubsub-channels/index
  summary: Lists the currently active channels
  description: "# PUBSUB\n\n    PUBSUB CHANNELS\n\nSyntax\n\n``` command-syntax\nPUBSUB CHANNELS [pattern]\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nLists the currently *active channels*.\n\nAn active channel is a Pub/Sub channel with one or more subscribers (excluding clients subscribed to patterns).\n\nIf no `pattern` is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.\n\nCluster note: in a Redis Cluster clients can subscribe to every node, and can also publish to every other node. The cluster will make sure that published messages are forwarded as needed. That said, [`PUBSUB`](../pubsub)'s replies in a cluster only report information from the node's Pub/Sub context, rather than the entire cluster.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of active channels, optionally matching the specified pattern.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pubsub-channels/](https://redis.io/commands/pubsub-channels/)"
- name: pubsub numpat
  id: pubsub-numpat/index
  summary: Returns the number of unique patterns that are subscribed to by clients (that are performed using the PSUBSCRIBE command)
  description: "# PUBSUB\n\n    PUBSUB NUMPAT\n\nSyntax\n\n``` command-syntax\nPUBSUB NUMPAT\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nReturns the number of unique patterns that are subscribed to by clients (that are performed using the [`PSUBSCRIBE`](../psubscribe) command).\n\nNote that this isn't the count of clients subscribed to patterns, but the total number of unique patterns all the clients are subscribed to.\n\nCluster note: in a Redis Cluster clients can subscribe to every node, and can also publish to every other node. The cluster will make sure that published messages are forwarded as needed. That said, [`PUBSUB`](../pubsub)'s replies in a cluster only report information from the node's Pub/Sub context, rather than the entire cluster.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of patterns all the clients are subscribed to.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pubsub-numpat/](https://redis.io/commands/pubsub-numpat/)"
- name: pubsub numsub
  id: pubsub-numsub/index
  summary: Returns the number of subscribers (exclusive of clients subscribed to patterns) for the specified channels
  description: "# PUBSUB\n\n    PUBSUB NUMSUB\n\nSyntax\n\n``` command-syntax\nPUBSUB NUMSUB [channel [channel ...]]\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(N) for the NUMSUB subcommand, where N is the number of requested channels\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nReturns the number of subscribers (exclusive of clients subscribed to patterns) for the specified channels.\n\nNote that it is valid to call this command without channels. In this case it will just return an empty list.\n\nCluster note: in a Redis Cluster clients can subscribe to every node, and can also publish to every other node. The cluster will make sure that published messages are forwarded as needed. That said, [`PUBSUB`](../pubsub)'s replies in a cluster only report information from the node's Pub/Sub context, rather than the entire cluster.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of channels and number of subscribers for every channel.\n\nThe format is channel, count, channel, count, ..., so the list is flat. The order in which the channels are listed is the same as the order of the channels specified in the command call.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pubsub-numsub/](https://redis.io/commands/pubsub-numsub/)"
- name: pubsub shardchannels
  id: pubsub-shardchannels/index
  summary: 'Time complexity: O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels)'
  description: "# PUBSUB\n\n    PUBSUB SHARDCHANNELS\n\nSyntax\n\n``` command-syntax\nPUBSUB SHARDCHANNELS [pattern]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nLists the currently *active shard channels*.\n\nAn active shard channel is a Pub/Sub shard channel with one or more subscribers.\n\nIf no `pattern` is specified, all the channels are listed, otherwise if pattern is specified only channels matching the specified glob-style pattern are listed.\n\nThe information returned about the active shard channels are at the shard level and not at the cluster level.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of active channels, optionally matching the specified pattern.\n\n## Examples\n\n```\n> PUBSUB SHARDCHANNELS\n1) \"orders\"\nPUBSUB SHARDCHANNELS o*\n1) \"orders\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pubsub-shardchannels/](https://redis.io/commands/pubsub-shardchannels/)"
- name: pubsub shardnumsub
  id: pubsub-shardnumsub/index
  summary: Returns the number of subscribers for the specified shard channels
  description: "# PUBSUB\n\n    PUBSUB SHARDNUMSUB\n\nSyntax\n\n``` command-syntax\nPUBSUB SHARDNUMSUB [shardchannel [shardchannel ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nReturns the number of subscribers for the specified shard channels.\n\nNote that it is valid to call this command without channels, in this case it will just return an empty list.\n\nCluster note: in a Redis Cluster, [`PUBSUB`](../pubsub)'s replies in a cluster only report information from the node's Pub/Sub context, rather than the entire cluster.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of channels and number of subscribers for every channel.\n\nThe format is channel, count, channel, count, ..., so the list is flat. The order in which the channels are listed is the same as the order of the shard channels specified in the command call.\n\n## Examples\n\n```\n> PUBSUB SHARDNUMSUB orders\n1) \"orders\"\n2) (integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/pubsub-shardnumsub/](https://redis.io/commands/pubsub-shardnumsub/)"
- name: punsubscribe
  id: punsubscribe/index
  summary: 'Time complexity: O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client)'
  description: "# PUNSUBSCRIBE\n\n    PUNSUBSCRIBE\n\nSyntax\n\n``` command-syntax\nPUNSUBSCRIBE [pattern [pattern ...]]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nUnsubscribes the client from the given patterns, or from all of them if none is given.\n\nWhen no patterns are specified, the client is unsubscribed from all the previously subscribed patterns. In this case, a message for every unsubscribed pattern will be sent to the client.\n\n## Return\n\nWhen successful, this command doesn't return anything. Instead, for each pattern, one message with the first element being the string \"punsubscribe\" is pushed as a confirmation that the command succeeded.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/punsubscribe/](https://redis.io/commands/punsubscribe/)"
- name: quit
  id: quit/index
  summary: As of Redis version 7.2.0, this command is regarded as deprecated
  description: "# QUIT\n\n    QUIT (deprecated)\n\nAs of Redis version 7.2.0, this command is regarded as deprecated.\n\nIt can be replaced by just closing the connection when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nQUIT\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nAsk the server to close the connection. The connection is closed as soon as all pending replies have been written to the client.\n\n**Note:** Clients should not use this command. Instead, clients should simply close the connection when they're not used anymore. Terminating a connection on the client side is preferable, as it eliminates `TIME_WAIT` lingering sockets on the server side.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always OK.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/quit/](https://redis.io/commands/quit/)"
- name: randomkey
  id: randomkey/index
  summary: Return a random key from the currently selected database
  description: "# RANDOMKEY\n\n    RANDOMKEY\n\nSyntax\n\n``` command-syntax\nRANDOMKEY\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nReturn a random key from the currently selected database.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the random key, or `nil` when the database is empty.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/randomkey/](https://redis.io/commands/randomkey/)"
- name: readonly
  id: readonly/index
  summary: Enables read queries for a connection to a Redis Cluster replica node
  description: "# READONLY\n\n    READONLY\n\nSyntax\n\n``` command-syntax\nREADONLY\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nEnables read queries for a connection to a Redis Cluster replica node.\n\nNormally replica nodes will redirect clients to the authoritative master for the hash slot involved in a given command, however clients can use replicas in order to scale reads using the `READONLY` command.\n\n`READONLY` tells a Redis Cluster replica node that the client is willing to read possibly stale data and is not interested in running write queries.\n\nWhen the connection is in readonly mode, the cluster will send a redirection to the client only if the operation involves keys not served by the replica's master node. This may happen because:\n\n1.  The client sent a command about hash slots never served by the master of this replica.\n2.  The cluster was reconfigured (for example resharded) and the replica is no longer able to serve commands for a given hash slot.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/readonly/](https://redis.io/commands/readonly/)"
- name: readwrite
  id: readwrite/index
  summary: Disables read queries for a connection to a Redis Cluster replica node
  description: "# READWRITE\n\n    READWRITE\n\nSyntax\n\n``` command-syntax\nREADWRITE\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nDisables read queries for a connection to a Redis Cluster replica node.\n\nRead queries against a Redis Cluster replica node are disabled by default, but you can use the [`READONLY`](../readonly) command to change this behavior on a per- connection basis. The `READWRITE` command resets the readonly mode flag of a connection back to readwrite.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/readwrite/](https://redis.io/commands/readwrite/)"
- name: rename
  id: rename/index
  summary: Renames key to newkey
  description: "# RENAME\n\n    RENAME\n\nSyntax\n\n``` command-syntax\nRENAME key newkey\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`,\n\nRenames `key` to `newkey`. It returns an error when `key` does not exist. If `newkey` already exists it is overwritten, when this happens `RENAME` executes an implicit [`DEL`](../del) operation, so if the deleted key contains a very big value it may cause high latency even if `RENAME` itself is usually a constant-time operation.\n\nIn Cluster mode, both `key` and `newkey` must be in the same **hash slot**, meaning that in practice only keys that have the same hash tag can be reliably renamed in cluster.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nRENAME mykey myotherkey\nGET myotherkey\n```\n\n## Behavior change history\n\n- `>= 3.2.0`: The command no longer returns an error when source and destination names are the same.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/rename/](https://redis.io/commands/rename/)"
- name: renamenx
  id: renamenx/index
  summary: Renames key to newkey if newkey does not yet exist
  description: "# RENAMENX\n\n    RENAMENX\n\nSyntax\n\n``` command-syntax\nRENAMENX key newkey\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\nRenames `key` to `newkey` if `newkey` does not yet exist. It returns an error when `key` does not exist.\n\nIn Cluster mode, both `key` and `newkey` must be in the same **hash slot**, meaning that in practice only keys that have the same hash tag can be reliably renamed in cluster.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if `key` was renamed to `newkey`.\n- `0` if `newkey` already exists.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nSET myotherkey \"World\"\nRENAMENX mykey myotherkey\nGET myotherkey\n```\n\n## History\n\n- Starting with Redis version 3.2.0: The command no longer returns an error when source and destination names are the same.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/renamenx/](https://redis.io/commands/renamenx/)"
- name: replconf
  id: replconf/index
  summary: The REPLCONF command is an internal command
  description: "# REPLCONF\n\n    REPLCONF\n\nSyntax\n\n``` command-syntax\nREPLCONF\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `REPLCONF` command is an internal command. It is used by a Redis master to configure a connected replica.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/replconf/](https://redis.io/commands/replconf/)"
- name: replicaof
  id: replicaof/index
  summary: The REPLICAOF command can change the replication settings of a replica on the fly
  description: "# REPLICAOF\n\n    REPLICAOF\n\nSyntax\n\n``` command-syntax\nREPLICAOF host port\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `REPLICAOF` command can change the replication settings of a replica on the fly.\n\nIf a Redis server is already acting as replica, the command `REPLICAOF` NO ONE will turn off the replication, turning the Redis server into a MASTER. In the proper form `REPLICAOF` hostname port will make the server a replica of another server listening at the specified hostname and port.\n\nIf a server is already a replica of some master, `REPLICAOF` hostname port will stop the replication against the old server and start the synchronization against the new one, discarding the old dataset.\n\nThe form `REPLICAOF` NO ONE will stop replication, turning the server into a MASTER, but will not discard the replication. So, if the old master stops working, it is possible to turn the replica into a master and set the application to use this new master in read/write. Later when the other Redis server is fixed, it can be reconfigured to work as a replica.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n```\n> REPLICAOF NO ONE\n\"OK\"\n\n> REPLICAOF 127.0.0.1 6799\n\"OK\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/replicaof/](https://redis.io/commands/replicaof/)"
- name: reset
  id: reset/index
  summary: This command performs a full reset of the connection's server-side context, mimicking the effect of disconnecting and reconnecting again
  description: "# RESET\n\n    RESET\n\nSyntax\n\n``` command-syntax\nRESET\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nThis command performs a full reset of the connection's server-side context, mimicking the effect of disconnecting and reconnecting again.\n\nWhen the command is called from a regular client connection, it does the following:\n\n- Discards the current [`MULTI`](../multi) transaction block, if one exists.\n- Unwatches all keys [`WATCH`](../watch)ed by the connection.\n- Disables [`CLIENT TRACKING`](../client-tracking), if in use.\n- Sets the connection to [`READWRITE`](../readwrite) mode.\n- Cancels the connection's [`ASKING`](../asking) mode, if previously set.\n- Sets [`CLIENT REPLY`](../client-reply) to `ON`.\n- Sets the protocol version to RESP2.\n- [`SELECT`](../select)s database 0.\n- Exits [`MONITOR`](../monitor) mode, when applicable.\n- Aborts Pub/Sub's subscription state ([`SUBSCRIBE`](../subscribe) and [`PSUBSCRIBE`](../psubscribe)), when appropriate.\n- Deauthenticates the connection, requiring a call [`AUTH`](../auth) to reauthenticate when authentication is enabled.\n- Turns off `NO-EVICT` mode.\n- Turns off `NO-TOUCH` mode.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always 'RESET'.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/reset/](https://redis.io/commands/reset/)"
- name: restore
  id: restore/index
  summary: 'Time complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size'
  description: "# RESTORE\n\n    RESTORE\n\nSyntax\n\n``` command-syntax\nRESTORE key ttl serialized-value [REPLACE] [ABSTTL]\n  [IDLETIME seconds] [FREQ frequency]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1) to create the new key and additional O(N\\*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1\\*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N\\*M\\*log(N)) because inserting values into sorted sets is O(log(N)).\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`, `@dangerous`,\n\nCreate a key associated with a value that is obtained by deserializing the provided serialized value (obtained via [`DUMP`](../dump)).\n\nIf `ttl` is 0 the key is created without any expire, otherwise the specified expire time (in milliseconds) is set.\n\nIf the `ABSTTL` modifier was used, `ttl` should represent an absolute [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time) (in milliseconds) in which the key will expire.\n\nFor eviction purposes, you may use the `IDLETIME` or `FREQ` modifiers. See [`OBJECT`](../object) for more information.\n\n`RESTORE` will return a \"Target key name is busy\" error when `key` already exists unless you use the `REPLACE` modifier.\n\n`RESTORE` checks the RDB version and data checksum. If they don't match an error is returned.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The command returns OK on success.\n\n## Examples\n\n```\nredis> DEL mykey\n0\nredis> RESTORE mykey 0 \"\\n\\x17\\x17\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x03\\x00\\\n                        x00\\xc0\\x01\\x00\\x04\\xc0\\x02\\x00\\x04\\xc0\\x03\\x00\\\n                        xff\\x04\\x00u#<\\xc0;.\\xe9\\xdd\"\nOK\nredis> TYPE mykey\nlist\nredis> LRANGE mykey 0 -1\n1) \"1\"\n2) \"2\"\n3) \"3\"\n```\n\n## History\n\n- Starting with Redis version 3.0.0: Added the `REPLACE` modifier.\n- Starting with Redis version 5.0.0: Added the `ABSTTL` modifier.\n- Starting with Redis version 5.0.0: Added the `IDLETIME` and `FREQ` options.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/restore/](https://redis.io/commands/restore/)"
- name: restore asking
  id: restore-asking/index
  summary: 'Time complexity: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size'
  description: "# RESTORE-ASKING\n\n    RESTORE-ASKING\n\nSyntax\n\n``` command-syntax\nRESTORE-ASKING key ttl serialized-value [REPLACE] [ABSTTL]\n  [IDLETIME seconds] [FREQ frequency]\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1) to create the new key and additional O(N\\*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1\\*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N\\*M\\*log(N)) because inserting values into sorted sets is O(log(N)).\n\nACL categories:  \n`@keyspace`, `@write`, `@slow`, `@dangerous`,\n\nThe `RESTORE-ASKING` command is an internal command. It is used by a Redis cluster master during slot migration.\n\n## History\n\n- Starting with Redis version 3.0.0: Added the `REPLACE` modifier.\n- Starting with Redis version 5.0.0: Added the `ABSTTL` modifier.\n- Starting with Redis version 5.0.0: Added the `IDLETIME` and `FREQ` options.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/restore-asking/](https://redis.io/commands/restore-asking/)"
- name: role
  id: role/index
  summary: Provide information on the role of a Redis instance in the context of replication, by returning if the instance is currently a master, slave, or sentinel
  description: "# ROLE\n\n    ROLE\n\nSyntax\n\n``` command-syntax\nROLE\n```\n\nAvailable since:  \n2.8.12\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@fast`, `@dangerous`,\n\nProvide information on the role of a Redis instance in the context of replication, by returning if the instance is currently a `master`, `slave`, or `sentinel`. The command also returns additional information about the state of the replication (if the role is master or slave) or the list of monitored master names (if the role is sentinel).\n\n## Output format\n\nThe command returns an array of elements. The first element is the role of the instance, as one of the following three strings:\n\n- \"master\"\n- \"slave\"\n- \"sentinel\"\n\nThe additional elements of the array depends on the role.\n\n## Master output\n\nAn example of output when `ROLE` is called in a master instance:\n\n```\n1) \"master\"\n2) (integer) 3129659\n3) 1) 1) \"127.0.0.1\"\n      2) \"9001\"\n      3) \"3129242\"\n   2) 1) \"127.0.0.1\"\n      2) \"9002\"\n      3) \"3129543\"\n```\n\nThe master output is composed of the following parts:\n\n1.  The string `master`.\n2.  The current master replication offset, which is an offset that masters and replicas share to understand, in partial resynchronizations, the part of the replication stream the replicas needs to fetch to continue.\n3.  An array composed of three elements array representing the connected replicas. Every sub-array contains the replica IP, port, and the last acknowledged replication offset.\n\n## Output of the command on replicas\n\nAn example of output when `ROLE` is called in a replica instance:\n\n```\n1) \"slave\"\n2) \"127.0.0.1\"\n3) (integer) 9000\n4) \"connected\"\n5) (integer) 3167038\n```\n\nThe replica output is composed of the following parts:\n\n1.  The string `slave`, because of backward compatibility (see note at the end of this page).\n2.  The IP of the master.\n3.  The port number of the master.\n4.  The state of the replication from the point of view of the master, that can be `connect` (the instance needs to connect to its master), `connecting` (the master-replica connection is in progress), `sync` (the master and replica are trying to perform the synchronization), `connected` (the replica is online).\n5.  The amount of data received from the replica so far in terms of master replication offset.\n\n## Sentinel output\n\nAn example of Sentinel output:\n\n```\n1) \"sentinel\"\n2) 1) \"resque-master\"\n   2) \"html-fragments-master\"\n   3) \"stats-master\"\n   4) \"metadata-master\"\n```\n\nThe sentinel output is composed of the following parts:\n\n1.  The string `sentinel`.\n2.  An array of master names monitored by this Sentinel instance.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): where the first element is one of `master`, `slave`, `sentinel` and the additional elements are role-specific as illustrated above.\n\n## Examples\n\n``` redis-cli\nROLE\n```\n\n**A note about the word slave used in this man page**: Starting with Redis 5, if not for backward compatibility, the Redis project no longer uses the word slave. Unfortunately in this command the word slave is part of the protocol, so we'll be able to remove such occurrences only when this API will be naturally deprecated.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/role/](https://redis.io/commands/role/)"
- name: rpop
  id: rpop/index
  summary: Removes and returns the last elements of the list stored at key
  description: "# RPOP\n\n    RPOP\n\nSyntax\n\n``` command-syntax\nRPOP key [count]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of elements returned\n\nACL categories:  \n`@write`, `@list`, `@fast`,\n\nRemoves and returns the last elements of the list stored at `key`.\n\nBy default, the command pops a single element from the end of the list. When provided with the optional `count` argument, the reply will consist of up to `count` elements, depending on the list's length.\n\n## Return\n\nWhen called without the `count` argument:\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the value of the last element, or `nil` when `key` does not exist.\n\nWhen called with the `count` argument:\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of popped elements, or `nil` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nRPOP mylist\nRPOP mylist 2\nLRANGE mylist 0 -1\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `count` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/rpop/](https://redis.io/commands/rpop/)"
- name: rpoplpush
  id: rpoplpush/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# RPOPLPUSH\n\n    RPOPLPUSH (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`LMOVE`](../lmove) with the `RIGHT` and `LEFT` arguments when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nRPOPLPUSH source destination\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@list`, `@slow`,\n\nAtomically returns and removes the last element (tail) of the list stored at `source`, and pushes the element at the first element (head) of the list stored at `destination`.\n\nFor example: consider `source` holding the list `a,b,c`, and `destination` holding the list `x,y,z`. Executing `RPOPLPUSH` results in `source` holding `a,b` and `destination` holding `c,x,y,z`.\n\nIf `source` does not exist, the value `nil` is returned and no operation is performed. If `source` and `destination` are the same, the operation is equivalent to removing the last element from the list and pushing it as first element of the list, so it can be considered as a list rotation command.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the element being popped and pushed.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nRPOPLPUSH mylist myotherlist\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n## Pattern: Reliable queue\n\nRedis is often used as a messaging server to implement processing of background jobs or other kinds of messaging tasks. A simple form of queue is often obtained pushing values into a list in the producer side, and waiting for this values in the consumer side using [`RPOP`](../rpop) (using polling), or [`BRPOP`](../brpop) if the client is better served by a blocking operation.\n\nHowever in this context the obtained queue is not *reliable* as messages can be lost, for example in the case there is a network problem or if the consumer crashes just after the message is received but before it can be processed.\n\n`RPOPLPUSH` (or [`BRPOPLPUSH`](../brpoplpush) for the blocking variant) offers a way to avoid this problem: the consumer fetches the message and at the same time pushes it into a *processing* list. It will use the [`LREM`](../lrem) command in order to remove the message from the *processing* list once the message has been processed.\n\nAn additional client may monitor the *processing* list for items that remain there for too much time, pushing timed out items into the queue again if needed.\n\n## Pattern: Circular list\n\nUsing `RPOPLPUSH` with the same source and destination key, a client can visit all the elements of an N-elements list, one after the other, in O(N) without transferring the full list from the server to the client using a single [`LRANGE`](../lrange) operation.\n\nThe above pattern works even if one or both of the following conditions occur:\n\n- There are multiple clients rotating the list: they'll fetch different elements, until all the elements of the list are visited, and the process restarts.\n- Other clients are actively pushing new items at the end of the list.\n\nThe above makes it very simple to implement a system where a set of items must be processed by N workers continuously as fast as possible. An example is a monitoring system that must check that a set of web sites are reachable, with the smallest delay possible, using a number of parallel workers.\n\nNote that this implementation of workers is trivially scalable and reliable, because even if a message is lost the item is still in the queue and will be processed at the next iteration.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/rpoplpush/](https://redis.io/commands/rpoplpush/)"
- name: rpush
  id: rpush/index
  summary: 'Time complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments'
  description: "# RPUSH\n\n    RPUSH\n\nSyntax\n\n``` command-syntax\nRPUSH key element [element ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nACL categories:  \n`@write`, `@list`, `@fast`,\n\nInsert all the specified values at the tail of the list stored at `key`. If `key` does not exist, it is created as empty list before performing the push operation. When `key` holds a value that is not a list, an error is returned.\n\nIt is possible to push multiple elements using a single command call just specifying multiple arguments at the end of the command. Elements are inserted one after the other to the tail of the list, from the leftmost element to the rightmost element. So for instance the command `RPUSH mylist a b c` will result into a list containing `a` as first element, `b` as second element and `c` as third element.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the list after the push operation.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"hello\"\nRPUSH mylist \"world\"\nLRANGE mylist 0 -1\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple `element` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/rpush/](https://redis.io/commands/rpush/)"
- name: rpushx
  id: rpushx/index
  summary: 'Time complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments'
  description: "# RPUSHX\n\n    RPUSHX\n\nSyntax\n\n``` command-syntax\nRPUSHX key element [element ...]\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nACL categories:  \n`@write`, `@list`, `@fast`,\n\nInserts specified values at the tail of the list stored at `key`, only if `key` already exists and holds a list. In contrary to [`RPUSH`](../rpush), no operation will be performed when `key` does not yet exist.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the list after the push operation.\n\n## Examples\n\n``` redis-cli\nRPUSH mylist \"Hello\"\nRPUSHX mylist \"World\"\nRPUSHX myotherlist \"World\"\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n## History\n\n- Starting with Redis version 4.0.0: Accepts multiple `element` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/rpushx/](https://redis.io/commands/rpushx/)"
- name: sadd
  id: sadd/index
  summary: 'Time complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments'
  description: "# SADD\n\n    SADD\n\nSyntax\n\n``` command-syntax\nSADD key member [member ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\n\nACL categories:  \n`@write`, `@set`, `@fast`,\n\nAdd the specified members to the set stored at `key`. Specified members that are already a member of this set are ignored. If `key` does not exist, a new set is created before adding the specified members.\n\nAn error is returned when the value stored at `key` is not a set.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements that were added to the set, not including all the elements already present in the set.\n\n## Examples\n\n``` redis-cli\nSADD myset \"Hello\"\nSADD myset \"World\"\nSADD myset \"World\"\nSMEMBERS myset\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple `member` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sadd/](https://redis.io/commands/sadd/)"
- name: save
  id: save/index
  summary: The SAVE commands performs a synchronous save of the dataset producing a point in time snapshot of all the data inside the Redis instance, in the form of an RDB file
  description: "# SAVE\n\n    SAVE\n\nSyntax\n\n``` command-syntax\nSAVE\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the total number of keys in all databases\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `SAVE` commands performs a **synchronous** save of the dataset producing a *point in time* snapshot of all the data inside the Redis instance, in the form of an RDB file.\n\nYou almost never want to call `SAVE` in production environments where it will block all the other clients. Instead usually [`BGSAVE`](../bgsave) is used. However in case of issues preventing Redis to create the background saving child (for instance errors in the fork(2) system call), the `SAVE` command can be a good last resort to perform the dump of the latest dataset.\n\nPlease refer to the [persistence documentation](https://redis.io/topics/persistence) for detailed information.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The commands returns OK on success.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/save/](https://redis.io/commands/save/)"
- name: scan
  id: scan/index
  summary: 'Time complexity: O(1) for every call'
  description: "# SCAN\n\n    SCAN\n\nSyntax\n\n``` command-syntax\nSCAN cursor [MATCH pattern] [COUNT count] [TYPE type]\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nACL categories:  \n`@keyspace`, `@read`, `@slow`,\n\nThe `SCAN` command and the closely related commands [`SSCAN`](../sscan), [`HSCAN`](../hscan) and [`ZSCAN`](../zscan) are used in order to incrementally iterate over a collection of elements.\n\n- `SCAN` iterates the set of keys in the currently selected Redis database.\n- [`SSCAN`](../sscan) iterates elements of Sets types.\n- [`HSCAN`](../hscan) iterates fields of Hash types and their associated values.\n- [`ZSCAN`](../zscan) iterates elements of Sorted Set types and their associated scores.\n\nSince these commands allow for incremental iteration, returning only a small number of elements per call, they can be used in production without the downside of commands like [`KEYS`](../keys) or [`SMEMBERS`](../smembers) that may block the server for a long time (even several seconds) when called against big collections of keys or elements.\n\nHowever while blocking commands like [`SMEMBERS`](../smembers) are able to provide all the elements that are part of a Set in a given moment, The SCAN family of commands only offer limited guarantees about the returned elements since the collection that we incrementally iterate can change during the iteration process.\n\nNote that `SCAN`, [`SSCAN`](../sscan), [`HSCAN`](../hscan) and [`ZSCAN`](../zscan) all work very similarly, so this documentation covers all the four commands. However an obvious difference is that in the case of [`SSCAN`](../sscan), [`HSCAN`](../hscan) and [`ZSCAN`](../zscan) the first argument is the name of the key holding the Set, Hash or Sorted Set value. The `SCAN` command does not need any key name argument as it iterates keys in the current database, so the iterated object is the database itself.\n\n## SCAN basic usage\n\nSCAN is a cursor based iterator. This means that at every call of the command, the server returns an updated cursor that the user needs to use as the cursor argument in the next call.\n\nAn iteration starts when the cursor is set to 0, and terminates when the cursor returned by the server is 0. The following is an example of SCAN iteration:\n\n```\nredis 127.0.0.1:6379> scan 0\n1) \"17\"\n2)  1) \"key:12\"\n    2) \"key:8\"\n    3) \"key:4\"\n    4) \"key:14\"\n    5) \"key:16\"\n    6) \"key:17\"\n    7) \"key:15\"\n    8) \"key:10\"\n    9) \"key:3\"\n   10) \"key:7\"\n   11) \"key:1\"\nredis 127.0.0.1:6379> scan 17\n1) \"0\"\n2) 1) \"key:5\"\n   2) \"key:18\"\n   3) \"key:0\"\n   4) \"key:2\"\n   5) \"key:19\"\n   6) \"key:13\"\n   7) \"key:6\"\n   8) \"key:9\"\n   9) \"key:11\"\n```\n\nIn the example above, the first call uses zero as a cursor, to start the iteration. The second call uses the cursor returned by the previous call as the first element of the reply, that is, 17.\n\nAs you can see the **SCAN return value** is an array of two values: the first value is the new cursor to use in the next call, the second value is an array of elements.\n\nSince in the second call the returned cursor is 0, the server signaled to the caller that the iteration finished, and the collection was completely explored. Starting an iteration with a cursor value of 0, and calling `SCAN` until the returned cursor is 0 again is called a **full iteration**.\n\n## Scan guarantees\n\nThe `SCAN` command, and the other commands in the `SCAN` family, are able to provide to the user a set of guarantees associated to full iterations.\n\n- A full iteration always retrieves all the elements that were present in the collection from the start to the end of a full iteration. This means that if a given element is inside the collection when an iteration is started, and is still there when an iteration terminates, then at some point `SCAN` returned it to the user.\n- A full iteration never returns any element that was NOT present in the collection from the start to the end of a full iteration. So if an element was removed before the start of an iteration, and is never added back to the collection for all the time an iteration lasts, `SCAN` ensures that this element will never be returned.\n\nHowever because `SCAN` has very little state associated (just the cursor) it has the following drawbacks:\n\n- A given element may be returned multiple times. It is up to the application to handle the case of duplicated elements, for example only using the returned elements in order to perform operations that are safe when re-applied multiple times.\n- Elements that were not constantly present in the collection during a full iteration, may be returned or not: it is undefined.\n\n## Number of elements returned at every SCAN call\n\n`SCAN` family functions do not guarantee that the number of elements returned per call are in a given range. The commands are also allowed to return zero elements, and the client should not consider the iteration complete as long as the returned cursor is not zero.\n\nHowever the number of returned elements is reasonable, that is, in practical terms SCAN may return a maximum number of elements in the order of a few tens of elements when iterating a large collection, or may return all the elements of the collection in a single call when the iterated collection is small enough to be internally represented as an encoded data structure (this happens for small sets, hashes and sorted sets).\n\nHowever there is a way for the user to tune the order of magnitude of the number of returned elements per call using the **COUNT** option.\n\n## The COUNT option\n\nWhile `SCAN` does not provide guarantees about the number of elements returned at every iteration, it is possible to empirically adjust the behavior of `SCAN` using the **COUNT** option. Basically with COUNT the user specified the *amount of work that should be done at every call in order to retrieve elements from the collection*. This is **just a hint** for the implementation, however generally speaking this is what you could expect most of the times from the implementation.\n\n- The default COUNT value is 10.\n- When iterating the key space, or a Set, Hash or Sorted Set that is big enough to be represented by a hash table, assuming no **MATCH** option is used, the server will usually return *count* or a bit more than *count* elements per call. Please check the *why SCAN may return all the elements at once* section later in this document.\n- When iterating Sets encoded as intsets (small sets composed of just integers), or Hashes and Sorted Sets encoded as ziplists (small hashes and sets composed of small individual values), usually all the elements are returned in the first `SCAN` call regardless of the COUNT value.\n\nImportant: **there is no need to use the same COUNT value** for every iteration. The caller is free to change the count from one iteration to the other as required, as long as the cursor passed in the next call is the one obtained in the previous call to the command.\n\n## The MATCH option\n\nIt is possible to only iterate elements matching a given glob-style pattern, similarly to the behavior of the [`KEYS`](../keys) command that takes a pattern as its only argument.\n\nTo do so, just append the `MATCH <pattern>` arguments at the end of the `SCAN` command (it works with all the SCAN family commands).\n\nThis is an example of iteration using **MATCH**:\n\n```\nredis 127.0.0.1:6379> sadd myset 1 2 3 foo foobar feelsgood\n(integer) 6\nredis 127.0.0.1:6379> sscan myset 0 match f*\n1) \"0\"\n2) 1) \"foo\"\n   2) \"feelsgood\"\n   3) \"foobar\"\nredis 127.0.0.1:6379>\n```\n\nIt is important to note that the **MATCH** filter is applied after elements are retrieved from the collection, just before returning data to the client. This means that if the pattern matches very little elements inside the collection, `SCAN` will likely return no elements in most iterations. An example is shown below:\n\n```\nredis 127.0.0.1:6379> scan 0 MATCH *11*\n1) \"288\"\n2) 1) \"key:911\"\nredis 127.0.0.1:6379> scan 288 MATCH *11*\n1) \"224\"\n2) (empty list or set)\nredis 127.0.0.1:6379> scan 224 MATCH *11*\n1) \"80\"\n2) (empty list or set)\nredis 127.0.0.1:6379> scan 80 MATCH *11*\n1) \"176\"\n2) (empty list or set)\nredis 127.0.0.1:6379> scan 176 MATCH *11* COUNT 1000\n1) \"0\"\n2)  1) \"key:611\"\n    2) \"key:711\"\n    3) \"key:118\"\n    4) \"key:117\"\n    5) \"key:311\"\n    6) \"key:112\"\n    7) \"key:111\"\n    8) \"key:110\"\n    9) \"key:113\"\n   10) \"key:211\"\n   11) \"key:411\"\n   12) \"key:115\"\n   13) \"key:116\"\n   14) \"key:114\"\n   15) \"key:119\"\n   16) \"key:811\"\n   17) \"key:511\"\n   18) \"key:11\"\nredis 127.0.0.1:6379>\n```\n\nAs you can see most of the calls returned zero elements, but the last call where a COUNT of 1000 was used in order to force the command to do more scanning for that iteration.\n\n## The TYPE option\n\nYou can use the `TYPE` option to ask `SCAN` to only return objects that match a given `type`, allowing you to iterate through the database looking for keys of a specific type. The **TYPE** option is only available on the whole-database `SCAN`, not [`HSCAN`](../hscan) or [`ZSCAN`](../zscan) etc.\n\nThe `type` argument is the same string name that the [`TYPE`](../type) command returns. Note a quirk where some Redis types, such as GeoHashes, HyperLogLogs, Bitmaps, and Bitfields, may internally be implemented using other Redis types, such as a string or zset, so can't be distinguished from other keys of that same type by `SCAN`. For example, a ZSET and GEOHASH:\n\n```\nredis 127.0.0.1:6379> GEOADD geokey 0 0 value\n(integer) 1\nredis 127.0.0.1:6379> ZADD zkey 1000 value\n(integer) 1\nredis 127.0.0.1:6379> TYPE geokey\nzset\nredis 127.0.0.1:6379> TYPE zkey\nzset\nredis 127.0.0.1:6379> SCAN 0 TYPE zset\n1) \"0\"\n2) 1) \"geokey\"\n   2) \"zkey\"\n```\n\nIt is important to note that the **TYPE** filter is also applied after elements are retrieved from the database, so the option does not reduce the amount of work the server has to do to complete a full iteration, and for rare types you may receive no elements in many iterations.\n\n## Multiple parallel iterations\n\nIt is possible for an infinite number of clients to iterate the same collection at the same time, as the full state of the iterator is in the cursor, that is obtained and returned to the client at every call. No server side state is taken at all.\n\n## Terminating iterations in the middle\n\nSince there is no state server side, but the full state is captured by the cursor, the caller is free to terminate an iteration half-way without signaling this to the server in any way. An infinite number of iterations can be started and never terminated without any issue.\n\n## Calling SCAN with a corrupted cursor\n\nCalling `SCAN` with a broken, negative, out of range, or otherwise invalid cursor, will result in undefined behavior but never in a crash. What will be undefined is that the guarantees about the returned elements can no longer be ensured by the `SCAN` implementation.\n\nThe only valid cursors to use are:\n\n- The cursor value of 0 when starting an iteration.\n- The cursor returned by the previous call to SCAN in order to continue the iteration.\n\n## Guarantee of termination\n\nThe `SCAN` algorithm is guaranteed to terminate only if the size of the iterated collection remains bounded to a given maximum size, otherwise iterating a collection that always grows may result into `SCAN` to never terminate a full iteration.\n\nThis is easy to see intuitively: if the collection grows there is more and more work to do in order to visit all the possible elements, and the ability to terminate the iteration depends on the number of calls to `SCAN` and its COUNT option value compared with the rate at which the collection grows.\n\n## Why SCAN may return all the items of an aggregate data type in a single call?\n\nIn the `COUNT` option documentation, we state that sometimes this family of commands may return all the elements of a Set, Hash or Sorted Set at once in a single call, regardless of the `COUNT` option value. The reason why this happens is that the cursor-based iterator can be implemented, and is useful, only when the aggregate data type that we are scanning is represented as a hash table. However Redis uses a [memory optimization](https://redis.io/topics/memory-optimization) where small aggregate data types, until they reach a given amount of items or a given max size of single elements, are represented using a compact single-allocation packed encoding. When this is the case, `SCAN` has no meaningful cursor to return, and must iterate the whole data structure at once, so the only sane behavior it has is to return everything in a call.\n\nHowever once the data structures are bigger and are promoted to use real hash tables, the `SCAN` family of commands will resort to the normal behavior. Note that since this special behavior of returning all the elements is true only for small aggregates, it has no effects on the command complexity or latency. However the exact limits to get converted into real hash tables are [user configurable](https://redis.io/topics/memory-optimization), so the maximum number of elements you can see returned in a single call depends on how big an aggregate data type could be and still use the packed representation.\n\nAlso note that this behavior is specific of [`SSCAN`](../sscan), [`HSCAN`](../hscan) and [`ZSCAN`](../zscan). `SCAN` itself never shows this behavior because the key space is always represented by hash tables.\n\n## Return value\n\n`SCAN`, [`SSCAN`](../sscan), [`HSCAN`](../hscan) and [`ZSCAN`](../zscan) return a two elements multi-bulk reply, where the first element is a string representing an unsigned 64 bit number (the cursor), and the second element is a multi-bulk with an array of elements.\n\n- `SCAN` array of elements is a list of keys.\n- [`SSCAN`](../sscan) array of elements is a list of Set members.\n- [`HSCAN`](../hscan) array of elements contain two elements, a field and a value, for every returned element of the Hash.\n- [`ZSCAN`](../zscan) array of elements contain two elements, a member and its associated score, for every returned element of the sorted set.\n\n## Additional examples\n\nIteration of a Hash value.\n\n```\nredis 127.0.0.1:6379> hmset hash name Jack age 33\nOK\nredis 127.0.0.1:6379> hscan hash 0\n1) \"0\"\n2) 1) \"name\"\n   2) \"Jack\"\n   3) \"age\"\n   4) \"33\"\n```\n\n## History\n\n- Starting with Redis version 6.0.0: Added the `TYPE` subcommand.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/scan/](https://redis.io/commands/scan/)"
- name: scard
  id: scard/index
  summary: Returns the set cardinality (number of elements) of the set stored at key
  description: "# SCARD\n\n    SCARD\n\nSyntax\n\n``` command-syntax\nSCARD key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@set`, `@fast`,\n\nReturns the set cardinality (number of elements) of the set stored at `key`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the cardinality (number of elements) of the set, or `0` if `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSADD myset \"Hello\"\nSADD myset \"World\"\nSCARD myset\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/scard/](https://redis.io/commands/scard/)"
- name: script debug
  id: script-debug/index
  summary: Set the debug mode for subsequent scripts executed with EVAL
  description: "# SCRIPT\n\n    SCRIPT DEBUG\n\nSyntax\n\n``` command-syntax\nSCRIPT DEBUG <YES | SYNC | NO>\n```\n\nAvailable since:  \n3.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@scripting`,\n\nSet the debug mode for subsequent scripts executed with [`EVAL`](../eval). Redis includes a complete Lua debugger, codename LDB, that can be used to make the task of writing complex scripts much simpler. In debug mode Redis acts as a remote debugging server and a client, such as `redis-cli`, can execute scripts step by step, set breakpoints, inspect variables and more - for additional information about LDB refer to the [Redis Lua debugger](https://redis.io/topics/ldb) page.\n\n**Important note:** avoid debugging Lua scripts using your Redis production server. Use a development server instead.\n\nLDB can be enabled in one of two modes: asynchronous or synchronous. In asynchronous mode the server creates a forked debugging session that does not block and all changes to the data are **rolled back** after the session finishes, so debugging can be restarted using the same initial state. The alternative synchronous debug mode blocks the server while the debugging session is active and retains all changes to the data set once it ends.\n\n- `YES`. Enable non-blocking asynchronous debugging of Lua scripts (changes are discarded).\n- `SYNC`. Enable blocking synchronous debugging of Lua scripts (saves changes to data).\n- `NO`. Disables scripts debug mode.\n\nFor more information about [`EVAL`](../eval) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/script-debug/](https://redis.io/commands/script-debug/)"
- name: script exists
  id: script-exists/index
  summary: 'Time complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation)'
  description: "# SCRIPT\n\n    SCRIPT EXISTS\n\nSyntax\n\n``` command-syntax\nSCRIPT EXISTS sha1 [sha1 ...]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).\n\nACL categories:  \n`@slow`, `@scripting`,\n\nReturns information about the existence of the scripts in the script cache.\n\nThis command accepts one or more SHA1 digests and returns a list of ones or zeros to signal if the scripts are already defined or not inside the script cache. This can be useful before a pipelining operation to ensure that scripts are loaded (and if not, to load them using [`SCRIPT LOAD`](../script-load)) so that the pipelining operation can be performed solely using [`EVALSHA`](../evalsha) instead of [`EVAL`](../eval) to save bandwidth.\n\nFor more information about [`EVAL`](../eval) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) The command returns an array of integers that correspond to the specified SHA1 digest arguments. For every corresponding SHA1 digest of a script that actually exists in the script cache, a 1 is returned, otherwise 0 is returned.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/script-exists/](https://redis.io/commands/script-exists/)"
- name: script flush
  id: script-flush/index
  summary: Flush the Lua scripts cache
  description: "# SCRIPT\n\n    SCRIPT FLUSH\n\nSyntax\n\n``` command-syntax\nSCRIPT FLUSH [ASYNC | SYNC]\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(N) with N being the number of scripts in cache\n\nACL categories:  \n`@slow`, `@scripting`,\n\nFlush the Lua scripts cache.\n\nBy default, `SCRIPT FLUSH` will synchronously flush the cache. Starting with Redis 6.2, setting the **lazyfree-lazy-user-flush** configuration directive to \"yes\" changes the default flush mode to asynchronous.\n\nIt is possible to use one of the following modifiers to dictate the flushing mode explicitly:\n\n- `ASYNC`: flushes the cache asynchronously\n- `SYNC`: flushes the cache synchronously\n\nFor more information about [`EVAL`](../eval) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Behavior change history\n\n- `>= 6.2.0`: Default flush behavior now configurable by the **lazyfree-lazy-user-flush** configuration directive.\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `ASYNC` and `SYNC` flushing mode modifiers.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/script-flush/](https://redis.io/commands/script-flush/)"
- name: script kill
  id: script-kill/index
  summary: Kills the currently executing EVAL script, assuming no write operation was yet performed by the script
  description: "# SCRIPT\n\n    SCRIPT KILL\n\nSyntax\n\n``` command-syntax\nSCRIPT KILL\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@scripting`,\n\nKills the currently executing [`EVAL`](../eval) script, assuming no write operation was yet performed by the script.\n\nThis command is mainly useful to kill a script that is running for too much time(for instance, because it entered an infinite loop because of a bug). The script will be killed, and the client currently blocked into EVAL will see the command returning with an error.\n\nIf the script has already performed write operations, it can not be killed in this way because it would violate Lua's script atomicity contract. In such a case, only `SHUTDOWN NOSAVE` can kill the script, killing the Redis process in a hard way and preventing it from persisting with half-written information.\n\nFor more information about [`EVAL`](../eval) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/script-kill/](https://redis.io/commands/script-kill/)"
- name: script load
  id: script-load/index
  summary: 'Time complexity: O(N) with N being the length in bytes of the script body'
  description: "# SCRIPT\n\n    SCRIPT LOAD\n\nSyntax\n\n``` command-syntax\nSCRIPT LOAD script\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(N) with N being the length in bytes of the script body.\n\nACL categories:  \n`@slow`, `@scripting`,\n\nLoad a script into the scripts cache, without executing it. After the specified command is loaded into the script cache it will be callable using [`EVALSHA`](../evalsha) with the correct SHA1 digest of the script, exactly like after the first successful invocation of [`EVAL`](../eval).\n\nThe script is guaranteed to stay in the script cache forever (unless `SCRIPT FLUSH` is called).\n\nThe command works in the same way even if the script was already present in the script cache.\n\nFor more information about [`EVAL`](../eval) scripts please refer to [Introduction to Eval Scripts](https://redis.io/topics/eval-intro).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) This command returns the SHA1 digest of the script added into the script cache.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/script-load/](https://redis.io/commands/script-load/)"
- name: sdiff
  id: sdiff/index
  summary: 'Time complexity: O(N) where N is the total number of elements in all given sets'
  description: "# SDIFF\n\n    SDIFF\n\nSyntax\n\n``` command-syntax\nSDIFF key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the total number of elements in all given sets.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nReturns the members of the set resulting from the difference between the first set and all the successive sets.\n\nFor example:\n\n```\nkey1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSDIFF key1 key2 key3 = {b,d}\n```\n\nKeys that do not exist are considered to be empty sets.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list with members of the resulting set.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSDIFF key1 key2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sdiff/](https://redis.io/commands/sdiff/)"
- name: sdiffstore
  id: sdiffstore/index
  summary: 'Time complexity: O(N) where N is the total number of elements in all given sets'
  description: "# SDIFFSTORE\n\n    SDIFFSTORE\n\nSyntax\n\n``` command-syntax\nSDIFFSTORE destination key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the total number of elements in all given sets.\n\nACL categories:  \n`@write`, `@set`, `@slow`,\n\nThis command is equal to [`SDIFF`](../sdiff), but instead of returning the resulting set, it is stored in `destination`.\n\nIf `destination` already exists, it is overwritten.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting set.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSDIFFSTORE key key1 key2\nSMEMBERS key\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sdiffstore/](https://redis.io/commands/sdiffstore/)"
- name: select
  id: select/index
  summary: Select the Redis logical database having the specified zero-based numeric index
  description: "# SELECT\n\n    SELECT\n\nSyntax\n\n``` command-syntax\nSELECT index\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@connection`,\n\nSelect the Redis logical database having the specified zero-based numeric index. New connections always use the database 0.\n\nSelectable Redis databases are a form of namespacing: all databases are still persisted in the same RDB / AOF file. However different databases can have keys with the same name, and commands like [`FLUSHDB`](../flushdb), [`SWAPDB`](../swapdb) or [`RANDOMKEY`](../randomkey) work on specific databases.\n\nIn practical terms, Redis databases should be used to separate different keys belonging to the same application (if needed), and not to use a single Redis instance for multiple unrelated applications.\n\nWhen using Redis Cluster, the `SELECT` command cannot be used, since Redis Cluster only supports database zero. In the case of a Redis Cluster, having multiple databases would be useless and an unnecessary source of complexity. Commands operating atomically on a single database would not be possible with the Redis Cluster design and goals.\n\nSince the currently selected database is a property of the connection, clients should track the currently selected database and re-select it on reconnection. While there is no command in order to query the selected database in the current connection, the [`CLIENT LIST`](../client-list) output shows, for each client, the currently selected database.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/select/](https://redis.io/commands/select/)"
- name: set
  id: set/index
  summary: Set key to hold the string value
  description: "# SET\n\n    SET\n\nSyntax\n\n``` command-syntax\nSET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@slow`,\n\nSet `key` to hold the string `value`. If `key` already holds a value, it is overwritten, regardless of its type. Any previous time to live associated with the key is discarded on successful `SET` operation.\n\n## Options\n\nThe `SET` command supports a set of options that modify its behavior:\n\n- `EX` *seconds* -- Set the specified expire time, in seconds.\n- `PX` *milliseconds* -- Set the specified expire time, in milliseconds.\n- `EXAT` *timestamp-seconds* -- Set the specified Unix time at which the key will expire, in seconds.\n- `PXAT` *timestamp-milliseconds* -- Set the specified Unix time at which the key will expire, in milliseconds.\n- `NX` -- Only set the key if it does not already exist.\n- `XX` -- Only set the key if it already exist.\n- `KEEPTTL` -- Retain the time to live associated with the key.\n- `GET` -- Return the old string stored at key, or nil if key did not exist. An error is returned and `SET` aborted if the value stored at key is not a string.\n\nNote: Since the `SET` command options can replace [`SETNX`](../setnx), [`SETEX`](../setex), [`PSETEX`](../psetex), [`GETSET`](../getset), it is possible that in future versions of Redis these commands will be deprecated and finally removed.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if `SET` was executed correctly.\n\n[Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): `(nil)` if the `SET` operation was not performed because the user specified the `NX` or `XX` option but the condition was not met.\n\nIf the command is issued with the `GET` option, the above does not apply. It will instead reply as follows, regardless if the `SET` was actually performed:\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the old string value stored at key.\n\n[Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): `(nil)` if the key did not exist.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nGET mykey\n```\n\nSET anotherkey \"will expire in a minute\" EX 60\n\n## Patterns\n\n**Note:** The following pattern is discouraged in favor of [the Redlock algorithm](https://redis.io/topics/distlock) which is only a bit more complex to implement, but offers better guarantees and is fault tolerant.\n\nThe command `SET resource-name anystring NX EX max-lock-time` is a simple way to implement a locking system with Redis.\n\nA client can acquire the lock if the above command returns `OK` (or retry after some time if the command returns Nil), and remove the lock just using [`DEL`](../del).\n\nThe lock will be auto-released after the expire time is reached.\n\nIt is possible to make this system more robust modifying the unlock schema as follows:\n\n- Instead of setting a fixed string, set a non-guessable large random string, called token.\n- Instead of releasing the lock with [`DEL`](../del), send a script that only removes the key if the value matches.\n\nThis avoids that a client will try to release the lock after the expire time deleting the key created by another client that acquired the lock later.\n\nAn example of unlock script would be similar to the following:\n\n    if redis.call(\"get\",KEYS[1]) == ARGV[1]\n    then\n        return redis.call(\"del\",KEYS[1])\n    else\n        return 0\n    end\n\nThe script should be called with `EVAL ...script... 1 resource-name token-value`\n\n## History\n\n- Starting with Redis version 2.6.12: Added the `EX`, `PX`, `NX` and `XX` options.\n- Starting with Redis version 6.0.0: Added the `KEEPTTL` option.\n- Starting with Redis version 6.2.0: Added the `GET`, `EXAT` and `PXAT` option.\n- Starting with Redis version 7.0.0: Allowed the `NX` and `GET` options to be used together.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/set/](https://redis.io/commands/set/)"
- name: setbit
  id: setbit/index
  summary: Sets or clears the bit at offset in the string value stored at key
  description: "# SETBIT\n\n    SETBIT\n\nSyntax\n\n``` command-syntax\nSETBIT key offset value\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@bitmap`, `@slow`,\n\nSets or clears the bit at *offset* in the string value stored at *key*.\n\nThe bit is either set or cleared depending on *value*, which can be either 0 or 1.\n\nWhen *key* does not exist, a new string value is created. The string is grown to make sure it can hold a bit at *offset*. The *offset* argument is required to be greater than or equal to 0, and smaller than 2^32 (this limits bitmaps to 512MB). When the string at *key* is grown, added bits are set to 0.\n\n**Warning**: When setting the last possible bit (*offset* equal to 2^32 -1) and the string value stored at *key* does not yet hold a string value, or holds a small string value, Redis needs to allocate all intermediate memory which can block the server for some time. On a 2010 MacBook Pro, setting bit number 2^32 -1 (512MB allocation) takes ~300ms, setting bit number 2^30 -1 (128MB allocation) takes ~80ms, setting bit number 2^28 -1 (32MB allocation) takes ~30ms and setting bit number 2^26 -1 (8MB allocation) takes ~8ms. Note that once this first allocation is done, subsequent calls to `SETBIT` for the same *key* will not have the allocation overhead.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the original bit value stored at *offset*.\n\n## Examples\n\n``` redis-cli\nSETBIT mykey 7 1\nSETBIT mykey 7 0\nGET mykey\n```\n\n## Pattern: accessing the entire bitmap\n\nThere are cases when you need to set all the bits of single bitmap at once, for example when initializing it to a default non-zero value. It is possible to do this with multiple calls to the `SETBIT` command, one for each bit that needs to be set. However, so as an optimization you can use a single [`SET`](../set) command to set the entire bitmap.\n\nBitmaps are not an actual data type, but a set of bit-oriented operations defined on the String type (for more information refer to the [Bitmaps section of the Data Types Introduction page](https://redis.io/topics/data-types-intro#bitmaps)). This means that bitmaps can be used with string commands, and most importantly with [`SET`](../set) and [`GET`](../get).\n\nBecause Redis' strings are binary-safe, a bitmap is trivially encoded as a bytes stream. The first byte of the string corresponds to offsets 0..7 of the bitmap, the second byte to the 8..15 range, and so forth.\n\nFor example, after setting a few bits, getting the string value of the bitmap would look like this:\n\n```\n> SETBIT bitmapsarestrings 2 1\n> SETBIT bitmapsarestrings 3 1\n> SETBIT bitmapsarestrings 5 1\n> SETBIT bitmapsarestrings 10 1\n> SETBIT bitmapsarestrings 11 1\n> SETBIT bitmapsarestrings 14 1\n> GET bitmapsarestrings\n\"42\"\n```\n\nBy getting the string representation of a bitmap, the client can then parse the response's bytes by extracting the bit values using native bit operations in its native programming language. Symmetrically, it is also possible to set an entire bitmap by performing the bits-to-bytes encoding in the client and calling [`SET`](../set) with the resultant string.\n\n## Pattern: setting multiple bits\n\n`SETBIT` excels at setting single bits, and can be called several times when multiple bits need to be set. To optimize this operation you can replace multiple `SETBIT` calls with a single call to the variadic [`BITFIELD`](../bitfield) command and the use of fields of type `u1`.\n\nFor example, the example above could be replaced by:\n\n```\n> BITFIELD bitsinabitmap SET u1 2 1 SET u1 3 1 SET u1 5 1 SET u1 10 1 SET u1 11 1 SET u1 14 1\n```\n\n## Advanced Pattern: accessing bitmap ranges\n\nIt is also possible to use the [`GETRANGE`](../getrange) and [`SETRANGE`](../setrange) string commands to efficiently access a range of bit offsets in a bitmap. Below is a sample implementation in idiomatic Redis Lua scripting that can be run with the [`EVAL`](../eval) command:\n\n```\n--[[\nSets a bitmap range\n\nBitmaps are stored as Strings in Redis. A range spans one or more bytes,\nso we can call [`SETRANGE`](/commands/setrange) when entire bytes need to be set instead of flipping\nindividual bits. Also, to avoid multiple internal memory allocations in\nRedis, we traverse in reverse.\nExpected input:\n  KEYS[1] - bitfield key\n  ARGV[1] - start offset (0-based, inclusive)\n  ARGV[2] - end offset (same, should be bigger than start, no error checking)\n  ARGV[3] - value (should be 0 or 1, no error checking)\n]]--\n\n-- A helper function to stringify a binary string to semi-binary format\nlocal function tobits(str)\n  local r = ''\n  for i = 1, string.len(str) do\n    local c = string.byte(str, i)\n    local b = ' '\n    for j = 0, 7 do\n      b = tostring(bit.band(c, 1)) .. b\n      c = bit.rshift(c, 1)\n    end\n    r = r .. b\n  end\n  return r\nend\n\n-- Main\nlocal k = KEYS[1]\nlocal s, e, v = tonumber(ARGV[1]), tonumber(ARGV[2]), tonumber(ARGV[3])\n\n-- First treat the dangling bits in the last byte\nlocal ms, me = s % 8, (e + 1) % 8\nif me > 0 then\n  local t = math.max(e - me + 1, s)\n  for i = e, t, -1 do\n    redis.call('SETBIT', k, i, v)\n  end\n  e = t\nend\n\n-- Then the danglings in the first byte\nif ms > 0 then\n  local t = math.min(s - ms + 7, e)\n  for i = s, t, 1 do\n    redis.call('SETBIT', k, i, v)\n  end\n  s = t + 1\nend\n\n-- Set a range accordingly, if at all\nlocal rs, re = s / 8, (e + 1) / 8\nlocal rl = re - rs\nif rl > 0 then\n  local b = '\\255'\n  if 0 == v then\n    b = '\\0'\n  end\n  redis.call('SETRANGE', k, rs, string.rep(b, rl))\nend\n```\n\n**Note:** the implementation for getting a range of bit offsets from a bitmap is left as an exercise to the reader.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/setbit/](https://redis.io/commands/setbit/)"
- name: setex
  id: setex/index
  summary: As of Redis version 2.6.12, this command is regarded as deprecated
  description: "# SETEX\n\n    SETEX (deprecated)\n\nAs of Redis version 2.6.12, this command is regarded as deprecated.\n\nIt can be replaced by [`SET`](../set) with the `EX` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nSETEX key seconds value\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@slow`,\n\nSet `key` to hold the string `value` and set `key` to timeout after a given number of seconds. This command is equivalent to:\n\n```\nSET key value EX seconds\n```\n\nAn error is returned when `seconds` is invalid.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n## Examples\n\n``` redis-cli\nSETEX mykey 10 \"Hello\"\nTTL mykey\nGET mykey\n```\n\n## See also\n\n[`TTL`](../ttl)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/setex/](https://redis.io/commands/setex/)"
- name: setnx
  id: setnx/index
  summary: As of Redis version 2.6.12, this command is regarded as deprecated
  description: "# SETNX\n\n    SETNX (deprecated)\n\nAs of Redis version 2.6.12, this command is regarded as deprecated.\n\nIt can be replaced by [`SET`](../set) with the `NX` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nSETNX key value\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@string`, `@fast`,\n\nSet `key` to hold string `value` if `key` does not exist. In that case, it is equal to [`SET`](../set). When `key` already holds a value, no operation is performed. `SETNX` is short for \"**SET** if **N**ot e**X**ists\".\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the key was set\n- `0` if the key was not set\n\n## Examples\n\n``` redis-cli\nSETNX mykey \"Hello\"\nSETNX mykey \"World\"\nGET mykey\n```\n\n## Design pattern: Locking with `SETNX`\n\n**Please note that:**\n\n1.  The following pattern is discouraged in favor of [the Redlock algorithm](https://redis.io/topics/distlock) which is only a bit more complex to implement, but offers better guarantees and is fault tolerant.\n2.  We document the old pattern anyway because certain existing implementations link to this page as a reference. Moreover it is an interesting example of how Redis commands can be used in order to mount programming primitives.\n3.  Anyway even assuming a single-instance locking primitive, starting with 2.6.12 it is possible to create a much simpler locking primitive, equivalent to the one discussed here, using the [`SET`](../set) command to acquire the lock, and a simple Lua script to release the lock. The pattern is documented in the [`SET`](../set) command page.\n\nThat said, `SETNX` can be used, and was historically used, as a locking primitive. For example, to acquire the lock of the key `foo`, the client could try the following:\n\n```\nSETNX lock.foo <current Unix time + lock timeout + 1>\n```\n\nIf `SETNX` returns `1` the client acquired the lock, setting the `lock.foo` key to the Unix time at which the lock should no longer be considered valid. The client will later use `DEL lock.foo` in order to release the lock.\n\nIf `SETNX` returns `0` the key is already locked by some other client. We can either return to the caller if it's a non blocking lock, or enter a loop retrying to hold the lock until we succeed or some kind of timeout expires.\n\n### Handling deadlocks\n\nIn the above locking algorithm there is a problem: what happens if a client fails, crashes, or is otherwise not able to release the lock? It's possible to detect this condition because the lock key contains a UNIX timestamp. If such a timestamp is equal to the current Unix time the lock is no longer valid.\n\nWhen this happens we can't just call [`DEL`](../del) against the key to remove the lock and then try to issue a `SETNX`, as there is a race condition here, when multiple clients detected an expired lock and are trying to release it.\n\n- C1 and C2 read `lock.foo` to check the timestamp, because they both received `0` after executing `SETNX`, as the lock is still held by C3 that crashed after holding the lock.\n- C1 sends `DEL lock.foo`\n- C1 sends `SETNX lock.foo` and it succeeds\n- C2 sends `DEL lock.foo`\n- C2 sends `SETNX lock.foo` and it succeeds\n- **ERROR**: both C1 and C2 acquired the lock because of the race condition.\n\nFortunately, it's possible to avoid this issue using the following algorithm. Let's see how C4, our sane client, uses the good algorithm:\n\n- C4 sends `SETNX lock.foo` in order to acquire the lock\n\n- The crashed client C3 still holds it, so Redis will reply with `0` to C4.\n\n- C4 sends `GET lock.foo` to check if the lock expired. If it is not, it will sleep for some time and retry from the start.\n\n- Instead, if the lock is expired because the Unix time at `lock.foo` is older than the current Unix time, C4 tries to perform:\n\n  ```\n  GETSET lock.foo <current Unix timestamp + lock timeout + 1>\n  ```\n\n- Because of the [`GETSET`](../getset) semantic, C4 can check if the old value stored at `key` is still an expired timestamp. If it is, the lock was acquired.\n\n- If another client, for instance C5, was faster than C4 and acquired the lock with the [`GETSET`](../getset) operation, the C4 [`GETSET`](../getset) operation will return a non expired timestamp. C4 will simply restart from the first step. Note that even if C4 set the key a bit a few seconds in the future this is not a problem.\n\nIn order to make this locking algorithm more robust, a client holding a lock should always check the timeout didn't expire before unlocking the key with [`DEL`](../del) because client failures can be complex, not just crashing but also blocking a lot of time against some operations and trying to issue [`DEL`](../del) after a lot of time (when the LOCK is already held by another client).\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/setnx/](https://redis.io/commands/setnx/)"
- name: setrange
  id: setrange/index
  summary: 'Time complexity: O(1), not counting the time taken to copy the new string in place'
  description: "# SETRANGE\n\n    SETRANGE\n\nSyntax\n\n``` command-syntax\nSETRANGE key offset value\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.\n\nACL categories:  \n`@write`, `@string`, `@slow`,\n\nOverwrites part of the string stored at *key*, starting at the specified offset, for the entire length of *value*. If the offset is larger than the current length of the string at *key*, the string is padded with zero-bytes to make *offset* fit. Non-existing keys are considered as empty strings, so this command will make sure it holds a string large enough to be able to set *value* at *offset*.\n\nNote that the maximum offset that you can set is 2^29 -1 (536870911), as Redis Strings are limited to 512 megabytes. If you need to grow beyond this size, you can use multiple keys.\n\n**Warning**: When setting the last possible byte and the string value stored at *key* does not yet hold a string value, or holds a small string value, Redis needs to allocate all intermediate memory which can block the server for some time. On a 2010 MacBook Pro, setting byte number 536870911 (512MB allocation) takes ~300ms, setting byte number 134217728 (128MB allocation) takes ~80ms, setting bit number 33554432 (32MB allocation) takes ~30ms and setting bit number 8388608 (8MB allocation) takes ~8ms. Note that once this first allocation is done, subsequent calls to `SETRANGE` for the same *key* will not have the allocation overhead.\n\n## Patterns\n\nThanks to `SETRANGE` and the analogous [`GETRANGE`](../getrange) commands, you can use Redis strings as a linear array with O(1) random access. This is a very fast and efficient storage in many real world use cases.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the string after it was modified by the command.\n\n## Examples\n\nBasic usage:\n\n``` redis-cli\nSET key1 \"Hello World\"\nSETRANGE key1 6 \"Redis\"\nGET key1\n```\n\nExample of zero padding:\n\n``` redis-cli\nSETRANGE key2 6 \"Redis\"\nGET key2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/setrange/](https://redis.io/commands/setrange/)"
- name: shutdown
  id: shutdown/index
  summary: If persistence is enabled this commands makes sure that Redis is switched off without any data loss
  description: "# SHUTDOWN\n\n    SHUTDOWN\n\nSyntax\n\n``` command-syntax\nSHUTDOWN [NOSAVE | SAVE] [NOW] [FORCE] [ABORT]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe command behavior is the following:\n\n- If there are any replicas lagging behind in replication:\n  - Pause clients attempting to write by performing a [`CLIENT PAUSE`](../client-pause) with the `WRITE` option.\n  - Wait up to the configured `shutdown-timeout` (default 10 seconds) for replicas to catch up the replication offset.\n- Stop all the clients.\n- Perform a blocking SAVE if at least one **save point** is configured.\n- Flush the Append Only File if AOF is enabled.\n- Quit the server.\n\nIf persistence is enabled this commands makes sure that Redis is switched off without any data loss.\n\nNote: A Redis instance that is configured for not persisting on disk (no AOF configured, nor \"save\" directive) will not dump the RDB file on `SHUTDOWN`, as usually you don't want Redis instances used only for caching to block on when shutting down.\n\nAlso note: If Redis receives one of the signals `SIGTERM` and `SIGINT`, the same shutdown sequence is performed. See also [Signal Handling](https://redis.io/topics/signals).\n\n## Modifiers\n\nIt is possible to specify optional modifiers to alter the behavior of the command. Specifically:\n\n- **SAVE** will force a DB saving operation even if no save points are configured.\n- **NOSAVE** will prevent a DB saving operation even if one or more save points are configured.\n- **NOW** skips waiting for lagging replicas, i.e. it bypasses the first step in the shutdown sequence.\n- **FORCE** ignores any errors that would normally prevent the server from exiting. For details, see the following section.\n- **ABORT** cancels an ongoing shutdown and cannot be combined with other flags.\n\n## Conditions where a SHUTDOWN fails\n\nWhen a save point is configured or the **SAVE** modifier is specified, the shutdown may fail if the RDB file can't be saved. Then, the server continues to run in order to ensure no data loss. This may be bypassed using the **FORCE** modifier, causing the server to exit anyway.\n\nWhen the Append Only File is enabled the shutdown may fail because the system is in a state that does not allow to safely immediately persist on disk.\n\nNormally if there is an AOF child process performing an AOF rewrite, Redis will simply kill it and exit. However, there are situations where it is unsafe to do so and, unless the **FORCE** modifier is specified, the **SHUTDOWN** command will be refused with an error instead. This happens in the following situations:\n\n- The user just turned on AOF, and the server triggered the first AOF rewrite in order to create the initial AOF file. In this context, stopping will result in losing the dataset at all: once restarted, the server will potentially have AOF enabled without having any AOF file at all.\n- A replica with AOF enabled, reconnected with its master, performed a full resynchronization, and restarted the AOF file, triggering the initial AOF creation process. In this case not completing the AOF rewrite is dangerous because the latest dataset received from the master would be lost. The new master can actually be even a different instance (if the **REPLICAOF** or **SLAVEOF** command was used in order to reconfigure the replica), so it is important to finish the AOF rewrite and start with the correct data set representing the data set in memory when the server was terminated.\n\nThere are situations when we want just to terminate a Redis instance ASAP, regardless of what its content is. In such a case, the command **SHUTDOWN NOW NOSAVE FORCE** can be used. In versions before 7.0, where the **NOW** and **FORCE** flags are not available, the right combination of commands is to send a **CONFIG appendonly no** followed by a **SHUTDOWN NOSAVE**. The first command will turn off the AOF if needed, and will terminate the AOF rewriting child if there is one active. The second command will not have any problem to execute since the AOF is no longer enabled.\n\n## Minimize the risk of data loss\n\nSince Redis 7.0, the server waits for lagging replicas up to a configurable `shutdown-timeout`, by default 10 seconds, before shutting down. This provides a best effort minimizing the risk of data loss in a situation where no save points are configured and AOF is disabled. Before version 7.0, shutting down a heavily loaded master node in a diskless setup was more likely to result in data loss. To minimize the risk of data loss in such setups, it's advised to trigger a manual [`FAILOVER`](../failover) (or [`CLUSTER FAILOVER`](../cluster-failover)) to demote the master to a replica and promote one of the replicas to be the new master, before shutting down a master node.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if `ABORT` was specified and shutdown was aborted. On successful shutdown, nothing is returned since the server quits and the connection is closed. On failure, an error is returned.\n\n## Behavior change history\n\n- `>= 7.0.0`: Introduced waiting for lagging replicas before exiting.\n\n## History\n\n- Starting with Redis version 7.0.0: Added the `NOW`, `FORCE` and `ABORT` modifiers.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/shutdown/](https://redis.io/commands/shutdown/)"
- name: sinter
  id: sinter/index
  summary: 'Time complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets'
  description: "# SINTER\n\n    SINTER\n\nSyntax\n\n``` command-syntax\nSINTER key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N\\*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nReturns the members of the set resulting from the intersection of all the given sets.\n\nFor example:\n\n```\nkey1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSINTER key1 key2 key3 = {c}\n```\n\nKeys that do not exist are considered to be empty sets. With one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list with members of the resulting set.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSINTER key1 key2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sinter/](https://redis.io/commands/sinter/)"
- name: sintercard
  id: sintercard/index
  summary: 'Time complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets'
  description: "# SINTERCARD\n\n    SINTERCARD\n\nSyntax\n\n``` command-syntax\nSINTERCARD numkeys key [key ...] [LIMIT limit]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N\\*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nThis command is similar to [`SINTER`](../sinter), but instead of returning the result set, it returns just the cardinality of the result. Returns the cardinality of the set which would result from the intersection of all the given sets.\n\nKeys that do not exist are considered to be empty sets. With one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).\n\nBy default, the command calculates the cardinality of the intersection of all given sets. When provided with the optional `LIMIT` argument (which defaults to 0 and means unlimited), if the intersection cardinality reaches limit partway through the computation, the algorithm will exit and yield limit as the cardinality. Such implementation ensures a significant speedup for queries where the limit is lower than the actual intersection cardinality.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting intersection.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key1 \"d\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSINTER key1 key2\nSINTERCARD 2 key1 key2\nSINTERCARD 2 key1 key2 LIMIT 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sintercard/](https://redis.io/commands/sintercard/)"
- name: sinterstore
  id: sinterstore/index
  summary: 'Time complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets'
  description: "# SINTERSTORE\n\n    SINTERSTORE\n\nSyntax\n\n``` command-syntax\nSINTERSTORE destination key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N\\*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\n\nACL categories:  \n`@write`, `@set`, `@slow`,\n\nThis command is equal to [`SINTER`](../sinter), but instead of returning the resulting set, it is stored in `destination`.\n\nIf `destination` already exists, it is overwritten.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting set.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSINTERSTORE key key1 key2\nSMEMBERS key\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sinterstore/](https://redis.io/commands/sinterstore/)"
- name: sismember
  id: sismember/index
  summary: Returns if member is a member of the set stored at key
  description: "# SISMEMBER\n\n    SISMEMBER\n\nSyntax\n\n``` command-syntax\nSISMEMBER key member\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@set`, `@fast`,\n\nReturns if `member` is a member of the set stored at `key`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the element is a member of the set.\n- `0` if the element is not a member of the set, or if `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSADD myset \"one\"\nSISMEMBER myset \"one\"\nSISMEMBER myset \"two\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sismember/](https://redis.io/commands/sismember/)"
- name: slaveof
  id: slaveof/index
  summary: As of Redis version 5.0.0, this command is regarded as deprecated
  description: "# SLAVEOF\n\n    SLAVEOF (deprecated)\n\nAs of Redis version 5.0.0, this command is regarded as deprecated.\n\nIt can be replaced by [`REPLICAOF`](../replicaof) when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nSLAVEOF host port\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\n**A note about the word slave used in this man page and command name**: starting with Redis version 5, if not for backward compatibility, the Redis project no longer uses the word slave. Please use the new command [`REPLICAOF`](../replicaof). The command `SLAVEOF` will continue to work for backward compatibility.\n\nThe `SLAVEOF` command can change the replication settings of a replica on the fly. If a Redis server is already acting as replica, the command `SLAVEOF` NO ONE will turn off the replication, turning the Redis server into a MASTER. In the proper form `SLAVEOF` hostname port will make the server a replica of another server listening at the specified hostname and port.\n\nIf a server is already a replica of some master, `SLAVEOF` hostname port will stop the replication against the old server and start the synchronization against the new one, discarding the old dataset.\n\nThe form `SLAVEOF` NO ONE will stop replication, turning the server into a MASTER, but will not discard the replication. So, if the old master stops working, it is possible to turn the replica into a master and set the application to use this new master in read/write. Later when the other Redis server is fixed, it can be reconfigured to work as a replica.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/slaveof/](https://redis.io/commands/slaveof/)"
- name: slowlog get
  id: slowlog-get/index
  summary: The SLOWLOG GET command returns entries from the slow log in chronological order
  description: "# SLOWLOG\n\n    SLOWLOG GET\n\nSyntax\n\n``` command-syntax\nSLOWLOG GET [count]\n```\n\nAvailable since:  \n2.2.12\n\nTime complexity:  \nO(N) where N is the number of entries returned\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThe `SLOWLOG GET` command returns entries from the slow log in chronological order.\n\nThe Redis Slow Log is a system to log queries that exceeded a specified execution time. The execution time does not include I/O operations like talking with the client, sending the reply and so forth, but just the time needed to actually execute the command (this is the only stage of command execution where the thread is blocked and can not serve other requests in the meantime).\n\nA new entry is added to the slow log whenever a command exceeds the execution time threshold defined by the `slowlog-log-slower-than` configuration directive. The maximum number of entries in the slow log is governed by the `slowlog-max-len` configuration directive.\n\nBy default the command returns latest ten entries in the log. The optional `count` argument limits the number of returned entries, so the command returns at most up to `count` entries, the special number -1 means return all entries.\n\nEach entry from the slow log is comprised of the following six values:\n\n1.  A unique progressive identifier for every slow log entry.\n2.  The unix timestamp at which the logged command was processed.\n3.  The amount of time needed for its execution, in microseconds.\n4.  The array composing the arguments of the command.\n5.  Client IP address and port.\n6.  Client name if set via the [`CLIENT SETNAME`](../client-setname) command.\n\nThe entry's unique ID can be used in order to avoid processing slow log entries multiple times (for instance you may have a script sending you an email alert for every new slow log entry). The ID is never reset in the course of the Redis server execution, only a server restart will reset it.\n\n@reply\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of slow log entries.\n\n## History\n\n- Starting with Redis version 4.0.0: Added client IP address, port and name to the reply.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/slowlog-get/](https://redis.io/commands/slowlog-get/)"
- name: slowlog len
  id: slowlog-len/index
  summary: This command returns the current number of entries in the slow log
  description: "# SLOWLOG\n\n    SLOWLOG LEN\n\nSyntax\n\n``` command-syntax\nSLOWLOG LEN\n```\n\nAvailable since:  \n2.2.12\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThis command returns the current number of entries in the slow log.\n\nA new entry is added to the slow log whenever a command exceeds the execution time threshold defined by the `slowlog-log-slower-than` configuration directive. The maximum number of entries in the slow log is governed by the `slowlog-max-len` configuration directive. Once the slog log reaches its maximal size, the oldest entry is removed whenever a new entry is created. The slow log can be cleared with the [`SLOWLOG RESET`](../slowlog-reset) command.\n\n@reply\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers)\n\nThe number of entries in the slow log.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/slowlog-len/](https://redis.io/commands/slowlog-len/)"
- name: slowlog reset
  id: slowlog-reset/index
  summary: This command resets the slow log, clearing all entries in it
  description: "# SLOWLOG\n\n    SLOWLOG RESET\n\nSyntax\n\n``` command-syntax\nSLOWLOG RESET\n```\n\nAvailable since:  \n2.2.12\n\nTime complexity:  \nO(N) where N is the number of entries in the slowlog\n\nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nThis command resets the slow log, clearing all entries in it.\n\nOnce deleted the information is lost forever.\n\n@reply\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK`\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/slowlog-reset/](https://redis.io/commands/slowlog-reset/)"
- name: smembers
  id: smembers/index
  summary: 'Time complexity: O(N) where N is the set cardinality'
  description: "# SMEMBERS\n\n    SMEMBERS\n\nSyntax\n\n``` command-syntax\nSMEMBERS key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the set cardinality.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nReturns all the members of the set value stored at `key`.\n\nThis has the same effect as running [`SINTER`](../sinter) with one argument `key`.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): all elements of the set.\n\n## Examples\n\n``` redis-cli\nSADD myset \"Hello\"\nSADD myset \"World\"\nSMEMBERS myset\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/smembers/](https://redis.io/commands/smembers/)"
- name: smismember
  id: smismember/index
  summary: Returns whether each member is a member of the set stored at key
  description: "# SMISMEMBER\n\n    SMISMEMBER\n\nSyntax\n\n``` command-syntax\nSMISMEMBER key member [member ...]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N) where N is the number of elements being checked for membership\n\nACL categories:  \n`@read`, `@set`, `@fast`,\n\nReturns whether each `member` is a member of the set stored at `key`.\n\nFor every `member`, `1` is returned if the value is a member of the set, or `0` if the element is not a member of the set or if `key` does not exist.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list representing the membership of the given elements, in the same order as they are requested.\n\n## Examples\n\n``` redis-cli\nSADD myset \"one\"\nSADD myset \"one\"\nSMISMEMBER myset \"one\" \"notamember\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/smismember/](https://redis.io/commands/smismember/)"
- name: smove
  id: smove/index
  summary: Move member from the set at source to the set at destination
  description: "# SMOVE\n\n    SMOVE\n\nSyntax\n\n``` command-syntax\nSMOVE source destination member\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@set`, `@fast`,\n\nMove `member` from the set at `source` to the set at `destination`. This operation is atomic. In every given moment the element will appear to be a member of `source` **or** `destination` for other clients.\n\nIf the source set does not exist or does not contain the specified element, no operation is performed and `0` is returned. Otherwise, the element is removed from the source set and added to the destination set. When the specified element already exists in the destination set, it is only removed from the source set.\n\nAn error is returned if `source` or `destination` does not hold a set value.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- `1` if the element is moved.\n- `0` if the element is not a member of `source` and no operation was performed.\n\n## Examples\n\n``` redis-cli\nSADD myset \"one\"\nSADD myset \"two\"\nSADD myotherset \"three\"\nSMOVE myset myotherset \"two\"\nSMEMBERS myset\nSMEMBERS myotherset\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/smove/](https://redis.io/commands/smove/)"
- name: sort
  id: sort/index
  summary: 'Time complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements'
  description: "# SORT\n\n    SORT\n\nSyntax\n\n``` command-syntax\nSORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern\n  ...]] [ASC | DESC] [ALPHA] [STORE destination]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N+M\\*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).\n\nACL categories:  \n`@write`, `@set`, `@sortedset`, `@list`, `@slow`, `@dangerous`,\n\nReturns or stores the elements contained in the [list](https://redis.io/topics/data-types#lists), [set](https://redis.io/topics/data-types#set) or [sorted set](https://redis.io/topics/data-types#sorted-sets) at `key`.\n\nThere is also the [`SORT_RO`](../sort_ro) read-only variant of this command.\n\nBy default, sorting is numeric and elements are compared by their value interpreted as double precision floating point number. This is `SORT` in its simplest form:\n\n```\nSORT mylist\n```\n\nAssuming `mylist` is a list of numbers, this command will return the same list with the elements sorted from small to large. In order to sort the numbers from large to small, use the `DESC` modifier:\n\n```\nSORT mylist DESC\n```\n\nWhen `mylist` contains string values and you want to sort them lexicographically, use the `ALPHA` modifier:\n\n```\nSORT mylist ALPHA\n```\n\nRedis is UTF-8 aware, assuming you correctly set the `LC_COLLATE` environment variable.\n\nThe number of returned elements can be limited using the `LIMIT` modifier. This modifier takes the `offset` argument, specifying the number of elements to skip and the `count` argument, specifying the number of elements to return from starting at `offset`. The following example will return 10 elements of the sorted version of `mylist`, starting at element 0 (`offset` is zero-based):\n\n```\nSORT mylist LIMIT 0 10\n```\n\nAlmost all modifiers can be used together. The following example will return the first 5 elements, lexicographically sorted in descending order:\n\n```\nSORT mylist LIMIT 0 5 ALPHA DESC\n```\n\n## Sorting by external keys\n\nSometimes you want to sort elements using external keys as weights to compare instead of comparing the actual elements in the list, set or sorted set. Let's say the list `mylist` contains the elements `1`, `2` and `3` representing unique IDs of objects stored in `object_1`, `object_2` and `object_3`. When these objects have associated weights stored in `weight_1`, `weight_2` and `weight_3`, `SORT` can be instructed to use these weights to sort `mylist` with the following statement:\n\n```\nSORT mylist BY weight_*\n```\n\nThe `BY` option takes a pattern (equal to `weight_*` in this example) that is used to generate the keys that are used for sorting. These key names are obtained substituting the first occurrence of `*` with the actual value of the element in the list (`1`, `2` and `3` in this example).\n\n## Skip sorting the elements\n\nThe `BY` option can also take a non-existent key, which causes `SORT` to skip the sorting operation. This is useful if you want to retrieve external keys (see the `GET` option below) without the overhead of sorting.\n\n```\nSORT mylist BY nosort\n```\n\n## Retrieving external keys\n\nOur previous example returns just the sorted IDs. In some cases, it is more useful to get the actual objects instead of their IDs (`object_1`, `object_2` and `object_3`). Retrieving external keys based on the elements in a list, set or sorted set can be done with the following command:\n\n```\nSORT mylist BY weight_* GET object_*\n```\n\nThe `GET` option can be used multiple times in order to get more keys for every element of the original list, set or sorted set.\n\nIt is also possible to `GET` the element itself using the special pattern `#`:\n\n```\nSORT mylist BY weight_* GET object_* GET #\n```\n\n## Restrictions for using external keys\n\nWhen enabling `Redis cluster-mode` there is no way to guarantee the existence of the external keys on the node which the command is processed on. In this case, any use of [`GET`](../get) or `BY` which reference external key pattern will cause the command to fail with an error.\n\nStarting from Redis 7.0, any use of [`GET`](../get) or `BY` which reference external key pattern will only be allowed in case the current user running the command has full key read permissions. Full key read permissions can be set for the user by, for example, specifying `'%R~*'` or `'~*` with the relevant command access rules. You can check the [`ACL SETUSER`](../acl-setuser) command manual for more information on setting ACL access rules. If full key read permissions aren't set, the command will fail with an error.\n\n## Storing the result of a SORT operation\n\nBy default, `SORT` returns the sorted elements to the client. With the `STORE` option, the result will be stored as a list at the specified key instead of being returned to the client.\n\n```\nSORT mylist BY weight_* STORE resultkey\n```\n\nAn interesting pattern using `SORT ... STORE` consists in associating an [`EXPIRE`](../expire) timeout to the resulting key so that in applications where the result of a `SORT` operation can be cached for some time. Other clients will use the cached list instead of calling `SORT` for every request. When the key will timeout, an updated version of the cache can be created by calling `SORT ... STORE` again.\n\nNote that for correctly implementing this pattern it is important to avoid multiple clients rebuilding the cache at the same time. Some kind of locking is needed here (for instance using [`SETNX`](../setnx)).\n\n## Using hashes in `BY` and `GET`\n\nIt is possible to use `BY` and `GET` options against hash fields with the following syntax:\n\n```\nSORT mylist BY weight_*->fieldname GET object_*->fieldname\n```\n\nThe string `->` is used to separate the key name from the hash field name. The key is substituted as documented above, and the hash stored at the resulting key is accessed to retrieve the specified hash field.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): without passing the `store` option the command returns a list of sorted elements. [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): when the `store` option is specified the command returns the number of sorted elements in the destination list.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sort/](https://redis.io/commands/sort/)"
- name: sort_ro
  id: sort_ro/index
  summary: 'Time complexity: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements'
  description: "# SORT_RO\n\n    SORT_RO\n\nSyntax\n\n``` command-syntax\nSORT_RO key [BY pattern] [LIMIT offset count] [GET pattern [GET\n  pattern ...]] [ASC | DESC] [ALPHA]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N+M\\*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).\n\nACL categories:  \n`@read`, `@set`, `@sortedset`, `@list`, `@slow`, `@dangerous`,\n\nRead-only variant of the [`SORT`](../sort) command. It is exactly like the original [`SORT`](../sort) but refuses the `STORE` option and can safely be used in read-only replicas.\n\nSince the original [`SORT`](../sort) has a `STORE` option it is technically flagged as a writing command in the Redis command table. For this reason read-only replicas in a Redis Cluster will redirect it to the master instance even if the connection is in read-only mode (see the [`READONLY`](../readonly) command of Redis Cluster).\n\nThe `SORT_RO` variant was introduced in order to allow [`SORT`](../sort) behavior in read-only replicas without breaking compatibility on command flags.\n\nSee original [`SORT`](../sort) for more details.\n\n## Examples\n\n```\nSORT_RO mylist BY weight_*->fieldname GET object_*->fieldname\n```\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of sorted elements.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sort_ro/](https://redis.io/commands/sort_ro/)"
- name: spop
  id: spop/index
  summary: 'Time complexity: Without the count argument O(1), otherwise O(N) where N is the value of the passed count'
  description: "# SPOP\n\n    SPOP\n\nSyntax\n\n``` command-syntax\nSPOP key [count]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nWithout the count argument O(1), otherwise O(N) where N is the value of the passed count.\n\nACL categories:  \n`@write`, `@set`, `@fast`,\n\nRemoves and returns one or more random members from the set value store at `key`.\n\nThis operation is similar to [`SRANDMEMBER`](../srandmember), that returns one or more random elements from a set but does not remove it.\n\nBy default, the command pops a single member from the set. When provided with the optional `count` argument, the reply will consist of up to `count` members, depending on the set's cardinality.\n\n## Return\n\nWhen called without the `count` argument:\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the removed member, or `nil` when `key` does not exist.\n\nWhen called with the `count` argument:\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): the removed members, or an empty array when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSADD myset \"one\"\nSADD myset \"two\"\nSADD myset \"three\"\nSPOP myset\nSMEMBERS myset\nSADD myset \"four\"\nSADD myset \"five\"\nSPOP myset 3\nSMEMBERS myset\n```\n\n## Distribution of returned elements\n\nNote that this command is not suitable when you need a guaranteed uniform distribution of the returned elements. For more information about the algorithms used for `SPOP`, look up both the Knuth sampling and Floyd sampling algorithms.\n\n## History\n\n- Starting with Redis version 3.2.0: Added the `count` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/spop/](https://redis.io/commands/spop/)"
- name: spublish
  id: spublish/index
  summary: 'Time complexity: O(N) where N is the number of clients subscribed to the receiving shard channel'
  description: "# SPUBLISH\n\n    SPUBLISH\n\nSyntax\n\n``` command-syntax\nSPUBLISH shardchannel message\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of clients subscribed to the receiving shard channel.\n\nACL categories:  \n`@pubsub`, `@fast`,\n\nPosts a message to the given shard channel.\n\nIn Redis Cluster, shard channels are assigned to slots by the same algorithm used to assign keys to slots. A shard message must be sent to a node that own the slot the shard channel is hashed to. The cluster makes sure that published shard messages are forwarded to all the node in the shard, so clients can subscribe to a shard channel by connecting to any one of the nodes in the shard.\n\nFor more information about sharded pubsub, see [Sharded Pubsub](https://redis.io/topics/pubsub#sharded-pubsub).\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of clients that received the message. Note that in a Redis Cluster, only clients that are connected to the same node as the publishing client are included in the count.\n\n## Examples\n\nFor example the following command publish to channel `orders` with a subscriber already waiting for message(s).\n\n```\n> spublish orders hello\n(integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/spublish/](https://redis.io/commands/spublish/)"
- name: srandmember
  id: srandmember/index
  summary: 'Time complexity: Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count'
  description: "# SRANDMEMBER\n\n    SRANDMEMBER\n\nSyntax\n\n``` command-syntax\nSRANDMEMBER key [count]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nWithout the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nWhen called with just the `key` argument, return a random element from the set value stored at `key`.\n\nIf the provided `count` argument is positive, return an array of **distinct elements**. The array's length is either `count` or the set's cardinality ([`SCARD`](../scard)), whichever is lower.\n\nIf called with a negative `count`, the behavior changes and the command is allowed to return the **same element multiple times**. In this case, the number of returned elements is the absolute value of the specified `count`.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): without the additional `count` argument, the command returns a Bulk Reply with the randomly selected element, or `nil` when `key` does not exist.\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): when the additional `count` argument is passed, the command returns an array of elements, or an empty array when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSADD myset one two three\nSRANDMEMBER myset\nSRANDMEMBER myset 2\nSRANDMEMBER myset -5\n```\n\n## Specification of the behavior when count is passed\n\nWhen the `count` argument is a positive value this command behaves as follows:\n\n- No repeated elements are returned.\n- If `count` is bigger than the set's cardinality, the command will only return the whole set without additional elements.\n- The order of elements in the reply is not truly random, so it is up to the client to shuffle them if needed.\n\nWhen the `count` is a negative value, the behavior changes as follows:\n\n- Repeating elements are possible.\n- Exactly `count` elements, or an empty array if the set is empty (non-existing key), are always returned.\n- The order of elements in the reply is truly random.\n\n## Distribution of returned elements\n\nNote: this section is relevant only for Redis 5 or below, as Redis 6 implements a fairer algorithm.\n\nThe distribution of the returned elements is far from perfect when the number of elements in the set is small, this is due to the fact that we used an approximated random element function that does not really guarantees good distribution.\n\nThe algorithm used, that is implemented inside dict.c, samples the hash table buckets to find a non-empty one. Once a non empty bucket is found, since we use chaining in our hash table implementation, the number of elements inside the bucket is checked and a random element is selected.\n\nThis means that if you have two non-empty buckets in the entire hash table, and one has three elements while one has just one, the element that is alone in its bucket will be returned with much higher probability.\n\n## History\n\n- Starting with Redis version 2.6.0: Added the optional `count` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/srandmember/](https://redis.io/commands/srandmember/)"
- name: srem
  id: srem/index
  summary: 'Time complexity: O(N) where N is the number of members to be removed'
  description: "# SREM\n\n    SREM\n\nSyntax\n\n``` command-syntax\nSREM key member [member ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the number of members to be removed.\n\nACL categories:  \n`@write`, `@set`, `@fast`,\n\nRemove the specified members from the set stored at `key`. Specified members that are not a member of this set are ignored. If `key` does not exist, it is treated as an empty set and this command returns `0`.\n\nAn error is returned when the value stored at `key` is not a set.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of members that were removed from the set, not including non existing members.\n\n## Examples\n\n``` redis-cli\nSADD myset \"one\"\nSADD myset \"two\"\nSADD myset \"three\"\nSREM myset \"one\"\nSREM myset \"four\"\nSMEMBERS myset\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple `member` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/srem/](https://redis.io/commands/srem/)"
- name: sscan
  id: sscan/index
  summary: 'Time complexity: O(1) for every call'
  description: "# SSCAN\n\n    SSCAN\n\nSyntax\n\n``` command-syntax\nSSCAN key cursor [MATCH pattern] [COUNT count]\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nSee [`SCAN`](../scan) for `SSCAN` documentation.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sscan/](https://redis.io/commands/sscan/)"
- name: ssubscribe
  id: ssubscribe/index
  summary: 'Time complexity: O(N) where N is the number of shard channels to subscribe to'
  description: "# SSUBSCRIBE\n\n    SSUBSCRIBE\n\nSyntax\n\n``` command-syntax\nSSUBSCRIBE shardchannel [shardchannel ...]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of shard channels to subscribe to.\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nSubscribes the client to the specified shard channels.\n\nIn a Redis cluster, shard channels are assigned to slots by the same algorithm used to assign keys to slots. Client(s) can subscribe to a node covering a slot (primary/replica) to receive the messages published. All the specified shard channels needs to belong to a single slot to subscribe in a given `SSUBSCRIBE` call, A client can subscribe to channels across different slots over separate `SSUBSCRIBE` call.\n\nFor more information about sharded Pub/Sub, see [Sharded Pub/Sub](https://redis.io/topics/pubsub#sharded-pubsub).\n\n## Return\n\nWhen successful, this command doesn't return anything. Instead, for each shard channel, one message with the first element being the string \"ssubscribe\" is pushed as a confirmation that the command succeeded. Note that this command can also return a -MOVED redirect.\n\n## Examples\n\n```\n> ssubscribe orders\nReading messages... (press Ctrl-C to quit)\n1) \"ssubscribe\"\n2) \"orders\"\n3) (integer) 1\n1) \"smessage\"\n2) \"orders\"\n3) \"hello\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ssubscribe/](https://redis.io/commands/ssubscribe/)"
- name: strlen
  id: strlen/index
  summary: Returns the length of the string value stored at key
  description: "# STRLEN\n\n    STRLEN\n\nSyntax\n\n``` command-syntax\nSTRLEN key\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@string`, `@fast`,\n\nReturns the length of the string value stored at `key`. An error is returned when `key` holds a non-string value.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the length of the string at `key`, or `0` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello world\"\nSTRLEN mykey\nSTRLEN nonexisting\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/strlen/](https://redis.io/commands/strlen/)"
- name: subscribe
  id: subscribe/index
  summary: 'Time complexity: O(N) where N is the number of channels to subscribe to'
  description: "# SUBSCRIBE\n\n    SUBSCRIBE\n\nSyntax\n\n``` command-syntax\nSUBSCRIBE channel [channel ...]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of channels to subscribe to.\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nSubscribes the client to the specified channels.\n\nOnce the client enters the subscribed state it is not supposed to issue any other commands, except for additional `SUBSCRIBE`, [`SSUBSCRIBE`](../ssubscribe), [`PSUBSCRIBE`](../psubscribe), [`UNSUBSCRIBE`](../unsubscribe), [`SUNSUBSCRIBE`](../sunsubscribe), [`PUNSUBSCRIBE`](../punsubscribe), [`PING`](../ping), [`RESET`](../reset) and [`QUIT`](../quit) commands. However, if RESP3 is used (see [`HELLO`](../hello)) it is possible for a client to issue any commands while in subscribed state.\n\nFor more information, see [Pub/sub](https://redis.io/docs/manual/pubsub/).\n\n## Return\n\nWhen successful, this command doesn't return anything. Instead, for each channel, one message with the first element being the string \"subscribe\" is pushed as a confirmation that the command succeeded.\n\n## Behavior change history\n\n- `>= 6.2.0`: [`RESET`](../reset) can be called to exit subscribed state.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/subscribe/](https://redis.io/commands/subscribe/)"
- name: substr
  id: substr/index
  summary: As of Redis version 2.0.0, this command is regarded as deprecated
  description: "# SUBSTR\n\n    SUBSTR (deprecated)\n\nAs of Redis version 2.0.0, this command is regarded as deprecated.\n\nIt can be replaced by [`GETRANGE`](../getrange) when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nSUBSTR key start end\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.\n\nACL categories:  \n`@read`, `@string`, `@slow`,\n\nReturns the substring of the string value stored at `key`, determined by the offsets `start` and `end` (both are inclusive). Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character, -2 the penultimate and so forth.\n\nThe function handles out of range requests by limiting the resulting range to the actual length of the string.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)\n\n## Examples\n\n``` redis-cli\nSET mykey \"This is a string\"\nGETRANGE mykey 0 3\nGETRANGE mykey -3 -1\nGETRANGE mykey 0 -1\nGETRANGE mykey 10 100\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/substr/](https://redis.io/commands/substr/)"
- name: sunion
  id: sunion/index
  summary: 'Time complexity: O(N) where N is the total number of elements in all given sets'
  description: "# SUNION\n\n    SUNION\n\nSyntax\n\n``` command-syntax\nSUNION key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the total number of elements in all given sets.\n\nACL categories:  \n`@read`, `@set`, `@slow`,\n\nReturns the members of the set resulting from the union of all the given sets.\n\nFor example:\n\n```\nkey1 = {a,b,c,d}\nkey2 = {c}\nkey3 = {a,c,e}\nSUNION key1 key2 key3 = {a,b,c,d,e}\n```\n\nKeys that do not exist are considered to be empty sets.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list with members of the resulting set.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSUNION key1 key2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sunion/](https://redis.io/commands/sunion/)"
- name: sunionstore
  id: sunionstore/index
  summary: 'Time complexity: O(N) where N is the total number of elements in all given sets'
  description: "# SUNIONSTORE\n\n    SUNIONSTORE\n\nSyntax\n\n``` command-syntax\nSUNIONSTORE destination key [key ...]\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(N) where N is the total number of elements in all given sets.\n\nACL categories:  \n`@write`, `@set`, `@slow`,\n\nThis command is equal to [`SUNION`](../sunion), but instead of returning the resulting set, it is stored in `destination`.\n\nIf `destination` already exists, it is overwritten.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting set.\n\n## Examples\n\n``` redis-cli\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSUNIONSTORE key key1 key2\nSMEMBERS key\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sunionstore/](https://redis.io/commands/sunionstore/)"
- name: sunsubscribe
  id: sunsubscribe/index
  summary: 'Time complexity: O(N) where N is the number of clients already subscribed to a shard channel'
  description: "# SUNSUBSCRIBE\n\n    SUNSUBSCRIBE\n\nSyntax\n\n``` command-syntax\nSUNSUBSCRIBE [shardchannel [shardchannel ...]]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N) where N is the number of clients already subscribed to a shard channel.\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nUnsubscribes the client from the given shard channels, or from all of them if none is given.\n\nWhen no shard channels are specified, the client is unsubscribed from all the previously subscribed shard channels. In this case a message for every unsubscribed shard channel will be sent to the client.\n\nNote: The global channels and shard channels needs to be unsubscribed from separately.\n\nFor more information about sharded Pub/Sub, see [Sharded Pub/Sub](https://redis.io/topics/pubsub#sharded-pubsub).\n\n## Return\n\nWhen successful, this command doesn't return anything. Instead, for each shard channel, one message with the first element being the string \"sunsubscribe\" is pushed as a confirmation that the command succeeded.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sunsubscribe/](https://redis.io/commands/sunsubscribe/)"
- name: swapdb
  id: swapdb/index
  summary: 'Time complexity: O(N) where N is the count of clients watching or blocking on keys from both databases'
  description: "# SWAPDB\n\n    SWAPDB\n\nSyntax\n\n``` command-syntax\nSWAPDB index1 index2\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(N) where N is the count of clients watching or blocking on keys from both databases.\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`, `@dangerous`,\n\nThis command swaps two Redis databases, so that immediately all the clients connected to a given database will see the data of the other database, and the other way around. Example:\n\n    SWAPDB 0 1\n\nThis will swap database 0 with database 1. All the clients connected with database 0 will immediately see the new data, exactly like all the clients connected with database 1 will see the data that was formerly of database 0.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` if `SWAPDB` was executed correctly.\n\n## Examples\n\n```\nSWAPDB 0 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/swapdb/](https://redis.io/commands/swapdb/)"
- name: sync
  id: sync/index
  summary: Initiates a replication stream from the master
  description: "# SYNC\n\n    SYNC\n\nSyntax\n\n``` command-syntax\nSYNC\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nACL categories:  \n`@admin`, `@slow`, `@dangerous`,\n\nInitiates a replication stream from the master.\n\nThe `SYNC` command is called by Redis replicas for initiating a replication stream from the master. It has been replaced in newer versions of Redis by [`PSYNC`](../psync).\n\nFor more information about replication in Redis please check the [replication page](https://redis.io/topics/replication).\n\n## Return\n\n**Non standard return value**, a bulk transfer of the data followed by [`PING`](../ping) and write requests from the master.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/sync/](https://redis.io/commands/sync/)"
- name: tdigest.add
  id: tdigest.add/index
  summary: Adds one or more observations to a t-digest sketch
  description: "# TDIGEST.ADD\n\n    TDIGEST.ADD\n\nSyntax\n\n``` command-syntax\nTDIGEST.ADD key value [value ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(N) , where N is the number of samples to add\n\nAdds one or more observations to a t-digest sketch.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`value` is value of an observation (floating-point).\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.ADD t 1 2 3\nOK\n```\n\n``` chroma\nredis> TDIGEST.ADD t string\n(error) ERR T-Digest: error parsing val parameter\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.add/](https://redis.io/commands/tdigest.add/)"
- name: tdigest.byrank
  id: tdigest.byrank/index
  summary: Returns, for each input rank, an estimation of the value (floating-point) with that rank
  description: "# TDIGEST.BYRANK\n\n    TDIGEST.BYRANK\n\nSyntax\n\n``` command-syntax\nTDIGEST.BYRANK key rank [rank ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns, for each input rank, an estimation of the value (floating-point) with that rank.\n\nMultiple estimations can be retrieved in a signle call.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`rank`\n\nRank, for which the value should be retrieved.\n\n0 is the rank of the value of the smallest observation.\n\n*n*-1 is the rank of the value of the largest observation; *n* denotes the number of observations added to the sketch.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - an array of floating-points populated with value_1, value_2, ..., value_R:\n\n- Return an accurate result when `rank` is 0 (the value of the smallest observation)\n- Return an accurate result when `rank` is *n*-1 (the value of the largest observation), where *n* denotes the number of observations added to the sketch.\n- Return 'inf' when `rank` is equal to *n* or larger than *n*\n\nAll values are 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t COMPRESSION 1000\nOK\nredis> TDIGEST.ADD t 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\nOK\nredis> TDIGEST.BYRANK t 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n 1) \"1\"\n 2) \"2\"\n 3) \"2\"\n 4) \"3\"\n 5) \"3\"\n 6) \"3\"\n 7) \"4\"\n 8) \"4\"\n 9) \"4\"\n10) \"4\"\n11) \"5\"\n12) \"5\"\n13) \"5\"\n14) \"5\"\n15) \"5\"\n16) \"inf\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.byrank/](https://redis.io/commands/tdigest.byrank/)"
- name: tdigest.byrevrank
  id: tdigest.byrevrank/index
  summary: Returns, for each input reverse rank, an estimation of the value (floating-point) with that reverse rank
  description: "# TDIGEST.BYREVRANK\n\n    TDIGEST.BYREVRANK\n\nSyntax\n\n``` command-syntax\nTDIGEST.BYREVRANK key reverse_rank [reverse_rank ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns, for each input reverse rank, an estimation of the value (floating-point) with that reverse rank.\n\nMultiple estimations can be retrieved in a signle call.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`revrank`\n\nReverse rank, for which the value should be retrieved.\n\n0 is the reverse rank of the value of the largest observation.\n\n*n*-1 is the reverse rank of the value of the smallest observation; *n* denotes the number of observations added to the sketch.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - an array of floating-points populated with value_1, value_2, ..., value_R:\n\n- Return an accurate result when `revrank` is 0 (the value of the largest observation)\n- Return an accurate result when `revrank` is *n*-1 (the value of the smallest observation), where *n* denotes the number of observations added to the sketch.\n- Return '-inf' when `revrank` is equal to *n* or larger than *n*\n\nAll values are 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t COMPRESSION 1000\nOK\nredis> TDIGEST.ADD t 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\nOK\nredis> TDIGEST.BYREVRANK t 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n 1) \"5\"\n 2) \"5\"\n 3) \"5\"\n 4) \"5\"\n 5) \"5\"\n 6) \"4\"\n 7) \"4\"\n 8) \"4\"\n 9) \"4\"\n10) \"3\"\n11) \"3\"\n12) \"3\"\n13) \"2\"\n14) \"2\"\n15) \"1\"\n16) \"-inf\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.byrevrank/](https://redis.io/commands/tdigest.byrevrank/)"
- name: tdigest.cdf
  id: tdigest.cdf/index
  summary: Returns, for each input value, an estimation of the fraction (floating-point) of (observations smaller than the given value + half the observations equal to the given value)
  description: "# TDIGEST.CDF\n\n    TDIGEST.CDF\n\nSyntax\n\n``` command-syntax\nTDIGEST.CDF key value [value ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns, for each input value, an estimation of the fraction (floating-point) of (observations smaller than the given value + half the observations equal to the given value).\n\nMultiple fractions can be retrieved in a signle call.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`value` is value for which the CDF (Cumulative Distribution Function) should be retrieved.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - the command returns an array of floating-points populated with fraction_1, fraction_2, ..., fraction_N.\n\nAll values are 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t COMPRESSION 1000\nOK\nredis> TDIGEST.ADD t 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\nOK\nredis> TDIGEST.CDF t 0 1 2 3 4 5 6\n1) \"0\"\n2) \"0.033333333333333333\"\n3) \"0.13333333333333333\"\n4) \"0.29999999999999999\"\n5) \"0.53333333333333333\"\n6) \"0.83333333333333337\"\n7) \"1\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.cdf/](https://redis.io/commands/tdigest.cdf/)"
- name: tdigest.create
  id: tdigest.create/index
  summary: Allocates memory and initializes a new t-digest sketch
  description: "# TDIGEST.CREATE\n\n    TDIGEST.CREATE\n\nSyntax\n\n``` command-syntax\nTDIGEST.CREATE key [COMPRESSION compression]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nAllocates memory and initializes a new t-digest sketch.\n\n## Required arguments\n\n`key` is key name for this new t-digest sketch.\n\n## Optional arguments\n\n`COMPRESSION compression`\n\nis a controllable tradeoff between accuracy and memory consumption. 100 is a common value for normal uses. 1000 is more accurate. If no value is passed by default the compression will be 100. For more information on scaling of accuracy versus the compression parameter see [*The t-digest: Efficient estimates of distributions*](https://www.sciencedirect.com/science/article/pii/S2665963820300403).\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t COMPRESSION 100\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.create/](https://redis.io/commands/tdigest.create/)"
- name: tdigest.info
  id: tdigest.info/index
  summary: Returns information and statistics about a t-digest sketch
  description: "# TDIGEST.INFO\n\n    TDIGEST.INFO\n\nSyntax\n\n``` command-syntax\nTDIGEST.INFO key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns information and statistics about a t-digest sketch.\n\n## Required arguments\n\n`key`\n\nis key name for an existing t-digest sketch.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information about the sketch:\n\n| Name                 | Description                                                                                    |\n|----------------------|------------------------------------------------------------------------------------------------|\n| `Compression`        | The compression (controllable trade-off between accuracy and memory consumption) of the sketch |\n| `Capacity`           | Size of the buffer used for storing the centroids and for the incoming unmerged observations   |\n| `Merged nodes`       | Number of merged observations                                                                  |\n| `Unmerged nodes`     | Number of buffered nodes (uncompressed observations)                                           |\n| `Merged weight`      | Weight of values of the merged nodes                                                           |\n| `Unmerged weight`    | Weight of values of the unmerged nodes (uncompressed observations)                             |\n| `Observations`       | Number of observations added to the sketch                                                     |\n| `Total compressions` | Number of times this sketch compressed data together                                           |\n| `Memory usage`       | Number of bytes allocated for the sketch                                                       |\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t\nOK\nredis> TDIGEST.ADD t 1 2 3 4 5\nOK\nredis> TDIGEST.INFO t\n 1) Compression\n 2) (integer) 100\n 3) Capacity\n 4) (integer) 610\n 5) Merged nodes\n 6) (integer) 0\n 7) Unmerged nodes\n 8) (integer) 5\n 9) Merged weight\n10) (integer) 0\n11) Unmerged weight\n12) (integer) 5\n13) Observations\n14) (integer) 5\n15) Total compressions\n16) (integer) 0\n17) Memory usage\n18) (integer) 9768\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.info/](https://redis.io/commands/tdigest.info/)"
- name: tdigest.max
  id: tdigest.max/index
  summary: Returns the maximum observation value from a t-digest sketch
  description: "# TDIGEST.MAX\n\n    TDIGEST.MAX\n\nSyntax\n\n``` command-syntax\nTDIGEST.MAX key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns the maximum observation value from a t-digest sketch.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) of maximum observation value from a sketch. The result is always accurate. 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t\nOK\nredis> TDIGEST.MAX t\n\"nan\"\nredis> TDIGEST.ADD t 3 4 1 2 5\nOK\nredis>TDIGEST.MAX t\n\"5\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.max/](https://redis.io/commands/tdigest.max/)"
- name: tdigest.merge
  id: tdigest.merge/index
  summary: Merges multiple t-digest sketches into a single sketch
  description: "# TDIGEST.MERGE\n\n    TDIGEST.MERGE\n\nSyntax\n\n``` command-syntax\nTDIGEST.MERGE destination-key numkeys source-key [source-key ...]\n  [COMPRESSION compression] [OVERRIDE]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(N\\*K), where N is the number of centroids and K being the number of input sketches\n\nMerges multiple t-digest sketches into a single sketch.\n\n## Required arguments\n\n`destination-key`\n\nis key name for a t-digest sketch to merge observation values to.\n\nIf `destination-key` does not exist - a new sketch is created.\n\nIf `destination-key` is an existing sketch, its values are merged with the values of the source keys. To override the destination key contents use `OVERRIDE`.\n\n`numkeys` Number of sketches to merge observation values from (1 or more).\n\n`source-key` each is a key name for a t-digest sketch to merge observation values from.\n\n## Optional arguments\n\n`COMPRESSION compression`\n\nis a controllable tradeoff between accuracy and memory consumption. 100 is a common value for normal uses. 1000 is more accurate. If no value is passed by default the compression will be 100. For more information on scaling of accuracy versus the compression parameter see [*The t-digest: Efficient estimates of distributions*](https://www.sciencedirect.com/science/article/pii/S2665963820300403).\n\nWhen `COMPRESSION` is not specified:\n\n- If `destination-key` does not exist or if `OVERRIDE` is specified, the compression is set to the maximal value among all source sketches.\n- If `destination-key` already exists and `OVERRIDE` is not specified, its compression is not changed.\n\n`OVERRIDE` When specified, if \\`destination-key\\` already exists, it is overwritten.\n\n## Return value\n\nOK on success, error otherwise.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE s1\nOK\nredis> TDIGEST.CREATE s2\nOK\nredis> TDIGEST.ADD s1 10.0 20.0\nOK\nredis> TDIGEST.ADD s2 30.0 40.0\nOK\nredis> TDIGEST.MERGE sM 2 s1 s2\nOK\nredis> TDIGEST.BYRANK sM 0 1 2 3 4\n1) \"10\"\n2) \"20\"\n3) \"30\"\n4) \"40\"\n5) \"inf\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.merge/](https://redis.io/commands/tdigest.merge/)"
- name: tdigest.min
  id: tdigest.min/index
  summary: Returns the minimum observation value from a t-digest sketch
  description: "# TDIGEST.MIN\n\n    TDIGEST.MIN\n\nSyntax\n\n``` command-syntax\nTDIGEST.MIN key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns the minimum observation value from a t-digest sketch.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) of minimum observation value from a sketch. The result is always accurate. 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t\nOK\nredis> TDIGEST.MIN t\n\"nan\"\nredis> TDIGEST.ADD t 3 4 1 2 5\nOK\nredis> TDIGEST.MIN t\n\"1\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.min/](https://redis.io/commands/tdigest.min/)"
- name: tdigest.quantile
  id: tdigest.quantile/index
  summary: Returns, for each input fraction, an estimation of the value (floating point) that is smaller than the given fraction of observations
  description: "# TDIGEST.QUANTILE\n\n    TDIGEST.QUANTILE\n\nSyntax\n\n``` command-syntax\nTDIGEST.QUANTILE key quantile [quantile ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns, for each input fraction, an estimation of the value (floating point) that is smaller than the given fraction of observations.\n\nMultiple quantiles can be retrieved in a signle call.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`quantile` is the input fraction (between 0 and 1 inclusively)\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - an array of estimates (floating-point) populated with value_1, value_2, ..., value_N.\n\n- Return an accurate result when `quantile` is 0 (the value of the smallest observation)\n- Return an accurate result when `quantile` is 1 (the value of the largest observation)\n\nAll values are 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t COMPRESSION 1000\nOK\nredis> TDIGEST.ADD t 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\nOK\nredis> TDIGEST.QUANTILE t 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1\n 1) \"1\"\n 2) \"2\"\n 3) \"3\"\n 4) \"3\"\n 5) \"4\"\n 6) \"4\"\n 7) \"4\"\n 8) \"5\"\n 9) \"5\"\n10) \"5\"\n11) \"5\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.quantile/](https://redis.io/commands/tdigest.quantile/)"
- name: tdigest.rank
  id: tdigest.rank/index
  summary: Returns, for each input value (floating-point), the estimated rank of the value (the number of observations in the sketch that are smaller than the value + half the number of observations that are equal to the value)
  description: "# TDIGEST.RANK\n\n    TDIGEST.RANK\n\nSyntax\n\n``` command-syntax\nTDIGEST.RANK key value [value ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns, for each input value (floating-point), the estimated rank of the value (the number of observations in the sketch that are smaller than the value + half the number of observations that are equal to the value).\n\nMultiple ranks can be retrieved in a signle call.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`value` is input value for which the rank should be estimated.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - an array of integers populated with rank_1, rank_2, ..., rank_V:\n\n- -1 - when `value` is smaller than the value of the smallest observation.\n- The number of observations - when `value` is larger than the value of the largest observation.\n- Otherwise: an estimation of the number of (observations smaller than `value` + half the observations equal to `value`).\n\n0 is the rank of the value of the smallest observation.\n\n*n*-1 is the rank of the value of the largest observation; *n* denotes the number of observations added to the sketch.\n\nAll values are -2 if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE s COMPRESSION 1000\nOK\nredis> TDIGEST.ADD s 10 20 30 40 50 60\nOK\nredis> TDIGEST.RANK s 0 10 20 30 40 50 60 70\n1) (integer) -1\n2) (integer) 0\n3) (integer) 1\n4) (integer) 2\n5) (integer) 3\n6) (integer) 4\n7) (integer) 5\n8) (integer) 6\nredis> TDIGEST.REVRANK s 0 10 20 30 40 50 60 70\n1) (integer) 6\n2) (integer) 5\n3) (integer) 4\n4) (integer) 3\n5) (integer) 2\n6) (integer) 1\n7) (integer) 0\n8) (integer) -1  \n```\n\n``` chroma\nredis> TDIGEST.CREATE s COMPRESSION 1000\nOK\nredis> TDIGEST.ADD s 10 10 10 10 20 20\nOK\nredis> TDIGEST.RANK s 10 20\n1) (integer) 2\n2) (integer) 5\nredis> TDIGEST.REVRANK s 10 20\n1) (integer) 4\n2) (integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.rank/](https://redis.io/commands/tdigest.rank/)"
- name: tdigest.reset
  id: tdigest.reset/index
  summary: 'Resets a t-digest sketch: empty the sketch and re-initializes it'
  description: "# TDIGEST.RESET\n\n    TDIGEST.RESET\n\nSyntax\n\n``` command-syntax\nTDIGEST.RESET key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nResets a t-digest sketch: empty the sketch and re-initializes it.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.RESET t\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.reset/](https://redis.io/commands/tdigest.reset/)"
- name: tdigest.revrank
  id: tdigest.revrank/index
  summary: Returns, for each input value (floating-point), the estimated reverse rank of the value (the number of observations in the sketch that are larger than the value + half the number of observations that are equal to the value)
  description: "# TDIGEST.REVRANK\n\n    TDIGEST.REVRANK\n\nSyntax\n\n``` command-syntax\nTDIGEST.REVRANK key value [value ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns, for each input value (floating-point), the estimated reverse rank of the value (the number of observations in the sketch that are larger than the value + half the number of observations that are equal to the value).\n\nMultiple reverse ranks can be retrieved in a signle call.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`value` is input value for which the reverse rank should be estimated.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - an array of integers populated with revrank_1, revrank_2, ..., revrank_V:\n\n- -1 - when `value` is larger than the value of the largest observation.\n- The number of observations - when `value` is smaller than the value of the smallest observation.\n- Otherwise: an estimation of the number of (observations larger than `value` + half the observations equal to `value`).\n\n0 is the reverse rank of the value of the largest observation.\n\n*n*-1 is the reverse rank of the value of the smallest observation; *n* denotes the number of observations added to the sketch.\n\nAll values are -2 if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE s COMPRESSION 1000\nOK\nredis> TDIGEST.ADD s 10 20 30 40 50 60\nOK\nredis> TDIGEST.RANK s 0 10 20 30 40 50 60 70\n1) (integer) -1\n2) (integer) 0\n3) (integer) 1\n4) (integer) 2\n5) (integer) 3\n6) (integer) 4\n7) (integer) 5\n8) (integer) 6\nredis> TDIGEST.REVRANK s 0 10 20 30 40 50 60 70\n1) (integer) 6\n2) (integer) 5\n3) (integer) 4\n4) (integer) 3\n5) (integer) 2\n6) (integer) 1\n7) (integer) 0\n8) (integer) -1\n```\n\n``` chroma\nredis> TDIGEST.CREATE s COMPRESSION 1000\nOK\nredis> TDIGEST.ADD s 10 10 10 10 20 20\nOK\nredis> TDIGEST.RANK s 10 20\n1) (integer) 2\n2) (integer) 5\nredis> TDIGEST.REVRANK s 10 20\n1) (integer) 4\n2) (integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.revrank/](https://redis.io/commands/tdigest.revrank/)"
- name: tdigest.trimmed_mean
  id: tdigest.trimmed_mean/index
  summary: Returns an estimation of the mean value from the sketch, excluding observation values outside the low and high cutoff quantiles
  description: "# TDIGEST.TRIMMED_MEAN\n\n    TDIGEST.TRIMMED_MEAN\n\nSyntax\n\n``` command-syntax\nTDIGEST.TRIMMED_MEAN key low_cut_quantile high_cut_quantile\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.4.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(N) where N is the number of centroids\n\nReturns an estimation of the mean value from the sketch, excluding observation values outside the low and high cutoff quantiles.\n\n## Required arguments\n\n`key` is key name for an existing t-digest sketch.\n\n`low_cut_quantile`\n\nFoating-point value in the range \\[0..1\\], should be lower than `high_cut_quantile`\n\nWhen equal to 0: No low cut.\n\nWhen higher than 0: Exclude observation values lower than this quantile.\n\n`high_cut_quantile`\n\nFloating-point value in the range \\[0..1\\], should be higher than `low_cut_quantile`\n\nWhen lower than 1: Exclude observation values higher than or equal to this quantile.\n\nWhen equal to 1: No high cut.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) estimation of the mean value. 'nan' if the sketch is empty.\n\n## Examples\n\n``` chroma\nredis> TDIGEST.CREATE t COMPRESSION 1000\nOK\nredis> TDIGEST.ADD t 1 2 3 4 5 6 7 8 9 10\nOK\nredis> TDIGEST.TRIMMED_MEAN t 0.1 0.6\n\"4\"\nredis> TDIGEST.TRIMMED_MEAN t 0.3 0.9\n\"6.5\"\nredis> TDIGEST.TRIMMED_MEAN t 0 1\n\"5.5\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/tdigest.trimmed_mean/](https://redis.io/commands/tdigest.trimmed_mean/)"
- name: time
  id: time/index
  summary: 'The TIME command returns the current server time as a two items lists: a Unix timestamp and the amount of microseconds already elapsed in the current second'
  description: "# TIME\n\n    TIME\n\nSyntax\n\n``` command-syntax\nTIME\n```\n\nAvailable since:  \n2.6.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`,\n\nThe `TIME` command returns the current server time as a two items lists: a Unix timestamp and the amount of microseconds already elapsed in the current second. Basically the interface is very similar to the one of the `gettimeofday` system call.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nA multi bulk reply containing two elements:\n\n- unix time in seconds.\n- microseconds.\n\n## Examples\n\n``` redis-cli\nTIME\nTIME\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/time/](https://redis.io/commands/time/)"
- name: topk.add
  id: topk.add/index
  summary: Adds an item to the data structure
  description: "# TOPK.ADD\n\n    TOPK.ADD\n\nSyntax\n\n``` command-syntax\nTOPK.ADD key items [items ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n \\* k) where n is the number of items and k is the depth\n\nAdds an item to the data structure. Multiple items can be added at once. If an item enters the Top-K list, the item which is expelled is returned. This allows dynamic heavy-hitter detection of items being entered or expelled from Top-K list.\n\n### Parameters\n\n- **key**: Name of sketch where item is added.\n- **item**: Item/s to be added.\n\n### Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - if an element was dropped from the TopK list, [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) otherwise..\n\n#### Example\n\n```\nredis> TOPK.ADD topk foo bar 42\n1) (nil)\n2) baz\n3) (nil)\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.add/](https://redis.io/commands/topk.add/)"
- name: topk.count
  id: topk.count/index
  summary: As of Redis version 2.4, this command is regarded as deprecated
  description: "# TOPK.COUNT\n\n    TOPK.COUNT (deprecated)\n\nAs of Redis version 2.4, this command is regarded as deprecated.\n\nSyntax\n\n``` command-syntax\nTOPK.COUNT key item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n) where n is the number of items\n\nReturns count for an item. Multiple items can be requested at once. Please note this number will never be higher than the real count and likely to be lower.\n\nThis command has been deprecated. The count value is not a representative of the number of appearances of an item.\n\n### Parameters\n\n- **key**: Name of sketch where item is counted.\n- **item**: Item/s to be counted.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - count for responding item.\n\n## Examples\n\n```\nredis> TOPK.COUNT topk foo 42 nonexist\n1) (integer) 3\n2) (integer) 1\n3) (integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.count/](https://redis.io/commands/topk.count/)"
- name: topk.incrby
  id: topk.incrby/index
  summary: Increase the score of an item in the data structure by increment
  description: "# TOPK.INCRBY\n\n    TOPK.INCRBY\n\nSyntax\n\n``` command-syntax\nTOPK.INCRBY key item increment [item increment ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n \\* k \\* incr) where n is the number of items, k is the depth and incr is the increment\n\nIncrease the score of an item in the data structure by increment. Multiple items' score can be increased at once. If an item enters the Top-K list, the item which is expelled is returned.\n\n### Parameters\n\n- **key**: Name of sketch where item is added.\n- **item**: Item/s to be added.\n- **increment**: increment to current item score. Increment must be greater or equal to 1. Increment is limited to 100,000 to avoid server freeze.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - if an element was dropped from the TopK list, [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) otherwise..\n\n@example\n\n```\nredis> TOPK.INCRBY topk foo 3 bar 2 42 30\n1) (nil)\n2) (nil)\n3) foo\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.incrby/](https://redis.io/commands/topk.incrby/)"
- name: topk.info
  id: topk.info/index
  summary: Returns number of required items (k), width, depth and decay values
  description: "# TOPK.INFO\n\n    TOPK.INFO\n\nSyntax\n\n``` command-syntax\nTOPK.INFO key\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nReturns number of required items (k), width, depth and decay values.\n\n### Parameters\n\n- **key**: Name of sketch.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information of the filter.\n\n## Examples\n\n```\nTOPK.INFO topk\n1) k\n2) (integer) 50\n3) width\n4) (integer) 2000\n5) depth\n6) (integer) 7\n7) decay\n8) \"0.92500000000000004\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.info/](https://redis.io/commands/topk.info/)"
- name: topk.list
  id: topk.list/index
  summary: Return full list of items in Top K list
  description: "# TOPK.LIST\n\n    TOPK.LIST\n\nSyntax\n\n``` command-syntax\nTOPK.LIST key [WITHCOUNT]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(k) where k is the value of top-k\n\nReturn full list of items in Top K list.\n\n### Parameters\n\n- **key**: Name of sketch where item is counted.\n- **WITHCOUNT**: Count of each element is returned.\n\n## Return\n\nk (or less) items in Top K list.\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - the names of items in the TopK list. If `WITHCOUNT` is requested, [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) and [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) pairs of the names of items in the TopK list and their count.\n\n## Examples\n\n```\nTOPK.LIST topk\n1) foo\n2) 42\n3) bar\n```\n\n```\nTOPK.LIST topk WITHCOUNT\n1) foo\n2) (integer) 12\n3) 42\n4) (integer) 7\n5) bar\n6) (integer) 2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.list/](https://redis.io/commands/topk.list/)"
- name: topk.query
  id: topk.query/index
  summary: Checks whether an item is one of Top-K items
  description: "# TOPK.QUERY\n\n    TOPK.QUERY\n\nSyntax\n\n``` command-syntax\nTOPK.QUERY key item [item ...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(n) where n is the number of items\n\nChecks whether an item is one of Top-K items. Multiple items can be checked at once.\n\n### Parameters\n\n- **key**: Name of sketch where item is queried.\n- **item**: Item/s to be queried.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - \"1\" if item is in Top-K, otherwise \"0\".\n\n## Examples\n\n```\nredis> TOPK.QUERY topk 42 nonexist\n1) (integer) 1\n2) (integer) 0\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.query/](https://redis.io/commands/topk.query/)"
- name: topk.reserve
  id: topk.reserve/index
  summary: Initializes a TopK with specified parameters
  description: "# TOPK.RESERVE\n\n    TOPK.RESERVE\n\nSyntax\n\n``` command-syntax\nTOPK.RESERVE key topk [width depth decay]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [Bloom 2.0.0](https://redis.io/docs/stack/bloom)\n\nTime complexity:  \nO(1)\n\nInitializes a TopK with specified parameters.\n\n### Parameters\n\n- **key**: Key under which the sketch is to be found.\n- **topk**: Number of top occurring items to keep.\n\nOptional parameters\n\n- **width**: Number of counters kept in each array. (Default 8)\n- **depth**: Number of arrays. (Default 7)\n- **decay**: The probability of reducing a counter in an occupied bucket. It is raised to power of it's counter (decay ^ bucket\\[i\\].counter). Therefore, as the counter gets higher, the chance of a reduction is being reduced. (Default 0.9)\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n```\nredis> TOPK.RESERVE topk 50 2000 7 0.925\nOK\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/topk.reserve/](https://redis.io/commands/topk.reserve/)"
- name: touch
  id: touch/index
  summary: 'Time complexity: O(N) where N is the number of keys that will be touched'
  description: "# TOUCH\n\n    TOUCH\n\nSyntax\n\n``` command-syntax\nTOUCH key [key ...]\n```\n\nAvailable since:  \n3.2.1\n\nTime complexity:  \nO(N) where N is the number of keys that will be touched.\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nAlters the last access time of a key(s). A key is ignored if it does not exist.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of keys that were touched.\n\n## Examples\n\n``` redis-cli\nSET key1 \"Hello\"\nSET key2 \"World\"\nTOUCH key1 key2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/touch/](https://redis.io/commands/touch/)"
- name: ts.add
  id: ts.add/index
  summary: is key name for the time series
  description: "# TS.ADD\n\n    TS.ADD\n\nSyntax\n\n``` command-syntax\nTS.ADD key timestamp value \n  [RETENTION retentionPeriod] \n  [ENCODING [COMPRESSED|UNCOMPRESSED]] \n  [CHUNK_SIZE size] \n  [ON_DUPLICATE policy] \n  [LABELS {label value}...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(M) when M is the amount of compaction rules or O(1) with no compaction\n\nAppend a sample to a time series\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n`timestamp`\n\nis (integer) UNIX sample timestamp in milliseconds or `*` to set the timestamp according to the server clock.\n\n`value`\n\nis (double) numeric data value of the sample. The double number should follow [RFC 7159](https://tools.ietf.org/html/rfc7159) (JSON standard). In particular, the parser rejects overly large values that do not fit in binary64. It does not accept NaN or infinite values.\n\n**Notes:**\n\n- When specified key does not exist, a new time series is created.\n\n  if a [COMPACTION_POLICY](https://redis.io/docs/stack/timeseries/configuration/#compaction_policy) configuration parameter is defined, compacted time series would be created as well.\n\n- If `timestamp` is older than the retention period compared to the maximum existing timestamp, the sample is discarded and an error is returned.\n\n- When adding a sample to a time series for which compaction rules are defined:\n\n  - If all the original samples for an affected aggregated time bucket are available, the compacted value is recalculated based on the reported sample and the original samples.\n  - If only a part of the original samples for an affected aggregated time bucket is available due to trimming caused in accordance with the time series RETENTION policy, the compacted value is recalculated based on the reported sample and the available original samples.\n  - If the original samples for an affected aggregated time bucket are not available due to trimming caused in accordance with the time series RETENTION policy, the compacted value bucket is not updated.\n\n- Explicitly adding samples to a compacted time series (using `TS.ADD`, [`TS.MADD`](../ts.madd), [`TS.INCRBY`](../ts.incrby), or [`TS.DECRBY`](../ts.decrby)) may result in inconsistencies between the raw and the compacted data. The compaction process may override such samples.\n\n## Optional arguments\n\nThe following arguments are optional because they can be set by [`TS.CREATE`](../ts.create).\n\n`RETENTION retentionPeriod`\n\nis maximum retention period, compared to the maximum existing timestamp, in milliseconds.\n\nUse it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `RETENTION` in [`TS.CREATE`](../ts.create).\n\n`ENCODING enc`\n\nspecifies the series sample's encoding format.\n\nUse it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `ENCODING` in [`TS.CREATE`](../ts.create).\n\n`CHUNK_SIZE size` is memory size, in bytes, allocated for each data chunk.\n\nUse it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `CHUNK_SIZE` in [`TS.CREATE`](../ts.create).\n\n`ON_DUPLICATE policy`\n\nis overwrite key and database configuration for [DUPLICATE_POLICY](https://redis.io/docs/stack/timeseries/configuration/#duplicate_policy), the policy for handling samples with identical timestamps. It is used with one of the following values:\n\n- `BLOCK`: ignore any newly reported value and reply with an error\n- `FIRST`: ignore any newly reported value\n- `LAST`: override with the newly reported value\n- `MIN`: only override if the value is lower than the existing value\n- `MAX`: only override if the value is higher than the existing value\n- `SUM`: If a previous sample exists, add the new sample to it so that the updated value is equal to (previous + new). If no previous sample exists, set the updated value equal to the new value.\n\n`LABELS {label value}...`\n\nis set of label-value pairs that represent metadata labels of the time series.\n\nUse it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `LABELS` in [`TS.CREATE`](../ts.create).\n\n**Notes:**\n\n- You can use this command to add data to a nonexisting time series in a single command. This is why `RETENTION`, `ENCODING`, `CHUNK_SIZE`, `ON_DUPLICATE`, and `LABELS` are optional arguments.\n- Setting `RETENTION` and `LABELS` introduces additional time complexity.\n\n## Return value\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - the timestamp of the upserted sample, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors).\n\n## Complexity\n\nIf a compaction rule exits on a time series, the performance of `TS.ADD` can be reduced. The complexity of `TS.ADD` is always `O(M)`, where `M` is the number of compaction rules or `O(1)` with no compaction.\n\n## Examples\n\n**Append a sample to a temperature time series**\n\nCreate a temperature time series, set its retention to 1 year, and append a sample.\n\n``` chroma\n127.0.0.1:6379> TS.ADD temperature:3:11 1548149183000 27 RETENTION 31536000000\n(integer) 1548149183000\n```\n\n**Note:** If a time series with such a name already exists, the sample is added, but the retention does not change.\n\nAdd a sample to the time series, setting the sample's timestamp according to the server clock.\n\n``` chroma\n127.0.0.1:6379> TS.ADD temperature:3:11 * 30\n(integer) 1662042954573\n```\n\n## See also\n\n[`TS.CREATE`](../ts.create)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.add/](https://redis.io/commands/ts.add/)"
- name: ts.alter
  id: ts.alter/index
  summary: is key name for the time series
  description: "# TS.ALTER\n\n    TS.ALTER\n\nSyntax\n\n``` command-syntax\nTS.ALTER key \n  [RETENTION retentionPeriod] \n  [CHUNK_SIZE size] \n  [DUPLICATE_POLICY policy] \n  [LABELS [{label value}...]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(N) where N is the number of labels requested to update\n\nUpdate the retention, chunk size, duplicate policy, and labels of an existing time series\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n**Note:** This command alters only the specified element. For example, if you specify only `RETENTION` and `LABELS`, the chunk size and the duplicate policy are not altered.\n\n## Optional arguments\n\n`RETENTION retentionPeriod`\n\nis maximum retention period, compared to the maximum existing timestamp, in milliseconds. See `RETENTION` in [`TS.CREATE`](../ts.create).\n\n`CHUNK_SIZE size`\n\nis the initial allocation size, in bytes, for the data part of each new chunk. Actual chunks may consume more memory. See `CHUNK_SIZE` in [`TS.CREATE`](../ts.create). Changing this value does not affect existing chunks.\n\n`DUPLICATE_POLICY policy`\n\nis policy for handling multiple samples with identical timestamps. See `DUPLICATE_POLICY` in [`TS.CREATE`](../ts.create).\n\n`LABELS [{label value}...]`\n\nis set of label-value pairs that represent metadata labels of the key and serve as a secondary index.\n\nIf `LABELS` is specified, the given label list is applied. Labels that are not present in the given list are removed implicitly. Specifying `LABELS` with no label-value pairs removes all existing labels. See `LABELS` in [`TS.CREATE`](../ts.create).\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n**Alter a temperature time series**\n\nCreate a temperature time series.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temperature:2:32 RETENTION 60000 DUPLICATE_POLICY MAX LABELS sensor_id 2 area_id 32\nOK\n```\n\nAlter the labels in the time series.\n\n``` chroma\n127.0.0.1:6379> TS.ALTER temperature:2:32 LABELS sensor_id 2 area_id 32 sub_area_id 15\nOK\n```\n\n## See also\n\n[`TS.CREATE`](../ts.create)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.alter/](https://redis.io/commands/ts.alter/)"
- name: ts.create
  id: ts.create/index
  summary: is key name for the time series
  description: "# TS.CREATE\n\n    TS.CREATE\n\nSyntax\n\n``` command-syntax\nTS.CREATE key \n  [RETENTION retentionPeriod] \n  [ENCODING [UNCOMPRESSED|COMPRESSED]] \n  [CHUNK_SIZE size] \n  [DUPLICATE_POLICY policy] \n  [LABELS {label value}...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(1)\n\nCreate a new time series\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n**Notes:**\n\n- If a key already exists, you get a Redis error reply, `TSDB: key already exists`. You can check for the existence of a key with the [`EXISTS`](../exists) command.\n- Other commands that also create a new time series when called with a key that does not exist are [`TS.ADD`](../ts.add), [`TS.INCRBY`](../ts.incrby), and [`TS.DECRBY`](../ts.decrby).\n\n## Optional arguments\n\n`RETENTION retentionPeriod`\n\nis maximum age for samples compared to the highest reported timestamp, in milliseconds. Samples are expired based solely on the difference between their timestamp and the timestamps passed to subsequent [`TS.ADD`](../ts.add), [`TS.MADD`](../ts.madd), [`TS.INCRBY`](../ts.incrby), and [`TS.DECRBY`](../ts.decrby) calls with this key.\n\nWhen set to 0, samples never expire. When not specified, the option is set to the global [RETENTION_POLICY](https://redis.io/docs/stack/timeseries/configuration/#retention_policy) configuration of the database, which by default is 0.\n\n`ENCODING enc`\n\nspecifies the series samples encoding format as one of the following values:\n\n- `COMPRESSED`, applies compression to the series samples.\n- `UNCOMPRESSED`, keeps the raw samples in memory. Adding this flag keeps data in an uncompressed form.\n\n`COMPRESSED` is almost always the right choice. Compression not only saves memory but usually improves performance due to a lower number of memory accesses. It can result in about 90% memory reduction. The exception are highly irregular timestamps or values, which occur rarely.\n\nWhen not specified, the option is set to `COMPRESSED`.\n\n`CHUNK_SIZE size`\n\nis initial allocation size, in bytes, for the data part of each new chunk. Actual chunks may consume more memory. Changing chunkSize (using [`TS.ALTER`](../ts.alter)) does not affect existing chunks.\n\nMust be a multiple of 8 in the range \\[48 .. 1048576\\]. When not specified, it is set to the global [CHUNK_SIZE_BYTES](https://redis.io/docs/stack/timeseries/configuration/#chunk_size_bytes) configuration of the database, which by default is 4096 (a single memory page).\n\nNote: Before v1.6.10 no minimum was enforced. Between v1.6.10 and v1.6.17 and in v1.8.0 the minimum value was 128. Since v1.8.1 the minimum value is 48.\n\nThe data in each key is stored in chunks. Each chunk contains header and data for a given timeframe. An index contains all chunks. Iterations occur inside each chunk. Depending on your use case, consider these tradeoffs for having smaller or larger sizes of chunks:\n\n- Insert performance: Smaller chunks result in slower inserts (more chunks need to be created).\n- Query performance: Queries for a small subset when the chunks are very large are slower, as we need to iterate over the chunk to find the data.\n- Larger chunks may take more memory when you have a very large number of keys and very few samples per key, or less memory when you have many samples per key.\n\nIf you are unsure about your use case, select the default.\n\n`DUPLICATE_POLICY policy`\n\nis policy for handling insertion ([`TS.ADD`](../ts.add) and [`TS.MADD`](../ts.madd)) of multiple samples with identical timestamps, with one of the following values:\n\n- `BLOCK`: ignore any newly reported value and reply with an error\n- `FIRST`: ignore any newly reported value\n- `LAST`: override with the newly reported value\n- `MIN`: only override if the value is lower than the existing value\n- `MAX`: only override if the value is higher than the existing value\n- `SUM`: If a previous sample exists, add the new sample to it so that the updated value is equal to (previous + new). If no previous sample exists, set the updated value equal to the new value.\n\nWhen not specified: set to the global [DUPLICATE_POLICY](https://redis.io/docs/stack/timeseries/configuration/#duplicate_policy) configuration of the database (which, by default, is `BLOCK`).\n\n`LABELS {label value}...`\n\nis set of label-value pairs that represent metadata labels of the key and serve as a secondary index.\n\nThe [`TS.MGET`](../ts.mget), [`TS.MRANGE`](../ts.mrange), and [`TS.MREVRANGE`](../ts.mrevrange) commands operate on multiple time series based on their labels. The [`TS.QUERYINDEX`](../ts.queryindex) command returns all time series keys matching a given filter based on their labels.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n**Create a temperature time series**\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temperature:2:32 RETENTION 60000 DUPLICATE_POLICY MAX LABELS sensor_id 2 area_id 32\nOK\n```\n\n## See also\n\n[`TS.ADD`](../ts.add) \\| [`TS.INCRBY`](../ts.incrby) \\| [`TS.DECRBY`](../ts.decrby) \\| [`TS.MGET`](../ts.mget) \\| [`TS.MRANGE`](../ts.mrange) \\| [`TS.MREVRANGE`](../ts.mrevrange) \\| [`TS.QUERYINDEX`](../ts.queryindex)\n\n## Related topics\n\n- [RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n- [RedisTimeSeries Version 1.2 Is Here!](https://redis.com/blog/redistimeseries-version-1-2-is-here/)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.create/](https://redis.io/commands/ts.create/)"
- name: ts.createrule
  id: ts.createrule/index
  summary: is key name for the source time series
  description: "# TS.CREATERULE\n\n    TS.CREATERULE\n\nSyntax\n\n``` command-syntax\nTS.CREATERULE sourceKey destKey \n  AGGREGATION aggregator bucketDuration \n  [alignTimestamp]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(1)\n\nCreate a compaction rule\n\n[Examples](#examples)\n\n## Required arguments\n\n`sourceKey`\n\nis key name for the source time series.\n\n`destKey`\n\nis key name for destination (compacted) time series. It must be created before `TS.CREATERULE` is called.\n\n`AGGREGATION aggregator bucketDuration`\n\naggregates results into time buckets.\n\n- `aggregator` takes one of the following aggregation types:\n\n  | `aggregator` | Description                                                                    |\n  |--------------|--------------------------------------------------------------------------------|\n  | `avg`        | Arithmetic mean of all values                                                  |\n  | `sum`        | Sum of all values                                                              |\n  | `min`        | Minimum value                                                                  |\n  | `max`        | Maximum value                                                                  |\n  | `range`      | Difference between the highest and the lowest value                            |\n  | `count`      | Number of values                                                               |\n  | `first`      | Value with lowest timestamp in the bucket                                      |\n  | `last`       | Value with highest timestamp in the bucket                                     |\n  | `std.p`      | Population standard deviation of the values                                    |\n  | `std.s`      | Sample standard deviation of the values                                        |\n  | `var.p`      | Population variance of the values                                              |\n  | `var.s`      | Sample variance of the values                                                  |\n  | `twa`        | Time-weighted average over the bucket's timeframe (since RedisTimeSeries v1.8) |\n\n- `bucketDuration` is duration of each bucket, in milliseconds.\n\n**Notes**\n\n- Only new samples that are added into the source series after the creation of the rule will be aggregated.\n- Calling `TS.CREATERULE` with a nonempty `destKey` may result in inconsistencies between the raw and the compacted data.\n- Explicitly adding samples to a compacted time series (using [`TS.ADD`](../ts.add), [`TS.MADD`](../ts.madd), [`TS.INCRBY`](../ts.incrby), or [`TS.DECRBY`](../ts.decrby)) may result in inconsistencies between the raw and the compacted data. The compaction process may override such samples.\n- If no samples are added to the source time series during a bucket period. no *compacted sample* is added to the destination time series.\n- The timestamp of a compacted sample added to the destination time series is set to the start timestamp the appropriate compaction bucket. For example, for a 10-minute compaction bucket with no alignment, the compacted samples timestamps are `x:00`, `x:10`, `x:20`, and so on.\n- Deleting `destKey` will cause the compaction rule to be deleted as well.\n- On a clustered environment, hash tags should be used to force `sourceKey` and `destKey` to be stored in the same hash slot.\n\n## Optional arguments\n\n`alignTimestamp` (since RedisTimeSeries v1.8)\n\nensures that there is a bucket that starts exactly at `alignTimestamp` and aligns all other buckets accordingly. It is expressed in milliseconds. The default value is 0 aligned with the epoch. For example, if `bucketDuration` is 24 hours (`24 * 3600 * 1000`), setting `alignTimestamp` to 6 hours after the epoch (`6 * 3600 * 1000`) ensures that each bucket’s timeframe is `[06:00 .. 06:00)`.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## Examples\n\n**Create a compaction rule**\n\nCreate a time series to store the temperatures measured in Tel Aviv.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:TLV LABELS type temp location TLV\nOK\n```\n\nNext, create a compacted time series named *dailyAvgTemp* containing one compacted sample per 24 hours: the time-weighted average of all measurements taken from midnight to next midnight.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE dailyAvgTemp:TLV LABELS type temp location TLV\n127.0.0.1:6379> TS.CREATERULE temp:TLV dailyAvgTemp:TLV AGGREGATION twa 86400000 \n```\n\nNow, also create a compacted time series named *dailyDiffTemp*. This time series will contain one compacted sample per 24 hours: the difference between the minimum and the maximum temperature measured between 06:00 and 06:00 next day. Here, 86400000 is the number of milliseconds in 24 hours, 21600000 is the number of milliseconds in 6 hours.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE dailyDiffTemp:TLV LABELS type temp location TLV\n127.0.0.1:6379> TS.CREATERULE temp:TLV dailyDiffTemp:TLV AGGREGATION range 86400000 21600000\n```\n\n## See also\n\n[`TS.DELETERULE`](../ts.deleterule)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.createrule/](https://redis.io/commands/ts.createrule/)"
- name: ts.decrby
  id: ts.decrby/index
  summary: is key name for the time series
  description: "# TS.DECRBY\n\n    TS.DECRBY\n\nSyntax\n\n``` command-syntax\nTS.DECRBY key value \n  [TIMESTAMP timestamp] \n  [RETENTION retentionPeriod] \n  [UNCOMPRESSED] \n  [CHUNK_SIZE size] \n  [LABELS {label value}...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(M) when M is the amount of compaction rules or O(1) with no compaction\n\nDecrease the value of the sample with the maximum existing timestamp, or create a new sample with a value equal to the value of the sample with the maximum existing timestamp with a given decrement\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n`value`\n\nis numeric data value of the sample (double)\n\n**Notes**\n\n- When specified key does not exist, a new time series is created.\n- You can use this command as a counter or gauge that automatically gets history as a time series.\n- Explicitly adding samples to a compacted time series (using [`TS.ADD`](../ts.add), [`TS.MADD`](../ts.madd), [`TS.INCRBY`](../ts.incrby), or `TS.DECRBY`) may result in inconsistencies between the raw and the compacted data. The compaction process may override such samples.\n\n## Optional arguments\n\n`TIMESTAMP timestamp`\n\nis (integer) UNIX sample timestamp in milliseconds or `*` to set the timestamp according to the server clock.\n\n`timestamp` must be equal to or higher than the maximum existing timestamp. When equal, the value of the sample with the maximum existing timestamp is decreased. If it is higher, a new sample with a timestamp set to `timestamp` is created, and its value is set to the value of the sample with the maximum existing timestamp minus `value`.\n\nIf the time series is empty, the value is set to `value`.\n\nWhen not specified, the timestamp is set according to the server clock.\n\n`RETENTION retentionPeriod`\n\nis maximum retention period, compared to the maximum existing timestamp, in milliseconds. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `RETENTION` in [`TS.CREATE`](../ts.create).\n\n`UNCOMPRESSED`\n\nchanges data storage from compressed (default) to uncompressed. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `ENCODING` in [`TS.CREATE`](../ts.create).\n\n`CHUNK_SIZE size`\n\nis memory size, in bytes, allocated for each data chunk. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `CHUNK_SIZE` in [`TS.CREATE`](../ts.create).\n\n`LABELS [{label value}...]`\n\nis set of label-value pairs that represent metadata labels of the key and serve as a secondary index. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `LABELS` in [`TS.CREATE`](../ts.create).\n\n**Notes**\n\n- You can use this command to add data to a nonexisting time series in a single command. This is why `RETENTION`, `UNCOMPRESSED`, `CHUNK_SIZE`, and `LABELS` are optional arguments.\n- When specified and the key doesn't exist, a new time series is created. Setting the `RETENTION` and `LABELS` introduces additional time complexity.\n\n## Return value\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - the timestamp of the upserted sample, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors).\n\n## See also\n\n[`TS.INCRBY`](../ts.incrby) \\| [`TS.CREATE`](../ts.create)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.decrby/](https://redis.io/commands/ts.decrby/)"
- name: ts.del
  id: ts.del/index
  summary: is key name for the time series
  description: "# TS.DEL\n\n    TS.DEL\n\nSyntax\n\n``` command-syntax\nTS.DEL key fromTimestamp toTimestamp\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.6.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(N) where N is the number of data points that will be removed\n\nDelete all samples between two timestamps for a given time series\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n`fromTimestamp`\n\nis start timestamp for the range deletion.\n\n`toTimestamp`\n\nis end timestamp for the range deletion.\n\nThe given timestamp interval is closed (inclusive), meaning that samples whose timestamp eqauls the `fromTimestamp` or `toTimestamp` are also deleted.\n\n**Notes:**\n\n- If fromTimestamp is older than the retention period compared to the maximum existing timestamp, the deletion is discarded and an error is returned.\n- When deleting a sample from a time series for which compaction rules are defined:\n  - If all the original samples for an affected compaction bucket are available, the compacted value is recalculated based on the remaining original samples, or removed if all original samples within the compaction bucket were deleted.\n  - If some or all the original samples for an affected compaction bucket were expired, the deletion is discarded and an error is returned.\n- Explicitly deleting samples from a compacted time series may result in inconsistencies between the raw and the compacted data. The compaction process may override such samples. That being said, it is safe to explicitly delete samples from a compacted time series beyond the retention period of the original time series.\n\n## Return value\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of samples that were deleted, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors).\n\n## Examples\n\n**Delete range of data points**\n\nCreate time series for temperature in Tel Aviv and Jerusalem, then add different temperature samples.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:TLV LABELS type temp location TLV\nOK\n127.0.0.1:6379> TS.CREATE temp:JLM LABELS type temp location JLM\nOK\n127.0.0.1:6379> TS.MADD temp:TLV 1000 30 temp:TLV 1010 35 temp:TLV 1020 9999 temp:TLV 1030 40\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n4) (integer) 1030\n127.0.0.1:6379> TS.MADD temp:JLM 1005 30 temp:JLM 1015 35 temp:JLM 1025 9999 temp:JLM 1035 40\n1) (integer) 1005\n2) (integer) 1015\n3) (integer) 1025\n4) (integer) 1035\n```\n\nDelete the range of data points for temperature in Tel Aviv.\n\n``` chroma\n127.0.0.1:6379> TS.DEL temp:TLV 1000 1030\n(integer) 4\n```\n\n## See also\n\n[`TS.ADD`](../ts.add)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.del/](https://redis.io/commands/ts.del/)"
- name: ts.deleterule
  id: ts.deleterule/index
  summary: is key name for the source time series
  description: "# TS.DELETERULE\n\n    TS.DELETERULE\n\nSyntax\n\n``` command-syntax\nTS.DELETERULE sourceKey destKey\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(1)\n\nDelete a compaction rule\n\n## Required arguments\n\n`sourceKey`\n\nis key name for the source time series.\n\n`destKey`\n\nis key name for destination (compacted) time series.\n\n**Note:** This command does not delete the compacted series.\n\n## Return value\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) - `OK` if executed correctly, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) otherwise.\n\n## See also\n\n[`TS.CREATERULE`](../ts.createrule)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.deleterule/](https://redis.io/commands/ts.deleterule/)"
- name: ts.get
  id: ts.get/index
  summary: is key name for the time series
  description: "# TS.GET\n\n    TS.GET\n\nSyntax\n\n``` command-syntax\nTS.GET key \n  [LATEST]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(1)\n\nGet the sample with the highest timestamp from a given time series\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n## Optional arguments\n\n`LATEST` (since RedisTimeSeries v1.8)\n\nis used when a time series is a compaction. With `LATEST`, TS.GET reports the compacted value of the latest, possibly partial, bucket. Without `LATEST`, TS.GET does not report the latest, possibly partial, bucket. When a time series is not a compaction, `LATEST` is ignored.\n\nThe data in the latest bucket of a compaction is possibly partial. A bucket is *closed* and compacted only upon arrival of a new sample that *opens* a new *latest* bucket. There are cases, however, when the compacted value of the latest, possibly partial, bucket is also required. In such a case, use `LATEST`.\n\n## Return value\n\nOne of:\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of a single ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)) pair representing (timestamp, value(double)) of the sample with the highest timetamp\n- An empty [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) - when the time series is empty\n- [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) (e.g., when the key does not exist or when the number of arguments is wrong)\n\n## Examples\n\n**Get latest measured temperature for a city**\n\nCreate a time series to store the temperatures measured in Tel Aviv and add four measurements for Sun Jan 01 2023\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:TLV LABELS type temp location TLV\nOK\n127.0.0.1:6379> TS.MADD temp:TLV 1672534800 12 temp:TLV 1672556400 16 temp:TLV 1672578000 21 temp:TLV 1672599600 14\n```\n\nNext, get the latest measured temperature (the temperature with the highest timestamp)\n\n``` chroma\n127.0.0.1:6379> TS.GET temp:TLV\n1) (integer) 1672599600\n2) 14\n```\n\n**Get latest maximal daily temperature for a city**\n\nCreate a time series to store the temperatures measured in Jerusalem\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:JLM LABELS type temp location JLM\nOK\n```\n\nNext, create a compacted time series named *dailyAvgTemp:JLM* containing one compacted sample per 24 hours: the maximum of all measurements taken from midnight to next midnight.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE dailyMaxTemp:JLM LABELS type temp location JLM\nOK\n127.0.0.1:6379> TS.CREATERULE temp:JLM dailyMaxTemp:JLM AGGREGATION max 86400000\nOK\n```\n\nAdd four measurements for Sun Jan 01 2023 and three measurements for Mon Jan 02 2023\n\n``` chroma\n127.0.0.1:6379> TS.MADD temp:JLM 1672534800000 12 temp:JLM 1672556400000 16 temp:JLM 1672578000000 21 temp:JLM 1672599600000 14\n1) (integer) 1672534800000\n2) (integer) 1672556400000\n3) (integer) 1672578000000\n4) (integer) 1672599600000\n127.0.0.1:6379> TS.MADD temp:JLM 1672621200000 11 temp:JLM 1672642800000 21 temp:JLM 1672664400000 26\n1) (integer) 1672621200000\n2) (integer) 1672642800000\n3) (integer) 1672664400000\n```\n\nNext, get the latest maximum daily temperature; do not report the latest, possibly partial, bucket\n\n``` chroma\n127.0.0.1:6379> TS.GET dailyMaxTemp:JLM\n1) (integer) 1672531200000\n2) 21\n```\n\nGet the latest maximum daily temperature (the temperature with the highest timestamp); report the latest, possibly partial, bucket\n\n``` chroma\n127.0.0.1:6379> TS.GET dailyMaxTemp:JLM LATEST\n1) (integer) 1672617600000\n2) 26\n```\n\n## See also\n\n[`TS.MGET`](../ts.mget)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.get/](https://redis.io/commands/ts.get/)"
- name: ts.incrby
  id: ts.incrby/index
  summary: is key name for the time series
  description: "# TS.INCRBY\n\n    TS.INCRBY\n\nSyntax\n\n``` command-syntax\nTS.INCRBY key value \n  [TIMESTAMP timestamp] \n  [RETENTION retentionPeriod] \n  [UNCOMPRESSED] \n  [CHUNK_SIZE size] \n  [LABELS {label value}...]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(M) when M is the amount of compaction rules or O(1) with no compaction\n\nIncrease the value of the sample with the maximum existing timestamp, or create a new sample with a value equal to the value of the sample with the maximum existing timestamp with a given increment\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis key name for the time series.\n\n`value`\n\nis numeric data value of the sample (double)\n\n**Notes**\n\n- When specified key does not exist, a new time series is created.\n- You can use this command as a counter or gauge that automatically gets history as a time series.\n- Explicitly adding samples to a compacted time series (using [`TS.ADD`](../ts.add), [`TS.MADD`](../ts.madd), `TS.INCRBY`, or [`TS.DECRBY`](../ts.decrby)) may result in inconsistencies between the raw and the compacted data. The compaction process may override such samples.  \n\n## Optional arguments\n\n`TIMESTAMP timestamp`\n\nis (integer) UNIX sample timestamp in milliseconds or `*` to set the timestamp according to the server clock.\n\n`timestamp` must be equal to or higher than the maximum existing timestamp. When equal, the value of the sample with the maximum existing timestamp is increased. If it is higher, a new sample with a timestamp set to `timestamp` is created, and its value is set to the value of the sample with the maximum existing timestamp plus `value`.\n\nIf the time series is empty, the value is set to `value`.\n\nWhen not specified, the timestamp is set according to the server clock.\n\n`RETENTION retentionPeriod`\n\nis maximum retention period, compared to the maximum existing timestamp, in milliseconds. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `RETENTION` in [`TS.CREATE`](../ts.create).\n\n`UNCOMPRESSED`\n\nchanges data storage from compressed (default) to uncompressed. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `ENCODING` in [`TS.CREATE`](../ts.create).\n\n`CHUNK_SIZE size`\n\nis memory size, in bytes, allocated for each data chunk. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `CHUNK_SIZE` in [`TS.CREATE`](../ts.create).\n\n`LABELS [{label value}...]`\n\nis set of label-value pairs that represent metadata labels of the key and serve as a secondary index. Use it only if you are creating a new time series. It is ignored if you are adding samples to an existing time series. See `LABELS` in [`TS.CREATE`](../ts.create).\n\n**Notes**\n\n- You can use this command to add data to a nonexisting time series in a single command. This is why `RETENTION`, `UNCOMPRESSED`, `CHUNK_SIZE`, and `LABELS` are optional arguments.\n- When specified and the key doesn't exist, a new time series is created. Setting the `RETENTION` and `LABELS` introduces additional time complexity.\n\n## Return value\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - the timestamp of the upserted sample, or [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors).\n\n## Examples\n\n**Store sum of data from several sources**\n\nSuppose you are getting number of orders or total income per minute from several points of sale, and you want to store only the combined value. Call TS.INCRBY for each point-of-sale report.\n\n``` chroma\n127.0.0.1:6379> TS.INCRBY a 232 TIMESTAMP 1657811829000      // point-of-sale #1\n(integer) 1657811829000\n127.0.0.1:6379> TS.INCRBY a 157 TIMESTAMP 1657811829000     // point-of-sale #2\n(integer) 1657811829000\n127.0.0.1:6379> TS.INCRBY a 432 TIMESTAMP 1657811829000     // point-of-sale #3\n(integer) 1657811829000\n```\n\nNote that the timestamps must arrive in non-decreasing order.\n\n``` chroma\n127.0.0.1:6379> ts.incrby a 100 TIMESTAMP 50\n(error) TSDB: timestamp must be equal to or higher than the maximum existing timestamp\n```\n\nYou can achieve similar results without such protection using `TS.ADD key timestamp value ON_DUPLICATE sum`.\n\n**Count sensor captures**\n\nSupose a sensor ticks whenever a car is passed on a road, and you want to count occurrences. Whenever you get a tick from the sensor you can simply call:\n\n``` chroma\n127.0.0.1:6379> TS.INCRBY a 1\n(integer) 1658431553109\n```\n\nThe timestamp is filled automatically.\n\n## See also\n\n[`TS.DECRBY`](../ts.decrby) \\| [`TS.CREATE`](../ts.create)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.incrby/](https://redis.io/commands/ts.incrby/)"
- name: ts.info
  id: ts.info/index
  summary: Return information and statistics for a time series
  description: "# TS.INFO\n\n    TS.INFO\n\nSyntax\n\n``` command-syntax\nTS.INFO key \n  [DEBUG]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(1)\n\nReturn information and statistics for a time series.\n\n[Examples](#examples)\n\n## Required arguments\n\n`key` is key name of the time series.\n\n## Optional arguments\n\n`[DEBUG]`\n\nis an optional flag to get a more detailed information about the chunks.\n\n## Return value\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information about the time series (name-value pairs):\n\n| Name [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|-----------------------------------------------------------------------------------------------||\n| `totalSamples`                                                                                | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) Total number of samples in this time series|\n| `memoryUsage`                                                                                 | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) Total number of bytes allocated for this time series, which is the sum of - The memory used for storing the series' configuration parameters (retention period, duplication policy, etc.) - The memory used for storing the series' compaction rules - The memory used for storing the series' labels (key-value pairs) - The memory used for storing the chunks (chunk header + compressed/uncompressed data)                                                                                                                                                                                                                    |\n| `firstTimestamp`                                                                              | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) First timestamp present in this time series|\n| `lastTimestamp`                                                                               | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) Last timestamp present in this time series                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `retentionTime`                                                                               | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) The retention period, in milliseconds, for this time series|\n| `chunkCount`                                                                                  | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) Number of chunks used for this time series|\n| `chunkSize`                                                                                   | [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) The initial allocation size, in bytes, for the data part of each new chunk. Actual chunks may consume more memory. Changing the chunk size (using [`TS.ALTER`](../ts.alter)) does not affect existing chunks.                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `chunkType`                                                                                   | [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) The chunks type: `compressed` or `uncompressed`|\n| `duplicatePolicy`                                                                             | [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) or [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) The [duplicate policy](https://redis.io/docs/stack/timeseries/configuration/#duplicate_policy) of this time series                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `labels`                                                                                      | [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) or [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) Metadata labels of this time series Each element is a 2-elements [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)) representing (label, value)                                                                                                                                                                                                |\n| `sourceKey`                                                                                   | [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) or [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) Key name for source time series in case the current series is a target of a [compaction rule](../ts.createrule/index)                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `rules`                                                                                       | [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) [Compaction rules](../ts.createrule/index) defined in this time series Each rule is an [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with 4 elements: - [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): The compaction key - [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The bucket duration - [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): The aggregator - [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The alignment (since RedisTimeSeries v1.8) |\n\nWhen [`DEBUG`](../debug) is specified, the response also contains:\n\n| Name [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) | Description|\n|-----------------------------------------------------------------------------------------------||\n| `keySelfName`                                                                                 | [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) Name of the key|\n| `Chunks`                                                                                      | [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) with information about the chunks Each element is an [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of information about a single chunk in a name([Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings))-value pairs: - `startTimestamp` - [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - First timestamp present in the chunk - `endTimestamp` - [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - Last timestamp present in the chunk - `samples` - [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - Total number of samples in the chunk - `size` - [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) - the chunk's internal data size (without overheads) in bytes - `bytesPerSample` - [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) (double) - Ratio of `size` and `samples` |\n\n## Examples\n\n**Find information about a temperature/humidity time series by location and sensor type**\n\nCreate a set of sensors to measure temperature and humidity in your study and kitchen.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE telemetry:study:temperature LABELS room study type temperature\nOK\n127.0.0.1:6379> TS.CREATE telemetry:study:humidity LABELS room study type humidity\nOK\n127.0.0.1:6379> TS.CREATE telemetry:kitchen:temperature LABELS room kitchen type temperature\nOK\n127.0.0.1:6379> TS.CREATE telemetry:kitchen:humidity LABELS room kitchen type humidity\nOK\n```\n\nFind information about the time series for temperature in the kitchen.\n\n``` chroma\n127.0.0.1:6379> TS.INFO telemetry:kitchen:temperature\n 1) totalSamples\n 2) (integer) 0\n 3) memoryUsage\n 4) (integer) 4246\n 5) firstTimestamp\n 6) (integer) 0\n 7) lastTimestamp\n 8) (integer) 0\n 9) retentionTime\n10) (integer) 0\n11) chunkCount\n12) (integer) 1\n13) chunkSize\n14) (integer) 4096\n15) chunkType\n16) compressed\n17) duplicatePolicy\n18) (nil)\n19) labels\n20) 1) 1) \"room\"\n       2) \"kitchen\"\n    2) 1) \"type\"\n       2) \"temperature\"\n21) sourceKey\n22) (nil)\n23) rules\n24) (empty array)\n```\n\nQuery the time series using DEBUG to get more information about the chunks.\n\n``` chroma\n127.0.0.1:6379> TS.INFO telemetry:kitchen:temperature DEBUG\n 1) totalSamples\n 2) (integer) 0\n 3) memoryUsage\n 4) (integer) 4246\n 5) firstTimestamp\n 6) (integer) 0\n 7) lastTimestamp\n 8) (integer) 0\n 9) retentionTime\n10) (integer) 0\n11) chunkCount\n12) (integer) 1\n13) chunkSize\n14) (integer) 4096\n15) chunkType\n16) compressed\n17) duplicatePolicy\n18) (nil)\n19) labels\n20) 1) 1) \"room\"\n       2) \"kitchen\"\n    2) 1) \"type\"\n       2) \"temperature\"\n21) sourceKey\n22) (nil)\n23) rules\n24) (empty array)\n25) keySelfName\n26) \"telemetry:kitchen:temperature\"\n27) Chunks\n28) 1)  1) startTimestamp\n        2) (integer) 0\n        3) endTimestamp\n        4) (integer) 0\n        5) samples\n        6) (integer) 0\n        7) size\n        8) (integer) 4096\n        9) bytesPerSample\n       10) \"inf\"\n```\n\n## See also\n\n[`TS.RANGE`](../ts.range) \\| [`TS.QUERYINDEX`](../ts.queryindex) \\| [`TS.GET`](../ts.get)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.info/](https://redis.io/commands/ts.info/)"
- name: ts.madd
  id: ts.madd/index
  summary: is the key name for the time series
  description: "# TS.MADD\n\n    TS.MADD\n\nSyntax\n\n``` command-syntax\nTS.MADD {key timestamp value}...\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(N\\*M) when N is the amount of series updated and M is the amount of compaction rules or O(N) with no compaction\n\nAppend new samples to one or more time series\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis the key name for the time series.\n\n`timestamp`\n\nis (integer) UNIX sample timestamp in milliseconds or `*` to set the timestamp according to the server clock.\n\n`value`\n\nis numeric data value of the sample (double). The double number should follow [RFC 7159](https://tools.ietf.org/html/rfc7159) (a JSON standard). The parser rejects overly large values that would not fit in binary64. It does not accept NaN or infinite values.\n\n**Notes:**\n\n- If `timestamp` is older than the retention period compared to the maximum existing timestamp, the sample is discarded and an error is returned.\n- Explicitly adding samples to a compacted time series (using [`TS.ADD`](../ts.add), `TS.MADD`, [`TS.INCRBY`](../ts.incrby), or [`TS.DECRBY`](../ts.decrby)) may result in inconsistencies between the raw and the compacted data. The compaction process may override such samples.\n\n## Return value\n\nEither\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers) representing the timestamp of each added sample or an [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) (e.g., on `DUPLICATE_POLICY` violation)\n- [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) (e.g., on wrong number of arguments)\n\n## Complexity\n\nIf a compaction rule exits on a time series, TS.MADD performance might be reduced. The complexity of TS.MADD is always `O(N*M)`, where `N` is the amount of series updated and `M` is the amount of compaction rules or `O(N)` with no compaction.\n\n## Examples\n\n**Add stock prices at different timestamps**\n\nCreate two stocks and add their prices at three different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.CREATE stock:B LABELS type stock name B\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120 stock:B 1000 120 stock:B 1010 110 stock:B 1020 100\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n4) (integer) 1000\n5) (integer) 1010\n6) (integer) 1020\n```\n\n## See also\n\n[`TS.MRANGE`](../ts.mrange) \\| [`TS.RANGE`](../ts.range) \\| [`TS.MREVRANGE`](../ts.mrevrange) \\| [`TS.REVRANGE`](../ts.revrange)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.madd/](https://redis.io/commands/ts.madd/)"
- name: ts.mget
  id: ts.mget/index
  summary: filters time series based on their labels and label values
  description: "# TS.MGET\n\n    TS.MGET\n\nSyntax\n\n``` command-syntax\nTS.MGET [LATEST] [WITHLABELS | SELECTED_LABELS label...] FILTER filterExpr...\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(n) where n is the number of time-series that match the filters\n\nGet the sample with the highest timestamp from each time series matching a specific filter\n\n[Examples](#examples)\n\n## Required arguments\n\n`FILTER filterExpr...`\n\nfilters time series based on their labels and label values. Each filter expression has one of the following syntaxes:\n\n- `label=value`, where `label` equals `value`\n- `label!=value`, where `label` does not equal `value`\n- `label=`, where `key` does not have label `label`\n- `label!=`, where `key` has label `label`\n- `label=(value1,value2,...)`, where `key` with label `label` equals one of the values in the list\n- `label!=(value1,value2,...)` where key with label `label` does not equal any of the values in the list\n\n**NOTES:**\n\n- At least one `label=value` filter is required.\n- Filters are conjunctive. For example, the FILTER `type=temperature room=study` means the a time series is a temperature time series of a study room.\n- Don't use whitespaces in the filter expression.\n\n## Optional arguments\n\n`LATEST` (since RedisTimeSeries v1.8)\n\nis used when a time series is a compaction. With `LATEST`, TS.MGET also reports the compacted value of the latest possibly partial bucket, given that this bucket's start time falls within `[fromTimestamp, toTimestamp]`. Without `LATEST`, TS.MGET does not report the latest possibly partial bucket. When a time series is not a compaction, `LATEST` is ignored.\n\nThe data in the latest bucket of a compaction is possibly partial. A bucket is *closed* and compacted only upon arrival of a new sample that *opens* a new *latest* bucket. There are cases, however, when the compacted value of the latest possibly partial bucket is also required. In such a case, use `LATEST`.\n\n`WITHLABELS`\n\nincludes in the reply all label-value pairs representing metadata labels of the time series. If `WITHLABELS` or `SELECTED_LABELS` are not specified, by default, an empty list is reported as label-value pairs.\n\n`SELECTED_LABELS label...` (since RedisTimeSeries v1.6)\n\nreturns a subset of the label-value pairs that represent metadata labels of the time series. Use when a large number of labels exists per series, but only the values of some of the labels are required. If `WITHLABELS` or `SELECTED_LABELS` are not specified, by default, an empty list is reported as label-value pairs.\n\n**Note:** The [`MGET`](../mget) command cannot be part of transaction when running on a Redis cluster.\n\n## Return value\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): for each time series matching the specified filters, the following is reported:\n  - bulk-string-reply: The time series key name\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): label-value pairs ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings))\n    - By default, an empty array is reported\n    - If `WITHLABELS` is specified, all labels associated with this time series are reported\n    - If `SELECTED_LABELS label...` is specified, the selected labels are reported (null value when no such label defined)\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a single timestamp-value pair ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) (double))\n\n## Examples\n\n**Select labels to retrieve**\n\nCreate time series for temperature in Tel Aviv and Jerusalem, then add different temperature samples.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:TLV LABELS type temp location TLV\nOK\n127.0.0.1:6379> TS.CREATE temp:JLM LABELS type temp location JLM\nOK\n127.0.0.1:6379> TS.MADD temp:TLV 1000 30 temp:TLV 1010 35 temp:TLV 1020 9999 temp:TLV 1030 40\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n4) (integer) 1030\n127.0.0.1:6379> TS.MADD temp:JLM 1005 30 temp:JLM 1015 35 temp:JLM 1025 9999 temp:JLM 1035 40\n1) (integer) 1005\n2) (integer) 1015\n3) (integer) 1025\n4) (integer) 1035\n```\n\nGet all the labels associated with the last sample.\n\n``` chroma\n127.0.0.1:6379> TS.MGET WITHLABELS FILTER type=temp\n1) 1) \"temp:JLM\"\n   2) 1) 1) \"type\"\n         2) \"temp\"\n      2) 1) \"location\"\n         2) \"JLM\"\n   3) 1) (integer) 1035\n      2) 40\n2) 1) \"temp:TLV\"\n   2) 1) 1) \"type\"\n         2) \"temp\"\n      2) 1) \"location\"\n         2) \"TLV\"\n   3) 1) (integer) 1030\n      2) 40\n```\n\nTo get only the `location` label for each last sample, use `SELECTED_LABELS`.\n\n``` chroma\n127.0.0.1:6379> TS.MGET SELECTED_LABELS location FILTER type=temp\n1) 1) \"temp:JLM\"\n   2) 1) 1) \"location\"\n         2) \"JLM\"\n   3) 1) (integer) 1035\n      2) 40\n2) 1) \"temp:TLV\"\n   2) 1) 1) \"location\"\n         2) \"TLV\"\n   3) 1) (integer) 1030\n      2) 40\n```\n\n## See also\n\n[`TS.MRANGE`](../ts.mrange) \\| [`TS.RANGE`](../ts.range) \\| [`TS.MREVRANGE`](../ts.mrevrange) \\| [`TS.REVRANGE`](../ts.revrange)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.mget/](https://redis.io/commands/ts.mget/)"
- name: ts.mrange
  id: ts.mrange/index
  summary: filters time series based on their labels and label values
  description: "# TS.MRANGE\n\n    TS.MRANGE\n\nSyntax\n\n``` command-syntax\nTS.MRANGE fromTimestamp toTimestamp\n  [LATEST]\n  [FILTER_BY_TS ts...]\n  [FILTER_BY_VALUE min max]\n  [WITHLABELS | SELECTED_LABELS label...]\n  [COUNT count]\n  [[ALIGN align] AGGREGATION aggregator bucketDuration [BUCKETTIMESTAMP bt] [EMPTY]]\n  FILTER filterExpr...\n  [GROUPBY label REDUCE reducer]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested ranges\n\nQuery a range across multiple time series by filters in forward direction\n\n[Examples](#examples)\n\n## Required arguments\n\n`fromTimestamp`\n\nis start timestamp for the range query (integer UNIX timestamp in milliseconds) or `-` to denote the timestamp of the earliest sample amongs all time series that passes `FILTER filterExpr...`.\n\n`toTimestamp`\n\nis end timestamp for the range query (integer UNIX timestamp in milliseconds) or `+` to denote the timestamp of the latest sample amongs all time series that passes `FILTER filterExpr...`.\n\n`FILTER filterExpr...`\n\nfilters time series based on their labels and label values. Each filter expression has one of the following syntaxes:\n\n- `label=value`, where `label` equals `value`\n- `label!=value`, where `label` does not equal `value`\n- `label=`, where `key` does not have label `label`\n- `label!=`, where `key` has label `label`\n- `label=(value1,value2,...)`, where `key` with label `label` equals one of the values in the list\n- `label!=(value1,value2,...)`, where key with label `label` does not equal any of the values in the list\n\n**Notes:**\n\n- At least one `label=value` filter is required.\n- Filters are conjunctive. For example, the FILTER `type=temperature room=study` means the a time series is a temperature time series of a study room.\n- Don't use whitespaces in the filter expression.\n\n## Optional arguments\n\n`LATEST` (since RedisTimeSeries v1.8)\n\nis used when a time series is a compaction. With `LATEST`, TS.MRANGE also reports the compacted value of the latest possibly partial bucket, given that this bucket's start time falls within `[fromTimestamp, toTimestamp]`. Without `LATEST`, TS.MRANGE does not report the latest possibly partial bucket. When a time series is not a compaction, `LATEST` is ignored.\n\nThe data in the latest bucket of a compaction is possibly partial. A bucket is *closed* and compacted only upon arrival of a new sample that *opens* a new *latest* bucket. There are cases, however, when the compacted value of the latest possibly partial bucket is also required. In such a case, use `LATEST`.\n\n`FILTER_BY_TS ts...` (since RedisTimeSeries v1.6)\n\nfilters samples by a list of specific timestamps. A sample passes the filter if its exact timestamp is specified and falls within `[fromTimestamp, toTimestamp]`.\n\n`FILTER_BY_VALUE min max` (since RedisTimeSeries v1.6)\n\nfilters samples by minimum and maximum values.\n\n`WITHLABELS`\n\nincludes in the reply all label-value pairs representing metadata labels of the time series. If `WITHLABELS` or `SELECTED_LABELS` are not specified, by default, an empty list is reported as label-value pairs.\n\n`SELECTED_LABELS label...` (since RedisTimeSeries v1.6)\n\nreturns a subset of the label-value pairs that represent metadata labels of the time series. Use when a large number of labels exists per series, but only the values of some of the labels are required. If `WITHLABELS` or `SELECTED_LABELS` are not specified, by default, an empty list is reported as label-value pairs.\n\n`COUNT count`\n\nlimits the number of returned samples.\n\n`ALIGN align` (since RedisTimeSeries v1.6)\n\nis a time bucket alignment control for `AGGREGATION`. It controls the time bucket timestamps by changing the reference timestamp on which a bucket is defined.\n\nValues include:\n\n- `start` or `-`: The reference timestamp will be the query start interval time (`fromTimestamp`) which can't be `-`\n- `end` or `+`: The reference timestamp will be the query end interval time (`toTimestamp`) which can't be `+`\n- A specific timestamp: align the reference timestamp to a specific time\n\n**Note:** When not provided, alignment is set to `0`.\n\n`AGGREGATION aggregator bucketDuration`\n\nper time series, aggregates samples into time buckets, where:\n\n- `aggregator` takes one of the following aggregation types:\n\n  | `aggregator` | Description                                                                    |\n  |--------------|--------------------------------------------------------------------------------|\n  | `avg`        | Arithmetic mean of all values                                                  |\n  | `sum`        | Sum of all values                                                              |\n  | `min`        | Minimum value                                                                  |\n  | `max`        | Maximum value                                                                  |\n  | `range`      | Difference between maximum value and minimum value                             |\n  | `count`      | Number of values                                                               |\n  | `first`      | Value with lowest timestamp in the bucket                                      |\n  | `last`       | Value with highest timestamp in the bucket                                     |\n  | `std.p`      | Population standard deviation of the values                                    |\n  | `std.s`      | Sample standard deviation of the values                                        |\n  | `var.p`      | Population variance of the values                                              |\n  | `var.s`      | Sample variance of the values                                                  |\n  | `twa`        | Time-weighted average over the bucket's timeframe (since RedisTimeSeries v1.8) |\n\n- `bucketDuration` is duration of each bucket, in milliseconds.\n\nWithout `ALIGN`, bucket start times are multiples of `bucketDuration`.\n\nWith `ALIGN align`, bucket start times are multiples of `bucketDuration` with remainder `align % bucketDuration`.\n\nThe first bucket start time is less than or equal to `fromTimestamp`.\n\n`[BUCKETTIMESTAMP bt]` (since RedisTimeSeries v1.8)\n\ncontrols how bucket timestamps are reported.\n\n| `bt`          | Timestamp reported for each bucket                     |\n|---------------|--------------------------------------------------------|\n| `-` or `low`  | the bucket's start time (default)                      |\n| `+` or `high` | the bucket's end time                                  |\n| `~` or `mid`  | the bucket's mid time (rounded down if not an integer) |\n\n`[EMPTY]` (since RedisTimeSeries v1.8)\n\nis a flag, which, when specified, reports aggregations also for empty buckets.\n\n| `aggregator`                                            | Value reported for each empty bucket                                                                                                                                                          |\n|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `sum`, `count`                                          | `0`                                                                                                                                                                                           |\n| `last`                                                  | The value of the last sample before the bucket's start. `NaN` when no such sample.                                                                                                            |\n| `twa`                                                   | Average value over the bucket's timeframe based on linear interpolation of the last sample before the bucket's start and the first sample after the bucket's end. `NaN` when no such samples. |\n| `min`, `max`, `range`, `avg`, `first`, `std.p`, `std.s` | `NaN`                                                                                                                                                                                         |\n\nRegardless of the values of `fromTimestamp` and `toTimestamp`, no data is reported for buckets that end before the earliest sample or begin after the latest sample in the time series.\n\n`GROUPBY label REDUCE reducer` (since RedisTimeSeries v1.6)\n\nsplits time series into groups, each group contains time series that share the same value for the provided label name, then aggregates results in each group.\n\nWhen combined with `AGGREGATION` the `GROUPBY`/`REDUCE` is applied post aggregation stage.\n\n- `label` is label name. A group is created for all time series that share the same value for this label.\n\n- `reducer` is an aggregation type used to aggregate the results in each group.\n\n  | `reducer` | Description                                                                                     |\n  |-----------|-------------------------------------------------------------------------------------------------|\n  | `avg`     | Arithmetic mean of all non-NaN values (since RedisTimeSeries v1.8)                              |\n  | `sum`     | Sum of all non-NaN values                                                                       |\n  | `min`     | Minimum non-NaN value                                                                           |\n  | `max`     | Maximum non-NaN value                                                                           |\n  | `range`   | Difference between maximum non-NaN value and minimum non-NaN value (since RedisTimeSeries v1.8) |\n  | `count`   | Number of non-NaN values (since RedisTimeSeries v1.8)                                           |\n  | `std.p`   | Population standard deviation of all non-NaN values (since RedisTimeSeries v1.8)                |\n  | `std.s`   | Sample standard deviation of all non-NaN values (since RedisTimeSeries v1.8)                    |\n  | `var.p`   | Population variance of all non-NaN values (since RedisTimeSeries v1.8)                          |\n  | `var.s`   | Sample variance of all non-NaN values (since RedisTimeSeries v1.8)                              |\n\n**Notes:**\n\n- The produced time series is named `<label>=<value>`\n- The produced time series contains two labels with these label array structures:\n  - `__reducer__`, the reducer used (e.g., `\"count\"`)\n  - `__source__`, the list of time series keys used to compute the grouped series (e.g., `\"key1,key2,key3\"`)\n\n**Note:** An `MRANGE` command cannot be part of a transaction when running on a Redis cluster.\n\n## Return value\n\nIf `GROUPBY label REDUCE reducer` is not specified:\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): for each time series matching the specified filters, the following is reported:\n  - bulk-string-reply: The time series key name\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): label-value pairs ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings))\n    - By default, an empty array is reported\n    - If `WITHLABELS` is specified, all labels associated with this time series are reported\n    - If `SELECTED_LABELS label...` is specified, the selected labels are reported (null value when no such label defined)\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): timestamp-value pairs ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) (double)): all samples/aggregations matching the range\n\nIf `GROUPBY label REDUCE reducer` is specified:\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): for each group of time series matching the specified filters, the following is reported:\n  - bulk-string-reply with the format `label=value` where `label` is the `GROUPBY` label argument\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): label-value pairs ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)):\n    - By default, an empty array is reported\n    - If `WITHLABELS` is specified, the `GROUPBY` label argument and value are reported\n    - If `SELECTED_LABELS label...` is specified, the selected labels are reported (null value when no such label defined or label does not have the same value for all grouped time series)\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): either a single pair ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)): the `GROUPBY` label argument and value, or empty array if\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a single pair ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)): the string `__reducer__` and the reducer argument\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a single pair ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)): the string `__source__` and the time series key names separated by `,`\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): timestamp-value pairs ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) (double)): all samples/aggregations matching the range\n\n## Examples\n\n**Retrieve maximum stock price per timestamp**\n\nCreate two stocks and add their prices at three different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.CREATE stock:B LABELS type stock name B\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:B 1000 120 stock:B 1010 110 stock:B 1020 100\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n```\n\nYou can now retrieve the maximum stock price per timestamp.\n\n``` chroma\n127.0.0.1:6379> TS.MRANGE - + WITHLABELS FILTER type=stock GROUPBY type REDUCE max\n1) 1) \"type=stock\"\n   2) 1) 1) \"type\"\n         2) \"stock\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"stock:A,stock:B\"\n   3) 1) 1) (integer) 1000\n         2) 120\n      2) 1) (integer) 1010\n         2) 110\n      3) 1) (integer) 1020\n         2) 120\n```\n\nThe `FILTER type=stock` clause returns a single time series representing stock prices. The `GROUPBY type REDUCE max` clause splits the time series into groups with identical type values, and then, for each timestamp, aggregates all series that share the same type value using the max aggregator.\n\n**Calculate average stock price and retrieve maximum average**\n\nCreate two stocks and add their prices at nine different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.CREATE stock:B LABELS type stock name B\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:B 1000 120 stock:B 1010 110 stock:B 1020 100\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:A 2000 200 stock:A 2010 210 stock:A 2020 220\n1) (integer) 2000\n2) (integer) 2010\n3) (integer) 2020\n127.0.0.1:6379> TS.MADD stock:B 2000 220 stock:B 2010 210 stock:B 2020 200\n1) (integer) 2000\n2) (integer) 2010\n3) (integer) 2020\n127.0.0.1:6379> TS.MADD stock:A 3000 300 stock:A 3010 310 stock:A 3020 320\n1) (integer) 3000\n2) (integer) 3010\n3) (integer) 3020\n127.0.0.1:6379> TS.MADD stock:B 3000 320 stock:B 3010 310 stock:B 3020 300\n1) (integer) 3000\n2) (integer) 3010\n3) (integer) 3020\n```\n\nNow, for each stock, calculate the average stock price per a 1000-millisecond timeframe, and then retrieve the stock with the maximum average for that timeframe.\n\n``` chroma\n127.0.0.1:6379> TS.MRANGE - + WITHLABELS AGGREGATION avg 1000 FILTER type=stock GROUPBY type REDUCE max\n1) 1) \"type=stock\"\n   2) 1) 1) \"type\"\n         2) \"stock\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"stock:A,stock:B\"\n   3) 1) 1) (integer) 1000\n         2) 110\n      2) 1) (integer) 2000\n         2) 210\n      3) 1) (integer) 3000\n         2) 310\n```\n\n**Group query results**\n\nQuery all time series with the metric label equal to `cpu`, then group the time series by the value of their `metric_name` label value and for each group return the maximum value and the time series keys (*source*) with that value.\n\n``` chroma\n127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system\n(integer) 1548149180000\n127.0.0.1:6379> TS.ADD ts1 1548149185000 45\n(integer) 1548149185000\n127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user\n(integer) 1548149180000\n127.0.0.1:6379> TS.MRANGE - + WITHLABELS FILTER metric=cpu GROUPBY metric_name REDUCE max\n1) 1) \"metric_name=system\"\n   2) 1) 1) \"metric_name\"\n         2) \"system\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"ts1\"\n   3) 1) 1) (integer) 1548149180000\n         2) 90\n      2) 1) (integer) 1548149185000\n         2) 45\n2) 1) \"metric_name=user\"\n   2) 1) 1) \"metric_name\"\n         2) \"user\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"ts2\"\n   3) 1) 1) (integer) 1548149180000\n         2) 99\n```\n\n**Filter query by value**\n\nQuery all time series with the metric label equal to `cpu`, then filter values larger or equal to 90.0 and smaller or equal to 100.0.\n\n``` chroma\n127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system\n(integer) 1548149180000\n127.0.0.1:6379> TS.ADD ts1 1548149185000 45\n(integer) 1548149185000\n127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user\n(integer) 1548149180000\n127.0.0.1:6379> TS.MRANGE - + FILTER_BY_VALUE 90 100 WITHLABELS FILTER metric=cpu\n1) 1) \"ts1\"\n   2) 1) 1) \"metric\"\n         2) \"cpu\"\n      2) 1) \"metric_name\"\n         2) \"system\"\n   3) 1) 1) (integer) 1548149180000\n         2) 90\n2) 1) \"ts2\"\n   2) 1) 1) \"metric\"\n         2) \"cpu\"\n      2) 1) \"metric_name\"\n         2) \"user\"\n   3) 1) 1) (integer) 1548149180000\n         2) 99\n```\n\n**Query using a label**\n\nQuery all time series with the metric label equal to `cpu`, but only return the team label.\n\n``` chroma\n127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system team NY\n(integer) 1548149180000\n127.0.0.1:6379> TS.ADD ts1 1548149185000 45\n(integer) 1548149185000\n127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user team SF\n(integer) 1548149180000\n127.0.0.1:6379> TS.MRANGE - + SELECTED_LABELS team FILTER metric=cpu\n1) 1) \"ts1\"\n   2) 1) 1) \"team\"\n         2) \"NY\"\n   3) 1) 1) (integer) 1548149180000\n         2) 90\n      2) 1) (integer) 1548149185000\n         2) 45\n2) 1) \"ts2\"\n   2) 1) 1) \"team\"\n         2) \"SF\"\n   3) 1) 1) (integer) 1548149180000\n         2) 99\n```\n\n## See also\n\n[`TS.RANGE`](../ts.range) \\| [`TS.MREVRANGE`](../ts.mrevrange) \\| [`TS.REVRANGE`](../ts.revrange)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.mrange/](https://redis.io/commands/ts.mrange/)"
- name: ts.mrevrange
  id: ts.mrevrange/index
  summary: filters time series based on their labels and label values
  description: "# TS.MREVRANGE\n\n    TS.MREVRANGE\n\nSyntax\n\n``` command-syntax\nTS.MREVRANGE fromTimestamp toTimestamp\n  [LATEST]\n  [FILTER_BY_TS TS...]\n  [FILTER_BY_VALUE min max]\n  [WITHLABELS | SELECTED_LABELS label...]\n  [COUNT count]\n  [[ALIGN align] AGGREGATION aggregator bucketDuration [BUCKETTIMESTAMP bt] [EMPTY]]\n  FILTER filterExpr...\n  [GROUPBY label REDUCE reducer]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.4.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested ranges\n\nQuery a range across multiple time series by filters in reverse direction\n\n[Examples](#examples)\n\n## Required arguments\n\n`fromTimestamp`\n\nis start timestamp for the range query (integer UNIX timestamp in milliseconds) or `-` to denote the timestamp of the earliest sample amongs all time series that passes `FILTER filterExpr...`.\n\n`toTimestamp`\n\nis end timestamp for the range query (integer UNIX timestamp in milliseconds) or `+` to denote the timestamp of the latest sample amongs all time series that passes `FILTER filterExpr...`.\n\n`FILTER filterExpr...`\n\nfilters time series based on their labels and label values. Each filter expression has one of the following syntaxes:\n\n- `label=value`, where `label` equals `value`\n- `label!=value`, where `label` does not equal `value`\n- `label=`, where `key` does not have label `label`\n- `label!=`, where `key` has label `label`\n- `label=(value1,value2,...)`, where `key` with label `label` equals one of the values in the list\n- `label!=(value1,value2,...)`, where key with label `label` does not equal any of the values in the list\n\n**Notes:**\n\n- At least one `label=value` filter is required.\n- Filters are conjunctive. For example, the FILTER `type=temperature room=study` means the a time series is a temperature time series of a study room.\n- Don't use whitespaces in the filter expression.\n\n## Optional arguments\n\n`LATEST` (since RedisTimeSeries v1.8)\n\nis used when a time series is a compaction. With `LATEST`, TS.MREVRANGE also reports the compacted value of the latest possibly partial bucket, given that this bucket's start time falls within `[fromTimestamp, toTimestamp]`. Without `LATEST`, TS.MREVRANGE does not report the latest possibly partial bucket. When a time series is not a compaction, `LATEST` is ignored.\n\nThe data in the latest bucket of a compaction is possibly partial. A bucket is *closed* and compacted only upon arrival of a new sample that *opens* a new *latest* bucket. There are cases, however, when the compacted value of the latest possibly partial bucket is also required. In such a case, use `LATEST`.\n\n`FILTER_BY_TS ts...` (since RedisTimeSeries v1.6)\n\nfilters samples by a list of specific timestamps. A sample passes the filter if its exact timestamp is specified and falls within `[fromTimestamp, toTimestamp]`.\n\n`FILTER_BY_VALUE min max` (since RedisTimeSeries v1.6)\n\nfilters samples by minimum and maximum values.\n\n`WITHLABELS`\n\nincludes in the reply all label-value pairs representing metadata labels of the time series. If `WITHLABELS` or `SELECTED_LABELS` are not specified, by default, an empty list is reported as label-value pairs.\n\n`SELECTED_LABELS label...` (since RedisTimeSeries v1.6)\n\nreturns a subset of the label-value pairs that represent metadata labels of the time series. Use when a large number of labels exists per series, but only the values of some of the labels are required. If `WITHLABELS` or `SELECTED_LABELS` are not specified, by default, an empty list is reported as label-value pairs.\n\n`COUNT count`\n\nlimits the number of returned samples.\n\n`ALIGN align` (since RedisTimeSeries v1.6)\n\nis a time bucket alignment control for `AGGREGATION`. It controls the time bucket timestamps by changing the reference timestamp on which a bucket is defined.\n\nValues include:\n\n- `start` or `-`: The reference timestamp will be the query start interval time (`fromTimestamp`) which can't be `-`\n- `end` or `+`: The reference timestamp will be the query end interval time (`toTimestamp`) which can't be `+`\n- A specific timestamp: align the reference timestamp to a specific time\n\n**Note:** When not provided, alignment is set to `0`.\n\n`AGGREGATION aggregator bucketDuration`\n\nper time series, aggregates samples into time buckets, where:\n\n- `aggregator` takes one of the following aggregation types:\n\n  | `aggregator` | Description                                                                    |\n  |--------------|--------------------------------------------------------------------------------|\n  | `avg`        | Arithmetic mean of all values                                                  |\n  | `sum`        | Sum of all values                                                              |\n  | `min`        | Minimum value                                                                  |\n  | `max`        | Maximum value                                                                  |\n  | `range`      | Difference between maximum value and minimum value                             |\n  | `count`      | Number of values                                                               |\n  | `first`      | Value with lowest timestamp in the bucket                                      |\n  | `last`       | Value with highest timestamp in the bucket                                     |\n  | `std.p`      | Population standard deviation of the values                                    |\n  | `std.s`      | Sample standard deviation of the values                                        |\n  | `var.p`      | Population variance of the values                                              |\n  | `var.s`      | Sample variance of the values                                                  |\n  | `twa`        | Time-weighted average over the bucket's timeframe (since RedisTimeSeries v1.8) |\n\n- `bucketDuration` is duration of each bucket, in milliseconds.\n\nWithout `ALIGN`, bucket start times are multiples of `bucketDuration`.\n\nWith `ALIGN align`, bucket start times are multiples of `bucketDuration` with remainder `align % bucketDuration`.\n\nThe first bucket start time is less than or equal to `fromTimestamp`.\n\n`[BUCKETTIMESTAMP bt]` (since RedisTimeSeries v1.8)\n\ncontrols how bucket timestamps are reported.\n\n| `bt`          | Timestamp reported for each bucket                     |\n|---------------|--------------------------------------------------------|\n| `-` or `low`  | the bucket's start time (default)                      |\n| `+` or `high` | the bucket's end time                                  |\n| `~` or `mid`  | the bucket's mid time (rounded down if not an integer) |\n\n`[EMPTY]` (since RedisTimeSeries v1.8)\n\nis a flag, which, when specified, reports aggregations also for empty buckets.\n\n| `aggregator`                                            | Value reported for each empty bucket                                                                                                                                                          |\n|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `sum`, `count`                                          | `0`                                                                                                                                                                                           |\n| `last`                                                  | The value of the last sample before the bucket's start. `NaN` when no such sample.                                                                                                            |\n| `twa`                                                   | Average value over the bucket's timeframe based on linear interpolation of the last sample before the bucket's start and the first sample after the bucket's end. `NaN` when no such samples. |\n| `min`, `max`, `range`, `avg`, `first`, `std.p`, `std.s` | `NaN`                                                                                                                                                                                         |\n\nRegardless of the values of `fromTimestamp` and `toTimestamp`, no data is reported for buckets that end before the earliest sample or begin after the latest sample in the time series.\n\n`GROUPBY label REDUCE reducer` (since RedisTimeSeries v1.6)\n\nsplits time series into groups, each group contains time series that share the same value for the provided label name, then aggregates results in each group.\n\nWhen combined with `AGGREGATION` the `GROUPBY`/`REDUCE` is applied post aggregation stage.\n\n- `label` is label name. A group is created for all time series that share the same value for this label.\n\n- `reducer` is an aggregation type used to aggregate the results in each group.\n\n  | `reducer` | Description                                                                                     |\n  |-----------|-------------------------------------------------------------------------------------------------|\n  | `avg`     | Arithmetic mean of all non-NaN values (since RedisTimeSeries v1.8)                              |\n  | `sum`     | Sum of all non-NaN values                                                                       |\n  | `min`     | Minimum non-NaN value                                                                           |\n  | `max`     | Maximum non-NaN value                                                                           |\n  | `range`   | Difference between maximum non-NaN value and minimum non-NaN value (since RedisTimeSeries v1.8) |\n  | `count`   | Number of non-NaN values (since RedisTimeSeries v1.8)                                           |\n  | `std.p`   | Population standard deviation of all non-NaN values (since RedisTimeSeries v1.8)                |\n  | `std.s`   | Sample standard deviation of all non-NaN values (since RedisTimeSeries v1.8)                    |\n  | `var.p`   | Population variance of all non-NaN values (since RedisTimeSeries v1.8)                          |\n  | `var.s`   | Sample variance of all non-NaN values (since RedisTimeSeries v1.8)                              |\n\n**Notes:**\n\n- The produced time series is named `<label>=<value>`\n- The produced time series contains two labels with these label array structures:\n  - `__reducer__`, the reducer used (e.g., `\"count\"`)\n  - `__source__`, the list of time series keys used to compute the grouped series (e.g., `\"key1,key2,key3\"`)\n\n**Note:** An `MREVRANGE` command cannot be part of a transaction when running on a Redis cluster.\n\n## Return value\n\nIf `GROUPBY label REDUCE reducer` is not specified:\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): for each time series matching the specified filters, the following is reported:\n  - bulk-string-reply: The time series key name\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): label-value pairs ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings))\n    - By default, an empty list is reported\n    - If `WITHLABELS` is specified, all labels associated with this time series are reported\n    - If `SELECTED_LABELS label...` is specified, the selected labels are reported\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): timestamp-value pairs ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) (double)): all samples/aggregations matching the range\n\nIf `GROUPBY label REDUCE reducer` is specified:\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): for each group of time series matching the specified filters, the following is reported:\n  - bulk-string-reply with the format `label=value` where `label` is the `GROUPBY` label argument\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a single pair ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)): the `GROUPBY` label argument and value\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a single pair ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)): the string `__reducer__` and the reducer argument\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a single pair ([Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings)): the string `__source__` and the time series key names separated by `,`\n  - [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): timestamp-value pairs ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings) (double)): all samples/aggregations matching the range\n\n## Examples\n\n**Retrieve maximum stock price per timestamp**\n\nCreate two stocks and add their prices at three different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.CREATE stock:B LABELS type stock name B\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:B 1000 120 stock:B 1010 110 stock:B 1020 100\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n```\n\nYou can now retrieve the maximum stock price per timestamp.\n\n``` chroma\n127.0.0.1:6379> TS.MREVRANGE - + WITHLABELS FILTER type=stock GROUPBY type REDUCE max\n1) 1) \"type=stock\"\n   2) 1) 1) \"type\"\n         2) \"stock\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"stock:A,stock:B\"\n   3) 1) 1) (integer) 1020\n         2) 120\n      2) 1) (integer) 1010\n         2) 110\n      3) 1) (integer) 1000\n         2) 120\n```\n\nThe `FILTER type=stock` clause returns a single time series representing stock prices. The `GROUPBY type REDUCE max` clause splits the time series into groups with identical type values, and then, for each timestamp, aggregates all series that share the same type value using the max aggregator.\n\n**Calculate average stock price and retrieve maximum average**\n\nCreate two stocks and add their prices at nine different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.CREATE stock:B LABELS type stock name B\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:B 1000 120 stock:B 1010 110 stock:B 1020 100\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:A 2000 200 stock:A 2010 210 stock:A 2020 220\n1) (integer) 2000\n2) (integer) 2010\n3) (integer) 2020\n127.0.0.1:6379> TS.MADD stock:B 2000 220 stock:B 2010 210 stock:B 2020 200\n1) (integer) 2000\n2) (integer) 2010\n3) (integer) 2020\n127.0.0.1:6379> TS.MADD stock:A 3000 300 stock:A 3010 310 stock:A 3020 320\n1) (integer) 3000\n2) (integer) 3010\n3) (integer) 3020\n127.0.0.1:6379> TS.MADD stock:B 3000 320 stock:B 3010 310 stock:B 3020 300\n1) (integer) 3000\n2) (integer) 3010\n3) (integer) 3020\n```\n\nNow, for each stock, calculate the average stock price per a 1000-millisecond timeframe, and then retrieve the stock with the maximum average for that timeframe in reverse direction.\n\n``` chroma\n127.0.0.1:6379> TS.MREVRANGE - + WITHLABELS AGGREGATION avg 1000 FILTER type=stock GROUPBY type REDUCE max\n1) 1) \"type=stock\"\n   2) 1) 1) \"type\"\n         2) \"stock\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"stock:A,stock:B\"\n   3) 1) 1) (integer) 3000\n         2) 310\n      2) 1) (integer) 2000\n         2) 210\n      3) 1) (integer) 1000\n         2) 110\n```\n\n**Group query results**\n\nQuery all time series with the metric label equal to `cpu`, then group the time series by the value of their `metric_name` label value and for each group return the maximum value and the time series keys (*source*) with that value.\n\n``` chroma\n127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system\n(integer) 1548149180000\n127.0.0.1:6379> TS.ADD ts1 1548149185000 45\n(integer) 1548149185000\n127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user\n(integer) 1548149180000\n127.0.0.1:6379> TS.MREVRANGE - + WITHLABELS FILTER metric=cpu GROUPBY metric_name REDUCE max\n1) 1) \"metric_name=system\"\n   2) 1) 1) \"metric_name\"\n         2) \"system\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"ts1\"\n   3) 1) 1) (integer) 1548149185000\n         2) 45\n      2) 1) (integer) 1548149180000\n         2) 90\n2) 1) \"metric_name=user\"\n   2) 1) 1) \"metric_name\"\n         2) \"user\"\n      2) 1) \"__reducer__\"\n         2) \"max\"\n      3) 1) \"__source__\"\n         2) \"ts2\"\n   3) 1) 1) (integer) 1548149180000\n         2) 99\n```\n\n**Filter query by value**\n\nQuery all time series with the metric label equal to `cpu`, then filter values larger or equal to 90.0 and smaller or equal to 100.0.\n\n``` chroma\n127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system\n(integer) 1548149180000\n127.0.0.1:6379> TS.ADD ts1 1548149185000 45\n(integer) 1548149185000\n127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user\n(integer) 1548149180000\n127.0.0.1:6379> TS.MREVRANGE - + FILTER_BY_VALUE 90 100 WITHLABELS FILTER metric=cpu\n1) 1) \"ts1\"\n   2) 1) 1) \"metric\"\n         2) \"cpu\"\n      2) 1) \"metric_name\"\n         2) \"system\"\n   3) 1) 1) (integer) 1548149180000\n         2) 90\n2) 1) \"ts2\"\n   2) 1) 1) \"metric\"\n         2) \"cpu\"\n      2) 1) \"metric_name\"\n         2) \"user\"\n   3) 1) 1) (integer) 1548149180000\n         2) 99\n```\n\n**Query using a label**\n\nQuery all time series with the metric label equal to `cpu`, but only return the team label.\n\n``` chroma\n127.0.0.1:6379> TS.ADD ts1 1548149180000 90 labels metric cpu metric_name system team NY\n(integer) 1548149180000\n127.0.0.1:6379> TS.ADD ts1 1548149185000 45\n(integer) 1548149185000\n127.0.0.1:6379> TS.ADD ts2 1548149180000 99 labels metric cpu metric_name user team SF\n(integer) 1548149180000\n127.0.0.1:6379> TS.MREVRANGE - + SELECTED_LABELS team FILTER metric=cpu\n1) 1) \"ts1\"\n   2) 1) 1) \"team\"\n         2) (nil)\n   3) 1) 1) (integer) 1548149185000\n         2) 45\n      2) 1) (integer) 1548149180000\n         2) 90\n2) 1) \"ts2\"\n   2) 1) 1) \"team\"\n         2) (nil)\n   3) 1) 1) (integer) 1548149180000\n         2) 99\n```\n\n## See also\n\n[`TS.MRANGE`](../ts.mrange) \\| [`TS.RANGE`](../ts.range) \\| [`TS.REVRANGE`](../ts.revrange)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.mrevrange/](https://redis.io/commands/ts.mrevrange/)"
- name: ts.queryindex
  id: ts.queryindex/index
  summary: filterExpr... filters time series based on their labels and label values
  description: "# TS.QUERYINDEX\n\n    TS.QUERYINDEX\n\nSyntax\n\n``` command-syntax\nTS.QUERYINDEX filterExpr...\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(n) where n is the number of time-series that match the filters\n\nGet all time series keys matching a filter list\n\n[Examples](#examples)\n\n## Required arguments\n\n`filterExpr...` filters time series based on their labels and label values. Each filter expression has one of the following syntaxes:\n\n- `label=value`, where `label` equals `value`\n- `label!=value`, where `label` does not equal `value`\n- `label=`, where `key` does not have label `label`\n- `label!=`, where `key` has label `label`\n- `label=(value1,value2,...)`, where `key` with label `label` equals one of the values in the list\n- `label!=(value1,value2,...)`, where key with label `label` does not equal any of the values in the list\n\n**Notes:**\n\n- At least one `label=value` filter is required.\n- Filters are conjunctive. For example, the FILTER `type=temperature room=study` means the a time series is a temperature time series of a study room.\n- Don't use whitespaces in the filter expression.\n\n**Note:** The `QUERYINDEX` command cannot be part of transaction when running on a Redis cluster.\n\n## Return value\n\nEither\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) where each element is a [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): a time series key. The array is empty if no time series matches the filter.\n- [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) (e.g., on invalid filter expression)\n\n## Examples\n\n**Find keys by location and sensor type**\n\nCreate a set of sensors to measure temperature and humidity in your study and kitchen.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE telemetry:study:temperature LABELS room study type temperature\nOK\n127.0.0.1:6379> TS.CREATE telemetry:study:humidity LABELS room study type humidity\nOK\n127.0.0.1:6379> TS.CREATE telemetry:kitchen:temperature LABELS room kitchen type temperature\nOK\n127.0.0.1:6379> TS.CREATE telemetry:kitchen:humidity LABELS room kitchen type humidity\nOK\n```\n\nRetrieve keys of all time series representing sensors located in the kitchen.\n\n``` chroma\n127.0.0.1:6379> TS.QUERYINDEX room=kitchen\n1) \"telemetry:kitchen:humidity\"\n2) \"telemetry:kitchen:temperature\"\n```\n\nTo retrieve the keys of all time series representing sensors that measure temperature, use this query:\n\n``` chroma\n127.0.0.1:6379> TS.QUERYINDEX type=temperature\n1) \"telemetry:kitchen:temperature\"\n2) \"telemetry:study:temperature\"\n```\n\n## See also\n\n[`TS.CREATE`](../ts.create) \\| [`TS.MRANGE`](../ts.mrange) \\| [`TS.MREVRANGE`](../ts.mrevrange) \\| [`TS.MGET`](../ts.mget)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.queryindex/](https://redis.io/commands/ts.queryindex/)"
- name: ts.range
  id: ts.range/index
  summary: is the key name for the time series
  description: "# TS.RANGE\n\n    TS.RANGE\n\nSyntax\n\n``` command-syntax\nTS.RANGE key fromTimestamp toTimestamp\n  [LATEST]\n  [FILTER_BY_TS ts...]\n  [FILTER_BY_VALUE min max]\n  [COUNT count] \n  [[ALIGN align] AGGREGATION aggregator bucketDuration [BUCKETTIMESTAMP bt] [EMPTY]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.0.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested range\n\nQuery a range in forward direction\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis the key name for the time series.\n\n`fromTimestamp`\n\nis start timestamp for the range query (integer UNIX timestamp in milliseconds) or `-` to denote the timestamp of the earliest sample in the time series.\n\n`toTimestamp`\n\nis end timestamp for the range query (integer UNIX timestamp in milliseconds) or `+` to denote the timestamp of the latest sample in the time series.\n\n**Note:** When the time series is a compaction, the last compacted value may aggregate raw values with timestamp beyond `toTimestamp`. That is because `toTimestamp` only limits the timestamp of the compacted value, which is the start time of the raw bucket that was compacted.\n\n## Optional arguments\n\n`LATEST` (since RedisTimeSeries v1.8)\n\nis used when a time series is a compaction. With `LATEST`, TS.RANGE also reports the compacted value of the latest, possibly partial, bucket, given that this bucket's start time falls within `[fromTimestamp, toTimestamp]`. Without `LATEST`, TS.RANGE does not report the latest, possibly partial, bucket. When a time series is not a compaction, `LATEST` is ignored.\n\nThe data in the latest bucket of a compaction is possibly partial. A bucket is *closed* and compacted only upon arrival of a new sample that *opens* a new *latest* bucket. There are cases, however, when the compacted value of the latest, possibly partial, bucket is also required. In such a case, use `LATEST`.\n\n`FILTER_BY_TS ts...` (since RedisTimeSeries v1.6)\n\nfilters samples by a list of specific timestamps. A sample passes the filter if its exact timestamp is specified and falls within `[fromTimestamp, toTimestamp]`.\n\n`FILTER_BY_VALUE min max` (since RedisTimeSeries v1.6)\n\nfilters samples by minimum and maximum values.\n\n`COUNT count`\n\nlimits the number of returned samples.\n\n`ALIGN align` (since RedisTimeSeries v1.6)\n\nis a time bucket alignment control for `AGGREGATION`. It controls the time bucket timestamps by changing the reference timestamp on which a bucket is defined.\n\n`align` values include:\n\n- `start` or `-`: The reference timestamp will be the query start interval time (`fromTimestamp`) which can't be `-`\n- `end` or `+`: The reference timestamp will be the query end interval time (`toTimestamp`) which can't be `+`\n- A specific timestamp: align the reference timestamp to a specific time\n\n**Note:** When not provided, alignment is set to `0`.\n\n`AGGREGATION aggregator bucketDuration`\n\naggregates samples into time buckets, where:\n\n- `aggregator` takes one of the following aggregation types:\n\n  | `aggregator` | Description                                                                    |\n  |--------------|--------------------------------------------------------------------------------|\n  | `avg`        | Arithmetic mean of all values                                                  |\n  | `sum`        | Sum of all values                                                              |\n  | `min`        | Minimum value                                                                  |\n  | `max`        | Maximum value                                                                  |\n  | `range`      | Difference between the maximum and the minimum value                           |\n  | `count`      | Number of values                                                               |\n  | `first`      | Value with lowest timestamp in the bucket                                      |\n  | `last`       | Value with highest timestamp in the bucket                                     |\n  | `std.p`      | Population standard deviation of the values                                    |\n  | `std.s`      | Sample standard deviation of the values                                        |\n  | `var.p`      | Population variance of the values                                              |\n  | `var.s`      | Sample variance of the values                                                  |\n  | `twa`        | Time-weighted average over the bucket's timeframe (since RedisTimeSeries v1.8) |\n\n- `bucketDuration` is duration of each bucket, in milliseconds.\n\nWithout `ALIGN`, bucket start times are multiples of `bucketDuration`.\n\nWith `ALIGN align`, bucket start times are multiples of `bucketDuration` with remainder `align % bucketDuration`.\n\nThe first bucket start time is less than or equal to `fromTimestamp`.\n\n`[BUCKETTIMESTAMP bt]` (since RedisTimeSeries v1.8)\n\ncontrols how bucket timestamps are reported.\n\n| `bt`          | Timestamp reported for each bucket                     |\n|---------------|--------------------------------------------------------|\n| `-` or `low`  | the bucket's start time (default)                      |\n| `+` or `high` | the bucket's end time                                  |\n| `~` or `mid`  | the bucket's mid time (rounded down if not an integer) |\n\n`[EMPTY]` (since RedisTimeSeries v1.8)\n\nis a flag, which, when specified, reports aggregations also for empty buckets.\n\n| `aggregator`                                            | Value reported for each empty bucket                                                                                                                                                          |\n|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `sum`, `count`                                          | `0`                                                                                                                                                                                           |\n| `last`                                                  | The value of the last sample before the bucket's start. `NaN` when no such sample.                                                                                                            |\n| `twa`                                                   | Average value over the bucket's timeframe based on linear interpolation of the last sample before the bucket's start and the first sample after the bucket's end. `NaN` when no such samples. |\n| `min`, `max`, `range`, `avg`, `first`, `std.p`, `std.s` | `NaN`                                                                                                                                                                                         |\n\nRegardless of the values of `fromTimestamp` and `toTimestamp`, no data is reported for buckets that end before the earliest sample or begin after the latest sample in the time series.\n\n## Return value\n\nEither\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)) pairs representing (timestamp, value(double))\n- [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) (e.g., on invalid filter value)\n\n## Complexity\n\nTS.RANGE complexity can be improved in the future by using binary search to find the start of the range, which makes this `O(Log(n/m)+k*m)`. But, because `m` is small, you can disregard it and look at the operation as `O(Log(n)+k)`.\n\n## Examples\n\n**Filter results by timestamp or sample value**\n\nConsider a metric where acceptable values are between -100 and 100, and the value 9999 is used as an indication of bad measurement.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:TLV LABELS type temp location TLV\nOK\n127.0.0.1:6379> TS.MADD temp:TLV 1000 30 temp:TLV 1010 35 temp:TLV 1020 9999 temp:TLV 1030 40\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n4) (integer) 1030\n```\n\nNow, retrieve all values except out-of-range values.\n\n``` chroma\nTS.RANGE temp:TLV - + FILTER_BY_VALUE -100 100\n1) 1) (integer) 1000\n   2) 30\n2) 1) (integer) 1010\n   2) 35\n3) 1) (integer) 1030\n   2) 40\n```\n\nNow, retrieve the average value, while ignoring out-of-range values.\n\n``` chroma\nTS.RANGE temp:TLV - + FILTER_BY_VALUE -100 100 AGGREGATION avg 1000\n1) 1) (integer) 1000\n   2) 35\n```\n\n**Align aggregation buckets**\n\nTo demonstrate alignment, let’s create a stock and add prices at nine different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:A 2000 200 stock:A 2010 210 stock:A 2020 220\n1) (integer) 2000\n2) (integer) 2010\n3) (integer) 2020\n127.0.0.1:6379> TS.MADD stock:A 3000 300 stock:A 3010 310 stock:A 3020 320\n1) (integer) 3000\n2) (integer) 3010\n3) (integer) 3020\n```\n\nNext, aggregate without using `ALIGN`, defaulting to alignment 0.\n\n``` chroma\n127.0.0.1:6379> TS.RANGE stock:A - + AGGREGATION min 20\n1) 1) (integer) 1000\n   2) 100\n2) 1) (integer) 1020\n   2) 120\n3) 1) (integer) 1040\n   2) 210\n4) 1) (integer) 1060\n   2) 300\n5) 1) (integer) 1080\n   2) 320\n```\n\nAnd now set `ALIGN` to 10 to have a bucket start at time 10, and align all the buckets with a 20 milliseconds duration.\n\n``` chroma\n127.0.0.1:6379> TS.RANGE stock:A - + ALIGN 10 AGGREGATION min 20\n1) 1) (integer) 990\n   2) 100\n2) 1) (integer) 1010\n   2) 110\n3) 1) (integer) 1990\n   2) 200\n4) 1) (integer) 2010\n   2) 210\n5) 1) (integer) 2990\n   2) 300\n6) 1) (integer) 3010\n   2) 310\n```\n\nWhen the start timestamp for the range query is explicitly stated (not `-`), you can set `ALIGN` to that time by setting align to `-` or to `start`.\n\n``` chroma\n127.0.0.1:6379> TS.RANGE stock:A 5 + ALIGN - AGGREGATION min 20\n1) 1) (integer) 985\n   2) 100\n2) 1) (integer) 1005\n   2) 110\n3) 1) (integer) 1985\n   2) 200\n4) 1) (integer) 2005\n   2) 210\n5) 1) (integer) 2985\n   2) 300\n6) 1) (integer) 3005\n   2) 310\n```\n\nSimilarly, when the end timestamp for the range query is explicitly stated, you can set `ALIGN` to that time by setting align to `+` or to `end`.\n\n## See also\n\n[`TS.MRANGE`](../ts.mrange) \\| [`TS.REVRANGE`](../ts.revrange) \\| [`TS.MREVRANGE`](../ts.mrevrange)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.range/](https://redis.io/commands/ts.range/)"
- name: ts.revrange
  id: ts.revrange/index
  summary: is the key name for the time series
  description: "# TS.REVRANGE\n\n    TS.REVRANGE\n\nSyntax\n\n``` command-syntax\nTS.REVRANGE key fromTimestamp toTimestamp\n  [LATEST]\n  [FILTER_BY_TS TS...]\n  [FILTER_BY_VALUE min max]\n  [COUNT count]\n  [[ALIGN align] AGGREGATION aggregator bucketDuration [BUCKETTIMESTAMP bt] [EMPTY]]\n```\n\nAvailable in:  \n[Redis Stack](https://redis.io/docs/stack) / [TimeSeries 1.4.0](https://redis.io/docs/stack/timeseries)\n\nTime complexity:  \nO(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested range\n\nQuery a range in reverse direction\n\n[Examples](#examples)\n\n## Required arguments\n\n`key`\n\nis the key name for the time series.\n\n`fromTimestamp`\n\nis start timestamp for the range query (integer UNIX timestamp in milliseconds) or `-` to denote the timestamp of the earliest sample in the time series.\n\n`toTimestamp`\n\nis end timestamp for the range query (integer UNIX timestamp in milliseconds) or `+` to denote the timestamp of the latest sample in the time series.\n\n**Note:** When the time series is a compaction, the last compacted value may aggregate raw values with timestamp beyond `toTimestamp`. That is because `toTimestamp` limits only the timestamp of the compacted value, which is the start time of the raw bucket that was compacted.\n\n## Optional arguments\n\n`LATEST` (since RedisTimeSeries v1.8)\n\nis used when a time series is a compaction. With `LATEST`, TS.REVRANGE also reports the compacted value of the latest, possibly partial, bucket, given that this bucket's start time falls within `[fromTimestamp, toTimestamp]`. Without `LATEST`, TS.REVRANGE does not report the latest, possibly partial, bucket. When a time series is not a compaction, `LATEST` is ignored.\n\nThe data in the latest bucket of a compaction is possibly partial. A bucket is *closed* and compacted only upon arrival of a new sample that *opens* a new *latest* bucket. There are cases, however, when the compacted value of the latest, possibly partial, bucket is also required. In such a case, use `LATEST`.\n\n`FILTER_BY_TS ts...` (since RedisTimeSeries v1.6)\n\nfilters samples by a list of specific timestamps. A sample passes the filter if its exact timestamp is specified and falls within `[fromTimestamp, toTimestamp]`.\n\n`FILTER_BY_VALUE min max` (since RedisTimeSeries v1.6)\n\nfilters samples by minimum and maximum values.\n\n`COUNT count` limits the number of returned samples.\n\n`ALIGN align` (since RedisTimeSeries v1.6)\n\nis a time bucket alignment control for `AGGREGATION`. It controls the time bucket timestamps by changing the reference timestamp on which a bucket is defined. Values include:\n\n- `start` or `-`: The reference timestamp will be the query start interval time (`fromTimestamp`) which can't be `-`\n- `end` or `+`: The reference timestamp will be the query end interval time (`toTimestamp`) which can't be `+`\n- A specific timestamp: align the reference timestamp to a specific time\n\n**NOTE:** When not provided, alignment is set to `0`.\n\n`AGGREGATION aggregator bucketDuration` aggregates samples into time buckets, where:\n\n- `aggregator` takes one of the following aggregation types:\n\n  | `aggregator` | Description                                                                    |\n  |--------------|--------------------------------------------------------------------------------|\n  | `avg`        | Arithmetic mean of all values                                                  |\n  | `sum`        | Sum of all values                                                              |\n  | `min`        | Minimum value                                                                  |\n  | `max`        | Maximum value                                                                  |\n  | `range`      | Difference between the maximum and the minimum value                           |\n  | `count`      | Number of values                                                               |\n  | `first`      | Value with lowest timestamp in the bucket                                      |\n  | `last`       | Value with highest timestamp in the bucket                                     |\n  | `std.p`      | Population standard deviation of the values                                    |\n  | `std.s`      | Sample standard deviation of the values                                        |\n  | `var.p`      | Population variance of the values                                              |\n  | `var.s`      | Sample variance of the values                                                  |\n  | `twa`        | Time-weighted average over the bucket's timeframe (since RedisTimeSeries v1.8) |\n\n- `bucketDuration` is duration of each bucket, in milliseconds.\n\nWithout `ALIGN`, bucket start times are multiples of `bucketDuration`.\n\nWith `ALIGN align`, bucket start times are multiples of `bucketDuration` with remainder `align % bucketDuration`.\n\nThe first bucket start time is less than or equal to `fromTimestamp`.\n\n`[BUCKETTIMESTAMP bt]` (since RedisTimeSeries v1.8)\n\ncontrols how bucket timestamps are reported.\n\n| `bt`          | Timestamp reported for each bucket                     |\n|---------------|--------------------------------------------------------|\n| `-` or `low`  | the bucket's start time (default)                      |\n| `+` or `high` | the bucket's end time                                  |\n| `~` or `mid`  | the bucket's mid time (rounded down if not an integer) |\n\n`[EMPTY]` (since RedisTimeSeries v1.8) is a flag, which, when specified, reports aggregations also for empty buckets.\n\n| `aggregator`                                            | Value reported for each empty bucket                                                                                                                                                          |\n|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `sum`, `count`                                          | `0`                                                                                                                                                                                           |\n| `last`                                                  | The value of the last sample before the bucket's start. `NaN` when no such sample.                                                                                                            |\n| `twa`                                                   | Average value over the bucket's timeframe based on linear interpolation of the last sample before the bucket's start and the first sample after the bucket's end. `NaN` when no such samples. |\n| `min`, `max`, `range`, `avg`, `first`, `std.p`, `std.s` | `NaN`                                                                                                                                                                                         |\n\nRegardless of the values of `fromTimestamp` and `toTimestamp`, no data is reported for buckets that end before the earliest sample or begin after the latest sample in the time series.\n\n## Return value\n\n- [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays) of ([Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), [Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings)) pairs representing (timestamp, value(double))\n- [Error reply](https://redis.io/docs/reference/protocol-spec#resp-errors) (e.g., on invalid filter value)\n\n## Complexity\n\nTS.REVRANGE complexity can be improved in the future by using binary search to find the start of the range, which makes this `O(Log(n/m)+k*m)`. But, because `m` is small, you can disregard it and look at the operation as `O(Log(n)+k)`.\n\n## Examples\n\n**Filter results by timestamp or sample value**\n\nConsider a metric where acceptable values are between -100 and 100, and the value 9999 is used as an indication of bad measurement.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE temp:TLV LABELS type temp location TLV\nOK\n127.0.0.1:6379> TS.MADD temp:TLV 1000 30 temp:TLV 1010 35 temp:TLV 1020 9999 temp:TLV 1030 40\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n4) (integer) 1030\n```\n\nNow, retrieve all values except out-of-range values.\n\n``` chroma\nTS.REVRANGE temp:TLV - + FILTER_BY_VALUE -100 100\n1) 1) (integer) 1030\n   2) 40\n2) 1) (integer) 1010\n   2) 35\n3) 1) (integer) 1000\n   2) 30\n```\n\nNow, retrieve the average value, while ignoring out-of-range values.\n\n``` chroma\nTS.REVRANGE temp:TLV - + FILTER_BY_VALUE -100 100 AGGREGATION avg 1000\n1) 1) (integer) 1000\n   2) 35\n```\n\n**Align aggregation buckets**\n\nTo demonstrate alignment, let’s create a stock and add prices at three different timestamps.\n\n``` chroma\n127.0.0.1:6379> TS.CREATE stock:A LABELS type stock name A\nOK\n127.0.0.1:6379> TS.MADD stock:A 1000 100 stock:A 1010 110 stock:A 1020 120\n1) (integer) 1000\n2) (integer) 1010\n3) (integer) 1020\n127.0.0.1:6379> TS.MADD stock:A 2000 200 stock:A 2010 210 stock:A 2020 220\n1) (integer) 2000\n2) (integer) 2010\n3) (integer) 2020\n127.0.0.1:6379> TS.MADD stock:A 3000 300 stock:A 3010 310 stock:A 3020 320\n1) (integer) 3000\n2) (integer) 3010\n3) (integer) 3020\n```\n\nNext, aggregate without using `ALIGN`, defaulting to alignment 0.\n\n``` chroma\n127.0.0.1:6379> TS.REVRANGE stock:A - + AGGREGATION min 20\n1) 1) (integer) 3020\n   2) 320\n2) 1) (integer) 3000\n   2) 300\n3) 1) (integer) 2020\n   2) 220\n4) 1) (integer) 2000\n   2) 200\n5) 1) (integer) 1020\n   2) 120\n6) 1) (integer) 1000\n   2) 100\n```\n\nAnd now set `ALIGN` to 10 to have a bucket start at time 10, and align all the buckets with a 20 milliseconds duration.\n\n``` chroma\n127.0.0.1:6379> TS.REVRANGE stock:A - + ALIGN 10 AGGREGATION min 20\n1) 1) (integer) 3010\n   2) 310\n2) 1) (integer) 2990\n   2) 300\n3) 1) (integer) 2010\n   2) 210\n4) 1) (integer) 1990\n   2) 200\n5) 1) (integer) 1010\n   2) 110\n6) 1) (integer) 990\n   2) 100\n```\n\nWhen the start timestamp for the range query is explicitly stated (not `-`), you can set ALIGN to that time by setting align to `-` or to `start`.\n\n``` chroma\n127.0.0.1:6379> TS.REVRANGE stock:A 5 + ALIGN - AGGREGATION min 20\n1) 1) (integer) 3005\n   2) 310\n2) 1) (integer) 2985\n   2) 300\n3) 1) (integer) 2005\n   2) 210\n4) 1) (integer) 1985\n   2) 200\n5) 1) (integer) 1005\n   2) 110\n6) 1) (integer) 985\n   2) 100\n```\n\nSimilarly, when the end timestamp for the range query is explicitly stated, you can set ALIGN to that time by setting align to `+` or to `end`.\n\n## See also\n\n[`TS.RANGE`](../ts.range) \\| [`TS.MRANGE`](../ts.mrange) \\| [`TS.MREVRANGE`](../ts.mrevrange)\n\n## Related topics\n\n[RedisTimeSeries](https://redis.io/docs/stack/timeseries)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ts.revrange/](https://redis.io/commands/ts.revrange/)"
- name: ttl
  id: ttl/index
  summary: Returns the remaining time to live of a key that has a timeout
  description: "# TTL\n\n    TTL\n\nSyntax\n\n``` command-syntax\nTTL key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nReturns the remaining time to live of a key that has a timeout. This introspection capability allows a Redis client to check how many seconds a given key will continue to be part of the dataset.\n\nIn Redis 2.6 or older the command returns `-1` if the key does not exist or if the key exist but has no associated expire.\n\nStarting with Redis 2.8 the return value in case of error changed:\n\n- The command returns `-2` if the key does not exist.\n- The command returns `-1` if the key exists but has no associated expire.\n\nSee also the [`PTTL`](../pttl) command that returns the same information with milliseconds resolution (Only available in Redis 2.6 or greater).\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): TTL in seconds, or a negative value in order to signal an error (see the description above).\n\n## Examples\n\n``` redis-cli\nSET mykey \"Hello\"\nEXPIRE mykey 10\nTTL mykey\n```\n\n## History\n\n- Starting with Redis version 2.8.0: Added the -2 reply.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/ttl/](https://redis.io/commands/ttl/)"
- name: type
  id: type/index
  summary: Returns the string representation of the type of the value stored at key
  description: "# TYPE\n\n    TYPE\n\nSyntax\n\n``` command-syntax\nTYPE key\n```\n\nAvailable since:  \n1.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@keyspace`, `@read`, `@fast`,\n\nReturns the string representation of the type of the value stored at `key`. The different types that can be returned are: `string`, `list`, `set`, `zset`, `hash` and `stream`.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): type of `key`, or `none` when `key` does not exist.\n\n## Examples\n\n``` redis-cli\nSET key1 \"value\"\nLPUSH key2 \"value\"\nSADD key3 \"value\"\nTYPE key1\nTYPE key2\nTYPE key3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/type/](https://redis.io/commands/type/)"
- name: unlink
  id: unlink/index
  summary: 'Time complexity: O(1) for each key removed regardless of its size'
  description: "# UNLINK\n\n    UNLINK\n\nSyntax\n\n``` command-syntax\nUNLINK key [key ...]\n```\n\nAvailable since:  \n4.0.0\n\nTime complexity:  \nO(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.\n\nACL categories:  \n`@keyspace`, `@write`, `@fast`,\n\nThis command is very similar to [`DEL`](../del): it removes the specified keys. Just like [`DEL`](../del) a key is ignored if it does not exist. However the command performs the actual memory reclaiming in a different thread, so it is not blocking, while [`DEL`](../del) is. This is where the command name comes from: the command just **unlinks** the keys from the keyspace. The actual removal will happen later asynchronously.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of keys that were unlinked.\n\n## Examples\n\n``` redis-cli\nSET key1 \"Hello\"\nSET key2 \"World\"\nUNLINK key1 key2 key3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/unlink/](https://redis.io/commands/unlink/)"
- name: unsubscribe
  id: unsubscribe/index
  summary: 'Time complexity: O(N) where N is the number of clients already subscribed to a channel'
  description: "# UNSUBSCRIBE\n\n    UNSUBSCRIBE\n\nSyntax\n\n``` command-syntax\nUNSUBSCRIBE [channel [channel ...]]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N) where N is the number of clients already subscribed to a channel.\n\nACL categories:  \n`@pubsub`, `@slow`,\n\nUnsubscribes the client from the given channels, or from all of them if none is given.\n\nWhen no channels are specified, the client is unsubscribed from all the previously subscribed channels. In this case, a message for every unsubscribed channel will be sent to the client.\n\n## Return\n\nWhen successful, this command doesn't return anything. Instead, for each channel, one message with the first element being the string \"unsubscribe\" is pushed as a confirmation that the command succeeded.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/unsubscribe/](https://redis.io/commands/unsubscribe/)"
- name: unwatch
  id: unwatch/index
  summary: Flushes all the previously watched keys for a transaction
  description: "# UNWATCH\n\n    UNWATCH\n\nSyntax\n\n``` command-syntax\nUNWATCH\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@fast`, `@transaction`,\n\nFlushes all the previously watched keys for a [transaction](https://redis.io/topics/transactions).\n\nIf you call [`EXEC`](../exec) or [`DISCARD`](../discard), there's no need to manually call `UNWATCH`.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/unwatch/](https://redis.io/commands/unwatch/)"
- name: wait
  id: wait/index
  summary: This command blocks the current client until all the previous write commands are successfully transferred and acknowledged by at least the specified number of replicas
  description: "# WAIT\n\n    WAIT\n\nSyntax\n\n``` command-syntax\nWAIT numreplicas timeout\n```\n\nAvailable since:  \n3.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@slow`, `@connection`,\n\nThis command blocks the current client until all the previous write commands are successfully transferred and acknowledged by at least the specified number of replicas. If the timeout, specified in milliseconds, is reached, the command returns even if the specified number of replicas were not yet reached.\n\nThe command **will always return** the number of replicas that acknowledged the write commands sent by the current client before the `WAIT` command, both in the case where the specified number of replicas are reached, or when the timeout is reached.\n\nA few remarks:\n\n1.  When `WAIT` returns, all the previous write commands sent in the context of the current connection are guaranteed to be received by the number of replicas returned by `WAIT`.\n2.  If the command is sent as part of a [`MULTI`](../multi) transaction (since Redis 7.0, any context that does not allow blocking, such as inside scripts), the command does not block but instead just return ASAP the number of replicas that acknowledged the previous write commands.\n3.  A timeout of 0 means to block forever.\n4.  Since `WAIT` returns the number of replicas reached both in case of failure and success, the client should check that the returned value is equal or greater to the replication level it demanded.\n\n## Consistency and WAIT\n\nNote that `WAIT` does not make Redis a strongly consistent store: while synchronous replication is part of a replicated state machine, it is not the only thing needed. However in the context of Sentinel or Redis Cluster failover, `WAIT` improves the real world data safety.\n\nSpecifically if a given write is transferred to one or more replicas, it is more likely (but not guaranteed) that if the master fails, we'll be able to promote, during a failover, a replica that received the write: both Sentinel and Redis Cluster will do a best-effort attempt to promote the best replica among the set of available replicas.\n\nHowever this is just a best-effort attempt so it is possible to still lose a write synchronously replicated to multiple replicas.\n\n## Implementation details\n\nSince the introduction of partial resynchronization with replicas (PSYNC feature) Redis replicas asynchronously ping their master with the offset they already processed in the replication stream. This is used in multiple ways:\n\n1.  Detect timed out replicas.\n2.  Perform a partial resynchronization after a disconnection.\n3.  Implement `WAIT`.\n\nIn the specific case of the implementation of `WAIT`, Redis remembers, for each client, the replication offset of the produced replication stream when a given write command was executed in the context of a given client. When `WAIT` is called Redis checks if the specified number of replicas already acknowledged this offset or a greater one.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The command returns the number of replicas reached by all the writes performed in the context of the current connection.\n\n## Examples\n\n```\n> SET foo bar\nOK\n> WAIT 1 0\n(integer) 1\n> WAIT 2 1000\n(integer) 1\n```\n\nIn the following example the first call to `WAIT` does not use a timeout and asks for the write to reach 1 replica. It returns with success. In the second attempt instead we put a timeout, and ask for the replication of the write to two replicas. Since there is a single replica available, after one second `WAIT` unblocks and returns 1, the number of replicas reached.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/wait/](https://redis.io/commands/wait/)"
- name: watch
  id: watch/index
  summary: 'Time complexity: O(1) for every key'
  description: "# WATCH\n\n    WATCH\n\nSyntax\n\n``` command-syntax\nWATCH key [key ...]\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(1) for every key.\n\nACL categories:  \n`@fast`, `@transaction`,\n\nMarks the given keys to be watched for conditional execution of a [transaction](https://redis.io/topics/transactions).\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): always `OK`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/watch/](https://redis.io/commands/watch/)"
- name: xack
  id: xack/index
  summary: 'Time complexity: O(1) for each message ID processed'
  description: "# XACK\n\n    XACK\n\nSyntax\n\n``` command-syntax\nXACK key group id [id ...]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1) for each message ID processed.\n\nACL categories:  \n`@write`, `@stream`, `@fast`,\n\nThe `XACK` command removes one or multiple messages from the *Pending Entries List* (PEL) of a stream consumer group. A message is pending, and as such stored inside the PEL, when it was delivered to some consumer, normally as a side effect of calling [`XREADGROUP`](../xreadgroup), or when a consumer took ownership of a message calling [`XCLAIM`](../xclaim). The pending message was delivered to some consumer but the server is yet not sure it was processed at least once. So new calls to [`XREADGROUP`](../xreadgroup) to grab the messages history for a consumer (for instance using an ID of 0), will return such message. Similarly the pending message will be listed by the [`XPENDING`](../xpending) command, that inspects the PEL.\n\nOnce a consumer *successfully* processes a message, it should call `XACK` so that such message does not get processed again, and as a side effect, the PEL entry about this message is also purged, releasing memory from the Redis server.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\nThe command returns the number of messages successfully acknowledged. Certain message IDs may no longer be part of the PEL (for example because they have already been acknowledged), and XACK will not count them as successfully acknowledged.\n\n## Examples\n\n```\nredis> XACK mystream mygroup 1526569495631-0\n(integer) 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xack/](https://redis.io/commands/xack/)"
- name: xadd
  id: xadd/index
  summary: 'Time complexity: O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted'
  description: "# XADD\n\n    XADD\n\nSyntax\n\n``` command-syntax\nXADD key [NOMKSTREAM] [<MAXLEN | MINID> [= | ~] threshold\n  [LIMIT count]] <* | id> field value [field value ...]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.\n\nACL categories:  \n`@write`, `@stream`, `@fast`,\n\nAppends the specified stream entry to the stream at the specified key. If the key does not exist, as a side effect of running this command the key is created with a stream value. The creation of stream's key can be disabled with the `NOMKSTREAM` option.\n\nAn entry is composed of a list of field-value pairs. The field-value pairs are stored in the same order they are given by the user. Commands that read the stream, such as [`XRANGE`](../xrange) or [`XREAD`](../xread), are guaranteed to return the fields and values exactly in the same order they were added by `XADD`.\n\n`XADD` is the *only Redis command* that can add data to a stream, but there are other commands, such as [`XDEL`](../xdel) and [`XTRIM`](../xtrim), that are able to remove data from a stream.\n\n## Specifying a Stream ID as an argument\n\nA stream entry ID identifies a given entry inside a stream.\n\nThe `XADD` command will auto-generate a unique ID for you if the ID argument specified is the `*` character (asterisk ASCII character). However, while useful only in very rare cases, it is possible to specify a well-formed ID, so that the new entry will be added exactly with the specified ID.\n\nIDs are specified by two numbers separated by a `-` character:\n\n    1526919030474-55\n\nBoth quantities are 64-bit numbers. When an ID is auto-generated, the first part is the Unix time in milliseconds of the Redis instance generating the ID. The second part is just a sequence number and is used in order to distinguish IDs generated in the same millisecond.\n\nYou can also specify an incomplete ID, that consists only of the milliseconds part, which is interpreted as a zero value for sequence part. To have only the sequence part automatically generated, specify the milliseconds part followed by the `-` separator and the `*` character:\n\n```\n> XADD mystream 1526919030474-55 message \"Hello,\"\n\"1526919030474-55\"\n> XADD mystream 1526919030474-* message \" World!\"\n\"1526919030474-56\"\n```\n\nIDs are guaranteed to be always incremental: If you compare the ID of the entry just inserted it will be greater than any other past ID, so entries are totally ordered inside a stream. In order to guarantee this property, if the current top ID in the stream has a time greater than the current local time of the instance, the top entry time will be used instead, and the sequence part of the ID incremented. This may happen when, for instance, the local clock jumps backward, or if after a failover the new master has a different absolute time.\n\nWhen a user specified an explicit ID to `XADD`, the minimum valid ID is `0-1`, and the user *must* specify an ID which is greater than any other ID currently inside the stream, otherwise the command will fail and return an error. Usually resorting to specific IDs is useful only if you have another system generating unique IDs (for instance an SQL table) and you really want the Redis stream IDs to match the one of this other system.\n\n## Capped streams\n\n`XADD` incorporates the same semantics as the [`XTRIM`](../xtrim) command - refer to its documentation page for more information. This allows adding new entries and keeping the stream's size in check with a single call to `XADD`, effectively capping the stream with an arbitrary threshold. Although exact trimming is possible and is the default, due to the internal representation of steams it is more efficient to add an entry and trim stream with `XADD` using **almost exact** trimming (the `~` argument).\n\nFor example, calling `XADD` in the following form:\n\n    XADD mystream MAXLEN ~ 1000 * ... entry fields here ...\n\nWill add a new entry but will also evict old entries so that the stream will contain only 1000 entries, or at most a few tens more.\n\n## Additional information about streams\n\nFor further information about Redis streams please check our [introduction to Redis Streams document](https://redis.io/topics/streams-intro).\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings), specifically:\n\nThe command returns the ID of the added entry. The ID is the one auto-generated if `*` is passed as ID argument, otherwise the command just returns the same ID specified by the user during insertion.\n\nThe command returns a [Null reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings) when used with the `NOMKSTREAM` option and the key doesn't exist.\n\n## Examples\n\n``` redis-cli\nXADD mystream * name Sara surname OConnor\nXADD mystream * field1 value1 field2 value2 field3 value3\nXLEN mystream\nXRANGE mystream - +\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option.\n- Starting with Redis version 7.0.0: Added support for the `<ms>-*` explicit ID form.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xadd/](https://redis.io/commands/xadd/)"
- name: xautoclaim
  id: xautoclaim/index
  summary: 'Time complexity: O(1) if COUNT is small'
  description: "# XAUTOCLAIM\n\n    XAUTOCLAIM\n\nSyntax\n\n``` command-syntax\nXAUTOCLAIM key group consumer min-idle-time start [COUNT count]\n  [JUSTID]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1) if COUNT is small.\n\nACL categories:  \n`@write`, `@stream`, `@fast`,\n\nThis command transfers ownership of pending stream entries that match the specified criteria. Conceptually, `XAUTOCLAIM` is equivalent to calling [`XPENDING`](../xpending) and then [`XCLAIM`](../xclaim), but provides a more straightforward way to deal with message delivery failures via [`SCAN`](../scan)-like semantics.\n\nLike [`XCLAIM`](../xclaim), the command operates on the stream entries at `<key>` and in the context of the provided `<group>`. It transfers ownership to `<consumer>` of messages pending for more than `<min-idle-time>` milliseconds and having an equal or greater ID than `<start>`.\n\nThe optional `<count>` argument, which defaults to 100, is the upper limit of the number of entries that the command attempts to claim. Internally, the command begins scanning the consumer group's Pending Entries List (PEL) from `<start>` and filters out entries having an idle time less than or equal to `<min-idle-time>`. The maximum number of pending entries that the command scans is the product of multiplying `<count>`'s value by 10 (hard-coded). It is possible, therefore, that the number of entries claimed will be less than the specified value.\n\nThe optional `JUSTID` argument changes the reply to return just an array of IDs of messages successfully claimed, without returning the actual message. Using this option means the retry counter is not incremented.\n\nThe command returns the claimed entries as an array. It also returns a stream ID intended for cursor-like use as the `<start>` argument for its subsequent call. When there are no remaining PEL entries, the command returns the special `0-0` ID to signal completion. However, note that you may want to continue calling `XAUTOCLAIM` even after the scan is complete with the `0-0` as `<start>` ID, because enough time passed, so older pending entries may now be eligible for claiming.\n\nNote that only messages that are idle longer than `<min-idle-time>` are claimed, and claiming a message resets its idle time. This ensures that only a single consumer can successfully claim a given pending message at a specific instant of time and trivially reduces the probability of processing the same message multiple times.\n\nWhile iterating the PEL, if `XAUTOCLAIM` stumbles upon a message which doesn't exist in the stream anymore (either trimmed or deleted by [`XDEL`](../xdel)) it does not claim it, and deletes it from the PEL in which it was found. This feature was introduced in Redis 7.0. These message IDs are returned to the caller as a part of `XAUTOCLAIM`s reply.\n\nLastly, claiming a message with `XAUTOCLAIM` also increments the attempted deliveries count for that message, unless the `JUSTID` option has been specified (which only delivers the message ID, not the message itself). Messages that cannot be processed for some reason - for example, because consumers systematically crash when processing them - will exhibit high attempted delivery counts that can be detected by monitoring.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nAn array with three elements:\n\n1.  A stream ID to be used as the `<start>` argument for the next call to `XAUTOCLAIM`.\n2.  An array containing all the successfully claimed messages in the same format as [`XRANGE`](../xrange).\n3.  An array containing message IDs that no longer exist in the stream, and were deleted from the PEL in which they were found.\n\n## Examples\n\n```\n> XAUTOCLAIM mystream mygroup Alice 3600000 0-0 COUNT 25\n1) \"0-0\"\n2) 1) 1) \"1609338752495-0\"\n      2) 1) \"field\"\n         2) \"value\"\n3) (empty array)\n```\n\nIn the above example, we attempt to claim up to 25 entries that are pending and idle (not having been acknowledged or claimed) for at least an hour, starting at the stream's beginning. The consumer \"Alice\" from the \"mygroup\" group acquires ownership of these messages. Note that the stream ID returned in the example is `0-0`, indicating that the entire stream was scanned. We can also see that `XAUTOCLAIM` did not stumble upon any deleted messages (the third reply element is an empty array).\n\n## History\n\n- Starting with Redis version 7.0.0: Added an element to the reply array, containing deleted entries the command cleared from the PEL\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xautoclaim/](https://redis.io/commands/xautoclaim/)"
- name: xclaim
  id: xclaim/index
  summary: 'Time complexity: O(log N) with N being the number of messages in the PEL of the consumer group'
  description: "# XCLAIM\n\n    XCLAIM\n\nSyntax\n\n``` command-syntax\nXCLAIM key group consumer min-idle-time id [id ...] [IDLE ms]\n  [TIME unix-time-milliseconds] [RETRYCOUNT count] [FORCE] [JUSTID]\n  [LASTID lastid]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(log N) with N being the number of messages in the PEL of the consumer group.\n\nACL categories:  \n`@write`, `@stream`, `@fast`,\n\nIn the context of a stream consumer group, this command changes the ownership of a pending message, so that the new owner is the consumer specified as the command argument. Normally this is what happens:\n\n1.  There is a stream with an associated consumer group.\n2.  Some consumer A reads a message via [`XREADGROUP`](../xreadgroup) from a stream, in the context of that consumer group.\n3.  As a side effect a pending message entry is created in the Pending Entries List (PEL) of the consumer group: it means the message was delivered to a given consumer, but it was not yet acknowledged via [`XACK`](../xack).\n4.  Then suddenly that consumer fails forever.\n5.  Other consumers may inspect the list of pending messages, that are stale for quite some time, using the [`XPENDING`](../xpending) command. In order to continue processing such messages, they use `XCLAIM` to acquire the ownership of the message and continue. Consumers can also use the [`XAUTOCLAIM`](../xautoclaim) command to automatically scan and claim stale pending messages.\n\nThis dynamic is clearly explained in the [Stream intro documentation](https://redis.io/topics/streams-intro).\n\nNote that the message is claimed only if its idle time is greater than the minimum idle time we specify when calling `XCLAIM`. Because as a side effect `XCLAIM` will also reset the idle time (since this is a new attempt at processing the message), two consumers trying to claim a message at the same time will never both succeed: only one will successfully claim the message. This avoids that we process a given message multiple times in a trivial way (yet multiple processing is possible and unavoidable in the general case).\n\nMoreover, as a side effect, `XCLAIM` will increment the count of attempted deliveries of the message unless the `JUSTID` option has been specified (which only delivers the message ID, not the message itself). In this way messages that cannot be processed for some reason, for instance because the consumers crash attempting to process them, will start to have a larger counter and can be detected inside the system.\n\n`XCLAIM` will not claim a message in the following cases:\n\n1.  The message doesn't exist in the group PEL (i.e. it was never read by any consumer)\n2.  The message exists in the group PEL but not in the stream itself (i.e. the message was read but never acknowledged, and then was deleted from the stream, either by trimming or by [`XDEL`](../xdel))\n\nIn both cases the reply will not contain a corresponding entry to that message (i.e. the length of the reply array may be smaller than the number of IDs provided to `XCLAIM`). In the latter case, the message will also be deleted from the PEL in which it was found. This feature was introduced in Redis 7.0.\n\n## Command options\n\nThe command has multiple options, however most are mainly for internal use in order to transfer the effects of `XCLAIM` or other commands to the AOF file and to propagate the same effects to the replicas, and are unlikely to be useful to normal users:\n\n1.  `IDLE <ms>`: Set the idle time (last time it was delivered) of the message. If IDLE is not specified, an IDLE of 0 is assumed, that is, the time count is reset because the message has now a new owner trying to process it.\n2.  `TIME <ms-unix-time>`: This is the same as IDLE but instead of a relative amount of milliseconds, it sets the idle time to a specific Unix time (in milliseconds). This is useful in order to rewrite the AOF file generating `XCLAIM` commands.\n3.  `RETRYCOUNT <count>`: Set the retry counter to the specified value. This counter is incremented every time a message is delivered again. Normally `XCLAIM` does not alter this counter, which is just served to clients when the XPENDING command is called: this way clients can detect anomalies, like messages that are never processed for some reason after a big number of delivery attempts.\n4.  `FORCE`: Creates the pending message entry in the PEL even if certain specified IDs are not already in the PEL assigned to a different client. However the message must be exist in the stream, otherwise the IDs of non existing messages are ignored.\n5.  `JUSTID`: Return just an array of IDs of messages successfully claimed, without returning the actual message. Using this option means the retry counter is not incremented.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns all the messages successfully claimed, in the same format as [`XRANGE`](../xrange). However if the `JUSTID` option was specified, only the message IDs are reported, without including the actual message.\n\n## Examples\n\n```\n> XCLAIM mystream mygroup Alice 3600000 1526569498055-0\n1) 1) 1526569498055-0\n   2) 1) \"message\"\n      2) \"orange\"\n```\n\nIn the above example we claim the message with ID `1526569498055-0`, only if the message is idle for at least one hour without the original consumer or some other consumer making progresses (acknowledging or claiming it), and assigns the ownership to the consumer `Alice`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xclaim/](https://redis.io/commands/xclaim/)"
- name: xdel
  id: xdel/index
  summary: 'Time complexity: O(1) for each single item to delete in the stream, regardless of the stream size'
  description: "# XDEL\n\n    XDEL\n\nSyntax\n\n``` command-syntax\nXDEL key id [id ...]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1) for each single item to delete in the stream, regardless of the stream size.\n\nACL categories:  \n`@write`, `@stream`, `@fast`,\n\nRemoves the specified entries from a stream, and returns the number of entries deleted. This number may be less than the number of IDs passed to the command in the case where some of the specified IDs do not exist in the stream.\n\nNormally you may think at a Redis stream as an append-only data structure, however Redis streams are represented in memory, so we are also able to delete entries. This may be useful, for instance, in order to comply with certain privacy policies.\n\n## Understanding the low level details of entries deletion\n\nRedis streams are represented in a way that makes them memory efficient: a radix tree is used in order to index macro-nodes that pack linearly tens of stream entries. Normally what happens when you delete an entry from a stream is that the entry is not *really* evicted, it just gets marked as deleted.\n\nEventually if all the entries in a macro-node are marked as deleted, the whole node is destroyed and the memory reclaimed. This means that if you delete a large amount of entries from a stream, for instance more than 50% of the entries appended to the stream, the memory usage per entry may increment, since what happens is that the stream will become fragmented. However the stream performance will remain the same.\n\nIn future versions of Redis it is possible that we'll trigger a node garbage collection in case a given macro-node reaches a given amount of deleted entries. Currently with the usage we anticipate for this data structure, it is not a good idea to add such complexity.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of entries actually deleted.\n\n## Examples\n\n```\n> XADD mystream * a 1\n1538561698944-0\n> XADD mystream * b 2\n1538561700640-0\n> XADD mystream * c 3\n1538561701744-0\n> XDEL mystream 1538561700640-0\n(integer) 1\n127.0.0.1:6379> XRANGE mystream - +\n1) 1) 1538561698944-0\n   2) 1) \"a\"\n      2) \"1\"\n2) 1) 1538561701744-0\n   2) 1) \"c\"\n      2) \"3\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xdel/](https://redis.io/commands/xdel/)"
- name: xgroup create
  id: xgroup-create/index
  summary: Every group has a unique name in a given stream
  description: "# XGROUP\n\n    XGROUP CREATE\n\nSyntax\n\n``` command-syntax\nXGROUP CREATE key group <id | $> [MKSTREAM]\n  [ENTRIESREAD entries-read]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@stream`, `@slow`,\n\nCreate a new consumer group uniquely identified by `<groupname>` for the stream stored at `<key>`\n\nEvery group has a unique name in a given stream. When a consumer group with the same name already exists, the command returns a `-BUSYGROUP` error.\n\nThe command's `<id>` argument specifies the last delivered entry in the stream from the new group's perspective. The special ID `$` is the ID of the last entry in the stream, but you can substitute it with any valid ID.\n\nFor example, if you want the group's consumers to fetch the entire stream from the beginning, use zero as the starting ID for the consumer group:\n\n    XGROUP CREATE mystream mygroup 0\n\nBy default, the `XGROUP CREATE` command expects that the target stream exists, and returns an error when it doesn't. If a stream does not exist, you can create it automatically with length of 0 by using the optional `MKSTREAM` subcommand as the last argument after the `<id>`:\n\n    XGROUP CREATE mystream mygroup $ MKSTREAM\n\nTo enable consumer group lag tracking, specify the optional `entries_read` named argument with an arbitrary ID. An arbitrary ID is any ID that isn't the ID of the stream's first entry, last entry, or zero (\"0-0\") ID. Use it to find out how many entries are between the arbitrary ID (excluding it) and the stream's last entry. Set the `entries_read` the stream's `entries_added` subtracted by the number of entries.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` on success.\n\n## History\n\n- Starting with Redis version 7.0.0: Added the `entries_read` named argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xgroup-create/](https://redis.io/commands/xgroup-create/)"
- name: xgroup createconsumer
  id: xgroup-createconsumer/index
  summary: Consumers are also created automatically whenever an operation, such as XREADGROUP, references a consumer that doesn't exist
  description: "# XGROUP\n\n    XGROUP CREATECONSUMER\n\nSyntax\n\n``` command-syntax\nXGROUP CREATECONSUMER key group consumer\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@stream`, `@slow`,\n\nCreate a consumer named `<consumername>` in the consumer group `<groupname>` of the stream that's stored at `<key>`.\n\nConsumers are also created automatically whenever an operation, such as [`XREADGROUP`](../xreadgroup), references a consumer that doesn't exist. This is valid for [`XREADGROUP`](../xreadgroup) only when there is data in the stream.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of created consumers (0 or 1)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xgroup-createconsumer/](https://redis.io/commands/xgroup-createconsumer/)"
- name: xgroup delconsumer
  id: xgroup-delconsumer/index
  summary: The XGROUP DELCONSUMER command deletes a consumer from the consumer group
  description: "# XGROUP\n\n    XGROUP DELCONSUMER\n\nSyntax\n\n``` command-syntax\nXGROUP DELCONSUMER key group consumer\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@stream`, `@slow`,\n\nThe `XGROUP DELCONSUMER` command deletes a consumer from the consumer group.\n\nSometimes it may be useful to remove old consumers since they are no longer used.\n\nNote, however, that any pending messages that the consumer had will become unclaimable after it was deleted. It is strongly recommended, therefore, that any pending messages are claimed or acknowledged prior to deleting the consumer from the group.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of pending messages that the consumer had before it was deleted\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xgroup-delconsumer/](https://redis.io/commands/xgroup-delconsumer/)"
- name: xgroup destroy
  id: xgroup-destroy/index
  summary: 'Time complexity: O(N) where N is the number of entries in the group''s pending entries list (PEL)'
  description: "# XGROUP\n\n    XGROUP DESTROY\n\nSyntax\n\n``` command-syntax\nXGROUP DESTROY key group\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(N) where N is the number of entries in the group's pending entries list (PEL).\n\nACL categories:  \n`@write`, `@stream`, `@slow`,\n\nThe `XGROUP DESTROY` command completely destroys a consumer group.\n\nThe consumer group will be destroyed even if there are active consumers, and pending messages, so make sure to call this command only when really needed.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of destroyed consumer groups (0 or 1)\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xgroup-destroy/](https://redis.io/commands/xgroup-destroy/)"
- name: xgroup setid
  id: xgroup-setid/index
  summary: Set the last delivered ID for a consumer group
  description: "# XGROUP\n\n    XGROUP SETID\n\nSyntax\n\n``` command-syntax\nXGROUP SETID key group <id | $> [ENTRIESREAD entries-read]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@stream`, `@slow`,\n\nSet the **last delivered ID** for a consumer group.\n\nNormally, a consumer group's last delivered ID is set when the group is created with [`XGROUP CREATE`](../xgroup-create). The `XGROUP SETID` command allows modifying the group's last delivered ID, without having to delete and recreate the group. For instance if you want the consumers in a consumer group to re-process all the messages in a stream, you may want to set its next ID to 0:\n\n    XGROUP SETID mystream mygroup 0\n\nThe optional `entries_read` argument can be specified to enable consumer group lag tracking for an arbitrary ID. An arbitrary ID is any ID that isn't the ID of the stream's first entry, its last entry or the zero (\"0-0\") ID. This can be useful you know exactly how many entries are between the arbitrary ID (excluding it) and the stream's last entry. In such cases, the `entries_read` can be set to the stream's `entries_added` subtracted with the number of entries.\n\n## Return\n\n[Simple string reply](https://redis.io/docs/reference/protocol-spec#resp-simple-strings): `OK` on success.\n\n## History\n\n- Starting with Redis version 7.0.0: Added the optional `entries_read` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xgroup-setid/](https://redis.io/commands/xgroup-setid/)"
- name: xinfo consumers
  id: xinfo-consumers/index
  summary: 'Array reply: a list of consumers'
  description: "# XINFO\n\n    XINFO CONSUMERS\n\nSyntax\n\n``` command-syntax\nXINFO CONSUMERS key group\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@stream`, `@slow`,\n\nThis command returns the list of consumers that belong to the `<groupname>` consumer group of the stream stored at `<key>`.\n\nThe following information is provided for each consumer in the group:\n\n- **name**: the consumer's name\n- **pending**: the number of entries in the PEL: pending messages for the consumer, which are messages that were delivered but are yet to be acknowledged\n- **idle**: the number of milliseconds that have passed since the consumer's last attempted interaction (Examples: [`XREADGROUP`](../xreadgroup), [`XCLAIM`](../xclaim), [`XAUTOCLAIM`](../xautoclaim))\n- **inactive**: the number of milliseconds that have passed since the consumer's last successful interaction (Examples: [`XREADGROUP`](../xreadgroup) that actually read some entries into the PEL, [`XCLAIM`](../xclaim)/[`XAUTOCLAIM`](../xautoclaim) that actually claimed some entries)\n\n@reply\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of consumers.\n\n## Examples\n\n```\n> XINFO CONSUMERS mystream mygroup\n1) 1) name\n   2) \"Alice\"\n   3) pending\n   4) (integer) 1\n   5) idle\n   6) (integer) 9104628\n   7) inactive\n   8) (integer) 18104698\n2) 1) name\n   2) \"Bob\"\n   3) pending\n   4) (integer) 1\n   5) idle\n   6) (integer) 83841983\n   7) inactive\n   8) (integer) 993841998\n```\n\n## History\n\n- Starting with Redis version 7.2.0: Added the `inactive` field.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xinfo-consumers/](https://redis.io/commands/xinfo-consumers/)"
- name: xinfo groups
  id: xinfo-groups/index
  summary: The lag of a given consumer group is the number of entries in the range between the group's entries_read and the stream's entries_added
  description: "# XINFO\n\n    XINFO GROUPS\n\nSyntax\n\n``` command-syntax\nXINFO GROUPS key\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@stream`, `@slow`,\n\nThis command returns the list of all consumers groups of the stream stored at `<key>`.\n\nBy default, only the following information is provided for each of the groups:\n\n- **name**: the consumer group's name\n- **consumers**: the number of consumers in the group\n- **pending**: the length of the group's pending entries list (PEL), which are messages that were delivered but are yet to be acknowledged\n- **last-delivered-id**: the ID of the last entry delivered the group's consumers\n- **entries-read**: the logical \"read counter\" of the last entry delivered to group's consumers\n- **lag**: the number of entries in the stream that are still waiting to be delivered to the group's consumers, or a NULL when that number can't be determined.\n\n### Consumer group lag\n\nThe lag of a given consumer group is the number of entries in the range between the group's `entries_read` and the stream's `entries_added`. Put differently, it is the number of entries that are yet to be delivered to the group's consumers.\n\nThe values and trends of this metric are helpful in making scaling decisions about the consumer group. You can address high lag values by adding more consumers to the group, whereas low values may indicate that you can remove consumers from the group to scale it down.\n\nRedis reports the lag of a consumer group by keeping two counters: the number of all entries added to the stream and the number of logical reads made by the consumer group. The lag is the difference between these two.\n\nThe stream's counter (the `entries_added` field of the [`XINFO STREAM`](../xinfo-stream) command) is incremented by one with every [`XADD`](../xadd) and counts all of the entries added to the stream during its lifetime.\n\nThe consumer group's counter, `entries_read`, is the logical counter of entries that the group had read. It is important to note that this counter is only a heuristic rather than an accurate counter, and therefore the use of the term \"logical\". The counter attempts to reflect the number of entries that the group **should have read** to get to its current `last-delivered-id`. The `entries_read` counter is accurate only in a perfect world, where a consumer group starts at the stream's first entry and processes all of its entries (i.e., no entries deleted before processing).\n\nThere are two special cases in which this mechanism is unable to report the lag:\n\n1.  A consumer group is created or set with an arbitrary last delivered ID (the [`XGROUP CREATE`](../xgroup-create) and [`XGROUP SETID`](../xgroup-setid) commands, respectively). An arbitrary ID is any ID that isn't the ID of the stream's first entry, its last entry or the zero (\"0-0\") ID.\n2.  One or more entries between the group's `last-delivered-id` and the stream's `last-generated-id` were deleted (with [`XDEL`](../xdel) or a trimming operation).\n\nIn both cases, the group's read counter is considered invalid, and the returned value is set to NULL to signal that the lag isn't currently available.\n\nHowever, the lag is only temporarily unavailable. It is restored automatically during regular operation as consumers keep processing messages. Once the consumer group delivers the last message in the stream to its members, it will be set with the correct logical read counter, and tracking its lag can be resumed.\n\n@reply\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of consumer groups.\n\n## Examples\n\n```\n> XINFO GROUPS mystream\n1)  1) \"name\"\n    2) \"mygroup\"\n    3) \"consumers\"\n    4) (integer) 2\n    5) \"pending\"\n    6) (integer) 2\n    7) \"last-delivered-id\"\n    8) \"1638126030001-0\"\n    9) \"entries-read\"\n   10) (integer) 2\n   11) \"lag\"\n   12) (integer) 0\n2)  1) \"name\"\n    2) \"some-other-group\"\n    3) \"consumers\"\n    4) (integer) 1\n    5) \"pending\"\n    6) (integer) 0\n    7) \"last-delivered-id\"\n    8) \"1638126028070-0\"\n    9) \"entries-read\"\n   10) (integer) 1\n   11) \"lag\"\n   12) (integer) 1\n```\n\n## History\n\n- Starting with Redis version 7.0.0: Added the `entries-read` and `lag` fields\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xinfo-groups/](https://redis.io/commands/xinfo-groups/)"
- name: xinfo stream
  id: xinfo-stream/index
  summary: The optional FULL modifier provides a more verbose reply
  description: "# XINFO\n\n    XINFO STREAM\n\nSyntax\n\n``` command-syntax\nXINFO STREAM key [FULL [COUNT count]]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@stream`, `@slow`,\n\nThis command returns information about the stream stored at `<key>`.\n\nThe informative details provided by this command are:\n\n- **length**: the number of entries in the stream (see [`XLEN`](../xlen))\n- **radix-tree-keys**: the number of keys in the underlying radix data structure\n- **radix-tree-nodes**: the number of nodes in the underlying radix data structure\n- **groups**: the number of consumer groups defined for the stream\n- **last-generated-id**: the ID of the least-recently entry that was added to the stream\n- **max-deleted-entry-id**: the maximal entry ID that was deleted from the stream\n- **entries-added**: the count of all entries added to the stream during its lifetime\n- **first-entry**: the ID and field-value tuples of the first entry in the stream\n- **last-entry**: the ID and field-value tuples of the last entry in the stream\n\nThe optional `FULL` modifier provides a more verbose reply. When provided, the `FULL` reply includes an **entries** array that consists of the stream entries (ID and field-value tuples) in ascending order. Furthermore, **groups** is also an array, and for each of the consumer groups it consists of the information reported by [`XINFO GROUPS`](../xinfo-groups) and [`XINFO CONSUMERS`](../xinfo-consumers).\n\nThe `COUNT` option can be used to limit the number of stream and PEL entries that are returned (The first `<count>` entries are returned). The default `COUNT` is 10 and a `COUNT` of 0 means that all entries will be returned (execution time may be long if the stream has a lot of entries).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): a list of informational bits\n\n## Examples\n\nDefault reply:\n\n```\n> XINFO STREAM mystream\n 1) \"length\"\n 2) (integer) 2\n 3) \"radix-tree-keys\"\n 4) (integer) 1\n 5) \"radix-tree-nodes\"\n 6) (integer) 2\n 7) \"last-generated-id\"\n 8) \"1638125141232-0\"\n 9) \"max-deleted-entry-id\"\n10) \"0-0\"\n11) \"entries-added\"\n12) (integer) 2\n13) \"groups\"\n14) (integer) 1\n15) \"first-entry\"\n16) 1) \"1638125133432-0\"\n    2) 1) \"message\"\n       2) \"apple\"\n17) \"last-entry\"\n18) 1) \"1638125141232-0\"\n    2) 1) \"message\"\n       2) \"banana\"\n```\n\nFull reply:\n\n```\n> XADD mystream * foo bar\n\"1638125133432-0\"\n> XADD mystream * foo bar2\n\"1638125141232-0\"\n> XGROUP CREATE mystream mygroup 0-0\nOK\n> XREADGROUP GROUP mygroup Alice COUNT 1 STREAMS mystream >\n1) 1) \"mystream\"\n   2) 1) 1) \"1638125133432-0\"\n         2) 1) \"foo\"\n            2) \"bar\"\n> XINFO STREAM mystream FULL\n 1) \"length\"\n 2) (integer) 2\n 3) \"radix-tree-keys\"\n 4) (integer) 1\n 5) \"radix-tree-nodes\"\n 6) (integer) 2\n 7) \"last-generated-id\"\n 8) \"1638125141232-0\"\n 9) \"max-deleted-entry-id\"\n10) \"0-0\"\n11) \"entries-added\"\n12) (integer) 2\n13) \"entries\"\n14) 1) 1) \"1638125133432-0\"\n       2) 1) \"foo\"\n          2) \"bar\"\n    2) 1) \"1638125141232-0\"\n       2) 1) \"foo\"\n          2) \"bar2\"\n15) \"groups\"\n16) 1)  1) \"name\"\n        2) \"mygroup\"\n        3) \"last-delivered-id\"\n        4) \"1638125133432-0\"\n        5) \"entries-read\"\n        6) (integer) 1\n        7) \"lag\"\n        8) (integer) 1\n        9) \"pel-count\"\n       10) (integer) 1\n       11) \"pending\"\n       12) 1) 1) \"1638125133432-0\"\n              2) \"Alice\"\n              3) (integer) 1638125153423\n              4) (integer) 1\n       13) \"consumers\"\n       14) 1) 1) \"name\"\n              2) \"Alice\"\n              3) \"seen-time\"\n              4) (integer) 1638125133422\n              5) \"active-time\"\n              6) (integer) 1638125133432\n              7) \"pel-count\"\n              8) (integer) 1\n              9) \"pending\"\n              10) 1) 1) \"1638125133432-0\"\n                     2) (integer) 1638125133432\n                     3) (integer) 1\n```\n\n## History\n\n- Starting with Redis version 6.0.0: Added the `FULL` modifier.\n- Starting with Redis version 7.0.0: Added the `max-deleted-entry-id`, `entries-added`, `recorded-first-entry-id`, `entries-read` and `lag` fields\n- Starting with Redis version 7.2.0: Added the `active-time` field, and changed the meaning of `seen-time`.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xinfo-stream/](https://redis.io/commands/xinfo-stream/)"
- name: xlen
  id: xlen/index
  summary: Returns the number of entries inside a stream
  description: "# XLEN\n\n    XLEN\n\nSyntax\n\n``` command-syntax\nXLEN key\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@stream`, `@fast`,\n\nReturns the number of entries inside a stream. If the specified key does not exist the command returns zero, as if the stream was empty. However note that unlike other Redis types, zero-length streams are possible, so you should call [`TYPE`](../type) or [`EXISTS`](../exists) in order to check if a key exists or not.\n\nStreams are not auto-deleted once they have no entries inside (for instance after an [`XDEL`](../xdel) call), because the stream may have consumer groups associated with it.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of entries of the stream at `key`.\n\n## Examples\n\n``` redis-cli\nXADD mystream * item 1\nXADD mystream * item 2\nXADD mystream * item 3\nXLEN mystream\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xlen/](https://redis.io/commands/xlen/)"
- name: xpending
  id: xpending/index
  summary: 'Time complexity: O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1)'
  description: "# XPENDING\n\n    XPENDING\n\nSyntax\n\n``` command-syntax\nXPENDING key group [[IDLE min-idle-time] start end count [consumer]]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.\n\nACL categories:  \n`@read`, `@stream`, `@slow`,\n\nFetching data from a stream via a consumer group, and not acknowledging such data, has the effect of creating *pending entries*. This is well explained in the [`XREADGROUP`](../xreadgroup) command, and even better in our [introduction to Redis Streams](https://redis.io/topics/streams-intro). The [`XACK`](../xack) command will immediately remove the pending entry from the Pending Entries List (PEL) since once a message is successfully processed, there is no longer need for the consumer group to track it and to remember the current owner of the message.\n\nThe `XPENDING` command is the interface to inspect the list of pending messages, and is as thus a very important command in order to observe and understand what is happening with a streams consumer groups: what clients are active, what messages are pending to be consumed, or to see if there are idle messages. Moreover this command, together with [`XCLAIM`](../xclaim) is used in order to implement recovering of consumers that are failing for a long time, and as a result certain messages are not processed: a different consumer can claim the message and continue. This is better explained in the [streams intro](https://redis.io/topics/streams-intro) and in the [`XCLAIM`](../xclaim) command page, and is not covered here.\n\n## Summary form of XPENDING\n\nWhen `XPENDING` is called with just a key name and a consumer group name, it just outputs a summary about the pending messages in a given consumer group. In the following example, we create a consumer group and immediately create a pending message by reading from the group with [`XREADGROUP`](../xreadgroup).\n\n```\n> XGROUP CREATE mystream group55 0-0\nOK\n\n> XREADGROUP GROUP group55 consumer-123 COUNT 1 STREAMS mystream >\n1) 1) \"mystream\"\n   2) 1) 1) 1526984818136-0\n         2) 1) \"duration\"\n            2) \"1532\"\n            3) \"event-id\"\n            4) \"5\"\n            5) \"user-id\"\n            6) \"7782813\"\n```\n\nWe expect the pending entries list for the consumer group `group55` to have a message right now: consumer named `consumer-123` fetched the message without acknowledging its processing. The simple `XPENDING` form will give us this information:\n\n```\n> XPENDING mystream group55\n1) (integer) 1\n2) 1526984818136-0\n3) 1526984818136-0\n4) 1) 1) \"consumer-123\"\n      2) \"1\"\n```\n\nIn this form, the command outputs the total number of pending messages for this consumer group, which is one, followed by the smallest and greatest ID among the pending messages, and then list every consumer in the consumer group with at least one pending message, and the number of pending messages it has.\n\n## Extended form of XPENDING\n\nThe summary provides a good overview, but sometimes we are interested in the details. In order to see all the pending messages with more associated information we need to also pass a range of IDs, in a similar way we do it with [`XRANGE`](../xrange), and a non optional *count* argument, to limit the number of messages returned per call:\n\n```\n> XPENDING mystream group55 - + 10\n1) 1) 1526984818136-0\n   2) \"consumer-123\"\n   3) (integer) 196415\n   4) (integer) 1\n```\n\nIn the extended form we no longer see the summary information, instead there is detailed information for each message in the pending entries list. For each message four attributes are returned:\n\n1.  The ID of the message.\n2.  The name of the consumer that fetched the message and has still to acknowledge it. We call it the current *owner* of the message.\n3.  The number of milliseconds that elapsed since the last time this message was delivered to this consumer.\n4.  The number of times this message was delivered.\n\nThe deliveries counter, that is the fourth element in the array, is incremented when some other consumer *claims* the message with [`XCLAIM`](../xclaim), or when the message is delivered again via [`XREADGROUP`](../xreadgroup), when accessing the history of a consumer in a consumer group (see the [`XREADGROUP`](../xreadgroup) page for more info).\n\nIt is possible to pass an additional argument to the command, in order to see the messages having a specific owner:\n\n```\n> XPENDING mystream group55 - + 10 consumer-123\n```\n\nBut in the above case the output would be the same, since we have pending messages only for a single consumer. However what is important to keep in mind is that this operation, filtering by a specific consumer, is not inefficient even when there are many pending messages from many consumers: we have a pending entries list data structure both globally, and for every consumer, so we can very efficiently show just messages pending for a single consumer.\n\n## Idle time filter\n\nIt is also possible to filter pending stream entries by their idle-time, given in milliseconds (useful for [`XCLAIM`](../xclaim)ing entries that have not been processed for some time):\n\n```\n> XPENDING mystream group55 IDLE 9000 - + 10\n> XPENDING mystream group55 IDLE 9000 - + 10 consumer-123\n```\n\nThe first case will return the first 10 (or less) PEL entries of the entire group that are idle for over 9 seconds, whereas in the second case only those of `consumer-123`.\n\n## Exclusive ranges and iterating the PEL\n\nThe `XPENDING` command allows iterating over the pending entries just like [`XRANGE`](../xrange) and [`XREVRANGE`](../xrevrange) allow for the stream's entries. You can do this by prefixing the ID of the last-read pending entry with the `(` character that denotes an open (exclusive) range, and proving it to the subsequent call to the command.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns data in different format depending on the way it is called, as previously explained in this page. However the reply is always an array of items.\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `IDLE` option and exclusive range intervals.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xpending/](https://redis.io/commands/xpending/)"
- name: xrange
  id: xrange/index
  summary: 'Time complexity: O(N) with N being the number of elements being returned'
  description: "# XRANGE\n\n    XRANGE\n\nSyntax\n\n``` command-syntax\nXRANGE key start end [COUNT count]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\n\nACL categories:  \n`@read`, `@stream`, `@slow`,\n\nThe command returns the stream entries matching a given range of IDs. The range is specified by a minimum and maximum ID. All the entries having an ID between the two specified or exactly one of the two IDs specified (closed interval) are returned.\n\nThe `XRANGE` command has a number of applications:\n\n- Returning items in a specific time range. This is possible because Stream IDs are [related to time](https://redis.io/topics/streams-intro).\n- Iterating a stream incrementally, returning just a few items at every iteration. However it is semantically much more robust than the [`SCAN`](../scan) family of functions.\n- Fetching a single entry from a stream, providing the ID of the entry to fetch two times: as start and end of the query interval.\n\nThe command also has a reciprocal command returning items in the reverse order, called [`XREVRANGE`](../xrevrange), which is otherwise identical.\n\n## `-` and `+` special IDs\n\nThe `-` and `+` special IDs mean respectively the minimum ID possible and the maximum ID possible inside a stream, so the following command will just return every entry in the stream:\n\n```\n> XRANGE somestream - +\n1) 1) 1526985054069-0\n   2) 1) \"duration\"\n      2) \"72\"\n      3) \"event-id\"\n      4) \"9\"\n      5) \"user-id\"\n      6) \"839248\"\n2) 1) 1526985069902-0\n   2) 1) \"duration\"\n      2) \"415\"\n      3) \"event-id\"\n      4) \"2\"\n      5) \"user-id\"\n      6) \"772213\"\n... other entries here ...\n```\n\nThe `-` and `+` special IDs mean, respectively, the minimal and maximal range IDs, however they are nicer to type.\n\n## Incomplete IDs\n\nStream IDs are composed of two parts, a Unix millisecond time stamp and a sequence number for entries inserted in the same millisecond. It is possible to use `XRANGE` specifying just the first part of the ID, the millisecond time, like in the following example:\n\n```\n> XRANGE somestream 1526985054069 1526985055069\n```\n\nIn this case, `XRANGE` will auto-complete the start interval with `-0` and end interval with `-18446744073709551615`, in order to return all the entries that were generated between a given millisecond and the end of the other specified millisecond. This also means that repeating the same millisecond two times, we get all the entries within such millisecond, because the sequence number range will be from zero to the maximum.\n\nUsed in this way `XRANGE` works as a range query command to obtain entries in a specified time. This is very handy in order to access the history of past events in a stream.\n\n## Exclusive ranges\n\nThe range is close (inclusive) by default, meaning that the reply can include entries with IDs matching the query's start and end intervals. It is possible to specify an open interval (exclusive) by prefixing the ID with the character `(`. This is useful for iterating the stream, as explained below.\n\n## Returning a maximum number of entries\n\nUsing the **COUNT** option it is possible to reduce the number of entries reported. This is a very important feature even if it may look marginal, because it allows, for instance, to model operations such as *give me the entry greater or equal to the following*:\n\n```\n> XRANGE somestream 1526985054069-0 + COUNT 1\n1) 1) 1526985054069-0\n   2) 1) \"duration\"\n      2) \"72\"\n      3) \"event-id\"\n      4) \"9\"\n      5) \"user-id\"\n      6) \"839248\"\n```\n\nIn the above case the entry `1526985054069-0` exists, otherwise the server would have sent us the next one. Using `COUNT` is also the base in order to use `XRANGE` as an iterator.\n\n## Iterating a stream\n\nIn order to iterate a stream, we can proceed as follows. Let's assume that we want two elements per iteration. We start fetching the first two elements, which is trivial:\n\n```\n> XRANGE writers - + COUNT 2\n1) 1) 1526985676425-0\n   2) 1) \"name\"\n      2) \"Virginia\"\n      3) \"surname\"\n      4) \"Woolf\"\n2) 1) 1526985685298-0\n   2) 1) \"name\"\n      2) \"Jane\"\n      3) \"surname\"\n      4) \"Austen\"\n```\n\nThen instead of starting the iteration again from `-`, as the start of the range we use the entry ID of the *last* entry returned by the previous `XRANGE` call as an exclusive interval.\n\nThe ID of the last entry is `1526985685298-0`, so we just prefix it with a '(', and continue our iteration:\n\n```\n> XRANGE writers (1526985685298-0 + COUNT 2\n1) 1) 1526985691746-0\n   2) 1) \"name\"\n      2) \"Toni\"\n      3) \"surname\"\n      4) \"Morrison\"\n2) 1) 1526985712947-0\n   2) 1) \"name\"\n      2) \"Agatha\"\n      3) \"surname\"\n      4) \"Christie\"\n```\n\nAnd so forth. Eventually this will allow to visit all the entries in the stream. Obviously, we can start the iteration from any ID, or even from a specific time, by providing a given incomplete start ID. Moreover, we can limit the iteration to a given ID or time, by providing an end ID or incomplete ID instead of `+`.\n\nThe command [`XREAD`](../xread) is also able to iterate the stream. The command [`XREVRANGE`](../xrevrange) can iterate the stream reverse, from higher IDs (or times) to lower IDs (or times).\n\n### Iterating with earlier versions of Redis\n\nWhile exclusive range intervals are only available from Redis 6.2, it is still possible to use a similar stream iteration pattern with earlier versions. You start fetching from the stream the same way as described above to obtain the first entries.\n\nFor the subsequent calls, you'll need to programmatically advance the last entry's ID returned. Most Redis client should abstract this detail, but the implementation can also be in the application if needed. In the example above, this means incrementing the sequence of `1526985685298-0` by one, from 0 to 1. The second call would, therefore, be:\n\n```\n> XRANGE writers 1526985685298-1 + COUNT 2\n1) 1) 1526985691746-0\n   2) 1) \"name\"\n      2) \"Toni\"\n...\n```\n\nAlso, note that once the sequence part of the last ID equals 18446744073709551615, you'll need to increment the timestamp and reset the sequence part to 0. For example, incrementing the ID `1526985685298-18446744073709551615` should result in `1526985685299-0`.\n\nA symmetrical pattern applies to iterating the stream with [`XREVRANGE`](../xrevrange). The only difference is that the client needs to decrement the ID for the subsequent calls. When decrementing an ID with a sequence part of 0, the timestamp needs to be decremented by 1 and the sequence set to 18446744073709551615.\n\n## Fetching single items\n\nIf you look for an `XGET` command you'll be disappointed because `XRANGE` is effectively the way to go in order to fetch a single entry from a stream. All you have to do is to specify the ID two times in the arguments of XRANGE:\n\n```\n> XRANGE mystream 1526984818136-0 1526984818136-0\n1) 1) 1526984818136-0\n   2) 1) \"duration\"\n      2) \"1532\"\n      3) \"event-id\"\n      4) \"5\"\n      5) \"user-id\"\n      6) \"7782813\"\n```\n\n## Additional information about streams\n\nFor further information about Redis streams please check our [introduction to Redis Streams document](https://redis.io/topics/streams-intro).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns the entries with IDs matching the specified range. The returned entries are complete, that means that the ID and all the fields they are composed are returned. Moreover, the entries are returned with their fields and values in the exact same order as [`XADD`](../xadd) added them.\n\n## Examples\n\n``` redis-cli\nXADD writers * name Virginia surname Woolf\nXADD writers * name Jane surname Austen\nXADD writers * name Toni surname Morrison\nXADD writers * name Agatha surname Christie\nXADD writers * name Ngozi surname Adichie\nXLEN writers\nXRANGE writers - + COUNT 2\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added exclusive ranges.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xrange/](https://redis.io/commands/xrange/)"
- name: xread
  id: xread/index
  summary: Read data from one or multiple streams, only returning entries with an ID greater than the last received ID reported by the caller
  description: "# XREAD\n\n    XREAD\n\nSyntax\n\n``` command-syntax\nXREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id\n  [id ...]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nACL categories:  \n`@read`, `@stream`, `@slow`, `@blocking`,\n\nRead data from one or multiple streams, only returning entries with an ID greater than the last received ID reported by the caller. This command has an option to block if items are not available, in a similar fashion to [`BRPOP`](../brpop) or [`BZPOPMIN`](../bzpopmin) and others.\n\nPlease note that before reading this page, if you are new to streams, we recommend to read [our introduction to Redis Streams](https://redis.io/topics/streams-intro).\n\n## Non-blocking usage\n\nIf the **BLOCK** option is not used, the command is synchronous, and can be considered somewhat related to [`XRANGE`](../xrange): it will return a range of items inside streams, however it has two fundamental differences compared to [`XRANGE`](../xrange) even if we just consider the synchronous usage:\n\n- This command can be called with multiple streams if we want to read at the same time from a number of keys. This is a key feature of `XREAD` because especially when blocking with **BLOCK**, to be able to listen with a single connection to multiple keys is a vital feature.\n- While [`XRANGE`](../xrange) returns items in a range of IDs, `XREAD` is more suited in order to consume the stream starting from the first entry which is greater than any other entry we saw so far. So what we pass to `XREAD` is, for each stream, the ID of the last element that we received from that stream.\n\nFor example, if I have two streams `mystream` and `writers`, and I want to read data from both the streams starting from the first element they contain, I could call `XREAD` like in the following example.\n\nNote: we use the **COUNT** option in the example, so that for each stream the call will return at maximum two elements per stream.\n\n```\n> XREAD COUNT 2 STREAMS mystream writers 0-0 0-0\n1) 1) \"mystream\"\n   2) 1) 1) 1526984818136-0\n         2) 1) \"duration\"\n            2) \"1532\"\n            3) \"event-id\"\n            4) \"5\"\n            5) \"user-id\"\n            6) \"7782813\"\n      2) 1) 1526999352406-0\n         2) 1) \"duration\"\n            2) \"812\"\n            3) \"event-id\"\n            4) \"9\"\n            5) \"user-id\"\n            6) \"388234\"\n2) 1) \"writers\"\n   2) 1) 1) 1526985676425-0\n         2) 1) \"name\"\n            2) \"Virginia\"\n            3) \"surname\"\n            4) \"Woolf\"\n      2) 1) 1526985685298-0\n         2) 1) \"name\"\n            2) \"Jane\"\n            3) \"surname\"\n            4) \"Austen\"\n```\n\nThe **STREAMS** option is mandatory and MUST be the final option because such option gets a variable length of argument in the following format:\n\n    STREAMS key_1 key_2 key_3 ... key_N ID_1 ID_2 ID_3 ... ID_N\n\nSo we start with a list of keys, and later continue with all the associated IDs, representing *the last ID we received for that stream*, so that the call will serve us only greater IDs from the same stream.\n\nFor instance in the above example, the last items that we received for the stream `mystream` has ID `1526999352406-0`, while for the stream `writers` has the ID `1526985685298-0`.\n\nTo continue iterating the two streams I'll call:\n\n```\n> XREAD COUNT 2 STREAMS mystream writers 1526999352406-0 1526985685298-0\n1) 1) \"mystream\"\n   2) 1) 1) 1526999626221-0\n         2) 1) \"duration\"\n            2) \"911\"\n            3) \"event-id\"\n            4) \"7\"\n            5) \"user-id\"\n            6) \"9488232\"\n2) 1) \"writers\"\n   2) 1) 1) 1526985691746-0\n         2) 1) \"name\"\n            2) \"Toni\"\n            3) \"surname\"\n            4) \"Morrison\"\n      2) 1) 1526985712947-0\n         2) 1) \"name\"\n            2) \"Agatha\"\n            3) \"surname\"\n            4) \"Christie\"\n```\n\nAnd so forth. Eventually, the call will not return any item, but just an empty array, then we know that there is nothing more to fetch from our stream (and we would have to retry the operation, hence this command also supports a blocking mode).\n\n## Incomplete IDs\n\nTo use incomplete IDs is valid, like it is valid for [`XRANGE`](../xrange). However here the sequence part of the ID, if missing, is always interpreted as zero, so the command:\n\n```\n> XREAD COUNT 2 STREAMS mystream writers 0 0\n```\n\nis exactly equivalent to\n\n```\n> XREAD COUNT 2 STREAMS mystream writers 0-0 0-0\n```\n\n## Blocking for data\n\nIn its synchronous form, the command can get new data as long as there are more items available. However, at some point, we'll have to wait for producers of data to use [`XADD`](../xadd) to push new entries inside the streams we are consuming. In order to avoid polling at a fixed or adaptive interval the command is able to block if it could not return any data, according to the specified streams and IDs, and automatically unblock once one of the requested keys accept data.\n\nIt is important to understand that this command *fans out* to all the clients that are waiting for the same range of IDs, so every consumer will get a copy of the data, unlike to what happens when blocking list pop operations are used.\n\nIn order to block, the **BLOCK** option is used, together with the number of milliseconds we want to block before timing out. Normally Redis blocking commands take timeouts in seconds, however this command takes a millisecond timeout, even if normally the server will have a timeout resolution near to 0.1 seconds. This time it is possible to block for a shorter time in certain use cases, and if the server internals will improve over time, it is possible that the resolution of timeouts will improve.\n\nWhen the **BLOCK** command is passed, but there is data to return at least in one of the streams passed, the command is executed synchronously *exactly like if the BLOCK option would be missing*.\n\nThis is an example of blocking invocation, where the command later returns a null reply because the timeout has elapsed without new data arriving:\n\n```\n> XREAD BLOCK 1000 STREAMS mystream 1526999626221-0\n(nil)\n```\n\n## The special `$` ID.\n\nWhen blocking sometimes we want to receive just entries that are added to the stream via [`XADD`](../xadd) starting from the moment we block. In such a case we are not interested in the history of already added entries. For this use case, we would have to check the stream top element ID, and use such ID in the `XREAD` command line. This is not clean and requires to call other commands, so instead it is possible to use the special `$` ID to signal the stream that we want only the new things.\n\nIt is **very important** to understand that you should use the `$` ID only for the first call to `XREAD`. Later the ID should be the one of the last reported item in the stream, otherwise you could miss all the entries that are added in between.\n\nThis is how a typical `XREAD` call looks like in the first iteration of a consumer willing to consume only new entries:\n\n```\n> XREAD BLOCK 5000 COUNT 100 STREAMS mystream $\n```\n\nOnce we get some replies, the next call will be something like:\n\n```\n> XREAD BLOCK 5000 COUNT 100 STREAMS mystream 1526999644174-3\n```\n\nAnd so forth.\n\n## How multiple clients blocked on a single stream are served\n\nBlocking list operations on lists or sorted sets have a *pop* behavior. Basically, the element is removed from the list or sorted set in order to be returned to the client. In this scenario you want the items to be consumed in a fair way, depending on the moment clients blocked on a given key arrived. Normally Redis uses the FIFO semantics in this use cases.\n\nHowever note that with streams this is not a problem: stream entries are not removed from the stream when clients are served, so every client waiting will be served as soon as an [`XADD`](../xadd) command provides data to the stream.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns an array of results: each element of the returned array is an array composed of a two element containing the key name and the entries reported for that key. The entries reported are full stream entries, having IDs and the list of all the fields and values. Field and values are guaranteed to be reported in the same order they were added by [`XADD`](../xadd).\n\nWhen **BLOCK** is used, on timeout a null reply is returned.\n\nReading the [Redis Streams introduction](https://redis.io/topics/streams-intro) is highly suggested in order to understand more about the streams overall behavior and semantics.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xread/](https://redis.io/commands/xread/)"
- name: xreadgroup
  id: xreadgroup/index
  summary: 'Time complexity: For each stream mentioned: O(M) with M being the number of elements returned'
  description: "# XREADGROUP\n\n    XREADGROUP\n\nSyntax\n\n``` command-syntax\nXREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds]\n  [NOACK] STREAMS key [key ...] id [id ...]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nFor each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.\n\nACL categories:  \n`@write`, `@stream`, `@slow`, `@blocking`,\n\nThe `XREADGROUP` command is a special version of the [`XREAD`](../xread) command with support for consumer groups. Probably you will have to understand the [`XREAD`](../xread) command before reading this page will makes sense.\n\nMoreover, if you are new to streams, we recommend to read our [introduction to Redis Streams](https://redis.io/topics/streams-intro). Make sure to understand the concept of consumer group in the introduction so that following how this command works will be simpler.\n\n## Consumer groups in 30 seconds\n\nThe difference between this command and the vanilla [`XREAD`](../xread) is that this one supports consumer groups.\n\nWithout consumer groups, just using [`XREAD`](../xread), all the clients are served with all the entries arriving in a stream. Instead using consumer groups with `XREADGROUP`, it is possible to create groups of clients that consume different parts of the messages arriving in a given stream. If, for instance, the stream gets the new entries A, B, and C and there are two consumers reading via a consumer group, one client will get, for instance, the messages A and C, and the other the message B, and so forth.\n\nWithin a consumer group, a given consumer (that is, just a client consuming messages from the stream), has to identify with a unique *consumer name*. Which is just a string.\n\nOne of the guarantees of consumer groups is that a given consumer can only see the history of messages that were delivered to it, so a message has just a single owner. However there is a special feature called *message claiming* that allows other consumers to claim messages in case there is a non recoverable failure of some consumer. In order to implement such semantics, consumer groups require explicit acknowledgment of the messages successfully processed by the consumer, via the [`XACK`](../xack) command. This is needed because the stream will track, for each consumer group, who is processing what message.\n\nThis is how to understand if you want to use a consumer group or not:\n\n1.  If you have a stream and multiple clients, and you want all the clients to get all the messages, you do not need a consumer group.\n2.  If you have a stream and multiple clients, and you want the stream to be *partitioned* or *sharded* across your clients, so that each client will get a sub set of the messages arriving in a stream, you need a consumer group.\n\n## Differences between XREAD and XREADGROUP\n\nFrom the point of view of the syntax, the commands are almost the same, however `XREADGROUP` *requires* a special and mandatory option:\n\n    GROUP <group-name> <consumer-name>\n\nThe group name is just the name of a consumer group associated to the stream. The group is created using the [`XGROUP`](../xgroup) command. The consumer name is the string that is used by the client to identify itself inside the group. The consumer is auto created inside the consumer group the first time it is saw. Different clients should select a different consumer name.\n\nWhen you read with `XREADGROUP`, the server will *remember* that a given message was delivered to you: the message will be stored inside the consumer group in what is called a Pending Entries List (PEL), that is a list of message IDs delivered but not yet acknowledged.\n\nThe client will have to acknowledge the message processing using [`XACK`](../xack) in order for the pending entry to be removed from the PEL. The PEL can be inspected using the [`XPENDING`](../xpending) command.\n\nThe `NOACK` subcommand can be used to avoid adding the message to the PEL in cases where reliability is not a requirement and the occasional message loss is acceptable. This is equivalent to acknowledging the message when it is read.\n\nThe ID to specify in the **STREAMS** option when using `XREADGROUP` can be one of the following two:\n\n- The special `>` ID, which means that the consumer want to receive only messages that were *never delivered to any other consumer*. It just means, give me new messages.\n- Any other ID, that is, 0 or any other valid ID or incomplete ID (just the millisecond time part), will have the effect of returning entries that are pending for the consumer sending the command with IDs greater than the one provided. So basically if the ID is not `>`, then the command will just let the client access its pending entries: messages delivered to it, but not yet acknowledged. Note that in this case, both `BLOCK` and `NOACK` are ignored.\n\nLike [`XREAD`](../xread) the `XREADGROUP` command can be used in a blocking way. There are no differences in this regard.\n\n## What happens when a message is delivered to a consumer?\n\nTwo things:\n\n1.  If the message was never delivered to anyone, that is, if we are talking about a new message, then a PEL (Pending Entries List) is created.\n2.  If instead the message was already delivered to this consumer, and it is just re-fetching the same message again, then the *last delivery counter* is updated to the current time, and the *number of deliveries* is incremented by one. You can access those message properties using the [`XPENDING`](../xpending) command.\n\n## Usage example\n\nNormally you use the command like that in order to get new messages and process them. In pseudo-code:\n\n```\nWHILE true\n    entries = XREADGROUP GROUP $GroupName $ConsumerName BLOCK 2000 COUNT 10 STREAMS mystream >\n    if entries == nil\n        puts \"Timeout... try again\"\n        CONTINUE\n    end\n\n    FOREACH entries AS stream_entries\n        FOREACH stream_entries as message\n            process_message(message.id,message.fields)\n\n            # ACK the message as processed\n            XACK mystream $GroupName message.id\n        END\n    END\nEND\n```\n\nIn this way the example consumer code will fetch only new messages, process them, and acknowledge them via [`XACK`](../xack). However the example code above is not complete, because it does not handle recovering after a crash. What will happen if we crash in the middle of processing messages, is that our messages will remain in the pending entries list, so we can access our history by giving `XREADGROUP` initially an ID of 0, and performing the same loop. Once providing an ID of 0 the reply is an empty set of messages, we know that we processed and acknowledged all the pending messages: we can start to use `>` as ID, in order to get the new messages and rejoin the consumers that are processing new things.\n\nTo see how the command actually replies, please check the [`XREAD`](../xread) command page.\n\n## What happens when a pending message is deleted?\n\nEntries may be deleted from the stream due to trimming or explicit calls to [`XDEL`](../xdel) at any time. By design, Redis doesn't prevent the deletion of entries that are present in the stream's PELs. When this happens, the PELs retain the deleted entries' IDs, but the actual entry payload is no longer available. Therefore, when reading such PEL entries, Redis will return a null value in place of their respective data.\n\nExample:\n\n```\n> XADD mystream 1 myfield mydata\n\"1-0\"\n> XGROUP CREATE mystream mygroup 0\nOK\n> XREADGROUP GROUP mygroup myconsumer STREAMS mystream >\n1) 1) \"mystream\"\n   2) 1) 1) \"1-0\"\n         2) 1) \"myfield\"\n            2) \"mydata\"\n> XDEL mystream 1-0\n(integer) 1\n> XREADGROUP GROUP mygroup myconsumer STREAMS mystream 0\n1) 1) \"mystream\"\n   2) 1) 1) \"1-0\"\n         2) (nil)\n```\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns an array of results: each element of the returned array is an array composed of a two element containing the key name and the entries reported for that key. The entries reported are full stream entries, having IDs and the list of all the fields and values. Field and values are guaranteed to be reported in the same order they were added by [`XADD`](../xadd).\n\nWhen **BLOCK** is used, on timeout a null reply is returned.\n\nReading the [Redis Streams introduction](https://redis.io/topics/streams-intro) is highly suggested in order to understand more about the streams overall behavior and semantics.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xreadgroup/](https://redis.io/commands/xreadgroup/)"
- name: xrevrange
  id: xrevrange/index
  summary: 'Time complexity: O(N) with N being the number of elements returned'
  description: "# XREVRANGE\n\n    XREVRANGE\n\nSyntax\n\n``` command-syntax\nXREVRANGE key end start [COUNT count]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\n\nACL categories:  \n`@read`, `@stream`, `@slow`,\n\nThis command is exactly like [`XRANGE`](../xrange), but with the notable difference of returning the entries in reverse order, and also taking the start-end range in reverse order: in `XREVRANGE` you need to state the *end* ID and later the *start* ID, and the command will produce all the element between (or exactly like) the two IDs, starting from the *end* side.\n\nSo for instance, to get all the elements from the higher ID to the lower ID one could use:\n\n    XREVRANGE somestream + -\n\nSimilarly to get just the last element added into the stream it is enough to send:\n\n    XREVRANGE somestream + - COUNT 1\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays), specifically:\n\nThe command returns the entries with IDs matching the specified range, from the higher ID to the lower ID matching. The returned entries are complete, that means that the ID and all the fields they are composed are returned. Moreover the entries are returned with their fields and values in the exact same order as [`XADD`](../xadd) added them.\n\n## Examples\n\n``` redis-cli\nXADD writers * name Virginia surname Woolf\nXADD writers * name Jane surname Austen\nXADD writers * name Toni surname Morrison\nXADD writers * name Agatha surname Christie\nXADD writers * name Ngozi surname Adichie\nXLEN writers\nXREVRANGE writers + - COUNT 1\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added exclusive ranges.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xrevrange/](https://redis.io/commands/xrevrange/)"
- name: xsetid
  id: xsetid/index
  summary: The XSETID command is an internal command
  description: "# XSETID\n\n    XSETID\n\nSyntax\n\n``` command-syntax\nXSETID key last-id [ENTRIESADDED entries-added]\n  [MAXDELETEDID max-deleted-id]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@write`, `@stream`, `@fast`,\n\nThe `XSETID` command is an internal command. It is used by a Redis master to replicate the last delivered ID of streams.\n\n## History\n\n- Starting with Redis version 7.0.0: Added the `entries_added` and `max_deleted_entry_id` arguments.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xsetid/](https://redis.io/commands/xsetid/)"
- name: xtrim
  id: xtrim/index
  summary: 'Time complexity: O(N), with N being the number of evicted entries'
  description: "# XTRIM\n\n    XTRIM\n\nSyntax\n\n``` command-syntax\nXTRIM key <MAXLEN | MINID> [= | ~] threshold [LIMIT count]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.\n\nACL categories:  \n`@write`, `@stream`, `@slow`,\n\n`XTRIM` trims the stream by evicting older entries (entries with lower IDs) if needed.\n\nTrimming the stream can be done using one of these strategies:\n\n- `MAXLEN`: Evicts entries as long as the stream's length exceeds the specified `threshold`, where `threshold` is a positive integer.\n- `MINID`: Evicts entries with IDs lower than `threshold`, where `threshold` is a stream ID.\n\nFor example, this will trim the stream to exactly the latest 1000 items:\n\n```\nXTRIM mystream MAXLEN 1000\n```\n\nWhereas in this example, all entries that have an ID lower than 649085820-0 will be evicted:\n\n```\nXTRIM mystream MINID 649085820\n```\n\nBy default, or when provided with the optional `=` argument, the command performs exact trimming.\n\nDepending on the strategy, exact trimming means:\n\n- `MAXLEN`: the trimmed stream's length will be exactly the minimum between its original length and the specified `threshold`.\n- `MINID`: the oldest ID in the stream will be exactly the maximum between its original oldest ID and the specified `threshold`.\n\n## Nearly exact trimming\n\nBecause exact trimming may require additional effort from the Redis server, the optional `~` argument can be provided to make it more efficient.\n\nFor example:\n\n```\nXTRIM mystream MAXLEN ~ 1000\n```\n\nThe `~` argument between the `MAXLEN` strategy and the `threshold` means that the user is requesting to trim the stream so its length is **at least** the `threshold`, but possibly slightly more. In this case, Redis will stop trimming early when performance can be gained (for example, when a whole macro node in the data structure can't be removed). This makes trimming much more efficient, and it is usually what you want, although after trimming, the stream may have few tens of additional entries over the `threshold`.\n\nAnother way to control the amount of work done by the command when using the `~`, is the `LIMIT` clause. When used, it specifies the maximal `count` of entries that will be evicted. When `LIMIT` and `count` aren't specified, the default value of 100 \\* the number of entries in a macro node will be implicitly used as the `count`. Specifying the value 0 as `count` disables the limiting mechanism entirely.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): The number of entries deleted from the stream.\n\n## Examples\n\n``` redis-cli\nXADD mystream * field1 A field2 B field3 C field4 D\nXTRIM mystream MAXLEN 2\nXRANGE mystream - +\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `MINID` trimming strategy and the `LIMIT` option.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/xtrim/](https://redis.io/commands/xtrim/)"
- name: zadd
  id: zadd/index
  summary: 'Time complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set'
  description: "# ZADD\n\n    ZADD\n\nSyntax\n\n``` command-syntax\nZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member\n  ...]\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(log(N)) for each item added, where N is the number of elements in the sorted set.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`,\n\nAdds all the specified members with the specified scores to the sorted set stored at `key`. It is possible to specify multiple score / member pairs. If a specified member is already a member of the sorted set, the score is updated and the element reinserted at the right position to ensure the correct ordering.\n\nIf `key` does not exist, a new sorted set with the specified members as sole members is created, like if the sorted set was empty. If the key exists but does not hold a sorted set, an error is returned.\n\nThe score values should be the string representation of a double precision floating point number. `+inf` and `-inf` values are valid values as well.\n\n## ZADD options\n\nZADD supports a list of options, specified after the name of the key and before the first score argument. Options are:\n\n- **XX**: Only update elements that already exist. Don't add new elements.\n- **NX**: Only add new elements. Don't update already existing elements.\n- **LT**: Only update existing elements if the new score is **less than** the current score. This flag doesn't prevent adding new elements.\n- **GT**: Only update existing elements if the new score is **greater than** the current score. This flag doesn't prevent adding new elements.\n- **CH**: Modify the return value from the number of new elements added, to the total number of elements changed (CH is an abbreviation of *changed*). Changed elements are **new elements added** and elements already existing for which **the score was updated**. So elements specified in the command line having the same score as they had in the past are not counted. Note: normally the return value of `ZADD` only counts the number of new elements added.\n- **INCR**: When this option is specified `ZADD` acts like [`ZINCRBY`](../zincrby). Only one score-element pair can be specified in this mode.\n\nNote: The **GT**, **LT** and **NX** options are mutually exclusive.\n\n## Range of integer scores that can be expressed precisely\n\nRedis sorted sets use a *double 64-bit floating point number* to represent the score. In all the architectures we support, this is represented as an **IEEE 754 floating point number**, that is able to represent precisely integer numbers between `-(2^53)` and `+(2^53)` included. In more practical terms, all the integers between -9007199254740992 and 9007199254740992 are perfectly representable. Larger integers, or fractions, are internally represented in exponential form, so it is possible that you get only an approximation of the decimal number, or of the very big integer, that you set as score.\n\n## Sorted sets 101\n\nSorted sets are sorted by their score in an ascending way. The same element only exists a single time, no repeated elements are permitted. The score can be modified both by `ZADD` that will update the element score, and as a side effect, its position on the sorted set, and by [`ZINCRBY`](../zincrby) that can be used in order to update the score relatively to its previous value.\n\nThe current score of an element can be retrieved using the [`ZSCORE`](../zscore) command, that can also be used to verify if an element already exists or not.\n\nFor an introduction to sorted sets, see the data types page on [sorted sets](https://redis.io/topics/data-types#sorted-sets).\n\n## Elements with the same score\n\nWhile the same element can't be repeated in a sorted set since every element is unique, it is possible to add multiple different elements *having the same score*. When multiple elements have the same score, they are *ordered lexicographically* (they are still ordered by score as a first key, however, locally, all the elements with the same score are relatively ordered lexicographically).\n\nThe lexicographic ordering used is binary, it compares strings as array of bytes.\n\nIf the user inserts all the elements in a sorted set with the same score (for example 0), all the elements of the sorted set are sorted lexicographically, and range queries on elements are possible using the command [`ZRANGEBYLEX`](../zrangebylex) (Note: it is also possible to query sorted sets by range of scores using [`ZRANGEBYSCORE`](../zrangebyscore)).\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- When used without optional arguments, the number of elements added to the sorted set (excluding score updates).\n- If the `CH` option is specified, the number of elements that were changed (added or updated).\n\nIf the [`INCR`](../incr) option is specified, the return value will be [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings):\n\n- The new score of `member` (a double precision floating point number) represented as string, or `nil` if the operation was aborted (when called with either the `XX` or the `NX` option).\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 1 \"uno\"\nZADD myzset 2 \"two\" 3 \"three\"\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple elements.\n- Starting with Redis version 3.0.2: Added the `XX`, `NX`, `CH` and `INCR` options.\n- Starting with Redis version 6.2.0: Added the `GT` and `LT` options.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zadd/](https://redis.io/commands/zadd/)"
- name: zcard
  id: zcard/index
  summary: Returns the sorted set cardinality (number of elements) of the sorted set stored at key
  description: "# ZCARD\n\n    ZCARD\n\nSyntax\n\n``` command-syntax\nZCARD key\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nReturns the sorted set cardinality (number of elements) of the sorted set stored at `key`.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the cardinality (number of elements) of the sorted set, or `0` if `key` does not exist.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZCARD myzset\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zcard/](https://redis.io/commands/zcard/)"
- name: zcount
  id: zcount/index
  summary: 'Time complexity: O(log(N)) with N being the number of elements in the sorted set'
  description: "# ZCOUNT\n\n    ZCOUNT\n\nSyntax\n\n``` command-syntax\nZCOUNT key min max\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(log(N)) with N being the number of elements in the sorted set.\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nReturns the number of elements in the sorted set at `key` with a score between `min` and `max`.\n\nThe `min` and `max` arguments have the same semantic as described for [`ZRANGEBYSCORE`](../zrangebyscore).\n\nNote: the command has a complexity of just O(log(N)) because it uses elements ranks (see [`ZRANK`](../zrank)) to get an idea of the range. Because of this there is no need to do a work proportional to the size of the range.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the specified score range.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZCOUNT myzset -inf +inf\nZCOUNT myzset (1 3\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zcount/](https://redis.io/commands/zcount/)"
- name: zdiff
  id: zdiff/index
  summary: 'Time complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set'
  description: "# ZDIFF\n\n    ZDIFF\n\nSyntax\n\n``` command-syntax\nZDIFF numkeys key [key ...] [WITHSCORES]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nThis command is similar to [`ZDIFFSTORE`](../zdiffstore), but instead of storing the resulting sorted set, it is returned to the client.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): the result of the difference (optionally with their scores, in case the `WITHSCORES` option is given).\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset1 3 \"three\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZDIFF 2 zset1 zset2\nZDIFF 2 zset1 zset2 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zdiff/](https://redis.io/commands/zdiff/)"
- name: zdiffstore
  id: zdiffstore/index
  summary: 'Time complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set'
  description: "# ZDIFFSTORE\n\n    ZDIFFSTORE\n\nSyntax\n\n``` command-syntax\nZDIFFSTORE destination numkeys key [key ...]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nComputes the difference between the first and all successive input sorted sets and stores the result in `destination`. The total number of input keys is specified by `numkeys`.\n\nKeys that do not exist are considered to be empty sets.\n\nIf `destination` already exists, it is overwritten.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting sorted set at `destination`.\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset1 3 \"three\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZDIFFSTORE out 2 zset1 zset2\nZRANGE out 0 -1 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zdiffstore/](https://redis.io/commands/zdiffstore/)"
- name: zincrby
  id: zincrby/index
  summary: 'Time complexity: O(log(N)) where N is the number of elements in the sorted set'
  description: "# ZINCRBY\n\n    ZINCRBY\n\nSyntax\n\n``` command-syntax\nZINCRBY key increment member\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(log(N)) where N is the number of elements in the sorted set.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`,\n\nIncrements the score of `member` in the sorted set stored at `key` by `increment`. If `member` does not exist in the sorted set, it is added with `increment` as its score (as if its previous score was `0.0`). If `key` does not exist, a new sorted set with the specified `member` as its sole member is created.\n\nAn error is returned when `key` exists but does not hold a sorted set.\n\nThe `score` value should be the string representation of a numeric value, and accepts double precision floating point numbers. It is possible to provide a negative value to decrement the score.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the new score of `member` (a double precision floating point number), represented as string.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZINCRBY myzset 2 \"one\"\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zincrby/](https://redis.io/commands/zincrby/)"
- name: zinter
  id: zinter/index
  summary: 'Time complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set'
  description: "# ZINTER\n\n    ZINTER\n\nSyntax\n\n``` command-syntax\nZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]]\n  [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N\\*K)+O(M\\*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nThis command is similar to [`ZINTERSTORE`](../zinterstore), but instead of storing the resulting sorted set, it is returned to the client.\n\nFor a description of the `WEIGHTS` and `AGGREGATE` options, see [`ZUNIONSTORE`](../zunionstore).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): the result of intersection (optionally with their scores, in case the `WITHSCORES` option is given).\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZINTER 2 zset1 zset2\nZINTER 2 zset1 zset2 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zinter/](https://redis.io/commands/zinter/)"
- name: zintercard
  id: zintercard/index
  summary: 'Time complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets'
  description: "# ZINTERCARD\n\n    ZINTERCARD\n\nSyntax\n\n``` command-syntax\nZINTERCARD numkeys key [key ...] [LIMIT limit]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(N\\*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nThis command is similar to [`ZINTER`](../zinter), but instead of returning the result set, it returns just the cardinality of the result.\n\nKeys that do not exist are considered to be empty sets. With one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).\n\nBy default, the command calculates the cardinality of the intersection of all given sets. When provided with the optional `LIMIT` argument (which defaults to 0 and means unlimited), if the intersection cardinality reaches limit partway through the computation, the algorithm will exit and yield limit as the cardinality. Such implementation ensures a significant speedup for queries where the limit is lower than the actual intersection cardinality.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting intersection.\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZINTER 2 zset1 zset2\nZINTERCARD 2 zset1 zset2\nZINTERCARD 2 zset1 zset2 LIMIT 1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zintercard/](https://redis.io/commands/zintercard/)"
- name: zinterstore
  id: zinterstore/index
  summary: 'Time complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set'
  description: "# ZINTERSTORE\n\n    ZINTERSTORE\n\nSyntax\n\n``` command-syntax\nZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight\n  [weight ...]] [AGGREGATE <SUM | MIN | MAX>]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N\\*K)+O(M\\*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nComputes the intersection of `numkeys` sorted sets given by the specified keys, and stores the result in `destination`. It is mandatory to provide the number of input keys (`numkeys`) before passing the input keys and the other (optional) arguments.\n\nBy default, the resulting score of an element is the sum of its scores in the sorted sets where it exists. Because intersection requires an element to be a member of every given sorted set, this results in the score of every element in the resulting sorted set to be equal to the number of input sorted sets.\n\nFor a description of the `WEIGHTS` and `AGGREGATE` options, see [`ZUNIONSTORE`](../zunionstore).\n\nIf `destination` already exists, it is overwritten.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting sorted set at `destination`.\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3\nZRANGE out 0 -1 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zinterstore/](https://redis.io/commands/zinterstore/)"
- name: zlexcount
  id: zlexcount/index
  summary: 'Time complexity: O(log(N)) with N being the number of elements in the sorted set'
  description: "# ZLEXCOUNT\n\n    ZLEXCOUNT\n\nSyntax\n\n``` command-syntax\nZLEXCOUNT key min max\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(log(N)) with N being the number of elements in the sorted set.\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns the number of elements in the sorted set at `key` with a value between `min` and `max`.\n\nThe `min` and `max` arguments have the same meaning as described for [`ZRANGEBYLEX`](../zrangebylex).\n\nNote: the command has a complexity of just O(log(N)) because it uses elements ranks (see [`ZRANK`](../zrank)) to get an idea of the range. Because of this there is no need to do a work proportional to the size of the range.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the specified score range.\n\n## Examples\n\n``` redis-cli\nZADD myzset 0 a 0 b 0 c 0 d 0 e\nZADD myzset 0 f 0 g\nZLEXCOUNT myzset - +\nZLEXCOUNT myzset [b [f\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zlexcount/](https://redis.io/commands/zlexcount/)"
- name: zmpop
  id: zmpop/index
  summary: 'Time complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped'
  description: "# ZMPOP\n\n    ZMPOP\n\nSyntax\n\n``` command-syntax\nZMPOP numkeys key [key ...] <MIN | MAX> [COUNT count]\n```\n\nAvailable since:  \n7.0.0\n\nTime complexity:  \nO(K) + O(M\\*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nPops one or more elements, that are member-score pairs, from the first non-empty sorted set in the provided list of key names.\n\n`ZMPOP` and [`BZMPOP`](../bzmpop) are similar to the following, more limited, commands:\n\n- [`ZPOPMIN`](../zpopmin) or [`ZPOPMAX`](../zpopmax) which take only one key, and can return multiple elements.\n- [`BZPOPMIN`](../bzpopmin) or [`BZPOPMAX`](../bzpopmax) which take multiple keys, but return only one element from just one key.\n\nSee [`BZMPOP`](../bzmpop) for the blocking variant of this command.\n\nWhen the `MIN` modifier is used, the elements popped are those with the lowest scores from the first non-empty sorted set. The `MAX` modifier causes elements with the highest scores to be popped. The optional `COUNT` can be used to specify the number of elements to pop, and is set to 1 by default.\n\nThe number of popped elements is the minimum from the sorted set's cardinality and `COUNT`'s value.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): specifically:\n\n- A `nil` when no element could be popped.\n- A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.\n\n## Examples\n\n``` redis-cli\nZMPOP 1 notsuchkey MIN\nZADD myzset 1 \"one\" 2 \"two\" 3 \"three\"\nZMPOP 1 myzset MIN\nZRANGE myzset 0 -1 WITHSCORES\nZMPOP 1 myzset MAX COUNT 10\nZADD myzset2 4 \"four\" 5 \"five\" 6 \"six\"\nZMPOP 2 myzset myzset2 MIN COUNT 10\nZRANGE myzset 0 -1 WITHSCORES\nZMPOP 2 myzset myzset2 MAX COUNT 10\nZRANGE myzset2 0 -1 WITHSCORES\nEXISTS myzset myzset2\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zmpop/](https://redis.io/commands/zmpop/)"
- name: zmscore
  id: zmscore/index
  summary: 'Time complexity: O(N) where N is the number of members being requested'
  description: "# ZMSCORE\n\n    ZMSCORE\n\nSyntax\n\n``` command-syntax\nZMSCORE key member [member ...]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N) where N is the number of members being requested.\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nReturns the scores associated with the specified `members` in the sorted set stored at `key`.\n\nFor every `member` that does not exist in the sorted set, a `nil` value is returned.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of scores or `nil` associated with the specified `member` values (a double precision floating point number), represented as strings.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZMSCORE myzset \"one\" \"two\" \"nofield\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zmscore/](https://redis.io/commands/zmscore/)"
- name: zpopmax
  id: zpopmax/index
  summary: 'Time complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped'
  description: "# ZPOPMAX\n\n    ZPOPMAX\n\nSyntax\n\n``` command-syntax\nZPOPMAX key [count]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(log(N)\\*M) with N being the number of elements in the sorted set, and M being the number of elements popped.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`,\n\nRemoves and returns up to `count` members with the highest scores in the sorted set stored at `key`.\n\nWhen left unspecified, the default value for `count` is 1. Specifying a `count` value that is higher than the sorted set's cardinality will not produce an error. When returning multiple elements, the one with the highest score will be the first, followed by the elements with lower scores.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of popped elements and scores.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZPOPMAX myzset\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zpopmax/](https://redis.io/commands/zpopmax/)"
- name: zpopmin
  id: zpopmin/index
  summary: 'Time complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped'
  description: "# ZPOPMIN\n\n    ZPOPMIN\n\nSyntax\n\n``` command-syntax\nZPOPMIN key [count]\n```\n\nAvailable since:  \n5.0.0\n\nTime complexity:  \nO(log(N)\\*M) with N being the number of elements in the sorted set, and M being the number of elements popped.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`,\n\nRemoves and returns up to `count` members with the lowest scores in the sorted set stored at `key`.\n\nWhen left unspecified, the default value for `count` is 1. Specifying a `count` value that is higher than the sorted set's cardinality will not produce an error. When returning multiple elements, the one with the lowest score will be the first, followed by the elements with greater scores.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of popped elements and scores.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZPOPMIN myzset\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zpopmin/](https://redis.io/commands/zpopmin/)"
- name: zrandmember
  id: zrandmember/index
  summary: When called with just the key argument, return a random element from the sorted set value stored at key
  description: "# ZRANDMEMBER\n\n    ZRANDMEMBER\n\nSyntax\n\n``` command-syntax\nZRANDMEMBER key [count [WITHSCORES]]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N) where N is the number of members returned\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nWhen called with just the `key` argument, return a random element from the sorted set value stored at `key`.\n\nIf the provided `count` argument is positive, return an array of **distinct elements**. The array's length is either `count` or the sorted set's cardinality ([`ZCARD`](../zcard)), whichever is lower.\n\nIf called with a negative `count`, the behavior changes and the command is allowed to return the **same element multiple times**. In this case, the number of returned elements is the absolute value of the specified `count`.\n\nThe optional `WITHSCORES` modifier changes the reply so it includes the respective scores of the randomly selected elements from the sorted set.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): without the additional `count` argument, the command returns a Bulk Reply with the randomly selected element, or `nil` when `key` does not exist.\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): when the additional `count` argument is passed, the command returns an array of elements, or an empty array when `key` does not exist. If the `WITHSCORES` modifier is used, the reply is a list elements and their scores from the sorted set.\n\n## Examples\n\n``` redis-cli\nZADD dadi 1 uno 2 due 3 tre 4 quattro 5 cinque 6 sei\nZRANDMEMBER dadi\nZRANDMEMBER dadi\nZRANDMEMBER dadi -5 WITHSCORES\n```\n\n## Specification of the behavior when count is passed\n\nWhen the `count` argument is a positive value this command behaves as follows:\n\n- No repeated elements are returned.\n- If `count` is bigger than the cardinality of the sorted set, the command will only return the whole sorted set without additional elements.\n- The order of elements in the reply is not truly random, so it is up to the client to shuffle them if needed.\n\nWhen the `count` is a negative value, the behavior changes as follows:\n\n- Repeating elements are possible.\n- Exactly `count` elements, or an empty array if the sorted set is empty (non-existing key), are always returned.\n- The order of elements in the reply is truly random.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrandmember/](https://redis.io/commands/zrandmember/)"
- name: zrange
  id: zrange/index
  summary: 'Time complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned'
  description: "# ZRANGE\n\n    ZRANGE\n\nSyntax\n\n``` command-syntax\nZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count]\n  [WITHSCORES]\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nReturns the specified range of elements in the sorted set stored at `<key>`.\n\n`ZRANGE` can perform different types of range queries: by index (rank), by the score, or by lexicographical order.\n\nStarting with Redis 6.2.0, this command can replace the following commands: [`ZREVRANGE`](../zrevrange), [`ZRANGEBYSCORE`](../zrangebyscore), [`ZREVRANGEBYSCORE`](../zrevrangebyscore), [`ZRANGEBYLEX`](../zrangebylex) and [`ZREVRANGEBYLEX`](../zrevrangebylex).\n\n## Common behavior and options\n\nThe order of elements is from the lowest to the highest score. Elements with the same score are ordered lexicographically.\n\nThe optional `REV` argument reverses the ordering, so elements are ordered from highest to lowest score, and score ties are resolved by reverse lexicographical ordering.\n\nThe optional `LIMIT` argument can be used to obtain a sub-range from the matching elements (similar to *SELECT LIMIT offset, count* in SQL). A negative `<count>` returns all elements from the `<offset>`. Keep in mind that if `<offset>` is large, the sorted set needs to be traversed for `<offset>` elements before getting to the elements to return, which can add up to O(N) time complexity.\n\nThe optional `WITHSCORES` argument supplements the command's reply with the scores of elements returned. The returned list contains `value1,score1,...,valueN,scoreN` instead of `value1,...,valueN`. Client libraries are free to return a more appropriate data type (suggestion: an array with (value, score) arrays/tuples).\n\n## Index ranges\n\nBy default, the command performs an index range query. The `<start>` and `<stop>` arguments represent zero-based indexes, where `0` is the first element, `1` is the next element, and so on. These arguments specify an **inclusive range**, so for example, `ZRANGE myzset 0 1` will return both the first and the second element of the sorted set.\n\nThe indexes can also be negative numbers indicating offsets from the end of the sorted set, with `-1` being the last element of the sorted set, `-2` the penultimate element, and so on.\n\nOut of range indexes do not produce an error.\n\nIf `<start>` is greater than either the end index of the sorted set or `<stop>`, an empty list is returned.\n\nIf `<stop>` is greater than the end index of the sorted set, Redis will use the last element of the sorted set.\n\n## Score ranges\n\nWhen the `BYSCORE` option is provided, the command behaves like [`ZRANGEBYSCORE`](../zrangebyscore) and returns the range of elements from the sorted set having scores equal or between `<start>` and `<stop>`.\n\n`<start>` and `<stop>` can be `-inf` and `+inf`, denoting the negative and positive infinities, respectively. This means that you are not required to know the highest or lowest score in the sorted set to get all elements from or up to a certain score.\n\nBy default, the score intervals specified by `<start>` and `<stop>` are closed (inclusive). It is possible to specify an open interval (exclusive) by prefixing the score with the character `(`.\n\nFor example:\n\n```\nZRANGE zset (1 5 BYSCORE\n```\n\nWill return all elements with `1 < score <= 5` while:\n\n```\nZRANGE zset (5 (10 BYSCORE\n```\n\nWill return all the elements with `5 < score < 10` (5 and 10 excluded).\n\n## Reverse ranges\n\nUsing the `REV` option reverses the sorted set, with index 0 as the element with the highest score.\n\nBy default, `<start>` must be less than or equal to `<stop>` to return anything. However, if the `BYSCORE`, or `BYLEX` options are selected, the `<start>` is the highest score to consider, and `<stop>` is the lowest score to consider, therefore `<start>` must be greater than or equal to `<stop>` in order to return anything.\n\nFor example:\n\n```\nZRANGE zset 5 10 REV\n```\n\nWill return the elements between index 5 and 10 in the reversed index.\n\n```\nZRANGE zset 10 5 REV BYSCORE\n```\n\nWill return all elements with scores less than 10 and greater than 5.\n\n## Lexicographical ranges\n\nWhen the `BYLEX` option is used, the command behaves like [`ZRANGEBYLEX`](../zrangebylex) and returns the range of elements from the sorted set between the `<start>` and `<stop>` lexicographical closed range intervals.\n\nNote that lexicographical ordering relies on all elements having the same score. The reply is unspecified when the elements have different scores.\n\nValid `<start>` and `<stop>` must start with `(` or `[`, in order to specify whether the range interval is exclusive or inclusive, respectively.\n\nThe special values of `+` or `-` for `<start>` and `<stop>` mean positive and negative infinite strings, respectively, so for instance the command `ZRANGE myzset - + BYLEX` is guaranteed to return all the elements in the sorted set, providing that all the elements have the same score.\n\nThe `REV` options reverses the order of the `<start>` and `<stop>` elements, where `<start>` must be lexicographically greater than `<stop>` to produce a non-empty result.\n\n### Lexicographical comparison of strings\n\nStrings are compared as a binary array of bytes. Because of how the ASCII character set is specified, this means that usually this also have the effect of comparing normal ASCII characters in an obvious dictionary way. However, this is not true if non-plain ASCII strings are used (for example, utf8 strings).\n\nHowever, the user can apply a transformation to the encoded string so that the first part of the element inserted in the sorted set will compare as the user requires for the specific application. For example, if I want to add strings that will be compared in a case-insensitive way, but I still want to retrieve the real case when querying, I can add strings in the following way:\n\n    ZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n\nBecause of the first *normalized* part in every element (before the colon character), we are forcing a given comparison. However, after the range is queried using `ZRANGE ... BYLEX`, the application can display to the user the second part of the string, after the colon.\n\nThe binary nature of the comparison allows to use sorted sets as a general purpose index, for example, the first part of the element can be a 64-bit big-endian number. Since big-endian numbers have the most significant bytes in the initial positions, the binary comparison will match the numerical comparison of the numbers. This can be used in order to implement range queries on 64-bit values. As in the example below, after the first 8 bytes, we can store the value of the element we are indexing.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified range (optionally with their scores, in case the `WITHSCORES` option is given).\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZRANGE myzset 0 -1\nZRANGE myzset 2 3\nZRANGE myzset -2 -1\n```\n\nThe following example using `WITHSCORES` shows how the command returns always an array, but this time, populated with *element_1*, *score_1*, *element_2*, *score_2*, ..., *element_N*, *score_N*.\n\n``` redis-cli\nZRANGE myzset 0 1 WITHSCORES\n```\n\nThis example shows how to query the sorted set by score, excluding the value `1` and up to infinity, returning only the second element of the result:\n\n``` redis-cli\nZRANGE myzset (1 +inf BYSCORE LIMIT 1 1\n```\n\n## History\n\n- Starting with Redis version 6.2.0: Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrange/](https://redis.io/commands/zrange/)"
- name: zrangebylex
  id: zrangebylex/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# ZRANGEBYLEX\n\n    ZRANGEBYLEX (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`ZRANGE`](../zrange) with the `BYLEX` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nZRANGEBYLEX key min max [LIMIT offset count]\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at `key` with a value between `min` and `max`.\n\nIf the elements in the sorted set have different scores, the returned elements are unspecified.\n\nThe elements are considered to be ordered from lower to higher strings as compared byte-by-byte using the `memcmp()` C function. Longer strings are considered greater than shorter strings if the common part is identical.\n\nThe optional `LIMIT` argument can be used to only get a range of the matching elements (similar to *SELECT LIMIT offset, count* in SQL). A negative `count` returns all elements from the `offset`. Keep in mind that if `offset` is large, the sorted set needs to be traversed for `offset` elements before getting to the elements to return, which can add up to O(N) time complexity.\n\n## How to specify intervals\n\nValid *start* and *stop* must start with `(` or `[`, in order to specify if the range item is respectively exclusive or inclusive. The special values of `+` or `-` for *start* and *stop* have the special meaning or positively infinite and negatively infinite strings, so for instance the command **ZRANGEBYLEX myzset - +** is guaranteed to return all the elements in the sorted set, if all the elements have the same score.\n\n## Details on strings comparison\n\nStrings are compared as binary array of bytes. Because of how the ASCII character set is specified, this means that usually this also have the effect of comparing normal ASCII characters in an obvious dictionary way. However this is not true if non plain ASCII strings are used (for example utf8 strings).\n\nHowever the user can apply a transformation to the encoded string so that the first part of the element inserted in the sorted set will compare as the user requires for the specific application. For example if I want to add strings that will be compared in a case-insensitive way, but I still want to retrieve the real case when querying, I can add strings in the following way:\n\n    ZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n\nBecause of the first *normalized* part in every element (before the colon character), we are forcing a given comparison, however after the range is queries using `ZRANGEBYLEX` the application can display to the user the second part of the string, after the colon.\n\nThe binary nature of the comparison allows to use sorted sets as a general purpose index, for example the first part of the element can be a 64 bit big endian number: since big endian numbers have the most significant bytes in the initial positions, the binary comparison will match the numerical comparison of the numbers. This can be used in order to implement range queries on 64 bit values. As in the example below, after the first 8 bytes we can store the value of the element we are actually indexing.\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified score range.\n\n## Examples\n\n``` redis-cli\nZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\nZRANGEBYLEX myzset - [c\nZRANGEBYLEX myzset - (c\nZRANGEBYLEX myzset [aaa (g\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrangebylex/](https://redis.io/commands/zrangebylex/)"
- name: zrangebyscore
  id: zrangebyscore/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# ZRANGEBYSCORE\n\n    ZRANGEBYSCORE (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`ZRANGE`](../zrange) with the `BYSCORE` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n```\n\nAvailable since:  \n1.0.5\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nReturns all the elements in the sorted set at `key` with a score between `min` and `max` (including elements with score equal to `min` or `max`). The elements are considered to be ordered from low to high scores.\n\nThe elements having the same score are returned in lexicographical order (this follows from a property of the sorted set implementation in Redis and does not involve further computation).\n\nThe optional `LIMIT` argument can be used to only get a range of the matching elements (similar to *SELECT LIMIT offset, count* in SQL). A negative `count` returns all elements from the `offset`. Keep in mind that if `offset` is large, the sorted set needs to be traversed for `offset` elements before getting to the elements to return, which can add up to O(N) time complexity.\n\nThe optional `WITHSCORES` argument makes the command return both the element and its score, instead of the element alone. This option is available since Redis 2.0.\n\n## Exclusive intervals and infinity\n\n`min` and `max` can be `-inf` and `+inf`, so that you are not required to know the highest or lowest score in the sorted set to get all elements from or up to a certain score.\n\nBy default, the interval specified by `min` and `max` is closed (inclusive). It is possible to specify an open interval (exclusive) by prefixing the score with the character `(`. For example:\n\n```\nZRANGEBYSCORE zset (1 5\n```\n\nWill return all elements with `1 < score <= 5` while:\n\n```\nZRANGEBYSCORE zset (5 (10\n```\n\nWill return all the elements with `5 < score < 10` (5 and 10 excluded).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified score range (optionally with their scores).\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZRANGEBYSCORE myzset -inf +inf\nZRANGEBYSCORE myzset 1 2\nZRANGEBYSCORE myzset (1 2\nZRANGEBYSCORE myzset (1 (2\n```\n\n## Pattern: weighted random selection of an element\n\nNormally `ZRANGEBYSCORE` is simply used in order to get range of items where the score is the indexed integer key, however it is possible to do less obvious things with the command.\n\nFor example a common problem when implementing Markov chains and other algorithms is to select an element at random from a set, but different elements may have different weights that change how likely it is they are picked.\n\nThis is how we use this command in order to mount such an algorithm:\n\nImagine you have elements A, B and C with weights 1, 2 and 3. You compute the sum of the weights, which is 1+2+3 = 6\n\nAt this point you add all the elements into a sorted set using this algorithm:\n\n```\nSUM = ELEMENTS.TOTAL_WEIGHT // 6 in this case.\nSCORE = 0\nFOREACH ELE in ELEMENTS\n    SCORE += ELE.weight / SUM\n    ZADD KEY SCORE ELE\nEND\n```\n\nThis means that you set:\n\n```\nA to score 0.16\nB to score .5\nC to score 1\n```\n\nSince this involves approximations, in order to avoid C is set to, like, 0.998 instead of 1, we just modify the above algorithm to make sure the last score is 1 (left as an exercise for the reader...).\n\nAt this point, each time you want to get a weighted random element, just compute a random number between 0 and 1 (which is like calling `rand()` in most languages), so you can just do:\n\n    RANDOM_ELE = ZRANGEBYSCORE key RAND() +inf LIMIT 0 1\n\n## History\n\n- Starting with Redis version 2.0.0: Added the `WITHSCORES` modifier.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrangebyscore/](https://redis.io/commands/zrangebyscore/)"
- name: zrangestore
  id: zrangestore/index
  summary: 'Time complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key'
  description: "# ZRANGESTORE\n\n    ZRANGESTORE\n\nSyntax\n\n``` command-syntax\nZRANGESTORE dst src min max [BYSCORE | BYLEX] [REV] [LIMIT offset\n  count]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nThis command is like [`ZRANGE`](../zrange), but stores the result in the `<dst>` destination key.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting sorted set.\n\n## Examples\n\n``` redis-cli\nZADD srczset 1 \"one\" 2 \"two\" 3 \"three\" 4 \"four\"\nZRANGESTORE dstzset srczset 2 -1\nZRANGE dstzset 0 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrangestore/](https://redis.io/commands/zrangestore/)"
- name: zrank
  id: zrank/index
  summary: Returns the rank of member in the sorted set stored at key, with the scores ordered from low to high
  description: "# ZRANK\n\n    ZRANK\n\nSyntax\n\n``` command-syntax\nZRANK key member [WITHSCORE]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(log(N))\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nReturns the rank of `member` in the sorted set stored at `key`, with the scores ordered from low to high. The rank (or index) is 0-based, which means that the member with the lowest score has rank `0`.\n\nThe optional `WITHSCORE` argument supplements the command's reply with the score of the element returned.\n\nUse [`ZREVRANK`](../zrevrank) to get the rank of an element with the scores ordered from high to low.\n\n## Return\n\n- If `member` exists in the sorted set:\n  - using `WITHSCORE`, [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): an array containing the rank and score of `member`.\n  - without using `WITHSCORE`, [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the rank of `member`.\n- If `member` does not exist in the sorted set or `key` does not exist:\n  - using `WITHSCORE`, [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): `nil`.\n  - without using `WITHSCORE`, [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): `nil`.\n\nNote that in RESP3 null and nullarray are the same, but in RESP2 they are not.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZRANK myzset \"three\"\nZRANK myzset \"four\"\nZRANK myzset \"three\" WITHSCORE\nZRANK myzset \"four\" WITHSCORE\n```\n\n## History\n\n- Starting with Redis version 7.2.0: Added the optional `WITHSCORE` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrank/](https://redis.io/commands/zrank/)"
- name: zrem
  id: zrem/index
  summary: 'Time complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed'
  description: "# ZREM\n\n    ZREM\n\nSyntax\n\n``` command-syntax\nZREM key member [member ...]\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(M\\*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.\n\nACL categories:  \n`@write`, `@sortedset`, `@fast`,\n\nRemoves the specified members from the sorted set stored at `key`. Non existing members are ignored.\n\nAn error is returned when `key` exists and does not hold a sorted set.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers), specifically:\n\n- The number of members removed from the sorted set, not including non existing members.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREM myzset \"two\"\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n## History\n\n- Starting with Redis version 2.4.0: Accepts multiple elements.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrem/](https://redis.io/commands/zrem/)"
- name: zremrangebylex
  id: zremrangebylex/index
  summary: 'Time complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation'
  description: "# ZREMRANGEBYLEX\n\n    ZREMRANGEBYLEX\n\nSyntax\n\n``` command-syntax\nZREMRANGEBYLEX key min max\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command removes all elements in the sorted set stored at `key` between the lexicographical range specified by `min` and `max`.\n\nThe meaning of `min` and `max` are the same of the [`ZRANGEBYLEX`](../zrangebylex) command. Similarly, this command actually removes the same elements that [`ZRANGEBYLEX`](../zrangebylex) would return if called with the same `min` and `max` arguments.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements removed.\n\n## Examples\n\n``` redis-cli\nZADD myzset 0 aaaa 0 b 0 c 0 d 0 e\nZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha\nZRANGE myzset 0 -1\nZREMRANGEBYLEX myzset [alpha [omega\nZRANGE myzset 0 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zremrangebylex/](https://redis.io/commands/zremrangebylex/)"
- name: zremrangebyrank
  id: zremrangebyrank/index
  summary: 'Time complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation'
  description: "# ZREMRANGEBYRANK\n\n    ZREMRANGEBYRANK\n\nSyntax\n\n``` command-syntax\nZREMRANGEBYRANK key start stop\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nRemoves all elements in the sorted set stored at `key` with rank between `start` and `stop`. Both `start` and `stop` are `0` -based indexes with `0` being the element with the lowest score. These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. For example: `-1` is the element with the highest score, `-2` the element with the second highest score and so forth.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements removed.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREMRANGEBYRANK myzset 0 1\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zremrangebyrank/](https://redis.io/commands/zremrangebyrank/)"
- name: zremrangebyscore
  id: zremrangebyscore/index
  summary: 'Time complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation'
  description: "# ZREMRANGEBYSCORE\n\n    ZREMRANGEBYSCORE\n\nSyntax\n\n``` command-syntax\nZREMRANGEBYSCORE key min max\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nRemoves all elements in the sorted set stored at `key` with a score between `min` and `max` (inclusive).\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements removed.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREMRANGEBYSCORE myzset -inf (2\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zremrangebyscore/](https://redis.io/commands/zremrangebyscore/)"
- name: zrevrange
  id: zrevrange/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# ZREVRANGE\n\n    ZREVRANGE (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`ZRANGE`](../zrange) with the `REV` argument when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nZREVRANGE key start stop [WITHSCORES]\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nReturns the specified range of elements in the sorted set stored at `key`. The elements are considered to be ordered from the highest to the lowest score. Descending lexicographical order is used for elements with equal score.\n\nApart from the reversed ordering, `ZREVRANGE` is similar to [`ZRANGE`](../zrange).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified range (optionally with their scores).\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREVRANGE myzset 0 -1\nZREVRANGE myzset 2 3\nZREVRANGE myzset -2 -1\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrevrange/](https://redis.io/commands/zrevrange/)"
- name: zrevrangebylex
  id: zrevrangebylex/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# ZREVRANGEBYLEX\n\n    ZREVRANGEBYLEX (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`ZRANGE`](../zrange) with the `REV` and `BYLEX` arguments when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nZREVRANGEBYLEX key max min [LIMIT offset count]\n```\n\nAvailable since:  \n2.8.9\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nWhen all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at `key` with a value between `max` and `min`.\n\nApart from the reversed ordering, `ZREVRANGEBYLEX` is similar to [`ZRANGEBYLEX`](../zrangebylex).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified score range.\n\n## Examples\n\n``` redis-cli\nZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\nZREVRANGEBYLEX myzset [c -\nZREVRANGEBYLEX myzset (c -\nZREVRANGEBYLEX myzset (g [aaa\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrevrangebylex/](https://redis.io/commands/zrevrangebylex/)"
- name: zrevrangebyscore
  id: zrevrangebyscore/index
  summary: As of Redis version 6.2.0, this command is regarded as deprecated
  description: "# ZREVRANGEBYSCORE\n\n    ZREVRANGEBYSCORE (deprecated)\n\nAs of Redis version 6.2.0, this command is regarded as deprecated.\n\nIt can be replaced by [`ZRANGE`](../zrange) with the `REV` and `BYSCORE` arguments when migrating or writing new code.\n\nSyntax\n\n``` command-syntax\nZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n```\n\nAvailable since:  \n2.2.0\n\nTime complexity:  \nO(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nReturns all the elements in the sorted set at `key` with a score between `max` and `min` (including elements with score equal to `max` or `min`). In contrary to the default ordering of sorted sets, for this command the elements are considered to be ordered from high to low scores.\n\nThe elements having the same score are returned in reverse lexicographical order.\n\nApart from the reversed ordering, `ZREVRANGEBYSCORE` is similar to [`ZRANGEBYSCORE`](../zrangebyscore).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): list of elements in the specified score range (optionally with their scores).\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREVRANGEBYSCORE myzset +inf -inf\nZREVRANGEBYSCORE myzset 2 1\nZREVRANGEBYSCORE myzset 2 (1\nZREVRANGEBYSCORE myzset (2 (1\n```\n\n## History\n\n- Starting with Redis version 2.1.6: `min` and `max` can be exclusive.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrevrangebyscore/](https://redis.io/commands/zrevrangebyscore/)"
- name: zrevrank
  id: zrevrank/index
  summary: Returns the rank of member in the sorted set stored at key, with the scores ordered from high to low
  description: "# ZREVRANK\n\n    ZREVRANK\n\nSyntax\n\n``` command-syntax\nZREVRANK key member [WITHSCORE]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(log(N))\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nReturns the rank of `member` in the sorted set stored at `key`, with the scores ordered from high to low. The rank (or index) is 0-based, which means that the member with the highest score has rank `0`.\n\nThe optional `WITHSCORE` argument supplements the command's reply with the score of the element returned.\n\nUse [`ZRANK`](../zrank) to get the rank of an element with the scores ordered from low to high.\n\n## Return\n\n- If `member` exists in the sorted set:\n  - using `WITHSCORE`, [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): an array containing the rank and score of `member`.\n  - without using `WITHSCORE`, [Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the rank of `member`.\n- If `member` does not exist in the sorted set or `key` does not exist:\n  - using `WITHSCORE`, [Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): `nil`.\n  - without using `WITHSCORE`, [Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): `nil`.\n\nNote that in RESP3 null and nullarray are the same, but in RESP2 they are not.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREVRANK myzset \"one\"\nZREVRANK myzset \"four\"\nZREVRANK myzset \"three\" WITHSCORE\nZREVRANK myzset \"four\" WITHSCORE\n```\n\n## History\n\n- Starting with Redis version 7.2.0: Added the optional `WITHSCORE` argument.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zrevrank/](https://redis.io/commands/zrevrank/)"
- name: zscan
  id: zscan/index
  summary: 'Time complexity: O(1) for every call'
  description: "# ZSCAN\n\n    ZSCAN\n\nSyntax\n\n``` command-syntax\nZSCAN key cursor [MATCH pattern] [COUNT count]\n```\n\nAvailable since:  \n2.8.0\n\nTime complexity:  \nO(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nSee [`SCAN`](../scan) for `ZSCAN` documentation.\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zscan/](https://redis.io/commands/zscan/)"
- name: zscore
  id: zscore/index
  summary: Returns the score of member in the sorted set at key
  description: "# ZSCORE\n\n    ZSCORE\n\nSyntax\n\n``` command-syntax\nZSCORE key member\n```\n\nAvailable since:  \n1.2.0\n\nTime complexity:  \nO(1)\n\nACL categories:  \n`@read`, `@sortedset`, `@fast`,\n\nReturns the score of `member` in the sorted set at `key`.\n\nIf `member` does not exist in the sorted set, or `key` does not exist, `nil` is returned.\n\n## Return\n\n[Bulk string reply](https://redis.io/docs/reference/protocol-spec#resp-bulk-strings): the score of `member` (a double precision floating point number), represented as string.\n\n## Examples\n\n``` redis-cli\nZADD myzset 1 \"one\"\nZSCORE myzset \"one\"\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zscore/](https://redis.io/commands/zscore/)"
- name: zunion
  id: zunion/index
  summary: 'Time complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set'
  description: "# ZUNION\n\n    ZUNION\n\nSyntax\n\n``` command-syntax\nZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]]\n  [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]\n```\n\nAvailable since:  \n6.2.0\n\nTime complexity:  \nO(N)+O(M\\*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.\n\nACL categories:  \n`@read`, `@sortedset`, `@slow`,\n\nThis command is similar to [`ZUNIONSTORE`](../zunionstore), but instead of storing the resulting sorted set, it is returned to the client.\n\nFor a description of the `WEIGHTS` and `AGGREGATE` options, see [`ZUNIONSTORE`](../zunionstore).\n\n## Return\n\n[Array reply](https://redis.io/docs/reference/protocol-spec#resp-arrays): the result of union (optionally with their scores, in case the `WITHSCORES` option is given).\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZUNION 2 zset1 zset2\nZUNION 2 zset1 zset2 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zunion/](https://redis.io/commands/zunion/)"
- name: zunionstore
  id: zunionstore/index
  summary: 'Time complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set'
  description: "# ZUNIONSTORE\n\n    ZUNIONSTORE\n\nSyntax\n\n``` command-syntax\nZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight\n  [weight ...]] [AGGREGATE <SUM | MIN | MAX>]\n```\n\nAvailable since:  \n2.0.0\n\nTime complexity:  \nO(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.\n\nACL categories:  \n`@write`, `@sortedset`, `@slow`,\n\nComputes the union of `numkeys` sorted sets given by the specified keys, and stores the result in `destination`. It is mandatory to provide the number of input keys (`numkeys`) before passing the input keys and the other (optional) arguments.\n\nBy default, the resulting score of an element is the sum of its scores in the sorted sets where it exists.\n\nUsing the `WEIGHTS` option, it is possible to specify a multiplication factor for each input sorted set. This means that the score of every element in every input sorted set is multiplied by this factor before being passed to the aggregation function. When `WEIGHTS` is not given, the multiplication factors default to `1`.\n\nWith the `AGGREGATE` option, it is possible to specify how the results of the union are aggregated. This option defaults to `SUM`, where the score of an element is summed across the inputs where it exists. When this option is set to either `MIN` or `MAX`, the resulting set will contain the minimum or maximum score of an element across the inputs where it exists.\n\nIf `destination` already exists, it is overwritten.\n\n## Return\n\n[Integer reply](https://redis.io/docs/reference/protocol-spec#resp-integers): the number of elements in the resulting sorted set at `destination`.\n\n## Examples\n\n``` redis-cli\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3\nZRANGE out 0 -1 WITHSCORES\n```\n\n© 2006–2022 Salvatore Sanfilippo  \nLicensed under the Creative Commons Attribution-ShareAlike License 4.0.  \n[https://redis.io/commands/zunionstore/](https://redis.io/commands/zunionstore/)"
