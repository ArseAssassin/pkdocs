---
name: Twig
slug: twig~3
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '3'
copyright: |-
  © 2009–2018 by the Twig Team
  Licensed under the three clause BSD license.
  The Twig logo is © 2010–2020 Symfony
  https://twig.symfony.com/doc/3.x/index.html
homepage: https://twig.symfony.com/

---
- name: abs
  id: filters/abs
  summary: The abs filter returns the absolute value
  description: "# abs\n\nThe `abs` filter returns the absolute value.\n\n``` php\n{# number = -5 #}\n\n{{ number|abs }}\n\n{# outputs 5 #}\n```\n\nNote\n\nInternally, Twig uses the PHP [abs](https://secure.php.net/abs) function.\n\n[« Filters](index \"Filters\") \\| [batch »](batch \"batch\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/abs.html](https://twig.symfony.com/doc/3.x/filters/abs.html)"
- name: apply
  id: tags/apply
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# apply\n\nThe `apply` tag allows you to apply Twig filters on a block of template data:\n\n``` php\n{% apply upper %}\n    This text becomes uppercase\n{% endapply %}\n```\n\nYou can also chain filters and pass arguments to them:\n\n``` php\n{% apply lower|escape('html') %}\n    <strong>SOME TEXT</strong>\n{% endapply %}\n\n{# outputs \"&lt;strong&gt;some text&lt;/strong&gt;\" #}\n```\n\n[« Tags](index \"Tags\") \\| [autoescape »](autoescape \"autoescape\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/apply.html](https://twig.symfony.com/doc/3.x/tags/apply.html)"
- name: attribute
  id: functions/attribute
  summary: The resolution algorithm is the same as the one used for the . notation, except that the item can be any valid expression
  description: "# attribute\n\nThe `attribute` function can be used to access a “dynamic” attribute of a variable:\n\n``` php\n{{ attribute(object, method) }}\n{{ attribute(object, method, arguments) }}\n{{ attribute(array, item) }}\n```\n\nIn addition, the `defined` test can check for the existence of a dynamic attribute:\n\n``` php\n{{ attribute(object, method) is defined ? 'Method exists' : 'Method does not exist' }}\n```\n\nNote\n\nThe resolution algorithm is the same as the one used for the `.` notation, except that the item can be any valid expression.\n\n[« Functions](index \"Functions\") \\| [block »](block \"block\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/attribute.html](https://twig.symfony.com/doc/3.x/functions/attribute.html)"
- name: autoescape
  id: tags/autoescape
  summary: When automatic escaping is enabled everything is escaped by default except for values explicitly marked as safe
  description: "# autoescape\n\nWhether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the `autoescape` tag:\n\n``` php\n{% autoescape %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape 'html' %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block\n    using the js escaping strategy\n{% endautoescape %}\n\n{% autoescape false %}\n    Everything will be outputted as is in this block\n{% endautoescape %}\n```\n\nWhen automatic escaping is enabled everything is escaped by default except for values explicitly marked as safe. Those can be marked in the template by using the [raw](../filters/raw) filter:\n\n``` php\n{% autoescape %}\n{{ safe_value|raw }}\n{% endautoescape %}\n```\n\nFunctions returning template data (like [macros](macro) and [parent](../functions/parent)) always return safe markup.\n\nNote\n\nTwig is smart enough to not escape an already escaped value by the [escape](../filters/escape) filter.\n\nNote\n\nTwig does not escape static expressions:\n\n``` php\n{% set hello = \"<strong>Hello</strong>\" %}\n{{ hello }}\n{{ \"<strong>world</strong>\" }}\n```\n\nWill be rendered “\\<strong\\>Hello\\</strong\\> **world**”.\n\nNote\n\nThe chapter [Twig for Developers](../api) gives more information about when and how automatic escaping is applied.\n\n[« apply](apply \"apply\") \\| [block »](block \"block\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/autoescape.html](https://twig.symfony.com/doc/3.x/tags/autoescape.html)"
- name: batch
  id: filters/batch
  summary: The batch filter “batches” items by returning a list of lists with the given number of items
  description: "# batch\n\nThe `batch` filter “batches” items by returning a list of lists with the given number of items. A second parameter can be provided and used to fill in missing items:\n\n``` php\n{% set items = ['a', 'b', 'c', 'd'] %}\n\n<table>\n    {% for row in items|batch(3, 'No item') %}\n        <tr>\n            {% for column in row %}\n                <td>{{ column }}</td>\n            {% endfor %}\n        </tr>\n    {% endfor %}\n</table>\n```\n\nThe above example will be rendered as:\n\n``` php\n<table>\n    <tr>\n        <td>a</td>\n        <td>b</td>\n        <td>c</td>\n    </tr>\n    <tr>\n        <td>d</td>\n        <td>No item</td>\n        <td>No item</td>\n    </tr>\n</table>\n```\n\n## Arguments\n\n- `size`: The size of the batch; fractional numbers will be rounded up\n- `fill`: Used to fill in missing items\n- `preserve_keys`: Whether to preserve keys or not\n\n[« abs](abs \"abs\") \\| [capitalize »](capitalize \"capitalize\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/batch.html](https://twig.symfony.com/doc/3.x/filters/batch.html)"
- name: block
  id: tags/block
  summary: Blocks are used for inheritance and act as placeholders and replacements at the same time
  description: "# block\n\nBlocks are used for inheritance and act as placeholders and replacements at the same time. They are documented in detail in the documentation for the [extends](extends) tag.\n\nBlock names must consist of alphanumeric characters, and underscores. The first char can’t be a digit and dashes are not permitted.\n\nSee also\n\n[block](../functions/block), [parent](../functions/parent), [use](use), [extends](extends)\n\n[« autoescape](autoescape \"autoescape\") \\| [deprecated »](deprecated \"deprecated\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/block.html](https://twig.symfony.com/doc/3.x/tags/block.html)"
- name: block
  id: functions/block
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# block\n\nWhen a template uses inheritance and if you want to print a block multiple times, use the `block` function:\n\n``` php\n<title>{% block title %}{% endblock %}</title>\n\n<h1>{{ block('title') }}</h1>\n\n{% block body %}{% endblock %}\n```\n\nThe `block` function can also be used to display one block from another template:\n\n``` php\n{{ block(\"title\", \"common_blocks.twig\") }}\n```\n\nUse the `defined` test to check if a block exists in the context of the current template:\n\n``` php\n{% if block(\"footer\") is defined %}\n    ...\n{% endif %}\n\n{% if block(\"footer\", \"common_blocks.twig\") is defined %}\n    ...\n{% endif %}\n```\n\nSee also\n\n[extends](../tags/extends), [parent](parent)\n\n[« attribute](attribute \"attribute\") \\| [constant »](constant \"constant\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/block.html](https://twig.symfony.com/doc/3.x/functions/block.html)"
- name: capitalize
  id: filters/capitalize
  summary: The capitalize filter capitalizes a value
  description: "# capitalize\n\nThe `capitalize` filter capitalizes a value. The first character will be uppercase, all others lowercase:\n\n``` php\n{{ 'my first car'|capitalize }}\n\n{# outputs 'My first car' #}\n```\n\n[« batch](batch \"batch\") \\| [column »](column \"column\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/capitalize.html](https://twig.symfony.com/doc/3.x/filters/capitalize.html)"
- name: Coding Standards
  id: coding_standards
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# Coding Standards\n\nWhen writing Twig templates, we recommend you to follow these official coding standards:\n\n- Put one (and only one) space after the start of a delimiter (`{{`, `{%`, and `{#`) and before the end of a delimiter (`}}`, `%}`, and `#}`):\n\n  ``` php\n  {{ foo }}\n  {# comment #}\n  {% if foo %}{% endif %}\n  ```\n\n  When using the whitespace control character, do not put any spaces between it and the delimiter:\n\n  ``` php\n  {{- foo -}}\n  {#- comment -#}\n  {%- if foo -%}{%- endif -%}\n  ```\n\n- Put one (and only one) space before and after the following operators: comparison operators (`==`, `!=`, `<`, `>`, `>=`, `<=`), math operators (`+`, `-`, `/`, `*`, `%`, `//`, `**`), logic operators (`not`, `and`, `or`), `~`, `is`, `in`, and the ternary operator (`?:`):\n\n  ``` php\n  {{ 1 + 2 }}\n  {{ foo ~ bar }}\n  {{ true ? true : false }}\n  ```\n\n- Put one (and only one) space after the `:` sign in hashes and `,` in arrays and hashes:\n\n  ``` php\n  {{ [1, 2, 3] }}\n  {{ {'foo': 'bar'} }}\n  ```\n\n- Do not put any spaces after an opening parenthesis and before a closing parenthesis in expressions:\n\n  ``` php\n  {{ 1 + (2 * 3) }}\n  ```\n\n- Do not put any spaces before and after string delimiters:\n\n  ``` php\n  {{ 'foo' }}\n  {{ \"foo\" }}\n  ```\n\n- Do not put any spaces before and after the following operators: `|`, `.`, `..`, `[]`:\n\n  ``` php\n  {{ foo|upper|lower }}\n  {{ user.name }}\n  {{ user[name] }}\n  {% for i in 1..12 %}{% endfor %}\n  ```\n\n- Do not put any spaces before and after the parenthesis used for filter and function calls:\n\n  ``` php\n  {{ foo|default('foo') }}\n  {{ range(1..10) }}\n  ```\n\n- Do not put any spaces before and after the opening and the closing of arrays and hashes:\n\n  ``` php\n  {{ [1, 2, 3] }}\n  {{ {'foo': 'bar'} }}\n  ```\n\n- Use lower cased and underscored variable names:\n\n  ``` php\n  {% set foo = 'foo' %}\n  {% set foo_bar = 'foo' %}\n  ```\n\n- Indent your code inside tags (use the same indentation as the one used for the target language of the rendered template):\n\n  ``` php\n  {% block foo %}\n  {% if true %}\n          true\n  {% endif %}\n  {% endblock %}\n  ```\n\n[« Recipes](recipes \"Recipes\") \\| [Tags »](tags/index \"Tags\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/coding_standards.html](https://twig.symfony.com/doc/3.x/coding_standards.html)"
- name: column
  id: filters/column
  summary: The column filter returns the values from a single column in the input array
  description: "# column\n\nThe `column` filter returns the values from a single column in the input array.\n\n``` php\n{% set items = [{ 'fruit' : 'apple'}, {'fruit' : 'orange' }] %}\n\n{% set fruits = items|column('fruit') %}\n\n{# fruits now contains ['apple', 'orange'] #}\n```\n\nNote\n\nInternally, Twig uses the PHP [array_column](https://secure.php.net/array_column) function.\n\n## Arguments\n\n- `name`: The column name to extract\n\n[« capitalize](capitalize \"capitalize\") \\| [convert_encoding »](convert_encoding \"convert_encoding\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/column.html](https://twig.symfony.com/doc/3.x/filters/column.html)"
- name: constant
  id: functions/constant
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# constant\n\n`constant` returns the constant value for a given string:\n\n``` php\n{{ some_date|date(constant('DATE_W3C')) }}\n{{ constant('Namespace\\\\Classname::CONSTANT_NAME') }}\n```\n\nYou can read constants from object instances as well:\n\n``` php\n{{ constant('RSS', date) }}\n```\n\nUse the `defined` test to check if a constant is defined:\n\n``` php\n{% if constant('SOME_CONST') is defined %}\n    ...\n{% endif %}\n```\n\n[« block](block \"block\") \\| [cycle »](cycle \"cycle\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/constant.html](https://twig.symfony.com/doc/3.x/functions/constant.html)"
- name: constant
  id: tests/constant
  summary: constant checks if a variable has the exact same value as a constant
  description: "# constant\n\n`constant` checks if a variable has the exact same value as a constant. You can use either global constants or class constants:\n\n``` php\n{% if post.status is constant('Post::PUBLISHED') %}\n    the status attribute is exactly the same as Post::PUBLISHED\n{% endif %}\n```\n\nYou can test constants from object instances as well:\n\n``` php\n{% if post.status is constant('PUBLISHED', post) %}\n    the status attribute is exactly the same as Post::PUBLISHED\n{% endif %}\n```\n\n[« Tests](index \"Tests\") \\| [defined »](defined \"defined\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/constant.html](https://twig.symfony.com/doc/3.x/tests/constant.html)"
- name: convert_encoding
  id: filters/convert_encoding
  summary: The convert_encoding filter converts a string from one encoding to another
  description: "# convert_encoding\n\nThe `convert_encoding` filter converts a string from one encoding to another. The first argument is the expected output charset and the second one is the input charset:\n\n``` php\n{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n```\n\nNote\n\nThis filter relies on the [iconv](https://secure.php.net/iconv) extension.\n\n## Arguments\n\n- `to`: The output charset\n- `from`: The input charset\n\n[« column](column \"column\") \\| [country_name »](country_name \"country_name\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/convert_encoding.html](https://twig.symfony.com/doc/3.x/filters/convert_encoding.html)"
- name: country_name
  id: filters/country_name
  summary: By default, the filter uses the current locale
  description: "# country_name\n\nThe `country_name` filter returns the country name given its ISO-3166 two-letter code:\n\n``` php\n{# France #}\n{{ 'FR'|country_name }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# États-Unis #}\n{{ 'US'|country_name('fr') }}\n```\n\nNote\n\nThe `country_name` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n\n[« convert_encoding](convert_encoding \"convert_encoding\") \\| [currency_name »](currency_name \"currency_name\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/country_name.html](https://twig.symfony.com/doc/3.x/filters/country_name.html)"
- name: country_timezones
  id: functions/country_timezones
  summary: The country_timezones function is part of the IntlExtension which is not installed by default
  description: "# country_timezones\n\nThe `country_timezones` function returns the names of the timezones associated with a given country code:\n\n``` php\n{# Europe/Paris #}\n{{ country_timezones('FR')|join(', ') }}\n```\n\nNote\n\nThe `country_timezones` function is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n[« source](source \"source\") \\| [template_from_string »](template_from_string \"template_from_string\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/country_timezones.html](https://twig.symfony.com/doc/3.x/functions/country_timezones.html)"
- name: currency_name
  id: filters/currency_name
  summary: By default, the filter uses the current locale
  description: "# currency_name\n\nThe `currency_name` filter returns the currency name given its three-letter code:\n\n``` php\n{# Euro #}\n{{ 'EUR'|currency_name }}\n\n{# Japanese Yen #}\n{{ 'JPY'|currency_name }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# yen japonais #}\n{{ 'JPY'|currency_name('fr_FR') }}\n```\n\nNote\n\nThe `currency_name` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n\n[« country_name](country_name \"country_name\") \\| [currency_symbol »](currency_symbol \"currency_symbol\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/currency_name.html](https://twig.symfony.com/doc/3.x/filters/currency_name.html)"
- name: currency_symbol
  id: filters/currency_symbol
  summary: By default, the filter uses the current locale
  description: "# currency_symbol\n\nThe `currency_symbol` filter returns the currency symbol given its three-letter code:\n\n``` php\n{# € #}\n{{ 'EUR'|currency_symbol }}\n\n{# ¥ #}\n{{ 'JPY'|currency_symbol }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# ¥ #}\n{{ 'JPY'|currency_symbol('fr') }}\n```\n\nNote\n\nThe `currency_symbol` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n\n[« currency_name](currency_name \"currency_name\") \\| [data_uri »](data_uri \"data_uri\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/currency_symbol.html](https://twig.symfony.com/doc/3.x/filters/currency_symbol.html)"
- name: cycle
  id: functions/cycle
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# cycle\n\nThe `cycle` function cycles on an array of values:\n\n``` php\n{% set start_year = date() | date('Y') %}\n{% set end_year = start_year + 5 %}\n\n{% for year in start_year..end_year %}\n{{ cycle(['odd', 'even'], loop.index0) }}\n{% endfor %}\n```\n\nThe array can contain any number of values:\n\n``` php\n{% set fruits = ['apple', 'orange', 'citrus'] %}\n\n{% for i in 0..10 %}\n{{ cycle(fruits, i) }}\n{% endfor %}\n```\n\n## Arguments\n\n- `position`: The cycle position\n\n[« constant](constant \"constant\") \\| [date »](date \"date\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/cycle.html](https://twig.symfony.com/doc/3.x/functions/cycle.html)"
- name: data_uri
  id: filters/data_uri
  summary: The data_uri filter is part of the HtmlExtension which is not installed by default
  description: "# data_uri\n\nThe `data_uri` filter generates a URL using the data scheme as defined in RFC 2397:\n\n``` php\n{{ image_data|data_uri }}\n\n{{ source('path_to_image')|data_uri }}\n\n{# force the mime type, disable the guessing of the mime type #}\n{{ image_data|data_uri(mime=\"image/svg\") }}\n\n{# also works with plain text #}\n{{ '<b>foobar</b>'|data_uri(mime=\"text/html\") }}\n\n{# add some extra parameters #}\n{{ '<b>foobar</b>'|data_uri(mime=\"text/html\", parameters={charset: \"ascii\"}) }}\n```\n\nNote\n\nThe `data_uri` filter is part of the `HtmlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/html-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Html\\HtmlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new HtmlExtension());\n```\n\nNote\n\nThe filter does not perform any length validation on purpose (limits depends on the usage context), validation should be done before calling this filter.\n\n## Arguments\n\n- `mime`: The mime type\n- `parameters`: An array of parameters\n\n[« currency_symbol](currency_symbol \"currency_symbol\") \\| [date »](date \"date\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/data_uri.html](https://twig.symfony.com/doc/3.x/filters/data_uri.html)"
- name: date
  id: filters/date
  summary: The format specifier is the same as supported by date, except when the filtered data is of type DateInterval, when the format must conform to DateInterval::format instead
  description: "# date\n\nThe `date` filter formats a date to a given format:\n\n``` php\n{{ post.published_at|date(\"m/d/Y\") }}\n```\n\nThe format specifier is the same as supported by [date](https://secure.php.net/date), except when the filtered data is of type [DateInterval](https://secure.php.net/DateInterval), when the format must conform to [DateInterval::format](https://secure.php.net/DateInterval.format) instead.\n\nThe `date` filter accepts strings (it must be in a format supported by the [strtotime](https://secure.php.net/strtotime) function), [DateTime](https://secure.php.net/DateTime) instances, or [DateInterval](https://secure.php.net/DateInterval) instances. For instance, to display the current date, filter the word “now”:\n\n``` php\n{{ \"now\"|date(\"m/d/Y\") }}\n```\n\nTo escape words and characters in the date format use `\\\\` in front of each character:\n\n``` php\n{{ post.published_at|date(\"F jS \\\\a\\\\t g:ia\") }}\n```\n\nIf the value passed to the `date` filter is `null`, it will return the current date by default. If an empty string is desired instead of the current date, use a ternary operator:\n\n``` php\n{{ post.published_at is empty ? \"\" : post.published_at|date(\"m/d/Y\") }}\n```\n\nIf no format is provided, Twig will use the default one: `F`` ``j,`` ``Y`` ``H:i`. This default can be changed by calling the `setDateFormat()` method on the `core` extension instance. The first argument is the default format for dates and the second one is the default format for date intervals:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setDateFormat('d/m/Y', '%d days');\n```\n\n## Timezone\n\nBy default, the date is displayed by applying the default timezone (the one specified in php.ini or declared in Twig – see below), but you can override it by explicitly specifying a timezone:\n\n``` php\n{{ post.published_at|date(\"m/d/Y\", \"Europe/Paris\") }}\n```\n\nIf the date is already a DateTime object, and if you want to keep its current timezone, pass `false` as the timezone value:\n\n``` php\n{{ post.published_at|date(\"m/d/Y\", false) }}\n```\n\nThe default timezone can also be set globally by calling `setTimezone()`:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setTimezone('Europe/Paris');\n```\n\n## Arguments\n\n- `format`: The date format\n- `timezone`: The date timezone\n\n[« data_uri](data_uri \"data_uri\") \\| [date_modify »](date_modify \"date_modify\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/date.html](https://twig.symfony.com/doc/3.x/filters/date.html)"
- name: date
  id: functions/date
  summary: The argument must be in one of PHP’s supported date and time formats
  description: "# date\n\nConverts an argument to a date to allow date comparison:\n\n``` php\n{% if date(user.created_at) < date('-2days') %}\n    {# do something #}\n{% endif %}\n```\n\nThe argument must be in one of PHP’s supported [date and time formats](https://secure.php.net/manual/en/datetime.formats.php).\n\nYou can pass a timezone as the second argument:\n\n``` php\n{% if date(user.created_at) < date('-2days', 'Europe/Paris') %}\n    {# do something #}\n{% endif %}\n```\n\nIf no argument is passed, the function returns the current date:\n\n``` php\n{% if date(user.created_at) < date() %}\n    {# always! #}\n{% endif %}\n```\n\nNote\n\nYou can set the default timezone globally by calling `setTimezone()` on the `core` extension instance:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setTimezone('Europe/Paris');\n```\n\n## Arguments\n\n- `date`: The date\n- `timezone`: The timezone\n\n[« cycle](cycle \"cycle\") \\| [dump »](dump \"dump\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/date.html](https://twig.symfony.com/doc/3.x/functions/date.html)"
- name: date_modify
  id: filters/date_modify
  summary: The date_modify filter accepts strings (it must be in a format supported by the strtotime function) or DateTime instances
  description: "# date_modify\n\nThe `date_modify` filter modifies a date with a given modifier string:\n\n``` php\n{{ post.published_at|date_modify(\"+1 day\")|date(\"m/d/Y\") }}\n```\n\nThe `date_modify` filter accepts strings (it must be in a format supported by the [strtotime](https://secure.php.net/strtotime) function) or [DateTime](https://secure.php.net/DateTime) instances. You can combine it with the [date](date) filter for formatting.\n\n## Arguments\n\n- `modifier`: The modifier\n\n[« date](date \"date\") \\| [default »](default \"default\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/date_modify.html](https://twig.symfony.com/doc/3.x/filters/date_modify.html)"
- name: default
  id: filters/default
  summary: Using the default filter on a boolean variable might trigger unexpected behavior, as false is treated as an empty value
  description: "# default\n\nThe `default` filter returns the passed default value if the value is undefined or empty, otherwise the value of the variable:\n\n``` php\n{{ var|default('var is not defined') }}\n\n{{ var.foo|default('foo item on var is not defined') }}\n\n{{ var['foo']|default('foo item on var is not defined') }}\n\n{{ ''|default('passed var is empty')  }}\n```\n\nWhen using the `default` filter on an expression that uses variables in some method calls, be sure to use the `default` filter whenever a variable can be undefined:\n\n``` php\n{{ var.method(foo|default('foo'))|default('foo') }}\n```\n\nUsing the `default` filter on a boolean variable might trigger unexpected behavior, as `false` is treated as an empty value. Consider using `??` instead:\n\n``` php\n{% set foo = false %}\n{{ foo|default(true) }}{# true #}\n{{ foo ?? true }}{# false #}\n```\n\nNote\n\nRead the documentation for the [defined](../tests/defined) and [empty](../tests/empty) tests to learn more about their semantics.\n\n## Arguments\n\n- `default`: The default value\n\n[« date_modify](date_modify \"date_modify\") \\| [escape »](escape \"escape\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/default.html](https://twig.symfony.com/doc/3.x/filters/default.html)"
- name: defined
  id: tests/defined
  summary: defined checks if a variable is defined in the current context
  description: "# defined\n\n`defined` checks if a variable is defined in the current context. This is very useful if you use the `strict_variables` option:\n\n``` php\n{# defined works with variable names #}\n{% if foo is defined %}\n    ...\n{% endif %}\n\n{# and attributes on variables names #}\n{% if foo.bar is defined %}\n    ...\n{% endif %}\n\n{% if foo['bar'] is defined %}\n    ...\n{% endif %}\n```\n\nWhen using the `defined` test on an expression that uses variables in some method calls, be sure that they are all defined first:\n\n``` php\n{% if var is defined and foo.method(var) is defined %}\n    ...\n{% endif %}\n```\n\n[« constant](constant \"constant\") \\| [divisible by »](divisibleby \"divisible by\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/defined.html](https://twig.symfony.com/doc/3.x/tests/defined.html)"
- name: deprecated
  id: tags/deprecated
  summary: Note that by default, the deprecation notices are silenced and never displayed nor logged
  description: "# deprecated\n\nTwig generates a deprecation notice (via a call to the `trigger_error()` PHP function) where the `deprecated` tag is used in a template:\n\n``` php\n{# base.twig #}\n{% deprecated 'The \"base.twig\" template is deprecated, use \"layout.twig\" instead.' %}\n{% extends 'layout.twig' %}\n```\n\nAlso you can deprecate a block in the following way:\n\n``` php\n{% block hey %}\n{% deprecated 'The \"hey\" block is deprecated, use \"greet\" instead.' %}\n{{ block('greet') }}\n{% endblock %}\n\n{% block greet %}\n    Hey you!\n{% endblock %}\n```\n\nNote that by default, the deprecation notices are silenced and never displayed nor logged. See [Displaying Deprecation Notices](../recipes#deprecation-notices) to learn how to handle them.\n\n[« block](block \"block\") \\| [do »](do \"do\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/deprecated.html](https://twig.symfony.com/doc/3.x/tags/deprecated.html)"
- name: divisible by
  id: tests/divisibleby
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# divisible by\n\n`divisible`` ``by` checks if a variable is divisible by a number:\n\n``` php\n{% if loop.index is divisible by(3) %}\n    ...\n{% endif %}\n```\n\n[« defined](defined \"defined\") \\| [empty »](empty \"empty\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/divisibleby.html](https://twig.symfony.com/doc/3.x/tests/divisibleby.html)"
- name: do
  id: tags/do
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# do\n\nThe `do` tag works exactly like the regular variable expression (`{{`` ``...`` ``}}`) just that it doesn’t print anything:\n\n``` php\n{% do 1 + 2 %}\n```\n\n[« deprecated](deprecated \"deprecated\") \\| [embed »](embed \"embed\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/do.html](https://twig.symfony.com/doc/3.x/tags/do.html)"
- name: dump
  id: functions/dump
  summary: The dump function dumps information about a template variable
  description: "# dump\n\nThe `dump` function dumps information about a template variable. This is mostly useful to debug a template that does not behave as expected by introspecting its variables:\n\n``` php\n{{ dump(user) }}\n```\n\nNote\n\nThe `dump` function is not available by default. You must add the `\\Twig\\Extension\\DebugExtension` extension explicitly when creating your Twig environment:\n\n``` php\n$twig = new \\Twig\\Environment($loader, [\n    'debug' => true,\n    // ...\n]);\n$twig->addExtension(new \\Twig\\Extension\\DebugExtension());\n```\n\nEven when enabled, the `dump` function won’t display anything if the `debug` option on the environment is not enabled (to avoid leaking debug information on a production server).\n\nIn an HTML context, wrap the output with a `pre` tag to make it easier to read:\n\n``` php\n<pre>\n    {{ dump(user) }}\n</pre>\n```\n\nTip\n\nUsing a `pre` tag is not needed when [XDebug](https://xdebug.org/docs/display) is enabled and `html_errors` is `on`; as a bonus, the output is also nicer with XDebug enabled.\n\nYou can debug several variables by passing them as additional arguments:\n\n``` php\n{{ dump(user, categories) }}\n```\n\nIf you don’t pass any value, all variables from the current context are dumped:\n\n``` php\n{{ dump() }}\n```\n\nNote\n\nInternally, Twig uses the PHP [var_dump](https://secure.php.net/var_dump) function.\n\n## Arguments\n\n- `context`: The context to dump\n\n[« date](date \"date\") \\| [html_classes »](html_classes \"html_classes\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/dump.html](https://twig.symfony.com/doc/3.x/functions/dump.html)"
- name: embed
  id: tags/embed
  summary: The embed tag combines the behavior of include and extends
  description: "# embed\n\nThe `embed` tag combines the behavior of [include](include) and [extends](extends). It allows you to include another template’s contents, just like `include` does. But it also allows you to override any block defined inside the included template, like when extending a template.\n\nThink of an embedded template as a “micro layout skeleton”.\n\n``` php\n{% embed \"teasers_skeleton.twig\" %}\n{# These blocks are defined in \"teasers_skeleton.twig\" #}\n{# and we override them right here:                    #}\n{% block left_teaser %}\n        Some content for the left teaser box\n{% endblock %}\n{% block right_teaser %}\n        Some content for the right teaser box\n{% endblock %}\n{% endembed %}\n```\n\nThe `embed` tag takes the idea of template inheritance to the level of content fragments. While template inheritance allows for “document skeletons”, which are filled with life by child templates, the `embed` tag allows you to create “skeletons” for smaller units of content and re-use and fill them anywhere you like.\n\nSince the use case may not be obvious, let’s look at a simplified example. Imagine a base template shared by multiple HTML pages, defining a single block named “content”:\n\n``` php\n┌─── page layout ─────────────────────┐\n│                                     │\n│           ┌── block \"content\" ──┐   │\n│           │                     │   │\n│           │                     │   │\n│           │ (child template to  │   │\n│           │  put content here)  │   │\n│           │                     │   │\n│           │                     │   │\n│           └─────────────────────┘   │\n│                                     │\n└─────────────────────────────────────┘\n```\n\nSome pages (“foo” and “bar”) share the same content structure - two vertically stacked boxes:\n\n``` php\n┌─── page layout ─────────────────────┐\n│                                     │\n│           ┌── block \"content\" ──┐   │\n│           │ ┌─ block \"top\" ───┐ │   │\n│           │ │                 │ │   │\n│           │ └─────────────────┘ │   │\n│           │ ┌─ block \"bottom\" ┐ │   │\n│           │ │                 │ │   │\n│           │ └─────────────────┘ │   │\n│           └─────────────────────┘   │\n│                                     │\n└─────────────────────────────────────┘\n```\n\nWhile other pages (“boom” and “baz”) share a different content structure - two boxes side by side:\n\n``` php\n┌─── page layout ─────────────────────┐\n│                                     │\n│           ┌── block \"content\" ──┐   │\n│           │                     │   │\n│           │ ┌ block ┐ ┌ block ┐ │   │\n│           │ │\"left\" │ │\"right\"│ │   │\n│           │ │       │ │       │ │   │\n│           │ │       │ │       │ │   │\n│           │ └───────┘ └───────┘ │   │\n│           └─────────────────────┘   │\n│                                     │\n└─────────────────────────────────────┘\n```\n\nWithout the `embed` tag, you have two ways to design your templates:\n\n- Create two “intermediate” base templates that extend the master layout template: one with vertically stacked boxes to be used by the “foo” and “bar” pages and another one with side-by-side boxes for the “boom” and “baz” pages.\n- Embed the markup for the top/bottom and left/right boxes into each page template directly.\n\nThese two solutions do not scale well because they each have a major drawback:\n\n- The first solution may indeed work for this simplified example. But imagine we add a sidebar, which may again contain different, recurring structures of content. Now we would need to create intermediate base templates for all occurring combinations of content structure and sidebar structure… and so on.\n- The second solution involves duplication of common code with all its negative consequences: any change involves finding and editing all affected copies of the structure, correctness has to be verified for each copy, copies may go out of sync by careless modifications etc.\n\nIn such a situation, the `embed` tag comes in handy. The common layout code can live in a single base template, and the two different content structures, let’s call them “micro layouts” go into separate templates which are embedded as necessary:\n\nPage template `foo.twig`:\n\n``` php\n{% extends \"layout_skeleton.twig\" %}\n\n{% block content %}\n{% embed \"vertical_boxes_skeleton.twig\" %}\n{% block top %}\n            Some content for the top box\n{% endblock %}\n\n{% block bottom %}\n            Some content for the bottom box\n{% endblock %}\n{% endembed %}\n{% endblock %}\n```\n\nAnd here is the code for `vertical_boxes_skeleton.twig`:\n\n``` php\n<div class=\"top_box\">\n    {% block top %}\n        Top box default content\n    {% endblock %}\n</div>\n\n<div class=\"bottom_box\">\n    {% block bottom %}\n        Bottom box default content\n    {% endblock %}\n</div>\n```\n\nThe goal of the `vertical_boxes_skeleton.twig` template being to factor out the HTML markup for the boxes.\n\nThe `embed` tag takes the exact same arguments as the `include` tag:\n\n``` php\n{% embed \"base\" with {'foo': 'bar'} %}\n    ...\n{% endembed %}\n\n{% embed \"base\" with {'foo': 'bar'} only %}\n    ...\n{% endembed %}\n\n{% embed \"base\" ignore missing %}\n    ...\n{% endembed %}\n```\n\nWarning\n\nAs embedded templates do not have “names”, auto-escaping strategies based on the template name won’t work as expected if you change the context (for instance, if you embed a CSS/JavaScript template into an HTML one). In that case, explicitly set the default auto-escaping strategy with the `autoescape` tag.\n\nSee also\n\n[include](include)\n\n[« do](do \"do\") \\| [extends »](extends \"extends\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/embed.html](https://twig.symfony.com/doc/3.x/tags/embed.html)"
- name: empty
  id: tests/empty
  summary: empty checks if a variable is an empty string, an empty array, an empty hash, exactly false, or exactly null
  description: "# empty\n\n`empty` checks if a variable is an empty string, an empty array, an empty hash, exactly `false`, or exactly `null`.\n\nFor objects that implement the `Countable` interface, `empty` will check the return value of the `count()` method.\n\nFor objects that implement the `__toString()` magic method (and not `Countable`), it will check if an empty string is returned.\n\n``` php\n{% if foo is empty %}\n    ...\n{% endif %}\n```\n\n[« divisible by](divisibleby \"divisible by\") \\| [even »](even \"even\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/empty.html](https://twig.symfony.com/doc/3.x/tests/empty.html)"
- name: escape
  id: filters/escape
  summary: The escape filter escapes a string using strategies that depend on the context
  description: "# escape\n\nThe `escape` filter escapes a string using strategies that depend on the context.\n\nBy default, it uses the HTML escaping strategy:\n\n``` php\n<p>\n    {{ user.username|escape }}\n</p>\n```\n\nFor convenience, the `e` filter is defined as an alias:\n\n``` php\n<p>\n    {{ user.username|e }}\n</p>\n```\n\nThe `escape` filter can also be used in other contexts than HTML thanks to an optional argument which defines the escaping strategy to use:\n\n``` php\n{{ user.username|e }}\n{# is equivalent to #}\n{{ user.username|e('html') }}\n```\n\nAnd here is how to escape variables included in JavaScript code:\n\n``` php\n{{ user.username|escape('js') }}\n{{ user.username|e('js') }}\n```\n\nThe `escape` filter supports the following escaping strategies for HTML documents:\n\n- `html`: escapes a string for the **HTML body** context.\n- `js`: escapes a string for the **JavaScript** context.\n- `css`: escapes a string for the **CSS** context. CSS escaping can be applied to any string being inserted into CSS and escapes everything except alphanumerics.\n- `url`: escapes a string for the **URI or parameter** contexts. This should not be used to escape an entire URI; only a subcomponent being inserted.\n- `html_attr`: escapes a string for the **HTML attribute** context.\n\nNote that doing contextual escaping in HTML documents is hard and choosing the right escaping strategy depends on a lot of factors. Please, read related documentation like [the OWASP prevention cheat sheet](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md) to learn more about this topic.\n\nNote\n\nInternally, `escape` uses the PHP native [htmlspecialchars](https://secure.php.net/htmlspecialchars) function for the HTML escaping strategy.\n\nCaution\n\nWhen using automatic escaping, Twig tries to not double-escape a variable when the automatic escaping strategy is the same as the one applied by the escape filter; but that does not work when using a variable as the escaping strategy:\n\n``` php\n{% set strategy = 'html' %}\n\n{% autoescape 'html' %}\n{{ var|escape('html') }}{# won't be double-escaped #}\n{{ var|escape(strategy) }}{# will be double-escaped #}\n{% endautoescape %}\n```\n\nWhen using a variable as the escaping strategy, you should disable automatic escaping:\n\n``` php\n{% set strategy = 'html' %}\n\n{% autoescape 'html' %}\n{{ var|escape(strategy)|raw }}{# won't be double-escaped #}\n{% endautoescape %}\n```\n\n## Custom Escapers\n\nYou can define custom escapers by calling the `setEscaper()` method on the escaper extension instance. The first argument is the escaper name (to be used in the `escape` call) and the second one must be a valid PHP callable:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\EscaperExtension::class)->setEscaper('csv', 'csv_escaper');\n```\n\nWhen called by Twig, the callable receives the Twig environment instance, the string to escape, and the charset.\n\nNote\n\nBuilt-in escapers cannot be overridden mainly because they should be considered as the final implementation and also for better performance.\n\n## Arguments\n\n- `strategy`: The escaping strategy\n- `charset`: The string charset\n\n[« default](default \"default\") \\| [filter »](filter \"filter\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/escape.html](https://twig.symfony.com/doc/3.x/filters/escape.html)"
- name: even
  id: tests/even
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# even\n\n`even` returns `true` if the given number is even:\n\n``` php\n{{ var is even }}\n```\n\nSee also\n\n[odd](odd)\n\n[« empty](empty \"empty\") \\| [iterable »](iterable \"iterable\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/even.html](https://twig.symfony.com/doc/3.x/tests/even.html)"
- name: Extending Twig
  id: advanced
  summary: Twig can be extended in many ways; you can add extra tags, filters, tests, operators, global variables, and functions
  description: "# Extending Twig\n\nTwig can be extended in many ways; you can add extra tags, filters, tests, operators, global variables, and functions. You can even extend the parser itself with node visitors.\n\nNote\n\nThe first section of this chapter describes how to extend Twig. If you want to reuse your changes in different projects or if you want to share them with others, you should then create an extension as described in the following section.\n\nCaution\n\nWhen extending Twig without creating an extension, Twig won’t be able to recompile your templates when the PHP code is updated. To see your changes in real-time, either disable template caching or package your code into an extension (see the next section of this chapter).\n\nBefore extending Twig, you must understand the differences between all the different possible extension points and when to use them.\n\nFirst, remember that Twig has two main language constructs:\n\n- `{{`` ``}}`: used to print the result of an expression evaluation;\n- `{%`` ``%}`: used to execute statements.\n\nTo understand why Twig exposes so many extension points, let’s see how to implement a *Lorem ipsum* generator (it needs to know the number of words to generate).\n\nYou can use a `lipsum` *tag*:\n\n``` php\n{% lipsum 40 %}\n```\n\nThat works, but using a tag for `lipsum` is not a good idea for at least three main reasons:\n\n- `lipsum` is not a language construct;\n\n- The tag outputs something;\n\n- The tag is not flexible as you cannot use it in an expression:\n\n  ``` php\n  {{ 'some text' ~ {% lipsum 40 %} ~ 'some more text' }}\n  ```\n\nIn fact, you rarely need to create tags; and that’s good news because tags are the most complex extension point.\n\nNow, let’s use a `lipsum` *filter*:\n\n``` php\n{{ 40|lipsum }}\n```\n\nAgain, it works. But a filter should transform the passed value to something else. Here, we use the value to indicate the number of words to generate (so, `40` is an argument of the filter, not the value we want to transform).\n\nNext, let’s use a `lipsum` *function*:\n\n``` php\n{{ lipsum(40) }}\n```\n\nHere we go. For this specific example, the creation of a function is the extension point to use. And you can use it anywhere an expression is accepted:\n\n``` php\n{{ 'some text' ~ lipsum(40) ~ 'some more text' }}\n\n{% set lipsum = lipsum(40) %}\n```\n\nLastly, you can also use a *global* object with a method able to generate lorem ipsum text:\n\n``` php\n{{ text.lipsum(40) }}\n```\n\nAs a rule of thumb, use functions for frequently used features and global objects for everything else.\n\nKeep in mind the following when you want to extend Twig:\n\n| What?      | Implementation difficulty? | How often? | When?                  |\n|------------|----------------------------|------------|------------------------|\n| *macro*    | simple                     | frequent   | Content generation     |\n| *global*   | simple                     | frequent   | Helper object          |\n| *function* | simple                     | frequent   | Content generation     |\n| *filter*   | simple                     | frequent   | Value transformation   |\n| *tag*      | complex                    | rare       | DSL language construct |\n| *test*     | simple                     | rare       | Boolean decision       |\n| *operator* | simple                     | rare       | Values transformation  |\n\n## Globals\n\nA global variable is like any other template variable, except that it’s available in all templates and macros:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->addGlobal('text', new Text());\n```\n\nYou can then use the `text` variable anywhere in a template:\n\n``` php\n{{ text.lipsum(40) }}\n```\n\n## Filters\n\nCreating a filter consists of associating a name with a PHP callable:\n\n``` php\n// an anonymous function\n$filter = new \\Twig\\TwigFilter('rot13', function ($string) {\n    return str_rot13($string);\n});\n\n// or a simple PHP function\n$filter = new \\Twig\\TwigFilter('rot13', 'str_rot13');\n\n// or a class static method\n$filter = new \\Twig\\TwigFilter('rot13', ['SomeClass', 'rot13Filter']);\n$filter = new \\Twig\\TwigFilter('rot13', 'SomeClass::rot13Filter');\n\n// or a class method\n$filter = new \\Twig\\TwigFilter('rot13', [$this, 'rot13Filter']);\n// the one below needs a runtime implementation (see below for more information)\n$filter = new \\Twig\\TwigFilter('rot13', ['SomeClass', 'rot13Filter']);\n```\n\nThe first argument passed to the `\\Twig\\TwigFilter` constructor is the name of the filter you will use in templates and the second one is the PHP callable to associate with it.\n\nThen, add the filter to the Twig environment:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->addFilter($filter);\n```\n\nAnd here is how to use it in a template:\n\n``` php\n{{ 'Twig'|rot13 }}\n\n{# will output Gjvt #}\n```\n\nWhen called by Twig, the PHP callable receives the left side of the filter (before the pipe `|`) as the first argument and the extra arguments passed to the filter (within parentheses `()`) as extra arguments.\n\nFor instance, the following code:\n\n``` php\n{{ 'TWIG'|lower }}\n{{ now|date('d/m/Y') }}\n```\n\nis compiled to something like the following:\n\n``` php\n<?php echo strtolower('TWIG') ?>\n<?php echo twig_date_format_filter($now, 'd/m/Y') ?>\n```\n\nThe `\\Twig\\TwigFilter` class takes an array of options as its last argument:\n\n``` php\n$filter = new \\Twig\\TwigFilter('rot13', 'str_rot13', $options);\n```\n\n### Environment-aware Filters\n\nIf you want to access the current environment instance in your filter, set the `needs_environment` option to `true`; Twig will pass the current environment as the first argument to the filter call:\n\n``` php\n$filter = new \\Twig\\TwigFilter('rot13', function (\\Twig\\Environment $env, $string) {\n    // get the current charset for instance\n    $charset = $env->getCharset();\n\n    return str_rot13($string);\n}, ['needs_environment' => true]);\n```\n\n### Context-aware Filters\n\nIf you want to access the current context in your filter, set the `needs_context` option to `true`; Twig will pass the current context as the first argument to the filter call (or the second one if `needs_environment` is also set to `true`):\n\n``` php\n$filter = new \\Twig\\TwigFilter('rot13', function ($context, $string) {\n    // ...\n}, ['needs_context' => true]);\n\n$filter = new \\Twig\\TwigFilter('rot13', function (\\Twig\\Environment $env, $context, $string) {\n    // ...\n}, ['needs_context' => true, 'needs_environment' => true]);\n```\n\n### Automatic Escaping\n\nIf automatic escaping is enabled, the output of the filter may be escaped before printing. If your filter acts as an escaper (or explicitly outputs HTML or JavaScript code), you will want the raw output to be printed. In such a case, set the `is_safe` option:\n\n``` php\n$filter = new \\Twig\\TwigFilter('nl2br', 'nl2br', ['is_safe' => ['html']]);\n```\n\nSome filters may need to work on input that is already escaped or safe, for example when adding (safe) HTML tags to originally unsafe output. In such a case, set the `pre_escape` option to escape the input data before it is run through your filter:\n\n``` php\n$filter = new \\Twig\\TwigFilter('somefilter', 'somefilter', ['pre_escape' => 'html', 'is_safe' => ['html']]);\n```\n\n### Variadic Filters\n\nWhen a filter should accept an arbitrary number of arguments, set the `is_variadic` option to `true`; Twig will pass the extra arguments as the last argument to the filter call as an array:\n\n``` php\n$filter = new \\Twig\\TwigFilter('thumbnail', function ($file, array $options = []) {\n    // ...\n}, ['is_variadic' => true]);\n```\n\nBe warned that [named arguments](templates#named-arguments) passed to a variadic filter cannot be checked for validity as they will automatically end up in the option array.\n\n### Dynamic Filters\n\nA filter name containing the special `*` character is a dynamic filter and the `*` part will match any string:\n\n``` php\n$filter = new \\Twig\\TwigFilter('*_path', function ($name, $arguments) {\n    // ...\n});\n```\n\nThe following filters are matched by the above defined dynamic filter:\n\n- `product_path`\n- `category_path`\n\nA dynamic filter can define more than one dynamic parts:\n\n``` php\n$filter = new \\Twig\\TwigFilter('*_path_*', function ($name, $suffix, $arguments) {\n    // ...\n});\n```\n\nThe filter receives all dynamic part values before the normal filter arguments, but after the environment and the context. For instance, a call to `'foo'|a_path_b()` will result in the following arguments to be passed to the filter: `('a',`` ``'b',`` ``'foo')`.\n\n### Deprecated Filters\n\nYou can mark a filter as being deprecated by setting the `deprecated` option to `true`. You can also give an alternative filter that replaces the deprecated one when that makes sense:\n\n``` php\n$filter = new \\Twig\\TwigFilter('obsolete', function () {\n    // ...\n}, ['deprecated' => true, 'alternative' => 'new_one']);\n```\n\nWhen a filter is deprecated, Twig emits a deprecation notice when compiling a template using it. See [Displaying Deprecation Notices](recipes#deprecation-notices) for more information.\n\n## Functions\n\nFunctions are defined in the exact same way as filters, but you need to create an instance of `\\Twig\\TwigFunction`:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$function = new \\Twig\\TwigFunction('function_name', function () {\n    // ...\n});\n$twig->addFunction($function);\n```\n\nFunctions support the same features as filters, except for the `pre_escape` and `preserves_safety` options.\n\n## Tests\n\nTests are defined in the exact same way as filters and functions, but you need to create an instance of `\\Twig\\TwigTest`:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$test = new \\Twig\\TwigTest('test_name', function () {\n    // ...\n});\n$twig->addTest($test);\n```\n\nTests allow you to create custom application specific logic for evaluating boolean conditions. As a simple example, let’s create a Twig test that checks if objects are ‘red’:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$test = new \\Twig\\TwigTest('red', function ($value) {\n    if (isset($value->color) && $value->color == 'red') {\n        return true;\n    }\n    if (isset($value->paint) && $value->paint == 'red') {\n        return true;\n    }\n    return false;\n});\n$twig->addTest($test);\n```\n\nTest functions must always return `true`/`false`.\n\nWhen creating tests you can use the `node_class` option to provide custom test compilation. This is useful if your test can be compiled into PHP primitives. This is used by many of the tests built into Twig:\n\n``` php\nnamespace App;\n\nuse Twig\\Environment;\nuse Twig\\Node\\Expression\\TestExpression;\nuse Twig\\TwigTest;\n\n$twig = new Environment($loader);\n$test = new TwigTest(\n    'odd',\n    null,\n    ['node_class' => OddTestExpression::class]);\n$twig->addTest($test);\n\nclass OddTestExpression extends TestExpression\n{\n    public function compile(\\Twig\\Compiler $compiler)\n    {\n        $compiler\n            ->raw('(')\n            ->subcompile($this->getNode('node'))\n            ->raw(' % 2 != 0')\n            ->raw(')')\n        ;\n    }\n}\n```\n\nThe above example shows how you can create tests that use a node class. The node class has access to one sub-node called `node`. This sub-node contains the value that is being tested. When the `odd` filter is used in code such as:\n\n``` php\n{% if my_value is odd %}\n```\n\nThe `node` sub-node will contain an expression of `my_value`. Node-based tests also have access to the `arguments` node. This node will contain the various other arguments that have been provided to your test.\n\nIf you want to pass a variable number of positional or named arguments to the test, set the `is_variadic` option to `true`. Tests support dynamic names (see dynamic filters for the syntax).\n\n## Tags\n\nOne of the most exciting features of a template engine like Twig is the possibility to define new **language constructs**. This is also the most complex feature as you need to understand how Twig’s internals work.\n\nMost of the time though, a tag is not needed:\n\n- If your tag generates some output, use a **function** instead.\n\n- If your tag modifies some content and returns it, use a **filter** instead.\n\n  For instance, if you want to create a tag that converts a Markdown formatted text to HTML, create a `markdown` filter instead:\n\n  ``` php\n  {{ '**markdown** text'|markdown }}\n  ```\n\n  If you want use this filter on large amounts of text, wrap it with the [apply](tags/apply) tag:\n\n  ``` php\n  {% apply markdown %}\n  Title\n  =====\n\n  Much better than creating a tag as you can **compose** filters.\n  {% endapply %}\n  ```\n\n- If your tag does not output anything, but only exists because of a side effect, create a **function** that returns nothing and call it via the [filter](tags/do) tag.\n\n  For instance, if you want to create a tag that logs text, create a `log` function instead and call it via the [do](tags/do) tag:\n\n  ``` php\n  {% do log('Log some things') %}\n  ```\n\nIf you still want to create a tag for a new language construct, great!\n\nLet’s create a `set` tag that allows the definition of simple variables from within a template. The tag can be used like follows:\n\n``` php\n{% set name = \"value\" %}\n\n{{ name }}\n\n{# should output value #}\n```\n\nNote\n\nThe `set` tag is part of the Core extension and as such is always available. The built-in version is slightly more powerful and supports multiple assignments by default.\n\nThree steps are needed to define a new tag:\n\n- Defining a Token Parser class (responsible for parsing the template code);\n- Defining a Node class (responsible for converting the parsed code to PHP);\n- Registering the tag.\n\n### Registering a new tag\n\nAdd a tag by calling the `addTokenParser` method on the `\\Twig\\Environment` instance:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->addTokenParser(new Project_Set_TokenParser());\n```\n\n### Defining a Token Parser\n\nNow, let’s see the actual code of this class:\n\n``` php\nclass Project_Set_TokenParser extends \\Twig\\TokenParser\\AbstractTokenParser\n{\n    public function parse(\\Twig\\Token $token)\n    {\n        $parser = $this->parser;\n        $stream = $parser->getStream();\n\n        $name = $stream->expect(\\Twig\\Token::NAME_TYPE)->getValue();\n        $stream->expect(\\Twig\\Token::OPERATOR_TYPE, '=');\n        $value = $parser->getExpressionParser()->parseExpression();\n        $stream->expect(\\Twig\\Token::BLOCK_END_TYPE);\n\n        return new Project_Set_Node($name, $value, $token->getLine(), $this->getTag());\n    }\n\n    public function getTag()\n    {\n        return 'set';\n    }\n}\n```\n\nThe `getTag()` method must return the tag we want to parse, here `set`.\n\nThe `parse()` method is invoked whenever the parser encounters a `set` tag. It should return a `\\Twig\\Node\\Node` instance that represents the node (the `Project_Set_Node` calls creating is explained in the next section).\n\nThe parsing process is simplified thanks to a bunch of methods you can call from the token stream (`$this->parser->getStream()`):\n\n- `getCurrent()`: Gets the current token in the stream.\n- `next()`: Moves to the next token in the stream, *but returns the old one*.\n- `test($type)`, `test($value)` or `test($type,`` ``$value)`: Determines whether the current token is of a particular type or value (or both). The value may be an array of several possible values.\n- `expect($type[,`` ``$value[,`` ``$message]])`: If the current token isn’t of the given type/value a syntax error is thrown. Otherwise, if the type and value are correct, the token is returned and the stream moves to the next token.\n- `look()`: Looks at the next token without consuming it.\n\nParsing expressions is done by calling the `parseExpression()` like we did for the `set` tag.\n\nTip\n\nReading the existing `TokenParser` classes is the best way to learn all the nitty-gritty details of the parsing process.\n\n### Defining a Node\n\nThe `Project_Set_Node` class itself is quite short:\n\n``` php\nclass Project_Set_Node extends \\Twig\\Node\\Node\n{\n    public function __construct($name, \\Twig\\Node\\Expression\\AbstractExpression $value, $line, $tag = null)\n    {\n        parent::__construct(['value' => $value], ['name' => $name], $line, $tag);\n    }\n\n    public function compile(\\Twig\\Compiler $compiler)\n    {\n        $compiler\n            ->addDebugInfo($this)\n            ->write('$context[\\''.$this->getAttribute('name').'\\'] = ')\n            ->subcompile($this->getNode('value'))\n            ->raw(\";\\n\")\n        ;\n    }\n}\n```\n\nThe compiler implements a fluid interface and provides methods that helps the developer generate beautiful and readable PHP code:\n\n- `subcompile()`: Compiles a node.\n- `raw()`: Writes the given string as is.\n- `write()`: Writes the given string by adding indentation at the beginning of each line.\n- `string()`: Writes a quoted string.\n- `repr()`: Writes a PHP representation of a given value (see `\\Twig\\Node\\ForNode` for a usage example).\n- `addDebugInfo()`: Adds the line of the original template file related to the current node as a comment.\n- `indent()`: Indents the generated code (see `\\Twig\\Node\\BlockNode` for a usage example).\n- `outdent()`: Outdents the generated code (see `\\Twig\\Node\\BlockNode` for a usage example).\n\n## Creating an Extension\n\nThe main motivation for writing an extension is to move often used code into a reusable class like adding support for internationalization. An extension can define tags, filters, tests, operators, functions, and node visitors.\n\nMost of the time, it is useful to create a single extension for your project, to host all the specific tags and filters you want to add to Twig.\n\nTip\n\nWhen packaging your code into an extension, Twig is smart enough to recompile your templates whenever you make a change to it (when `auto_reload` is enabled).\n\nAn extension is a class that implements the following interface:\n\n``` php\ninterface \\Twig\\Extension\\ExtensionInterface\n{\n    /**\n     * Returns the token parser instances to add to the existing list.\n     *\n     * @return \\Twig\\TokenParser\\TokenParserInterface[]\n     */\n    public function getTokenParsers();\n\n    /**\n     * Returns the node visitor instances to add to the existing list.\n     *\n     * @return \\Twig\\NodeVisitor\\NodeVisitorInterface[]\n     */\n    public function getNodeVisitors();\n\n    /**\n     * Returns a list of filters to add to the existing list.\n     *\n     * @return \\Twig\\TwigFilter[]\n     */\n    public function getFilters();\n\n    /**\n     * Returns a list of tests to add to the existing list.\n     *\n     * @return \\Twig\\TwigTest[]\n     */\n    public function getTests();\n\n    /**\n     * Returns a list of functions to add to the existing list.\n     *\n     * @return \\Twig\\TwigFunction[]\n     */\n    public function getFunctions();\n\n    /**\n     * Returns a list of operators to add to the existing list.\n     *\n     * @return array<array> First array of unary operators, second array of binary operators\n     */\n    public function getOperators();\n}\n```\n\nTo keep your extension class clean and lean, inherit from the built-in `\\Twig\\Extension\\AbstractExtension` class instead of implementing the interface as it provides empty implementations for all methods:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n}\n```\n\nThis extension does nothing for now. We will customize it in the next sections.\n\nYou can save your extension anywhere on the filesystem, as all extensions must be registered explicitly to be available in your templates.\n\nYou can register an extension by using the `addExtension()` method on your main `Environment` object:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->addExtension(new Project_Twig_Extension());\n```\n\nTip\n\nThe Twig core extensions are great examples of how extensions work.\n\n### Globals\n\nGlobal variables can be registered in an extension via the `getGlobals()` method:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension implements \\Twig\\Extension\\GlobalsInterface\n{\n    public function getGlobals(): array\n    {\n        return [\n            'text' => new Text(),\n        ];\n    }\n\n    // ...\n}\n```\n\n### Functions\n\nFunctions can be registered in an extension via the `getFunctions()` method:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getFunctions()\n    {\n        return [\n            new \\Twig\\TwigFunction('lipsum', 'generate_lipsum'),\n        ];\n    }\n\n    // ...\n}\n```\n\n### Filters\n\nTo add a filter to an extension, you need to override the `getFilters()` method. This method must return an array of filters to add to the Twig environment:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getFilters()\n    {\n        return [\n            new \\Twig\\TwigFilter('rot13', 'str_rot13'),\n        ];\n    }\n\n    // ...\n}\n```\n\n### Tags\n\nAdding a tag in an extension can be done by overriding the `getTokenParsers()` method. This method must return an array of tags to add to the Twig environment:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getTokenParsers()\n    {\n        return [new Project_Set_TokenParser()];\n    }\n\n    // ...\n}\n```\n\nIn the above code, we have added a single new tag, defined by the `Project_Set_TokenParser` class. The `Project_Set_TokenParser` class is responsible for parsing the tag and compiling it to PHP.\n\n### Operators\n\nThe `getOperators()` methods lets you add new operators. Here is how to add the `!`, `||`, and `&&` operators:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getOperators()\n    {\n        return [\n            [\n                '!' => ['precedence' => 50, 'class' => \\Twig\\Node\\Expression\\Unary\\NotUnary::class],\n            ],\n            [\n                '||' => ['precedence' => 10, 'class' => \\Twig\\Node\\Expression\\Binary\\OrBinary::class, 'associativity' => \\Twig\\ExpressionParser::OPERATOR_LEFT],\n                '&&' => ['precedence' => 15, 'class' => \\Twig\\Node\\Expression\\Binary\\AndBinary::class, 'associativity' => \\Twig\\ExpressionParser::OPERATOR_LEFT],\n            ],\n        ];\n    }\n\n    // ...\n}\n```\n\n### Tests\n\nThe `getTests()` method lets you add new test functions:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getTests()\n    {\n        return [\n            new \\Twig\\TwigTest('even', 'twig_test_even'),\n        ];\n    }\n\n    // ...\n}\n```\n\n### Definition vs Runtime\n\nTwig filters, functions, and tests runtime implementations can be defined as any valid PHP callable:\n\n- **functions/static methods**: Simple to implement and fast (used by all Twig core extensions); but it is hard for the runtime to depend on external objects;\n- **closures**: Simple to implement;\n- **object methods**: More flexible and required if your runtime code depends on external objects.\n\nThe simplest way to use methods is to define them on the extension itself:\n\n``` php\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    private $rot13Provider;\n\n    public function __construct($rot13Provider)\n    {\n        $this->rot13Provider = $rot13Provider;\n    }\n\n    public function getFunctions()\n    {\n        return [\n            new \\Twig\\TwigFunction('rot13', [$this, 'rot13']),\n        ];\n    }\n\n    public function rot13($value)\n    {\n        return $this->rot13Provider->rot13($value);\n    }\n}\n```\n\nThis is very convenient but not recommended as it makes template compilation depend on runtime dependencies even if they are not needed (think for instance as a dependency that connects to a database engine).\n\nYou can decouple the extension definitions from their runtime implementations by registering a `\\Twig\\RuntimeLoader\\RuntimeLoaderInterface` instance on the environment that knows how to instantiate such runtime classes (runtime classes must be autoload-able):\n\n``` php\nclass RuntimeLoader implements \\Twig\\RuntimeLoader\\RuntimeLoaderInterface\n{\n    public function load($class)\n    {\n        // implement the logic to create an instance of $class\n        // and inject its dependencies\n        // most of the time, it means using your dependency injection container\n        if ('Project_Twig_RuntimeExtension' === $class) {\n            return new $class(new Rot13Provider());\n        } else {\n            // ...\n        }\n    }\n}\n\n$twig->addRuntimeLoader(new RuntimeLoader());\n```\n\nNote\n\nTwig comes with a PSR-11 compatible runtime loader (`\\Twig\\RuntimeLoader\\ContainerRuntimeLoader`).\n\nIt is now possible to move the runtime logic to a new `Project_Twig_RuntimeExtension` class and use it directly in the extension:\n\n``` php\nclass Project_Twig_RuntimeExtension\n{\n    private $rot13Provider;\n\n    public function __construct($rot13Provider)\n    {\n        $this->rot13Provider = $rot13Provider;\n    }\n\n    public function rot13($value)\n    {\n        return $this->rot13Provider->rot13($value);\n    }\n}\n\nclass Project_Twig_Extension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getFunctions()\n    {\n        return [\n            new \\Twig\\TwigFunction('rot13', ['Project_Twig_RuntimeExtension', 'rot13']),\n            // or\n            new \\Twig\\TwigFunction('rot13', 'Project_Twig_RuntimeExtension::rot13'),\n        ];\n    }\n}\n```\n\n## Testing an Extension\n\n### Functional Tests\n\nYou can create functional tests for extensions by creating the following file structure in your test directory:\n\n``` php\nFixtures/\n    filters/\n        foo.test\n        bar.test\n    functions/\n        foo.test\n        bar.test\n    tags/\n        foo.test\n        bar.test\nIntegrationTest.php\n```\n\nThe `IntegrationTest.php` file should look like this:\n\n``` php\nuse Twig\\Test\\IntegrationTestCase;\n\nclass Project_Tests_IntegrationTest extends IntegrationTestCase\n{\n    public function getExtensions()\n    {\n        return [\n            new Project_Twig_Extension1(),\n            new Project_Twig_Extension2(),\n        ];\n    }\n\n    public function getFixturesDir()\n    {\n        return __DIR__.'/Fixtures/';\n    }\n}\n```\n\nFixtures examples can be found within the Twig repository [tests/Twig/Fixtures](https://github.com/twigphp/Twig/tree/3.x/tests/Fixtures) directory.\n\n### Node Tests\n\nTesting the node visitors can be complex, so extend your test cases from `\\Twig\\Test\\NodeTestCase`. Examples can be found in the Twig repository [tests/Twig/Node](https://github.com/twigphp/Twig/tree/3.x/tests/Node) directory.\n\n[« Twig for Developers](api \"Twig for Developers\") \\| [Twig Internals »](internals \"Twig Internals\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/advanced.html](https://twig.symfony.com/doc/3.x/advanced.html)"
- name: extends
  id: tags/extends
  summary: The extends tag can be used to extend a template from another one
  description: "# extends\n\nThe `extends` tag can be used to extend a template from another one.\n\nNote\n\nLike PHP, Twig does not support multiple inheritance. So you can only have one extends tag called per rendering. However, Twig supports horizontal [reuse](use).\n\nLet’s define a base template, `base.html`, which defines a simple HTML skeleton document:\n\n``` php\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel=\"stylesheet\" href=\"style.css\"/>\n            <title>{% block title %}{% endblock %} - My Webpage</title>\n        {% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">{% block content %}{% endblock %}</div>\n        <div id=\"footer\">\n            {% block footer %}\n                &copy; Copyright 2011 by <a href=\"http://domain.invalid/\">you</a>.\n            {% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nIn this example, the [block](block) tags define four blocks that child templates can fill in.\n\nAll the `block` tag does is to tell the template engine that a child template may override those portions of the template.\n\n## Child Template\n\nA child template might look like this:\n\n``` php\n{% extends \"base.html\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    <style type=\"text/css\">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">\n        Welcome on my awesome homepage.\n    </p>\n{% endblock %}\n```\n\nThe `extends` tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.\n\nNote that since the child template doesn’t define the `footer` block, the value from the parent template is used instead.\n\nYou can’t define multiple `block` tags with the same name in the same template. This limitation exists because a block tag works in “both” directions. That is, a block tag doesn’t just provide a hole to fill - it also defines the content that fills the hole in the *parent*. If there were two similarly-named `block` tags in a template, that template’s parent wouldn’t know which one of the blocks’ content to use.\n\nIf you want to print a block multiple times you can however use the `block` function:\n\n``` php\n<title>{% block title %}{% endblock %}</title>\n<h1>{{ block('title') }}</h1>\n{% block body %}{% endblock %}\n```\n\n## Parent Blocks\n\nIt’s possible to render the contents of the parent block by using the [parent](../functions/parent) function. This gives back the results of the parent block:\n\n``` php\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\n## Named Block End-Tags\n\nTwig allows you to put the name of the block after the end tag for better readability (the name after the `endblock` word must match the block name):\n\n``` php\n{% block sidebar %}\n{% block inner_sidebar %}\n        ...\n{% endblock inner_sidebar %}\n{% endblock sidebar %}\n```\n\n## Block Nesting and Scope\n\nBlocks can be nested for more complex layouts. Per default, blocks have access to variables from outer scopes:\n\n``` php\n{% for item in seq %}\n    <li>{% block loop_item %}{{ item }}{% endblock %}</li>\n{% endfor %}\n```\n\n## Block Shortcuts\n\nFor blocks with little content, it’s possible to use a shortcut syntax. The following constructs do the same thing:\n\n``` php\n{% block title %}\n{{ page_title|title }}\n{% endblock %}\n```\n\n``` php\n{% block title page_title|title %}\n```\n\n## Dynamic Inheritance\n\nTwig supports dynamic inheritance by using a variable as the base template:\n\n``` php\n{% extends some_var %}\n```\n\nIf the variable evaluates to a `\\Twig\\Template` or a `\\Twig\\TemplateWrapper` instance, Twig will use it as the parent template:\n\n``` php\n// {% extends layout %}\n\n$layout = $twig->load('some_layout_template.twig');\n\n$twig->display('template.twig', ['layout' => $layout]);\n```\n\nYou can also provide a list of templates that are checked for existence. The first template that exists will be used as a parent:\n\n``` php\n{% extends ['layout.html', 'base_layout.html'] %}\n```\n\n## Conditional Inheritance\n\nAs the template name for the parent can be any valid Twig expression, it’s possible to make the inheritance mechanism conditional:\n\n``` php\n{% extends standalone ? \"minimum.html\" : \"base.html\" %}\n```\n\nIn this example, the template will extend the “minimum.html” layout template if the `standalone` variable evaluates to `true`, and “base.html” otherwise.\n\n## How do blocks work?\n\nA block provides a way to change how a certain part of a template is rendered but it does not interfere in any way with the logic around it.\n\nLet’s take the following example to illustrate how a block works and more importantly, how it does not work:\n\n``` php\n{# base.twig #}\n{% for post in posts %}\n    {% block post %}\n        <h1>{{ post.title }}</h1>\n        <p>{{ post.body }}</p>\n    {% endblock %}\n{% endfor %}\n```\n\nIf you render this template, the result would be exactly the same with or without the `block` tag. The `block` inside the `for` loop is just a way to make it overridable by a child template:\n\n``` php\n{# child.twig #}\n{% extends \"base.twig\" %}\n\n{% block post %}\n    <article>\n        <header>{{ post.title }}</header>\n        <section>{{ post.text }}</section>\n    </article>\n{% endblock %}\n```\n\nNow, when rendering the child template, the loop is going to use the block defined in the child template instead of the one defined in the base one; the executed template is then equivalent to the following one:\n\n``` php\n{% for post in posts %}\n    <article>\n        <header>{{ post.title }}</header>\n        <section>{{ post.text }}</section>\n    </article>\n{% endfor %}\n```\n\nLet’s take another example: a block included within an `if` statement:\n\n``` php\n{% if posts is empty %}\n    {% block head %}\n        {{ parent() }}\n\n        <meta name=\"robots\" content=\"noindex, follow\">\n    {% endblock head %}\n{% endif %}\n```\n\nContrary to what you might think, this template does not define a block conditionally; it just makes overridable by a child template the output of what will be rendered when the condition is `true`.\n\nIf you want the output to be displayed conditionally, use the following instead:\n\n``` php\n{% block head %}\n    {{ parent() }}\n\n    {% if posts is empty %}\n        <meta name=\"robots\" content=\"noindex, follow\">\n    {% endif %}\n{% endblock head %}\n```\n\nSee also\n\n[block](../functions/block), [block](block), [parent](../functions/parent), [use](use)\n\n[« embed](embed \"embed\") \\| [flush »](flush \"flush\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/extends.html](https://twig.symfony.com/doc/3.x/tags/extends.html)"
- name: filter
  id: filters/filter
  summary: The filter filter filters elements of a sequence or a mapping using an arrow function
  description: "# filter\n\nThe `filter` filter filters elements of a sequence or a mapping using an arrow function. The arrow function receives the value of the sequence or mapping:\n\n``` php\n{% set sizes = [34, 36, 38, 40, 42] %}\n\n{{ sizes|filter(v => v > 38)|join(', ') }}\n{# output 40, 42 #}\n```\n\nCombined with the `for` tag, it allows to filter the items to iterate over:\n\n``` php\n{% for v in sizes|filter(v => v > 38) -%}\n{{ v }}\n{% endfor %}\n{# output 40 42 #}\n```\n\nIt also works with mappings:\n\n``` php\n{% set sizes = {\n    xs: 34,\n    s:  36,\n    m:  38,\n    l:  40,\n    xl: 42,\n} %}\n\n{% for k, v in sizes|filter(v => v > 38) -%}\n{{ k }} = {{ v }}\n{% endfor %}\n{# output l = 40 xl = 42 #}\n```\n\nThe arrow function also receives the key as a second argument:\n\n``` php\n{% for k, v in sizes|filter((v, k) => v > 38 and k != \"xl\") -%}\n{{ k }} = {{ v }}\n{% endfor %}\n{# output l = 40 #}\n```\n\nNote that the arrow function has access to the current context.\n\n## Arguments\n\n- `array`: The sequence or mapping\n- `arrow`: The arrow function\n\n[« escape](escape \"escape\") \\| [first »](first \"first\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/filter.html](https://twig.symfony.com/doc/3.x/filters/filter.html)"
- name: Filters
  id: filters/index
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# Filters\n\n- [`abs`](abs)\n- [`batch`](batch)\n- [`capitalize`](capitalize)\n- [`column`](column)\n- [`convert_encoding`](convert_encoding)\n- [`country_name`](country_name)\n- [`currency_name`](currency_name)\n- [`currency_symbol`](currency_symbol)\n- [`data_uri`](data_uri)\n- [`date`](date)\n- [`date_modify`](date_modify)\n- [`default`](default)\n- [`escape`](escape)\n- [`filter`](filter)\n- [`first`](first)\n- [`format`](format)\n- [`format_currency`](format_currency)\n- [`format_date`](format_date)\n- [`format_datetime`](format_datetime)\n- [`format_number`](format_number)\n- [`format_time`](format_time)\n- [`html_to_markdown`](html_to_markdown)\n- [`inline_css`](inline_css)\n- [`inky_to_html`](inky_to_html)\n- [`join`](join)\n- [`json_encode`](json_encode)\n- [`keys`](keys)\n- [`language_name`](language_name)\n- [`last`](last)\n- [`length`](length)\n- [`locale_name`](locale_name)\n- [`lower`](lower)\n- [`map`](map)\n- [`markdown_to_html`](markdown_to_html)\n- [`merge`](merge)\n- [`nl2br`](nl2br)\n- [`number_format`](number_format)\n- [`raw`](raw)\n- [`reduce`](reduce)\n- [`replace`](replace)\n- [`reverse`](reverse)\n- [`round`](round)\n- [`slice`](slice)\n- [`sort`](sort)\n- [`spaceless`](spaceless)\n- [`split`](split)\n- [`striptags`](striptags)\n- [`timezone_name`](timezone_name)\n- [`title`](title)\n- [`trim`](trim)\n- [`u`](u)\n- [`upper`](upper)\n- [`url_encode`](url_encode)\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/index.html](https://twig.symfony.com/doc/3.x/filters/index.html)"
- name: first
  id: filters/first
  summary: It also works with objects implementing the Traversable interface
  description: "# first\n\nThe `first` filter returns the first “element” of a sequence, a mapping, or a string:\n\n``` php\n{{ [1, 2, 3, 4]|first }}\n{# outputs 1 #}\n\n{{ { a: 1, b: 2, c: 3, d: 4 }|first }}\n{# outputs 1 #}\n\n{{ '1234'|first }}\n{# outputs 1 #}\n```\n\nNote\n\nIt also works with objects implementing the [Traversable](https://secure.php.net/manual/en/class.traversable.php) interface.\n\n[« filter](filter \"filter\") \\| [format »](format \"format\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/first.html](https://twig.symfony.com/doc/3.x/filters/first.html)"
- name: flush
  id: tags/flush
  summary: Internally, Twig uses the PHP flush function
  description: "# flush\n\nThe `flush` tag tells Twig to flush the output buffer:\n\n``` php\n{% flush %}\n```\n\nNote\n\nInternally, Twig uses the PHP [flush](https://secure.php.net/flush) function.\n\n[« extends](extends \"extends\") \\| [for »](for \"for\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/flush.html](https://twig.symfony.com/doc/3.x/tags/flush.html)"
- name: for
  id: tags/for
  summary: Loop over each item in a sequence
  description: "# for\n\nLoop over each item in a sequence. For example, to display a list of users provided in a variable called `users`:\n\n``` php\n<h1>Members</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\nNote\n\nA sequence can be either an array or an object implementing the `Traversable` interface.\n\nIf you do need to iterate over a sequence of numbers, you can use the `..` operator:\n\n``` php\n{% for i in 0..10 %}\n    * {{ i }}\n{% endfor %}\n```\n\nThe above snippet of code would print all numbers from 0 to 10.\n\nIt can be also useful with letters:\n\n``` php\n{% for letter in 'a'..'z' %}\n    * {{ letter }}\n{% endfor %}\n```\n\nThe `..` operator can take any expression at both sides:\n\n``` php\n{% for letter in 'a'|upper..'z'|upper %}\n    * {{ letter }}\n{% endfor %}\n```\n\n## The loop variable\n\nInside of a `for` loop block you can access some special variables:\n\n| Variable         | Description                                                   |\n|------------------|---------------------------------------------------------------|\n| `loop.index`     | The current iteration of the loop. (1 indexed)                |\n| `loop.index0`    | The current iteration of the loop. (0 indexed)                |\n| `loop.revindex`  | The number of iterations from the end of the loop (1 indexed) |\n| `loop.revindex0` | The number of iterations from the end of the loop (0 indexed) |\n| `loop.first`     | True if first iteration                                       |\n| `loop.last`      | True if last iteration                                        |\n| `loop.length`    | The number of items in the sequence                           |\n| `loop.parent`    | The parent context                                            |\n\n``` php\n{% for user in users %}\n{{ loop.index }} - {{ user.username }}\n{% endfor %}\n```\n\nNote\n\nThe `loop.length`, `loop.revindex`, `loop.revindex0`, and `loop.last` variables are only available for PHP arrays, or objects that implement the `Countable` interface.\n\n## The else Clause\n\nIf no iteration took place because the sequence was empty, you can render a replacement block by using `else`:\n\n``` php\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% else %}\n        <li><em>no user found</em></li>\n    {% endfor %}\n</ul>\n```\n\n## Iterating over Keys\n\nBy default, a loop iterates over the values of the sequence. You can iterate on keys by using the `keys` filter:\n\n``` php\n<h1>Members</h1>\n<ul>\n    {% for key in users|keys %}\n        <li>{{ key }}</li>\n    {% endfor %}\n</ul>\n```\n\n## Iterating over Keys and Values\n\nYou can also access both keys and values:\n\n``` php\n<h1>Members</h1>\n<ul>\n    {% for key, user in users %}\n        <li>{{ key }}: {{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\n## Iterating over a Subset\n\nYou might want to iterate over a subset of values. This can be achieved using the [slice](../filters/slice) filter:\n\n``` php\n<h1>Top Ten Members</h1>\n<ul>\n    {% for user in users|slice(0, 10) %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\n[« flush](flush \"flush\") \\| [from »](from \"from\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/for.html](https://twig.symfony.com/doc/3.x/tags/for.html)"
- name: format
  id: filters/format
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# format\n\nThe `format` filter formats a given string by replacing the placeholders (placeholders follows the [sprintf](https://secure.php.net/sprintf) notation):\n\n``` php\n{{ \"I like %s and %s.\"|format(foo, \"bar\") }}\n\n{# outputs I like foo and bar\n   if the foo parameter equals to the foo string. #}\n```\n\nSee also\n\n[replace](replace)\n\n[« first](first \"first\") \\| [format_currency »](format_currency \"format_currency\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/format.html](https://twig.symfony.com/doc/3.x/filters/format.html)"
- name: format_currency
  id: filters/format_currency
  summary: By default, the filter uses the current locale
  description: "# format_currency\n\nThe `format_currency` filter formats a number as a currency:\n\n``` php\n{# €1,000,000.00 #}\n{{ '1000000'|format_currency('EUR') }}\n```\n\nYou can pass attributes to tweak the output:\n\n``` php\n{# €12.34 #}\n{{ '12.345'|format_currency('EUR', {rounding_mode: 'floor'}) }}\n\n{# €1,000,000.0000 #}\n{{ '1000000'|format_currency('EUR', {fraction_digit: 4}) }}\n```\n\nThe list of supported options:\n\n- `grouping_used`;\n- `decimal_always_shown`;\n- `max_integer_digit`;\n- `min_integer_digit`;\n- `integer_digit`;\n- `max_fraction_digit`;\n- `min_fraction_digit`;\n- `fraction_digit`;\n- `multiplier`;\n- `grouping_size`;\n- `rounding_mode`;\n- `rounding_increment`;\n- `format_width`;\n- `padding_position`;\n- `secondary_grouping_size`;\n- `significant_digits_used`;\n- `min_significant_digits_used`;\n- `max_significant_digits_used`;\n- `lenient_parse`.\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# 1.000.000,00 € #}\n{{ '1000000'|format_currency('EUR', locale='de') }}\n```\n\nNote\n\nThe `format_currency` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `currency`: The currency\n- `attrs`: A map of attributes\n- `locale`: The locale\n\n[« format](format \"format\") \\| [format_date »](format_date \"format_date\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/format_currency.html](https://twig.symfony.com/doc/3.x/filters/format_currency.html)"
- name: format_date
  id: filters/format_date
  summary: The format_date filter formats a date
  description: "# format_date\n\nThe `format_date` filter formats a date. It behaves in the exact same way as the [format_datetime](format_datetime) filter, but without the time.\n\nNote\n\nThe `format_date` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n- `dateFormat`: The date format\n- `pattern`: A date time pattern\n\n[« format_currency](format_currency \"format_currency\") \\| [format_datetime »](format_datetime \"format_datetime\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/format_date.html](https://twig.symfony.com/doc/3.x/filters/format_date.html)"
- name: format_datetime
  id: filters/format_datetime
  summary: 'Supported values are: none, short, medium, long, and full'
  description: "# format_datetime\n\nThe `format_datetime` filter formats a date time:\n\n> public function formatDateTime(Environment $env, $date, ?string $dateFormat = ‘medium’, ?string $timeFormat = ‘medium’, string $pattern = ‘’, $timezone = null, string $calendar = ‘gregorian’, string $locale = null): string\n\n``` php\n{# Aug 7, 2019, 11:39:12 PM #}\n{{ '2019-08-07 23:39:12'|format_datetime() }}\n```\n\nYou can tweak the output for the date part and the time part:\n\n``` php\n{# 23:39 #}\n{{ '2019-08-07 23:39:12'|format_datetime('none', 'short', locale='fr') }}\n\n{# 07/08/2019 #}\n{{ '2019-08-07 23:39:12'|format_datetime('short', 'none', locale='fr') }}\n\n{# mercredi 7 août 2019 23:39:12 UTC #}\n{{ '2019-08-07 23:39:12'|format_datetime('full', 'full', locale='fr') }}\n```\n\nSupported values are: `none`, `short`, `medium`, `long`, and `full`.\n\nFor greater flexiblity, you can even define your own pattern (see the [ICU user guide](https://unicode-org.github.io/icu/userguide/format_parse/datetime/#datetime-format-syntax) for supported patterns).\n\n``` php\n{# 11 oclock PM, GMT #}\n{{ '2019-08-07 23:39:12'|format_datetime(pattern=\"hh 'oclock' a, zzzz\") }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# 7 août 2019 23:39:12 #}\n{{ '2019-08-07 23:39:12'|format_datetime(locale='fr') }}\n```\n\nNote\n\nThe `format_datetime` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n- `dateFormat`: The date format\n- `timeFormat`: The time format\n- `pattern`: A date time pattern\n\n[« format_date](format_date \"format_date\") \\| [format_number »](format_number \"format_number\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/format_datetime.html](https://twig.symfony.com/doc/3.x/filters/format_datetime.html)"
- name: format_number
  id: filters/format_number
  summary: By default, the filter uses the current locale
  description: "# format_number\n\nThe `format_number` filter formats a number:\n\n``` php\n{{ '12.345'|format_number }}\n```\n\nYou can pass attributes to tweak the output:\n\n``` php\n{# 12.34 #}\n{{ '12.345'|format_number({rounding_mode: 'floor'}) }}\n\n{# 1000000.0000 #}\n{{ '1000000'|format_number({fraction_digit: 4}) }}\n```\n\nThe list of supported options:\n\n- `grouping_used`;\n- `decimal_always_shown`;\n- `max_integer_digit`;\n- `min_integer_digit`;\n- `integer_digit`;\n- `max_fraction_digit`;\n- `min_fraction_digit`;\n- `fraction_digit`;\n- `multiplier`;\n- `grouping_size`;\n- `rounding_mode`;\n- `rounding_increment`;\n- `format_width`;\n- `padding_position`;\n- `secondary_grouping_size`;\n- `significant_digits_used`;\n- `min_significant_digits_used`;\n- `max_significant_digits_used`;\n- `lenient_parse`.\n\nBesides plain numbers, the filter can also format numbers in various styles:\n\n``` php\n{# 1,234% #}\n{{ '12.345'|format_number(style='percent') }}\n\n{# twelve point three four five #}\n{{ '12.345'|format_number(style='spellout') }}\n\n{# 12 sec. #}\n{{ '12'|format_duration_number }}\n```\n\nThe list of supported styles:\n\n- `decimal`;\n- `currency`;\n- `percent`;\n- `scientific`;\n- `spellout`;\n- `ordinal`;\n- `duration`.\n\nAs a shortcut, you can use the `format_*_number` filters by replacing \\* with a style:\n\n``` php\n{# 1,234% #}\n{{ '12.345'|format_percent_number }}\n\n{# twelve point three four five #}\n{{ '12.345'|format_spellout_number }}\n```\n\nYou can pass attributes to tweak the output:\n\n``` php\n{# 12.3% #}\n{{ '0.12345'|format_percent_number({rounding_mode: 'floor', fraction_digit: 1}) }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# 12,345 #}\n{{ '12.345'|format_number(locale='fr') }}\n```\n\nNote\n\nThe `format_number` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n- `attrs`: A map of attributes\n- `style`: The style of the number output\n\n[« format_datetime](format_datetime \"format_datetime\") \\| [format_time »](format_time \"format_time\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/format_number.html](https://twig.symfony.com/doc/3.x/filters/format_number.html)"
- name: format_time
  id: filters/format_time
  summary: The format_time filter formats a time
  description: "# format_time\n\nThe `format_time` filter formats a time. It behaves in the exact same way as the [format_datetime](format_datetime) filter, but without the date.\n\nNote\n\nThe `format_time` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n- `timeFormat`: The time format\n- `pattern`: A date time pattern\n\n[« format_number](format_number \"format_number\") \\| [html_to_markdown »](html_to_markdown \"html_to_markdown\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/format_time.html](https://twig.symfony.com/doc/3.x/filters/format_time.html)"
- name: from
  id: tags/from
  summary: The from tag imports macro names into the current namespace
  description: "# from\n\nThe `from` tag imports [macro](macro) names into the current namespace. The tag is documented in detail in the documentation for the [macro](macro) tag.\n\n[« for](for \"for\") \\| [if »](if \"if\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/from.html](https://twig.symfony.com/doc/3.x/tags/from.html)"
- name: Functions
  id: functions/index
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# Functions\n\n- [`attribute`](attribute)\n- [`block`](block)\n- [`constant`](constant)\n- [`cycle`](cycle)\n- [`date`](date)\n- [`dump`](dump)\n- [`html_classes`](html_classes)\n- [`include`](include)\n- [`max`](max)\n- [`min`](min)\n- [`parent`](parent)\n- [`random`](random)\n- [`range`](range)\n- [`source`](source)\n- [`country_timezones`](country_timezones)\n- [`template_from_string`](template_from_string)\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/index.html](https://twig.symfony.com/doc/3.x/functions/index.html)"
- name: html_classes
  id: functions/html_classes
  summary: The html_classes function is part of the HtmlExtension which is not installed by default
  description: "# html_classes\n\nThe `html_classes` function returns a string by conditionally joining class names together:\n\n``` php\n<p class=\"{{ html_classes('a-class', 'another-class', {\n    'errored': object.errored,\n    'finished': object.finished,\n    'pending': object.pending,\n}) }}\">How are you doing?</p>\n```\n\nNote\n\nThe `html_classes` function is part of the `HtmlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/html-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Html\\HtmlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new HtmlExtension());\n```\n\n[« dump](dump \"dump\") \\| [include »](include \"include\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/html_classes.html](https://twig.symfony.com/doc/3.x/functions/html_classes.html)"
- name: html_to_markdown
  id: filters/html_to_markdown
  summary: The html_to_markdown filter is part of the MarkdownExtension which is not installed by default
  description: "# html_to_markdown\n\nThe `html_to_markdown` filter converts a block of HTML to Markdown:\n\n``` php\n{% apply html_to_markdown %}\n    <html>\n        <h1>Hello!</h1>\n    </html>\n{% endapply %}\n```\n\nYou can also use the filter on an entire template which you `include`:\n\n``` php\n{{ include('some_template.html.twig')|html_to_markdown }}\n```\n\nNote\n\nThe `html_to_markdown` filter is part of the `MarkdownExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/markdown-extra\n```\n\nOn Symfony projects, you can automatically enable it by installing the `twig/extra-bundle`:\n\n``` php\n$ composer require twig/extra-bundle\n```\n\nOr add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Markdown\\MarkdownExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new MarkdownExtension());\n```\n\nIf you are not using Symfony, you must also register the extension runtime:\n\n``` php\nuse Twig\\Extra\\Markdown\\DefaultMarkdown;\nuse Twig\\Extra\\Markdown\\MarkdownRuntime;\nuse Twig\\RuntimeLoader\\RuntimeLoaderInterface;\n\n$twig->addRuntimeLoader(new class implements RuntimeLoaderInterface {\n    public function load($class) {\n        if (MarkdownRuntime::class === $class) {\n            return new MarkdownRuntime(new DefaultMarkdown());\n        }\n    }\n});\n```\n\n`html_to_markdown` is just a frontend; the actual conversion is done by one of the following compatible libraries, from which you can choose:\n\n- \\[erusev/parsedown\\]([https://github.com/erusev/parsedown](https://github.com/erusev/parsedown))\n- \\[thephpleague/html-to-markdown\\]([https://github.com/thephpleague/html-to-markdown](https://github.com/thephpleague/html-to-markdown))\n- \\[michelf/php-markdown\\]([https://github.com/michelf/php-markdown](https://github.com/michelf/php-markdown))\n\nDepending on the library, you can also add some options by passing them as an argument to the filter. Example for `league/html-to-markdown`:\n\n``` php\n{% apply html_to_markdown({hard_break: false}) %}\n    <html>\n        <h1>Hello!</h1>\n    </html>\n{% endapply %}\n```\n\n[« format_time](format_time \"format_time\") \\| [inline_css »](inline_css \"inline_css\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/html_to_markdown.html](https://twig.symfony.com/doc/3.x/filters/html_to_markdown.html)"
- name: if
  id: tags/if
  summary: The if statement in Twig is comparable with the if statements of PHP
  description: "# if\n\nThe `if` statement in Twig is comparable with the if statements of PHP.\n\nIn the simplest form you can use it to test if an expression evaluates to `true`:\n\n``` php\n{% if online == false %}\n    <p>Our website is in maintenance mode. Please, come back later.</p>\n{% endif %}\n```\n\nYou can also test if an array is not empty:\n\n``` php\n{% if users %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username|e }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\nNote\n\nIf you want to test if the variable is defined, use `if`` ``users`` ``is`` ``defined` instead.\n\nYou can also use `not` to check for values that evaluate to `false`:\n\n``` php\n{% if not user.subscribed %}\n    <p>You are not subscribed to our mailing list.</p>\n{% endif %}\n```\n\nFor multiple conditions, `and` and `or` can be used:\n\n``` php\n{% if temperature > 18 and temperature < 27 %}\n    <p>It's a nice day for a walk in the park.</p>\n{% endif %}\n```\n\nFor multiple branches `elseif` and `else` can be used like in PHP. You can use more complex `expressions` there too:\n\n``` php\n{% if product.stock > 10 %}\n   Available\n{% elseif product.stock > 0 %}\n   Only {{ product.stock }} left!\n{% else %}\n   Sold-out!\n{% endif %}\n```\n\nNote\n\nThe rules to determine if an expression is `true` or `false` are the same as in PHP; here are the edge cases rules:\n\n| Value                  | Boolean evaluation |\n|------------------------|--------------------|\n| empty string           | false              |\n| numeric zero           | false              |\n| NAN (Not A Number)     | true               |\n| INF (Infinity)         | true               |\n| whitespace-only string | true               |\n| string “0” or ‘0’      | false              |\n| empty array            | false              |\n| null                   | false              |\n| non-empty array        | true               |\n| object                 | true               |\n\n[« from](from \"from\") \\| [import »](import \"import\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/if.html](https://twig.symfony.com/doc/3.x/tags/if.html)"
- name: import
  id: tags/import
  summary: The import tag imports macro names in a local variable
  description: "# import\n\nThe `import` tag imports [macro](macro) names in a local variable. The tag is documented in detail in the documentation for the [macro](macro) tag.\n\n[« if](if \"if\") \\| [include »](include \"include\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/import.html](https://twig.symfony.com/doc/3.x/tags/import.html)"
- name: include
  id: tags/include
  summary: The include function does not impose any specific order for arguments thanks to named arguments
  description: "# include\n\nThe `include` statement includes a template and outputs the rendered content of that file:\n\n``` php\n{% include 'header.html' %}\n    Body\n{% include 'footer.html' %}\n```\n\nNote\n\nIt is recommended to use the [include](../functions/include) function instead as it provides the same features with a bit more flexibility:\n\n- The `include` function is semantically more “correct” (including a template outputs its rendered contents in the current scope; a tag should not display anything);\n\n- The `include` function is more “composable”:\n\n  ``` php\n  {# Store a rendered template in a variable #}\n  {% set content %}\n  {% include 'template.html' %}\n  {% endset %}\n  {# vs #}\n  {% set content = include('template.html') %}\n\n  {# Apply filter on a rendered template #}\n  {% apply upper %}\n  {% include 'template.html' %}\n  {% endapply %}\n  {# vs #}\n  {{ include('template.html')|upper }}\n  ```\n\n- The `include` function does not impose any specific order for arguments thanks to [named arguments](../templates#named-arguments).\n\nIncluded templates have access to the variables of the active context.\n\nIf you are using the filesystem loader, the templates are looked for in the paths defined by it.\n\nYou can add additional variables by passing them after the `with` keyword:\n\n``` php\n{# template.html will have access to the variables from the current context and the additional ones provided #}\n{% include 'template.html' with {'foo': 'bar'} %}\n\n{% set vars = {'foo': 'bar'} %}\n{% include 'template.html' with vars %}\n```\n\nYou can disable access to the context by appending the `only` keyword:\n\n``` php\n{# only the foo variable will be accessible #}\n{% include 'template.html' with {'foo': 'bar'} only %}\n```\n\n``` php\n{# no variables will be accessible #}\n{% include 'template.html' only %}\n```\n\nTip\n\nWhen including a template created by an end user, you should consider sandboxing it. More information in the [Twig for Developers](../api) chapter and in the [sandbox](sandbox) tag documentation.\n\nThe template name can be any valid Twig expression:\n\n``` php\n{% include some_var %}\n{% include ajax ? 'ajax.html' : 'not_ajax.html' %}\n```\n\nAnd if the expression evaluates to a `\\Twig\\Template` or a `\\Twig\\TemplateWrapper` instance, Twig will use it directly:\n\n``` php\n// {% include template %}\n\n$template = $twig->load('some_template.twig');\n\n$twig->display('template.twig', ['template' => $template]);\n```\n\nYou can mark an include with `ignore`` ``missing` in which case Twig will ignore the statement if the template to be included does not exist. It has to be placed just after the template name. Here some valid examples:\n\n``` php\n{% include 'sidebar.html' ignore missing %}\n{% include 'sidebar.html' ignore missing with {'foo': 'bar'} %}\n{% include 'sidebar.html' ignore missing only %}\n```\n\nYou can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be included:\n\n``` php\n{% include ['page_detailed.html', 'page.html'] %}\n```\n\nIf `ignore`` ``missing` is given, it will fall back to rendering nothing if none of the templates exist, otherwise it will throw an exception.\n\n[« import](import \"import\") \\| [macro »](macro \"macro\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/include.html](https://twig.symfony.com/doc/3.x/tags/include.html)"
- name: include
  id: functions/include
  summary: Included templates have access to the variables of the active context
  description: "# include\n\nThe `include` function returns the rendered content of a template:\n\n``` php\n{{ include('template.html') }}\n{{ include(some_var) }}\n```\n\nIncluded templates have access to the variables of the active context.\n\nIf you are using the filesystem loader, the templates are looked for in the paths defined by it.\n\nThe context is passed by default to the template but you can also pass additional variables:\n\n``` php\n{# template.html will have access to the variables from the current context and the additional ones provided #}\n{{ include('template.html', {foo: 'bar'}) }}\n```\n\nYou can disable access to the context by setting `with_context` to `false`:\n\n``` php\n{# only the foo variable will be accessible #}\n{{ include('template.html', {foo: 'bar'}, with_context = false) }}\n```\n\n``` php\n{# no variables will be accessible #}\n{{ include('template.html', with_context = false) }}\n```\n\nAnd if the expression evaluates to a `\\Twig\\Template` or a `\\Twig\\TemplateWrapper` instance, Twig will use it directly:\n\n``` php\n// {{ include(template) }}\n\n$template = $twig->load('some_template.twig');\n\n$twig->display('template.twig', ['template' => $template]);\n```\n\nWhen you set the `ignore_missing` flag, Twig will return an empty string if the template does not exist:\n\n``` php\n{{ include('sidebar.html', ignore_missing = true) }}\n```\n\nYou can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be rendered:\n\n``` php\n{{ include(['page_detailed.html', 'page.html']) }}\n```\n\nIf `ignore_missing` is set, it will fall back to rendering nothing if none of the templates exist, otherwise it will throw an exception.\n\nWhen including a template created by an end user, you should consider sandboxing it:\n\n``` php\n{{ include('page.html', sandboxed = true) }}\n```\n\n## Arguments\n\n- `template`: The template to render\n- `variables`: The variables to pass to the template\n- `with_context`: Whether to pass the current context variables or not\n- `ignore_missing`: Whether to ignore missing templates or not\n- `sandboxed`: Whether to sandbox the template or not\n\n[« html_classes](html_classes \"html_classes\") \\| [max »](max \"max\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/include.html](https://twig.symfony.com/doc/3.x/functions/include.html)"
- name: inky_to_html
  id: filters/inky_to_html
  summary: The inky_to_html filter is part of the InkyExtension which is not installed by default
  description: "# inky_to_html\n\nThe `inky_to_html` filter processes an [inky email template](https://github.com/zurb/inky):\n\n``` php\n{% apply inky_to_html %}\n    <row>\n        <columns large=\"6\"></columns>\n        <columns large=\"6\"></columns>\n    </row>\n{% endapply %}\n```\n\nYou can also use the filter on an included file:\n\n``` php\n{{ include('some_template.inky.twig')|inky_to_html }}\n```\n\nNote\n\nThe `inky_to_html` filter is part of the `InkyExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/inky-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Inky\\InkyExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new InkyExtension());\n```\n\n[« inline_css](inline_css \"inline_css\") \\| [join »](join \"join\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/inky_to_html.html](https://twig.symfony.com/doc/3.x/filters/inky_to_html.html)"
- name: inline_css
  id: filters/inline_css
  summary: Styles loaded via the filter override the styles defined in the <style> tag of the HTML document
  description: "# inline_css\n\nThe `inline_css` filter inline CSS styles in HTML documents:\n\n``` php\n{% apply inline_css %}\n    <html>\n        <head>\n            <style>\n                p { color: red; }\n            </style>\n        </head>\n        <body>\n            <p>Hello CSS!</p>\n        </body>\n    </html>\n{% endapply %}\n```\n\nYou can also add some stylesheets by passing them as arguments to the filter:\n\n``` php\n{% apply inline_css(source(\"some_styles.css\"), source(\"another.css\")) %}\n    <html>\n        <body>\n            <p>Hello CSS!</p>\n        </body>\n    </html>\n{% endapply %}\n```\n\nStyles loaded via the filter override the styles defined in the `<style>` tag of the HTML document.\n\nYou can also use the filter on an included file:\n\n``` php\n{{ include('some_template.html.twig')|inline_css }}\n\n{{ include('some_template.html.twig')|inline_css(source(\"some_styles.css\")) }}\n```\n\nNote that the CSS inliner works on an entire HTML document, not a fragment.\n\nNote\n\nThe `inline_css` filter is part of the `CssInlinerExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/cssinliner-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\CssInliner\\CssInlinerExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new CssInlinerExtension());\n```\n\n[« html_to_markdown](html_to_markdown \"html_to_markdown\") \\| [inky_to_html »](inky_to_html \"inky_to_html\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/inline_css.html](https://twig.symfony.com/doc/3.x/filters/inline_css.html)"
- name: Installation
  id: installation
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# Installation\n\nInstall [Composer](https://getcomposer.org/download/) and run the following command to get the latest version:\n\n``` php\ncomposer require \"twig/twig:^3.0\"\n```\n\n[« Introduction](intro \"Introduction\") \\| [Twig for Template Designers »](templates \"Twig for Template Designers\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/installation.html](https://twig.symfony.com/doc/3.x/installation.html)"
- name: Introduction
  id: intro
  summary: Welcome to the documentation for Twig, the flexible, fast, and secure template engine for PHP
  description: "# Introduction\n\nWelcome to the documentation for Twig, the flexible, fast, and secure template engine for PHP.\n\nTwig is both designer and developer friendly by sticking to PHP’s principles and adding functionality useful for templating environments.\n\nThe key-features are…\n\n- *Fast*: Twig compiles templates down to plain optimized PHP code. The overhead compared to regular PHP code was reduced to the very minimum.\n- *Secure*: Twig has a sandbox mode to evaluate untrusted template code. This allows Twig to be used as a template language for applications where users may modify the template design.\n- *Flexible*: Twig is powered by a flexible lexer and parser. This allows the developer to define their own custom tags and filters, and to create their own DSL.\n\nTwig is used by many Open-Source projects like Symfony, Drupal8, eZPublish, phpBB, Matomo, OroCRM; and many frameworks have support for it as well like Slim, Yii, Laravel, and Codeigniter — just to name a few.\n\n## Prerequisites\n\nTwig 3.x needs at least **PHP 7.2.5** to run.\n\n## Installation\n\nThe recommended way to install Twig is via Composer:\n\n``` php\ncomposer require \"twig/twig:^3.0\"\n```\n\n## Basic API Usage\n\nThis section gives you a brief introduction to the PHP API for Twig:\n\n``` php\nrequire_once '/path/to/vendor/autoload.php';\n\n$loader = new \\Twig\\Loader\\ArrayLoader([\n    'index' => 'Hello {{ name }}!',\n]);\n$twig = new \\Twig\\Environment($loader);\n\necho $twig->render('index', ['name' => 'Fabien']);\n```\n\nTwig uses a loader (`\\Twig\\Loader\\ArrayLoader`) to locate templates, and an environment (`\\Twig\\Environment`) to store its configuration.\n\nThe `render()` method loads the template passed as a first argument and renders it with the variables passed as a second argument.\n\nAs templates are generally stored on the filesystem, Twig also comes with a filesystem loader:\n\n``` php\n$loader = new \\Twig\\Loader\\FilesystemLoader('/path/to/templates');\n$twig = new \\Twig\\Environment($loader, [\n    'cache' => '/path/to/compilation_cache',\n]);\n\necho $twig->render('index.html', ['name' => 'Fabien']);\n```\n\n[« Twig](index \"Twig\") \\| [Installation »](installation \"Installation\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/intro.html](https://twig.symfony.com/doc/3.x/intro.html)"
- name: iterable
  id: tests/iterable
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# iterable\n\n`iterable` checks if a variable is an array or a traversable object:\n\n``` php\n{# evaluates to true if the foo variable is iterable #}\n{% if users is iterable %}\n{% for user in users %}\n        Hello {{ user }}!\n{% endfor %}\n{% else %}\n{# users is probably a string #}\n    Hello {{ users }}!\n{% endif %}\n```\n\n[« even](even \"even\") \\| [null »](null \"null\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/iterable.html](https://twig.symfony.com/doc/3.x/tests/iterable.html)"
- name: join
  id: filters/join
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# join\n\nThe `join` filter returns a string which is the concatenation of the items of a sequence:\n\n``` php\n{{ [1, 2, 3]|join }}\n{# returns 123 #}\n```\n\nThe separator between elements is an empty string per default, but you can define it with the optional first parameter:\n\n``` php\n{{ [1, 2, 3]|join('|') }}\n{# outputs 1|2|3 #}\n```\n\nA second parameter can also be provided that will be the separator used between the last two items of the sequence:\n\n``` php\n{{ [1, 2, 3]|join(', ', ' and ') }}\n{# outputs 1, 2 and 3 #}\n```\n\n## Arguments\n\n- `glue`: The separator\n- `and`: The separator for the last pair of input items\n\n[« inky_to_html](inky_to_html \"inky_to_html\") \\| [json_encode »](json_encode \"json_encode\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/join.html](https://twig.symfony.com/doc/3.x/filters/join.html)"
- name: json_encode
  id: filters/json_encode
  summary: Internally, Twig uses the PHP json_encode function
  description: "# json_encode\n\nThe `json_encode` filter returns the JSON representation of a value:\n\n``` php\n{{ data|json_encode() }}\n```\n\nNote\n\nInternally, Twig uses the PHP [json_encode](https://secure.php.net/json_encode) function.\n\n## Arguments\n\n- `options`: A bitmask of [json_encode options](https://secure.php.net/manual/en/json.constants.php): `{{`` ``data|json_encode(constant('JSON_PRETTY_PRINT'))`` ``}}`. Combine constants using [bitwise operators](../templates#template-logic): `{{`` ``data|json_encode(constant('JSON_PRETTY_PRINT')`` ``b-or`` ``constant('JSON_HEX_QUOT'))`` ``}}`\n\n[« join](join \"join\") \\| [keys »](keys \"keys\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/json_encode.html](https://twig.symfony.com/doc/3.x/filters/json_encode.html)"
- name: keys
  id: filters/keys
  summary: The keys filter returns the keys of an array
  description: "# keys\n\nThe `keys` filter returns the keys of an array. It is useful when you want to iterate over the keys of an array:\n\n``` php\n{% for key in array|keys %}\n    ...\n{% endfor %}\n```\n\n[« json_encode](json_encode \"json_encode\") \\| [language_name »](language_name \"language_name\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/keys.html](https://twig.symfony.com/doc/3.x/filters/keys.html)"
- name: language_name
  id: filters/language_name
  summary: By default, the filter uses the current locale
  description: "# language_name\n\nThe `language_name` filter returns the language name given its two-letter code:\n\n``` php\n{# German #}\n{{ 'de'|language_name }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# allemand #}\n{{ 'de'|language_name('fr') }}\n\n{# français canadien #}\n{{ 'fr_CA'|language_name('fr_FR') }}\n```\n\nNote\n\nThe `language_name` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n\n[« keys](keys \"keys\") \\| [last »](last \"last\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/language_name.html](https://twig.symfony.com/doc/3.x/filters/language_name.html)"
- name: last
  id: filters/last
  summary: It also works with objects implementing the Traversable interface
  description: "# last\n\nThe `last` filter returns the last “element” of a sequence, a mapping, or a string:\n\n``` php\n{{ [1, 2, 3, 4]|last }}\n{# outputs 4 #}\n\n{{ { a: 1, b: 2, c: 3, d: 4 }|last }}\n{# outputs 4 #}\n\n{{ '1234'|last }}\n{# outputs 4 #}\n```\n\nNote\n\nIt also works with objects implementing the [Traversable](https://secure.php.net/manual/en/class.traversable.php) interface.\n\n[« language_name](language_name \"language_name\") \\| [length »](length \"length\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/last.html](https://twig.symfony.com/doc/3.x/filters/last.html)"
- name: length
  id: filters/length
  summary: The length filter returns the number of items of a sequence or mapping, or the length of a string
  description: "# length\n\nThe `length` filter returns the number of items of a sequence or mapping, or the length of a string.\n\nFor objects that implement the `Countable` interface, `length` will use the return value of the `count()` method.\n\nFor objects that implement the `__toString()` magic method (and not `Countable`), it will return the length of the string provided by that method.\n\nFor objects that implement the `IteratorAggregate` interface, `length` will use the return value of the `iterator_count()` method.\n\n``` php\n{% if users|length > 10 %}\n    ...\n{% endif %}\n```\n\n[« last](last \"last\") \\| [locale_name »](locale_name \"locale_name\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/length.html](https://twig.symfony.com/doc/3.x/filters/length.html)"
- name: locale_name
  id: filters/locale_name
  summary: By default, the filter uses the current locale
  description: "# locale_name\n\nThe `locale_name` filter returns the locale name given its two-letter code:\n\n``` php\n{# German #}\n{{ 'de'|locale_name }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# allemand #}\n{{ 'de'|locale_name('fr') }}\n\n{# français (Canada) #}\n{{ 'fr_CA'|locale_name('fr_FR') }}\n```\n\nNote\n\nThe `locale_name` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n\n[« length](length \"length\") \\| [lower »](lower \"lower\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/locale_name.html](https://twig.symfony.com/doc/3.x/filters/locale_name.html)"
- name: lower
  id: filters/lower
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# lower\n\nThe `lower` filter converts a value to lowercase:\n\n``` php\n{{ 'WELCOME'|lower }}\n\n{# outputs 'welcome' #}\n```\n\n[« locale_name](locale_name \"locale_name\") \\| [map »](map \"map\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/lower.html](https://twig.symfony.com/doc/3.x/filters/lower.html)"
- name: macro
  id: tags/macro
  summary: Macros are comparable with functions in regular programming languages
  description: "# macro\n\nMacros are comparable with functions in regular programming languages. They are useful to reuse template fragments to not repeat yourself.\n\nMacros are defined in regular templates.\n\nImagine having a generic helper template that define how to render HTML forms via macros (called `forms.html`):\n\n``` php\n{% macro input(name, value, type = \"text\", size = 20) %}\n    <input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size }}\"/>\n{% endmacro %}\n\n{% macro textarea(name, value, rows = 10, cols = 40) %}\n    <textarea name=\"{{ name }}\" rows=\"{{ rows }}\" cols=\"{{ cols }}\">{{ value|e }}</textarea>\n{% endmacro %}\n```\n\nEach macro argument can have a default value (here `text` is the default value for `type` if not provided in the call).\n\nMacros differ from native PHP functions in a few ways:\n\n- Arguments of a macro are always optional.\n- If extra positional arguments are passed to a macro, they end up in the special `varargs` variable as a list of values.\n\nBut as with PHP functions, macros don’t have access to the current template variables.\n\nTip\n\nYou can pass the whole context as an argument by using the special `_context` variable.\n\n## Importing Macros\n\nThere are two ways to import macros. You can import the complete template containing the macros into a local variable (via the `import` tag) or only import specific macros from the template (via the `from` tag).\n\nTo import all macros from a template into a local variable, use the `import` tag:\n\n``` php\n{% import \"forms.html\" as forms %}\n```\n\nThe above `import` call imports the `forms.html` file (which can contain only macros, or a template and some macros), and import the macros as items of the `forms` local variable.\n\nThe macros can then be called at will in the *current* template:\n\n``` php\n<p>{{ forms.input('username') }}</p>\n<p>{{ forms.input('password', null, 'password') }}</p>\n```\n\nAlternatively you can import names from the template into the current namespace via the `from` tag:\n\n``` php\n{% from 'forms.html' import input as input_field, textarea %}\n\n<p>{{ input_field('password', '', 'password') }}</p>\n<p>{{ textarea('comment') }}</p>\n```\n\nTip\n\nWhen macro usages and definitions are in the same template, you don’t need to import the macros as they are automatically available under the special `_self` variable:\n\n``` php\n<p>{{ _self.input('password', '', 'password') }}</p>\n\n{% macro input(name, value, type = \"text\", size = 20) %}\n    <input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size }}\"/>\n{% endmacro %}\n```\n\n## Macros Scoping\n\nThe scoping rules are the same whether you imported macros via `import` or `from`.\n\nImported macros are always **local** to the current template. It means that macros are available in all blocks and other macros defined in the current template, but they are not available in included templates or child templates; you need to explicitly re-import macros in each template.\n\nImported macros are not available in the body of `embed` tags, you need to explicitly re-import macros inside the tag.\n\nWhen calling `import` or `from` from a `block` tag, the imported macros are only defined in the current block and they override macros defined at the template level with the same names.\n\nWhen calling `import` or `from` from a `macro` tag, the imported macros are only defined in the current macro and they override macros defined at the template level with the same names.\n\n## Checking if a Macro is defined\n\nYou can check if a macro is defined via the `defined` test:\n\n``` php\n{% import \"macros.twig\" as macros %}\n\n{% from \"macros.twig\" import hello %}\n\n{% if macros.hello is defined -%}\n    OK\n{% endif %}\n\n{% if hello is defined -%}\n    OK\n{% endif %}\n```\n\n## Named Macro End-Tags\n\nTwig allows you to put the name of the macro after the end tag for better readability (the name after the `endmacro` word must match the macro name):\n\n``` php\n{% macro input() %}\n    ...\n{% endmacro input %}\n```\n\n[« include](include \"include\") \\| [sandbox »](sandbox \"sandbox\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/macro.html](https://twig.symfony.com/doc/3.x/tags/macro.html)"
- name: map
  id: filters/map
  summary: The map filter applies an arrow function to the elements of a sequence or a mapping
  description: "# map\n\nThe `map` filter applies an arrow function to the elements of a sequence or a mapping. The arrow function receives the value of the sequence or mapping:\n\n``` php\n{% set people = [\n    {first: \"Bob\", last: \"Smith\"},\n    {first: \"Alice\", last: \"Dupond\"},\n] %}\n\n{{ people|map(p => \"#{p.first} #{p.last}\")|join(', ') }}\n{# outputs Bob Smith, Alice Dupond #}\n```\n\nThe arrow function also receives the key as a second argument:\n\n``` php\n{% set people = {\n    \"Bob\": \"Smith\",\n    \"Alice\": \"Dupond\",\n} %}\n\n{{ people|map((last, first) => \"#{first} #{last}\")|join(', ') }}\n{# outputs Bob Smith, Alice Dupond #}\n```\n\nNote that the arrow function has access to the current context.\n\n## Arguments\n\n- `arrow`: The arrow function\n\n[« lower](lower \"lower\") \\| [markdown_to_html »](markdown_to_html \"markdown_to_html\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/map.html](https://twig.symfony.com/doc/3.x/filters/map.html)"
- name: markdown_to_html
  id: filters/markdown_to_html
  summary: The markdown_to_html filter is part of the MarkdownExtension which is not installed by default
  description: "# markdown_to_html\n\nThe `markdown_to_html` filter converts a block of Markdown to HTML:\n\n``` php\n{% apply markdown_to_html %}\nTitle\n======\n\nHello!\n{% endapply %}\n```\n\nNote that you can indent the Markdown content as leading whitespaces will be removed consistently before conversion:\n\n``` php\n{% apply markdown_to_html %}\n    Title\n    ======\n\n    Hello!\n{% endapply %}\n```\n\nYou can also use the filter on an included file or a variable:\n\n``` php\n{{ include('some_template.markdown.twig')|markdown_to_html }}\n\n{{ changelog|markdown_to_html }}\n```\n\nNote\n\nThe `markdown_to_html` filter is part of the `MarkdownExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/markdown-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Markdown\\MarkdownExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new MarkdownExtension());\n```\n\nIf you are not using Symfony, you must also register the extension runtime:\n\n``` php\nuse Twig\\Extra\\Markdown\\DefaultMarkdown;\nuse Twig\\Extra\\Markdown\\MarkdownRuntime;\nuse Twig\\RuntimeLoader\\RuntimeLoaderInterface;\n\n$twig->addRuntimeLoader(new class implements RuntimeLoaderInterface {\n    public function load($class) {\n        if (MarkdownRuntime::class === $class) {\n            return new MarkdownRuntime(new DefaultMarkdown());\n        }\n    }\n});\n```\n\nAfterwards you need to install a markdown library of your choice. Some of them are mentioned in the `require-dev` section of the `twig/markdown-extra` package.\n\n[« map](map \"map\") \\| [merge »](merge \"merge\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/markdown_to_html.html](https://twig.symfony.com/doc/3.x/filters/markdown_to_html.html)"
- name: max
  id: functions/max
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# max\n\n`max` returns the biggest value of a sequence or a set of values:\n\n``` php\n{{ max(1, 3, 2) }}\n{{ max([1, 3, 2]) }}\n```\n\nWhen called with a mapping, max ignores keys and only compares values:\n\n``` php\n{{ max({2: \"e\", 1: \"a\", 3: \"b\", 5: \"d\", 4: \"c\"}) }}\n{# returns \"e\" #}\n```\n\n[« include](include \"include\") \\| [min »](min \"min\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/max.html](https://twig.symfony.com/doc/3.x/functions/max.html)"
- name: merge
  id: filters/merge
  summary: New values are added at the end of the existing ones
  description: "# merge\n\nThe `merge` filter merges an array with another array:\n\n``` php\n{% set values = [1, 2] %}\n\n{% set values = values|merge(['apple', 'orange']) %}\n\n{# values now contains [1, 2, 'apple', 'orange'] #}\n```\n\nNew values are added at the end of the existing ones.\n\nThe `merge` filter also works on hashes:\n\n``` php\n{% set items = { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'unknown' } %}\n\n{% set items = items|merge({ 'peugeot': 'car', 'renault': 'car' }) %}\n\n{# items now contains { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'car', 'renault': 'car' } #}\n```\n\nFor hashes, the merging process occurs on the keys: if the key does not already exist, it is added but if the key already exists, its value is overridden.\n\nTip\n\nIf you want to ensure that some values are defined in an array (by given default values), reverse the two elements in the call:\n\n``` php\n{% set items = { 'apple': 'fruit', 'orange': 'fruit' } %}\n\n{% set items = { 'apple': 'unknown' }|merge(items) %}\n\n{# items now contains { 'apple': 'fruit', 'orange': 'fruit' } #}\n```\n\nNote\n\nInternally, Twig uses the PHP [array_merge](https://secure.php.net/array_merge) function. It supports Traversable objects by transforming those to arrays.\n\n[« markdown_to_html](markdown_to_html \"markdown_to_html\") \\| [nl2br »](nl2br \"nl2br\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/merge.html](https://twig.symfony.com/doc/3.x/filters/merge.html)"
- name: min
  id: functions/min
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# min\n\n`min` returns the lowest value of a sequence or a set of values:\n\n``` php\n{{ min(1, 3, 2) }}\n{{ min([1, 3, 2]) }}\n```\n\nWhen called with a mapping, min ignores keys and only compares values:\n\n``` php\n{{ min({2: \"e\", 3: \"a\", 1: \"b\", 5: \"d\", 4: \"c\"}) }}\n{# returns \"a\" #}\n```\n\n[« max](max \"max\") \\| [parent »](parent \"parent\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/min.html](https://twig.symfony.com/doc/3.x/functions/min.html)"
- name: nl2br
  id: filters/nl2br
  summary: The nl2br filter pre-escapes the input before applying the transformation
  description: "# nl2br\n\nThe `nl2br` filter inserts HTML line breaks before all newlines in a string:\n\n``` php\n{{ \"I like Twig.\\nYou will like it too.\"|nl2br }}\n{# outputs\n\n    I like Twig.<br />\n    You will like it too.\n\n#}\n```\n\nNote\n\nThe `nl2br` filter pre-escapes the input before applying the transformation.\n\n[« merge](merge \"merge\") \\| [number_format »](number_format \"number_format\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/nl2br.html](https://twig.symfony.com/doc/3.x/filters/nl2br.html)"
- name: 'null'
  id: tests/null
  summary: none is an alias for null
  description: "# null\n\n`null` returns `true` if the variable is `null`:\n\n``` php\n{{ var is null }}\n```\n\nNote\n\n`none` is an alias for `null`.\n\n[« iterable](iterable \"iterable\") \\| [odd »](odd \"odd\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/null.html](https://twig.symfony.com/doc/3.x/tests/null.html)"
- name: number_format
  id: filters/number_format
  summary: The number_format filter formats numbers
  description: "# number_format\n\nThe `number_format` filter formats numbers. It is a wrapper around PHP’s [number_format](https://secure.php.net/number_format) function:\n\n``` php\n{{ 200.35|number_format }}\n```\n\nYou can control the number of decimal places, decimal point, and thousands separator using the additional arguments:\n\n``` php\n{{ 9800.333|number_format(2, '.', ',') }}\n```\n\nTo format negative numbers or math calculation, wrap the previous statement with parentheses (needed because of Twig’s [precedence of operators](../templates#twig-expressions)):\n\n``` php\n{{ -9800.333|number_format(2, '.', ',') }}{# outputs : -9 #}\n{{ (-9800.333)|number_format(2, '.', ',') }}{# outputs : -9,800.33 #}\n{{  1 + 0.2|number_format(2) }}{# outputs : 1.2 #}\n{{ (1 + 0.2)|number_format(2) }}{# outputs : 1.20 #}\n```\n\nIf no formatting options are provided then Twig will use the default formatting options of:\n\n- 0 decimal places.\n- `.` as the decimal point.\n- `,` as the thousands separator.\n\nThese defaults can be changed through the core extension:\n\n``` php\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setNumberFormat(3, '.', ',');\n```\n\nThe defaults set for `number_format` can be over-ridden upon each call using the additional parameters.\n\n## Arguments\n\n- `decimal`: The number of decimal points to display\n- `decimal_point`: The character(s) to use for the decimal point\n- `thousand_sep`: The character(s) to use for the thousands separator\n\n[« nl2br](nl2br \"nl2br\") \\| [raw »](raw \"raw\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/number_format.html](https://twig.symfony.com/doc/3.x/filters/number_format.html)"
- name: odd
  id: tests/odd
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# odd\n\n`odd` returns `true` if the given number is odd:\n\n``` php\n{{ var is odd }}\n```\n\nSee also\n\n[even](even)\n\n[« null](null \"null\") \\| [same as »](sameas \"same as\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/odd.html](https://twig.symfony.com/doc/3.x/tests/odd.html)"
- name: parent
  id: functions/parent
  summary: The parent() call will return the content of the sidebar block as defined in the base.html template
  description: "# parent\n\nWhen a template uses inheritance, it’s possible to render the contents of the parent block when overriding a block by using the `parent` function:\n\n``` php\n{% extends \"base.html\" %}\n\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\nThe `parent()` call will return the content of the `sidebar` block as defined in the `base.html` template.\n\nSee also\n\n[extends](../tags/extends), [block](block), [block](../tags/block)\n\n[« min](min \"min\") \\| [random »](random \"random\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/parent.html](https://twig.symfony.com/doc/3.x/functions/parent.html)"
- name: random
  id: functions/random
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# random\n\nThe `random` function returns a random value depending on the supplied parameter type:\n\n- a random item from a sequence;\n- a random character from a string;\n- a random integer between 0 and the integer parameter (inclusive).\n- a random integer between the integer parameter (when negative) and 0 (inclusive).\n- a random integer between the first integer and the second integer parameter (inclusive).\n\n``` php\n{{ random(['apple', 'orange', 'citrus']) }}{# example output: orange #}\n{{ random('ABC') }}{# example output: C #}\n{{ random() }}{# example output: 15386094 (works as the native PHP mt_rand function) #}\n{{ random(5) }}{# example output: 3 #}\n{{ random(50, 100) }}{# example output: 63 #}\n```\n\n## Arguments\n\n- `values`: The values\n- `max`: The max value when values is an integer\n\n[« parent](parent \"parent\") \\| [range »](range \"range\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/random.html](https://twig.symfony.com/doc/3.x/functions/random.html)"
- name: range
  id: functions/range
  summary: The range function works as the native PHP range function
  description: "# range\n\nReturns a list containing an arithmetic progression of integers:\n\n``` php\n{% for i in range(0, 3) %}\n{{ i }},\n{% endfor %}\n\n{# outputs 0, 1, 2, 3, #}\n```\n\nWhen step is given (as the third parameter), it specifies the increment (or decrement for negative values):\n\n``` php\n{% for i in range(0, 6, 2) %}\n{{ i }},\n{% endfor %}\n\n{# outputs 0, 2, 4, 6, #}\n```\n\nNote\n\nNote that if the start is greater than the end, `range` assumes a step of `-1`:\n\n``` php\n{% for i in range(3, 0) %}\n{{ i }},\n{% endfor %}\n\n{# outputs 3, 2, 1, 0, #}\n```\n\nThe Twig built-in `..` operator is just syntactic sugar for the `range` function (with a step of `1`, or `-1` if the start is greater than the end):\n\n``` php\n{% for i in 0..3 %}\n{{ i }},\n{% endfor %}\n```\n\nTip\n\nThe `range` function works as the native PHP [range](https://secure.php.net/range) function.\n\n## Arguments\n\n- `low`: The first value of the sequence.\n- `high`: The highest possible value of the sequence.\n- `step`: The increment between elements of the sequence.\n\n[« random](random \"random\") \\| [source »](source \"source\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/range.html](https://twig.symfony.com/doc/3.x/functions/range.html)"
- name: raw
  id: filters/raw
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# raw\n\nThe `raw` filter marks the value as being “safe”, which means that in an environment with automatic escaping enabled this variable will not be escaped if `raw` is the last filter applied to it:\n\n``` php\n{% autoescape %}\n{{ var|raw }}{# var won't be escaped #}\n{% endautoescape %}\n```\n\n[« number_format](number_format \"number_format\") \\| [reduce »](reduce \"reduce\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/raw.html](https://twig.symfony.com/doc/3.x/filters/raw.html)"
- name: Recipes
  id: recipes
  summary: Deprecated features generate deprecation notices (via a call to the trigger_error() PHP function)
  description: "# Recipes\n\n## Displaying Deprecation Notices\n\nDeprecated features generate deprecation notices (via a call to the `trigger_error()` PHP function). By default, they are silenced and never displayed nor logged.\n\nTo remove all deprecated feature usages from your templates, write and run a script along the lines of the following:\n\n``` php\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$twig = create_your_twig_env();\n\n$deprecations = new \\Twig\\Util\\DeprecationCollector($twig);\n\nprint_r($deprecations->collectDir(__DIR__.'/templates'));\n```\n\nThe `collectDir()` method compiles all templates found in a directory, catches deprecation notices, and return them.\n\nTip\n\nIf your templates are not stored on the filesystem, use the `collect()` method instead. `collect()` takes a `Traversable` which must return template names as keys and template contents as values (as done by `\\Twig\\Util\\TemplateDirIterator`).\n\nHowever, this code won’t find all deprecations (like using deprecated some Twig classes). To catch all notices, register a custom error handler like the one below:\n\n``` php\n$deprecations = [];\nset_error_handler(function ($type, $msg) use (&$deprecations) {\n    if (E_USER_DEPRECATED === $type) {\n        $deprecations[] = $msg;\n    }\n});\n\n// run your application\n\nprint_r($deprecations);\n```\n\nNote that most deprecation notices are triggered during **compilation**, so they won’t be generated when templates are already cached.\n\nTip\n\nIf you want to manage the deprecation notices from your PHPUnit tests, have a look at the [symfony/phpunit-bridge](https://github.com/symfony/phpunit-bridge) package, which eases the process.\n\n## Making a Layout conditional\n\nWorking with Ajax means that the same content is sometimes displayed as is, and sometimes decorated with a layout. As Twig layout template names can be any valid expression, you can pass a variable that evaluates to `true` when the request is made via Ajax and choose the layout accordingly:\n\n``` php\n{% extends request.ajax ? \"base_ajax.html\" : \"base.html\" %}\n\n{% block content %}\n    This is the content to be displayed.\n{% endblock %}\n```\n\n## Making an Include dynamic\n\nWhen including a template, its name does not need to be a string. For instance, the name can depend on the value of a variable:\n\n``` php\n{% include var ~ '_foo.html' %}\n```\n\nIf `var` evaluates to `index`, the `index_foo.html` template will be rendered.\n\nAs a matter of fact, the template name can be any valid expression, such as the following:\n\n``` php\n{% include var|default('index') ~ '_foo.html' %}\n```\n\n## Overriding a Template that also extends itself\n\nA template can be customized in two different ways:\n\n- *Inheritance*: A template *extends* a parent template and overrides some blocks;\n- *Replacement*: If you use the filesystem loader, Twig loads the first template it finds in a list of configured directories; a template found in a directory *replaces* another one from a directory further in the list.\n\nBut how do you combine both: *replace* a template that also extends itself (aka a template in a directory further in the list)?\n\nLet’s say that your templates are loaded from both `.../templates/mysite` and `.../templates/default` in this order. The `page.twig` template, stored in `.../templates/default` reads as follows:\n\n``` php\n{# page.twig #}\n{% extends \"layout.twig\" %}\n\n{% block content %}\n{% endblock %}\n```\n\nYou can replace this template by putting a file with the same name in `.../templates/mysite`. And if you want to extend the original template, you might be tempted to write the following:\n\n``` php\n{# page.twig in .../templates/mysite #}\n{% extends \"page.twig\" %}{# from .../templates/default #}\n```\n\nHowever, this will not work as Twig will always load the template from `.../templates/mysite`.\n\nIt turns out it is possible to get this to work, by adding a directory right at the end of your template directories, which is the parent of all of the other directories: `.../templates` in our case. This has the effect of making every template file within our system uniquely addressable. Most of the time you will use the “normal” paths, but in the special case of wanting to extend a template with an overriding version of itself we can reference its parent’s full, unambiguous template path in the extends tag:\n\n``` php\n{# page.twig in .../templates/mysite #}\n{% extends \"default/page.twig\" %}{# from .../templates #}\n```\n\nNote\n\nThis recipe was inspired by the following Django wiki page: [https://code.djangoproject.com/wiki/ExtendingTemplates](https://code.djangoproject.com/wiki/ExtendingTemplates)\n\n## Customizing the Syntax\n\nTwig allows some syntax customization for the block delimiters. It’s **not** recommended to use this feature as templates will be tied with your custom syntax. But for specific projects, it can make sense to change the defaults.\n\nTo change the block delimiters, you need to create your own lexer object:\n\n``` php\n$twig = new \\Twig\\Environment(...);\n\n$lexer = new \\Twig\\Lexer($twig, [\n    'tag_comment'   => ['{#', '#}'],\n    'tag_block'     => ['{%', '%}'],\n    'tag_variable'  => ['{{', '}}'],\n    'interpolation' => ['#{', '}'],\n]);\n$twig->setLexer($lexer);\n```\n\nHere are some configuration example that simulates some other template engines syntax:\n\n``` php\n// Ruby erb syntax\n$lexer = new \\Twig\\Lexer($twig, [\n    'tag_comment'  => ['<%#', '%>'],\n    'tag_block'    => ['<%', '%>'],\n    'tag_variable' => ['<%=', '%>'],\n]);\n\n// SGML Comment Syntax\n$lexer = new \\Twig\\Lexer($twig, [\n    'tag_comment'  => ['<!--#', '-->'],\n    'tag_block'    => ['<!--', '-->'],\n    'tag_variable' => ['${', '}'],\n]);\n\n// Smarty like\n$lexer = new \\Twig\\Lexer($twig, [\n    'tag_comment'  => ['{*', '*}'],\n    'tag_block'    => ['{', '}'],\n    'tag_variable' => ['{$', '}'],\n]);\n```\n\n## Using dynamic Object Properties\n\nWhen Twig encounters a variable like `article.title`, it tries to find a `title` public property in the `article` object.\n\nIt also works if the property does not exist but is rather defined dynamically thanks to the magic `__get()` method; you need to also implement the `__isset()` magic method like shown in the following snippet of code:\n\n``` php\nclass Article\n{\n    public function __get($name)\n    {\n        if ('title' == $name) {\n            return 'The title';\n        }\n\n        // throw some kind of error\n    }\n\n    public function __isset($name)\n    {\n        if ('title' == $name) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n## Accessing the parent Context in Nested Loops\n\nSometimes, when using nested loops, you need to access the parent context. The parent context is always accessible via the `loop.parent` variable. For instance, if you have the following template data:\n\n``` php\n$data = [\n    'topics' => [\n        'topic1' => ['Message 1 of topic 1', 'Message 2 of topic 1'],\n        'topic2' => ['Message 1 of topic 2', 'Message 2 of topic 2'],\n    ],\n];\n```\n\nAnd the following template to display all messages in all topics:\n\n``` php\n{% for topic, messages in topics %}\n    * {{ loop.index }}: {{ topic }}\n{% for message in messages %}\n      - {{ loop.parent.loop.index }}.{{ loop.index }}: {{ message }}\n{% endfor %}\n{% endfor %}\n```\n\nThe output will be similar to:\n\n``` php\n* 1: topic1\n  - 1.1: The message 1 of topic 1\n  - 1.2: The message 2 of topic 1\n* 2: topic2\n  - 2.1: The message 1 of topic 2\n  - 2.2: The message 2 of topic 2\n```\n\nIn the inner loop, the `loop.parent` variable is used to access the outer context. So, the index of the current `topic` defined in the outer for loop is accessible via the `loop.parent.loop.index` variable.\n\n## Defining undefined Functions and Filters on the Fly\n\nWhen a function (or a filter) is not defined, Twig defaults to throw a `\\Twig\\Error\\SyntaxError` exception. However, it can also call a [callback](https://secure.php.net/manual/en/function.is-callable.php) (any valid PHP callable) which should return a function (or a filter).\n\nFor filters, register callbacks with `registerUndefinedFilterCallback()`. For functions, use `registerUndefinedFunctionCallback()`:\n\n``` php\n// auto-register all native PHP functions as Twig functions\n// don't try this at home as it's not secure at all!\n$twig->registerUndefinedFunctionCallback(function ($name) {\n    if (function_exists($name)) {\n        return new \\Twig\\TwigFunction($name, $name);\n    }\n\n    return false;\n});\n```\n\nIf the callable is not able to return a valid function (or filter), it must return `false`.\n\nIf you register more than one callback, Twig will call them in turn until one does not return `false`.\n\nTip\n\nAs the resolution of functions and filters is done during compilation, there is no overhead when registering these callbacks.\n\n## Validating the Template Syntax\n\nWhen template code is provided by a third-party (through a web interface for instance), it might be interesting to validate the template syntax before saving it. If the template code is stored in a `$template` variable, here is how you can do it:\n\n``` php\ntry {\n    $twig->parse($twig->tokenize(new \\Twig\\Source($template)));\n\n    // the $template is valid\n} catch (\\Twig\\Error\\SyntaxError $e) {\n    // $template contains one or more syntax errors\n}\n```\n\nIf you iterate over a set of files, you can pass the filename to the `tokenize()` method to get the filename in the exception message:\n\n``` php\nforeach ($files as $file) {\n    try {\n        $twig->parse($twig->tokenize(new \\Twig\\Source($template, $file->getFilename(), $file)));\n\n        // the $template is valid\n    } catch (\\Twig\\Error\\SyntaxError $e) {\n        // $template contains one or more syntax errors\n    }\n}\n```\n\nNote\n\nThis method won’t catch any sandbox policy violations because the policy is enforced during template rendering (as Twig needs the context for some checks like allowed methods on objects).\n\n## Refreshing modified Templates when OPcache or APC is enabled\n\nWhen using OPcache with `opcache.validate_timestamps` set to `0` or APC with `apc.stat` set to `0` and Twig cache enabled, clearing the template cache won’t update the cache.\n\nTo get around this, force Twig to invalidate the bytecode cache:\n\n``` php\n$twig = new \\Twig\\Environment($loader, [\n    'cache' => new \\Twig\\Cache\\FilesystemCache('/some/cache/path', \\Twig\\Cache\\FilesystemCache::FORCE_BYTECODE_INVALIDATION),\n    // ...\n]);\n```\n\n## Reusing a stateful Node Visitor\n\nWhen attaching a visitor to a `\\Twig\\Environment` instance, Twig uses it to visit *all* templates it compiles. If you need to keep some state information around, you probably want to reset it when visiting a new template.\n\nThis can be achieved with the following code:\n\n``` php\nprotected $someTemplateState = [];\n\npublic function enterNode(\\Twig\\Node\\Node $node, \\Twig\\Environment $env)\n{\n    if ($node instanceof \\Twig\\Node\\ModuleNode) {\n        // reset the state as we are entering a new template\n        $this->someTemplateState = [];\n    }\n\n    // ...\n\n    return $node;\n}\n```\n\n## Using a Database to store Templates\n\nIf you are developing a CMS, templates are usually stored in a database. This recipe gives you a simple PDO template loader you can use as a starting point for your own.\n\nFirst, let’s create a temporary in-memory SQLite3 database to work with:\n\n``` php\n$dbh = new PDO('sqlite::memory:');\n$dbh->exec('CREATE TABLE templates (name STRING, source STRING, last_modified INTEGER)');\n$base = '{% block content %}{% endblock %}';\n$index = '\n{% extends \"base.twig\" %}\n{% block content %}Hello {{ name }}{% endblock %}\n';\n$now = time();\n$dbh->prepare('INSERT INTO templates (name, source, last_modified) VALUES (?, ?, ?)')->execute(['base.twig', $base, $now]);\n$dbh->prepare('INSERT INTO templates (name, source, last_modified) VALUES (?, ?, ?)')->execute(['index.twig', $index, $now]);\n```\n\nWe have created a simple `templates` table that hosts two templates: `base.twig` and `index.twig`.\n\nNow, let’s define a loader able to use this database:\n\n``` php\nclass DatabaseTwigLoader implements \\Twig\\Loader\\LoaderInterface\n{\n    protected $dbh;\n\n    public function __construct(PDO $dbh)\n    {\n        $this->dbh = $dbh;\n    }\n\n    public function getSourceContext(string $name): Source\n    {\n        if (false === $source = $this->getValue('source', $name)) {\n            throw new \\Twig\\Error\\LoaderError(sprintf('Template \"%s\" does not exist.', $name));\n        }\n\n        return new \\Twig\\Source($source, $name);\n    }\n\n    public function exists(string $name)\n    {\n        return $name === $this->getValue('name', $name);\n    }\n\n    public function getCacheKey(string $name): string\n    {\n        return $name;\n    }\n\n    public function isFresh(string $name, int $time): bool\n    {\n        if (false === $lastModified = $this->getValue('last_modified', $name)) {\n            return false;\n        }\n\n        return $lastModified <= $time;\n    }\n\n    protected function getValue($column, $name)\n    {\n        $sth = $this->dbh->prepare('SELECT '.$column.' FROM templates WHERE name = :name');\n        $sth->execute([':name' => (string) $name]);\n\n        return $sth->fetchColumn();\n    }\n}\n```\n\nFinally, here is an example on how you can use it:\n\n``` php\n$loader = new DatabaseTwigLoader($dbh);\n$twig = new \\Twig\\Environment($loader);\n\necho $twig->render('index.twig', ['name' => 'Fabien']);\n```\n\n## Using different Template Sources\n\nThis recipe is the continuation of the previous one. Even if you store the contributed templates in a database, you might want to keep the original/base templates on the filesystem. When templates can be loaded from different sources, you need to use the `\\Twig\\Loader\\ChainLoader` loader.\n\nAs you can see in the previous recipe, we reference the template in the exact same way as we would have done it with a regular filesystem loader. This is the key to be able to mix and match templates coming from the database, the filesystem, or any other loader for that matter: the template name should be a logical name, and not the path from the filesystem:\n\n``` php\n$loader1 = new DatabaseTwigLoader($dbh);\n$loader2 = new \\Twig\\Loader\\ArrayLoader([\n    'base.twig' => '{% block content %}{% endblock %}',\n]);\n$loader = new \\Twig\\Loader\\ChainLoader([$loader1, $loader2]);\n\n$twig = new \\Twig\\Environment($loader);\n\necho $twig->render('index.twig', ['name' => 'Fabien']);\n```\n\nNow that the `base.twig` templates is defined in an array loader, you can remove it from the database, and everything else will still work as before.\n\n## Loading a Template from a String\n\nFrom a template, you can load a template stored in a string via the `template_from_string` function (via the `\\Twig\\Extension\\StringLoaderExtension` extension):\n\n``` php\n{{ include(template_from_string(\"Hello {{ name }}\")) }}\n```\n\nFrom PHP, it’s also possible to load a template stored in a string via `\\Twig\\Environment::createTemplate()`:\n\n``` php\n$template = $twig->createTemplate('hello {{ name }}');\necho $template->render(['name' => 'Fabien']);\n```\n\n## Using Twig and AngularJS in the same Templates\n\nMixing different template syntaxes in the same file is not a recommended practice as both AngularJS and Twig use the same delimiters in their syntax: `{{` and `}}`.\n\nStill, if you want to use AngularJS and Twig in the same template, there are two ways to make it work depending on the amount of AngularJS you need to include in your templates:\n\n- Escaping the AngularJS delimiters by wrapping AngularJS sections with the `{%`` ``verbatim`` ``%}` tag or by escaping each delimiter via `{{`` ``'{{'`` ``}}` and `{{`` ``'}}'`` ``}}`;\n\n- Changing the delimiters of one of the template engines (depending on which engine you introduced last):\n\n  - For AngularJS, change the interpolation tags using the `interpolateProvider` service, for instance at the module initialization time:\n\n    ``` php\n    angular.module('myApp', []).config(function($interpolateProvider) {\n        $interpolateProvider.startSymbol('{[').endSymbol(']}');\n    });\n    ```\n\n  - For Twig, change the delimiters via the `tag_variable` Lexer option:\n\n    ``` php\n    $env->setLexer(new \\Twig\\Lexer($env, [\n        'tag_variable' => ['{[', ']}'],\n    ]));\n    ```\n\n[« Deprecated Features](https://twig.symfony.com/doc/3.x/deprecated.html \"Deprecated Features\") \\| [Coding Standards »](coding_standards \"Coding Standards\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/recipes.html](https://twig.symfony.com/doc/3.x/recipes.html)"
- name: reduce
  id: filters/reduce
  summary: The reduce filter iteratively reduces a sequence or a mapping to a single value using an arrow function, so as to reduce it to a single value
  description: "# reduce\n\nThe `reduce` filter iteratively reduces a sequence or a mapping to a single value using an arrow function, so as to reduce it to a single value. The arrow function receives the return value of the previous iteration and the current value of the sequence or mapping:\n\n``` php\n{% set numbers = [1, 2, 3] %}\n\n{{ numbers|reduce((carry, v) => carry + v) }}\n{# output 6 #}\n```\n\nThe `reduce` filter takes an `initial` value as a second argument:\n\n``` php\n{{ numbers|reduce((carry, v) => carry + v, 10) }}\n{# output 16 #}\n```\n\nNote that the arrow function has access to the current context.\n\n## Arguments\n\n- `arrow`: The arrow function\n- `initial`: The initial value\n\n[« raw](raw \"raw\") \\| [replace »](replace \"replace\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/reduce.html](https://twig.symfony.com/doc/3.x/filters/reduce.html)"
- name: replace
  id: filters/replace
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# replace\n\nThe `replace` filter formats a given string by replacing the placeholders (placeholders are free-form):\n\n``` php\n{{ \"I like %this% and %that%.\"|replace({'%this%': foo, '%that%': \"bar\"}) }}\n\n{# outputs I like foo and bar\n   if the foo parameter equals to the foo string. #}\n\n{# using % as a delimiter is purely conventional and optional #}\n\n{{ \"I like this and --that--.\"|replace({'this': foo, '--that--': \"bar\"}) }}\n\n{# outputs I like foo and bar #}\n```\n\n## Arguments\n\n- `from`: The placeholder values\n\nSee also\n\n[format](format)\n\n[« reduce](reduce \"reduce\") \\| [reverse »](reverse \"reverse\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/replace.html](https://twig.symfony.com/doc/3.x/filters/replace.html)"
- name: reverse
  id: filters/reverse
  summary: For sequences and mappings, numeric keys are not preserved
  description: "# reverse\n\nThe `reverse` filter reverses a sequence, a mapping, or a string:\n\n``` php\n{% for user in users|reverse %}\n    ...\n{% endfor %}\n\n{{ '1234'|reverse }}\n\n{# outputs 4321 #}\n```\n\nTip\n\nFor sequences and mappings, numeric keys are not preserved. To reverse them as well, pass `true` as an argument to the `reverse` filter:\n\n``` php\n{% for key, value in {1: \"a\", 2: \"b\", 3: \"c\"}|reverse %}\n{{ key }}: {{ value }}\n{%- endfor %}\n\n{# output: 0: c    1: b    2: a #}\n\n{% for key, value in {1: \"a\", 2: \"b\", 3: \"c\"}|reverse(true) %}\n{{ key }}: {{ value }}\n{%- endfor %}\n\n{# output: 3: c    2: b    1: a #}\n```\n\nNote\n\nIt also works with objects implementing the [Traversable](https://secure.php.net/Traversable) interface.\n\n## Arguments\n\n- `preserve_keys`: Preserve keys when reversing a mapping or a sequence.\n\n[« replace](replace \"replace\") \\| [round »](round \"round\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/reverse.html](https://twig.symfony.com/doc/3.x/filters/reverse.html)"
- name: round
  id: filters/round
  summary: The // operator is equivalent to |round(0,`` ``'floor')
  description: "# round\n\nThe `round` filter rounds a number to a given precision:\n\n``` php\n{{ 42.55|round }}\n{# outputs 43 #}\n\n{{ 42.55|round(1, 'floor') }}\n{# outputs 42.5 #}\n```\n\nThe `round` filter takes two optional arguments; the first one specifies the precision (default is `0`) and the second the rounding method (default is `common`):\n\n- `common` rounds either up or down (rounds the value up to precision decimal places away from zero, when it is half way there – making 1.5 into 2 and -1.5 into -2);\n- `ceil` always rounds up;\n- `floor` always rounds down.\n\nNote\n\nThe `//` operator is equivalent to `|round(0,`` ``'floor')`.\n\n## Arguments\n\n- `precision`: The rounding precision\n- `method`: The rounding method\n\n[« reverse](reverse \"reverse\") \\| [slice »](slice \"slice\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/round.html](https://twig.symfony.com/doc/3.x/filters/round.html)"
- name: same as
  id: tests/sameas
  summary: same`` ``as checks if a variable is the same as another variable
  description: "# same as\n\n`same`` ``as` checks if a variable is the same as another variable. This is equivalent to `===` in PHP:\n\n``` php\n{% if foo.attribute is same as(false) %}\n    the foo attribute really is the 'false' PHP value\n{% endif %}\n```\n\n[« odd](odd \"odd\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/sameas.html](https://twig.symfony.com/doc/3.x/tests/sameas.html)"
- name: sandbox
  id: tags/sandbox
  summary: The sandbox tag is only available when the sandbox extension is enabled (see the Twig for Developers chapter)
  description: "# sandbox\n\nThe `sandbox` tag can be used to enable the sandboxing mode for an included template, when sandboxing is not enabled globally for the Twig environment:\n\n``` php\n{% sandbox %}\n{% include 'user.html' %}\n{% endsandbox %}\n```\n\nWarning\n\nThe `sandbox` tag is only available when the sandbox extension is enabled (see the [Twig for Developers](../api) chapter).\n\nNote\n\nThe `sandbox` tag can only be used to sandbox an include tag and it cannot be used to sandbox a section of a template. The following example won’t work:\n\n``` php\n{% sandbox %}\n{% for i in 1..2 %}\n{{ i }}\n{% endfor %}\n{% endsandbox %}\n```\n\n[« macro](macro \"macro\") \\| [set »](set \"set\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/sandbox.html](https://twig.symfony.com/doc/3.x/tags/sandbox.html)"
- name: set
  id: tags/set
  summary: Inside code blocks you can also assign values to variables
  description: "# set\n\nInside code blocks you can also assign values to variables. Assignments use the `set` tag and can have multiple targets.\n\nHere is how you can assign the `bar` value to the `foo` variable:\n\n``` php\n{% set foo = 'bar' %}\n```\n\nAfter the `set` call, the `foo` variable is available in the template like any other ones:\n\n``` php\n{# displays bar #}\n{{ foo }}\n```\n\nThe assigned value can be any valid [Twig expression](../templates#twig-expressions):\n\n``` php\n{% set foo = [1, 2] %}\n{% set foo = {'foo': 'bar'} %}\n{% set foo = 'foo' ~ 'bar' %}\n```\n\nSeveral variables can be assigned in one block:\n\n``` php\n{% set foo, bar = 'foo', 'bar' %}\n\n{# is equivalent to #}\n\n{% set foo = 'foo' %}\n{% set bar = 'bar' %}\n```\n\nThe `set` tag can also be used to ‘capture’ chunks of text:\n\n``` php\n{% set foo %}\n    <div id=\"pagination\">\n        ...\n    </div>\n{% endset %}\n```\n\nCaution\n\nIf you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text.\n\nNote\n\nNote that loops are scoped in Twig; therefore a variable declared inside a `for` loop is not accessible outside the loop itself:\n\n``` php\n{% for item in list %}\n{% set foo = item %}\n{% endfor %}\n\n{# foo is NOT available #}\n```\n\nIf you want to access the variable, just declare it before the loop:\n\n``` php\n{% set foo = \"\" %}\n{% for item in list %}\n{% set foo = item %}\n{% endfor %}\n\n{# foo is available #}\n```\n\n[« sandbox](sandbox \"sandbox\") \\| [use »](use \"use\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/set.html](https://twig.symfony.com/doc/3.x/tags/set.html)"
- name: slice
  id: filters/slice
  summary: The slice filter works as the array_slice PHP function for arrays and mb_substr for strings with a fallback to substr
  description: "# slice\n\nThe `slice` filter extracts a slice of a sequence, a mapping, or a string:\n\n``` php\n{% for i in [1, 2, 3, 4, 5]|slice(1, 2) %}\n{# will iterate over 2 and 3 #}\n{% endfor %}\n\n{{ '12345'|slice(1, 2) }}\n\n{# outputs 23 #}\n```\n\nYou can use any valid expression for both the start and the length:\n\n``` php\n{% for i in [1, 2, 3, 4, 5]|slice(start, length) %}\n{# ... #}\n{% endfor %}\n```\n\nAs syntactic sugar, you can also use the `[]` notation:\n\n``` php\n{% for i in [1, 2, 3, 4, 5][start:length] %}\n{# ... #}\n{% endfor %}\n\n{{ '12345'[1:2] }}{# will display \"23\" #}\n\n{# you can omit the first argument -- which is the same as 0 #}\n{{ '12345'[:2] }}{# will display \"12\" #}\n\n{# you can omit the last argument -- which will select everything till the end #}\n{{ '12345'[2:] }}{# will display \"345\" #}\n```\n\nThe `slice` filter works as the [array_slice](https://secure.php.net/array_slice) PHP function for arrays and [mb_substr](https://secure.php.net/mb-substr) for strings with a fallback to [substr](https://secure.php.net/substr).\n\nIf the start is non-negative, the sequence will start at that start in the variable. If start is negative, the sequence will start that far from the end of the variable.\n\nIf length is given and is positive, then the sequence will have up to that many elements in it. If the variable is shorter than the length, then only the available variable elements will be present. If length is given and is negative then the sequence will stop that many elements from the end of the variable. If it is omitted, then the sequence will have everything from offset up until the end of the variable.\n\nNote\n\nIt also works with objects implementing the [Traversable](https://secure.php.net/manual/en/class.traversable.php) interface.\n\n## Arguments\n\n- `start`: The start of the slice\n- `length`: The size of the slice\n- `preserve_keys`: Whether to preserve key or not (when the input is an array)\n\n[« round](round \"round\") \\| [sort »](sort \"sort\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/slice.html](https://twig.symfony.com/doc/3.x/filters/slice.html)"
- name: sort
  id: filters/sort
  summary: Internally, Twig uses the PHP asort function to maintain index association
  description: "# sort\n\nThe `sort` filter sorts an array:\n\n``` php\n{% for user in users|sort %}\n    ...\n{% endfor %}\n```\n\nNote\n\nInternally, Twig uses the PHP [asort](https://secure.php.net/asort) function to maintain index association. It supports Traversable objects by transforming those to arrays.\n\nYou can pass an arrow function to sort the array:\n\n``` php\n{% set fruits = [\n    { name: 'Apples', quantity: 5 },\n    { name: 'Oranges', quantity: 2 },\n    { name: 'Grapes', quantity: 4 },\n] %}\n\n{% for fruit in fruits|sort((a, b) => a.quantity <=> b.quantity)|column('name') %}\n    {{ fruit }}\n{% endfor %}\n\n{# output in this order: Oranges, Grapes, Apples #}\n```\n\nNote the usage of the [spaceship](https://www.php.net/manual/en/language.operators.comparison.php) operator to simplify the comparison.\n\n## Arguments\n\n- `arrow`: An arrow function\n\n[« slice](slice \"slice\") \\| [spaceless »](spaceless \"spaceless\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/sort.html](https://twig.symfony.com/doc/3.x/filters/sort.html)"
- name: source
  id: functions/source
  summary: The function uses the same template loaders as the ones used to include templates
  description: "# source\n\nThe `source` function returns the content of a template without rendering it:\n\n``` php\n{{ source('template.html') }}\n{{ source(some_var) }}\n```\n\nWhen you set the `ignore_missing` flag, Twig will return an empty string if the template does not exist:\n\n``` php\n{{ source('template.html', ignore_missing = true) }}\n```\n\nThe function uses the same template loaders as the ones used to include templates. So, if you are using the filesystem loader, the templates are looked for in the paths defined by it.\n\n## Arguments\n\n- `name`: The name of the template to read\n- `ignore_missing`: Whether to ignore missing templates or not\n\n[« range](range \"range\") \\| [country_timezones »](country_timezones \"country_timezones\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/source.html](https://twig.symfony.com/doc/3.x/functions/source.html)"
- name: spaceless
  id: filters/spaceless
  summary: This tag is not meant to “optimize” the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances
  description: "# spaceless\n\nUse the `spaceless` filter to remove whitespace *between HTML tags*, not whitespace within HTML tags or whitespace in plain text:\n\n``` php\n{{\n    \"<div>\n        <strong>foo</strong>\n    </div>\n    \"|spaceless }}\n\n{# output will be <div><strong>foo</strong></div> #}\n```\n\nYou can combine `spaceless` with the `apply` tag to apply the transformation on large amounts of HTML:\n\n``` php\n{% apply spaceless %}\n    <div>\n        <strong>foo</strong>\n    </div>\n{% endapply %}\n\n{# output will be <div><strong>foo</strong></div> #}\n```\n\nThis tag is not meant to “optimize” the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances.\n\nCaution\n\nAs the filter uses a regular expression behind the scenes, its performance is directly related to the text size you are working on (remember that filters are executed at runtime).\n\nTip\n\nIf you want to optimize the size of the generated HTML content, gzip compress the output instead.\n\nTip\n\nIf you want to create a tag that actually removes all extra whitespace in an HTML string, be warned that this is not as easy as it seems to be (think of `textarea` or `pre` tags for instance). Using a third-party library like Tidy is probably a better idea.\n\nTip\n\nFor more information on whitespace control, read the [dedicated section](../templates#templates-whitespace-control) of the documentation and learn how you can also use the whitespace control modifier on your tags.\n\n[« sort](sort \"sort\") \\| [split »](split \"split\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/spaceless.html](https://twig.symfony.com/doc/3.x/filters/spaceless.html)"
- name: split
  id: filters/split
  summary: If the delimiter is an empty string, then value will be split by equal chunks
  description: "# split\n\nThe `split` filter splits a string by the given delimiter and returns a list of strings:\n\n``` php\n{% set foo = \"one,two,three\"|split(',') %}\n{# foo contains ['one', 'two', 'three'] #}\n```\n\nYou can also pass a `limit` argument:\n\n- If `limit` is positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string;\n- If `limit` is negative, all components except the last -limit are returned;\n- If `limit` is zero, then this is treated as 1.\n\n``` php\n{% set foo = \"one,two,three,four,five\"|split(',', 3) %}\n{# foo contains ['one', 'two', 'three,four,five'] #}\n```\n\nIf the `delimiter` is an empty string, then value will be split by equal chunks. Length is set by the `limit` argument (one character by default).\n\n``` php\n{% set foo = \"123\"|split('') %}\n{# foo contains ['1', '2', '3'] #}\n\n{% set bar = \"aabbcc\"|split('', 2) %}\n{# bar contains ['aa', 'bb', 'cc'] #}\n```\n\nNote\n\nInternally, Twig uses the PHP [explode](https://secure.php.net/explode) or [str_split](https://secure.php.net/str_split) (if delimiter is empty) functions for string splitting.\n\n## Arguments\n\n- `delimiter`: The delimiter\n- `limit`: The limit argument\n\n[« spaceless](spaceless \"spaceless\") \\| [striptags »](striptags \"striptags\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/split.html](https://twig.symfony.com/doc/3.x/filters/split.html)"
- name: striptags
  id: filters/striptags
  summary: In this example, the <br/>, <br>, <p>, and </p> tags won’t be removed from the string
  description: "# striptags\n\nThe `striptags` filter strips SGML/XML tags and replace adjacent whitespace by one space:\n\n``` php\n{{ some_html|striptags }}\n```\n\nYou can also provide tags which should not be stripped:\n\n``` php\n{{ some_html|striptags('<br><p>') }}\n```\n\nIn this example, the `<br/>`, `<br>`, `<p>`, and `</p>` tags won’t be removed from the string.\n\nNote\n\nInternally, Twig uses the PHP [strip_tags](https://secure.php.net/strip_tags) function.\n\n## Arguments\n\n- `allowable_tags`: Tags which should not be stripped\n\n[« split](split \"split\") \\| [timezone_name »](timezone_name \"timezone_name\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/striptags.html](https://twig.symfony.com/doc/3.x/filters/striptags.html)"
- name: Tags
  id: tags/index
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# Tags\n\n- [`apply`](apply)\n- [`autoescape`](autoescape)\n- [`block`](block)\n- [`deprecated`](deprecated)\n- [`do`](do)\n- [`embed`](embed)\n- [`extends`](extends)\n- [`flush`](flush)\n- [`for`](for)\n- [`from`](from)\n- [`if`](if)\n- [`import`](import)\n- [`include`](include)\n- [`macro`](macro)\n- [`sandbox`](sandbox)\n- [`set`](set)\n- [`use`](use)\n- [`verbatim`](verbatim)\n- [`with`](with)\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/index.html](https://twig.symfony.com/doc/3.x/tags/index.html)"
- name: template_from_string
  id: functions/template_from_string
  summary: The template_from_string function is not available by default
  description: "# template_from_string\n\nThe `template_from_string` function loads a template from a string:\n\n``` php\n{{ include(template_from_string(\"Hello {{ name }}\")) }}\n{{ include(template_from_string(page.template)) }}\n```\n\nTo ease debugging, you can also give the template a name that will be part of any related error message:\n\n``` php\n{{ include(template_from_string(page.template, \"template for page \" ~ page.name)) }}\n```\n\nNote\n\nThe `template_from_string` function is not available by default. You must add the `\\Twig\\Extension\\StringLoaderExtension` extension explicitly when creating your Twig environment:\n\n``` php\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new \\Twig\\Extension\\StringLoaderExtension());\n```\n\nNote\n\nEven if you will probably always use the `template_from_string` function with the `include` function, you can use it with any tag or function that takes a template as an argument (like the `embed` or `extends` tags).\n\n## Arguments\n\n- `template`: The template\n- `name`: A name for the template\n\n[« country_timezones](country_timezones \"country_timezones\") \\| [Tests »](../tests/index \"Tests\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/functions/template_from_string.html](https://twig.symfony.com/doc/3.x/functions/template_from_string.html)"
- name: Tests
  id: tests/index
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# Tests\n\n- [`constant`](constant)\n- [`defined`](defined)\n- [`divisible`` ``by`](divisibleby)\n- [`empty`](empty)\n- [`even`](even)\n- [`iterable`](iterable)\n- [`null`](null)\n- [`odd`](odd)\n- [`same`` ``as`](sameas)\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tests/index.html](https://twig.symfony.com/doc/3.x/tests/index.html)"
- name: timezone_name
  id: filters/timezone_name
  summary: By default, the filter uses the current locale
  description: "# timezone_name\n\nThe `timezone_name` filter returns the timezone name given a timezone identifier:\n\n``` php\n{# Central European Time (Paris) #}\n{{ 'Europe/Paris'|timezone_name }}\n\n{# Pacific Time (Los Angeles) #}\n{{ 'America/Los_Angeles'|timezone_name }}\n```\n\nBy default, the filter uses the current locale. You can pass it explicitly:\n\n``` php\n{# heure du Pacifique nord-américain (Los Angeles) #}\n{{ 'America/Los_Angeles'|timezone_name('fr') }}\n```\n\nNote\n\nThe `timezone_name` filter is part of the `IntlExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/intl-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n## Arguments\n\n- `locale`: The locale\n\n[« striptags](striptags \"striptags\") \\| [title »](title \"title\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/timezone_name.html](https://twig.symfony.com/doc/3.x/filters/timezone_name.html)"
- name: title
  id: filters/title
  summary: The title filter returns a titlecased version of the value
  description: "# title\n\nThe `title` filter returns a titlecased version of the value. Words will start with uppercase letters, all remaining characters are lowercase:\n\n``` php\n{{ 'my first car'|title }}\n\n{# outputs 'My First Car' #}\n```\n\n[« timezone_name](timezone_name \"timezone_name\") \\| [trim »](trim \"trim\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/title.html](https://twig.symfony.com/doc/3.x/filters/title.html)"
- name: trim
  id: filters/trim
  summary: Internally, Twig uses the PHP trim, ltrim, and rtrim functions
  description: "# trim\n\nThe `trim` filter strips whitespace (or other characters) from the beginning and end of a string:\n\n``` php\n{{ '  I like Twig.  '|trim }}\n\n{# outputs 'I like Twig.' #}\n\n{{ '  I like Twig.'|trim('.') }}\n\n{# outputs '  I like Twig' #}\n\n{{ '  I like Twig.  '|trim(side='left') }}\n\n{# outputs 'I like Twig.  ' #}\n\n{{ '  I like Twig.  '|trim(' ', 'right') }}\n\n{# outputs '  I like Twig.' #}\n```\n\nNote\n\nInternally, Twig uses the PHP [trim](https://secure.php.net/trim), [ltrim](https://secure.php.net/ltrim), and [rtrim](https://secure.php.net/rtrim) functions.\n\n## Arguments\n\n- `character_mask`: The characters to strip\n- `side`: The default is to strip from the left and the right (both) sides, but left and right will strip from either the left side or right side only\n\n[« title](title \"title\") \\| [u »](u \"u\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/trim.html](https://twig.symfony.com/doc/3.x/filters/trim.html)"
- name: Twig for Developers
  id: api
  summary: This chapter describes the API to Twig and not the template language
  description: "# Twig for Developers\n\nThis chapter describes the API to Twig and not the template language. It will be most useful as reference to those implementing the template interface to the application and not those who are creating Twig templates.\n\n## Basics\n\nTwig uses a central object called the **environment** (of class `\\Twig\\Environment`). Instances of this class are used to store the configuration and extensions, and are used to load templates.\n\nMost applications create one `\\Twig\\Environment` object on application initialization and use that to load templates. In some cases, it might be useful to have multiple environments side by side, with different configurations.\n\nThe typical way to configure Twig to load templates for an application looks roughly like this:\n\n``` php\nrequire_once '/path/to/vendor/autoload.php';\n\n$loader = new \\Twig\\Loader\\FilesystemLoader('/path/to/templates');\n$twig = new \\Twig\\Environment($loader, [\n    'cache' => '/path/to/compilation_cache',\n]);\n```\n\nThis creates a template environment with a default configuration and a loader that looks up templates in the `/path/to/templates/` directory. Different loaders are available and you can also write your own if you want to load templates from a database or other resources.\n\nNote\n\nNotice that the second argument of the environment is an array of options. The `cache` option is a compilation cache directory, where Twig caches the compiled templates to avoid the parsing phase for sub-sequent requests. It is very different from the cache you might want to add for the evaluated templates. For such a need, you can use any available PHP cache library.\n\n## Rendering Templates\n\nTo load a template from a Twig environment, call the `load()` method which returns a `\\Twig\\TemplateWrapper` instance:\n\n``` php\n$template = $twig->load('index.html');\n```\n\nTo render the template with some variables, call the `render()` method:\n\n``` php\necho $template->render(['the' => 'variables', 'go' => 'here']);\n```\n\nNote\n\nThe `display()` method is a shortcut to output the rendered template.\n\nYou can also load and render the template in one fell swoop:\n\n``` php\necho $twig->render('index.html', ['the' => 'variables', 'go' => 'here']);\n```\n\nIf a template defines blocks, they can be rendered individually via the `renderBlock()` call:\n\n``` php\necho $template->renderBlock('block_name', ['the' => 'variables', 'go' => 'here']);\n```\n\n## Environment Options\n\nWhen creating a new `\\Twig\\Environment` instance, you can pass an array of options as the constructor second argument:\n\n``` php\n$twig = new \\Twig\\Environment($loader, ['debug' => true]);\n```\n\nThe following options are available:\n\n- `debug` *boolean*\n\n  When set to `true`, the generated templates have a `__toString()` method that you can use to display the generated nodes (default to `false`).\n\n- `charset` *string* (defaults to `utf-8`)\n\n  The charset used by the templates.\n\n- `cache` *string* or `false`\n\n  An absolute path where to store the compiled templates, or `false` to disable caching (which is the default).\n\n- `auto_reload` *boolean*\n\n  When developing with Twig, it’s useful to recompile the template whenever the source code changes. If you don’t provide a value for the `auto_reload` option, it will be determined automatically based on the `debug` value.\n\n- `strict_variables` *boolean*\n\n  If set to `false`, Twig will silently ignore invalid variables (variables and or attributes/methods that do not exist) and replace them with a `null` value. When set to `true`, Twig throws an exception instead (default to `false`).\n\n- `autoescape` *string*\n\n  Sets the default auto-escaping strategy (`name`, `html`, `js`, `css`, `url`, `html_attr`, or a PHP callback that takes the template “filename” and returns the escaping strategy to use – the callback cannot be a function name to avoid collision with built-in escaping strategies); set it to `false` to disable auto-escaping. The `name` escaping strategy determines the escaping strategy to use for a template based on the template filename extension (this strategy does not incur any overhead at runtime as auto-escaping is done at compilation time.)\n\n- `optimizations` *integer*\n\n  A flag that indicates which optimizations to apply (default to `-1` – all optimizations are enabled; set it to `0` to disable).\n\n## Loaders\n\nLoaders are responsible for loading templates from a resource such as the file system.\n\n### Compilation Cache\n\nAll template loaders can cache the compiled templates on the filesystem for future reuse. It speeds up Twig a lot as templates are only compiled once.\n\n### Built-in Loaders\n\nHere is a list of the built-in loaders:\n\n#### `\\Twig\\Loader\\FilesystemLoader`\n\n`\\Twig\\Loader\\FilesystemLoader` loads templates from the file system. This loader can find templates in folders on the file system and is the preferred way to load them:\n\n``` php\n$loader = new \\Twig\\Loader\\FilesystemLoader($templateDir);\n```\n\nIt can also look for templates in an array of directories:\n\n``` php\n$loader = new \\Twig\\Loader\\FilesystemLoader([$templateDir1, $templateDir2]);\n```\n\nWith such a configuration, Twig will first look for templates in `$templateDir1` and if they do not exist, it will fallback to look for them in the `$templateDir2`.\n\nYou can add or prepend paths via the `addPath()` and `prependPath()` methods:\n\n``` php\n$loader->addPath($templateDir3);\n$loader->prependPath($templateDir4);\n```\n\nThe filesystem loader also supports namespaced templates. This allows to group your templates under different namespaces which have their own template paths.\n\nWhen using the `setPaths()`, `addPath()`, and `prependPath()` methods, specify the namespace as the second argument (when not specified, these methods act on the “main” namespace):\n\n``` php\n$loader->addPath($templateDir, 'admin');\n```\n\nNamespaced templates can be accessed via the special `@namespace_name/template_path` notation:\n\n``` php\n$twig->render('@admin/index.html', []);\n```\n\n`\\Twig\\Loader\\FilesystemLoader` support absolute and relative paths. Using relative paths is preferred as it makes the cache keys independent of the project root directory (for instance, it allows warming the cache from a build server where the directory might be different from the one used on production servers):\n\n``` php\n$loader = new \\Twig\\Loader\\FilesystemLoader('templates', getcwd().'/..');\n```\n\nNote\n\nWhen not passing the root path as a second argument, Twig uses `getcwd()` for relative paths.\n\n#### `\\Twig\\Loader\\ArrayLoader`\n\n`\\Twig\\Loader\\ArrayLoader` loads a template from a PHP array. It is passed an array of strings bound to template names:\n\n``` php\n$loader = new \\Twig\\Loader\\ArrayLoader([\n    'index.html' => 'Hello {{ name }}!',\n]);\n$twig = new \\Twig\\Environment($loader);\n\necho $twig->render('index.html', ['name' => 'Fabien']);\n```\n\nThis loader is very useful for unit testing. It can also be used for small projects where storing all templates in a single PHP file might make sense.\n\nTip\n\nWhen using the `Array` loader with a cache mechanism, you should know that a new cache key is generated each time a template content “changes” (the cache key being the source code of the template). If you don’t want to see your cache grows out of control, you need to take care of clearing the old cache file by yourself.\n\n#### `\\Twig\\Loader\\ChainLoader`\n\n`\\Twig\\Loader\\ChainLoader` delegates the loading of templates to other loaders:\n\n``` php\n$loader1 = new \\Twig\\Loader\\ArrayLoader([\n    'base.html' => '{% block content %}{% endblock %}',\n]);\n$loader2 = new \\Twig\\Loader\\ArrayLoader([\n    'index.html' => '{% extends \"base.html\" %}{% block content %}Hello {{ name }}{% endblock %}',\n    'base.html'  => 'Will never be loaded',\n]);\n\n$loader = new \\Twig\\Loader\\ChainLoader([$loader1, $loader2]);\n\n$twig = new \\Twig\\Environment($loader);\n```\n\nWhen looking for a template, Twig tries each loader in turn and returns as soon as the template is found. When rendering the `index.html` template from the above example, Twig will load it with `$loader2` but the `base.html` template will be loaded from `$loader1`.\n\nNote\n\nYou can also add loaders via the `addLoader()` method.\n\n### Create your own Loader\n\nAll loaders implement the `\\Twig\\Loader\\LoaderInterface`:\n\n``` php\ninterface \\Twig\\Loader\\LoaderInterface\n{\n    /**\n     * Returns the source context for a given template logical name.\n     *\n     * @param string $name The template logical name\n     *\n     * @return \\Twig\\Source\n     *\n     * @throws \\Twig\\Error\\LoaderError When $name is not found\n     */\n    public function getSourceContext($name);\n\n    /**\n     * Gets the cache key to use for the cache for a given template name.\n     *\n     * @param string $name The name of the template to load\n     *\n     * @return string The cache key\n     *\n     * @throws \\Twig\\Error\\LoaderError When $name is not found\n     */\n    public function getCacheKey($name);\n\n    /**\n     * Returns true if the template is still fresh.\n     *\n     * @param string    $name The template name\n     * @param timestamp $time The last modification time of the cached template\n     *\n     * @return bool    true if the template is fresh, false otherwise\n     *\n     * @throws \\Twig\\Error\\LoaderError When $name is not found\n     */\n    public function isFresh($name, $time);\n\n    /**\n     * Check if we have the source code of a template, given its name.\n     *\n     * @param string $name The name of the template to check if we can load\n     *\n     * @return bool    If the template source code is handled by this loader or not\n     */\n    public function exists($name);\n}\n```\n\nThe `isFresh()` method must return `true` if the current cached template is still fresh, given the last modification time, or `false` otherwise.\n\nThe `getSourceContext()` method must return an instance of `\\Twig\\Source`.\n\n## Using Extensions\n\nTwig extensions are packages that add new features to Twig. Register an extension via the `addExtension()` method:\n\n``` php\n$twig->addExtension(new \\Twig\\Extension\\SandboxExtension());\n```\n\nTwig comes bundled with the following extensions:\n\n- *TwigExtensionCoreExtension*: Defines all the core features of Twig.\n\n- *TwigExtensionDebugExtension*: Defines the `dump` function to help debug template variables.\n\n- *TwigExtensionEscaperExtension*: Adds automatic output-escaping and the possibility to escape/unescape blocks of code.\n\n- *TwigExtensionSandboxExtension*: Adds a sandbox mode to the default Twig environment, making it safe to evaluate untrusted code.\n\n- *TwigExtensionProfilerExtension*: Enables the built-in Twig profiler.\n\n- *TwigExtensionOptimizerExtension*: Optimizes the node tree before compilation.\n\n- *TwigExtensionStringLoaderExtension*: Defines the `template_from_string`  \n  function to allow loading templates from string in a template.\n\nThe Core, Escaper, and Optimizer extensions are registered by default.\n\n## Built-in Extensions\n\nThis section describes the features added by the built-in extensions.\n\nTip\n\nRead the chapter about [extending Twig](advanced) to learn how to create your own extensions.\n\n### Core Extension\n\nThe `core` extension defines all the core features of Twig:\n\n- [Tags](tags/index);\n- [Filters](filters/index);\n- [Functions](functions/index);\n- [Tests](tests/index).\n\n### Escaper Extension\n\nThe `escaper` extension adds automatic output escaping to Twig. It defines a tag, `autoescape`, and a filter, `raw`.\n\nWhen creating the escaper extension, you can switch on or off the global output escaping strategy:\n\n``` php\n$escaper = new \\Twig\\Extension\\EscaperExtension('html');\n$twig->addExtension($escaper);\n```\n\nIf set to `html`, all variables in templates are escaped (using the `html` escaping strategy), except those using the `raw` filter:\n\n``` php\n{{ article.to_html|raw }}\n```\n\nYou can also change the escaping mode locally by using the `autoescape` tag:\n\n``` php\n{% autoescape 'html' %}\n{{ var }}\n{{ var|raw }}{# var won't be escaped #}\n{{ var|escape }}{# var won't be double-escaped #}\n{% endautoescape %}\n```\n\nWarning\n\nThe `autoescape` tag has no effect on included files.\n\nThe escaping rules are implemented as follows:\n\n- Literals (integers, booleans, arrays, …) used in the template directly as variables or filter arguments are never automatically escaped:\n\n  ``` php\n  {{ \"Twig<br/>\" }} {# won't be escaped #}\n\n  {% set text = \"Twig<br/>\" %}\n  {{ text }} {# will be escaped #}\n  ```\n\n- Expressions which the result is a literal or a variable marked safe are never automatically escaped:\n\n  ``` php\n  {{ foo ? \"Twig<br/>\" : \"<br/>Twig\" }} {# won't be escaped #}\n\n  {% set text = \"Twig<br/>\" %}\n  {{ true ? text : \"<br/>Twig\" }} {# will be escaped #}\n  {{ false ? text : \"<br/>Twig\" }} {# won't be escaped #}\n\n  {% set text = \"Twig<br/>\" %}\n  {{ foo ? text|raw : \"<br/>Twig\" }} {# won't be escaped #}\n  ```\n\n- Objects with a `__toString` method are converted to strings and escaped. You can mark some classes and/or interfaces as being safe for some strategies via `EscaperExtension::addSafeClass()`:\n\n  ``` php\n  // mark object of class Foo as safe for the HTML strategy\n  $escaper->addSafeClass('Foo', ['html']);\n\n  // mark object of interface Foo as safe for the HTML strategy\n  $escaper->addSafeClass('FooInterface', ['html']);\n\n  // mark object of class Foo as safe for the HTML and JS strategies\n  $escaper->addSafeClass('Foo', ['html', 'js']);\n\n  // mark object of class Foo as safe for all strategies\n  $escaper->addSafeClass('Foo', ['all']);\n  ```\n\n- Escaping is applied before printing, after any other filter is applied:\n\n  ``` php\n  {{ var|upper }}{# is equivalent to {{ var|upper|escape }} #}\n  ```\n\n- The raw filter should only be used at the end of the filter chain:\n\n  ``` php\n  {{ var|raw|upper }}{# will be escaped #}\n\n  {{ var|upper|raw }}{# won't be escaped #}\n  ```\n\n- Automatic escaping is not applied if the last filter in the chain is marked safe for the current context (e.g. `html` or `js`). `escape` and `escape('html')` are marked safe for HTML, `escape('js')` is marked safe for JavaScript, `raw` is marked safe for everything.\n\n  ``` php\n  {% autoescape 'js' %}\n  {{ var|escape('html') }}{# will be escaped for HTML and JavaScript #}\n  {{ var }}{# will be escaped for JavaScript #}\n  {{ var|escape('js') }}{# won't be double-escaped #}\n  {% endautoescape %}\n  ```\n\nNote\n\nNote that autoescaping has some limitations as escaping is applied on expressions after evaluation. For instance, when working with concatenation, `{{`` ``foo|raw`` ``~`` ``bar`` ``}}` won’t give the expected result as escaping is applied on the result of the concatenation, not on the individual variables (so, the `raw` filter won’t have any effect here).\n\n### Sandbox Extension\n\nThe `sandbox` extension can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited. The sandbox security is managed by a policy instance. By default, Twig comes with one policy class: `\\Twig\\Sandbox\\SecurityPolicy`. This class allows you to white-list some tags, filters, properties, and methods:\n\n``` php\n$tags = ['if'];\n$filters = ['upper'];\n$methods = [\n    'Article' => ['getTitle', 'getBody'],\n];\n$properties = [\n    'Article' => ['title', 'body'],\n];\n$functions = ['range'];\n$policy = new \\Twig\\Sandbox\\SecurityPolicy($tags, $filters, $methods, $properties, $functions);\n```\n\nWith the previous configuration, the security policy will only allow usage of the `if` tag, and the `upper` filter. Moreover, the templates will only be able to call the `getTitle()` and `getBody()` methods on `Article` objects, and the `title` and `body` public properties. Everything else won’t be allowed and will generate a `\\Twig\\Sandbox\\SecurityError` exception.\n\nThe policy object is the first argument of the sandbox constructor:\n\n``` php\n$sandbox = new \\Twig\\Extension\\SandboxExtension($policy);\n$twig->addExtension($sandbox);\n```\n\nBy default, the sandbox mode is disabled and should be enabled when including untrusted template code by using the `sandbox` tag:\n\n``` php\n{% sandbox %}\n{% include 'user.html' %}\n{% endsandbox %}\n```\n\nYou can sandbox all templates by passing `true` as the second argument of the extension constructor:\n\n``` php\n$sandbox = new \\Twig\\Extension\\SandboxExtension($policy, true);\n```\n\n### Profiler Extension\n\nThe `profiler` extension enables a profiler for Twig templates; it should only be used on your development machines as it adds some overhead:\n\n``` php\n$profile = new \\Twig\\Profiler\\Profile();\n$twig->addExtension(new \\Twig\\Extension\\ProfilerExtension($profile));\n\n$dumper = new \\Twig\\Profiler\\Dumper\\TextDumper();\necho $dumper->dump($profile);\n```\n\nA profile contains information about time and memory consumption for template, block, and macro executions.\n\nYou can also dump the data in a [Blackfire.io](https://blackfire.io/) compatible format:\n\n``` php\n$dumper = new \\Twig\\Profiler\\Dumper\\BlackfireDumper();\nfile_put_contents('/path/to/profile.prof', $dumper->dump($profile));\n```\n\nUpload the profile to visualize it (create a [free account](https://blackfire.io/signup?utm_source=twig&utm_medium=doc&utm_campaign=profiler) first):\n\n``` php\nblackfire --slot=7 upload /path/to/profile.prof\n```\n\n### Optimizer Extension\n\nThe `optimizer` extension optimizes the node tree before compilation:\n\n``` php\n$twig->addExtension(new \\Twig\\Extension\\OptimizerExtension());\n```\n\nBy default, all optimizations are turned on. You can select the ones you want to enable by passing them to the constructor:\n\n``` php\n$optimizer = new \\Twig\\Extension\\OptimizerExtension(\\Twig\\NodeVisitor\\OptimizerNodeVisitor::OPTIMIZE_FOR);\n\n$twig->addExtension($optimizer);\n```\n\nTwig supports the following optimizations:\n\n- `\\Twig\\NodeVisitor\\OptimizerNodeVisitor::OPTIMIZE_ALL`, enables all optimizations (this is the default value).\n- `\\Twig\\NodeVisitor\\OptimizerNodeVisitor::OPTIMIZE_NONE`, disables all optimizations. This reduces the compilation time, but it can increase the execution time and the consumed memory.\n- `\\Twig\\NodeVisitor\\OptimizerNodeVisitor::OPTIMIZE_FOR`, optimizes the `for` tag by removing the `loop` variable creation whenever possible.\n- `\\Twig\\NodeVisitor\\OptimizerNodeVisitor::OPTIMIZE_RAW_FILTER`, removes the `raw` filter whenever possible.\n- `\\Twig\\NodeVisitor\\OptimizerNodeVisitor::OPTIMIZE_VAR_ACCESS`, simplifies the creation and access of variables in the compiled templates whenever possible.\n\n## Exceptions\n\nTwig can throw exceptions:\n\n- `\\Twig\\Error\\Error`: The base exception for all errors.\n- `\\Twig\\Error\\SyntaxError`: Thrown to tell the user that there is a problem with the template syntax.\n- `\\Twig\\Error\\RuntimeError`: Thrown when an error occurs at runtime (when a filter does not exist for instance).\n- `\\Twig\\Error\\LoaderError`: Thrown when an error occurs during template loading.\n- `\\Twig\\Sandbox\\SecurityError`: Thrown when an unallowed tag, filter, or method is called in a sandboxed template.\n\n[« Twig for Template Designers](templates \"Twig for Template Designers\") \\| [Extending Twig »](advanced \"Extending Twig\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/api.html](https://twig.symfony.com/doc/3.x/api.html)"
- name: Twig for Template Designers
  id: templates
  summary: This document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Twig templates
  description: "# Twig for Template Designers\n\nThis document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Twig templates.\n\n## Synopsis\n\nA template is a regular text file. It can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). It doesn’t have a specific extension, `.html` or `.xml` are just fine.\n\nA template contains **variables** or **expressions**, which get replaced with values when the template is evaluated, and **tags**, which control the template’s logic.\n\nBelow is a minimal template that illustrates a few basics. We will cover further details later on:\n\n``` php\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Webpage</title>\n    </head>\n    <body>\n        <ul id=\"navigation\">\n        {% for item in navigation %}\n            <li><a href=\"{{ item.href }}\">{{ item.caption }}</a></li>\n        {% endfor %}\n        </ul>\n\n        <h1>My Webpage</h1>\n        {{ a_variable }}\n    </body>\n</html>\n```\n\nThere are two kinds of delimiters: `{%`` ``...`` ``%}` and `{{`` ``...`` ``}}`. The first one is used to execute statements such as for-loops, the latter outputs the result of an expression.\n\n## IDEs Integration\n\nMany IDEs support syntax highlighting and auto-completion for Twig:\n\n- *Textmate* via the [Twig bundle](https://github.com/Anomareh/PHP-Twig.tmbundle)\n- *Vim* via the [Jinja syntax plugin](http://jinja.pocoo.org/docs/integration/#vim) or the [vim-twig plugin](https://github.com/lumiliet/vim-twig)\n- *Netbeans* via the [Twig syntax plugin](http://plugins.netbeans.org/plugin/37069/php-twig) (until 7.1, native as of 7.2)\n- *PhpStorm* (native as of 2.1)\n- *Eclipse* via the [Twig plugin](https://github.com/pulse00/Twig-Eclipse-Plugin)\n- *Sublime Text* via the [Twig bundle](https://github.com/Anomareh/PHP-Twig.tmbundle)\n- *GtkSourceView* via the [Twig language definition](https://github.com/gabrielcorpse/gedit-twig-template-language) (used by gedit and other projects)\n- *Coda* and *SubEthaEdit* via the [Twig syntax mode](https://github.com/bobthecow/Twig-HTML.mode)\n- *Coda 2* via the [other Twig syntax mode](https://github.com/muxx/Twig-HTML.mode)\n- *Komodo* and *Komodo Edit* via the Twig highlight/syntax check mode\n- *Notepad++* via the [Notepad++ Twig Highlighter](https://github.com/Banane9/notepadplusplus-twig)\n- *Emacs* via [web-mode.el](http://web-mode.org/)\n- *Atom* via the [PHP-twig for atom](https://github.com/reesef/php-twig)\n- *Visual Studio Code* via the [Twig pack](https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-twig-pack)\n\nAlso, [TwigFiddle](https://twigfiddle.com/) is an online service that allows you to execute Twig templates from a browser; it supports all versions of Twig.\n\n## Variables\n\nThe application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it.\n\nUse a dot (`.`) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array):\n\n``` php\n{{ foo.bar }}\n```\n\nNote\n\nIt’s important to know that the curly braces are *not* part of the variable but the print statement. When accessing variables inside tags, don’t put the braces around them.\n\nImplementation\n\nFor convenience’s sake `foo.bar` does the following things on the PHP layer:\n\n- check if `foo` is an array and `bar` a valid element;\n- if not, and if `foo` is an object, check that `bar` is a valid property;\n- if not, and if `foo` is an object, check that `bar` is a valid method (even if `bar` is the constructor - use `__construct()` instead);\n- if not, and if `foo` is an object, check that `getBar` is a valid method;\n- if not, and if `foo` is an object, check that `isBar` is a valid method;\n- if not, and if `foo` is an object, check that `hasBar` is a valid method;\n- if not, return a `null` value.\n\nTwig also supports a specific syntax for accessing items on PHP arrays, `foo['bar']`:\n\n- check if `foo` is an array and `bar` a valid element;\n- if not, return a `null` value.\n\nIf a variable or attribute does not exist, you will receive a `null` value when the `strict_variables` option is set to `false`; alternatively, if `strict_variables` is set, Twig will throw an error (see [environment options](api#environment-options)).\n\nNote\n\nIf you want to access a dynamic attribute of a variable, use the [attribute](functions/attribute) function instead.\n\nThe `attribute` function is also useful when the attribute contains special characters (like `-` that would be interpreted as the minus operator):\n\n``` php\n{# equivalent to the non-working foo.data-foo #}\n{{ attribute(foo, 'data-foo') }}\n```\n\n### Global Variables\n\nThe following variables are always available in templates:\n\n- `_self`: references the current template name;\n- `_context`: references the current context;\n- `_charset`: references the current charset.\n\n### Setting Variables\n\nYou can assign values to variables inside code blocks. Assignments use the [set](tags/set) tag:\n\n``` php\n{% set foo = 'foo' %}\n{% set foo = [1, 2] %}\n{% set foo = {'foo': 'bar'} %}\n```\n\n## Filters\n\nVariables can be modified by **filters**. Filters are separated from the variable by a pipe symbol (`|`). Multiple filters can be chained. The output of one filter is applied to the next.\n\nThe following example removes all HTML tags from the `name` and title-cases it:\n\n``` php\n{{ name|striptags|title }}\n```\n\nFilters that accept arguments have parentheses around the arguments. This example joins the elements of a list by commas:\n\n``` php\n{{ list|join(', ') }}\n```\n\nTo apply a filter on a section of code, wrap it with the [apply](tags/apply) tag:\n\n``` php\n{% apply upper %}\n    This text becomes uppercase\n{% endapply %}\n```\n\nGo to the [filters](filters/index) page to learn more about built-in filters.\n\n## Functions\n\nFunctions can be called to generate content. Functions are called by their name followed by parentheses (`()`) and may have arguments.\n\nFor instance, the `range` function returns a list containing an arithmetic progression of integers:\n\n``` php\n{% for i in range(0, 3) %}\n{{ i }},\n{% endfor %}\n```\n\nGo to the [functions](functions/index) page to learn more about the built-in functions.\n\n## Named Arguments\n\n``` php\n{% for i in range(low=1, high=10, step=2) %}\n{{ i }},\n{% endfor %}\n```\n\nUsing named arguments makes your templates more explicit about the meaning of the values you pass as arguments:\n\n``` php\n{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n\n{# versus #}\n\n{{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}\n```\n\nNamed arguments also allow you to skip some arguments for which you don’t want to change the default value:\n\n``` php\n{# the first argument is the date format, which defaults to the global date format if null is passed #}\n{{ \"now\"|date(null, \"Europe/Paris\") }}\n\n{# or skip the format value by using a named argument for the time zone #}\n{{ \"now\"|date(timezone=\"Europe/Paris\") }}\n```\n\nYou can also use both positional and named arguments in one call, in which case positional arguments must always come before named arguments:\n\n``` php\n{{ \"now\"|date('d/m/Y H:i', timezone=\"Europe/Paris\") }}\n```\n\nTip\n\nEach function and filter documentation page has a section where the names of all arguments are listed when supported.\n\n## Control Structure\n\nA control structure refers to all those things that control the flow of a program - conditionals (i.e. `if`/`elseif`/`else`), `for`-loops, as well as things like blocks. Control structures appear inside `{%`` ``...`` ``%}` blocks.\n\nFor example, to display a list of users provided in a variable called `users`, use the [for](tags/for) tag:\n\n``` php\n<h1>Members</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\nThe [if](tags/if) tag can be used to test an expression:\n\n``` php\n{% if users|length > 0 %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username|e }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\nGo to the [tags](tags/index) page to learn more about the built-in tags.\n\n## Comments\n\nTo comment-out part of a line in a template, use the comment syntax `{#`` ``...`` ``#}`. This is useful for debugging or to add information for other template designers or yourself:\n\n``` php\n{# note: disabled template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n```\n\n## Including other Templates\n\nThe [include](functions/include) function is useful to include a template and return the rendered content of that template into the current one:\n\n``` php\n{{ include('sidebar.html') }}\n```\n\nBy default, included templates have access to the same context as the template which includes them. This means that any variable defined in the main template will be available in the included template too:\n\n``` php\n{% for box in boxes %}\n{{ include('render_box.html') }}\n{% endfor %}\n```\n\nThe included template `render_box.html` is able to access the `box` variable.\n\nThe name of the template depends on the template loader. For instance, the `\\Twig\\Loader\\FilesystemLoader` allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:\n\n``` php\n{{ include('sections/articles/sidebar.html') }}\n```\n\nThis behavior depends on the application embedding Twig.\n\n## Template Inheritance\n\nThe most powerful part of Twig is template inheritance. Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines **blocks** that child templates can override.\n\nIt’s easier to understand the concept by starting with an example.\n\nLet’s define a base template, `base.html`, which defines an HTML skeleton document that might be used for a two-column page:\n\n``` php\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel=\"stylesheet\" href=\"style.css\"/>\n            <title>{% block title %}{% endblock %} - My Webpage</title>\n        {% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">{% block content %}{% endblock %}</div>\n        <div id=\"footer\">\n            {% block footer %}\n                &copy; Copyright 2011 by <a href=\"http://domain.invalid/\">you</a>.\n            {% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nIn this example, the [block](tags/block) tags define four blocks that child templates can fill in. All the `block` tag does is to tell the template engine that a child template may override those portions of the template.\n\nA child template might look like this:\n\n``` php\n{% extends \"base.html\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    <style type=\"text/css\">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">\n        Welcome to my awesome homepage.\n    </p>\n{% endblock %}\n```\n\nThe [extends](tags/extends) tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.\n\nNote that since the child template doesn’t define the `footer` block, the value from the parent template is used instead.\n\nIt’s possible to render the contents of the parent block by using the [parent](functions/parent) function. This gives back the results of the parent block:\n\n``` php\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\nTip\n\nThe documentation page for the [extends](tags/extends) tag describes more advanced features like block nesting, scope, dynamic inheritance, and conditional inheritance.\n\nNote\n\nTwig also supports multiple inheritance via “horizontal reuse” with the help of the [use](tags/use) tag.\n\n## HTML Escaping\n\nWhen generating HTML from templates, there’s always a risk that a variable will include characters that affect the resulting HTML. There are two approaches: manually escaping each variable or automatically escaping everything by default.\n\nTwig supports both, automatic escaping is enabled by default.\n\nThe automatic escaping strategy can be configured via the [autoescape](api#environment-options) option and defaults to `html`.\n\n### Working with Manual Escaping\n\nIf manual escaping is enabled, it is **your** responsibility to escape variables if needed. What to escape? Any variable that comes from an untrusted source.\n\nEscaping works by using the [escape](filters/escape) or `e` filter:\n\n``` php\n{{ user.username|e }}\n```\n\nBy default, the `escape` filter uses the `html` strategy, but depending on the escaping context, you might want to explicitly use an other strategy:\n\n``` php\n{{ user.username|e('js') }}\n{{ user.username|e('css') }}\n{{ user.username|e('url') }}\n{{ user.username|e('html_attr') }}\n```\n\n### Working with Automatic Escaping\n\nWhether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the [autoescape](tags/autoescape) tag:\n\n``` php\n{% autoescape %}\n    Everything will be automatically escaped in this block (using the HTML strategy)\n{% endautoescape %}\n```\n\nBy default, auto-escaping uses the `html` escaping strategy. If you output variables in other contexts, you need to explicitly escape them with the appropriate escaping strategy:\n\n``` php\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block (using the JS strategy)\n{% endautoescape %}\n```\n\n## Escaping\n\nIt is sometimes desirable or even necessary to have Twig ignore parts it would otherwise handle as variables or blocks. For example if the default syntax is used and you want to use `{{` as raw string in the template and not start a variable you have to use a trick.\n\nThe easiest way is to output the variable delimiter (`{{`) by using a variable expression:\n\n``` php\n{{ '{{' }}\n```\n\nFor bigger sections it makes sense to mark a block [verbatim](tags/verbatim).\n\n## Macros\n\nMacros are comparable with functions in regular programming languages. They are useful to reuse HTML fragments to not repeat yourself. They are described in the [macro](tags/macro) tag documentation.\n\n## Expressions\n\nTwig allows expressions everywhere.\n\nNote\n\nThe operator precedence is as follows, with the lowest-precedence operators listed first: `?:` (ternary operator), `b-and`, `b-xor`, `b-or`, `or`, `and`, `==`, `!=`, `<=>`, `<`, `>`, `>=`, `<=`, `in`, `matches`, `starts`` ``with`, `ends`` ``with`, `..`, `+`, `-`, `~`, `*`, `/`, `//`, `%`, `is` (tests), `**`, `??`, `|` (filters), `[]`, and `.`:\n\n``` php\n{% set greeting = 'Hello ' %}\n{% set name = 'Fabien' %}\n\n{{ greeting ~ name|lower }}{# Hello fabien #}\n\n{# use parenthesis to change precedence #}\n{{ (greeting ~ name)|lower }}{# hello fabien #}\n```\n\n### Literals\n\nThe simplest form of expressions are literals. Literals are representations for PHP types such as strings, numbers, and arrays. The following literals exist:\n\n- `\"Hello`` ``World\"`: Everything between two double or single quotes is a string. They are useful whenever you need a string in the template (for example as arguments to function calls, filters or just to extend or include a template). A string can contain a delimiter if it is preceded by a backslash (`\\`) – like in `'It\\'s`` ``good'`. If the string contains a backslash (e.g. `'c:\\Program`` ``Files'`) escape it by doubling it (e.g. `'c:\\\\Program`` ``Files'`).\n\n- `42` / `42.23`: Integers and floating point numbers are created by writing the number down. If a dot is present the number is a float, otherwise an integer.\n\n- `[\"foo\",`` ``\"bar\"]`: Arrays are defined by a sequence of expressions separated by a comma (`,`) and wrapped with squared brackets (`[]`).\n\n- `{\"foo\":`` ``\"bar\"}`: Hashes are defined by a list of keys and values separated by a comma (`,`) and wrapped with curly braces (`{}`):\n\n  ``` php\n  {# keys as string #}\n  { 'foo': 'foo', 'bar': 'bar' }\n\n  {# keys as names (equivalent to the previous hash) #}\n  { foo: 'foo', bar: 'bar' }\n\n  {# keys as integer #}\n  { 2: 'foo', 4: 'bar' }\n\n  {# keys can be omitted if it is the same as the variable name #}\n  { foo }\n  {# is equivalent to the following #}\n  { 'foo': foo }\n\n  {# keys as expressions (the expression must be enclosed into parentheses) #}\n  {% set foo = 'foo' %}\n  { (foo): 'foo', (1 + 1): 'bar', (foo ~ 'b'): 'baz' }\n  ```\n\n- `true` / `false`: `true` represents the true value, `false` represents the false value.\n\n- `null`: `null` represents no specific value. This is the value returned when a variable does not exist. `none` is an alias for `null`.\n\nArrays and hashes can be nested:\n\n``` php\n{% set foo = [1, {\"foo\": \"bar\"}] %}\n```\n\nTip\n\nUsing double-quoted or single-quoted strings has no impact on performance but [string interpolation](#templates-string-interpolation) is only supported in double-quoted strings.\n\n### Math\n\nTwig allows you to do math in templates; the following operators are supported:\n\n- `+`: Adds two numbers together (the operands are casted to numbers). `{{`` ``1`` ``+`` ``1`` ``}}` is `2`.\n- `-`: Subtracts the second number from the first one. `{{`` ``3`` ``-`` ``2`` ``}}` is `1`.\n- `/`: Divides two numbers. The returned value will be a floating point number. `{{`` ``1`` ``/`` ``2`` ``}}` is `{{`` ``0.5`` ``}}`.\n- `%`: Calculates the remainder of an integer division. `{{`` ``11`` ``%`` ``7`` ``}}` is `4`.\n- `//`: Divides two numbers and returns the floored integer result. `{{`` ``20`` ``//`` ``7`` ``}}` is `2`, `{{`` ``-20``  ``//`` ``7`` ``}}` is `-3` (this is just syntactic sugar for the [round](filters/round) filter).\n- `*`: Multiplies the left operand with the right one. `{{`` ``2`` ``*`` ``2`` ``}}` would return `4`.\n- `**`: Raises the left operand to the power of the right operand. `{{`` ``2`` ``**`` ``3`` ``}}` would return `8`.\n\n### Logic\n\nYou can combine multiple expressions with the following operators:\n\n- `and`: Returns true if the left and the right operands are both true.\n- `or`: Returns true if the left or the right operand is true.\n- `not`: Negates a statement.\n- `(expr)`: Groups an expression.\n\nNote\n\nTwig also supports bitwise operators (`b-and`, `b-xor`, and `b-or`).\n\nNote\n\nOperators are case sensitive.\n\n### Comparisons\n\nThe following comparison operators are supported in any expression: `==`, `!=`, `<`, `>`, `>=`, and `<=`.\n\nYou can also check if a string `starts`` ``with` or `ends`` ``with` another string:\n\n``` php\n{% if 'Fabien' starts with 'F' %}\n{% endif %}\n\n{% if 'Fabien' ends with 'n' %}\n{% endif %}\n```\n\nNote\n\nFor complex string comparisons, the `matches` operator allows you to use [regular expressions](https://secure.php.net/manual/en/pcre.pattern.php):\n\n``` php\n{% if phone matches '/^[\\\\d\\\\.]+$/' %}\n{% endif %}\n```\n\n### Containment Operator\n\nThe `in` operator performs containment test. It returns `true` if the left operand is contained in the right:\n\n``` php\n{# returns true #}\n\n{{ 1 in [1, 2, 3] }}\n\n{{ 'cd' in 'abcde' }}\n```\n\nTip\n\nYou can use this filter to perform a containment test on strings, arrays, or objects implementing the `Traversable` interface.\n\nTo perform a negative test, use the `not`` ``in` operator:\n\n``` php\n{% if 1 not in [1, 2, 3] %}\n\n{# is equivalent to #}\n{% if not (1 in [1, 2, 3]) %}\n```\n\n### Test Operator\n\nThe `is` operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test:\n\n``` php\n{# find out if a variable is odd #}\n\n{{ name is odd }}\n```\n\nTests can accept arguments too:\n\n``` php\n{% if post.status is constant('Post::PUBLISHED') %}\n```\n\nTests can be negated by using the `is`` ``not` operator:\n\n``` php\n{% if post.status is not constant('Post::PUBLISHED') %}\n\n{# is equivalent to #}\n{% if not (post.status is constant('Post::PUBLISHED')) %}\n```\n\nGo to the [tests](tests/index) page to learn more about the built-in tests.\n\n### Other Operators\n\nThe following operators don’t fit into any of the other categories:\n\n- `|`: Applies a filter.\n\n- `..`: Creates a sequence based on the operand before and after the operator (this is syntactic sugar for the [range](functions/range) function):\n\n  ``` php\n  {{ 1..5 }}\n\n  {# equivalent to #}\n  {{ range(1, 5) }}\n  ```\n\n  Note that you must use parentheses when combining it with the filter operator due to the [operator precedence rules](#twig-expressions):\n\n  ``` php\n  (1..5)|join(', ')\n  ```\n\n- `~`: Converts all operands into strings and concatenates them. `{{`` ``\"Hello`` ``\"`` ``~`` ``name`` ``~`` ``\"!\"`` ``}}` would return (assuming `name` is `'John'`) `Hello`` ``John!`.\n\n- `.`, `[]`: Gets an attribute of a variable.\n\n- `?:`: The ternary operator:\n\n  ``` php\n  {{ foo ? 'yes' : 'no' }}\n  {{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }}\n  {{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }}\n  ```\n\n- `??`: The null-coalescing operator:\n\n  ``` php\n  {# returns the value of foo if it is defined and not null, 'no' otherwise #}\n  {{ foo ?? 'no' }}\n  ```\n\n### String Interpolation\n\nString interpolation (`#{expression}`) allows any valid expression to appear within a *double-quoted string*. The result of evaluating that expression is inserted into the string:\n\n``` php\n{{ \"foo #{bar} baz\" }}\n{{ \"foo #{1 + 2} baz\" }}\n```\n\n## Whitespace Control\n\nThe first newline after a template tag is removed automatically (like in PHP). Whitespace is not further modified by the template engine, so each whitespace (spaces, tabs, newlines etc.) is returned unchanged.\n\nYou can also control whitespace on a per tag level. By using the whitespace control modifiers on your tags, you can trim leading and or trailing whitespace.\n\nTwig supports two modifiers:\n\n- *Whitespace trimming* via the `-` modifier: Removes all whitespace (including newlines);\n- *Line whitespace trimming* via the `~` modifier: Removes all whitespace (excluding newlines). Using this modifier on the right disables the default removal of the first newline inherited from PHP.\n\nThe modifiers can be used on either side of the tags like in `{%-` or `-%}` and they consume all whitespace for that side of the tag. It is possible to use the modifiers on one side of a tag or on both sides:\n\n``` php\n{% set value = 'no spaces' %}\n{#- No leading/trailing whitespace -#}\n{%- if true -%}\n    {{- value -}}\n{%- endif -%}\n{# output 'no spaces' #}\n\n<li>\n    {{ value }}    </li>\n{# outputs '<li>\\n    no spaces    </li>' #}\n\n<li>\n    {{- value }}    </li>\n{# outputs '<li>no spaces    </li>' #}\n\n<li>\n    {{~ value }}    </li>\n{# outputs '<li>\\nno spaces    </li>' #}\n```\n\nTip\n\nIn addition to the whitespace modifiers, Twig also has a `spaceless` filter that removes whitespace **between HTML tags**:\n\n``` php\n{% apply spaceless %}\n    <div>\n        <strong>foo bar</strong>\n    </div>\n{% endapply %}\n\n{# output will be <div><strong>foo bar</strong></div> #}\n```\n\n## Extensions\n\nTwig can be extended. If you want to create your own extensions, read the [Creating an Extension](advanced#creating-extensions) chapter.\n\n[« Installation](installation \"Installation\") \\| [Twig for Developers »](api \"Twig for Developers\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/templates.html](https://twig.symfony.com/doc/3.x/templates.html)"
- name: Twig Internals
  id: internals
  summary: Twig is very extensible and you can hack it
  description: "# Twig Internals\n\nTwig is very extensible and you can hack it. Keep in mind that you should probably try to create an extension before hacking the core, as most features and enhancements can be handled with extensions. This chapter is also useful for people who want to understand how Twig works under the hood.\n\n## How does Twig work?\n\nThe rendering of a Twig template can be summarized into four key steps:\n\n- **Load** the template: If the template is already compiled, load it and go to the *evaluation* step, otherwise:\n  - First, the **lexer** tokenizes the template source code into small pieces for easier processing;\n  - Then, the **parser** converts the token stream into a meaningful tree of nodes (the Abstract Syntax Tree);\n  - Finally, the *compiler* transforms the AST into PHP code.\n- **Evaluate** the template: It means calling the `display()` method of the compiled template and passing it the context.\n\n## The Lexer\n\nThe lexer tokenizes a template source code into a token stream (each token is an instance of `\\Twig\\Token`, and the stream is an instance of `\\Twig\\TokenStream`). The default lexer recognizes 13 different token types:\n\n- `\\Twig\\Token::BLOCK_START_TYPE`, `\\Twig\\Token::BLOCK_END_TYPE`: Delimiters for blocks (`{%`` ``%}`)\n- `\\Twig\\Token::VAR_START_TYPE`, `\\Twig\\Token::VAR_END_TYPE`: Delimiters for variables (`{{`` ``}}`)\n- `\\Twig\\Token::TEXT_TYPE`: A text outside an expression;\n- `\\Twig\\Token::NAME_TYPE`: A name in an expression;\n- `\\Twig\\Token::NUMBER_TYPE`: A number in an expression;\n- `\\Twig\\Token::STRING_TYPE`: A string in an expression;\n- `\\Twig\\Token::OPERATOR_TYPE`: An operator;\n- `\\Twig\\Token::PUNCTUATION_TYPE`: A punctuation sign;\n- `\\Twig\\Token::INTERPOLATION_START_TYPE`, `\\Twig\\Token::INTERPOLATION_END_TYPE`: Delimiters for string interpolation;\n- `\\Twig\\Token::EOF_TYPE`: Ends of template.\n\nYou can manually convert a source code into a token stream by calling the `tokenize()` method of an environment:\n\n``` php\n$stream = $twig->tokenize(new \\Twig\\Source($source, $identifier));\n```\n\nAs the stream has a `__toString()` method, you can have a textual representation of it by echoing the object:\n\n``` php\necho $stream.\"\\n\";\n```\n\nHere is the output for the `Hello`` ``{{`` ``name`` ``}}` template:\n\n``` php\nTEXT_TYPE(Hello )\nVAR_START_TYPE()\nNAME_TYPE(name)\nVAR_END_TYPE()\nEOF_TYPE()\n```\n\nNote\n\nThe default lexer (`\\Twig\\Lexer`) can be changed by calling the `setLexer()` method:\n\n``` php\n$twig->setLexer($lexer);\n```\n\n## The Parser\n\nThe parser converts the token stream into an AST (Abstract Syntax Tree), or a node tree (an instance of `\\Twig\\Node\\ModuleNode`). The core extension defines the basic nodes like: `for`, `if`, … and the expression nodes.\n\nYou can manually convert a token stream into a node tree by calling the `parse()` method of an environment:\n\n``` php\n$nodes = $twig->parse($stream);\n```\n\nEchoing the node object gives you a nice representation of the tree:\n\n``` php\necho $nodes.\"\\n\";\n```\n\nHere is the output for the `Hello`` ``{{`` ``name`` ``}}` template:\n\n``` php\n\\Twig\\Node\\ModuleNode(\n  \\Twig\\Node\\TextNode(Hello )\n  \\Twig\\Node\\PrintNode(\n    \\Twig\\Node\\Expression\\NameExpression(name)\n  )\n)\n```\n\nNote\n\nThe default parser (`\\Twig\\TokenParser\\AbstractTokenParser`) can be changed by calling the `setParser()` method:\n\n``` php\n$twig->setParser($parser);\n```\n\n## The Compiler\n\nThe last step is done by the compiler. It takes a node tree as an input and generates PHP code usable for runtime execution of the template.\n\nYou can manually compile a node tree to PHP code with the `compile()` method of an environment:\n\n``` php\n$php = $twig->compile($nodes);\n```\n\nThe generated template for a `Hello`` ``{{`` ``name`` ``}}` template reads as follows (the actual output can differ depending on the version of Twig you are using):\n\n``` php\n/* Hello {{ name }} */\nclass __TwigTemplate_1121b6f109fe93ebe8c6e22e3712bceb extends Template\n{\n    protected function doDisplay(array $context, array $blocks = [])\n    {\n        // line 1\n        echo \"Hello \";\n        echo twig_escape_filter($this->env, (isset($context[\"name\"]) ? $context[\"name\"] : null), \"html\", null, true);\n    }\n\n    // some more code\n}\n```\n\nNote\n\nThe default compiler (`\\Twig\\Compiler`) can be changed by calling the `setCompiler()` method:\n\n``` php\n$twig->setCompiler($compiler);\n```\n\n[« Extending Twig](advanced \"Extending Twig\") \\| [Deprecated Features »](https://twig.symfony.com/doc/3.x/deprecated.html \"Deprecated Features\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/internals.html](https://twig.symfony.com/doc/3.x/internals.html)"
- name: u
  id: filters/u
  summary: The u filter wraps a text in a Unicode object (a Symfony UnicodeString instance) that exposes methods to “manipulate” the string
  description: "# u\n\nThe `u` filter wraps a text in a Unicode object (a [Symfony UnicodeString instance](https://symfony.com/doc/current/components/string.html)) that exposes methods to “manipulate” the string.\n\nLet’s see some common use cases.\n\nWrapping a text to a given number of characters:\n\n``` php\n{{ 'Symfony String + Twig = <3'|u.wordwrap(5) }}\nSymfony\nString\n+\nTwig\n= <3\n```\n\nTruncating a string:\n\n``` php\n{{ 'Lorem ipsum'|u.truncate(8) }}\nLorem ip\n\n{{ 'Lorem ipsum'|u.truncate(8, '...') }}\nLorem...\n```\n\nThe `truncate` method also accepts a third argument to preserve whole words:\n\n``` php\n{{ 'Lorem ipsum dolor'|u.truncate(10, '...', false) }}\nLorem ipsum...\n```\n\nConverting a string to *snake* case or *camelCase*:\n\n``` php\n{{ 'SymfonyStringWithTwig'|u.snake }}\nsymfony_string_with_twig\n\n{{ 'symfony_string with twig'|u.camel.title }}\nSymfonyStringWithTwig\n```\n\nYou can also chain methods:\n\n``` php\n{{ 'Symfony String + Twig = <3'|u.wordwrap(5).upper }}\nSYMFONY\nSTRING\n+\nTWIG\n= <3\n```\n\nFor large strings manipulation, use the `apply` tag:\n\n``` php\n{% apply u.wordwrap(5) %}\n    Some large amount of text...\n{% endapply %}\n```\n\nNote\n\nThe `u` filter is part of the `StringExtension` which is not installed by default. Install it first:\n\n``` php\n$ composer require twig/string-extra\n```\n\nThen, use the `twig/extra-bundle` on Symfony projects or add the extension explicitly on the Twig environment:\n\n``` php\nuse Twig\\Extra\\String\\StringExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new StringExtension());\n```\n\n[« trim](trim \"trim\") \\| [upper »](upper \"upper\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/u.html](https://twig.symfony.com/doc/3.x/filters/u.html)"
- name: upper
  id: filters/upper
  summary: © 2009–2018 by the Twig Team Licensed under the three clause BSD license
  description: "# upper\n\nThe `upper` filter converts a value to uppercase:\n\n``` php\n{{ 'welcome'|upper }}\n\n{# outputs 'WELCOME' #}\n```\n\n[« u](u \"u\") \\| [url_encode »](url_encode \"url_encode\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/upper.html](https://twig.symfony.com/doc/3.x/filters/upper.html)"
- name: url_encode
  id: filters/url_encode
  summary: Internally, Twig uses the PHP rawurlencode or the http_build_query function
  description: "# url_encode\n\nThe `url_encode` filter percent encodes a given string as URL segment or an array as query string:\n\n``` php\n{{ \"path-seg*ment\"|url_encode }}\n{# outputs \"path-seg%2Ament\" #}\n\n{{ \"string with spaces\"|url_encode }}\n{# outputs \"string%20with%20spaces\" #}\n\n{{ {'param': 'value', 'foo': 'bar'}|url_encode }}\n{# outputs \"param=value&foo=bar\" #}\n```\n\nNote\n\nInternally, Twig uses the PHP [rawurlencode](https://secure.php.net/rawurlencode) or the [http_build_query](https://secure.php.net/http_build_query) function.\n\n[« upper](upper \"upper\") \\| [Functions »](../functions/index \"Functions\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/filters/url_encode.html](https://twig.symfony.com/doc/3.x/filters/url_encode.html)"
- name: use
  id: tags/use
  summary: Horizontal reuse is an advanced Twig feature that is hardly ever needed in regular templates
  description: "# use\n\nNote\n\nHorizontal reuse is an advanced Twig feature that is hardly ever needed in regular templates. It is mainly used by projects that need to make template blocks reusable without using inheritance.\n\nTemplate inheritance is one of the most powerful features of Twig but it is limited to single inheritance; a template can only extend one other template. This limitation makes template inheritance simple to understand and easy to debug:\n\n``` php\n{% extends \"base.html\" %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\nHorizontal reuse is a way to achieve the same goal as multiple inheritance, but without the associated complexity:\n\n``` php\n{% extends \"base.html\" %}\n\n{% use \"blocks.html\" %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\nThe `use` statement tells Twig to import the blocks defined in `blocks.html` into the current template (it’s like macros, but for blocks):\n\n``` php\n{# blocks.html #}\n\n{% block sidebar %}{% endblock %}\n```\n\nIn this example, the `use` statement imports the `sidebar` block into the main template. The code is mostly equivalent to the following one (the imported blocks are not outputted automatically):\n\n``` php\n{% extends \"base.html\" %}\n\n{% block sidebar %}{% endblock %}\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\nNote\n\nThe `use` tag only imports a template if it does not extend another template, if it does not define macros, and if the body is empty. But it can *use* other templates.\n\nNote\n\nBecause `use` statements are resolved independently of the context passed to the template, the template reference cannot be an expression.\n\nThe main template can also override any imported block. If the template already defines the `sidebar` block, then the one defined in `blocks.html` is ignored. To avoid name conflicts, you can rename imported blocks:\n\n``` php\n{% extends \"base.html\" %}\n\n{% use \"blocks.html\" with sidebar as base_sidebar, title as base_title %}\n\n{% block sidebar %}{% endblock %}\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\nThe `parent()` function automatically determines the correct inheritance tree, so it can be used when overriding a block defined in an imported template:\n\n``` php\n{% extends \"base.html\" %}\n\n{% use \"blocks.html\" %}\n\n{% block sidebar %}\n{{ parent() }}\n{% endblock %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\nIn this example, `parent()` will correctly call the `sidebar` block from the `blocks.html` template.\n\nTip\n\nRenaming allows you to simulate inheritance by calling the “parent” block:\n\n``` php\n{% extends \"base.html\" %}\n\n{% use \"blocks.html\" with sidebar as parent_sidebar %}\n\n{% block sidebar %}\n{{ block('parent_sidebar') }}\n{% endblock %}\n```\n\nNote\n\nYou can use as many `use` statements as you want in any given template. If two imported templates define the same block, the latest one wins.\n\n[« set](set \"set\") \\| [verbatim »](verbatim \"verbatim\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/use.html](https://twig.symfony.com/doc/3.x/tags/use.html)"
- name: verbatim
  id: tags/verbatim
  summary: The verbatim tag marks sections as being raw text that should not be parsed
  description: "# verbatim\n\nThe `verbatim` tag marks sections as being raw text that should not be parsed. For example to put Twig syntax as example into a template you can use this snippet:\n\n``` php\n{% verbatim %}\n    <ul>\n    {% for item in seq %}\n        <li>{{ item }}</li>\n    {% endfor %}\n    </ul>\n{% endverbatim %}\n```\n\n[« use](use \"use\") \\| [with »](with \"with\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/verbatim.html](https://twig.symfony.com/doc/3.x/tags/verbatim.html)"
- name: with
  id: tags/with
  summary: Use the with tag to create a new inner scope
  description: "# with\n\nUse the `with` tag to create a new inner scope. Variables set within this scope are not visible outside of the scope:\n\n``` php\n{% with %}\n{% set foo = 42 %}\n{{ foo }}{# foo is 42 here #}\n{% endwith %}\nfoo is not visible here any longer\n```\n\nInstead of defining variables at the beginning of the scope, you can pass a hash of variables you want to define in the `with` tag; the previous example is equivalent to the following one:\n\n``` php\n{% with { foo: 42 } %}\n{{ foo }}{# foo is 42 here #}\n{% endwith %}\nfoo is not visible here any longer\n\n{# it works with any expression that resolves to a hash #}\n{% set vars = { foo: 42 } %}\n{% with vars %}\n    ...\n{% endwith %}\n```\n\nBy default, the inner scope has access to the outer scope context; you can disable this behavior by appending the `only` keyword:\n\n``` php\n{% set bar = 'bar' %}\n{% with { foo: 42 } only %}\n{# only foo is defined #}\n{# bar is not defined #}\n{% endwith %}\n```\n\n[« verbatim](verbatim \"verbatim\") \\| [Filters »](../filters/index \"Filters\")\n\n© 2009–2018 by the Twig Team  \nLicensed under the three clause BSD license.  \nThe Twig logo is © 2010–2020 Symfony  \n[https://twig.symfony.com/doc/3.x/tags/with.html](https://twig.symfony.com/doc/3.x/tags/with.html)"
