---
name: Composer
slug: composer
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © Nils Adermann, Jordi Boggiano
  Licensed under the MIT License.
  https://getcomposer.org/doc/
homepage: https://getcomposer.org

---
- name: 1. Introduction
  id: 00-intro.md
  summary: Composer is a tool for dependency management in PHP
  description: "# Introduction\n\nComposer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.\n\n## Dependency management\n\nComposer is **not** a package manager in the same sense as Yum or Apt are. Yes, it deals with \"packages\" or libraries, but it manages them on a per-project basis, installing them in a directory (e.g. `vendor`) inside your project. By default, it does not install anything globally. Thus, it is a dependency manager. It does however support a \"global\" project for convenience via the [global](03-cli.md#global) command.\n\nThis idea is not new and Composer is strongly inspired by node's [npm](https://www.npmjs.com/) and ruby's [bundler](https://bundler.io/).\n\nSuppose:\n\n1.  You have a project that depends on a number of libraries.\n2.  Some of those libraries depend on other libraries.\n\nComposer:\n\n1.  Enables you to declare the libraries you depend on.\n2.  Finds out which versions of which packages can and need to be installed, and installs them (meaning it downloads them into your project).\n3.  You can update all your dependencies in one command.\n\nSee the [Basic usage](01-basic-usage.md) chapter for more details on declaring dependencies.\n\n## System Requirements\n\nComposer in its latest version requires PHP 7.2.5 to run. A long-term-support version (2.2.x) still offers support for PHP 5.3.2+ in case you are stuck with a legacy PHP version. A few sensitive php settings and compile flags are also required, but when using the installer you will be warned about any incompatibilities.\n\nTo install packages from sources instead of plain zip archives, you will need git, svn, fossil or hg depending on how the package is version-controlled.\n\nComposer is multi-platform and we strive to make it run equally well on Windows, Linux and macOS.\n\n## Installation - Linux / Unix / macOS\n\n### Downloading the Composer Executable\n\nComposer offers a convenient installer that you can execute directly from the command line. Feel free to [download this file](https://getcomposer.org/installer) or review it on [GitHub](https://github.com/composer/getcomposer.org/blob/main/web/installer) if you wish to know more about the inner workings of the installer. The source is plain PHP.\n\nThere are, in short, two ways to install Composer. Locally as part of your project, or globally as a system wide executable.\n\n#### Locally\n\nTo install Composer locally, run the installer in your project directory. See [the Download page](https://getcomposer.org/download/) for instructions.\n\nThe installer will check a few PHP settings and then download `composer.phar` to your working directory. This file is the Composer binary. It is a PHAR (PHP archive), which is an archive format for PHP which can be run on the command line, amongst other things.\n\nNow run `php composer.phar` in order to run Composer.\n\nYou can install Composer to a specific directory by using the `--install-dir` option and additionally (re)name it as well using the `--filename` option. When running the installer when following [the Download page instructions](https://getcomposer.org/download/) add the following parameters:\n\n    php composer-setup.php --install-dir=bin --filename=composer\n\nNow run `php bin/composer` in order to run Composer.\n\n#### Globally\n\nYou can place the Composer PHAR anywhere you wish. If you put it in a directory that is part of your `PATH`, you can access it globally. On Unix systems you can even make it executable and invoke it without directly using the `php` interpreter.\n\nAfter running the installer following [the Download page instructions](https://getcomposer.org/download/) you can run this to move composer.phar to a directory that is in your path:\n\n    mv composer.phar /usr/local/bin/composer\n\nIf you like to install it only for your user and avoid requiring root permissions, you can use `~/.local/bin` instead which is available by default on some Linux distributions.\n\n> **Note:** If the above fails due to permissions, you may need to run it again with `sudo`.\n>\n> **Note:** On some versions of macOS the `/usr` directory does not exist by default. If you receive the error \"/usr/local/bin/composer: No such file or directory\" then you must create the directory manually before proceeding: `mkdir -p /usr/local/bin`.\n>\n> **Note:** For information on changing your PATH, please read the [Wikipedia article](https://en.wikipedia.org/wiki/PATH_(variable)) and/or use your search engine of choice.\n\nNow run `composer` in order to run Composer instead of `php composer.phar`.\n\n## Installation - Windows\n\n### Using the Installer\n\nThis is the easiest way to get Composer set up on your machine.\n\nDownload and run [Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe). It will install the latest Composer version and set up your PATH so that you can call `composer` from any directory in your command line.\n\n> **Note:** Close your current terminal. Test usage with a new terminal: This is important since the PATH only gets loaded when the terminal starts.\n\n### Manual Installation\n\nChange to a directory on your `PATH` and run the installer following [the Download page instructions](https://getcomposer.org/download/) to download `composer.phar`.\n\nCreate a new `composer.bat` file alongside `composer.phar`:\n\nUsing cmd.exe:\n\n    C:\\bin> echo @php \"%~dp0composer.phar\" %*>composer.bat\n\nUsing PowerShell:\n\n    PS C:\\bin> Set-Content composer.bat '@php \"%~dp0composer.phar\" %*'\n\nAdd the directory to your PATH environment variable if it isn't already. For information on changing your PATH variable, please see [this article](https://www.computerhope.com/issues/ch000549.htm) and/or use your search engine of choice.\n\nClose your current terminal. Test usage with a new terminal:\n\n    C:\\Users\\username>composer -V\n\n    Composer version 2.4.0 2022-08-16 16:10:48\n\n## Docker Image\n\nComposer is published as Docker container in a few places, see the list in the [composer/docker README](https://github.com/composer/docker).\n\nExample usage:\n\n    docker pull composer/composer\n    docker run --rm -it -v \"$(pwd):/app\" composer/composer install\n\nTo add Composer to an existing **Dockerfile**:\n\n    COPY --from=composer/composer /usr/bin/composer /usr/bin/composer\n\nRead the [image description](https://hub.docker.com/r/composer/composer) for further usage information.\n\n**Note:** Docker specific issues should be filed [on the composer/docker repository](https://github.com/composer/docker/issues).\n\n**Note:** You may also use `composer` instead of `composer/composer` as image name above. It is shorter and is a Docker official image but is not published directly by us and thus usually receives new releases with a delay of a few days.\n\n## Using Composer\n\nNow that you've installed Composer, you are ready to use it! Head on over to the next chapter for a short demonstration.\n\n[Basic usage](01-basic-usage.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md)"
- name: 2. Basic usage
  id: 01-basic-usage.md
  summary: For our basic usage introduction, we will be installing monolog/monolog, a logging library
  description: "# Basic usage\n\n## Introduction\n\nFor our basic usage introduction, we will be installing `monolog/monolog`, a logging library. If you have not yet installed Composer, refer to the [Intro](00-intro.md) chapter.\n\n> **Note:** for the sake of simplicity, this introduction will assume you have performed a [local](00-intro.md#locally) install of Composer.\n\n## `composer.json`: Project setup\n\nTo start using Composer in your project, all you need is a `composer.json` file. This file describes the dependencies of your project and may contain other metadata as well. It typically should go in the top-most directory of your project/VCS repository. You can technically run Composer anywhere but if you want to publish a package to Packagist.org, it will have to be able to find the file at the top of your VCS repository.\n\n### The `require` key\n\nThe first thing you specify in `composer.json` is the [`require`](04-schema.md#require) key. You are telling Composer which packages your project depends on.\n\n``` javascript\n{\n    \"require\": {\n        \"monolog/monolog\": \"2.0.*\"\n    }\n}\n```\n\nAs you can see, [`require`](04-schema.md#require) takes an object that maps **package names** (e.g. `monolog/monolog`) to **version constraints** (e.g. `1.0.*`).\n\nComposer uses this information to search for the right set of files in package \"repositories\" that you register using the [`repositories`](04-schema.md#repositories) key, or in [Packagist.org](https://packagist.org), the default package repository. In the above example, since no other repository has been registered in the `composer.json` file, it is assumed that the `monolog/monolog` package is registered on Packagist.org. (Read more [about Packagist](#packagist), and [about repositories](05-repositories.md)).\n\n### Package names\n\nThe package name consists of a vendor name and the project's name. Often these will be identical - the vendor name only exists to prevent naming clashes. For example, it would allow two different people to create a library named `json`. One might be named `igorw/json` while the other might be `seldaek/json`.\n\nRead more about [publishing packages and package naming](02-libraries.md). (Note that you can also specify \"platform packages\" as dependencies, allowing you to require certain versions of server software. See [platform packages](#platform-packages) below.)\n\n### Package version constraints\n\nIn our example, we are requesting the Monolog package with the version constraint [`2.0.*`](https://semver.mwl.be/#?package=monolog%2Fmonolog&version=2.0.*). This means any version in the `2.0` development branch, or any version that is greater than or equal to 2.0 and less than 2.1 (`>=2.0 <2.1`).\n\nPlease read [versions](articles/versions.md) for more in-depth information on versions, how versions relate to each other, and on version constraints.\n\n> **How does Composer download the right files?** When you specify a dependency in `composer.json`, Composer first takes the name of the package that you have requested and searches for it in any repositories that you have registered using the [`repositories`](04-schema.md#repositories) key. If you have not registered any extra repositories, or it does not find a package with that name in the repositories you have specified, it falls back to Packagist.org (more [below](#packagist)).\n>\n> When Composer finds the right package, either in Packagist.org or in a repo you have specified, it then uses the versioning features of the package's VCS (i.e., branches and tags) to attempt to find the best match for the version constraint you have specified. Be sure to read about versions and package resolution in the [versions article](articles/versions.md).\n>\n> **Note:** If you are trying to require a package but Composer throws an error regarding package stability, the version you have specified may not meet your default minimum stability requirements. By default, only stable releases are taken into consideration when searching for valid package versions in your VCS.\n>\n> You might run into this if you are trying to require dev, alpha, beta, or RC versions of a package. Read more about stability flags and the `minimum-stability` key on the [schema page](04-schema.md).\n\n## Installing dependencies\n\nTo initially install the defined dependencies for your project, you should run the [`update`](03-cli.md#update-u) command.\n\n    php composer.phar update\n\nThis will make Composer do two things:\n\n- It resolves all dependencies listed in your `composer.json` file and writes all of the packages and their exact versions to the `composer.lock` file, locking the project to those specific versions. You should commit the `composer.lock` file to your project repo so that all people working on the project are locked to the same versions of dependencies (more below). This is the main role of the `update` command.\n- It then implicitly runs the [`install`](03-cli.md#install-i) command. This will download the dependencies' files into the `vendor` directory in your project. (The `vendor` directory is the conventional location for all third-party code in a project). In our example from above, you would end up with the Monolog source files in `vendor/monolog/monolog/`. As Monolog has a dependency on `psr/log`, that package's files can also be found inside `vendor/`.\n\n> **Tip:** If you are using git for your project, you probably want to add `vendor` in your `.gitignore`. You really don't want to add all of that third-party code to your versioned repository.\n\n### Commit your `composer.lock` file to version control\n\nCommitting this file to version control is important because it will cause anyone who sets up the project to use the exact same versions of the dependencies that you are using. Your CI server, production machines, other developers in your team, everything and everyone runs on the same dependencies, which mitigates the potential for bugs affecting only some parts of the deployments. Even if you develop alone, in six months when reinstalling the project you can feel confident the dependencies installed are still working even if your dependencies released many new versions since then. (See note below about using the `update` command.)\n\n> **Note:** For libraries it is not necessary to commit the lock file, see also: [Libraries - Lock file](02-libraries.md#lock-file).\n\n### Installing from `composer.lock`\n\nIf there is already a `composer.lock` file in the project folder, it means either you ran the `update` command before, or someone else on the project ran the `update` command and committed the `composer.lock` file to the project (which is good).\n\nEither way, running `install` when a `composer.lock` file is present resolves and installs all dependencies that you listed in `composer.json`, but Composer uses the exact versions listed in `composer.lock` to ensure that the package versions are consistent for everyone working on your project. As a result you will have all dependencies requested by your `composer.json` file, but they may not all be at the very latest available versions (some of the dependencies listed in the `composer.lock` file may have released newer versions since the file was created). This is by design, it ensures that your project does not break because of unexpected changes in dependencies.\n\nSo after fetching new changes from your VCS repository it is recommended to run a Composer `install` to make sure the vendor directory is up in sync with your `composer.lock` file.\n\n    php composer.phar install\n\n## Updating dependencies to their latest versions\n\nAs mentioned above, the `composer.lock` file prevents you from automatically getting the latest versions of your dependencies. To update to the latest versions, use the [`update`](03-cli.md#update-u) command. This will fetch the latest matching versions (according to your `composer.json` file) and update the lock file with the new versions.\n\n    php composer.phar update\n\n> **Note:** Composer will display a Warning when executing an `install` command if the `composer.lock` has not been updated since changes were made to the `composer.json` that might affect dependency resolution.\n\nIf you only want to install, upgrade or remove one dependency, you can explicitly list it as an argument:\n\n    php composer.phar update monolog/monolog [...]\n\n## Packagist\n\n[Packagist.org](https://packagist.org/) is the main Composer repository. A Composer repository is basically a package source: a place where you can get packages from. Packagist aims to be the central repository that everybody uses. This means that you can automatically `require` any package that is available there, without further specifying where Composer should look for the package.\n\nIf you go to the [Packagist.org website](https://packagist.org/), you can browse and search for packages.\n\nAny open source project using Composer is recommended to publish their packages on Packagist. A library does not need to be on Packagist to be used by Composer, but it enables discovery and adoption by other developers more quickly.\n\n## Platform packages\n\nComposer has platform packages, which are virtual packages for things that are installed on the system but are not actually installable by Composer. This includes PHP itself, PHP extensions and some system libraries.\n\n- `php` represents the PHP version of the user, allowing you to apply constraints, e.g. `^7.1`. To require a 64bit version of php, you can require the `php-64bit` package.\n\n- `hhvm` represents the version of the HHVM runtime and allows you to apply a constraint, e.g., `^2.3`.\n\n- `ext-<name>` allows you to require PHP extensions (includes core extensions). Versioning can be quite inconsistent here, so it's often a good idea to set the constraint to `*`. An example of an extension package name is `ext-gd`.\n\n- `lib-<name>` allows constraints to be made on versions of libraries used by PHP. The following are available: `curl`, `iconv`, `icu`, `libxml`, `openssl`, `pcre`, `uuid`, `xsl`.\n\nYou can use [`show --platform`](03-cli.md#show) to get a list of your locally available platform packages.\n\n## Autoloading\n\nFor libraries that specify autoload information, Composer generates a `vendor/autoload.php` file. You can include this file and start using the classes that those libraries provide without any extra work:\n\n``` php\nrequire __DIR__ . '/vendor/autoload.php';\n\n$log = new Monolog\\Logger('name');\n$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n$log->warning('Foo');\n```\n\nYou can even add your own code to the autoloader by adding an [`autoload`](04-schema.md#autoload) field to `composer.json`.\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\\": \"src/\"}\n    }\n}\n```\n\nComposer will register a [PSR-4](https://www.php-fig.org/psr/psr-4/) autoloader for the `Acme` namespace.\n\nYou define a mapping from namespaces to directories. The `src` directory would be in your project root, on the same level as the `vendor` directory. An example filename would be `src/Foo.php` containing an `Acme\\Foo` class.\n\nAfter adding the [`autoload`](04-schema.md#autoload) field, you have to re-run this command:\n\n    php composer.phar dump-autoload\n\nThis command will re-generate the `vendor/autoload.php` file. See the [`dump-autoload`](03-cli.md#dump-autoload-dumpautoload-) section for more information.\n\nIncluding that file will also return the autoloader instance, so you can store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example.\n\n``` php\n$loader = require __DIR__ . '/vendor/autoload.php';\n$loader->addPsr4('Acme\\\\Test\\\\', __DIR__);\n```\n\nIn addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and files autoloading. See the [`autoload`](04-schema.md#autoload) reference for more information.\n\nSee also the docs on [optimizing the autoloader](articles/autoloader-optimization.md).\n\n> **Note:** Composer provides its own autoloader. If you don't want to use that one, you can include `vendor/composer/autoload_*.php` files, which return associative arrays allowing you to configure your own autoloader.\n\n← [Intro](00-intro.md) \\| [Libraries](02-libraries.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/01-basic-usage.md](https://getcomposer.org/doc/01-basic-usage.md)"
- name: 3. Libraries
  id: 02-libraries.md
  summary: This chapter will tell you how to make your library installable through Composer
  description: "# Libraries\n\nThis chapter will tell you how to make your library installable through Composer.\n\n## Every project is a package\n\nAs soon as you have a `composer.json` in a directory, that directory is a package. When you add a [`require`](04-schema.md#require) to a project, you are making a package that depends on other packages. The only difference between your project and a library is that your project is a package without a name.\n\nIn order to make that package installable you need to give it a name. You do this by adding the [`name`](04-schema.md#name) property in `composer.json`:\n\n``` javascript\n{\n    \"name\": \"acme/hello-world\",\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n```\n\nIn this case the project name is `acme/hello-world`, where `acme` is the vendor name. Supplying a vendor name is mandatory.\n\n> **Note:** If you don't know what to use as a vendor name, your GitHub username is usually a good bet. Package names must be lowercase, and the convention is to use dashes for word separation.\n\n## Library Versioning\n\nIn the vast majority of cases, you will be maintaining your library using some sort of version control system like git, svn, hg or fossil. In these cases, Composer infers versions from your VCS, and you **should not** specify a version in your `composer.json` file. (See the [Versions article](articles/versions.md) to learn about how Composer uses VCS branches and tags to resolve version constraints.)\n\nIf you are maintaining packages by hand (i.e., without a VCS), you'll need to specify the version explicitly by adding a `version` value in your `composer.json` file:\n\n``` javascript\n{\n    \"version\": \"1.0.0\"\n}\n```\n\n> **Note:** When you add a hardcoded version to a VCS, the version will conflict with tag names. Composer will not be able to determine the version number.\n\n### VCS Versioning\n\nComposer uses your VCS's branch and tag features to resolve the version constraints you specify in your [`require`](04-schema.md#require) field to specific sets of files. When determining valid available versions, Composer looks at all of your tags and branches and translates their names into an internal list of options that it then matches against the version constraint you provided.\n\nFor more on how Composer treats tags and branches and how it resolves package version constraints, read the [versions](articles/versions.md) article.\n\n## Lock file\n\nFor your library you may commit the `composer.lock` file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project.\n\nIf you do not want to commit the lock file, and you are using git, add it to the `.gitignore`.\n\n## Publishing to a VCS\n\nOnce you have a VCS repository (version control system, e.g. git) containing a `composer.json` file, your library is already composer-installable. In this example we will publish the `acme/hello-world` library on GitHub under `github.com/username/hello-world`.\n\nNow, to test installing the `acme/hello-world` package, we create a new project locally. We will call it `acme/blog`. This blog will depend on `acme/hello-world`, which in turn depends on `monolog/monolog`. We can accomplish this by creating a new `blog` directory somewhere, containing a `composer.json`:\n\n``` javascript\n{\n    \"name\": \"acme/blog\",\n    \"require\": {\n        \"acme/hello-world\": \"dev-master\"\n    }\n}\n```\n\nThe name is not needed in this case, since we don't want to publish the blog as a library. It is added here to clarify which `composer.json` is being described.\n\nNow we need to tell the blog app where to find the `hello-world` dependency. We do this by adding a package repository specification to the blog's `composer.json`:\n\n``` javascript\n{\n    \"name\": \"acme/blog\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/username/hello-world\"\n        }\n    ],\n    \"require\": {\n        \"acme/hello-world\": \"dev-master\"\n    }\n}\n```\n\nFor more details on how package repositories work and what other types are available, see [Repositories](05-repositories.md).\n\nThat's all. You can now install the dependencies by running Composer's [`install`](03-cli.md#install) command!\n\n**Recap:** Any git/svn/hg/fossil repository containing a `composer.json` can be added to your project by specifying the package repository and declaring the dependency in the [`require`](04-schema.md#require) field.\n\n## Publishing to packagist\n\nAlright, so now you can publish packages. But specifying the VCS repository every time is cumbersome. You don't want to force all your users to do that.\n\nThe other thing that you may have noticed is that we did not specify a package repository for `monolog/monolog`. How did that work? The answer is Packagist.\n\n[Packagist](https://packagist.org/) is the main package repository for Composer, and it is enabled by default. Anything that is published on Packagist is available automatically through Composer. Since [Monolog is on Packagist](https://packagist.org/packages/monolog/monolog), we can depend on it without having to specify any additional repositories.\n\nIf we wanted to share `hello-world` with the world, we would publish it on Packagist as well.\n\nYou visit [Packagist](https://packagist.org) and hit the \"Submit\" button. This will prompt you to sign up if you haven't already, and then allows you to submit the URL to your VCS repository, at which point Packagist will start crawling it. Once it is done, your package will be available to anyone!\n\n← [Basic usage](01-basic-usage.md) \\| [Command-line interface](03-cli.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/02-libraries.md](https://getcomposer.org/doc/02-libraries.md)"
- name: 4. Command-line interface / Commands
  id: 03-cli.md
  summary: You've already learned how to use the command-line interface to do some things
  description: "# Command-line interface / Commands\n\nYou've already learned how to use the command-line interface to do some things. This chapter documents all the available commands.\n\nTo get help from the command-line, call `composer` or `composer list` to see the complete list of commands, then `--help` combined with any of those can give you more information.\n\nAs Composer uses [symfony/console](https://github.com/symfony/console) you can call commands by short name if it's not ambiguous.\n\n    php composer.phar dump\n\ncalls `composer dump-autoload`.\n\n## Bash Completions\n\nTo install bash completions you can run `composer completion bash > completion.bash`. This will create a `completion.bash` file in the current directory.\n\nThen execute `source completion.bash` to enable it in the current terminal session.\n\nMove and rename the `completion.bash` file to `/etc/bash_completion.d/composer` to make it load automatically in new terminals.\n\n## Global Options\n\nThe following options are available with every command:\n\n- **--verbose (-v):** Increase verbosity of messages.\n- **--help (-h):** Display help information.\n- **--quiet (-q):** Do not output any message.\n- **--no-interaction (-n):** Do not ask any interactive question.\n- **--no-plugins:** Disables plugins.\n- **--no-scripts:** Skips execution of scripts defined in `composer.json`.\n- **--no-cache:** Disables the use of the cache directory. Same as setting the COMPOSER_CACHE_DIR env var to /dev/null (or NUL on Windows).\n- **--working-dir (-d):** If specified, use the given directory as working directory.\n- **--profile:** Display timing and memory usage information\n- **--ansi:** Force ANSI output.\n- **--no-ansi:** Disable ANSI output.\n- **--version (-V):** Display this application version.\n\n## Process Exit Codes\n\n- **0:** OK\n- **1:** Generic/unknown error code\n- **2:** Dependency solving error code\n\n## init\n\nIn the [Libraries](02-libraries.md) chapter we looked at how to create a `composer.json` by hand. There is also an `init` command available to do this.\n\nWhen you run the command it will interactively ask you to fill in the fields, while using some smart defaults.\n\n    php composer.phar init\n\n### Options\n\n- **--name:** Name of the package.\n- **--description:** Description of the package.\n- **--author:** Author name of the package.\n- **--type:** Type of package.\n- **--homepage:** Homepage of the package.\n- **--require:** Package to require with a version constraint. Should be in format `foo/bar:1.0.0`.\n- **--require-dev:** Development requirements, see **--require**.\n- **--stability (-s):** Value for the `minimum-stability` field.\n- **--license (-l):** License of package.\n- **--repository:** Provide one (or more) custom repositories. They will be stored in the generated composer.json, and used for auto-completion when prompting for the list of requires. Every repository can be either an HTTP URL pointing to a `composer` repository or a JSON string which similar to what the [repositories](04-schema.md#repositories) key accepts.\n- **--autoload (-a):** Add a PSR-4 autoload mapping to the composer.json. Automatically maps your package's namespace to the provided directory. (Expects a relative path, e.g. src/) See also [PSR-4 autoload](04-schema.md#psr-4).\n\n## install / i\n\nThe `install` command reads the `composer.json` file from the current directory, resolves the dependencies, and installs them into `vendor`.\n\n    php composer.phar install\n\nIf there is a `composer.lock` file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies.\n\nIf there is no `composer.lock` file, Composer will create one after dependency resolution.\n\n### Options\n\n- **--prefer-install:** There are two ways of downloading a package: `source` and `dist`. Composer uses `dist` by default. If you pass `--prefer-install=source` (or `--prefer-source`) Composer will install from `source` if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly. To get the legacy behavior where Composer use `source` automatically for dev versions of packages, use `--prefer-install=auto`. See also [config.preferred-install](06-config.md#preferred-install). Passing this flag will override the config value.\n- **--dry-run:** If you want to run through an installation without actually installing a package, you can use `--dry-run`. This will simulate the installation and show you what would happen.\n- **--dev:** Install packages listed in `require-dev` (this is the default behavior).\n- **--no-dev:** Skip installing packages listed in `require-dev`. The autoloader generation skips the `autoload-dev` rules. Also see [COMPOSER_NO_DEV](#composer-no-dev).\n- **--no-autoloader:** Skips autoloader generation.\n- **--no-progress:** Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.\n- **--audit:** Run an audit after installation is complete.\n- **--audit-format:** Audit output format. Must be \"table\", \"plain\", \"json\", or \"summary\" (default).\n- **--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.\n- **--classmap-authoritative (-a):** Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`.\n- **--apcu-autoloader:** Use APCu to cache found/not-found classes.\n- **--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader cache. Implicitly enables `--apcu-autoloader`.\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these. See also the [`platform`](06-config.md#platform) config option.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard. Appending a `+` makes it only ignore the upper-bound of the requirements. For example, if a package requires `php: ^7`, then the option `--ignore-platform-req=php+` would allow installing on PHP 8, but installation on PHP 5.6 would still fail.\n\n## update / u\n\nIn order to get the latest versions of the dependencies and to update the `composer.lock` file, you should use the `update` command. This command is also aliased as `upgrade` as it does the same as `upgrade` does if you are thinking of `apt-get` or similar package managers.\n\n    php composer.phar update\n\nThis will resolve all dependencies of the project and write the exact versions into `composer.lock`.\n\nIf you only want to update a few packages and not all, you can list them as such:\n\n    php composer.phar update vendor/package vendor/package2\n\nYou can also use wildcards to update a bunch of packages at once:\n\n    php composer.phar update \"vendor/*\"\n\nIf you want to downgrade a package to a specific version without changing your composer.json you can use `--with` and provide a custom version constraint:\n\n    php composer.phar update --with vendor/package:2.0.1\n\nNote that with the above all packages will be updated. If you only want to update the package(s) for which you provide custom constraints using `--with`, you can skip `--with` and instead use constraints with the partial update syntax:\n\n    php composer.phar update vendor/package:2.0.1 vendor/package2:3.0.*\n\nThe custom constraint has to be a subset of the existing constraint you have, and this feature is only available for your root package dependencies.\n\n### Options\n\n- **--prefer-install:** There are two ways of downloading a package: `source` and `dist`. Composer uses `dist` by default. If you pass `--prefer-install=source` (or `--prefer-source`) Composer will install from `source` if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly. To get the legacy behavior where Composer use `source` automatically for dev versions of packages, use `--prefer-install=auto`. See also [config.preferred-install](06-config.md#preferred-install). Passing this flag will override the config value.\n- **--dry-run:** Simulate the command without actually doing anything.\n- **--dev:** Install packages listed in `require-dev` (this is the default behavior).\n- **--no-dev:** Skip installing packages listed in `require-dev`. The autoloader generation skips the `autoload-dev` rules. Also see [COMPOSER_NO_DEV](#composer-no-dev).\n- **--no-install:** Does not run the install step after updating the composer.lock file.\n- **--no-audit:** Does not run the audit steps after updating the composer.lock file. Also see [COMPOSER_NO_AUDIT](#composer-no-audit).\n- **--audit-format:** Audit output format. Must be \"table\", \"plain\", \"json\", or \"summary\" (default).\n- **--lock:** Only updates the lock file hash to suppress warning about the lock file being out of date.\n- **--with:** Temporary version constraint to add, e.g. foo/bar:1.0.0 or foo/bar=1.0.0\n- **--no-autoloader:** Skips autoloader generation.\n- **--no-progress:** Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.\n- **--with-dependencies (-w):** Update also dependencies of packages in the argument list, except those which are root requirements.\n- **--with-all-dependencies (-W):** Update also dependencies of packages in the argument list, including those which are root requirements.\n- **--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run, so it is currently not done by default.\n- **--classmap-authoritative (-a):** Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`.\n- **--apcu-autoloader:** Use APCu to cache found/not-found classes.\n- **--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader cache. Implicitly enables `--apcu-autoloader`.\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these. See also the [`platform`](06-config.md#platform) config option.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard. Appending a `+` makes it only ignore the upper-bound of the requirements. For example, if a package requires `php: ^7`, then the option `--ignore-platform-req=php+` would allow installing on PHP 8, but installation on PHP 5.6 would still fail.\n- **--prefer-stable:** Prefer stable versions of dependencies. Can also be set via the COMPOSER_PREFER_STABLE=1 env var.\n- **--prefer-lowest:** Prefer lowest versions of dependencies. Useful for testing minimal versions of requirements, generally used with `--prefer-stable`. Can also be set via the COMPOSER_PREFER_LOWEST=1 env var.\n- **--interactive:** Interactive interface with autocompletion to select the packages to update.\n- **--root-reqs:** Restricts the update to your first degree dependencies.\n\nSpecifying one of the words `mirrors`, `lock`, or `nothing` as an argument has the same effect as specifying the option `--lock`, for example `composer update mirrors` is exactly the same as `composer update --lock`.\n\n## require / r\n\nThe `require` command adds new packages to the `composer.json` file from the current directory. If no file exists one will be created on the fly.\n\n    php composer.phar require\n\nAfter adding/changing the requirements, the modified requirements will be installed or updated.\n\nIf you do not want to choose requirements interactively, you can pass them to the command.\n\n    php composer.phar require \"vendor/package:2.*\" vendor/package2:dev-master\n\nIf you do not specify a package, Composer will prompt you to search for a package, and given results, provide a list of matches to require.\n\n### Options\n\n- **--dev:** Add packages to `require-dev`.\n- **--dry-run:** Simulate the command without actually doing anything.\n- **--prefer-install:** There are two ways of downloading a package: `source` and `dist`. Composer uses `dist` by default. If you pass `--prefer-install=source` (or `--prefer-source`) Composer will install from `source` if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly. To get the legacy behavior where Composer use `source` automatically for dev versions of packages, use `--prefer-install=auto`. See also [config.preferred-install](06-config.md#preferred-install). Passing this flag will override the config value.\n- **--no-progress:** Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.\n- **--no-update:** Disables the automatic update of the dependencies (implies --no-install).\n- **--no-install:** Does not run the install step after updating the composer.lock file.\n- **--no-audit:** Does not run the audit steps after updating the composer.lock file. Also see [COMPOSER_NO_AUDIT](#composer-no-audit).\n- **--audit-format:** Audit output format. Must be \"table\", \"plain\", \"json\", or \"summary\" (default).\n- **--update-no-dev:** Run the dependency update with the `--no-dev` option. Also see [COMPOSER_NO_DEV](#composer-no-dev).\n- **--update-with-dependencies (-w):** Also update dependencies of the newly required packages, except those that are root requirements.\n- **--update-with-all-dependencies (-W):** Also update dependencies of the newly required packages, including those that are root requirements.\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these. See also the [`platform`](06-config.md#platform) config option.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard.\n- **--prefer-stable:** Prefer stable versions of dependencies. Can also be set via the COMPOSER_PREFER_STABLE=1 env var.\n- **--prefer-lowest:** Prefer lowest versions of dependencies. Useful for testing minimal versions of requirements, generally used with `--prefer-stable`. Can also be set via the COMPOSER_PREFER_LOWEST=1 env var.\n- **--sort-packages:** Keep packages sorted in `composer.json`.\n- **--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run, so it is currently not done by default.\n- **--classmap-authoritative (-a):** Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`.\n- **--apcu-autoloader:** Use APCu to cache found/not-found classes.\n- **--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader cache. Implicitly enables `--apcu-autoloader`.\n\n## remove\n\nThe `remove` command removes packages from the `composer.json` file from the current directory.\n\n    php composer.phar remove vendor/package vendor/package2\n\nAfter removing the requirements, the modified requirements will be uninstalled.\n\n### Options\n\n- **--dev:** Remove packages from `require-dev`.\n- **--dry-run:** Simulate the command without actually doing anything.\n- **--no-progress:** Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.\n- **--no-update:** Disables the automatic update of the dependencies (implies --no-install).\n- **--no-install:** Does not run the install step after updating the composer.lock file.\n- **--no-audit:** Does not run the audit steps after installation is complete. Also see [COMPOSER_NO_AUDIT](#composer-no-audit).\n- **--audit-format:** Audit output format. Must be \"table\", \"plain\", \"json\", or \"summary\" (default).\n- **--update-no-dev:** Run the dependency update with the --no-dev option. Also see [COMPOSER_NO_DEV](#composer-no-dev).\n- **--update-with-dependencies (-w):** Also update dependencies of the removed packages. (Deprecated, is now default behavior)\n- **--update-with-all-dependencies (-W):** Allows all inherited dependencies to be updated, including those that are root requirements.\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these. See also the [`platform`](06-config.md#platform) config option.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard.\n- **--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.\n- **--classmap-authoritative (-a):** Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`.\n- **--apcu-autoloader:** Use APCu to cache found/not-found classes.\n- **--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader cache. Implicitly enables `--apcu-autoloader`.\n\n## bump\n\nThe `bump` command increases the lower limit of your composer.json requirements to the currently installed versions. This helps to ensure your dependencies do not accidentally get downgraded due to some other conflict, and can slightly improve dependency resolution performance as it limits the amount of package versions Composer has to look at.\n\nRunning this blindly on libraries is **NOT** recommended as it will narrow down your allowed dependencies, which may cause dependency hell for your users. Running it with `--dev-only` on libraries may be fine however as dev requirements are local to the library and do not affect consumers of the package.\n\n### Options\n\n- **--dev-only:** Only bump requirements in \"require-dev\".\n- **--no-dev-only:** Only bump requirements in \"require\".\n\n## reinstall\n\nThe `reinstall` command looks up installed packages by name, uninstalls them and reinstalls them. This lets you do a clean install of a package if you messed with its files, or if you wish to change the installation type using --prefer-install.\n\n    php composer.phar reinstall acme/foo acme/bar\n\nYou can specify more than one package name to reinstall, or use a wildcard to select several packages at once:\n\n    php composer.phar reinstall \"acme/*\"\n\n### Options\n\n- **--prefer-install:** There are two ways of downloading a package: `source` and `dist`. Composer uses `dist` by default. If you pass `--prefer-install=source` (or `--prefer-source`) Composer will install from `source` if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly. To get the legacy behavior where Composer use `source` automatically for dev versions of packages, use `--prefer-install=auto`. See also [config.preferred-install](06-config.md#preferred-install). Passing this flag will override the config value.\n- **--no-autoloader:** Skips autoloader generation.\n- **--no-progress:** Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.\n- **--optimize-autoloader (-o):** Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.\n- **--classmap-authoritative (-a):** Autoload classes from the classmap only. Implicitly enables `--optimize-autoloader`.\n- **--apcu-autoloader:** Use APCu to cache found/not-found classes.\n- **--apcu-autoloader-prefix:** Use a custom prefix for the APCu autoloader cache. Implicitly enables `--apcu-autoloader`.\n- **--ignore-platform-reqs:** ignore all platform requirements. This only has an effect in the context of the autoloader generation for the reinstall command.\n- **--ignore-platform-req:** ignore a specific platform requirement. This only has an effect in the context of the autoloader generation for the reinstall command. Multiple requirements can be ignored via wildcard.\n\n## check-platform-reqs\n\nThe check-platform-reqs command checks that your PHP and extensions versions match the platform requirements of the installed packages. This can be used to verify that a production server has all the extensions needed to run a project after installing it for example.\n\nUnlike update/install, this command will ignore config.platform settings and check the real platform packages so you can be certain you have the required platform dependencies.\n\n### Options\n\n- **--lock:** Checks requirements only from the lock file, not from installed packages.\n- **--no-dev:** Disables checking of require-dev packages requirements.\n- **--format (-f):** Format of the output: text (default) or json\n\n## global\n\nThe global command allows you to run other commands like `install`, `remove`, `require` or `update` as if you were running them from the [COMPOSER_HOME](#composer-home) directory.\n\nThis is merely a helper to manage a project stored in a central location that can hold CLI tools or Composer plugins that you want to have available everywhere.\n\nThis can be used to install CLI utilities globally. Here is an example:\n\n    php composer.phar global require friendsofphp/php-cs-fixer\n\nNow the `php-cs-fixer` binary is available globally. Make sure your global [vendor binaries](articles/vendor-binaries.md) directory is in your `$PATH` environment variable, you can get its location with the following command :\n\n    php composer.phar global config bin-dir --absolute\n\nIf you wish to update the binary later on you can run a global update:\n\n    php composer.phar global update\n\n## search\n\nThe search command allows you to search through the current project's package repositories. Usually this will be packagist. You pass it the terms you want to search for.\n\n    php composer.phar search monolog\n\nYou can also search for more than one term by passing multiple arguments.\n\n### Options\n\n- **--only-name (-N):** Search only in package names.\n- **--only-vendor (-O):** Search only for vendor / organization names, returns only \"vendor\" as a result.\n- **--type (-t):** Search for a specific package type.\n- **--format (-f):** Lets you pick between text (default) or json output format. Note that in the json, only the name and description keys are guaranteed to be present. The rest (`url`, `repository`, `downloads` and `favers`) are available for Packagist.org search results and other repositories may return more or less data.\n\n## show\n\nTo list all of the available packages, you can use the `show` command.\n\n    php composer.phar show\n\nTo filter the list you can pass a package mask using wildcards.\n\n    php composer.phar show \"monolog/*\"\n\n    monolog/monolog 2.4.0 Sends your logs to files, sockets, inboxes, databases and various web services\n\nIf you want to see the details of a certain package, you can pass the package name.\n\n    php composer.phar show monolog/monolog\n\n    name     : monolog/monolog\n    descrip. : Sends your logs to files, sockets, inboxes, databases and various web services\n    keywords : log, logging, psr-3\n    versions : * 1.27.1\n    type     : library\n    license  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\n    homepage : http://github.com/Seldaek/monolog\n    source   : [git] https://github.com/Seldaek/monolog.git 904713c5929655dc9b97288b69cfeedad610c9a1\n    dist     : [zip] https://api.github.com/repos/Seldaek/monolog/zipball/904713c5929655dc9b97288b69cfeedad610c9a1 904713c5929655dc9b97288b69cfeedad610c9a1\n    names    : monolog/monolog, psr/log-implementation\n\n    support\n    issues : https://github.com/Seldaek/monolog/issues\n    source : https://github.com/Seldaek/monolog/tree/1.27.1\n\n    autoload\n    psr-4\n    Monolog\\ => src/Monolog\n\n    requires\n    php >=5.3.0\n    psr/log ~1.0\n\nYou can even pass the package version, which will tell you the details of that specific version.\n\n    php composer.phar show monolog/monolog 1.0.2\n\n### Options\n\n- **--all:** List all packages available in all your repositories.\n- **--installed (-i):** List the packages that are installed (this is enabled by default, and deprecated).\n- **--locked:** List the locked packages from composer.lock.\n- **--platform (-p):** List only platform packages (php & extensions).\n- **--available (-a):** List available packages only.\n- **--self (-s):** List the root package info.\n- **--name-only (-N):** List package names only.\n- **--path (-P):** List package paths.\n- **--tree (-t):** List your dependencies as a tree. If you pass a package name it will show the dependency tree for that package.\n- **--latest (-l):** List all installed packages including their latest version.\n- **--outdated (-o):** Implies --latest, but this lists *only* packages that have a newer version available.\n- **--ignore:** Ignore specified package(s). Use it with the --outdated option if you don't want to be informed about new versions of some packages\n- **--no-dev:** Filters dev dependencies from the package list.\n- **--major-only (-M):** Use with --latest or --outdated. Only shows packages that have major SemVer-compatible updates.\n- **--minor-only (-m):** Use with --latest or --outdated. Only shows packages that have minor SemVer-compatible updates.\n- **--patch-only:** Use with --latest or --outdated. Only shows packages that have patch-level SemVer-compatible updates.\n- **--direct (-D):** Restricts the list of packages to your direct dependencies.\n- **--strict:** Return a non-zero exit code when there are outdated packages.\n- **--format (-f):** Lets you pick between text (default) or json output format.\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these. Use with the --outdated option.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard. Use with the --outdated option.\n\n## outdated\n\nThe `outdated` command shows a list of installed packages that have updates available, including their current and latest versions. This is basically an alias for `composer show -lo`.\n\nThe color coding is as such:\n\n- **green (=)**: Dependency is in the latest version and is up to date.\n- **yellow (`~`)**: Dependency has a new version available that includes backwards compatibility breaks according to semver, so upgrade when you can but it may involve work.\n- **red (!)**: Dependency has a new version that is semver-compatible and you should upgrade it.\n\n### Options\n\n- **--all (-a):** Show all packages, not just outdated (alias for `composer show --latest`).\n- **--direct (-D):** Restricts the list of packages to your direct dependencies.\n- **--strict:** Returns non-zero exit code if any package is outdated.\n- **--ignore:** Ignore specified package(s). Use it if you don't want to be informed about new versions of some packages\n- **--major-only (-M):** Only shows packages that have major SemVer-compatible updates.\n- **--minor-only (-m):** Only shows packages that have minor SemVer-compatible updates.\n- **--patch-only (-p):** Only shows packages that have patch-level SemVer-compatible updates.\n- **--format (-f):** Lets you pick between text (default) or json output format.\n- **--no-dev:** Do not show outdated dev dependencies.\n- **--locked:** Shows updates for packages from the lock file, regardless of what is currently in vendor dir.\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard.\n\n## browse / home\n\nThe `browse` (aliased to `home`) opens a package's repository URL or homepage in your browser.\n\n### Options\n\n- **--homepage (-H):** Open the homepage instead of the repository URL.\n- **--show (-s):** Only show the homepage or repository URL.\n\n## suggests\n\nLists all packages suggested by the currently installed set of packages. You can optionally pass one or multiple package names in the format of `vendor/package` to limit output to suggestions made by those packages only.\n\nUse the `--by-package` (default) or `--by-suggestion` flags to group the output by the package offering the suggestions or the suggested packages respectively.\n\nIf you only want a list of suggested package names, use `--list`.\n\n### Options\n\n- **--by-package:** Groups output by suggesting package (default).\n- **--by-suggestion:** Groups output by suggested package.\n- **--all:** Show suggestions from all dependencies, including transitive ones (by default only direct dependencies' suggestions are shown).\n- **--list:** Show only list of suggested package names.\n- **--no-dev:** Excludes suggestions from `require-dev` packages.\n\n## fund\n\nDiscover how to help fund the maintenance of your dependencies. This lists all funding links from the installed dependencies. Use `--format=json` to get machine-readable output.\n\n### Options\n\n- **--format (-f):** Lets you pick between text (default) or json output format.\n\n## depends (why)\n\nThe `depends` command tells you which other packages depend on a certain package. As with installation `require-dev` relationships are only considered for the root package.\n\n    php composer.phar depends doctrine/lexer\n\n    doctrine/annotations  1.13.3 requires doctrine/lexer (1.*)\n    doctrine/common       2.13.3 requires doctrine/lexer (^1.0)\n\nYou can optionally specify a version constraint after the package to limit the search.\n\nAdd the `--tree` or `-t` flag to show a recursive tree of why the package is depended upon, for example:\n\n    php composer.phar depends psr/log -t\n\n    psr/log 1.1.4 Common interface for logging libraries\n    ├──composer/composer 2.4.x-dev (requires psr/log ^1.0 || ^2.0 || ^3.0)\n    ├──composer/composer dev-main (requires psr/log ^1.0 || ^2.0 || ^3.0)\n    ├──composer/xdebug-handler 3.0.3 (requires psr/log ^1 || ^2 || ^3)\n    │  ├──composer/composer 2.4.x-dev (requires composer/xdebug-handler ^2.0.2 || ^3.0.3)\n    │  └──composer/composer dev-main (requires composer/xdebug-handler ^2.0.2 || ^3.0.3)\n    └──symfony/console v5.4.11 (conflicts psr/log >=3) (circular dependency aborted here)\n\n### Options\n\n- **--recursive (-r):** Recursively resolves up to the root package.\n- **--tree (-t):** Prints the results as a nested tree, implies -r.\n\n## prohibits (why-not)\n\nThe `prohibits` command tells you which packages are blocking a given package from being installed. Specify a version constraint to verify whether upgrades can be performed in your project, and if not why not. See the following example:\n\n    php composer.phar prohibits symfony/symfony 3.1\n\n    laravel/framework v5.2.16 requires symfony/var-dumper (2.8.*|3.0.*)\n\nNote that you can also specify platform requirements, for example to check whether you can upgrade your server to PHP 8.0:\n\n    php composer.phar prohibits php 8\n\n    doctrine/cache        v1.6.0 requires php (~5.5|~7.0)\n    doctrine/common       v2.6.1 requires php (~5.5|~7.0)\n    doctrine/instantiator 1.0.5  requires php (>=5.3,<8.0-DEV)\n\nAs with `depends` you can request a recursive lookup, which will list all packages depending on the packages that cause the conflict.\n\n### Options\n\n- **--recursive (-r):** Recursively resolves up to the root package.\n- **--tree (-t):** Prints the results as a nested tree, implies -r.\n\n## validate\n\nYou should always run the `validate` command before you commit your `composer.json` file, and before you tag a release. It will check if your `composer.json` is valid.\n\n    php composer.phar validate\n\n### Options\n\n- **--no-check-all:** Do not emit a warning if requirements in `composer.json` use unbound or overly strict version constraints.\n- **--no-check-lock:** Do not emit an error if `composer.lock` exists and is not up to date.\n- **--no-check-publish:** Do not emit an error if `composer.json` is unsuitable for publishing as a package on Packagist but is otherwise valid.\n- **--with-dependencies:** Also validate the composer.json of all installed dependencies.\n- **--strict:** Return a non-zero exit code for warnings as well as errors.\n\n## status\n\nIf you often need to modify the code of your dependencies and they are installed from source, the `status` command allows you to check if you have local changes in any of them.\n\n    php composer.phar status\n\nWith the `--verbose` option you get some more information about what was changed:\n\n    php composer.phar status -v\n\n    You have changes in the following dependencies:\n    vendor/seld/jsonlint:\n        M README.mdown\n\n## self-update (selfupdate)\n\nTo update Composer itself to the latest version, run the `self-update` command. It will replace your `composer.phar` with the latest version.\n\n    php composer.phar self-update\n\nIf you would like to instead update to a specific release specify it:\n\n    php composer.phar self-update 2.4.0-RC1\n\nIf you have installed Composer for your entire system (see [global installation](00-intro.md#globally)), you may have to run the command with `root` privileges\n\n    sudo -H composer self-update\n\nIf Composer was not installed as a PHAR, this command is not available. (This is sometimes the case when Composer was installed by an operating system package manager.)\n\n### Options\n\n- **--rollback (-r):** Rollback to the last version you had installed.\n- **--clean-backups:** Delete old backups during an update. This makes the current version of Composer the only backup available after the update.\n- **--no-progress:** Do not output download progress.\n- **--update-keys:** Prompt user for a key update.\n- **--stable:** Force an update to the stable channel.\n- **--preview:** Force an update to the preview channel.\n- **--snapshot:** Force an update to the snapshot channel.\n- **--1:** Force an update to the stable channel, but only use 1.x versions\n- **--2:** Force an update to the stable channel, but only use 2.x versions\n- **--set-channel-only:** Only store the channel as the default one and then exit\n\n## config\n\nThe `config` command allows you to edit Composer config settings and repositories in either the local `composer.json` file or the global `config.json` file.\n\nAdditionally it lets you edit most properties in the local `composer.json`.\n\n    php composer.phar config --list\n\n### Usage\n\n`config [options] [setting-key] [setting-value1] ... [setting-valueN]`\n\n`setting-key` is a configuration option name and `setting-value1` is a configuration value. For settings that can take an array of values (like `github-protocols`), multiple setting-value arguments are allowed.\n\nYou can also edit the values of the following properties:\n\n`description`, `homepage`, `keywords`, `license`, `minimum-stability`, `name`, `prefer-stable`, `type` and `version`.\n\nSee the [Config](06-config.md) chapter for valid configuration options.\n\n### Options\n\n- **--global (-g):** Operate on the global config file located at `$COMPOSER_HOME/config.json` by default. Without this option, this command affects the local composer.json file or a file specified by `--file`.\n- **--editor (-e):** Open the local composer.json file using in a text editor as defined by the `EDITOR` env variable. With the `--global` option, this opens the global config file.\n- **--auth (-a):** Affect auth config file (only used for --editor).\n- **--unset:** Remove the configuration element named by `setting-key`.\n- **--list (-l):** Show the list of current config variables. With the `--global` option this lists the global configuration only.\n- **--file=\"...\" (-f):** Operate on a specific file instead of composer.json. Note that this cannot be used in conjunction with the `--global` option.\n- **--absolute:** Returns absolute paths when fetching `*-dir` config values instead of relative.\n- **--json:** JSON decode the setting value, to be used with `extra.*` keys.\n- **--merge:** Merge the setting value with the current value, to be used with `extra.*` keys in combination with `--json`.\n- **--append:** When adding a repository, append it (lowest priority) to the existing ones instead of prepending it (highest priority).\n- **--source:** Display where the config value is loaded from.\n\n### Modifying Repositories\n\nIn addition to modifying the config section, the `config` command also supports making changes to the repositories section by using it the following way:\n\n    php composer.phar config repositories.foo vcs https://github.com/foo/bar\n\nIf your repository requires more configuration options, you can instead pass its JSON representation :\n\n    php composer.phar config repositories.foo '{\"type\": \"vcs\", \"url\": \"http://svn.example.org/my-project/\", \"trunk-path\": \"master\"}'\n\n### Modifying Extra Values\n\nIn addition to modifying the config section, the `config` command also supports making changes to the extra section by using it the following way:\n\n    php composer.phar config extra.foo.bar value\n\nThe dots indicate array nesting, a max depth of 3 levels is allowed though. The above would set `\"extra\": { \"foo\": { \"bar\": \"value\" } }`.\n\nIf you have a complex value to add/modify, you can use the `--json` and `--merge` flags to edit extra fields as json:\n\n    php composer.phar config --json extra.foo.bar '{\"baz\": true, \"qux\": []}'\n\n## create-project\n\nYou can use Composer to create new projects from an existing package. This is the equivalent of doing a git clone/svn checkout followed by a `composer install` of the vendors.\n\nThere are several applications for this:\n\n1.  You can deploy application packages.\n2.  You can check out any package and start developing on patches for example.\n3.  Projects with multiple developers can use this feature to bootstrap the initial application for development.\n\nTo create a new project using Composer you can use the `create-project` command. Pass it a package name, and the directory to create the project in. You can also provide a version as a third argument, otherwise the latest version is used.\n\nIf the directory does not currently exist, it will be created during installation.\n\n    php composer.phar create-project doctrine/orm path \"2.2.*\"\n\nIt is also possible to run the command without params in a directory with an existing `composer.json` file to bootstrap a project.\n\nBy default the command checks for the packages on packagist.org.\n\n### Options\n\n- **--stability (-s):** Minimum stability of package. Defaults to `stable`.\n- **--prefer-install:** There are two ways of downloading a package: `source` and `dist`. Composer uses `dist` by default. If you pass `--prefer-install=source` (or `--prefer-source`) Composer will install from `source` if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly. To get the legacy behavior where Composer use `source` automatically for dev versions of packages, use `--prefer-install=auto`. See also [config.preferred-install](06-config.md#preferred-install). Passing this flag will override the config value.\n- **--repository:** Provide a custom repository to search for the package, which will be used instead of packagist. Can be either an HTTP URL pointing to a `composer` repository, a path to a local `packages.json` file, or a JSON string which similar to what the [repositories](04-schema.md#repositories) key accepts. You can use this multiple times to configure multiple repositories.\n- **--add-repository:** Add the custom repository in the composer.json. If a lock file is present, it will be deleted and an update will be run instead of an install.\n- **--dev:** Install packages listed in `require-dev`.\n- **--no-dev:** Disables installation of require-dev packages.\n- **--no-scripts:** Disables the execution of the scripts defined in the root package.\n- **--no-progress:** Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.\n- **--no-secure-http:** Disable the secure-http config option temporarily while installing the root package. Use at your own risk. Using this flag is a bad idea.\n- **--keep-vcs:** Skip the deletion of the VCS metadata for the created project. This is mostly useful if you run the command in non-interactive mode.\n- **--remove-vcs:** Force-remove the VCS metadata without prompting.\n- **--no-install:** Disables installation of the vendors.\n- **--no-audit:** Does not run the audit steps after installation is complete. Also see [COMPOSER_NO_AUDIT](#composer-no-audit).\n- **--audit-format:** Audit output format. Must be \"table\", \"plain\", \"json\", or \"summary\" (default).\n- **--ignore-platform-reqs:** ignore all platform requirements (`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill these. See also the [`platform`](06-config.md#platform) config option.\n- **--ignore-platform-req:** ignore a specific platform requirement(`php`, `hhvm`, `lib-*` and `ext-*`) and force the installation even if the local machine does not fulfill it. Multiple requirements can be ignored via wildcard.\n- **--ask:** Ask the user to provide a target directory for the new project.\n\n## dump-autoload (dumpautoload)\n\nIf you need to update the autoloader because of new classes in a classmap package for example, you can use `dump-autoload` to do that without having to go through an install or update.\n\nAdditionally, it can dump an optimized autoloader that converts PSR-0/4 packages into classmap ones for performance reasons. In large applications with many classes, the autoloader can take up a substantial portion of every request's time. Using classmaps for everything is less convenient in development, but using this option you can still use PSR-0/4 for convenience and classmaps for performance.\n\n### Options\n\n- **--optimize (-o):** Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run, so it is currently not done by default.\n- **--classmap-authoritative (-a):** Autoload classes from the classmap only. Implicitly enables `--optimize`.\n- **--apcu:** Use APCu to cache found/not-found classes.\n- **--apcu-prefix:** Use a custom prefix for the APCu autoloader cache. Implicitly enables `--apcu`.\n- **--no-dev:** Disables autoload-dev rules. Composer will by default infer this automatically according to the last `install` or `update` `--no-dev` state.\n- **--dev:** Enables autoload-dev rules. Composer will by default infer this automatically according to the last `install` or `update` `--no-dev` state.\n- **--ignore-platform-reqs:** ignore all `php`, `hhvm`, `lib-*` and `ext-*` requirements and skip the [platform check](07-runtime.md#platform-check) for these. See also the [`platform`](06-config.md#platform) config option.\n- **--ignore-platform-req:** ignore a specific platform requirement (`php`, `hhvm`, `lib-*` and `ext-*`) and skip the [platform check](07-runtime.md#platform-check) for it. Multiple requirements can be ignored via wildcard.\n- **--strict-psr:** Return a failed status code (1) if PSR-4 or PSR-0 mapping errors are present. Requires --optimize to work.\n\n## clear-cache / clearcache / cc\n\nDeletes all content from Composer's cache directories.\n\n### Options\n\n- **--gc:** Only run garbage collection, not a full cache clear\n\n## licenses\n\nLists the name, version and license of every package installed. Use `--format=json` to get machine-readable output.\n\n### Options\n\n- **--format:** Format of the output: text, json or summary (default: \"text\")\n- **--no-dev:** Remove dev dependencies from the output\n\n## run-script\n\n### Options\n\n- **--timeout:** Set the script timeout in seconds, or 0 for no timeout.\n- **--dev:** Sets the dev mode.\n- **--no-dev:** Disable dev mode.\n- **--list (-l):** List user defined scripts.\n\nTo run [scripts](articles/scripts.md) manually you can use this command, give it the script name and optionally any required arguments.\n\n## exec\n\nExecutes a vendored binary/script. You can execute any command and this will ensure that the Composer bin-dir is pushed on your PATH before the command runs.\n\n### Options\n\n- **--list (-l):** List the available Composer binaries.\n\n## diagnose\n\nIf you think you found a bug, or something is behaving strangely, you might want to run the `diagnose` command to perform automated checks for many common problems.\n\n    php composer.phar diagnose\n\n## archive\n\nThis command is used to generate a zip/tar archive for a given package in a given version. It can also be used to archive your entire project without excluded/ignored files.\n\n    php composer.phar archive vendor/package 2.0.21 --format=zip\n\n### Options\n\n- **--format (-f):** Format of the resulting archive: tar, tar.gz, tar.bz2 or zip (default: \"tar\").\n- **--dir:** Write the archive to this directory (default: \".\")\n- **--file:** Write the archive with the given file name.\n\n## audit\n\nThis command is used to audit the packages you have installed for possible security issues. It checks for and lists security vulnerability advisories according to the [Packagist.org api](https://packagist.org/apidoc#list-security-advisories).\n\n    php composer.phar audit\n\n### Options\n\n- **--no-dev:** Disables auditing of require-dev packages.\n- **--format (-f):** Audit output format. Must be \"table\" (default), \"plain\", \"json\", or \"summary\".\n- **--locked:** Audit packages from the lock file, regardless of what is currently in vendor dir.\n\n## help\n\nTo get more information about a certain command, you can use `help`.\n\n    php composer.phar help install\n\n## Command-line completion\n\nCommand-line completion can be enabled by following instructions [on this page](https://github.com/bamarni/symfony-console-autocomplete).\n\n## Environment variables\n\nYou can set a number of environment variables that override certain settings. Whenever possible it is recommended to specify these settings in the `config` section of `composer.json` instead. It is worth noting that the env vars will always take precedence over the values specified in `composer.json`.\n\n### COMPOSER\n\nBy setting the `COMPOSER` env variable it is possible to set the filename of `composer.json` to something else.\n\nFor example:\n\n    COMPOSER=composer-other.json php composer.phar install\n\nThe generated lock file will use the same name: `composer-other.lock` in this example.\n\n### COMPOSER_ALLOW_SUPERUSER\n\nIf set to 1, this env disables the warning about running commands as root/super user. It also disables automatic clearing of sudo sessions, so you should really only set this if you use Composer as a super user at all times like in docker containers.\n\n### COMPOSER_ALLOW_XDEBUG\n\nIf set to 1, this env allows running Composer when the Xdebug extension is enabled, without restarting PHP without it.\n\n### COMPOSER_AUTH\n\nThe `COMPOSER_AUTH` var allows you to set up authentication as an environment variable. The contents of the variable should be a JSON formatted object containing [http-basic, github-oauth, bitbucket-oauth, ... objects as needed](articles/authentication-for-private-packages.md), and following the [spec from the config](06-config.md).\n\n### COMPOSER_BIN_DIR\n\nBy setting this option you can change the `bin` ([Vendor Binaries](articles/vendor-binaries.md)) directory to something other than `vendor/bin`.\n\n### COMPOSER_CACHE_DIR\n\nThe `COMPOSER_CACHE_DIR` var allows you to change the Composer cache directory, which is also configurable via the [`cache-dir`](06-config.md#cache-dir) option.\n\nBy default, it points to `C:\\Users\\<user>\\AppData\\Local\\Composer` (or `%LOCALAPPDATA%/Composer`) on Windows. On \\*nix systems that follow the [XDG Base Directory Specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html), it points to `$XDG_CACHE_HOME/composer`. On other \\*nix systems and on macOS, it points to `$COMPOSER_HOME/cache`.\n\n### COMPOSER_CAFILE\n\nBy setting this environmental value, you can set a path to a certificate bundle file to be used during SSL/TLS peer verification.\n\n### COMPOSER_DISABLE_XDEBUG_WARN\n\nIf set to 1, this env suppresses a warning when Composer is running with the Xdebug extension enabled.\n\n### COMPOSER_DISCARD_CHANGES\n\nThis env var controls the [`discard-changes`](06-config.md#discard-changes) config option.\n\n### COMPOSER_HOME\n\nThe `COMPOSER_HOME` var allows you to change the Composer home directory. This is a hidden, global (per-user on the machine) directory that is shared between all projects.\n\nUse `composer config --global home` to see the location of the home directory.\n\nBy default, it points to `C:\\Users\\<user>\\AppData\\Roaming\\Composer` on Windows and `/Users/<user>/.composer` on macOS. On \\*nix systems that follow the [XDG Base Directory Specifications](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html), it points to `$XDG_CONFIG_HOME/composer`. On other \\*nix systems, it points to `/home/<user>/.composer`.\n\n#### COMPOSER_HOME/config.json\n\nYou may put a `config.json` file into the location which `COMPOSER_HOME` points to. Composer will partially (only `config` and `repositories` keys) merge this configuration with your project's `composer.json` when you run the `install` and `update` commands.\n\nThis file allows you to set [repositories](05-repositories.md) and [configuration](06-config.md) for the user's projects.\n\nIn case global configuration matches *local* configuration, the *local* configuration in the project's `composer.json` always wins.\n\n### COMPOSER_HTACCESS_PROTECT\n\nDefaults to `1`. If set to `0`, Composer will not create `.htaccess` files in the Composer home, cache, and data directories.\n\n### COMPOSER_MEMORY_LIMIT\n\nIf set, the value is used as php's memory_limit.\n\n### COMPOSER_MIRROR_PATH_REPOS\n\nIf set to 1, this env changes the default path repository strategy to `mirror` instead of `symlink`. As it is the default strategy being set it can still be overwritten by repository options.\n\n### COMPOSER_NO_INTERACTION\n\nIf set to 1, this env var will make Composer behave as if you passed the `--no-interaction` flag to every command. This can be set on build boxes/CI.\n\n### COMPOSER_PROCESS_TIMEOUT\n\nThis env var controls the time Composer waits for commands (such as git commands) to finish executing. The default value is 300 seconds (5 minutes).\n\n### COMPOSER_ROOT_VERSION\n\nBy setting this var you can specify the version of the root package, if it cannot be guessed from VCS info and is not present in `composer.json`.\n\n### COMPOSER_VENDOR_DIR\n\nBy setting this var you can make Composer install the dependencies into a directory other than `vendor`.\n\n### COMPOSER_RUNTIME_ENV\n\nThis lets you hint under which environment Composer is running, which can help Composer work around some environment specific issues. The only value currently supported is `virtualbox`, which then enables some short `sleep()` calls to wait for the filesystem to have written files properly before we attempt reading them. You can set the environment variable if you use Vagrant or VirtualBox and experience issues with files not being found during installation even though they should be present.\n\n### http_proxy or HTTP_PROXY\n\nIf you are using Composer from behind an HTTP proxy, you can use the standard `http_proxy` or `HTTP_PROXY` env vars. Set it to the URL of your proxy. Many operating systems already set this variable for you.\n\nUsing `http_proxy` (lowercased) or even defining both might be preferable since some tools like git or curl will only use the lower-cased `http_proxy` version. Alternatively you can also define the git proxy using `git config --global http.proxy <proxy url>`.\n\nIf you are using Composer in a non-CLI context (i.e. integration into a CMS or similar use case), and need to support proxies, please provide the `CGI_HTTP_PROXY` environment variable instead. See [httpoxy.org](https://httpoxy.org/) for further details.\n\n### COMPOSER_MAX_PARALLEL_HTTP\n\nSet to an integer to configure how many files can be downloaded in parallel. This defaults to 12 and must be between 1 and 50. If your proxy has issues with concurrency maybe you want to lower this. Increasing it should generally not result in performance gains.\n\n### HTTP_PROXY_REQUEST_FULLURI\n\nIf you use a proxy, but it does not support the request_fulluri flag, then you should set this env var to `false` or `0` to prevent Composer from setting the request_fulluri option.\n\n### HTTPS_PROXY_REQUEST_FULLURI\n\nIf you use a proxy, but it does not support the request_fulluri flag for HTTPS requests, then you should set this env var to `false` or `0` to prevent Composer from setting the request_fulluri option.\n\n### COMPOSER_SELF_UPDATE_TARGET\n\nIf set, makes the self-update command write the new Composer phar file into that path instead of overwriting itself. Useful for updating Composer on a read-only filesystem.\n\n### no_proxy or NO_PROXY\n\nIf you are behind a proxy and would like to disable it for certain domains, you can use the `no_proxy` or `NO_PROXY` env var. Set it to a comma separated list of domains the proxy should *not* be used for.\n\nThe env var accepts domains, IP addresses, and IP address blocks in CIDR notation. You can restrict the filter to a particular port (e.g. `:80`). You can also set it to `*` to ignore the proxy for all HTTP requests.\n\n### COMPOSER_DISABLE_NETWORK\n\nIf set to `1`, disables network access (best effort). This can be used for debugging or to run Composer on a plane or a starship with poor connectivity.\n\nIf set to `prime`, GitHub VCS repositories will prime the cache, so it can then be used fully offline with `1`.\n\n### COMPOSER_DEBUG_EVENTS\n\nIf set to `1`, outputs information about events being dispatched, which can be useful for plugin authors to identify what is firing when exactly.\n\n### COMPOSER_NO_AUDIT\n\nIf set to `1`, it is the equivalent of passing the `--no-audit` option to `require`, `update`, `remove` or `create-project` command.\n\n### COMPOSER_NO_DEV\n\nIf set to `1`, it is the equivalent of passing the `--no-dev` option to `install` or `update`. You can override this for a single command by setting `COMPOSER_NO_DEV=0`.\n\n### COMPOSER_PREFER_STABLE\n\nIf set to `1`, it is the equivalent of passing the `--prefer-stable` option to `update` or `require`.\n\n### COMPOSER_PREFER_LOWEST\n\nIf set to `1`, it is the equivalent of passing the `--prefer-lowest` option to `update` or `require`.\n\n### COMPOSER_IGNORE_PLATFORM_REQ or COMPOSER_IGNORE_PLATFORM_REQS\n\nIf `COMPOSER_IGNORE_PLATFORM_REQS` set to `1`, it is the equivalent of passing the `--ignore-platform-reqs` argument. Otherwise, specifying a comma separated list in `COMPOSER_IGNORE_PLATFORM_REQ` will ignore those specific requirements.\n\nFor example, if a development workstation will never run database queries, this can be used to ignore the requirement for the database extensions to be available. If you set `COMPOSER_IGNORE_PLATFORM_REQ=ext-oci8`, then composer will allow packages to be installed even if the `oci8` PHP extension is not enabled.\n\n← [Libraries](02-libraries.md) \\| [Schema](04-schema.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/03-cli.md](https://getcomposer.org/doc/03-cli.md)"
- name: 5. The composer.json schema
  id: 04-schema.md
  summary: This chapter will explain all of the fields available in composer.json
  description: "# The composer.json schema\n\nThis chapter will explain all of the fields available in `composer.json`.\n\n## JSON schema\n\nWe have a [JSON schema](https://json-schema.org) that documents the format and can also be used to validate your `composer.json`. In fact, it is used by the `validate` command. You can find it at: <https://getcomposer.org/schema.json>\n\n## Root Package\n\nThe root package is the package defined by the `composer.json` at the root of your project. It is the main `composer.json` that defines your project requirements.\n\nCertain fields only apply when in the root package context. One example of this is the `config` field. Only the root package can define configuration. The config of dependencies is ignored. This makes the `config` field `root-only`.\n\n> **Note:** A package can be the root package or not, depending on the context. For example, if your project depends on the `monolog` library, your project is the root package. However, if you clone `monolog` from GitHub in order to fix a bug in it, then `monolog` is the root package.\n\n## Properties\n\n### name\n\nThe name of the package. It consists of vendor name and project name, separated by `/`. Examples:\n\n- monolog/monolog\n- igorw/event-source\n\nThe name must be lowercase and consist of words separated by `-`, `.` or `_`. The complete name should match `^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9](([_.]?|-{0,2})[a-z0-9]+)*$`.\n\nThe `name` property is required for published packages (libraries).\n\n> **Note:** Before Composer version 2.0, a name could contain any character, including white spaces.\n\n### description\n\nA short description of the package. Usually this is one line long.\n\nRequired for published packages (libraries).\n\n### version\n\nThe version of the package. In most cases this is not required and should be omitted (see below).\n\nThis must follow the format of `X.Y.Z` or `vX.Y.Z` with an optional suffix of `-dev`, `-patch` (`-p`), `-alpha` (`-a`), `-beta` (`-b`) or `-RC`. The patch, alpha, beta and RC suffixes can also be followed by a number.\n\nExamples:\n\n- 1.0.0\n- 1.0.2\n- 1.1.0\n- 0.2.5\n- 1.0.0-dev\n- 1.0.0-alpha3\n- 1.0.0-beta2\n- 1.0.0-RC5\n- v2.0.4-p1\n\nOptional if the package repository can infer the version from somewhere, such as the VCS tag name in the VCS repository. In that case it is also recommended to omit it.\n\n> **Note:** Packagist uses VCS repositories, so the statement above is very much true for Packagist as well. Specifying the version yourself will most likely end up creating problems at some point due to human error.\n\n### type\n\nThe type of the package. It defaults to `library`.\n\nPackage types are used for custom installation logic. If you have a package that needs some special logic, you can define a custom type. This could be a `symfony-bundle`, a `wordpress-plugin` or a `typo3-cms-extension`. These types will all be specific to certain projects, and they will need to provide an installer capable of installing packages of that type.\n\nOut of the box, Composer supports four types:\n\n- **library:** This is the default. It will copy the files to `vendor`.\n- **project:** This denotes a project rather than a library. For example application shells like the [Symfony standard edition](https://github.com/symfony/symfony-standard), CMSs like the [SilverStripe installer](https://github.com/silverstripe/silverstripe-installer) or full fledged applications distributed as packages. This can for example be used by IDEs to provide listings of projects to initialize when creating a new workspace.\n- **metapackage:** An empty package that contains requirements and will trigger their installation, but contains no files and will not write anything to the filesystem. As such, it does not require a dist or source key to be installable.\n- **composer-plugin:** A package of type `composer-plugin` may provide an installer for other packages that have a custom type. Read more in the [dedicated article](articles/custom-installers.md).\n\nOnly use a custom type if you need custom logic during installation. It is recommended to omit this field and have it default to `library`.\n\n### keywords\n\nAn array of keywords that the package is related to. These can be used for searching and filtering.\n\nExamples:\n\n- logging\n- events\n- database\n- redis\n- templating\n\n> **Note**: Some special keywords trigger `composer require` without the `--dev` option to prompt users if they would like to add these packages to `require-dev` instead of `require`. These are: `dev`, `testing`, `static analysis`.\n\nOptional.\n\n### homepage\n\nA URL to the website of the project.\n\nOptional.\n\n### readme\n\nA relative path to the readme document.\n\nOptional.\n\n### time\n\nRelease date of the version.\n\nMust be in `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS` format.\n\nOptional.\n\n### license\n\nThe license of the package. This can be either a string or an array of strings.\n\nThe recommended notation for the most common licenses is (alphabetical):\n\n- Apache-2.0\n- BSD-2-Clause\n- BSD-3-Clause\n- BSD-4-Clause\n- GPL-2.0-only / GPL-2.0-or-later\n- GPL-3.0-only / GPL-3.0-or-later\n- LGPL-2.1-only / LGPL-2.1-or-later\n- LGPL-3.0-only / LGPL-3.0-or-later\n- MIT\n\nOptional, but it is highly recommended to supply this. More identifiers are listed at the [SPDX Open Source License Registry](https://spdx.org/licenses/).\n\n> **Note:** For closed-source software, you may use `\"proprietary\"` as the license identifier.\n\nAn Example:\n\n``` javascript\n{\n    \"license\": \"MIT\"\n}\n```\n\nFor a package, when there is a choice between licenses (\"disjunctive license\"), multiple can be specified as an array.\n\nAn Example for disjunctive licenses:\n\n``` javascript\n{\n    \"license\": [\n        \"LGPL-2.1-only\",\n        \"GPL-3.0-or-later\"\n    ]\n}\n```\n\nAlternatively they can be separated with \"or\" and enclosed in parentheses;\n\n``` javascript\n{\n    \"license\": \"(LGPL-2.1-only or GPL-3.0-or-later)\"\n}\n```\n\nSimilarly, when multiple licenses need to be applied (\"conjunctive license\"), they should be separated with \"and\" and enclosed in parentheses.\n\n### authors\n\nThe authors of the package. This is an array of objects.\n\nEach author object can have following properties:\n\n- **name:** The author's name. Usually their real name.\n- **email:** The author's email address.\n- **homepage:** URL to the author's website.\n- **role:** The author's role in the project (e.g. developer or translator)\n\nAn example:\n\n``` javascript\n{\n    \"authors\": [\n        {\n            \"name\": \"Nils Adermann\",\n            \"email\": \"naderman@naderman.de\",\n            \"homepage\": \"https://www.naderman.de\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Jordi Boggiano\",\n            \"email\": \"j.boggiano@seld.be\",\n            \"homepage\": \"https://seld.be\",\n            \"role\": \"Developer\"\n        }\n    ]\n}\n```\n\nOptional, but highly recommended.\n\n### support\n\nVarious information to get support about the project.\n\nSupport information includes the following:\n\n- **email:** Email address for support.\n- **issues:** URL to the issue tracker.\n- **forum:** URL to the forum.\n- **wiki:** URL to the wiki.\n- **irc:** IRC channel for support, as irc://server/channel.\n- **source:** URL to browse or download the sources.\n- **docs:** URL to the documentation.\n- **rss:** URL to the RSS feed.\n- **chat:** URL to the chat channel.\n\nAn example:\n\n``` javascript\n{\n    \"support\": {\n        \"email\": \"support@example.org\",\n        \"irc\": \"irc://irc.freenode.org/composer\"\n    }\n}\n```\n\nOptional.\n\n### funding\n\nA list of URLs to provide funding to the package authors for maintenance and development of new functionality.\n\nEach entry consists of the following\n\n- **type:** The type of funding, or the platform through which funding can be provided, e.g. patreon, opencollective, tidelift or github.\n- **url:** URL to a website with details, and a way to fund the package.\n\nAn example:\n\n``` javascript\n{\n    \"funding\": [\n        {\n            \"type\": \"patreon\",\n            \"url\": \"https://www.patreon.com/phpdoctrine\"\n        },\n        {\n            \"type\": \"tidelift\",\n            \"url\": \"https://tidelift.com/subscription/pkg/packagist-doctrine_doctrine-bundle\"\n        },\n        {\n            \"type\": \"other\",\n            \"url\": \"https://www.doctrine-project.org/sponsorship.html\"\n        }\n    ]\n}\n```\n\nOptional.\n\n### Package links\n\nAll of the following take an object which maps package names to versions of the package via version constraints. Read more about versions [here](articles/versions.md).\n\nExample:\n\n``` javascript\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n```\n\nAll links are optional fields.\n\n`require` and `require-dev` additionally support *stability flags* ([root-only](04-schema.md#root-package)). They take the form \"*constraint*@*stability flag*\". These allow you to further restrict or expand the stability of a package beyond the scope of the [minimum-stability](#minimum-stability) setting. You can apply them to a constraint, or apply them to an empty *constraint* if you want to allow unstable packages of a dependency for example.\n\nExample:\n\n``` javascript\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*@beta\",\n        \"acme/foo\": \"@dev\"\n    }\n}\n```\n\nIf one of your dependencies has a dependency on an unstable package you need to explicitly require it as well, along with its sufficient stability flag.\n\nExample:\n\nAssuming `doctrine/doctrine-fixtures-bundle` requires `\"doctrine/data-fixtures\": \"dev-master\"` then inside the root composer.json you need to add the second line below to allow dev releases for the `doctrine/data-fixtures` package :\n\n``` javascript\n{\n    \"require\": {\n        \"doctrine/doctrine-fixtures-bundle\": \"dev-master\",\n        \"doctrine/data-fixtures\": \"@dev\"\n    }\n}\n```\n\n`require` and `require-dev` additionally support explicit references (i.e. commit) for dev versions to make sure they are locked to a given state, even when you run update. These only work if you explicitly require a dev version and append the reference with `#<ref>`. This is also a [root-only](04-schema.md#root-package) feature and will be ignored in dependencies.\n\nExample:\n\n``` javascript\n{\n    \"require\": {\n        \"monolog/monolog\": \"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\",\n        \"acme/foo\": \"1.0.x-dev#abc123\"\n    }\n}\n```\n\n> **Note:** This feature has severe technical limitations, as the composer.json metadata will still be read from the branch name you specify before the hash. You should therefore only use this as a temporary solution during development to remediate transient issues, until you can switch to tagged releases. The Composer team does not actively support this feature and will not accept bug reports related to it.\n\nIt is also possible to inline-alias a package constraint so that it matches a constraint that it otherwise would not. For more information [see the aliases article](articles/aliases.md).\n\n`require` and `require-dev` also support references to specific PHP versions and PHP extensions your project needs to run successfully.\n\nExample:\n\n``` javascript\n{\n    \"require\": {\n        \"php\": \">=7.4\",\n        \"ext-mbstring\": \"*\"\n    }\n}\n```\n\n> **Note:** It is important to list PHP extensions your project requires. Not all PHP installations are created equal: some may miss extensions you may consider as standard (such as `ext-mysqli` which is not installed by default in Fedora/CentOS minimal installation systems). Failure to list required PHP extensions may lead to a bad user experience: Composer will install your package without any errors but it will then fail at run-time. The `composer show --platform` command lists all PHP extensions available on your system. You may use it to help you compile the list of extensions you use and require. Alternatively you may use third party tools to analyze your project for the list of extensions used.\n\n#### require\n\nMap of packages required by this package. The package will not be installed unless those requirements can be met.\n\n#### require-dev ([root-only](04-schema.md#root-package))\n\nMap of packages required for developing this package, or running tests, etc. The dev requirements of the root package are installed by default. Both `install` or `update` support the `--no-dev` option that prevents dev dependencies from being installed.\n\n#### conflict\n\nMap of packages that conflict with this version of this package. They will not be allowed to be installed together with your package.\n\nNote that when specifying ranges like `<1.0 >=1.1` in a `conflict` link, this will state a conflict with all versions that are less than 1.0 *and* equal or newer than 1.1 at the same time, which is probably not what you want. You probably want to go for `<1.0 || >=1.1` in this case.\n\n#### replace\n\nMap of packages that are replaced by this package. This allows you to fork a package, publish it under a different name with its own version numbers, while packages requiring the original package continue to work with your fork because it replaces the original package.\n\nThis is also useful for packages that contain sub-packages, for example the main symfony/symfony package contains all the Symfony Components which are also available as individual packages. If you require the main package it will automatically fulfill any requirement of one of the individual components, since it replaces them.\n\nCaution is advised when using replace for the sub-package purpose explained above. You should then typically only replace using `self.version` as a version constraint, to make sure the main package only replaces the sub-packages of that exact version, and not any other version, which would be incorrect.\n\n#### provide\n\nMap of packages that are provided by this package. This is mostly useful for implementations of common interfaces. A package could depend on some virtual package e.g. `psr/logger-implementation`, any library that implements this logger interface would list it in `provide`. Implementors can then be [found on Packagist.org](https://packagist.org/providers/psr/log-implementation).\n\nUsing `provide` with the name of an actual package rather than a virtual one implies that the code of that package is also shipped, in which case `replace` is generally a better choice. A common convention for packages providing an interface and relying on other packages to provide an implementation (for instance the PSR interfaces) is to use a `-implementation` suffix for the name of the virtual package corresponding to the interface package.\n\n#### suggest\n\nSuggested packages that can enhance or work well with this package. These are informational and are displayed after the package is installed, to give your users a hint that they could add more packages, even though they are not strictly required.\n\nThe format is like package links above, except that the values are free text and not version constraints.\n\nExample:\n\n``` javascript\n{\n    \"suggest\": {\n        \"monolog/monolog\": \"Allows more advanced logging of the application flow\",\n        \"ext-xml\": \"Needed to support XML format in class Foo\"\n    }\n}\n```\n\n### autoload\n\nAutoload mapping for a PHP autoloader.\n\n[`PSR-4`](https://www.php-fig.org/psr/psr-4/) and [`PSR-0`](http://www.php-fig.org/psr/psr-0/) autoloading, `classmap` generation and `files` includes are supported.\n\nPSR-4 is the recommended way since it offers greater ease of use (no need to regenerate the autoloader when you add classes).\n\n#### PSR-4\n\nUnder the `psr-4` key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like `Foo\\\\Bar\\\\Baz` a namespace prefix `Foo\\\\` pointing to a directory `src/` means that the autoloader will look for a file named `src/Bar/Baz.php` and include it if present. Note that as opposed to the older PSR-0 style, the prefix (`Foo\\\\`) is **not** present in the file path.\n\nNamespace prefixes must end in `\\\\` to avoid conflicts between similar prefixes. For example `Foo` would match classes in the `FooBar` namespace so the trailing backslashes solve the problem: `Foo\\\\` and `FooBar\\\\` are distinct.\n\nThe PSR-4 references are all combined, during install/update, into a single key =\\> value array which may be found in the generated file `vendor/composer/autoload_psr4.php`.\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Monolog\\\\\": \"src/\",\n            \"Vendor\\\\Namespace\\\\\": \"\"\n        }\n    }\n}\n```\n\nIf you need to search for a same prefix in multiple directories, you can specify them as an array as such:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n    }\n}\n```\n\nIf you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-4\": { \"\": \"src/\" }\n    }\n}\n```\n\n#### PSR-0\n\nUnder the `psr-0` key you define a mapping from namespaces to paths, relative to the package root. Note that this also supports the PEAR-style non-namespaced convention.\n\nPlease note namespace declarations should end in `\\\\` to make sure the autoloader responds exactly. For example `Foo` would match in `FooBar` so the trailing backslashes solve the problem: `Foo\\\\` and `FooBar\\\\` are distinct.\n\nThe PSR-0 references are all combined, during install/update, into a single key =\\> value array which may be found in the generated file `vendor/composer/autoload_namespaces.php`.\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-0\": {\n            \"Monolog\\\\\": \"src/\",\n            \"Vendor\\\\Namespace\\\\\": \"src/\",\n            \"Vendor_Namespace_\": \"src/\"\n        }\n    }\n}\n```\n\nIf you need to search for a same prefix in multiple directories, you can specify them as an array as such:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n    }\n}\n```\n\nThe PSR-0 style is not limited to namespace declarations only but may be specified right down to the class level. This can be useful for libraries with only one class in the global namespace. If the php source file is also located in the root of the package, for example, it may be declared like this:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-0\": { \"UniqueGlobalClass\": \"\" }\n    }\n}\n```\n\nIf you want to have a fallback directory where any namespace can be, you can use an empty prefix like:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-0\": { \"\": \"src/\" }\n    }\n}\n```\n\n#### Classmap\n\nThe `classmap` references are all combined, during install/update, into a single key =\\> value array which may be found in the generated file `vendor/composer/autoload_classmap.php`. This map is built by scanning for classes in all `.php` and `.inc` files in the given directories/files.\n\nYou can use the classmap generation support to define autoloading for all libraries that do not follow PSR-0/4. To configure this you specify all directories or files to search for classes.\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"classmap\": [\"src/\", \"lib/\", \"Something.php\"]\n    }\n}\n```\n\nWildcards (`*`) are also supported in a classmap paths, and expand to match any directory name:\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"classmap\": [\"src/addons/*/lib/\", \"3rd-party/*\", \"Something.php\"]\n    }\n}\n```\n\n#### Files\n\nIf you want to require certain files explicitly on every request then you can use the `files` autoloading mechanism. This is useful if your package includes PHP functions that cannot be autoloaded by PHP.\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"files\": [\"src/MyLibrary/functions.php\"]\n    }\n}\n```\n\nFiles autoload rules are included whenever `vendor/autoload.php` is included, right after the autoloader is registered. The order of inclusion depends on package dependencies so that if package A depends on B, files in package B will be included first to ensure package B is fully initialized and ready to be used when files from package A are included.\n\nIf two packages have the same amount of dependents or no dependencies, the order is alphabetical.\n\nFiles from the root package are always loaded last, and you cannot use files autoloading yourself to override functions from your dependencies. If you want to achieve that we recommend you include your own functions *before* including Composer's `vendor/autoload.php`.\n\n#### Exclude files from classmaps\n\nIf you want to exclude some files or folders from the classmap you can use the `exclude-from-classmap` property. This might be useful to exclude test classes in your live environment, for example, as those will be skipped from the classmap even when building an optimized autoloader.\n\nThe classmap generator will ignore all files in the paths configured here. The paths are absolute from the package root directory (i.e. composer.json location), and support `*` to match anything but a slash, and `**` to match anything. `**` is implicitly added to the end of the paths.\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"exclude-from-classmap\": [\"/Tests/\", \"/test/\", \"/tests/\"]\n    }\n}\n```\n\n#### Optimizing the autoloader\n\nThe autoloader can have quite a substantial impact on your request time (50-100ms per request in large frameworks using a lot of classes). See the [article about optimizing the autoloader](articles/autoloader-optimization.md) for more details on how to reduce this impact.\n\n### autoload-dev ([root-only](04-schema.md#root-package))\n\nThis section allows defining autoload rules for development purposes.\n\nClasses needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.\n\nTherefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.\n\nExample:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-4\": { \"MyLibrary\\\\\": \"src/\" }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"MyLibrary\\\\Tests\\\\\": \"tests/\" }\n    }\n}\n```\n\n### include-path\n\n> **DEPRECATED**: This is only present to support legacy projects, and all new code should preferably use autoloading. As such it is a deprecated practice, but the feature itself will not likely disappear from Composer.\n\nA list of paths which should get appended to PHP's `include_path`.\n\nExample:\n\n``` javascript\n{\n    \"include-path\": [\"lib/\"]\n}\n```\n\nOptional.\n\n### target-dir\n\n> **DEPRECATED**: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.\n\nDefines the installation target.\n\nIn case the package root is below the namespace declaration you cannot autoload properly. `target-dir` solves this problem.\n\nAn example is Symfony. There are individual packages for the components. The Yaml component is under `Symfony\\Component\\Yaml`. The package root is that `Yaml` directory. To make autoloading possible, we need to make sure that it is not installed into `vendor/symfony/yaml`, but instead into `vendor/symfony/yaml/Symfony/Component/Yaml`, so that the autoloader can load it from `vendor/symfony/yaml`.\n\nTo do that, `autoload` and `target-dir` are defined as follows:\n\n``` javascript\n{\n    \"autoload\": {\n        \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" }\n    },\n    \"target-dir\": \"Symfony/Component/Yaml\"\n}\n```\n\nOptional.\n\n### minimum-stability ([root-only](04-schema.md#root-package))\n\nThis defines the default behavior for filtering packages by stability. This defaults to `stable`, so if you rely on a `dev` package, you should specify it in your file to avoid surprises.\n\nAll versions of each package are checked for stability, and those that are less stable than the `minimum-stability` setting will be ignored when resolving your project dependencies. (Note that you can also specify stability requirements on a per-package basis using stability flags in the version constraints that you specify in a `require` block (see [package links](#package-links) for more details).\n\nAvailable options (in order of stability) are `dev`, `alpha`, `beta`, `RC`, and `stable`.\n\n### prefer-stable ([root-only](04-schema.md#root-package))\n\nWhen this is enabled, Composer will prefer more stable packages over unstable ones when finding compatible stable packages is possible. If you require a dev version or only alphas are available for a package, those will still be selected granted that the minimum-stability allows for it.\n\nUse `\"prefer-stable\": true` to enable.\n\n### repositories ([root-only](04-schema.md#root-package))\n\nCustom package repositories to use.\n\nBy default Composer only uses the packagist repository. By specifying repositories you can get packages from elsewhere.\n\nRepositories are not resolved recursively. You can only add them to your main `composer.json`. Repository declarations of dependencies' `composer.json`s are ignored.\n\nThe following repository types are supported:\n\n- **composer:** A Composer repository is a `packages.json` file served via the network (HTTP, FTP, SSH), that contains a list of `composer.json` objects with additional `dist` and/or `source` information. The `packages.json` file is loaded using a PHP stream. You can set extra options on that stream using the `options` parameter.\n- **vcs:** The version control system repository can fetch packages from git, svn, fossil and hg repositories.\n- **package:** If you depend on a project that does not have any support for Composer whatsoever you can define the package inline using a `package` repository. You basically inline the `composer.json` object.\n\nFor more information on any of these, see [Repositories](05-repositories.md).\n\nExample:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"http://packages.example.com\"\n        },\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://packages.example.com\",\n            \"options\": {\n                \"ssl\": {\n                    \"verify_peer\": \"true\"\n                }\n            }\n        },\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/Seldaek/monolog\"\n        },\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"smarty/smarty\",\n                \"version\": \"3.1.7\",\n                \"dist\": {\n                    \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n                    \"type\": \"zip\"\n                },\n                \"source\": {\n                    \"url\": \"https://smarty-php.googlecode.com/svn/\",\n                    \"type\": \"svn\",\n                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n                }\n            }\n        }\n    ]\n}\n```\n\n> **Note:** Order is significant here. When looking for a package, Composer will look from the first to the last repository, and pick the first match. By default Packagist is added last which means that custom repositories can override packages from it.\n\nUsing JSON object notation is also possible. However, JSON key/value pairs are to be considered unordered so consistent behaviour cannot be guaranteed.\n\n``` javascript\n{\n    \"repositories\": {\n        \"foo\": {\n            \"type\": \"composer\",\n            \"url\": \"http://packages.foo.com\"\n        }\n    }\n}\n```\n\n### config ([root-only](04-schema.md#root-package))\n\nA set of configuration options. It is only used for projects. See [Config](06-config.md) for a description of each individual option.\n\n### scripts ([root-only](04-schema.md#root-package))\n\nComposer allows you to hook into various parts of the installation process through the use of scripts.\n\nSee [Scripts](articles/scripts.md) for events details and examples.\n\n### extra\n\nArbitrary extra data for consumption by `scripts`.\n\nThis can be virtually anything. To access it from within a script event handler, you can do:\n\n``` php\n$extra = $event->getComposer()->getPackage()->getExtra();\n```\n\nOptional.\n\n### bin\n\nA set of files that should be treated as binaries and made available into the `bin-dir` (from config).\n\nSee [Vendor Binaries](articles/vendor-binaries.md) for more details.\n\nOptional.\n\n### archive\n\nA set of options for creating package archives.\n\nThe following options are supported:\n\n- **name:** Allows configuring base name for archive. By default (if not configured, and `--file` is not passed as command-line argument), `preg_replace('#[^a-z0-9-_]#i', '-', name)` is used.\n\nExample:\n\n``` javascript\n{\n    \"name\": \"org/strangeName\",\n    \"archive\": {\n        \"name\": \"Strange_name\"\n    }\n}\n```\n\n- **exclude:** Allows configuring a list of patterns for excluded paths. The pattern syntax matches .gitignore files. A leading exclamation mark (!) will result in any matching files to be included even if a previous pattern excluded them. A leading slash will only match at the beginning of the project relative path. An asterisk will not expand to a directory separator.\n\nExample:\n\n``` javascript\n{\n    \"archive\": {\n        \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", \"!/foo/bar/baz\"]\n    }\n}\n```\n\nThe example will include `/dir/foo/bar/file`, `/foo/bar/baz`, `/file.php`, `/foo/my.test` but it will exclude `/foo/bar/any`, `/foo/baz`, and `/my.test`.\n\nOptional.\n\n### abandoned\n\nIndicates whether this package has been abandoned.\n\nIt can be boolean or a package name/URL pointing to a recommended alternative.\n\nExamples:\n\nUse `\"abandoned\": true` to indicate this package is abandoned. Use `\"abandoned\": \"monolog/monolog\"` to indicate this package is abandoned, and that the recommended alternative is `monolog/monolog`.\n\nDefaults to false.\n\nOptional.\n\n### non-feature-branches\n\nA list of regex patterns of branch names that are non-numeric (e.g. \"latest\" or something), that will NOT be handled as feature branches. This is an array of strings.\n\nIf you have non-numeric branch names, for example like \"latest\", \"current\", \"latest-stable\" or something, that do not look like a version number, then Composer handles such branches as feature branches. This means it searches for parent branches, that look like a version or ends at special branches (like master), and the root package version number becomes the version of the parent branch or at least master or something.\n\nTo handle non-numeric named branches as versions instead of searching for a parent branch with a valid version or special branch name like master, you can set patterns for branch names that should be handled as dev version branches.\n\nThis is really helpful when you have dependencies using \"self.version\", so that not dev-master, but the same branch is installed (in the example: latest-testing).\n\nAn example:\n\nIf you have a testing branch, that is heavily maintained during a testing phase and is deployed to your staging environment, normally `composer show -s` will give you `versions : * dev-master`.\n\nIf you configure `latest-.*` as a pattern for non-feature-branches like this:\n\n``` javascript\n{\n    \"non-feature-branches\": [\"latest-.*\"]\n}\n```\n\nThen `composer show -s` will give you `versions : * dev-latest-testing`.\n\nOptional.\n\n← [Command-line interface](03-cli.md) \\| [Repositories](05-repositories.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)"
- name: 6. Repositories
  id: 05-repositories.md
  summary: This chapter will explain the concept of packages and repositories, what kinds of repositories are available, and how they work
  description: "# Repositories\n\nThis chapter will explain the concept of packages and repositories, what kinds of repositories are available, and how they work.\n\n## Concepts\n\nBefore we look at the different types of repositories that exist, we need to understand some basic concepts that Composer is built on.\n\n### Package\n\nComposer is a dependency manager. It installs packages locally. A package is essentially a directory containing something. In this case it is PHP code, but in theory it could be anything. And it contains a package description which has a name and a version. The name and the version are used to identify the package.\n\nIn fact, internally Composer sees every version as a separate package. While this distinction does not matter when you are using Composer, it's quite important when you want to change it.\n\nIn addition to the name and the version, there is useful metadata. The information most relevant for installation is the source definition, which describes where to get the package contents. The package data points to the contents of the package. And there are two options here: dist and source.\n\n**Dist:** The dist is a packaged version of the package data. Usually a released version, usually a stable release.\n\n**Source:** The source is used for development. This will usually originate from a source code repository, such as git. You can fetch this when you want to modify the downloaded package.\n\nPackages can supply either of these, or even both. Depending on certain factors, such as user-supplied options and stability of the package, one will be preferred.\n\n### Repository\n\nA repository is a package source. It's a list of packages/versions. Composer will look in all your repositories to find the packages your project requires.\n\nBy default, only the Packagist.org repository is registered in Composer. You can add more repositories to your project by declaring them in `composer.json`.\n\nRepositories are only available to the root package and the repositories defined in your dependencies will not be loaded. Read the [FAQ entry](https://getcomposer.org/doc/faqs/why-cant-composer-load-repositories-recursively.md) if you want to learn why.\n\nWhen resolving dependencies, packages are looked up from repositories from top to bottom, and by default, as soon as a package is found in one, Composer stops looking in other repositories. Read the [repository priorities](articles/repository-priorities.md) article for more details and to see how to change this behavior.\n\n## Types\n\n### Composer\n\nThe main repository type is the `composer` repository. It uses a single `packages.json` file that contains all of the package metadata.\n\nThis is also the repository type that packagist uses. To reference a `composer` repository, supply the path before the `packages.json` file. In the case of packagist, that file is located at `/packages.json`, so the URL of the repository would be `repo.packagist.org`. For `example.org/packages.json` the repository URL would be `example.org`.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\"\n        }\n    ]\n}\n```\n\n#### packages\n\nThe only required field is `packages`. The JSON structure is as follows:\n\n``` javascript\n{\n    \"packages\": {\n        \"vendor/package-name\": {\n            \"dev-master\": { @composer.json },\n            \"1.0.x-dev\": { @composer.json },\n            \"0.0.1\": { @composer.json },\n            \"1.0.0\": { @composer.json }\n        }\n    }\n}\n```\n\nThe `@composer.json` marker would be the contents of the `composer.json` from that package version including as a minimum:\n\n- name\n- version\n- dist or source\n\nHere is a minimal package definition:\n\n``` javascript\n{\n    \"name\": \"smarty/smarty\",\n    \"version\": \"3.1.7\",\n    \"dist\": {\n        \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n        \"type\": \"zip\"\n    }\n}\n```\n\nIt may include any of the other fields specified in the [schema](04-schema.md).\n\n#### notify-batch\n\nThe `notify-batch` field allows you to specify a URL that will be called every time a user installs a package. The URL can be either an absolute path (that will use the same domain as the repository), or a fully qualified URL.\n\nAn example value:\n\n``` javascript\n{\n    \"notify-batch\": \"/downloads/\"\n}\n```\n\nFor `example.org/packages.json` containing a `monolog/monolog` package, this would send a `POST` request to `example.org/downloads/` with following JSON request body:\n\n``` javascript\n{\n    \"downloads\": [\n        {\"name\": \"monolog/monolog\", \"version\": \"1.2.1.0\"}\n    ]\n}\n```\n\nThe version field will contain the normalized representation of the version number.\n\nThis field is optional.\n\n#### metadata-url, available-packages and available-package-patterns\n\nThe `metadata-url` field allows you to provide a URL template to serve all packages which are in the repository. It must contain the placeholder `%package%`.\n\nThis field is new in Composer v2, and is prioritised over the `provider-includes` and `providers-url` fields if both are present. For compatibility with both Composer v1 and v2 you ideally want to provide both. New repository implementations may only need to support v2 however.\n\nAn example:\n\n``` javascript\n{\n    \"metadata-url\": \"/p2/%package%.json\"\n}\n```\n\nWhenever Composer looks for a package, it will replace `%package%` by the package name, and fetch that URL. If dev stability is allowed for the package, it will also load the URL again with `$packageName~dev` (e.g. `/p2/foo/bar~dev.json` to look for `foo/bar`'s dev versions).\n\nThe `foo/bar.json` and `foo/bar~dev.json` files containing package versions MUST contain only versions for the foo/bar package, as `{\"packages\":{\"foo/bar\":[ ... versions here ... ]}}`.\n\nCaching is done via the use of If-Modified-Since header, so make sure you return Last-Modified headers and that they are accurate.\n\nThe array of versions can also optionally be minified using `Composer\\MetadataMinifier\\MetadataMinifier::minify()` from [composer/metadata-minifier](https://packagist.org/packages/composer/metadata-minifier). If you do that, you should add a `\"minified\": \"composer/2.0\"` key at the top level to indicate to Composer it must expand the version list back into the original data. See <https://repo.packagist.org/p2/monolog/monolog.json> for an example.\n\nAny requested package which does not exist MUST return a 404 status code, which will indicate to Composer that this package does not exist in your repository. Make sure the 404 response is fast to avoid blocking Composer. Avoid redirects to alternative 404 pages.\n\nIf your repository only has a small number of packages, and you want to avoid the 404-requests, you can also specify an `\"available-packages\"` key in `packages.json` which should be an array with all the package names that your repository contains. Alternatively you can specify an `\"available-package-patterns\"` key which is an array of package name patterns (with `*` matching any string, e.g. `vendor/*` would make Composer look up every matching package name in this repository).\n\nThis field is optional.\n\n#### providers-api\n\nThe `providers-api` field allows you to provide a URL template to serve all packages which provide a given package name, but not the package which has that name. It must contain the placeholder `%package%`.\n\nFor example <https://packagist.org/providers/monolog/monolog.json> lists some package which have a \"provide\" rule for monolog/monolog, but it does not list monolog/monolog itself.\n\n``` javascript\n{\n    \"providers-api\": \"https://packagist.org/providers/%package%.json\",\n}\n```\n\nThis field is optional.\n\n#### list\n\nThe `list` field allows you to return the names of packages which match a given field (or all names if no filter is present). It should accept an optional `?filter=xx` query param, which can contain `*` as wildcards matching any substring.\n\nReplace/provide rules should not be considered here.\n\nIt must return an array of package names:\n\n``` javascript\n{\n    \"packageNames\": [\n        \"a/b\",\n        \"c/d\"\n    ]\n}\n```\n\nSee <https://packagist.org/packages/list.json?filter=composer/*> for example.\n\nThis field is optional.\n\n#### provider-includes and providers-url\n\nThe `provider-includes` field allows you to list a set of files that list package names provided by this repository. The hash should be a sha256 of the files in this case.\n\nThe `providers-url` describes how provider files are found on the server. It is an absolute path from the repository root. It must contain the placeholders `%package%` and `%hash%`.\n\nThese fields are used by Composer v1, or if your repository does not have the `metadata-url` field set.\n\nAn example:\n\n``` javascript\n{\n    \"provider-includes\": {\n        \"providers-a.json\": {\n            \"sha256\": \"f5b4bc0b354108ef08614e569c1ed01a2782e67641744864a74e788982886f4c\"\n        },\n        \"providers-b.json\": {\n            \"sha256\": \"b38372163fac0573053536f5b8ef11b86f804ea8b016d239e706191203f6efac\"\n        }\n    },\n    \"providers-url\": \"/p/%package%$%hash%.json\"\n}\n```\n\nThose files contain lists of package names and hashes to verify the file integrity, for example:\n\n``` javascript\n{\n    \"providers\": {\n        \"acme/foo\": {\n            \"sha256\": \"38968de1305c2e17f4de33aea164515bc787c42c7e2d6e25948539a14268bb82\"\n        },\n        \"acme/bar\": {\n            \"sha256\": \"4dd24c930bd6e1103251306d6336ac813b563a220d9ca14f4743c032fb047233\"\n        }\n    }\n}\n```\n\nThe file above declares that acme/foo and acme/bar can be found in this repository, by loading the file referenced by `providers-url`, replacing `%package%` by the vendor namespaced package name and `%hash%` by the sha256 field. Those files themselves contain package definitions as described [above](#packages).\n\nThese fields are optional. You probably don't need them for your own custom repository.\n\n#### cURL or stream options\n\nThe repository is accessed either using cURL (Composer 2 with ext-curl enabled) or PHP streams. You can set extra options using the `options` parameter. For PHP streams, you can set any valid PHP stream context option. See [Context options and parameters](https://php.net/manual/en/context.php) for more information. When cURL is used, only a limited set of `http` and `ssl` options can be configured.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"options\": {\n                \"http\": {\n                    \"timeout\": 60\n                }\n            }\n        }\n    ],\n    \"require\": {\n        \"acme/package\": \"^1.0\"\n    }\n}\n```\n\n### VCS\n\nVCS stands for version control system. This includes versioning systems like git, svn, fossil or hg. Composer has a repository type for installing packages from these systems.\n\n#### Loading a package from a VCS repository\n\nThere are a few use cases for this. The most common one is maintaining your own fork of a third party library. If you are using a certain library for your project, and you decide to change something in the library, you will want your project to use the patched version. If the library is on GitHub (this is the case most of the time), you can fork it there and push your changes to your fork. After that you update the project's `composer.json`. All you have to do is add your fork as a repository and update the version constraint to point to your custom branch. In `composer.json` only, you should prefix your custom branch name with `\"dev-\"` (without making it part of the actual branch name). For version constraint naming conventions see [Libraries](02-libraries.md) for more information.\n\nExample assuming you patched monolog to fix a bug in the `bugfix` branch:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/igorw/monolog\"\n        }\n    ],\n    \"require\": {\n        \"monolog/monolog\": \"dev-bugfix\"\n    }\n}\n```\n\nWhen you run `php composer.phar update`, you should get your modified version of `monolog/monolog` instead of the one from packagist.\n\nNote that you should not rename the package unless you really intend to fork it in the long term, and completely move away from the original package. Composer will correctly pick your package over the original one since the custom repository has priority over packagist. If you want to rename the package, you should do so in the default (often master) branch and not in a feature branch, since the package name is taken from the default branch.\n\nAlso note that the override will not work if you change the `name` property in your forked repository's `composer.json` file as this needs to match the original for the override to work.\n\nIf other dependencies rely on the package you forked, it is possible to inline-alias it so that it matches a constraint that it otherwise would not. For more information [see the aliases article](articles/aliases.md).\n\n#### Using private repositories\n\nExactly the same solution allows you to work with your private repositories at GitHub and Bitbucket:\n\n``` javascript\n{\n    \"require\": {\n        \"vendor/my-private-repo\": \"dev-master\"\n    },\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\":  \"git@bitbucket.org:vendor/my-private-repo.git\"\n        }\n    ]\n}\n```\n\nThe only requirement is the installation of SSH keys for a git client.\n\n#### Git alternatives\n\nGit is not the only version control system supported by the VCS repository. The following are supported:\n\n- **Git:** [git-scm.com](https://git-scm.com)\n- **Subversion:** [subversion.apache.org](https://subversion.apache.org)\n- **Mercurial:** [mercurial-scm.org](https://www.mercurial-scm.org)\n- **Fossil**: [fossil-scm.org](https://www.fossil-scm.org/)\n\nTo get packages from these systems you need to have their respective clients installed. That can be inconvenient. And for this reason there is special support for GitHub and Bitbucket that use the APIs provided by these sites, to fetch the packages without having to install the version control system. The VCS repository provides `dist`s for them that fetch the packages as zips.\n\n- **GitHub:** [github.com](https://github.com) (Git)\n- **Bitbucket:** [bitbucket.org](https://bitbucket.org) (Git)\n\nThe VCS driver to be used is detected automatically based on the URL. However, should you need to specify one for whatever reason, you can use `bitbucket`, `github`, `gitlab`, `perforce`, `fossil`, `git`, `svn` or `hg` as the repository type instead of `vcs`.\n\nIf you set the `no-api` key to `true` on a github repository it will clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the `git` driver directly, Composer will still attempt to use github's zip files.\n\nPlease note:\n\n- **To let Composer choose which driver to use** the repository type needs to be defined as \"vcs\"\n- **If you already used a private repository**, this means Composer should have cloned it in cache. If you want to install the same package with drivers, remember to launch the command `composer clearcache` followed by the command `composer update` to update Composer cache and install the package from dist.\n- VCS driver `git-bitbucket` is deprecated in favor of `bitbucket`\n\n#### Bitbucket Driver Configuration\n\n> **Note that the repository endpoint for Bitbucket needs to be https rather than git.**\n\nAfter setting up your bitbucket repository, you will also need to [set up authentication](articles/authentication-for-private-packages.md#bitbucket-oauth).\n\n#### Subversion Options\n\nSince Subversion has no native concept of branches and tags, Composer assumes by default that code is located in `$url/trunk`, `$url/branches` and `$url/tags`. If your repository has a different layout you can change those values. For example if you used capitalized names you could configure the repository like this:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"http://svn.example.org/projectA/\",\n            \"trunk-path\": \"Trunk\",\n            \"branches-path\": \"Branches\",\n            \"tags-path\": \"Tags\"\n        }\n    ]\n}\n```\n\nIf you have no branches or tags directory you can disable them entirely by setting the `branches-path` or `tags-path` to `false`.\n\nIf the package is in a subdirectory, e.g. `/trunk/foo/bar/composer.json` and `/tags/1.0/foo/bar/composer.json`, then you can make Composer access it by setting the `\"package-path\"` option to the sub-directory, in this example it would be `\"package-path\": \"foo/bar/\"`.\n\nIf you have a private Subversion repository you can save credentials in the http-basic section of your config (See [Schema](04-schema.md)):\n\n``` javascript\n{\n    \"http-basic\": {\n        \"svn.example.org\": {\n            \"username\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}\n```\n\nIf your Subversion client is configured to store credentials by default these credentials will be saved for the current user and existing saved credentials for this server will be overwritten. To change this behavior by setting the `\"svn-cache-credentials\"` option in your repository configuration:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"http://svn.example.org/projectA/\",\n            \"svn-cache-credentials\": false\n        }\n    ]\n}\n```\n\n### Package\n\nIf you want to use a project that does not support Composer through any of the means above, you still can define the package yourself by using a `package` repository.\n\nBasically, you define the same information that is included in the `composer` repository's `packages.json`, but only for a single package. Again, the minimum required fields are `name`, `version`, and either of `dist` or `source`.\n\nHere is an example for the smarty template engine:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"smarty/smarty\",\n                \"version\": \"3.1.7\",\n                \"dist\": {\n                    \"url\": \"https://www.smarty.net/files/Smarty-3.1.7.zip\",\n                    \"type\": \"zip\"\n                },\n                \"source\": {\n                    \"url\": \"http://smarty-php.googlecode.com/svn/\",\n                    \"type\": \"svn\",\n                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n                },\n                \"autoload\": {\n                    \"classmap\": [\"libs/\"]\n                }\n            }\n        }\n    ],\n    \"require\": {\n        \"smarty/smarty\": \"3.1.*\"\n    }\n}\n```\n\nTypically, you would leave the source part off, as you don't really need it.\n\n> **Note**: This repository type has a few limitations and should be avoided whenever possible:\n>\n> - Composer will not update the package unless you change the `version` field.\n> - Composer will not update the commit references, so if you use `master` as reference you will have to delete the package to force an update, and will have to deal with an unstable lock file.\n\nThe `\"package\"` key in a `package` repository may be set to an array to define multiple versions of a package:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"package\",\n            \"package\": [\n                {\n                    \"name\": \"foo/bar\",\n                    \"version\": \"1.0.0\",\n                    ...\n                },\n                {\n                    \"name\": \"foo/bar\",\n                    \"version\": \"2.0.0\",\n                    ...\n                }\n            ]\n        }\n    ]\n}\n```\n\n## Hosting your own\n\nWhile you will probably want to put your packages on packagist most of the time, there are some use cases for hosting your own repository.\n\n- **Private company packages:** If you are part of a company that uses Composer for their packages internally, you might want to keep those packages private.\n\n- **Separate ecosystem:** If you have a project which has its own ecosystem, and the packages aren't really reusable by the greater PHP community, you might want to keep them separate to packagist. An example of this would be wordpress plugins.\n\nFor hosting your own packages, a native `composer` type of repository is recommended, which provides the best performance.\n\nThere are a few tools that can help you create a `composer` repository.\n\n### Private Packagist\n\n[Private Packagist](https://packagist.com/) is a hosted or self-hosted application providing private package hosting as well as mirroring of GitHub, Packagist.org and other package repositories.\n\nCheck out [Packagist.com](https://packagist.com/) for more information.\n\n### Satis\n\nSatis is a static `composer` repository generator. It is a bit like an ultra- lightweight, static file-based version of packagist.\n\nYou give it a `composer.json` containing repositories, typically VCS and package repository definitions. It will fetch all the packages that are `require`d and dump a `packages.json` that is your `composer` repository.\n\nCheck [the satis GitHub repository](https://github.com/composer/satis) and the [handling private packages article](articles/handling-private-packages.md) for more information.\n\n### Artifact\n\nThere are some cases, when there is no ability to have one of the previously mentioned repository types online, even the VCS one. A typical example could be cross-organisation library exchange through build artifacts. Of course, most of the time these are private. To use these archives as-is, one can use a repository of type `artifact` with a folder containing ZIP or TAR archives of those private packages:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"artifact\",\n            \"url\": \"path/to/directory/with/zips/\"\n        }\n    ],\n    \"require\": {\n        \"private-vendor-one/core\": \"15.6.2\",\n        \"private-vendor-two/connectivity\": \"*\",\n        \"acme-corp/parser\": \"10.3.5\"\n    }\n}\n```\n\nEach zip artifact is a ZIP archive with `composer.json` in root folder:\n\n    unzip -l acme-corp-parser-10.3.5.zip\n\n    composer.json\n    ...\n\nIf there are two archives with different versions of a package, they are both imported. When an archive with a newer version is added in the artifact folder and you run `update`, that version will be imported as well and Composer will update to the latest version.\n\n### Path\n\nIn addition to the artifact repository, you can use the path one, which allows you to depend on a local directory, either absolute or relative. This can be especially useful when dealing with monolithic repositories.\n\nFor instance, if you have the following directory structure in your repository:\n\n    ...\n    ├── apps\n    │   └── my-app\n    │       └── composer.json\n    ├── packages\n    │   └── my-package\n    │       └── composer.json\n    ...\n\nThen, to add the package `my/package` as a dependency, in your `apps/my-app/composer.json` file, you can use the following configuration:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../../packages/my-package\"\n        }\n    ],\n    \"require\": {\n        \"my/package\": \"*\"\n    }\n}\n```\n\nIf the package is a local VCS repository, the version may be inferred by the branch or tag that is currently checked out. Otherwise, the version should be explicitly defined in the package's `composer.json` file. If the version cannot be resolved by these means, it is assumed to be `dev-master`.\n\nWhen the version cannot be inferred from the local VCS repository, or when you want to override the version, you can use the `versions` option when declaring the repository:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../../packages/my-package\",\n            \"options\": {\n                \"versions\": {\n                    \"my/package\": \"4.2-dev\"\n                }\n            }\n        }\n    ]\n}\n```\n\nThe local package will be symlinked if possible, in which case the output in the console will read `Symlinking from ../../packages/my-package`. If symlinking is *not* possible the package will be copied. In that case, the console will output `Mirrored from ../../packages/my-package`.\n\nInstead of default fallback strategy you can force to use symlink with `\"symlink\": true` or mirroring with `\"symlink\": false` option. Forcing mirroring can be useful when deploying or generating package from a monolithic repository.\n\n> **Note:** On Windows, directory symlinks are implemented using NTFS junctions because they can be created by non-admin users. Mirroring will always be used on versions below Windows 7 or if `proc_open` has been disabled.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../../packages/my-package\",\n            \"options\": {\n                \"symlink\": false\n            }\n        }\n    ]\n}\n```\n\nLeading tildes are expanded to the current user's home folder, and environment variables are parsed in both Windows and Linux/Mac notations. For example `~/git/mypackage` will automatically load the mypackage clone from `/home/<username>/git/mypackage`, equivalent to `$HOME/git/mypackage` or `%USERPROFILE%/git/mypackage`.\n\n> **Note:** Repository paths can also contain wildcards like `*` and `?`. For details, see the [PHP glob function](https://php.net/glob).\n\nYou can configure the way the package's dist reference (which appears in the composer.lock file) is built.\n\nThe following modes exist:\n\n- `none` - reference will be always null. This can help reduce lock file conflicts in the lock file but reduces clarity as to when the last update happened and whether the package is in the latest state.\n- `config` - reference is built based on a hash of the package's composer.json and repo config\n- `auto` (used by default) - reference is built basing on the hash like with `config`, but if the package folder contains a git repository, the HEAD commit's hash is used as reference instead.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../../packages/my-package\",\n            \"options\": {\n                \"reference\": \"config\"\n            }\n        }\n    ]\n}\n```\n\n## Disabling Packagist.org\n\nYou can disable the default Packagist.org repository by adding this to your `composer.json`:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"packagist.org\": false\n        }\n    ]\n}\n```\n\nYou can disable Packagist.org globally by using the global config flag:\n\n    php composer.phar config -g repo.packagist false\n\n← [Schema](04-schema.md) \\| [Config](06-config.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/05-repositories.md](https://getcomposer.org/doc/05-repositories.md)"
- name: 7. Config
  id: 06-config.md
  summary: This chapter will describe the config section of the composer.json schema
  description: "# Config\n\nThis chapter will describe the `config` section of the `composer.json` [schema](04-schema.md).\n\n## process-timeout\n\nThe timeout in seconds for process executions, defaults to 300 (5mins). The duration processes like git clones can run before Composer assumes they died out. You may need to make this higher if you have a slow connection or huge vendors.\n\nTo disable the process timeout on a custom command under `scripts`, a static helper is available:\n\n``` javascript\n{\n    \"scripts\": {\n        \"test\": [\n            \"Composer\\\\Config::disableProcessTimeout\",\n            \"phpunit\"\n        ]\n    }\n}\n```\n\n## allow-plugins\n\nDefaults to `{}` which does not allow any plugins to be loaded.\n\nAs of Composer 2.2.0, the `allow-plugins` option adds a layer of security allowing you to restrict which Composer plugins are able to execute code during a Composer run.\n\nWhen a new plugin is first activated, which is not yet listed in the config option, Composer will print a warning. If you run Composer interactively it will prompt you to decide if you want to execute the plugin or not.\n\nUse this setting to allow only packages you trust to execute code. Set it to an object with package name patterns as keys. The values are **true** to allow and **false** to disallow while suppressing further warnings and prompts.\n\n``` javascript\n{\n    \"config\": {\n        \"allow-plugins\": {\n            \"third-party/required-plugin\": true,\n            \"my-organization/*\": true,\n            \"unnecessary/plugin\": false\n        }\n    }\n}\n```\n\nYou can also set the config option itself to `false` to disallow all plugins, or `true` to allow all plugins to run (NOT recommended). For example:\n\n``` javascript\n{\n    \"config\": {\n        \"allow-plugins\": false\n    }\n}\n```\n\n## use-include-path\n\nDefaults to `false`. If `true`, the Composer autoloader will also look for classes in the PHP include path.\n\n## preferred-install\n\nDefaults to `dist` and can be any of `source`, `dist` or `auto`. This option allows you to set the install method Composer will prefer to use. Can optionally be an object with package name patterns for keys for more granular install preferences.\n\n``` javascript\n{\n    \"config\": {\n        \"preferred-install\": {\n            \"my-organization/stable-package\": \"dist\",\n            \"my-organization/*\": \"source\",\n            \"partner-organization/*\": \"auto\",\n            \"*\": \"dist\"\n        }\n    }\n}\n```\n\n- `source` means Composer will install packages from their `source` if there is one. This is typically a git clone or equivalent checkout of the version control system the package uses. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly.\n- `auto` is the legacy behavior where Composer uses `source` automatically for dev versions, and `dist` otherwise.\n- `dist` (the default as of Composer 2.1) means Composer installs from `dist`, where possible. This is typically a zip file download, which is faster than cloning the entire repository.\n\n> **Note:** Order matters. More specific patterns should be earlier than more relaxed patterns. When mixing the string notation with the hash configuration in global and package configurations the string notation is translated to a `*` package pattern.\n\n## use-parent-dir\n\nWhen running Composer in a directory where there is no composer.json, if there is one present in a directory above Composer will by default ask you whether you want to use that directory's composer.json instead.\n\nIf you always want to answer yes to this prompt, you can set this config value to `true`. To never be prompted, set it to `false`. The default is `\"prompt\"`.\n\n> **Note:** This config must be set in your global user-wide config for it to work. Use for example `php composer.phar config --global use-parent-dir true` to set it.\n\n## store-auths\n\nWhat to do after prompting for authentication, one of: `true` (always store), `false` (do not store) and `\"prompt\"` (ask every time), defaults to `\"prompt\"`.\n\n## github-protocols\n\nDefaults to `[\"https\", \"ssh\", \"git\"]`. A list of protocols to use when cloning from github.com, in priority order. By default `git` is present but only if [secure-http](#secure-http) is disabled, as the git protocol is not encrypted. If you want your origin remote push URLs to be using https and not ssh (`git@github.com:...`), then set the protocol list to be only `[\"https\"]` and Composer will stop overwriting the push URL to an ssh URL.\n\n## github-oauth\n\nA list of domain names and oauth keys. For example using `{\"github.com\": \"oauthtoken\"}` as the value of this option will use `oauthtoken` to access private repositories on github and to circumvent the low IP-based rate limiting of their API. Composer may prompt for credentials when needed, but these can also be manually set. Read more on how to get an OAuth token for GitHub and cli syntax [here](articles/authentication-for-private-packages.md#github-oauth).\n\n## gitlab-domains\n\nDefaults to `[\"gitlab.com\"]`. A list of domains of GitLab servers. This is used if you use the `gitlab` repository type.\n\n## gitlab-oauth\n\nA list of domain names and oauth keys. For example using `{\"gitlab.com\": \"oauthtoken\"}` as the value of this option will use `oauthtoken` to access private repositories on gitlab. Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the [`gitlab-domains`](06-config.md#gitlab-domains) option. Further info can also be found [here](articles/authentication-for-private-packages.md#gitlab-oauth)\n\n## gitlab-token\n\nA list of domain names and private tokens. Private token can be either simple string, or array with username and token. For example using `{\"gitlab.com\": \"privatetoken\"}` as the value of this option will use `privatetoken` to access private repositories on gitlab. Using `{\"gitlab.com\": {\"username\": \"gitlabuser\", \"token\": \"privatetoken\"}}` will use both username and token for gitlab deploy token functionality (<https://docs.gitlab.com/ee/user/project/deploy_tokens/>) Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the [`gitlab-domains`](06-config.md#gitlab-domains) option. The token must have `api` or `read_api` scope. Further info can also be found [here](articles/authentication-for-private-packages.md#gitlab-token)\n\n## gitlab-protocol\n\nA protocol to force use of when creating a repository URL for the `source` value of the package metadata. One of `git` or `http`. (`https` is treated as a synonym for `http`.) Helpful when working with projects referencing private repositories which will later be cloned in GitLab CI jobs with a [GitLab CI_JOB_TOKEN](https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#predefined-variables-reference) using HTTP basic auth. By default, Composer will generate a git-over-SSH URL for private repositories and HTTP(S) only for public.\n\n## disable-tls\n\nDefaults to `false`. If set to true all HTTPS URLs will be tried with HTTP instead and no network level encryption is performed. Enabling this is a security risk and is NOT recommended. The better way is to enable the php_openssl extension in php.ini. Enabling this will implicitly disable the `secure-http` option.\n\n## secure-http\n\nDefaults to `true`. If set to true only HTTPS URLs are allowed to be downloaded via Composer. If you really absolutely need HTTP access to something then you can disable it, but using [Let's Encrypt](https://letsencrypt.org/) to get a free SSL certificate is generally a better alternative.\n\n## bitbucket-oauth\n\nA list of domain names and consumers. For example using `{\"bitbucket.org\": {\"consumer-key\": \"myKey\", \"consumer-secret\": \"mySecret\"}}`. Read more [here](articles/authentication-for-private-packages.md#bitbucket-oauth).\n\n## cafile\n\nLocation of Certificate Authority file on local filesystem. In PHP 5.6+ you should rather set this via openssl.cafile in php.ini, although PHP 5.6+ should be able to detect your system CA file automatically.\n\n## capath\n\nIf cafile is not specified or if the certificate is not found there, the directory pointed to by capath is searched for a suitable certificate. capath must be a correctly hashed certificate directory.\n\n## http-basic\n\nA list of domain names and username/passwords to authenticate against them. For example using `{\"example.org\": {\"username\": \"alice\", \"password\": \"foo\"}}` as the value of this option will let Composer authenticate against example.org. More info can be found [here](articles/authentication-for-private-packages.md#http-basic).\n\n## bearer\n\nA list of domain names and tokens to authenticate against them. For example using `{\"example.org\": \"foo\"}` as the value of this option will let Composer authenticate against example.org using an `Authorization: Bearer foo` header.\n\n## platform\n\nLets you fake platform packages (PHP and extensions) so that you can emulate a production env or define your target platform in the config. Example: `{\"php\": \"7.0.3\", \"ext-something\": \"4.0.3\"}`.\n\nThis will make sure that no package requiring more than PHP 7.0.3 can be installed regardless of the actual PHP version you run locally. However it also means the dependencies are not checked correctly anymore, if you run PHP 5.6 it will install fine as it assumes 7.0.3, but then it will fail at runtime. This also means if `{\"php\":\"7.4\"}` is specified; no packages will be used that define `7.4.1` as minimum.\n\nTherefore if you use this it is recommended, and safer, to also run the [`check-platform-reqs`](03-cli.md#check-platform-reqs) command as part of your deployment strategy.\n\nIf a dependency requires some extension that you do not have installed locally you may ignore it instead by passing `--ignore-platform-req=ext-foo` to `update`, `install` or `require`. In the long run though you should install required extensions as if you ignore one now and a new package you add a month later also requires it, you may introduce issues in production unknowingly.\n\nIf you have an extension installed locally but *not* on production, you may want to artificially hide it from Composer using `{\"ext-foo\": false}`.\n\n## vendor-dir\n\nDefaults to `vendor`. You can install dependencies into a different directory if you want to. `$HOME` and `~` will be replaced by your home directory's path in vendor-dir and all `*-dir` options below.\n\n## bin-dir\n\nDefaults to `vendor/bin`. If a project includes binaries, they will be symlinked into this directory.\n\n## data-dir\n\nDefaults to `C:\\Users\\<user>\\AppData\\Roaming\\Composer` on Windows, `$XDG_DATA_HOME/composer` on unix systems that follow the XDG Base Directory Specifications, and `$COMPOSER_HOME` on other unix systems. Right now it is only used for storing past composer.phar files to be able to roll back to older versions. See also [COMPOSER_HOME](03-cli.md#composer-home).\n\n## cache-dir\n\nDefaults to `C:\\Users\\<user>\\AppData\\Local\\Composer` on Windows, `/Users/<user>/Library/Caches/composer` on macOS, `$XDG_CACHE_HOME/composer` on unix systems that follow the XDG Base Directory Specifications, and `$COMPOSER_HOME/cache` on other unix systems. Stores all the caches used by Composer. See also [COMPOSER_HOME](03-cli.md#composer-home).\n\n## cache-files-dir\n\nDefaults to `$cache-dir/files`. Stores the zip archives of packages.\n\n## cache-repo-dir\n\nDefaults to `$cache-dir/repo`. Stores repository metadata for the `composer` type and the VCS repos of type `svn`, `fossil`, `github` and `bitbucket`.\n\n## cache-vcs-dir\n\nDefaults to `$cache-dir/vcs`. Stores VCS clones for loading VCS repository metadata for the `git`/`hg` types and to speed up installs.\n\n## cache-files-ttl\n\nDefaults to `15552000` (6 months). Composer caches all dist (zip, tar, ...) packages that it downloads. Those are purged after six months of being unused by default. This option allows you to tweak this duration (in seconds) or disable it completely by setting it to 0.\n\n## cache-files-maxsize\n\nDefaults to `300MiB`. Composer caches all dist (zip, tar, ...) packages that it downloads. When the garbage collection is periodically ran, this is the maximum size the cache will be able to use. Older (less used) files will be removed first until the cache fits.\n\n## cache-read-only\n\nDefaults to `false`. Whether to use the Composer cache in read-only mode.\n\n## bin-compat\n\nDefaults to `auto`. Determines the compatibility of the binaries to be installed. If it is `auto` then Composer only installs .bat proxy files when on Windows or WSL. If set to `full` then both .bat files for Windows and scripts for Unix-based operating systems will be installed for each binary. This is mainly useful if you run Composer inside a linux VM but still want the `.bat` proxies available for use in the Windows host OS. If set to `proxy` Composer will only create bash/Unix-style proxy files and no .bat files even on Windows/WSL.\n\n## prepend-autoloader\n\nDefaults to `true`. If `false`, the Composer autoloader will not be prepended to existing autoloaders. This is sometimes required to fix interoperability issues with other autoloaders.\n\n## autoloader-suffix\n\nDefaults to `null`. Non-empty string to be used as a suffix for the generated Composer autoloader. When null a random one will be generated.\n\n## optimize-autoloader\n\nDefaults to `false`. If `true`, always optimize when dumping the autoloader.\n\n## sort-packages\n\nDefaults to `false`. If `true`, the `require` command keeps packages sorted by name in `composer.json` when adding a new package.\n\n## classmap-authoritative\n\nDefaults to `false`. If `true`, the Composer autoloader will only load classes from the classmap. Implies `optimize-autoloader`.\n\n## apcu-autoloader\n\nDefaults to `false`. If `true`, the Composer autoloader will check for APCu and use it to cache found/not-found classes when the extension is enabled.\n\n## github-domains\n\nDefaults to `[\"github.com\"]`. A list of domains to use in github mode. This is used for GitHub Enterprise setups.\n\n## github-expose-hostname\n\nDefaults to `true`. If `false`, the OAuth tokens created to access the github API will have a date instead of the machine hostname.\n\n## use-github-api\n\nDefaults to `true`. Similar to the `no-api` key on a specific repository, setting `use-github-api` to `false` will define the global behavior for all GitHub repositories to clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the `git` driver directly, Composer will still attempt to use GitHub's zip files.\n\n## notify-on-install\n\nDefaults to `true`. Composer allows repositories to define a notification URL, so that they get notified whenever a package from that repository is installed. This option allows you to disable that behavior.\n\n## discard-changes\n\nDefaults to `false` and can be any of `true`, `false` or `\"stash\"`. This option allows you to set the default style of handling dirty updates when in non-interactive mode. `true` will always discard changes in vendors, while `\"stash\"` will try to stash and reapply. Use this for CI servers or deploy scripts if you tend to have modified vendors.\n\n## archive-format\n\nDefaults to `tar`. Overrides the default format used by the archive command.\n\n## archive-dir\n\nDefaults to `.`. Default destination for archives created by the archive command.\n\nExample:\n\n``` javascript\n{\n    \"config\": {\n        \"archive-dir\": \"/home/user/.composer/repo\"\n    }\n}\n```\n\n## htaccess-protect\n\nDefaults to `true`. If set to `false`, Composer will not create `.htaccess` files in the Composer home, cache, and data directories.\n\n## lock\n\nDefaults to `true`. If set to `false`, Composer will not create a `composer.lock` file and will ignore it if one is present.\n\n## platform-check\n\nDefaults to `php-only` which only checks the PHP version. Set to `true` to also check the presence of extension. If set to `false`, Composer will not create and require a `platform_check.php` file as part of the autoloader bootstrap.\n\n## secure-svn-domains\n\nDefaults to `[]`. Lists domains which should be trusted/marked as using a secure Subversion/SVN transport. By default svn:// protocol is seen as insecure and will throw, but you can set this config option to `[\"example.org\"]` to allow using svn URLs on that hostname. This is a better/safer alternative to disabling `secure-http` altogether.\n\n← [Repositories](05-repositories.md) \\| [Runtime](07-runtime.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/06-config.md](https://getcomposer.org/doc/06-config.md)"
- name: 8. Runtime Composer utilities
  id: 07-runtime.md
  summary: While Composer is mostly used around your project to install its dependencies, there are a few things which are made available to you at runtime
  description: "# Runtime Composer utilities\n\nWhile Composer is mostly used around your project to install its dependencies, there are a few things which are made available to you at runtime.\n\nIf you need to rely on some of these in a specific version, you can require the `composer-runtime-api` package.\n\n## Autoload\n\nThe autoloader is the most used one, and is already covered in our [basic usage guide](01-basic-usage.md#autoloading). It is available in all Composer versions.\n\n## Installed versions\n\ncomposer-runtime-api 2.0 introduced a new `Composer\\InstalledVersions` class which offers a few static methods to inspect which versions are currently installed. This is automatically available to your code as long as you include the Composer autoloader.\n\nThe main use cases for this class are the following:\n\n### Knowing whether package X (or virtual package) is present\n\n``` php\n\\Composer\\InstalledVersions::isInstalled('vendor/package'); // returns bool\n\\Composer\\InstalledVersions::isInstalled('psr/log-implementation'); // returns bool\n```\n\nAs of Composer 2.1, you may also check if something was installed via require-dev or not by passing false as second argument:\n\n``` php\n\\Composer\\InstalledVersions::isInstalled('vendor/package'); // returns true assuming this package is installed\n\\Composer\\InstalledVersions::isInstalled('vendor/package', false); // returns true if vendor/package is in require, false if in require-dev\n```\n\nNote that this can not be used to check whether platform packages are installed.\n\n### Knowing whether package X is installed in version Y\n\n> **Note:** To use this, your package must require `\"composer/semver\": \"^3.0\"`.\n\n``` php\nuse Composer\\Semver\\VersionParser;\n\n\\Composer\\InstalledVersions::satisfies(new VersionParser, 'vendor/package', '2.0.*');\n\\Composer\\InstalledVersions::satisfies(new VersionParser, 'psr/log-implementation', '^1.0');\n```\n\nThis will return true if e.g. vendor/package is installed in a version matching `2.0.*`, but also if the given package name is replaced or provided by some other package.\n\n### Knowing the version of package X\n\n> **Note:** This will return `null` if the package name you ask for is not itself installed but merely provided or replaced by another package. We therefore recommend using satisfies() in library code at least. In application code you have a bit more control and it is less important.\n\n``` php\n// returns a normalized version (e.g. 1.2.3.0) if vendor/package is installed,\n// or null if it is provided/replaced,\n// or throws OutOfBoundsException if the package is not installed at all\n\\Composer\\InstalledVersions::getVersion('vendor/package');\n```\n\n``` php\n// returns the original version (e.g. v1.2.3) if vendor/package is installed,\n// or null if it is provided/replaced,\n// or throws OutOfBoundsException if the package is not installed at all\n\\Composer\\InstalledVersions::getPrettyVersion('vendor/package');\n```\n\n``` php\n// returns the package dist or source reference (e.g. a git commit hash) if vendor/package is installed,\n// or null if it is provided/replaced,\n// or throws OutOfBoundsException if the package is not installed at all\n\\Composer\\InstalledVersions::getReference('vendor/package');\n```\n\n### Knowing a package's own installed version\n\nIf you are only interested in getting a package's own version, e.g. in the source of acme/foo you want to know which version acme/foo is currently running to display that to the user, then it is acceptable to use getVersion/getPrettyVersion/getReference.\n\nThe warning in the section above does not apply in this case as you are sure the package is present and not being replaced if your code is running.\n\nIt is nonetheless a good idea to make sure you handle the `null` return value as gracefully as possible for safety.\n\n------------------------------------------------------------------------\n\nA few other methods are available for more complex usages, please refer to the source/docblocks of [the class itself](https://github.com/composer/composer/blob/main/src/Composer/InstalledVersions.php).\n\n### Knowing the path in which a package is installed\n\nThe `getInstallPath` method to retrieve a package's absolute install path.\n\n> **Note:** The path, while absolute, may contain `../` or symlinks. It is not guaranteed to be equivalent to a `realpath()` so you should run a realpath on it if that matters to you.\n\n``` php\n// returns an absolute path to the package installation location if vendor/package is installed,\n// or null if it is provided/replaced, or the package is a metapackage\n// or throws OutOfBoundsException if the package is not installed at all\n\\Composer\\InstalledVersions::getInstallPath('vendor/package');\n```\n\n> Available as of Composer 2.1 (i.e. `composer-runtime-api ^2.1`)\n\n### Knowing which packages of a given type are installed\n\nThe `getInstalledPackagesByType` method accepts a package type (e.g. foo-plugin) and lists the packages of that type which are installed. You can then use the methods above to retrieve more information about each package if needed.\n\nThis method should alleviate the need for custom installers placing plugins in a specific path instead of leaving them in the vendor dir. You can then find plugins to initialize at runtime via InstalledVersions, including their paths via getInstallPath if needed.\n\n``` php\n\\Composer\\InstalledVersions::getInstalledPackagesByType('foo-plugin');\n```\n\n> Available as of Composer 2.1 (i.e. `composer-runtime-api ^2.1`)\n\n## Platform check\n\ncomposer-runtime-api 2.0 introduced a new `vendor/composer/platform_check.php` file, which is included automatically when you include the Composer autoloader.\n\nIt verifies that platform requirements (i.e. php and php extensions) are fulfilled by the PHP process currently running. If the requirements are not met, the script prints a warning with the missing requirements and exits with code 104.\n\nTo avoid an unexpected white page of death with some obscure PHP extension warning in production, you can run `composer check-platform-reqs` as part of your deployment/build and if that returns a non-0 code you should abort.\n\nThe default value is `php-only` which only checks the PHP version.\n\nIf you for some reason do not want to use this safety check, and would rather risk runtime errors when your code executes, you can disable this by setting the [`platform-check`](06-config.md#platform-check) config option to `false`.\n\nIf you want the check to include verifying the presence of PHP extensions, set the config option to `true`. `ext-*` requirements will then be verified but for performance reasons Composer only checks the extension is present, not its exact version.\n\n`lib-*` requirements are never supported/checked by the platform check feature.\n\n## Autoloader path in binaries\n\ncomposer-runtime-api 2.2 introduced a new `$_composer_autoload_path` global variable set when running binaries installed with Composer. Read more about this [on the vendor binaries docs](articles/vendor-binaries.md#finding-the-composer-autoloader-from-a-binary).\n\nThis is set by the binary proxy and as such is not made available to projects by Composer's `vendor/autoload.php`, which would be useless as it would point back to itself.\n\n## Binary (bin-dir) path in binaries\n\ncomposer-runtime-api 2.2.2 introduced a new `$_composer_bin_dir` global variable set when running binaries installed with Composer. Read more about this [on the vendor binaries docs](articles/vendor-binaries.md#finding-the-composer-bin-dir-from-a-binary).\n\nThis is set by the binary proxy and as such is not made available to projects by Composer's `vendor/autoload.php`.\n\n← [Config](06-config.md) \\| [Community](08-community.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/07-runtime.md](https://getcomposer.org/doc/07-runtime.md)"
- name: 9. Community
  id: 08-community.md
  summary: There are many people using Composer already, and quite a few of them are contributing
  description: "# Community\n\nThere are many people using Composer already, and quite a few of them are contributing.\n\n## Contributing\n\nIf you would like to contribute to Composer, please read the [README](https://github.com/composer/composer) and [CONTRIBUTING](https://github.com/composer/composer/blob/main/.github/CONTRIBUTING.md) documents.\n\nThe most important guidelines are described as follows:\n\n> All code contributions - including those of people having commit access - must go through a pull request and approved by a core developer before being merged. This is to ensure proper review of all the code.\n>\n> Fork the project, create a feature branch, and send us a pull request.\n>\n> To ensure a consistent code base, you should make sure the code follows the [PSR-2 Coding Standards](https://www.php-fig.org/psr/psr-2/).\n\n## Support\n\nThe IRC channel is on irc.libera.chat: [\\#composer](ircs://irc.libera.chat:6697/composer).\n\n[Stack Overflow](https://stackoverflow.com/questions/tagged/composer-php) and [GitHub Discussions](https://github.com/composer/composer/discussions) both have a collection of Composer related questions.\n\nFor paid support, we do provide Composer-related support via chat and email to [Private Packagist](https://packagist.com) customers.\n\n← [Config](07-runtime.md)\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/08-community.md](https://getcomposer.org/doc/08-community.md)"
- name: abandoned
  id: 04-schema.md#abandoned
  summary: Indicates whether this package has been abandoned
  belongs_to: 5. The composer.json schema
  description: |-
    ### abandoned

    Indicates whether this package has been abandoned.

    It can be boolean or a package name/URL pointing to a recommended alternative.

    Examples:

    Use `"abandoned": true` to indicate this package is abandoned. Use `"abandoned": "monolog/monolog"` to indicate this package is abandoned, and that the recommended alternative is `monolog/monolog`.

    Defaults to false.

    Optional.
- name: Aliases
  id: articles/aliases.md
  summary: When you are using a VCS repository, you will only get comparable versions for branches that look like versions, such as 2.0 or 2.0.x
  description: "# Aliases\n\n## Why aliases?\n\nWhen you are using a VCS repository, you will only get comparable versions for branches that look like versions, such as `2.0` or `2.0.x`. For your `master` branch, you will get a `dev-master` version. For your `bugfix` branch, you will get a `dev-bugfix` version.\n\nIf your `master` branch is used to tag releases of the `1.0` development line, i.e. `1.0.1`, `1.0.2`, `1.0.3`, etc., any package depending on it will probably require version `1.0.*`.\n\nIf anyone wants to require the latest `dev-master`, they have a problem: Other packages may require `1.0.*`, so requiring that dev version will lead to conflicts, since `dev-master` does not match the `1.0.*` constraint.\n\nEnter aliases.\n\n## Branch alias\n\nThe `dev-master` branch is one in your main VCS repo. It is rather common that someone will want the latest master dev version. Thus, Composer allows you to alias your `dev-master` branch to a `1.0.x-dev` version. It is done by specifying a `branch-alias` field under `extra` in `composer.json`:\n\n``` javascript\n{\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.0.x-dev\"\n        }\n    }\n}\n```\n\nIf you alias a non-comparable version (such as dev-develop) `dev-` must prefix the branch name. You may also alias a comparable version (i.e. start with numbers, and end with `.x-dev`), but only as a more specific version. For example, 1.x-dev could be aliased as 1.2.x-dev.\n\nThe alias must be a comparable dev version, and the `branch-alias` must be present on the branch that it references. For `dev-master`, you need to commit it on the `master` branch.\n\nAs a result, anyone can now require `1.0.*` and it will happily install `dev-master`.\n\nIn order to use branch aliasing, you must own the repository of the package being aliased. If you want to alias a third party package without maintaining a fork of it, use inline aliases as described below.\n\n## Require inline alias\n\nBranch aliases are great for aliasing main development lines. But in order to use them you need to have control over the source repository, and you need to commit changes to version control.\n\nThis is not really fun when you want to try a bugfix of some library that is a dependency of your local project.\n\nFor this reason, you can alias packages in your `require` and `require-dev` fields. Let's say you found a bug in the `monolog/monolog` package. You cloned [Monolog](https://github.com/Seldaek/monolog) on GitHub and fixed the issue in a branch named `bugfix`. Now you want to install that version of monolog in your local project.\n\nYou are using `symfony/monolog-bundle` which requires `monolog/monolog` version `1.*`. So you need your `dev-bugfix` to match that constraint.\n\nAdd this to your project's root `composer.json`:\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/you/monolog\"\n        }\n    ],\n    \"require\": {\n        \"symfony/monolog-bundle\": \"2.0\",\n        \"monolog/monolog\": \"dev-bugfix as 1.0.x-dev\"\n    }\n}\n```\n\nOr let Composer add it for you with:\n\n    php composer.phar require \"monolog/monolog:dev-bugfix as 1.0.x-dev\"\n\nThat will fetch the `dev-bugfix` version of `monolog/monolog` from your GitHub and alias it to `1.0.x-dev`.\n\n> **Note:** Inline aliasing is a root-only feature. If a package with inline aliases is required, the alias (right of the `as`) is used as the version constraint. The part left of the `as` is discarded. As a consequence, if A requires B and B requires `monolog/monolog` version `dev-bugfix as 1.0.x-dev`, installing A will make B require `1.0.x-dev`, which may exist as a branch alias or an actual `1.0` branch. If it does not, it must be inline-aliased again in A's `composer.json`.\n>\n> **Note:** Inline aliasing should be avoided, especially for published packages/libraries. If you found a bug, try to get your fix merged upstream. This helps to avoid issues for users of your package.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/aliases.md](https://getcomposer.org/doc/articles/aliases.md)"
- name: allow-plugins
  id: 06-config.md#allow-plugins
  summary: Defaults to {} which does not allow any plugins to be loaded
  belongs_to: 7. Config
  description: |-
    ## allow-plugins

    Defaults to `{}` which does not allow any plugins to be loaded.

    As of Composer 2.2.0, the `allow-plugins` option adds a layer of security allowing you to restrict which Composer plugins are able to execute code during a Composer run.

    When a new plugin is first activated, which is not yet listed in the config option, Composer will print a warning. If you run Composer interactively it will prompt you to decide if you want to execute the plugin or not.

    Use this setting to allow only packages you trust to execute code. Set it to an object with package name patterns as keys. The values are **true** to allow and **false** to disallow while suppressing further warnings and prompts.

    ``` javascript
    {
        "config": {
            "allow-plugins": {
                "third-party/required-plugin": true,
                "my-organization/*": true,
                "unnecessary/plugin": false
            }
        }
    }
    ```

    You can also set the config option itself to `false` to disallow all plugins, or `true` to allow all plugins to run (NOT recommended). For example:

    ``` javascript
    {
        "config": {
            "allow-plugins": false
        }
    }
    ```
- name: apcu-autoloader
  id: 06-config.md#apcu-autoloader
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## apcu-autoloader

    Defaults to `false`. If `true`, the Composer autoloader will check for APCu and use it to cache found/not-found classes when the extension is enabled.
- name: archive
  id: 04-schema.md#archive
  summary: A set of options for creating package archives
  belongs_to: 5. The composer.json schema
  description: |-
    ### archive

    A set of options for creating package archives.

    The following options are supported:

    - **name:** Allows configuring base name for archive. By default (if not configured, and `--file` is not passed as command-line argument), `preg_replace('#[^a-z0-9-_]#i', '-', name)` is used.

    Example:

    ``` javascript
    {
        "name": "org/strangeName",
        "archive": {
            "name": "Strange_name"
        }
    }
    ```

    - **exclude:** Allows configuring a list of patterns for excluded paths. The pattern syntax matches .gitignore files. A leading exclamation mark (!) will result in any matching files to be included even if a previous pattern excluded them. A leading slash will only match at the beginning of the project relative path. An asterisk will not expand to a directory separator.

    Example:

    ``` javascript
    {
        "archive": {
            "exclude": ["/foo/bar", "baz", "/*.test", "!/foo/bar/baz"]
        }
    }
    ```

    The example will include `/dir/foo/bar/file`, `/foo/bar/baz`, `/file.php`, `/foo/my.test` but it will exclude `/foo/bar/any`, `/foo/baz`, and `/my.test`.

    Optional.
- name: archive-dir
  id: 06-config.md#archive-dir
  summary: Defaults to .. Default destination for archives created by the archive command
  belongs_to: 7. Config
  description: |-
    ## archive-dir

    Defaults to `.`. Default destination for archives created by the archive command.

    Example:

    ``` javascript
    {
        "config": {
            "archive-dir": "/home/user/.composer/repo"
        }
    }
    ```
- name: archive-format
  id: 06-config.md#archive-format
  summary: Defaults to tar
  belongs_to: 7. Config
  description: |-
    ## archive-format

    Defaults to `tar`. Overrides the default format used by the archive command.
- name: Authentication for privately hosted packages and repositories
  id: articles/authentication-for-private-packages.md
  summary: Your private package server or version control system is probably secured with one or more authentication options
  description: "# Authentication for privately hosted packages and repositories\n\nYour [private package server](handling-private-packages.md) or version control system is probably secured with one or more authentication options. In order to allow your project to have access to these packages and repositories you will have to tell Composer how to authenticate with the server that hosts them.\n\n# Authentication principles\n\nWhenever Composer encounters a protected Composer repository it will try to authenticate using already defined credentials first. When none of those credentials apply it will prompt for credentials and save them (or a token if Composer is able to retrieve one).\n\n| type                                          | Generated by Prompt? |\n|-----------------------------------------------|----------------------|\n| [http-basic](#http-basic)                     | yes                  |\n| [Inline http-basic](#inline-http-basic)       | no                   |\n| [HTTP Bearer](#http-bearer)                   | no                   |\n| [Custom header](#custom-token-authentication) | no                   |\n| [gitlab-oauth](#gitlab-oauth)                 | yes                  |\n| [gitlab-token](#gitlab-token)                 | yes                  |\n| [github-oauth](#github-oauth)                 | yes                  |\n| [bitbucket-oauth](#bitbucket-oauth)           | yes                  |\n\nSometimes automatic authentication is not possible, or you may want to predefine authentication credentials.\n\nCredentials can be stored on 3 different places; in an `auth.json` for the project, a global `auth.json` or in the `composer.json` itself.\n\n## Authentication in auth.json per project\n\nIn this authentication storage method, an `auth.json` file will be present in the same folder as the projects' `composer.json` file. You can either create and edit this file using the command line or manually edit or create it.\n\n> **Note: Make sure the `auth.json` file is in `.gitignore`** to avoid leaking credentials into your git history.\n\n## Global authentication credentials\n\nIf you don't want to supply credentials for every project you work on, storing your credentials globally might be a better idea. These credentials are stored in a global `auth.json` in your Composer home directory.\n\n### Command line global credential editing\n\nFor all authentication methods it is possible to edit them using the command line;\n\n- [http-basic](#command-line-http-basic)\n- [Inline http-basic](#command-line-inline-http-basic)\n- [HTTP Bearer](#http-bearer)\n- [gitlab-oauth](#command-line-gitlab-oauth)\n- [gitlab-token](#command-line-gitlab-token)\n- [github-oauth](#command-line-github-oauth)\n- [bitbucket-oauth](#command-line-bitbucket-oauth)\n\n### Manually editing global authentication credentials\n\n> **Note:** It is not recommended to manually edit your authentication options as this might result in invalid json. Instead preferably use [the command line](#command-line-global-credential-editing).\n\nTo manually edit it, run:\n\n    php composer.phar config --global --editor [--auth]\n\nFor specific authentication implementations, see their sections;\n\n- [http-basic](#manual-http-basic)\n- [Inline http-basic](#manual-inline-http-basic)\n- [HTTP Bearer](#http-bearer)\n- [custom header](#manual-custom-token-authentication)\n- [gitlab-oauth](#manual-gitlab-oauth)\n- [gitlab-token](#manual-gitlab-token)\n- [github-oauth](#manual-github-oauth)\n- [bitbucket-oauth](#manual-bitbucket-oauth)\n\nManually editing this file instead of using the command line may result in invalid json errors. To fix this you need to open the file in an editor and fix the error. To find the location of your global `auth.json`, execute:\n\n    php composer.phar config --global home\n\nThe folder will contain your global `auth.json` if it exists.\n\nYou can open this file in your favorite editor and fix the error.\n\n## Authentication in composer.json file itself\n\n> **Note:** **This is not recommended** as these credentials are visible to anyone who has access to the composer.json, either when it is shared through a version control system like git or when an attacker gains (read) access to your production server files.\n\nIt is also possible to add credentials to a `composer.json` on a per-project basis in the `config` section or directly in the repository definition.\n\n## Authentication using the COMPOSER_AUTH environment variable\n\n> **Note:** Using the command line environment variable method also has security implications. These credentials will most likely be stored in memory, and may be persisted to a file like `~/.bash_history` (linux) or `ConsoleHost_history.txt` (PowerShell on Windows) when closing a session.\n\nThe final option to supply Composer with credentials is to use the `COMPOSER_AUTH` environment variable. These variables can be either passed as command line variables or set in actual environment variables. Read more about the usage of this environment variable [here](../03-cli.md#composer-auth).\n\n# Authentication methods\n\n## http-basic\n\n### Command line http-basic\n\n    php composer.phar config [--global] http-basic.repo.example.org username password\n\nIn the above command, the config key `http-basic.repo.example.org` consists of two parts:\n\n- `http-basic` is the authentication method.\n- `repo.example.org` is the repository host name, you should replace it with the host name of your repository.\n\n### Manual http-basic\n\n    php composer.phar config [--global] --editor --auth\n\n``` javascript\n{\n    \"http-basic\": {\n        \"example.org\": {\n            \"username\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}\n```\n\n## Inline http-basic\n\nFor the inline http-basic authentication method the credentials are not stored in a separate `auth.json` in the project or globally, but in the `composer.json` or global configuration in the same place where the Composer repository definition is defined.\n\nMake sure that the username and password are encoded according to [RFC 3986](http://www.faqs.org/rfcs/rfc3986.html) (2.1. Percent-Encoding). If the username e.g. is an email address it needs to be passed as `name%40example.com`.\n\n### Command line inline http-basic\n\n    php composer.phar config [--global] repositories composer.unique-name https://username:password@repo.example.org\n\n### Manual inline http-basic\n\n    php composer.phar config [--global] --editor\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://username:password@example.org\"\n        }\n    ]\n}\n```\n\n## HTTP Bearer\n\n### Command line HTTP Bearer authentication\n\n    php composer.phar config [--global] bearer.repo.example.org token\n\nIn the above command, the config key `bearer.repo.example.org` consists of two parts:\n\n- `bearer` is the authentication method.\n- `repo.example.org` is the repository host name, you should replace it with the host name of your repository.\n\n### Manual HTTP Bearer authentication\n\n    php composer.phar config [--global] --editor --auth\n\n``` javascript\n{\n    \"bearer\": {\n        \"example.org\": \"TOKEN\"\n    }\n}\n```\n\n## Custom token authentication\n\n### Manual custom token authentication\n\n    php composer.phar config [--global] --editor\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"options\":  {\n                \"http\": {\n                    \"header\": [\n                        \"API-TOKEN: YOUR-API-TOKEN\"\n                    ]\n                }\n            }\n        }\n    ]\n}\n```\n\n## gitlab-oauth\n\n> **Note:** For the gitlab authentication to work on private gitlab instances, the [`gitlab-domains`](../06-config.md#gitlab-domains) section should also contain the url.\n\n### Command line gitlab-oauth\n\n    php composer.phar config [--global] gitlab-oauth.gitlab.example.org token\n\nIn the above command, the config key `gitlab-oauth.gitlab.example.org` consists of two parts:\n\n- `gitlab-oauth` is the authentication method.\n- `gitlab.example.org` is the host name of your GitLab instance, you should replace it with the host name of your GitLab instance or use `gitlab.com` if you don't have a self-hosted GitLab instance.\n\n### Manual gitlab-oauth\n\n    php composer.phar config [--global] --editor --auth\n\n``` javascript\n{\n    \"gitlab-oauth\": {\n        \"example.org\": \"token\"\n    }\n}\n```\n\n## gitlab-token\n\n> **Note:** For the gitlab authentication to work on private gitlab instances, the [`gitlab-domains`](../06-config.md#gitlab-domains) section should also contain the url.\n\nTo create a new access token, go to your [access tokens section on GitLab](https://gitlab.com/-/profile/personal_access_tokens) (or the equivalent URL on your private instance) and create a new token. See also [the GitLab access token documentation](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token) for more information.\n\nWhen creating a gitlab token manually, make sure it has either the `read_api` or `api` scope.\n\n### Command line gitlab-token\n\n    php composer.phar config [--global] gitlab-token.gitlab.example.org token\n\nIn the above command, the config key `gitlab-token.gitlab.example.org` consists of two parts:\n\n- `gitlab-token` is the authentication method.\n- `gitlab.example.org` is the host name of your GitLab instance, you should replace it with the host name of your GitLab instance or use `gitlab.com` if you don't have a self-hosted GitLab instance.\n\n### Manual gitlab-token\n\n    php composer.phar config [--global] --editor --auth\n\n``` javascript\n{\n    \"gitlab-token\": {\n        \"example.org\": \"token\"\n    }\n}\n```\n\n## github-oauth\n\nTo create a new access token, head to your [token settings section on Github](https://github.com/settings/tokens) and [generate a new token](https://github.com/settings/tokens/new).\n\nFor public repositories when rate limited, a token *without* any particular scope is sufficient (see `(no scope)` in the [scopes documentation](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps)). Such tokens grant read-only access to public information.\n\nFor private repositories, the `repo` scope is needed. Note that the token will be given broad read/write access to all of your private repositories and much more - see the [scopes documentation](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps) for a complete list. As of writing (November 2021), it seems not to be possible to further limit permissions for such tokens.\n\nRead more about [Personal Access Tokens](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token), or subscribe to the [roadmap item for better scoped tokens in GitHub](https://github.com/github/roadmap/issues/184).\n\n### Command line github-oauth\n\n    php composer.phar config [--global] github-oauth.github.com token\n\nIn the above command, the config key `github-oauth.github.com` consists of two parts:\n\n- `github-oauth` is the authentication method.\n- `github.com` is the host name for which this token applies. For GitHub you most likely do not need to change this.\n\n### Manual github-oauth\n\n    php composer.phar config [--global] --editor --auth\n\n``` javascript\n{\n    \"github-oauth\": {\n        \"github.com\": \"token\"\n    }\n}\n```\n\n## bitbucket-oauth\n\nThe BitBucket driver uses OAuth to access your private repositories via the BitBucket REST APIs, and you will need to create an OAuth consumer to use the driver, please refer to [Atlassian's Documentation](https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/). You will need to fill the callback url with something to satisfy BitBucket, but the address does not need to go anywhere and is not used by Composer.\n\n### Command line bitbucket-oauth\n\n    php composer.phar config [--global] bitbucket-oauth.bitbucket.org consumer-key consumer-secret\n\nIn the above command, the config key `bitbucket-oauth.bitbucket.org` consists of two parts:\n\n- `bitbucket-oauth` is the authentication method.\n- `bitbucket.org` is the host name for which this token applies. Unless you have a private instance you don't need to change this.\n\n### Manual bitbucket-oauth\n\n    php composer.phar config [--global] --editor --auth\n\n``` javascript\n{\n    \"bitbucket-oauth\": {\n        \"bitbucket.org\": {\n             \"consumer-key\": \"key\",\n             \"consumer-secret\": \"secret\"\n        }\n    }\n}\n```\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/authentication-for-private-packages.md](https://getcomposer.org/doc/articles/authentication-for-private-packages.md)"
- name: authors
  id: 04-schema.md#authors
  summary: The authors of the package
  belongs_to: 5. The composer.json schema
  description: |-
    ### authors

    The authors of the package. This is an array of objects.

    Each author object can have following properties:

    - **name:** The author's name. Usually their real name.
    - **email:** The author's email address.
    - **homepage:** URL to the author's website.
    - **role:** The author's role in the project (e.g. developer or translator)

    An example:

    ``` javascript
    {
        "authors": [
            {
                "name": "Nils Adermann",
                "email": "naderman@naderman.de",
                "homepage": "https://www.naderman.de",
                "role": "Developer"
            },
            {
                "name": "Jordi Boggiano",
                "email": "j.boggiano@seld.be",
                "homepage": "https://seld.be",
                "role": "Developer"
            }
        ]
    }
    ```

    Optional, but highly recommended.
- name: autoload
  id: 04-schema.md#autoload
  summary: Autoload mapping for a PHP autoloader
  belongs_to: 5. The composer.json schema
  description: |-
    ### autoload

    Autoload mapping for a PHP autoloader.

    [`PSR-4`](https://www.php-fig.org/psr/psr-4/) and [`PSR-0`](http://www.php-fig.org/psr/psr-0/) autoloading, `classmap` generation and `files` includes are supported.

    PSR-4 is the recommended way since it offers greater ease of use (no need to regenerate the autoloader when you add classes).

    #### PSR-4

    Under the `psr-4` key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like `Foo\\Bar\\Baz` a namespace prefix `Foo\\` pointing to a directory `src/` means that the autoloader will look for a file named `src/Bar/Baz.php` and include it if present. Note that as opposed to the older PSR-0 style, the prefix (`Foo\\`) is **not** present in the file path.

    Namespace prefixes must end in `\\` to avoid conflicts between similar prefixes. For example `Foo` would match classes in the `FooBar` namespace so the trailing backslashes solve the problem: `Foo\\` and `FooBar\\` are distinct.

    The PSR-4 references are all combined, during install/update, into a single key =\> value array which may be found in the generated file `vendor/composer/autoload_psr4.php`.

    Example:

    ``` javascript
    {
        "autoload": {
            "psr-4": {
                "Monolog\\": "src/",
                "Vendor\\Namespace\\": ""
            }
        }
    }
    ```

    If you need to search for a same prefix in multiple directories, you can specify them as an array as such:

    ``` javascript
    {
        "autoload": {
            "psr-4": { "Monolog\\": ["src/", "lib/"] }
        }
    }
    ```

    If you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:

    ``` javascript
    {
        "autoload": {
            "psr-4": { "": "src/" }
        }
    }
    ```

    #### PSR-0

    Under the `psr-0` key you define a mapping from namespaces to paths, relative to the package root. Note that this also supports the PEAR-style non-namespaced convention.

    Please note namespace declarations should end in `\\` to make sure the autoloader responds exactly. For example `Foo` would match in `FooBar` so the trailing backslashes solve the problem: `Foo\\` and `FooBar\\` are distinct.

    The PSR-0 references are all combined, during install/update, into a single key =\> value array which may be found in the generated file `vendor/composer/autoload_namespaces.php`.

    Example:

    ``` javascript
    {
        "autoload": {
            "psr-0": {
                "Monolog\\": "src/",
                "Vendor\\Namespace\\": "src/",
                "Vendor_Namespace_": "src/"
            }
        }
    }
    ```

    If you need to search for a same prefix in multiple directories, you can specify them as an array as such:

    ``` javascript
    {
        "autoload": {
            "psr-0": { "Monolog\\": ["src/", "lib/"] }
        }
    }
    ```

    The PSR-0 style is not limited to namespace declarations only but may be specified right down to the class level. This can be useful for libraries with only one class in the global namespace. If the php source file is also located in the root of the package, for example, it may be declared like this:

    ``` javascript
    {
        "autoload": {
            "psr-0": { "UniqueGlobalClass": "" }
        }
    }
    ```

    If you want to have a fallback directory where any namespace can be, you can use an empty prefix like:

    ``` javascript
    {
        "autoload": {
            "psr-0": { "": "src/" }
        }
    }
    ```

    #### Classmap

    The `classmap` references are all combined, during install/update, into a single key =\> value array which may be found in the generated file `vendor/composer/autoload_classmap.php`. This map is built by scanning for classes in all `.php` and `.inc` files in the given directories/files.

    You can use the classmap generation support to define autoloading for all libraries that do not follow PSR-0/4. To configure this you specify all directories or files to search for classes.

    Example:

    ``` javascript
    {
        "autoload": {
            "classmap": ["src/", "lib/", "Something.php"]
        }
    }
    ```

    Wildcards (`*`) are also supported in a classmap paths, and expand to match any directory name:

    Example:

    ``` javascript
    {
        "autoload": {
            "classmap": ["src/addons/*/lib/", "3rd-party/*", "Something.php"]
        }
    }
    ```

    #### Files

    If you want to require certain files explicitly on every request then you can use the `files` autoloading mechanism. This is useful if your package includes PHP functions that cannot be autoloaded by PHP.

    Example:

    ``` javascript
    {
        "autoload": {
            "files": ["src/MyLibrary/functions.php"]
        }
    }
    ```

    Files autoload rules are included whenever `vendor/autoload.php` is included, right after the autoloader is registered. The order of inclusion depends on package dependencies so that if package A depends on B, files in package B will be included first to ensure package B is fully initialized and ready to be used when files from package A are included.

    If two packages have the same amount of dependents or no dependencies, the order is alphabetical.

    Files from the root package are always loaded last, and you cannot use files autoloading yourself to override functions from your dependencies. If you want to achieve that we recommend you include your own functions *before* including Composer's `vendor/autoload.php`.

    #### Exclude files from classmaps

    If you want to exclude some files or folders from the classmap you can use the `exclude-from-classmap` property. This might be useful to exclude test classes in your live environment, for example, as those will be skipped from the classmap even when building an optimized autoloader.

    The classmap generator will ignore all files in the paths configured here. The paths are absolute from the package root directory (i.e. composer.json location), and support `*` to match anything but a slash, and `**` to match anything. `**` is implicitly added to the end of the paths.

    Example:

    ``` javascript
    {
        "autoload": {
            "exclude-from-classmap": ["/Tests/", "/test/", "/tests/"]
        }
    }
    ```

    #### Optimizing the autoloader

    The autoloader can have quite a substantial impact on your request time (50-100ms per request in large frameworks using a lot of classes). See the [article about optimizing the autoloader](articles/autoloader-optimization.md) for more details on how to reduce this impact.
- name: autoload-dev
  id: 04-schema.md#autoload-dev
  summary: This section allows defining autoload rules for development purposes
  belongs_to: 5. The composer.json schema
  description: |-
    ### autoload-dev ([root-only](04-schema.md#root-package))

    This section allows defining autoload rules for development purposes.

    Classes needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.

    Therefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.

    Example:

    ``` javascript
    {
        "autoload": {
            "psr-4": { "MyLibrary\\": "src/" }
        },
        "autoload-dev": {
            "psr-4": { "MyLibrary\\Tests\\": "tests/" }
        }
    }
    ```
- name: Autoloader optimization
  id: articles/autoloader-optimization.md
  summary: By default, the Composer autoloader runs relatively fast
  description: "# Autoloader optimization\n\nBy default, the Composer autoloader runs relatively fast. However, due to the way PSR-4 and PSR-0 autoloading rules are set up, it needs to check the filesystem before resolving a classname conclusively. This slows things down quite a bit, but it is convenient in development environments because when you add a new class it can immediately be discovered/used without having to rebuild the autoloader configuration.\n\nThe problem however is in production you generally want things to happen as fast as possible, as you can rebuild the configuration every time you deploy and new classes do not appear at random between deploys.\n\nFor this reason, Composer offers a few strategies to optimize the autoloader.\n\n> **Note:** You **should not** enable any of these optimizations in **development** as they all will cause various problems when adding/removing classes. The performance gains are not worth the trouble in a development setting.\n\n## Optimization Level 1: Class map generation\n\n### How to run it?\n\nThere are a few options to enable this:\n\n- Set `\"optimize-autoloader\": true` inside the config key of composer.json\n- Call `install` or `update` with `-o` / `--optimize-autoloader`\n- Call `dump-autoload` with `-o` / `--optimize`\n\n### What does it do?\n\nClass map generation essentially converts PSR-4/PSR-0 rules into classmap rules. This makes everything quite a bit faster as for known classes the class map returns instantly the path, and Composer can guarantee the class is in there so there is no filesystem check needed.\n\nOn PHP 5.6+, the class map is also cached in opcache which improves the initialization time greatly. If you make sure opcache is enabled, then the class map should load almost instantly and then class loading is fast.\n\n### Trade-offs\n\nThere are no real trade-offs with this method. It should always be enabled in production.\n\nThe only issue is it does not keep track of autoload misses (i.e. when it cannot find a given class), so those fallback to PSR-4 rules and can still result in slow filesystem checks. To solve this issue two Level 2 optimization options exist, and you can decide to enable either if you have a lot of class_exists checks that are done for classes that do not exist in your project.\n\n## Optimization Level 2/A: Authoritative class maps\n\n### How to run it?\n\nThere are a few options to enable this:\n\n- Set `\"classmap-authoritative\": true` inside the config key of composer.json\n- Call `install` or `update` with `-a` / `--classmap-authoritative`\n- Call `dump-autoload` with `-a` / `--classmap-authoritative`\n\n### What does it do?\n\nEnabling this automatically enables Level 1 class map optimizations.\n\nThis option says that if something is not found in the classmap, then it does not exist and the autoloader should not attempt to look on the filesystem according to PSR-4 rules.\n\n### Trade-offs\n\nThis option makes the autoloader always return very quickly. On the flipside it also means that in case a class is generated at runtime for some reason, it will not be allowed to be autoloaded. If your project or any of your dependencies does that then you might experience \"class not found\" issues in production. Enable this with care.\n\n> Note: This cannot be combined with Level 2/B optimizations. You have to choose one as they address the same issue in different ways.\n\n## Optimization Level 2/B: APCu cache\n\n### How to run it?\n\nThere are a few options to enable this:\n\n- Set `\"apcu-autoloader\": true` inside the config key of composer.json\n- Call `install` or `update` with `--apcu-autoloader`\n- Call `dump-autoload` with `--apcu`\n\n### What does it do?\n\nThis option adds an APCu cache as a fallback for the class map. It will not automatically generate the class map though, so you should still enable Level 1 optimizations manually if you so desire.\n\nWhether a class is found or not, that fact is always cached in APCu, so it can be returned quickly on the next request.\n\n### Trade-offs\n\nThis option requires APCu which may or may not be available to you. It also uses APCu memory for autoloading purposes, but it is safe to use and cannot result in classes not being found like the authoritative class map optimization above.\n\n> Note: This cannot be combined with Level 2/A optimizations. You have to choose one as they address the same issue in different ways.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/autoloader-optimization.md](https://getcomposer.org/doc/articles/autoloader-optimization.md)"
- name: autoloader-suffix
  id: 06-config.md#autoloader-suffix
  summary: Defaults to null
  belongs_to: 7. Config
  description: |-
    ## autoloader-suffix

    Defaults to `null`. Non-empty string to be used as a suffix for the generated Composer autoloader. When null a random one will be generated.
- name: bearer
  id: 06-config.md#bearer
  summary: A list of domain names and tokens to authenticate against them
  belongs_to: 7. Config
  description: |-
    ## bearer

    A list of domain names and tokens to authenticate against them. For example using `{"example.org": "foo"}` as the value of this option will let Composer authenticate against example.org using an `Authorization: Bearer foo` header.
- name: bin
  id: 04-schema.md#bin
  summary: A set of files that should be treated as binaries and made available into the bin-dir (from config)
  belongs_to: 5. The composer.json schema
  description: |-
    ### bin

    A set of files that should be treated as binaries and made available into the `bin-dir` (from config).

    See [Vendor Binaries](articles/vendor-binaries.md) for more details.

    Optional.
- name: bin-compat
  id: 06-config.md#bin-compat
  summary: Defaults to auto
  belongs_to: 7. Config
  description: |-
    ## bin-compat

    Defaults to `auto`. Determines the compatibility of the binaries to be installed. If it is `auto` then Composer only installs .bat proxy files when on Windows or WSL. If set to `full` then both .bat files for Windows and scripts for Unix-based operating systems will be installed for each binary. This is mainly useful if you run Composer inside a linux VM but still want the `.bat` proxies available for use in the Windows host OS. If set to `proxy` Composer will only create bash/Unix-style proxy files and no .bat files even on Windows/WSL.
- name: bin-dir
  id: 06-config.md#bin-dir
  summary: Defaults to vendor/bin
  belongs_to: 7. Config
  description: |-
    ## bin-dir

    Defaults to `vendor/bin`. If a project includes binaries, they will be symlinked into this directory.
- name: bitbucket-oauth
  id: 06-config.md#bitbucket-oauth
  summary: A list of domain names and consumers
  belongs_to: 7. Config
  description: |-
    ## bitbucket-oauth

    A list of domain names and consumers. For example using `{"bitbucket.org": {"consumer-key": "myKey", "consumer-secret": "mySecret"}}`. Read more [here](articles/authentication-for-private-packages.md#bitbucket-oauth).
- name: cache-dir
  id: 06-config.md#cache-dir
  summary: Defaults to C:\Users\<user>\AppData\Local\Composer on Windows, /Users/<user>/Library/Caches/composer on macOS, $XDG_CACHE_HOME/composer on unix systems that follow the XDG Base Directory Specifications, and $COMPOSER_HOME/cache on other unix systems
  belongs_to: 7. Config
  description: |-
    ## cache-dir

    Defaults to `C:\Users\<user>\AppData\Local\Composer` on Windows, `/Users/<user>/Library/Caches/composer` on macOS, `$XDG_CACHE_HOME/composer` on unix systems that follow the XDG Base Directory Specifications, and `$COMPOSER_HOME/cache` on other unix systems. Stores all the caches used by Composer. See also [COMPOSER_HOME](03-cli.md#composer-home).
- name: cache-files-dir
  id: 06-config.md#cache-files-dir
  summary: Defaults to $cache-dir/files
  belongs_to: 7. Config
  description: |-
    ## cache-files-dir

    Defaults to `$cache-dir/files`. Stores the zip archives of packages.
- name: cache-files-maxsize
  id: 06-config.md#cache-files-maxsize
  summary: Defaults to 300MiB
  belongs_to: 7. Config
  description: |-
    ## cache-files-maxsize

    Defaults to `300MiB`. Composer caches all dist (zip, tar, ...) packages that it downloads. When the garbage collection is periodically ran, this is the maximum size the cache will be able to use. Older (less used) files will be removed first until the cache fits.
- name: cache-files-ttl
  id: 06-config.md#cache-files-ttl
  summary: Defaults to 15552000 (6 months)
  belongs_to: 7. Config
  description: |-
    ## cache-files-ttl

    Defaults to `15552000` (6 months). Composer caches all dist (zip, tar, ...) packages that it downloads. Those are purged after six months of being unused by default. This option allows you to tweak this duration (in seconds) or disable it completely by setting it to 0.
- name: cache-read-only
  id: 06-config.md#cache-read-only
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## cache-read-only

    Defaults to `false`. Whether to use the Composer cache in read-only mode.
- name: cache-repo-dir
  id: 06-config.md#cache-repo-dir
  summary: Defaults to $cache-dir/repo
  belongs_to: 7. Config
  description: |-
    ## cache-repo-dir

    Defaults to `$cache-dir/repo`. Stores repository metadata for the `composer` type and the VCS repos of type `svn`, `fossil`, `github` and `bitbucket`.
- name: cache-vcs-dir
  id: 06-config.md#cache-vcs-dir
  summary: Defaults to $cache-dir/vcs
  belongs_to: 7. Config
  description: |-
    ## cache-vcs-dir

    Defaults to `$cache-dir/vcs`. Stores VCS clones for loading VCS repository metadata for the `git`/`hg` types and to speed up installs.
- name: cafile
  id: 06-config.md#cafile
  summary: Location of Certificate Authority file on local filesystem
  belongs_to: 7. Config
  description: |-
    ## cafile

    Location of Certificate Authority file on local filesystem. In PHP 5.6+ you should rather set this via openssl.cafile in php.ini, although PHP 5.6+ should be able to detect your system CA file automatically.
- name: capath
  id: 06-config.md#capath
  summary: If cafile is not specified or if the certificate is not found there, the directory pointed to by capath is searched for a suitable certificate
  belongs_to: 7. Config
  description: |-
    ## capath

    If cafile is not specified or if the certificate is not found there, the directory pointed to by capath is searched for a suitable certificate. capath must be a correctly hashed certificate directory.
- name: classmap-authoritative
  id: 06-config.md#classmap-authoritative
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## classmap-authoritative

    Defaults to `false`. If `true`, the Composer autoloader will only load classes from the classmap. Implies `optimize-autoloader`.
- name: Composer platform dependencies
  id: articles/composer-platform-dependencies.md
  summary: Composer makes information about the environment Composer runs in available as virtual packages
  description: "# Composer platform dependencies\n\n## What are platform dependencies\n\nComposer makes information about the environment Composer runs in available as virtual packages. This allows other packages to define dependencies ([require](../04-schema.md#require), [conflict](../04-schema.md#conflict), [provide](../04-schema.md#provide), [replace](../04-schema.md#replace)) on different aspects of the platform, like PHP, extensions or system libraries, including version constraints.\n\nWhen you require one of the platform packages no code is installed. The version numbers of platform packages are derived from the environment Composer is executed in and they cannot be updated or removed. They can however be overwritten for the purposes of dependency resolution with a [platform configuration](../06-config.md#platform).\n\n**For example:** If you are executing `composer update` with a PHP interpreter in version `7.4.42`, then Composer automatically adds a package to the pool of available packages called `php` and assigns version `7.4.42` to it.\n\nThat's how packages can add a dependency on the used PHP version:\n\n``` javascript\n{\n    \"require\": {\n        \"php\": \">=7.4\"\n    }\n}\n```\n\nComposer will check this requirement against the currently used PHP version when running the composer command.\n\n### Different types of platform packages\n\nThe following types of platform packages exist and can be depended on:\n\n1.  PHP (`php` and the subtypes: `php-64bit`, `php-ipv6`, `php-zts` `php-debug`)\n2.  PHP Extensions (`ext-*`, e.g. `ext-mbstring`)\n3.  PHP Libraries (`lib-*`, e.g. `lib-curl`)\n4.  Composer (`composer`, `composer-plugin-api`, `composer-runtime-api`)\n\nTo see the complete list of platform packages available in your environment you can run `php composer.phar show --platform` (or `show -p` for short).\n\nThe differences between the various Composer platform packages are explained further in this document.\n\n## Plugin package `composer-plugin-api`\n\nYou can modify Composer's behavior with [plugin](plugins.md) packages. Composer provides a set of versioned APIs for plugins. Because internal Composer changes may **not** change the plugin APIs, the API version may not increase every time the Composer version increases. E.g. In Composer version `2.3.12`, the `composer-plugin-api` version could still be `2.2.0`.\n\n## Runtime package `composer-runtime-api`\n\nWhen applications which were installed with Composer are run (either on CLI or through a web request), they require the `vendor/autoload.php` file, typically as one of the first lines of executed code. Invocations of the Composer autoloader are considered the application \"runtime\".\n\nStarting with version 2.0, Composer makes [additional features](../07-runtime.md) (besides registering the class autoloader) available to the application runtime environment.\n\nSimilar to `composer-plugin-api`, not every Composer release adds new runtime features, thus the version of `composer-runtimeapi` is also increased independently from Composer's version.\n\n## Composer package `composer`\n\nStarting with Composer 2.2.0, a new platform package called `composer` is available, which represents the exact Composer version that is executed. Packages depending on this platform package can therefore depend on (or conflict with) individual Composer versions to cover edge cases where neither the `composer-runtime-api` version nor the `composer-plugin-api` was changed.\n\nBecause this option was introduced with Composer 2.2.0, it is recommended to add a `composer-plugin-api` dependency on at least `>=2.2.0` to provide a more meaningful error message for users running older Composer versions.\n\nIn general, depending on `composer-plugin-api` or `composer-runtime-api` is always recommended over depending on concrete Composer versions with the `composer` platform package.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/composer-platform-dependencies.md](https://getcomposer.org/doc/articles/composer-platform-dependencies.md)"
- name: config
  id: 04-schema.md#config
  summary: A set of configuration options
  belongs_to: 5. The composer.json schema
  description: |-
    ### config ([root-only](04-schema.md#root-package))

    A set of configuration options. It is only used for projects. See [Config](06-config.md) for a description of each individual option.
- name: data-dir
  id: 06-config.md#data-dir
  summary: Defaults to C:\Users\<user>\AppData\Roaming\Composer on Windows, $XDG_DATA_HOME/composer on unix systems that follow the XDG Base Directory Specifications, and $COMPOSER_HOME on other unix systems
  belongs_to: 7. Config
  description: |-
    ## data-dir

    Defaults to `C:\Users\<user>\AppData\Roaming\Composer` on Windows, `$XDG_DATA_HOME/composer` on unix systems that follow the XDG Base Directory Specifications, and `$COMPOSER_HOME` on other unix systems. Right now it is only used for storing past composer.phar files to be able to roll back to older versions. See also [COMPOSER_HOME](03-cli.md#composer-home).
- name: description
  id: 04-schema.md#description
  summary: A short description of the package
  belongs_to: 5. The composer.json schema
  description: |-
    ### description

    A short description of the package. Usually this is one line long.

    Required for published packages (libraries).
- name: disable-tls
  id: 06-config.md#disable-tls
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## disable-tls

    Defaults to `false`. If set to true all HTTPS URLs will be tried with HTTP instead and no network level encryption is performed. Enabling this is a security risk and is NOT recommended. The better way is to enable the php_openssl extension in php.ini. Enabling this will implicitly disable the `secure-http` option.
- name: discard-changes
  id: 06-config.md#discard-changes
  summary: Defaults to false and can be any of true, false or "stash". This option allows you to set the default style of handling dirty updates when in non-interactive mode
  belongs_to: 7. Config
  description: |-
    ## discard-changes

    Defaults to `false` and can be any of `true`, `false` or `"stash"`. This option allows you to set the default style of handling dirty updates when in non-interactive mode. `true` will always discard changes in vendors, while `"stash"` will try to stash and reapply. Use this for CI servers or deploy scripts if you tend to have modified vendors.
- name: extra
  id: 04-schema.md#extra
  summary: Arbitrary extra data for consumption by scripts
  belongs_to: 5. The composer.json schema
  description: |-
    ### extra

    Arbitrary extra data for consumption by `scripts`.

    This can be virtually anything. To access it from within a script event handler, you can do:

    ``` php
    $extra = $event->getComposer()->getPackage()->getExtra();
    ```

    Optional.
- name: funding
  id: 04-schema.md#funding
  summary: A list of URLs to provide funding to the package authors for maintenance and development of new functionality
  belongs_to: 5. The composer.json schema
  description: |-
    ### funding

    A list of URLs to provide funding to the package authors for maintenance and development of new functionality.

    Each entry consists of the following

    - **type:** The type of funding, or the platform through which funding can be provided, e.g. patreon, opencollective, tidelift or github.
    - **url:** URL to a website with details, and a way to fund the package.

    An example:

    ``` javascript
    {
        "funding": [
            {
                "type": "patreon",
                "url": "https://www.patreon.com/phpdoctrine"
            },
            {
                "type": "tidelift",
                "url": "https://tidelift.com/subscription/pkg/packagist-doctrine_doctrine-bundle"
            },
            {
                "type": "other",
                "url": "https://www.doctrine-project.org/sponsorship.html"
            }
        ]
    }
    ```

    Optional.
- name: github-domains
  id: 06-config.md#github-domains
  summary: Defaults to ["github.com"]
  belongs_to: 7. Config
  description: |-
    ## github-domains

    Defaults to `["github.com"]`. A list of domains to use in github mode. This is used for GitHub Enterprise setups.
- name: github-expose-hostname
  id: 06-config.md#github-expose-hostname
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## github-expose-hostname

    Defaults to `true`. If `false`, the OAuth tokens created to access the github API will have a date instead of the machine hostname.
- name: github-oauth
  id: 06-config.md#github-oauth
  summary: A list of domain names and oauth keys
  belongs_to: 7. Config
  description: |-
    ## github-oauth

    A list of domain names and oauth keys. For example using `{"github.com": "oauthtoken"}` as the value of this option will use `oauthtoken` to access private repositories on github and to circumvent the low IP-based rate limiting of their API. Composer may prompt for credentials when needed, but these can also be manually set. Read more on how to get an OAuth token for GitHub and cli syntax [here](articles/authentication-for-private-packages.md#github-oauth).
- name: github-protocols
  id: 06-config.md#github-protocols
  summary: Defaults to ["https", "ssh", "git"]
  belongs_to: 7. Config
  description: |-
    ## github-protocols

    Defaults to `["https", "ssh", "git"]`. A list of protocols to use when cloning from github.com, in priority order. By default `git` is present but only if [secure-http](#secure-http) is disabled, as the git protocol is not encrypted. If you want your origin remote push URLs to be using https and not ssh (`git@github.com:...`), then set the protocol list to be only `["https"]` and Composer will stop overwriting the push URL to an ssh URL.
- name: gitlab-domains
  id: 06-config.md#gitlab-domains
  summary: Defaults to ["gitlab.com"]
  belongs_to: 7. Config
  description: |-
    ## gitlab-domains

    Defaults to `["gitlab.com"]`. A list of domains of GitLab servers. This is used if you use the `gitlab` repository type.
- name: gitlab-oauth
  id: 06-config.md#gitlab-oauth
  summary: A list of domain names and oauth keys
  belongs_to: 7. Config
  description: |-
    ## gitlab-oauth

    A list of domain names and oauth keys. For example using `{"gitlab.com": "oauthtoken"}` as the value of this option will use `oauthtoken` to access private repositories on gitlab. Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the [`gitlab-domains`](06-config.md#gitlab-domains) option. Further info can also be found [here](articles/authentication-for-private-packages.md#gitlab-oauth)
- name: gitlab-protocol
  id: 06-config.md#gitlab-protocol
  summary: A protocol to force use of when creating a repository URL for the source value of the package metadata
  belongs_to: 7. Config
  description: |-
    ## gitlab-protocol

    A protocol to force use of when creating a repository URL for the `source` value of the package metadata. One of `git` or `http`. (`https` is treated as a synonym for `http`.) Helpful when working with projects referencing private repositories which will later be cloned in GitLab CI jobs with a [GitLab CI_JOB_TOKEN](https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#predefined-variables-reference) using HTTP basic auth. By default, Composer will generate a git-over-SSH URL for private repositories and HTTP(S) only for public.
- name: gitlab-token
  id: 06-config.md#gitlab-token
  summary: A list of domain names and private tokens
  belongs_to: 7. Config
  description: |-
    ## gitlab-token

    A list of domain names and private tokens. Private token can be either simple string, or array with username and token. For example using `{"gitlab.com": "privatetoken"}` as the value of this option will use `privatetoken` to access private repositories on gitlab. Using `{"gitlab.com": {"username": "gitlabuser", "token": "privatetoken"}}` will use both username and token for gitlab deploy token functionality (<https://docs.gitlab.com/ee/user/project/deploy_tokens/>) Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the [`gitlab-domains`](06-config.md#gitlab-domains) option. The token must have `api` or `read_api` scope. Further info can also be found [here](articles/authentication-for-private-packages.md#gitlab-token)
- name: Handling private packages
  id: articles/handling-private-packages.md
  summary: Private Packagist is a commercial package hosting product offering professional support and web based management of private and public packages, and granular access permissions
  description: "# Handling private packages\n\n# Private Packagist\n\n[Private Packagist](https://packagist.com) is a commercial package hosting product offering professional support and web based management of private and public packages, and granular access permissions. Private Packagist provides mirroring for packages' zip files which makes installs faster and independent from third party systems - e.g. you can deploy even if GitHub is down because your zip files are mirrored.\n\nPrivate Packagist is available as a hosted SaaS solution or as an on-premise self-hosted package, providing an interactive set up experience.\n\nSome of Private Packagist's revenue is used to pay for Composer and Packagist.org development and hosting so using it is a good way to support the maintenance of these open source projects financially. You can find more information about how to set up your own package archive on [Packagist.com](https://packagist.com).\n\n# Satis\n\nSatis on the other hand is open source but only a static `composer` repository generator. It is a bit like an ultra-lightweight, static file-based version of packagist and can be used to host the metadata of your company's private packages, or your own. You can get it from [GitHub](https://github.com/composer/satis) or install via CLI:\n\n    php composer.phar create-project composer/satis --stability=dev --keep-vcs\n\n## Setup\n\nFor example let's assume you have a few packages you want to reuse across your company but don't really want to open-source. You would first define a Satis configuration: a json file that lists your curated [repositories](../05-repositories.md).\n\nThe default file name is satis.json but it could be anything you like.\n\nHere is an example configuration, you see that it holds a few VCS repositories, but those could be any types of [repositories](../05-repositories.md). Then it uses `\"require-all\": true` which selects all versions of all packages in the repositories you defined.\n\nThe default file Satis looks for is `satis.json` in the root of the repository.\n\n``` javascript\n{\n    \"name\": \"my/repository\",\n    \"homepage\": \"http://packages.example.org\",\n    \"repositories\": [\n        { \"type\": \"vcs\", \"url\": \"https://github.com/mycompany/privaterepo\" },\n        { \"type\": \"vcs\", \"url\": \"http://svn.example.org/private/repo\" },\n        { \"type\": \"vcs\", \"url\": \"https://github.com/mycompany/privaterepo2\" }\n    ],\n    \"require-all\": true\n}\n```\n\nIf you want to cherry pick which packages you want, you can list all the packages you want to have in your satis repository inside the classic composer `require` key, using a `\"*\"` constraint to make sure all versions are selected, or another constraint if you want really specific versions.\n\n``` javascript\n{\n    \"repositories\": [\n        { \"type\": \"vcs\", \"url\": \"https://github.com/mycompany/privaterepo\" },\n        { \"type\": \"vcs\", \"url\": \"http://svn.example.org/private/repo\" },\n        { \"type\": \"vcs\", \"url\": \"https://github.com/mycompany/privaterepo2\" }\n    ],\n    \"require\": {\n        \"company/package\": \"*\",\n        \"company/package2\": \"*\",\n        \"company/package3\": \"2.0.0\"\n    }\n}\n```\n\nOnce you've done this, you run:\n\n    php bin/satis build <configuration file> <build dir>\n\nWhen you ironed out that process, what you would typically do is run this command as a cron job on a server. It would then update all your package info much like Packagist does.\n\nNote that if your private packages are hosted on GitHub, your server should have an ssh key that gives it access to those packages, and then you should add the `--no-interaction` (or `-n`) flag to the command to make sure it falls back to ssh key authentication instead of prompting for a password. This is also a good trick for continuous integration servers.\n\nSet up a virtual-host that points to that `web/` directory, let's say it is `packages.example.org`. Alternatively, with PHP \\>= 5.4.0, you can use the built-in CLI server `php -S localhost:port -t satis-output-dir/` for a temporary solution.\n\n### Partial Updates\n\nYou can tell Satis to selectively update only particular packages or process only a repository with a given URL. This cuts down the time it takes to rebuild the `package.json` file and is helpful if you use (custom) webhooks to trigger rebuilds whenever code is pushed into one of your repositories.\n\nTo rebuild only particular packages, pass the package names on the command line like so:\n\n    php bin/satis build satis.json web/ this/package that/other-package\n\nNote that this will still need to pull and scan all of your VCS repositories because any VCS repository might contain (on any branch) one of the selected packages.\n\nIf you want to scan only the selected package and not all VCS repositories you need to declare a *name* for all your package (this only work on VCS repositories type) :\n\n``` javascript\n{\n    \"repositories\": [\n        { \"name\": \"company/privaterepo\", \"type\": \"vcs\", \"url\": \"https://github.com/mycompany/privaterepo\" },\n        { \"name\": \"private/repo\", \"type\": \"vcs\", \"url\": \"http://svn.example.org/private/repo\" },\n        { \"name\": \"mycompany/privaterepo2\", \"type\": \"vcs\", \"url\": \"https://github.com/mycompany/privaterepo2\" }\n    ]\n}\n```\n\nIf you want to scan only a single repository and update all packages found in it, pass the VCS repository URL as an optional argument:\n\n    php bin/satis build --repository-url https://only.my/repo.git satis.json web/\n\n## Usage\n\nIn your projects all you need to add now is your own Composer repository using the `packages.example.org` as URL, then you can require your private packages and everything should work smoothly. You don't need to copy all your repositories in every project anymore. Only that one unique repository that will update itself.\n\n``` javascript\n{\n    \"repositories\": [ { \"type\": \"composer\", \"url\": \"http://packages.example.org/\" } ],\n    \"require\": {\n        \"company/package\": \"1.2.0\",\n        \"company/package2\": \"1.5.2\",\n        \"company/package3\": \"dev-master\"\n    }\n}\n```\n\n### Security\n\nTo secure your private repository you can host it over SSH or SSL using a client certificate. In your project you can use the `options` parameter to specify the connection options for the server.\n\nExample using a custom repository using SSH (requires the SSH2 PECL extension):\n\n``` javascript\n{\n    \"repositories\": [{\n        \"type\": \"composer\",\n        \"url\": \"ssh2.sftp://example.org\",\n        \"options\": {\n            \"ssh2\": {\n                \"username\": \"composer\",\n                \"pubkey_file\": \"/home/composer/.ssh/id_rsa.pub\",\n                \"privkey_file\": \"/home/composer/.ssh/id_rsa\"\n            }\n        }\n    }]\n}\n```\n\n> **Tip:** See [ssh2 context options](https://secure.php.net/manual/en/wrappers.ssh2.php#refsect1-wrappers.ssh2-options) for more information.\n\nExample using SSL/TLS (HTTPS) using a client certificate:\n\n``` javascript\n{\n    \"repositories\": [{\n         \"type\": \"composer\",\n         \"url\": \"https://example.org\",\n         \"options\": {\n             \"ssl\": {\n                 \"local_cert\": \"/home/composer/.ssl/composer.pem\"\n             }\n         }\n    }]\n}\n```\n\n> **Tip:** See [ssl context options](https://secure.php.net/manual/en/context.ssl.php) for more information.\n\nExample using a custom HTTP Header field for token authentication:\n\n``` javascript\n{\n    \"repositories\": [{\n        \"type\": \"composer\",\n        \"url\": \"https://example.org\",\n        \"options\":  {\n            \"http\": {\n                \"header\": [\n                    \"API-TOKEN: YOUR-API-TOKEN\"\n                ]\n            }\n        }\n    }]\n}\n```\n\n### Authentication\n\nAuthentication can be handled in [several different ways](authentication-for-private-packages.md).\n\n### Downloads\n\nWhen GitHub, GitLab or BitBucket repositories are mirrored on your local satis, the build process will include the location of the downloads these platforms make available. This means that the repository and your setup depend on the availability of these services.\n\nAt the same time, this implies that all code which is hosted somewhere else (on another service or for example in Subversion) will not have downloads available and thus installations usually take a lot longer.\n\nTo enable your satis installation to create downloads for all (Git, Mercurial and Subversion) your packages, add the following to your `satis.json`:\n\n``` javascript\n{\n    \"archive\": {\n        \"directory\": \"dist\",\n        \"format\": \"tar\",\n        \"prefix-url\": \"https://amazing.cdn.example.org\",\n        \"skip-dev\": true\n    }\n}\n```\n\n#### Options explained\n\n- `directory`: required, the location of the dist files (inside the `output-dir`)\n- `format`: optional, `zip` (default) or `tar`\n- `prefix-url`: optional, location of the downloads, homepage (from `satis.json`) followed by `directory` by default\n- `skip-dev`: optional, `false` by default, when enabled (`true`) satis will not create downloads for branches\n- `absolute-directory`: optional, a *local* directory where the dist files are dumped instead of `output-dir`/`directory`\n- `whitelist`: optional, if set as a list of package names, satis will only dump the dist files of these packages\n- `blacklist`: optional, if set as a list of package names, satis will not dump the dist files of these packages\n- `checksum`: optional, `true` by default, when disabled (`false`) satis will not provide the sha1 checksum for the dist files\n\nOnce enabled, all downloads (include those from GitHub and BitBucket) will be replaced with a *local* version.\n\n#### prefix-url\n\nPrefixing the URL with another host is especially helpful if the downloads end up in a private Amazon S3 bucket or on a CDN host. A CDN would drastically improve download times and therefore package installation.\n\nExample: A `prefix-url` of `https://my-bucket.s3.amazonaws.com` (and `directory` set to `dist`) creates download URLs which look like the following: `https://my-bucket.s3.amazonaws.com/dist/vendor-package-version-ref.zip`.\n\n### Web outputs\n\n- `output-html`: optional, `true` by default, when disabled (`false`) satis will not generate the `output-dir`/index.html page.\n- `twig-template`: optional, a path to a personalized [Twig](https://twig.sensiolabs.org/) template for the `output-dir`/index.html page.\n\n### Abandoned packages\n\nTo enable your satis installation to indicate that some packages are abandoned, add the following to your `satis.json`:\n\n``` javascript\n{\n    \"abandoned\": {\n        \"company/package\": true,\n        \"company/package2\": \"company/newpackage\"\n    }\n}\n```\n\nThe `true` value indicates that the package is truly abandoned while the `\"company/newpackage\"` value specifies that the package is replaced by the `company/newpackage` package.\n\nNote that all packages set as abandoned in their own `composer.json` file will be marked abandoned as well.\n\n### Resolving dependencies\n\nIt is possible to make satis automatically resolve and add all dependencies for your projects. This can be used with the Downloads functionality to have a complete local mirror of packages. Add the following to your `satis.json`:\n\n``` javascript\n{\n    \"require-dependencies\": true,\n    \"require-dev-dependencies\": true\n}\n```\n\nWhen searching for packages, satis will attempt to resolve all the required packages from the listed repositories. Therefore, if you are requiring a package from Packagist, you will need to define it in your `satis.json`.\n\nDev dependencies are packaged only if the `require-dev-dependencies` parameter is set to true.\n\n### Other options\n\n- `providers`: optional, `false` by default, when enabled (`true`) each package will be dumped into a separate include file which will be only loaded by Composer when the package is really required. Speeds up composer handling for repositories with huge number of packages like f.i. packagist.\n- `output-dir`: optional, defines where to output the repository files if not provided as an argument when calling the `build` command.\n- `config`: optional, lets you define all config options from composer, except `archive-format` and `archive-dir` as the configuration is done through [archive](#downloads) instead. See docs on [config schema](../04-schema.md#config) for more details.\n- `notify-batch`: optional, specify a URL that will be called every time a user installs a package. See [notify-batch](../05-repositories.md#notify-batch).\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/handling-private-packages.md](https://getcomposer.org/doc/articles/handling-private-packages.md)"
- name: homepage
  id: 04-schema.md#homepage
  summary: A URL to the website of the project
  belongs_to: 5. The composer.json schema
  description: |-
    ### homepage

    A URL to the website of the project.

    Optional.
- name: htaccess-protect
  id: 06-config.md#htaccess-protect
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## htaccess-protect

    Defaults to `true`. If set to `false`, Composer will not create `.htaccess` files in the Composer home, cache, and data directories.
- name: http-basic
  id: 06-config.md#http-basic
  summary: A list of domain names and username/passwords to authenticate against them
  belongs_to: 7. Config
  description: |-
    ## http-basic

    A list of domain names and username/passwords to authenticate against them. For example using `{"example.org": {"username": "alice", "password": "foo"}}` as the value of this option will let Composer authenticate against example.org. More info can be found [here](articles/authentication-for-private-packages.md#http-basic).
- name: include-path
  id: 04-schema.md#include-path
  summary: 'DEPRECATED: This is only present to support legacy projects, and all new code should preferably use autoloading'
  belongs_to: 5. The composer.json schema
  description: |-
    ### include-path

    > **DEPRECATED**: This is only present to support legacy projects, and all new code should preferably use autoloading. As such it is a deprecated practice, but the feature itself will not likely disappear from Composer.

    A list of paths which should get appended to PHP's `include_path`.

    Example:

    ``` javascript
    {
        "include-path": ["lib/"]
    }
    ```

    Optional.
- name: keywords
  id: 04-schema.md#keywords
  summary: An array of keywords that the package is related to
  belongs_to: 5. The composer.json schema
  description: |-
    ### keywords

    An array of keywords that the package is related to. These can be used for searching and filtering.

    Examples:

    - logging
    - events
    - database
    - redis
    - templating

    > **Note**: Some special keywords trigger `composer require` without the `--dev` option to prompt users if they would like to add these packages to `require-dev` instead of `require`. These are: `dev`, `testing`, `static analysis`.

    Optional.
- name: license
  id: 04-schema.md#license
  summary: The license of the package
  belongs_to: 5. The composer.json schema
  description: |-
    ### license

    The license of the package. This can be either a string or an array of strings.

    The recommended notation for the most common licenses is (alphabetical):

    - Apache-2.0
    - BSD-2-Clause
    - BSD-3-Clause
    - BSD-4-Clause
    - GPL-2.0-only / GPL-2.0-or-later
    - GPL-3.0-only / GPL-3.0-or-later
    - LGPL-2.1-only / LGPL-2.1-or-later
    - LGPL-3.0-only / LGPL-3.0-or-later
    - MIT

    Optional, but it is highly recommended to supply this. More identifiers are listed at the [SPDX Open Source License Registry](https://spdx.org/licenses/).

    > **Note:** For closed-source software, you may use `"proprietary"` as the license identifier.

    An Example:

    ``` javascript
    {
        "license": "MIT"
    }
    ```

    For a package, when there is a choice between licenses ("disjunctive license"), multiple can be specified as an array.

    An Example for disjunctive licenses:

    ``` javascript
    {
        "license": [
            "LGPL-2.1-only",
            "GPL-3.0-or-later"
        ]
    }
    ```

    Alternatively they can be separated with "or" and enclosed in parentheses;

    ``` javascript
    {
        "license": "(LGPL-2.1-only or GPL-3.0-or-later)"
    }
    ```

    Similarly, when multiple licenses need to be applied ("conjunctive license"), they should be separated with "and" and enclosed in parentheses.
- name: lock
  id: 06-config.md#lock
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## lock

    Defaults to `true`. If set to `false`, Composer will not create a `composer.lock` file and will ignore it if one is present.
- name: minimum-stability
  id: 04-schema.md#minimum-stability
  summary: This defines the default behavior for filtering packages by stability
  belongs_to: 5. The composer.json schema
  description: |-
    ### minimum-stability ([root-only](04-schema.md#root-package))

    This defines the default behavior for filtering packages by stability. This defaults to `stable`, so if you rely on a `dev` package, you should specify it in your file to avoid surprises.

    All versions of each package are checked for stability, and those that are less stable than the `minimum-stability` setting will be ignored when resolving your project dependencies. (Note that you can also specify stability requirements on a per-package basis using stability flags in the version constraints that you specify in a `require` block (see [package links](#package-links) for more details).

    Available options (in order of stability) are `dev`, `alpha`, `beta`, `RC`, and `stable`.
- name: name
  id: 04-schema.md#name
  summary: The name of the package
  belongs_to: 5. The composer.json schema
  description: |-
    ### name

    The name of the package. It consists of vendor name and project name, separated by `/`. Examples:

    - monolog/monolog
    - igorw/event-source

    The name must be lowercase and consist of words separated by `-`, `.` or `_`. The complete name should match `^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9](([_.]?|-{0,2})[a-z0-9]+)*$`.

    The `name` property is required for published packages (libraries).

    > **Note:** Before Composer version 2.0, a name could contain any character, including white spaces.
- name: non-feature-branches
  id: 04-schema.md#non-feature-branches
  summary: A list of regex patterns of branch names that are non-numeric (e.g
  belongs_to: 5. The composer.json schema
  description: "### non-feature-branches\n\nA list of regex patterns of branch names that are non-numeric (e.g. \"latest\" or something), that will NOT be handled as feature branches. This is an array of strings.\n\nIf you have non-numeric branch names, for example like \"latest\", \"current\", \"latest-stable\" or something, that do not look like a version number, then Composer handles such branches as feature branches. This means it searches for parent branches, that look like a version or ends at special branches (like master), and the root package version number becomes the version of the parent branch or at least master or something.\n\nTo handle non-numeric named branches as versions instead of searching for a parent branch with a valid version or special branch name like master, you can set patterns for branch names that should be handled as dev version branches.\n\nThis is really helpful when you have dependencies using \"self.version\", so that not dev-master, but the same branch is installed (in the example: latest-testing).\n\nAn example:\n\nIf you have a testing branch, that is heavily maintained during a testing phase and is deployed to your staging environment, normally `composer show -s` will give you `versions : * dev-master`.\n\nIf you configure `latest-.*` as a pattern for non-feature-branches like this:\n\n``` javascript\n{\n    \"non-feature-branches\": [\"latest-.*\"]\n}\n```\n\nThen `composer show -s` will give you `versions : * dev-latest-testing`.\n\nOptional.\n\n← [Command-line interface](03-cli.md) \\| [Repositories](05-repositories.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)"
- name: notify-on-install
  id: 06-config.md#notify-on-install
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## notify-on-install

    Defaults to `true`. Composer allows repositories to define a notification URL, so that they get notified whenever a package from that repository is installed. This option allows you to disable that behavior.
- name: optimize-autoloader
  id: 06-config.md#optimize-autoloader
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## optimize-autoloader

    Defaults to `false`. If `true`, always optimize when dumping the autoloader.
- name: Package links
  id: 04-schema.md#package-links
  summary: All of the following take an object which maps package names to versions of the package via version constraints
  belongs_to: 5. The composer.json schema
  description: |-
    ### Package links

    All of the following take an object which maps package names to versions of the package via version constraints. Read more about versions [here](articles/versions.md).

    Example:

    ``` javascript
    {
        "require": {
            "monolog/monolog": "1.0.*"
        }
    }
    ```

    All links are optional fields.

    `require` and `require-dev` additionally support *stability flags* ([root-only](04-schema.md#root-package)). They take the form "*constraint*@*stability flag*". These allow you to further restrict or expand the stability of a package beyond the scope of the [minimum-stability](#minimum-stability) setting. You can apply them to a constraint, or apply them to an empty *constraint* if you want to allow unstable packages of a dependency for example.

    Example:

    ``` javascript
    {
        "require": {
            "monolog/monolog": "1.0.*@beta",
            "acme/foo": "@dev"
        }
    }
    ```

    If one of your dependencies has a dependency on an unstable package you need to explicitly require it as well, along with its sufficient stability flag.

    Example:

    Assuming `doctrine/doctrine-fixtures-bundle` requires `"doctrine/data-fixtures": "dev-master"` then inside the root composer.json you need to add the second line below to allow dev releases for the `doctrine/data-fixtures` package :

    ``` javascript
    {
        "require": {
            "doctrine/doctrine-fixtures-bundle": "dev-master",
            "doctrine/data-fixtures": "@dev"
        }
    }
    ```

    `require` and `require-dev` additionally support explicit references (i.e. commit) for dev versions to make sure they are locked to a given state, even when you run update. These only work if you explicitly require a dev version and append the reference with `#<ref>`. This is also a [root-only](04-schema.md#root-package) feature and will be ignored in dependencies.

    Example:

    ``` javascript
    {
        "require": {
            "monolog/monolog": "dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7",
            "acme/foo": "1.0.x-dev#abc123"
        }
    }
    ```

    > **Note:** This feature has severe technical limitations, as the composer.json metadata will still be read from the branch name you specify before the hash. You should therefore only use this as a temporary solution during development to remediate transient issues, until you can switch to tagged releases. The Composer team does not actively support this feature and will not accept bug reports related to it.

    It is also possible to inline-alias a package constraint so that it matches a constraint that it otherwise would not. For more information [see the aliases article](articles/aliases.md).

    `require` and `require-dev` also support references to specific PHP versions and PHP extensions your project needs to run successfully.

    Example:

    ``` javascript
    {
        "require": {
            "php": ">=7.4",
            "ext-mbstring": "*"
        }
    }
    ```

    > **Note:** It is important to list PHP extensions your project requires. Not all PHP installations are created equal: some may miss extensions you may consider as standard (such as `ext-mysqli` which is not installed by default in Fedora/CentOS minimal installation systems). Failure to list required PHP extensions may lead to a bad user experience: Composer will install your package without any errors but it will then fail at run-time. The `composer show --platform` command lists all PHP extensions available on your system. You may use it to help you compile the list of extensions you use and require. Alternatively you may use third party tools to analyze your project for the list of extensions used.

    #### require

    Map of packages required by this package. The package will not be installed unless those requirements can be met.

    #### require-dev ([root-only](04-schema.md#root-package))

    Map of packages required for developing this package, or running tests, etc. The dev requirements of the root package are installed by default. Both `install` or `update` support the `--no-dev` option that prevents dev dependencies from being installed.

    #### conflict

    Map of packages that conflict with this version of this package. They will not be allowed to be installed together with your package.

    Note that when specifying ranges like `<1.0 >=1.1` in a `conflict` link, this will state a conflict with all versions that are less than 1.0 *and* equal or newer than 1.1 at the same time, which is probably not what you want. You probably want to go for `<1.0 || >=1.1` in this case.

    #### replace

    Map of packages that are replaced by this package. This allows you to fork a package, publish it under a different name with its own version numbers, while packages requiring the original package continue to work with your fork because it replaces the original package.

    This is also useful for packages that contain sub-packages, for example the main symfony/symfony package contains all the Symfony Components which are also available as individual packages. If you require the main package it will automatically fulfill any requirement of one of the individual components, since it replaces them.

    Caution is advised when using replace for the sub-package purpose explained above. You should then typically only replace using `self.version` as a version constraint, to make sure the main package only replaces the sub-packages of that exact version, and not any other version, which would be incorrect.

    #### provide

    Map of packages that are provided by this package. This is mostly useful for implementations of common interfaces. A package could depend on some virtual package e.g. `psr/logger-implementation`, any library that implements this logger interface would list it in `provide`. Implementors can then be [found on Packagist.org](https://packagist.org/providers/psr/log-implementation).

    Using `provide` with the name of an actual package rather than a virtual one implies that the code of that package is also shipped, in which case `replace` is generally a better choice. A common convention for packages providing an interface and relying on other packages to provide an implementation (for instance the PSR interfaces) is to use a `-implementation` suffix for the name of the virtual package corresponding to the interface package.

    #### suggest

    Suggested packages that can enhance or work well with this package. These are informational and are displayed after the package is installed, to give your users a hint that they could add more packages, even though they are not strictly required.

    The format is like package links above, except that the values are free text and not version constraints.

    Example:

    ``` javascript
    {
        "suggest": {
            "monolog/monolog": "Allows more advanced logging of the application flow",
            "ext-xml": "Needed to support XML format in class Foo"
        }
    }
    ```
- name: platform
  id: 06-config.md#platform
  summary: Lets you fake platform packages (PHP and extensions) so that you can emulate a production env or define your target platform in the config
  belongs_to: 7. Config
  description: |-
    ## platform

    Lets you fake platform packages (PHP and extensions) so that you can emulate a production env or define your target platform in the config. Example: `{"php": "7.0.3", "ext-something": "4.0.3"}`.

    This will make sure that no package requiring more than PHP 7.0.3 can be installed regardless of the actual PHP version you run locally. However it also means the dependencies are not checked correctly anymore, if you run PHP 5.6 it will install fine as it assumes 7.0.3, but then it will fail at runtime. This also means if `{"php":"7.4"}` is specified; no packages will be used that define `7.4.1` as minimum.

    Therefore if you use this it is recommended, and safer, to also run the [`check-platform-reqs`](03-cli.md#check-platform-reqs) command as part of your deployment strategy.

    If a dependency requires some extension that you do not have installed locally you may ignore it instead by passing `--ignore-platform-req=ext-foo` to `update`, `install` or `require`. In the long run though you should install required extensions as if you ignore one now and a new package you add a month later also requires it, you may introduce issues in production unknowingly.

    If you have an extension installed locally but *not* on production, you may want to artificially hide it from Composer using `{"ext-foo": false}`.
- name: platform-check
  id: 06-config.md#platform-check
  summary: Defaults to php-only which only checks the PHP version
  belongs_to: 7. Config
  description: |-
    ## platform-check

    Defaults to `php-only` which only checks the PHP version. Set to `true` to also check the presence of extension. If set to `false`, Composer will not create and require a `platform_check.php` file as part of the autoloader bootstrap.
- name: prefer-stable
  id: 04-schema.md#prefer-stable
  summary: When this is enabled, Composer will prefer more stable packages over unstable ones when finding compatible stable packages is possible
  belongs_to: 5. The composer.json schema
  description: |-
    ### prefer-stable ([root-only](04-schema.md#root-package))

    When this is enabled, Composer will prefer more stable packages over unstable ones when finding compatible stable packages is possible. If you require a dev version or only alphas are available for a package, those will still be selected granted that the minimum-stability allows for it.

    Use `"prefer-stable": true` to enable.
- name: preferred-install
  id: 06-config.md#preferred-install
  summary: Defaults to dist and can be any of source, dist or auto
  belongs_to: 7. Config
  description: |-
    ## preferred-install

    Defaults to `dist` and can be any of `source`, `dist` or `auto`. This option allows you to set the install method Composer will prefer to use. Can optionally be an object with package name patterns for keys for more granular install preferences.

    ``` javascript
    {
        "config": {
            "preferred-install": {
                "my-organization/stable-package": "dist",
                "my-organization/*": "source",
                "partner-organization/*": "auto",
                "*": "dist"
            }
        }
    }
    ```

    - `source` means Composer will install packages from their `source` if there is one. This is typically a git clone or equivalent checkout of the version control system the package uses. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly.
    - `auto` is the legacy behavior where Composer uses `source` automatically for dev versions, and `dist` otherwise.
    - `dist` (the default as of Composer 2.1) means Composer installs from `dist`, where possible. This is typically a zip file download, which is faster than cloning the entire repository.

    > **Note:** Order matters. More specific patterns should be earlier than more relaxed patterns. When mixing the string notation with the hash configuration in global and package configurations the string notation is translated to a `*` package pattern.
- name: prepend-autoloader
  id: 06-config.md#prepend-autoloader
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## prepend-autoloader

    Defaults to `true`. If `false`, the Composer autoloader will not be prepended to existing autoloaders. This is sometimes required to fix interoperability issues with other autoloaders.
- name: process-timeout
  id: 06-config.md#process-timeout
  summary: The timeout in seconds for process executions, defaults to 300 (5mins)
  belongs_to: 7. Config
  description: |-
    ## process-timeout

    The timeout in seconds for process executions, defaults to 300 (5mins). The duration processes like git clones can run before Composer assumes they died out. You may need to make this higher if you have a slow connection or huge vendors.

    To disable the process timeout on a custom command under `scripts`, a static helper is available:

    ``` javascript
    {
        "scripts": {
            "test": [
                "Composer\\Config::disableProcessTimeout",
                "phpunit"
            ]
        }
    }
    ```
- name: readme
  id: 04-schema.md#readme
  summary: A relative path to the readme document
  belongs_to: 5. The composer.json schema
  description: |-
    ### readme

    A relative path to the readme document.

    Optional.
- name: repositories
  id: 04-schema.md#repositories
  summary: Custom package repositories to use
  belongs_to: 5. The composer.json schema
  description: |-
    ### repositories ([root-only](04-schema.md#root-package))

    Custom package repositories to use.

    By default Composer only uses the packagist repository. By specifying repositories you can get packages from elsewhere.

    Repositories are not resolved recursively. You can only add them to your main `composer.json`. Repository declarations of dependencies' `composer.json`s are ignored.

    The following repository types are supported:

    - **composer:** A Composer repository is a `packages.json` file served via the network (HTTP, FTP, SSH), that contains a list of `composer.json` objects with additional `dist` and/or `source` information. The `packages.json` file is loaded using a PHP stream. You can set extra options on that stream using the `options` parameter.
    - **vcs:** The version control system repository can fetch packages from git, svn, fossil and hg repositories.
    - **package:** If you depend on a project that does not have any support for Composer whatsoever you can define the package inline using a `package` repository. You basically inline the `composer.json` object.

    For more information on any of these, see [Repositories](05-repositories.md).

    Example:

    ``` javascript
    {
        "repositories": [
            {
                "type": "composer",
                "url": "http://packages.example.com"
            },
            {
                "type": "composer",
                "url": "https://packages.example.com",
                "options": {
                    "ssl": {
                        "verify_peer": "true"
                    }
                }
            },
            {
                "type": "vcs",
                "url": "https://github.com/Seldaek/monolog"
            },
            {
                "type": "package",
                "package": {
                    "name": "smarty/smarty",
                    "version": "3.1.7",
                    "dist": {
                        "url": "https://www.smarty.net/files/Smarty-3.1.7.zip",
                        "type": "zip"
                    },
                    "source": {
                        "url": "https://smarty-php.googlecode.com/svn/",
                        "type": "svn",
                        "reference": "tags/Smarty_3_1_7/distribution/"
                    }
                }
            }
        ]
    }
    ```

    > **Note:** Order is significant here. When looking for a package, Composer will look from the first to the last repository, and pick the first match. By default Packagist is added last which means that custom repositories can override packages from it.

    Using JSON object notation is also possible. However, JSON key/value pairs are to be considered unordered so consistent behaviour cannot be guaranteed.

    ``` javascript
    {
        "repositories": {
            "foo": {
                "type": "composer",
                "url": "http://packages.foo.com"
            }
        }
    }
    ```
- name: Repository priorities
  id: articles/repository-priorities.md
  summary: When Composer resolves dependencies, it will look up a given package in the topmost repository
  description: "# Repository priorities\n\n## Canonical repositories\n\nWhen Composer resolves dependencies, it will look up a given package in the topmost repository. If that repository does not contain the package, it goes on to the next one, until one repository contains it and the process ends.\n\nCanonical repositories are better for a few reasons:\n\n- Performance wise, it is more efficient to stop looking for a package once it has been found somewhere. It also avoids loading duplicate packages in case the same package is present in several of your repositories.\n- Security wise, it is safer to treat them canonically as it means that packages you expect to come from your most important repositories will never be loaded from another repository instead. Let's say you have a private repository which is not canonical, and you require your private package `foo/bar ^2.0` for example. Now if someone publishes `foo/bar 2.999` to packagist.org, suddenly Composer will pick that package as it has a higher version than your latest release (say 2.4.3), and you end up installing something you may not have meant to. However, if the private repository is canonical, that 2.999 version from packagist.org will not be considered at all.\n\nThere are however a few cases where you may want to specifically load some packages from a given repository, but not all. Or you may want a given repository to not be canonical, and to be only preferred if it has higher package versions than the repositories defined below.\n\n## Default behavior\n\nBy default in Composer 2.x all repositories are canonical. Composer 1.x treated all repositories as non-canonical.\n\nAnother default is that the packagist.org repository is always added implicitly as the last repository, unless you [disable it](../05-repositories.md#disabling-packagist-org).\n\n## Making repositories non-canonical\n\nYou can add the canonical option to any repository to disable this default behavior and make sure Composer keeps looking in other repositories, even if that repository contains a given package.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"canonical\": false\n        }\n    ]\n}\n```\n\n## Filtering packages\n\nYou can also filter packages which a repository will be able to load, either by selecting which ones you want, or by excluding those you do not want.\n\nFor example here we want to pick only the package `foo/bar` and all the packages from `some-vendor/` from this Composer repository.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"only\": [\"foo/bar\", \"some-vendor/*\"]\n        }\n    ]\n}\n```\n\nAnd in this other example we exclude `toy/package` from a repository, which we may not want to load in this project.\n\n``` javascript\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"exclude\": [\"toy/package\"]\n        }\n    ]\n}\n```\n\nBoth `only` and `exclude` should be arrays of package names, which can also contain wildcards (`*`), which will match any character.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/repository-priorities.md](https://getcomposer.org/doc/articles/repository-priorities.md)"
- name: Resolving merge conflicts
  id: articles/resolving-merge-conflicts.md
  summary: When working as a team on the same Composer project, you will eventually run into a scenario where multiple people added, updated or removed something in the composer.json and composer.lock files in multiple branches
  description: "# Resolving merge conflicts\n\nWhen working as a team on the same Composer project, you will eventually run into a scenario where multiple people added, updated or removed something in the `composer.json` and `composer.lock` files in multiple branches. When those branches are eventually merged together, you will get merge conflicts. Resolving these merge conflicts is not as straight forward as on other files, especially not regarding the `composer.lock` file.\n\n> **Note:** It might not immediately be obvious why text based merging is not possible for lock files, so let's imagine the following example where we want to merge two branches;\n>\n> - Branch 1 has added package A which requires package B. Package B is locked at version `1.0.0`.\n> - Branch 2 has added package C which conflicts with all versions below `1.2.0` of package B.\n>\n> A text based merge would result in package A version `1.0.0`, package B version `1.0.0` and package C version `1.0.0`. This is an invalid result, as the conflict of package C was not considered and would require an upgrade of package B.\n\n## 1. Reapplying changes\n\nThe safest method to merge Composer files is to accept the version from one branch and apply the changes from the other branch.\n\nAn example where we have two branches:\n\n1.  Package 'A' has been added\n2.  Package 'B' has been removed and package 'C' is added.\n\nTo resolve the conflict when we merge these two branches:\n\n- We choose the branch that has the most changes, and accept the `composer.json` and `composer.lock` files from that branch. In this case, we choose the Composer files from branch 2.\n- We reapply the changes from the other branch (branch 1). In this case we have to run `composer require package/A` again.\n\n## 2. Validating your merged files\n\nBefore committing, make sure the resulting `composer.json` and `composer.lock` files are valid. To do this, run the following commands:\n\n    php composer.phar validate\n    php composer.phar install [--dry-run]\n\n## Automating merge conflict resolving with git\n\nSome improvement *could* be made to git's conflict resolving by using a custom git merge driver.\n\nAn example of this can be found at [balbuf's composer git merge driver](https://github.com/balbuf/composer-git-merge-driver).\n\n## Important considerations\n\nKeep in mind that whenever merge conflicts occur on the lock file, the information, about the exact version new packages were locked on for one of the branches, is lost. When package A in branch 1 is constrained as `^1.2.0` and locked as `1.2.0`, it might get updated when branch 2 is used as baseline and a new `composer require package/A:^1.2.0` is executed, as that will use the most recent version that the constraint allows when possible. There might be a version 1.3.0 for that package available by now, which will now be used instead.\n\nChoosing the correct [version constraints](versions.md) and making sure the packages adhere to [semantic versioning](https://semver.org/) when using [next significant release operators](versions.md#next-significant-release-operators) should make sure that merging branches does not break anything by accidentally updating a dependency.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/resolving-merge-conflicts.md](https://getcomposer.org/doc/articles/resolving-merge-conflicts.md)"
- name: scripts
  id: 04-schema.md#scripts
  summary: Composer allows you to hook into various parts of the installation process through the use of scripts
  belongs_to: 5. The composer.json schema
  description: |-
    ### scripts ([root-only](04-schema.md#root-package))

    Composer allows you to hook into various parts of the installation process through the use of scripts.

    See [Scripts](articles/scripts.md) for events details and examples.
- name: Scripts
  id: articles/scripts.md
  summary: A script, in Composer's terms, can either be a PHP callback (defined as a static method) or any command-line executable command
  description: "# Scripts\n\n## What is a script?\n\nA script, in Composer's terms, can either be a PHP callback (defined as a static method) or any command-line executable command. Scripts are useful for executing a package's custom code or package-specific commands during the Composer execution process.\n\n> **Note:** Only scripts defined in the root package's `composer.json` are executed. If a dependency of the root package specifies its own scripts, Composer does not execute those additional scripts.\n\n## Event names\n\nComposer fires the following named events during its execution process:\n\n### Command Events\n\n- **pre-install-cmd**: occurs before the `install` command is executed with a lock file present.\n- **post-install-cmd**: occurs after the `install` command has been executed with a lock file present.\n- **pre-update-cmd**: occurs before the `update` command is executed, or before the `install` command is executed without a lock file present.\n- **post-update-cmd**: occurs after the `update` command has been executed, or after the `install` command has been executed without a lock file present.\n- **pre-status-cmd**: occurs before the `status` command is executed.\n- **post-status-cmd**: occurs after the `status` command has been executed.\n- **pre-archive-cmd**: occurs before the `archive` command is executed.\n- **post-archive-cmd**: occurs after the `archive` command has been executed.\n- **pre-autoload-dump**: occurs before the autoloader is dumped, either during `install`/`update`, or via the `dump-autoload` command.\n- **post-autoload-dump**: occurs after the autoloader has been dumped, either during `install`/`update`, or via the `dump-autoload` command.\n- **post-root-package-install**: occurs after the root package has been installed during the `create-project` command (but before its dependencies are installed).\n- **post-create-project-cmd**: occurs after the `create-project` command has been executed.\n\n### Installer Events\n\n- **pre-operations-exec**: occurs before the install/upgrade/.. operations are executed when installing a lock file. Plugins that need to hook into this event will need to be installed globally to be usable, as otherwise they would not be loaded yet when a fresh install of a project happens.\n\n### Package Events\n\n- **pre-package-install**: occurs before a package is installed.\n- **post-package-install**: occurs after a package has been installed.\n- **pre-package-update**: occurs before a package is updated.\n- **post-package-update**: occurs after a package has been updated.\n- **pre-package-uninstall**: occurs before a package is uninstalled.\n- **post-package-uninstall**: occurs after a package has been uninstalled.\n\n### Plugin Events\n\n- **init**: occurs after a Composer instance is done being initialized.\n- **command**: occurs before any Composer Command is executed on the CLI. It provides you with access to the input and output objects of the program.\n- **pre-file-download**: occurs before files are downloaded and allows you to manipulate the `HttpDownloader` object prior to downloading files based on the URL to be downloaded.\n- **post-file-download**: occurs after package dist files are downloaded and allows you to perform additional checks on the file if required.\n- **pre-command-run**: occurs before a command is executed and allows you to manipulate the `InputInterface` object's options and arguments to tweak a command's behavior.\n- **pre-pool-create**: occurs before the Pool of packages is created, and lets you filter the list of packages that is going to enter the Solver.\n\n> **Note:** Composer makes no assumptions about the state of your dependencies prior to `install` or `update`. Therefore, you should not specify scripts that require Composer-managed dependencies in the `pre-update-cmd` or `pre-install-cmd` event hooks. If you need to execute scripts prior to `install` or `update` please make sure they are self-contained within your root package.\n\n## Defining scripts\n\nThe root JSON object in `composer.json` should have a property called `\"scripts\"`, which contains pairs of named events and each event's corresponding scripts. An event's scripts can be defined as either a string (only for a single script) or an array (for single or multiple scripts.)\n\nFor any given event:\n\n- Scripts execute in the order defined when their corresponding event is fired.\n- An array of scripts wired to a single event can contain both PHP callbacks and command-line executable commands.\n- PHP classes containing defined callbacks must be autoloadable via Composer's autoload functionality.\n- Callbacks can only autoload classes from psr-0, psr-4 and classmap definitions. If a defined callback relies on functions defined outside of a class, the callback itself is responsible for loading the file containing these functions.\n\nScript definition example:\n\n``` javascript\n{\n    \"scripts\": {\n        \"post-update-cmd\": \"MyVendor\\\\MyClass::postUpdate\",\n        \"post-package-install\": [\n            \"MyVendor\\\\MyClass::postPackageInstall\"\n        ],\n        \"post-install-cmd\": [\n            \"MyVendor\\\\MyClass::warmCache\",\n            \"phpunit -c app/\"\n        ],\n        \"post-autoload-dump\": [\n            \"MyVendor\\\\MyClass::postAutoloadDump\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php -r \\\"copy('config/local-example.php', 'config/local.php');\\\"\"\n        ]\n    }\n}\n```\n\nUsing the previous definition example, here's the class `MyVendor\\MyClass` that might be used to execute the PHP callbacks:\n\n``` php\n<?php\n\nnamespace MyVendor;\n\nuse Composer\\Script\\Event;\nuse Composer\\Installer\\PackageEvent;\n\nclass MyClass\n{\n    public static function postUpdate(Event $event)\n    {\n        $composer = $event->getComposer();\n        // do stuff\n    }\n\n    public static function postAutoloadDump(Event $event)\n    {\n        $vendorDir = $event->getComposer()->getConfig()->get('vendor-dir');\n        require $vendorDir . '/autoload.php';\n\n        some_function_from_an_autoloaded_file();\n    }\n\n    public static function postPackageInstall(PackageEvent $event)\n    {\n        $installedPackage = $event->getOperation()->getPackage();\n        // do stuff\n    }\n\n    public static function warmCache(Event $event)\n    {\n        // make cache toasty\n    }\n}\n```\n\n**Note:** During a Composer `install` or `update` command run, a variable named `COMPOSER_DEV_MODE` will be added to the environment. If the command was run with the `--no-dev` flag, this variable will be set to 0, otherwise it will be set to 1. The variable is also available while `dump-autoload` runs, and it will be set to the same as the last `install` or `update` was run in.\n\n## Event classes\n\nWhen an event is fired, your PHP callback receives as first argument a `Composer\\EventDispatcher\\Event` object. This object has a `getName()` method that lets you retrieve the event name.\n\nDepending on the [script types](#event-names) you will get various event subclasses containing various getters with relevant data and associated objects:\n\n- Base class: [`Composer\\EventDispatcher\\Event`](https://github.com/composer/composer/blob/main/src/Composer/EventDispatcher/Event.php)\n- Command Events: [`Composer\\Script\\Event`](https://github.com/composer/composer/blob/main/src/Composer/Script/Event.php)\n- Installer Events: [`Composer\\Installer\\InstallerEvent`](https://github.com/composer/composer/blob/main/src/Composer/Installer/InstallerEvent.php)\n- Package Events: [`Composer\\Installer\\PackageEvent`](https://github.com/composer/composer/blob/main/src/Composer/Installer/PackageEvent.php)\n- Plugin Events:\n  - init: [`Composer\\EventDispatcher\\Event`](https://github.com/composer/composer/blob/main/src/Composer/EventDispatcher/Event.php)\n  - command: [`Composer\\Plugin\\CommandEvent`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/CommandEvent.php)\n  - pre-file-download: [`Composer\\Plugin\\PreFileDownloadEvent`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/PreFileDownloadEvent.php)\n  - post-file-download: [`Composer\\Plugin\\PostFileDownloadEvent`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/PostFileDownloadEvent.php)\n\n## Running scripts manually\n\nIf you would like to run the scripts for an event manually, the syntax is:\n\n    php composer.phar run-script [--dev] [--no-dev] script\n\nFor example `composer run-script post-install-cmd` will run any **post-install-cmd** scripts and [plugins](plugins.md) that have been defined.\n\nYou can also give additional arguments to the script handler by appending `--` followed by the handler arguments. e.g. `composer run-script post-install-cmd -- --check` will pass`--check` along to the script handler. Those arguments are received as CLI arg by CLI handlers, and can be retrieved as an array via `$event->getArguments()` by PHP handlers.\n\n## Writing custom commands\n\nIf you add custom scripts that do not fit one of the predefined event name above, you can either run them with run-script or also run them as native Composer commands. For example the handler defined below is executable by running `composer test`:\n\n``` javascript\n{\n    \"scripts\": {\n        \"test\": \"phpunit\"\n    }\n}\n```\n\nSimilar to the `run-script` command you can give additional arguments to scripts, e.g. `composer test -- --filter <pattern>` will pass `--filter <pattern>` along to the `phpunit` script.\n\n> **Note:** Before executing scripts, Composer's bin-dir is temporarily pushed on top of the PATH environment variable so that binaries of dependencies are directly accessible. In this example no matter if the `phpunit` binary is actually in `vendor/bin/phpunit` or `bin/phpunit` it will be found and executed.\n\nAlthough Composer is not intended to manage long-running processes and other such aspects of PHP projects, it can sometimes be handy to disable the process timeout on custom commands. This timeout defaults to 300 seconds and can be overridden in a variety of ways depending on the desired effect:\n\n- disable it for all commands using the config key `process-timeout`,\n- disable it for the current or future invocations of composer using the environment variable `COMPOSER_PROCESS_TIMEOUT`,\n- for a specific invocation using the `--timeout` flag of the `run-script` command,\n- using a static helper for specific scripts.\n\nTo disable the timeout for specific scripts with the static helper directly in composer.json:\n\n``` javascript\n{\n    \"scripts\": {\n        \"test\": [\n            \"Composer\\\\Config::disableProcessTimeout\",\n            \"phpunit\"\n        ]\n    }\n}\n```\n\nTo disable the timeout for every script on a given project, you can use the composer.json configuration:\n\n``` javascript\n{\n    \"config\": {\n        \"process-timeout\": 0\n    }\n}\n```\n\nIt's also possible to set the global environment variable to disable the timeout of all following scripts in the current terminal environment:\n\n    export COMPOSER_PROCESS_TIMEOUT=0\n\nTo disable the timeout of a single script call, you must use the `run-script` composer command and specify the `--timeout` parameter:\n\n    php composer.phar run-script --timeout=0 test\n\n## Referencing scripts\n\nTo enable script re-use and avoid duplicates, you can call a script from another one by prefixing the command name with `@`:\n\n``` javascript\n{\n    \"scripts\": {\n        \"test\": [\n            \"@clearCache\",\n            \"phpunit\"\n        ],\n        \"clearCache\": \"rm -rf cache/*\"\n    }\n}\n```\n\nYou can also refer a script and pass it new arguments:\n\n``` javascript\n{\n    \"scripts\": {\n        \"tests\": \"phpunit\",\n        \"testsVerbose\": \"@tests -vvv\"\n    }\n}\n```\n\n## Calling Composer commands\n\nTo call Composer commands, you can use `@composer` which will automatically resolve to whatever composer.phar is currently being used:\n\n``` javascript\n{\n    \"scripts\": {\n        \"test\": [\n            \"@composer install\",\n            \"phpunit\"\n        ]\n    }\n}\n```\n\nOne limitation of this is that you can not call multiple composer commands in a row like `@composer install && @composer foo`. You must split them up in a JSON array of commands.\n\n## Executing PHP scripts\n\nTo execute PHP scripts, you can use `@php` which will automatically resolve to whatever php process is currently being used:\n\n``` javascript\n{\n    \"scripts\": {\n        \"test\": [\n            \"@php script.php\",\n            \"phpunit\"\n        ]\n    }\n}\n```\n\nOne limitation of this is that you can not call multiple commands in a row like `@php install && @php foo`. You must split them up in a JSON array of commands.\n\nYou can also call a shell/bash script, which will have the path to the PHP executable available in it as a `PHP_BINARY` env var.\n\n## Setting environment variables\n\nTo set an environment variable in a cross-platform way, you can use `@putenv`:\n\n``` javascript\n{\n    \"scripts\": {\n        \"install-phpstan\": [\n            \"@putenv COMPOSER=phpstan-composer.json\",\n            \"composer install --prefer-dist\"\n        ]\n    }\n}\n```\n\n## Custom descriptions.\n\nYou can set custom script descriptions with the following in your `composer.json`:\n\n``` javascript\n{\n    \"scripts-descriptions\": {\n        \"test\": \"Run all tests!\"\n    }\n}\n```\n\nThe descriptions are used in `composer list` or `composer run -l` commands to describe what the scripts do when the command is run.\n\n> **Note:** You can only set custom descriptions of custom commands.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/scripts.md](https://getcomposer.org/doc/articles/scripts.md)"
- name: secure-http
  id: 06-config.md#secure-http
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## secure-http

    Defaults to `true`. If set to true only HTTPS URLs are allowed to be downloaded via Composer. If you really absolutely need HTTP access to something then you can disable it, but using [Let's Encrypt](https://letsencrypt.org/) to get a free SSL certificate is generally a better alternative.
- name: secure-svn-domains
  id: 06-config.md#secure-svn-domains
  summary: Defaults to []
  belongs_to: 7. Config
  description: "## secure-svn-domains\n\nDefaults to `[]`. Lists domains which should be trusted/marked as using a secure Subversion/SVN transport. By default svn:// protocol is seen as insecure and will throw, but you can set this config option to `[\"example.org\"]` to allow using svn URLs on that hostname. This is a better/safer alternative to disabling `secure-http` altogether.\n\n← [Repositories](05-repositories.md) \\| [Runtime](07-runtime.md) →\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/06-config.md](https://getcomposer.org/doc/06-config.md)"
- name: Setting up and using custom installers
  id: articles/custom-installers.md
  summary: At times, it may be necessary for a package to require additional actions during installation, such as installing packages outside of the default vendor library
  description: "# Setting up and using custom installers\n\n## Synopsis\n\nAt times, it may be necessary for a package to require additional actions during installation, such as installing packages outside of the default `vendor` library.\n\nIn these cases you could consider creating a Custom Installer to handle your specific logic.\n\n## Alternative to custom installers with Composer 2.1+\n\nAs of Composer 2.1, the `Composer\\InstalledVersions` class has a [`getInstalledPackagesByType`](../07-runtime.md#knowing-which-packages-of-a-given-type-are-installed) method which can let you figure out at runtime which plugins/modules/extensions are installed.\n\nIt is highly recommended to use that instead of building new custom installers if you are building a new application. This has the advantage of leaving all vendor code in the vendor directory, and not requiring custom installer code.\n\n## Calling a Custom Installer\n\nSuppose that your project already has a Custom Installer for specific modules then invoking that installer is a matter of defining the correct [type](../04-schema.md#type) in your package file.\n\n> *See the next chapter for an instruction how to create Custom Installers.*\n\nEvery Custom Installer defines which [type](../04-schema.md#type) string it will recognize. Once recognized it will completely override the default installer and only apply its own logic.\n\nAn example use-case would be:\n\n> phpDocumentor features Templates that need to be installed outside of the default /vendor folder structure. As such they have chosen to adopt the `phpdocumentor-template` [type](../04-schema.md#type) and create a plugin providing the Custom Installer to send these templates to the correct folder.\n\nAn example composer.json of such a template package would be:\n\n``` javascript\n{\n    \"name\": \"phpdocumentor/template-responsive\",\n    \"type\": \"phpdocumentor-template\",\n    \"require\": {\n        \"phpdocumentor/template-installer-plugin\": \"*\"\n    }\n}\n```\n\n> **IMPORTANT**: to make sure that the template installer is present at the time the template package is installed, template packages should require the plugin package.\n\n## Creating an Installer\n\nA Custom Installer is defined as a class that implements the [`Composer\\Installer\\InstallerInterface`](https://github.com/composer/composer/blob/main/src/Composer/Installer/InstallerInterface.php) and is usually distributed in a Composer Plugin.\n\nA basic Installer Plugin would thus compose of three files:\n\n1.  the package file: composer.json\n2.  The Plugin class, e.g.: `My\\Project\\Composer\\Plugin.php`, containing a class that implements `Composer\\Plugin\\PluginInterface`.\n3.  The Installer class, e.g.: `My\\Project\\Composer\\Installer.php`, containing a class that implements `Composer\\Installer\\InstallerInterface`.\n\n### composer.json\n\nThe package file is the same as any other package file but with the following requirements:\n\n1.  the [type](../04-schema.md#type) attribute must be `composer-plugin`.\n2.  the [extra](../04-schema.md#extra) attribute must contain an element `class` defining the class name of the plugin (including namespace). If a package contains multiple plugins, this can be an array of class names.\n\nExample:\n\n``` javascript\n{\n    \"name\": \"phpdocumentor/template-installer-plugin\",\n    \"type\": \"composer-plugin\",\n    \"license\": \"MIT\",\n    \"autoload\": {\n        \"psr-0\": {\"phpDocumentor\\\\Composer\": \"src/\"}\n    },\n    \"extra\": {\n        \"class\": \"phpDocumentor\\\\Composer\\\\TemplateInstallerPlugin\"\n    },\n    \"require\": {\n        \"composer-plugin-api\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"composer/composer\": \"^1.3\"\n    }\n}\n```\n\nThe example above has Composer itself in its require-dev, which allows you to use the Composer classes in your test suite for example.\n\n### The Plugin class\n\nThe class defining the Composer plugin must implement the [`Composer\\Plugin\\PluginInterface`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/PluginInterface.php). It can then register the Custom Installer in its `activate()` method.\n\nThe class may be placed in any location and have any name, as long as it is autoloadable and matches the `extra.class` element in the package definition.\n\nExample:\n\n``` php\n<?php\n\nnamespace phpDocumentor\\Composer;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Plugin\\PluginInterface;\n\nclass TemplateInstallerPlugin implements PluginInterface\n{\n    public function activate(Composer $composer, IOInterface $io)\n    {\n        $installer = new TemplateInstaller($io, $composer);\n        $composer->getInstallationManager()->addInstaller($installer);\n    }\n}\n```\n\n### The Custom Installer class\n\nThe class that executes the custom installation should implement the [`Composer\\Installer\\InstallerInterface`](https://github.com/composer/composer/blob/main/src/Composer/Installer/InstallerInterface.php) (or extend another installer that implements that interface). It defines the [type](../04-schema.md#type) string as it will be recognized by packages that will use this installer in the `supports()` method.\n\n> **NOTE**: *choose your [type](../04-schema.md#type) name carefully, it is recommended to follow the format: `vendor-type`*. For example: `phpdocumentor-template`.\n\nThe InstallerInterface class defines the following methods (please see the source for the exact signature):\n\n- **supports()**, here you test whether the passed [type](../04-schema.md#type) matches the name that you declared for this installer (see the example).\n- **isInstalled()**, determines whether a supported package is installed or not.\n- **install()**, here you can determine the actions that need to be executed upon installation.\n- **update()**, here you define the behavior that is required when Composer is invoked with the update argument.\n- **uninstall()**, here you can determine the actions that need to be executed when the package needs to be removed.\n- **getInstallPath()**, this method should return the location where the package is to be installed, *relative from the location of composer.json.* The path *must not end with a slash.*\n\nExample:\n\n``` php\n<?php\n\nnamespace phpDocumentor\\Composer;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Installer\\LibraryInstaller;\n\nclass TemplateInstaller extends LibraryInstaller\n{\n    /**\n     * @inheritDoc\n     */\n    public function getInstallPath(PackageInterface $package)\n    {\n        $prefix = substr($package->getPrettyName(), 0, 23);\n        if ('phpdocumentor/template-' !== $prefix) {\n            throw new \\InvalidArgumentException(\n                'Unable to install template, phpdocumentor templates '\n                .'should always start their package name with '\n                .'\"phpdocumentor/template-\"'\n            );\n        }\n\n        return 'data/templates/'.substr($package->getPrettyName(), 23);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function supports($packageType)\n    {\n        return 'phpdocumentor-template' === $packageType;\n    }\n}\n```\n\nThe example demonstrates that it is possible to extend the [`Composer\\Installer\\LibraryInstaller`](https://github.com/composer/composer/blob/main/src/Composer/Installer/LibraryInstaller.php) class to strip a prefix (`phpdocumentor/template-`) and use the remaining part to assemble a completely different installation path.\n\n> *Instead of being installed in `/vendor` any package installed using this Installer will be put in the `/data/templates/<stripped name>` folder.*\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/custom-installers.md](https://getcomposer.org/doc/articles/custom-installers.md)"
- name: Setting up and using plugins
  id: articles/plugins.md
  summary: You may wish to alter or expand Composer's functionality with your own
  description: "# Setting up and using plugins\n\n## Synopsis\n\nYou may wish to alter or expand Composer's functionality with your own. For example if your environment poses special requirements on the behaviour of Composer which do not apply to the majority of its users or if you wish to accomplish something with Composer in a way that is not desired by most users.\n\nIn these cases you could consider creating a plugin to handle your specific logic.\n\n## Creating a Plugin\n\nA plugin is a regular Composer package which ships its code as part of the package and may also depend on further packages.\n\n### Plugin Package\n\nThe package file is the same as any other package file but with the following requirements:\n\n1.  The [type](../04-schema.md#type) attribute must be `composer-plugin`.\n2.  The [extra](../04-schema.md#extra) attribute must contain an element `class` defining the class name of the plugin (including namespace). If a package contains multiple plugins, this can be an array of class names.\n3.  You must require the special package called `composer-plugin-api` to define which Plugin API versions your plugin is compatible with. Requiring this package doesn't actually include any extra dependencies, it only specifies which version of the plugin API to use.\n\n> **Note:** When developing a plugin, although not required, it's useful to add a require-dev dependency on `composer/composer` to have IDE autocompletion on Composer classes.\n\nThe required version of the `composer-plugin-api` follows the same [rules](../01-basic-usage.md#package-versions) as a normal package's rules.\n\nThe current Composer plugin API version is `2.3.0`.\n\nAn example of a valid plugin `composer.json` file (with the autoloading part omitted and an optional require-dev dependency on `composer/composer` for IDE auto completion):\n\n``` javascript\n{\n    \"name\": \"my/plugin-package\",\n    \"type\": \"composer-plugin\",\n    \"require\": {\n        \"composer-plugin-api\": \"^2.0\"\n    },\n    \"require-dev\": {\n        \"composer/composer\": \"^2.0\"\n    },\n    \"extra\": {\n        \"class\": \"My\\\\Plugin\"\n    }\n}\n```\n\n### Plugin Class\n\nEvery plugin has to supply a class which implements the [`Composer\\Plugin\\PluginInterface`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/PluginInterface.php). The `activate()` method of the plugin is called after the plugin is loaded and receives an instance of [`Composer\\Composer`](https://github.com/composer/composer/blob/main/src/Composer/Composer.php) as well as an instance of [`Composer\\IO\\IOInterface`](https://github.com/composer/composer/blob/main/src/Composer/IO/IOInterface.php). Using these two objects all configuration can be read and all internal objects and state can be manipulated as desired.\n\nExample:\n\n``` php\n<?php\n\nnamespace phpDocumentor\\Composer;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Plugin\\PluginInterface;\n\nclass TemplateInstallerPlugin implements PluginInterface\n{\n    public function activate(Composer $composer, IOInterface $io)\n    {\n        $installer = new TemplateInstaller($io, $composer);\n        $composer->getInstallationManager()->addInstaller($installer);\n    }\n}\n```\n\n## Event Handler\n\nFurthermore plugins may implement the [`Composer\\EventDispatcher\\EventSubscriberInterface`](https://github.com/composer/composer/blob/main/src/Composer/EventDispatcher/EventSubscriberInterface.php) in order to have its event handlers automatically registered with the `EventDispatcher` when the plugin is loaded.\n\nTo register a method to an event, implement the method `getSubscribedEvents()` and have it return an array. The array key must be the [event name](scripts.md#event-names) and the value is the name of the method in this class to be called.\n\n> **Note:** If you don't know which event to listen to, you can run a Composer command with the COMPOSER_DEBUG_EVENTS=1 environment variable set, which might help you identify what event you are looking for.\n\n``` php\npublic static function getSubscribedEvents()\n{\n    return array(\n        'post-autoload-dump' => 'methodToBeCalled',\n        // ^ event name ^         ^ method name ^\n    );\n}\n```\n\nBy default, the priority of an event handler is set to 0. The priority can be changed by attaching a tuple where the first value is the method name, as before, and the second value is an integer representing the priority. Higher integers represent higher priorities. Priority 2 is called before priority 1, etc.\n\n``` php\npublic static function getSubscribedEvents()\n{\n    return array(\n        // Will be called before events with priority 0\n        'post-autoload-dump' => array('methodToBeCalled', 1)\n    );\n}\n```\n\nIf multiple methods should be called, then an array of tuples can be attached to each event. The tuples do not need to include the priority. If it is omitted, it will default to 0.\n\n``` php\npublic static function getSubscribedEvents()\n{\n    return array(\n        'post-autoload-dump' => array(\n            array('methodToBeCalled'      ), // Priority defaults to 0\n            array('someOtherMethodName', 1), // This fires first\n        )\n    );\n}\n```\n\nHere's a complete example:\n\n``` php\n<?php\n\nnamespace Naderman\\Composer\\AWS;\n\nuse Composer\\Composer;\nuse Composer\\EventDispatcher\\EventSubscriberInterface;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Plugin\\PluginInterface;\nuse Composer\\Plugin\\PluginEvents;\nuse Composer\\Plugin\\PreFileDownloadEvent;\n\nclass AwsPlugin implements PluginInterface, EventSubscriberInterface\n{\n    protected $composer;\n    protected $io;\n\n    public function activate(Composer $composer, IOInterface $io)\n    {\n        $this->composer = $composer;\n        $this->io = $io;\n    }\n\n    public function deactivate(Composer $composer, IOInterface $io)\n    {\n    }\n\n    public function uninstall(Composer $composer, IOInterface $io)\n    {\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return array(\n            PluginEvents::PRE_FILE_DOWNLOAD => array(\n                array('onPreFileDownload', 0)\n            ),\n        );\n    }\n\n    public function onPreFileDownload(PreFileDownloadEvent $event)\n    {\n        $protocol = parse_url($event->getProcessedUrl(), PHP_URL_SCHEME);\n\n        if ($protocol === 's3') {\n            // ...\n        }\n    }\n}\n```\n\n## Plugin capabilities\n\nComposer defines a standard set of capabilities which may be implemented by plugins. Their goal is to make the plugin ecosystem more stable as it reduces the need to mess with [`Composer\\Composer`](https://github.com/composer/composer/blob/main/src/Composer/Composer.php)'s internal state, by providing explicit extension points for common plugin requirements.\n\nCapable Plugins classes must implement the [`Composer\\Plugin\\Capable`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/Capable.php) interface and declare their capabilities in the `getCapabilities()` method. This method must return an array, with the *key* as a Composer Capability class name, and the *value* as the Plugin's own implementation class name of said Capability:\n\n``` php\n<?php\n\nnamespace My\\Composer;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Plugin\\PluginInterface;\nuse Composer\\Plugin\\Capable;\n\nclass Plugin implements PluginInterface, Capable\n{\n    public function activate(Composer $composer, IOInterface $io)\n    {\n    }\n\n    public function getCapabilities()\n    {\n        return array(\n            'Composer\\Plugin\\Capability\\CommandProvider' => 'My\\Composer\\CommandProvider',\n        );\n    }\n}\n```\n\n### Command provider\n\nThe [`Composer\\Plugin\\Capability\\CommandProvider`](https://github.com/composer/composer/blob/main/src/Composer/Plugin/Capability/CommandProvider.php) capability allows to register additional commands for Composer:\n\n``` php\n<?php\n\nnamespace My\\Composer;\n\nuse Composer\\Plugin\\Capability\\CommandProvider as CommandProviderCapability;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Composer\\Command\\BaseCommand;\n\nclass CommandProvider implements CommandProviderCapability\n{\n    public function getCommands()\n    {\n        return array(new Command);\n    }\n}\n\nclass Command extends BaseCommand\n{\n    protected function configure(): void\n    {\n        $this->setName('custom-plugin-command');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $output->writeln('Executing');\n    }\n}\n```\n\nNow the `custom-plugin-command` is available alongside Composer commands.\n\n> *Composer commands are based on the [Symfony Console Component](https://symfony.com/doc/current/components/console.html).*\n\n## Running plugins manually\n\nPlugins for an event can be run manually by the `run-script` command. This works the same way as [running scripts manually](scripts.md#running-scripts-manually).\n\n## Using Plugins\n\nPlugin packages are automatically loaded as soon as they are installed and will be loaded when Composer starts up if they are found in the current project's list of installed packages. Additionally all plugin packages installed in the `COMPOSER_HOME` directory using the Composer global command are loaded before local project plugins are loaded.\n\n> You may pass the `--no-plugins` option to Composer commands to disable all installed plugins. This may be particularly helpful if any of the plugins causes errors and you wish to update or uninstall it.\n\n## Plugin Helpers\n\nAs of Composer 2, due to the fact that DownloaderInterface can sometimes return Promises and have been split up in more steps than they used to, we provide a [SyncHelper](https://github.com/composer/composer/blob/main/src/Composer/Util/SyncHelper.php) to make downloading and installing packages easier.\n\n## Plugin Extra Attributes\n\nA few special plugin capabilities can be unlocked using extra attributes in the plugin's composer.json.\n\n### class\n\n[See above](#plugin-package) for an explanation of the class attribute and how it works.\n\n### plugin-modifies-downloads\n\nSome special plugins need to update package download URLs before they get downloaded.\n\nAs of Composer 2.0, all packages are downloaded before they get installed. This means on the first installation, your plugin is not yet installed when the download occurs, and it does not get a chance to update the URLs on time.\n\nSpecifying `{\"extra\": {\"plugin-modifies-downloads\": true}}` in your composer.json will hint to Composer that the plugin should be installed on its own before proceeding with the rest of the package downloads. This slightly slows down the overall installation process however, so do not use it in plugins which do not absolutely require it.\n\n### plugin-modifies-install-path\n\nSome special plugins modify the install path of packages.\n\nAs of Composer 2.2.9, you can specify `{\"extra\": {\"plugin-modifies-install-path\": true}}` in your composer.json to hint to Composer that the plugin should be activated as soon as possible to prevent any bad side-effects from Composer assuming packages are installed in another location than they actually are.\n\n## Plugin Autoloading\n\nDue to plugins being loaded by Composer at runtime, and to ensure that plugins which depend on other packages can function correctly, a runtime autoloader is created whenever a plugin is loaded. That autoloader is only configured to load with the plugin dependencies, so you may not have access to all the packages which are installed.\n\n## Static Analysis support\n\nAs of Composer 2.3.7 we ship a `phpstan/rules.neon` PHPStan config file, which provides additional error checking when working on Composer plugins.\n\n### Usage with [PHPStan Extension Installer](https://github.com/phpstan/extension-installer#usage)\n\nThe necessary configuration files are automatically loaded, in case your plugin projects declares a dependency to `phpstan/extension-installer`.\n\n### Alternative manual installation\n\nTo make use of it, your Composer plugin project needs a [PHPStan config file](https://phpstan.org/config-reference#multiple-files), which includes the `phpstan/rules.neon` file:\n\n    includes:\n        - vendor/composer/composer/phpstan/rules.neon\n\n    // your remaining config..\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/plugins.md](https://getcomposer.org/doc/articles/plugins.md)"
- name: sort-packages
  id: 06-config.md#sort-packages
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## sort-packages

    Defaults to `false`. If `true`, the `require` command keeps packages sorted by name in `composer.json` when adding a new package.
- name: store-auths
  id: 06-config.md#store-auths
  summary: null
  belongs_to: 7. Config
  description: |-
    ## store-auths

    What to do after prompting for authentication, one of: `true` (always store), `false` (do not store) and `"prompt"` (ask every time), defaults to `"prompt"`.
- name: support
  id: 04-schema.md#support
  summary: Various information to get support about the project
  belongs_to: 5. The composer.json schema
  description: |-
    ### support

    Various information to get support about the project.

    Support information includes the following:

    - **email:** Email address for support.
    - **issues:** URL to the issue tracker.
    - **forum:** URL to the forum.
    - **wiki:** URL to the wiki.
    - **irc:** IRC channel for support, as irc://server/channel.
    - **source:** URL to browse or download the sources.
    - **docs:** URL to the documentation.
    - **rss:** URL to the RSS feed.
    - **chat:** URL to the chat channel.

    An example:

    ``` javascript
    {
        "support": {
            "email": "support@example.org",
            "irc": "irc://irc.freenode.org/composer"
        }
    }
    ```

    Optional.
- name: target-dir
  id: 04-schema.md#target-dir
  summary: 'DEPRECATED: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead'
  belongs_to: 5. The composer.json schema
  description: |-
    ### target-dir

    > **DEPRECATED**: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.

    Defines the installation target.

    In case the package root is below the namespace declaration you cannot autoload properly. `target-dir` solves this problem.

    An example is Symfony. There are individual packages for the components. The Yaml component is under `Symfony\Component\Yaml`. The package root is that `Yaml` directory. To make autoloading possible, we need to make sure that it is not installed into `vendor/symfony/yaml`, but instead into `vendor/symfony/yaml/Symfony/Component/Yaml`, so that the autoloader can load it from `vendor/symfony/yaml`.

    To do that, `autoload` and `target-dir` are defined as follows:

    ``` javascript
    {
        "autoload": {
            "psr-0": { "Symfony\\Component\\Yaml\\": "" }
        },
        "target-dir": "Symfony/Component/Yaml"
    }
    ```

    Optional.
- name: time
  id: 04-schema.md#time
  summary: Release date of the version
  belongs_to: 5. The composer.json schema
  description: |-
    ### time

    Release date of the version.

    Must be in `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS` format.

    Optional.
- name: Troubleshooting
  id: articles/troubleshooting.md
  summary: This is a list of common pitfalls on using Composer, and how to avoid them
  description: "# Troubleshooting\n\nThis is a list of common pitfalls on using Composer, and how to avoid them.\n\n## General\n\n1.  When facing any kind of problems using Composer, be sure to **work with the latest version**. See [self-update](../03-cli.md#self-update) for details.\n\n2.  Before asking anyone, run [`composer diagnose`](../03-cli.md#diagnose) to check for common problems. If it all checks out, proceed to the next steps.\n\n3.  Make sure you have no problems with your setup by running the installer's checks via `curl -sS https://getcomposer.org/installer | php -- --check`.\n\n4.  Try clearing Composer's cache by running `composer clear-cache`.\n\n5.  Ensure you're **installing vendors straight from your `composer.json`** via `rm -rf vendor && composer update -v` when troubleshooting, excluding any possible interferences with existing vendor installations or `composer.lock` entries.\n\n## Package not found\n\n1.  Double-check you **don't have typos** in your `composer.json` or repository branches and tag names.\n\n2.  Be sure to **set the right [minimum-stability](../04-schema.md#minimum-stability)**. To get started or be sure this is no issue, set `minimum-stability` to \"dev\".\n\n3.  Packages **not coming from [Packagist](https://packagist.org/)** should always be **defined in the root package** (the package depending on all vendors).\n\n4.  Use the **same vendor and package name** throughout all branches and tags of your repository, especially when maintaining a third party fork and using `replace`.\n\n5.  If you are updating to a recently published version of a package, be aware that Packagist has a delay of up to 1 minute before new packages are visible to Composer.\n\n6.  If you are updating a single package, it may depend on newer versions itself. In this case add the `--with-dependencies` argument **or** add all dependencies which need an update to the command.\n\n## Package is not updating to the expected version\n\nTry running `php composer.phar why-not [package-name] [expected-version]`.\n\n## Dependencies on the root package\n\nWhen your root package depends on a package which ends up depending (directly or indirectly) back on the root package itself, issues can occur in two cases:\n\n1.  During development, if you are on a branch like `dev-main` and the branch has no [branch-alias](aliases.md#branch-alias) defined, and the dependency on the root package requires version `^2.0` for example, the `dev-main` version will not satisfy it. The best solution here is to make sure you first define a branch alias.\n\n2.  In CI (Continuous Integration) runs, the problem might be that Composer is not able to detect the version of the root package properly. If it is a git clone it is generally alright and Composer will detect the version of the current branch, but some CIs do shallow clones so that process can fail when testing pull requests and feature branches. In these cases the branch alias may then not be recognized. The best solution is to define the version you are on via an environment variable called COMPOSER_ROOT_VERSION. You set it to `dev-main` for example to define the root package's version as `dev-main`. Use for example: `COMPOSER_ROOT_VERSION=dev-main composer install` to export the variable only for the call to composer, or you can define it globally in the CI env vars.\n\n## Package not found in a Jenkins-build\n\n1.  Check the [\"Package not found\"](#package-not-found) item above.\n\n2.  The git-clone / checkout within Jenkins leaves the branch in a \"detached HEAD\"-state. As a result, Composer may not able to identify the version of the current checked out branch and may not be able to resolve a [dependency on the root package](#dependencies-on-the-root-package). To solve this problem, you can use the \"Additional Behaviours\" -\\> \"Check out to specific local branch\" in your Git-settings for your Jenkins-job, where your \"local branch\" shall be the same branch as you are checking out. Using this, the checkout will not be in detached state any more and the dependency on the root package should become satisfied.\n\n## I have a dependency which contains a \"repositories\" definition in its composer.json, but it seems to be ignored.\n\nThe [`repositories`](../04-schema.md#repositories) configuration property is defined as [root-only](../04-schema.md#root-package). It is not inherited. You can read more about the reasons behind this in the \"[why can't Composer load repositories recursively?](https://getcomposer.org/doc/faqs/why-cant-composer-load-repositories-recursively.md)\" article. The simplest work-around to this limitation, is moving or duplicating the `repositories` definition into your root composer.json.\n\n## I have locked a dependency to a specific commit but get unexpected results.\n\nWhile Composer supports locking dependencies to a specific commit using the `#commit-ref` syntax, there are certain caveats that one should take into account. The most important one is [documented](../04-schema.md#package-links), but frequently overlooked:\n\n> **Note:** While this is convenient at times, it should not be how you use packages in the long term because it comes with a technical limitation. The composer.json metadata will still be read from the branch name you specify before the hash. Because of that in some cases it will not be a practical workaround, and you should always try to switch to tagged releases as soon as you can.\n\nThere is no simple work-around to this limitation. It is therefore strongly recommended that you do not use it.\n\n## Need to override a package version\n\nLet's say your project depends on package A, which in turn depends on a specific version of package B (say 0.1). But you need a different version of said package B (say 0.11).\n\nYou can fix this by aliasing version 0.11 to 0.1:\n\ncomposer.json:\n\n``` javascript\n{\n    \"require\": {\n        \"A\": \"0.2\",\n        \"B\": \"0.11 as 0.1\"\n    }\n}\n```\n\nSee [aliases](aliases.md) for more information.\n\n## Figuring out where a config value came from\n\nUse `php composer.phar config --list --source` to see where each config value originated from.\n\n## Memory limit errors\n\nThe first thing to do is to make sure you are running Composer 2, and if possible 2.2.0 or above.\n\nComposer 1 used much more memory and upgrading to the latest version will give you much better and faster results.\n\nComposer may sometimes fail on some commands with this message:\n\n`PHP Fatal error: Allowed memory size of XXXXXX bytes exhausted <...>`\n\nIn this case, the PHP `memory_limit` should be increased.\n\n> **Note:** Composer internally increases the `memory_limit` to `1.5G`.\n\nTo get the current `memory_limit` value, run:\n\n    php -r \"echo ini_get('memory_limit').PHP_EOL;\"\n\nTry increasing the limit in your `php.ini` file (ex. `/etc/php5/cli/php.ini` for Debian-like systems):\n\n    ; Use -1 for unlimited or define an explicit value like 2G\n    memory_limit = -1\n\nComposer also respects a memory limit defined by the `COMPOSER_MEMORY_LIMIT` environment variable:\n\n    COMPOSER_MEMORY_LIMIT=-1 composer.phar <...>\n\nOr, you can increase the limit with a command-line argument:\n\n    php -d memory_limit=-1 composer.phar <...>\n\nThis issue can also happen on cPanel instances, when the shell fork bomb protection is activated. For more information, see the [documentation](https://documentation.cpanel.net/display/68Docs/Shell+Fork+Bomb+Protection) of the fork bomb feature on the cPanel site.\n\n## Xdebug impact on Composer\n\nTo improve performance when the Xdebug extension is enabled, Composer automatically restarts PHP without it. You can override this behavior by using an environment variable: `COMPOSER_ALLOW_XDEBUG=1`.\n\nComposer will always show a warning if Xdebug is being used, but you can override this with an environment variable: `COMPOSER_DISABLE_XDEBUG_WARN=1`. If you see this warning unexpectedly, then the restart process has failed: please report this [issue](https://github.com/composer/composer/issues).\n\n## \"The system cannot find the path specified\" (Windows)\n\n1.  Open regedit.\n2.  Search for an `AutoRun` key inside `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor`, `HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor` or `HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Command Processor`.\n3.  Check if it contains any path to a non-existent file, if it's the case, remove them.\n\n## API rate limit and OAuth tokens\n\nBecause of GitHub's rate limits on their API it can happen that Composer prompts for authentication asking your username and password so it can go ahead with its work.\n\nIf you would prefer not to provide your GitHub credentials to Composer you can manually create a token using the [procedure documented here](authentication-for-private-packages.md#github-oauth).\n\nNow Composer should install/update without asking for authentication.\n\n## proc_open(): fork failed errors\n\nIf Composer shows proc_open() fork failed on some commands:\n\n`PHP Fatal error: Uncaught exception 'ErrorException' with message 'proc_open(): fork failed - Cannot allocate memory' in phar`\n\nThis could be happening because the VPS runs out of memory and has no Swap space enabled.\n\n    free -m\n\n    total used free shared buffers cached\n    Mem: 2048 357 1690 0 0 237\n    -/+ buffers/cache: 119 1928\n    Swap: 0 0 0\n\nTo enable the swap you can use for example:\n\n    /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024\n    /sbin/mkswap /var/swap.1\n    /bin/chmod 0600 /var/swap.1\n    /sbin/swapon /var/swap.1\n\nYou can make a permanent swap file following this [tutorial](https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04).\n\n## proc_open(): failed to open stream errors (Windows)\n\nIf Composer shows proc_open(NUL) errors on Windows:\n\n`proc_open(NUL): failed to open stream: No such file or directory`\n\nThis could be happening because you are working in a *OneDrive* directory and using a version of PHP that does not support the file system semantics of this service. The issue was fixed in PHP 7.2.23 and 7.3.10.\n\nAlternatively it could be because the Windows Null Service is not enabled. For more information, see this [issue](https://github.com/composer/composer/issues/7186#issuecomment-373134916).\n\n## Degraded Mode\n\nDue to some intermittent issues on Travis and other systems, we introduced a degraded network mode which helps Composer finish successfully but disables a few optimizations. This is enabled automatically when an issue is first detected. If you see this issue sporadically you probably don't have to worry (a slow or overloaded network can also cause those time outs), but if it appears repeatedly you might want to look at the options below to identify and resolve it.\n\nIf you have been pointed to this page, you want to check a few things:\n\n- If you are using ESET antivirus, go in \"Advanced Settings\" and disable \"HTTP-scanner\" under \"web access protection\"\n- If you are using IPv6, try disabling it. If that solves your issues, get in touch with your ISP or server host, the problem is not at the Packagist level but in the routing rules between you and Packagist (i.e. the internet at large). The best way to get these fixed is to raise awareness to the network engineers that have the power to fix it. Take a look at the next section for IPv6 workarounds.\n- If none of the above helped, please report the error.\n\n## Operation timed out (IPv6 issues)\n\nYou may run into errors if IPv6 is not configured correctly. A common error is:\n\n    The \"https://getcomposer.org/version\" file could not be downloaded: failed to\n    open stream: Operation timed out\n\nWe recommend you fix your IPv6 setup. If that is not possible, you can try the following workarounds:\n\n**Workaround Linux:**\n\nOn linux, it seems that running this command helps to make ipv4 traffic have a higher priority than ipv6, which is a better alternative than disabling ipv6 entirely:\n\n    sudo sh -c \"echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf\"\n\n**Workaround Windows:**\n\nOn windows the only way is to disable ipv6 entirely I am afraid (either in windows or in your home router).\n\n**Workaround Mac OS X:**\n\nGet name of your network device:\n\n    networksetup -listallnetworkservices\n\nDisable IPv6 on that device (in this case \"Wi-Fi\"):\n\n    networksetup -setv6off Wi-Fi\n\nRun Composer ...\n\nYou can enable IPv6 again with:\n\n    networksetup -setv6automatic Wi-Fi\n\nThat said, if this fixes your problem, please talk to your ISP about it to try to resolve the routing errors. That's the best way to get things resolved for everyone.\n\n## Composer hangs with SSH ControlMaster\n\nWhen you try to install packages from a Git repository and you use the `ControlMaster` setting for your SSH connection, Composer might hang endlessly and you see a `sh` process in the `defunct` state in your process list.\n\nThe reason for this is a SSH Bug: <https://bugzilla.mindrot.org/show_bug.cgi?id=1988>\n\nAs a workaround, open a SSH connection to your Git host before running Composer:\n\n    ssh -t git@mygitserver.tld\n    php composer.phar update\n\nSee also <https://github.com/composer/composer/issues/4180> for more information.\n\n## Zip archives are not unpacked correctly.\n\nComposer can unpack zipballs using either a system-provided `unzip` or `7z` (7-Zip) utility, or PHP's native `ZipArchive` class. On OSes where ZIP files can contain permissions and symlinks, we recommend installing `unzip` or `7z` as these features are not supported by `ZipArchive`.\n\n## Disabling the pool optimizer\n\nIn Composer, the `Pool` class contains all the packages that are relevant for the dependency resolving process. That is what is used to generate all the rules which are then passed on to the dependency solver. In order to improve performance, Composer tries to optimize this `Pool` by removing useless package information early on.\n\nIf all goes well, you should never notice any issues with it but in case you run into an unexpected result such as an unresolvable set of dependencies or conflicts where you think Composer is wrong, you might want to disable the optimizer by using the environment variable `COMPOSER_POOL_OPTIMIZER` and run the update again like so:\n\n    COMPOSER_POOL_OPTIMIZER=0 php composer.phar update\n\nNow double check if the result is still the same. It will take significantly longer and use a lot more memory to run the dependency resolving process.\n\nIf the result is different, you likely hit a problem in the pool optimizer. Please [report this issue](https://github.com/composer/composer/issues) so it can be fixed.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/troubleshooting.md](https://getcomposer.org/doc/articles/troubleshooting.md)"
- name: type
  id: 04-schema.md#type
  summary: The type of the package
  belongs_to: 5. The composer.json schema
  description: |-
    ### type

    The type of the package. It defaults to `library`.

    Package types are used for custom installation logic. If you have a package that needs some special logic, you can define a custom type. This could be a `symfony-bundle`, a `wordpress-plugin` or a `typo3-cms-extension`. These types will all be specific to certain projects, and they will need to provide an installer capable of installing packages of that type.

    Out of the box, Composer supports four types:

    - **library:** This is the default. It will copy the files to `vendor`.
    - **project:** This denotes a project rather than a library. For example application shells like the [Symfony standard edition](https://github.com/symfony/symfony-standard), CMSs like the [SilverStripe installer](https://github.com/silverstripe/silverstripe-installer) or full fledged applications distributed as packages. This can for example be used by IDEs to provide listings of projects to initialize when creating a new workspace.
    - **metapackage:** An empty package that contains requirements and will trigger their installation, but contains no files and will not write anything to the filesystem. As such, it does not require a dist or source key to be installable.
    - **composer-plugin:** A package of type `composer-plugin` may provide an installer for other packages that have a custom type. Read more in the [dedicated article](articles/custom-installers.md).

    Only use a custom type if you need custom logic during installation. It is recommended to omit this field and have it default to `library`.
- name: use-github-api
  id: 06-config.md#use-github-api
  summary: Defaults to true
  belongs_to: 7. Config
  description: |-
    ## use-github-api

    Defaults to `true`. Similar to the `no-api` key on a specific repository, setting `use-github-api` to `false` will define the global behavior for all GitHub repositories to clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the `git` driver directly, Composer will still attempt to use GitHub's zip files.
- name: use-include-path
  id: 06-config.md#use-include-path
  summary: Defaults to false
  belongs_to: 7. Config
  description: |-
    ## use-include-path

    Defaults to `false`. If `true`, the Composer autoloader will also look for classes in the PHP include path.
- name: use-parent-dir
  id: 06-config.md#use-parent-dir
  summary: When running Composer in a directory where there is no composer.json, if there is one present in a directory above Composer will by default ask you whether you want to use that directory's composer.json instead
  belongs_to: 7. Config
  description: |-
    ## use-parent-dir

    When running Composer in a directory where there is no composer.json, if there is one present in a directory above Composer will by default ask you whether you want to use that directory's composer.json instead.

    If you always want to answer yes to this prompt, you can set this config value to `true`. To never be prompted, set it to `false`. The default is `"prompt"`.

    > **Note:** This config must be set in your global user-wide config for it to work. Use for example `php composer.phar config --global use-parent-dir true` to set it.
- name: Vendor binaries and the vendor/bin directory
  id: articles/vendor-binaries.md
  summary: Any command line script that a Composer package would like to pass along to a user who installs the package should be listed as a vendor binary
  description: "# Vendor binaries and the `vendor/bin` directory\n\n## What is a vendor binary?\n\nAny command line script that a Composer package would like to pass along to a user who installs the package should be listed as a vendor binary.\n\nIf a package contains other scripts that are not needed by the package users (like build or compile scripts) that code should not be listed as a vendor binary.\n\n## How is it defined?\n\nIt is defined by adding the `bin` key to a project's `composer.json`. It is specified as an array of files so multiple binaries can be added for any given project.\n\n``` javascript\n{\n    \"bin\": [\"bin/my-script\", \"bin/my-other-script\"]\n}\n```\n\n## What does defining a vendor binary in composer.json do?\n\nIt instructs Composer to install the package's binaries to `vendor/bin` for any project that **depends** on that project.\n\nThis is a convenient way to expose useful scripts that would otherwise be hidden deep in the `vendor/` directory.\n\n## What happens when Composer is run on a composer.json that defines vendor binaries?\n\nFor the binaries that a package defines directly, nothing happens.\n\n## What happens when Composer is run on a composer.json that has dependencies with vendor binaries listed?\n\nComposer looks for the binaries defined in all of the dependencies. A proxy file (or two on Windows/WSL) is created from each dependency's binaries to `vendor/bin`.\n\nSay package `my-vendor/project-a` has binaries setup like this:\n\n``` javascript\n{\n    \"name\": \"my-vendor/project-a\",\n    \"bin\": [\"bin/project-a-bin\"]\n}\n```\n\nRunning `composer install` for this `composer.json` will not do anything with `bin/project-a-bin`.\n\nSay project `my-vendor/project-b` has requirements setup like this:\n\n``` javascript\n{\n    \"name\": \"my-vendor/project-b\",\n    \"require\": {\n        \"my-vendor/project-a\": \"*\"\n    }\n}\n```\n\nRunning `composer install` for this `composer.json` will look at all of project-a's binaries and install them to `vendor/bin`.\n\nIn this case, Composer will make `vendor/my-vendor/project-a/bin/project-a-bin` available as `vendor/bin/project-a-bin`.\n\n## Finding the Composer autoloader from a binary\n\nAs of Composer 2.2, a new `$_composer_autoload_path` global variable is defined by the bin proxy file, so that when your binary gets executed it can use it to easily locate the project's autoloader.\n\nThis global will not be available however when running binaries defined by the root package itself, so you need to have a fallback in place.\n\nThis can look like this for example:\n\n``` php\n<?php\n\ninclude $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';\n```\n\nIf you want to rely on this in your package you should however make sure to also require `\"composer-runtime-api\": \"^2.2\"` to ensure that the package gets installed with a Composer version supporting the feature.\n\n## Finding the Composer bin-dir from a binary\n\nAs of Composer 2.2.2, a new `$_composer_bin_dir` global variable is defined by the bin proxy file, so that when your binary gets executed it can use it to easily locate the project's Composer bin directory.\n\nFor non-PHP binaries, as of Composer 2.2.6, the bin proxy sets a `COMPOSER_RUNTIME_BIN_DIR` environment variable.\n\nThis global variable will not be available however when running binaries defined by the root package itself, so you need to have a fallback in place.\n\nThis can look like this for example:\n\n``` php\n<?php\n\n$binDir = $_composer_bin_dir ?? __DIR__ . '/../vendor/bin';\n```\n\n``` php\n#!/bin/bash\n\nif [[ -z \"$COMPOSER_RUNTIME_BIN_DIR\" ]]; then\n  BIN_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nelse\n  BIN_DIR=\"$COMPOSER_RUNTIME_BIN_DIR\"\nfi\n```\n\nIf you want to rely on this in your package you should however make sure to also require `\"composer-runtime-api\": \"^2.2.2\"` to ensure that the package gets installed with a Composer version supporting the feature.\n\n## What about Windows and .bat files?\n\nPackages managed entirely by Composer do not *need* to contain any `.bat` files for Windows compatibility. Composer handles installation of binaries in a special way when run in a Windows environment:\n\n- A `.bat` file is generated automatically to reference the binary\n- A Unix-style proxy file with the same name as the binary is also generated, which is useful for WSL, Linux VMs, etc.\n\nPackages that need to support workflows that may not include Composer are welcome to maintain custom `.bat` files. In this case, the package should **not** list the `.bat` file as a binary as it is not needed.\n\n## Can vendor binaries be installed somewhere other than vendor/bin?\n\nYes, there are two ways an alternate vendor binary location can be specified:\n\n1.  Setting the `bin-dir` configuration setting in `composer.json`\n2.  Setting the environment variable `COMPOSER_BIN_DIR`\n\nAn example of the former looks like this:\n\n``` javascript\n{\n    \"config\": {\n        \"bin-dir\": \"scripts\"\n    }\n}\n```\n\nRunning `composer install` for this `composer.json` will result in all of the vendor binaries being installed in `scripts/` instead of `vendor/bin/`.\n\nYou can set `bin-dir` to `./` to put binaries in your project root.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/vendor-binaries.md](https://getcomposer.org/doc/articles/vendor-binaries.md)"
- name: vendor-dir
  id: 06-config.md#vendor-dir
  summary: Defaults to vendor
  belongs_to: 7. Config
  description: |-
    ## vendor-dir

    Defaults to `vendor`. You can install dependencies into a different directory if you want to. `$HOME` and `~` will be replaced by your home directory's path in vendor-dir and all `*-dir` options below.
- name: version
  id: 04-schema.md#version
  summary: The version of the package
  belongs_to: 5. The composer.json schema
  description: |-
    ### version

    The version of the package. In most cases this is not required and should be omitted (see below).

    This must follow the format of `X.Y.Z` or `vX.Y.Z` with an optional suffix of `-dev`, `-patch` (`-p`), `-alpha` (`-a`), `-beta` (`-b`) or `-RC`. The patch, alpha, beta and RC suffixes can also be followed by a number.

    Examples:

    - 1.0.0
    - 1.0.2
    - 1.1.0
    - 0.2.5
    - 1.0.0-dev
    - 1.0.0-alpha3
    - 1.0.0-beta2
    - 1.0.0-RC5
    - v2.0.4-p1

    Optional if the package repository can infer the version from somewhere, such as the VCS tag name in the VCS repository. In that case it is also recommended to omit it.

    > **Note:** Packagist uses VCS repositories, so the statement above is very much true for Packagist as well. Specifying the version yourself will most likely end up creating problems at some point due to human error.
- name: Versions and constraints
  id: articles/versions.md
  summary: Because Composer is heavily geared toward utilizing version control systems like git, the term "version" can be a little ambiguous
  description: "# Versions and constraints\n\n## Composer Versions vs VCS Versions\n\nBecause Composer is heavily geared toward utilizing version control systems like git, the term \"version\" can be a little ambiguous. In the sense of a version control system, a \"version\" is a specific set of files that contain specific data. In git terminology, this is a \"ref\", or a specific commit, which may be represented by a branch HEAD or a tag. When you check out that version in your VCS -- for example, tag `v1.1` or commit `e35fa0d` --, you're asking for a single, known set of files, and you always get the same files back.\n\nIn Composer, what's often referred to casually as a version -- that is, the string that follows the package name in a require line (e.g., `~1.1` or `1.2.*`) -- is actually more specifically a version constraint. Composer uses version constraints to figure out which refs in a VCS it should be checking out (or to verify that a given library is acceptable in the case of a statically-maintained library with a `version` specification in `composer.json`).\n\n## VCS Tags and Branches\n\n*For the following discussion, let's assume the following sample library repository:*\n\n    ~/my-library$ git branch\n\n    v1\n    v2\n    my-feature\n    another-feature\n\n    ~/my-library$ git tag\n\n    v1.0\n    v1.0.1\n    v1.0.2\n    v1.1-BETA\n    v1.1-RC1\n    v1.1-RC2\n    v1.1\n    v1.1.1\n    v2.0-BETA\n    v2.0-RC1\n    v2.0\n    v2.0.1\n    v2.0.2\n\n### Tags\n\nNormally, Composer deals with tags (as opposed to branches -- if you don't know what this means, read up on [version control systems](https://en.wikipedia.org/wiki/Version_control#Common_terminology)). When you write a version constraint, it may reference a specific tag (e.g., `1.1`) or it may reference a valid range of tags (e.g., `>=1.1 <2.0`, or `~4.0`). To resolve these constraints, Composer first asks the VCS to list all available tags, then creates an internal list of available versions based on these tags. In the above example, composer's internal list includes versions `1.0`, `1.0.1`, `1.0.2`, the beta release of `1.1`, the first and second release candidates of `1.1`, the final release version `1.1`, etc.... (Note that Composer automatically removes the 'v' prefix in the actual tagname to get a valid final version number.)\n\nWhen Composer has a complete list of available versions from your VCS, it then finds the highest version that matches all version constraints in your project (it's possible that other packages require more specific versions of the library than you do, so the version it chooses may not always be the highest available version) and it downloads a zip archive of that tag to unpack in the correct location in your `vendor` directory.\n\n### Branches\n\nIf you want Composer to check out a branch instead of a tag, you need to point it to the branch using the special `dev-*` prefix (or sometimes suffix; see below). If you're checking out a branch, it's assumed that you want to *work* on the branch and Composer actually clones the repo into the correct place in your `vendor` directory. For tags, it copies the right files without actually cloning the repo. (You can modify this behavior with --prefer-source and --prefer-dist, see [install options](../03-cli.md#install).)\n\nIn the above example, if you wanted to check out the `my-feature` branch, you would specify `dev-my-feature` as the version constraint in your `require` clause. This would result in Composer cloning the `my-library` repository into my `vendor` directory and checking out the `my-feature` branch.\n\nWhen branch names look like versions, we have to clarify for Composer that we're trying to check out a branch and not a tag. In the above example, we have two version branches: `v1` and `v2`. To get Composer to check out one of these branches, you must specify a version constraint that looks like this: `v1.x-dev`. The `.x` is an arbitrary string that Composer requires to tell it that we're talking about the `v1` branch and not a `v1` tag (alternatively, you can name the branch `v1.x` instead of `v1`). In the case of a branch with a version-like name (`v1`, in this case), you append `-dev` as a suffix, rather than using `dev-` as a prefix.\n\n### Stabilities\n\nComposer recognizes the following stabilities (in order of stability): dev, alpha, beta, RC, and stable where RC stands for release candidate. The stability of a version is defined by its suffix e.g version `v1.1-BETA` has a stability of `beta` and `v1.1-RC1` has a stability of `RC`. If such a suffix is missing e.g. version `v1.1` then Composer considers that version `stable`. In addition to that Composer automatically adds a `-dev` suffix to all numeric branches and prefixes all other branches imported from a VCS repository with `dev-`. In both cases the stability `dev` gets assigned.\n\nKeeping this in mind will help you in the next section.\n\n### Minimum Stability\n\nThere's one more thing that will affect which files are checked out of a library's VCS and added to your project: Composer allows you to specify stability constraints to limit which tags are considered valid. In the above example, note that the library released a beta and two release candidates for version `1.1` before the final official release. To receive these versions when running `composer install` or `composer update`, we have to explicitly tell Composer that we are ok with release candidates and beta releases (and alpha releases, if we want those). This can be done using either a project-wide `minimum-stability` value in `composer.json` or using \"stability flags\" in version constraints. Read more on the [schema page](../04-schema.md#minimum-stability).\n\n## Writing Version Constraints\n\nNow that you have an idea of how Composer sees versions, let's talk about how to specify version constraints for your project dependencies.\n\n### Exact Version Constraint\n\nYou can specify the exact version of a package. This will tell Composer to install this version and this version only. If other dependencies require a different version, the solver will ultimately fail and abort any install or update procedures.\n\nExample: `1.0.2`\n\n### Version Range\n\nBy using comparison operators you can specify ranges of valid versions. Valid operators are `>`, `>=`, `<`, `<=`, `!=`.\n\nYou can define multiple ranges. Ranges separated by a space () or comma (`,`) will be treated as a **logical AND**. A double pipe (`||`) will be treated as a **logical OR**. AND has higher precedence than OR.\n\n> **Note:** Be careful when using unbounded ranges as you might end up unexpectedly installing versions that break backwards compatibility. Consider using the [caret](#caret-version-range-) operator instead for safety.\n\n> **Note:** In older versions of Composer the single pipe (`|`) was the recommended alternative to the **logical OR**. Thus for backwards compatibility the single pipe (`|`) will still be treated as a **logical OR**.\n\nExamples:\n\n- `>=1.0`\n- `>=1.0 <2.0`\n- `>=1.0 <1.1 || >=1.2`\n\n### Hyphenated Version Range (`-`)\n\nInclusive set of versions. Partial versions on the right include are completed with a wildcard. For example `1.0 - 2.0` is equivalent to `>=1.0.0 <2.1` as the `2.0` becomes `2.0.*`. On the other hand `1.0.0 - 2.1.0` is equivalent to `>=1.0.0 <=2.1.0`.\n\nExample: `1.0 - 2.0`\n\n### Wildcard Version Range (`.*`)\n\nYou can specify a pattern with a `*` wildcard. `1.0.*` is the equivalent of `>=1.0 <1.1`.\n\nExample: `1.0.*`\n\n## Next Significant Release Operators\n\n### Tilde Version Range (`~`)\n\nThe `~` operator is best explained by example: `~1.2` is equivalent to `>=1.2 <2.0.0`, while `~1.2.3` is equivalent to `>=1.2.3 <1.3.0`. As you can see it is mostly useful for projects respecting [semantic versioning](https://semver.org/). A common usage would be to mark the minimum minor version you depend on, like `~1.2` (which allows anything up to, but not including, 2.0). Since in theory there should be no backwards compatibility breaks until 2.0, that works well. Another way of looking at it is that using `~` specifies a minimum version, but allows the last digit specified to go up.\n\nExample: `~1.2`\n\n> **Note:** Although `2.0-beta.1` is strictly before `2.0`, a version constraint like `~1.2` would not install it. As said above `~1.2` only means the `.2` can change but the `1.` part is fixed.\n>\n> **Note:** The `~` operator has an exception on its behavior for the major release number. This means for example that `~1` is the same as `~1.0` as it will not allow the major number to increase trying to keep backwards compatibility.\n\n### Caret Version Range (`^`)\n\nThe `^` operator behaves very similarly, but it sticks closer to semantic versioning, and will always allow non-breaking updates. For example `^1.2.3` is equivalent to `>=1.2.3 <2.0.0` as none of the releases until 2.0 should break backwards compatibility. For pre-1.0 versions it also acts with safety in mind and treats `^0.3` as `>=0.3.0 <0.4.0` and `^0.0.3` as `>=0.0.3 <0.0.4`.\n\nThis is the recommended operator for maximum interoperability when writing library code.\n\nExample: `^1.2.3`\n\n## Stability Constraints\n\nIf you are using a constraint that does not explicitly define a stability, Composer will default internally to `-dev` or `-stable`, depending on the operator(s) used. This happens transparently.\n\nIf you wish to explicitly consider only the stable release in the comparison, add the suffix `-stable`.\n\nExamples:\n\n| Constraint     | Internally                   |\n|----------------|------------------------------|\n| `1.2.3`        | `=1.2.3.0-stable`            |\n| `>1.2`         | `>1.2.0.0-stable`            |\n| `>=1.2`        | `>=1.2.0.0-dev`              |\n| `>=1.2-stable` | `>=1.2.0.0-stable`           |\n| `<1.3`         | `<1.3.0.0-dev`               |\n| `<=1.3`        | `<=1.3.0.0-stable`           |\n| `1 - 2`        | `>=1.0.0.0-dev <3.0.0.0-dev` |\n| `~1.3`         | `>=1.3.0.0-dev <2.0.0.0-dev` |\n| `1.4.*`        | `>=1.4.0.0-dev <1.5.0.0-dev` |\n\nTo allow various stabilities without enforcing them at the constraint level however, you may use [stability-flags](../04-schema.md#package-links) like `@<stability>` (e.g. `@dev`) to let Composer know that a given package can be installed in a different stability than your default minimum-stability setting. All available stability flags are listed on the minimum-stability section of the [schema page](../04-schema.md#minimum-stability).\n\n## Summary\n\n``` javascript\n\"require\": {\n    \"vendor/package\": \"1.3.2\", // exactly 1.3.2\n\n    // >, <, >=, <= | specify upper / lower bounds\n    \"vendor/package\": \">=1.3.2\", // anything above or equal to 1.3.2\n    \"vendor/package\": \"<1.3.2\", // anything below 1.3.2\n\n    // * | wildcard\n    \"vendor/package\": \"1.3.*\", // >=1.3.0 <1.4.0\n\n    // ~ | allows last digit specified to go up\n    \"vendor/package\": \"~1.3.2\", // >=1.3.2 <1.4.0\n    \"vendor/package\": \"~1.3\", // >=1.3.0 <2.0.0\n\n    // ^ | doesn't allow breaking changes (major version fixed - following semver)\n    \"vendor/package\": \"^1.3.2\", // >=1.3.2 <2.0.0\n    \"vendor/package\": \"^0.3.2\", // >=0.3.2 <0.4.0 // except if major version is 0\n}\n```\n\n## Testing Version Constraints\n\nYou can test version constraints using [semver.madewithlove.com](https://semver.madewithlove.com). Fill in a package name and it will autofill the default version constraint which Composer would add to your `composer.json` file. You can adjust the version constraint and the tool will highlight all releases that match.\n\n© Nils Adermann, Jordi Boggiano  \nLicensed under the MIT License.  \n[https://getcomposer.org/doc/articles/versions.md](https://getcomposer.org/doc/articles/versions.md)"
