---
name: Sinon.JS
slug: sinon~15
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '15'
copyright: |-
  © 2010–2022 Christian Johansen
  Licensed under the BSD License.
  https://sinonjs.org/releases/v15/
homepage: https://sinonjs.org/

---
- name: Assertions
  id: assertions
  summary: Sinon.JS ships with a set of assertions that mirror most behavior verification methods and properties on spies and stubs
  description: "# Assertions\n\nSinon.JS ships with a set of assertions that mirror most behavior verification methods and properties on spies and stubs. The advantage of using the assertions is that failed expectations on stubs and spies can be expressed directly as assertion failures with detailed and helpful error messages.\n\nTo make sure assertions integrate nicely with your test framework, you should customize either `sinon.assert.fail` or `sinon.assert.failException` and look into `sinon.assert.expose` and `sinon.assert.pass`.\n\nThe assertions can be used with either spies or stubs.\n\n``` javascript\n\"test should call subscribers with message as first argument\" : function () {\n    var message = \"an example message\";\n    var spy = sinon.spy();\n\n    PubSub.subscribe(message, spy);\n    PubSub.publishSync(message, \"some payload\");\n\n    sinon.assert.calledOnce(spy);\n    sinon.assert.calledWith(spy, message);\n}\n```\n\n## Assertions API\n\n#### `sinon.assert.fail(message)`\n\nEvery assertion fails by calling this method.\n\nBy default it throws an error of type `sinon.assert.failException`.\n\nIf the test framework looks for assertion errors by checking for a specific exception, you can override the kind of exception thrown. If that does not fit with your testing framework of choice, override the `fail` method to do the right thing.\n\n#### `sinon.assert.failException;`\n\nDefaults to `AssertError`.\n\n#### `sinon.assert.pass(assertion);`\n\nCalled every time `assertion` passes.\n\nDefault implementation does nothing.\n\n#### `sinon.assert.notCalled(spy);`\n\nPasses if `spy` was never called\n\n#### `sinon.assert.called(spy);`\n\nPasses if `spy` was called at least once.\n\n#### `sinon.assert.calledOnce(spy);`\n\nPasses if `spy` was called once and only once.\n\n#### `sinon.assert.calledTwice(spy);`\n\nPasses if `spy` was called exactly twice.\n\n#### `sinon.assert.calledThrice(spy)`\n\nPasses if `spy` was called exactly three times.\n\n#### `sinon.assert.callCount(spy, num)`\n\nPasses if `spy` was called exactly `num` times.\n\n#### `sinon.assert.callOrder(spy1, spy2, ...)`\n\nPasses if provided spies were called in the specified order.\n\n#### `sinon.assert.calledOn(spyOrSpyCall, obj)`\n\nPasses if `spy` was ever called with `obj` as its `this` value.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledOn(spy.firstCall, arg1, arg2, ...);`.\n\n#### `sinon.assert.alwaysCalledOn(spy, obj)`\n\nPasses if `spy` was always called with `obj` as its `this` value.\n\n#### `sinon.assert.calledWith(spyOrSpyCall, arg1, arg2, ...);`\n\nPasses if `spy` was called with the provided arguments.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledWith(spy.firstCall, arg1, arg2, ...);`.\n\n#### `sinon.assert.alwaysCalledWith(spy, arg1, arg2, ...);`\n\nPasses if `spy` was always called with the provided arguments.\n\n#### `sinon.assert.neverCalledWith(spy, arg1, arg2, ...);`\n\nPasses if `spy` was never called with the provided arguments.\n\n#### `sinon.assert.calledWithExactly(spyOrSpyCall, arg1, arg2, ...);`\n\nPasses if `spy` was called with the provided arguments and no others.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledWithExactly(spy.getCall(1), arg1, arg2, ...);`.\n\n#### `sinon.assert.calledOnceWithExactly(spyOrSpyCall, arg1, arg2, ...);`\n\nPasses if `spy` was called once and only once with the provided arguments and no others.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledOnceWithExactly(spy.getCall(1), arg1, arg2, ...);`.\n\n#### `sinon.assert.alwaysCalledWithExactly(spy, arg1, arg2, ...);`\n\nPasses if `spy` was always called with the provided arguments and no others.\n\n#### `sinon.assert.calledWithMatch(spyOrSpyCall, arg1, arg2, ...)`\n\nPasses if `spy` was called with matching arguments.\n\nThis behaves the same way as `sinon.assert.calledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)`.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledWithMatch(spy.secondCall, arg1, arg2, ...);`.\n\n#### `sinon.assert.calledOnceWithMatch(spyOrSpyCall, arg1, arg2, ...)`\n\nPasses if `spy` was called once and only once with matching arguments.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledOnceWithMatch(spy.secondCall, arg1, arg2, ...);`.\n\n#### `sinon.assert.alwaysCalledWithMatch(spy, arg1, arg2, ...)`\n\nPasses if `spy` was always called with matching arguments.\n\nThis behaves the same way as `sinon.assert.alwaysCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)`.\n\n#### `sinon.assert.calledWithNew(spyOrSpyCall)`\n\nPasses if `spy` was called with the `new` operator.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.calledWithNew(spy.secondCall, arg1, arg2, ...);`.\n\n#### `sinon.assert.neverCalledWithMatch(spy, arg1, arg2, ...)`\n\nPasses if `spy` was never called with matching arguments.\n\nThis behaves the same way as `sinon.assert.neverCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)`.\n\n#### `sinon.assert.threw(spyOrSpyCall, exception);`\n\nPasses if `spy` threw the given exception.\n\nThe exception can be a `String` denoting its type, or an actual object.\n\nIf only one argument is provided, the assertion passes if `spy` ever threw any exception.\n\nIt’s possible to assert on a dedicated spy call: `sinon.assert.threw(spy.thirdCall, exception);`.\n\n#### `sinon.assert.alwaysThrew(spy, exception);`\n\nLike above, only required for all calls to the spy.\n\n#### `sinon.assert.match(actual, expectation);`\n\nUses [`sinon.match`](matchers) to test if the arguments can be considered a match.\n\n``` javascript\nvar sinon = require(\"sinon\");\n\ndescribe(\"example\", function () {\n  it(\"should match on `x` property, and ignore `y` property\", function () {\n    var expected = { x: 1 },\n      actual = { x: 1, y: 2 };\n\n    sinon.assert.match(actual, expected);\n  });\n});\n```\n\n#### `sinon.assert.expose(object, options);`\n\nExposes assertions into another object, to better integrate with the test framework. For instance, JsTestDriver uses global assertions, and to make Sinon.JS assertions appear alongside them, you can do.\n\n``` javascript\nsinon.assert.expose(this);\n```\n\nThis will give you `assertCalled(spy)`,`assertCallOrder(spy1, spy2, ...)` and so on.\n\nThe method accepts an optional options object with two options.\n\nprefix  \nis a prefix to give assertions. By default it is \"assert\", so `sinon.assert.called` becomes `target.assertCalled`. By passing a blank string, the exposed method will be `target.called`.\n\nincludeFail  \n`true` by default, copies over the `fail` and `failException` properties\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/assertions](https://sinonjs.org/releases/v15/assertions)"
- name: autoRespond
  id: fake-xhr-and-server#boolean-autorespond
  summary: If set, will automatically respond to every request after a timeout
  belongs_to: Fake XHR and server
  description: |-
    #### Boolean `autoRespond`

    If set, will automatically respond to every request after a timeout. **Default: false**.

    The default timeout is 10ms but you can control it through the `autoRespondAfter` property.

    Note that this feature is intended to help during mockup development, and is not suitable for use in tests. For synchronous immediate responses, use `respondImmediately` instead.
- name: autoRespondAfter()
  id: fake-xhr-and-server#number-autorespondafter-ms
  summary: Causes the server to automatically respond to incoming requests after a timeout
  belongs_to: Fake XHR and server
  description: |-
    #### Number `autoRespondAfter (ms)`

    Causes the server to automatically respond to incoming requests after a timeout. Requires `server.autoRespond` to be set to `true` to have an effect. If `server.respondImmediately` is set to `true`, this setting is ignored.
- name: clock.restore()
  id: fake-timers#clockrestore
  summary: Restore the faked methods
  belongs_to: Fake timers
  description: "#### `clock.restore();`\n\nRestore the faked methods.\n\nCall in e.g. `tearDown`.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/fake-timers](https://sinonjs.org/releases/v15/fake-timers)"
- name: expectation.atLeast()
  id: mocks#expectationatleastnumber
  summary: Specify the minimum amount of calls expected
  belongs_to: Mocks
  description: |-
    #### `expectation.atLeast(number);`

    Specify the minimum amount of calls expected.
- name: expectation.atMost()
  id: mocks#expectationatmostnumber
  summary: Specify the maximum amount of calls expected
  belongs_to: Mocks
  description: |-
    #### `expectation.atMost(number);`

    Specify the maximum amount of calls expected.
- name: expectation.exactly()
  id: mocks#expectationexactlynumber
  summary: Expect the method to be called exactly number times
  belongs_to: Mocks
  description: |-
    #### `expectation.exactly(number);`

    Expect the method to be called exactly `number` times.
- name: expectation.never()
  id: mocks#expectationnever
  summary: Expect the method to never be called
  belongs_to: Mocks
  description: |-
    #### `expectation.never();`

    Expect the method to never be called.
- name: expectation.on()
  id: mocks#expectationonobj
  summary: null
  belongs_to: Mocks
  description: |-
    #### `expectation.on(obj);`

    Expect the method to be called with `obj` as `this`.”}
- name: expectation.once()
  id: mocks#expectationonce
  summary: Expect the method to be called exactly once
  belongs_to: Mocks
  description: |-
    #### `expectation.once();`

    Expect the method to be called exactly once.
- name: expectation.thrice()
  id: mocks#expectationthrice
  summary: Expect the method to be called exactly thrice
  belongs_to: Mocks
  description: |-
    #### `expectation.thrice();`

    Expect the method to be called exactly thrice.
- name: expectation.twice()
  id: mocks#expectationtwice
  summary: Expect the method to be called exactly twice
  belongs_to: Mocks
  description: |-
    #### `expectation.twice();`

    Expect the method to be called exactly twice.
- name: expectation.verify()
  id: mocks#expectationverify
  summary: Verifies the expectation and throws an exception if it’s not met
  belongs_to: Mocks
  description: "#### `expectation.verify();`\n\nVerifies the expectation and throws an exception if it’s not met.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/mocks](https://sinonjs.org/releases/v15/mocks)"
- name: expectation.withArgs()
  id: mocks#expectationwithargsarg1-arg2-
  summary: Expect the method to be called with the provided arguments and possibly others
  belongs_to: Mocks
  description: |-
    #### `expectation.withArgs(arg1, arg2, ...);`

    Expect the method to be called with the provided arguments and possibly others.

    An `expectation` instance only holds onto a single set of arguments specified with `withArgs`. Subsequent calls will overwrite the previously-specified set of arguments (even if they are different), so it is generally not intended that this method be invoked more than once per test case.
- name: expectation.withExactArgs()
  id: mocks#expectationwithexactargsarg1-arg2-
  summary: Expect the method to be called with the provided arguments and no others
  belongs_to: Mocks
  description: |-
    #### `expectation.withExactArgs(arg1, arg2, ...);`

    Expect the method to be called with the provided arguments and no others.

    An `expectation` instance only holds onto a single set of arguments specified with `withExactArgs`. Subsequent calls will overwrite the previously-specified set of arguments (even if they are different), so it is generally not intended that this method be invoked more than once per test case.
- name: f.callback
  id: fakes#fcallback
  summary: This property is a convenience to get a reference to the last callback passed in the last to the fake
  belongs_to: Fakes
  description: |-
    #### `f.callback`

    This property is a convenience to get a reference to the last callback passed in the last to the fake. The same convenience has been added to [spy calls](spy-call#spycallcallback).
- name: f.firstArg
  id: fakes#ffirstarg
  summary: This property is a convenient way to get a reference to the first argument passed in the last call to the fake
  belongs_to: Fakes
  description: |-
    #### `f.firstArg`

    This property is a convenient way to get a reference to the first argument passed in the last call to the fake. The same convenience has been added to [spy calls](spy-call#spycallfirstarg).
- name: f.lastArg
  id: fakes#flastarg
  summary: This property is a convenient way to get a reference to the last argument passed in the last call to the fake
  belongs_to: Fakes
  description: "#### `f.lastArg`\n\nThis property is a convenient way to get a reference to the last argument passed in the last call to the fake. The same convenience has been added to [spy calls](spy-call#spycalllastarg).\n\n### Adding the fake to the system under test\n\nUnlike `sinon.spy` and `sinon.stub`, `sinon.fake` only knows about creating fakes, not about replacing properties in the system under test.\n\nTo replace a property, you can use the [`sinon.replace`](sandbox/index#sandboxreplaceobject-property-replacement) method. When you want to restore the replaced properties, call the `sinon.restore` method.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/fakes](https://sinonjs.org/releases/v15/fakes)"
- name: Fake timers
  id: fake-timers
  summary: Fake timers are synchronous implementations of setTimeout and friends that Sinon.JS can overwrite the global functions with to allow you to more easily test code using them
  description: "# Fake timers\n\nFake timers are synchronous implementations of `setTimeout` and friends that Sinon.JS can overwrite the global functions with to allow you to more easily test code using them.\n\nFake timers provide a `clock` object to pass time, which can also be used to control `Date` objects created through either `new Date();` or `Date.now();` (if supported by the browser).\n\nFor standalone usage of fake timers it is recommended to use [fake-timers](https://github.com/sinonjs/fake-timers) package instead. It provides the same set of features (Sinon uses it under the hood) and was previously extracted from Sinon.JS.\n\n``` javascript\n{\n    setUp: function () {\n        this.clock = sinon.useFakeTimers();\n    },\n\n    tearDown: function () {\n        this.clock.restore();\n    },\n\n    \"test should animate element over 500ms\" : function(){\n        var el = jQuery(\"<div></div>\");\n        el.appendTo(document.body);\n\n        el.animate({ height: \"200px\", width: \"200px\" });\n        this.clock.tick(510);\n\n        assertEquals(\"200px\", el.css(\"height\"));\n        assertEquals(\"200px\", el.css(\"width\"));\n    }\n}\n```\n\n## Fake timers API\n\n#### `var clock = sinon.useFakeTimers();`\n\nCauses Sinon to replace the global `setTimeout`, `clearTimeout`, `setInterval`, `clearInterval`, `setImmediate`, `clearImmediate`, `process.hrtime`, `performance.now`(when available) and `Date` with a custom implementation which is bound to the returned `clock` object.\n\nStarts the clock at the UNIX epoch (timestamp of `0`).\n\n#### `var clock = sinon.useFakeTimers(now);`\n\nAs above, but rather than starting the clock with a timestamp of 0, start at the provided timestamp `now`. You can also pass in a Date object, and its `getTime()` will be used for the starting timestamp.\n\n#### `var clock = sinon.useFakeTimers(config);`\n\nAs above, but allows further configuration options.\n\n- `config.now` - *Number/Date* - installs lolex with the specified unix epoch (default: 0)\n- `config.toFake` - *String\\[ \\]* - an array with explicit function names to fake. By default lolex will automatically fake all methods *except* `process.nextTick`. You could, however, still fake `nextTick` by providing it explicitly\n- `config.shouldAdvanceTime` - *Boolean* - tells lolex to increment mocked time automatically based on the real system time shift (default: false). When used in conjunction with `config.toFake`, it will only work if `'setInterval'` is included in `config.toFake`.\n- **`config.global`** - *Object* - use `global` instead of the usual global object. This is useful if you use JSDOM along with Node.\n\nThe options are basically all of those supported by the `install()` method of our `fake-timers` library, with the sole exception of `global`. Please refer to the `fakeTimers.install` [documentation](https://github.com/sinonjs/fake-timers/#var-clock--faketimersinstallconfig) for the full set of features available and more elaborate explanations.\n\n*Since `sinon@3.0.0`*\n\n`var clock = sinon.useFakeTimers([now, ]prop1, prop2, ...)` is no longer supported. To define which methods to fake, please use `config.toFake`.\n\n**Important note:** when faking `nextTick`, normal calls to `process.nextTick()` would not execute automatically as they would during normal event-loop phases. You would have to call either `clock.next()`, `clock.tick()`, `clock.runAll()` or `clock.runToLast()` (see example below). Please refer to the [lolex](https://github.com/sinonjs/lolex) documentation for more information.\n\n#### Examples\n\nInstalls fake timers at January 1st 2017 and fakes `setTimeout` and `process.nextTick` only:\n\n``` javascript\nvar clock = sinon.useFakeTimers({\n  now: 1483228800000,\n  toFake: [\"setTimeout\", \"nextTick\"],\n});\n\nvar called = false;\n\nprocess.nextTick(function () {\n  called = true;\n});\n\nclock.runAll(); //forces nextTick calls to flush synchronously\nassert(called); //true\n```\n\nInstall at the same date, advancing the fake time automatically (default is every `20ms`), causing timers to be fired automatically without the need to `tick()` the clock:\n\n``` javascript\nvar clock = sinon.useFakeTimers({\n  now: 1483228800000,\n  shouldAdvanceTime: true,\n});\n\nsetImmediate(function () {\n  console.log(\"tick\"); //will print after 20ms\n});\n\nsetTimeout(function () {\n  console.log(\"tock\"); //will print after 20ms\n}, 15);\n\nsetTimeout(function () {\n  console.log(\"tack\"); //will print after 40ms\n}, 35);\n```\n\nUsing fake timers with `async` / `await`:\n\n``` javascript\nasync function asyncFn() {\n\n    await wait(100);\n\n    console.log('resolved 1', Date.now());\n\n    await wait(10);\n\n    console.log('resolved 2', Date.now());\n}\n\nasync function test() {\n\n    const clock = sinon.useFakeTimers();\n\n    setTimeout(() => console.log('timeout', Date.now()), 200);\n\n    asyncFn(); // NOTE: no `await` here - it would hang, as the clock is stopped\n\n    await clock.tickAsync(200);\n}\n\n// test() prints:\n// - resolved 1 100\n// - resolved 2 110\n// - timeout 200\n```\n\nNote that in the above example, the synchronous `clock.tick(200)` would only print `timeout 200` and `resolved 1 200`.\n\n#### `clock.tick(time);` / `await clock.tickAsync(time)`\n\nTick the clock ahead `time` milliseconds.\n\nCauses all timers scheduled within the affected time range to be called. `time` may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are “08” for eight seconds, “01:00” for one minute and “02:34:10” for two hours, 34 minutes and ten seconds.\n\nThe `tickAsync()` will also break the event loop, allowing any scheduled promise callbacks to execute *before* running the timers.\n\n#### `clock.next();` / `await clock.nextAsync()`\n\nAdvances the clock to the the moment of the first scheduled timer, firing it.\n\nThe `nextAsync()` will also break the event loop, allowing any scheduled promise callbacks to execute *before* running the timers.\n\n#### `clock.runAll();` / `await clock.runAllAsync()`\n\nThis runs all pending timers until there are none remaining. If new timers are added while it is executing they will be run as well.\n\nThis makes it easier to run asynchronous tests to completion without worrying about the number of timers they use, or the delays in those timers.\n\nThe `runAllAsync()` will also break the event loop, allowing any scheduled promise callbacks to execute *before* running the timers.\n\n#### `clock.restore();`\n\nRestore the faked methods.\n\nCall in e.g. `tearDown`.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/fake-timers](https://sinonjs.org/releases/v15/fake-timers)"
- name: Fake XHR and server
  id: fake-xhr-and-server
  summary: Provides a fake implementation of XMLHttpRequest and provides several interfaces for manipulating objects created by it
  description: "# Fake XHR and server\n\n## Fake `XMLHttpRequest`\n\nProvides a fake implementation of `XMLHttpRequest` and provides several interfaces for manipulating objects created by it.\n\nAlso fakes native `XMLHttpRequest` and `ActiveXObject` (when available, and only for `XMLHTTP` progids). Helps with testing requests made with `XHR`.\n\nThe fake server and XHR can be used completely stand-alone by downloading `sinon-server.js`.\n\n``` javascript\n{\n    setUp: function () {\n        this.xhr = sinon.useFakeXMLHttpRequest();\n        var requests = this.requests = [];\n\n        this.xhr.onCreate = function (xhr) {\n            requests.push(xhr);\n        };\n    },\n\n    tearDown: function () {\n        this.xhr.restore();\n    },\n\n    \"test should fetch comments from server\" : function () {\n        var callback = sinon.spy();\n        myLib.getCommentsFor(\"/some/article\", callback);\n        assertEquals(1, this.requests.length);\n\n        this.requests[0].respond(200, { \"Content-Type\": \"application/json\" },\n                                 '[{ \"id\": 12, \"comment\": \"Hey there\" }]');\n        assert(callback.calledWith([{ id: 12, comment: \"Hey there\" }]));\n    }\n}\n```\n\n### `sinon.useFakeXMLHttpRequest`\n\n#### `var xhr = sinon.useFakeXMLHttpRequest();`\n\nCauses Sinon to replace the native `XMLHttpRequest` object in browsers that support it with a custom implementation which does not send actual requests.\n\nIn browsers that support `ActiveXObject`, this constructor is replaced, and fake objects are returned for `XMLHTTP` progIds. Other progIds, such as `XMLDOM` are left untouched.\n\nThe native `XMLHttpRequest` object will be available at `sinon.xhr.XMLHttpRequest`\n\n#### `xhr.onCreate = function (xhr) {};`\n\nBy assigning a function to the `onCreate` property of the returned object from `useFakeXMLHttpRequest()` you can subscribe to newly created `FakeXMLHttpRequest` objects. See below for the fake xhr object API.\n\nUsing this observer means you can still reach objects created by e.g. `jQuery.ajax` (or other abstractions/frameworks).\n\n#### `xhr.restore();`\n\nRestore original function(s).\n\n### `FakeXMLHttpRequest`\n\n#### `String request.url`\n\nThe URL set on the request object.\n\n#### `String request.method`\n\nThe request method as a string.\n\n#### `Object request.requestHeaders`\n\nAn object of all request headers, i.e.:\n\n``` javascript\n{\n    \"Accept\": \"text/html, */*\",\n    \"Connection\": \"keep-alive\"\n}\n```\n\n#### `String request.requestBody`\n\nThe request body\n\n#### `int request.status`\n\nThe request’s status code.\n\n`undefined` if the request has not been handled (see [`respond`](#serverrespond) below)\n\n#### `String request.statusText`\n\nOnly populated if the [`respond`](#serverrespond) method is called (see below).\n\n#### `boolean request.async`\n\nWhether or not the request is asynchronous.\n\n#### `String request.username`\n\nUsername, if any.\n\n#### `String request.password`\n\nPassword, if any.\n\n#### `Document request.responseXML`\n\nWhen using [`respond`](#serverrespond), this property is populated with a parsed document if response headers indicate as much (see [the spec](http://www.w3.org/TR/XMLHttpRequest/))\n\n#### `String request.getResponseHeader(header);`\n\nThe value of the given response header, if the request has been responded to (see [`respond`](#serverrespond)).\n\n#### `Object request.getAllResponseHeaders();`\n\nAll response headers as an object.\n\n### Filtered requests\n\nWhen using Sinon.JS for mockups or partial integration/functional testing, you might want to fake some requests, while allowing others to go through to the backend server. With filtered `FakeXMLHttpRequest`s (new in v1.3.0), you can.\n\n#### `FakeXMLHttpRequest.useFilters`\n\nDefault `false`.\n\nWhen set to `true`, Sinon will check added filters if certain requests should be “unfaked”\n\n#### `FakeXMLHttpRequest.addFilter(fn)`\n\nAdd a filter that will decide whether or not to fake a request.\n\nThe filter will be called when `xhr.open` is called, with the exact same arguments (`method`, `url`, `async`, `username`, `password`). If the filter returns `true`, the request will not be faked.\n\n### Simulating server responses\n\n#### `request.setStatus(status);`\n\nSets response status (`status` and `statusText` properties).\n\nStatus should be a number, the status text is looked up from `sinon.FakeXMLHttpRequest.statusCodes`.\n\n#### `request.setResponseHeaders(object);`\n\nSets response headers (e.g. `{ \"Content-Type\": \"text/html\", /* ... */ }`, updates the `readyState` property and fires `onreadystatechange`.\n\n#### `request.setResponseBody(body);`\n\nSets the respond body, updates the `readyState` property and fires `onreadystatechange`.\n\nAdditionally, populates `responseXML` with a parsed document if [response headers indicate as much](http://www.w3.org/TR/XMLHttpRequest/).\n\n#### `request.respond(status, headers, body);`\n\nCalls the above three methods.\n\n#### `request.error();`\n\nSimulates a network error on the request. The `onerror` handler will be called and the `status` will be `0`.\n\n#### `Boolean request.autoRespond`\n\nWhen set to `true`, causes the server to automatically respond to incoming requests after a timeout.\n\nThe default timeout is 10ms but you can control it through the `autoRespondAfter` property.\n\nNote that this feature is intended to help during mockup development, and is not suitable for use in tests.\n\n#### `Number request.autoRespondAfter`\n\nWhen `autoRespond` is `true`, respond to requests after this number of milliseconds. Default is 10.\n\n## Fake server\n\nHigh-level API to manipulate `FakeXMLHttpRequest` instances.\n\n``` javascript\n// example.test.js in Mocha TDD\nvar sinon = require(\"sinon\");\n\nsuite(\"sinon.fakeServer\", function () {\n  setup(function () {\n    this.server = sinon.fakeServer.create();\n  });\n\n  teardown(function () {\n    this.server.restore();\n  });\n\n  test(\"test should fetch comments from server\", function () {\n    this.server.respondWith(\"GET\", \"/some/article/comments.json\", [\n      200,\n      { \"Content-Type\": \"application/json\" },\n      '[{ \"id\": 12, \"comment\": \"Hey there\" }]',\n    ]);\n\n    var callback = sinon.spy();\n    myLib.getCommentsFor(\"/some/article\", callback);\n    this.server.respond();\n\n    sinon.assert.calledWith(callback, [{ id: 12, comment: \"Hey there\" }]);\n\n    assert(server.requests.length > 0);\n  });\n});\n```\n\n### Methods\n\n#### `var server = sinon.fakeServer.create([config]);`\n\nCreates a new server.\n\nThis function also calls `sinon.useFakeXMLHttpRequest()`.\n\n`create()` accepts an optional properties object to configure the fake server. See [Configuration Properties](#configuration-properties) below for available options.\n\n#### `var server = sinon.fakeServerWithClock.create();`\n\nCreates a server that also manages fake timers.\n\nThis is useful when testing `XHR` objects created with e.g. jQuery 1.3.x, which uses a timer to poll the object for completion, rather than the usual `onreadystatechange`.\n\nJust as a `create()` above, an optional properties object can be provided to set configuration parameters during instantiation.\n\n#### `server.configure(config);`\n\nChanges the configuration the fake server after it has been created.\n\nThis can be useful for changing the delay of an automatic response for a specific test requirement. For more options, see [Configuration Properties](#configuration-properties) below.\n\n#### `server.respondWith(response);`\n\nCauses the server to respond to any request not matched by another response with the provided data. The default catch-all response is `[404, {}, \"\"]`.\n\n`response` can be one of three things:\n\n1.  A `String` representing the response body\n2.  An `Array` with status, headers and response body, e.g. `[200, { \"Content-Type\": \"text/html\", \"Content-Length\": 2 }, \"OK\"]`\n3.  A `Function`.\n\nDefault status is 200 and default headers are none.\n\nWhen the response is a `Function`, it will be passed the request object. You must manually call [respond](#serverrespond) on it to complete the request.\n\n#### `server.respondWith(url, response);`\n\nResponds to all requests to given URL, e.g. `/posts/1`.\n\n#### `server.respondWith(method, url, response);`\n\nResponds to all `method` requests to the given URL with the given response.\n\n`method` is an HTTP verb.\n\n#### `server.respondWith(urlRegExp, response);`\n\nURL may be a regular expression, e.g. `/\\\\/post\\\\//\\\\d+`\n\nIf the response is a `Function`, it will be passed any capture groups from the regular expression along with the XMLHttpRequest object:\n\n``` javascript\nserver.respondWith(/\\/todo-items\\/(\\d+)/, function (xhr, id) {\n  xhr.respond(\n    200,\n    { \"Content-Type\": \"application/json\" },\n    '[{ \"id\": ' + id + \" }]\"\n  );\n});\n```\n\n#### `server.respondWith(method, urlRegExp, response);`\n\nResponds to all `method` requests to URLs matching the regular expression.\n\n#### `server.respond();`\n\nCauses all queued asynchronous requests to receive a response.\n\nIf none of the responses added through `respondWith()` match, the default response is `[404, {}, \"\"]`.\n\nSynchronous requests are responded to immediately so make sure to call `respondWith()` to configure the server response before calling `respond()`. If not, you will receive the default `404 NOT FOUND` response.\n\nIf called with arguments, `respondWith()` will be called with those arguments before responding to requests.\n\n#### `server.getHTTPMethod(request)`\n\nUsed internally to determine the HTTP method used with the provided request.\n\nBy default this method returns `request.method`. When `server.fakeHTTPMethods` is true, the method will return the value of the `_method` parameter if the method is “POST”.\n\nThis method can be overridden to provide custom behavior.\n\n#### `server.restore();`\n\nRestores the native XHR constructor.\n\n### Properties\n\n#### Array\\[\\] `server.requests`\n\n`server.requests` is an array of all the `FakeXMLHttpRequest` objects that have been created.\n\nThis property allows you to inspect the received requests to verify request ordering, find unmatched requests or check that no requests has been done.\n\n### Configuration Properties\n\nThe Fake Server exposes configurable properties to modify the behavior of the server as desired. These properties can be set directly or with an object literal passed into `create(options)` and/or `server.configure(options)`.\n\n``` javascript\n// Defaults\nserver.autoRespond = false;\nserver.autoRespondAfter = 10; // in milliseconds\nserver.respondImmediately = false;\nserver.fakeHTTPMethods = false;\n\n// configure fakeServer to autoRespond\nserver.autoRespond = true;\n\n// Change server now to respondImmediately\nserver.configure({ respondImmediately: true });\n```\n\n#### Boolean `autoRespond`\n\nIf set, will automatically respond to every request after a timeout. **Default: false**.\n\nThe default timeout is 10ms but you can control it through the `autoRespondAfter` property.\n\nNote that this feature is intended to help during mockup development, and is not suitable for use in tests. For synchronous immediate responses, use `respondImmediately` instead.\n\n#### Number `autoRespondAfter (ms)`\n\nCauses the server to automatically respond to incoming requests after a timeout. Requires `server.autoRespond` to be set to `true` to have an effect. If `server.respondImmediately` is set to `true`, this setting is ignored.\n\n#### Boolean `respondImmediately`\n\nIf set, the server will respond to every request immediately and synchronously. **Default: false**\n\nThis is ideal for faking the server from within a test without having to call `server.respond()` after each request made in that test.\n\nAs this is synchronous and immediate, this is not suitable for simulating actual network latency in tests or mockups. To simulate network latency with automatic responses, see `autoRespond` and `autoRespondAfter` properties. If `server.respondImmediately == true`, it will override all `autoRespond` behavior.\n\n#### Boolean `fakeHTTPMethods`\n\nIf set to `true`, server will find `_method` parameter in POST body and recognize that as the actual method.\n\nSupports a pattern common to Ruby on Rails applications. For custom HTTP method faking, override `server.getHTTPMethod(request)`.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/fake-xhr-and-server](https://sinonjs.org/releases/v15/fake-xhr-and-server)"
- name: fakeHTTPMethods
  id: fake-xhr-and-server#boolean-fakehttpmethods
  summary: If set to true, server will find _method parameter in POST body and recognize that as the actual method
  belongs_to: Fake XHR and server
  description: "#### Boolean `fakeHTTPMethods`\n\nIf set to `true`, server will find `_method` parameter in POST body and recognize that as the actual method.\n\nSupports a pattern common to Ruby on Rails applications. For custom HTTP method faking, override `server.getHTTPMethod(request)`.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/fake-xhr-and-server](https://sinonjs.org/releases/v15/fake-xhr-and-server)"
- name: Fakes
  id: fakes
  summary: fake is available in Sinon from v5 onwards
  description: "# Fakes\n\n### Introduction\n\n`fake` is available in Sinon from v5 onwards. It allows creation of a `fake` `Function` with the ability to set a default [behavior](#fakes-with-behavior). The available [behaviors](#fakes-with-behavior) for the most part match the API of a [`sinon.stub`](stubs).\n\nIn Sinon, a `fake` is a `Function` that records arguments, return value, the value of `this` and exception thrown (if any) for all of its calls.\n\nA fake is immutable: once created, the behavior will not change.\n\nUnlike [`sinon.spy`](spies) and [`sinon.stub`](stubs) methods, the `sinon.fake` API knows only how to create fakes, and doesn’t concern itself with plugging them into the system under test. To plug the fakes into the system under test, you can use the [`sinon.replace*`](sandbox#sandboxreplaceobject-property-replacement) methods.\n\n### When to use fakes?\n\nFakes are alternatives to the Stubs and Spies, and they can fully replace all such use cases.\n\nThey are intended to be simpler to use, and avoids many bugs by having immutable behaviour.\n\nThe created `fake` `Function`, with or without behavior has the same API as a (`sinon.spy`)[spies](spies).\n\n#### Using fakes instead of spies\n\n#### Using fakes instead of stubs\n\n### Creating a fake\n\nCreate a `fake` `Function` with or without [behavior](#fakes-with-behavior). The created `Function` has the same API as a [`sinon.spy`](spies).\n\n#### Creating a fake without behavior\n\n#### Creating a fake with custom behaviour\n\n### Fakes with behavior\n\nFakes cannot change once created with behaviour.\n\n#### `sinon.fake.returns(value);`\n\nCreates a fake that returns the `value` argument.\n\n#### `sinon.fake.throws(value);`\n\nCreates a fake that throws an `Error` with the provided value as the `message` property.\n\nIf an `Error` is passed as the `value` argument, then that will be the thrown value. If any other value is passed, then that will be used for the `message` property of the thrown `Error`.\n\n#### `sinon.fake.resolves(value);`\n\nCreates a fake that returns a resolved `Promise` for the passed value.\n\n#### `sinon.fake.rejects(value);`\n\nCreates a fake that returns a rejected `Promise` for the passed value.\n\nIf an `Error` is passed as the `value` argument, then that will be the value of the promise. If any other value is passed, then that will be used for the `message` property of the `Error` returned by the promise.\n\n#### `sinon.fake.yields([value1, ..., valueN]);`\n\n`sinon.fake.yields` takes some values, and returns a function that when being called, expects the last argument to be a callback and invokes that callback with the same previously given values. The returned function is normally used to fake a service function that takes a callback as the last argument.\n\nIn code example below, the ‘[readFile](https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback)’ function of the ‘fs’ module is replaced with a fake function created by `sinon.fake.yields`. When the fake function is called, it always calls the last argument it received, which is expected to be a callback, with the values that the `yields` function previously took.\n\n#### `sinon.fake.yieldsAsync([value1, ..., valueN]);`\n\nSimilar to `yields`, `yieldsAsync` also returns a function that when invoked, the function expects the last argument to be a callback and invokes that callback with the same previously given values. However, the returned function invokes that callback asynchronously rather than immediately, i.e. in the next event loop.\n\nCompare the code example below with the code example above for `yields` to see the difference.\n\n#### `sinon.fake(func);`\n\nWraps an existing `Function` to record all interactions, while leaving it up to the `func` to provide the behavior.\n\nThe created `fake` `Function` has the same API as a [`sinon.spy`](spies).\n\nThis is useful when complex behavior not covered by the `sinon.fake.*` methods is required or when wrapping an existing function or method.\n\n### Instance properties\n\nThe instance properties are the same as those of a [`sinon.spy`](spies). The following examples showcase just a few of the properties available to you. Refer to the [spy docs](spies) for a complete list.\n\n#### `f.callback`\n\nThis property is a convenience to get a reference to the last callback passed in the last to the fake. The same convenience has been added to [spy calls](spy-call#spycallcallback).\n\n#### `f.firstArg`\n\nThis property is a convenient way to get a reference to the first argument passed in the last call to the fake. The same convenience has been added to [spy calls](spy-call#spycallfirstarg).\n\n#### `f.lastArg`\n\nThis property is a convenient way to get a reference to the last argument passed in the last call to the fake. The same convenience has been added to [spy calls](spy-call#spycalllastarg).\n\n### Adding the fake to the system under test\n\nUnlike `sinon.spy` and `sinon.stub`, `sinon.fake` only knows about creating fakes, not about replacing properties in the system under test.\n\nTo replace a property, you can use the [`sinon.replace`](sandbox/index#sandboxreplaceobject-property-replacement) method. When you want to restore the replaced properties, call the `sinon.restore` method.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/fakes](https://sinonjs.org/releases/v15/fakes)"
- name: FakeXMLHttpRequest.addFilter()
  id: fake-xhr-and-server#fakexmlhttprequestaddfilterfn
  summary: Add a filter that will decide whether or not to fake a request
  belongs_to: Fake XHR and server
  description: |-
    #### `FakeXMLHttpRequest.addFilter(fn)`

    Add a filter that will decide whether or not to fake a request.

    The filter will be called when `xhr.open` is called, with the exact same arguments (`method`, `url`, `async`, `username`, `password`). If the filter returns `true`, the request will not be faked.

    ### Simulating server responses
- name: FakeXMLHttpRequest.useFilters
  id: fake-xhr-and-server#fakexmlhttprequestusefilters
  summary: Default false
  belongs_to: Fake XHR and server
  description: |-
    #### `FakeXMLHttpRequest.useFilters`

    Default `false`.

    When set to `true`, Sinon will check added filters if certain requests should be “unfaked”
- name: General setup
  id: general-setup
  summary: We will be making fakes, spies and stubs
  description: "# General setup\n\nWe will be making fakes, spies and stubs. By default these are created in the *default sandbox*. Be sure to `restore` this sandbox after each test.\n\nFor example, if you’re using mocha you can place this in a test file at the root level:\n\n``` javascript\nafterEach(() => {\n  // Restore the default sandbox here\n  sinon.restore();\n});\n```\n\nOn Mocha v8.0.0 or newer you can now add a root hook to your entire test suite, which will execute before/after every test:\n\n``` javascript\n// tests/hooks.js\n\n// Restores the default sandbox after every test\nexports.mochaHooks = {\n  afterEach() {\n    sinon.restore();\n  },\n};\n```\n\nThis root file needs to be loaded using the `--require` option:\n\n``` javascript\nmocha --require tests/hooks.js\n```\n\nOr in Jasmine you should place it in each describe:\n\n``` javascript\ndescribe(\"My test suite\", () => {\n  afterEach(() => {\n    // Restore the default sandbox here\n    sinon.restore();\n  });\n});\n```\n\nForgetting to restore your sandbox results in a memory leak.\n\nFor more advanced setups using multiple sandboxes, please see [sandbox](sandbox)\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/general-setup](https://sinonjs.org/releases/v15/general-setup)"
- name: JSON-P
  id: json-p
  summary: JSON-P doesn’t use XHR requests, which is what the fake server is concerned with
  description: "# JSON-P\n\nJSON-P doesn’t use `XHR` requests, which is what the fake server is concerned with. A JSON-P request creates a script element and inserts it into the document.\n\nThere is no sufficiently unobtrusive way to fake this automatically. The best option is to stub jQuery in this case:\n\n``` javascript\nsinon.stub(jQuery, \"ajax\");\nsinon.assert.calledOnce(jQuery.ajax);\n```\n\nWe could potentially have had the fake server detect `jQuery` and fake any calls to `jQuery.ajax` when JSON-P is used, but that felt like a compromise in the focus of the Sinon project compared to only documenting the above practice.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/json-p](https://sinonjs.org/releases/v15/json-p)"
- name: Matchers
  id: matchers
  summary: Matchers can be passed as arguments to spy.calledOn, spy.calledWith, spy.returned and the corresponding sinon.assert functions as well as spy.withArgs
  description: "# Matchers\n\nMatchers can be passed as arguments to `spy.calledOn`, `spy.calledWith`, `spy.returned` and the corresponding `sinon.assert` functions as well as `spy.withArgs`. Matchers allow to be either more fuzzy or more specific about the expected value.\n\n``` javascript\n\"test should assert fuzzy\": function () {\n    var book = {\n        pages: 42,\n        author: \"cjno\"\n        id: {\n          isbn10: \"0596517742\",\n          isbn13: \"978-0596517748\"\n        }\n    };\n    var spy = sinon.spy();\n\n    spy(book);\n\n    sinon.assert.calledWith(spy, sinon.match({ author: \"cjno\" }));\n    sinon.assert.calledWith(spy, sinon.match.has(\"pages\", 42));\n    sinon.assert.calledWith(spy, sinon.match.has(\"id\", sinon.match.has(\"isbn13\", \"978-0596517748\")));\n}\n```\n\n``` javascript\n\"test should stub method differently based on argument types\": function () {\n    var callback = sinon.stub();\n    callback.withArgs(sinon.match.string).returns(true);\n    callback.withArgs(sinon.match.number).throws(\"TypeError\");\n\n    callback(\"abc\"); // Returns true\n    callback(123); // Throws TypeError\n}\n```\n\n## Matchers API\n\n#### `sinon.match(number);`\n\nRequires the value to be == to the given number.\n\n#### `sinon.match(string);`\n\nRequires the value to be a string and have the expectation as a substring.\n\n#### `sinon.match(regexp);`\n\nRequires the value to be a string and match the given regular expression.\n\n#### `sinon.match(object);`\n\nRequires the value to be not `null` or `undefined` and have at least the same properties as `expectation`.\n\nThis supports nested matchers.\n\n#### `sinon.match(function)`\n\nSee `custom matchers`.\n\n#### `sinon.match.any`\n\nMatches anything.\n\n#### `sinon.match.defined`\n\nRequires the value to be defined.\n\n#### `sinon.match.truthy`\n\nRequires the value to be truthy.\n\n#### `sinon.match.falsy`\n\nRequires the value to be falsy.\n\n#### `sinon.match.bool`\n\nRequires the value to be a `Boolean`\n\n#### `sinon.match.number`\n\nRequires the value to be a `Number`.\n\n#### `sinon.match.string`\n\nRequires the value to be a `String`.\n\n#### `sinon.match.object`\n\nRequires the value to be an `Object`.\n\n#### `sinon.match.func`\n\nRequires the value to be a `Function`.\n\n#### `sinon.match.array`\n\nRequires the value to be an `Array`.\n\n#### `sinon.match.array.deepEquals(arr)`\n\nRequires an `Array` to be deep equal another one.\n\n#### `sinon.match.array.startsWith(arr)`\n\nRequires an `Array` to start with the same values as another one.\n\n#### `sinon.match.array.endsWith(arr)`\n\nRequires an `Array` to end with the same values as another one.\n\n#### `sinon.match.array.contains(arr)`\n\nRequires an `Array` to contain each one of the values the given array has.\n\n#### `sinon.match.map`\n\nRequires the value to be a `Map`.\n\n#### `sinon.match.map.deepEquals(map)`\n\nRequires a `Map` to be deep equal another one.\n\n#### `sinon.match.map.contains(map)`\n\nRequires a `Map` to contain each one of the items the given map has.\n\n#### `sinon.match.set`\n\nRequires the value to be a `Set`.\n\n#### `sinon.match.set.deepEquals(set)`\n\nRequires a `Set` to be deep equal another one.\n\n#### `sinon.match.set.contains(set)`\n\nRequires a `Set` to contain each one of the items the given set has.\n\n#### `sinon.match.regexp`\n\nRequires the value to be a regular expression.\n\n#### `sinon.match.date`\n\nRequires the value to be a `Date` object.\n\n#### `sinon.match.symbol`\n\nRequires the value to be a `Symbol`.\n\n#### `sinon.match.in(array)`\n\nRequires the value to be in the `array`.\n\n#### `sinon.match.same(ref)`\n\nRequires the value to strictly equal `ref`.\n\n#### `sinon.match.typeOf(type)`\n\nRequires the value to be of the given type, where `type` can be one of `\"undefined\"`, `\"null\"`, `\"boolean\"`, `\"number\"`, `\"string\"`, `\"object\"`, `\"function\"`, `\"array\"`, `\"regexp\"`, `\"date\"` or `\"symbol\"`.\n\n#### `sinon.match.instanceOf(type)`\n\nRequires the value to be an instance of the given `type`.\n\n#### `sinon.match.has(property[, expectation])`\n\nRequires the value to define the given `property`.\n\nThe property might be inherited via the prototype chain. If the optional expectation is given, the value of the property is deeply compared with the expectation. The expectation can be another matcher.\n\n#### `sinon.match.hasOwn(property[, expectation])`\n\nSame as `sinon.match.has` but the property must be defined by the value itself. Inherited properties are ignored.\n\n#### `sinon.match.hasNested(propertyPath[, expectation])`\n\nRequires the value to define the given `propertyPath`. Dot (`prop.prop`) and bracket (`prop[0]`) notations are supported as in [Lodash.get](https://lodash.com/docs/4.4.2#get).\n\nThe propertyPath might be inherited via the prototype chain. If the optional expectation is given, the value at the propertyPath is deeply compared with the expectation. The expectation can be another matcher.\n\n``` javascript\nsinon.match.hasNested(\"a[0].b.c\");\n\n// Where actual is something like\nvar actual = { a: [{ b: { c: 3 } }] };\n\nsinon.match.hasNested(\"a.b.c\");\n\n// Where actual is something like\nvar actual = { a: { b: { c: 3 } } };\n```\n\n#### `sinon.match.every(matcher)`\n\nRequires **every** element of an `Array`, `Set` or `Map`, or alternatively **every** value of an `Object` to match the given `matcher`.\n\n#### `sinon.match.some(matcher)`\n\nRequires **any** element of an `Array`, `Set` or `Map`, or alternatively **any** value of an `Object` to match the given `matcher`.\n\n## Combining matchers\n\nAll matchers implement `and` and `or`. This allows to logically combine multiple matchers. The result is a new matcher that requires both (and) or one of the matchers (or) to return `true`.\n\n``` javascript\nvar stringOrNumber = sinon.match.string.or(sinon.match.number);\nvar bookWithPages = sinon.match.instanceOf(Book).and(sinon.match.has(\"pages\"));\n```\n\n## Custom matchers\n\nCustom matchers are created with the `sinon.match` factory which takes a test function and an optional message.\n\nThe test function takes a value as the only argument, returns `true` if the value matches the expectation and `false` otherwise. The message string is used to generate the error message in case the value does not match the expectation.\n\n``` javascript\nvar trueIsh = sinon.match(function (value) {\n  return !!value;\n}, \"trueIsh\");\n```\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/matchers](https://sinonjs.org/releases/v15/matchers)"
- name: mock.expects()
  id: mocks#var-expectation--mockexpectsmethod
  summary: Overrides obj.method with a mock function and returns it
  belongs_to: Mocks
  description: |-
    #### `var expectation = mock.expects("method");`

    Overrides `obj.method` with a mock function and returns it.

    See [expectations](#expectations) below.
- name: mock.restore()
  id: mocks#mockrestore
  summary: Restores all mocked methods
  belongs_to: Mocks
  description: |-
    #### `mock.restore();`

    Restores all mocked methods.
- name: mock.usingPromise()
  id: mocks#mockusingpromisepromiselibrary
  summary: Causes all expectations created from the mock to return promises using a specific Promise library instead of the global one when using expectation.rejects or expectation.resolves
  belongs_to: Mocks
  description: |-
    #### `mock.usingPromise(promiseLibrary);`

    Causes all expectations created from the mock to return promises using a specific Promise library instead of the global one when using `expectation.rejects` or `expectation.resolves`. Returns the mock object to allow chaining.

    *Since `sinon@6.2.0`*

    ### Expectations

    All the expectation methods return the expectation, meaning you can chain them.

    Typical usage:

    ``` javascript
    sinon.mock(jQuery).expects("ajax").atLeast(2).atMost(5);
    jQuery.ajax.verify();
    ```
- name: mock.verify()
  id: mocks#mockverify
  summary: Verifies all expectations on the mock
  belongs_to: Mocks
  description: |-
    #### `mock.verify();`

    Verifies all expectations on the mock.

    If any expectation is not satisfied, an exception is thrown.

    Also restores the mocked methods.
- name: Mocks
  id: mocks
  summary: Mocks (and mock expectations) are fake methods (like spies) with pre-programmed behavior (like stubs) as well as pre-programmed expectations
  description: "# Mocks\n\n### Introduction\n\n### What are mocks?\n\nMocks (and mock expectations) are fake methods (like spies) with pre-programmed behavior (like stubs) as well as **pre-programmed expectations**.\n\nA mock will fail your test if it is not used as expected.\n\n### When to use mocks?\n\nMocks should only be used for the *method under test*. In every unit test, there should be one unit under test.\n\nIf you want to control how your unit is being used and like stating expectations upfront (as opposed to asserting after the fact), use a mock.\n\n### When to **not** use mocks?\n\nMocks come with built-in expectations that may fail your test.\n\nThus, they enforce implementation details. The rule of thumb is: if you wouldn’t add an assertion for some specific call, don’t mock it. Use a stub instead.\n\nIn general you should have **no more than one** mock (possibly with several expectations) in a single test.\n\n[Expectations](#expectations) implement both the [spies](spies) and [stubs](stubs) APIs.\n\nTo see what mocks look like in Sinon.JS, here is one of the [PubSubJS](https://github.com/mroderick/pubsubjs) tests again, this time using a method as callback and using mocks to verify its behavior\n\n``` javascript\n\"test should call all subscribers when exceptions\": function () {\n    var myAPI = { method: function () {} };\n\n    var spy = sinon.spy();\n    var mock = sinon.mock(myAPI);\n    mock.expects(\"method\").once().throws();\n\n    PubSub.subscribe(\"message\", myAPI.method);\n    PubSub.subscribe(\"message\", spy);\n    PubSub.publishSync(\"message\", undefined);\n\n    mock.verify();\n    assert(spy.calledOnce);\n}\n```\n\n## Mocks API\n\n### Properties\n\n#### `var mock = sinon.mock(obj);`\n\nCreates a mock for the provided object.\n\nDoes not change the object, but returns a mock object to set expectations on the object’s methods.\n\n#### `var expectation = mock.expects(\"method\");`\n\nOverrides `obj.method` with a mock function and returns it.\n\nSee [expectations](#expectations) below.\n\n#### `mock.restore();`\n\nRestores all mocked methods.\n\n#### `mock.verify();`\n\nVerifies all expectations on the mock.\n\nIf any expectation is not satisfied, an exception is thrown.\n\nAlso restores the mocked methods.\n\n#### `mock.usingPromise(promiseLibrary);`\n\nCauses all expectations created from the mock to return promises using a specific Promise library instead of the global one when using `expectation.rejects` or `expectation.resolves`. Returns the mock object to allow chaining.\n\n*Since `sinon@6.2.0`*\n\n### Expectations\n\nAll the expectation methods return the expectation, meaning you can chain them.\n\nTypical usage:\n\n``` javascript\nsinon.mock(jQuery).expects(\"ajax\").atLeast(2).atMost(5);\njQuery.ajax.verify();\n```\n\n#### `var expectation = sinon.expectation.create([methodName]);`\n\nCreates an expectation without a mock object, which is essentially an anonymous mock function.\n\nMethod name is optional and is used in exception messages to make them more readable.\n\n#### `var expectation = sinon.mock([methodName]);`\n\nThe same as the above.\n\n#### `expectation.atLeast(number);`\n\nSpecify the minimum amount of calls expected.\n\n#### `expectation.atMost(number);`\n\nSpecify the maximum amount of calls expected.\n\n#### `expectation.never();`\n\nExpect the method to never be called.\n\n#### `expectation.once();`\n\nExpect the method to be called exactly once.\n\n#### `expectation.twice();`\n\nExpect the method to be called exactly twice.\n\n#### `expectation.thrice();`\n\nExpect the method to be called exactly thrice.\n\n#### `expectation.exactly(number);`\n\nExpect the method to be called exactly `number` times.\n\n#### `expectation.withArgs(arg1, arg2, ...);`\n\nExpect the method to be called with the provided arguments and possibly others.\n\nAn `expectation` instance only holds onto a single set of arguments specified with `withArgs`. Subsequent calls will overwrite the previously-specified set of arguments (even if they are different), so it is generally not intended that this method be invoked more than once per test case.\n\n#### `expectation.withExactArgs(arg1, arg2, ...);`\n\nExpect the method to be called with the provided arguments and no others.\n\nAn `expectation` instance only holds onto a single set of arguments specified with `withExactArgs`. Subsequent calls will overwrite the previously-specified set of arguments (even if they are different), so it is generally not intended that this method be invoked more than once per test case.\n\n#### `expectation.on(obj);`\n\nExpect the method to be called with `obj` as `this`.”}\n\n#### `expectation.verify();`\n\nVerifies the expectation and throws an exception if it’s not met.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/mocks](https://sinonjs.org/releases/v15/mocks)"
- name: promise.reject()
  id: promises#promiserejectvalue
  summary: Rejects the promise with the given value
  belongs_to: Promises
  description: "#### `promise.reject(value)`\n\nRejects the promise with the given value. Throws if the promise is not `pending`.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/promises](https://sinonjs.org/releases/v15/promises)"
- name: promise.rejectedValue
  id: promises#promiserejectedvalue
  summary: The promise rejected value
  belongs_to: Promises
  description: |-
    #### `promise.rejectedValue`

    The promise rejected value.
- name: promise.resolve()
  id: promises#promiseresolvevalue
  summary: Resolves the promise with the given value
  belongs_to: Promises
  description: |-
    #### `promise.resolve(value)`

    Resolves the promise with the given value. Throws if the promise is not `pending`.
- name: promise.resolvedValue
  id: promises#promiseresolvedvalue
  summary: The promise resolved value
  belongs_to: Promises
  description: |-
    #### `promise.resolvedValue`

    The promise resolved value.
- name: promise.status
  id: promises#promisestatus
  summary: The internal status of the promise
  belongs_to: Promises
  description: |-
    #### `promise.status`

    The internal status of the promise. One of `pending`, `resolved`, `rejected`.
- name: Promises
  id: promises
  summary: promise allows to create fake promises that expose their internal state and can be resolved or rejected on demand
  description: "# Promises\n\n### Introduction\n\n`promise` allows to create fake promises that expose their internal state and can be resolved or rejected on demand.\n\n### Creating a promise\n\n``` javascript\nvar promise = sinon.promise();\n```\n\n#### Creating a promise with a fake executor\n\n``` javascript\nvar executor = sinon.fake();\nvar promise = sinon.promise(executor);\n```\n\n#### Creating a promise with custom executor\n\n``` javascript\nvar promise = sinon.promise(function (resolve, reject) {\n  // ...\n});\n```\n\n### Promise API\n\n#### `promise.status`\n\nThe internal status of the promise. One of `pending`, `resolved`, `rejected`.\n\n#### `promise.resolvedValue`\n\nThe promise resolved value.\n\n#### `promise.rejectedValue`\n\nThe promise rejected value.\n\n#### `promise.resolve(value)`\n\nResolves the promise with the given value. Throws if the promise is not `pending`.\n\n#### `promise.reject(value)`\n\nRejects the promise with the given value. Throws if the promise is not `pending`.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/promises](https://sinonjs.org/releases/v15/promises)"
- name: request.async
  id: fake-xhr-and-server#boolean-requestasync
  summary: Whether or not the request is asynchronous
  belongs_to: Fake XHR and server
  description: |-
    #### `boolean request.async`

    Whether or not the request is asynchronous.
- name: request.autoRespond
  id: fake-xhr-and-server#boolean-requestautorespond
  summary: When set to true, causes the server to automatically respond to incoming requests after a timeout
  belongs_to: Fake XHR and server
  description: |-
    #### `Boolean request.autoRespond`

    When set to `true`, causes the server to automatically respond to incoming requests after a timeout.

    The default timeout is 10ms but you can control it through the `autoRespondAfter` property.

    Note that this feature is intended to help during mockup development, and is not suitable for use in tests.
- name: request.autoRespondAfter
  id: fake-xhr-and-server#number-requestautorespondafter
  summary: When autoRespond is true, respond to requests after this number of milliseconds
  belongs_to: Fake XHR and server
  description: |-
    #### `Number request.autoRespondAfter`

    When `autoRespond` is `true`, respond to requests after this number of milliseconds. Default is 10.

    ## Fake server

    High-level API to manipulate `FakeXMLHttpRequest` instances.

    ``` javascript
    // example.test.js in Mocha TDD
    var sinon = require("sinon");

    suite("sinon.fakeServer", function () {
      setup(function () {
        this.server = sinon.fakeServer.create();
      });

      teardown(function () {
        this.server.restore();
      });

      test("test should fetch comments from server", function () {
        this.server.respondWith("GET", "/some/article/comments.json", [
          200,
          { "Content-Type": "application/json" },
          '[{ "id": 12, "comment": "Hey there" }]',
        ]);

        var callback = sinon.spy();
        myLib.getCommentsFor("/some/article", callback);
        this.server.respond();

        sinon.assert.calledWith(callback, [{ id: 12, comment: "Hey there" }]);

        assert(server.requests.length > 0);
      });
    });
    ```

    ### Methods
- name: request.error()
  id: fake-xhr-and-server#requesterror
  summary: Simulates a network error on the request
  belongs_to: Fake XHR and server
  description: |-
    #### `request.error();`

    Simulates a network error on the request. The `onerror` handler will be called and the `status` will be `0`.
- name: request.getAllResponseHeaders()
  id: fake-xhr-and-server#object-requestgetallresponseheaders
  summary: All response headers as an object
  belongs_to: Fake XHR and server
  description: |-
    #### `Object request.getAllResponseHeaders();`

    All response headers as an object.

    ### Filtered requests

    When using Sinon.JS for mockups or partial integration/functional testing, you might want to fake some requests, while allowing others to go through to the backend server. With filtered `FakeXMLHttpRequest`s (new in v1.3.0), you can.
- name: request.getResponseHeader()
  id: fake-xhr-and-server#string-requestgetresponseheaderheader
  summary: The value of the given response header, if the request has been responded to (see respond)
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.getResponseHeader(header);`

    The value of the given response header, if the request has been responded to (see [`respond`](#serverrespond)).
- name: request.method
  id: fake-xhr-and-server#string-requestmethod
  summary: The request method as a string
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.method`

    The request method as a string.
- name: request.password
  id: fake-xhr-and-server#string-requestpassword
  summary: Password, if any
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.password`

    Password, if any.
- name: request.requestBody
  id: fake-xhr-and-server#string-requestrequestbody
  summary: null
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.requestBody`

    The request body
- name: request.requestHeaders
  id: fake-xhr-and-server#object-requestrequestheaders
  summary: null
  belongs_to: Fake XHR and server
  description: |-
    #### `Object request.requestHeaders`

    An object of all request headers, i.e.:

    ``` javascript
    {
        "Accept": "text/html, */*",
        "Connection": "keep-alive"
    }
    ```
- name: request.respond()
  id: fake-xhr-and-server#requestrespondstatus-headers-body
  summary: Calls the above three methods
  belongs_to: Fake XHR and server
  description: |-
    #### `request.respond(status, headers, body);`

    Calls the above three methods.
- name: request.responseXML
  id: fake-xhr-and-server#document-requestresponsexml
  summary: null
  belongs_to: Fake XHR and server
  description: |-
    #### `Document request.responseXML`

    When using [`respond`](#serverrespond), this property is populated with a parsed document if response headers indicate as much (see [the spec](http://www.w3.org/TR/XMLHttpRequest/))
- name: request.setResponseBody()
  id: fake-xhr-and-server#requestsetresponsebodybody
  summary: Sets the respond body, updates the readyState property and fires onreadystatechange
  belongs_to: Fake XHR and server
  description: |-
    #### `request.setResponseBody(body);`

    Sets the respond body, updates the `readyState` property and fires `onreadystatechange`.

    Additionally, populates `responseXML` with a parsed document if [response headers indicate as much](http://www.w3.org/TR/XMLHttpRequest/).
- name: request.setResponseHeaders()
  id: fake-xhr-and-server#requestsetresponseheadersobject
  summary: Sets response headers (e.g
  belongs_to: Fake XHR and server
  description: |-
    #### `request.setResponseHeaders(object);`

    Sets response headers (e.g. `{ "Content-Type": "text/html", /* ... */ }`, updates the `readyState` property and fires `onreadystatechange`.
- name: request.setStatus()
  id: fake-xhr-and-server#requestsetstatusstatus
  summary: Sets response status (status and statusText properties)
  belongs_to: Fake XHR and server
  description: |-
    #### `request.setStatus(status);`

    Sets response status (`status` and `statusText` properties).

    Status should be a number, the status text is looked up from `sinon.FakeXMLHttpRequest.statusCodes`.
- name: request.status
  id: fake-xhr-and-server#int-requeststatus
  summary: The request’s status code
  belongs_to: Fake XHR and server
  description: |-
    #### `int request.status`

    The request’s status code.

    `undefined` if the request has not been handled (see [`respond`](#serverrespond) below)
- name: request.statusText
  id: fake-xhr-and-server#string-requeststatustext
  summary: Only populated if the respond method is called (see below)
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.statusText`

    Only populated if the [`respond`](#serverrespond) method is called (see below).
- name: request.url
  id: fake-xhr-and-server#string-requesturl
  summary: The URL set on the request object
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.url`

    The URL set on the request object.
- name: request.username
  id: fake-xhr-and-server#string-requestusername
  summary: Username, if any
  belongs_to: Fake XHR and server
  description: |-
    #### `String request.username`

    Username, if any.
- name: respondImmediately
  id: fake-xhr-and-server#boolean-respondimmediately
  summary: If set, the server will respond to every request immediately and synchronously
  belongs_to: Fake XHR and server
  description: |-
    #### Boolean `respondImmediately`

    If set, the server will respond to every request immediately and synchronously. **Default: false**

    This is ideal for faking the server from within a test without having to call `server.respond()` after each request made in that test.

    As this is synchronous and immediate, this is not suitable for simulating actual network latency in tests or mockups. To simulate network latency with automatic responses, see `autoRespond` and `autoRespondAfter` properties. If `server.respondImmediately == true`, it will override all `autoRespond` behavior.
- name: sandbox.assert()
  id: sandbox#sandboxassert
  summary: null
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.assert();`

    A convenience reference for [`sinon.assert`](assertions)

    *Since `sinon@2.0.0`*
- name: sandbox.createStubInstance()
  id: sandbox#sandboxcreatestubinstance
  summary: Works almost exactly like sinon.createStubInstance, only also adds the returned stubs to the internal collection of fakes for restoring through sandbox.restore()
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.createStubInstance();`

    Works almost exactly like `sinon.createStubInstance`, only also adds the returned stubs to the internal collection of fakes for restoring through `sandbox.restore()`.
- name: sandbox.leakThreshold
  id: sandbox#sandboxleakthreshold
  summary: Gets/sets the threshold at which memory leak detection warnings are logged
  belongs_to: Sandboxes
  description: "#### `sandbox.leakThreshold`\n\nGets/sets the threshold at which memory leak detection warnings are logged.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/sandbox](https://sinonjs.org/releases/v15/sandbox)"
- name: sandbox.mock()
  id: sandbox#sandboxmock
  summary: null
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.mock();`

    Works exactly like `sinon.mock`
- name: sandbox.replace()
  id: sandbox#sandboxreplaceobject-property-replacement
  summary: Replaces property on object with replacement argument
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.replace(object, property, replacement);`

    Replaces `property` on `object` with `replacement` argument. Attempts to replace an already replaced value cause an exception. Returns the `replacement`.

    `replacement` can be any value, including `spies`, `stubs` and `fakes`.

    This method only works on non-accessor properties, for replacing accessors, use `sandbox.replaceGetter()` and `sandbox.replaceSetter()`.

    ``` javascript
    var myObject = {
      myMethod: function () {
        return "apple pie";
      },
    };

    sandbox.replace(myObject, "myMethod", function () {
      return "strawberry";
    });

    console.log(myObject.myMethod());
    // strawberry
    ```
- name: sandbox.replaceGetter()
  id: sandbox#sandboxreplacegetter
  summary: Replaces getter for property on object with replacement argument
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.replaceGetter();`

    Replaces getter for `property` on `object` with `replacement` argument. Attempts to replace an already replaced getter cause an exception.

    `replacement` must be a `Function`, and can be instances of `spies`, `stubs` and `fakes`.

    ``` javascript
    var myObject = {
        get myProperty: function() {
            return 'apple pie';
        }
    };

    sandbox.replaceGetter(myObject, 'myProperty', function () {
        return 'strawberry';
    });

    console.log(myObject.myProperty);
    // strawberry
    ```
- name: sandbox.replaceSetter()
  id: sandbox#sandboxreplacesetter
  summary: Replaces setter for property on object with replacement argument
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.replaceSetter();`

    Replaces setter for `property` on `object` with `replacement` argument. Attempts to replace an already replaced setter cause an exception.

    `replacement` must be a `Function`, and can be instances of `spies`, `stubs` and `fakes`.

    ``` javascript
    var object = {
      set myProperty(value) {
        this.prop = value;
      },
    };

    sandbox.replaceSetter(object, "myProperty", function (value) {
      this.prop = "strawberry " + value;
    });

    object.myProperty = "pie";

    console.log(object.prop);
    // strawberry pie
    ```
- name: sandbox.reset()
  id: sandbox#sandboxreset
  summary: Resets the internal state of all fakes created through sandbox
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.reset();`

    Resets the internal state of all fakes created through sandbox.
- name: sandbox.resetBehavior()
  id: sandbox#sandboxresetbehavior
  summary: Resets the behaviour of all stubs created through the sandbox
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.resetBehavior();`

    Resets the behaviour of all stubs created through the sandbox.

    *Since `sinon@2.0.0`*
- name: sandbox.resetHistory()
  id: sandbox#sandboxresethistory
  summary: Resets the history of all stubs created through the sandbox
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.resetHistory();`

    Resets the history of all stubs created through the sandbox.

    *Since `sinon@2.0.0`*
- name: sandbox.restore()
  id: sandbox#sandboxrestore
  summary: Restores all fakes created through sandbox
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.restore();`

    Restores all fakes created through sandbox.
- name: sandbox.spy()
  id: sandbox#sandboxspy
  summary: null
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.spy();`

    Works exactly like `sinon.spy`
- name: sandbox.stub()
  id: sandbox#sandboxstub
  summary: Works exactly like sinon.stub
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.stub();`

    Works exactly like `sinon.stub`.

    ##### Stubbing a non-function property

    ``` javascript
    const myObject = {
      hello: "world",
    };

    sandbox.stub(myObject, "hello").value("Sinon");

    console.log(myObject.hello);
    // Sinon

    sandbox.restore();
    console.log(myObject.hello);
    // world
    ```
- name: sandbox.useFakeServer()
  id: sandbox#sandboxusefakeserver
  summary: Fakes XHR and binds a server object to the sandbox such that it too is restored when calling sandbox.restore()
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.useFakeServer();`

    Fakes XHR and binds a server object to the sandbox such that it too is restored when calling `sandbox.restore()`.

    Access requests through `sandbox.requests` and server through `sandbox.server`
- name: sandbox.useFakeTimers()
  id: sandbox#sandboxusefaketimers
  summary: Fakes timers and binds the clock object to the sandbox such that it too is restored when calling sandbox.restore()
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.useFakeTimers();`

    Fakes timers and binds the `clock` object to the sandbox such that it too is restored when calling `sandbox.restore()`.

    Access through `sandbox.clock`.
- name: sandbox.useFakeXMLHttpRequest()
  id: sandbox#sandboxusefakexmlhttprequest
  summary: Fakes XHR and binds the resulting object to the sandbox such that it too is restored when calling sandbox.restore()
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.useFakeXMLHttpRequest();`

    Fakes XHR and binds the resulting object to the sandbox such that it too is restored when calling `sandbox.restore()`.

    Since 2.x, you can no longer access requests through `sandbox.requests` - use `sandbox.useFakeServer` to do this. This function maps to `sinon.useFakeXMLHttpRequest`, only with sandboxing.
- name: sandbox.usingPromise()
  id: sandbox#sandboxusingpromisepromiselibrary
  summary: Causes all stubs and mocks created from the sandbox to return promises using a specific Promise library instead of the global one when using stub.rejects or stub.resolves
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.usingPromise(promiseLibrary);`

    Causes all stubs and mocks created from the sandbox to return promises using a specific Promise library instead of the global one when using `stub.rejects` or `stub.resolves`. Returns the stub to allow chaining.

    *Since `sinon@2.0.0`*
- name: sandbox.verify()
  id: sandbox#sandboxverify
  summary: Verifies all mocks created through the sandbox
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.verify();`

    Verifies all mocks created through the sandbox.
- name: sandbox.verifyAndRestore()
  id: sandbox#sandboxverifyandrestore
  summary: Verifies all mocks and restores all fakes created through the sandbox
  belongs_to: Sandboxes
  description: |-
    #### `sandbox.verifyAndRestore();`

    Verifies all mocks and restores all fakes created through the sandbox.
- name: Sandboxes
  id: sandbox
  summary: Sandboxes removes the need to keep track of every fake created, which greatly simplifies cleanup
  description: "# Sandboxes\n\nSandboxes removes the need to keep track of every fake created, which greatly simplifies cleanup.\n\n``` javascript\nvar sandbox = require(\"sinon\").createSandbox();\nvar myAPI = { hello: function () {} };\n\ndescribe(\"myAPI.hello method\", function () {\n  beforeEach(function () {\n    // stub out the `hello` method\n    sandbox.stub(myAPI, \"hello\");\n  });\n\n  afterEach(function () {\n    // completely restore all fakes created through the sandbox\n    sandbox.restore();\n  });\n\n  it(\"should be called once\", function () {\n    myAPI.hello();\n    sandbox.assert.calledOnce(myAPI.hello);\n  });\n\n  it(\"should be called twice\", function () {\n    myAPI.hello();\n    myAPI.hello();\n    sandbox.assert.calledTwice(myAPI.hello);\n  });\n});\n```\n\n## Sandbox API\n\n#### Default sandbox\n\nSince `sinon@5.0.0`, the `sinon` object is a default sandbox. Unless you have a very advanced setup or need a special configuration, you probably want to only use that one.\n\n``` javascript\nconst myObject = {\n  hello: \"world\",\n};\n\nsinon.stub(myObject, \"hello\").value(\"Sinon\");\n\nconsole.log(myObject.hello);\n// Sinon\n\nsinon.restore();\nconsole.log(myObject.hello);\n// world\n```\n\n#### `var sandbox = sinon.createSandbox();`\n\nCreates a new sandbox object with spies, stubs, and mocks.\n\n#### `var sandbox = sinon.createSandbox(config);`\n\nThe `sinon.createSandbox(config)` method is often an integration feature, and can be used for scenarios including a global object to coordinate all fakes through.\n\nSandboxes are partially configured by default such that calling:\n\n``` javascript\nvar sandbox = sinon.createSandbox({});\n```\n\nwill merge in extra defaults analogous to:\n\n``` javascript\nvar sandbox = sinon.createSandbox({\n  // ...\n  injectInto: null,\n  properties: [\"spy\", \"stub\", \"mock\"],\n  useFakeTimers: false,\n  useFakeServer: false,\n});\n```\n\nThe `useFakeTimers` and `useFakeServers` are **false** as opposed to the [defaults in `sinon.defaultConfig`](https://github.com/sinonjs/sinon/blob/master/lib/sinon/util/core/default-config.js):\n\n``` javascript\nsinon.defaultConfig = {\n  // ...\n  injectInto: null,\n  properties: [\"spy\", \"stub\", \"mock\", \"clock\", \"server\", \"requests\"],\n  useFakeTimers: true,\n  useFakeServer: true,\n};\n```\n\nTo get a full sandbox with stubs, spies, etc. **and** fake timers and servers, you can call:\n\n``` javascript\n// Inject the sinon defaults explicitly.\nvar sandbox = sinon.createSandbox(sinon.defaultConfig);\n\n// (OR) Add the extra properties that differ from the sinon defaults.\nvar sandbox = sinon.createSandbox({\n  useFakeTimers: true,\n  useFakeServer: true,\n});\n```\n\n##### `injectInto`\n\nThe sandbox’s methods can be injected into another object for convenience. The `injectInto` configuration option can name an object to add properties to.\n\n##### `properties`\n\nWhat properties to inject. Note that only naming “server” here is not sufficient to have a `server` property show up in the target object, you also have to set `useFakeServer` to `true`.\n\nThe list of properties that can be injected are the ones exposed by the object returned by the function `inject`, namely:\n\n``` javascript\n{\n  //...\n  properties: [\n    \"spy\",\n    \"stub\",\n    \"mock\",\n    \"createStubInstance\",\n    \"fake\",\n    \"replace\",\n    \"replaceSetter\",\n    \"replaceGetter\",\n    \"clock\",\n    \"server\",\n    \"requests\",\n    \"match\",\n  ];\n}\n```\n\n##### `useFakeTimers`\n\nIf set to `true`, the sandbox will have a `clock` property. You can optionally pass in a configuration object that follows the [specification for fake timers](fake-timers), such as `{ toFake: [\"setTimeout\", \"setInterval\"] }`.\n\n##### `useFakeServer`\n\nIf `true`, `server` and `requests` properties are added to the sandbox. Can also be an object to use for fake server. The default one is `sinon.fakeServer`, but if you’re using jQuery 1.3.x or some other library that does not set the XHR’s `onreadystatechange` handler, you might want to do:\n\n``` javascript\nsinon.config = {\n  useFakeServer: sinon.fakeServerWithClock,\n};\n```\n\n##### exposing sandbox example\n\nTo create an object `sandboxFacade` which gets the method `spy` injected, you can code:\n\n``` javascript\n// object that will have the spy method injected into it\nvar sandboxFacade = {};\n\n// create sandbox and inject properties (in this case spy) into sandboxFacade\nvar sandbox = sinon.createSandbox({\n  injectInto: sandboxFacade,\n  properties: [\"spy\"],\n});\n```\n\n#### `sandbox.assert();`\n\nA convenience reference for [`sinon.assert`](assertions)\n\n*Since `sinon@2.0.0`*\n\n#### `sandbox.replace(object, property, replacement);`\n\nReplaces `property` on `object` with `replacement` argument. Attempts to replace an already replaced value cause an exception. Returns the `replacement`.\n\n`replacement` can be any value, including `spies`, `stubs` and `fakes`.\n\nThis method only works on non-accessor properties, for replacing accessors, use `sandbox.replaceGetter()` and `sandbox.replaceSetter()`.\n\n``` javascript\nvar myObject = {\n  myMethod: function () {\n    return \"apple pie\";\n  },\n};\n\nsandbox.replace(myObject, \"myMethod\", function () {\n  return \"strawberry\";\n});\n\nconsole.log(myObject.myMethod());\n// strawberry\n```\n\n#### `sandbox.replaceGetter();`\n\nReplaces getter for `property` on `object` with `replacement` argument. Attempts to replace an already replaced getter cause an exception.\n\n`replacement` must be a `Function`, and can be instances of `spies`, `stubs` and `fakes`.\n\n``` javascript\nvar myObject = {\n    get myProperty: function() {\n        return 'apple pie';\n    }\n};\n\nsandbox.replaceGetter(myObject, 'myProperty', function () {\n    return 'strawberry';\n});\n\nconsole.log(myObject.myProperty);\n// strawberry\n```\n\n#### `sandbox.replaceSetter();`\n\nReplaces setter for `property` on `object` with `replacement` argument. Attempts to replace an already replaced setter cause an exception.\n\n`replacement` must be a `Function`, and can be instances of `spies`, `stubs` and `fakes`.\n\n``` javascript\nvar object = {\n  set myProperty(value) {\n    this.prop = value;\n  },\n};\n\nsandbox.replaceSetter(object, \"myProperty\", function (value) {\n  this.prop = \"strawberry \" + value;\n});\n\nobject.myProperty = \"pie\";\n\nconsole.log(object.prop);\n// strawberry pie\n```\n\n#### `sandbox.spy();`\n\nWorks exactly like `sinon.spy`\n\n#### `sandbox.createStubInstance();`\n\nWorks almost exactly like `sinon.createStubInstance`, only also adds the returned stubs to the internal collection of fakes for restoring through `sandbox.restore()`.\n\n#### `sandbox.stub();`\n\nWorks exactly like `sinon.stub`.\n\n##### Stubbing a non-function property\n\n``` javascript\nconst myObject = {\n  hello: \"world\",\n};\n\nsandbox.stub(myObject, \"hello\").value(\"Sinon\");\n\nconsole.log(myObject.hello);\n// Sinon\n\nsandbox.restore();\nconsole.log(myObject.hello);\n// world\n```\n\n#### `sandbox.mock();`\n\nWorks exactly like `sinon.mock`\n\n#### `sandbox.useFakeTimers();`\n\nFakes timers and binds the `clock` object to the sandbox such that it too is restored when calling `sandbox.restore()`.\n\nAccess through `sandbox.clock`.\n\n#### `sandbox.useFakeXMLHttpRequest();`\n\nFakes XHR and binds the resulting object to the sandbox such that it too is restored when calling `sandbox.restore()`.\n\nSince 2.x, you can no longer access requests through `sandbox.requests` - use `sandbox.useFakeServer` to do this. This function maps to `sinon.useFakeXMLHttpRequest`, only with sandboxing.\n\n#### `sandbox.useFakeServer();`\n\nFakes XHR and binds a server object to the sandbox such that it too is restored when calling `sandbox.restore()`.\n\nAccess requests through `sandbox.requests` and server through `sandbox.server`\n\n#### `sandbox.usingPromise(promiseLibrary);`\n\nCauses all stubs and mocks created from the sandbox to return promises using a specific Promise library instead of the global one when using `stub.rejects` or `stub.resolves`. Returns the stub to allow chaining.\n\n*Since `sinon@2.0.0`*\n\n#### `sandbox.restore();`\n\nRestores all fakes created through sandbox.\n\n#### `sandbox.reset();`\n\nResets the internal state of all fakes created through sandbox.\n\n#### `sandbox.resetBehavior();`\n\nResets the behaviour of all stubs created through the sandbox.\n\n*Since `sinon@2.0.0`*\n\n#### `sandbox.resetHistory();`\n\nResets the history of all stubs created through the sandbox.\n\n*Since `sinon@2.0.0`*\n\n#### `sandbox.verify();`\n\nVerifies all mocks created through the sandbox.\n\n#### `sandbox.verifyAndRestore();`\n\nVerifies all mocks and restores all fakes created through the sandbox.\n\n#### `sandbox.leakThreshold`\n\nGets/sets the threshold at which memory leak detection warnings are logged.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/sandbox](https://sinonjs.org/releases/v15/sandbox)"
- name: server.configure()
  id: fake-xhr-and-server#serverconfigureconfig
  summary: Changes the configuration the fake server after it has been created
  belongs_to: Fake XHR and server
  description: |-
    #### `server.configure(config);`

    Changes the configuration the fake server after it has been created.

    This can be useful for changing the delay of an automatic response for a specific test requirement. For more options, see [Configuration Properties](#configuration-properties) below.
- name: server.getHTTPMethod()
  id: fake-xhr-and-server#servergethttpmethodrequest
  summary: Used internally to determine the HTTP method used with the provided request
  belongs_to: Fake XHR and server
  description: |-
    #### `server.getHTTPMethod(request)`

    Used internally to determine the HTTP method used with the provided request.

    By default this method returns `request.method`. When `server.fakeHTTPMethods` is true, the method will return the value of the `_method` parameter if the method is “POST”.

    This method can be overridden to provide custom behavior.
- name: server.requests
  id: fake-xhr-and-server#array-serverrequests
  summary: server.requests is an array of all the FakeXMLHttpRequest objects that have been created
  belongs_to: Fake XHR and server
  description: |-
    #### Array\[\] `server.requests`

    `server.requests` is an array of all the `FakeXMLHttpRequest` objects that have been created.

    This property allows you to inspect the received requests to verify request ordering, find unmatched requests or check that no requests has been done.

    ### Configuration Properties

    The Fake Server exposes configurable properties to modify the behavior of the server as desired. These properties can be set directly or with an object literal passed into `create(options)` and/or `server.configure(options)`.

    ``` javascript
    // Defaults
    server.autoRespond = false;
    server.autoRespondAfter = 10; // in milliseconds
    server.respondImmediately = false;
    server.fakeHTTPMethods = false;

    // configure fakeServer to autoRespond
    server.autoRespond = true;

    // Change server now to respondImmediately
    server.configure({ respondImmediately: true });
    ```
- name: server.respond()
  id: fake-xhr-and-server#serverrespond
  summary: Causes all queued asynchronous requests to receive a response
  belongs_to: Fake XHR and server
  description: |-
    #### `server.respond();`

    Causes all queued asynchronous requests to receive a response.

    If none of the responses added through `respondWith()` match, the default response is `[404, {}, ""]`.

    Synchronous requests are responded to immediately so make sure to call `respondWith()` to configure the server response before calling `respond()`. If not, you will receive the default `404 NOT FOUND` response.

    If called with arguments, `respondWith()` will be called with those arguments before responding to requests.
- name: server.respondWith()
  id: fake-xhr-and-server#serverrespondwithresponse
  summary: Causes the server to respond to any request not matched by another response with the provided data
  belongs_to: Fake XHR and server
  description: |-
    #### `server.respondWith(response);`

    Causes the server to respond to any request not matched by another response with the provided data. The default catch-all response is `[404, {}, ""]`.

    `response` can be one of three things:

    1.  A `String` representing the response body
    2.  An `Array` with status, headers and response body, e.g. `[200, { "Content-Type": "text/html", "Content-Length": 2 }, "OK"]`
    3.  A `Function`.

    Default status is 200 and default headers are none.

    When the response is a `Function`, it will be passed the request object. You must manually call [respond](#serverrespond) on it to complete the request.

    #### `server.respondWith(url, response);`

    Responds to all requests to given URL, e.g. `/posts/1`.

    #### `server.respondWith(method, url, response);`

    Responds to all `method` requests to the given URL with the given response.

    `method` is an HTTP verb.

    #### `server.respondWith(urlRegExp, response);`

    URL may be a regular expression, e.g. `/\\/post\\//\\d+`

    If the response is a `Function`, it will be passed any capture groups from the regular expression along with the XMLHttpRequest object:

    ``` javascript
    server.respondWith(/\/todo-items\/(\d+)/, function (xhr, id) {
      xhr.respond(
        200,
        { "Content-Type": "application/json" },
        '[{ "id": ' + id + " }]"
      );
    });
    ```

    #### `server.respondWith(method, urlRegExp, response);`

    Responds to all `method` requests to URLs matching the regular expression.
- name: server.restore()
  id: fake-xhr-and-server#serverrestore
  summary: Restores the native XHR constructor
  belongs_to: Fake XHR and server
  description: |-
    #### `server.restore();`

    Restores the native XHR constructor.

    ### Properties
- name: sinon.addBehavior()
  id: stubs#sinonaddbehaviorname-fn
  summary: Add a custom behavior
  belongs_to: Stubs
  description: |-
    #### `sinon.addBehavior(name, fn);`

    Add a custom behavior. The name will be available as a function on stubs, and the chaining mechanism will be set up for you (e.g. no need to return anything from your function, its return value will be ignored). The `fn` will be passed the fake instance as its first argument, and then the user’s arguments.
- name: sinon.assert.alwaysCalledOn()
  id: assertions#sinonassertalwayscalledonspy-obj
  summary: Passes if spy was always called with obj as its this value
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.alwaysCalledOn(spy, obj)`

    Passes if `spy` was always called with `obj` as its `this` value.
- name: sinon.assert.alwaysCalledWith()
  id: assertions#sinonassertalwayscalledwithspy-arg1-arg2-
  summary: Passes if spy was always called with the provided arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.alwaysCalledWith(spy, arg1, arg2, ...);`

    Passes if `spy` was always called with the provided arguments.
- name: sinon.assert.alwaysCalledWithExactly()
  id: assertions#sinonassertalwayscalledwithexactlyspy-arg1-arg2-
  summary: Passes if spy was always called with the provided arguments and no others
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.alwaysCalledWithExactly(spy, arg1, arg2, ...);`

    Passes if `spy` was always called with the provided arguments and no others.
- name: sinon.assert.alwaysCalledWithMatch()
  id: assertions#sinonassertalwayscalledwithmatchspy-arg1-arg2-
  summary: Passes if spy was always called with matching arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.alwaysCalledWithMatch(spy, arg1, arg2, ...)`

    Passes if `spy` was always called with matching arguments.

    This behaves the same way as `sinon.assert.alwaysCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)`.
- name: sinon.assert.alwaysThrew()
  id: assertions#sinonassertalwaysthrewspy-exception
  summary: Like above, only required for all calls to the spy
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.alwaysThrew(spy, exception);`

    Like above, only required for all calls to the spy.
- name: sinon.assert.callCount()
  id: assertions#sinonassertcallcountspy-num
  summary: Passes if spy was called exactly num times
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.callCount(spy, num)`

    Passes if `spy` was called exactly `num` times.
- name: sinon.assert.called()
  id: assertions#sinonassertcalledspy
  summary: Passes if spy was called at least once
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.called(spy);`

    Passes if `spy` was called at least once.
- name: sinon.assert.calledOn()
  id: assertions#sinonassertcalledonspyorspycall-obj
  summary: Passes if spy was ever called with obj as its this value
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledOn(spyOrSpyCall, obj)`

    Passes if `spy` was ever called with `obj` as its `this` value.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledOn(spy.firstCall, arg1, arg2, ...);`.
- name: sinon.assert.calledOnce()
  id: assertions#sinonassertcalledoncespy
  summary: Passes if spy was called once and only once
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledOnce(spy);`

    Passes if `spy` was called once and only once.
- name: sinon.assert.calledOnceWithExactly()
  id: assertions#sinonassertcalledoncewithexactlyspyorspycall-arg1-arg2-
  summary: Passes if spy was called once and only once with the provided arguments and no others
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledOnceWithExactly(spyOrSpyCall, arg1, arg2, ...);`

    Passes if `spy` was called once and only once with the provided arguments and no others.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledOnceWithExactly(spy.getCall(1), arg1, arg2, ...);`.
- name: sinon.assert.calledOnceWithMatch()
  id: assertions#sinonassertcalledoncewithmatchspyorspycall-arg1-arg2-
  summary: Passes if spy was called once and only once with matching arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledOnceWithMatch(spyOrSpyCall, arg1, arg2, ...)`

    Passes if `spy` was called once and only once with matching arguments.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledOnceWithMatch(spy.secondCall, arg1, arg2, ...);`.
- name: sinon.assert.calledThrice()
  id: assertions#sinonassertcalledthricespy
  summary: Passes if spy was called exactly three times
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledThrice(spy)`

    Passes if `spy` was called exactly three times.
- name: sinon.assert.calledTwice()
  id: assertions#sinonassertcalledtwicespy
  summary: Passes if spy was called exactly twice
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledTwice(spy);`

    Passes if `spy` was called exactly twice.
- name: sinon.assert.calledWith()
  id: assertions#sinonassertcalledwithspyorspycall-arg1-arg2-
  summary: Passes if spy was called with the provided arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledWith(spyOrSpyCall, arg1, arg2, ...);`

    Passes if `spy` was called with the provided arguments.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledWith(spy.firstCall, arg1, arg2, ...);`.
- name: sinon.assert.calledWithExactly()
  id: assertions#sinonassertcalledwithexactlyspyorspycall-arg1-arg2-
  summary: Passes if spy was called with the provided arguments and no others
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledWithExactly(spyOrSpyCall, arg1, arg2, ...);`

    Passes if `spy` was called with the provided arguments and no others.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledWithExactly(spy.getCall(1), arg1, arg2, ...);`.
- name: sinon.assert.calledWithMatch()
  id: assertions#sinonassertcalledwithmatchspyorspycall-arg1-arg2-
  summary: Passes if spy was called with matching arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledWithMatch(spyOrSpyCall, arg1, arg2, ...)`

    Passes if `spy` was called with matching arguments.

    This behaves the same way as `sinon.assert.calledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)`.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledWithMatch(spy.secondCall, arg1, arg2, ...);`.
- name: sinon.assert.calledWithNew()
  id: assertions#sinonassertcalledwithnewspyorspycall
  summary: Passes if spy was called with the new operator
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.calledWithNew(spyOrSpyCall)`

    Passes if `spy` was called with the `new` operator.

    It’s possible to assert on a dedicated spy call: `sinon.assert.calledWithNew(spy.secondCall, arg1, arg2, ...);`.
- name: sinon.assert.callOrder()
  id: assertions#sinonassertcallorderspy1-spy2-
  summary: Passes if provided spies were called in the specified order
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.callOrder(spy1, spy2, ...)`

    Passes if provided spies were called in the specified order.
- name: sinon.assert.expose()
  id: assertions#sinonassertexposeobject-options
  summary: Exposes assertions into another object, to better integrate with the test framework
  belongs_to: Assertions
  description: "#### `sinon.assert.expose(object, options);`\n\nExposes assertions into another object, to better integrate with the test framework. For instance, JsTestDriver uses global assertions, and to make Sinon.JS assertions appear alongside them, you can do.\n\n``` javascript\nsinon.assert.expose(this);\n```\n\nThis will give you `assertCalled(spy)`,`assertCallOrder(spy1, spy2, ...)` and so on.\n\nThe method accepts an optional options object with two options.\n\nprefix\n\nis a prefix to give assertions. By default it is \"assert\", so `sinon.assert.called` becomes `target.assertCalled`. By passing a blank string, the exposed method will be `target.called`.\n\nincludeFail\n\n`true` by default, copies over the `fail` and `failException` properties\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/assertions](https://sinonjs.org/releases/v15/assertions)"
- name: sinon.assert.fail()
  id: assertions#sinonassertfailmessage
  summary: Every assertion fails by calling this method
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.fail(message)`

    Every assertion fails by calling this method.

    By default it throws an error of type `sinon.assert.failException`.

    If the test framework looks for assertion errors by checking for a specific exception, you can override the kind of exception thrown. If that does not fit with your testing framework of choice, override the `fail` method to do the right thing.
- name: sinon.assert.failException
  id: assertions#sinonassertfailexception
  summary: Defaults to AssertError
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.failException;`

    Defaults to `AssertError`.
- name: sinon.assert.match()
  id: assertions#sinonassertmatchactual-expectation
  summary: Uses sinon.match to test if the arguments can be considered a match
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.match(actual, expectation);`

    Uses [`sinon.match`](matchers) to test if the arguments can be considered a match.

    ``` javascript
    var sinon = require("sinon");

    describe("example", function () {
      it("should match on `x` property, and ignore `y` property", function () {
        var expected = { x: 1 },
          actual = { x: 1, y: 2 };

        sinon.assert.match(actual, expected);
      });
    });
    ```
- name: sinon.assert.neverCalledWith()
  id: assertions#sinonassertnevercalledwithspy-arg1-arg2-
  summary: Passes if spy was never called with the provided arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.neverCalledWith(spy, arg1, arg2, ...);`

    Passes if `spy` was never called with the provided arguments.
- name: sinon.assert.neverCalledWithMatch()
  id: assertions#sinonassertnevercalledwithmatchspy-arg1-arg2-
  summary: Passes if spy was never called with matching arguments
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.neverCalledWithMatch(spy, arg1, arg2, ...)`

    Passes if `spy` was never called with matching arguments.

    This behaves the same way as `sinon.assert.neverCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)`.
- name: sinon.assert.notCalled()
  id: assertions#sinonassertnotcalledspy
  summary: null
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.notCalled(spy);`

    Passes if `spy` was never called
- name: sinon.assert.pass()
  id: assertions#sinonassertpassassertion
  summary: Called every time assertion passes
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.pass(assertion);`

    Called every time `assertion` passes.

    Default implementation does nothing.
- name: sinon.assert.threw()
  id: assertions#sinonassertthrewspyorspycall-exception
  summary: Passes if spy threw the given exception
  belongs_to: Assertions
  description: |-
    #### `sinon.assert.threw(spyOrSpyCall, exception);`

    Passes if `spy` threw the given exception.

    The exception can be a `String` denoting its type, or an actual object.

    If only one argument is provided, the assertion passes if `spy` ever threw any exception.

    It’s possible to assert on a dedicated spy call: `sinon.assert.threw(spy.thirdCall, exception);`.
- name: sinon.createSandbox()
  id: sandbox#var-sandbox--sinoncreatesandbox
  summary: Creates a new sandbox object with spies, stubs, and mocks
  belongs_to: Sandboxes
  description: |-
    #### `var sandbox = sinon.createSandbox();`

    Creates a new sandbox object with spies, stubs, and mocks.

    #### `var sandbox = sinon.createSandbox(config);`

    The `sinon.createSandbox(config)` method is often an integration feature, and can be used for scenarios including a global object to coordinate all fakes through.

    Sandboxes are partially configured by default such that calling:

    ``` javascript
    var sandbox = sinon.createSandbox({});
    ```

    will merge in extra defaults analogous to:

    ``` javascript
    var sandbox = sinon.createSandbox({
      // ...
      injectInto: null,
      properties: ["spy", "stub", "mock"],
      useFakeTimers: false,
      useFakeServer: false,
    });
    ```

    The `useFakeTimers` and `useFakeServers` are **false** as opposed to the [defaults in `sinon.defaultConfig`](https://github.com/sinonjs/sinon/blob/master/lib/sinon/util/core/default-config.js):

    ``` javascript
    sinon.defaultConfig = {
      // ...
      injectInto: null,
      properties: ["spy", "stub", "mock", "clock", "server", "requests"],
      useFakeTimers: true,
      useFakeServer: true,
    };
    ```

    To get a full sandbox with stubs, spies, etc. **and** fake timers and servers, you can call:

    ``` javascript
    // Inject the sinon defaults explicitly.
    var sandbox = sinon.createSandbox(sinon.defaultConfig);

    // (OR) Add the extra properties that differ from the sinon defaults.
    var sandbox = sinon.createSandbox({
      useFakeTimers: true,
      useFakeServer: true,
    });
    ```

    ##### `injectInto`

    The sandbox’s methods can be injected into another object for convenience. The `injectInto` configuration option can name an object to add properties to.

    ##### `properties`

    What properties to inject. Note that only naming “server” here is not sufficient to have a `server` property show up in the target object, you also have to set `useFakeServer` to `true`.

    The list of properties that can be injected are the ones exposed by the object returned by the function `inject`, namely:

    ``` javascript
    {
      //...
      properties: [
        "spy",
        "stub",
        "mock",
        "createStubInstance",
        "fake",
        "replace",
        "replaceSetter",
        "replaceGetter",
        "clock",
        "server",
        "requests",
        "match",
      ];
    }
    ```

    ##### `useFakeTimers`

    If set to `true`, the sandbox will have a `clock` property. You can optionally pass in a configuration object that follows the [specification for fake timers](fake-timers), such as `{ toFake: ["setTimeout", "setInterval"] }`.

    ##### `useFakeServer`

    If `true`, `server` and `requests` properties are added to the sandbox. Can also be an object to use for fake server. The default one is `sinon.fakeServer`, but if you’re using jQuery 1.3.x or some other library that does not set the XHR’s `onreadystatechange` handler, you might want to do:

    ``` javascript
    sinon.config = {
      useFakeServer: sinon.fakeServerWithClock,
    };
    ```

    ##### exposing sandbox example

    To create an object `sandboxFacade` which gets the method `spy` injected, you can code:

    ``` javascript
    // object that will have the spy method injected into it
    var sandboxFacade = {};

    // create sandbox and inject properties (in this case spy) into sandboxFacade
    var sandbox = sinon.createSandbox({
      injectInto: sandboxFacade,
      properties: ["spy"],
    });
    ```
- name: sinon.createStubInstance()
  id: utils#sinoncreatestubinstanceconstructor
  summary: Creates a new object with the given function as the prototype and stubs all implemented functions
  belongs_to: Utilities
  description: "#### `sinon.createStubInstance(constructor);`\n\nCreates a new object with the given function as the prototype and stubs all implemented functions.\n\n``` javascript\nclass Container {\n  contains(item) {\n    /* ... */\n  }\n}\n\nvar stubContainer = sinon.createStubInstance(Container);\nstubContainer.contains.returns(false);\nstubContainer.contains.withArgs(\"item\").returns(true);\n```\n\nThe given constructor function is not invoked. See also the [stub API](stubs).\n\n### `sinon.restoreObject(object);`\n\nRestores all methods of an object and returns the restored object.\n\n``` javascript\nconst obj = {\n  foo: () => {},\n};\nsinon.spy(obj);\nsinon.restoreObject(obj);\n```\n\nThrows an error if the object contains no restorable methods (spies, stubs, etc).\n\n``` javascript\nsinon.restoreObject({});\n```\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/utils](https://sinonjs.org/releases/v15/utils)"
- name: sinon.expectation.create()
  id: mocks#var-expectation--sinonexpectationcreatemethodname
  summary: Creates an expectation without a mock object, which is essentially an anonymous mock function
  belongs_to: Mocks
  description: |-
    #### `var expectation = sinon.expectation.create([methodName]);`

    Creates an expectation without a mock object, which is essentially an anonymous mock function.

    Method name is optional and is used in exception messages to make them more readable.

    #### `var expectation = sinon.mock([methodName]);`

    The same as the above.
- name: sinon.fake()
  id: fakes#sinonfakefunc
  summary: Wraps an existing Function to record all interactions, while leaving it up to the func to provide the behavior
  belongs_to: Fakes
  description: |-
    #### `sinon.fake(func);`

    Wraps an existing `Function` to record all interactions, while leaving it up to the `func` to provide the behavior.

    The created `fake` `Function` has the same API as a [`sinon.spy`](spies).

    This is useful when complex behavior not covered by the `sinon.fake.*` methods is required or when wrapping an existing function or method.

    ### Instance properties

    The instance properties are the same as those of a [`sinon.spy`](spies). The following examples showcase just a few of the properties available to you. Refer to the [spy docs](spies) for a complete list.
- name: sinon.fake.rejects()
  id: fakes#sinonfakerejectsvalue
  summary: Creates a fake that returns a rejected Promise for the passed value
  belongs_to: Fakes
  description: |-
    #### `sinon.fake.rejects(value);`

    Creates a fake that returns a rejected `Promise` for the passed value.

    If an `Error` is passed as the `value` argument, then that will be the value of the promise. If any other value is passed, then that will be used for the `message` property of the `Error` returned by the promise.
- name: sinon.fake.resolves()
  id: fakes#sinonfakeresolvesvalue
  summary: Creates a fake that returns a resolved Promise for the passed value
  belongs_to: Fakes
  description: |-
    #### `sinon.fake.resolves(value);`

    Creates a fake that returns a resolved `Promise` for the passed value.
- name: sinon.fake.returns()
  id: fakes#sinonfakereturnsvalue
  summary: Creates a fake that returns the value argument
  belongs_to: Fakes
  description: |-
    #### `sinon.fake.returns(value);`

    Creates a fake that returns the `value` argument.
- name: sinon.fake.throws()
  id: fakes#sinonfakethrowsvalue
  summary: Creates a fake that throws an Error with the provided value as the message property
  belongs_to: Fakes
  description: |-
    #### `sinon.fake.throws(value);`

    Creates a fake that throws an `Error` with the provided value as the `message` property.

    If an `Error` is passed as the `value` argument, then that will be the thrown value. If any other value is passed, then that will be used for the `message` property of the thrown `Error`.
- name: sinon.fake.yields()
  id: fakes#sinonfakeyieldsvalue1--valuen
  summary: sinon.fake.yields takes some values, and returns a function that when being called, expects the last argument to be a callback and invokes that callback with the same previously given values
  belongs_to: Fakes
  description: |-
    #### `sinon.fake.yields([value1, ..., valueN]);`

    `sinon.fake.yields` takes some values, and returns a function that when being called, expects the last argument to be a callback and invokes that callback with the same previously given values. The returned function is normally used to fake a service function that takes a callback as the last argument.

    In code example below, the ‘[readFile](https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback)’ function of the ‘fs’ module is replaced with a fake function created by `sinon.fake.yields`. When the fake function is called, it always calls the last argument it received, which is expected to be a callback, with the values that the `yields` function previously took.
- name: sinon.fake.yieldsAsync()
  id: fakes#sinonfakeyieldsasyncvalue1--valuen
  summary: Similar to yields, yieldsAsync also returns a function that when invoked, the function expects the last argument to be a callback and invokes that callback with the same previously given values
  belongs_to: Fakes
  description: |-
    #### `sinon.fake.yieldsAsync([value1, ..., valueN]);`

    Similar to `yields`, `yieldsAsync` also returns a function that when invoked, the function expects the last argument to be a callback and invokes that callback with the same previously given values. However, the returned function invokes that callback asynchronously rather than immediately, i.e. in the next event loop.

    Compare the code example below with the code example above for `yields` to see the difference.
- name: sinon.fakeServer.create()
  id: fake-xhr-and-server#var-server--sinonfakeservercreateconfig
  summary: Creates a new server
  belongs_to: Fake XHR and server
  description: |-
    #### `var server = sinon.fakeServer.create([config]);`

    Creates a new server.

    This function also calls `sinon.useFakeXMLHttpRequest()`.

    `create()` accepts an optional properties object to configure the fake server. See [Configuration Properties](#configuration-properties) below for available options.
- name: sinon.fakeServerWithClock.create()
  id: fake-xhr-and-server#var-server--sinonfakeserverwithclockcreate
  summary: Creates a server that also manages fake timers
  belongs_to: Fake XHR and server
  description: |-
    #### `var server = sinon.fakeServerWithClock.create();`

    Creates a server that also manages fake timers.

    This is useful when testing `XHR` objects created with e.g. jQuery 1.3.x, which uses a timer to poll the object for completion, rather than the usual `onreadystatechange`.

    Just as a `create()` above, an optional properties object can be provided to set configuration parameters during instantiation.
- name: sinon.match()
  id: matchers#sinonmatchnumber
  summary: Requires the value to be == to the given number
  belongs_to: Matchers
  description: |-
    #### `sinon.match(number);`

    Requires the value to be == to the given number.

    #### `sinon.match(string);`

    Requires the value to be a string and have the expectation as a substring.

    #### `sinon.match(regexp);`

    Requires the value to be a string and match the given regular expression.

    #### `sinon.match(object);`

    Requires the value to be not `null` or `undefined` and have at least the same properties as `expectation`.

    This supports nested matchers.

    #### `sinon.match(function)`

    See `custom matchers`.
- name: sinon.match.any
  id: matchers#sinonmatchany
  summary: Matches anything
  belongs_to: Matchers
  description: |-
    #### `sinon.match.any`

    Matches anything.
- name: sinon.match.array
  id: matchers#sinonmatcharray
  summary: Requires the value to be an Array
  belongs_to: Matchers
  description: |-
    #### `sinon.match.array`

    Requires the value to be an `Array`.
- name: sinon.match.array.contains()
  id: matchers#sinonmatcharraycontainsarr
  summary: Requires an Array to contain each one of the values the given array has
  belongs_to: Matchers
  description: |-
    #### `sinon.match.array.contains(arr)`

    Requires an `Array` to contain each one of the values the given array has.
- name: sinon.match.array.deepEquals()
  id: matchers#sinonmatcharraydeepequalsarr
  summary: Requires an Array to be deep equal another one
  belongs_to: Matchers
  description: |-
    #### `sinon.match.array.deepEquals(arr)`

    Requires an `Array` to be deep equal another one.
- name: sinon.match.array.endsWith()
  id: matchers#sinonmatcharrayendswitharr
  summary: Requires an Array to end with the same values as another one
  belongs_to: Matchers
  description: |-
    #### `sinon.match.array.endsWith(arr)`

    Requires an `Array` to end with the same values as another one.
- name: sinon.match.array.startsWith()
  id: matchers#sinonmatcharraystartswitharr
  summary: Requires an Array to start with the same values as another one
  belongs_to: Matchers
  description: |-
    #### `sinon.match.array.startsWith(arr)`

    Requires an `Array` to start with the same values as another one.
- name: sinon.match.bool
  id: matchers#sinonmatchbool
  summary: null
  belongs_to: Matchers
  description: |-
    #### `sinon.match.bool`

    Requires the value to be a `Boolean`
- name: sinon.match.date
  id: matchers#sinonmatchdate
  summary: Requires the value to be a Date object
  belongs_to: Matchers
  description: |-
    #### `sinon.match.date`

    Requires the value to be a `Date` object.
- name: sinon.match.defined
  id: matchers#sinonmatchdefined
  summary: Requires the value to be defined
  belongs_to: Matchers
  description: |-
    #### `sinon.match.defined`

    Requires the value to be defined.
- name: sinon.match.every()
  id: matchers#sinonmatcheverymatcher
  summary: Requires every element of an Array, Set or Map, or alternatively every value of an Object to match the given matcher
  belongs_to: Matchers
  description: |-
    #### `sinon.match.every(matcher)`

    Requires **every** element of an `Array`, `Set` or `Map`, or alternatively **every** value of an `Object` to match the given `matcher`.
- name: sinon.match.falsy
  id: matchers#sinonmatchfalsy
  summary: Requires the value to be falsy
  belongs_to: Matchers
  description: |-
    #### `sinon.match.falsy`

    Requires the value to be falsy.
- name: sinon.match.func
  id: matchers#sinonmatchfunc
  summary: Requires the value to be a Function
  belongs_to: Matchers
  description: |-
    #### `sinon.match.func`

    Requires the value to be a `Function`.
- name: sinon.match.has()
  id: matchers#sinonmatchhasproperty-expectation
  summary: Requires the value to define the given property
  belongs_to: Matchers
  description: |-
    #### `sinon.match.has(property[, expectation])`

    Requires the value to define the given `property`.

    The property might be inherited via the prototype chain. If the optional expectation is given, the value of the property is deeply compared with the expectation. The expectation can be another matcher.
- name: sinon.match.hasNested()
  id: matchers#sinonmatchhasnestedpropertypath-expectation
  summary: Requires the value to define the given propertyPath
  belongs_to: Matchers
  description: |-
    #### `sinon.match.hasNested(propertyPath[, expectation])`

    Requires the value to define the given `propertyPath`. Dot (`prop.prop`) and bracket (`prop[0]`) notations are supported as in [Lodash.get](https://lodash.com/docs/4.4.2#get).

    The propertyPath might be inherited via the prototype chain. If the optional expectation is given, the value at the propertyPath is deeply compared with the expectation. The expectation can be another matcher.

    ``` javascript
    sinon.match.hasNested("a[0].b.c");

    // Where actual is something like
    var actual = { a: [{ b: { c: 3 } }] };

    sinon.match.hasNested("a.b.c");

    // Where actual is something like
    var actual = { a: { b: { c: 3 } } };
    ```
- name: sinon.match.hasOwn()
  id: matchers#sinonmatchhasownproperty-expectation
  summary: Same as sinon.match.has but the property must be defined by the value itself
  belongs_to: Matchers
  description: |-
    #### `sinon.match.hasOwn(property[, expectation])`

    Same as `sinon.match.has` but the property must be defined by the value itself. Inherited properties are ignored.
- name: sinon.match.in()
  id: matchers#sinonmatchinarray
  summary: Requires the value to be in the array
  belongs_to: Matchers
  description: |-
    #### `sinon.match.in(array)`

    Requires the value to be in the `array`.
- name: sinon.match.instanceOf()
  id: matchers#sinonmatchinstanceoftype
  summary: Requires the value to be an instance of the given type
  belongs_to: Matchers
  description: |-
    #### `sinon.match.instanceOf(type)`

    Requires the value to be an instance of the given `type`.
- name: sinon.match.map
  id: matchers#sinonmatchmap
  summary: Requires the value to be a Map
  belongs_to: Matchers
  description: |-
    #### `sinon.match.map`

    Requires the value to be a `Map`.
- name: sinon.match.map.contains()
  id: matchers#sinonmatchmapcontainsmap
  summary: Requires a Map to contain each one of the items the given map has
  belongs_to: Matchers
  description: |-
    #### `sinon.match.map.contains(map)`

    Requires a `Map` to contain each one of the items the given map has.
- name: sinon.match.map.deepEquals()
  id: matchers#sinonmatchmapdeepequalsmap
  summary: Requires a Map to be deep equal another one
  belongs_to: Matchers
  description: |-
    #### `sinon.match.map.deepEquals(map)`

    Requires a `Map` to be deep equal another one.
- name: sinon.match.number
  id: matchers#sinonmatchnumber-1
  summary: Requires the value to be a Number
  belongs_to: Matchers
  description: |-
    #### `sinon.match.number`

    Requires the value to be a `Number`.
- name: sinon.match.object
  id: matchers#sinonmatchobject-1
  summary: Requires the value to be an Object
  belongs_to: Matchers
  description: |-
    #### `sinon.match.object`

    Requires the value to be an `Object`.
- name: sinon.match.regexp
  id: matchers#sinonmatchregexp-1
  summary: Requires the value to be a regular expression
  belongs_to: Matchers
  description: |-
    #### `sinon.match.regexp`

    Requires the value to be a regular expression.
- name: sinon.match.same()
  id: matchers#sinonmatchsameref
  summary: Requires the value to strictly equal ref
  belongs_to: Matchers
  description: |-
    #### `sinon.match.same(ref)`

    Requires the value to strictly equal `ref`.
- name: sinon.match.set
  id: matchers#sinonmatchset
  summary: Requires the value to be a Set
  belongs_to: Matchers
  description: |-
    #### `sinon.match.set`

    Requires the value to be a `Set`.
- name: sinon.match.set.contains()
  id: matchers#sinonmatchsetcontainsset
  summary: Requires a Set to contain each one of the items the given set has
  belongs_to: Matchers
  description: |-
    #### `sinon.match.set.contains(set)`

    Requires a `Set` to contain each one of the items the given set has.
- name: sinon.match.set.deepEquals()
  id: matchers#sinonmatchsetdeepequalsset
  summary: Requires a Set to be deep equal another one
  belongs_to: Matchers
  description: |-
    #### `sinon.match.set.deepEquals(set)`

    Requires a `Set` to be deep equal another one.
- name: sinon.match.some()
  id: matchers#sinonmatchsomematcher
  summary: Requires any element of an Array, Set or Map, or alternatively any value of an Object to match the given matcher
  belongs_to: Matchers
  description: "#### `sinon.match.some(matcher)`\n\nRequires **any** element of an `Array`, `Set` or `Map`, or alternatively **any** value of an `Object` to match the given `matcher`.\n\n## Combining matchers\n\nAll matchers implement `and` and `or`. This allows to logically combine multiple matchers. The result is a new matcher that requires both (and) or one of the matchers (or) to return `true`.\n\n``` javascript\nvar stringOrNumber = sinon.match.string.or(sinon.match.number);\nvar bookWithPages = sinon.match.instanceOf(Book).and(sinon.match.has(\"pages\"));\n```\n\n## Custom matchers\n\nCustom matchers are created with the `sinon.match` factory which takes a test function and an optional message.\n\nThe test function takes a value as the only argument, returns `true` if the value matches the expectation and `false` otherwise. The message string is used to generate the error message in case the value does not match the expectation.\n\n``` javascript\nvar trueIsh = sinon.match(function (value) {\n  return !!value;\n}, \"trueIsh\");\n```\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/matchers](https://sinonjs.org/releases/v15/matchers)"
- name: sinon.match.string
  id: matchers#sinonmatchstring-1
  summary: Requires the value to be a String
  belongs_to: Matchers
  description: |-
    #### `sinon.match.string`

    Requires the value to be a `String`.
- name: sinon.match.symbol
  id: matchers#sinonmatchsymbol
  summary: Requires the value to be a Symbol
  belongs_to: Matchers
  description: |-
    #### `sinon.match.symbol`

    Requires the value to be a `Symbol`.
- name: sinon.match.truthy
  id: matchers#sinonmatchtruthy
  summary: Requires the value to be truthy
  belongs_to: Matchers
  description: |-
    #### `sinon.match.truthy`

    Requires the value to be truthy.
- name: sinon.match.typeOf()
  id: matchers#sinonmatchtypeoftype
  summary: null
  belongs_to: Matchers
  description: |-
    #### `sinon.match.typeOf(type)`

    Requires the value to be of the given type, where `type` can be one of `"undefined"`, `"null"`, `"boolean"`, `"number"`, `"string"`, `"object"`, `"function"`, `"array"`, `"regexp"`, `"date"` or `"symbol"`.
- name: sinon.mock()
  id: mocks#var-mock--sinonmockobj
  summary: Creates a mock for the provided object
  belongs_to: Mocks
  description: |-
    #### `var mock = sinon.mock(obj);`

    Creates a mock for the provided object.

    Does not change the object, but returns a mock object to set expectations on the object’s methods.
- name: sinon.stub()
  id: stubs#var-stub--sinonstub
  summary: Replaces object.method with a stub function
  belongs_to: Stubs
  description: |-
    #### `var stub = sinon.stub();`

    Creates an anonymous stub function

    #### `var stub = sinon.stub(object, "method");`

    Replaces `object.method` with a stub function. An exception is thrown if the property is not already a function.

    The original function can be restored by calling `object.method.restore();` (or `stub.restore();`).

    #### ~~`var stub = sinon.stub(object, "method", func);`~~

    This has been removed from `v3.0.0`. Instead you should use

    `stub(obj, 'meth').callsFake(fn)`

    A [codemod is available](https://github.com/hurrymaplelad/sinon-codemod) to upgrade your code

    #### `var stub = sinon.stub(obj);`

    Stubs all the object’s methods.

    Note that it’s usually better practice to stub individual methods, particularly on objects that you don’t understand or control all the methods for (e.g. library dependencies).

    Stubbing individual methods tests intent more precisely and is less susceptible to unexpected behavior as the object’s code evolves.

    If you want to create a stub object of `MyConstructor`, but don’t want the constructor to be invoked, use this utility function.

    ``` javascript
    var stub = sinon.createStubInstance(MyConstructor, overrides);
    ```

    `overrides` is an optional map overriding created stubs, for example:

    ``` javascript
    var stub = sinon.createStubInstance(MyConstructor, {
      foo: sinon.stub().returnsThis(),
    });
    ```

    is the same as:

    ``` javascript
    var stub = sinon.createStubInstance(MyConstructor);
    stub.foo.returnsThis();
    ```

    If provided value is not a stub, it will be used as the returned value:

    ``` javascript
    var stub = sinon.createStubInstance(MyConstructor, {
      foo: 3,
    });
    ```

    is the same as:

    ``` javascript
    var stub = sinon.createStubInstance(MyConstructor);
    stub.foo.returns(3);
    ```
- name: sinon.useFakeTimers()
  id: fake-timers#var-clock--sinonusefaketimers
  summary: Causes Sinon to replace the global setTimeout, clearTimeout, setInterval, clearInterval, setImmediate, clearImmediate, process.hrtime, performance.now(when available) and Date with a custom implementation which is bound to the returned clock object
  belongs_to: Fake timers
  description: |-
    #### `var clock = sinon.useFakeTimers();`

    Causes Sinon to replace the global `setTimeout`, `clearTimeout`, `setInterval`, `clearInterval`, `setImmediate`, `clearImmediate`, `process.hrtime`, `performance.now`(when available) and `Date` with a custom implementation which is bound to the returned `clock` object.

    Starts the clock at the UNIX epoch (timestamp of `0`).

    #### `var clock = sinon.useFakeTimers(now);`

    As above, but rather than starting the clock with a timestamp of 0, start at the provided timestamp `now`. You can also pass in a Date object, and its `getTime()` will be used for the starting timestamp.

    #### `var clock = sinon.useFakeTimers(config);`

    As above, but allows further configuration options.

    - `config.now` - *Number/Date* - installs lolex with the specified unix epoch (default: 0)
    - `config.toFake` - *String\[ \]* - an array with explicit function names to fake. By default lolex will automatically fake all methods *except* `process.nextTick`. You could, however, still fake `nextTick` by providing it explicitly
    - `config.shouldAdvanceTime` - *Boolean* - tells lolex to increment mocked time automatically based on the real system time shift (default: false). When used in conjunction with `config.toFake`, it will only work if `'setInterval'` is included in `config.toFake`.
    - **`config.global`** - *Object* - use `global` instead of the usual global object. This is useful if you use JSDOM along with Node.

    The options are basically all of those supported by the `install()` method of our `fake-timers` library, with the sole exception of `global`. Please refer to the `fakeTimers.install` [documentation](https://github.com/sinonjs/fake-timers/#var-clock--faketimersinstallconfig) for the full set of features available and more elaborate explanations.

    *Since `sinon@3.0.0`*

    `var clock = sinon.useFakeTimers([now, ]prop1, prop2, ...)` is no longer supported. To define which methods to fake, please use `config.toFake`.

    **Important note:** when faking `nextTick`, normal calls to `process.nextTick()` would not execute automatically as they would during normal event-loop phases. You would have to call either `clock.next()`, `clock.tick()`, `clock.runAll()` or `clock.runToLast()` (see example below). Please refer to the [lolex](https://github.com/sinonjs/lolex) documentation for more information.

    #### Examples

    Installs fake timers at January 1st 2017 and fakes `setTimeout` and `process.nextTick` only:

    ``` javascript
    var clock = sinon.useFakeTimers({
      now: 1483228800000,
      toFake: ["setTimeout", "nextTick"],
    });

    var called = false;

    process.nextTick(function () {
      called = true;
    });

    clock.runAll(); //forces nextTick calls to flush synchronously
    assert(called); //true
    ```

    Install at the same date, advancing the fake time automatically (default is every `20ms`), causing timers to be fired automatically without the need to `tick()` the clock:

    ``` javascript
    var clock = sinon.useFakeTimers({
      now: 1483228800000,
      shouldAdvanceTime: true,
    });

    setImmediate(function () {
      console.log("tick"); //will print after 20ms
    });

    setTimeout(function () {
      console.log("tock"); //will print after 20ms
    }, 15);

    setTimeout(function () {
      console.log("tack"); //will print after 40ms
    }, 35);
    ```

    Using fake timers with `async` / `await`:

    ``` javascript
    async function asyncFn() {

        await wait(100);

        console.log('resolved 1', Date.now());

        await wait(10);

        console.log('resolved 2', Date.now());
    }

    async function test() {

        const clock = sinon.useFakeTimers();

        setTimeout(() => console.log('timeout', Date.now()), 200);

        asyncFn(); // NOTE: no `await` here - it would hang, as the clock is stopped

        await clock.tickAsync(200);
    }

    // test() prints:
    // - resolved 1 100
    // - resolved 2 110
    // - timeout 200
    ```

    Note that in the above example, the synchronous `clock.tick(200)` would only print `timeout 200` and `resolved 1 200`.
- name: sinon.useFakeXMLHttpRequest()
  id: fake-xhr-and-server#var-xhr--sinonusefakexmlhttprequest
  summary: Causes Sinon to replace the native XMLHttpRequest object in browsers that support it with a custom implementation which does not send actual requests
  belongs_to: Fake XHR and server
  description: |-
    #### `var xhr = sinon.useFakeXMLHttpRequest();`

    Causes Sinon to replace the native `XMLHttpRequest` object in browsers that support it with a custom implementation which does not send actual requests.

    In browsers that support `ActiveXObject`, this constructor is replaced, and fake objects are returned for `XMLHTTP` progIds. Other progIds, such as `XMLDOM` are left untouched.

    The native `XMLHttpRequest` object will be available at `sinon.xhr.XMLHttpRequest`
- name: Spies
  id: spies
  summary: A test spy is a function that records arguments, return value, the value of this and exception thrown (if any) for all its calls
  description: "# Spies\n\n### Introduction\n\n### What is a test spy?\n\nA test spy is a function that records arguments, return value, the value of `this` and exception thrown (if any) for all its [calls](spy-call). There are two types of spies: Some are anonymous functions, while others wrap methods that already exist in the system under test.\n\n### Creating a spy as an anonymous function\n\nWhen the behavior of the spied-on function is not under test, you can use an anonymous function spy. The spy won’t do anything except record information about its [calls](spy-call). A common use case for this type of spy is testing how a function handles a callback, as in the following simplified example:\n\n### Using a spy to wrap all object method\n\n`sinon.spy(object)`\n\nSpies all the object’s methods.\n\nNote that it’s usually better practice to spy individual methods, particularly on objects that you don’t understand or control all the methods for (e.g. library dependencies).\n\nSpying individual methods tests intent more precisely and is less susceptible to unexpected behavior as the object’s code evolves.\n\nThe following is a slightly contrived example:\n\n### Using a spy to wrap an existing method\n\n`sinon.spy(object, \"method\")` creates a spy that wraps the existing function `object.method`. The spy will behave exactly like the original method (including when used as a constructor), but you will have access to data about all [calls](spy-call). The following is a slightly contrived example:\n\n### Using a spy to wrap property getter and setter\n\n`sinon.spy(object, \"property\", [\"get\", \"set\"])` creates spies that wrap the getters and setters for `object.property`. The spies will behave exactly like the original getters and setters, but you will have access to data about all [calls](spy-call). Example:\n\n``` javascript\nvar object = {\n  get test() {\n    return this.property;\n  },\n  set test(value) {\n    this.property = value * 2;\n  },\n};\nvar spy = sinon.spy(object, \"test\", [\"get\", \"set\"]);\nobject.test = 42;\nassert(spy.set.calledOnce);\nassert.equals(object.test, 84);\nassert(spy.get.calledOnce);\n```\n\n### Creating spies: `sinon.spy()` Method Signatures\n\n`var spy = sinon.spy();`  \nCreates an anonymous function that records arguments, `this` value, exceptions and return values for all calls.\n\n`var spy = sinon.spy(myFunc);`  \nWraps the function in a spy. You can pass this spy where the original function would otherwise be passed when you need to verify how the function is being used.\n\n`var spy = sinon.spy(object, \"method\");`  \nCreates a spy for `object.method` and replaces the original method with the spy. An exception is thrown if the property is not already a function. The spy acts exactly like the original method in all cases. The original method can be restored by calling `object.method.restore()`. The returned spy is the function object which replaced the original method. `spy === object.method`.\n\n`var spy = sinon.spy(object, \"property\", types);`  \nCreates a spy for the property `object.property` which replaces the descriptor with an equivalent where each specified accessor (`types` parameter) has been wrapped as a spy. The returned object, unlike regular spies, is a property descriptor containing the wrapped accessors (spies). The original accessors can be restored by calling `spy.get.restore()` (where `get` is the accessor you wish to restore).\n\n### Spy API\n\nSpies provide a rich interface to inspect their usage. The above examples showed the `calledOnce` boolean property as well as the `getCall` method and the returned object’s `args` property. There are three ways of inspecting [call](spy-call) data.\n\nThe preferred approach is to use the spy’s `calledWith` method (and friends) because it keeps your test from being too specific about which call did what and so on. It will return `true` if the spy was ever called with the provided arguments.\n\nIf you want to be specific, you can directly check the first argument of the first [call](spy-call). There are two ways of achieving this:\n\nThe first example uses the two-dimensional `args` array directly on the spy, while the second example fetches the first [call](spy-call) object and then accesses its `args` array. Which one to use is a matter of preference, but the recommended approach is going with `spy.calledWith(arg1, arg2, ...)` unless there’s a need to make the tests highly specific.\n\n## API\n\nSpy objects are objects returned from `sinon.spy()`. When spying on existing methods with `sinon.spy(object, method)`, the following properties and methods are also available on `object.method`.\n\n### Properties\n\n#### `spy.withArgs(arg1[, arg2, ...]);`\n\nCreates a spy that only records [calls](spy-call) when the received arguments match those passed to `withArgs`. This is useful to be more expressive in your assertions, where you can access the spy with the same [call](spy-call).\n\nUses deep comparison for objects and arrays. Use `spy.withArgs(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).\n\n#### `spy.callCount`\n\nThe number of recorded [calls](spy-call).\n\n#### `spy.called`\n\n`true` if the spy was called at least once\n\n#### `spy.notCalled`\n\n`true` if the spy was not called\n\n#### `spy.calledOnce`\n\n`true` if spy was called exactly once\n\n#### `spy.calledTwice`\n\n`true` if the spy was called exactly twice\n\n#### `spy.calledThrice`\n\n`true` if the spy was called exactly thrice\n\n#### `spy.firstCall`\n\nThe first [call](spy-call)\n\n#### `spy.secondCall`\n\nThe second [call](spy-call)\n\n#### `spy.thirdCall`\n\nThe third [call](spy-call)\n\n#### `spy.lastCall`\n\nThe last [call](spy-call)\n\n#### `spy.calledBefore(anotherSpy);`\n\nReturns `true` if the spy was called before `anotherSpy`\n\n#### `spy.calledAfter(anotherSpy);`\n\nReturns `true` if the spy was called after `anotherSpy`\n\n#### `spy.calledImmediatelyBefore(anotherSpy);`\n\nReturns `true` if `spy` was called before `anotherSpy`, and no spy [calls](spy-call) occurred between `spy` and `anotherSpy`.\n\n#### `spy.calledImmediatelyAfter(anotherSpy);`\n\nReturns `true` if `spy` was called after `anotherSpy`, and no spy [calls](spy-call) occurred between `anotherSpy` and `spy`.\n\n#### `spy.calledOn(obj);`\n\nReturns `true` if the spy was called at least once with `obj` as `this`. `calledOn` also accepts a matcher `spyCall.calledOn(sinon.match(fn))` (see [matchers](matchers)).\n\n#### `spy.alwaysCalledOn(obj);`\n\nReturns `true` if the spy was always called with `obj` as `this`.\n\n#### `spy.calledWith(arg1, arg2, ...);`\n\nReturns `true` if spy was called at least once with the provided arguments.\n\nCan be used for partial matching, Sinon only checks the provided arguments against actual arguments, so a call that received the provided arguments (in the same spots) and possibly others as well will return `true`.\n\n#### `spy.calledOnceWith(arg1, arg2, ...);`\n\nReturns `true` if spy was called exactly once in total and that one call was using the provided arguments.\n\n#### `spy.alwaysCalledWith(arg1, arg2, ...);`\n\nReturns `true` if spy was always called with the provided arguments (and possibly others).\n\n#### `spy.calledWithExactly(arg1, arg2, ...);`\n\nReturns `true` if spy was called at least once with the provided arguments and no others.\n\n#### `spy.calledOnceWithExactly(arg1, arg2, ...);`\n\nReturns `true` if spy was called exactly once in total and that one call was using the exact provided arguments and no others.\n\n#### `spy.alwaysCalledWithExactly(arg1, arg2, ...);`\n\nReturns `true` if spy was always called with the exact provided arguments.\n\n#### `spy.calledWithMatch(arg1, arg2, ...);`\n\nReturns `true` if spy was called with matching arguments (and possibly others).\n\nThis behaves the same as `spy.calledWith(sinon.match(arg1), sinon.match(arg2), ...)`.\n\n#### `spy.alwaysCalledWithMatch(arg1, arg2, ...);`\n\nReturns `true` if spy was always called with matching arguments (and possibly others).\n\nThis behaves the same as `spy.alwaysCalledWith(sinon.match(arg1), sinon.match(arg2), ...)`.\n\n#### `spy.calledWithNew();`\n\nReturns `true` if spy/stub was called the `new` operator.\n\nBeware that this is inferred based on the value of the `this` object and the spy function’s `prototype`, so it may give false positives if you actively return the right kind of object.\n\n#### `spy.neverCalledWith(arg1, arg2, ...);`\n\nReturns `true` if the spy/stub was never called with the provided arguments.\n\n#### `spy.neverCalledWithMatch(arg1, arg2, ...);`\n\nReturns `true` if the spy/stub was never called with matching arguments.\n\nThis behaves the same as `spy.neverCalledWith(sinon.match(arg1), sinon.match(arg2), ...)`.\n\n#### `spy.threw();`\n\nReturns `true` if spy threw an exception at least once.\n\n#### `spy.threw(\"TypeError\");`\n\nReturns `true` if spy threw an exception of the provided type at least once.\n\n#### `spy.threw(obj);`\n\nReturns `true` if spy threw the provided exception object at least once.\n\n#### `spy.alwaysThrew();`\n\nReturns `true` if spy always threw an exception.\n\n#### `spy.alwaysThrew(\"TypeError\");`\n\nReturns `true` if spy always threw an exception of the provided type.\n\n#### `spy.alwaysThrew(obj);`\n\nReturns `true` if spy always threw the provided exception object.\n\n#### `spy.returned(obj);`\n\nReturns `true` if spy returned the provided value at least once.\n\nUses deep comparison for objects and arrays. Use `spy.returned(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).\n\n#### `spy.alwaysReturned(obj);`\n\nReturns `true` if spy always returned the provided value.\n\n#### `var spyCall = spy.getCall(n);`\n\nReturns the *nth* [call](#spycall).\n\nIf *n* is negative, the *nth* call from the end is returned. For example, `spy.getCall(-1)` returns the last call, and `spy.getCall(-2)` returns the second to last call.\n\nAccessing individual calls helps with more detailed behavior verification when the spy is called more than once.\n\n#### `var spyCalls = spy.getCalls();`\n\nReturns an `Array` of all [calls](spy-call) recorded by the spy.\n\n#### `spy.thisValues`\n\nArray of `this` objects, `spy.thisValues[0]` is the `this` object for the first [call](spy-call).\n\n#### `spy.args`\n\nArray of arguments received, `spy.args[0]` is an array of arguments received in the first [call](spy-call).\n\n#### `spy.exceptions`\n\nArray of exception objects thrown, `spy.exceptions[0]` is the exception thrown by the first [call](spy-call).\n\nIf the call did not throw an error, the value at the call’s location in `.exceptions` will be `undefined`.\n\n#### `spy.returnValues`\n\nArray of return values, `spy.returnValues[0]` is the return value of the first [call](spy-call).\n\nIf the call did not explicitly return a value, the value at the call’s location in `.returnValues` will be `undefined`.\n\n#### `spy.resetHistory();`\n\nResets the state of a spy.\n\n#### `spy.restore();`\n\nReplaces the spy with the original method. Only available if the spy replaced an existing method.\n\n#### `spy.printf(\"format string\", [arg1, arg2, ...]);`\n\nReturns the passed format string with the following replacements performed:\n\n`%n`  \nthe name of the spy \"spy\" by default)\n\n`%c`  \nthe number of times the spy was called, in words (\"once\", \"twice\", etc.)\n\n`%C`  \na list of string representations of the calls to the spy, with each call prefixed by a newline and four spaces\n\n`%t`  \na comma-delimited list of `this` values the spy was called on\n\n`%``n`  \nthe formatted value of the `n`th argument passed to `printf`\n\n`%*`  \na comma-delimited list of the (non-format string) arguments passed to `printf`\n\n`%D`  \na multi-line list of the arguments received by all calls to the spy\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/spies](https://sinonjs.org/releases/v15/spies)"
- name: Spy call
  id: spy-call
  summary: A spy call is an object representation of an individual call to a spied function, which could be a fake, spy, stub or mock method
  description: "# Spy call\n\n## Spy call\n\nA spy call is an object representation of an individual call to a *spied* function, which could be a [fake](fakes), [spy](spies), [stub](stubs) or [mock method](mocks).\n\n### `var spyCall = spy.getCall(n)`\n\nReturns the *nth* [call](#spycall). Accessing individual calls helps with more detailed behavior verification when the spy is called more than once.\n\n``` javascript\nsinon.spy(jQuery, \"ajax\");\njQuery.ajax(\"/stuffs\");\nvar spyCall = jQuery.ajax.getCall(0);\n\nassertEquals(\"/stuffs\", spyCall.args[0]);\n```\n\n### `spyCall.calledOn(obj);`\n\nReturns `true` if `obj` was `this` for this call. `calledOn` also accepts a matcher `spyCall.calledOn(sinon.match(fn))` (see [matchers](matchers)).\n\n### `spyCall.calledWith(arg1, arg2, ...);`\n\nReturns `true` if call received provided arguments (and possibly others).\n\n### `spyCall.calledWithExactly(arg1, arg2, ...);`\n\nReturns `true` if call received provided arguments and no others.\n\n### `spyCall.calledWithMatch(arg1, arg2, ...);`\n\nReturns `true` if call received matching arguments (and possibly others). This behaves the same as `spyCall.calledWith(sinon.match(arg1), sinon.match(arg2), ...)`.\n\n### `spyCall.notCalledWith(arg1, arg2, ...);`\n\nReturns `true` if call did not receive provided arguments.\n\n### `spyCall.notCalledWithMatch(arg1, arg2, ...);`\n\nReturns `true` if call did not receive matching arguments. This behaves the same as `spyCall.notCalledWith(sinon.match(arg1), sinon.match(arg2), ...)`.\n\n### `spyCall.returned(value);`\n\nReturns `true` if spied function returned the provided `value` on this call.\n\nUses deep comparison for objects and arrays. Use `spyCall.returned(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).\n\n### `spyCall.threw();`\n\nReturns `true` if call threw an exception.\n\n### `spyCall.threw(\"TypeError\");`\n\nReturns `true` if call threw exception of provided type.\n\n### `spyCall.threw(obj);`\n\nReturns `true` if call threw provided exception object.\n\n### `spyCall.calledBefore(otherCall)`\n\nReturns `true` if the spy call occurred before another spy call.\n\n### `spyCall.calledAfter(otherCall)`\n\nReturns `true` if the spy call occurred after another spy call.\n\n### `spyCall.calledImmediatelyBefore(otherCall)`\n\nReturns `true` if the spy call occurred before another call, and no calls to any other spy occurred in-between.\n\n### `spyCall.calledImmediatelyAfter(otherCall)`\n\nReturns `true` if the spy call occurred after another call, and no calls to any other spy occurred in-between.\n\n### `spyCall.thisValue`\n\nThe call’s `this` value.\n\n### `spyCall.args`\n\nArray of received arguments.\n\n### `spyCall.callback`\n\nThis property is a convenience for a call’s callback.\n\nWhen the last argument in a call is a `Function`, then `callback` will reference that. Otherwise it will be `undefined`.\n\n``` javascript\nvar spy = sinon.spy();\nvar callback = function () {};\n\nspy(1, 2, 3, callback);\n\nspy.lastCall.callback === callback;\n// true\n```\n\n#### `spyCall.firstArg`\n\nThis property is a convenience for the first argument of the call.\n\n``` javascript\nvar spy = sinon.spy();\nvar date = new Date();\n\nspy(date, 1, 2);\n\nspy.lastCall.firstArg === date;\n// true\n```\n\n#### `spyCall.lastArg`\n\nThis property is a convenience for the last argument of the call.\n\n``` javascript\nvar spy = sinon.spy();\nvar date = new Date();\n\nspy(1, 2, date);\n\nspy.lastCall.lastArg === date;\n// true\n```\n\n### `spyCall.exception`\n\nException thrown, if any.\n\n### `spyCall.returnValue`\n\nReturn value.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/spy-call](https://sinonjs.org/releases/v15/spy-call)"
- name: spy.alwaysCalledOn()
  id: spies#spyalwayscalledonobj
  summary: Returns true if the spy was always called with obj as this
  belongs_to: Spies
  description: |-
    #### `spy.alwaysCalledOn(obj);`

    Returns `true` if the spy was always called with `obj` as `this`.
- name: spy.alwaysCalledWith()
  id: spies#spyalwayscalledwitharg1-arg2-
  summary: Returns true if spy was always called with the provided arguments (and possibly others)
  belongs_to: Spies
  description: |-
    #### `spy.alwaysCalledWith(arg1, arg2, ...);`

    Returns `true` if spy was always called with the provided arguments (and possibly others).
- name: spy.alwaysCalledWithExactly()
  id: spies#spyalwayscalledwithexactlyarg1-arg2-
  summary: Returns true if spy was always called with the exact provided arguments
  belongs_to: Spies
  description: |-
    #### `spy.alwaysCalledWithExactly(arg1, arg2, ...);`

    Returns `true` if spy was always called with the exact provided arguments.
- name: spy.alwaysCalledWithMatch()
  id: spies#spyalwayscalledwithmatcharg1-arg2-
  summary: Returns true if spy was always called with matching arguments (and possibly others)
  belongs_to: Spies
  description: |-
    #### `spy.alwaysCalledWithMatch(arg1, arg2, ...);`

    Returns `true` if spy was always called with matching arguments (and possibly others).

    This behaves the same as `spy.alwaysCalledWith(sinon.match(arg1), sinon.match(arg2), ...)`.
- name: spy.alwaysReturned()
  id: spies#spyalwaysreturnedobj
  summary: Returns true if spy always returned the provided value
  belongs_to: Spies
  description: |-
    #### `spy.alwaysReturned(obj);`

    Returns `true` if spy always returned the provided value.
- name: spy.alwaysThrew()
  id: spies#spyalwaysthrew
  summary: Returns true if spy always threw an exception
  belongs_to: Spies
  description: |-
    #### `spy.alwaysThrew();`

    Returns `true` if spy always threw an exception.

    #### `spy.alwaysThrew("TypeError");`

    Returns `true` if spy always threw an exception of the provided type.

    #### `spy.alwaysThrew(obj);`

    Returns `true` if spy always threw the provided exception object.
- name: spy.args
  id: spies#spyargs
  summary: Array of arguments received, spy.args[0] is an array of arguments received in the first call
  belongs_to: Spies
  description: |-
    #### `spy.args`

    Array of arguments received, `spy.args[0]` is an array of arguments received in the first [call](spy-call).
- name: spy.callCount
  id: spies#spycallcount
  summary: The number of recorded calls
  belongs_to: Spies
  description: |-
    #### `spy.callCount`

    The number of recorded [calls](spy-call).
- name: spy.called
  id: spies#spycalled
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.called`

    `true` if the spy was called at least once
- name: spy.calledAfter()
  id: spies#spycalledafteranotherspy
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.calledAfter(anotherSpy);`

    Returns `true` if the spy was called after `anotherSpy`
- name: spy.calledBefore()
  id: spies#spycalledbeforeanotherspy
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.calledBefore(anotherSpy);`

    Returns `true` if the spy was called before `anotherSpy`
- name: spy.calledImmediatelyAfter()
  id: spies#spycalledimmediatelyafteranotherspy
  summary: Returns true if spy was called after anotherSpy, and no spy calls occurred between anotherSpy and spy
  belongs_to: Spies
  description: |-
    #### `spy.calledImmediatelyAfter(anotherSpy);`

    Returns `true` if `spy` was called after `anotherSpy`, and no spy [calls](spy-call) occurred between `anotherSpy` and `spy`.
- name: spy.calledImmediatelyBefore()
  id: spies#spycalledimmediatelybeforeanotherspy
  summary: Returns true if spy was called before anotherSpy, and no spy calls occurred between spy and anotherSpy
  belongs_to: Spies
  description: |-
    #### `spy.calledImmediatelyBefore(anotherSpy);`

    Returns `true` if `spy` was called before `anotherSpy`, and no spy [calls](spy-call) occurred between `spy` and `anotherSpy`.
- name: spy.calledOn()
  id: spies#spycalledonobj
  summary: Returns true if the spy was called at least once with obj as this
  belongs_to: Spies
  description: |-
    #### `spy.calledOn(obj);`

    Returns `true` if the spy was called at least once with `obj` as `this`. `calledOn` also accepts a matcher `spyCall.calledOn(sinon.match(fn))` (see [matchers](matchers)).
- name: spy.calledOnce
  id: spies#spycalledonce
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.calledOnce`

    `true` if spy was called exactly once
- name: spy.calledOnceWith()
  id: spies#spycalledoncewitharg1-arg2-
  summary: Returns true if spy was called exactly once in total and that one call was using the provided arguments
  belongs_to: Spies
  description: |-
    #### `spy.calledOnceWith(arg1, arg2, ...);`

    Returns `true` if spy was called exactly once in total and that one call was using the provided arguments.
- name: spy.calledOnceWithExactly()
  id: spies#spycalledoncewithexactlyarg1-arg2-
  summary: Returns true if spy was called exactly once in total and that one call was using the exact provided arguments and no others
  belongs_to: Spies
  description: |-
    #### `spy.calledOnceWithExactly(arg1, arg2, ...);`

    Returns `true` if spy was called exactly once in total and that one call was using the exact provided arguments and no others.
- name: spy.calledThrice
  id: spies#spycalledthrice
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.calledThrice`

    `true` if the spy was called exactly thrice
- name: spy.calledTwice
  id: spies#spycalledtwice
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.calledTwice`

    `true` if the spy was called exactly twice
- name: spy.calledWith()
  id: spies#spycalledwitharg1-arg2-
  summary: Returns true if spy was called at least once with the provided arguments
  belongs_to: Spies
  description: |-
    #### `spy.calledWith(arg1, arg2, ...);`

    Returns `true` if spy was called at least once with the provided arguments.

    Can be used for partial matching, Sinon only checks the provided arguments against actual arguments, so a call that received the provided arguments (in the same spots) and possibly others as well will return `true`.
- name: spy.calledWithExactly()
  id: spies#spycalledwithexactlyarg1-arg2-
  summary: Returns true if spy was called at least once with the provided arguments and no others
  belongs_to: Spies
  description: |-
    #### `spy.calledWithExactly(arg1, arg2, ...);`

    Returns `true` if spy was called at least once with the provided arguments and no others.
- name: spy.calledWithMatch()
  id: spies#spycalledwithmatcharg1-arg2-
  summary: Returns true if spy was called with matching arguments (and possibly others)
  belongs_to: Spies
  description: |-
    #### `spy.calledWithMatch(arg1, arg2, ...);`

    Returns `true` if spy was called with matching arguments (and possibly others).

    This behaves the same as `spy.calledWith(sinon.match(arg1), sinon.match(arg2), ...)`.
- name: spy.calledWithNew()
  id: spies#spycalledwithnew
  summary: Returns true if spy/stub was called the new operator
  belongs_to: Spies
  description: |-
    #### `spy.calledWithNew();`

    Returns `true` if spy/stub was called the `new` operator.

    Beware that this is inferred based on the value of the `this` object and the spy function’s `prototype`, so it may give false positives if you actively return the right kind of object.
- name: spy.exceptions
  id: spies#spyexceptions
  summary: Array of exception objects thrown, spy.exceptions[0] is the exception thrown by the first call
  belongs_to: Spies
  description: |-
    #### `spy.exceptions`

    Array of exception objects thrown, `spy.exceptions[0]` is the exception thrown by the first [call](spy-call).

    If the call did not throw an error, the value at the call’s location in `.exceptions` will be `undefined`.
- name: spy.firstCall
  id: spies#spyfirstcall
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.firstCall`

    The first [call](spy-call)
- name: spy.getCall()
  id: spies#var-spycall--spygetcalln
  summary: Returns the nth call
  belongs_to: Spies
  description: |-
    #### `var spyCall = spy.getCall(n);`

    Returns the *nth* [call](#spycall).

    If *n* is negative, the *nth* call from the end is returned. For example, `spy.getCall(-1)` returns the last call, and `spy.getCall(-2)` returns the second to last call.

    Accessing individual calls helps with more detailed behavior verification when the spy is called more than once.
- name: spy.getCalls()
  id: spies#var-spycalls--spygetcalls
  summary: Returns an Array of all calls recorded by the spy
  belongs_to: Spies
  description: |-
    #### `var spyCalls = spy.getCalls();`

    Returns an `Array` of all [calls](spy-call) recorded by the spy.
- name: spy.lastCall
  id: spies#spylastcall
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.lastCall`

    The last [call](spy-call)
- name: spy.neverCalledWith()
  id: spies#spynevercalledwitharg1-arg2-
  summary: Returns true if the spy/stub was never called with the provided arguments
  belongs_to: Spies
  description: |-
    #### `spy.neverCalledWith(arg1, arg2, ...);`

    Returns `true` if the spy/stub was never called with the provided arguments.
- name: spy.neverCalledWithMatch()
  id: spies#spynevercalledwithmatcharg1-arg2-
  summary: Returns true if the spy/stub was never called with matching arguments
  belongs_to: Spies
  description: |-
    #### `spy.neverCalledWithMatch(arg1, arg2, ...);`

    Returns `true` if the spy/stub was never called with matching arguments.

    This behaves the same as `spy.neverCalledWith(sinon.match(arg1), sinon.match(arg2), ...)`.
- name: spy.notCalled
  id: spies#spynotcalled
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.notCalled`

    `true` if the spy was not called
- name: spy.printf()
  id: spies#spyprintfformat-string-arg1-arg2-
  summary: © 2010–2022 Christian Johansen Licensed under the BSD License
  belongs_to: Spies
  description: "#### `spy.printf(\"format string\", [arg1, arg2, ...]);`\n\nReturns the passed format string with the following replacements performed:\n\n`%n`\n\nthe name of the spy \"spy\" by default)\n\n`%c`\n\nthe number of times the spy was called, in words (\"once\", \"twice\", etc.)\n\n`%C`\n\na list of string representations of the calls to the spy, with each call prefixed by a newline and four spaces\n\n`%t`\n\na comma-delimited list of `this` values the spy was called on\n\n`%``n`\n\nthe formatted value of the `n`th argument passed to `printf`\n\n`%*`\n\na comma-delimited list of the (non-format string) arguments passed to `printf`\n\n`%D`\n\na multi-line list of the arguments received by all calls to the spy\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/spies](https://sinonjs.org/releases/v15/spies)"
- name: spy.resetHistory()
  id: spies#spyresethistory
  summary: Resets the state of a spy
  belongs_to: Spies
  description: |-
    #### `spy.resetHistory();`

    Resets the state of a spy.
- name: spy.restore()
  id: spies#spyrestore
  summary: Replaces the spy with the original method
  belongs_to: Spies
  description: |-
    #### `spy.restore();`

    Replaces the spy with the original method. Only available if the spy replaced an existing method.
- name: spy.returned()
  id: spies#spyreturnedobj
  summary: Returns true if spy returned the provided value at least once
  belongs_to: Spies
  description: |-
    #### `spy.returned(obj);`

    Returns `true` if spy returned the provided value at least once.

    Uses deep comparison for objects and arrays. Use `spy.returned(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).
- name: spy.returnValues
  id: spies#spyreturnvalues
  summary: Array of return values, spy.returnValues[0] is the return value of the first call
  belongs_to: Spies
  description: |-
    #### `spy.returnValues`

    Array of return values, `spy.returnValues[0]` is the return value of the first [call](spy-call).

    If the call did not explicitly return a value, the value at the call’s location in `.returnValues` will be `undefined`.
- name: spy.secondCall
  id: spies#spysecondcall
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.secondCall`

    The second [call](spy-call)
- name: spy.thirdCall
  id: spies#spythirdcall
  summary: null
  belongs_to: Spies
  description: |-
    #### `spy.thirdCall`

    The third [call](spy-call)
- name: spy.thisValues
  id: spies#spythisvalues
  summary: Array of this objects, spy.thisValues[0] is the this object for the first call
  belongs_to: Spies
  description: |-
    #### `spy.thisValues`

    Array of `this` objects, `spy.thisValues[0]` is the `this` object for the first [call](spy-call).
- name: spy.threw()
  id: spies#spythrew
  summary: Returns true if spy threw an exception at least once
  belongs_to: Spies
  description: |-
    #### `spy.threw();`

    Returns `true` if spy threw an exception at least once.

    #### `spy.threw("TypeError");`

    Returns `true` if spy threw an exception of the provided type at least once.

    #### `spy.threw(obj);`

    Returns `true` if spy threw the provided exception object at least once.
- name: spy.withArgs()
  id: spies#spywithargsarg1-arg2-
  summary: Creates a spy that only records calls when the received arguments match those passed to withArgs
  belongs_to: Spies
  description: |-
    #### `spy.withArgs(arg1[, arg2, ...]);`

    Creates a spy that only records [calls](spy-call) when the received arguments match those passed to `withArgs`. This is useful to be more expressive in your assertions, where you can access the spy with the same [call](spy-call).

    Uses deep comparison for objects and arrays. Use `spy.withArgs(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).
- name: spyCall.firstArg
  id: spy-call#spycallfirstarg
  summary: This property is a convenience for the first argument of the call
  belongs_to: Spy call
  description: |-
    #### `spyCall.firstArg`

    This property is a convenience for the first argument of the call.

    ``` javascript
    var spy = sinon.spy();
    var date = new Date();

    spy(date, 1, 2);

    spy.lastCall.firstArg === date;
    // true
    ```
- name: spyCall.lastArg
  id: spy-call#spycalllastarg
  summary: This property is a convenience for the last argument of the call
  belongs_to: Spy call
  description: "#### `spyCall.lastArg`\n\nThis property is a convenience for the last argument of the call.\n\n``` javascript\nvar spy = sinon.spy();\nvar date = new Date();\n\nspy(1, 2, date);\n\nspy.lastCall.lastArg === date;\n// true\n```\n\n### `spyCall.exception`\n\nException thrown, if any.\n\n### `spyCall.returnValue`\n\nReturn value.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/spy-call](https://sinonjs.org/releases/v15/spy-call)"
- name: stub.callArg()
  id: stubs#stubcallargargnum
  summary: Like yield, but with an explicit argument number specifying which callback to call
  belongs_to: Stubs
  description: |-
    #### `stub.callArg(argNum)`

    Like `yield`, but with an explicit argument number specifying which callback to call.

    Useful if a function is called with more than one callback, and calling the first callback is not desired.

    ``` javascript
    "calling the last callback": function () {
        var callback = sinon.stub();
        callback(function () {
            console.log("Success!");
        }, function () {
            console.log("Oh noes!");
        });

        callback.callArg(1); // Logs "Oh noes!"
    }
    ```
- name: stub.callArgWith()
  id: stubs#stubcallargwithargnum-arg1-arg2-
  summary: Like callArg, but with arguments
  belongs_to: Stubs
  description: |-
    #### `stub.callArgWith(argNum, [arg1, arg2, ...])`

    Like `callArg`, but with arguments.

    #### Asynchronous calls

    Same as their corresponding non-Async counterparts, but with callback being deferred at called after all instructions in the current call stack are processed.

    - In Node environment the callback is deferred with `process.nextTick`.
    - In a browser the callback is deferred with `setTimeout(callback, 0)`.

    More information:

    - <https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick>,
    - <https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop>,
    - <https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout>.

    ##### `stub.callsArgAsync(index);`

    Async version of [stub.callsArg(index)](#stubcallsargindex). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.callsArgOnAsync(index, context);`

    Async version of [stub.callsArgOn(index, context)](#stubcallsargonindex-context). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.callsArgWithAsync(index, arg1, arg2, ...);`

    Async version of [stub.callsArgWith(index, arg1, arg2, …)](#stubcallsargwithindex-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.callsArgOnWithAsync(index, context, arg1, arg2, ...);`

    Async version of [stub.callsArgOnWith(index, context, arg1, arg2, …)](#stubcallsargonwithindex-context-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.yieldsAsync([arg1, arg2, ...]);`

    Async version of [stub.yields(\[arg1, arg2, …\])](#stubyieldsarg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.yieldsOnAsync(context, [arg1, arg2, ...]);`

    Async version of [stub.yieldsOn(context, \[arg1, arg2, …\])](#stubyieldsoncontext-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.yieldsToAsync(property, [arg1, arg2, ...]);`

    Async version of [stub.yieldsTo(property, \[arg1, arg2, …\])](#stubyieldstoproperty-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).

    ##### `stub.yieldsToOnAsync(property, context, [arg1, arg2, ...])`

    Async version of [stub.yieldsToOn(property, context, \[arg1, arg2, …\])](#stubyieldstoonproperty-context-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).
- name: stub.callsArg()
  id: stubs#stubcallsargindex
  summary: Causes the stub to call the argument at the provided index as a callback function
  belongs_to: Stubs
  description: |-
    #### `stub.callsArg(index);`

    Causes the stub to call the argument at the provided index as a callback function.

    `stub.callsArg(0);` causes the stub to call the first argument as a callback.

    If the argument at the provided index is not available or is not a function, a `TypeError` will be thrown.
- name: stub.callsArgOn()
  id: stubs#stubcallsargonindex-context
  summary: Like stub.callsArg(index); but with an additional parameter to pass the this context
  belongs_to: Stubs
  description: |-
    #### `stub.callsArgOn(index, context);`

    Like `stub.callsArg(index);` but with an additional parameter to pass the `this` context.
- name: stub.callsArgOnWith()
  id: stubs#stubcallsargonwithindex-context-arg1-arg2-
  summary: Like above but with an additional parameter to pass the this context
  belongs_to: Stubs
  description: |-
    #### `stub.callsArgOnWith(index, context, arg1, arg2, ...);`

    Like above but with an additional parameter to pass the `this` context.
- name: stub.callsArgWith()
  id: stubs#stubcallsargwithindex-arg1-arg2-
  summary: Like callsArg, but with arguments to pass to the callback
  belongs_to: Stubs
  description: |-
    #### `stub.callsArgWith(index, arg1, arg2, ...);`

    Like `callsArg`, but with arguments to pass to the callback.
- name: stub.callsFake()
  id: stubs#stubcallsfakefakefunction
  summary: Makes the stub call the provided fakeFunction when invoked
  belongs_to: Stubs
  description: |-
    #### `stub.callsFake(fakeFunction);`

    Makes the stub call the provided `fakeFunction` when invoked.
- name: stub.callThrough()
  id: stubs#stubcallthrough
  summary: Causes the original method wrapped into the stub to be called when none of the conditional stubs are matched
  belongs_to: Stubs
  description: |-
    #### `stub.callThrough();`

    Causes the original method wrapped into the stub to be called when none of the conditional stubs are matched.
- name: stub.callThroughWithNew()
  id: stubs#stubcallthroughwithnew
  summary: Causes the original method wrapped into the stub to be called using the new operator when none of the conditional stubs are matched
  belongs_to: Stubs
  description: |-
    #### `stub.callThroughWithNew();`

    Causes the original method wrapped into the stub to be called using the `new` operator when none of the conditional stubs are matched.
- name: stub.get()
  id: stubs#stubgetgetterfn
  summary: Replaces a new getter for this stub
  belongs_to: Stubs
  description: |-
    #### `stub.get(getterFn)`

    Replaces a new getter for this stub.
- name: stub.onCall()
  id: stubs#stuboncalln-added-in-v18
  summary: Defines the behavior of the stub on the nth call
  belongs_to: Stubs
  description: |-
    #### `stub.onCall(n);` *Added in v1.8*

    Defines the behavior of the stub on the *nth* call. Useful for testing sequential interactions.

    There are methods `onFirstCall`, `onSecondCall`,`onThirdCall` to make stub definitions read more naturally.

    `onCall` can be combined with all of the behavior defining methods in this section. In particular, it can be used together with `withArgs`.

    Note how the behavior of the stub for argument `42` falls back to the default behavior once no more calls have been defined.
- name: stub.onFirstCall()
  id: stubs#stubonfirstcall
  summary: null
  belongs_to: Stubs
  description: |-
    #### `stub.onFirstCall();`

    Alias for `stub.onCall(0);`
- name: stub.onSecondCall()
  id: stubs#stubonsecondcall
  summary: null
  belongs_to: Stubs
  description: |-
    #### `stub.onSecondCall();`

    Alias for `stub.onCall(1);`
- name: stub.onThirdCall()
  id: stubs#stubonthirdcall
  summary: null
  belongs_to: Stubs
  description: |-
    #### `stub.onThirdCall();`

    Alias for `stub.onCall(2);`
- name: stub.rejects()
  id: stubs#stubrejects
  summary: Causes the stub to return a Promise which rejects with an exception (Error)
  belongs_to: Stubs
  description: |-
    #### `stub.rejects();`

    Causes the stub to return a Promise which rejects with an exception (`Error`).

    When constructing the Promise, sinon uses the `Promise.reject` method. You are responsible for providing a polyfill in environments which do not provide `Promise`. The Promise library can be overwritten using the `usingPromise` method.

    *Since `sinon@2.0.0`*

    #### `stub.rejects("TypeError");`

    Causes the stub to return a Promise which rejects with an exception of the provided type.

    *Since `sinon@2.0.0`*

    #### `stub.rejects(value);`

    Causes the stub to return a Promise which rejects with the provided exception object.

    *Since `sinon@2.0.0`*
- name: stub.reset()
  id: stubs#stubreset
  summary: Resets both behaviour and history of the stub
  belongs_to: Stubs
  description: |-
    #### `stub.reset();`

    Resets both behaviour and history of the stub.

    This is equivalent to calling both `stub.resetBehavior()` and `stub.resetHistory()`

    *Updated in `sinon@2.0.0`*

    *Since `sinon@5.0.0`*

    As a convenience, you can apply `stub.reset()` to all stubs using `sinon.reset()`
- name: stub.resetBehavior()
  id: stubs#stubresetbehavior
  summary: null
  belongs_to: Stubs
  description: |-
    #### `stub.resetBehavior();`

    Resets the stub’s behaviour to the default behaviour

    *Since `sinon@5.0.0`*

    You can reset behaviour of all stubs using `sinon.resetBehavior()`
- name: stub.resetHistory()
  id: stubs#stubresethistory
  summary: null
  belongs_to: Stubs
  description: |-
    #### `stub.resetHistory();`

    *Since `sinon@2.0.0`*

    Resets the stub’s history

    *Since `sinon@5.0.0`*

    You can reset history of all stubs using `sinon.resetHistory()`
- name: stub.resolves()
  id: stubs#stubresolvesvalue
  summary: Causes the stub to return a Promise which resolves to the provided value
  belongs_to: Stubs
  description: |-
    #### `stub.resolves(value);`

    Causes the stub to return a Promise which resolves to the provided value.

    When constructing the Promise, sinon uses the `Promise.resolve` method. You are responsible for providing a polyfill in environments which do not provide `Promise`. The Promise library can be overwritten using the `usingPromise` method.

    *Since `sinon@2.0.0`*
- name: stub.resolvesArg()
  id: stubs#stubresolvesargindex
  summary: Causes the stub to return a Promise which resolves to the argument at the provided index
  belongs_to: Stubs
  description: |-
    #### `stub.resolvesArg(index);`

    Causes the stub to return a Promise which resolves to the argument at the provided index.

    `stub.resolvesArg(0);` causes the stub to return a Promise which resolves to the first argument.

    If the argument at the provided index is not available, a `TypeError` will be thrown.

    *Since `sinon@6.1.1`*
- name: stub.returns()
  id: stubs#stubreturnsobj
  summary: Makes the stub return the provided value
  belongs_to: Stubs
  description: |-
    #### `stub.returns(obj);`

    Makes the stub return the provided value.
- name: stub.returnsArg()
  id: stubs#stubreturnsargindex
  summary: Causes the stub to return the argument at the provided index
  belongs_to: Stubs
  description: |-
    #### `stub.returnsArg(index);`

    Causes the stub to return the argument at the provided index.

    `stub.returnsArg(0);` causes the stub to return the first argument.

    If the argument at the provided index is not available, prior to `sinon@6.1.2`, an `undefined` value will be returned; starting from `sinon@6.1.2`, a `TypeError` will be thrown.
- name: stub.returnsThis()
  id: stubs#stubreturnsthis
  summary: Causes the stub to return its this value
  belongs_to: Stubs
  description: |-
    #### `stub.returnsThis();`

    Causes the stub to return its `this` value.

    Useful for stubbing jQuery-style fluent APIs.
- name: stub.set()
  id: stubs#stubsetsetterfn
  summary: Defines a new setter for this stub
  belongs_to: Stubs
  description: |-
    #### `stub.set(setterFn)`

    Defines a new setter for this stub.
- name: stub.throws()
  id: stubs#stubthrows
  summary: Causes the stub to throw an exception (Error)
  belongs_to: Stubs
  description: |-
    #### `stub.throws();`

    Causes the stub to throw an exception (`Error`).

    #### `stub.throws("name"[, "optional message"]);`

    Causes the stub to throw an exception with the `name` property set to the provided string. The message parameter is optional and will set the `message` property of the exception.

    #### `stub.throws(obj);`

    Causes the stub to throw the provided exception object.

    #### `stub.throws(function() { return new Error(); });`

    Causes the stub to throw the exception returned by the function.
- name: stub.throwsArg()
  id: stubs#stubthrowsargindex
  summary: Causes the stub to throw the argument at the provided index
  belongs_to: Stubs
  description: |-
    #### `stub.throwsArg(index);`

    Causes the stub to throw the argument at the provided index.

    `stub.throwsArg(0);` causes the stub to throw the first argument as the exception.

    If the argument at the provided index is not available, a `TypeError` will be thrown.

    *Since `sinon@2.3.0`*
- name: stub.usingPromise()
  id: stubs#stubusingpromisepromiselibrary
  summary: Causes the stub to return promises using a specific Promise library instead of the global one when using stub.rejects or stub.resolves
  belongs_to: Stubs
  description: |-
    #### `stub.usingPromise(promiseLibrary);`

    Causes the stub to return promises using a specific Promise library instead of the global one when using `stub.rejects` or `stub.resolves`. Returns the stub to allow chaining.

    *Since `sinon@2.0.0`*
- name: stub.value()
  id: stubs#stubvaluenewval
  summary: Defines a new value for this stub
  belongs_to: Stubs
  description: |-
    #### `stub.value(newVal)`

    Defines a new value for this stub.

    You can restore values by calling the `restore` method:
- name: stub.withArgs()
  id: stubs#stubwithargsarg1-arg2-
  summary: Stubs the method only for the provided arguments
  belongs_to: Stubs
  description: |-
    #### `stub.withArgs(arg1[, arg2, ...]);`

    Stubs the method only for the provided arguments.

    This is useful to be more expressive in your assertions, where you can access the spy with the same call. It is also useful to create a stub that can act differently in response to different arguments.

    Uses deep comparison for objects and arrays. Use `stub.withArgs(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).
- name: stub.wrappedMethod
  id: stubs#stubwrappedmethod
  summary: Holds a reference to the original method/function this stub has wrapped
  belongs_to: Stubs
  description: "#### `stub.wrappedMethod`\n\nHolds a reference to the original method/function this stub has wrapped.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/stubs](https://sinonjs.org/releases/v15/stubs)"
- name: stub.yield()
  id: stubs#stubyieldarg1-arg2-
  summary: Invoke callbacks passed to the stub with the given arguments
  belongs_to: Stubs
  description: |-
    #### `stub.yield([arg1, arg2, ...])`

    Invoke callbacks passed to the `stub` with the given arguments.

    If the stub was never called with a function argument, `yield` throws an error.

    Returns an Array with all callbacks return values in the order they were called, if no error is thrown.

    Also aliased as `invokeCallback`.
- name: stub.yields()
  id: stubs#stubyieldsarg1-arg2-
  summary: Similar to callsArg
  belongs_to: Stubs
  description: |-
    #### `stub.yields([arg1, arg2, ...])`

    Similar to `callsArg`.

    Causes the stub to call the first callback it receives with the provided arguments (if any).

    If a method accepts more than one callback, you need to use `yieldsRight` to call the last callback or `callsArg` to have the stub invoke other callbacks than the first or last one.
- name: stub.yieldsOn()
  id: stubs#stubyieldsoncontext-arg1-arg2-
  summary: Like yields but with an additional parameter to pass the this context
  belongs_to: Stubs
  description: |-
    #### `stub.yieldsOn(context, [arg1, arg2, ...])`

    Like `yields` but with an additional parameter to pass the `this` context.
- name: stub.yieldsRight()
  id: stubs#stubyieldsrightarg1-arg2-
  summary: Like yields but calls the last callback it receives
  belongs_to: Stubs
  description: |-
    #### `stub.yieldsRight([arg1, arg2, ...])`

    Like `yields` but calls the last callback it receives.
- name: stub.yieldsTo()
  id: stubs#stubyieldstoproperty-arg1-arg2-
  summary: Causes the spy to invoke a callback passed as a property of an object to the spy
  belongs_to: Stubs
  description: |-
    #### `stub.yieldsTo(property, [arg1, arg2, ...])`

    Causes the spy to invoke a callback passed as a property of an object to the spy.

    Like `yields`, `yieldsTo` grabs the first matching argument, finds the callback and calls it with the (optional) arguments.

    ``` javascript
    "test should fake successful ajax request": function () {
        sinon.stub(jQuery, "ajax").yieldsTo("success", [1, 2, 3]);

        jQuery.ajax({
            success: function (data) {
                assertEquals([1, 2, 3], data);
            }
        });
    }
    ```
- name: stub.yieldsToOn()
  id: stubs#stubyieldstoonproperty-context-arg1-arg2-
  summary: Like above but with an additional parameter to pass the this context
  belongs_to: Stubs
  description: |-
    #### `stub.yieldsToOn(property, context, [arg1, arg2, ...])`

    Like above but with an additional parameter to pass the `this` context.
- name: stub.yieldTo()
  id: stubs#stubyieldtocallback-arg1-arg2-
  summary: Invokes callbacks passed as a property of an object to the stub
  belongs_to: Stubs
  description: |-
    #### `stub.yieldTo(callback, [arg1, arg2, ...])`

    Invokes callbacks passed as a property of an object to the stub.

    Like `yield`, `yieldTo` grabs the first matching argument, finds the callback and calls it with the (optional) arguments.
- name: Stubs
  id: stubs
  summary: Test stubs are functions (spies) with pre-programmed behavior
  description: "# Stubs\n\n### What are stubs?\n\nTest stubs are functions (spies) with pre-programmed behavior.\n\nThey support the full [test spy API](spies) in addition to methods which can be used to alter the stub’s behavior.\n\nAs spies, stubs can be either anonymous, or wrap existing functions. When wrapping an existing function with a stub, the original function is not called.\n\n### When to use stubs?\n\nUse a stub when you want to:\n\n1.  Control a method’s behavior from a test to force the code down a specific path. Examples include forcing a method to throw an error in order to test error handling.\n\n2.  When you want to prevent a specific method from being called directly (possibly because it triggers undesired behavior, such as a `XMLHttpRequest` or similar).\n\nThe following example is yet another test from [PubSubJS](https://github.com/mroderick/pubsubjs) which shows how to create an anonymous stub that throws an exception when called.\n\nNote how the stub also implements the spy interface. The test verifies that all callbacks were called, and also that the exception throwing stub was called before one of the other callbacks.\n\n### Defining stub behavior on consecutive calls\n\nCalling behavior defining methods like `returns` or `throws` multiple times overrides the behavior of the stub. As of Sinon version 1.8, you can use the [`onCall`](#stuboncalln-added-in-v18) method to make a stub respond differently on consecutive calls.\n\nNote that in Sinon version 1.5 to version 1.7, multiple calls to the `yields*` and `callsArg*` family of methods define a sequence of behaviors for consecutive calls. As of 1.8, this functionality has been removed in favor of the [`onCall`](#stuboncalln-added-in-v18) API.\n\n### Stub API\n\n### Properties\n\n#### `var stub = sinon.stub();`\n\nCreates an anonymous stub function\n\n#### `var stub = sinon.stub(object, \"method\");`\n\nReplaces `object.method` with a stub function. An exception is thrown if the property is not already a function.\n\nThe original function can be restored by calling `object.method.restore();` (or `stub.restore();`).\n\n#### ~~`var stub = sinon.stub(object, \"method\", func);`~~\n\nThis has been removed from `v3.0.0`. Instead you should use\n\n`stub(obj, 'meth').callsFake(fn)`\n\nA [codemod is available](https://github.com/hurrymaplelad/sinon-codemod) to upgrade your code\n\n#### `var stub = sinon.stub(obj);`\n\nStubs all the object’s methods.\n\nNote that it’s usually better practice to stub individual methods, particularly on objects that you don’t understand or control all the methods for (e.g. library dependencies).\n\nStubbing individual methods tests intent more precisely and is less susceptible to unexpected behavior as the object’s code evolves.\n\nIf you want to create a stub object of `MyConstructor`, but don’t want the constructor to be invoked, use this utility function.\n\n``` javascript\nvar stub = sinon.createStubInstance(MyConstructor, overrides);\n```\n\n`overrides` is an optional map overriding created stubs, for example:\n\n``` javascript\nvar stub = sinon.createStubInstance(MyConstructor, {\n  foo: sinon.stub().returnsThis(),\n});\n```\n\nis the same as:\n\n``` javascript\nvar stub = sinon.createStubInstance(MyConstructor);\nstub.foo.returnsThis();\n```\n\nIf provided value is not a stub, it will be used as the returned value:\n\n``` javascript\nvar stub = sinon.createStubInstance(MyConstructor, {\n  foo: 3,\n});\n```\n\nis the same as:\n\n``` javascript\nvar stub = sinon.createStubInstance(MyConstructor);\nstub.foo.returns(3);\n```\n\n#### `stub.withArgs(arg1[, arg2, ...]);`\n\nStubs the method only for the provided arguments.\n\nThis is useful to be more expressive in your assertions, where you can access the spy with the same call. It is also useful to create a stub that can act differently in response to different arguments.\n\nUses deep comparison for objects and arrays. Use `stub.withArgs(sinon.match.same(obj))` for strict comparison (see [matchers](matchers)).\n\n#### `stub.onCall(n);` *Added in v1.8*\n\nDefines the behavior of the stub on the *nth* call. Useful for testing sequential interactions.\n\nThere are methods `onFirstCall`, `onSecondCall`,`onThirdCall` to make stub definitions read more naturally.\n\n`onCall` can be combined with all of the behavior defining methods in this section. In particular, it can be used together with `withArgs`.\n\nNote how the behavior of the stub for argument `42` falls back to the default behavior once no more calls have been defined.\n\n#### `stub.onFirstCall();`\n\nAlias for `stub.onCall(0);`\n\n#### `stub.onSecondCall();`\n\nAlias for `stub.onCall(1);`\n\n#### `stub.onThirdCall();`\n\nAlias for `stub.onCall(2);`\n\n#### `stub.reset();`\n\nResets both behaviour and history of the stub.\n\nThis is equivalent to calling both `stub.resetBehavior()` and `stub.resetHistory()`\n\n*Updated in `sinon@2.0.0`*\n\n*Since `sinon@5.0.0`*\n\nAs a convenience, you can apply `stub.reset()` to all stubs using `sinon.reset()`\n\n#### `stub.resetBehavior();`\n\nResets the stub’s behaviour to the default behaviour\n\n*Since `sinon@5.0.0`*\n\nYou can reset behaviour of all stubs using `sinon.resetBehavior()`\n\n#### `stub.resetHistory();`\n\n*Since `sinon@2.0.0`*\n\nResets the stub’s history\n\n*Since `sinon@5.0.0`*\n\nYou can reset history of all stubs using `sinon.resetHistory()`\n\n#### `stub.callsFake(fakeFunction);`\n\nMakes the stub call the provided `fakeFunction` when invoked.\n\n#### `stub.returns(obj);`\n\nMakes the stub return the provided value.\n\n#### `stub.returnsArg(index);`\n\nCauses the stub to return the argument at the provided index.\n\n`stub.returnsArg(0);` causes the stub to return the first argument.\n\nIf the argument at the provided index is not available, prior to `sinon@6.1.2`, an `undefined` value will be returned; starting from `sinon@6.1.2`, a `TypeError` will be thrown.\n\n#### `stub.returnsThis();`\n\nCauses the stub to return its `this` value.\n\nUseful for stubbing jQuery-style fluent APIs.\n\n#### `stub.resolves(value);`\n\nCauses the stub to return a Promise which resolves to the provided value.\n\nWhen constructing the Promise, sinon uses the `Promise.resolve` method. You are responsible for providing a polyfill in environments which do not provide `Promise`. The Promise library can be overwritten using the `usingPromise` method.\n\n*Since `sinon@2.0.0`*\n\n#### `stub.resolvesArg(index);`\n\nCauses the stub to return a Promise which resolves to the argument at the provided index.\n\n`stub.resolvesArg(0);` causes the stub to return a Promise which resolves to the first argument.\n\nIf the argument at the provided index is not available, a `TypeError` will be thrown.\n\n*Since `sinon@6.1.1`*\n\n#### `stub.throws();`\n\nCauses the stub to throw an exception (`Error`).\n\n#### `stub.throws(\"name\"[, \"optional message\"]);`\n\nCauses the stub to throw an exception with the `name` property set to the provided string. The message parameter is optional and will set the `message` property of the exception.\n\n#### `stub.throws(obj);`\n\nCauses the stub to throw the provided exception object.\n\n#### `stub.throws(function() { return new Error(); });`\n\nCauses the stub to throw the exception returned by the function.\n\n#### `stub.throwsArg(index);`\n\nCauses the stub to throw the argument at the provided index.\n\n`stub.throwsArg(0);` causes the stub to throw the first argument as the exception.\n\nIf the argument at the provided index is not available, a `TypeError` will be thrown.\n\n*Since `sinon@2.3.0`*\n\n#### `stub.rejects();`\n\nCauses the stub to return a Promise which rejects with an exception (`Error`).\n\nWhen constructing the Promise, sinon uses the `Promise.reject` method. You are responsible for providing a polyfill in environments which do not provide `Promise`. The Promise library can be overwritten using the `usingPromise` method.\n\n*Since `sinon@2.0.0`*\n\n#### `stub.rejects(\"TypeError\");`\n\nCauses the stub to return a Promise which rejects with an exception of the provided type.\n\n*Since `sinon@2.0.0`*\n\n#### `stub.rejects(value);`\n\nCauses the stub to return a Promise which rejects with the provided exception object.\n\n*Since `sinon@2.0.0`*\n\n#### `stub.callsArg(index);`\n\nCauses the stub to call the argument at the provided index as a callback function.\n\n`stub.callsArg(0);` causes the stub to call the first argument as a callback.\n\nIf the argument at the provided index is not available or is not a function, a `TypeError` will be thrown.\n\n#### `stub.callThrough();`\n\nCauses the original method wrapped into the stub to be called when none of the conditional stubs are matched.\n\n#### `stub.callThroughWithNew();`\n\nCauses the original method wrapped into the stub to be called using the `new` operator when none of the conditional stubs are matched.\n\n#### `stub.callsArgOn(index, context);`\n\nLike `stub.callsArg(index);` but with an additional parameter to pass the `this` context.\n\n#### `stub.callsArgWith(index, arg1, arg2, ...);`\n\nLike `callsArg`, but with arguments to pass to the callback.\n\n#### `stub.callsArgOnWith(index, context, arg1, arg2, ...);`\n\nLike above but with an additional parameter to pass the `this` context.\n\n#### `stub.usingPromise(promiseLibrary);`\n\nCauses the stub to return promises using a specific Promise library instead of the global one when using `stub.rejects` or `stub.resolves`. Returns the stub to allow chaining.\n\n*Since `sinon@2.0.0`*\n\n#### `stub.yields([arg1, arg2, ...])`\n\nSimilar to `callsArg`.\n\nCauses the stub to call the first callback it receives with the provided arguments (if any).\n\nIf a method accepts more than one callback, you need to use `yieldsRight` to call the last callback or `callsArg` to have the stub invoke other callbacks than the first or last one.\n\n#### `stub.yieldsRight([arg1, arg2, ...])`\n\nLike `yields` but calls the last callback it receives.\n\n#### `stub.yieldsOn(context, [arg1, arg2, ...])`\n\nLike `yields` but with an additional parameter to pass the `this` context.\n\n#### `stub.yieldsTo(property, [arg1, arg2, ...])`\n\nCauses the spy to invoke a callback passed as a property of an object to the spy.\n\nLike `yields`, `yieldsTo` grabs the first matching argument, finds the callback and calls it with the (optional) arguments.\n\n``` javascript\n\"test should fake successful ajax request\": function () {\n    sinon.stub(jQuery, \"ajax\").yieldsTo(\"success\", [1, 2, 3]);\n\n    jQuery.ajax({\n        success: function (data) {\n            assertEquals([1, 2, 3], data);\n        }\n    });\n}\n```\n\n#### `stub.yieldsToOn(property, context, [arg1, arg2, ...])`\n\nLike above but with an additional parameter to pass the `this` context.\n\n#### `stub.yield([arg1, arg2, ...])`\n\nInvoke callbacks passed to the `stub` with the given arguments.\n\nIf the stub was never called with a function argument, `yield` throws an error.\n\nReturns an Array with all callbacks return values in the order they were called, if no error is thrown.\n\nAlso aliased as `invokeCallback`.\n\n#### `stub.yieldTo(callback, [arg1, arg2, ...])`\n\nInvokes callbacks passed as a property of an object to the stub.\n\nLike `yield`, `yieldTo` grabs the first matching argument, finds the callback and calls it with the (optional) arguments.\n\n#### `stub.callArg(argNum)`\n\nLike `yield`, but with an explicit argument number specifying which callback to call.\n\nUseful if a function is called with more than one callback, and calling the first callback is not desired.\n\n``` javascript\n\"calling the last callback\": function () {\n    var callback = sinon.stub();\n    callback(function () {\n        console.log(\"Success!\");\n    }, function () {\n        console.log(\"Oh noes!\");\n    });\n\n    callback.callArg(1); // Logs \"Oh noes!\"\n}\n```\n\n#### `stub.callArgWith(argNum, [arg1, arg2, ...])`\n\nLike `callArg`, but with arguments.\n\n#### Asynchronous calls\n\nSame as their corresponding non-Async counterparts, but with callback being deferred at called after all instructions in the current call stack are processed.\n\n- In Node environment the callback is deferred with `process.nextTick`.\n- In a browser the callback is deferred with `setTimeout(callback, 0)`.\n\nMore information:\n\n- <https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick>,\n- <https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop>,\n- <https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout>.\n\n##### `stub.callsArgAsync(index);`\n\nAsync version of [stub.callsArg(index)](#stubcallsargindex). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.callsArgOnAsync(index, context);`\n\nAsync version of [stub.callsArgOn(index, context)](#stubcallsargonindex-context). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.callsArgWithAsync(index, arg1, arg2, ...);`\n\nAsync version of [stub.callsArgWith(index, arg1, arg2, …)](#stubcallsargwithindex-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.callsArgOnWithAsync(index, context, arg1, arg2, ...);`\n\nAsync version of [stub.callsArgOnWith(index, context, arg1, arg2, …)](#stubcallsargonwithindex-context-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.yieldsAsync([arg1, arg2, ...]);`\n\nAsync version of [stub.yields(\\[arg1, arg2, …\\])](#stubyieldsarg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.yieldsOnAsync(context, [arg1, arg2, ...]);`\n\nAsync version of [stub.yieldsOn(context, \\[arg1, arg2, …\\])](#stubyieldsoncontext-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.yieldsToAsync(property, [arg1, arg2, ...]);`\n\nAsync version of [stub.yieldsTo(property, \\[arg1, arg2, …\\])](#stubyieldstoproperty-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).\n\n##### `stub.yieldsToOnAsync(property, context, [arg1, arg2, ...])`\n\nAsync version of [stub.yieldsToOn(property, context, \\[arg1, arg2, …\\])](#stubyieldstoonproperty-context-arg1-arg2-). See also [Asynchronous calls](#asynchronous-calls).\n\n#### `sinon.addBehavior(name, fn);`\n\nAdd a custom behavior. The name will be available as a function on stubs, and the chaining mechanism will be set up for you (e.g. no need to return anything from your function, its return value will be ignored). The `fn` will be passed the fake instance as its first argument, and then the user’s arguments.\n\n#### `stub.get(getterFn)`\n\nReplaces a new getter for this stub.\n\n#### `stub.set(setterFn)`\n\nDefines a new setter for this stub.\n\n#### `stub.value(newVal)`\n\nDefines a new value for this stub.\n\nYou can restore values by calling the `restore` method:\n\n#### `stub.wrappedMethod`\n\nHolds a reference to the original method/function this stub has wrapped.\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/stubs](https://sinonjs.org/releases/v15/stubs)"
- name: Utilities
  id: utils
  summary: Sinon.JS has a few utilities used internally in lib/sinon.js
  description: "# Utilities\n\nSinon.JS has a few utilities used internally in `lib/sinon.js`. Unless the method in question is documented here, it should not be considered part of the public API, and thus is subject to change.\n\n## Utils API\n\n#### `sinon.createStubInstance(constructor);`\n\nCreates a new object with the given function as the prototype and stubs all implemented functions.\n\n``` javascript\nclass Container {\n  contains(item) {\n    /* ... */\n  }\n}\n\nvar stubContainer = sinon.createStubInstance(Container);\nstubContainer.contains.returns(false);\nstubContainer.contains.withArgs(\"item\").returns(true);\n```\n\nThe given constructor function is not invoked. See also the [stub API](stubs).\n\n### `sinon.restoreObject(object);`\n\nRestores all methods of an object and returns the restored object.\n\n``` javascript\nconst obj = {\n  foo: () => {},\n};\nsinon.spy(obj);\nsinon.restoreObject(obj);\n```\n\nThrows an error if the object contains no restorable methods (spies, stubs, etc).\n\n``` javascript\nsinon.restoreObject({});\n```\n\n© 2010–2022 Christian Johansen  \nLicensed under the BSD License.  \n[https://sinonjs.org/releases/v15/utils](https://sinonjs.org/releases/v15/utils)"
- name: xhr.onCreate
  id: fake-xhr-and-server#xhroncreate--function-xhr-
  summary: By assigning a function to the onCreate property of the returned object from useFakeXMLHttpRequest() you can subscribe to newly created FakeXMLHttpRequest objects
  belongs_to: Fake XHR and server
  description: |-
    #### `xhr.onCreate = function (xhr) {};`

    By assigning a function to the `onCreate` property of the returned object from `useFakeXMLHttpRequest()` you can subscribe to newly created `FakeXMLHttpRequest` objects. See below for the fake xhr object API.

    Using this observer means you can still reach objects created by e.g. `jQuery.ajax` (or other abstractions/frameworks).
- name: xhr.restore()
  id: fake-xhr-and-server#xhrrestore
  summary: Restore original function(s)
  belongs_to: Fake XHR and server
  description: |-
    #### `xhr.restore();`

    Restore original function(s).

    ### `FakeXMLHttpRequest`
