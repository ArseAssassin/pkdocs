---
name: htmx
slug: htmx
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  Licensed under the Zero-Clause BSD License.
  https://htmx.org/
homepage: https://htmx.org/

---
- name: Documentation
  id: docs/index
  summary: htmx is a library that allows you to access modern browser features directly from HTML, rather than using javascript
  description: "# Documentation\n\n**Contents**\n\n- [introduction](index#introduction)\n- [installing](index#installing)\n- [ajax](index#ajax)\n  - [triggers](index#triggers)\n    - [trigger modifiers](index#trigger-modifiers)\n    - [trigger filters](index#trigger-filters)\n    - [special events](index#special-events)\n    - [polling](index#polling)\n    - [load polling](index#load_polling)\n  - [indicators](index#indicators)\n  - [targets](index#targets)\n  - [swapping](index#swapping)\n  - [synchronization](index#synchronization)\n  - [css transitions](index#css_transitions)\n  - [out of band swaps](index#oob_swaps)\n  - [parameters](index#parameters)\n  - [confirming](index#confirming)\n- [inheritance](index#inheritance)\n- [boosting](index#boosting)\n- [websockets & SSE](index#websockets-and-sse)\n- [history](index#history)\n- [requests & responses](index#requests)\n- [validation](index#validation)\n- [animations](index#animations)\n- [extensions](index#extensions)\n- [events & logging](index#events)\n- [debugging](index#debugging)\n- [scripting](index#scripting)\n  - [hx-on attribute](index#hx-on)\n- [3rd party integration](index#3rd-party)\n- [caching](index#caching)\n- [security](index#security)\n- [configuring](index#config)\n\n## htmx in a Nutshell\n\nhtmx is a library that allows you to access modern browser features directly from HTML, rather than using javascript.\n\nTo understand htmx, first lets take a look at an anchor tag:\n\n``` language-html\n<a href=\"/blog\">Blog</a>\n```\n\nThis anchor tag tells a browser:\n\n> “When a user clicks on this link, issue an HTTP GET request to ‘/blog’ and load the response content into the browser window”.\n\nWith that in mind, consider the following bit of HTML:\n\n``` language-html\n<button hx-post=\"/clicked\"\nhx-trigger=\"click\"\nhx-target=\"#parent-div\"\nhx-swap=\"outerHTML\"\n>\n    Click Me!\n</button>\n```\n\nThis tells htmx:\n\n> “When a user clicks on this button, issue an HTTP POST request to ‘/clicked’ and use the content from the response to replace the element with the id `parent-div` in the DOM”\n\nhtmx extends and generalizes the core idea of HTML as a hypertext, opening up many more possibilities directly within the language:\n\n- Now any element, not just anchors and forms, can issue an HTTP request\n- Now any event, not just clicks or form submissions, can trigger requests\n- Now any [HTTP verb](https://en.wikipedia.org/wiki/HTTP_Verbs), not just `GET` and `POST`, can be used\n- Now any element, not just the entire window, can be the target for update by the request\n\nNote that when you are using htmx, on the server side you typically respond with *HTML*, not *JSON*. This keeps you firmly within the [original web programming model](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm), using [Hypertext As The Engine Of Application State](https://en.wikipedia.org/wiki/HATEOAS) without even needing to really understand that concept.\n\nIt’s worth mentioning that, if you prefer, you can use the [`data-`](https://html.spec.whatwg.org/multipage/dom.html#attr-data-*) prefix when using htmx:\n\n``` language-html\n<a data-hx-post=\"/click\">Click Me!</a>\n```\n\n## Installing\n\nHtmx is a dependency-free, browser-oriented javascript library. This means that using it is as simple as adding a `<script>` tag to your document head. No need for complicated build steps or systems.\n\nIf you are migrating to htmx from intercooler.js, please see the [migration guide](https://htmx.org/migration-guide/).\n\n### Via A CDN (e.g. unpkg.com)\n\nThe fastest way to get going with htmx is to load it via a CDN. You can simply add this to your head tag and get going:\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org@1.9.10\" integrity=\"sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC\" crossorigin=\"anonymous\"></script>\n```\n\nWhile the CDN approach is extremely simple, you may want to consider [not using CDNs in production](https://blog.wesleyac.com/posts/why-not-javascript-cdn).\n\n### Download a copy\n\nThe next easiest way to install htmx is to simply copy it into your project.\n\nDownload `htmx.min.js` [from unpkg.com](https://unpkg.com/htmx.org/dist/htmx.min.js) and add it to the appropriate directory in your project and include it where necessary with a `<script>` tag:\n\n``` language-html\n<script src=\"/path/to/htmx.min.js\"></script>\n```\n\nYou can also add extensions this way, by downloading them from the `ext/` directory.\n\n### npm\n\nFor npm-style build systems, you can install htmx via [npm](https://www.npmjs.com/):\n\n``` language-sh\nnpm install htmx.org\n```\n\nAfter installing, you’ll need to use appropriate tooling to use `node_modules/htmx.org/dist/htmx.js` (or `.min.js`). For example, you might bundle htmx with some extensions and project-specific code.\n\n### Webpack\n\nIf you are using webpack to manage your javascript:\n\n- Install `htmx` via your favourite package manager (like npm or yarn)\n- Add the import to your `index.js`\n\n``` language-js\nimport 'htmx.org';\n```\n\nIf you want to use the global `htmx` variable (recommended), you need to inject it to the window scope:\n\n- Create a custom JS file\n- Import this file to your `index.js` (below the import from step 2)\n\n``` language-js\nimport 'path/to/my_custom.js';\n```\n\n- Then add this code to the file:\n\n``` language-js\nwindow.htmx = require('htmx.org');\n```\n\n- Finally, rebuild your bundle\n\n## AJAX\n\nThe core of htmx is a set of attributes that allow you to issue AJAX requests directly from HTML:\n\n| Attribute                                  | Description                                |\n|--------------------------------------------|--------------------------------------------|\n| [hx-get](../attributes/hx-get/index)       | Issues a `GET` request to the given URL    |\n| [hx-post](../attributes/hx-post/index)     | Issues a `POST` request to the given URL   |\n| [hx-put](../attributes/hx-put/index)       | Issues a `PUT` request to the given URL    |\n| [hx-patch](../attributes/hx-patch/index)   | Issues a `PATCH` request to the given URL  |\n| [hx-delete](../attributes/hx-delete/index) | Issues a `DELETE` request to the given URL |\n\nEach of these attributes takes a URL to issue an AJAX request to. The element will issue a request of the specified type to the given URL when the element is [triggered](index#triggers):\n\n``` language-html\n<div hx-put=\"/messages\">\n    Put To Messages\n</div>\n```\n\nThis tells the browser:\n\n> When a user clicks on this div, issue a PUT request to the URL /messages and load the response into the div\n\n### Triggering Requests\n\nBy default, AJAX requests are triggered by the “natural” event of an element:\n\n- `input`, `textarea` & `select` are triggered on the `change` event\n- `form` is triggered on the `submit` event\n- everything else is triggered by the `click` event\n\nIf you want different behavior you can use the [hx-trigger](../attributes/hx-trigger/index) attribute to specify which event will cause the request.\n\nHere is a `div` that posts to `/mouse_entered` when a mouse enters it:\n\n``` language-html\n<div hx-post=\"/mouse_entered\" hx-trigger=\"mouseenter\">\n    [Here Mouse, Mouse!]\n</div>\n```\n\n#### Trigger Modifiers\n\nA trigger can also have a few additional modifiers that change its behavior. For example, if you want a request to only happen once, you can use the `once` modifier for the trigger:\n\n``` language-html\n<div hx-post=\"/mouse_entered\" hx-trigger=\"mouseenter once\">\n    [Here Mouse, Mouse!]\n</div>\n```\n\nOther modifiers you can use for triggers are:\n\n- `changed` - only issue a request if the value of the element has changed\n- `delay:<time interval>` - wait the given amount of time (e.g. `1s`) before issuing the request. If the event triggers again, the countdown is reset.\n- `throttle:<time interval>` - wait the given amount of time (e.g. `1s`) before issuing the request. Unlike `delay` if a new event occurs before the time limit is hit the event will be discarded, so the request will trigger at the end of the time period.\n- `from:<CSS Selector>` - listen for the event on a different element. This can be used for things like keyboard shortcuts.\n\nYou can use these attributes to implement many common UX patterns, such as [Active Search](https://htmx.org/examples/active-search/):\n\n``` language-html\n<input type=\"text\" name=\"q\"\nhx-get=\"/trigger_delay\"\nhx-trigger=\"keyup changed delay:500ms\"\nhx-target=\"#search-results\"\nplaceholder=\"Search...\"\n>\n<div id=\"search-results\"></div>\n```\n\nThis input will issue a request 500 milliseconds after a key up event if the input has been changed and inserts the results into the `div` with the id `search-results`.\n\nMultiple triggers can be specified in the [hx-trigger](../attributes/hx-trigger/index) attribute, separated by commas.\n\n#### Trigger Filters\n\nYou may also apply trigger filters by using square brackets after the event name, enclosing a javascript expression that will be evaluated. If the expression evaluates to `true` the event will trigger, otherwise it will not.\n\nHere is an example that triggers only on a Control-Click of the element\n\n``` language-html\n<div hx-get=\"/clicked\" hx-trigger=\"click[ctrlKey]\">\n    Control Click Me\n</div>\n```\n\nProperties like `ctrlKey` will be resolved against the triggering event first, then the global scope. The `this` symbol will be set to the current element.\n\n#### Special Events\n\nhtmx provides a few special events for use in [hx-trigger](../attributes/hx-trigger/index):\n\n- `load` - fires once when the element is first loaded\n- `revealed` - fires once when an element first scrolls into the viewport\n- `intersect` - fires once when an element first intersects the viewport. This supports two additional options:\n  - `root:<selector>` - a CSS selector of the root element for intersection\n  - `threshold:<float>` - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\n\nYou can also use custom events to trigger requests if you have an advanced use case.\n\n#### Polling\n\nIf you want an element to poll the given URL rather than wait for an event, you can use the `every` syntax with the [`hx-trigger`](../attributes/hx-trigger/index) attribute:\n\n``` language-html\n<div hx-get=\"/news\" hx-trigger=\"every 2s\"></div>\n```\n\nThis tells htmx\n\n> Every 2 seconds, issue a GET to /news and load the response into the div\n\nIf you want to stop polling from a server response you can respond with the HTTP response code [`286`](https://en.wikipedia.org/wiki/86_(term)) and the element will cancel the polling.\n\n#### Load Polling\n\nAnother technique that can be used to achieve polling in htmx is “load polling”, where an element specifies a `load` trigger along with a delay, and replaces itself with the response:\n\n``` language-html\n<div hx-get=\"/messages\"\nhx-trigger=\"load delay:1s\"\nhx-swap=\"outerHTML\"\n>\n</div>\n```\n\nIf the `/messages` end point keeps returning a div set up this way, it will keep “polling” back to the URL every second.\n\nLoad polling can be useful in situations where a poll has an end point at which point the polling terminates, such as when you are showing the user a [progress bar](https://htmx.org/examples/progress-bar/).\n\n### Request Indicators\n\nWhen an AJAX request is issued it is often good to let the user know that something is happening since the browser will not give them any feedback. You can accomplish this in htmx by using `htmx-indicator` class.\n\nThe `htmx-indicator` class is defined so that the opacity of any element with this class is 0 by default, making it invisible but present in the DOM.\n\nWhen htmx issues a request, it will put a `htmx-request` class onto an element (either the requesting element or another element, if specified). The `htmx-request` class will cause a child element with the `htmx-indicator` class on it to transition to an opacity of 1, showing the indicator.\n\n``` language-html\n<button hx-get=\"/click\">\n    Click Me!\n    <img class=\"htmx-indicator\" src=\"/spinner.gif\">\n</button>\n```\n\nHere we have a button. When it is clicked the `htmx-request` class will be added to it, which will reveal the spinner gif element. (I like [SVG spinners](http://samherbert.net/svg-loaders/) these days.)\n\nWhile the `htmx-indicator` class uses opacity to hide and show the progress indicator, if you would prefer another mechanism you can create your own CSS transition like so:\n\n``` language-css\n.htmx-indicator{\n    display:none;\n}\n.htmx-request .htmx-indicator{\n    display:inline;\n}\n.htmx-request.htmx-indicator{\n    display:inline;\n}\n```\n\nIf you want the `htmx-request` class added to a different element, you can use the [hx-indicator](../attributes/hx-indicator/index) attribute with a CSS selector to do so:\n\n``` language-html\n<div>\n    <button hx-get=\"/click\" hx-indicator=\"#indicator\">\n        Click Me!\n    </button>\n    <img id=\"indicator\" class=\"htmx-indicator\" src=\"/spinner.gif\"/>\n</div>\n```\n\nHere we call out the indicator explicitly by id. Note that we could have placed the class on the parent `div` as well and had the same effect.\n\nYou can also add the [the `disabled` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) to elements for the duration of a request by using the [hx-disabled-elt](../attributes/hx-disabled-elt/index) attribute.\n\n### Targets\n\nIf you want the response to be loaded into a different element other than the one that made the request, you can use the [hx-target](../attributes/hx-target/index) attribute, which takes a CSS selector. Looking back at our Live Search example:\n\n``` language-html\n<input type=\"text\" name=\"q\"\nhx-get=\"/trigger_delay\"\nhx-trigger=\"keyup delay:500ms changed\"\nhx-target=\"#search-results\"\nplaceholder=\"Search...\"\n>\n<div id=\"search-results\"></div>\n```\n\nYou can see that the results from the search are going to be loaded into `div#search-results`, rather than into the input tag.\n\n#### Extended CSS Selectors\n\n`hx-target`, and most attributes that take a CSS selector, support an “extended” CSS syntax:\n\n- You can use the `this` keyword, which indicates that the element that the `hx-target` attribute is on is the target\n- The `closest <CSS selector>` syntax will find the [closest](https://developer.mozilla.org/docs/Web/API/Element/closest) ancestor element or itself, that matches the given CSS selector. (e.g. `closest tr` will target the closest table row to the element)\n- The `next <CSS selector>` syntax will find the next element in the DOM matching the given CSS selector.\n- The `previous <CSS selector>` syntax will find the previous element in the DOM the given CSS selector.\n- `find <CSS selector>` which will find the first child descendant element that matches the given CSS selector. (e.g `find tr` would target the first child descendant row to the element)\n\nIn addition, a CSS selector may be wrapped in `<` and `/>` characters, mimicking the [query literal](https://hyperscript.org/expressions/query-reference/) syntax of hyperscript.\n\nRelative targets like this can be useful for creating flexible user interfaces without peppering your DOM with loads of `id` attributes.\n\n### Swapping\n\nhtmx offers a few different ways to swap the HTML returned into the DOM. By default, the content replaces the `innerHTML` of the target element. You can modify this by using the [hx-swap](../attributes/hx-swap/index) attribute with any of the following values:\n\n| Name          | Description                                                                                                                                         |\n|---------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| `innerHTML`   | the default, puts the content inside the target element                                                                                             |\n| `outerHTML`   | replaces the entire target element with the returned content                                                                                        |\n| `afterbegin`  | prepends the content before the first child inside the target                                                                                       |\n| `beforebegin` | prepends the content before the target in the targets parent element                                                                                |\n| `beforeend`   | appends the content after the last child inside the target                                                                                          |\n| `afterend`    | appends the content after the target in the targets parent element                                                                                  |\n| `delete`      | deletes the target element regardless of the response                                                                                               |\n| `none`        | does not append content from response ([Out of Band Swaps](index#oob_swaps) and [Response Headers](index#response-headers) will still be processed) |\n\n#### Morph Swaps\n\nIn addition to the standard swap mechanisms above, htmx also supports *morphing* swaps, via extensions. Morphing swaps attempt to *merge* new content into the existing DOM, rather than simply replacing it. They often do a better job preserving things like focus, video state, etc. by mutating existing nodes in-place during the swap operation, at the cost of more CPU.\n\nThe following extensions are available for morph-style swaps:\n\n- [Idiomorph](https://github.com/bigskysoftware/idiomorph#htmx) - A morphing algorithm created by the htmx developers.\n- [Morphdom Swap](../extensions/morphdom-swap/index) - Based on the [morphdom](https://github.com/patrick-steele-idem/morphdom), the original DOM morphing library.\n- [Alpine-morph](../extensions/alpine-morph/index) - Based on the [alpine morph](https://alpinejs.dev/plugins/morph) plugin, plays well with alpine.js\n\n#### View Transitions\n\nThe new, experimental [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) gives developers a way to create an animated transition between different DOM states. It is still in active development and is not available in all browsers, but htmx provides a way to work with this new API that falls back to the non-transition mechanism if the API is not available in a given browser.\n\nYou can experiment with this new API using the following approaches:\n\n- Set the `htmx.config.globalViewTransitions` config variable to `true` to use transitions for all swaps\n- Use the `transition:true` option in the `hx-swap` attribute\n- If an element swap is going to be transitioned due to either of the above configurations, you may catch the `htmx:beforeTransition` event and call `preventDefault()` on it to cancel the transition.\n\nView Transitions can be configured using CSS, as outlined in [the Chrome documentation for the feature](https://developer.chrome.com/docs/web-platform/view-transitions/#simple-customization).\n\nYou can see a view transition example on the [Animation Examples](https://htmx.org/examples/animations#view-transitions) page.\n\n#### Swap Options\n\nThe [hx-swap](../attributes/hx-swap/index) attribute supports many options for tuning the swapping behavior of htmx. For example, by default htmx will swap in the title of a title tag found anywhere in the new content. You can turn this behavior off by setting the `ignoreTitle` modifier to true:\n\n``` language-html\n    <button hx-post=\"/like\" hx-swap=\"outerHTML ignoreTitle:true\">Like</button>\n```\n\nThe modifiers available on `hx-swap` are:\n\n| Option        | Description                                                                                              |\n|---------------|----------------------------------------------------------------------------------------------------------|\n| `transition`  | `true` or `false`, whether to use the view transition API for this swap                                  |\n| `swap`        | The swap delay to use (e.g. `100ms`) between when old content is cleared and the new content is inserted |\n| `settle`      | The settle delay to use (e.g. `100ms`) between when new content is inserted and when it is settled       |\n| `ignoreTitle` | If set to `true`, any title found in the new content will be ignored and not update the document title   |\n| `scroll`      | `top` or `bottom`, will scroll the target element to its top or bottom                                   |\n| `show`        | `top` or `bottom`, will scroll the target elements top or bottom into view                               |\n\nAll swap modifiers appear after the swap style is specified, and are colon-separated.\n\nSee the [hx-swap](../attributes/hx-swap/index) documentation for more details on these options.\n\n### Synchronization\n\nOften you want to coordinate the requests between two elements. For example, you may want a request from one element to supersede the request of another element, or to wait until the other elements request has finished.\n\nhtmx offers a [`hx-sync`](../attributes/hx-sync/index) attribute to help you accomplish this.\n\nConsider a race condition between a form submission and an individual input’s validation request in this HTML:\n\n``` language-html\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\"\nhx-post=\"/validate\"\nhx-trigger=\"change\"\n    >\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\nWithout using `hx-sync`, filling out the input and immediately submitting the form triggers two parallel requests to `/validate` and `/store`.\n\nUsing `hx-sync=\"closest form:abort\"` on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight:\n\n``` language-html\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\"\nhx-post=\"/validate\"\nhx-trigger=\"change\"\nhx-sync=\"closest form:abort\"\n    >\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\nThis resolves the synchronization between the two elements in a declarative way.\n\nhtmx also supports a programmatic way to cancel requests: you can send the `htmx:abort` event to an element to cancel any in-flight requests:\n\n``` language-html\n<button id=\"request-button\" hx-post=\"/example\">\n    Issue Request\n</button>\n<button onclick=\"htmx.trigger('#request-button', 'htmx:abort')\">\n    Cancel Request\n</button>\n```\n\nMore examples and details can be found on the [`hx-sync` attribute page.](../attributes/hx-sync/index)\n\n### CSS Transitions\n\nhtmx makes it easy to use [CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) without javascript. Consider this HTML content:\n\n``` language-html\n<div id=\"div1\">Original Content</div>\n```\n\nImagine this content is replaced by htmx via an ajax request with this new content:\n\n``` language-html\n<div id=\"div1\" class=\"red\">New Content</div>\n```\n\nNote two things:\n\n- The div has the *same* id in the original and in the new content\n- The `red` class has been added to the new content\n\nGiven this situation, we can write a CSS transition from the old state to the new state:\n\n``` language-css\n.red {\n    color: red;\n    transition: all ease-in 1s ;\n}\n```\n\nWhen htmx swaps in this new content, it will do so in such a way that the CSS transition will apply to the new content, giving you a nice, smooth transition to the new state.\n\nSo, in summary, all you need to do to use CSS transitions for an element is keep its `id` stable across requests!\n\nYou can see the [Animation Examples](https://htmx.org/examples/animations/) for more details and live demonstrations.\n\n#### Details\n\nTo understand how CSS transitions actually work in htmx, you must understand the underlying swap & settle model that htmx uses.\n\nWhen new content is received from a server, before the content is swapped in, the existing content of the page is examined for elements that match by the `id` attribute. If a match is found for an element in the new content, the attributes of the old content are copied onto the new element before the swap occurs. The new content is then swapped in, but with the *old* attribute values. Finally, the new attribute values are swapped in, after a “settle” delay (20ms by default). A little crazy, but this is what allows CSS transitions to work without any javascript by the developer.\n\n### Out of Band Swaps\n\nIf you want to swap content from a response directly into the DOM by using the `id` attribute you can use the [hx-swap-oob](../attributes/hx-swap-oob/index) attribute in the *response* html:\n\n``` language-html\n<div id=\"message\" hx-swap-oob=\"true\">Swap me directly!</div>\nAdditional Content\n```\n\nIn this response, `div#message` would be swapped directly into the matching DOM element, while the additional content would be swapped into the target in the normal manner.\n\nYou can use this technique to “piggy-back” updates on other requests.\n\n#### Selecting Content To Swap\n\nIf you want to select a subset of the response HTML to swap into the target, you can use the [hx-select](../attributes/hx-select/index) attribute, which takes a CSS selector and selects the matching elements from the response.\n\nYou can also pick out pieces of content for an out-of-band swap by using the [hx-select-oob](../attributes/hx-select-oob/index) attribute, which takes a list of element IDs to pick out and swap.\n\n#### Preserving Content During A Swap\n\nIf there is content that you wish to be preserved across swaps (e.g. a video player that you wish to remain playing even if a swap occurs) you can use the [hx-preserve](../attributes/hx-preserve/index) attribute on the elements you wish to be preserved.\n\n### Parameters\n\nBy default, an element that causes a request will include its value if it has one. If the element is a form it will include the values of all inputs within it.\n\nAs with HTML forms, the `name` attribute of the input is used as the parameter name in the request that htmx sends.\n\nAdditionally, if the element causes a non-`GET` request, the values of all the inputs of the nearest enclosing form will be included.\n\nIf you wish to include the values of other elements, you can use the [hx-include](../attributes/hx-include/index) attribute with a CSS selector of all the elements whose values you want to include in the request.\n\nIf you wish to filter out some parameters you can use the [hx-params](../attributes/hx-params/index) attribute.\n\nFinally, if you want to programmatically modify the parameters, you can use the [htmx:configRequest](../events/index#htmx:configRequest) event.\n\n#### File Upload\n\nIf you wish to upload files via an htmx request, you can set the [hx-encoding](../attributes/hx-encoding/index) attribute to `multipart/form-data`. This will use a `FormData` object to submit the request, which will properly include the file in the request.\n\nNote that depending on your server-side technology, you may have to handle requests with this type of body content very differently.\n\nNote that htmx fires a `htmx:xhr:progress` event periodically based on the standard `progress` event during upload, which you can hook into to show the progress of the upload.\n\nSee the [examples section](https://htmx.org/examples/) for more advanced form patterns, including [progress bars](https://htmx.org/examples/file-upload/) and [error handling](https://htmx.org/examples/file-upload-input/).\n\n#### Extra Values\n\nYou can include extra values in a request using the [hx-vals](../attributes/hx-vals/index) (name-expression pairs in JSON format) and [hx-vars](../attributes/hx-vars/index) attributes (comma-separated name-expression pairs that are dynamically computed).\n\n### Confirming Requests\n\nOften you will want to confirm an action before issuing a request. htmx supports the [`hx-confirm`](../attributes/hx-confirm/index) attribute, which allows you to confirm an action using a simple javascript dialog:\n\n``` language-html\n<button hx-delete=\"/account\" hx-confirm=\"Are you sure you wish to delete your account?\">\n    Delete My Account\n</button>\n```\n\nUsing events you can implement more sophisticated confirmation dialogs. The [confirm example](https://htmx.org/examples/confirm/) shows how to use [sweetalert2](https://sweetalert2.github.io/) library for confirmation of htmx actions.\n\n## Attribute Inheritance\n\nMost attributes in htmx are inherited: they apply to the element they are on as well as any children elements. This allows you to “hoist” attributes up the DOM to avoid code duplication. Consider the following htmx:\n\n``` language-html\n<button hx-delete=\"/account\" hx-confirm=\"Are you sure?\">\n    Delete My Account\n</button>\n<button hx-put=\"/account\" hx-confirm=\"Are you sure?\">\n    Update My Account\n</button>\n```\n\nHere we have a duplicate `hx-confirm` attribute. We can hoist this attribute to a parent element:\n\n``` language-html\n<div hx-confirm=\"Are you sure?\">\n    <button hx-delete=\"/account\">\n        Delete My Account\n    </button>\n    <button hx-put=\"/account\">\n        Update My Account\n    </button>\n</div>\n```\n\nThis `hx-confirm` attribute will now apply to all htmx-powered elements within it.\n\nSometimes you wish to undo this inheritance. Consider if we had a cancel button to this group, but didn’t want it to be confirmed. We could add an `unset` directive on it like so:\n\n``` language-html\n<div hx-confirm=\"Are you sure?\">\n    <button hx-delete=\"/account\">\n        Delete My Account\n    </button>\n    <button hx-put=\"/account\">\n        Update My Account\n    </button>\n    <button hx-confirm=\"unset\" hx-get=\"/\">\n        Cancel\n    </button>\n</div>\n```\n\nThe top two buttons would then show a confirm dialog, but the bottom cancel button would not.\n\nAutomatic inheritance can be disabled using the [`hx-disinherit`](../attributes/hx-disinherit/index) attribute.\n\n## Boosting\n\nHtmx supports “boosting” regular HTML anchors and forms with the [hx-boost](../attributes/hx-boost/index) attribute. This attribute will convert all anchor tags and forms into AJAX requests that, by default, target the body of the page.\n\nHere is an example:\n\n``` language-html\n<div hx-boost=\"true\">\n    <a href=\"/blog\">Blog</a>\n</div>\n```\n\nThe anchor tag in this div will issue an AJAX `GET` request to `/blog` and swap the response into the `body` tag.\n\n### Progressive Enhancement\n\nA feature of `hx-boost` is that it degrades gracefully if javascript is not enabled: the links and forms continue to work, they simply don’t use ajax requests. This is known as [Progressive Enhancement](https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement), and it allows a wider audience to use your sites functionality.\n\nOther htmx patterns can be adapted to achieve progressive enhancement as well, but they will require more thought.\n\nConsider the [active search](https://htmx.org/examples/active-search/) example. As it is written, it will not degrade gracefully: someone who does not have javascript enabled will not be able to use this feature. This is done for simplicity’s sake, to keep the example as brief as possible.\n\nHowever, you could wrap the htmx-enhanced input in a form element:\n\n``` language-html\n<form action=\"/search\" method=\"POST\">\n    <input class=\"form-control\" type=\"search\"\nname=\"search\" placeholder=\"Begin typing to search users...\"\nhx-post=\"/search\"\nhx-trigger=\"keyup changed delay:500ms, search\"\nhx-target=\"#search-results\"\nhx-indicator=\".htmx-indicator\">\n</form>\n```\n\nWith this in place, javascript-enabled clients would still get the nice active-search UX, but non-javascript enabled clients would be able to hit the enter key and still search. Even better, you could add a “Search” button as well. You would then need to update the form with an `hx-post` that mirrored the `action` attribute, or perhaps use `hx-boost` on it.\n\nYou would need to check on the server side for the `HX-Request` header to differentiate between an htmx-driven and a regular request, to determine exactly what to render to the client.\n\nOther patterns can be adapted similarly to achieve the progressive enhancement needs of your application.\n\nAs you can see, this requires more thought and more work. It also rules some functionality entirely out of bounds. These tradeoffs must be made by you, the developer, with respect to your projects goals and audience.\n\n[Accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility) is a concept closely related to progressive enhancement. Using progressive enhancement techniques such as `hx-boost` will make your htmx application more accessible to a wide array of users.\n\nhtmx-based applications are very similar to normal, non-AJAX driven web applications because htmx is HTML-oriented.\n\nAs such, the normal HTML accessibility recommendations apply. For example:\n\n- Use semantic HTML as much as possible (i.e. the right tags for the right things)\n- Ensure focus state is clearly visible\n- Associate text labels with all form fields\n- Maximize the readability of your application with appropriate fonts, contrast, etc.\n\n## Web Sockets & SSE\n\nhtmx has experimental support for declarative use of both [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications) and [Server Sent Events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events).\n\n**Note:** In htmx 2.0, these features will be migrated to extensions. These new extensions are already available in htmx 1.7+ and, if you are writing new code, you are encouraged to use the extensions instead. All new feature work for both SSE and web sockets will be done in the extensions.\n\nPlease visit the [SSE extension](../extensions/server-sent-events/index) and [WebSocket extension](../extensions/web-sockets/index) pages to learn more about the new extensions.\n\n### WebSockets\n\nIf you wish to establish a `WebSocket` connection in htmx, you use the [hx-ws](../attributes/hx-ws/index) attribute:\n\n``` language-html\n<div hx-ws=\"connect:wss:/chatroom\">\n    <div id=\"chat_room\">\n        ...\n    </div>\n    <form hx-ws=\"send:submit\">\n        <input name=\"chat_message\">\n    </form>\n</div>\n```\n\nThe `connect` declaration established the connection, and the `send` declaration tells the form to submit values to the socket on `submit`.\n\nMore details can be found on the [hx-ws attribute page](../attributes/hx-ws/index)\n\n### Server Sent Events\n\n[Server Sent Events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) are a way for servers to send events to browsers. It provides a higher-level mechanism for communication between the server and the browser than websockets.\n\nIf you want an element to respond to a Server Sent Event via htmx, you need to do two things:\n\n1.  Define an SSE source. To do this, add a [hx-sse](../attributes/hx-sse/index) attribute on a parent element with a `connect:<url>` declaration that specifies the URL from which Server Sent Events will be received.\n\n2.  Define elements that are descendents of this element that are triggered by server sent events using the `hx-trigger=\"sse:<event_name>\"` syntax\n\nHere is an example:\n\n``` language-html\n<body hx-sse=\"connect:/news_updates\">\n    <div hx-trigger=\"sse:new_news\" hx-get=\"/news\"></div>\n</body>\n```\n\nDepending on your implementation, this may be more efficient than the polling example above since the server would notify the div if there was new news to get, rather than the steady requests that a poll causes.\n\n## History Support\n\nHtmx provides a simple mechanism for interacting with the [browser history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API):\n\nIf you want a given element to push its request URL into the browser navigation bar and add the current state of the page to the browser’s history, include the [hx-push-url](../attributes/hx-push-url/index) attribute:\n\n``` language-html\n<a hx-get=\"/blog\" hx-push-url=\"true\">Blog</a>\n```\n\nWhen a user clicks on this link, htmx will snapshot the current DOM and store it before it makes a request to /blog. It then does the swap and pushes a new location onto the history stack.\n\nWhen a user hits the back button, htmx will retrieve the old content from storage and swap it back into the target, simulating “going back” to the previous state. If the location is not found in the cache, htmx will make an ajax request to the given URL, with the header `HX-History-Restore-Request` set to true, and expects back the HTML needed for the entire page. Alternatively, if the `htmx.config.refreshOnHistoryMiss` config variable is set to true, it will issue a hard browser refresh.\n\n**NOTE:** If you push a URL into the history, you **must** be able to navigate to that URL and get a full page back! A user could copy and paste the URL into an email, or new tab. Additionally, htmx will need the entire page when restoring history if the page is not in the history cache.\n\n### Specifying History Snapshot Element\n\nBy default, htmx will use the `body` to take and restore the history snapshot from. This is usually the right thing, but if you want to use a narrower element for snapshotting you can use the [hx-history-elt](../attributes/hx-history-elt/index) attribute to specify a different one.\n\nCareful: this element will need to be on all pages or restoring from history won’t work reliably.\n\n### Disabling History Snapshots\n\nHistory snapshotting can be disabled for a URL by setting the [hx-history](../attributes/hx-history/index) attribute to `false` on any element in the current document, or any html fragment loaded into the current document by htmx. This can be used to prevent sensitive data entering the localStorage cache, which can be important for shared-use / public computers. History navigation will work as expected, but on restoration the URL will be requested from the server instead of the local history cache.\n\n## Requests & Responses\n\nHtmx expects responses to the AJAX requests it makes to be HTML, typically HTML fragments (although a full HTML document, matched with a [hx-select](../attributes/hx-select/index) tag can be useful too). Htmx will then swap the returned HTML into the document at the target specified and with the swap strategy specified.\n\nSometimes you might want to do nothing in the swap, but still perhaps trigger a client side event ([see below](index#response-headers)). For this situation you can return a `204 - No Content` response code, and htmx will ignore the content of the response.\n\nIn the event of an error response from the server (e.g. a 404 or a 501), htmx will trigger the [`htmx:responseError`](../events/index#htmx:responseError) event, which you can handle.\n\nIn the event of a connection error, the `htmx:sendError` event will be triggered.\n\n### CORS\n\nWhen using htmx in a cross origin context, remember to configure your web server to set Access-Control headers in order for htmx headers to be visible on the client side.\n\n- [Access-Control-Allow-Headers (for request headers)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers)\n- [Access-Control-Expose-Headers (for response headers)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers)\n\n[See all the request and response headers that htmx implements.](../reference/index#request_headers)\n\n### Request Headers\n\nhtmx includes a number of useful headers in requests:\n\n| Header                       | Description                                                                                 |\n|------------------------------|---------------------------------------------------------------------------------------------|\n| `HX-Boosted`                 | indicates that the request is via an element using [hx-boost](../attributes/hx-boost/index) |\n| `HX-Current-URL`             | the current URL of the browser                                                              |\n| `HX-History-Restore-Request` | “true” if the request is for history restoration after a miss in the local history cache    |\n| `HX-Prompt`                  | the user response to an [hx-prompt](../attributes/hx-prompt/index)                          |\n| `HX-Request`                 | always “true”                                                                               |\n| `HX-Target`                  | the `id` of the target element if it exists                                                 |\n| `HX-Trigger-Name`            | the `name` of the triggered element if it exists                                            |\n| `HX-Trigger`                 | the `id` of the triggered element if it exists                                              |\n\n### Response Headers\n\nhtmx supports some htmx-specific response headers:\n\n- [`HX-Location`](../headers/hx-location/index) - allows you to do a client-side redirect that does not do a full page reload\n- [`HX-Push-Url`](../headers/hx-push-url/index) - pushes a new url into the history stack\n- `HX-Redirect` - can be used to do a client-side redirect to a new location\n- `HX-Refresh` - if set to “true” the client-side will do a full refresh of the page\n- [`HX-Replace-Url`](../headers/hx-replace-url/index) - replaces the current URL in the location bar\n- `HX-Reswap` - allows you to specify how the response will be swapped. See [hx-swap](../attributes/hx-swap/index) for possible values\n- `HX-Retarget` - a CSS selector that updates the target of the content update to a different element on the page\n- `HX-Reselect` - a CSS selector that allows you to choose which part of the response is used to be swapped in. Overrides an existing [`hx-select`](../attributes/hx-select/index) on the triggering element\n- [`HX-Trigger`](../headers/hx-trigger/index) - allows you to trigger client-side events\n- [`HX-Trigger-After-Settle`](../headers/hx-trigger/index) - allows you to trigger client-side events after the settle step\n- [`HX-Trigger-After-Swap`](../headers/hx-trigger/index) - allows you to trigger client-side events after the swap step\n\nFor more on the `HX-Trigger` headers, see [`HX-Trigger` Response Headers](../headers/hx-trigger/index).\n\nSubmitting a form via htmx has the benefit of no longer needing the [Post/Redirect/Get Pattern](https://en.wikipedia.org/wiki/Post/Redirect/Get). After successfully processing a POST request on the server, you don’t need to return a [HTTP 302 (Redirect)](https://en.wikipedia.org/wiki/HTTP_302). You can directly return the new HTML fragment.\n\n### Request Order of Operations\n\nThe order of operations in a htmx request are:\n\n- The element is triggered and begins a request\n  - Values are gathered for the request\n  - The `htmx-request` class is applied to the appropriate elements\n  - The request is then issued asynchronously via AJAX\n    - Upon getting a response the target element is marked with the `htmx-swapping` class\n    - An optional swap delay is applied (see the [hx-swap](../attributes/hx-swap/index) attribute)\n    - The actual content swap is done\n      - the `htmx-swapping` class is removed from the target\n      - the `htmx-added` class is added to each new piece of content\n      - the `htmx-settling` class is applied to the target\n      - A settle delay is done (default: 20ms)\n      - The DOM is settled\n      - the `htmx-settling` class is removed from the target\n      - the `htmx-added` class is removed from each new piece of content\n\nYou can use the `htmx-swapping` and `htmx-settling` classes to create [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) between pages.\n\n## Validation\n\nHtmx integrates with the [HTML5 Validation API](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation) and will not issue a request for a form if a validatable input is invalid. This is true for both AJAX requests as well as WebSocket sends.\n\nHtmx fires events around validation that can be used to hook in custom validation and error handling:\n\n- `htmx:validation:validate` - called before an elements `checkValidity()` method is called. May be used to add in custom validation logic\n- `htmx:validation:failed` - called when `checkValidity()` returns false, indicating an invalid input\n- `htmx:validation:halted` - called when a request is not issued due to validation errors. Specific errors may be found in the `event.detail.errors` object\n\nNon-form elements do not validate before they make requests by default, but you can enable validation by setting the [`hx-validate`](../attributes/hx-validate/index) attribute to “true”.\n\n### Validation Example\n\nHere is an example of an input that uses the [`hx-on`](../attributes/hx-on/index) attribute to catch the `htmx:validation:validate` event and require that the input have the value `foo`:\n\n``` language-html\n<form id=\"example-form\" hx-post=\"/test\">\n    <input name=\"example\"\nonkeyup=\"this.setCustomValidity('') // reset the validation on keyup\"\nhx-on:htmx:validation:validate=\"if(this.value != 'foo') {\n                    this.setCustomValidity('Please enter the value foo') // set the validation error\n                    htmx.find('#foo-form').reportValidity()              // report the issue\n                }\">\n</form>\n```\n\nNote that all client side validations must be re-done on the server side, as they can always be bypassed.\n\n## Animations\n\nHtmx allows you to use [CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) in many situations using only HTML and CSS.\n\nPlease see the [Animation Guide](https://htmx.org/examples/animations/) for more details on the options available.\n\n## Extensions\n\nHtmx has an extension mechanism that allows you to customize the libraries’ behavior. Extensions [are defined in javascript](../extensions/index#defining) and then used via the [`hx-ext`](../attributes/hx-ext/index) attribute:\n\n``` language-html\n<div hx-ext=\"debug\">\n    <button hx-post=\"/example\">This button used the debug extension</button>\n    <button hx-post=\"/example\" hx-ext=\"ignore:debug\">This button does not</button>\n</div>\n```\n\nIf you are interested in adding your own extension to htmx, please [see the extension docs](../extensions/index)\n\n### Included Extensions\n\nHtmx includes some extensions that are tested against the htmx code base. Here are a few:\n\n| Extension                                                            | Description                                                                                                                       |\n|----------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| [`json-enc`](../extensions/json-enc/index)                           | use JSON encoding in the body of requests, rather than the default `x-www-form-urlencoded`                                        |\n| [`morphdom-swap`](../extensions/morphdom-swap/index)                 | an extension for using the [morphdom](https://github.com/patrick-steele-idem/morphdom) library as the swapping mechanism in htmx. |\n| [`alpine-morph`](../extensions/alpine-morph/index)                   | an extension for using the [Alpine.js morph](https://alpinejs.dev/plugins/morph) plugin as the swapping mechanism in htmx.        |\n| [`client-side-templates`](../extensions/client-side-templates/index) | support for client side template processing of JSON responses                                                                     |\n| [`path-deps`](../extensions/path-deps/index)                         | an extension for expressing path-based dependencies [similar to intercoolerjs](http://intercoolerjs.org/docs.html#dependencies)   |\n| [`class-tools`](../extensions/class-tools/index)                     | an extension for manipulating timed addition and removal of classes on HTML elements                                              |\n| [`multi-swap`](../extensions/multi-swap/index)                       | allows to swap multiple elements with different swap methods                                                                      |\n| [`response-targets`](../extensions/response-targets/index)           | allows to swap elements for responses with HTTP codes beyond `200`                                                                |\n\nSee the [extensions page](../extensions/index#included) for a complete list.\n\n## Events & Logging\n\nHtmx has an extensive [events mechanism](../reference/index#events), which doubles as the logging system.\n\nIf you want to register for a given htmx event you can use\n\n``` language-js\ndocument.body.addEventListener('htmx:load', function(evt) {\nmyJavascriptLib.init(evt.detail.elt);\n});\n```\n\nor, if you would prefer, you can use the following htmx helper:\n\n``` language-javascript\nhtmx.on(\"htmx:load\", function(evt) {\nmyJavascriptLib.init(evt.detail.elt);\n});\n```\n\nThe `htmx:load` event is fired every time an element is loaded into the DOM by htmx, and is effectively the equivalent to the normal `load` event.\n\nSome common uses for htmx events are:\n\n### Initialize A 3rd Party Library With Events\n\nUsing the `htmx:load` event to initialize content is so common that htmx provides a helper function:\n\n``` language-javascript\nhtmx.onLoad(function(target) {\nmyJavascriptLib.init(target);\n});\n```\n\nThis does the same thing as the first example, but is a little cleaner.\n\n### Configure a Request With Events\n\nYou can handle the [`htmx:configRequest`](../events/index#htmx:configRequest) event in order to modify an AJAX request before it is issued:\n\n``` language-javascript\ndocument.body.addEventListener('htmx:configRequest', function(evt) {\nevt.detail.parameters['auth_token'] = getAuthToken(); // add a new parameter into the request\nevt.detail.headers['Authentication-Token'] = getAuthToken(); // add a new header into the request\n});\n```\n\nHere we add a parameter and header to the request before it is sent.\n\n### Modifying Swapping Behavior With Events\n\nYou can handle the [`htmx:beforeSwap`](../events/index#htmx:beforeSwap) event in order to modify the swap behavior of htmx:\n\n``` language-javascript\ndocument.body.addEventListener('htmx:beforeSwap', function(evt) {\nif(evt.detail.xhr.status === 404){\n// alert the user when a 404 occurs (maybe use a nicer mechanism than alert())\nalert(\"Error: Could Not Find Resource\");\n    } else if(evt.detail.xhr.status === 422){\n// allow 422 responses to swap as we are using this as a signal that\n// a form was submitted with bad data and want to rerender with the\n// errors\n//\n// set isError to false to avoid error logging in console\nevt.detail.shouldSwap = true;\nevt.detail.isError = false;\n    } else if(evt.detail.xhr.status === 418){\n// if the response code 418 (I'm a teapot) is returned, retarget the\n// content of the response to the element with the id `teapot`\nevt.detail.shouldSwap = true;\nevt.detail.target = htmx.find(\"#teapot\");\n    }\n});\n```\n\nHere we handle a few [400-level error response codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) that would normally not do a swap in htmx.\n\n### Event Naming\n\nNote that all events are fired with two different names\n\n- Camel Case\n- Kebab Case\n\nSo, for example, you can listen for `htmx:afterSwap` or for `htmx:after-swap`. This facilitates interoperability with other libraries. [Alpine.js](https://github.com/alpinejs/alpine/), for example, requires kebab case.\n\n### Logging\n\nIf you set a logger at `htmx.logger`, every event will be logged. This can be very useful for troubleshooting:\n\n``` language-javascript\nhtmx.logger = function(elt, event, data) {\nif(console) {\nconsole.log(event, elt, data);\n    }\n}\n```\n\n## Debugging\n\nDeclarative and event driven programming with htmx (or any other declarative language) can be a wonderful and highly productive activity, but one disadvantage when compared with imperative approaches is that it can be trickier to debug.\n\nFiguring out why something *isn’t* happening, for example, can be difficult if you don’t know the tricks.\n\nWell, here are the tricks:\n\nThe first debugging tool you can use is the `htmx.logAll()` method. This will log every event that htmx triggers and will allow you to see exactly what the library is doing.\n\n``` language-javascript\nhtmx.logAll();\n```\n\nOf course, that won’t tell you why htmx *isn’t* doing something. You might also not know *what* events a DOM element is firing to use as a trigger. To address this, you can use the [`monitorEvents()`](https://developers.google.com/web/updates/2015/05/quickly-monitor-events-from-the-console-panel) method available in the browser console:\n\n``` language-javascript\nmonitorEvents(htmx.find(\"#theElement\"));\n```\n\nThis will spit out all events that are occurring on the element with the id `theElement` to the console, and allow you to see exactly what is going on with it.\n\nNote that this *only* works from the console, you cannot embed it in a script tag on your page.\n\nFinally, push come shove, you might want to just debug `htmx.js` by loading up the unminimized version. It’s about 2500 lines of javascript, so not an insurmountable amount of code. You would most likely want to set a break point in the `issueAjaxRequest()` and `handleAjaxResponse()` methods to see what’s going on.\n\nAnd always feel free to jump on the [Discord](../discord/index) if you need help.\n\n### Creating Demos\n\nSometimes, in order to demonstrate a bug or clarify a usage, it is nice to be able to use a javascript snippet site like [jsfiddle](https://jsfiddle.net/). To facilitate easy demo creation, htmx hosts a demo script site that will install:\n\n- htmx\n- hyperscript\n- a request mocking library\n\nSimply add the following script tag to your demo/fiddle/whatever:\n\n``` language-html\n<script src=\"https://demo.htmx.org\"></script>\n```\n\nThis helper allows you to add mock responses by adding `template` tags with a `url` attribute to indicate which URL. The response for that url will be the innerHTML of the template, making it easy to construct mock responses. You can add a delay to the response with a `delay` attribute, which should be an integer indicating the number of milliseconds to delay\n\nYou may embed simple expressions in the template with the `${}` syntax.\n\nNote that this should only be used for demos and is in no way guaranteed to work for long periods of time as it will always be grabbing the latest versions htmx and hyperscript!\n\n#### Demo Example\n\nHere is an example of the code in action:\n\n``` language-html\n<!-- load demo environment -->\n<script src=\"https://demo.htmx.org\"></script>\n<!-- post to /foo -->\n<button hx-post=\"/foo\" hx-target=\"#result\">\n    Count Up\n</button>\n<output id=\"result\"></output>\n<!-- respond to /foo with some dynamic content in a template tag -->\n<script>\nglobalInt = 0;\n</script>\n<template url=\"/foo\" delay=\"500\"> <!-- note the url and delay attributes -->\n    ${globalInt++}\n</template>\n```\n\n## Scripting\n\nWhile htmx encourages a hypermedia-based approach to building web applications, it does not preclude scripting and offers a few mechanisms for integrating scripting into your web application. Scripting was explicitly included in the REST-ful description of the web architecture in the [Code-On-Demand](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_7) section. As much as is feasible, we recommend a [hypermedia-friendly](https://htmx.org/essays/hypermedia-friendly-scripting) approach to scripting in your htmx-based web application:\n\n- [Respect HATEOAS](https://htmx.org/essays/hypermedia-friendly-scripting#prime_directive)\n- [Use events to communicate between components](https://htmx.org/essays/hypermedia-friendly-scripting#events)\n- [Use islands to isolate non-hypermedia components from the rest of your application](https://htmx.org/essays/hypermedia-friendly-scripting#islands)\n- [Consider inline scripting](https://htmx.org/essays/hypermedia-friendly-scripting#inline)\n\nThe primary integration point between htmx and scripting solutions is the [events](index#events) that htmx sends and can respond to. See the SortableJS example in the [3rd Party Javascript](index#3rd-party) section for a good template for integrating a JavaScript library with htmx via events.\n\nScripting solutions that pair well with htmx include:\n\n- [VanillaJS](http://vanilla-js.com/) - Simply using the built-in abilities of JavaScript to hook in event handlers to respond to the events htmx emits can work very well for scripting. This is an extremely lightweight and increasingly popular approach.\n- [AlpineJS](https://alpinejs.dev/) - Alpine.js provides a rich set of tools for creating sophisticated front end scripts, including reactive programming support, while still remaining extremely lightweight. Alpine encourages the “inline scripting” approach that we feel pairs well with htmx.\n- [jQuery](https://jquery.com/) - Despite its age and reputation in some circles, jQuery pairs very well with htmx, particularly in older code-bases that already have a lot of jQuery in them.\n- [hyperscript](https://hyperscript.org) - Hyperscript is an experimental front-end scripting language created by the same team that created htmx. It is designed to embed well in HTML and both respond to and create events, and pairs very well with htmx.\n\nWe have an entire chapter entitled [“Client-Side Scripting”](https://hypermedia.systems/client-side-scripting/) in [our book](https://hypermedia.systems) that looks at how scripting can be integrated into your htmx-based application.\n\n### [The `hx-on*` Attributes](index#hx-on)\n\nHTML allows the embedding of inline scripts via the [`onevent` properties](https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers#using_onevent_properties), such as `onClick`:\n\n``` language-html\n<button onclick=\"alert('You clicked me!')\">\n    Click Me!\n</button>\n```\n\nThis feature allows scripting logic to be co-located with the HTML elements the logic applies to, giving good [Locality of Behaviour (LoB)](https://htmx.org/essays/locality-of-behaviour). Unfortunately, HTML only allows `on*` attributes for a fixed number of [specific DOM events](https://www.w3schools.com/tags/ref_eventattributes.asp) (e.g. `onclick`) and doesn’t provide a generalized mechanism for responding to arbitrary events on elements.\n\nIn order to address this shortcoming, htmx offers [`hx-on*`](../attributes/hx-on/index) attributes. These attributes allow you to respond to any event in a manner that preserves the LoB of the standard `on*` properties.\n\nIf we wanted to respond to the `click` event using an `hx-on` attribute, we would write this:\n\n``` language-html\n<button hx-on:click=\"alert('You clicked me!')\">\n    Click Me!\n</button>\n```\n\nSo, the string `hx-on`, followed by a colon (or a dash), then by the name of the event.\n\nFor a `click` event, of course, we would recommend sticking with the standard `onclick` attribute. However, consider an htmx-powered button that wishes to add a parameter to a request using the `htmx:config-request` event. This would not be possible using a standard `on*` property, but it can be done using the `hx-on:htmx:config-request` attribute:\n\n``` language-html\n<button hx-post=\"/example\"\nhx-on:htmx:config-request=\"event.detail.parameters.example = 'Hello Scripting!'\">\n    Post Me!\n</button>\n```\n\nHere the `example` parameter is added to the `POST` request before it is issued, with the value ‘Hello Scripting!’.\n\nThe `hx-on*` attributes are a very simple mechanism for generalized embedded scripting. It is *not* a replacement for more fully developed front-end scripting solutions such as AlpineJS or hyperscript. It can, however, augment a VanillaJS-based approach to scripting in your htmx-powered application.\n\nNote that HTML attributes are *case insensitive*. This means that, unfortunately, events that rely on capitalization/ camel casing, cannot be responded to. If you need to support camel case events we recommend using a more fully functional scripting solution such as AlpineJS or hyperscript. htmx dispatches all its events in both camelCase and in kebab-case for this very reason.\n\n### 3rd Party Javascript\n\nHtmx integrates fairly well with third party libraries. If the library fires events on the DOM, you can use those events to trigger requests from htmx.\n\nA good example of this is the [SortableJS demo](https://htmx.org/examples/sortable/):\n\n``` language-html\n<form class=\"sortable\" hx-post=\"/items\" hx-trigger=\"end\">\n    <div class=\"htmx-indicator\">Updating...</div>\n    <div><input type='hidden' name='item' value='1'/>Item 1</div>\n    <div><input type='hidden' name='item' value='2'/>Item 2</div>\n    <div><input type='hidden' name='item' value='2'/>Item 3</div>\n</form>\n```\n\nWith Sortable, as with most javascript libraries, you need to initialize content at some point.\n\nIn jquery you might do this like so:\n\n``` language-javascript\n$(document).ready(function() {\nvar sortables = document.body.querySelectorAll(\".sortable\");\nfor (var i = 0; i < sortables.length; i++) {\nvar sortable = sortables[i];\n        new Sortable(sortable, {\n            animation: 150,\n            ghostClass: 'blue-background-class'\n        });\n    }\n});\n```\n\nIn htmx, you would instead use the `htmx.onLoad` function, and you would select only from the newly loaded content, rather than the entire document:\n\n``` language-js\nhtmx.onLoad(function(content) {\nvar sortables = content.querySelectorAll(\".sortable\");\nfor (var i = 0; i < sortables.length; i++) {\nvar sortable = sortables[i];\n        new Sortable(sortable, {\n            animation: 150,\n            ghostClass: 'blue-background-class'\n        });\n    }\n})\n```\n\nThis will ensure that as new content is added to the DOM by htmx, sortable elements are properly initialized.\n\nIf javascript adds content to the DOM that has htmx attributes on it, you need to make sure that this content is initialized with the `htmx.process()` function.\n\nFor example, if you were to fetch some data and put it into a div using the `fetch` API, and that HTML had htmx attributes in it, you would need to add a call to `htmx.process()` like this:\n\n``` language-js\nlet myDiv = document.getElementById('my-div')\nfetch('http://example.com/movies.json')\n    .then(response => response.text())\n    .then(data => { myDiv.innerHTML = data; htmx.process(myDiv); } );\n```\n\nSome 3rd party libraries create content from HTML template elements. For instance, Alpine JS uses the `x-if` attribute on templates to add content conditionally. Such templates are not initially part of the DOM and, if they contain htmx attributes, will need a call to `htmx.process()` after they are loaded. The following example uses Alpine’s `$watch` function to look for a change of value that would trigger conditional content:\n\n``` language-html\n<div x-data=\"{show_new: false}\"\nx-init=\"$watch('show_new', value => {\n        if (show_new) {\n            htmx.process(document.querySelector('#new_content'))\n        }\n    })\">\n    <button @click = \"show_new = !show_new\">Toggle New Content</button>\n    <template x-if=\"show_new\">\n        <div id=\"new_content\">\n            <a hx-get=\"/server/newstuff\" href=\"#\">New Clickable</a>\n        </div>\n    </template>\n</div>\n```\n\n## Caching\n\nhtmx works with standard [HTTP caching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching) mechanisms out of the box.\n\nIf your server adds the [`Last-Modified`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified) HTTP response header to the response for a given URL, the browser will automatically add the [`If-Modified-Since`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since) request HTTP header to the next requests to the same URL. Be mindful that if your server can render different content for the same URL depending on some other headers, you need to use the [`Vary`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#vary) response HTTP header. For example, if your server renders the full HTML when the `HX-Request` header is missing or `false`, and it renders a fragment of that HTML when `HX-Request: true`, you need to add `Vary: HX-Request`. That causes the cache to be keyed based on a composite of the response URL and the `HX-Request` request header — rather than being based just on the response URL.\n\nIf you are unable (or unwilling) to use the `Vary` header, you can alternatively set the configuration parameter `getCacheBusterParam` to `true`. If this configuration variable is set, htmx will include a cache-busting parameter in `GET` requests that it makes, which will prevent browsers from caching htmx-based and non-htmx based responses in the same cache slot.\n\nhtmx also works with [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) as expected. Be mindful that if your server can render different content for the same URL (for example, depending on the value of the `HX-Request` header), the server needs to generate a different `ETag` for each content.\n\n## Security\n\nhtmx allows you to define logic directly in your DOM. This has a number of advantages, the largest being [Locality of Behavior](https://htmx.org/essays/locality-of-behaviour/), which makes your system easier to understand and maintain.\n\nA concern with this approach, however, is security: since htmx increases the expressiveness of HTML, if a malicious user is able to inject HTML into your application, they can leverage this expressiveness of htmx to malicious ends.\n\n### Rule 1: Escape All User Content\n\nThe first rule of HTML-based web development has always been: *do not trust input from the user*. You should escape all 3rd party, untrusted content that is injected into your site. This is to prevent, among other issues, [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting).\n\nThere is extensive documentation on XSS and how to prevent it on the excellent [OWASP Website](https://owasp.org/www-community/attacks/xss/), including a [Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n\nThe good news is that this is a very old and well understood topic, and the vast majority of server-side templating languages support [automatic escaping](https://docs.djangoproject.com/en/4.2/ref/templates/language/#automatic-html-escaping) of content to prevent just such an issue.\n\nThat being said, there are times people choose to inject HTML more dangerously, often via some sort of `raw()` mechanism in their templating language. This can be done for good reasons, but if the content being injected is coming from a 3rd party then it *must* be scrubbed, including removing attributes starting with `hx-` and `data-hx`, as well as inline `<script>` tags, etc.\n\nIf you are injecting raw HTML and doing your own escaping, a best practice is to *whitelist* the attributes and tags you allow, rather than to blacklist the ones you disallow.\n\n### htmx Security Tools\n\nOf course, bugs happen and developers are not perfect, so it is good to have a layered approach to security for your web application, and htmx provides tools to help secure your application as well.\n\nLet’s take a look at them.\n\n#### `hx-disable`\n\nThe first tool htmx provides to help further secure your application is the [`hx-disable`](../attributes/hx-disable/index) attribute. This attribute will prevent processing of all htmx attributes on a given element, and on all elements within it. So, for example, if you were including raw HTML content in a template (again, this is not recommended!) then you could place a div around the content with the `hx-disable` attribute on it:\n\n``` language-html\n<div hx-disable>\n    <%= raw(user_content) %>\n</div>\n```\n\nAnd htmx will not process any htmx-related attributes or features found in that content. This attribute cannot be disabled by injecting further content: if an `hx-disable` attribute is found anywhere in the parent hierarchy of an element, it will not be processed by htmx.\n\n#### `hx-history`\n\nAnother security consideration is htmx history cache. You may have pages that have sensitive data that you do not want stored in the users `localStorage` cache. You can omit a given page from the history cache by including the [`hx-history`](../attributes/hx-history/index) attribute anywhere on the page, and setting its value to `false`.\n\n#### Configuration Options\n\nhtmx also provides configuration options related to security:\n\n- `htmx.config.selfRequestsOnly` - if set to `true`, only requests to the same domain as the current document will be allowed\n- `htmx.config.allowScriptTags` - htmx will process `<script>` tags found in new content it loads. If you wish to disable this behavior you can set this configuration variable to `false`\n- `htmx.config.historyCacheSize` - can be set to `0` to avoid storing any HTML in the `localStorage` cache\n- `htmx.config.allowEval` - can be set to `false` to disable all features of htmx that rely on eval:\n  - event filters\n  - `hx-on:` attributes\n  - `hx-vals` with the `js:` prefix\n  - `hx-headers` with the `js:` prefix\n\nNote that all features removed by disabling `eval()` can be reimplemented using your own custom javascript and the htmx event model.\n\n#### Events\n\nIf you want to allow requests to some domains beyond the current host, but not leave things totally open, you can use the `htmx:validateUrl` event. This event will have the request URL available in the `detail.url` slot, as well as a `sameHost` property.\n\nYou can inspect these values and, if the request is not valid, invoke `preventDefault()` on the event to prevent the request from being issued.\n\n``` language-javascript\ndocument.body.addEventListener('htmx:validateUrl', function (evt) {\n// only allow requests to the current server as well as myserver.com\nif (!evt.detail.sameHost && evt.detail.url.hostname !== \"myserver.com\") {\nevt.preventDefault();\n  }\n});\n```\n\n### CSP Options\n\nBrowsers also provide tools for further securing your web application. The most powerful tool available is a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP). Using a CSP you can tell the browser to, for example, not issue requests to non-origin hosts, to not evaluate inline script tags, etc.\n\nHere is an example CSP in a `meta` tag:\n\n``` language-html\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self';\">\n```\n\nThis tells the browser “Only allow connections to the original (source) domain”. This would be redundant with the `htmx.config.selfRequestsOnly`, but a layered approach to security is warranted and, in fact, ideal, when dealing with application security.\n\nA full discussion of CSPs is beyond the scope of this document, but the [MDN Article](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) provide a good jumping off point for exploring this topic.\n\n## Configuring htmx\n\nHtmx has some configuration options that can be accessed either programmatically or declaratively. They are listed below:\n\n| Config Variable                       | Info                                                                                                                                                                                                                                                                                                                                              |\n|---------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `htmx.config.historyEnabled`          | defaults to `true`, really only useful for testing                                                                                                                                                                                                                                                                                                |\n| `htmx.config.historyCacheSize`        | defaults to 10                                                                                                                                                                                                                                                                                                                                    |\n| `htmx.config.refreshOnHistoryMiss`    | defaults to `false`, if set to `true` htmx will issue a full page refresh on history misses rather than use an AJAX request                                                                                                                                                                                                                       |\n| `htmx.config.defaultSwapStyle`        | defaults to `innerHTML`                                                                                                                                                                                                                                                                                                                           |\n| `htmx.config.defaultSwapDelay`        | defaults to 0                                                                                                                                                                                                                                                                                                                                     |\n| `htmx.config.defaultSettleDelay`      | defaults to 20                                                                                                                                                                                                                                                                                                                                    |\n| `htmx.config.includeIndicatorStyles`  | defaults to `true` (determines if the indicator styles are loaded)                                                                                                                                                                                                                                                                                |\n| `htmx.config.indicatorClass`          | defaults to `htmx-indicator`                                                                                                                                                                                                                                                                                                                      |\n| `htmx.config.requestClass`            | defaults to `htmx-request`                                                                                                                                                                                                                                                                                                                        |\n| `htmx.config.addedClass`              | defaults to `htmx-added`                                                                                                                                                                                                                                                                                                                          |\n| `htmx.config.settlingClass`           | defaults to `htmx-settling`                                                                                                                                                                                                                                                                                                                       |\n| `htmx.config.swappingClass`           | defaults to `htmx-swapping`                                                                                                                                                                                                                                                                                                                       |\n| `htmx.config.allowEval`               | defaults to `true`, can be used to disable htmx’s use of eval for certain features (e.g. trigger filters)                                                                                                                                                                                                                                         |\n| `htmx.config.allowScriptTags`         | defaults to `true`, determines if htmx will process script tags found in new content                                                                                                                                                                                                                                                              |\n| `htmx.config.inlineScriptNonce`       | defaults to `''`, meaning that no nonce will be added to inline scripts                                                                                                                                                                                                                                                                           |\n| `htmx.config.useTemplateFragments`    | defaults to `false`, HTML template tags for parsing content from the server (not IE11 compatible!)                                                                                                                                                                                                                                                |\n| `htmx.config.wsReconnectDelay`        | defaults to `full-jitter`                                                                                                                                                                                                                                                                                                                         |\n| `htmx.config.disableSelector`         | defaults to `[disable-htmx], [data-disable-htmx]`, htmx will not process elements with this attribute on it or a parent                                                                                                                                                                                                                           |\n| `htmx.config.timeout`                 | defaults to 0 in milliseconds                                                                                                                                                                                                                                                                                                                     |\n| `htmx.config.defaultFocusScroll`      | if the focused element should be scrolled into view, defaults to false and can be overridden using the [focus-scroll](../attributes/hx-swap/index#focus-scroll) swap modifier.                                                                                                                                                                    |\n| `htmx.config.getCacheBusterParam`     | defaults to false, if set to true htmx will include a cache-busting parameter in `GET` requests to avoid caching partial responses by the browser                                                                                                                                                                                                 |\n| `htmx.config.globalViewTransitions`   | if set to `true`, htmx will use the [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) API when swapping in new content.                                                                                                                                                                                    |\n| `htmx.config.methodsThatUseUrlParams` | defaults to `[\"get\"]`, htmx will format requests with this method by encoding their parameters in the URL, not the request body                                                                                                                                                                                                                   |\n| `htmx.config.selfRequestsOnly`        | defaults to `false`, if set to `true` will only allow AJAX requests to the same domain as the current document                                                                                                                                                                                                                                    |\n| `htmx.config.ignoreTitle`             | defaults to `false`, if set to `true` htmx will not update the title of the document when a `title` tag is found in new content                                                                                                                                                                                                                   |\n| `htmx.config.triggerSpecsCache`       | defaults to `null`, the cache to store evaluated trigger specifications into, improving parsing performance at the cost of more memory usage. You may define a simple object to use a never-clearing cache, or implement your own system using a [proxy object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n\nYou can set them directly in javascript, or you can use a `meta` tag:\n\n``` language-html\n<meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\n## Conclusion\n\nAnd that’s it!\n\nHave fun with htmx! You can accomplish [quite a bit](https://htmx.org/examples/) without writing a lot of code!\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/docs/](https://htmx.org/docs/)"
- name: Events
  id: events/index
  summary: Htmx provides an extensive events system that can be used to modify and enhance behavior
  description: "# Events\n\nHtmx provides an extensive events system that can be used to modify and enhance behavior. Events are listed below.\n\n### Event - `htmx:abort`\n\nThis event is different than other events: htmx does not *trigger* it, but rather *listens* for it.\n\nIf you send an `htmx:abort` event to an element making a request, it will abort the request:\n\n``` language-html\n<button id=\"request-button\" hx-post=\"/example\">Issue Request</button>\n<button onclick=\"htmx.trigger('#request-button', 'htmx:abort')\">Cancel Request</button>\n```\n\n### Event - `htmx:afterOnLoad`\n\nThis event is triggered after an AJAX `onload` has finished. Note that this does not mean that the content has been swapped or settled yet, only that the request has finished.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:afterProcessNode`\n\nThis event is triggered after htmx has initialized a DOM node. It can be useful for extensions to build additional features onto a node.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n\n### Event - `htmx:afterRequest`\n\nThis event is triggered after an AJAX request has finished either in the case of a successful request (although one that may have returned a remote error code such as a `404`) or in a network error situation. This event can be paired with [`htmx:beforeRequest`](index#htmx:beforeRequest) to wrap behavior around a request cycle.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n- `detail.successful` - true if the response has a 20x status code or is marked `detail.isError = false` in the `htmx:beforeSwap` event, else false\n- `detail.failed` - true if the response does not have a 20x status code or is marked `detail.isError = true` in the `htmx:beforeSwap` event, else false\n\n### Event - `htmx:afterSettle`\n\nThis event is triggered after the DOM has [settled](../docs/index#request-operations).\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:afterSwap`\n\nThis event is triggered after new content has been [swapped into the DOM](../docs/index#swapping).\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:beforeCleanupElement`\n\nThis event is triggered before htmx [disables](../attributes/hx-disable/index) an element or removes it from the DOM.\n\n##### Details\n\n- `detail.elt` - the cleaned up element\n\n### Event - `htmx:beforeOnLoad`\n\nThis event is triggered before any response processing occurs. If the event is cancelled, no swap will occur.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:beforeProcessNode`\n\nThis event is triggered before htmx initializes a DOM node and has processed all of its `hx-` attributes. This gives extensions and other external code the ability to modify the contents of a DOM node before it is processed.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n\n### Event - `htmx:beforeRequest`\n\nThis event is triggered before an AJAX request is issued. If the event is cancelled, no request will occur.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:beforeSend`\n\nThis event is triggered right before a request is sent. You may not cancel the request with this event.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:beforeSwap`\n\nThis event is triggered before any new content has been [swapped into the DOM](../docs/index#swapping). If the event is cancelled, no swap will occur.\n\nYou can modify the default swap behavior by modifying the `shouldSwap` and `target` properties of the event detail. See the documentation on [configuring swapping](../docs/index#modifying_swapping_behavior_with_events) for more details.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.requestConfig` - the configuration of the AJAX request\n- `detail.shouldSwap` - if the content will be swapped (defaults to `false` for non-200 response codes)\n- `detail.ignoreTitle` - if `true` any title tag in the response will be ignored\n- `detail.target` - the target of the swap\n\n### Event - `htmx:beforeTransition`\n\nThis event is triggered before a [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) wrapped swap occurs. If the event is cancelled, the View Transition will not occur and the normal swapping logic will happen instead.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.requestConfig` - the configuration of the AJAX request\n- `detail.shouldSwap` - if the content will be swapped (defaults to `false` for non-200 response codes)\n- `detail.target` - the target of the swap\n\n### Event - `htmx:configRequest`\n\nThis event is triggered after htmx has collected parameters for inclusion in the request. It can be used to include or update the parameters that htmx will send:\n\n``` language-javascript\ndocument.body.addEventListener('htmx:configRequest', function(evt) {\nevt.detail.parameters['auth_token'] = getAuthToken(); // add a new parameter into the mix\n});\n```\n\nNote that if an input value appears more than once the value in the `parameters` object will be an array, rather than a single value.\n\n##### Details\n\n- `detail.parameters` - the parameters that will be submitted in the request\n- `detail.unfilteredParameters` - the parameters that were found before filtering by [`hx-select`](../attributes/hx-select/index)\n- `detail.headers` - the request headers\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.verb` - the HTTP verb in use\n\n### Event - `htmx:confirm`\n\nThis event is triggered immediately after a trigger occurs on an element. It allows you to cancel (or delay) issuing the AJAX request. If you call `preventDefault()` on the event, it will not issue the given request. The `detail` object contains a function, `evt.detail.issueRequest()`, that can be used to issue the actual AJAX request at a later point. Combining these two features allows you to create an asynchronous confirmation dialog.\n\nHere is an example using [sweet alert](https://sweetalert.js.org/guides/):\n\n``` language-javascript\ndocument.body.addEventListener('htmx:confirm', function(evt) {\nevt.preventDefault();\nswal({\n      title: \"Are you sure?\",\n      text: \"Are you sure you are sure?\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    }).then((confirmed) => {\nif (confirmed) {\nevt.detail.issueRequest();\n      }\n   });\n});\n```\n\n##### Details\n\n{target: target, elt: elt, path: path, verb: verb, triggeringEvent: event, etc: etc, issueRequest: issueRequest}\n\n- `detail.elt` - the element in question\n- `detail.etc` - additional request information (mostly unused)\n- `detail.issueRequest` - a no argument function that can be invoked to issue the request (should be paired with `evt.preventDefault()`!)\n- `detail.path` - the path of the request\n- `detail.target` - the target of the request\n- `detail.triggeringEvent` - the original event that triggered this request\n- `detail.verb` - the verb of the request (e.g. `GET`)\n\n### Event - `htmx:historyCacheError`\n\nThis event is triggered when an attempt to save the cache to `localStorage` fails\n\n##### Details\n\n- `detail.cause` - the `Exception` that was thrown when attempting to save history to `localStorage`\n\n### Event - `htmx:historyCacheMiss`\n\nThis event is triggered when a cache miss occurs when restoring history\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest` that will retrieve the remote content for restoration\n- `detail.path` - the path and query of the page being restored\n\n### Event - `htmx:historyCacheMissError`\n\nThis event is triggered when a cache miss occurs and a response has been retrieved from the server for the content to restore, but the response is an error (e.g. `404`)\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.path` - the path and query of the page being restored\n\n### Event - `htmx:historyCacheMissLoad`\n\nThis event is triggered when a cache miss occurs and a response has been retrieved successfully from the server for the content to restore\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.path` - the path and query of the page being restored\n\n### Event - `htmx:historyRestore`\n\nThis event is triggered when htmx handles a history restoration action\n\n##### Details\n\n- `detail.path` - the path and query of the page being restored\n\n### Event - `htmx:beforeHistorySave`\n\nThis event is triggered when htmx handles a history restoration action\n\n##### Details\n\n- `detail.path` - the path and query of the page being restored\n- `detail.historyElt` - the history element being restored into\n\n##### Details\n\n- `detail.config` - the config that will be passed to the `EventSource` constructor\n\n### Event - `htmx:load`\n\nThis event is triggered when a new node is loaded into the DOM by htmx.\n\n##### Details\n\n- `detail.elt` - the newly added element\n\n### Event - `htmx:noSSESourceError`\n\nThis event is triggered when an element refers to an SSE event in its trigger, but no parent SSE source has been defined\n\n##### Details\n\n- `detail.elt` - the element with the bad SSE trigger\n\n### Event - `htmx:oobAfterSwap`\n\nThis event is triggered as part of an [out of band swap](../docs/index#oob_swaps) and behaves identically to an [after swap event](index#htmx:afterSwap)\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:oobBeforeSwap`\n\nThis event is triggered as part of an [out of band swap](../docs/index#oob_swaps) and behaves identically to a [before swap event](index#htmx:beforeSwap)\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.requestConfig` - the configuration of the AJAX request\n- `detail.shouldSwap` - if the content will be swapped (defaults to `false` for non-200 response codes)\n- `detail.target` - the target of the swap\n\n### Event - `htmx:oobErrorNoTarget`\n\nThis event is triggered when an [out of band swap](../docs/index#oob_swaps) does not have a corresponding element in the DOM to switch with.\n\n##### Details\n\n- `detail.content` - the element with the bad oob `id`\n\n### Event - `htmx:onLoadError`\n\nThis event is triggered when an error occurs during the `load` handling of an AJAX call\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.exception` - the exception that occurred\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:prompt`\n\nThis event is triggered after a prompt has been shown to the user with the [`hx-prompt`](../attributes/hx-prompt/index) attribute. If this event is cancelled, the AJAX request will not occur.\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.prompt` - the user response to the prompt\n\n### Event - `htmx:beforeHistoryUpdate`\n\nThis event is triggered before a history update is performed. It can be used to modify the `path` or `type` used to update the history.\n\n##### Details\n\n- `detail.history` - the `path` and `type` (push, replace) for the history update\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:pushedIntoHistory`\n\nThis event is triggered after a URL has been pushed into history.\n\n##### Details\n\n- `detail.path` - the path and query of the URL that has been pushed into history\n\n### Event - `htmx:replacedInHistory`\n\nThis event is triggered after a URL has been replaced in history.\n\n##### Details\n\n- `detail.path` - the path and query of the URL that has been replaced in history\n\n### Event - `htmx:responseError`\n\nThis event is triggered when an HTTP error response occurs\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:sendError`\n\nThis event is triggered when a network error prevents an HTTP request from occurring\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:sseError`\n\nThis event is triggered when an error occurs with an SSE source\n\n##### Details\n\n- `detail.elt` - the element with the bad SSE source\n- `detail.error` - the error\n- `detail.source` - the SSE source\n\n### Event - `htmx:swapError`\n\nThis event is triggered when an error occurs during the swap phase\n\n##### Details\n\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:targetError`\n\nThis event is triggered when a bad selector is used for a [`hx-target`](../attributes/hx-target/index) attribute (e.g. an element ID without a preceding `#`)\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the bad CSS selector\n\n### Event - `htmx:timeout`\n\nThis event is triggered when a request timeout occurs. This wraps the typical `timeout` event of XMLHttpRequest.\n\nTimeout time can be set using `htmx.config.timeout` or per element using [`hx-request`](../attributes/hx-request/index)\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request\n- `detail.xhr` - the `XMLHttpRequest`\n- `detail.target` - the target of the request\n- `detail.requestConfig` - the configuration of the AJAX request\n\n### Event - `htmx:trigger`\n\nThis event is triggered whenever an AJAX request would be, even if no AJAX request is specified. It is primarily intended to allow `hx-trigger` to execute client-side scripts; AJAX requests have more granular events available, like [`htmx:beforeRequest`](index#htmx:beforeRequest) or [`htmx:afterRequest`](index#htmx:afterRequest).\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\n### Event - `htmx:validateUrl`\n\nThis event is triggered before a request is made, allowing you to validate the URL that htmx is going to request. If `preventDefault()` is invoked on the event, the request will not be made.\n\n``` language-javascript\ndocument.body.addEventListener('htmx:validateUrl', function (evt) {\n// only allow requests to the current server as well as myserver.com\nif (!evt.detail.sameHost && evt.detail.url.hostname !== \"myserver.com\") {\nevt.preventDefault();\n  }\n});\n```\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n- `detail.url` - the URL Object representing the URL that a request will be sent to.\n- `detail.sameHost` - will be `true` if the request is to the same host as the document\n\n### Event - `htmx:validation:validate`\n\nThis event is triggered before an element is validated. It can be used with the `elt.setCustomValidity()` method to implement custom validation rules.\n\n``` language-html\n<form hx-post=\"/test\">\n  <input _=\"on htmx:validation:validate\n               if my.value != 'foo'\n                  call me.setCustomValidity('Please enter the value foo')\n               else\n                  call me.setCustomValidity('')\"\nname=\"example\">\n</form>\n```\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\n### Event - `htmx:validation:failed`\n\nThis event is triggered when an element fails validation.\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n- `detail.message` - the validation error message\n- `detail.validity` - the validity object, which contains properties specifying how validation failed\n\n### Event - `htmx:validation:halted`\n\nThis event is triggered when a request is halted due to validation errors.\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n- `detail.errors` - an array of error objects with the invalid elements and errors associated with them\n\n### Event - `htmx:xhr:abort`\n\nThis event is triggered when an ajax request aborts\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\n### Event - `htmx:xhr:loadstart`\n\nThis event is triggered when an ajax request starts\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\n### Event - `htmx:xhr:loadend`\n\nThis event is triggered when an ajax request finishes\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\n### Event - `htmx:xhr:progress`\n\nThis event is triggered periodically when an ajax request that supports progress is in flight\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/events/](https://htmx.org/events/)"
- name: Extensions
  id: extensions/index
  summary: Htmx provides an extension mechanism for defining and using extensions within htmx-based applications
  description: "# Extensions\n\nHtmx provides an extension mechanism for defining and using extensions within htmx-based applications.\n\n## Using Extensions\n\nUsing an extension involves two steps:\n\n- include the extension definition, which will add it to the `htmx` extension registry\n- reference the extension via the [hx-ext](../attributes/hx-ext/index) attribute\n\nHere is an example\n\n``` language-html\n  <script src=\"/path/to/ext/debug.js\" defer></script>\n  <button hx-post=\"/example\" hx-ext=\"debug\">This Button Uses The Debug Extension</button>\n```\n\nThis loads the debug extension off of the `unpkg` CDN and then adds the debug extension to the given button. (This will print out extensive logging for the button, for debugging purposes.)\n\nNote that the `hx-ext` tag may be placed on parent elements if you want a plugin to apply to an entire part of the DOM, and on the `body` tag for it to apply to all htmx requests.\n\n**Tip:** To use multiple extensions on one element, separate them with a comma:\n\n``` language-html\n  <button hx-post=\"/example\" hx-ext=\"debug, json-enc\">This Button Uses Two Extensions</button>\n```\n\n## Ignoring Extensions\n\nBy default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the `ignore:` keyword to stop it from being used.\n\n``` language-html\n<div hx-ext=\"debug\">\n  <button hx-post=\"/example\">This button used the debug extension</button>\n  <button hx-post=\"/example\" hx-ext=\"ignore:debug\">This button does not</button>\n</div>\n```\n\n## Included Extensions\n\nhtmx includes a set of extensions out of the box that address common developer needs. These extensions are tested against `htmx` in each distribution.\n\n### Installing Extensions\n\nYou can find the source for the bundled extensions at `https://unpkg.com/browse/htmx.org/dist/ext/`. You will need to include the javascript file for the extension and then install it using the [hx-ext](../attributes/hx-ext/index) attributes.\n\nSee the individual extension documentation for more details.\n\n### Included Extensions List\n\n| Extension                                                  | Description                                                                                                                       |\n|------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| [`ajax-header`](ajax-header/index)                         | includes the commonly-used `X-Requested-With` header that identifies ajax requests in many backend frameworks                     |\n| [`alpine-morph`](alpine-morph/index)                       | an extension for using the [Alpine.js morph](https://alpinejs.dev/plugins/morph) plugin as the swapping mechanism in htmx.        |\n| [`class-tools`](class-tools/index)                         | an extension for manipulating timed addition and removal of classes on HTML elements                                              |\n| [`client-side-templates`](client-side-templates/index)     | support for client side template processing of JSON/XML responses                                                                 |\n| [`debug`](debug/index)                                     | an extension for debugging of a particular element using htmx                                                                     |\n| [`event-header`](event-header/index)                       | includes a JSON serialized version of the triggering event, if any                                                                |\n| [`head-support`](head-support/index)                       | support for merging the `head` tag from responses into the existing documents `head`                                              |\n| [`include-vals`](include-vals/index)                       | allows you to include additional values in a request                                                                              |\n| [`json-enc`](json-enc/index)                               | use JSON encoding in the body of requests, rather than the default `x-www-form-urlencoded`                                        |\n| [`idiomorph`](https://github.com/bigskysoftware/idiomorph) | an extension for using the idiomorph morphing algorithm as a swapping mechanism                                                   |\n| [`loading-states`](loading-states/index)                   | allows you to disable inputs, add and remove CSS classes to any element while a request is in-flight.                             |\n| [`method-override`](method-override/index)                 | use the `X-HTTP-Method-Override` header for non-`GET` and `POST` requests                                                         |\n| [`morphdom-swap`](morphdom-swap/index)                     | an extension for using the [morphdom](https://github.com/patrick-steele-idem/morphdom) library as the swapping mechanism in htmx. |\n| [`multi-swap`](multi-swap/index)                           | allows to swap multiple elements with different swap methods                                                                      |\n| [`path-deps`](path-deps/index)                             | an extension for expressing path-based dependencies [similar to intercoolerjs](http://intercoolerjs.org/docs.html#dependencies)   |\n| [`preload`](preload/index)                                 | preloads selected `href` and `hx-get` targets based on rules you control.                                                         |\n| [`remove-me`](remove-me/index)                             | allows you to remove an element after a given amount of time                                                                      |\n| [`response-targets`](response-targets/index)               | allows to specify different target elements to be swapped when different HTTP response codes are received                         |\n| [`restored`](restored/index)                               | allows you to trigger events when the back button has been pressed                                                                |\n| [`server-sent-events`](server-sent-events/index)           | uni-directional server push messaging via [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource)             |\n| [`web-sockets`](web-sockets/index)                         | bi-directional connection to WebSocket servers                                                                                    |\n| [`path-params`](path-params/index)                         | allows to use parameters for path variables instead of sending them in query or body                                              |\n\n## Defining an Extension\n\nTo define an extension you call the `htmx.defineExtension()` function:\n\n``` language-html\n<script>\nhtmx.defineExtension('my-ext', {\nonEvent : function(name, evt) {\n        console.log(\"Fired event: \" + name, evt);\n    }\n  })\n</script>\n```\n\nTypically, this is done in a stand-alone javascript file, rather than in an inline `script` tag.\n\nExtensions should have names that are dash separated and that are reasonably short and descriptive.\n\nExtensions can override the following default extension points to add or change functionality:\n\n``` language-javascript\n{\n    onEvent : function(name, evt) {return true;},\n    transformResponse : function(text, xhr, elt) {return text;},\n    isInlineSwap : function(swapStyle) {return false;},\n    handleSwap : function(swapStyle, target, fragment, settleInfo) {return false;},\n    encodeParameters : function(xhr, parameters, elt) {return null;}\n}\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/](https://htmx.org/extensions/)"
- name: htmx.addClass()
  id: api/index#addClass
  summary: This method adds a class to the given element
  belongs_to: Javascript API
  description: "### Method - `htmx.addClass()`\n\nThis method adds a class to the given element.\n\n##### Parameters\n\n- `elt` - the element to add the class to\n- `class` - the class to add\n\nor\n\n- `elt` - the element to add the class to\n- `class` - the class to add\n- `delay` - delay (in milliseconds ) before class is added\n\n##### Example\n\n``` language-js\n      \n        // add the class 'myClass' to the element with the id 'demo'\n\n        htmx\n        .\n        addClass\n        (\n        htmx\n        .\n        find\n        (\n        '#demo'\n        ), \n        'myClass'\n        );\n\n        // add the class 'myClass' to the element with the id 'demo' after 1 second\n\n        htmx\n        .\n        addClass\n        (\n        htmx\n        .\n        find\n        (\n        '#demo'\n        ), \n        'myClass'\n        , \n        1000\n        );\n\n      \n    \n```"
- name: htmx.ajax()
  id: api/index#ajax
  summary: Issues an htmx-style AJAX request
  belongs_to: Javascript API
  description: "### Method - `htmx.ajax()`\n\nIssues an htmx-style AJAX request. This method returns a Promise, so a callback can be executed after the content has been inserted into the DOM.\n\n##### Parameters\n\n- `verb` - ‘GET’, ‘POST’, etc.\n- `path` - the URL path to make the AJAX\n- `element` - the element to target (defaults to the `body`)\n\nor\n\n- `verb` - ‘GET’, ‘POST’, etc.\n- `path` - the URL path to make the AJAX\n- `selector` - a selector for the target\n\nor\n\n- `verb` - ‘GET’, ‘POST’, etc.\n- `path` - the URL path to make the AJAX\n- `context` - a context object that contains any of the following\n  - `source` - the source element of the request\n  - `event` - an event that “triggered” the request\n  - `handler` - a callback that will handle the response HTML\n  - `target` - the target to swap the response into\n  - `swap` - how the response will be swapped in relative to the target\n  - `values` - values to submit with the request\n  - `headers` - headers to submit with the request\n  - `select` - allows you to select the content you want swapped from a response\n\n##### Example\n\n``` language-js\n      \n        // issue a GET to /example and put the response HTML into #myDiv\n\n        htmx\n        .\n        ajax\n        (\n        'GET'\n        , \n        '/example'\n        , \n        '#myDiv'\n        )\n\n        // issue a GET to /example and replace #myDiv with the response\n\n        htmx\n        .\n        ajax\n        (\n        'GET'\n        , \n        '/example'\n        , {target:\n        '#myDiv'\n        , swap:\n        'outerHTML'\n        })\n\n        // execute some code after the content has been inserted into the DOM\n\n        htmx\n        .\n        ajax\n        (\n        'GET'\n        , \n        '/example'\n        , \n        '#myDiv'\n        ).\n        then\n        (() \n        => \n        {\n\n        // this code will be executed after the 'htmx:afterOnLoad' event,\n\n        // and before the 'htmx:xhr:loadend' event\n\n        console\n        .\n        log\n        (\n        'Content inserted successfully!'\n        );\n\n            });\n\n      \n    \n```"
- name: htmx.closest()
  id: api/index#closest
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.closest()`\n\nFinds the closest matching element in the given elements parentage, inclusive of the element\n\n##### Parameters\n\n- `elt` - the element to find the selector from\n- `selector` - the selector to find\n\n##### Example\n\n``` language-js\n      \n        // find the closest enclosing div of the element with the id 'demo'\n\n        htmx\n        .\n        closest\n        (\n        htmx\n        .\n        find\n        (\n        '#demo'\n        ), \n        'div'\n        );\n\n      \n    \n```"
- name: htmx.config
  id: api/index#config
  summary: A property holding the configuration htmx uses at runtime
  belongs_to: Javascript API
  description: "### Property - `htmx.config`\n\nA property holding the configuration htmx uses at runtime.\n\nNote that using a [meta tag](../docs/index#config) is the preferred mechanism for setting these properties.\n\n##### Properties\n\n- `attributesToSettle:[\"class\", \"style\", \"width\", \"height\"]` - array of strings: the attributes to settle during the settling phase\n- `refreshOnHistoryMiss:false` - boolean: if set to `true` htmx will issue a full page refresh on history misses rather than use an AJAX request\n- `defaultSettleDelay:20` - int: the default delay between completing the content swap and settling attributes\n- `defaultSwapDelay:0` - int: the default delay between receiving a response from the server and doing the swap\n- `defaultSwapStyle:'innerHTML'` - string: the default swap style to use if [`hx-swap`](../attributes/hx-swap/index) is omitted\n- `historyCacheSize:10` - int: the number of pages to keep in `localStorage` for history support\n- `historyEnabled:true` - boolean: whether or not to use history\n- `includeIndicatorStyles:true` - boolean: if true, htmx will inject a small amount of CSS into the page to make indicators invisible unless the `htmx-indicator` class is present\n- `indicatorClass:'htmx-indicator'` - string: the class to place on indicators when a request is in flight\n- `requestClass:'htmx-request'` - string: the class to place on triggering elements when a request is in flight\n- `addedClass:'htmx-added'` - string: the class to temporarily place on elements that htmx has added to the DOM\n- `settlingClass:'htmx-settling'` - string: the class to place on target elements when htmx is in the settling phase\n- `swappingClass:'htmx-swapping'` - string: the class to place on target elements when htmx is in the swapping phase\n- `allowEval:true` - boolean: allows the use of eval-like functionality in htmx, to enable `hx-vars`, trigger conditions & script tag evaluation. Can be set to `false` for CSP compatibility.\n- `allowScriptTags:true` - boolean: allows script tags to be evaluated in new content\n- `inlineScriptNonce:''` - string: the [nonce](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/nonce) to add to inline scripts\n- `useTemplateFragments:false` - boolean: use HTML template tags for parsing content from the server. This allows you to use Out of Band content when returning things like table rows, but it is *not* IE11 compatible.\n- `withCredentials:false` - boolean: allow cross-site Access-Control requests using credentials such as cookies, authorization headers or TLS client certificates\n- `timeout:0` - int: the number of milliseconds a request can take before automatically being terminated\n- `wsReconnectDelay:'full-jitter'` - string/function: the default implementation of `getWebSocketReconnectDelay` for reconnecting after unexpected connection loss by the event code `Abnormal Closure`, `Service Restart` or `Try Again Later`\n- `wsBinaryType:'blob'` - string: the [the type of binary data](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType) being received over the WebSocket connection\n- `disableSelector:\"[hx-disable], [data-hx-disable]\"` - array of strings: htmx will not process elements with this attribute on it or a parent\n- `scrollBehavior:'smooth'` - string: the behavior for a boosted link on page transitions. The allowed values are `auto` and `smooth`. Smooth will smoothscroll to the top of the page while auto will behave like a vanilla link.\n- `defaultFocusScroll:false` - boolean: if the focused element should be scrolled into view, can be overridden using the [focus-scroll](../attributes/hx-swap/index#focus-scroll) swap modifier\n- `getCacheBusterParam:false` - boolean: if set to true htmx will include a cache-busting parameter in `GET` requests to avoid caching partial responses by the browser\n- `globalViewTransitions:false` - boolean: if set to `true`, htmx will use the [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) API when swapping in new content.\n- `methodsThatUseUrlParams:[\"get\"]` - array of strings: htmx will format requests with these methods by encoding their parameters in the URL, not the request body\n- `selfRequestsOnly:false` - boolean: if set to `true` will only allow AJAX requests to the same domain as the current document\n- `ignoreTitle:false` - boolean: if set to `true` htmx will not update the title of the document when a `title` tag is found in new content\n- `scrollIntoViewOnBoost:true` - boolean: whether or not the target of a boosted element is scrolled into the viewport. If `hx-target` is omitted on a boosted element, the target defaults to `body`, causing the page to scroll to the top.\n- `triggerSpecsCache:null` - object: the cache to store evaluated trigger specifications into, improving parsing performance at the cost of more memory usage. You may define a simple object to use a never-clearing cache, or implement your own system using a [proxy object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy) \\|\n\n##### Example\n\n``` language-js\n      \n        // update the history cache size to 30\n\n        htmx\n        .\n        config\n        .\n        historyCacheSize \n        = \n        30\n        ;\n\n      \n    \n```"
- name: htmx.createEventSource
  id: api/index#createEventSource
  summary: A property used to create new Server Sent Event sources
  belongs_to: Javascript API
  description: "### Property - `htmx.createEventSource`\n\nA property used to create new [Server Sent Event](../docs/index#sse) sources. This can be updated to provide custom SSE setup.\n\n##### Value\n\n- `func(url)` - a function that takes a URL string and returns a new `EventSource`\n\n##### Example\n\n``` language-js\n      \n        // override SSE event sources to not use credentials\n\n        htmx\n        .\n        createEventSource \n        = \n        function\n        (\n        url\n        ) {\n\n        return \n        new EventSource(\n        url\n        , {withCredentials:\n        false\n        });\n\n          };\n\n      \n    \n```"
- name: htmx.createWebSocket
  id: api/index#createWebSocket
  summary: A property used to create new WebSocket
  belongs_to: Javascript API
  description: "### Property - `htmx.createWebSocket`\n\nA property used to create new [WebSocket](../docs/index#websockets). This can be updated to provide custom WebSocket setup.\n\n##### Value\n\n- `func(url)` - a function that takes a URL string and returns a new `WebSocket`\n\n##### Example\n\n``` language-js\n      \n        // override WebSocket to use a specific protocol\n\n        htmx\n        .\n        createWebSocket \n        = \n        function\n        (\n        url\n        ) {\n\n        return \n        new WebSocket(\n        url\n        , [\n        'wss'\n        ]);\n\n          };\n\n      \n    \n```"
- name: htmx.defineExtension()
  id: api/index#defineExtension
  summary: Defines a new htmx extension
  belongs_to: Javascript API
  description: "### Method - `htmx.defineExtension()`\n\nDefines a new htmx [extension](../extensions/index).\n\n##### Parameters\n\n- `name` - the extension name\n- `ext` - the extension definition\n\n##### Example\n\n``` language-js\n      \n        // defines a silly extension that just logs the name of all events triggered\n\n        htmx\n        .\n        defineExtension\n        (\n        \"silly\"\n        , {\n\n        onEvent \n        : \n        function\n        (\n        name\n        , \n        evt\n        ) {\n\n        console\n        .\n        log\n        (\n        \"Event \" \n        + \n        name \n        + \n        \" was triggered!\"\n        )\n\n            }\n\n          });\n\n      \n    \n```"
- name: htmx.find()
  id: api/index#find
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.find()`\n\nFinds an element matching the selector\n\n##### Parameters\n\n- `selector` - the selector to match\n\nor\n\n- `elt` - the root element to find the matching element in, inclusive\n- `selector` - the selector to match\n\n##### Example\n\n``` language-js\n      \n        // find div with id my-div\n\n        var \n        div \n        = \n        htmx\n        .\n        find\n        (\n        \"#my-div\"\n        )\n\n        // find div with id another-div within that div\n\n        var \n        anotherDiv \n        = \n        htmx\n        .\n        find\n        (\n        div\n        , \n        \"#another-div\"\n        )\n\n      \n    \n```"
- name: htmx.findAll()
  id: api/index#findAll
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.findAll()`\n\nFinds all elements matching the selector\n\n##### Parameters\n\n- `selector` - the selector to match\n\nor\n\n- `elt` - the root element to find the matching elements in, inclusive\n- `selector` - the selector to match\n\n##### Example\n\n``` language-js\n      \n        // find all divs\n\n        var \n        allDivs \n        = \n        htmx\n        .\n        findAll\n        (\n        \"div\"\n        )\n\n        // find all paragraphs within a given div\n\n        var \n        allParagraphsInMyDiv \n        = \n        htmx\n        .\n        findAll\n        (\n        htmx\n        .\n        find\n        (\n        \"#my-div\"\n        ), \n        \"p\"\n        )\n\n      \n    \n```"
- name: htmx.logAll()
  id: api/index#logAll
  summary: Log all htmx events, useful for debugging
  belongs_to: Javascript API
  description: "### Method - `htmx.logAll()`\n\nLog all htmx events, useful for debugging.\n\n##### Example\n\n``` language-js\n      \n        htmx\n        .\n        logAll\n        ();\n\n      \n    \n```"
- name: htmx.logger
  id: api/index#logger
  summary: null
  belongs_to: Javascript API
  description: "### Property - `htmx.logger`\n\nThe logger htmx uses to log with\n\n##### Value\n\n- `func(elt, eventName, detail)` - a function that takes an element, eventName and event detail and logs it\n\n##### Example\n\n``` language-js\n      \n        htmx\n        .\n        logger \n        = \n        function\n        (\n        elt\n        , \n        event\n        , \n        data\n        ) {\n\n        if\n        (\n        console\n        ) {\n\n        console\n        .\n        log\n        (\n        \"INFO:\"\n        , event, \n        elt\n        , \n        data\n        );\n\n                }\n\n            }\n\n      \n    \n```"
- name: htmx.logNone()
  id: api/index#logNone
  summary: Log no htmx events, call this to turn off the debugger if you previously enabled it
  belongs_to: Javascript API
  description: "### Method - `htmx.logNone()`\n\nLog no htmx events, call this to turn off the debugger if you previously enabled it.\n\n##### Example\n\n``` language-js\n      \n        htmx\n        .\n        logNone\n        ();\n\n      \n    \n```"
- name: htmx.off()
  id: api/index#off
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.off()`\n\nRemoves an event listener from an element\n\n##### Parameters\n\n- `eventName` - the event name to remove the listener from\n- `listener` - the listener to remove\n\nor\n\n- `target` - the element to remove the listener from\n- `eventName` - the event name to remove the listener from\n- `listener` - the listener to remove\n\n##### Example\n\n``` language-js\n      \n        // remove this click listener from the body\n\n        htmx\n        .\n        off\n        (\n        \"click\"\n        , \n        myEventListener\n        );\n\n        // remove this click listener from the given div\n\n        htmx\n        .\n        off\n        (\n        \"#my-div\"\n        , \n        \"click\"\n        , \n        myEventListener\n        )\n\n      \n    \n```"
- name: htmx.on()
  id: api/index#on
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.on()`\n\nAdds an event listener to an element\n\n##### Parameters\n\n- `eventName` - the event name to add the listener for\n- `listener` - the listener to add\n\nor\n\n- `target` - the element to add the listener to\n- `eventName` - the event name to add the listener for\n- `listener` - the listener to add\n\n##### Example\n\n``` language-js\n      \n        // add a click listener to the body\n\n        var \n        myEventListener \n        = \n        htmx\n        .\n        on\n        (\n        \"click\"\n        , \n        function\n        (\n        evt\n        ){ \n        console\n        .\n        log\n        (\n        evt\n        ); });\n\n        // add a click listener to the given div\n\n        var \n        myEventListener \n        = \n        htmx\n        .\n        on\n        (\n        \"#my-div\"\n        , \n        \"click\"\n        , \n        function\n        (\n        evt\n        ){ \n        console\n        .\n        log\n        (\n        evt\n        ); });\n\n      \n    \n```"
- name: htmx.onLoad()
  id: api/index#onLoad
  summary: Adds a callback for the htmx:load event
  belongs_to: Javascript API
  description: "### Method - `htmx.onLoad()`\n\nAdds a callback for the `htmx:load` event. This can be used to process new content, for example initializing the content with a javascript library\n\n##### Parameters\n\n- `callback(elt)` - the callback to call on newly loaded content\n\n##### Example\n\n``` language-js\n      \n        htmx\n        .\n        onLoad\n        (\n        function\n        (\n        elt\n        ){\n\n        MyLibrary\n        .\n        init\n        (\n        elt\n        );\n\n            })\n\n      \n    \n```"
- name: htmx.parseInterval()
  id: api/index#parseInterval
  summary: Parses an interval string consistent with the way htmx does
  belongs_to: Javascript API
  description: "### Method - `htmx.parseInterval()`\n\nParses an interval string consistent with the way htmx does. Useful for plugins that have timing-related attributes.\n\nCaution: Accepts an int followed by either `s` or `ms`. All other values use `parseFloat`\n\n##### Parameters\n\n- `str` - timing string\n\n##### Example\n\n``` language-js\n      \n        // returns 3000\n\n        var \n        milliseconds \n        = \n        htmx\n        .\n        parseInterval\n        (\n        \"3s\"\n        );\n\n        // returns 3 - Caution\n\n        var \n        milliseconds \n        = \n        htmx\n        .\n        parseInterval\n        (\n        \"3m\"\n        );\n\n      \n    \n```"
- name: htmx.process()
  id: api/index#process
  summary: Processes new content, enabling htmx behavior
  belongs_to: Javascript API
  description: "### Method - `htmx.process()`\n\nProcesses new content, enabling htmx behavior. This can be useful if you have content that is added to the DOM outside of the normal htmx request cycle but still want htmx attributes to work.\n\n##### Parameters\n\n- `elt` - element to process\n\n##### Example\n\n``` language-js\n      \n          document.body.\n        innerHTML \n        = \n        \"<div hx-get='/example'>Get it!</div>\"\n\n        // process the newly added content\n\n        htmx\n        .\n        process\n        (document.body);\n\n      \n    \n```"
- name: htmx.remove()
  id: api/index#remove
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.remove()`\n\nRemoves an element from the DOM\n\n##### Parameters\n\n- `elt` - element to remove\n\nor\n\n- `elt` - element to remove\n- `delay` - delay (in milliseconds ) before element is removed\n\n##### Example\n\n``` language-js\n      \n        // removes my-div from the DOM\n\n        htmx\n        .\n        remove\n        (\n        htmx\n        .\n        find\n        (\n        \"#my-div\"\n        ));\n\n        // removes my-div from the DOM after a delay of 2 seconds\n\n        htmx\n        .\n        remove\n        (\n        htmx\n        .\n        find\n        (\n        \"#my-div\"\n        ), \n        2000\n        );\n\n      \n    \n```"
- name: htmx.removeClass()
  id: api/index#removeClass
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.removeClass()`\n\nRemoves a class from the given element\n\n##### Parameters\n\n- `elt` - element to remove the class from\n- `class` - the class to remove\n\nor\n\n- `elt` - element to remove the class from\n- `class` - the class to remove\n- `delay` - delay (in milliseconds ) before class is removed\n\n##### Example\n\n``` language-js\n      \n        // removes .myClass from my-div\n\n        htmx\n        .\n        removeClass\n        (\n        htmx\n        .\n        find\n        (\n        \"#my-div\"\n        ), \n        \"myClass\"\n        );\n\n        // removes .myClass from my-div after 6 seconds\n\n        htmx\n        .\n        removeClass\n        (\n        htmx\n        .\n        find\n        (\n        \"#my-div\"\n        ), \n        \"myClass\"\n        , \n        6000\n        );\n\n      \n    \n```"
- name: htmx.removeExtension()
  id: api/index#removeExtension
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.removeExtension()`\n\nRemoves the given extension from htmx\n\n##### Parameters\n\n- `name` - the name of the extension to remove\n\n##### Example\n\n``` language-js\n      \n        htmx\n        .\n        removeExtension\n        (\n        \"my-extension\"\n        );\n\n      \n    \n```"
- name: htmx.takeClass()
  id: api/index#takeClass
  summary: Takes the given class from its siblings, so that among its siblings, only the given element will have the class
  belongs_to: Javascript API
  description: "### Method - `htmx.takeClass()`\n\nTakes the given class from its siblings, so that among its siblings, only the given element will have the class.\n\n##### Parameters\n\n- `elt` - the element that will take the class\n- `class` - the class to take\n\n##### Example\n\n``` language-js\n      \n        // takes the selected class from tab2's siblings\n\n        htmx\n        .\n        takeClass\n        (\n        htmx\n        .\n        find\n        (\n        \"#tab2\"\n        ), \n        \"selected\"\n        );\n\n      \n    \n```"
- name: htmx.toggleClass()
  id: api/index#toggleClass
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.toggleClass()`\n\nToggles the given class on an element\n\n##### Parameters\n\n- `elt` - the element to toggle the class on\n- `class` - the class to toggle\n\n##### Example\n\n``` language-js\n      \n        // toggles the selected class on tab2\n\n        htmx\n        .\n        toggleClass\n        (\n        htmx\n        .\n        find\n        (\n        \"#tab2\"\n        ), \n        \"selected\"\n        );\n\n      \n    \n```"
- name: htmx.trigger()
  id: api/index#trigger
  summary: null
  belongs_to: Javascript API
  description: "### Method - `htmx.trigger()`\n\nTriggers a given event on an element\n\n##### Parameters\n\n- `elt` - the element to trigger the event on\n- `name` - the name of the event to trigger\n- `detail` - details for the event\n\n##### Example\n\n``` language-js\n      \n        // triggers the myEvent event on #tab2 with the answer 42\n\n        htmx\n        .\n        trigger\n        (\n        \"#tab2\"\n        , \n        \"myEvent\"\n        , {answer:\n        42\n        });\n\n      \n    \n```"
- name: htmx.values()
  id: api/index#values
  summary: Licensed under the Zero-Clause BSD License
  belongs_to: Javascript API
  description: "### Method - `htmx.values()`\n\nReturns the input values that would resolve for a given element via the htmx value resolution mechanism\n\n##### Parameters\n\n- `elt` - the element to resolve values on\n- `request type` - the request type (e.g. `get` or `post`) non-GET’s will include the enclosing form of the element. Defaults to `post`\n\n##### Example\n\n``` language-js\n      \n        // gets the values associated with this form\n\n        var \n        values \n        = \n        htmx\n        .\n        values\n        (\n        htmx\n        .\n        find\n        (\n        \"#myForm\"\n        ));\n\n      \n    \n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/api/](https://htmx.org/api/)"
- name: htmx:abort
  id: events/index#htmx:abort
  summary: 'This event is different than other events: htmx does not trigger it, but rather listens for it'
  belongs_to: Events
  description: "### Event - `htmx:abort`\n\nThis event is different than other events: htmx does not *trigger* it, but rather *listens* for it.\n\nIf you send an `htmx:abort` event to an element making a request, it will abort the request:\n\n``` language-html\n      \n        <\n        button \n        id\n        =\n        \"request-button\" \n        hx-post\n        =\n        \"/example\"\n        >Issue Request</\n        button\n        >\n\n        <\n        button \n        onclick\n        =\n        \"\n        htmx\n        .\n        trigger\n        (\n        '#request-button'\n        , \n        'htmx:abort'\n        )\n        \"\n        >Cancel Request</\n        button\n        >\n\n      \n    \n```"
- name: htmx:afterOnLoad
  id: events/index#htmx:afterOnLoad
  summary: This event is triggered after an AJAX onload has finished
  belongs_to: Events
  description: |-
    ### Event - `htmx:afterOnLoad`

    This event is triggered after an AJAX `onload` has finished. Note that this does not mean that the content has been swapped or settled yet, only that the request has finished.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request
- name: htmx:afterProcessNode
  id: events/index#htmx:afterProcessNode
  summary: This event is triggered after htmx has initialized a DOM node
  belongs_to: Events
  description: |-
    ### Event - `htmx:afterProcessNode`

    This event is triggered after htmx has initialized a DOM node. It can be useful for extensions to build additional features onto a node.

    ##### Details

    - `detail.elt` - the element that dispatched the request

    &nbsp;
- name: htmx:afterRequest
  id: events/index#htmx:afterRequest
  summary: This event is triggered after an AJAX request has finished either in the case of a successful request (although one that may have returned a remote error code such as a 404) or in a network error situation
  belongs_to: Events
  description: |-
    ### Event - `htmx:afterRequest`

    This event is triggered after an AJAX request has finished either in the case of a successful request (although one that may have returned a remote error code such as a `404`) or in a network error situation. This event can be paired with [`htmx:beforeRequest`](index#htmx:beforeRequest) to wrap behavior around a request cycle.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request
    - `detail.successful` - true if the response has a 20x status code or is marked `detail.isError = false` in the `htmx:beforeSwap` event, else false
    - `detail.failed` - true if the response does not have a 20x status code or is marked `detail.isError = true` in the `htmx:beforeSwap` event, else false

    &nbsp;
- name: htmx:afterSettle
  id: events/index#htmx:afterSettle
  summary: This event is triggered after the DOM has settled
  belongs_to: Events
  description: |-
    ### Event - `htmx:afterSettle`

    This event is triggered after the DOM has [settled](../docs/index#request-operations).

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:afterSwap
  id: events/index#htmx:afterSwap
  summary: This event is triggered after new content has been swapped into the DOM
  belongs_to: Events
  description: |-
    ### Event - `htmx:afterSwap`

    This event is triggered after new content has been [swapped into the DOM](../docs/index#swapping).

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:beforeCleanupElement
  id: events/index#htmx:beforeCleanupElement
  summary: This event is triggered before htmx disables an element or removes it from the DOM
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeCleanupElement`

    This event is triggered before htmx [disables](../attributes/hx-disable/index) an element or removes it from the DOM.

    ##### Details

    - `detail.elt` - the cleaned up element

    &nbsp;
- name: htmx:beforeHistorySave
  id: events/index#htmx:beforeHistorySave
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeHistorySave`

    This event is triggered when htmx handles a history restoration action

    ##### Details

    - `detail.path` - the path and query of the page being restored
    - `detail.historyElt` - the history element being restored into

    ##### Details

    - `detail.config` - the config that will be passed to the `EventSource` constructor

    &nbsp;
- name: htmx:beforeHistoryUpdate
  id: events/index#htmx:beforeHistoryUpdate
  summary: This event is triggered before a history update is performed
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeHistoryUpdate`

    This event is triggered before a history update is performed. It can be used to modify the `path` or `type` used to update the history.

    ##### Details

    - `detail.history` - the `path` and `type` (push, replace) for the history update
    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:beforeOnLoad
  id: events/index#htmx:beforeOnLoad
  summary: This event is triggered before any response processing occurs
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeOnLoad`

    This event is triggered before any response processing occurs. If the event is cancelled, no swap will occur.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:beforeProcessNode
  id: events/index#htmx:beforeProcessNode
  summary: This event is triggered before htmx initializes a DOM node and has processed all of its hx- attributes
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeProcessNode`

    This event is triggered before htmx initializes a DOM node and has processed all of its `hx-` attributes. This gives extensions and other external code the ability to modify the contents of a DOM node before it is processed.

    ##### Details

    - `detail.elt` - the element that dispatched the request

    &nbsp;
- name: htmx:beforeRequest
  id: events/index#htmx:beforeRequest
  summary: This event is triggered before an AJAX request is issued
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeRequest`

    This event is triggered before an AJAX request is issued. If the event is cancelled, no request will occur.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:beforeSend
  id: events/index#htmx:beforeSend
  summary: This event is triggered right before a request is sent
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeSend`

    This event is triggered right before a request is sent. You may not cancel the request with this event.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:beforeSwap
  id: events/index#htmx:beforeSwap
  summary: This event is triggered before any new content has been swapped into the DOM
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeSwap`

    This event is triggered before any new content has been [swapped into the DOM](../docs/index#swapping). If the event is cancelled, no swap will occur.

    You can modify the default swap behavior by modifying the `shouldSwap` and `target` properties of the event detail. See the documentation on [configuring swapping](../docs/index#modifying_swapping_behavior_with_events) for more details.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.requestConfig` - the configuration of the AJAX request
    - `detail.shouldSwap` - if the content will be swapped (defaults to `false` for non-200 response codes)
    - `detail.ignoreTitle` - if `true` any title tag in the response will be ignored
    - `detail.target` - the target of the swap

    &nbsp;
- name: htmx:beforeTransition
  id: events/index#htmx:beforeTransition
  summary: This event is triggered before a View Transition wrapped swap occurs
  belongs_to: Events
  description: |-
    ### Event - `htmx:beforeTransition`

    This event is triggered before a [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) wrapped swap occurs. If the event is cancelled, the View Transition will not occur and the normal swapping logic will happen instead.

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.requestConfig` - the configuration of the AJAX request
    - `detail.shouldSwap` - if the content will be swapped (defaults to `false` for non-200 response codes)
    - `detail.target` - the target of the swap

    &nbsp;
- name: htmx:configRequest
  id: events/index#htmx:configRequest
  summary: This event is triggered after htmx has collected parameters for inclusion in the request
  belongs_to: Events
  description: "### Event - `htmx:configRequest`\n\nThis event is triggered after htmx has collected parameters for inclusion in the request. It can be used to include or update the parameters that htmx will send:\n\n``` language-javascript\n      \n        document.body.\n        addEventListener\n        (\n        'htmx:configRequest'\n        , \n        function\n        (\n        evt\n        ) {\n\n        evt\n        .\n        detail\n        .\n        parameters\n        [\n        'auth_token'\n        ] = \n        getAuthToken\n        (); \n        // add a new parameter into the mix\n\n        });\n\n      \n    \n```\n\nNote that if an input value appears more than once the value in the `parameters` object will be an array, rather than a single value.\n\n##### Details\n\n- `detail.parameters` - the parameters that will be submitted in the request\n- `detail.unfilteredParameters` - the parameters that were found before filtering by [`hx-select`](../attributes/hx-select/index)\n- `detail.headers` - the request headers\n- `detail.elt` - the element that triggered the request\n- `detail.target` - the target of the request\n- `detail.verb` - the HTTP verb in use\n\n&nbsp;"
- name: htmx:confirm
  id: events/index#htmx:confirm
  summary: This event is triggered immediately after a trigger occurs on an element
  belongs_to: Events
  description: "### Event - `htmx:confirm`\n\nThis event is triggered immediately after a trigger occurs on an element. It allows you to cancel (or delay) issuing the AJAX request. If you call `preventDefault()` on the event, it will not issue the given request. The `detail` object contains a function, `evt.detail.issueRequest()`, that can be used to issue the actual AJAX request at a later point. Combining these two features allows you to create an asynchronous confirmation dialog.\n\nHere is an example using [sweet alert](https://sweetalert.js.org/guides/):\n\n``` language-javascript\n      \n        document.body.\n        addEventListener\n        (\n        'htmx:confirm'\n        , \n        function\n        (\n        evt\n        ) {\n\n        evt\n        .\n        preventDefault\n        ();\n\n        swal\n        ({\n\n              title: \n        \"Are you sure?\"\n        ,\n\n              text: \n        \"Are you sure you are sure?\"\n        ,\n\n              icon: \n        \"warning\"\n        ,\n\n              buttons: \n        true\n        ,\n\n              dangerMode: \n        true\n        ,\n\n            }).\n        then\n        ((\n        confirmed\n        ) \n        => \n        {\n\n        if \n        (\n        confirmed\n        ) {\n\n        evt\n        .\n        detail\n        .\n        issueRequest\n        ();\n\n              }\n\n           });\n\n        });\n\n      \n    \n```\n\n##### Details\n\n{target: target, elt: elt, path: path, verb: verb, triggeringEvent: event, etc: etc, issueRequest: issueRequest}\n\n- `detail.elt` - the element in question\n- `detail.etc` - additional request information (mostly unused)\n- `detail.issueRequest` - a no argument function that can be invoked to issue the request (should be paired with `evt.preventDefault()`!)\n- `detail.path` - the path of the request\n- `detail.target` - the target of the request\n- `detail.triggeringEvent` - the original event that triggered this request\n- `detail.verb` - the verb of the request (e.g. `GET`)\n\n&nbsp;"
- name: htmx:historyCacheError
  id: events/index#htmx:historyCacheError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:historyCacheError`

    This event is triggered when an attempt to save the cache to `localStorage` fails

    ##### Details

    - `detail.cause` - the `Exception` that was thrown when attempting to save history to `localStorage`

    &nbsp;
- name: htmx:historyCacheMiss
  id: events/index#htmx:historyCacheMiss
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:historyCacheMiss`

    This event is triggered when a cache miss occurs when restoring history

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest` that will retrieve the remote content for restoration
    - `detail.path` - the path and query of the page being restored

    &nbsp;
- name: htmx:historyCacheMissError
  id: events/index#htmx:historyCacheMissError
  summary: This event is triggered when a cache miss occurs and a response has been retrieved from the server for the content to restore, but the response is an error (e.g
  belongs_to: Events
  description: |-
    ### Event - `htmx:historyCacheMissError`

    This event is triggered when a cache miss occurs and a response has been retrieved from the server for the content to restore, but the response is an error (e.g. `404`)

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.path` - the path and query of the page being restored

    &nbsp;
- name: htmx:historyCacheMissLoad
  id: events/index#htmx:historyCacheMissLoad
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:historyCacheMissLoad`

    This event is triggered when a cache miss occurs and a response has been retrieved successfully from the server for the content to restore

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.path` - the path and query of the page being restored

    &nbsp;
- name: htmx:historyRestore
  id: events/index#htmx:historyRestore
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:historyRestore`

    This event is triggered when htmx handles a history restoration action

    ##### Details

    - `detail.path` - the path and query of the page being restored

    &nbsp;
- name: htmx:load
  id: events/index#htmx:load
  summary: This event is triggered when a new node is loaded into the DOM by htmx
  belongs_to: Events
  description: |-
    ### Event - `htmx:load`

    This event is triggered when a new node is loaded into the DOM by htmx.

    ##### Details

    - `detail.elt` - the newly added element

    &nbsp;
- name: htmx:noSSESourceError
  id: events/index#htmx:noSSESourceError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:noSSESourceError`

    This event is triggered when an element refers to an SSE event in its trigger, but no parent SSE source has been defined

    ##### Details

    - `detail.elt` - the element with the bad SSE trigger

    &nbsp;
- name: htmx:onLoadError
  id: events/index#htmx:onLoadError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:onLoadError`

    This event is triggered when an error occurs during the `load` handling of an AJAX call

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.elt` - the element that triggered the request
    - `detail.target` - the target of the request
    - `detail.exception` - the exception that occurred
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:oobAfterSwap
  id: events/index#htmx:oobAfterSwap
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:oobAfterSwap`

    This event is triggered as part of an [out of band swap](../docs/index#oob_swaps) and behaves identically to an [after swap event](index#htmx:afterSwap)

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:oobBeforeSwap
  id: events/index#htmx:oobBeforeSwap
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:oobBeforeSwap`

    This event is triggered as part of an [out of band swap](../docs/index#oob_swaps) and behaves identically to a [before swap event](index#htmx:beforeSwap)

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.requestConfig` - the configuration of the AJAX request
    - `detail.shouldSwap` - if the content will be swapped (defaults to `false` for non-200 response codes)
    - `detail.target` - the target of the swap

    &nbsp;
- name: htmx:oobErrorNoTarget
  id: events/index#htmx:oobErrorNoTarget
  summary: This event is triggered when an out of band swap does not have a corresponding element in the DOM to switch with
  belongs_to: Events
  description: |-
    ### Event - `htmx:oobErrorNoTarget`

    This event is triggered when an [out of band swap](../docs/index#oob_swaps) does not have a corresponding element in the DOM to switch with.

    ##### Details

    - `detail.content` - the element with the bad oob `id`

    &nbsp;
- name: htmx:prompt
  id: events/index#htmx:prompt
  summary: This event is triggered after a prompt has been shown to the user with the hx-prompt attribute
  belongs_to: Events
  description: |-
    ### Event - `htmx:prompt`

    This event is triggered after a prompt has been shown to the user with the [`hx-prompt`](../attributes/hx-prompt/index) attribute. If this event is cancelled, the AJAX request will not occur.

    ##### Details

    - `detail.elt` - the element that triggered the request
    - `detail.target` - the target of the request
    - `detail.prompt` - the user response to the prompt

    &nbsp;
- name: htmx:pushedIntoHistory
  id: events/index#htmx:pushedIntoHistory
  summary: This event is triggered after a URL has been pushed into history
  belongs_to: Events
  description: |-
    ### Event - `htmx:pushedIntoHistory`

    This event is triggered after a URL has been pushed into history.

    ##### Details

    - `detail.path` - the path and query of the URL that has been pushed into history

    &nbsp;
- name: htmx:replacedInHistory
  id: events/index#htmx:replacedInHistory
  summary: This event is triggered after a URL has been replaced in history
  belongs_to: Events
  description: |-
    ### Event - `htmx:replacedInHistory`

    This event is triggered after a URL has been replaced in history.

    ##### Details

    - `detail.path` - the path and query of the URL that has been replaced in history

    &nbsp;
- name: htmx:responseError
  id: events/index#htmx:responseError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:responseError`

    This event is triggered when an HTTP error response occurs

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.elt` - the element that triggered the request
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:sendError
  id: events/index#htmx:sendError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:sendError`

    This event is triggered when a network error prevents an HTTP request from occurring

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.elt` - the element that triggered the request
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:sseError
  id: events/index#htmx:sseError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:sseError`

    This event is triggered when an error occurs with an SSE source

    ##### Details

    - `detail.elt` - the element with the bad SSE source
    - `detail.error` - the error
    - `detail.source` - the SSE source

    &nbsp;
- name: htmx:swapError
  id: events/index#htmx:swapError
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:swapError`

    This event is triggered when an error occurs during the swap phase

    ##### Details

    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.elt` - the element that triggered the request
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:targetError
  id: events/index#htmx:targetError
  summary: This event is triggered when a bad selector is used for a hx-target attribute (e.g
  belongs_to: Events
  description: |-
    ### Event - `htmx:targetError`

    This event is triggered when a bad selector is used for a [`hx-target`](../attributes/hx-target/index) attribute (e.g. an element ID without a preceding `#`)

    ##### Details

    - `detail.elt` - the element that triggered the request
    - `detail.target` - the bad CSS selector

    &nbsp;
- name: htmx:timeout
  id: events/index#htmx:timeout
  summary: This event is triggered when a request timeout occurs
  belongs_to: Events
  description: |-
    ### Event - `htmx:timeout`

    This event is triggered when a request timeout occurs. This wraps the typical `timeout` event of XMLHttpRequest.

    Timeout time can be set using `htmx.config.timeout` or per element using [`hx-request`](../attributes/hx-request/index)

    ##### Details

    - `detail.elt` - the element that dispatched the request
    - `detail.xhr` - the `XMLHttpRequest`
    - `detail.target` - the target of the request
    - `detail.requestConfig` - the configuration of the AJAX request

    &nbsp;
- name: htmx:trigger
  id: events/index#htmx:trigger
  summary: This event is triggered whenever an AJAX request would be, even if no AJAX request is specified
  belongs_to: Events
  description: |-
    ### Event - `htmx:trigger`

    This event is triggered whenever an AJAX request would be, even if no AJAX request is specified. It is primarily intended to allow `hx-trigger` to execute client-side scripts; AJAX requests have more granular events available, like [`htmx:beforeRequest`](index#htmx:beforeRequest) or [`htmx:afterRequest`](index#htmx:afterRequest).

    ##### Details

    - `detail.elt` - the element that triggered the request

    &nbsp;
- name: htmx:validateUrl
  id: events/index#htmx:validateUrl
  summary: This event is triggered before a request is made, allowing you to validate the URL that htmx is going to request
  belongs_to: Events
  description: "### Event - `htmx:validateUrl`\n\nThis event is triggered before a request is made, allowing you to validate the URL that htmx is going to request. If `preventDefault()` is invoked on the event, the request will not be made.\n\n``` language-javascript\n      \n        document.body.\n        addEventListener\n        (\n        'htmx:validateUrl'\n        , \n        function \n        (\n        evt\n        ) {\n\n        // only allow requests to the current server as well as myserver.com\n\n        if \n        (!\n        evt\n        .\n        detail\n        .\n        sameHost \n        && \n        evt\n        .\n        detail\n        .\n        url\n        .hostname !== \n        \"myserver.com\"\n        ) {\n\n        evt\n        .\n        preventDefault\n        ();\n\n          }\n\n        });\n\n      \n    \n```\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n- `detail.url` - the URL Object representing the URL that a request will be sent to.\n- `detail.sameHost` - will be `true` if the request is to the same host as the document\n\n&nbsp;"
- name: htmx:validation:failed
  id: events/index#htmx:validation:failed
  summary: This event is triggered when an element fails validation
  belongs_to: Events
  description: |-
    ### Event - `htmx:validation:failed`

    This event is triggered when an element fails validation.

    ##### Details

    - `detail.elt` - the element that triggered the request
    - `detail.message` - the validation error message
    - `detail.validity` - the validity object, which contains properties specifying how validation failed

    &nbsp;
- name: htmx:validation:halted
  id: events/index#htmx:validation:halted
  summary: This event is triggered when a request is halted due to validation errors
  belongs_to: Events
  description: |-
    ### Event - `htmx:validation:halted`

    This event is triggered when a request is halted due to validation errors.

    ##### Details

    - `detail.elt` - the element that triggered the request
    - `detail.errors` - an array of error objects with the invalid elements and errors associated with them

    &nbsp;
- name: htmx:validation:validate
  id: events/index#htmx:validation:validate
  summary: This event is triggered before an element is validated
  belongs_to: Events
  description: "### Event - `htmx:validation:validate`\n\nThis event is triggered before an element is validated. It can be used with the `elt.setCustomValidity()` method to implement custom validation rules.\n\n``` language-html\n      \n        <\n        form \n        hx-post\n        =\n        \"/test\"\n        >\n\n          <\n        input \n        _\n        =\n        \"on htmx:validation:validate\n\n                       if my.value != 'foo'\n\n                          call me.setCustomValidity('Please enter the value foo')\n\n                       else\n\n                          call me.setCustomValidity('')\"\n\n        name\n        =\n        \"example\"\n        >\n\n        </\n        form\n        >\n\n      \n    \n```\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\n&nbsp;"
- name: htmx:xhr:abort
  id: events/index#htmx:xhr:abort
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:xhr:abort`

    This event is triggered when an ajax request aborts

    ##### Details

    - `detail.elt` - the element that triggered the request

    &nbsp;
- name: htmx:xhr:loadend
  id: events/index#htmx:xhr:loadend
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:xhr:loadend`

    This event is triggered when an ajax request finishes

    ##### Details

    - `detail.elt` - the element that triggered the request

    &nbsp;
- name: htmx:xhr:loadstart
  id: events/index#htmx:xhr:loadstart
  summary: null
  belongs_to: Events
  description: |-
    ### Event - `htmx:xhr:loadstart`

    This event is triggered when an ajax request starts

    ##### Details

    - `detail.elt` - the element that triggered the request

    &nbsp;
- name: htmx:xhr:progress
  id: events/index#htmx:xhr:progress
  summary: Licensed under the Zero-Clause BSD License
  belongs_to: Events
  description: "### Event - `htmx:xhr:progress`\n\nThis event is triggered periodically when an ajax request that supports progress is in flight\n\n##### Details\n\n- `detail.elt` - the element that triggered the request\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/events/](https://htmx.org/events/)"
- name: hx-boost
  id: attributes/hx-boost/index
  summary: The hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead
  description: "# `hx-boost`\n\nThe `hx-boost` attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the [nice fallback](https://en.wikipedia.org/wiki/Progressive_enhancement) that, if the user does not have javascript enabled, the site will continue to work.\n\nFor anchor tags, clicking on the anchor will issue a `GET` request to the url specified in the `href` and will push the url so that a history entry is created. The target is the `<body>` tag, and the `innerHTML` swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the `click` trigger.\n\nFor forms the request will be converted into a `GET` or `POST`, based on the method in the `method` attribute and will be triggered by a `submit`. Again, the target will be the `body` of the page, and the `innerHTML` swap will be used. The url will *not* be pushed, however, and no history entry will be created. (You can use the [hx-push-url](../hx-push-url/index) attribute if you want the url to be pushed.)\n\nHere is an example of some boosted links:\n\n``` language-html\n<div hx-boost=\"true\">\n  <a href=\"/page1\">Go To Page 1</a>\n  <a href=\"/page2\">Go To Page 2</a>\n</div>\n```\n\nThese links will issue an ajax `GET` request to the respective URLs and replace the body’s inner content with it.\n\nHere is an example of a boosted form:\n\n``` language-html\n<form hx-boost=\"true\" action=\"/example\" method=\"post\">\n    <input name=\"email\" type=\"email\" placeholder=\"Enter email...\">\n    <button>Submit</button>\n</form>\n```\n\nThis form will issue an ajax `POST` to the given URL and replace the body’s inner content with it.\n\n## Notes\n\n- `hx-boost` is inherited and can be placed on a parent element\n- Only links that are to the same domain and that are not local anchors will be boosted\n- All requests are done via AJAX, so keep that in mind when doing things like redirects\n- To find out if the request results from a boosted anchor or form, look for [`HX-Boosted`](../../reference/index#request_headers) in the request header\n- Selectively disable boost on child elements with `hx-boost=\"false\"`\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-boost/](https://htmx.org/attributes/hx-boost/)"
- name: hx-confirm
  id: attributes/hx-confirm/index
  summary: The hx-confirm attribute allows you to confirm an action before issuing a request
  description: "# `hx-confirm`\n\nThe `hx-confirm` attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\n\nHere is an example:\n\n``` language-html\n<button hx-delete=\"/account\" hx-confirm=\"Are you sure you wish to delete your account?\">\n  Delete My Account\n</button>\n```\n\n## Event details\n\nThe event triggered by `hx-confirm` contains additional properties in its `detail`:\n\n- triggeringEvent: the event that triggered the original request\n- issueRequest(skipConfirmation=false): a callback which can be used to confirm the AJAX request\n- question: the value of the `hx-confirm` attribute on the HTML element\n\n## Notes\n\n- `hx-confirm` is inherited and can be placed on a parent element\n- `hx-confirm` uses the browser’s `window.confirm` by default. You can customize this behavior as shown [in this example](https://htmx.org/examples/confirm/).\n- a boolean `skipConfirmation` can be passed to the `issueRequest` callback; if true (defaults to false), the `window.confirm` will not be called and the AJAX request is issued directly\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-confirm/](https://htmx.org/attributes/hx-confirm/)"
- name: hx-delete
  id: attributes/hx-delete/index
  summary: This example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body
  description: "# `hx-delete`\n\nThe `hx-delete` attribute will cause an element to issue a `DELETE` to the specified URL and swap the HTML into the DOM using a swap strategy:\n\n``` language-html\n<button hx-delete=\"/account\" hx-target=\"body\">\n  Delete Your Account\n</button>\n```\n\nThis example will cause the `button` to issue a `DELETE` to `/account` and swap the returned HTML into the `innerHTML` of the `body`.\n\n## Notes\n\n- `hx-delete` is not inherited\n- You can control the target of the swap using the [hx-target](../hx-target/index) attribute\n- You can control the swap strategy by using the [hx-swap](../hx-swap/index) attribute\n- You can control what event triggers the request with the [hx-trigger](../hx-trigger/index) attribute\n- You can control the data submitted with the request in various ways, documented here: [Parameters](../../docs/index#parameters)\n- To remove the element following a successful `DELETE`, return a `200` status code with an empty body; if the server responds with a `204`, no swap takes place, documented here: [Requests & Responses](../../docs/index#requests)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-delete/](https://htmx.org/attributes/hx-delete/)"
- name: hx-disable
  id: attributes/hx-disable/index
  summary: The hx-disable attribute will disable htmx processing for a given element and all its children
  description: "# `hx-disable`\n\nThe `hx-disable` attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\n\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\n\n## Notes\n\n- `hx-disable` is inherited\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-disable/](https://htmx.org/attributes/hx-disable/)"
- name: hx-disabled-elt
  id: attributes/hx-disabled-elt/index
  summary: The hx-disabled-elt attribute allows you to specify elements that will have the disabled attribute added to them for the duration of the request
  description: "# `hx-disabled-elt`\n\nThe `hx-disabled-elt` attribute allows you to specify elements that will have the `disabled` attribute added to them for the duration of the request.\n\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword [`closest`](https://developer.mozilla.org/docs/Web/API/Element/closest), followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. `closest tr`), or the keyword `this`\n\nHere is an example with a button that will disable itself during a request:\n\n``` language-html\n<button hx-post=\"/example\" hx-disabled-elt=\"this\">\n    Post It!\n</button>\n```\n\nWhen a request is in flight, this will cause the button to be marked with [the `disabled` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled), which will prevent further clicks from occurring.\n\n## Notes\n\n- `hx-disable-elt` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-disabled-elt/](https://htmx.org/attributes/hx-disabled-elt/)"
- name: hx-disinherit
  id: attributes/hx-disinherit/index
  summary: 'The default behavior for htmx is to “inherit” many attributes automatically: that is, an attribute such as hx-target may be placed on a parent element, and all child elements will inherit that target'
  description: "# `hx-disinherit`\n\nThe default behavior for htmx is to “inherit” many attributes automatically: that is, an attribute such as [hx-target](../hx-target/index) may be placed on a parent element, and all child elements will inherit that target.\n\nThe `hx-disinherit` attribute allows you to control this automatic attribute inheritance. An example scenario is to allow you to place an `hx-boost` on the `body` element of a page, but overriding that behavior in a specific part of the page to allow for more specific behaviors.\n\nhtmx evaluates attribute inheritance as follows:\n\n- when `hx-disinherit` is set on a parent node\n  - `hx-disinherit=\"*\"` all attribute inheritance for this element will be disabled\n  - `hx-disinherit=\"hx-select hx-get hx-target\"` disable inheritance for only one or multiple specified attributes\n\n``` language-html\n<div hx-boost=\"true\" hx-select=\"#content\" hx-target=\"#content\" hx-disinherit=\"*\">\n  <a href=\"/page1\">Go To Page 1</a> <!-- boosted with the attribute settings above -->\n  <a href=\"/page2\" hx-boost=\"unset\">Go To Page 1</a> <!-- not boosted -->\n  <button hx-get=\"/test\" hx-target=\"this\"></button> <!-- hx-select is not inherited -->\n</div>\n```\n\n``` language-html\n<div hx-boost=\"true\" hx-select=\"#content\" hx-target=\"#content\" hx-disinherit=\"hx-target\">\n<!-- hx-select is automatically set to parent's value; hx-target is not inherited -->\n  <button hx-get=\"/test\"></button>\n</div>\n```\n\n``` language-html\n<div hx-select=\"#content\">\n  <div hx-boost=\"true\" hx-target=\"#content\" hx-disinherit=\"hx-select\">\n<!-- hx-target is automatically inherited from parent's value -->\n<!-- hx-select is not inherited, because the direct parent does\n    disables inheritance, despite not specifying hx-select itself -->\n    <button hx-get=\"/test\"></button>\n  </div>\n</div>\n```\n\n## Notes\n\n- Read more about [Attribute Inheritance](../../docs/index#inheritance)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-disinherit/](https://htmx.org/attributes/hx-disinherit/)"
- name: hx-encoding
  id: attributes/hx-encoding/index
  summary: The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request
  description: "# `hx-encoding`\n\nThe `hx-encoding` attribute allows you to switch the request encoding from the usual `application/x-www-form-urlencoded` encoding to `multipart/form-data`, usually to support file uploads in an ajax request.\n\nThe value of this attribute should be `multipart/form-data`.\n\nThe `hx-encoding` tag may be placed on parent elements.\n\n## Notes\n\n- `hx-encoding` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-encoding/](https://htmx.org/attributes/hx-encoding/)"
- name: hx-ext
  id: attributes/hx-ext/index
  summary: The hx-ext attribute enables an htmx extension for an element and all its children
  description: "# `hx-ext`\n\nThe `hx-ext` attribute enables an htmx [extension](../../extensions/index) for an element and all its children.\n\nThe value can be a single extension name or a comma separated list of extensions to apply.\n\nThe `hx-ext` tag may be placed on parent elements if you want a plugin to apply to an entire swath of the DOM, and on the `body` tag for it to apply to all htmx requests.\n\n## Notes\n\n- `hx-ext` is both inherited and merged with parent elements, so you can specify extensions on any element in the DOM hierarchy and it will apply to all child elements.\n\n- You can ignore an extension that is defined by a parent node using `hx-ext=\"ignore:extensionName\"`\n\n``` language-html\n<div hx-ext=\"example\">\n  \"Example\" extension is used in this part of the tree...\n  <div hx-ext=\"ignore:example\">\n    ... but it will not be used in this part.\n  </div>\n</div>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-ext/](https://htmx.org/attributes/hx-ext/)"
- name: hx-get
  id: attributes/hx-get/index
  summary: This example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div
  description: "# `hx-get`\n\nThe `hx-get` attribute will cause an element to issue a `GET` to the specified URL and swap the HTML into the DOM using a swap strategy:\n\n``` language-html\n  <div hx-get=\"/example\">Get Some HTML</div>\n```\n\nThis example will cause the `div` to issue a `GET` to `/example` and swap the returned HTML into the `innerHTML` of the `div`.\n\n### Notes\n\n- `hx-get` is not inherited\n- By default `hx-get` does not include any parameters. You can use the [hx-params](../hx-params/index) attribute to change this\n- You can control the target of the swap using the [hx-target](../hx-target/index) attribute\n- You can control the swap strategy by using the [hx-swap](../hx-swap/index) attribute\n- You can control what event triggers the request with the [hx-trigger](../hx-trigger/index) attribute\n- You can control the data submitted with the request in various ways, documented here: [Parameters](../../docs/index#parameters)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-get/](https://htmx.org/attributes/hx-get/)"
- name: hx-headers
  id: attributes/hx-headers/index
  summary: The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request
  description: "# `hx-headers`\n\nThe `hx-headers` attribute allows you to add to the headers that will be submitted with an AJAX request.\n\nBy default, the value of this attribute is a list of name-expression values in [JSON (JavaScript Object Notation)](https://www.json.org/json-en.html) format.\n\nIf you wish for `hx-headers` to *evaluate* the values given, you can prefix the values with `javascript:` or `js:`.\n\n``` language-html\n  <div hx-get=\"/example\" hx-headers='{\"myHeader\": \"My Value\"}'>Get Some HTML, Including A Custom Header in the Request</div>\n```\n\n## Security Considerations\n\n- By default, the value of `hx-headers` must be valid [JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON). It is **not** dynamically computed. If you use the `javascript:` prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a [Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) vulnerability.\n\n## Notes\n\n- `hx-headers` is inherited and can be placed on a parent element.\n- A child declaration of a header overrides a parent declaration.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-headers/](https://htmx.org/attributes/hx-headers/)"
- name: hx-history
  id: attributes/hx-history/index
  summary: Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state
  description: "# `hx-history`\n\nSet the `hx-history` attribute to `false` on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\n\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\n\nHere is an example:\n\n``` language-html\n<html>\n<body>\n<div hx-history=\"false\">\n ...\n</div>\n</body>\n</html>\n```\n\n## Notes\n\n- `hx-history=\"false\"` can be present *anywhere* in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot [hx-history-elt](../hx-history-elt/index)).\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-history/](https://htmx.org/attributes/hx-history/)"
- name: hx-history-elt
  id: attributes/hx-history-elt/index
  summary: The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation
  description: "# `hx-history-elt`\n\nThe `hx-history-elt` attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the `body` tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\n\nHere is an example:\n\n``` language-html\n<html>\n<body>\n<div id=\"content\" hx-history-elt>\n ...\n</div>\n</body>\n</html>\n```\n\n## Notes\n\n- `hx-history-elt` is not inherited\n- In most cases we don’t recommend narrowing the history snapshot\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-history-elt/](https://htmx.org/attributes/hx-history-elt/)"
- name: hx-include
  id: attributes/hx-include/index
  summary: The hx-include attribute allows you to include additional element values in an AJAX request
  description: "# `hx-include`\n\nThe `hx-include` attribute allows you to include additional element values in an AJAX request. The value of this attribute can be:\n\n- A CSS query selector of the elements to include.\n- `this` which will include the descendants of the element.\n- `closest <CSS selector>` which will find the [closest](https://developer.mozilla.org/docs/Web/API/Element/closest) ancestor element or itself, that matches the given CSS selector (e.g. `closest tr` will target the closest table row to the element).\n- `find <CSS selector>` which will find the first child descendant element that matches the given CSS selector.\n- `next <CSS selector>` which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. `next .error` will target the closest following sibling element with `error` class)\n- `previous <CSS selector>` which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g `previous .error` will target the closest previous sibling with `error` class)\n\nHere is an example that includes a separate input value:\n\n``` language-html\n<div>\n    <button hx-post=\"/register\" hx-include=\"[name='email']\">\n        Register!\n    </button>\n    Enter email: <input name=\"email\" type=\"email\"/>\n</div>\n```\n\nThis is a little contrived as you would typically enclose both of these elements in a `form` and submit the value automatically, but it demonstrates the concept.\n\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\n\n## Notes\n\n- `hx-include` is inherited and can be placed on a parent element\n\n- While `hx-include` is inherited, it is evaluated from the element triggering the request. It is easy to get confused when working with the extended selectors such as `find` and `closest`.\n\n  ``` language-html\n  <div hx-include=\"find input\">\n      <button hx-post=\"/register\">\n          Register!\n      </button>\n      Enter email: <input name=\"email\" type=\"email\"/>\n  </div>\n  ```\n\n  In the above example, when clicking on the button, the `find input` selector is resolved from the button itself, which does not return any element here, since the button doesn’t have any `input` child, thus in this case, raises an error.\n\n- A standard CSS selector resolves to [document.querySelectorAll](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll) and will include multiple elements, while the extended selectors such as `find` or `next` only return a single element at most to include\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-include/](https://htmx.org/attributes/hx-include/)"
- name: hx-indicator
  id: attributes/hx-indicator/index
  summary: The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request
  description: "# `hx-indicator`\n\nThe `hx-indicator` attribute allows you to specify the element that will have the `htmx-request` class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\n\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword [`closest`](https://developer.mozilla.org/docs/Web/API/Element/closest), followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. `closest tr`);\n\nHere is an example with a spinner adjacent to the button:\n\n``` language-html\n<div>\n    <button hx-post=\"/example\" hx-indicator=\"#spinner\">\n        Post It!\n    </button>\n    <img  id=\"spinner\" class=\"htmx-indicator\" src=\"/img/bars.svg\"/>\n</div>\n```\n\nWhen a request is in flight, this will cause the `htmx-request` class to be added to the `#spinner` image. The image also has the `htmx-indicator` class on it, which defines an opacity transition that will show the spinner:\n\n``` language-css\n.htmx-indicator{\n        opacity:0;\n        transition: opacity 500ms ease-in;\n    }\n.htmx-request .htmx-indicator{\n        opacity:1\n    }\n.htmx-request.htmx-indicator{\n        opacity:1\n    }\n```\n\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses `display` rather than opacity (Note that we use `my-indicator` instead of `htmx-indicator`):\n\n``` language-css\n.my-indicator{\n        display:none;\n    }\n.htmx-request .my-indicator{\n        display:inline;\n    }\n.htmx-request.my-indicator{\n        display:inline;\n    }\n```\n\nNote that the target of the `hx-indicator` selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\n\nFinally, note that the `htmx-request` class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the `hx-indicator` attribute:\n\n``` language-html\n<button hx-post=\"/example\">\n    Post It!\n   <img  class=\"htmx-indicator\" src=\"/img/bars.svg\"/>\n</button>\n```\n\n## Demo\n\nThis simulates what a spinner might look like in that situation:\n\n## Notes\n\n- `hx-indicator` is inherited and can be placed on a parent element\n- In the absence of an explicit indicator, the `htmx-request` class will be added to the element triggering the request\n- If you want to use your own CSS but still use `htmx-indicator` as class name, then you need to disable `includeIndicatorStyles`. See [Configuring htmx](../../docs/index#config). The easiest way is to add this the `<head>` of your HTML:\n\n``` language-html\n<meta name=\"htmx-config\" content='{\"includeIndicatorStyles\": false}'>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-indicator/](https://htmx.org/attributes/hx-indicator/)"
- name: HX-Location Response Header
  id: headers/hx-location/index
  summary: This response header can be used to trigger a client side redirection without reloading the whole page
  description: "# HX-Location Response Header\n\nThis response header can be used to trigger a client side redirection without reloading the whole page. Instead of changing the page’s location it will act like following a [`hx-boost` link](../../attributes/hx-boost/index), creating a new history entry, issuing an ajax request to the value of the header and pushing the path into history.\n\nA sample response would be:\n\n``` language-html\nHX-Location: /test\n```\n\nWhich would push the client to test as if the user had clicked on `<a href=\"/test\" hx-boost=\"true\">`\n\nIf you want to redirect to a specific target on the page rather than the default of document.body, you can pass more details along with the event, by using JSON for the value of the header:\n\n``` language-html\nHX-Location: {\"path\":\"/test2\", \"target\":\"#testdiv\"}\n```\n\nPath is required and is url to load the response from. The rest of the data mirrors the [`ajax` api](../../api/index#ajax) context, which is:\n\n- `source` - the source element of the request\n- `event` - an event that “triggered” the request\n- `handler` - a callback that will handle the response HTML\n- `target` - the target to swap the response into\n- `swap` - how the response will be swapped in relative to the target\n- `values` - values to submit with the request\n- `headers` - headers to submit with the request\n- `select` - allows you to select the content you want swapped from a response\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/headers/hx-location/](https://htmx.org/headers/hx-location/)"
- name: hx-on
  id: attributes/hx-on/index
  summary: The hx-on* attributes allow you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick
  description: "# `hx-on`\n\nThe `hx-on*` attributes allow you to embed scripts inline to respond to events directly on an element; similar to the [`onevent` properties](https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers#using_onevent_properties) found in HTML, such as `onClick`.\n\nThe `hx-on*` attributes improve upon `onevent` by enabling the handling of any arbitrary JavaScript event, for enhanced [Locality of Behaviour (LoB)](https://htmx.org/essays/locality-of-behaviour/) even when dealing with non-standard DOM events. For example, these attributes allow you to handle [htmx events](../../reference/index#events).\n\nThere are two forms of `hx-on` attributes:\n\n- In the primary form, you specify the event name as part of the attribute name, after a colon. So, for example, if you want to respond to a `click` event, you would use the attribute `hx-on:click`.\n\n- The second, deprecated form, uses the `hx-on` attribute directly. This latter form should only be used if IE11 support is required, and will be removed in htmx 2.0\n\n### hx-on:\\* (recommended)\n\nIn this form, the event name follows a colon `:` in the attribute, and the attribute value is the script to be executed:\n\n``` language-html\n<div hx-on:click=\"alert('Clicked!')\">Click</div>\n```\n\nNote that, in addition to the standard DOM events, all htmx and other custom events can be captured, too!\n\nOne gotcha to note is that DOM attributes do not preserve case. This means, unfortunately, an attribute like `hx-on:htmx:beforeRequest` **will not work**, because the DOM lowercases the attribute names. Fortunately, htmx supports both camel case event names and also [kebab-case event names](../../docs/index#events), so you can use `hx-on:htmx:before-request` instead.\n\nIn order to make writing htmx-based event handlers a little easier, you can use the shorthand double-colon `hx-on::` for htmx events, and omit the “htmx” part:\n\n``` language-html\n<!-- These two are equivalent -->\n<button hx-get=\"/info\" hx-on:htmx:before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n<button hx-get=\"/info\" hx-on::before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n```\n\nIf you wish to handle multiple different events, you can simply add multiple attributes to an element:\n\n``` language-html\n<button hx-get=\"/info\"\nhx-on::before-request=\"alert('Making a request!')\"\nhx-on::after-request=\"alert('Done making a request!')\">\n    Get Info!\n</button>\n```\n\nFinally, in order to make this feature compatible with some templating languages (e.g. [JSX](https://react.dev/learn/writing-markup-with-jsx)) that do not like having a colon (`:`) in HTML attributes, you may use dashes in the place of colons for both the long form and the shorthand form:\n\n``` language-html\n<!-- These two are equivalent -->\n<button hx-get=\"/info\" hx-on-htmx-before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n<button hx-get=\"/info\" hx-on--before-request=\"alert('Making a request!')\">\n    Get Info!\n</button>\n```\n\n### hx-on (deprecated)\n\nThe value is an event name, followed by a colon `:`, followed by the script:\n\n``` language-html\n<button hx-get=\"/info\" hx-on=\"htmx:beforeRequest: alert('Making a request!')\">\n    Get Info!\n</button>\n```\n\nMultiple handlers can be defined by putting them on new lines:\n\n``` language-html\n<button hx-get=\"/info\" hx-on=\"htmx:beforeRequest: alert('Making a request!')\n                              htmx:afterRequest: alert('Done making a request!')\">\n    Get Info!\n</button>\n```\n\n### Symbols\n\nLike `onevent`, two symbols are made available to event handler scripts:\n\n- `this` - The element on which the `hx-on` attribute is defined\n- `event` - The event that triggered the handler\n\n### Notes\n\n- `hx-on` is *not* inherited, however due to [event bubbling](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture), `hx-on` attributes on parent elements will typically be triggered by events on child elements\n- `hx-on:*` and `hx-on` cannot be used together on the same element; if `hx-on:*` is present, the value of an `hx-on` attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-on/](https://htmx.org/attributes/hx-on/)"
- name: hx-on*
  id: docs/index#the-hx-on-attributes
  summary: This feature allows scripting logic to be co-located with the HTML elements the logic applies to, giving good Locality of Behaviour (LoB)
  belongs_to: Documentation
  description: "### [The `hx-on*` Attributes](index#hx-on)\n\nHTML allows the embedding of inline scripts via the [`onevent` properties](https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers#using_onevent_properties), such as `onClick`:\n\n``` language-html\n          \n            <\n            button \n            onclick\n            =\n            \"\n            alert\n            (\n            'You clicked me!'\n            )\n            \"\n            >\n\n                Click Me!\n\n            </\n            button\n            >\n\n          \n        \n```\n\nThis feature allows scripting logic to be co-located with the HTML elements the logic applies to, giving good [Locality of Behaviour (LoB)](https://htmx.org/essays/locality-of-behaviour). Unfortunately, HTML only allows `on*` attributes for a fixed number of [specific DOM events](https://www.w3schools.com/tags/ref_eventattributes.asp) (e.g. `onclick`) and doesn’t provide a generalized mechanism for responding to arbitrary events on elements.\n\nIn order to address this shortcoming, htmx offers [`hx-on*`](../attributes/hx-on/index) attributes. These attributes allow you to respond to any event in a manner that preserves the LoB of the standard `on*` properties.\n\nIf we wanted to respond to the `click` event using an `hx-on` attribute, we would write this:\n\n``` language-html\n          \n            <\n            button \n            hx-on:click\n            =\n            \"alert('You clicked me!')\"\n            >\n\n                Click Me!\n\n            </\n            button\n            >\n\n          \n        \n```\n\nSo, the string `hx-on`, followed by a colon (or a dash), then by the name of the event.\n\nFor a `click` event, of course, we would recommend sticking with the standard `onclick` attribute. However, consider an htmx-powered button that wishes to add a parameter to a request using the `htmx:config-request` event. This would not be possible using a standard `on*` property, but it can be done using the `hx-on:htmx:config-request` attribute:\n\n``` language-html\n          \n            <\n            button \n            hx-post\n            =\n            \"/example\"\n\n            hx-on:htmx:config-request\n            =\n            \"event.detail.parameters.example = 'Hello Scripting!'\"\n            >\n\n                Post Me!\n\n            </\n            button\n            >\n\n          \n        \n```\n\nHere the `example` parameter is added to the `POST` request before it is issued, with the value ‘Hello Scripting!’.\n\nThe `hx-on*` attributes are a very simple mechanism for generalized embedded scripting. It is *not* a replacement for more fully developed front-end scripting solutions such as AlpineJS or hyperscript. It can, however, augment a VanillaJS-based approach to scripting in your htmx-powered application.\n\nNote that HTML attributes are *case insensitive*. This means that, unfortunately, events that rely on capitalization/ camel casing, cannot be responded to. If you need to support camel case events we recommend using a more fully functional scripting solution such as AlpineJS or hyperscript. htmx dispatches all its events in both camelCase and in kebab-case for this very reason.\n\n### 3rd Party Javascript\n\nHtmx integrates fairly well with third party libraries. If the library fires events on the DOM, you can use those events to trigger requests from htmx.\n\nA good example of this is the [SortableJS demo](https://htmx.org/examples/sortable/):\n\n``` language-html\n          \n            <\n            form \n            class\n            =\n            \"sortable\" \n            hx-post\n            =\n            \"/items\" \n            hx-trigger\n            =\n            \"end\"\n            >\n\n                <\n            div \n            class\n            =\n            \"htmx-indicator\"\n            >Updating...</\n            div\n            >\n\n                <\n            div\n            ><\n            input \n            type\n            =\n            'hidden' \n            name\n            =\n            'item' \n            value\n            =\n            '1'\n            />Item 1</\n            div\n            >\n\n                <\n            div\n            ><\n            input \n            type\n            =\n            'hidden' \n            name\n            =\n            'item' \n            value\n            =\n            '2'\n            />Item 2</\n            div\n            >\n\n                <\n            div\n            ><\n            input \n            type\n            =\n            'hidden' \n            name\n            =\n            'item' \n            value\n            =\n            '2'\n            />Item 3</\n            div\n            >\n\n            </\n            form\n            >\n\n          \n        \n```\n\nWith Sortable, as with most javascript libraries, you need to initialize content at some point.\n\nIn jquery you might do this like so:\n\n``` language-javascript\n          \n            $\n            (document).\n            ready\n            (\n            function\n            () {\n\n            var \n            sortables \n            = document.body.\n            querySelectorAll\n            (\n            \".sortable\"\n            );\n\n            for \n            (\n            var \n            i \n            = \n            0\n            ; \n            i \n            < \n            sortables\n            .length; \n            i\n            ++) {\n\n            var \n            sortable \n            = \n            sortables\n            [\n            i\n            ];\n\n                    new Sortable(\n            sortable\n            , {\n\n                        animation: \n            150\n            ,\n\n                        ghostClass: \n            'blue-background-class'\n\n                    });\n\n                }\n\n            });\n\n          \n        \n```\n\nIn htmx, you would instead use the `htmx.onLoad` function, and you would select only from the newly loaded content, rather than the entire document:\n\n``` language-js\n          \n            htmx\n            .\n            onLoad\n            (\n            function\n            (\n            content\n            ) {\n\n            var \n            sortables \n            = \n            content\n            .\n            querySelectorAll\n            (\n            \".sortable\"\n            );\n\n            for \n            (\n            var \n            i \n            = \n            0\n            ; \n            i \n            < \n            sortables\n            .length; \n            i\n            ++) {\n\n            var \n            sortable \n            = \n            sortables\n            [\n            i\n            ];\n\n                    new Sortable(\n            sortable\n            , {\n\n                        animation: \n            150\n            ,\n\n                        ghostClass: \n            'blue-background-class'\n\n                    });\n\n                }\n\n            })\n\n          \n        \n```\n\nThis will ensure that as new content is added to the DOM by htmx, sortable elements are properly initialized.\n\nIf javascript adds content to the DOM that has htmx attributes on it, you need to make sure that this content is initialized with the `htmx.process()` function.\n\nFor example, if you were to fetch some data and put it into a div using the `fetch` API, and that HTML had htmx attributes in it, you would need to add a call to `htmx.process()` like this:\n\n``` language-js\n          \n            let \n            myDiv \n            = document.\n            getElementById\n            (\n            'my-div'\n            )\n\n            fetch\n            (\n            'http://example.com/movies.json'\n            )\n\n                .\n            then\n            (\n            response \n            => \n            response\n            .\n            text\n            ())\n\n                .\n            then\n            (\n            data \n            => \n            { \n            myDiv\n            .\n            innerHTML \n            = \n            data\n            ; \n            htmx\n            .\n            process\n            (\n            myDiv\n            ); } );\n\n          \n        \n```\n\nSome 3rd party libraries create content from HTML template elements. For instance, Alpine JS uses the `x-if` attribute on templates to add content conditionally. Such templates are not initially part of the DOM and, if they contain htmx attributes, will need a call to `htmx.process()` after they are loaded. The following example uses Alpine’s `$watch` function to look for a change of value that would trigger conditional content:\n\n``` language-html\n          \n            <\n            div \n            x-data\n            =\n            \"{show_new: false}\"\n\n            x-init\n            =\n            \"$watch('show_new', value => {\n\n                    if (show_new) {\n\n                        htmx.process(document.querySelector('#new_content'))\n\n                    }\n\n                })\"\n            >\n\n                <\n            button \n            @click \n            = \n            \"show_new = !show_new\"\n            >Toggle New Content</\n            button\n            >\n\n                <\n            template \n            x-if\n            =\n            \"show_new\"\n            >\n\n                    <\n            div \n            id\n            =\n            \"new_content\"\n            >\n\n                        <\n            a \n            hx-get\n            =\n            \"/server/newstuff\" \n            href\n            =\n            \"#\"\n            >New Clickable</\n            a\n            >\n\n                    </\n            div\n            >\n\n                </\n            template\n            >\n\n            </\n            div\n            >\n\n          \n        \n```\n\n## Caching\n\nhtmx works with standard [HTTP caching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching) mechanisms out of the box.\n\nIf your server adds the [`Last-Modified`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified) HTTP response header to the response for a given URL, the browser will automatically add the [`If-Modified-Since`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since) request HTTP header to the next requests to the same URL. Be mindful that if your server can render different content for the same URL depending on some other headers, you need to use the [`Vary`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#vary) response HTTP header. For example, if your server renders the full HTML when the `HX-Request` header is missing or `false`, and it renders a fragment of that HTML when `HX-Request: true`, you need to add `Vary: HX-Request`. That causes the cache to be keyed based on a composite of the response URL and the `HX-Request` request header — rather than being based just on the response URL.\n\nIf you are unable (or unwilling) to use the `Vary` header, you can alternatively set the configuration parameter `getCacheBusterParam` to `true`. If this configuration variable is set, htmx will include a cache-busting parameter in `GET` requests that it makes, which will prevent browsers from caching htmx-based and non-htmx based responses in the same cache slot.\n\nhtmx also works with [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) as expected. Be mindful that if your server can render different content for the same URL (for example, depending on the value of the `HX-Request` header), the server needs to generate a different `ETag` for each content.\n\n## Security\n\nhtmx allows you to define logic directly in your DOM. This has a number of advantages, the largest being [Locality of Behavior](https://htmx.org/essays/locality-of-behaviour/), which makes your system easier to understand and maintain.\n\nA concern with this approach, however, is security: since htmx increases the expressiveness of HTML, if a malicious user is able to inject HTML into your application, they can leverage this expressiveness of htmx to malicious ends.\n\n### Rule 1: Escape All User Content\n\nThe first rule of HTML-based web development has always been: *do not trust input from the user*. You should escape all 3rd party, untrusted content that is injected into your site. This is to prevent, among other issues, [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting).\n\nThere is extensive documentation on XSS and how to prevent it on the excellent [OWASP Website](https://owasp.org/www-community/attacks/xss/), including a [Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n\nThe good news is that this is a very old and well understood topic, and the vast majority of server-side templating languages support [automatic escaping](https://docs.djangoproject.com/en/4.2/ref/templates/language/#automatic-html-escaping) of content to prevent just such an issue.\n\nThat being said, there are times people choose to inject HTML more dangerously, often via some sort of `raw()` mechanism in their templating language. This can be done for good reasons, but if the content being injected is coming from a 3rd party then it *must* be scrubbed, including removing attributes starting with `hx-` and `data-hx`, as well as inline `<script>` tags, etc.\n\nIf you are injecting raw HTML and doing your own escaping, a best practice is to *whitelist* the attributes and tags you allow, rather than to blacklist the ones you disallow.\n\n### htmx Security Tools\n\nOf course, bugs happen and developers are not perfect, so it is good to have a layered approach to security for your web application, and htmx provides tools to help secure your application as well.\n\nLet’s take a look at them.\n\n#### `hx-disable`\n\nThe first tool htmx provides to help further secure your application is the [`hx-disable`](../attributes/hx-disable/index) attribute. This attribute will prevent processing of all htmx attributes on a given element, and on all elements within it. So, for example, if you were including raw HTML content in a template (again, this is not recommended!) then you could place a div around the content with the `hx-disable` attribute on it:\n\n``` language-html\n          \n            <\n            div \n            hx-disable\n            >\n\n                <%= raw(user_content) %>\n\n            </\n            div\n            >\n\n          \n        \n```\n\nAnd htmx will not process any htmx-related attributes or features found in that content. This attribute cannot be disabled by injecting further content: if an `hx-disable` attribute is found anywhere in the parent hierarchy of an element, it will not be processed by htmx.\n\n#### `hx-history`\n\nAnother security consideration is htmx history cache. You may have pages that have sensitive data that you do not want stored in the users `localStorage` cache. You can omit a given page from the history cache by including the [`hx-history`](../attributes/hx-history/index) attribute anywhere on the page, and setting its value to `false`.\n\n#### Configuration Options\n\nhtmx also provides configuration options related to security:\n\n- `htmx.config.selfRequestsOnly` - if set to `true`, only requests to the same domain as the current document will be allowed\n- `htmx.config.allowScriptTags` - htmx will process `<script>` tags found in new content it loads. If you wish to disable this behavior you can set this configuration variable to `false`\n- `htmx.config.historyCacheSize` - can be set to `0` to avoid storing any HTML in the `localStorage` cache\n- `htmx.config.allowEval` - can be set to `false` to disable all features of htmx that rely on eval:\n  - event filters\n  - `hx-on:` attributes\n  - `hx-vals` with the `js:` prefix\n  - `hx-headers` with the `js:` prefix\n\nNote that all features removed by disabling `eval()` can be reimplemented using your own custom javascript and the htmx event model.\n\n#### Events\n\nIf you want to allow requests to some domains beyond the current host, but not leave things totally open, you can use the `htmx:validateUrl` event. This event will have the request URL available in the `detail.url` slot, as well as a `sameHost` property.\n\nYou can inspect these values and, if the request is not valid, invoke `preventDefault()` on the event to prevent the request from being issued.\n\n``` language-javascript\n          \n            document.body.\n            addEventListener\n            (\n            'htmx:validateUrl'\n            , \n            function \n            (\n            evt\n            ) {\n\n            // only allow requests to the current server as well as myserver.com\n\n            if \n            (!\n            evt\n            .\n            detail\n            .\n            sameHost \n            && \n            evt\n            .\n            detail\n            .\n            url\n            .hostname !== \n            \"myserver.com\"\n            ) {\n\n            evt\n            .\n            preventDefault\n            ();\n\n              }\n\n            });\n\n          \n        \n```\n\n### CSP Options\n\nBrowsers also provide tools for further securing your web application. The most powerful tool available is a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP). Using a CSP you can tell the browser to, for example, not issue requests to non-origin hosts, to not evaluate inline script tags, etc.\n\nHere is an example CSP in a `meta` tag:\n\n``` language-html\n          \n                <\n            meta \n            http-equiv\n            =\n            \"Content-Security-Policy\" \n            content\n            =\n            \"default-src 'self';\"\n            >\n\n          \n        \n```\n\nThis tells the browser “Only allow connections to the original (source) domain”. This would be redundant with the `htmx.config.selfRequestsOnly`, but a layered approach to security is warranted and, in fact, ideal, when dealing with application security.\n\nA full discussion of CSPs is beyond the scope of this document, but the [MDN Article](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) provide a good jumping off point for exploring this topic.\n\n## Configuring htmx\n\nHtmx has some configuration options that can be accessed either programmatically or declaratively. They are listed below:\n\n| Config Variable                       | Info                                                                                                                                                                                                                                                                                                                                              |\n|---------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `htmx.config.historyEnabled`          | defaults to `true`, really only useful for testing                                                                                                                                                                                                                                                                                                |\n| `htmx.config.historyCacheSize`        | defaults to 10                                                                                                                                                                                                                                                                                                                                    |\n| `htmx.config.refreshOnHistoryMiss`    | defaults to `false`, if set to `true` htmx will issue a full page refresh on history misses rather than use an AJAX request                                                                                                                                                                                                                       |\n| `htmx.config.defaultSwapStyle`        | defaults to `innerHTML`                                                                                                                                                                                                                                                                                                                           |\n| `htmx.config.defaultSwapDelay`        | defaults to 0                                                                                                                                                                                                                                                                                                                                     |\n| `htmx.config.defaultSettleDelay`      | defaults to 20                                                                                                                                                                                                                                                                                                                                    |\n| `htmx.config.includeIndicatorStyles`  | defaults to `true` (determines if the indicator styles are loaded)                                                                                                                                                                                                                                                                                |\n| `htmx.config.indicatorClass`          | defaults to `htmx-indicator`                                                                                                                                                                                                                                                                                                                      |\n| `htmx.config.requestClass`            | defaults to `htmx-request`                                                                                                                                                                                                                                                                                                                        |\n| `htmx.config.addedClass`              | defaults to `htmx-added`                                                                                                                                                                                                                                                                                                                          |\n| `htmx.config.settlingClass`           | defaults to `htmx-settling`                                                                                                                                                                                                                                                                                                                       |\n| `htmx.config.swappingClass`           | defaults to `htmx-swapping`                                                                                                                                                                                                                                                                                                                       |\n| `htmx.config.allowEval`               | defaults to `true`, can be used to disable htmx’s use of eval for certain features (e.g. trigger filters)                                                                                                                                                                                                                                         |\n| `htmx.config.allowScriptTags`         | defaults to `true`, determines if htmx will process script tags found in new content                                                                                                                                                                                                                                                              |\n| `htmx.config.inlineScriptNonce`       | defaults to `''`, meaning that no nonce will be added to inline scripts                                                                                                                                                                                                                                                                           |\n| `htmx.config.useTemplateFragments`    | defaults to `false`, HTML template tags for parsing content from the server (not IE11 compatible!)                                                                                                                                                                                                                                                |\n| `htmx.config.wsReconnectDelay`        | defaults to `full-jitter`                                                                                                                                                                                                                                                                                                                         |\n| `htmx.config.disableSelector`         | defaults to `[disable-htmx], [data-disable-htmx]`, htmx will not process elements with this attribute on it or a parent                                                                                                                                                                                                                           |\n| `htmx.config.timeout`                 | defaults to 0 in milliseconds                                                                                                                                                                                                                                                                                                                     |\n| `htmx.config.defaultFocusScroll`      | if the focused element should be scrolled into view, defaults to false and can be overridden using the [focus-scroll](../attributes/hx-swap/index#focus-scroll) swap modifier.                                                                                                                                                                    |\n| `htmx.config.getCacheBusterParam`     | defaults to false, if set to true htmx will include a cache-busting parameter in `GET` requests to avoid caching partial responses by the browser                                                                                                                                                                                                 |\n| `htmx.config.globalViewTransitions`   | if set to `true`, htmx will use the [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) API when swapping in new content.                                                                                                                                                                                    |\n| `htmx.config.methodsThatUseUrlParams` | defaults to `[\"get\"]`, htmx will format requests with this method by encoding their parameters in the URL, not the request body                                                                                                                                                                                                                   |\n| `htmx.config.selfRequestsOnly`        | defaults to `false`, if set to `true` will only allow AJAX requests to the same domain as the current document                                                                                                                                                                                                                                    |\n| `htmx.config.ignoreTitle`             | defaults to `false`, if set to `true` htmx will not update the title of the document when a `title` tag is found in new content                                                                                                                                                                                                                   |\n| `htmx.config.triggerSpecsCache`       | defaults to `null`, the cache to store evaluated trigger specifications into, improving parsing performance at the cost of more memory usage. You may define a simple object to use a never-clearing cache, or implement your own system using a [proxy object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n\nYou can set them directly in javascript, or you can use a `meta` tag:\n\n``` language-html\n          \n            <\n            meta \n            name\n            =\n            \"htmx-config\" \n            content\n            =\n            '{\"defaultSwapStyle\":\"outerHTML\"}'\n            >\n\n          \n        \n```\n\n## Conclusion\n\nAnd that’s it!\n\nHave fun with htmx! You can accomplish [quite a bit](https://htmx.org/examples/) without writing a lot of code!\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/docs/](https://htmx.org/docs/)"
- name: hx-params
  id: attributes/hx-params/index
  summary: The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request
  description: "# `hx-params`\n\nThe `hx-params` attribute allows you to filter the parameters that will be submitted with an AJAX request.\n\nThe possible values of this attribute are:\n\n- `*` - Include all parameters (default)\n- `none` - Include no parameters\n- `not <param-list>` - Include all except the comma separated list of parameter names\n- `<param-list>` - Include all the comma separated list of parameter names\n\n``` language-html\n  <div hx-get=\"/example\" hx-params=\"*\">Get Some HTML, Including Params</div>\n```\n\nThis div will include all the parameters that a `POST` would, but they will be URL encoded and included in the URL, as per usual with a `GET`.\n\n## Notes\n\n- `hx-params` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-params/](https://htmx.org/attributes/hx-params/)"
- name: hx-patch
  id: attributes/hx-patch/index
  summary: This example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body
  description: "# `hx-patch`\n\nThe `hx-patch` attribute will cause an element to issue a `PATCH` to the specified URL and swap the HTML into the DOM using a swap strategy:\n\n``` language-html\n<button hx-patch=\"/account\" hx-target=\"body\">\n  Patch Your Account\n</button>\n```\n\nThis example will cause the `button` to issue a `PATCH` to `/account` and swap the returned HTML into the `innerHTML` of the `body`.\n\n## Notes\n\n- `hx-patch` is not inherited\n- You can control the target of the swap using the [hx-target](../hx-target/index) attribute\n- You can control the swap strategy by using the [hx-swap](../hx-swap/index) attribute\n- You can control what event triggers the request with the [hx-trigger](../hx-trigger/index) attribute\n- You can control the data submitted with the request in various ways, documented here: [Parameters](../../docs/index#parameters)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-patch/](https://htmx.org/attributes/hx-patch/)"
- name: hx-post
  id: attributes/hx-post/index
  summary: This example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body
  description: "# `hx-post`\n\nThe `hx-post` attribute will cause an element to issue a `POST` to the specified URL and swap the HTML into the DOM using a swap strategy:\n\n``` language-html\n<button hx-post=\"/account/enable\" hx-target=\"body\">\n  Enable Your Account\n</button>\n```\n\nThis example will cause the `button` to issue a `POST` to `/account/enable` and swap the returned HTML into the `innerHTML` of the `body`.\n\n## Notes\n\n- `hx-post` is not inherited\n- You can control the target of the swap using the [hx-target](../hx-target/index) attribute\n- You can control the swap strategy by using the [hx-swap](../hx-swap/index) attribute\n- You can control what event triggers the request with the [hx-trigger](../hx-trigger/index) attribute\n- You can control the data submitted with the request in various ways, documented here: [Parameters](../../docs/index#parameters)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-post/](https://htmx.org/attributes/hx-post/)"
- name: hx-preserve
  id: attributes/hx-preserve/index
  summary: The hx-preserve attribute allows you to keep an element unchanged during HTML replacement
  description: "# `hx-preserve`\n\nThe `hx-preserve` attribute allows you to keep an element unchanged during HTML replacement. Elements with `hx-preserve` set are preserved by `id` when htmx updates any ancestor element. You *must* set an unchanging `id` on elements for `hx-preserve` to work. The response requires an element with the same `id`, but its type and other attributes are ignored.\n\nNote that some elements cannot unfortunately be preserved properly, such as `<input type=\"text\">` (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the [morphdom extension](../../extensions/morphdom-swap/index), which does a more elaborate DOM reconciliation.\n\n## Notes\n\n- `hx-preserve` is not inherited\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-preserve/](https://htmx.org/attributes/hx-preserve/)"
- name: hx-prompt
  id: attributes/hx-prompt/index
  summary: The hx-prompt attribute allows you to show a prompt before issuing a request
  description: "# `hx-prompt`\n\nThe `hx-prompt` attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the `HX-Prompt` header.\n\nHere is an example:\n\n``` language-html\n<button hx-delete=\"/account\" hx-prompt=\"Enter your account name to confirm deletion\">\n  Delete My Account\n</button>\n```\n\n## Notes\n\n- `hx-prompt` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-prompt/](https://htmx.org/attributes/hx-prompt/)"
- name: hx-push-url
  id: attributes/hx-push-url/index
  summary: The hx-push-url attribute allows you to push a URL into the browser location history
  description: "# `hx-push-url`\n\nThe `hx-push-url` attribute allows you to push a URL into the browser [location history](https://developer.mozilla.org/en-US/docs/Web/API/History_API). This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\n\nThe possible values of this attribute are:\n\n1.  `true`, which pushes the fetched URL into history.\n2.  `false`, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or [`hx-boost`](../hx-boost/index).\n3.  A URL to be pushed into the location bar. This may be relative or absolute, as per [`history.pushState()`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState).\n\nHere is an example:\n\n``` language-html\n<div hx-get=\"/account\" hx-push-url=\"true\">\n  Go to My Account\n</div>\n```\n\nThis will cause htmx to snapshot the current DOM to `localStorage` and push the URL \\`/account’ into the browser location bar.\n\nAnother example:\n\n``` language-html\n<div hx-get=\"/account\" hx-push-url=\"/account/home\">\n  Go to My Account\n</div>\n```\n\nThis will push the URL \\`/account/home’ into the location history.\n\n## Notes\n\n- `hx-push-url` is inherited and can be placed on a parent element\n- The [`HX-Push-Url` response header](../../headers/hx-push-url/index) has similar behavior and can override this attribute.\n- The [`hx-history-elt` attribute](../hx-history-elt/index) allows changing which element is saved in the history cache.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-push-url/](https://htmx.org/attributes/hx-push-url/)"
- name: HX-Push-Url Response Header
  id: headers/hx-push-url/index
  summary: The HX-Push-Url header allows you to push a URL into the browser location history
  description: "# HX-Push-Url Response Header\n\nThe `HX-Push-Url` header allows you to push a URL into the browser [location history](https://developer.mozilla.org/en-US/docs/Web/API/History_API). This creates a new history entry, allowing navigation with the browser’s back and forward buttons. This is similar to the [`hx-push-url` attribute](../../attributes/hx-push-url/index).\n\nIf present, this header overrides any behavior defined with attributes.\n\nThe possible values for this header are:\n\n1.  A URL to be pushed into the location bar. This may be relative or absolute, as per [`history.pushState()`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState).\n2.  `false`, which prevents the browser’s history from being updated.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/headers/hx-push-url/](https://htmx.org/headers/hx-push-url/)"
- name: hx-put
  id: attributes/hx-put/index
  summary: This example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body
  description: "# `hx-put`\n\nThe `hx-put` attribute will cause an element to issue a `PUT` to the specified URL and swap the HTML into the DOM using a swap strategy:\n\n``` language-html\n<button hx-put=\"/account\" hx-target=\"body\">\n  Put Money In Your Account\n</button>\n```\n\nThis example will cause the `button` to issue a `PUT` to `/account` and swap the returned HTML into the `innerHTML` of the `body`.\n\n## Notes\n\n- `hx-put` is not inherited\n- You can control the target of the swap using the [hx-target](../hx-target/index) attribute\n- You can control the swap strategy by using the [hx-swap](../hx-swap/index) attribute\n- You can control what event triggers the request with the [hx-trigger](../hx-trigger/index) attribute\n- You can control the data submitted with the request in various ways, documented here: [Parameters](../../docs/index#parameters)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-put/](https://htmx.org/attributes/hx-put/)"
- name: hx-replace-url
  id: attributes/hx-replace-url/index
  summary: The hx-replace-url attribute allows you to replace the current url of the browser location history
  description: "# `hx-replace-url`\n\nThe `hx-replace-url` attribute allows you to replace the current url of the browser [location history](https://developer.mozilla.org/en-US/docs/Web/API/History_API).\n\nThe possible values of this attribute are:\n\n1.  `true`, which replaces the fetched URL in the browser navigation bar.\n2.  `false`, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\n3.  A URL to be replaced into the location bar. This may be relative or absolute, as per [`history.replaceState()`](https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState).\n\nHere is an example:\n\n``` language-html\n<div hx-get=\"/account\" hx-replace-url=\"true\">\n  Go to My Account\n</div>\n```\n\nThis will cause htmx to snapshot the current DOM to `localStorage` and replace the URL \\`/account’ in the browser location bar.\n\nAnother example:\n\n``` language-html\n<div hx-get=\"/account\" hx-replace-url=\"/account/home\">\n  Go to My Account\n</div>\n```\n\nThis will replace the URL \\`/account/home’ in the browser location bar.\n\n## Notes\n\n- `hx-replace-url` is inherited and can be placed on a parent element\n- The [`HX-Replace-Url` response header](../../headers/hx-replace-url/index) has similar behavior and can override this attribute.\n- The [`hx-history-elt` attribute](../hx-history-elt/index) allows changing which element is saved in the history cache.\n- The [`hx-push-url` attribute](../hx-push-url/index) is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-replace-url/](https://htmx.org/attributes/hx-replace-url/)"
- name: HX-Replace-Url Response Header
  id: headers/hx-replace-url/index
  summary: The HX-Replace-Url header allows you to replace the current URL in the browser location history
  description: "# HX-Replace-Url Response Header\n\nThe `HX-Replace-Url` header allows you to replace the current URL in the browser [location history](https://developer.mozilla.org/en-US/docs/Web/API/History_API). This does not create a new history entry; in effect, it removes the previous current URL from the browser’s history. This is similar to the [`hx-replace-url` attribute](../../attributes/hx-replace-url/index).\n\nIf present, this header overrides any behavior defined with attributes.\n\nThe possible values for this header are:\n\n1.  A URL to replace the current URL in the location bar. This may be relative or absolute, as per [`history.replaceState()`](https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState), but must have the same origin as the current URL.\n2.  `false`, which prevents the browser’s current URL from being updated.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/headers/hx-replace-url/](https://htmx.org/headers/hx-replace-url/)"
- name: hx-request
  id: attributes/hx-request/index
  summary: Licensed under the Zero-Clause BSD License
  description: "# `hx-request`\n\nThe `hx-request` attribute allows you to configure various aspects of the request via the following attributes:\n\n- `timeout` - the timeout for the request, in milliseconds\n- `credentials` - if the request will send credentials\n- `noHeaders` - strips all headers from the request\n\nThese attributes are set using a JSON-like syntax:\n\n``` language-html\n<div ... hx-request='\\\"timeout\\\":100'>\n  ...\n</div>\n```\n\nYou may make the values dynamically evaluated by adding the `javascript:` or `js:` prefix:\n\n``` language-html\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\n  ...\n</div>\n```\n\n## Notes\n\n- `hx-request` is merge-inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-request/](https://htmx.org/attributes/hx-request/)"
- name: hx-select
  id: attributes/hx-select/index
  summary: The hx-select attribute allows you to select the content you want swapped from a response
  description: "# `hx-select`\n\nThe `hx-select` attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\n\nHere is an example that selects a subset of the response content:\n\n``` language-html\n<div>\n    <button hx-get=\"/info\" hx-select=\"#info-details\" hx-swap=\"outerHTML\">\n        Get Info!\n    </button>\n</div>\n```\n\nSo this button will issue a `GET` to `/info` and then select the element with the id `info-detail`, which will replace the entire button in the DOM.\n\n## Notes\n\n- `hx-select` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-select/](https://htmx.org/attributes/hx-select/)"
- name: hx-select-oob
  id: attributes/hx-select-oob/index
  summary: The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap
  description: "# `hx-select-oob`\n\nThe `hx-select-oob` attribute allows you to select content from a response to be swapped in via an out-of-band swap.  \nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with [hx-select](../hx-select/index).\n\nHere is an example that selects a subset of the response content:\n\n``` language-html\n<div>\n   <div id=\"alert\"></div>\n    <button hx-get=\"/info\" \nhx-select=\"#info-details\" \nhx-swap=\"outerHTML\"\nhx-select-oob=\"#alert\">\n        Get Info!\n    </button>\n</div>\n```\n\nThis button will issue a `GET` to `/info` and then select the element with the id `info-details`, which will replace the entire button in the DOM, and, in addition, pick out an element with the id `alert` in the response and swap it in for div in the DOM with the same ID.\n\nEach value in the comma separated list of values can specify any valid [`hx-swap`](../hx-swap/index) strategy by separating the selector and the swap strategy with a `:`.\n\nFor example, to prepend the alert content instead of replacing it:\n\n``` language-html\n<div>\n   <div id=\"alert\"></div>\n    <button hx-get=\"/info\"\nhx-select=\"#info-details\"\nhx-swap=\"outerHTML\"\nhx-select-oob=\"#alert:afterbegin\">\n        Get Info!\n    </button>\n</div>\n```\n\n## Notes\n\n- `hx-select-oob` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-select-oob/](https://htmx.org/attributes/hx-select-oob/)"
- name: hx-sse
  id: attributes/hx-sse/index
  summary: 'Note: This attribute will be migrated to an extension in htmx 2.0, which is available now'
  description: "# `hx-sse`\n\n*Note: This attribute will be migrated to an extension in htmx 2.0, which is available now. Please visit the [SSE extension page](../../extensions/server-sent-events/index) to learn about the new implementation of SSE as an extension.*\n\nThe `hx-sse` allows you to work with [Server Sent Event](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) `EventSource`s directly from HTML. The value of the attribute can be one or more of the following, separated by white space:\n\n- `connect:<url>` - A URL to establish an `EventSource` against\n- `swap:<eventName>` - Swap SSE message content into a DOM node on matching event names\n\n### Swap Message Content\n\nWhen an SSE connection has been established (using the `connect` keyword) the contents of SSE messages can be swapped into the DOM using the `swap` keyword. This can be done on the element that creates the SSE connection, or any child element of it. Multiple elements can use `swap` to listen for Server Sent Events.\n\nHere is an example:\n\n``` language-html\n<div hx-sse=\"connect:/event_stream swap:eventName\">\n  ...\n</div>\n```\n\nThis example connects to a Server Sent Event stream, and begins swapping events named `eventName` into the same element.\n\nHere is another example:\n\n``` language-html\n<div hx-sse=\"connect:/event_stream\">\n  <div hx-sse=\"swap:eventName1\">\n    ...\n  </div>\n  <div hx-sse=\"swap:eventName2\">\n    ...\n  </div>\n</div>\n```\n\nThis example connects the Server Sent Event stream to the parent node, and directs different events to different child nodes based on the event name returned by the server.\n\n### Trigger Server Callbacks\n\nWhen a connection for server sent events has been established, child elements can listen for these events by using the special [`hx-trigger`](../hx-trigger/index) syntax `sse:<event_name>`. This, when combined with an `hx-get` or similar will trigger the element to make a request.\n\nHere is an example:\n\n``` language-html\n  <div hx-sse=\"connect:/event_stream\">\n    <div hx-get=\"/chatroom\" hx-trigger=\"sse:chatter\">\n      ...\n    </div>\n  </div>\n```\n\nThis example establishes an SSE connection to the `event_stream` end point which then triggers a `GET` to the `/chatroom` url whenever the `chatter` event is seen.\n\n### Named Events\n\nThe Server Sent Event specification allows servers to optionally include an event name with every event. **Named events** look like this:\n\n``` language-txt\nevent: EventName\ndata: <div>Content to swap into your HTML page.</div>\n```\n\n``` language-html\n<div hx-sse=\"connect:/server-url swap:eventName\"></div>\n```\n\n### Data Only Events\n\nAlternatively, servers can provide **data only events** that do not have a name. In this case, Javascript (and HTMX) use the name “message” like this:\n\n``` language-txt\ndata: <div>Content to swap into your HTML page.</div>\n```\n\n``` language-html\n<div hx-sse=\"connect:/server-url swap:message\"></div>\n```\n\n### Test SSE Server\n\nHtmx includes an SSE test server with many more examples of how to use Server Sent Events. Download the htmx source code from GitHub and navigate to /test/ws-sse to experiment.\n\n## Notes\n\n- `hx-sse` is not inherited\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-sse/](https://htmx.org/attributes/hx-sse/)"
- name: hx-swap
  id: attributes/hx-swap/index
  summary: The hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request
  description: "# `hx-swap`\n\nThe `hx-swap` attribute allows you to specify how the response will be swapped in relative to the [target](../hx-target/index) of an AJAX request. If you do not specify the option, the default is `htmx.config.defaultSwapStyle` (`innerHTML`).\n\nThe possible values of this attribute are:\n\n- `innerHTML` - Replace the inner html of the target element\n- `outerHTML` - Replace the entire target element with the response\n- `beforebegin` - Insert the response before the target element\n- `afterbegin` - Insert the response before the first child of the target element\n- `beforeend` - Insert the response after the last child of the target element\n- `afterend` - Insert the response after the target element\n- `delete` - Deletes the target element regardless of the response\n- `none`- Does not append content from response (out of band items will still be processed).\n\nThese options are based on standard DOM naming and the [`Element.insertAdjacentHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML) specification.\n\nSo in this code:\n\n``` language-html\n  <div hx-get=\"/example\" hx-swap=\"afterend\">Get Some HTML & Append It</div>\n```\n\nThe `div` will issue a request to `/example` and append the returned content after the `div`\n\n### Modifiers\n\nThe `hx-swap` attributes supports modifiers for changing the behavior of the swap. They are outlined below.\n\n#### Transition: `transition`\n\nIf you want to use the new [View Transitions](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) API when a swap occurs, you can use the `transition:true` option for your swap. You can also enable this feature globally by setting the `htmx.config.globalViewTransitions` config setting to `true`.\n\n#### Timing: `swap` & `settle`\n\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a `swap` modifier:\n\n``` language-html\n<!-- this will wait 1s before doing the swap after it is received -->\n  <div hx-get=\"/example\" hx-swap=\"innerHTML swap:1s\">Get Some HTML & Append It</div>\n```\n\nSimilarly, you can modify the time between the swap and the settle logic by including a `settle` modifier:\n\n``` language-html\n<!-- this will wait 1s before doing the swap after it is received -->\n  <div hx-get=\"/example\" hx-swap=\"innerHTML settle:1s\">Get Some HTML & Append It</div>\n```\n\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\n\n#### Title: `ignoreTitle`\n\nBy default, htmx will update the title of the page if it finds a `<title>` tag in the response content. You can turn off this behavior by setting the `ignoreTitle` option to true.\n\n#### Scrolling: `scroll` & `show`\n\nYou can also change the scrolling behavior of the target element by using the `scroll` and `show` modifiers, both of which take the values `top` and `bottom`:\n\n``` language-html\n<!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\n  <div style=\"height:200px; overflow: scroll\" \nhx-get=\"/example\" \nhx-swap=\"beforeend scroll:bottom\">\n     Get Some HTML & Append It & Scroll To Bottom\n  </div>\n```\n\n``` language-html\n<!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the \n       viewport -->\n  <div hx-get=\"/example\" \nhx-swap=\"innerHTML show:top\"\nhx-target=\"#another-div\">\n    Get Some Content\n  </div>\n```\n\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the `scroll:` or `show:`, followed by `:top` or `:bottom`:\n\n``` language-html\n<!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the \n       viewport -->\n  <div hx-get=\"/example\" \nhx-swap=\"innerHTML show:#another-div:top\">\n    Get Some Content\n  </div>\n```\n\nYou may also use `window:top` and `window:bottom` to scroll to the top and bottom of the current window.\n\n``` language-html\n<!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\n       very top -->\n  <div hx-get=\"/example\" \nhx-swap=\"innerHTML show:window:top\">\n    Get Some Content\n  </div>\n```\n\nFor boosted links and forms the default behaviour is `show:top`. You can disable it globally with [htmx.config.scrollIntoViewOnBoost](../../api/index#config) or you can use `hx-swap=\"show:none\"` on an element basis.\n\n``` language-html\n<form action=\"/example\" hx-swap=\"show:none\">\n  ...\n</form>\n```\n\n#### Focus scroll\n\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use `focus-scroll:true`.\n\n``` language-html\n  <input id=\"name\" hx-get=\"/validation\" \nhx-swap=\"outerHTML focus-scroll:true\"/>\n```\n\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value `htmx.config.defaultFocusScroll` to true. Then disable it for specific requests using `focus-scroll:false`.\n\n``` language-html\n  <input id=\"name\" hx-get=\"/validation\" \nhx-swap=\"outerHTML focus-scroll:false\"/>\n```\n\n## Notes\n\n- `hx-swap` is inherited and can be placed on a parent element\n- The default value of this attribute is `innerHTML`\n- Due to DOM limitations, it’s not possible to use the `outerHTML` method on the `<body>` element. htmx will change `outerHTML` on `<body>` to use `innerHTML`.\n- The default swap delay is 0ms\n- The default settle delay is 20ms\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-swap/](https://htmx.org/attributes/hx-swap/)"
- name: hx-swap-oob
  id: attributes/hx-swap-oob/index
  summary: The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response
  description: "# `hx-swap-oob`\n\nThe `hx-swap-oob` attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\n\nConsider the following response HTML:\n\n``` language-html\n<div>\n ...\n</div>\n<div id=\"alerts\" hx-swap-oob=\"true\">\n    Saved!\n</div>\n```\n\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id `alerts`, and will not end up in the target.\n\nThe value of the `hx-swap-oob` can be:\n\n- `true`\n- any valid [`hx-swap`](../hx-swap/index) value\n- any valid [`hx-swap`](../hx-swap/index) value, followed by a colon, followed by a CSS selector\n\nIf the value is `true` or `outerHTML` (which are equivalent) the element will be swapped inline.\n\nIf a swap value is given, that swap strategy will be used.\n\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\n\n## Notes\n\n- `hx-swap-oob` is not inherited\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-swap-oob/](https://htmx.org/attributes/hx-swap-oob/)"
- name: hx-sync
  id: attributes/hx-sync/index
  summary: The hx-sync attribute allows you to synchronize AJAX requests between multiple elements
  description: "# `hx-sync`\n\nThe `hx-sync` attribute allows you to synchronize AJAX requests between multiple elements.\n\nThe `hx-sync` attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\n\n- `drop` - drop (ignore) this request if an existing request is in flight (the default)\n- `abort` - drop (ignore) this request if an existing request is in flight, and, if that is not the case, *abort* this request if another request occurs while it is still in flight\n- `replace` - abort the current request, if any, and replace it with this request\n- `queue` - place this request in the request queue associated with the given element\n\nThe `queue` modifier can take an additional argument indicating exactly how to queue:\n\n- `queue first` - queue the first request to show up while a request is in flight\n- `queue last` - queue the last request to show up while a request is in flight\n- `queue all` - queue all requests that show up while a request is in flight\n\n## Notes\n\n- `hx-sync` is inherited and can be placed on a parent element\n\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using `hx-sync`, filling out the input and immediately submitting the form triggers two parallel requests to `/validate` and `/store`. Using `hx-sync=\"closest form:abort\"` on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\n\n``` language-html\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\" \nhx-post=\"/validate\" \nhx-trigger=\"change\"\nhx-sync=\"closest form:abort\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\nIf you’d rather prioritize the validation request over the submit request, you can use the `drop` strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\n\n``` language-html\n<form hx-post=\"/store\">\n    <input id=\"title\" name=\"title\" type=\"text\" \nhx-post=\"/validate\" \nhx-trigger=\"change\"\nhx-sync=\"closest form:drop\"\n    >\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync `replace` strategy on the form tag. This will cancel any in-flight validation requests and issue only the `hx-post=\"/store\"` request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the `hx-sync=\"this:abort\"` strategy on the form tag.\n\n``` language-html\n<form hx-post=\"/store\" hx-sync=\"this:replace\">\n    <input id=\"title\" name=\"title\" type=\"text\" hx-post=\"/validate\" hx-trigger=\"change\" />\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\nWhen implementing active search functionality the hx-trigger attribute’s `delay` modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using `hx-sync` like this also helps reduce the chances that the input will be replaced while the user is still typing.\n\n``` language-html\n<input type=\"search\" \nhx-get=\"/search\" \nhx-trigger=\"keyup changed delay:500ms, search\" \nhx-target=\"#search-results\"\nhx-sync=\"this:replace\">\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-sync/](https://htmx.org/attributes/hx-sync/)"
- name: hx-target
  id: attributes/hx-target/index
  summary: The hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request
  description: "# `hx-target`\n\nThe `hx-target` attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\n\n- A CSS query selector of the element to target.\n- `this` which indicates that the element that the `hx-target` attribute is on is the target.\n- `closest <CSS selector>` which will find the [closest](https://developer.mozilla.org/docs/Web/API/Element/closest) ancestor element or itself, that matches the given CSS selector (e.g. `closest tr` will target the closest table row to the element).\n- `find <CSS selector>` which will find the first child descendant element that matches the given CSS selector.\n- `next` which resolves to [element.nextElementSibling](https://developer.mozilla.org/docs/Web/API/Element/nextElementSibling)\n- `next <CSS selector>` which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. `next .error` will target the closest following sibling element with `error` class)\n- `previous` which resolves to [element.previousElementSibling](https://developer.mozilla.org/docs/Web/API/Element/previousElementSibling)\n- `previous <CSS selector>` which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g `previous .error` will target the closest previous sibling with `error` class)\n\nHere is an example that targets a div:\n\n``` language-html\n<div>\n    <div id=\"response-div\"></div>\n    <button hx-post=\"/register\" hx-target=\"#response-div\" hx-swap=\"beforeend\">\n        Register!\n    </button>\n</div>\n```\n\nThe response from the `/register` url will be appended to the `div` with the id `response-div`.\n\nThis example uses `hx-target=\"this\"` to make a link that updates itself when clicked:\n\n``` language-html\n<a hx-post=\"/new-link\" hx-target=\"this\" hx-swap=\"outerHTML\">New link</a>\n```\n\n## Notes\n\n- `hx-target` is inherited and can be placed on a parent element\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-target/](https://htmx.org/attributes/hx-target/)"
- name: HX-Trigger
  id: attributes/hx-trigger/index#triggering-via-the-hx-trigger-header
  summary: If you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier
  belongs_to: hx-trigger
  description: "### Triggering via the `HX-Trigger` header\n\nIf you’re trying to fire an event from `HX-Trigger` response header, you will likely want to use the `from:body` modifier. E.g. if you send a header like this `HX-Trigger: my-custom-event` with a response, an element would likely need to look like this:\n\n``` language-html\n      \n          <\n        div \n        hx-get\n        =\n        \"/example\" \n        hx-trigger\n        =\n        \"my-custom-event from:body\"\n        >\n\n            Triggered by HX-Trigger header...\n\n          </\n        div\n        >\n\n      \n    \n```\n\nin order to fire.\n\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\n\n### Polling\n\nBy using the syntax `every <timing declaration>` you can have an element poll periodically:\n\n``` language-html\n      \n        <\n        div \n        hx-get\n        =\n        \"/latest_updates\" \n        hx-trigger\n        =\n        \"every 1s\"\n        >\n\n          Nothing Yet!\n\n        </\n        div\n        >\n\n      \n    \n```\n\nThis example will issue a `GET` to the `/latest_updates` URL every second and swap the results into the innerHTML of this div.\n\nIf you want to add a filter to polling, it should be added *after* the poll declaration:\n\n``` language-html\n      \n        <\n        div \n        hx-get\n        =\n        \"/latest_updates\" \n        hx-trigger\n        =\n        \"every 1s [someConditional]\"\n        >\n\n          Nothing Yet!\n\n        </\n        div\n        >\n\n      \n    \n```\n\n### Multiple Triggers\n\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\n\n``` language-html\n      \n          <\n        div \n        hx-get\n        =\n        \"/news\" \n        hx-trigger\n        =\n        \"load, click delay:1s\"\n        ></\n        div\n        >\n\n      \n    \n```\n\nThis example will load `/news` immediately on page load, and then again with a delay of one second after each click.\n\n### Via JavaScript\n\nThe AJAX request can be triggered via JavaScript [`htmx.trigger()`](../../api/index#trigger), too.\n\n## Notes\n\n- `hx-trigger` is not inherited\n- `hx-trigger` can be used without an AJAX request, in which case it will only fire the `htmx:trigger` event\n- In order to pass a CSS selector that contains whitespace (e.g. `form input`) to the `from`- or `target`-modifier, surround the selector in parentheses or curly brackets (e.g. `from:(form input)` or `from:nearest (form input)`)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-trigger/](https://htmx.org/attributes/hx-trigger/)"
- name: hx-trigger
  id: attributes/hx-trigger/index
  summary: The hx-trigger attribute allows you to specify what triggers an AJAX request
  description: "# `hx-trigger`\n\nThe `hx-trigger` attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\n\n- An event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\n- A polling definition of the form `every <timing declaration>`\n- A comma-separated list of such events\n\n### Standard Events\n\nA standard event, such as `click` can be specified as the trigger like so:\n\n``` language-html\n<div hx-get=\"/clicked\" hx-trigger=\"click\">Click Me</div>\n```\n\n#### Standard Event Filters\n\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to `true` the event will be triggered, otherwise it will be ignored.\n\n``` language-html\n<div hx-get=\"/clicked\" hx-trigger=\"click[ctrlKey]\">Control Click Me</div>\n```\n\nThis event will trigger if a click event is triggered with the `event.ctrlKey` property set to true.\n\nConditions can also refer to global functions or state\n\n``` language-html\n<div hx-get=\"/clicked\" hx-trigger=\"click[checkGlobalState()]\">Control Click Me</div>\n```\n\nAnd can also be combined using the standard javascript syntax\n\n``` language-html\n<div hx-get=\"/clicked\" hx-trigger=\"click[ctrlKey&&shiftKey]\">Control-Shift Click Me</div>\n```\n\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so `myEvent[foo]` will first look for a property named `foo` on the event, then look for a global symbol with the name `foo`\n\n#### Standard Event Modifiers\n\nStandard events can also have modifiers that change how they behave. The modifiers are:\n\n- `once` - the event will only trigger once (e.g. the first click)\n- `changed` - the event will only change if the value of the element has changed. Please pay attention `change` is the name of the event and `changed` is the name of the modifier.\n- `delay:<timing declaration>` - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\n- `throttle:<timing declaration>` - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\n- `from:<Extended CSS selector>` - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\n  - A standard CSS selector resolves to all elements matching that selector. Thus, `from:input` would listen on every input on the page.\n  - The extended CSS selector here allows for the following non-standard CSS values:\n    - `document` - listen for events on the document\n    - `window` - listen for events on the window\n    - `closest <CSS selector>` - finds the [closest](https://developer.mozilla.org/docs/Web/API/Element/closest) ancestor element or itself, matching the given css selector\n    - `find <CSS selector>` - finds the closest child matching the given css selector\n    - `next` resolves to [element.nextElementSibling](https://developer.mozilla.org/docs/Web/API/Element/nextElementSibling)\n    - `next <CSS selector>` scans the DOM forward for the first element that matches the given CSS selector. (e.g. `next .error` will target the closest following sibling element with `error` class)\n    - `previous` resolves to [element.previousElementSibling](https://developer.mozilla.org/docs/Web/API/Element/previousElementSibling)\n    - `previous <CSS selector>` scans the DOM backwards for the first element that matches the given CSS selector. (e.g `previous .error` will target the closest previous sibling with `error` class)\n- `target:<CSS selector>` - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\n- `consume` - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\n- `queue:<queue option>` - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\n  - `first` - queue the first event\n  - `last` - queue the last event (default)\n  - `all` - queue all events (issue a request for each event)\n  - `none` - do not queue new events\n\nHere is an example of a search box that searches on `keyup`, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\n\n``` language-html\n<input name=\"q\"\nhx-get=\"/search\" hx-trigger=\"keyup changed delay:1s\"\nhx-target=\"#search-results\"/>\n```\n\nThe response from the `/search` url will be appended to the `div` with the id `search-results`.\n\n### Non-standard Events\n\nThere are some additional non-standard events that htmx supports:\n\n- `load` - triggered on load (useful for lazy-loading something)\n- `revealed` - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using `overflow` in css like `overflow-y: scroll` you should use `intersect once` instead of `revealed`.\n- `intersect` - fires once when an element first intersects the viewport. This supports two additional options:\n  - `root:<selector>` - a CSS selector of the root element for intersection\n  - `threshold:<float>` - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\n\n### Triggering via the `HX-Trigger` header\n\nIf you’re trying to fire an event from `HX-Trigger` response header, you will likely want to use the `from:body` modifier. E.g. if you send a header like this `HX-Trigger: my-custom-event` with a response, an element would likely need to look like this:\n\n``` language-html\n  <div hx-get=\"/example\" hx-trigger=\"my-custom-event from:body\">\n    Triggered by HX-Trigger header...\n  </div>\n```\n\nin order to fire.\n\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\n\n### Polling\n\nBy using the syntax `every <timing declaration>` you can have an element poll periodically:\n\n``` language-html\n<div hx-get=\"/latest_updates\" hx-trigger=\"every 1s\">\n  Nothing Yet!\n</div>\n```\n\nThis example will issue a `GET` to the `/latest_updates` URL every second and swap the results into the innerHTML of this div.\n\nIf you want to add a filter to polling, it should be added *after* the poll declaration:\n\n``` language-html\n<div hx-get=\"/latest_updates\" hx-trigger=\"every 1s [someConditional]\">\n  Nothing Yet!\n</div>\n```\n\n### Multiple Triggers\n\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\n\n``` language-html\n  <div hx-get=\"/news\" hx-trigger=\"load, click delay:1s\"></div>\n```\n\nThis example will load `/news` immediately on page load, and then again with a delay of one second after each click.\n\n### Via JavaScript\n\nThe AJAX request can be triggered via JavaScript [`htmx.trigger()`](../../api/index#trigger), too.\n\n## Notes\n\n- `hx-trigger` is not inherited\n- `hx-trigger` can be used without an AJAX request, in which case it will only fire the `htmx:trigger` event\n- In order to pass a CSS selector that contains whitespace (e.g. `form input`) to the `from`- or `target`-modifier, surround the selector in parentheses or curly brackets (e.g. `from:(form input)` or `from:nearest (form input)`)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-trigger/](https://htmx.org/attributes/hx-trigger/)"
- name: HX-Trigger Response Headers
  id: headers/hx-trigger/index
  summary: These response headers can be used to trigger client side actions on the target element within a response to htmx
  description: "# HX-Trigger Response Headers\n\nThese response headers can be used to trigger client side actions on the target element within a response to htmx. You can trigger a single event or as many uniquely named events as you would like.\n\nThe headers are:\n\n- `HX-Trigger` - trigger events as soon as the response is received.\n- `HX-Trigger-After-Settle` - trigger events after the [settling step](../../docs/index#request-operations).\n- `HX-Trigger-After-Swap` - trigger events after the [swap step](../../docs/index#request-operations).\n\nTo trigger a single event with no additional details you can simply send the event name in a header like so:\n\n`HX-Trigger: myEvent`\n\nThis will trigger `myEvent` on the triggering element and will bubble up to the body. As an example you could listen for this event like this:\n\n``` language-javascript\ndocument.body.addEventListener(\"myEvent\", function(evt){\nalert(\"myEvent was triggered!\");\n})\n```\n\n… or like this, if you’re trying to trigger some element without using JS code:\n\n``` language-html\n<!-- Since it bubbles up to the <body>, we must use the `from:body` modifier below -->\n<div hx-trigger=\"myEvent from:body\" hx-get=\"/example\"></div>\n```\n\nIf you want to pass details along with the event, you can move to JSON for the value of the trigger:\n\n`HX-Trigger: {\"showMessage\":\"Here Is A Message\"}`\n\nTo handle this event you would write the following code:\n\n``` language-javascript\ndocument.body.addEventListener(\"showMessage\", function(evt){\nalert(evt.detail.value);\n})\n```\n\nNote that the value of the message was put into the `detail.value` slot. If you wish to pass multiple pieces of data you can use a nested JSON object on the right hand side of the JSON object:\n\n`HX-Trigger: {\"showMessage\":{\"level\" : \"info\", \"message\" : \"Here Is A Message\"}}`\n\nAnd handle this event like so:\n\n``` language-javascript\ndocument.body.addEventListener(\"showMessage\", function(evt){\nif(evt.detail.level === \"info\"){\nalert(evt.detail.message);   \n   }\n})\n```\n\nEach property of the JSON object on the right hand side will be copied onto the details object for the event.\n\n### Multiple Triggers\n\nIf you wish to invoke multiple events, you can simply add additional properties to the top level JSON object:\n\n`HX-Trigger: {\"event1\":\"A message\", \"event2\":\"Another message\"}`\n\nYou may also trigger multiple events with no additional details by sending event names separated by commas, like so:\n\n`HX-Trigger: event1, event2`\n\nUsing events gives you a lot of flexibility to add functionality to normal htmx responses.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/headers/hx-trigger/](https://htmx.org/headers/hx-trigger/)"
- name: hx-validate
  id: attributes/hx-validate/index
  summary: The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request
  description: "# `hx-validate`\n\nThe `hx-validate` attribute will cause an element to validate itself by way of the [HTML5 Validation API](../../docs/index#validation) before it submits a request.\n\nForm elements do this by default, but other elements do not.\n\n## Notes\n\n- `hx-validate` is not inherited\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-validate/](https://htmx.org/attributes/hx-validate/)"
- name: hx-vals
  id: attributes/hx-vals/index
  summary: The hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request
  description: "# `hx-vals`\n\nThe `hx-vals` attribute allows you to add to the parameters that will be submitted with an AJAX request.\n\nBy default, the value of this attribute is a list of name-expression values in [JSON (JavaScript Object Notation)](https://www.json.org/json-en.html) format.\n\nIf you wish for `hx-vals` to *evaluate* the values given, you can prefix the values with `javascript:` or `js:`.\n\n``` language-html\n  <div hx-get=\"/example\" hx-vals='{\"myVal\": \"My Value\"}'>Get Some HTML, Including A Value in the Request</div>\n  <div hx-get=\"/example\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\n```\n\nWhen using evaluated code you can access the `event` object. This example includes the value of the last typed key within the input.\n\n``` language-html\n  <div hx-get=\"/example\" hx-trigger=\"keyup\" hx-vals='js:{lastKey: event.key}'>\n    <input type=\"text\" />\n  </div>\n```\n\n## Security Considerations\n\n- By default, the value of `hx-vals` must be valid [JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON). It is **not** dynamically computed. If you use the `javascript:` prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a [Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) vulnerability.\n\n## Notes\n\n- `hx-vals` is inherited and can be placed on a parent element.\n- A child declaration of a variable overrides a parent declaration.\n- Input values with the same name will be overridden by variable declarations.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-vals/](https://htmx.org/attributes/hx-vals/)"
- name: hx-vars
  id: attributes/hx-vars/index
  summary: 'NOTE: hx-vars has been deprecated in favor of hx-vals, which is safer by default'
  description: "# `hx-vars`\n\n**NOTE: `hx-vars` has been deprecated in favor of [`hx-vals`](../hx-vals/index), which is safer by default.**\n\nThe `hx-vars` attribute allows you to dynamically add to the parameters that will be submitted with an AJAX request.\n\nThe value of this attribute is a comma separated list of `name`:`<expression>` values, the same as the internal syntax of javascript [Object Literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals).\n\n``` language-html\n  <div hx-get=\"/example\" hx-vars=\"myVar:computeMyVar()\">Get Some HTML, Including A Dynamic Value in the Request</div>\n```\n\n## Security Considerations\n\n- The expressions in `hx-vars` are dynamically computed which allows you to add JavaScript code that will be executed. Be careful to **never** trust user input in your expressions as this may lead to a [Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) vulnerability. If you are dealing with user input such as query strings or user-generated content, consider using [hx-vals](../hx-vals/index) which is a safer alternative.\n\n## Notes\n\n- `hx-vars` is inherited and can be placed on a parent element.\n- A child declaration of a variable overrides a parent declaration.\n- Input values with the same name will be overridden by variable declarations.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-vars/](https://htmx.org/attributes/hx-vars/)"
- name: hx-ws
  id: attributes/hx-ws/index
  summary: 'Note: This attribute will be migrated to an extension in htmx 2.0, which is available now'
  description: "# `hx-ws`\n\n*Note: This attribute will be migrated to an extension in htmx 2.0, which is available now. Please visit the [WebSockets extension page](../../extensions/web-sockets/index) to learn about the new implementation of Web Sockets as an extension.*\n\nThe `hx-ws` allows you to work with [Web Sockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications) directly from HTML. The value of the attribute can be one or more of the following, separated by commas:\n\n- `connect:<url>` or `connect:<prefix>:<url>` - A URL to establish an `WebSocket` connection against.\n- Prefixes `ws` or `wss` can optionally be specified. If not specified, HTMX defaults to add the location’s scheme-type, host and port to have browsers send cookies via websockets.\n- `send` - Sends a message to the nearest websocket based on the trigger value for the element (either the natural event or the event specified by \\[`hx-trigger`\\])\n\nHere is an example:\n\n``` language-html\n  <div hx-ws=\"connect:/chatroom\">\n    <div id=\"chat_room\">\n      ...\n    </div>\n    <form hx-ws=\"send\">\n        <input name=\"chat_message\">\n    </form>\n  </div>\n```\n\nThis example establishes a WebSocket to the `chatroom` end point. Content that is sent down from the websocket will be parsed as HTML and swapped in by the `id` property, using the same logic as [Out of Band Swaps](../hx-swap-oob/index).\n\nThe form uses the `send` syntax to indicate that when it is submitted, the form values should be serialized as JSON and send to the nearest enclosing `WebSocket`.\n\nThe serialized values will include a field, `HEADERS`, that includes the headers normally submitted with an htmx request.\n\nAfter an unexpected connection loss due to `Abnormal Closure`, `Service Restart` or `Try Again Later`, reconnecting is tried until successful. The default reconnection interval is implemented with the full-jitter exponential-backoff algorithm. Own implementations can be provided by setting `htmx.config.wsReconnectDelay` to a function with `retryCount` as its only parameter.\n\n### Test Web Sockets Server\n\nHtmx includes a WebSockets test server with many more examples of how to use Server Sent Events. Download the htmx source code from GitHub and navigate to /test/ws-sse to experiment.\n\n## Notes\n\n- `hx-ws` is not inherited\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/attributes/hx-ws/](https://htmx.org/attributes/hx-ws/)"
- name: Javascript API
  id: api/index
  summary: While it is not a focus of the library, htmx does provide a small API of helper methods, intended mainly for extension development or for working with events
  description: "# Javascript API\n\nWhile it is not a focus of the library, htmx does provide a small API of helper methods, intended mainly for [extension development](../extensions/index) or for working with [events](../events/index).\n\nThe [hyperscript](https://hyperscript.org) project is intended to provide more extensive scripting support for htmx-based applications.\n\n### Method - `htmx.addClass()`\n\nThis method adds a class to the given element.\n\n##### Parameters\n\n- `elt` - the element to add the class to\n- `class` - the class to add\n\nor\n\n- `elt` - the element to add the class to\n- `class` - the class to add\n- `delay` - delay (in milliseconds ) before class is added\n\n##### Example\n\n``` language-js\n// add the class 'myClass' to the element with the id 'demo'\nhtmx.addClass(htmx.find('#demo'), 'myClass');\n// add the class 'myClass' to the element with the id 'demo' after 1 second\nhtmx.addClass(htmx.find('#demo'), 'myClass', 1000);\n```\n\n### Method - `htmx.ajax()`\n\nIssues an htmx-style AJAX request. This method returns a Promise, so a callback can be executed after the content has been inserted into the DOM.\n\n##### Parameters\n\n- `verb` - ‘GET’, ‘POST’, etc.\n- `path` - the URL path to make the AJAX\n- `element` - the element to target (defaults to the `body`)\n\nor\n\n- `verb` - ‘GET’, ‘POST’, etc.\n- `path` - the URL path to make the AJAX\n- `selector` - a selector for the target\n\nor\n\n- `verb` - ‘GET’, ‘POST’, etc.\n- `path` - the URL path to make the AJAX\n- `context` - a context object that contains any of the following\n  - `source` - the source element of the request\n  - `event` - an event that “triggered” the request\n  - `handler` - a callback that will handle the response HTML\n  - `target` - the target to swap the response into\n  - `swap` - how the response will be swapped in relative to the target\n  - `values` - values to submit with the request\n  - `headers` - headers to submit with the request\n  - `select` - allows you to select the content you want swapped from a response\n\n##### Example\n\n``` language-js\n// issue a GET to /example and put the response HTML into #myDiv\nhtmx.ajax('GET', '/example', '#myDiv')\n// issue a GET to /example and replace #myDiv with the response\nhtmx.ajax('GET', '/example', {target:'#myDiv', swap:'outerHTML'})\n// execute some code after the content has been inserted into the DOM\nhtmx.ajax('GET', '/example', '#myDiv').then(() => {\n// this code will be executed after the 'htmx:afterOnLoad' event,\n// and before the 'htmx:xhr:loadend' event\nconsole.log('Content inserted successfully!');\n    });\n```\n\n### Method - `htmx.closest()`\n\nFinds the closest matching element in the given elements parentage, inclusive of the element\n\n##### Parameters\n\n- `elt` - the element to find the selector from\n- `selector` - the selector to find\n\n##### Example\n\n``` language-js\n// find the closest enclosing div of the element with the id 'demo'\nhtmx.closest(htmx.find('#demo'), 'div');\n```\n\n### Property - `htmx.config`\n\nA property holding the configuration htmx uses at runtime.\n\nNote that using a [meta tag](../docs/index#config) is the preferred mechanism for setting these properties.\n\n##### Properties\n\n- `attributesToSettle:[\"class\", \"style\", \"width\", \"height\"]` - array of strings: the attributes to settle during the settling phase\n- `refreshOnHistoryMiss:false` - boolean: if set to `true` htmx will issue a full page refresh on history misses rather than use an AJAX request\n- `defaultSettleDelay:20` - int: the default delay between completing the content swap and settling attributes\n- `defaultSwapDelay:0` - int: the default delay between receiving a response from the server and doing the swap\n- `defaultSwapStyle:'innerHTML'` - string: the default swap style to use if [`hx-swap`](../attributes/hx-swap/index) is omitted\n- `historyCacheSize:10` - int: the number of pages to keep in `localStorage` for history support\n- `historyEnabled:true` - boolean: whether or not to use history\n- `includeIndicatorStyles:true` - boolean: if true, htmx will inject a small amount of CSS into the page to make indicators invisible unless the `htmx-indicator` class is present\n- `indicatorClass:'htmx-indicator'` - string: the class to place on indicators when a request is in flight\n- `requestClass:'htmx-request'` - string: the class to place on triggering elements when a request is in flight\n- `addedClass:'htmx-added'` - string: the class to temporarily place on elements that htmx has added to the DOM\n- `settlingClass:'htmx-settling'` - string: the class to place on target elements when htmx is in the settling phase\n- `swappingClass:'htmx-swapping'` - string: the class to place on target elements when htmx is in the swapping phase\n- `allowEval:true` - boolean: allows the use of eval-like functionality in htmx, to enable `hx-vars`, trigger conditions & script tag evaluation. Can be set to `false` for CSP compatibility.\n- `allowScriptTags:true` - boolean: allows script tags to be evaluated in new content\n- `inlineScriptNonce:''` - string: the [nonce](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/nonce) to add to inline scripts\n- `useTemplateFragments:false` - boolean: use HTML template tags for parsing content from the server. This allows you to use Out of Band content when returning things like table rows, but it is *not* IE11 compatible.\n- `withCredentials:false` - boolean: allow cross-site Access-Control requests using credentials such as cookies, authorization headers or TLS client certificates\n- `timeout:0` - int: the number of milliseconds a request can take before automatically being terminated\n- `wsReconnectDelay:'full-jitter'` - string/function: the default implementation of `getWebSocketReconnectDelay` for reconnecting after unexpected connection loss by the event code `Abnormal Closure`, `Service Restart` or `Try Again Later`\n- `wsBinaryType:'blob'` - string: the [the type of binary data](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType) being received over the WebSocket connection\n- `disableSelector:\"[hx-disable], [data-hx-disable]\"` - array of strings: htmx will not process elements with this attribute on it or a parent\n- `scrollBehavior:'smooth'` - string: the behavior for a boosted link on page transitions. The allowed values are `auto` and `smooth`. Smooth will smoothscroll to the top of the page while auto will behave like a vanilla link.\n- `defaultFocusScroll:false` - boolean: if the focused element should be scrolled into view, can be overridden using the [focus-scroll](../attributes/hx-swap/index#focus-scroll) swap modifier\n- `getCacheBusterParam:false` - boolean: if set to true htmx will include a cache-busting parameter in `GET` requests to avoid caching partial responses by the browser\n- `globalViewTransitions:false` - boolean: if set to `true`, htmx will use the [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) API when swapping in new content.\n- `methodsThatUseUrlParams:[\"get\"]` - array of strings: htmx will format requests with these methods by encoding their parameters in the URL, not the request body\n- `selfRequestsOnly:false` - boolean: if set to `true` will only allow AJAX requests to the same domain as the current document\n- `ignoreTitle:false` - boolean: if set to `true` htmx will not update the title of the document when a `title` tag is found in new content\n- `scrollIntoViewOnBoost:true` - boolean: whether or not the target of a boosted element is scrolled into the viewport. If `hx-target` is omitted on a boosted element, the target defaults to `body`, causing the page to scroll to the top.\n- `triggerSpecsCache:null` - object: the cache to store evaluated trigger specifications into, improving parsing performance at the cost of more memory usage. You may define a simple object to use a never-clearing cache, or implement your own system using a [proxy object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy) \\|\n\n##### Example\n\n``` language-js\n// update the history cache size to 30\nhtmx.config.historyCacheSize = 30;\n```\n\n### Property - `htmx.createEventSource`\n\nA property used to create new [Server Sent Event](../docs/index#sse) sources. This can be updated to provide custom SSE setup.\n\n##### Value\n\n- `func(url)` - a function that takes a URL string and returns a new `EventSource`\n\n##### Example\n\n``` language-js\n// override SSE event sources to not use credentials\nhtmx.createEventSource = function(url) {\nreturn new EventSource(url, {withCredentials:false});\n  };\n```\n\n### Property - `htmx.createWebSocket`\n\nA property used to create new [WebSocket](../docs/index#websockets). This can be updated to provide custom WebSocket setup.\n\n##### Value\n\n- `func(url)` - a function that takes a URL string and returns a new `WebSocket`\n\n##### Example\n\n``` language-js\n// override WebSocket to use a specific protocol\nhtmx.createWebSocket = function(url) {\nreturn new WebSocket(url, ['wss']);\n  };\n```\n\n### Method - `htmx.defineExtension()`\n\nDefines a new htmx [extension](../extensions/index).\n\n##### Parameters\n\n- `name` - the extension name\n- `ext` - the extension definition\n\n##### Example\n\n``` language-js\n// defines a silly extension that just logs the name of all events triggered\nhtmx.defineExtension(\"silly\", {\nonEvent : function(name, evt) {\nconsole.log(\"Event \" + name + \" was triggered!\")\n    }\n  });\n```\n\n### Method - `htmx.find()`\n\nFinds an element matching the selector\n\n##### Parameters\n\n- `selector` - the selector to match\n\nor\n\n- `elt` - the root element to find the matching element in, inclusive\n- `selector` - the selector to match\n\n##### Example\n\n``` language-js\n// find div with id my-div\nvar div = htmx.find(\"#my-div\")\n// find div with id another-div within that div\nvar anotherDiv = htmx.find(div, \"#another-div\")\n```\n\n### Method - `htmx.findAll()`\n\nFinds all elements matching the selector\n\n##### Parameters\n\n- `selector` - the selector to match\n\nor\n\n- `elt` - the root element to find the matching elements in, inclusive\n- `selector` - the selector to match\n\n##### Example\n\n``` language-js\n// find all divs\nvar allDivs = htmx.findAll(\"div\")\n// find all paragraphs within a given div\nvar allParagraphsInMyDiv = htmx.findAll(htmx.find(\"#my-div\"), \"p\")\n```\n\n### Method - `htmx.logAll()`\n\nLog all htmx events, useful for debugging.\n\n##### Example\n\n``` language-js\nhtmx.logAll();\n```\n\n### Method - `htmx.logNone()`\n\nLog no htmx events, call this to turn off the debugger if you previously enabled it.\n\n##### Example\n\n``` language-js\nhtmx.logNone();\n```\n\n### Property - `htmx.logger`\n\nThe logger htmx uses to log with\n\n##### Value\n\n- `func(elt, eventName, detail)` - a function that takes an element, eventName and event detail and logs it\n\n##### Example\n\n``` language-js\nhtmx.logger = function(elt, event, data) {\nif(console) {\nconsole.log(\"INFO:\", event, elt, data);\n        }\n    }\n```\n\n### Method - `htmx.off()`\n\nRemoves an event listener from an element\n\n##### Parameters\n\n- `eventName` - the event name to remove the listener from\n- `listener` - the listener to remove\n\nor\n\n- `target` - the element to remove the listener from\n- `eventName` - the event name to remove the listener from\n- `listener` - the listener to remove\n\n##### Example\n\n``` language-js\n// remove this click listener from the body\nhtmx.off(\"click\", myEventListener);\n// remove this click listener from the given div\nhtmx.off(\"#my-div\", \"click\", myEventListener)\n```\n\n### Method - `htmx.on()`\n\nAdds an event listener to an element\n\n##### Parameters\n\n- `eventName` - the event name to add the listener for\n- `listener` - the listener to add\n\nor\n\n- `target` - the element to add the listener to\n- `eventName` - the event name to add the listener for\n- `listener` - the listener to add\n\n##### Example\n\n``` language-js\n// add a click listener to the body\nvar myEventListener = htmx.on(\"click\", function(evt){ console.log(evt); });\n// add a click listener to the given div\nvar myEventListener = htmx.on(\"#my-div\", \"click\", function(evt){ console.log(evt); });\n```\n\n### Method - `htmx.onLoad()`\n\nAdds a callback for the `htmx:load` event. This can be used to process new content, for example initializing the content with a javascript library\n\n##### Parameters\n\n- `callback(elt)` - the callback to call on newly loaded content\n\n##### Example\n\n``` language-js\nhtmx.onLoad(function(elt){\nMyLibrary.init(elt);\n    })\n```\n\n### Method - `htmx.parseInterval()`\n\nParses an interval string consistent with the way htmx does. Useful for plugins that have timing-related attributes.\n\nCaution: Accepts an int followed by either `s` or `ms`. All other values use `parseFloat`\n\n##### Parameters\n\n- `str` - timing string\n\n##### Example\n\n``` language-js\n// returns 3000\nvar milliseconds = htmx.parseInterval(\"3s\");\n// returns 3 - Caution\nvar milliseconds = htmx.parseInterval(\"3m\");\n```\n\n### Method - `htmx.process()`\n\nProcesses new content, enabling htmx behavior. This can be useful if you have content that is added to the DOM outside of the normal htmx request cycle but still want htmx attributes to work.\n\n##### Parameters\n\n- `elt` - element to process\n\n##### Example\n\n``` language-js\n  document.body.innerHTML = \"<div hx-get='/example'>Get it!</div>\"\n// process the newly added content\nhtmx.process(document.body);\n```\n\n### Method - `htmx.remove()`\n\nRemoves an element from the DOM\n\n##### Parameters\n\n- `elt` - element to remove\n\nor\n\n- `elt` - element to remove\n- `delay` - delay (in milliseconds ) before element is removed\n\n##### Example\n\n``` language-js\n// removes my-div from the DOM\nhtmx.remove(htmx.find(\"#my-div\"));\n// removes my-div from the DOM after a delay of 2 seconds\nhtmx.remove(htmx.find(\"#my-div\"), 2000);\n```\n\n### Method - `htmx.removeClass()`\n\nRemoves a class from the given element\n\n##### Parameters\n\n- `elt` - element to remove the class from\n- `class` - the class to remove\n\nor\n\n- `elt` - element to remove the class from\n- `class` - the class to remove\n- `delay` - delay (in milliseconds ) before class is removed\n\n##### Example\n\n``` language-js\n// removes .myClass from my-div\nhtmx.removeClass(htmx.find(\"#my-div\"), \"myClass\");\n// removes .myClass from my-div after 6 seconds\nhtmx.removeClass(htmx.find(\"#my-div\"), \"myClass\", 6000);\n```\n\n### Method - `htmx.removeExtension()`\n\nRemoves the given extension from htmx\n\n##### Parameters\n\n- `name` - the name of the extension to remove\n\n##### Example\n\n``` language-js\nhtmx.removeExtension(\"my-extension\");\n```\n\n### Method - `htmx.takeClass()`\n\nTakes the given class from its siblings, so that among its siblings, only the given element will have the class.\n\n##### Parameters\n\n- `elt` - the element that will take the class\n- `class` - the class to take\n\n##### Example\n\n``` language-js\n// takes the selected class from tab2's siblings\nhtmx.takeClass(htmx.find(\"#tab2\"), \"selected\");\n```\n\n### Method - `htmx.toggleClass()`\n\nToggles the given class on an element\n\n##### Parameters\n\n- `elt` - the element to toggle the class on\n- `class` - the class to toggle\n\n##### Example\n\n``` language-js\n// toggles the selected class on tab2\nhtmx.toggleClass(htmx.find(\"#tab2\"), \"selected\");\n```\n\n### Method - `htmx.trigger()`\n\nTriggers a given event on an element\n\n##### Parameters\n\n- `elt` - the element to trigger the event on\n- `name` - the name of the event to trigger\n- `detail` - details for the event\n\n##### Example\n\n``` language-js\n// triggers the myEvent event on #tab2 with the answer 42\nhtmx.trigger(\"#tab2\", \"myEvent\", {answer:42});\n```\n\n### Method - `htmx.values()`\n\nReturns the input values that would resolve for a given element via the htmx value resolution mechanism\n\n##### Parameters\n\n- `elt` - the element to resolve values on\n- `request type` - the request type (e.g. `get` or `post`) non-GET’s will include the enclosing form of the element. Defaults to `post`\n\n##### Example\n\n``` language-js\n// gets the values associated with this form\nvar values = htmx.values(htmx.find(\"#myForm\"));\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/api/](https://htmx.org/api/)"
- name: Reference
  id: reference/index
  summary: The following are the most common attributes when using htmx
  description: "# Reference\n\n## Contents\n\n- [htmx Core Attributes](index#attributes)\n- [htmx Additional Attributes](index#attributes-additional)\n- [htmx CSS Classes](index#classes)\n- [htmx Request Headers](index#request_headers)\n- [htmx Response Headers](index#response_headers)\n- [htmx Events](index#events)\n- [htmx Extensions](../extensions/index#included)\n- [JavaScript API](index#api)\n- [Configuration Options](index#config)\n\n## Core Attribute Reference\n\nThe following are the most common attributes when using htmx.\n\n| Attribute                                            | Description                                                                                                        |\n|------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| [`hx-boost`](../attributes/hx-boost/index)           | add or remove [progressive enhancement](https://en.wikipedia.org/wiki/Progressive_enhancement) for links and forms |\n| [`hx-get`](../attributes/hx-get/index)               | issues a `GET` to the specified URL                                                                                |\n| [`hx-post`](../attributes/hx-post/index)             | issues a `POST` to the specified URL                                                                               |\n| [`hx-on*`](../attributes/hx-on/index)                | handle events with a inline scripts on elements                                                                    |\n| [`hx-push-url`](../attributes/hx-push-url/index)     | pushes the URL into the browser location bar, creating a new history entry                                         |\n| [`hx-select`](../attributes/hx-select/index)         | select content to swap in from a response                                                                          |\n| [`hx-select-oob`](../attributes/hx-select-oob/index) | select content to swap in from a response, out of band (somewhere other than the target)                           |\n| [`hx-swap`](../attributes/hx-swap/index)             | controls how content is swapped in (`outerHTML`, `beforeend`, `afterend`, …)                                       |\n| [`hx-swap-oob`](../attributes/hx-swap-oob/index)     | marks content in a response to be out of band (should swap in somewhere other than the target)                     |\n| [`hx-target`](../attributes/hx-target/index)         | specifies the target element to be swapped                                                                         |\n| [`hx-trigger`](../attributes/hx-trigger/index)       | specifies the event that triggers the request                                                                      |\n| [`hx-vals`](../attributes/hx-vals/index)             | adds values to the parameters to submit with the request (JSON-formatted)                                          |\n\n## Additional Attribute Reference\n\nThe table below lists all other attributes available in htmx.\n\n| Attribute                                                | Description                                                                                                                            |\n|----------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|\n| [`hx-confirm`](../attributes/hx-confirm/index)           | shows a `confirm()` dialog before issuing a request                                                                                    |\n| [`hx-delete`](../attributes/hx-delete/index)             | issues a `DELETE` to the specified URL                                                                                                 |\n| [`hx-disable`](../attributes/hx-disable/index)           | disables htmx processing for the given node and any children nodes                                                                     |\n| [`hx-disabled-elt`](../attributes/hx-disabled-elt/index) | adds the `disabled` attribute to the specified elements while a request is in flight                                                   |\n| [`hx-disinherit`](../attributes/hx-disinherit/index)     | control and disable automatic attribute inheritance for child nodes                                                                    |\n| [`hx-encoding`](../attributes/hx-encoding/index)         | changes the request encoding type                                                                                                      |\n| [`hx-ext`](../attributes/hx-ext/index)                   | extensions to use for this element                                                                                                     |\n| [`hx-headers`](../attributes/hx-headers/index)           | adds to the headers that will be submitted with the request                                                                            |\n| [`hx-history`](../attributes/hx-history/index)           | prevent sensitive data being saved to the history cache                                                                                |\n| [`hx-history-elt`](../attributes/hx-history-elt/index)   | the element to snapshot and restore during history navigation                                                                          |\n| [`hx-include`](../attributes/hx-include/index)           | include additional data in requests                                                                                                    |\n| [`hx-indicator`](../attributes/hx-indicator/index)       | the element to put the `htmx-request` class on during the request                                                                      |\n| [`hx-params`](../attributes/hx-params/index)             | filters the parameters that will be submitted with a request                                                                           |\n| [`hx-patch`](../attributes/hx-patch/index)               | issues a `PATCH` to the specified URL                                                                                                  |\n| [`hx-preserve`](../attributes/hx-preserve/index)         | specifies elements to keep unchanged between requests                                                                                  |\n| [`hx-prompt`](../attributes/hx-prompt/index)             | shows a `prompt()` before submitting a request                                                                                         |\n| [`hx-put`](../attributes/hx-put/index)                   | issues a `PUT` to the specified URL                                                                                                    |\n| [`hx-replace-url`](../attributes/hx-replace-url/index)   | replace the URL in the browser location bar                                                                                            |\n| [`hx-request`](../attributes/hx-request/index)           | configures various aspects of the request                                                                                              |\n| [`hx-sse`](../extensions/server-sent-events/index)       | has been moved to an extension. [Documentation for older versions](../attributes/hx-sse/index)                                         |\n| [`hx-sync`](../attributes/hx-sync/index)                 | control how requests made by different elements are synchronized                                                                       |\n| [`hx-validate`](../attributes/hx-validate/index)         | force elements to validate themselves before a request                                                                                 |\n| [`hx-vars`](../attributes/hx-vars/index)                 | adds values dynamically to the parameters to submit with the request (deprecated, please use [`hx-vals`](../attributes/hx-vals/index)) |\n| [`hx-ws`](../extensions/web-sockets/index)               | has been moved to an extension. [Documentation for older versions](../attributes/hx-ws/index)                                          |\n\n## CSS Class Reference\n\n| Class            | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `htmx-added`     | Applied to a new piece of content before it is swapped, removed after it is settled.                                                                       |\n| `htmx-indicator` | A dynamically generated class that will toggle visible (opacity:1) when a `htmx-request` class is present                                                  |\n| `htmx-request`   | Applied to either the element or the element specified with [`hx-indicator`](../attributes/hx-indicator/index) while a request is ongoing                  |\n| `htmx-settling`  | Applied to a target after content is swapped, removed after it is settled. The duration can be modified via [`hx-swap`](../attributes/hx-swap/index).      |\n| `htmx-swapping`  | Applied to a target before any content is swapped, removed after it is swapped. The duration can be modified via [`hx-swap`](../attributes/hx-swap/index). |\n\n## HTTP Header Reference\n\n### Request Headers Reference\n\n| Header                       | Description                                                                                 |\n|------------------------------|---------------------------------------------------------------------------------------------|\n| `HX-Boosted`                 | indicates that the request is via an element using [hx-boost](../attributes/hx-boost/index) |\n| `HX-Current-URL`             | the current URL of the browser                                                              |\n| `HX-History-Restore-Request` | “true” if the request is for history restoration after a miss in the local history cache    |\n| `HX-Prompt`                  | the user response to an [hx-prompt](../attributes/hx-prompt/index)                          |\n| `HX-Request`                 | always “true”                                                                               |\n| `HX-Target`                  | the `id` of the target element if it exists                                                 |\n| `HX-Trigger-Name`            | the `name` of the triggered element if it exists                                            |\n| `HX-Trigger`                 | the `id` of the triggered element if it exists                                              |\n\n### Response Headers Reference\n\n| Header                                                   | Description                                                                                                                                                                                |\n|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [`HX-Location`](../headers/hx-location/index)            | allows you to do a client-side redirect that does not do a full page reload                                                                                                                |\n| [`HX-Push-Url`](../headers/hx-push-url/index)            | pushes a new url into the history stack                                                                                                                                                    |\n| `HX-Redirect`                                            | can be used to do a client-side redirect to a new location                                                                                                                                 |\n| `HX-Refresh`                                             | if set to “true” the client-side will do a full refresh of the page                                                                                                                        |\n| [`HX-Replace-Url`](../headers/hx-replace-url/index)      | replaces the current URL in the location bar                                                                                                                                               |\n| `HX-Reswap`                                              | allows you to specify how the response will be swapped. See [hx-swap](../attributes/hx-swap/index) for possible values                                                                     |\n| `HX-Retarget`                                            | a CSS selector that updates the target of the content update to a different element on the page                                                                                            |\n| `HX-Reselect`                                            | a CSS selector that allows you to choose which part of the response is used to be swapped in. Overrides an existing [`hx-select`](../attributes/hx-select/index) on the triggering element |\n| [`HX-Trigger`](../headers/hx-trigger/index)              | allows you to trigger client-side events                                                                                                                                                   |\n| [`HX-Trigger-After-Settle`](../headers/hx-trigger/index) | allows you to trigger client-side events after the settle step                                                                                                                             |\n| [`HX-Trigger-After-Swap`](../headers/hx-trigger/index)   | allows you to trigger client-side events after the swap step                                                                                                                               |\n\n## Event Reference\n\n| Event                                                                      | Description                                                                                               |\n|----------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|\n| [`htmx:abort`](../events/index#htmx:abort)                                 | send this event to an element to abort a request                                                          |\n| [`htmx:afterOnLoad`](../events/index#htmx:afterOnLoad)                     | triggered after an AJAX request has completed processing a successful response                            |\n| [`htmx:afterProcessNode`](../events/index#htmx:afterProcessNode)           | triggered after htmx has initialized a node                                                               |\n| [`htmx:afterRequest`](../events/index#htmx:afterRequest)                   | triggered after an AJAX request has completed                                                             |\n| [`htmx:afterSettle`](../events/index#htmx:afterSettle)                     | triggered after the DOM has settled                                                                       |\n| [`htmx:afterSwap`](../events/index#htmx:afterSwap)                         | triggered after new content has been swapped in                                                           |\n| [`htmx:beforeCleanupElement`](../events/index#htmx:beforeCleanupElement)   | triggered before htmx [disables](../attributes/hx-disable/index) an element or removes it from the DOM    |\n| [`htmx:beforeOnLoad`](../events/index#htmx:beforeOnLoad)                   | triggered before any response processing occurs                                                           |\n| [`htmx:beforeProcessNode`](../events/index#htmx:beforeProcessNode)         | triggered before htmx initializes a node                                                                  |\n| [`htmx:beforeRequest`](../events/index#htmx:beforeRequest)                 | triggered before an AJAX request is made                                                                  |\n| [`htmx:beforeSwap`](../events/index#htmx:beforeSwap)                       | triggered before a swap is done, allows you to configure the swap                                         |\n| [`htmx:beforeSend`](../events/index#htmx:beforeSend)                       | triggered just before an ajax request is sent                                                             |\n| [`htmx:configRequest`](../events/index#htmx:configRequest)                 | triggered before the request, allows you to customize parameters, headers                                 |\n| [`htmx:confirm`](../events/index#htmx:confirm)                             | triggered after a trigger occurs on an element, allows you to cancel (or delay) issuing the AJAX request  |\n| [`htmx:historyCacheError`](../events/index#htmx:historyCacheError)         | triggered on an error during cache writing                                                                |\n| [`htmx:historyCacheMiss`](../events/index#htmx:historyCacheMiss)           | triggered on a cache miss in the history subsystem                                                        |\n| [`htmx:historyCacheMissError`](../events/index#htmx:historyCacheMissError) | triggered on a unsuccessful remote retrieval                                                              |\n| [`htmx:historyCacheMissLoad`](../events/index#htmx:historyCacheMissLoad)   | triggered on a successful remote retrieval                                                                |\n| [`htmx:historyRestore`](../events/index#htmx:historyRestore)               | triggered when htmx handles a history restoration action                                                  |\n| [`htmx:beforeHistorySave`](../events/index#htmx:beforeHistorySave)         | triggered before content is saved to the history cache                                                    |\n| [`htmx:load`](../events/index#htmx:load)                                   | triggered when new content is added to the DOM                                                            |\n| [`htmx:noSSESourceError`](../events/index#htmx:noSSESourceError)           | triggered when an element refers to a SSE event in its trigger, but no parent SSE source has been defined |\n| [`htmx:onLoadError`](../events/index#htmx:onLoadError)                     | triggered when an exception occurs during the onLoad handling in htmx                                     |\n| [`htmx:oobAfterSwap`](../events/index#htmx:oobAfterSwap)                   | triggered after an out of band element as been swapped in                                                 |\n| [`htmx:oobBeforeSwap`](../events/index#htmx:oobBeforeSwap)                 | triggered before an out of band element swap is done, allows you to configure the swap                    |\n| [`htmx:oobErrorNoTarget`](../events/index#htmx:oobErrorNoTarget)           | triggered when an out of band element does not have a matching ID in the current DOM                      |\n| [`htmx:prompt`](../events/index#htmx:prompt)                               | triggered after a prompt is shown                                                                         |\n| [`htmx:pushedIntoHistory`](../events/index#htmx:pushedIntoHistory)         | triggered after an url is pushed into history                                                             |\n| [`htmx:responseError`](../events/index#htmx:responseError)                 | triggered when an HTTP response error (non-`200` or `300` response code) occurs                           |\n| [`htmx:sendError`](../events/index#htmx:sendError)                         | triggered when a network error prevents an HTTP request from happening                                    |\n| [`htmx:sseError`](../events/index#htmx:sseError)                           | triggered when an error occurs with a SSE source                                                          |\n| [`htmx:sseOpen`](../events/index#htmx:sseOpen)                             | triggered when a SSE source is opened                                                                     |\n| [`htmx:swapError`](../events/index#htmx:swapError)                         | triggered when an error occurs during the swap phase                                                      |\n| [`htmx:targetError`](../events/index#htmx:targetError)                     | triggered when an invalid target is specified                                                             |\n| [`htmx:timeout`](../events/index#htmx:timeout)                             | triggered when a request timeout occurs                                                                   |\n| [`htmx:validation:validate`](../events/index#htmx:validation:validate)     | triggered before an element is validated                                                                  |\n| [`htmx:validation:failed`](../events/index#htmx:validation:failed)         | triggered when an element fails validation                                                                |\n| [`htmx:validation:halted`](../events/index#htmx:validation:halted)         | triggered when a request is halted due to validation errors                                               |\n| [`htmx:xhr:abort`](../events/index#htmx:xhr:abort)                         | triggered when an ajax request aborts                                                                     |\n| [`htmx:xhr:loadend`](../events/index#htmx:xhr:loadend)                     | triggered when an ajax request ends                                                                       |\n| [`htmx:xhr:loadstart`](../events/index#htmx:xhr:loadstart)                 | triggered when an ajax request starts                                                                     |\n| [`htmx:xhr:progress`](../events/index#htmx:xhr:progress)                   | triggered periodically during an ajax request that supports progress events                               |\n\n## JavaScript API Reference\n\n| Method                                                              | Description                                                                |\n|---------------------------------------------------------------------|----------------------------------------------------------------------------|\n| [`htmx.addClass()`](../api/index#addClass)                          | Adds a class to the given element                                          |\n| [`htmx.ajax()`](../api/index#ajax)                                  | Issues an htmx-style ajax request                                          |\n| [`htmx.closest()`](../api/index#closest)                            | Finds the closest parent to the given element matching the selector        |\n| [`htmx.config`](../api/index#config)                                | A property that holds the current htmx config object                       |\n| [`htmx.createEventSource`](../api/index#createEventSource)          | A property holding the function to create SSE EventSource objects for htmx |\n| [`htmx.createWebSocket`](../api/index#createWebSocket)              | A property holding the function to create WebSocket objects for htmx       |\n| [`htmx.defineExtension()`](../api/index#defineExtension)            | Defines an htmx [extension](../extensions/index)                           |\n| [`htmx.find()`](../api/index#find)                                  | Finds a single element matching the selector                               |\n| [`htmx.findAll()` `htmx.findAll(elt, selector)`](../api/index#find) | Finds all elements matching a given selector                               |\n| [`htmx.logAll()`](../api/index#logAll)                              | Installs a logger that will log all htmx events                            |\n| [`htmx.logger`](../api/index#logger)                                | A property set to the current logger (default is `null`)                   |\n| [`htmx.off()`](../api/index#off)                                    | Removes an event listener from the given element                           |\n| [`htmx.on()`](../api/index#on)                                      | Creates an event listener on the given element, returning it               |\n| [`htmx.onLoad()`](../api/index#onLoad)                              | Adds a callback handler for the `htmx:load` event                          |\n| [`htmx.parseInterval()`](../api/index#parseInterval)                | Parses an interval declaration into a millisecond value                    |\n| [`htmx.process()`](../api/index#process)                            | Processes the given element and its children, hooking up any htmx behavior |\n| [`htmx.remove()`](../api/index#remove)                              | Removes the given element                                                  |\n| [`htmx.removeClass()`](../api/index#removeClass)                    | Removes a class from the given element                                     |\n| [`htmx.removeExtension()`](../api/index#removeExtension)            | Removes an htmx [extension](../extensions/index)                           |\n| [`htmx.takeClass()`](../api/index#takeClass)                        | Takes a class from other elements for the given element                    |\n| [`htmx.toggleClass()`](../api/index#toggleClass)                    | Toggles a class from the given element                                     |\n| [`htmx.trigger()`](../api/index#trigger)                            | Triggers an event on an element                                            |\n| [`htmx.values()`](../api/index#values)                              | Returns the input values associated with the given element                 |\n\n## Configuration Reference\n\nHtmx has some configuration options that can be accessed either programmatically or declaratively. They are listed below:\n\n| Config Variable                       | Info                                                                                                                                                                                                                                                                                                                                              |\n|---------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `htmx.config.historyEnabled`          | defaults to `true`, really only useful for testing                                                                                                                                                                                                                                                                                                |\n| `htmx.config.historyCacheSize`        | defaults to 10                                                                                                                                                                                                                                                                                                                                    |\n| `htmx.config.refreshOnHistoryMiss`    | defaults to `false`, if set to `true` htmx will issue a full page refresh on history misses rather than use an AJAX request                                                                                                                                                                                                                       |\n| `htmx.config.defaultSwapStyle`        | defaults to `innerHTML`                                                                                                                                                                                                                                                                                                                           |\n| `htmx.config.defaultSwapDelay`        | defaults to 0                                                                                                                                                                                                                                                                                                                                     |\n| `htmx.config.defaultSettleDelay`      | defaults to 20                                                                                                                                                                                                                                                                                                                                    |\n| `htmx.config.includeIndicatorStyles`  | defaults to `true` (determines if the indicator styles are loaded)                                                                                                                                                                                                                                                                                |\n| `htmx.config.indicatorClass`          | defaults to `htmx-indicator`                                                                                                                                                                                                                                                                                                                      |\n| `htmx.config.requestClass`            | defaults to `htmx-request`                                                                                                                                                                                                                                                                                                                        |\n| `htmx.config.addedClass`              | defaults to `htmx-added`                                                                                                                                                                                                                                                                                                                          |\n| `htmx.config.settlingClass`           | defaults to `htmx-settling`                                                                                                                                                                                                                                                                                                                       |\n| `htmx.config.swappingClass`           | defaults to `htmx-swapping`                                                                                                                                                                                                                                                                                                                       |\n| `htmx.config.allowEval`               | defaults to `true`, can be used to disable htmx’s use of eval for certain features (e.g. trigger filters)                                                                                                                                                                                                                                         |\n| `htmx.config.allowScriptTags`         | defaults to `true`, determines if htmx will process script tags found in new content                                                                                                                                                                                                                                                              |\n| `htmx.config.inlineScriptNonce`       | defaults to `''`, meaning that no nonce will be added to inline scripts                                                                                                                                                                                                                                                                           |\n| `htmx.config.attributesToSettle`      | defaults to `[\"class\", \"style\", \"width\", \"height\"]`, the attributes to settle during the settling phase                                                                                                                                                                                                                                           |\n| `htmx.config.useTemplateFragments`    | defaults to `false`, HTML template tags for parsing content from the server (not IE11 compatible!)                                                                                                                                                                                                                                                |\n| `htmx.config.wsReconnectDelay`        | defaults to `full-jitter`                                                                                                                                                                                                                                                                                                                         |\n| `htmx.config.wsBinaryType`            | defaults to `blob`, the [the type of binary data](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType) being received over the WebSocket connection                                                                                                                                                                                   |\n| `htmx.config.disableSelector`         | defaults to `[hx-disable], [data-hx-disable]`, htmx will not process elements with this attribute on it or a parent                                                                                                                                                                                                                               |\n| `htmx.config.withCredentials`         | defaults to `false`, allow cross-site Access-Control requests using credentials such as cookies, authorization headers or TLS client certificates                                                                                                                                                                                                 |\n| `htmx.config.timeout`                 | defaults to 0, the number of milliseconds a request can take before automatically being terminated                                                                                                                                                                                                                                                |\n| `htmx.config.scrollBehavior`          | defaults to ‘smooth’, the behavior for a boosted link on page transitions. The allowed values are `auto` and `smooth`. Smooth will smoothscroll to the top of the page while auto will behave like a vanilla link.                                                                                                                                |\n| `htmx.config.defaultFocusScroll`      | if the focused element should be scrolled into view, defaults to false and can be overridden using the [focus-scroll](../attributes/hx-swap/index#focus-scroll) swap modifier.                                                                                                                                                                    |\n| `htmx.config.getCacheBusterParam`     | defaults to false, if set to true htmx will include a cache-busting parameter in `GET` requests to avoid caching partial responses by the browser                                                                                                                                                                                                 |\n| `htmx.config.globalViewTransitions`   | if set to `true`, htmx will use the [View Transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) API when swapping in new content.                                                                                                                                                                                    |\n| `htmx.config.methodsThatUseUrlParams` | defaults to `[\"get\"]`, htmx will format requests with these methods by encoding their parameters in the URL, not the request body                                                                                                                                                                                                                 |\n| `htmx.config.selfRequestsOnly`        | defaults to `false`, if set to `true` will only allow AJAX requests to the same domain as the current document                                                                                                                                                                                                                                    |\n| `htmx.config.ignoreTitle`             | defaults to `false`, if set to `true` htmx will not update the title of the document when a `title` tag is found in new content                                                                                                                                                                                                                   |\n| `htmx.config.scrollIntoViewOnBoost`   | defaults to `true`, whether or not the target of a boosted element is scrolled into the viewport. If `hx-target` is omitted on a boosted element, the target defaults to `body`, causing the page to scroll to the top.                                                                                                                           |\n| `htmx.config.triggerSpecsCache`       | defaults to `null`, the cache to store evaluated trigger specifications into, improving parsing performance at the cost of more memory usage. You may define a simple object to use a never-clearing cache, or implement your own system using a [proxy object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy) |\n\nYou can set them directly in javascript, or you can use a `meta` tag:\n\n``` language-html\n<meta name=\"htmx-config\" content='{\"defaultSwapStyle\":\"outerHTML\"}'>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/reference/](https://htmx.org/reference/)"
- name: The ajax-header Extension
  id: extensions/ajax-header/index
  summary: This header is commonly used by javascript frameworks to differentiate ajax requests from normal http requests
  description: "# The `ajax-header` Extension\n\nThis extension adds the `X-Requested-With` header to requests with the value “XMLHttpRequest”.\n\nThis header is commonly used by javascript frameworks to differentiate ajax requests from normal http requests.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/ajax-header.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<body hx-ext=\"ajax-header\">\n ...\n</body>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/ajax-header/](https://htmx.org/extensions/ajax-header/)"
- name: The alpine-morph Extension
  id: extensions/alpine-morph/index
  summary: Alpine.js now has a lightweight morph plugin and this extension allows you to use it as the swapping mechanism in htmx which is necessary to retain Alpine state when you have entire Alpine components swapped by htmx
  description: "# The `alpine-morph` Extension\n\nAlpine.js now has a lightweight [morph plugin](https://alpinejs.dev/plugins/morph) and this extension allows you to use it as the swapping mechanism in htmx which is necessary to retain Alpine state when you have entire Alpine components swapped by htmx.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/alpine-morph.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<header>\n  <script src=\"https://unpkg.com/htmx.org@latest\"></script>\n  <script src=\"https://unpkg.com/htmx.org@latest/dist/ext/alpine-morph.js\"></script>\n<!-- Alpine Plugins -->\n  <script defer src=\"https://unpkg.com/@alpinejs/morph@3.x.x/dist/cdn.min.js\"></script>\n<!-- Alpine Core -->\n  <script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n</header>\n<body>\n  <div hx-target=\"this\" hx-ext=\"alpine-morph\" hx-swap=\"morph\">\n      <div x-data=\"{ count: 0, replaced: false,\n                     message: 'Change me, then press the button!' }\">\n          <input type=\"text\" x-model=\"message\">\n          <div x-text=\"count\"></div>\n          <button x-bind:style=\"replaced && {'backgroundColor': '#fecaca'}\"\nx-on:click=\"replaced = true; count++\"\nhx-get=\"/swap\">\n            Morph\n          </button>\n      </div>\n  </div>\n</body>\n```\n\nIn the above example, all the Alpine x-data states (count, replaced, and message) are preserved even the entire Alpine component is swapped.\n\nNOTE: `/swap` response from the example above should return actual element that is being replaced (this is `<div hx-target=\"this\"...` element).\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/alpine-morph/](https://htmx.org/extensions/alpine-morph/)"
- name: The class-tools Extension
  id: extensions/class-tools/index
  summary: The class-tools extension allows you to specify CSS classes that will be swapped onto or off of the elements by using a classes or data-classes attribute
  description: "# The `class-tools` Extension\n\nThe `class-tools` extension allows you to specify CSS classes that will be swapped onto or off of the elements by using a `classes` or `data-classes` attribute. This functionality allows you to apply [CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) to your HTML without resorting to javascript.\n\nA `classes` attribute value consists of “runs”, which are separated by an `&` character. All class operations within a given run will be applied sequentially, with the delay specified.\n\nWithin a run, a `,` character separates distinct class operations.\n\nA class operation is an operation name `add`, `remove`, or `toggle`, followed by a CSS class name, optionally followed by a colon `:` and a time delay.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/class-tools.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-ext=\"class-tools\">\n    <div classes=\"add foo\"/> <!-- adds the class \"foo\" after 100ms -->\n    <div class=\"bar\" classes=\"remove bar:1s\"/> <!-- removes the class \"bar\" after 1s -->\n    <div class=\"bar\" classes=\"remove bar:1s, add foo:1s\"/> <!-- removes the class \"bar\" after 1s\n                                                                then adds the class \"foo\" 1s after that -->\n    <div class=\"bar\" classes=\"remove bar:1s & add foo:1s\"/> <!-- removes the class \"bar\" and adds\n                                                                 class \"foo\" after 1s  -->\n    <div classes=\"toggle foo:1s\"/> <!-- toggles the class \"foo\" every 1s -->\n</div>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/class-tools/](https://htmx.org/extensions/class-tools/)"
- name: The client-side-templates Extension
  id: extensions/client-side-templates/index
  summary: This extension supports transforming a JSON/XML request response into HTML via a client-side template before it is swapped into the DOM
  description: "# The `client-side-templates` Extension\n\nThis extension supports transforming a JSON/XML request response into HTML via a client-side template before it is swapped into the DOM. Currently four client-side templating engines are supported:\n\n- [mustache](https://github.com/janl/mustache.js)\n- [handlebars](https://handlebarsjs.com/)\n- [nunjucks](https://mozilla.github.io/nunjucks/)\n- [xslt](https://developer.mozilla.org/en-US/docs/Web/XSLT)\n\nWhen you add this extension on an element, any element below it in the DOM can use one of four attributes named `<template-engine>-template` (e.g. `mustache-template`) with a template ID, and the extension will resolve and render the template the standard way for that template engine:\n\n- `mustache` - looks a mustache \\<script\\> tag up by ID for the template content\n- `handlebars` - looks a handlebars \\<script\\> tag up by ID for the template content\n- `nunjucks` - resolves the template by name via \\`nunjucks.render()\n- `xslt` - looks an XSLT \\<script\\> tag up by ID for the template content\n\nThe AJAX response body will be parsed as JSON/XML and passed into the template rendering.\n\nA second “array” version of each template is now offered, which is particularly helpful for APIs that return arrays of data. These templates are referenced as `<template-engine>-array-template`, and the data is accessed as `data.my_server_field`. At least in the case of `mustache`, it also enables use of loops using the `{{#data}} my_server_field {{/data}}` syntax.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/client-side-templates.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-ext=\"client-side-templates\">\n  <button hx-get=\"/some_json\"\nmustache-template=\"my-mustache-template\">\n     Handle with mustache\n  </button>\n  <button hx-get=\"/some_json\"\nhandlebars-template=\"my-handlebars-template\">\n     Handle with handlebars\n  </button>\n  <button hx-get=\"/some_json\"\nnunjucks-template=\"my-nunjucks-template\">\n     Handle with nunjucks\n  </button>\n  <button hx-get=\"/some_xml\" \nxslt-template=\"my-xslt-template\">\n     Handle with XSLT\n  </button>\n</div>\n```\n\n### Full Mustache HTML Example\n\nTo use the client side template, you will need to include htmx, the extension, and the rendering engine. Here is an example of this setup for Mustache using a [`<template>` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template).\n\n``` language-html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n  <script src=\"https://unpkg.com/htmx.org\"></script>\n  <script src=\"https://unpkg.com/htmx.org/dist/ext/client-side-templates.js\"></script>\n  <script src=\"https://unpkg.com/mustache@latest\"></script>\n</head>\n<body>\n  <div hx-ext=\"client-side-templates\">\n    <button hx-get=\"https://jsonplaceholder.typicode.com/todos/1\"\nhx-swap=\"innerHTML\"\nhx-target=\"#content\"\nmustache-template=\"foo\">\n      Click Me\n    </button>\n    <p id=\"content\">Start</p>\n    <template id=\"foo\">\n      <p> {% raw %}{{userID}}{% endraw %} and {% raw %}{{id}}{% endraw %} and {% raw %}{{title}}{% endraw %} and {% raw %}{{completed}}{% endraw %}</p>\n    </template>\n  </div>\n</body>\n</html>\n```\n\nHere is a [jsbin](https://jsbin.com/qonutovico/edit?html,output) playground to try this out.\n\nHere’s a working example using the `mustache-array-template` working against an API that returns an array:\n\n``` language-html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n  <script src=\"https://unpkg.com/htmx.org\"></script>\n  <script src=\"https://unpkg.com/htmx.org/dist/ext/client-side-templates.js\"></script>\n  <script src=\"https://unpkg.com/mustache@latest\"></script>\n</head>\n<body>\n  <div hx-ext=\"client-side-templates\">\n    <button hx-get=\"https://jsonplaceholder.typicode.com/users\"\nhx-swap=\"innerHTML\"\nhx-target=\"#content\"\nmustache-array-template=\"foo\">\n      Click Me\n    </button>\n    <p id=\"content\">Start</p>\n    <template id=\"foo\">\n      {{#data}}\n      <p> {{name}} at {{email}} is with {{company.name}}</p>\n      {{/data}}\n    </template>\n  </div>\n</body>\n</html>\n```\n\n### Full XSLT HTML Example\n\nTo use the client side template, you will need to include htmx and the extension. Here is an example of this setup for XSLT using a [`<script>` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script).\n\nIf you wish to put a template into another file, you can use a directive such as `<object id=\"template-id\" data=\"my-template.xml\" style=\"position: absolute; bottom: 0px; width: 0px; height: 0px;\">`. Some styling is needed to keep the object visible while not taking any space.\n\n``` language-html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n  <script src=\"https://unpkg.com/htmx.org\"></script>\n  <script src=\"https://unpkg.com/htmx.org/dist/ext/client-side-templates.js\"></script>\n</head>\n<body>\n  <div hx-ext=\"client-side-templates\">\n    <button hx-get=\"http://restapi.adequateshop.com/api/Traveler\"\nhx-swap=\"innerHTML\"\nhx-target=\"#content\"\nxslt-template=\"foo\">\n      Click Me\n   </button>\n    <p id=\"content\">Start</p>\n    <script id=\"foo\" type=\"application/xml\">\n      <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n        <xsl:template match=\"/\">\n          page <xsl:value-of select=\"/TravelerinformationResponse/page\" /> of <xsl:value-of select=\"/TravelerinformationResponse/total_pages\" />\n        </xsl:template>\n      </xsl:stylesheet>\n    </script>\n  </div>\n</body>\n</html>\n```\n\n## CORS and REST/JSON\n\nAs a warning, many web services use CORS protection and/or other protection schemes to reject a REST/JSON request from a web browser - for example, GitHub will issue a CORS error if you try to use the above snippet to access public APIs. This can be frustrating, as a dedicated REST development client may work fine, but the CORS error will appear when running JavaScript. This doesn’t really have anything to do with HTMX (as you’d have the same issues with any JavaScript code), but can be a frustrating surprise.\n\nUnfortunately, the solution will vary depending on the provider of the web service. Depending on what you are trying to do, you may find it easier to rely on your server-side framework to manage/proxy these requests to 3rd parties services.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/client-side-templates/](https://htmx.org/extensions/client-side-templates/)"
- name: The debug Extension
  id: extensions/debug/index
  summary: 'This extension includes log all htmx events for the element it is on, either through the console.debug function or through the console.log function with a DEBUG: prefix'
  description: "# The `debug` Extension\n\nThis extension includes log all htmx events for the element it is on, either through the `console.debug` function or through the `console.log` function with a `DEBUG:` prefix.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/debug.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<button hx-ext=\"debug\">Debug Me...</button>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/debug/](https://htmx.org/extensions/debug/)"
- name: The event-header Extension
  id: extensions/event-header/index
  summary: This extension adds the Triggering-Event header to requests
  description: "# The `event-header` Extension\n\nThis extension adds the `Triggering-Event` header to requests. The value of the header is a JSON serialized version of the event that triggered the request.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/event-header.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<button hx-ext=\"event-header\">\n   Click Me!\n</button>\n```\n\nSends something like this:\n\n``` language-txt\nTriggering-Event: '{ \"isTrusted\": false, \"htmx-internal-data\": { \"handled\": true }, \"screenX\": 0, \"screenY\": 0, \"clientX\": 0, \"clientY\": 0, \"ctrlKey\": false, \"shiftKey\": false, \"altKey\": false, \"metaKey\": false, \"button\": 0, \"buttons\": 0, \"relatedTarget\": null, \"pageX\": 0, \"pageY\": 0, \"x\": 0, \"y\": 0, \"offsetX\": 0, \"offsetY\": 0, \"movementX\": 0, \"movementY\": 0, \"fromElement\": null, \"toElement\": \"button\", \"layerX\": 0, \"layerY\": 0, \"view\": \"Window\", \"detail\": 0, \"sourceCapabilities\": null, \"which\": 1, \"NONE\": 0, \"CAPTURING_PHASE\": 1, \"AT_TARGET\": 2, \"BUBBLING_PHASE\": 3, \"type\": \"click\", \"target\": \"button\", \"currentTarget\": \"button\", \"eventPhase\": 2, \"bubbles\": true, \"cancelable\": true, \"defaultPrevented\": true, \"composed\": true, \"timeStamp\": 188.86999995447695, \"srcElement\": \"button\", \"returnValue\": false, \"cancelBubble\": false, \"path\": [ \"button\", \"div#work-area\", \"body\", \"html\", \"Node\", \"Window\" ] }'\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/event-header/](https://htmx.org/extensions/event-header/)"
- name: The head-support Extension
  id: extensions/head-support/index
  summary: The head-support extension adds support for head tags in responses to htmx requests
  description: "# The `head-support` Extension\n\nThe `head-support` extension adds support for [head tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head) in responses to htmx requests.\n\nhtmx began as a library focused on *partial replacement* of HTML within the `body` tag. As such, merging additional information such as the head tag was not a focus of the library. (This is in contrast with, for example, TurboLinks, which was focused on merging entire web pages retrieved via AJAX into the browser.)\n\nThe [`hx-boost`](../../attributes/hx-boost/index) attribute moved htmx closer to this world of full HTML-document support & support for extracting the `title` tag out of head elements was eventually added, but full head tag support has never been a feature of the library.\n\nThis extension addresses that shortcoming & will likely be integrated into htmx for the 2.0 release.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/head-support.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<body hx-ext=\"head-support\">\n   ...\n```\n\nWith this installed, all responses that htmx receives that contain a `head` tag in them (even if they are not complete HTML documents with a root `<html>` element) will be processed.\n\nHow the head tag is handled depends on the type of htmx request.\n\nIf the htmx request is from a boosted element, then the following merge algorithm is used:\n\n- Elements that exist in the current head as exact textual matches will be left in place\n- Elements that do not exist in the current head will be added at the end of the head tag\n- Elements that exist in the current head, but not in the new head will be removed from the head\n\nIf the htmx request is from a non-boosted element, then all content will be *appended* to the existing head element.\n\nIf you wish to override this behavior in either case, you can place the `hx-head` attribute on the new `<head>` tag, with either of the following two values:\n\n- `merge` - follow the merging algorithm outlined above\n- `append` - append the elements to the existing head\n\n### Controlling Merge Behavior\n\nBeyond this, you may also control merging behavior of individual elements with the following attributes:\n\n- If you place `hx-head=\"re-eval\"` on a head element, it will be re-added (removed and appended) to the head tag on every request, even if it already exists. This can be useful to execute a script on every htmx request, for example.\n- If you place `hx-preserve=\"true\"` on an element, it will never be removed from the head\n\n### Example\n\nAs an example, consider the following head tag in an existing document:\n\n``` language-html\n<head>\n    <link rel=\"stylesheet\" href=\"https://the.missing.style\">\n    <link rel=\"stylesheet\" href=\"/css/site1.css\">\n    <script src=\"/js/script1.js\"></script>\n    <script src=\"/js/script2.js\"></script>\n</head>\n```\n\nIf htmx receives a request containing this new head tag:\n\n``` language-html\n<head>\n    <link rel=\"stylesheet\" href=\"https://the.missing.style\">\n    <link rel=\"stylesheet\" href=\"/css/site2.css\">\n    <script src=\"/js/script2.js\"></script>\n    <script src=\"/js/script3.js\"></script>\n</head>\n```\n\nThen the following operations will occur:\n\n- `<link rel=\"stylesheet\" href=\"https://the.missing.style\">` will be left alone\n- `<link rel=\"stylesheet\" href=\"/css/site1.css\">` will be removed from the head\n- `<link rel=\"stylesheet\" href=\"/css/site2.css\">` will be added to the head\n- `<script src=\"/js/script1.js\"></script>` will be removed from the head\n- `<script src=\"/js/script2.js\"></script>` will be left alone\n- `<script src=\"/js/script3.js\"></script>` will be added to the head\n\nThe final head element will look like this:\n\n``` language-html\n<head>\n    <link rel=\"stylesheet\" href=\"https://the.missing.style\">\n    <script src=\"/js/script2.js\"></script>\n    <link rel=\"stylesheet\" href=\"/css/site2.css\">\n    <script src=\"/js/script3.js\"></script>\n</head>\n```\n\n## Events\n\nThis extension triggers the following events:\n\n- `htmx:removingHeadElement` - triggered when a head element is about to be removed, with the element being removed available in `event.detail.headElement`. If `preventDefault()` is invoked on the event, the element will not be removed.\n- `htmx:addingHeadElement` - triggered when a head element is about to be added, with the element being added available in `event.detail.headElement`. If `preventDefault()` is invoked on the event, the element will not be added.\n- `htmx:afterHeadMerge` - triggered after a head tag merge has occurred, with the following values available in the event `detail`:\n  - `added` - added head elements\n  - `kept` - kept head elements\n  - `removed` - removed head elements\n- `htmx:beforeHeadMerge` - triggered before a head merge occurs\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/head-support/](https://htmx.org/extensions/head-support/)"
- name: The include-vals Extension
  id: extensions/include-vals/index
  summary: The include-vals extension allows you to programmatically include values in a request with a include-vals attribute
  description: "# The `include-vals` Extension\n\nThe `include-vals` extension allows you to programmatically include values in a request with a `include-vals` attribute. The value of this attribute is one or more name/value pairs, which will be evaluated as the fields in a javascript object literal.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/include-vals.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-ext=\"include-vals\">\n    <div hx-get=\"/test\" include-vals=\"included:true, computed: computeValue()\">\n      Will Include Additional Values\n    </div>\n</div>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/include-vals/](https://htmx.org/extensions/include-vals/)"
- name: The json-enc Extension
  id: extensions/json-enc/index
  summary: This extension encodes parameters in JSON format instead of url format
  description: "# The `json-enc` Extension\n\nThis extension encodes parameters in JSON format instead of url format.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/json-enc.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-post='/test' hx-ext='json-enc'>click me</div>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/json-enc/](https://htmx.org/extensions/json-enc/)"
- name: The loading-states Extension
  id: extensions/loading-states/index
  summary: This extension allows you to easily manage loading states while a request is in flight, including disabling elements, and adding and removing CSS classes
  description: "# The `loading-states` Extension\n\nThis extension allows you to easily manage loading states while a request is in flight, including disabling elements, and adding and removing CSS classes.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/loading-states.js\"></script>\n```\n\n## Usage\n\nAdd the `hx-ext=\"loading-states\"` attribute to the body tag or to any parent element containing your htmx attributes.\n\nAdd the following class to your stylesheet to make sure elements are hidden by default:\n\n``` language-css\n[data-loading] {\n  display: none;\n}\n```\n\n## Supported attributes\n\n- `data-loading`\n\n  Shows the element. The default style is `inline-block`, but it’s possible to use any display style by specifying it in the attribute value.\n\n  ``` language-html\n  <div data-loading>loading</div>\n  <div data-loading=\"block\">loading</div>\n  <div data-loading=\"flex\">loading</div>\n  ```\n\n- `data-loading-class`\n\n  Adds, then removes, CSS classes to the element:\n\n  ``` language-html\n  <div class=\"transition-all ease-in-out duration-600\" data-loading-class=\"bg-gray-100 opacity-80\">\n  ...\n  </div>\n  ```\n\n- `data-loading-class-remove`\n\n  Removes, then adds back, CSS classes from the element.\n\n  ``` language-html\n  <div class=\"p-8 bg-gray-100 transition-all ease-in-out duration-600\" data-loading-class-remove=\"bg-gray-100\">\n  ...\n  </div>\n  ```\n\n- `data-loading-disable`\n\n  Disables an element for the duration of the request.\n\n  ``` language-html\n  <button data-loading-disable>Submit</button>\n  ```\n\n- `data-loading-aria-busy`\n\n  Add [`aria-busy=\"true\"`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy) attribute to the element for the duration of the request\n\n  ``` language-html\n  <button data-loading-aria-busy>Submit</button>\n  ```\n\n- `data-loading-delay`\n\n  Some actions may update quickly and showing a loading state in these cases may be more of a distraction. This attribute ensures that the loading state changes are applied only after 200ms if the request is not finished. The default delay can be modified through the attribute value and expressed in milliseconds:\n\n  ``` language-html\n  <button type=\"submit\" data-loading-disable data-loading-delay=\"1000\">Submit</button>\n  ```\n\n  You can place the `data-loading-delay` attribute directly on the element you want to disable, or in any parent element.\n\n- `data-loading-target`\n\n  Allows setting a different target to apply the loading states. The attribute value can be any valid CSS selector. The example below disables the submit button and shows the loading state when the form is submitted.\n\n  ``` language-html\n  <form hx-post=\"/save\"\n  data-loading-target=\"#loading\"\n  data-loading-class-remove=\"hidden\">\n    <button type=\"submit\" data-loading-disable>Submit</button>\n  </form>\n  <div id=\"loading\" class=\"hidden\">Loading ...</div>\n  ```\n\n- `data-loading-path`\n\n  Allows filtering the processing of loading states only for specific requests based on the request path.\n\n  ``` language-html\n  <form hx-post=\"/save\">\n    <button type=\"submit\" data-loading-disable data-loading-path=\"/save\">Submit</button>\n  </form>\n  ```\n\n  You can place the `data-loading-path` attribute directly on the loading state element, or in any parent element.\n\n  ``` language-html\n  <form hx-post=\"/save\" data-loading-path=\"/save\">\n    <button type=\"submit\" data-loading-disable>Submit</button>\n  </form>\n  ```\n\n- `data-loading-states`\n\n  This attribute is optional and it allows defining a scope for the loading states so only elements within that scope are processed.\n\n  ``` language-html\n  <div data-loading-states>\n    <div hx-get=\"\"></div>\n    <div data-loading>loading</div>\n  </div>\n  <div data-loading-states>\n    <div hx-get=\"\"></div>\n    <div data-loading>loading</div>\n  </div>\n  <form data-loading-states hx-post=\"\">\n    <div data-loading>loading</div>\n  </form>\n  ```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/loading-states/](https://htmx.org/extensions/loading-states/)"
- name: The method-override Extension
  id: extensions/method-override/index
  summary: This extension makes non-GET and POST requests use a POST with the X-HTTP-Method-Override header set to the actual HTTP method
  description: "# The `method-override` Extension\n\nThis extension makes non-`GET` and `POST` requests use a `POST` with the `X-HTTP-Method-Override` header set to the actual HTTP method. This is necessary when dealing with some firewall or proxy situations.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/method-override.js\"></script>\n```\n\n### Usage\n\n``` language-html\n<body hx-ext=\"method-override\">\n   <button hx-put=\"/update\">\n     This request will be made as a POST w/ the X-HTTP-Method-Override Header Set\n</button>\n</body>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/method-override/](https://htmx.org/extensions/method-override/)"
- name: The morphdom-swap Extension
  id: extensions/morphdom-swap/index
  summary: This extension allows you to use the morphdom library as the swapping mechanism in htmx
  description: "# The `morphdom-swap` Extension\n\nThis extension allows you to use the [morphdom](https://github.com/patrick-steele-idem/morphdom) library as the swapping mechanism in htmx.\n\nThe `morphdom` library does not support morph element to multiple elements. If the result of `hx-select` is more than one element, it will pick the first one.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/morphdom-swap.js\"></script>\n```\n\n### Usage\n\n``` language-html\n<header>\n  <script src=\"lib/morphdom-umd.js\"></script> <!-- include the morphdom library -->\n</header>\n<body hx-ext=\"morphdom-swap\">\n   <button hx-swap=\"morphdom\">This button will be swapped with morphdom!</button>\n</body>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/morphdom-swap/](https://htmx.org/extensions/morphdom-swap/)"
- name: The multi-swap Extension
  id: extensions/multi-swap/index
  summary: This extension allows you to swap multiple elements marked with the id attribute from the HTML response
  description: "# The `multi-swap` Extension\n\nThis extension allows you to swap multiple elements marked with the `id` attribute from the HTML response. You can also choose for each element which [swap method](../../docs/index#swapping) should be used.\n\nMulti-swap can help in cases where OOB ([Out of Band Swaps](../../docs/index#oob_swaps)) is not enough for you. OOB requires HTML tags marked with `hx-swap-oob` attributes to be at the TOP level of HTML, which significantly limited its use. With OOB, it’s impossible to swap multiple elements arbitrarily placed and nested in the DOM tree.\n\nIt is a very powerful tool in conjunction with `hx-boost` and `preload` extension.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/multi-swap.js\"></script>\n```\n\n## Usage\n\n1.  Set `hx-ext=\"multi-swap\"` attribute on `<body>`, on some parent element, or on each action element that should trigger an action (typically anchors or buttons).\n2.  On your action elements set `hx-swap=\"multi:ID-SELECTORS\"`, e.g. `hx-swap=\"multi:#id1,#id2:outerHTML,#id3:afterend\"`.\n3.  If you’re not using e.g. `hx-get` to enable HTMX behavior, set `hx-boost=\"true\"` on your action elements, or on some parent element, so that all elements inherit the hx-boost setting.\n\nSelectors must be separated by a comma (without surrounding spaces) and a colon with the desired swap method can optionally be placed after the selector. Default swap method is `innerHTML`.\n\n``` language-html\n<body hx-boost=\"true\" hx-ext=\"multi-swap\">\n<!-- simple example how to swap #id1 and #id2 from /example by innerHTML (default swap method) -->\n   <button hx-get=\"/example\" hx-swap=\"multi:#id1,#id2\">Click to swap #id1 and #id2 content</button>\n<!-- advanced example how to swap multiple elements from /example by different swap methods -->\n   <a href=\"/example\" hx-swap=\"multi:#id1,#id2:outerHTML,#id3:beforeend,#id4:delete\">Click to swap #id1 and #id2, extend #id3 content and delete #id4 element</a>\n   <div id=\"id1\">Old 1 content</div>\n   <div id=\"id2\">Old 2 content</div>\n   <div id=\"id3\">Old 3 content</div>\n   <div id=\"id4\">Old 4 content</div>\n</body>\n```\n\n**Real world example with preloading**\n\nThe use case below shows how to ensure that only the `#submenu` and `#content` elements are redrawn when the main menu items are clicked. Thanks to the combination with the preload extension, the page, including its images, is preloaded on `mouseover` event.\n\n``` language-html\n<head>\n  <script src=\"/path/to/htmx.js\"></script>\n  <script src=\"/path/to/ext/multi-swap.js\"></script>\n  <script src=\"/path/to/ext/preload.js\"></script>\n</head>\n<body hx-ext=\"multi-swap,preload\">\n  <header>...</header>\n  <menu hx-boost=\"true\">\n    <ul>\n      <li><a href=\"/page-1\" hx-swap=\"multi:#submenu,#content\" preload=\"mouseover\" preload-images=\"true\">Page 1</a></li>\n      <li><a href=\"/page-2\" hx-swap=\"multi:#submenu,#content\" preload=\"mouseover\" preload-images=\"true\">Page 2</a></li>\n    </ul>\n    <div id=\"submenu\">... submenu contains items by selected top-level menu ...</div>\n  <menu>\n  <main id=\"content\">...</div>\n  <footer>...</footer>\n</body>\n```\n\n### Notes and limitations\n\n- Attribute `hx-swap` value **must not contain spaces**, otherwise only the part of the value up to the first space will be accepted.\n- If the `delete` swap method is used, the HTML response must also contain deleted element (it can be empty div with `id` attribute).\n- Only elements with an `id` selector are supported, as the function internally uses OOB internal method. So it is not possible to use `class` or any other selectors.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/multi-swap/](https://htmx.org/extensions/multi-swap/)"
- name: The path-deps Extension
  id: extensions/path-deps/index
  summary: This extension supports expressing inter-element dependencies based on paths, inspired by the intercooler.js dependencies mechanism
  description: "# The `path-deps` Extension\n\nThis extension supports expressing inter-element dependencies based on paths, inspired by the [intercooler.js dependencies mechanism](http://intercoolerjs.org/docs.html#dependencies). When this extension is installed an element can express a dependency on another path by using the `path-deps` property and then setting `hx-trigger` to `path-deps`:\n\n``` language-html\n  <div hx-get=\"/example\"\nhx-trigger=\"path-deps\"\npath-deps=\"/foo/bar\">...</div>\n```\n\nThis div will fire a `GET` request to `/example` when any other element issues a mutating request (that is, a non-`GET` request like a `POST`) to `/foo/bar` or any sub-paths of that path.\n\nYou can use a `*` to match any path component:\n\n``` language-html\n  <div hx-get=\"/example\"\nhx-trigger=\"path-deps\"\npath-deps=\"/contacts/*\">...</div>\n```\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/path-deps.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-ext='path-deps'>\n  <ul hx-get=\"/list\" hx-trigger=\"path-deps\" path-deps=\"/list\">\n  </ul>\n  <button hx-post=\"/list\">\n     Post To List\n  </button>\n</div>\n```\n\n### Javascript API\n\n#### Method - `PathDeps.refresh()`\n\nThis method manually triggers a refresh for the given path.\n\n##### Parameters\n\n- `path` - the path to refresh\n\n##### Example\n\n``` language-js\n// Trigger a refresh on all elements with the path-deps attribute '/path/to/refresh', including elements with a parent path, e.g. '/path'\nPathDeps.refresh('/path/to/refresh');\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/path-deps/](https://htmx.org/extensions/path-deps/)"
- name: The path-params Extension
  id: extensions/path-params/index
  summary: This extension uses request parameters to populate path variables
  description: "# The `path-params` Extension\n\nThis extension uses request parameters to populate path variables. Used parameters are removed so they won’t be sent in the query string or body anymore.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/path-params.js\">\n```\n\n## Usage\n\nThis would invoke URL `/items/42?foo=bar`\n\n``` language-html\n<div hx-ext=\"path-params\">\n    <a hx-get=\"/items/{itemId}\" hx-vals='{\"itemId\": \"42\", \"foo\": \"bar\"}'>test</div>\n</div>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/path-params/](https://htmx.org/extensions/path-params/)"
- name: The preload Extension
  id: extensions/preload/index
  summary: The preload extension allows you to load HTML fragments into your browser’s cache before they are requested by the user, so that additional pages appear to users to load nearly instantaneously
  description: "# The `preload` Extension\n\nThe `preload` extension allows you to load HTML fragments into your browser’s cache before they are requested by the user, so that additional pages appear to users to load nearly instantaneously. As a developer, you can customize its behavior to fit your applications needs and use cases.\n\n**IMPORTANT:** Preloading content judiciously can improve your web application’s perceived performance, but preloading too many resources can negatively impact your visitors’ bandwidth and your server performance by initiating too many unused requests. Use this extension carefully!\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/preload.js\"></script>\n```\n\n## Usage\n\nRegister the extension with htmx using the `hx-ext` attribute. Then, add a `preload` attribute to any hyperlinks and `hx-get` elements you want to preload. By default, resources will be loaded as soon as the `mousedown` event begins, giving your application a roughly 100-200ms head start on serving responses. See configuration below for other options.\n\n``` language-html\n<body hx-ext=\"preload\">\n    <h1>What Works</h2>\n    <a href=\"/server/1\" preload>WILL BE requested using a standard XMLHttpRequest() and default options (below)</a>\n    <button hx-get=\"/server/2\" preload>WILL BE requested with additional htmx headers.</button>\n    <h1>What WILL NOT WORK</h1>\n    <a href=\"/server/3\">WILL NOT be preloaded because it does not have an explicit \"preload\" attribute</a>\n    <a hx-post=\"/server/4\" preload>WILL NOT be preloaded because it is an HX-POST transaction.</a>\n</body>\n```\n\n### Inheriting Preload Settings\n\nYou can add the `preload` attribute to the top-level element that contains several `<a href=\"\">` or `hx-get=\"\"` elements, and all of them will be preloaded. Be careful with this setting, because you can end up wasting bandwidth if you preload many more resources than you need.\n\n``` language-html\n<body hx-ext=\"preload\">\n    <ul preload>\n        <li><a href=\"/server/1\">This will be preloaded because of the attribute in the node above.</a>\n        <li><a href=\"/server/2\">This will also be preloaded for the same reason.</a>\n        <li><a href=\"/server/3\">This will be preloaded, too.  Lorem ipsum.</a>\n    </ul>\n</body>\n```\n\n### Preloading of Linked Images\n\nAfter an HTML page (or page fragment) is preloaded, this extension can also preload linked image resources. It will not load or run linked Javascript or Cascading Stylesheet content, whether linked or embedded in the preloaded HTML. To preload images as well, use the following syntax.\n\n``` language-html\n<div hx-ext=\"preload\">\n    <a href=\"/my-next-page\" preload=\"mouseover\" preload-images=\"true\">Next Page</a>\n</div>\n```\n\n### Configuration\n\nDefaults for this extension are chosen to balance users’ perceived performance with potential load on your servers from unused requests. As a developer, you can modify two settings to customize this behavior to your specific use cases.\n\n#### preload=“mousedown” (DEFAULT)\n\nThe default behavior for this extension is to begin loading a resource when the user presses the mouse down. This is a conservative setting that guarantees the user actually intends to use the linked resource. Because user click events typically take 100-200ms to complete, this setting gives your server a significant headstart compared with a regular click.\n\n``` language-html\n<a href=\"/server/1\" preload=\"mousedown\">This will be preloaded when the user begins to click.</a>\n```\n\n#### preload=“mouseover”\n\nTo preload links more aggressively, you can trigger the preload to happen when the user’s mouse hovers over the link instead. To prevent many resources from being loaded when the user scrolls or moves the mouse across a large list of objects, a 100ms delay is built in to this action. If the user’s mouse leaves the element *before* this timeout expires, then the resource is not preloaded.\n\nTypical users hover over links for several hundred milliseconds before they click, which gives your server even more time to respond to the request than the `mousedown` option above. [Test your own hover timing here.](http://instantclick.io/click-test). However, be careful when using this option because it can increase server load by requesting resources unnecessarily.\n\n``` language-html\n<a href=\"/server/1\" preload=\"mouseover\">This will be preloaded when the user's mouse remains over it for more than 100ms.</a>\n```\n\n#### preload=“custom-event-name”\n\nPreload can also listen to any custom event within the system, triggering resources to be preloaded (if they have not already been cached by the browser). The extension itself generates an event called `preload:init` that can be used to trigger preloads as soon as an object has been processed by htmx.\n\n``` language-html\n<body hx-ext=\"preload\">\n    <button hx-get=\"/server\" preload=\"preload:init\" hx-target=\"idLoadMore\">Load More</a>\n    <div id=\"idLoadMore\">\n        Content for this DIV will be preloaded as soon as the page is ready.\n        Clicking the button above will swap it into the DOM.\n    </div>\n</body>\n```\n\n### About Touch Events\n\nTo accommodate touchscreen devices, an additional `ontouchstart` event handler is added whenever you specify a `mouseover` or `mousedown` trigger. This extra trigger fires immediately (no waiting period) whenever the user touches the screen, saving you 300ms of waiting time on Android, and 450ms on iOS.\n\n### Limitations\n\n- Links must be marked with a `preload` attribute, or have an ancestor node that has the `preload` attribute.\n- Only `GET` transactions (including `<a href=\"\">` and `hx-get=\"\"`) can be preloaded. Following REST principles, `GET` transactions are assumed to not make any significant changes to a resource. Transactions that can potentially make a change (such as `POST`, `PUT`, and `DELETE`) will not be preloaded under any circumstances.\n- When listening to `mouseover` events, preload waits for 100ms before downloading the linked resource. If the mouse leaves the resource before this timeout expires, the resource is not preloaded.\n- Preloaded responses will only be cached in the browser if the response headers allow it. For example, the response header `Cache-Control: private, max-age=60` allows the browser to cache the response, whereas `Cache-Control: no-cache` prevents it.\n\n## Credits\n\nThe behavior for this plugin was inspired by the work done by [Alexandre Dieulot](https://github.com/dieulot) on [InstantClick](http://instantclick.io/), which is released under the MIT license.\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/preload/](https://htmx.org/extensions/preload/)"
- name: The remove-me Extension
  id: extensions/remove-me/index
  summary: The remove-me extension allows you to remove an element after a specified interval
  description: "# The `remove-me` Extension\n\nThe `remove-me` extension allows you to remove an element after a specified interval.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/remove-me.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-ext=\"remove-me\">\n<!-- Removes this div after 1 second -->\n    <div remove-me=\"1s\">To Be Removed...</div>\n</div>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/remove-me/](https://htmx.org/extensions/remove-me/)"
- name: The response-targets Extension
  id: extensions/response-targets/index
  summary: This extension allows you to specify different target elements to be swapped when different HTTP response codes are received
  description: "# The `response-targets` Extension\n\nThis extension allows you to specify different target elements to be swapped when different HTTP response codes are received.\n\nIt uses attribute names in a form of `hx-target-[CODE]` where `[CODE]` is a numeric HTTP response code with the optional wildcard character at its end. You can also use `hx-target-error`, which handles both 4xx and 5xx response codes.\n\nThe value of each attribute can be:\n\n- A CSS query selector of the element to target.\n- `this` which indicates that the element that the `hx-target` attribute is on is the target.\n- `closest <CSS selector>` which will find the closest parent ancestor that matches the given CSS selector (e.g. `closest tr` will target the closest table row to the element).\n- `find <CSS selector>` which will find the first child descendant element that matches the given CSS selector.\n- `next <CSS selector>` which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. `next .error` will target the closest following sibling element with `error` class)\n- `previous <CSS selector>` which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g `previous .error` will target the closest previous sibling with `error` class)\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/response-targets.js\"></script>\n```\n\n## Configure (optional)\n\n- When `HX-Retarget` response header is received it disables any lookup that would be performed by this extension but any responses with error status codes will be swapped (normally they would not be, even with target set via header) and internal error flag (`isError`) will be modified. You may change this and choose to ignore `HX-Retarget` header when `hx-target-…` is in place by setting a configuration flag `htmx.config.responseTargetPrefersRetargetHeader` to `false` (default is `true`). Note that this extension only performs a simple check whether the header is set and target exists. It is not extracting target’s value from the header but trusts it was set by HTMX core logic.\n\n- Normally, any target which is already established by HTMX built-in functions or extensions called before will be overwritten if a matching `hx-target-…` tag is found. You may change it by using a configuration flag `htmx.config.responseTargetPrefersExisting` to `true` (default is `false`). This is kinky and risky option. It has a real-life applications similar to a skilled, full-stack tardigrade eating parentheses when no one is watching.\n\n- `isError` flag on the `detail` member of an event associated with swapping the content with `hx-target-[CODE]` will be set to `false` when error response code is received. This is different from the default behavior. You may change this by setting a configuration flag `htmx.config.responseTargetUnsetsError` to `false` (default is `true`).\n\n- `isError` flag on the `detail` member of an event associated with swapping the content with `hx-target-[CODE]` will be set to `false` when non-erroneous response code is received. This is no different from the default behavior. You may change this by setting a configuration flag `htmx.config.responseTargetSetsError` to `true` (default is `false`). This setting will not affect the response code 200 since it is not handled by this extension.\n\n## Usage\n\nHere is an example that targets a `div` for normal (200) response but another `div` for 404 (not found) response, and yet another for all 5xx response codes:\n\n``` language-html\n<div hx-ext=\"response-targets\">\n    <div id=\"response-div\"></div>\n    <button hx-post=\"/register\"\nhx-target=\"#response-div\"\nhx-target-5*=\"#serious-errors\"\nhx-target-404=\"#not-found\">\n        Register!\n    </button>\n    <div id=\"serious-errors\"></div>\n    <div id=\"not-found\"></div>\n</div>\n```\n\n- The response from the `/register` URL will replace contents of the `div` with the `id` `response-div` when response code is 200 (OK).\n\n- The response from the `/register` URL will replace contents of the `div` with the `id` `serious-errors` when response code begins with a digit 5 (server errors).\n\n- The response from the `/register` URL will replace contents of the `div` with the `id` `not-found` when response code is 404 (Not Found).\n\nSometimes you may not want to handle 5xx and 4xx errors separately, in which case you can use `hx-target-error`:\n\n``` language-html\n<div hx-ext=\"response-targets\">\n    <div id=\"response-div\"></div>\n    <button hx-post=\"/register\"\nhx-target=\"#response-div\"\nhx-target-error=\"#any-errors\">\n        Register!\n    </button>\n    <div id=\"any-errors\"></div>\n</div>\n```\n\n2xx codes will be handled as in the previous example. However, when the response code is 5xx or 4xx, the response from `/register` will replace the contents of the `div` with the `id` `any-errors`.\n\n## Wildcard resolution\n\nWhen status response code does not match existing `hx-target-[CODE]` attribute name then its numeric part expressed as a string is trimmed with last character being replaced with the asterisk (`*`). This lookup process continues until the attribute is found or there are no more digits.\n\nFor example, if a browser receives 404 error code, the following attribute names will be looked up (in the given order):\n\n- `hx-target-404`\n- `hx-target-40*`\n- `hx-target-4*`\n- `hx-target-*`.\n\n*If you are using tools that do not support asterisks in HTML attributes, you may instead use the `x` character, e.g., `hx-target-4xx`.*\n\n## Notes\n\n- `hx-target-…` is inherited and can be placed on a parent element.\n- `hx-target-…` cannot be used to handle HTTP response code 200.\n- `hx-target-…` will honor `HX-Retarget` by default and will prefer it over any calculated target but it can be changed by disabling the `htmx.config.responseTargetPrefersRetargetHeader` configuration option.\n- To avoid surprises the `hx-ext` attribute used to enable this extension should be placed on a parent element containing elements with `hx-target-…` and `hx-target` attributes.\n\n## See also\n\n- [`hx-target`](../../attributes/hx-target/index), specifies the target element to be swapped\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/response-targets/](https://htmx.org/extensions/response-targets/)"
- name: The restored Extension
  id: extensions/restored/index
  summary: This extension triggers an event restored whenever a back button even is detected while using hx-boost
  description: "# The `restored` Extension\n\nThis extension triggers an event `restored` whenever a back button even is detected while using `hx-boost`.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/restored.js\"></script>\n```\n\n## Usage\n\nA page utilizing `hx-boost` that will reload the `h1` each time the back button is pressed:\n\n``` language-html\n<body hx-boost=\"true\">\n    <h1 hx-ext=\"restored\" hx-trigger=\"restored\" hx-get=\"/header\">Come back!</h1>\n    <a href=\"/other_page\">I'll be back</a>\n</body>\n```\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/restored/](https://htmx.org/extensions/restored/)"
- name: The server-sent-events Extension
  id: extensions/server-sent-events/index
  summary: The Server Sent Events connects to an EventSource directly from HTML
  description: "# The `server-sent-events` Extension\n\nThe `Server Sent Events` connects to an [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) directly from HTML. It manages the connections to your web server, listens for server events, and then swaps their contents into your htmx webpage in real-time.\n\nSSE is a lightweight alternative to WebSockets that works over existing HTTP connections, so it is easy to use through proxy servers and firewalls. Remember, SSE is a uni-directional service, so you cannot send any messages to an SSE server once the connection has been established. If you need bi-directional communication, then you should consider using [WebSockets](../web-sockets/index) instead.\n\nThis extension replaces the experimental `hx-sse` attribute built into previous versions of htmx. For help migrating from older versions, see the migration guide at the bottom of this page.\n\nUse the following attributes to configure how SSE connections behave:\n\n- `sse-connect=\"<url>\"` - The URL of the SSE server.\n- `sse-swap=\"<message-name>\"` - The name of the message to swap into the DOM.\n- `hx-trigger=\"sse:<message-name>\"` - SSE messages can also trigger HTTP callbacks using the [`hx-trigger`](../../attributes/hx-trigger/index) attribute.\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/sse.js\"></script>\n```\n\n## Usage\n\n``` language-html\n  <div hx-ext=\"sse\" sse-connect=\"/chatroom\" sse-swap=\"message\">\n      Contents of this box will be updated in real time\n      with every SSE message received from the chatroom.\n  </div>\n```\n\n### Connecting to an SSE Server\n\nTo connect to an SSE server, use the `hx-ext=\"sse\"` attribute to install the extension on that HTML element, then add `sse-connect=\"<url>\"` to the element to make the connection.\n\nWhen designing your server application, remember that SSE works just like any HTTP request. Although you cannot send any messages to the server after you have established a connection, you can send parameters to the server along with your request. So, instead of making an SSE connection to your server at `https://my-server/chat-updates` you can also connect to `https://my-server/chat-updates?friends=true&format=detailed`. This allows your server to customize its responses to what your client needs.\n\n### Receiving Named Events\n\nSSE messages consist of an event name and a data packet. No other metadata is allowed in the message. Here is an example:\n\n``` language-txt\nevent: EventName\ndata: <div>Content to swap into your HTML page.</div>\n```\n\nWe’ll use the `sse-swap` attribute to listen for this event and swap its contents into our webpage.\n\n``` language-html\n<div hx-ext=\"sse\" sse-connect=\"/event-source\" sse-swap=\"EventName\"></div>\n```\n\nNotice that the name `EventName` from the server’s message must match the value in the `sse-swap` attribute. Your server can use as many different event names as necessary, but be careful: browsers can only listen for events that have been explicitly named. So, if your server sends an event named `ChatroomUpdate` but your browser is only listening for events named `ChatUpdate` then the extra event will be discarded.\n\n### Receiving Unnamed Events\n\nSSE messages can also be sent without any event name. In this case, the browser uses the default name `message` in its place. The same rules specified above still apply. If your server sends an unnamed message, then you must listen for it by including `sse-swap=\"message\"`. There is no option for using a catch-all name. Here’s how this looks:\n\n``` language-txt\ndata: <div>Content to swap into your HTML page.</div>\n```\n\n``` language-html\n<div hx-ext=\"sse\" sse-connect=\"/event-source\" sse-swap=\"message\"></div>\n```\n\n### Receiving Multiple Events\n\nYou can also listen to multiple events (named or unnamed) from a single EventSource. Listeners must be either 1) the same element that contains the `hx-ext` and `sse-connect` attributes, or 2) child elements of the element containing the `hx-ext` and `sse-connect` attributes.\n\n``` language-html\nMultiple events in the same element\n<div hx-ext=\"sse\" sse-connect=\"/server-url\" sse-swap=\"event1,event2\"></div>\nMultiple events in different elements (from the same source).\n<div hx-ext=\"sse\" sse-connect=\"/server-url\">\n    <div sse-swap=\"event1\"></div>\n    <div sse-swap=\"event2\"></div>\n</div>\n```\n\n### Trigger Server Callbacks\n\nWhen a connection for server sent events has been established, child elements can listen for these events by using the special [`hx-trigger`](../../attributes/hx-trigger/index) syntax `sse:<event_name>`. This, when combined with an `hx-get` or similar will trigger the element to make a request.\n\nHere is an example:\n\n``` language-html\n  <div hx-ext=\"sse\" sse-connect=\"/event_stream\">\n    <div hx-get=\"/chatroom\" hx-trigger=\"sse:chatter\">\n      ...\n    </div>\n  </div>\n```\n\nThis example establishes an SSE connection to the `event_stream` end point which then triggers a `GET` to the `/chatroom` url whenever the `chatter` event is seen.\n\n### Automatic Reconnection\n\nIf the SSE Event Stream is closed unexpectedly, browsers are supposed to attempt to reconnect automatically. However, in rare situations this does not work and your browser can be left hanging. This extension adds its own reconnection logic (using an [exponential-backoff algorithm](https://en.wikipedia.org/wiki/Exponential_backoff)) on top of the browser’s automatic reconnection, so that your SSE streams will always be as reliable as possible.\n\n### Testing SSE Connections with the Demo Server\n\nHtmx includes a demo SSE server written in Node.js that will help you to see SSE in action, and begin bootstrapping your own SSE code. It is located in the /test/ws-sse folder of the htmx distribution. Look at /test/ws-sse/README.md for instructions on running and using the test server.\n\n### Migrating from Previous Versions\n\nPrevious versions of htmx used a built-in tag `hx-sse` to implement Server Sent Events. This code has been migrated into an extension instead. Here are the steps you need to take to migrate to this version:\n\n| Old Attribute                  | New Attribute            | Comments                                                                                                                                                                                       |\n|--------------------------------|--------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `hx-sse=\"\"`                    | `hx-ext=\"sse\"`           | Use the `hx-ext=\"sse\"` attribute to install the SSE extension into any HTML element.                                                                                                           |\n| `hx-sse=\"connect:<url>\"`       | `sse-connect=\"<url>\"`    | Add a new attribute `sse-connect` to the tag that specifies the URL of the Event Stream. This attribute must be in the same tag as the `hx-ext` attribute.                                     |\n| `hx-sse=\"swap:<EventName>\"`    | `sse-swap=\"<EventName>\"` | Add a new attribute `sse-swap` to any elements that will be swapped in via the SSE extension. This attribute must be placed **on** or **inside of** the tag containing the `hx-ext` attribute. |\n| `hx-trigger=\"sse:<EventName>\"` | NO CHANGE                | any `hx-trigger` attributes do not need to change. The extension will identify these attributes and add listeners for any events prefixed with `sse:`                                          |\n\n### Additional SSE Resources\n\n- [Wikipedia](https://en.wikipedia.org/wiki/Server-sent_events)\n- [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)\n- [Can I Use?](https://caniuse.com/eventsource)\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/server-sent-events/](https://htmx.org/extensions/server-sent-events/)"
- name: The websockets Extension
  id: extensions/web-sockets/index
  summary: The WebSockets extension enables easy, bi-directional communication with Web Sockets servers directly from HTML
  description: "# The `websockets` Extension\n\nThe `WebSockets` extension enables easy, bi-directional communication with [Web Sockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications) servers directly from HTML. This replaces the experimental `hx-ws` attribute built into previous versions of htmx. For help migrating from older versions, see the [Migrating](index#migrating-from-previous-versions) guide at the bottom of this page.\n\nUse the following attributes to configure how WebSockets behave:\n\n- `ws-connect=\"<url>\"` or `ws-connect=\"<prefix>:<url>\"` - A URL to establish an `WebSocket` connection against.\n- Prefixes `ws` or `wss` can optionally be specified. If not specified, HTMX defaults to add the location’s scheme-type, host and port to have browsers send cookies via websockets.\n- `ws-send` - Sends a message to the nearest websocket based on the trigger value for the element (either the natural event or the event specified by \\[`hx-trigger`\\])\n\n## Install\n\n``` language-html\n<script src=\"https://unpkg.com/htmx.org/dist/ext/ws.js\"></script>\n```\n\n## Usage\n\n``` language-html\n<div hx-ext=\"ws\" ws-connect=\"/chatroom\">\n    <div id=\"notifications\"></div>\n    <div id=\"chat_room\">\n        ...\n    </div>\n    <form id=\"form\" ws-send>\n        <input name=\"chat_message\">\n    </form>\n</div>\n```\n\n### Configuration\n\nWebSockets extension support two configuration options:\n\n- `createWebSocket` - a factory function that can be used to create a custom WebSocket instances. Must be a function, returning `WebSocket` object\n- `wsBinaryType` - a string value, that defines socket’s [`binaryType`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType) property. Default value is `blob`\n\n### Receiving Messages from a WebSocket\n\nThe example above establishes a WebSocket to the `/chatroom` end point. Content that is sent down from the websocket will be parsed as HTML and swapped in by the `id` property, using the same logic as [Out of Band Swaps](../../attributes/hx-swap-oob/index).\n\nAs such, if you want to change the swapping method (e.g., append content at the end of an element or delegate swapping to an extension), you need to specify that in the message body, sent by the server.\n\n``` language-html\n<!-- will be interpreted as hx-swap-oob=\"true\" by default -->\n<form id=\"form\">\n    ...\n</form>\n<!-- will be appended to #notifications div -->\n<div id=\"notifications\" hx-swap-oob=\"beforeend\">\n    New message received\n</div>\n<!-- will be swapped using an extension -->\n<div id=\"chat_room\" hx-swap-oob=\"morphdom\">\n    ....\n</div>\n```\n\n### Sending Messages to a WebSocket\n\nIn the example above, the form uses the `ws-send` attribute to indicate that when it is submitted, the form values should be **serialized as JSON** and send to the nearest enclosing `WebSocket`, in this case the `/chatroom` endpoint.\n\nThe serialized values will include a field, `HEADERS`, that includes the headers normally submitted with an htmx request.\n\n### Automatic Reconnection\n\nIf the WebSocket is closed unexpectedly, due to `Abnormal Closure`, `Service Restart` or `Try Again Later`, this extension will attempt to reconnect until the connection is reestablished.\n\nBy default, the extension uses a full-jitter [exponential-backoff algorithm](https://en.wikipedia.org/wiki/Exponential_backoff) that chooses a randomized retry delay that grows exponentially over time. You can use a different algorithm by writing it into `htmx.config.wsReconnectDelay`. This function takes a single parameter, the number of retries, and returns the time (in milliseconds) to wait before trying again.\n\n``` language-javascript\n// example reconnect delay that you shouldn't use because\n// it's not as good as the algorithm that's already in place\nhtmx.config.wsReconnectDelay = function (retryCount) {\nreturn retryCount * 1000 // return value in milliseconds\n}\n```\n\nThe extension also implements a simple queuing mechanism that keeps messages in memory when the socket is not in `OPEN` state and sends them once the connection is restored.\n\n### Events\n\nWebSockets extensions exposes a set of events that allow you to observe and customize its behavior.\n\n#### Event - `htmx:wsConnecting`\n\nThis event is triggered when a connection to a WebSocket endpoint is being attempted.\n\n##### Details\n\n- `detail.event.type` - the type of the event (`'connecting'`)\n\n#### Event - `htmx:wsOpen`\n\nThis event is triggered when a connection to a WebSocket endpoint has been established.\n\n##### Details\n\n- `detail.elt` - the element that holds the socket (the one with `ws-connect` attribute)\n- `detail.event` - the original event from the socket\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsClose`\n\nThis event is triggered when a connection to a WebSocket endpoint has been closed normally. You can check if the event was caused by an error by inspecting `detail.event` property.\n\n##### Details\n\n- `detail.elt` - the element that holds the socket (the one with `ws-connect` attribute)\n- `detail.event` - the original event from the socket\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsError`\n\nThis event is triggered when `onerror` event on a socket is raised.\n\n##### Details\n\n- `detail.elt` - the element that holds the socket (the one with `ws-connect` attribute)\n- `detail.error` - the error object\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsBeforeMessage`\n\nThis event is triggered when a message has just been received by a socket, similar to `htmx:beforeOnLoad`. This event fires before any processing occurs.\n\nIf the event is cancelled, no further processing will occur.\n\n- `detail.elt` - the element that holds the socket (the one with `ws-connect` attribute)\n- `detail.message` - raw message content\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsAfterMessage`\n\nThis event is triggered when a message has been completely processed by htmx and all changes have been settled, similar to `htmx:afterOnLoad`.\n\nCancelling this event has no effect.\n\n- `detail.elt` - the element that holds the socket (the one with `ws-connect` attribute)\n- `detail.message` - raw message content\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsConfigSend`\n\nThis event is triggered when preparing to send a message from `ws-send` element. Similarly to [`htmx:configRequest`](../../events/index#htmx:configRequest), it allows you to modify the message before sending.\n\nIf the event is cancelled, no further processing will occur and no messages will be sent.\n\n##### Details\n\n- `detail.parameters` - the parameters that will be submitted in the request\n- `detail.unfilteredParameters` - the parameters that were found before filtering by [`hx-select`](../../attributes/hx-select/index)\n- `detail.headers` - the request headers. Will be attached to the body in `HEADERS` property, if not falsy\n- `detail.errors` - validation errors. Will prevent sending and trigger [`htmx:validation:halted`](../../events/index#htmx:validation:halted) event if not empty\n- `detail.triggeringEvent` - the event that triggered sending\n- `detail.messageBody` - raw message body that will be sent to the socket. Undefined, can be set to value of any type, supported by WebSockets. If set, will override default JSON serialization. Useful, if you want to use some other format, like XML or MessagePack\n- `detail.elt` - the element that dispatched the sending (the one with `ws-send` attribute)\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsBeforeSend`\n\nThis event is triggered just before sending a message. This includes messages from the queue. Message can not be modified at this point.\n\nIf the event is cancelled, the message will be discarded from the queue and not sent.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request (the one with `ws-connect` attribute)\n- `detail.message` - the raw message content\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Event - `htmx:wsAfterSend`\n\nThis event is triggered just after sending a message. This includes messages from the queue.\n\nCancelling the event has no effect.\n\n##### Details\n\n- `detail.elt` - the element that dispatched the request (the one with `ws-connect` attribute)\n- `detail.message` - the raw message content\n- `detail.socketWrapper` - the wrapper around socket object\n\n#### Socket wrapper\n\nYou may notice that all events expose `detail.socketWrapper` property. This wrapper holds the socket object itself and the message queue. It also encapsulates reconnection algorithm. It exposes a few members:\n\n- `send(message, fromElt)` - sends a message safely. If the socket is not open, the message will be persisted in the queue instead and sent when the socket is ready.\n- `sendImmediately(message, fromElt)` - attempts to send a message regardless of socket state, bypassing the queue. May fail\n- `queue` - an array of messages, awaiting in the queue.\n\nThis wrapper can be used in your event handlers to monitor and manipulate the queue (e.g., you can reset the queue when reconnecting), and to send additional messages (e.g., if you want to send data in batches). The `fromElt` parameter is optional and, when specified, will trigger corresponding websocket events from specified element, namely `htmx:wsBeforeSend` and `htmx:wsAfterSend` events when sending your messages.\n\n### Testing with the Demo Server\n\nHtmx includes a demo WebSockets server written in Node.js that will help you to see WebSockets in action, and begin bootstrapping your own WebSockets code. It is located in the /test/ws-sse folder of the htmx distribution. Look at /test/ws-sse/README.md for instructions on running and using the test server.\n\n### Migrating from Previous Versions\n\nPrevious versions of htmx used a built-in tag `hx-ws` to implement WebSockets. This code has been migrated into an extension instead. Here are the steps you need to take to migrate to this version:\n\n| Old Attribute           | New Attribute        | Comments                                                                                                                         |\n|-------------------------|----------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| `hx-ws=\"\"`              | `hx-ext=\"ws\"`        | Use the `hx-ext=\"ws\"` attribute to install the WebSockets extension into any HTML element.                                       |\n| `hx-ws=\"connect:<url>\"` | `ws-connect=\"<url>\"` | Add a new attribute `ws-connect` to the tag that defines the extension to specify the URL of the WebSockets server you’re using. |\n| `hx-ws=\"send\"`          | `ws-send=\"\"`         | Add a new attribute `ws-send` to mark any child forms that should send data to your WebSocket server                             |\n\nLicensed under the Zero-Clause BSD License.  \n[https://htmx.org/extensions/web-sockets/](https://htmx.org/extensions/web-sockets/)"
