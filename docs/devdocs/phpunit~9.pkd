---
name: PHPUnit
slug: phpunit~9
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '9'
copyright: |-
  © 2005–2020 Sebastian Bergmann
  Licensed under the Creative Commons Attribution 3.0 Unported License.
  https://phpunit.readthedocs.io/en/9.5/index.html
homepage: https://phpunit.de/

---
- name: '@after'
  id: annotations#@after
  summary: The @after annotation can be used to specify methods that should be called after each test method in a test case class
  belongs_to: Annotations
  description: "## @after\n\nThe `@after` annotation can be used to specify methods that should be called after each test method in a test case class.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @after\n                 */\n            public\n            function\n            tearDownSomeFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            /**\n                 * @after\n                 */\n            public\n            function\n            tearDownSomeOtherFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```"
- name: '@afterClass'
  id: annotations#@afterClass
  summary: The @afterClass annotation can be used to specify static methods that should be called after all test methods in a test class have been run to clean up shared fixtures
  belongs_to: Annotations
  description: "## @afterClass\n\nThe `@afterClass` annotation can be used to specify static methods that should be called after all test methods in a test class have been run to clean up shared fixtures.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @afterClass\n                 */\n            public\n            static\n            function\n            tearDownSomeSharedFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            /**\n                 * @afterClass\n                 */\n            public\n            static\n            function\n            tearDownSomeOtherSharedFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```"
- name: '@author'
  id: annotations#@author
  summary: The @author annotation is an alias for the @group annotation (see @group) and allows to filter tests based on their authors
  belongs_to: Annotations
  description: |-
    ## @author

    The `@author` annotation is an alias for the `@group` annotation (see [@group](#appendixes-annotations-group)) and allows to filter tests based on their authors.
- name: '@backupGlobals'
  id: annotations#@backupGlobals
  summary: PHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test
  belongs_to: Annotations
  description: "## @backupGlobals\n\nPHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test.\n\nThe `@backupGlobals``enabled` annotation can be used on the class level to enable this operation for all tests of a test case class:\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            /**\n             * @backupGlobals enabled\n             */\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            // ...\n            }\n          \n```\n\nThe `@backupGlobals` annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            /**\n             * @backupGlobals enabled\n             */\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            public\n            function\n            testThatInteractsWithGlobalVariables\n            ()\n            {\n            // ...\n            }\n            /**\n                 * @backupGlobals disabled\n                 */\n            public\n            function\n            testThatDoesNotInteractWithGlobalVariables\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```"
- name: '@backupStaticAttributes'
  id: annotations#@backupStaticAttributes
  summary: PHPUnit can optionally backup all static attributes in all declared classes before each test and restore this backup after each test
  belongs_to: Annotations
  description: "## @backupStaticAttributes\n\nPHPUnit can optionally backup all static attributes in all declared classes before each test and restore this backup after each test.\n\nThe `@backupStaticAttributes``enabled` annotation can be used on the class level to enable this operation for all tests of a test case class:\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            /**\n             * @backupStaticAttributes enabled\n             */\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            // ...\n            }\n          \n```\n\nThe `@backupStaticAttributes` annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:\n\n``` php\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            /**\n             * @backupStaticAttributes enabled\n             */\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            public\n            function\n            testThatInteractsWithStaticAttributes\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            /**\n                 * @backupStaticAttributes disabled\n                 */\n            public\n            function\n            testThatDoesNotInteractWithStaticAttributes\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```\n\nNote\n\n`@backupStaticAttributes` is limited by PHP internals and may cause unintended static values to persist and leak into subsequent tests in some circumstances.\n\nSee [Global State](fixtures#fixtures-global-state) for details."
- name: '@before'
  id: annotations#@before
  summary: The @before annotation can be used to specify methods that should be called before each test method in a test case class
  belongs_to: Annotations
  description: "## @before\n\nThe `@before` annotation can be used to specify methods that should be called before each test method in a test case class.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @before\n                 */\n            public\n            function\n            setupSomeFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            /**\n                 * @before\n                 */\n            public\n            function\n            setupSomeOtherFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```"
- name: '@beforeClass'
  id: annotations#@beforeClass
  summary: The @beforeClass annotation can be used to specify static methods that should be called before any test methods in a test class are run to set up shared fixtures
  belongs_to: Annotations
  description: "## @beforeClass\n\nThe `@beforeClass` annotation can be used to specify static methods that should be called before any test methods in a test class are run to set up shared fixtures.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @beforeClass\n                 */\n            public\n            static\n            function\n            setUpSomeSharedFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            /**\n                 * @beforeClass\n                 */\n            public\n            static\n            function\n            setUpSomeOtherSharedFixtures\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```"
- name: '@codeCoverageIgnore*'
  id: annotations#@codeCoverageIgnore*
  summary: The @codeCoverageIgnore, @codeCoverageIgnoreStart and @codeCoverageIgnoreEnd annotations can be used to exclude lines of code from the coverage analysis
  belongs_to: Annotations
  description: |-
    ## @codeCoverageIgnore\*

    The `@codeCoverageIgnore`, `@codeCoverageIgnoreStart` and `@codeCoverageIgnoreEnd` annotations can be used to exclude lines of code from the coverage analysis.

    For usage see [Ignoring Code Blocks](code-coverage-analysis#code-coverage-analysis-ignoring-code-blocks).
- name: '@covers'
  id: annotations#@covers
  summary: If provided, this effectively filters the code coverage report to include executed code from the referenced code parts only
  belongs_to: Annotations
  description: "## @covers\n\nThe `@covers` annotation can be used in the test code to specify which parts of the code it is supposed to test:\n\n``` php\n            /**\n             * @covers \\BankAccount\n             */\n            public\n            function\n            testBalanceIsInitiallyZero\n            ()\n            :\n            void\n            {\n            $this\n            ->\n            assertSame\n            (\n            0\n            ,\n            $this\n            ->\n            ba\n            ->\n            getBalance\n            ());\n            }\n          \n```\n\nIf provided, this effectively filters the code coverage report to include executed code from the referenced code parts only. This will make sure that code is only marked as covered if there are dedicated tests for it, but not if it used indirectly by the tests for a different class, thus avoiding false positives for code coverage.\n\nThis annotation can be added to the docblock of the test class or the individual test methods. The recommended way is to add the annotation to the docblock of the test class, not to the docblock of the test methods.\n\nWhen the `forceCoversAnnotation` configuration option in the [configuration file](configuration#appendixes-configuration) is set to `true`, every test method needs to have an associated `@covers` annotation (either on the test class or the individual test method).\n\n[Table 2.2](#appendixes-annotations-covers-tables-annotations) shows the syntax of the `@covers` annotation. The section [Specifying Covered Code Parts](code-coverage-analysis#code-coverage-analysis-specifying-covered-parts) provides longer examples for using the annotation.\n\nPlease note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this not required for the annotation to work correctly).\n\n| Annotation                                           | Description                                                                                            |\n|------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| `@covers``ClassName::methodName` (not recommended)   | Specifies that the annotated test method covers the specified method.                                  |\n| `@covers``ClassName` (recommended)                   | Specifies that the annotated test method covers all methods of a given class.                          |\n| `@covers``ClassName<extended>` (not recommended)     | Specifies that the annotated test method covers all methods of a given class and its parent class(es). |\n| `@covers``ClassName::<public>` (not recommended)     | Specifies that the annotated test method covers all public methods of a given class.                   |\n| `@covers``ClassName::<protected>` (not recommended)  | Specifies that the annotated test method covers all protected methods of a given class.                |\n| `@covers``ClassName::<private>` (not recommended)    | Specifies that the annotated test method covers all private methods of a given class.                  |\n| `@covers``ClassName::<!public>` (not recommended)    | Specifies that the annotated test method covers all methods of a given class that are not public.      |\n| `@covers``ClassName::<!protected>` (not recommended) | Specifies that the annotated test method covers all methods of a given class that are not protected.   |\n| `@covers``ClassName::<!private>` (not recommended)   | Specifies that the annotated test method covers all methods of a given class that are not private.     |\n| `@covers``::functionName` (recommended)              | Specifies that the annotated test method covers the specified global function.                         |\n\nTable 2.2 Annotations for specifying which methods are covered by a test {#appendixes-annotations-covers-tables-annotations}"
- name: '@coversDefaultClass'
  id: annotations#@coversDefaultClass
  summary: The @coversDefaultClass annotation can be used to specify a default namespace or class name
  belongs_to: Annotations
  description: "## @coversDefaultClass\n\nThe `@coversDefaultClass` annotation can be used to specify a default namespace or class name. That way long names don’t need to be repeated for every `@covers` annotation. See [Example 2.18](#appendixes-annotations-examples-coversdefaultclasstest-php).\n\nPlease note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this not required for the annotation to work correctly).\n\nExample 2.18 Using @coversDefaultClass to shorten annotations\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              /**\n               * @coversDefaultClass \\Foo\\CoveredClass\n               */\n              final\n              class\n              CoversDefaultClassTest\n              extends\n              TestCase\n              {\n              /**\n                   * @covers ::publicMethod\n                   */\n              public\n              function\n              testSomething\n              ()\n              :\n              void\n              {\n              $o\n              =\n              new\n              Foo\\CoveredClass\n              ;\n              $o\n              ->\n              publicMethod\n              ();\n              }\n              }\n            \n```"
- name: '@coversNothing'
  id: annotations#@coversNothing
  summary: The @coversNothing annotation can be used in the test code to specify that no code coverage information will be recorded for the annotated test case
  belongs_to: Annotations
  description: |-
    ## @coversNothing

    The `@coversNothing` annotation can be used in the test code to specify that no code coverage information will be recorded for the annotated test case.

    This can be used for integration testing. See [A test that specifies that no method should be covered](code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-guestbookintegrationtest-php) for an example.

    The annotation can be used on the class and the method level and will override any `@covers` tags.
- name: '@dataProvider'
  id: annotations#@dataProvider
  summary: A test method can accept arbitrary arguments
  belongs_to: Annotations
  description: |-
    ## @dataProvider

    A test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (`provider()` in [Using a data provider that returns an array of arrays](writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers-examples-datatest-php)). The data provider method to be used is specified using the `@dataProvider` annotation.

    See [Data Providers](writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers) for more details.
- name: '@depends'
  id: annotations#@depends
  summary: PHPUnit supports the declaration of explicit dependencies between test methods
  belongs_to: Annotations
  description: |-
    ## @depends

    PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers. [Using the @depends annotation to express dependencies](writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest2-php) shows how to use the `@depends` annotation to express dependencies between test methods.

    See [Test Dependencies](writing-tests-for-phpunit#writing-tests-for-phpunit-test-dependencies) for more details.
- name: '@doesNotPerformAssertions'
  id: annotations#@doesNotPerformAssertions
  summary: Prevents a test that performs no assertions from being considered risky
  belongs_to: Annotations
  description: |-
    ## @doesNotPerformAssertions

    Prevents a test that performs no assertions from being considered risky.
- name: '@group'
  id: annotations#@group
  summary: The @group annotation can also be provided for the test class
  belongs_to: Annotations
  description: "## @group\n\nA test can be tagged as belonging to one or more groups using the `@group` annotation like this\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @group specification\n                 */\n            public\n            function\n            testSomething\n            ()\n            :\n            void\n            {\n            }\n            /**\n                 * @group regression\n                 * @group bug2204\n                 */\n            public\n            function\n            testSomethingElse\n            ()\n            :\n            void\n            {\n            }\n            }\n          \n```\n\nThe `@group` annotation can also be provided for the test class. It is then “inherited” to all test methods of that test class.\n\nTests can be selected for execution based on groups using the `--group` and `--exclude-group` options of the command-line test runner or using the respective directives of the XML configuration file."
- name: '@large'
  id: annotations#@large
  summary: The @large annotation is an alias for @group``large
  belongs_to: Annotations
  description: |-
    ## @large

    The `@large` annotation is an alias for `@group``large`.

    If the `PHP_Invoker` package is installed and strict mode is enabled, a large test will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the `timeoutForLargeTests` attribute in the XML configuration file.
- name: '@medium'
  id: annotations#@medium
  summary: The @medium annotation is an alias for @group``medium
  belongs_to: Annotations
  description: |-
    ## @medium

    The `@medium` annotation is an alias for `@group``medium`. A medium test must not depend on a test marked as `@large`.

    If the `PHP_Invoker` package is installed and strict mode is enabled, a medium test will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the `timeoutForMediumTests` attribute in the XML configuration file.
- name: '@preserveGlobalState'
  id: annotations#@preserveGlobalState
  summary: When a test is run in a separate process, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process
  belongs_to: Annotations
  description: "## @preserveGlobalState\n\nWhen a test is run in a separate process, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. To fix this, you can prevent PHPUnit from preserving global state with the `@preserveGlobalState` annotation.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @runInSeparateProcess\n                 * @preserveGlobalState disabled\n                 */\n            public\n            function\n            testInSeparateProcess\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```"
- name: '@requires'
  id: annotations#@requires
  summary: The @requires annotation can be used to skip tests when common preconditions, like the PHP Version or installed extensions, are not met
  belongs_to: Annotations
  description: |-
    ## @requires

    The `@requires` annotation can be used to skip tests when common preconditions, like the PHP Version or installed extensions, are not met.

    A complete list of possibilities and examples can be found at [Possible @requires usages](incomplete-and-skipped-tests#incomplete-and-skipped-tests-requires-tables-api)
- name: '@runInSeparateProcess'
  id: annotations#@runInSeparateProcess
  summary: Indicates that a test should be run in a separate PHP process
  belongs_to: Annotations
  description: "## @runInSeparateProcess\n\nIndicates that a test should be run in a separate PHP process.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            /**\n                 * @runInSeparateProcess\n                 */\n            public\n            function\n            testInSeparateProcess\n            ()\n            :\n            void\n            {\n            // ...\n            }\n            }\n          \n```\n\n*Note:* By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See [@preserveGlobalState](#appendixes-annotations-preserveglobalstate) for information on how to fix this."
- name: '@runTestsInSeparateProcesses'
  id: annotations#@runTestsInSeparateProcesses
  summary: Indicates that all tests in a test class should be run in a separate PHP process
  belongs_to: Annotations
  description: "## @runTestsInSeparateProcesses\n\nIndicates that all tests in a test class should be run in a separate PHP process.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            /**\n             * @runTestsInSeparateProcesses\n             */\n            final\n            class\n            MyTest\n            extends\n            TestCase\n            {\n            // ...\n            }\n          \n```\n\n*Note:* By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See [@preserveGlobalState](#appendixes-annotations-preserveglobalstate) for information on how to fix this."
- name: '@small'
  id: annotations#@small
  summary: The @small annotation is an alias for @group``small
  belongs_to: Annotations
  description: |-
    ## @small

    The `@small` annotation is an alias for `@group``small`. A small test must not depend on a test marked as `@medium` or `@large`.

    If the `PHP_Invoker` package is installed and strict mode is enabled, a small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the `timeoutForSmallTests` attribute in the XML configuration file.

    Note

    Tests need to be explicitly annotated by either `@small`, `@medium`, or `@large` to enable run time limits.
- name: '@test'
  id: annotations#@test
  summary: As an alternative to prefixing your test method names with test, you can use the @test annotation in a method’s DocBlock to mark it as a test method
  belongs_to: Annotations
  description: "## @test\n\nAs an alternative to prefixing your test method names with `test`, you can use the `@test` annotation in a method’s DocBlock to mark it as a test method.\n\n``` php\n            /**\n             * @test\n             */\n            public\n            function\n            initialBalanceShouldBe0\n            ()\n            :\n            void\n            {\n            $this\n            ->\n            assertSame\n            (\n            0\n            ,\n            $this\n            ->\n            ba\n            ->\n            getBalance\n            ());\n            }\n          \n```"
- name: '@testdox'
  id: annotations#@testdox
  summary: Specifies an alternative description used when generating the agile documentation sentences
  belongs_to: Annotations
  description: "## @testdox\n\nSpecifies an alternative description used when generating the agile documentation sentences.\n\nThe `@testdox` annotation can be applied to both test classes and test methods.\n\n``` php\n            <?\n            php\n            declare\n            (\n            strict_types\n            =\n            1\n            );\n            use\n            PHPUnit\\Framework\\TestCase\n            ;\n            /**\n             * @testdox A bank account\n             */\n            final\n            class\n            BankAccountTest\n            extends\n            TestCase\n            {\n            /**\n                 * @testdox has an initial balance of zero\n                 */\n            public\n            function\n            balanceIsInitiallyZero\n            ()\n            :\n            void\n            {\n            $this\n            ->\n            assertSame\n            (\n            0\n            ,\n            $this\n            ->\n            ba\n            ->\n            getBalance\n            ());\n            }\n            }\n          \n```\n\nNote\n\nPrior to PHPUnit 7.0 (due to a bug in the annotation parsing), using the `@testdox` annotation also activated the behaviour of the `@test` annotation.\n\nWhen using the `@testdox` annotation at method level with a `@dataProvider` you may use the method parameters as placeholders in your alternative description.\n\n``` php\n            /**\n             * @dataProvider additionProvider\n             * @testdox Adding $a to $b results in $expected\n             */\n            public\n            function\n            testAdd\n            (\n            $a\n            ,\n            $b\n            ,\n            $expected\n            )\n            {\n            $this\n            ->\n            assertSame\n            (\n            $expected\n            ,\n            $a\n            +\n            $b\n            );\n            }\n            public\n            function\n            additionProvider\n            ()\n            {\n            return\n            [\n            [\n            0\n            ,\n            0\n            ,\n            0\n            ],\n            [\n            0\n            ,\n            1\n            ,\n            1\n            ],\n            [\n            1\n            ,\n            0\n            ,\n            1\n            ],\n            [\n            1\n            ,\n            1\n            ,\n            3\n            ]\n            ];\n            }\n          \n```"
- name: '@testWith'
  id: annotations#@testWith
  summary: Instead of implementing a method for use with @dataProvider, you can define a data set using the @testWith annotation
  belongs_to: Annotations
  description: "## @testWith\n\nInstead of implementing a method for use with `@dataProvider`, you can define a data set using the `@testWith` annotation.\n\nA data set consists of one or many elements. To define a data set with multiple elements, define each element in a separate line. Each element of the data set must be an array defined in JSON.\n\nSee [Data Providers](writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers) to learn more about passing a set of data to a test.\n\n``` php\n            /**\n             * @testWith [\"test\", 4]\n             *           [\"longer-string\", 13]\n             */\n            public\n            function\n            testStringLength\n            (\n            string\n            $input\n            ,\n            int\n            $expectedLength\n            )\n            :\n            void\n            {\n            $this\n            ->\n            assertSame\n            (\n            $expectedLength\n            ,\n            strlen\n            (\n            $input\n            ));\n            }\n          \n```\n\nAn object representation in JSON will be converted into an associative array.\n\n``` php\n            /**\n             * @testWith [{\"day\": \"monday\", \"conditions\": \"sunny\"}, [\"day\", \"conditions\"]]\n             */\n            public\n            function\n            testArrayKeys\n            (\n            array\n            $array\n            ,\n            array\n            $keys\n            )\n            :\n            void\n            {\n            $this\n            ->\n            assertSame\n            (\n            $keys\n            ,\n            array_keys\n            (\n            $array\n            ));\n            }\n          \n```"
- name: '@ticket'
  id: annotations#@ticket
  summary: The @ticket annotation is an alias for the @group annotation (see @group) and allows to filter tests based on their ticket ID
  belongs_to: Annotations
  description: |-
    ## @ticket

    The `@ticket` annotation is an alias for the `@group` annotation (see [@group](#appendixes-annotations-group)) and allows to filter tests based on their ticket ID.
- name: '@uses'
  id: annotations#@uses
  summary: The @uses annotation specifies code which will be executed by a test, but is not intended to be covered by the test
  belongs_to: Annotations
  description: "## @uses\n\nThe `@uses` annotation specifies code which will be executed by a test, but is not intended to be covered by the test. A good example is a value object which is necessary for testing a unit of code.\n\n``` php\n            /**\n             * @covers \\BankAccount\n             * @uses   \\Money\n             */\n            public\n            function\n            testMoneyCanBeDepositedInAccount\n            ()\n            :\n            void\n            {\n            // ...\n            }\n          \n```\n\n[Example 9.2](code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-invoicetest-php) shows another example.\n\nIn addition to being helpful for persons reading the code, this annotation is useful in strict coverage mode where unintentionally covered code will cause a test to fail. See [Unintentionally Covered Code](risky-tests#risky-tests-unintentionally-covered-code) for more information regarding strict coverage mode.\n\nPlease note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this is not required for the annotation to work correctly).\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/annotations.html](https://phpunit.readthedocs.io/en/9.5/annotations.html)"
- name: Annotations
  id: annotations
  summary: An annotation is a special form of syntactic metadata that can be added to the source code of some programming languages
  description: "# Annotations\n\nAn annotation is a special form of syntactic metadata that can be added to the source code of some programming languages. While PHP has no dedicated language feature for annotating source code, the usage of tags such as `@annotation`` ``arguments` in a documentation block has been established in the PHP community to annotate source code. In PHP documentation blocks are reflective: they can be accessed through the Reflection API’s `getDocComment()` method on the function, class, method, and attribute level. Applications such as PHPUnit use this information at runtime to configure their behaviour.\n\nNote\n\nA doc comment in PHP must start with `/**` and end with `*/`. Annotations in any other style of comment will be ignored.\n\nThis appendix shows all the varieties of annotations supported by PHPUnit.\n\n## @author\n\nThe `@author` annotation is an alias for the `@group` annotation (see [@group](#appendixes-annotations-group)) and allows to filter tests based on their authors.\n\n## @after\n\nThe `@after` annotation can be used to specify methods that should be called after each test method in a test case class.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @after\n     */\n    public function tearDownSomeFixtures(): void\n    {\n        // ...\n    }\n\n    /**\n     * @after\n     */\n    public function tearDownSomeOtherFixtures(): void\n    {\n        // ...\n    }\n}\n```\n\n## @afterClass\n\nThe `@afterClass` annotation can be used to specify static methods that should be called after all test methods in a test class have been run to clean up shared fixtures.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @afterClass\n     */\n    public static function tearDownSomeSharedFixtures(): void\n    {\n        // ...\n    }\n\n    /**\n     * @afterClass\n     */\n    public static function tearDownSomeOtherSharedFixtures(): void\n    {\n        // ...\n    }\n}\n```\n\n## @backupGlobals\n\nPHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test.\n\nThe `@backupGlobals`` ``enabled` annotation can be used on the class level to enable this operation for all tests of a test case class:\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupGlobals enabled\n */\nfinal class MyTest extends TestCase\n{\n    // ...\n}\n```\n\nThe `@backupGlobals` annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupGlobals enabled\n */\nfinal class MyTest extends TestCase\n{\n    public function testThatInteractsWithGlobalVariables()\n    {\n        // ...\n    }\n\n    /**\n     * @backupGlobals disabled\n     */\n    public function testThatDoesNotInteractWithGlobalVariables(): void\n    {\n        // ...\n    }\n}\n```\n\n## @backupStaticAttributes\n\nPHPUnit can optionally backup all static attributes in all declared classes before each test and restore this backup after each test.\n\nThe `@backupStaticAttributes`` ``enabled` annotation can be used on the class level to enable this operation for all tests of a test case class:\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupStaticAttributes enabled\n */\nfinal class MyTest extends TestCase\n{\n    // ...\n}\n```\n\nThe `@backupStaticAttributes` annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:\n\n``` php\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @backupStaticAttributes enabled\n */\nclass MyTest extends TestCase\n{\n    public function testThatInteractsWithStaticAttributes(): void\n    {\n        // ...\n    }\n\n    /**\n     * @backupStaticAttributes disabled\n     */\n    public function testThatDoesNotInteractWithStaticAttributes(): void\n    {\n        // ...\n    }\n}\n```\n\nNote\n\n`@backupStaticAttributes` is limited by PHP internals and may cause unintended static values to persist and leak into subsequent tests in some circumstances.\n\nSee [Global State](fixtures#fixtures-global-state) for details.\n\n## @before\n\nThe `@before` annotation can be used to specify methods that should be called before each test method in a test case class.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @before\n     */\n    public function setupSomeFixtures(): void\n    {\n        // ...\n    }\n\n    /**\n     * @before\n     */\n    public function setupSomeOtherFixtures(): void\n    {\n        // ...\n    }\n}\n```\n\n## @beforeClass\n\nThe `@beforeClass` annotation can be used to specify static methods that should be called before any test methods in a test class are run to set up shared fixtures.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @beforeClass\n     */\n    public static function setUpSomeSharedFixtures(): void\n    {\n        // ...\n    }\n\n    /**\n     * @beforeClass\n     */\n    public static function setUpSomeOtherSharedFixtures(): void\n    {\n        // ...\n    }\n}\n```\n\n## @codeCoverageIgnore\\*\n\nThe `@codeCoverageIgnore`, `@codeCoverageIgnoreStart` and `@codeCoverageIgnoreEnd` annotations can be used to exclude lines of code from the coverage analysis.\n\nFor usage see [Ignoring Code Blocks](code-coverage-analysis#code-coverage-analysis-ignoring-code-blocks).\n\n## @covers\n\nThe `@covers` annotation can be used in the test code to specify which parts of the code it is supposed to test:\n\n``` php\n/**\n * @covers \\BankAccount\n */\npublic function testBalanceIsInitiallyZero(): void\n{\n    $this->assertSame(0, $this->ba->getBalance());\n}\n```\n\nIf provided, this effectively filters the code coverage report to include executed code from the referenced code parts only. This will make sure that code is only marked as covered if there are dedicated tests for it, but not if it used indirectly by the tests for a different class, thus avoiding false positives for code coverage.\n\nThis annotation can be added to the docblock of the test class or the individual test methods. The recommended way is to add the annotation to the docblock of the test class, not to the docblock of the test methods.\n\nWhen the `forceCoversAnnotation` configuration option in the [configuration file](configuration#appendixes-configuration) is set to `true`, every test method needs to have an associated `@covers` annotation (either on the test class or the individual test method).\n\n[Table 2.2](#appendixes-annotations-covers-tables-annotations) shows the syntax of the `@covers` annotation. The section [Specifying Covered Code Parts](code-coverage-analysis#code-coverage-analysis-specifying-covered-parts) provides longer examples for using the annotation.\n\nPlease note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this not required for the annotation to work correctly).\n\n| Annotation                                              | Description                                                                                            |\n|---------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| `@covers`` ``ClassName::methodName` (not recommended)   | Specifies that the annotated test method covers the specified method.                                  |\n| `@covers`` ``ClassName` (recommended)                   | Specifies that the annotated test method covers all methods of a given class.                          |\n| `@covers`` ``ClassName<extended>` (not recommended)     | Specifies that the annotated test method covers all methods of a given class and its parent class(es). |\n| `@covers`` ``ClassName::<public>` (not recommended)     | Specifies that the annotated test method covers all public methods of a given class.                   |\n| `@covers`` ``ClassName::<protected>` (not recommended)  | Specifies that the annotated test method covers all protected methods of a given class.                |\n| `@covers`` ``ClassName::<private>` (not recommended)    | Specifies that the annotated test method covers all private methods of a given class.                  |\n| `@covers`` ``ClassName::<!public>` (not recommended)    | Specifies that the annotated test method covers all methods of a given class that are not public.      |\n| `@covers`` ``ClassName::<!protected>` (not recommended) | Specifies that the annotated test method covers all methods of a given class that are not protected.   |\n| `@covers`` ``ClassName::<!private>` (not recommended)   | Specifies that the annotated test method covers all methods of a given class that are not private.     |\n| `@covers`` ``::functionName` (recommended)              | Specifies that the annotated test method covers the specified global function.                         |\n\nTable 2.2 Annotations for specifying which methods are covered by a test {#appendixes-annotations-covers-tables-annotations}\n\n## @coversDefaultClass\n\nThe `@coversDefaultClass` annotation can be used to specify a default namespace or class name. That way long names don’t need to be repeated for every `@covers` annotation. See [Example 2.18](#appendixes-annotations-examples-coversdefaultclasstest-php).\n\nPlease note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this not required for the annotation to work correctly).\n\nExample 2.18 Using @coversDefaultClass to shorten annotations\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @coversDefaultClass \\Foo\\CoveredClass\n */\nfinal class CoversDefaultClassTest extends TestCase\n{\n    /**\n     * @covers ::publicMethod\n     */\n    public function testSomething(): void\n    {\n        $o = new Foo\\CoveredClass;\n        $o->publicMethod();\n    }\n}\n```\n\n## @coversNothing\n\nThe `@coversNothing` annotation can be used in the test code to specify that no code coverage information will be recorded for the annotated test case.\n\nThis can be used for integration testing. See [A test that specifies that no method should be covered](code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-guestbookintegrationtest-php) for an example.\n\nThe annotation can be used on the class and the method level and will override any `@covers` tags.\n\n## @dataProvider\n\nA test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (`provider()` in [Using a data provider that returns an array of arrays](writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers-examples-datatest-php)). The data provider method to be used is specified using the `@dataProvider` annotation.\n\nSee [Data Providers](writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers) for more details.\n\n## @depends\n\nPHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers. [Using the @depends annotation to express dependencies](writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest2-php) shows how to use the `@depends` annotation to express dependencies between test methods.\n\nSee [Test Dependencies](writing-tests-for-phpunit#writing-tests-for-phpunit-test-dependencies) for more details.\n\n## @doesNotPerformAssertions\n\nPrevents a test that performs no assertions from being considered risky.\n\n## @group\n\nA test can be tagged as belonging to one or more groups using the `@group` annotation like this\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @group specification\n     */\n    public function testSomething(): void\n    {\n    }\n\n    /**\n     * @group regression\n     * @group bug2204\n     */\n    public function testSomethingElse(): void\n    {\n    }\n}\n```\n\nThe `@group` annotation can also be provided for the test class. It is then “inherited” to all test methods of that test class.\n\nTests can be selected for execution based on groups using the `--group` and `--exclude-group` options of the command-line test runner or using the respective directives of the XML configuration file.\n\n## @large\n\nThe `@large` annotation is an alias for `@group`` ``large`.\n\nIf the `PHP_Invoker` package is installed and strict mode is enabled, a large test will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the `timeoutForLargeTests` attribute in the XML configuration file.\n\n## @medium\n\nThe `@medium` annotation is an alias for `@group`` ``medium`. A medium test must not depend on a test marked as `@large`.\n\nIf the `PHP_Invoker` package is installed and strict mode is enabled, a medium test will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the `timeoutForMediumTests` attribute in the XML configuration file.\n\n## @preserveGlobalState\n\nWhen a test is run in a separate process, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. To fix this, you can prevent PHPUnit from preserving global state with the `@preserveGlobalState` annotation.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function testInSeparateProcess(): void\n    {\n        // ...\n    }\n}\n```\n\n## @requires\n\nThe `@requires` annotation can be used to skip tests when common preconditions, like the PHP Version or installed extensions, are not met.\n\nA complete list of possibilities and examples can be found at [Possible @requires usages](incomplete-and-skipped-tests#incomplete-and-skipped-tests-requires-tables-api)\n\n## @runTestsInSeparateProcesses\n\nIndicates that all tests in a test class should be run in a separate PHP process.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @runTestsInSeparateProcesses\n */\nfinal class MyTest extends TestCase\n{\n    // ...\n}\n```\n\n*Note:* By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See [@preserveGlobalState](#appendixes-annotations-preserveglobalstate) for information on how to fix this.\n\n## @runInSeparateProcess\n\nIndicates that a test should be run in a separate PHP process.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MyTest extends TestCase\n{\n    /**\n     * @runInSeparateProcess\n     */\n    public function testInSeparateProcess(): void\n    {\n        // ...\n    }\n}\n```\n\n*Note:* By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See [@preserveGlobalState](#appendixes-annotations-preserveglobalstate) for information on how to fix this.\n\n## @small\n\nThe `@small` annotation is an alias for `@group`` ``small`. A small test must not depend on a test marked as `@medium` or `@large`.\n\nIf the `PHP_Invoker` package is installed and strict mode is enabled, a small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the `timeoutForSmallTests` attribute in the XML configuration file.\n\nNote\n\nTests need to be explicitly annotated by either `@small`, `@medium`, or `@large` to enable run time limits.\n\n## @test\n\nAs an alternative to prefixing your test method names with `test`, you can use the `@test` annotation in a method’s DocBlock to mark it as a test method.\n\n``` php\n/**\n * @test\n */\npublic function initialBalanceShouldBe0(): void\n{\n    $this->assertSame(0, $this->ba->getBalance());\n}\n```\n\n## @testdox\n\nSpecifies an alternative description used when generating the agile documentation sentences.\n\nThe `@testdox` annotation can be applied to both test classes and test methods.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @testdox A bank account\n */\nfinal class BankAccountTest extends TestCase\n{\n    /**\n     * @testdox has an initial balance of zero\n     */\n    public function balanceIsInitiallyZero(): void\n    {\n        $this->assertSame(0, $this->ba->getBalance());\n    }\n}\n```\n\nNote\n\nPrior to PHPUnit 7.0 (due to a bug in the annotation parsing), using the `@testdox` annotation also activated the behaviour of the `@test` annotation.\n\nWhen using the `@testdox` annotation at method level with a `@dataProvider` you may use the method parameters as placeholders in your alternative description.\n\n``` php\n/**\n * @dataProvider additionProvider\n * @testdox Adding $a to $b results in $expected\n */\npublic function testAdd($a, $b, $expected)\n{\n    $this->assertSame($expected, $a + $b);\n}\n\npublic function additionProvider()\n{\n    return [\n        [0, 0, 0],\n        [0, 1, 1],\n        [1, 0, 1],\n        [1, 1, 3]\n    ];\n}\n```\n\n## @testWith\n\nInstead of implementing a method for use with `@dataProvider`, you can define a data set using the `@testWith` annotation.\n\nA data set consists of one or many elements. To define a data set with multiple elements, define each element in a separate line. Each element of the data set must be an array defined in JSON.\n\nSee [Data Providers](writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers) to learn more about passing a set of data to a test.\n\n``` php\n/**\n * @testWith [\"test\", 4]\n *           [\"longer-string\", 13]\n */\npublic function testStringLength(string $input, int $expectedLength): void\n{\n    $this->assertSame($expectedLength, strlen($input));\n}\n```\n\nAn object representation in JSON will be converted into an associative array.\n\n``` php\n/**\n * @testWith [{\"day\": \"monday\", \"conditions\": \"sunny\"}, [\"day\", \"conditions\"]]\n */\npublic function testArrayKeys(array $array, array $keys): void\n{\n    $this->assertSame($keys, array_keys($array));\n}\n```\n\n## @ticket\n\nThe `@ticket` annotation is an alias for the `@group` annotation (see [@group](#appendixes-annotations-group)) and allows to filter tests based on their ticket ID.\n\n## @uses\n\nThe `@uses` annotation specifies code which will be executed by a test, but is not intended to be covered by the test. A good example is a value object which is necessary for testing a unit of code.\n\n``` php\n/**\n * @covers \\BankAccount\n * @uses   \\Money\n */\npublic function testMoneyCanBeDepositedInAccount(): void\n{\n    // ...\n}\n```\n\n[Example 9.2](code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-invoicetest-php) shows another example.\n\nIn addition to being helpful for persons reading the code, this annotation is useful in strict coverage mode where unintentionally covered code will cause a test to fail. See [Unintentionally Covered Code](risky-tests#risky-tests-unintentionally-covered-code) for more information regarding strict coverage mode.\n\nPlease note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this is not required for the annotation to work correctly).\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/annotations.html](https://phpunit.readthedocs.io/en/9.5/annotations.html)"
- name: assertArrayHasKey()
  id: assertions#assertArrayHasKey()
  summary: Reports an error identified by $message if $array does not have the $key
  belongs_to: Assertions
  description: "## assertArrayHasKey()\n\n` ``assertArrayHasKey(mixed`` ``$key,`` ``array`` ``$array[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$array` does not have the `$key`.\n\n`assertArrayNotHasKey()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.1 Usage of assertArrayHasKey()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ArrayHasKeyTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertArrayHasKey\n              (\n              'foo'\n              ,\n              [\n              'bar'\n              =>\n              'baz'\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ArrayHasKeyTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ArrayHasKeyTest::testFailure\nFailed asserting that an array has the key 'foo'.\n\n/home/sb/ArrayHasKeyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertClassHasAttribute()
  id: assertions#assertClassHasAttribute()
  summary: Reports an error identified by $message if $className::attributeName does not exist
  belongs_to: Assertions
  description: "## assertClassHasAttribute()\n\n` ``assertClassHasAttribute(string`` ``$attributeName,`` ``string`` ``$className[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$className::attributeName` does not exist.\n\n`assertClassNotHasAttribute()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.2 Usage of assertClassHasAttribute()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ClassHasAttributeTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertClassHasAttribute\n              (\n              'foo'\n              ,\n              stdClass\n              ::\n              class\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ClassHasAttributeTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ClassHasAttributeTest::testFailure\nFailed asserting that class \"stdClass\" has attribute \"foo\".\n\n/home/sb/ClassHasAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertClassHasStaticAttribute()
  id: assertions#assertClassHasStaticAttribute()
  summary: Reports an error identified by $message if $className::attributeName does not exist
  belongs_to: Assertions
  description: "## assertClassHasStaticAttribute()\n\n` ``assertClassHasStaticAttribute(string`` ``$attributeName,`` ``string`` ``$className[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$className::attributeName` does not exist.\n\n`assertClassNotHasStaticAttribute()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.3 Usage of assertClassHasStaticAttribute()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ClassHasStaticAttributeTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertClassHasStaticAttribute\n              (\n              'foo'\n              ,\n              stdClass\n              ::\n              class\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ClassHasStaticAttributeTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ClassHasStaticAttributeTest::testFailure\nFailed asserting that class \"stdClass\" has static attribute \"foo\".\n\n/home/sb/ClassHasStaticAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertContains()
  id: assertions#assertContains()
  summary: Reports an error identified by $message if $needle is not an element of $haystack
  belongs_to: Assertions
  description: "## assertContains()\n\n` ``assertContains(mixed`` ``$needle,`` ``iterable`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$needle` is not an element of `$haystack`.\n\n`assertNotContains()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.4 Usage of assertContains()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ContainsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertContains\n              (\n              4\n              ,\n              [\n              1\n              ,\n              2\n              ,\n              3\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ContainsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsTest::testFailure\nFailed asserting that an array contains 4.\n\n/home/sb/ContainsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertContainsOnly()
  id: assertions#assertContainsOnly()
  summary: Reports an error identified by $message if $haystack does not contain only variables of type $type
  belongs_to: Assertions
  description: "## assertContainsOnly()\n\n` ``assertContainsOnly(string`` ``$type,`` ``iterable`` ``$haystack[,`` ``boolean`` ``$isNativeType`` ``=`` ``null,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$haystack` does not contain only variables of type `$type`.\n\n`$isNativeType` is a flag used to indicate whether `$type` is a native PHP type or not.\n\n`assertNotContainsOnly()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.7 Usage of assertContainsOnly()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ContainsOnlyTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertContainsOnly\n              (\n              'string'\n              ,\n              [\n              '1'\n              ,\n              '2'\n              ,\n              3\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ContainsOnlyTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsOnlyTest::testFailure\nFailed asserting that Array (\n    0 => '1'\n    1 => '2'\n    2 => 3\n) contains only values of type \"string\".\n\n/home/sb/ContainsOnlyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertContainsOnlyInstancesOf()
  id: assertions#assertContainsOnlyInstancesOf()
  summary: Reports an error identified by $message if $haystack does not contain only instances of class $classname
  belongs_to: Assertions
  description: "## assertContainsOnlyInstancesOf()\n\n` ``assertContainsOnlyInstancesOf(string`` ``$classname,`` ``Traversable|array`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$haystack` does not contain only instances of class `$classname`.\n\nExample 1.8 Usage of assertContainsOnlyInstancesOf()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ContainsOnlyInstancesOfTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertContainsOnlyInstancesOf\n              (\n              Foo\n              ::\n              class\n              ,\n              [\n              new\n              Foo\n              ,\n              new\n              Bar\n              ,\n              new\n              Foo\n              ]\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ContainsOnlyInstancesOfTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsOnlyInstancesOfTest::testFailure\nFailed asserting that Array ([0]=> Bar Object(...)) is an instance of class \"Foo\".\n\n/home/sb/ContainsOnlyInstancesOfTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertCount()
  id: assertions#assertCount()
  summary: Reports an error identified by $message if the number of elements in $haystack is not $expectedCount
  belongs_to: Assertions
  description: "## assertCount()\n\n` ``assertCount($expectedCount,`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the number of elements in `$haystack` is not `$expectedCount`.\n\n`assertNotCount()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.9 Usage of assertCount()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              CountTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertCount\n              (\n              0\n              ,\n              [\n              'foo'\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit CountTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) CountTest::testFailure\nFailed asserting that actual size 1 matches expected size 0.\n\n/home/sb/CountTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertDirectoryExists()
  id: assertions#assertDirectoryExists()
  summary: Reports an error identified by $message if the directory specified by $directory does not exist
  belongs_to: Assertions
  description: "## assertDirectoryExists()\n\n` ``assertDirectoryExists(string`` ``$directory[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the directory specified by `$directory` does not exist.\n\n`assertDirectoryDoesNotExist()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.10 Usage of assertDirectoryExists()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              DirectoryExistsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertDirectoryExists\n              (\n              '/path/to/directory'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit DirectoryExistsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) DirectoryExistsTest::testFailure\nFailed asserting that directory \"/path/to/directory\" exists.\n\n/home/sb/DirectoryExistsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertDirectoryIsReadable()
  id: assertions#assertDirectoryIsReadable()
  summary: Reports an error identified by $message if the directory specified by $directory is not a directory or is not readable
  belongs_to: Assertions
  description: "## assertDirectoryIsReadable()\n\n` ``assertDirectoryIsReadable(string`` ``$directory[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the directory specified by `$directory` is not a directory or is not readable.\n\n`assertDirectoryIsNotReadable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.11 Usage of assertDirectoryIsReadable()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              DirectoryIsReadableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertDirectoryIsReadable\n              (\n              '/path/to/directory'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit DirectoryIsReadableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) DirectoryIsReadableTest::testFailure\nFailed asserting that \"/path/to/directory\" is readable.\n\n/home/sb/DirectoryIsReadableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertDirectoryIsWritable()
  id: assertions#assertDirectoryIsWritable()
  summary: Reports an error identified by $message if the directory specified by $directory is not a directory or is not writable
  belongs_to: Assertions
  description: "## assertDirectoryIsWritable()\n\n` ``assertDirectoryIsWritable(string`` ``$directory[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the directory specified by `$directory` is not a directory or is not writable.\n\n`assertDirectoryIsNotWritable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.12 Usage of assertDirectoryIsWritable()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              DirectoryIsWritableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertDirectoryIsWritable\n              (\n              '/path/to/directory'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit DirectoryIsWritableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) DirectoryIsWritableTest::testFailure\nFailed asserting that \"/path/to/directory\" is writable.\n\n/home/sb/DirectoryIsWritableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertEmpty()
  id: assertions#assertEmpty()
  summary: Reports an error identified by $message if $actual is not empty
  belongs_to: Assertions
  description: "## assertEmpty()\n\n` ``assertEmpty(mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not empty.\n\n`assertNotEmpty()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.13 Usage of assertEmpty()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EmptyTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertEmpty\n              ([\n              'foo'\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EmptyTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) EmptyTest::testFailure\nFailed asserting that an array is empty.\n\n/home/sb/EmptyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertEquals()
  id: assertions#assertEquals()
  summary: Reports an error identified by $message if the two variables $expected and $actual are not equal
  belongs_to: Assertions
  description: "## assertEquals()\n\n` ``assertEquals(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` are not equal.\n\n`assertNotEquals()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.14 Usage of assertEquals()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertEquals\n              (\n              1\n              ,\n              0\n              );\n              }\n              public\n              function\n              testFailure2\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertEquals\n              (\n              'bar'\n              ,\n              'baz'\n              );\n              }\n              public\n              function\n              testFailure3\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertEquals\n              (\n              \"foo\n              \\n\n              bar\n              \\n\n              baz\n              \\n\n              \"\n              ,\n              \"foo\n              \\n\n              bah\n              \\n\n              baz\n              \\n\n              \"\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nFFF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere were 3 failures:\n\n1) EqualsTest::testFailure\nFailed asserting that 0 matches expected 1.\n\n/home/sb/EqualsTest.php:6\n\n2) EqualsTest::testFailure2\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'bar'\n+'baz'\n\n/home/sb/EqualsTest.php:11\n\n3) EqualsTest::testFailure3\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n 'foo\n-bar\n+bah\n baz\n '\n\n/home/sb/EqualsTest.php:16\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 3.\n```\n\nMore specialized comparisons are used for specific argument types for `$expected` and `$actual`, see below.\n\n` ``assertEquals(DOMDocument`` ``$expected,`` ``DOMDocument`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the uncommented canonical form of the XML documents represented by the two DOMDocument objects `$expected` and `$actual` are not equal.\n\nExample 1.15 Usage of assertEquals() with DOMDocument objects\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $expected\n              =\n              new\n              DOMDocument\n              ;\n              $expected\n              ->\n              loadXML\n              (\n              '<foo><bar/></foo>'\n              );\n              $actual\n              =\n              new\n              DOMDocument\n              ;\n              $actual\n              ->\n              loadXML\n              (\n              '<bar><foo/></bar>'\n              );\n              $this\n              ->\n              assertEquals\n              (\n              $expected\n              ,\n              $actual\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n-<foo>\n-  <bar/>\n-</foo>\n+<bar>\n+  <foo/>\n+</bar>\n\n/home/sb/EqualsTest.php:12\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n` ``assertEquals(object`` ``$expected,`` ``object`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two objects `$expected` and `$actual` do not have equal attribute values.\n\nExample 1.16 Usage of assertEquals() with objects\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $expected\n              =\n              new\n              stdClass\n              ;\n              $expected\n              ->\n              foo\n              =\n              'foo'\n              ;\n              $expected\n              ->\n              bar\n              =\n              'bar'\n              ;\n              $actual\n              =\n              new\n              stdClass\n              ;\n              $actual\n              ->\n              foo\n              =\n              'bar'\n              ;\n              $actual\n              ->\n              baz\n              =\n              'bar'\n              ;\n              $this\n              ->\n              assertEquals\n              (\n              $expected\n              ,\n              $actual\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n stdClass Object (\n-    'foo' => 'foo'\n-    'bar' => 'bar'\n+    'foo' => 'bar'\n+    'baz' => 'bar'\n )\n\n/home/sb/EqualsTest.php:14\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n` ``assertEquals(array`` ``$expected,`` ``array`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two arrays `$expected` and `$actual` are not equal.\n\nExample 1.17 Usage of assertEquals() with arrays\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertEquals\n              ([\n              'a'\n              ,\n              'b'\n              ,\n              'c'\n              ],\n              [\n              'a'\n              ,\n              'c'\n              ,\n              'd'\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     0 => 'a'\n-    1 => 'b'\n-    2 => 'c'\n+    1 => 'c'\n+    2 => 'd'\n )\n\n/home/sb/EqualsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertEqualsCanonicalizing()
  id: assertions#assertEqualsCanonicalizing()
  summary: Reports an error identified by $message if the two variables $expected and $actual are not equal
  belongs_to: Assertions
  description: "## assertEqualsCanonicalizing()\n\n` ``assertEqualsCanonicalizing(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` are not equal.\n\nThe contents of `$expected` and `$actual` are canonicalized before they are compared. For instance, when the two variables `$expected` and `$actual` are arrays, then these arrays are sorted before they are compared. When `$expected` and `$actual` are objects, each object is converted to an array containing all private, protected and public attributes.\n\n`assertNotEqualsCanonicalizing()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.18 Usage of assertEqualsCanonicalizing()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsCanonicalizingTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertEqualsCanonicalizing\n              ([\n              3\n              ,\n              2\n              ,\n              1\n              ],\n              [\n              2\n              ,\n              3\n              ,\n              0\n              ,\n              1\n              ]);\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsCanonicalizingTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 42 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) EqualsCanonicalizingTest::testFailure\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => 1\n-    1 => 2\n-    2 => 3\n+    0 => 0\n+    1 => 1\n+    2 => 2\n+    3 => 3\n )\n\n/home/sb/EqualsCanonicalizingTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertEqualsIgnoringCase()
  id: assertions#assertEqualsIgnoringCase()
  summary: Reports an error identified by $message if the two variables $expected and $actual are not equal
  belongs_to: Assertions
  description: "## assertEqualsIgnoringCase()\n\n` ``assertEqualsIgnoringCase(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` are not equal.\n\nDifferences in casing are ignored for the comparison of `$expected` and `$actual`.\n\n`assertNotEqualsIgnoringCase()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.19 Usage of assertEqualsIgnoringCase()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsIgnoringCaseTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertEqualsIgnoringCase\n              (\n              'foo'\n              ,\n              'BAR'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsIgnoringCaseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 51 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) EqualsIgnoringCaseTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'foo'\n+'BAR'\n\n/home/sb/EqualsIgnoringCaseTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertEqualsWithDelta()
  id: assertions#assertEqualsWithDelta()
  summary: Reports an error identified by $message if the absolute difference between $expected and $actual is greater than $delta
  belongs_to: Assertions
  description: "## assertEqualsWithDelta()\n\n` ``assertEqualsWithDelta(mixed`` ``$expected,`` ``mixed`` ``$actual,`` ``float`` ``$delta[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the absolute difference between `$expected` and `$actual` is greater than `$delta`.\n\nPlease read “[What Every Computer Scientist Should Know About Floating-Point Arithmetic](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)” to understand why `$delta` is necessary.\n\n`assertNotEqualsWithDelta()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.20 Usage of assertEqualsWithDelta()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              EqualsWithDeltaTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertEqualsWithDelta\n              (\n              1.0\n              ,\n              1.5\n              ,\n              0.1\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsWithDeltaTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 41 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) EqualsWithDeltaTest::testFailure\nFailed asserting that 1.5 matches expected 1.0.\n\n/home/sb/EqualsWithDeltaTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertFalse()
  id: assertions#assertFalse()
  summary: Reports an error identified by $message if $condition is true
  belongs_to: Assertions
  description: "## assertFalse()\n\n` ``assertFalse(bool`` ``$condition[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$condition` is `true`.\n\n`assertNotFalse()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.23 Usage of assertFalse()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              FalseTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertFalse\n              (\n              true\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit FalseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) FalseTest::testFailure\nFailed asserting that true is false.\n\n/home/sb/FalseTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertFileEquals()
  id: assertions#assertFileEquals()
  summary: Reports an error identified by $message if the file specified by $expected does not have the same contents as the file specified by $actual
  belongs_to: Assertions
  description: "## assertFileEquals()\n\n` ``assertFileEquals(string`` ``$expected,`` ``string`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file specified by `$expected` does not have the same contents as the file specified by `$actual`.\n\n`assertFileNotEquals()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.24 Usage of assertFileEquals()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              FileEqualsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertFileEquals\n              (\n              '/home/sb/expected'\n              ,\n              '/home/sb/actual'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit FileEqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) FileEqualsTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'expected\n+'actual\n '\n\n/home/sb/FileEqualsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```"
- name: assertFileExists()
  id: assertions#assertFileExists()
  summary: Reports an error identified by $message if the file specified by $filename does not exist
  belongs_to: Assertions
  description: "## assertFileExists()\n\n` ``assertFileExists(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file specified by `$filename` does not exist.\n\n`assertFileDoesNotExist()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.25 Usage of assertFileExists()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              FileExistsTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertFileExists\n              (\n              '/path/to/file'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit FileExistsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileExistsTest::testFailure\nFailed asserting that file \"/path/to/file\" exists.\n\n/home/sb/FileExistsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertFileIsReadable()
  id: assertions#assertFileIsReadable()
  summary: Reports an error identified by $message if the file specified by $filename is not a file or is not readable
  belongs_to: Assertions
  description: "## assertFileIsReadable()\n\n` ``assertFileIsReadable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file specified by `$filename` is not a file or is not readable.\n\n`assertFileIsNotReadable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.26 Usage of assertFileIsReadable()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              FileIsReadableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertFileIsReadable\n              (\n              '/path/to/file'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit FileIsReadableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileIsReadableTest::testFailure\nFailed asserting that \"/path/to/file\" is readable.\n\n/home/sb/FileIsReadableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertFileIsWritable()
  id: assertions#assertFileIsWritable()
  summary: Reports an error identified by $message if the file specified by $filename is not a file or is not writable
  belongs_to: Assertions
  description: "## assertFileIsWritable()\n\n` ``assertFileIsWritable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file specified by `$filename` is not a file or is not writable.\n\n`assertFileIsNotWritable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.27 Usage of assertFileIsWritable()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              FileIsWritableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertFileIsWritable\n              (\n              '/path/to/file'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit FileIsWritableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileIsWritableTest::testFailure\nFailed asserting that \"/path/to/file\" is writable.\n\n/home/sb/FileIsWritableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertGreaterThan()
  id: assertions#assertGreaterThan()
  summary: Reports an error identified by $message if the value of $actual is not greater than the value of $expected
  belongs_to: Assertions
  description: "## assertGreaterThan()\n\n` ``assertGreaterThan(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actual` is not greater than the value of `$expected`.\n\nExample 1.28 Usage of assertGreaterThan()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              GreaterThanTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertGreaterThan\n              (\n              2\n              ,\n              1\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit GreaterThanTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) GreaterThanTest::testFailure\nFailed asserting that 1 is greater than 2.\n\n/home/sb/GreaterThanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertGreaterThanOrEqual()
  id: assertions#assertGreaterThanOrEqual()
  summary: Reports an error identified by $message if the value of $actual is not greater than or equal to the value of $expected
  belongs_to: Assertions
  description: "## assertGreaterThanOrEqual()\n\n` ``assertGreaterThanOrEqual(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actual` is not greater than or equal to the value of `$expected`.\n\nExample 1.29 Usage of assertGreaterThanOrEqual()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              GreatThanOrEqualTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertGreaterThanOrEqual\n              (\n              2\n              ,\n              1\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit GreaterThanOrEqualTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) GreatThanOrEqualTest::testFailure\nFailed asserting that 1 is equal to 2 or is greater than 2.\n\n/home/sb/GreaterThanOrEqualTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```"
- name: assertInfinite()
  id: assertions#assertInfinite()
  summary: Reports an error identified by $message if $variable is not INF
  belongs_to: Assertions
  description: "## assertInfinite()\n\n` ``assertInfinite(mixed`` ``$variable[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$variable` is not `INF`.\n\n`assertFinite()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.30 Usage of assertInfinite()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              InfiniteTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertInfinite\n              (\n              1\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit InfiniteTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InfiniteTest::testFailure\nFailed asserting that 1 is infinite.\n\n/home/sb/InfiniteTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertInstanceOf()
  id: assertions#assertInstanceOf()
  summary: Reports an error identified by $message if $actual is not an instance of $expected
  belongs_to: Assertions
  description: "## assertInstanceOf()\n\n` ``assertInstanceOf($expected,`` ``$actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not an instance of `$expected`.\n\n`assertNotInstanceOf()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.31 Usage of assertInstanceOf()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              InstanceOfTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertInstanceOf\n              (\n              RuntimeException\n              ::\n              class\n              ,\n              new\n              Exception\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit InstanceOfTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InstanceOfTest::testFailure\nFailed asserting that Exception Object (...) is an instance of class \"RuntimeException\".\n\n/home/sb/InstanceOfTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: Assertions
  id: assertions
  summary: This appendix lists the various assertion methods that are available
  description: "# Assertions\n\nThis appendix lists the various assertion methods that are available.\n\n## Static vs. Non-Static Usage of Assertion Methods\n\nPHPUnit’s assertions are implemented in `PHPUnit\\Framework\\Assert`. `PHPUnit\\Framework\\TestCase` inherits from `PHPUnit\\Framework\\Assert`.\n\nThe assertion methods are declared static and can be invoked from any context using `PHPUnit\\Framework\\Assert::assertTrue()`, for instance, or using `$this->assertTrue()` or `self::assertTrue()`, for instance, in a class that extends `PHPUnit\\Framework\\TestCase`. You can even use global function wrappers such as `assertTrue()`.\n\nA common question, especially from developers new to PHPUnit, is whether using `$this->assertTrue()` or `self::assertTrue()`, for instance, is “the right way” to invoke an assertion. The short answer is: there is no right way. And there is no wrong way, either. It is a matter of personal preference.\n\nFor most people it just “feels right” to use `$this->assertTrue()` because the test method is invoked on a test object. The fact that the assertion methods are declared static allows for (re)using them outside the scope of a test object. Lastly, the global function wrappers allow developers to type less characters (`assertTrue()` instead of `$this->assertTrue()` or `self::assertTrue()`).\n\n## assertArrayHasKey()\n\n`assertArrayHasKey(mixed`` ``$key,`` ``array`` ``$array[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$array` does not have the `$key`.\n\n`assertArrayNotHasKey()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.1 Usage of assertArrayHasKey()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ArrayHasKeyTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertArrayHasKey('foo', ['bar' => 'baz']);\n    }\n}\n```\n\n``` php\n$ phpunit ArrayHasKeyTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ArrayHasKeyTest::testFailure\nFailed asserting that an array has the key 'foo'.\n\n/home/sb/ArrayHasKeyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertClassHasAttribute()\n\n`assertClassHasAttribute(string`` ``$attributeName,`` ``string`` ``$className[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$className::attributeName` does not exist.\n\n`assertClassNotHasAttribute()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.2 Usage of assertClassHasAttribute()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ClassHasAttributeTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertClassHasAttribute('foo', stdClass::class);\n    }\n}\n```\n\n``` php\n$ phpunit ClassHasAttributeTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ClassHasAttributeTest::testFailure\nFailed asserting that class \"stdClass\" has attribute \"foo\".\n\n/home/sb/ClassHasAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertClassHasStaticAttribute()\n\n`assertClassHasStaticAttribute(string`` ``$attributeName,`` ``string`` ``$className[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$className::attributeName` does not exist.\n\n`assertClassNotHasStaticAttribute()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.3 Usage of assertClassHasStaticAttribute()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ClassHasStaticAttributeTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertClassHasStaticAttribute('foo', stdClass::class);\n    }\n}\n```\n\n``` php\n$ phpunit ClassHasStaticAttributeTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ClassHasStaticAttributeTest::testFailure\nFailed asserting that class \"stdClass\" has static attribute \"foo\".\n\n/home/sb/ClassHasStaticAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertContains()\n\n`assertContains(mixed`` ``$needle,`` ``iterable`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$needle` is not an element of `$haystack`.\n\n`assertNotContains()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.4 Usage of assertContains()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContains(4, [1, 2, 3]);\n    }\n}\n```\n\n``` php\n$ phpunit ContainsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsTest::testFailure\nFailed asserting that an array contains 4.\n\n/home/sb/ContainsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertStringContainsString()\n\n`assertStringContainsString(string`` ``$needle,`` ``string`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$needle` is not a substring of `$haystack`.\n\n`assertStringNotContainsString()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.5 Usage of assertStringContainsString()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringContainsStringTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringContainsString('foo', 'bar');\n    }\n}\n```\n\n``` php\n$ phpunit StringContainsStringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 37 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) StringContainsStringTest::testFailure\nFailed asserting that 'bar' contains \"foo\".\n\n/home/sb/StringContainsStringTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertStringContainsStringIgnoringCase()\n\n`assertStringContainsStringIgnoringCase(string`` ``$needle,`` ``string`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$needle` is not a substring of `$haystack`.\n\nDifferences in casing are ignored when `$needle` is searched for in `$haystack`.\n\n`assertStringNotContainsStringIgnoringCase()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.6 Usage of assertStringContainsStringIgnoringCase()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringContainsStringIgnoringCaseTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringContainsStringIgnoringCase('foo', 'bar');\n    }\n}\n```\n\n``` php\n$ phpunit StringContainsStringIgnoringCaseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 40 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) StringContainsStringTest::testFailure\nFailed asserting that 'bar' contains \"foo\".\n\n/home/sb/StringContainsStringIgnoringCaseTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertContainsOnly()\n\n`assertContainsOnly(string`` ``$type,`` ``iterable`` ``$haystack[,`` ``boolean`` ``$isNativeType`` ``=`` ``null,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$haystack` does not contain only variables of type `$type`.\n\n`$isNativeType` is a flag used to indicate whether `$type` is a native PHP type or not.\n\n`assertNotContainsOnly()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.7 Usage of assertContainsOnly()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnly('string', ['1', '2', 3]);\n    }\n}\n```\n\n``` php\n$ phpunit ContainsOnlyTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsOnlyTest::testFailure\nFailed asserting that Array (\n    0 => '1'\n    1 => '2'\n    2 => 3\n) contains only values of type \"string\".\n\n/home/sb/ContainsOnlyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertContainsOnlyInstancesOf()\n\n`assertContainsOnlyInstancesOf(string`` ``$classname,`` ``Traversable|array`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$haystack` does not contain only instances of class `$classname`.\n\nExample 1.8 Usage of assertContainsOnlyInstancesOf()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ContainsOnlyInstancesOfTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertContainsOnlyInstancesOf(\n            Foo::class,\n            [new Foo, new Bar, new Foo]\n        );\n    }\n}\n```\n\n``` php\n$ phpunit ContainsOnlyInstancesOfTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ContainsOnlyInstancesOfTest::testFailure\nFailed asserting that Array ([0]=> Bar Object(...)) is an instance of class \"Foo\".\n\n/home/sb/ContainsOnlyInstancesOfTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertCount()\n\n`assertCount($expectedCount,`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the number of elements in `$haystack` is not `$expectedCount`.\n\n`assertNotCount()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.9 Usage of assertCount()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class CountTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertCount(0, ['foo']);\n    }\n}\n```\n\n``` php\n$ phpunit CountTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) CountTest::testFailure\nFailed asserting that actual size 1 matches expected size 0.\n\n/home/sb/CountTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertDirectoryExists()\n\n`assertDirectoryExists(string`` ``$directory[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the directory specified by `$directory` does not exist.\n\n`assertDirectoryDoesNotExist()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.10 Usage of assertDirectoryExists()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DirectoryExistsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertDirectoryExists('/path/to/directory');\n    }\n}\n```\n\n``` php\n$ phpunit DirectoryExistsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) DirectoryExistsTest::testFailure\nFailed asserting that directory \"/path/to/directory\" exists.\n\n/home/sb/DirectoryExistsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertDirectoryIsReadable()\n\n`assertDirectoryIsReadable(string`` ``$directory[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the directory specified by `$directory` is not a directory or is not readable.\n\n`assertDirectoryIsNotReadable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.11 Usage of assertDirectoryIsReadable()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DirectoryIsReadableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertDirectoryIsReadable('/path/to/directory');\n    }\n}\n```\n\n``` php\n$ phpunit DirectoryIsReadableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) DirectoryIsReadableTest::testFailure\nFailed asserting that \"/path/to/directory\" is readable.\n\n/home/sb/DirectoryIsReadableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertDirectoryIsWritable()\n\n`assertDirectoryIsWritable(string`` ``$directory[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the directory specified by `$directory` is not a directory or is not writable.\n\n`assertDirectoryIsNotWritable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.12 Usage of assertDirectoryIsWritable()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DirectoryIsWritableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertDirectoryIsWritable('/path/to/directory');\n    }\n}\n```\n\n``` php\n$ phpunit DirectoryIsWritableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) DirectoryIsWritableTest::testFailure\nFailed asserting that \"/path/to/directory\" is writable.\n\n/home/sb/DirectoryIsWritableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertEmpty()\n\n`assertEmpty(mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not empty.\n\n`assertNotEmpty()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.13 Usage of assertEmpty()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EmptyTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertEmpty(['foo']);\n    }\n}\n```\n\n``` php\n$ phpunit EmptyTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) EmptyTest::testFailure\nFailed asserting that an array is empty.\n\n/home/sb/EmptyTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertEquals()\n\n`assertEquals(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` are not equal.\n\n`assertNotEquals()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.14 Usage of assertEquals()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertEquals(1, 0);\n    }\n\n    public function testFailure2(): void\n    {\n        $this->assertEquals('bar', 'baz');\n    }\n\n    public function testFailure3(): void\n    {\n        $this->assertEquals(\"foo\\nbar\\nbaz\\n\", \"foo\\nbah\\nbaz\\n\");\n    }\n}\n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nFFF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere were 3 failures:\n\n1) EqualsTest::testFailure\nFailed asserting that 0 matches expected 1.\n\n/home/sb/EqualsTest.php:6\n\n2) EqualsTest::testFailure2\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'bar'\n+'baz'\n\n/home/sb/EqualsTest.php:11\n\n3) EqualsTest::testFailure3\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n 'foo\n-bar\n+bah\n baz\n '\n\n/home/sb/EqualsTest.php:16\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 3.\n```\n\nMore specialized comparisons are used for specific argument types for `$expected` and `$actual`, see below.\n\n`assertEquals(DOMDocument`` ``$expected,`` ``DOMDocument`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the uncommented canonical form of the XML documents represented by the two DOMDocument objects `$expected` and `$actual` are not equal.\n\nExample 1.15 Usage of assertEquals() with DOMDocument objects\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $expected = new DOMDocument;\n        $expected->loadXML('<foo><bar/></foo>');\n\n        $actual = new DOMDocument;\n        $actual->loadXML('<bar><foo/></bar>');\n\n        $this->assertEquals($expected, $actual);\n    }\n}\n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n-<foo>\n-  <bar/>\n-</foo>\n+<bar>\n+  <foo/>\n+</bar>\n\n/home/sb/EqualsTest.php:12\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n`assertEquals(object`` ``$expected,`` ``object`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two objects `$expected` and `$actual` do not have equal attribute values.\n\nExample 1.16 Usage of assertEquals() with objects\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $expected = new stdClass;\n        $expected->foo = 'foo';\n        $expected->bar = 'bar';\n\n        $actual = new stdClass;\n        $actual->foo = 'bar';\n        $actual->baz = 'bar';\n\n        $this->assertEquals($expected, $actual);\n    }\n}\n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n stdClass Object (\n-    'foo' => 'foo'\n-    'bar' => 'bar'\n+    'foo' => 'bar'\n+    'baz' => 'bar'\n )\n\n/home/sb/EqualsTest.php:14\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n`assertEquals(array`` ``$expected,`` ``array`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two arrays `$expected` and `$actual` are not equal.\n\nExample 1.17 Usage of assertEquals() with arrays\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertEquals(['a', 'b', 'c'], ['a', 'c', 'd']);\n    }\n}\n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) EqualsTest::testFailure\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     0 => 'a'\n-    1 => 'b'\n-    2 => 'c'\n+    1 => 'c'\n+    2 => 'd'\n )\n\n/home/sb/EqualsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertEqualsCanonicalizing()\n\n`assertEqualsCanonicalizing(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` are not equal.\n\nThe contents of `$expected` and `$actual` are canonicalized before they are compared. For instance, when the two variables `$expected` and `$actual` are arrays, then these arrays are sorted before they are compared. When `$expected` and `$actual` are objects, each object is converted to an array containing all private, protected and public attributes.\n\n`assertNotEqualsCanonicalizing()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.18 Usage of assertEqualsCanonicalizing()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsCanonicalizingTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertEqualsCanonicalizing([3, 2, 1], [2, 3, 0, 1]);\n    }\n}\n```\n\n``` php\n$ phpunit EqualsCanonicalizingTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 42 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) EqualsCanonicalizingTest::testFailure\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => 1\n-    1 => 2\n-    2 => 3\n+    0 => 0\n+    1 => 1\n+    2 => 2\n+    3 => 3\n )\n\n/home/sb/EqualsCanonicalizingTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertEqualsIgnoringCase()\n\n`assertEqualsIgnoringCase(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` are not equal.\n\nDifferences in casing are ignored for the comparison of `$expected` and `$actual`.\n\n`assertNotEqualsIgnoringCase()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.19 Usage of assertEqualsIgnoringCase()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsIgnoringCaseTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertEqualsIgnoringCase('foo', 'BAR');\n    }\n}\n```\n\n``` php\n$ phpunit EqualsIgnoringCaseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 51 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) EqualsIgnoringCaseTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'foo'\n+'BAR'\n\n/home/sb/EqualsIgnoringCaseTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertEqualsWithDelta()\n\n`assertEqualsWithDelta(mixed`` ``$expected,`` ``mixed`` ``$actual,`` ``float`` ``$delta[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the absolute difference between `$expected` and `$actual` is greater than `$delta`.\n\nPlease read “[What Every Computer Scientist Should Know About Floating-Point Arithmetic](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)” to understand why `$delta` is necessary.\n\n`assertNotEqualsWithDelta()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.20 Usage of assertEqualsWithDelta()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class EqualsWithDeltaTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertEqualsWithDelta(1.0, 1.5, 0.1);\n    }\n}\n```\n\n``` php\n$ phpunit EqualsWithDeltaTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 41 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) EqualsWithDeltaTest::testFailure\nFailed asserting that 1.5 matches expected 1.0.\n\n/home/sb/EqualsWithDeltaTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertObjectEquals()\n\n`assertObjectEquals(object`` ``$expected,`` ``object`` ``$actual,`` ``string`` ``$method`` ``=`` ``'equals',`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not equal to `$expected` according to `$actual->$method($expected)`.\n\nIt is a bad practice to use `assertEquals()` (and its inverse, `assertNotEquals()`) on objects without registering a custom comparator that customizes how objects are compared. Unfortunately, though, implementing custom comparators for each and every object you want to assert in your tests is inconvenient at best.\n\nThe most common use case for custom comparators are Value Objects. These objects usually have an `equals(self`` ``$other):`` ``bool` method (or a method just like that but with a different name) for comparing two instances of the Value Object’s type. `assertObjectEquals()` makes custom comparison of objects convenient for this common use case:\n\nExample 1.21 Usage of assertObjectEquals()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SomethingThatUsesEmailTest extends TestCase\n{\n    public function testSomething(): void\n    {\n        $a = new Email('user@example.org');\n        $b = new Email('user@example.org');\n        $c = new Email('user@example.com');\n\n        // This passes\n        $this->assertObjectEquals($a, $b);\n\n        // This fails\n        $this->assertObjectEquals($a, $c);\n    }\n}\n```\n\nExample 1.22 Email value object with equals() method\n\n``` php\n<?php declare(strict_types=1);\nfinal class Email\n{\n    private string $email;\n\n    public function __construct(string $email)\n    {\n        $this->ensureIsValidEmail($email);\n\n        $this->email = $email;\n    }\n\n    public function asString(): string\n    {\n        return $this->email;\n    }\n\n    public function equals(self $other): bool\n    {\n        return $this->asString() === $other->asString();\n    }\n\n    private function ensureIsValidEmail(string $email): void\n    {\n        // ...\n    }\n}\n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 00:00.017, Memory: 4.00 MB\n\nThere was 1 failure:\n\n1) SomethingThatUsesEmailTest::testSomething\nFailed asserting that two objects are equal.\nThe objects are not equal according to Email::equals().\n\n/home/sb/SomethingThatUsesEmailTest.php:16\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\nPlease note:\n\n- A method with name `$method` must exist on the `$actual` object\n- The method must accept exactly one argument\n- The respective parameter must have a declared type\n- The `$expected` object must be compatible with this declared type\n- The method must have a declared `bool` return type\n\nIf any of the aforementioned assumptions is not fulfilled or if `$actual->$method($expected)` returns `false` then the assertion fails.\n\n## assertFalse()\n\n`assertFalse(bool`` ``$condition[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$condition` is `true`.\n\n`assertNotFalse()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.23 Usage of assertFalse()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FalseTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFalse(true);\n    }\n}\n```\n\n``` php\n$ phpunit FalseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) FalseTest::testFailure\nFailed asserting that true is false.\n\n/home/sb/FalseTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertFileEquals()\n\n`assertFileEquals(string`` ``$expected,`` ``string`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file specified by `$expected` does not have the same contents as the file specified by `$actual`.\n\n`assertFileNotEquals()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.24 Usage of assertFileEquals()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FileEqualsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFileEquals('/home/sb/expected', '/home/sb/actual');\n    }\n}\n```\n\n``` php\n$ phpunit FileEqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) FileEqualsTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'expected\n+'actual\n '\n\n/home/sb/FileEqualsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```\n\n## assertFileExists()\n\n`assertFileExists(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file specified by `$filename` does not exist.\n\n`assertFileDoesNotExist()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.25 Usage of assertFileExists()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FileExistsTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFileExists('/path/to/file');\n    }\n}\n```\n\n``` php\n$ phpunit FileExistsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileExistsTest::testFailure\nFailed asserting that file \"/path/to/file\" exists.\n\n/home/sb/FileExistsTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertFileIsReadable()\n\n`assertFileIsReadable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file specified by `$filename` is not a file or is not readable.\n\n`assertFileIsNotReadable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.26 Usage of assertFileIsReadable()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FileIsReadableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFileIsReadable('/path/to/file');\n    }\n}\n```\n\n``` php\n$ phpunit FileIsReadableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileIsReadableTest::testFailure\nFailed asserting that \"/path/to/file\" is readable.\n\n/home/sb/FileIsReadableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertFileIsWritable()\n\n`assertFileIsWritable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file specified by `$filename` is not a file or is not writable.\n\n`assertFileIsNotWritable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.27 Usage of assertFileIsWritable()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FileIsWritableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertFileIsWritable('/path/to/file');\n    }\n}\n```\n\n``` php\n$ phpunit FileIsWritableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) FileIsWritableTest::testFailure\nFailed asserting that \"/path/to/file\" is writable.\n\n/home/sb/FileIsWritableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertGreaterThan()\n\n`assertGreaterThan(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actual` is not greater than the value of `$expected`.\n\nExample 1.28 Usage of assertGreaterThan()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class GreaterThanTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertGreaterThan(2, 1);\n    }\n}\n```\n\n``` php\n$ phpunit GreaterThanTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) GreaterThanTest::testFailure\nFailed asserting that 1 is greater than 2.\n\n/home/sb/GreaterThanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertGreaterThanOrEqual()\n\n`assertGreaterThanOrEqual(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actual` is not greater than or equal to the value of `$expected`.\n\nExample 1.29 Usage of assertGreaterThanOrEqual()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class GreatThanOrEqualTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertGreaterThanOrEqual(2, 1);\n    }\n}\n```\n\n``` php\n$ phpunit GreaterThanOrEqualTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) GreatThanOrEqualTest::testFailure\nFailed asserting that 1 is equal to 2 or is greater than 2.\n\n/home/sb/GreaterThanOrEqualTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\n## assertInfinite()\n\n`assertInfinite(mixed`` ``$variable[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$variable` is not `INF`.\n\n`assertFinite()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.30 Usage of assertInfinite()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class InfiniteTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertInfinite(1);\n    }\n}\n```\n\n``` php\n$ phpunit InfiniteTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InfiniteTest::testFailure\nFailed asserting that 1 is infinite.\n\n/home/sb/InfiniteTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertInstanceOf()\n\n`assertInstanceOf($expected,`` ``$actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not an instance of `$expected`.\n\n`assertNotInstanceOf()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.31 Usage of assertInstanceOf()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class InstanceOfTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertInstanceOf(RuntimeException::class, new Exception);\n    }\n}\n```\n\n``` php\n$ phpunit InstanceOfTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) InstanceOfTest::testFailure\nFailed asserting that Exception Object (...) is an instance of class \"RuntimeException\".\n\n/home/sb/InstanceOfTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsArray()\n\n`assertIsArray($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `array`.\n\n`assertIsNotArray()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.32 Usage of assertIsArray()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ArrayTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsArray(null);\n    }\n}\n```\n\n``` php\n$ phpunit ArrayTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ArrayTest::testFailure\nFailed asserting that null is of type \"array\".\n\n/home/sb/ArrayTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsBool()\n\n`assertIsBool($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `bool`.\n\n`assertIsNotBool()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.33 Usage of assertIsBool()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class BoolTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertIsBool(null);\n    }\n}\n```\n\n``` php\n$ phpunit BoolTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) BoolTest::testFailure\nFailed asserting that null is of type \"bool\".\n\n/home/sb/BoolTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsCallable()\n\n`assertIsCallable($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `callable`.\n\n`assertIsNotCallable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.34 Usage of assertIsCallable()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass CallableTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsCallable(null);\n    }\n}\n```\n\n``` php\n$ phpunit CallableTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) CallableTest::testFailure\nFailed asserting that null is of type \"callable\".\n\n/home/sb/CallableTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsFloat()\n\n`assertIsFloat($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `float`.\n\n`assertIsNotFloat()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.35 Usage of assertIsFloat()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass FloatTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsFloat(null);\n    }\n}\n```\n\n``` php\n$ phpunit FloatTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) FloatTest::testFailure\nFailed asserting that null is of type \"float\".\n\n/home/sb/FloatTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsInt()\n\n`assertIsInt($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `int`.\n\n`assertIsNotInt()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.36 Usage of assertIsInt()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass IntTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsInt(null);\n    }\n}\n```\n\n``` php\n$ phpunit IntTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) IntTest::testFailure\nFailed asserting that null is of type \"int\".\n\n/home/sb/IntTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsIterable()\n\n`assertIsIterable($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `iterable`.\n\n`assertIsNotIterable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.37 Usage of assertIsIterable()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass IterableTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsIterable(null);\n    }\n}\n```\n\n``` php\n$ phpunit IterableTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) IterableTest::testFailure\nFailed asserting that null is of type \"iterable\".\n\n/home/sb/IterableTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsNumeric()\n\n`assertIsNumeric($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `numeric`.\n\n`assertIsNotNumeric()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.38 Usage of assertIsNumeric()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass NumericTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsNumeric(null);\n    }\n}\n```\n\n``` php\n$ phpunit NumericTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NumericTest::testFailure\nFailed asserting that null is of type \"numeric\".\n\n/home/sb/NumericTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsObject()\n\n`assertIsObject($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `object`.\n\n`assertIsNotObject()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.39 Usage of assertIsObject()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ObjectTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsObject(null);\n    }\n}\n```\n\n``` php\n$ phpunit ObjectTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ObjectTest::testFailure\nFailed asserting that null is of type \"object\".\n\n/home/sb/ObjectTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsResource()\n\n`assertIsResource($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `resource`.\n\n`assertIsNotResource()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.40 Usage of assertIsResource()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ResourceTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsResource(null);\n    }\n}\n```\n\n``` php\n$ phpunit ResourceTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ResourceTest::testFailure\nFailed asserting that null is of type \"resource\".\n\n/home/sb/ResourceTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsScalar()\n\n`assertIsScalar($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `scalar`.\n\n`assertIsNotScalar()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.41 Usage of assertIsScalar()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass ScalarTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsScalar(null);\n    }\n}\n```\n\n``` php\n$ phpunit ScalarTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ScalarTest::testFailure\nFailed asserting that null is of type \"scalar\".\n\n/home/sb/ScalarTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsString()\n\n`assertIsString($actual[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$actual` is not of type `string`.\n\n`assertIsNotString()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.42 Usage of assertIsString()\n\n``` php\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass StringTest extends TestCase\n{\n    public function testFailure()\n    {\n        $this->assertIsString(null);\n    }\n}\n```\n\n``` php\n$ phpunit StringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringTest::testFailure\nFailed asserting that null is of type \"string\".\n\n/home/sb/StringTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsReadable()\n\n`assertIsReadable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file or directory specified by `$filename` is not readable.\n\n`assertIsNotReadable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.43 Usage of assertIsReadable()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class IsReadableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertIsReadable('/path/to/unreadable');\n    }\n}\n```\n\n``` php\n$ phpunit IsReadableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) IsReadableTest::testFailure\nFailed asserting that \"/path/to/unreadable\" is readable.\n\n/home/sb/IsReadableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertIsWritable()\n\n`assertIsWritable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file or directory specified by `$filename` is not writable.\n\n`assertIsNotWritable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.44 Usage of assertIsWritable()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class IsWritableTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertIsWritable('/path/to/unwritable');\n    }\n}\n```\n\n``` php\n$ phpunit IsWritableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) IsWritableTest::testFailure\nFailed asserting that \"/path/to/unwritable\" is writable.\n\n/home/sb/IsWritableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertJsonFileEqualsJsonFile()\n\n`assertJsonFileEqualsJsonFile(mixed`` ``$expectedFile,`` ``mixed`` ``$actualFile[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actualFile` does not match the value of `$expectedFile`.\n\nExample 1.45 Usage of assertJsonFileEqualsJsonFile()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonFileEqualsJsonFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJsonFileEqualsJsonFile(\n          'path/to/fixture/file', 'path/to/actual/file');\n    }\n}\n```\n\n``` php\n$ phpunit JsonFileEqualsJsonFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonFileEqualsJsonFile::testFailure\nFailed asserting that '{\"Mascot\":\"Tux\"}' matches JSON string \"[\"Mascott\", \"Tux\", \"OS\", \"Linux\"]\".\n\n/home/sb/JsonFileEqualsJsonFileTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```\n\n## assertJsonStringEqualsJsonFile()\n\n`assertJsonStringEqualsJsonFile(mixed`` ``$expectedFile,`` ``mixed`` ``$actualJson[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actualJson` does not match the value of `$expectedFile`.\n\nExample 1.46 Usage of assertJsonStringEqualsJsonFile()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonStringEqualsJsonFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJsonStringEqualsJsonFile(\n            'path/to/fixture/file', json_encode(['Mascot' => 'ux'])\n        );\n    }\n}\n```\n\n``` php\n$ phpunit JsonStringEqualsJsonFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonStringEqualsJsonFile::testFailure\nFailed asserting that '{\"Mascot\":\"ux\"}' matches JSON string \"{\"Mascott\":\"Tux\"}\".\n\n/home/sb/JsonStringEqualsJsonFileTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```\n\n## assertJsonStringEqualsJsonString()\n\n`assertJsonStringEqualsJsonString(mixed`` ``$expectedJson,`` ``mixed`` ``$actualJson[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actualJson` does not match the value of `$expectedJson`.\n\nExample 1.47 Usage of assertJsonStringEqualsJsonString()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class JsonStringEqualsJsonStringTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertJsonStringEqualsJsonString(\n            json_encode(['Mascot' => 'Tux']),\n            json_encode(['Mascot' => 'ux'])\n        );\n    }\n}\n```\n\n``` php\n$ phpunit JsonStringEqualsJsonStringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonStringEqualsJsonStringTest::testFailure\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n stdClass Object (\n -    'Mascot' => 'Tux'\n +    'Mascot' => 'ux'\n)\n\n/home/sb/JsonStringEqualsJsonStringTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```\n\n## assertLessThan()\n\n`assertLessThan(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actual` is not less than the value of `$expected`.\n\nExample 1.48 Usage of assertLessThan()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class LessThanTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertLessThan(1, 2);\n    }\n}\n```\n\n``` php\n$ phpunit LessThanTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) LessThanTest::testFailure\nFailed asserting that 2 is less than 1.\n\n/home/sb/LessThanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertLessThanOrEqual()\n\n`assertLessThanOrEqual(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the value of `$actual` is not less than or equal to the value of `$expected`.\n\nExample 1.49 Usage of assertLessThanOrEqual()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class LessThanOrEqualTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertLessThanOrEqual(1, 2);\n    }\n}\n```\n\n``` php\n$ phpunit LessThanOrEqualTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) LessThanOrEqualTest::testFailure\nFailed asserting that 2 is equal to 1 or is less than 1.\n\n/home/sb/LessThanOrEqualTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\n## assertNan()\n\n`assertNan(mixed`` ``$variable[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$variable` is not `NAN`.\n\nExample 1.50 Usage of assertNan()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class NanTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertNan(1);\n    }\n}\n```\n\n``` php\n$ phpunit NanTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NanTest::testFailure\nFailed asserting that 1 is nan.\n\n/home/sb/NanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertNull()\n\n`assertNull(mixed`` ``$variable[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$variable` is not `null`.\n\n`assertNotNull()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.51 Usage of assertNull()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class NullTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertNull('foo');\n    }\n}\n```\n\n``` php\n$ phpunit NotNullTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NullTest::testFailure\nFailed asserting that 'foo' is null.\n\n/home/sb/NotNullTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertObjectHasAttribute()\n\n`assertObjectHasAttribute(string`` ``$attributeName,`` ``object`` ``$object[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$object->attributeName` does not exist.\n\n`assertObjectNotHasAttribute()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.52 Usage of assertObjectHasAttribute()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ObjectHasAttributeTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertObjectHasAttribute('foo', new stdClass);\n    }\n}\n```\n\n``` php\n$ phpunit ObjectHasAttributeTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ObjectHasAttributeTest::testFailure\nFailed asserting that object of class \"stdClass\" has attribute \"foo\".\n\n/home/sb/ObjectHasAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertMatchesRegularExpression()\n\n`assertMatchesRegularExpression(string`` ``$pattern,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$string` does not match the regular expression `$pattern`.\n\n`assertDoesNotMatchRegularExpression()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.53 Usage of assertMatchesRegularExpression()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class RegExpTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertMatchesRegularExpression('/foo/', 'bar');\n    }\n}\n```\n\n``` php\n$ phpunit RegExpTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) RegExpTest::testFailure\nFailed asserting that 'bar' matches PCRE pattern \"/foo/\".\n\n/home/sb/RegExpTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertStringMatchesFormat()\n\n`assertStringMatchesFormat(string`` ``$format,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the `$string` does not match the `$format` string.\n\n`assertStringNotMatchesFormat()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.54 Usage of assertStringMatchesFormat()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringMatchesFormatTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringMatchesFormat('%i', 'foo');\n    }\n}\n```\n\n``` php\n$ phpunit StringMatchesFormatTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringMatchesFormatTest::testFailure\nFailed asserting that 'foo' matches PCRE pattern \"/^[+-]?d+$/s\".\n\n/home/sb/StringMatchesFormatTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\nThe format string may contain the following placeholders:\n\n- `%e`: Represents a directory separator, for example `/` on Linux.\n- `%s`: One or more of anything (character or white space) except the end of line character.\n- `%S`: Zero or more of anything (character or white space) except the end of line character.\n- `%a`: One or more of anything (character or white space) including the end of line character.\n- `%A`: Zero or more of anything (character or white space) including the end of line character.\n- `%w`: Zero or more white space characters.\n- `%i`: A signed integer value, for example `+3142`, `-3142`.\n- `%d`: An unsigned integer value, for example `123456`.\n- `%x`: One or more hexadecimal character. That is, characters in the range `0-9`, `a-f`, `A-F`.\n- `%f`: A floating point number, for example: `3.142`, `-3.142`, `3.142E-10`, `3.142e+10`.\n- `%c`: A single character of any sort.\n- `%%`: A literal percent character: `%`.\n\n## assertStringMatchesFormatFile()\n\n`assertStringMatchesFormatFile(string`` ``$formatFile,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the `$string` does not match the contents of the `$formatFile`.\n\n`assertStringNotMatchesFormatFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.55 Usage of assertStringMatchesFormatFile()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringMatchesFormatFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringMatchesFormatFile('/path/to/expected.txt', 'foo');\n    }\n}\n```\n\n``` php\n$ phpunit StringMatchesFormatFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringMatchesFormatFileTest::testFailure\nFailed asserting that 'foo' matches PCRE pattern \"/^[+-]?d+\n$/s\".\n\n/home/sb/StringMatchesFormatFileTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\n## assertSame()\n\n`assertSame(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` do not have the same type and value.\n\n`assertNotSame()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.56 Usage of assertSame()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SameTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertSame('2204', 2204);\n    }\n}\n```\n\n``` php\n$ phpunit SameTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) SameTest::testFailure\nFailed asserting that 2204 is identical to '2204'.\n\n/home/sb/SameTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n`assertSame(object`` ``$expected,`` ``object`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` do not reference the same object.\n\nExample 1.57 Usage of assertSame() with objects\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SameTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertSame(new stdClass, new stdClass);\n    }\n}\n```\n\n``` php\n$ phpunit SameTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) SameTest::testFailure\nFailed asserting that two variables reference the same object.\n\n/home/sb/SameTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertStringEndsWith()\n\n`assertStringEndsWith(string`` ``$suffix,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the `$string` does not end with `$suffix`.\n\n`assertStringEndsNotWith()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.58 Usage of assertStringEndsWith()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringEndsWithTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringEndsWith('suffix', 'foo');\n    }\n}\n```\n\n``` php\n$ phpunit StringEndsWithTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 1 second, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringEndsWithTest::testFailure\nFailed asserting that 'foo' ends with \"suffix\".\n\n/home/sb/StringEndsWithTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertStringEqualsFile()\n\n`assertStringEqualsFile(string`` ``$expectedFile,`` ``string`` ``$actualString[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the file specified by `$expectedFile` does not have `$actualString` as its contents.\n\n`assertStringNotEqualsFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.59 Usage of assertStringEqualsFile()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringEqualsFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringEqualsFile('/home/sb/expected', 'actual');\n    }\n}\n```\n\n``` php\n$ phpunit StringEqualsFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) StringEqualsFileTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'expected\n-'\n+'actual'\n\n/home/sb/StringEqualsFileTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\n## assertStringStartsWith()\n\n`assertStringStartsWith(string`` ``$prefix,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the `$string` does not start with `$prefix`.\n\n`assertStringStartsNotWith()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.60 Usage of assertStringStartsWith()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StringStartsWithTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertStringStartsWith('prefix', 'foo');\n    }\n}\n```\n\n``` php\n$ phpunit StringStartsWithTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringStartsWithTest::testFailure\nFailed asserting that 'foo' starts with \"prefix\".\n\n/home/sb/StringStartsWithTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertThat()\n\nMore complex assertions can be formulated using the `PHPUnit\\Framework\\Constraint` classes. They can be evaluated using the `assertThat()` method. [Example 1.61](#appendixes-assertions-assertthat-example) shows how the `logicalNot()` and `equalTo()` constraints can be used to express the same assertion as `assertNotEquals()`.\n\n`assertThat(mixed`` ``$value,`` ``PHPUnit\\Framework\\Constraint`` ``$constraint[,`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the `$value` does not match the `$constraint`.\n\nExample 1.61 Usage of assertThat()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class BiscuitTest extends TestCase\n{\n    public function testEquals(): void\n    {\n        $theBiscuit = new Biscuit('Ginger');\n        $myBiscuit  = new Biscuit('Ginger');\n\n        $this->assertThat(\n          $theBiscuit,\n          $this->logicalNot(\n            $this->equalTo($myBiscuit)\n          )\n        );\n    }\n}\n```\n\n[Table 1.1](#appendixes-assertions-assertthat-tables-constraints) shows the available `PHPUnit\\Framework\\Constraint` classes.\n\n| Constraint                                                                                                     | Meaning                                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| `PHPUnit\\Framework\\Constraint\\IsAnything`` ``anything()`                                                       | Constraint that accepts any input value.                                                                                                  |\n| `PHPUnit\\Framework\\Constraint\\ArrayHasKey`` ``arrayHasKey(mixed`` ``$key)`                                     | Constraint that asserts that the array has a given key.                                                                                   |\n| `PHPUnit\\Framework\\Constraint\\TraversableContains`` ``contains(mixed`` ``$value)`                              | Constraint that asserts that the `array` or object that implements the `Iterator` interface contains a given value.                       |\n| `PHPUnit\\Framework\\Constraint\\TraversableContainsOnly`` ``containsOnly(string`` ``$type)`                      | Constraint that asserts that the `array` or object that implements the `Iterator` interface contains only values of a given type.         |\n| `PHPUnit\\Framework\\Constraint\\TraversableContainsOnly`` ``containsOnlyInstancesOf(string`` ``$classname)`      | Constraint that asserts that the `array` or object that implements the `Iterator` interface contains only instances of a given classname. |\n| `PHPUnit\\Framework\\Constraint\\IsEqual`` ``equalTo($value,`` ``$delta`` ``=`` ``0,`` ``$maxDepth`` ``=`` ``10)` | Constraint that checks if one value is equal to another.                                                                                  |\n| `PHPUnit\\Framework\\Constraint\\DirectoryExists`` ``directoryExists()`                                           | Constraint that checks if the directory exists.                                                                                           |\n| `PHPUnit\\Framework\\Constraint\\FileExists`` ``fileExists()`                                                     | Constraint that checks if the file(name) exists.                                                                                          |\n| `PHPUnit\\Framework\\Constraint\\IsReadable`` ``isReadable()`                                                     | Constraint that checks if the file(name) is readable.                                                                                     |\n| `PHPUnit\\Framework\\Constraint\\IsWritable`` ``isWritable()`                                                     | Constraint that checks if the file(name) is writable.                                                                                     |\n| `PHPUnit\\Framework\\Constraint\\GreaterThan`` ``greaterThan(mixed`` ``$value)`                                   | Constraint that asserts that the value is greater than a given value.                                                                     |\n| `PHPUnit\\Framework\\Constraint\\LogicalOr`` ``greaterThanOrEqual(mixed`` ``$value)`                              | Constraint that asserts that the value is greater than or equal to a given value.                                                         |\n| `PHPUnit\\Framework\\Constraint\\ClassHasAttribute`` ``classHasAttribute(string`` ``$attributeName)`              | Constraint that asserts that the class has a given attribute.                                                                             |\n| `PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute`` ``classHasStaticAttribute(string`` ``$attributeName)`  | Constraint that asserts that the class has a given static attribute.                                                                      |\n| `PHPUnit\\Framework\\Constraint\\ObjectHasAttribute`` ``objectHasAttribute(string`` ``$attributeName)`            | Constraint that asserts that the object has a given attribute.                                                                            |\n| `PHPUnit\\Framework\\Constraint\\IsIdentical`` ``identicalTo(mixed`` ``$value)`                                   | Constraint that asserts that one value is identical to another.                                                                           |\n| `PHPUnit\\Framework\\Constraint\\IsFalse`` ``isFalse()`                                                           | Constraint that asserts that the value is `false`.                                                                                        |\n| `PHPUnit\\Framework\\Constraint\\IsInstanceOf`` ``isInstanceOf(string`` ``$className)`                            | Constraint that asserts that the object is an instance of a given class.                                                                  |\n| `PHPUnit\\Framework\\Constraint\\IsNull`` ``isNull()`                                                             | Constraint that asserts that the value is `null`.                                                                                         |\n| `PHPUnit\\Framework\\Constraint\\IsTrue`` ``isTrue()`                                                             | Constraint that asserts that the value is `true`.                                                                                         |\n| `PHPUnit\\Framework\\Constraint\\IsType`` ``isType(string`` ``$type)`                                             | Constraint that asserts that the value is of a specified type.                                                                            |\n| `PHPUnit\\Framework\\Constraint\\LessThan`` ``lessThan(mixed`` ``$value)`                                         | Constraint that asserts that the value is smaller than a given value.                                                                     |\n| `PHPUnit\\Framework\\Constraint\\LogicalOr`` ``lessThanOrEqual(mixed`` ``$value)`                                 | Constraint that asserts that the value is smaller than or equal to a given value.                                                         |\n| `logicalAnd()`                                                                                                 | Logical AND.                                                                                                                              |\n| `logicalNot(PHPUnit\\Framework\\Constraint`` ``$constraint)`                                                     | Logical NOT.                                                                                                                              |\n| `logicalOr()`                                                                                                  | Logical OR.                                                                                                                               |\n| `logicalXor()`                                                                                                 | Logical XOR.                                                                                                                              |\n| `PHPUnit\\Framework\\Constraint\\PCREMatch`` ``matchesRegularExpression(string`` ``$pattern)`                     | Constraint that asserts that the string matches a regular expression.                                                                     |\n| `PHPUnit\\Framework\\Constraint\\StringContains`` ``stringContains(string`` ``$string,`` ``bool`` ``$case)`       | Constraint that asserts that the string contains a given string.                                                                          |\n| `PHPUnit\\Framework\\Constraint\\StringEndsWith`` ``stringEndsWith(string`` ``$suffix)`                           | Constraint that asserts that the string ends with a given suffix.                                                                         |\n| `PHPUnit\\Framework\\Constraint\\StringStartsWith`` ``stringStartsWith(string`` ``$prefix)`                       | Constraint that asserts that the string starts with a given prefix.                                                                       |\n\nTable 1.1 Constraints {#appendixes-assertions-assertthat-tables-constraints}\n\n## assertTrue()\n\n`assertTrue(bool`` ``$condition[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if `$condition` is `false`.\n\n`assertNotTrue()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.62 Usage of assertTrue()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class TrueTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertTrue(false);\n    }\n}\n```\n\n``` php\n$ phpunit TrueTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) TrueTest::testFailure\nFailed asserting that false is true.\n\n/home/sb/TrueTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n## assertXmlFileEqualsXmlFile()\n\n`assertXmlFileEqualsXmlFile(string`` ``$expectedFile,`` ``string`` ``$actualFile[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the XML document in `$actualFile` is not equal to the XML document in `$expectedFile`.\n\n`assertXmlFileNotEqualsXmlFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.63 Usage of assertXmlFileEqualsXmlFile()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class XmlFileEqualsXmlFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertXmlFileEqualsXmlFile(\n          '/home/sb/expected.xml', '/home/sb/actual.xml');\n    }\n}\n```\n\n``` php\n$ phpunit XmlFileEqualsXmlFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) XmlFileEqualsXmlFileTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n <foo>\n-  <bar/>\n+  <baz/>\n </foo>\n\n/home/sb/XmlFileEqualsXmlFileTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```\n\n## assertXmlStringEqualsXmlFile()\n\n`assertXmlStringEqualsXmlFile(string`` ``$expectedFile,`` ``string`` ``$actualXml[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the XML document in `$actualXml` is not equal to the XML document in `$expectedFile`.\n\n`assertXmlStringNotEqualsXmlFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.64 Usage of assertXmlStringEqualsXmlFile()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class XmlStringEqualsXmlFileTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertXmlStringEqualsXmlFile(\n          '/home/sb/expected.xml', '<foo><baz/></foo>');\n    }\n}\n```\n\n``` php\n$ phpunit XmlStringEqualsXmlFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) XmlStringEqualsXmlFileTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n <foo>\n-  <bar/>\n+  <baz/>\n </foo>\n\n/home/sb/XmlStringEqualsXmlFileTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\n## assertXmlStringEqualsXmlString()\n\n`assertXmlStringEqualsXmlString(string`` ``$expectedXml,`` ``string`` ``$actualXml[,`` ``string`` ``$message`` ``=`` ``''])`\n\nReports an error identified by `$message` if the XML document in `$actualXml` is not equal to the XML document in `$expectedXml`.\n\n`assertXmlStringNotEqualsXmlString()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.65 Usage of assertXmlStringEqualsXmlString()\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class XmlStringEqualsXmlStringTest extends TestCase\n{\n    public function testFailure(): void\n    {\n        $this->assertXmlStringEqualsXmlString(\n          '<foo><bar/></foo>', '<foo><baz/></foo>');\n    }\n}\n```\n\n``` php\n$ phpunit XmlStringEqualsXmlStringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) XmlStringEqualsXmlStringTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n <foo>\n-  <bar/>\n+  <baz/>\n </foo>\n\n/home/sb/XmlStringEqualsXmlStringTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/assertions.html](https://phpunit.readthedocs.io/en/9.5/assertions.html)"
- name: assertIsArray()
  id: assertions#assertIsArray()
  summary: Reports an error identified by $message if $actual is not of type array
  belongs_to: Assertions
  description: "## assertIsArray()\n\n` ``assertIsArray($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `array`.\n\n`assertIsNotArray()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.32 Usage of assertIsArray()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              ArrayTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsArray\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ArrayTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ArrayTest::testFailure\nFailed asserting that null is of type \"array\".\n\n/home/sb/ArrayTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsBool()
  id: assertions#assertIsBool()
  summary: Reports an error identified by $message if $actual is not of type bool
  belongs_to: Assertions
  description: "## assertIsBool()\n\n` ``assertIsBool($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `bool`.\n\n`assertIsNotBool()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.33 Usage of assertIsBool()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              BoolTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertIsBool\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit BoolTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) BoolTest::testFailure\nFailed asserting that null is of type \"bool\".\n\n/home/sb/BoolTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsCallable()
  id: assertions#assertIsCallable()
  summary: Reports an error identified by $message if $actual is not of type callable
  belongs_to: Assertions
  description: "## assertIsCallable()\n\n` ``assertIsCallable($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `callable`.\n\n`assertIsNotCallable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.34 Usage of assertIsCallable()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              CallableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsCallable\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit CallableTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) CallableTest::testFailure\nFailed asserting that null is of type \"callable\".\n\n/home/sb/CallableTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsFloat()
  id: assertions#assertIsFloat()
  summary: Reports an error identified by $message if $actual is not of type float
  belongs_to: Assertions
  description: "## assertIsFloat()\n\n` ``assertIsFloat($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `float`.\n\n`assertIsNotFloat()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.35 Usage of assertIsFloat()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              FloatTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsFloat\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit FloatTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) FloatTest::testFailure\nFailed asserting that null is of type \"float\".\n\n/home/sb/FloatTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsInt()
  id: assertions#assertIsInt()
  summary: Reports an error identified by $message if $actual is not of type int
  belongs_to: Assertions
  description: "## assertIsInt()\n\n` ``assertIsInt($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `int`.\n\n`assertIsNotInt()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.36 Usage of assertIsInt()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              IntTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsInt\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit IntTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) IntTest::testFailure\nFailed asserting that null is of type \"int\".\n\n/home/sb/IntTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsIterable()
  id: assertions#assertIsIterable()
  summary: Reports an error identified by $message if $actual is not of type iterable
  belongs_to: Assertions
  description: "## assertIsIterable()\n\n` ``assertIsIterable($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `iterable`.\n\n`assertIsNotIterable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.37 Usage of assertIsIterable()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              IterableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsIterable\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit IterableTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) IterableTest::testFailure\nFailed asserting that null is of type \"iterable\".\n\n/home/sb/IterableTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsNumeric()
  id: assertions#assertIsNumeric()
  summary: Reports an error identified by $message if $actual is not of type numeric
  belongs_to: Assertions
  description: "## assertIsNumeric()\n\n` ``assertIsNumeric($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `numeric`.\n\n`assertIsNotNumeric()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.38 Usage of assertIsNumeric()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              NumericTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsNumeric\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit NumericTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NumericTest::testFailure\nFailed asserting that null is of type \"numeric\".\n\n/home/sb/NumericTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsObject()
  id: assertions#assertIsObject()
  summary: Reports an error identified by $message if $actual is not of type object
  belongs_to: Assertions
  description: "## assertIsObject()\n\n` ``assertIsObject($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `object`.\n\n`assertIsNotObject()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.39 Usage of assertIsObject()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              ObjectTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsObject\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ObjectTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ObjectTest::testFailure\nFailed asserting that null is of type \"object\".\n\n/home/sb/ObjectTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsReadable()
  id: assertions#assertIsReadable()
  summary: Reports an error identified by $message if the file or directory specified by $filename is not readable
  belongs_to: Assertions
  description: "## assertIsReadable()\n\n` ``assertIsReadable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file or directory specified by `$filename` is not readable.\n\n`assertIsNotReadable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.43 Usage of assertIsReadable()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              IsReadableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertIsReadable\n              (\n              '/path/to/unreadable'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit IsReadableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) IsReadableTest::testFailure\nFailed asserting that \"/path/to/unreadable\" is readable.\n\n/home/sb/IsReadableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsResource()
  id: assertions#assertIsResource()
  summary: Reports an error identified by $message if $actual is not of type resource
  belongs_to: Assertions
  description: "## assertIsResource()\n\n` ``assertIsResource($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `resource`.\n\n`assertIsNotResource()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.40 Usage of assertIsResource()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              ResourceTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsResource\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ResourceTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ResourceTest::testFailure\nFailed asserting that null is of type \"resource\".\n\n/home/sb/ResourceTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsScalar()
  id: assertions#assertIsScalar()
  summary: Reports an error identified by $message if $actual is not of type scalar
  belongs_to: Assertions
  description: "## assertIsScalar()\n\n` ``assertIsScalar($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `scalar`.\n\n`assertIsNotScalar()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.41 Usage of assertIsScalar()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              ScalarTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsScalar\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ScalarTest\nPHPUnit |version|.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) ScalarTest::testFailure\nFailed asserting that null is of type \"scalar\".\n\n/home/sb/ScalarTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsString()
  id: assertions#assertIsString()
  summary: Reports an error identified by $message if $actual is not of type string
  belongs_to: Assertions
  description: "## assertIsString()\n\n` ``assertIsString($actual[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not of type `string`.\n\n`assertIsNotString()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.42 Usage of assertIsString()\n\n``` php\n              <?\n              php\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              class\n              StringTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              {\n              $this\n              ->\n              assertIsString\n              (\n              null\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringTest::testFailure\nFailed asserting that null is of type \"string\".\n\n/home/sb/StringTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertIsWritable()
  id: assertions#assertIsWritable()
  summary: Reports an error identified by $message if the file or directory specified by $filename is not writable
  belongs_to: Assertions
  description: "## assertIsWritable()\n\n` ``assertIsWritable(string`` ``$filename[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file or directory specified by `$filename` is not writable.\n\n`assertIsNotWritable()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.44 Usage of assertIsWritable()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              IsWritableTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertIsWritable\n              (\n              '/path/to/unwritable'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit IsWritableTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) IsWritableTest::testFailure\nFailed asserting that \"/path/to/unwritable\" is writable.\n\n/home/sb/IsWritableTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertJsonFileEqualsJsonFile()
  id: assertions#assertJsonFileEqualsJsonFile()
  summary: Reports an error identified by $message if the value of $actualFile does not match the value of $expectedFile
  belongs_to: Assertions
  description: "## assertJsonFileEqualsJsonFile()\n\n` ``assertJsonFileEqualsJsonFile(mixed`` ``$expectedFile,`` ``mixed`` ``$actualFile[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actualFile` does not match the value of `$expectedFile`.\n\nExample 1.45 Usage of assertJsonFileEqualsJsonFile()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              JsonFileEqualsJsonFileTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertJsonFileEqualsJsonFile\n              (\n              'path/to/fixture/file'\n              ,\n              'path/to/actual/file'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit JsonFileEqualsJsonFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonFileEqualsJsonFile::testFailure\nFailed asserting that '{\"Mascot\":\"Tux\"}' matches JSON string \"[\"Mascott\", \"Tux\", \"OS\", \"Linux\"]\".\n\n/home/sb/JsonFileEqualsJsonFileTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```"
- name: assertJsonStringEqualsJsonFile()
  id: assertions#assertJsonStringEqualsJsonFile()
  summary: Reports an error identified by $message if the value of $actualJson does not match the value of $expectedFile
  belongs_to: Assertions
  description: "## assertJsonStringEqualsJsonFile()\n\n` ``assertJsonStringEqualsJsonFile(mixed`` ``$expectedFile,`` ``mixed`` ``$actualJson[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actualJson` does not match the value of `$expectedFile`.\n\nExample 1.46 Usage of assertJsonStringEqualsJsonFile()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              JsonStringEqualsJsonFileTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertJsonStringEqualsJsonFile\n              (\n              'path/to/fixture/file'\n              ,\n              json_encode\n              ([\n              'Mascot'\n              =>\n              'ux'\n              ])\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit JsonStringEqualsJsonFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonStringEqualsJsonFile::testFailure\nFailed asserting that '{\"Mascot\":\"ux\"}' matches JSON string \"{\"Mascott\":\"Tux\"}\".\n\n/home/sb/JsonStringEqualsJsonFileTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```"
- name: assertJsonStringEqualsJsonString()
  id: assertions#assertJsonStringEqualsJsonString()
  summary: Reports an error identified by $message if the value of $actualJson does not match the value of $expectedJson
  belongs_to: Assertions
  description: "## assertJsonStringEqualsJsonString()\n\n` ``assertJsonStringEqualsJsonString(mixed`` ``$expectedJson,`` ``mixed`` ``$actualJson[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actualJson` does not match the value of `$expectedJson`.\n\nExample 1.47 Usage of assertJsonStringEqualsJsonString()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              JsonStringEqualsJsonStringTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertJsonStringEqualsJsonString\n              (\n              json_encode\n              ([\n              'Mascot'\n              =>\n              'Tux'\n              ]),\n              json_encode\n              ([\n              'Mascot'\n              =>\n              'ux'\n              ])\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit JsonStringEqualsJsonStringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) JsonStringEqualsJsonStringTest::testFailure\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n stdClass Object (\n -    'Mascot' => 'Tux'\n +    'Mascot' => 'ux'\n)\n\n/home/sb/JsonStringEqualsJsonStringTest.php:5\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```"
- name: assertLessThan()
  id: assertions#assertLessThan()
  summary: Reports an error identified by $message if the value of $actual is not less than the value of $expected
  belongs_to: Assertions
  description: "## assertLessThan()\n\n` ``assertLessThan(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actual` is not less than the value of `$expected`.\n\nExample 1.48 Usage of assertLessThan()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              LessThanTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertLessThan\n              (\n              1\n              ,\n              2\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit LessThanTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) LessThanTest::testFailure\nFailed asserting that 2 is less than 1.\n\n/home/sb/LessThanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertLessThanOrEqual()
  id: assertions#assertLessThanOrEqual()
  summary: Reports an error identified by $message if the value of $actual is not less than or equal to the value of $expected
  belongs_to: Assertions
  description: "## assertLessThanOrEqual()\n\n` ``assertLessThanOrEqual(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the value of `$actual` is not less than or equal to the value of `$expected`.\n\nExample 1.49 Usage of assertLessThanOrEqual()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              LessThanOrEqualTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertLessThanOrEqual\n              (\n              1\n              ,\n              2\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit LessThanOrEqualTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) LessThanOrEqualTest::testFailure\nFailed asserting that 2 is equal to 1 or is less than 1.\n\n/home/sb/LessThanOrEqualTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```"
- name: assertMatchesRegularExpression()
  id: assertions#assertMatchesRegularExpression()
  summary: Reports an error identified by $message if $string does not match the regular expression $pattern
  belongs_to: Assertions
  description: "## assertMatchesRegularExpression()\n\n` ``assertMatchesRegularExpression(string`` ``$pattern,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$string` does not match the regular expression `$pattern`.\n\n`assertDoesNotMatchRegularExpression()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.53 Usage of assertMatchesRegularExpression()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              RegExpTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertMatchesRegularExpression\n              (\n              '/foo/'\n              ,\n              'bar'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit RegExpTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) RegExpTest::testFailure\nFailed asserting that 'bar' matches PCRE pattern \"/foo/\".\n\n/home/sb/RegExpTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertNan()
  id: assertions#assertNan()
  summary: Reports an error identified by $message if $variable is not NAN
  belongs_to: Assertions
  description: "## assertNan()\n\n` ``assertNan(mixed`` ``$variable[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$variable` is not `NAN`.\n\nExample 1.50 Usage of assertNan()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              NanTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertNan\n              (\n              1\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit NanTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NanTest::testFailure\nFailed asserting that 1 is nan.\n\n/home/sb/NanTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertNull()
  id: assertions#assertNull()
  summary: Reports an error identified by $message if $variable is not null
  belongs_to: Assertions
  description: "## assertNull()\n\n` ``assertNull(mixed`` ``$variable[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$variable` is not `null`.\n\n`assertNotNull()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.51 Usage of assertNull()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              NullTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertNull\n              (\n              'foo'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit NotNullTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) NullTest::testFailure\nFailed asserting that 'foo' is null.\n\n/home/sb/NotNullTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertObjectEquals()
  id: assertions#assertObjectEquals()
  summary: Reports an error identified by $message if $actual is not equal to $expected according to $actual->$method($expected)
  belongs_to: Assertions
  description: "## assertObjectEquals()\n\n` ``assertObjectEquals(object`` ``$expected,`` ``object`` ``$actual,`` ``string`` ``$method`` ``=`` ``'equals',`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$actual` is not equal to `$expected` according to `$actual->$method($expected)`.\n\nIt is a bad practice to use `assertEquals()` (and its inverse, `assertNotEquals()`) on objects without registering a custom comparator that customizes how objects are compared. Unfortunately, though, implementing custom comparators for each and every object you want to assert in your tests is inconvenient at best.\n\nThe most common use case for custom comparators are Value Objects. These objects usually have an `equals(self``$other):``bool` method (or a method just like that but with a different name) for comparing two instances of the Value Object’s type. `assertObjectEquals()` makes custom comparison of objects convenient for this common use case:\n\nExample 1.21 Usage of assertObjectEquals()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              SomethingThatUsesEmailTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testSomething\n              ()\n              :\n              void\n              {\n              $a\n              =\n              new\n              Email\n              (\n              'user@example.org'\n              );\n              $b\n              =\n              new\n              Email\n              (\n              'user@example.org'\n              );\n              $c\n              =\n              new\n              Email\n              (\n              'user@example.com'\n              );\n              // This passes\n              $this\n              ->\n              assertObjectEquals\n              (\n              $a\n              ,\n              $b\n              );\n              // This fails\n              $this\n              ->\n              assertObjectEquals\n              (\n              $a\n              ,\n              $c\n              );\n              }\n              }\n            \n```\n\nExample 1.22 Email value object with equals() method\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              final\n              class\n              Email\n              {\n              private\n              string\n              $email\n              ;\n              public\n              function\n              __construct\n              (\n              string\n              $email\n              )\n              {\n              $this\n              ->\n              ensureIsValidEmail\n              (\n              $email\n              );\n              $this\n              ->\n              email\n              =\n              $email\n              ;\n              }\n              public\n              function\n              asString\n              ()\n              :\n              string\n              {\n              return\n              $this\n              ->\n              email\n              ;\n              }\n              public\n              function\n              equals\n              (\n              self\n              $other\n              )\n              :\n              bool\n              {\n              return\n              $this\n              ->\n              asString\n              ()\n              ===\n              $other\n              ->\n              asString\n              ();\n              }\n              private\n              function\n              ensureIsValidEmail\n              (\n              string\n              $email\n              )\n              :\n              void\n              {\n              // ...\n              }\n              }\n            \n```\n\n``` php\n$ phpunit EqualsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 00:00.017, Memory: 4.00 MB\n\nThere was 1 failure:\n\n1) SomethingThatUsesEmailTest::testSomething\nFailed asserting that two objects are equal.\nThe objects are not equal according to Email::equals().\n\n/home/sb/SomethingThatUsesEmailTest.php:16\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```\n\nPlease note:\n\n- A method with name `$method` must exist on the `$actual` object\n- The method must accept exactly one argument\n- The respective parameter must have a declared type\n- The `$expected` object must be compatible with this declared type\n- The method must have a declared `bool` return type\n\nIf any of the aforementioned assumptions is not fulfilled or if `$actual->$method($expected)` returns `false` then the assertion fails."
- name: assertObjectHasAttribute()
  id: assertions#assertObjectHasAttribute()
  summary: Reports an error identified by $message if $object->attributeName does not exist
  belongs_to: Assertions
  description: "## assertObjectHasAttribute()\n\n` ``assertObjectHasAttribute(string`` ``$attributeName,`` ``object`` ``$object[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$object->attributeName` does not exist.\n\n`assertObjectNotHasAttribute()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.52 Usage of assertObjectHasAttribute()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              ObjectHasAttributeTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertObjectHasAttribute\n              (\n              'foo'\n              ,\n              new\n              stdClass\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit ObjectHasAttributeTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ObjectHasAttributeTest::testFailure\nFailed asserting that object of class \"stdClass\" has attribute \"foo\".\n\n/home/sb/ObjectHasAttributeTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertSame()
  id: assertions#assertSame()
  summary: Reports an error identified by $message if the two variables $expected and $actual do not have the same type and value
  belongs_to: Assertions
  description: "## assertSame()\n\n` ``assertSame(mixed`` ``$expected,`` ``mixed`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` do not have the same type and value.\n\n`assertNotSame()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.56 Usage of assertSame()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              SameTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertSame\n              (\n              '2204'\n              ,\n              2204\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit SameTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) SameTest::testFailure\nFailed asserting that 2204 is identical to '2204'.\n\n/home/sb/SameTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n` ``assertSame(object`` ``$expected,`` ``object`` ``$actual[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the two variables `$expected` and `$actual` do not reference the same object.\n\nExample 1.57 Usage of assertSame() with objects\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              SameTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertSame\n              (\n              new\n              stdClass\n              ,\n              new\n              stdClass\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit SameTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) SameTest::testFailure\nFailed asserting that two variables reference the same object.\n\n/home/sb/SameTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertStringContainsString()
  id: assertions#assertStringContainsString()
  summary: Reports an error identified by $message if $needle is not a substring of $haystack
  belongs_to: Assertions
  description: "## assertStringContainsString()\n\n` ``assertStringContainsString(string`` ``$needle,`` ``string`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$needle` is not a substring of `$haystack`.\n\n`assertStringNotContainsString()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.5 Usage of assertStringContainsString()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringContainsStringTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringContainsString\n              (\n              'foo'\n              ,\n              'bar'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringContainsStringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 37 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) StringContainsStringTest::testFailure\nFailed asserting that 'bar' contains \"foo\".\n\n/home/sb/StringContainsStringTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertStringContainsStringIgnoringCase()
  id: assertions#assertStringContainsStringIgnoringCase()
  summary: Reports an error identified by $message if $needle is not a substring of $haystack
  belongs_to: Assertions
  description: "## assertStringContainsStringIgnoringCase()\n\n` ``assertStringContainsStringIgnoringCase(string`` ``$needle,`` ``string`` ``$haystack[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$needle` is not a substring of `$haystack`.\n\nDifferences in casing are ignored when `$needle` is searched for in `$haystack`.\n\n`assertStringNotContainsStringIgnoringCase()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.6 Usage of assertStringContainsStringIgnoringCase()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringContainsStringIgnoringCaseTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringContainsStringIgnoringCase\n              (\n              'foo'\n              ,\n              'bar'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringContainsStringIgnoringCaseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF                                                                   1 / 1 (100%)\n\nTime: 40 ms, Memory: 6.00 MB\n\nThere was 1 failure:\n\n1) StringContainsStringTest::testFailure\nFailed asserting that 'bar' contains \"foo\".\n\n/home/sb/StringContainsStringIgnoringCaseTest.php:8\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertStringEndsWith()
  id: assertions#assertStringEndsWith()
  summary: Reports an error identified by $message if the $string does not end with $suffix
  belongs_to: Assertions
  description: "## assertStringEndsWith()\n\n` ``assertStringEndsWith(string`` ``$suffix,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the `$string` does not end with `$suffix`.\n\n`assertStringEndsNotWith()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.58 Usage of assertStringEndsWith()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringEndsWithTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringEndsWith\n              (\n              'suffix'\n              ,\n              'foo'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringEndsWithTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 1 second, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringEndsWithTest::testFailure\nFailed asserting that 'foo' ends with \"suffix\".\n\n/home/sb/StringEndsWithTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertStringEqualsFile()
  id: assertions#assertStringEqualsFile()
  summary: Reports an error identified by $message if the file specified by $expectedFile does not have $actualString as its contents
  belongs_to: Assertions
  description: "## assertStringEqualsFile()\n\n` ``assertStringEqualsFile(string`` ``$expectedFile,`` ``string`` ``$actualString[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the file specified by `$expectedFile` does not have `$actualString` as its contents.\n\n`assertStringNotEqualsFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.59 Usage of assertStringEqualsFile()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringEqualsFileTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringEqualsFile\n              (\n              '/home/sb/expected'\n              ,\n              'actual'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringEqualsFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) StringEqualsFileTest::testFailure\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'expected\n-'\n+'actual'\n\n/home/sb/StringEqualsFileTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```"
- name: assertStringMatchesFormat()
  id: assertions#assertStringMatchesFormat()
  summary: Reports an error identified by $message if the $string does not match the $format string
  belongs_to: Assertions
  description: "## assertStringMatchesFormat()\n\n` ``assertStringMatchesFormat(string`` ``$format,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the `$string` does not match the `$format` string.\n\n`assertStringNotMatchesFormat()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.54 Usage of assertStringMatchesFormat()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringMatchesFormatTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringMatchesFormat\n              (\n              '%i'\n              ,\n              'foo'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringMatchesFormatTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringMatchesFormatTest::testFailure\nFailed asserting that 'foo' matches PCRE pattern \"/^[+-]?d+$/s\".\n\n/home/sb/StringMatchesFormatTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\nThe format string may contain the following placeholders:\n\n- `%e`: Represents a directory separator, for example `/` on Linux.\n- `%s`: One or more of anything (character or white space) except the end of line character.\n- `%S`: Zero or more of anything (character or white space) except the end of line character.\n- `%a`: One or more of anything (character or white space) including the end of line character.\n- `%A`: Zero or more of anything (character or white space) including the end of line character.\n- `%w`: Zero or more white space characters.\n- `%i`: A signed integer value, for example `+3142`, `-3142`.\n- `%d`: An unsigned integer value, for example `123456`.\n- `%x`: One or more hexadecimal character. That is, characters in the range `0-9`, `a-f`, `A-F`.\n- `%f`: A floating point number, for example: `3.142`, `-3.142`, `3.142E-10`, `3.142e+10`.\n- `%c`: A single character of any sort.\n- `%%`: A literal percent character: `%`."
- name: assertStringMatchesFormatFile()
  id: assertions#assertStringMatchesFormatFile()
  summary: Reports an error identified by $message if the $string does not match the contents of the $formatFile
  belongs_to: Assertions
  description: "## assertStringMatchesFormatFile()\n\n` ``assertStringMatchesFormatFile(string`` ``$formatFile,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the `$string` does not match the contents of the `$formatFile`.\n\n`assertStringNotMatchesFormatFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.55 Usage of assertStringMatchesFormatFile()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringMatchesFormatFileTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringMatchesFormatFile\n              (\n              '/path/to/expected.txt'\n              ,\n              'foo'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringMatchesFormatFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringMatchesFormatFileTest::testFailure\nFailed asserting that 'foo' matches PCRE pattern \"/^[+-]?d+\n$/s\".\n\n/home/sb/StringMatchesFormatFileTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```"
- name: assertStringStartsWith()
  id: assertions#assertStringStartsWith()
  summary: Reports an error identified by $message if the $string does not start with $prefix
  belongs_to: Assertions
  description: "## assertStringStartsWith()\n\n` ``assertStringStartsWith(string`` ``$prefix,`` ``string`` ``$string[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the `$string` does not start with `$prefix`.\n\n`assertStringStartsNotWith()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.60 Usage of assertStringStartsWith()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              StringStartsWithTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertStringStartsWith\n              (\n              'prefix'\n              ,\n              'foo'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit StringStartsWithTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) StringStartsWithTest::testFailure\nFailed asserting that 'foo' starts with \"prefix\".\n\n/home/sb/StringStartsWithTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertThat()
  id: assertions#assertThat()
  summary: More complex assertions can be formulated using the PHPUnit\Framework\Constraint classes
  belongs_to: Assertions
  description: "## assertThat()\n\nMore complex assertions can be formulated using the `PHPUnit\\Framework\\Constraint` classes. They can be evaluated using the `assertThat()` method. [Example 1.61](#appendixes-assertions-assertthat-example) shows how the `logicalNot()` and `equalTo()` constraints can be used to express the same assertion as `assertNotEquals()`.\n\n` ``assertThat(mixed`` ``$value,`` ``PHPUnit\\Framework\\Constraint`` ``$constraint[,`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the `$value` does not match the `$constraint`.\n\nExample 1.61 Usage of assertThat()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              BiscuitTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testEquals\n              ()\n              :\n              void\n              {\n              $theBiscuit\n              =\n              new\n              Biscuit\n              (\n              'Ginger'\n              );\n              $myBiscuit\n              =\n              new\n              Biscuit\n              (\n              'Ginger'\n              );\n              $this\n              ->\n              assertThat\n              (\n              $theBiscuit\n              ,\n              $this\n              ->\n              logicalNot\n              (\n              $this\n              ->\n              equalTo\n              (\n              $myBiscuit\n              )\n              )\n              );\n              }\n              }\n            \n```\n\n[Table 1.1](#appendixes-assertions-assertthat-tables-constraints) shows the available `PHPUnit\\Framework\\Constraint` classes.\n\n| Constraint                                                                                                           | Meaning                                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| ` ``PHPUnit\\Framework\\Constraint\\IsAnything`` ``anything()`` `                                                       | Constraint that accepts any input value.                                                                                                  |\n| ` ``PHPUnit\\Framework\\Constraint\\ArrayHasKey`` ``arrayHasKey(mixed`` ``$key)`` `                                     | Constraint that asserts that the array has a given key.                                                                                   |\n| ` ``PHPUnit\\Framework\\Constraint\\TraversableContains`` ``contains(mixed`` ``$value)`` `                              | Constraint that asserts that the `array` or object that implements the `Iterator` interface contains a given value.                       |\n| ` ``PHPUnit\\Framework\\Constraint\\TraversableContainsOnly`` ``containsOnly(string`` ``$type)`` `                      | Constraint that asserts that the `array` or object that implements the `Iterator` interface contains only values of a given type.         |\n| ` ``PHPUnit\\Framework\\Constraint\\TraversableContainsOnly`` ``containsOnlyInstancesOf(string`` ``$classname)`` `      | Constraint that asserts that the `array` or object that implements the `Iterator` interface contains only instances of a given classname. |\n| ` ``PHPUnit\\Framework\\Constraint\\IsEqual`` ``equalTo($value,`` ``$delta`` ``=`` ``0,`` ``$maxDepth`` ``=`` ``10)`` ` | Constraint that checks if one value is equal to another.                                                                                  |\n| ` ``PHPUnit\\Framework\\Constraint\\DirectoryExists`` ``directoryExists()`` `                                           | Constraint that checks if the directory exists.                                                                                           |\n| ` ``PHPUnit\\Framework\\Constraint\\FileExists`` ``fileExists()`` `                                                     | Constraint that checks if the file(name) exists.                                                                                          |\n| ` ``PHPUnit\\Framework\\Constraint\\IsReadable`` ``isReadable()`` `                                                     | Constraint that checks if the file(name) is readable.                                                                                     |\n| ` ``PHPUnit\\Framework\\Constraint\\IsWritable`` ``isWritable()`` `                                                     | Constraint that checks if the file(name) is writable.                                                                                     |\n| ` ``PHPUnit\\Framework\\Constraint\\GreaterThan`` ``greaterThan(mixed`` ``$value)`` `                                   | Constraint that asserts that the value is greater than a given value.                                                                     |\n| ` ``PHPUnit\\Framework\\Constraint\\LogicalOr`` ``greaterThanOrEqual(mixed`` ``$value)`` `                              | Constraint that asserts that the value is greater than or equal to a given value.                                                         |\n| ` ``PHPUnit\\Framework\\Constraint\\ClassHasAttribute`` ``classHasAttribute(string`` ``$attributeName)`` `              | Constraint that asserts that the class has a given attribute.                                                                             |\n| ` ``PHPUnit\\Framework\\Constraint\\ClassHasStaticAttribute`` ``classHasStaticAttribute(string`` ``$attributeName)`` `  | Constraint that asserts that the class has a given static attribute.                                                                      |\n| ` ``PHPUnit\\Framework\\Constraint\\ObjectHasAttribute`` ``objectHasAttribute(string`` ``$attributeName)`` `            | Constraint that asserts that the object has a given attribute.                                                                            |\n| ` ``PHPUnit\\Framework\\Constraint\\IsIdentical`` ``identicalTo(mixed`` ``$value)`` `                                   | Constraint that asserts that one value is identical to another.                                                                           |\n| ` ``PHPUnit\\Framework\\Constraint\\IsFalse`` ``isFalse()`` `                                                           | Constraint that asserts that the value is `false`.                                                                                        |\n| ` ``PHPUnit\\Framework\\Constraint\\IsInstanceOf`` ``isInstanceOf(string`` ``$className)`` `                            | Constraint that asserts that the object is an instance of a given class.                                                                  |\n| ` ``PHPUnit\\Framework\\Constraint\\IsNull`` ``isNull()`` `                                                             | Constraint that asserts that the value is `null`.                                                                                         |\n| ` ``PHPUnit\\Framework\\Constraint\\IsTrue`` ``isTrue()`` `                                                             | Constraint that asserts that the value is `true`.                                                                                         |\n| ` ``PHPUnit\\Framework\\Constraint\\IsType`` ``isType(string`` ``$type)`` `                                             | Constraint that asserts that the value is of a specified type.                                                                            |\n| ` ``PHPUnit\\Framework\\Constraint\\LessThan`` ``lessThan(mixed`` ``$value)`` `                                         | Constraint that asserts that the value is smaller than a given value.                                                                     |\n| ` ``PHPUnit\\Framework\\Constraint\\LogicalOr`` ``lessThanOrEqual(mixed`` ``$value)`` `                                 | Constraint that asserts that the value is smaller than or equal to a given value.                                                         |\n| ` ``logicalAnd()`` `                                                                                                 | Logical AND.                                                                                                                              |\n| ` ``logicalNot(PHPUnit\\Framework\\Constraint`` ``$constraint)`` `                                                     | Logical NOT.                                                                                                                              |\n| ` ``logicalOr()`` `                                                                                                  | Logical OR.                                                                                                                               |\n| ` ``logicalXor()`` `                                                                                                 | Logical XOR.                                                                                                                              |\n| ` ``PHPUnit\\Framework\\Constraint\\PCREMatch`` ``matchesRegularExpression(string`` ``$pattern)`` `                     | Constraint that asserts that the string matches a regular expression.                                                                     |\n| ` ``PHPUnit\\Framework\\Constraint\\StringContains`` ``stringContains(string`` ``$string,`` ``bool`` ``$case)`` `       | Constraint that asserts that the string contains a given string.                                                                          |\n| ` ``PHPUnit\\Framework\\Constraint\\StringEndsWith`` ``stringEndsWith(string`` ``$suffix)`` `                           | Constraint that asserts that the string ends with a given suffix.                                                                         |\n| ` ``PHPUnit\\Framework\\Constraint\\StringStartsWith`` ``stringStartsWith(string`` ``$prefix)`` `                       | Constraint that asserts that the string starts with a given prefix.                                                                       |\n\nTable 1.1 Constraints {#appendixes-assertions-assertthat-tables-constraints}"
- name: assertTrue()
  id: assertions#assertTrue()
  summary: Reports an error identified by $message if $condition is false
  belongs_to: Assertions
  description: "## assertTrue()\n\n` ``assertTrue(bool`` ``$condition[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if `$condition` is `false`.\n\n`assertNotTrue()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.62 Usage of assertTrue()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              TrueTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertTrue\n              (\n              false\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit TrueTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) TrueTest::testFailure\nFailed asserting that false is true.\n\n/home/sb/TrueTest.php:6\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```"
- name: assertXmlFileEqualsXmlFile()
  id: assertions#assertXmlFileEqualsXmlFile()
  summary: Reports an error identified by $message if the XML document in $actualFile is not equal to the XML document in $expectedFile
  belongs_to: Assertions
  description: "## assertXmlFileEqualsXmlFile()\n\n` ``assertXmlFileEqualsXmlFile(string`` ``$expectedFile,`` ``string`` ``$actualFile[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the XML document in `$actualFile` is not equal to the XML document in `$expectedFile`.\n\n`assertXmlFileNotEqualsXmlFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.63 Usage of assertXmlFileEqualsXmlFile()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              XmlFileEqualsXmlFileTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertXmlFileEqualsXmlFile\n              (\n              '/home/sb/expected.xml'\n              ,\n              '/home/sb/actual.xml'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit XmlFileEqualsXmlFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) XmlFileEqualsXmlFileTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n <foo>\n-  <bar/>\n+  <baz/>\n </foo>\n\n/home/sb/XmlFileEqualsXmlFileTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1.\n```"
- name: assertXmlStringEqualsXmlFile()
  id: assertions#assertXmlStringEqualsXmlFile()
  summary: Reports an error identified by $message if the XML document in $actualXml is not equal to the XML document in $expectedFile
  belongs_to: Assertions
  description: "## assertXmlStringEqualsXmlFile()\n\n` ``assertXmlStringEqualsXmlFile(string`` ``$expectedFile,`` ``string`` ``$actualXml[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the XML document in `$actualXml` is not equal to the XML document in `$expectedFile`.\n\n`assertXmlStringNotEqualsXmlFile()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.64 Usage of assertXmlStringEqualsXmlFile()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              XmlStringEqualsXmlFileTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertXmlStringEqualsXmlFile\n              (\n              '/home/sb/expected.xml'\n              ,\n              '<foo><baz/></foo>'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit XmlStringEqualsXmlFileTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) XmlStringEqualsXmlFileTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n <foo>\n-  <bar/>\n+  <baz/>\n </foo>\n\n/home/sb/XmlStringEqualsXmlFileTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n```"
- name: assertXmlStringEqualsXmlString()
  id: assertions#assertXmlStringEqualsXmlString()
  summary: Reports an error identified by $message if the XML document in $actualXml is not equal to the XML document in $expectedXml
  belongs_to: Assertions
  description: "## assertXmlStringEqualsXmlString()\n\n` ``assertXmlStringEqualsXmlString(string`` ``$expectedXml,`` ``string`` ``$actualXml[,`` ``string`` ``$message`` ``=`` ``''])`` `\n\nReports an error identified by `$message` if the XML document in `$actualXml` is not equal to the XML document in `$expectedXml`.\n\n`assertXmlStringNotEqualsXmlString()` is the inverse of this assertion and takes the same arguments.\n\nExample 1.65 Usage of assertXmlStringEqualsXmlString()\n\n``` php\n              <?\n              php\n              declare\n              (\n              strict_types\n              =\n              1\n              );\n              use\n              PHPUnit\\Framework\\TestCase\n              ;\n              final\n              class\n              XmlStringEqualsXmlStringTest\n              extends\n              TestCase\n              {\n              public\n              function\n              testFailure\n              ()\n              :\n              void\n              {\n              $this\n              ->\n              assertXmlStringEqualsXmlString\n              (\n              '<foo><bar/></foo>'\n              ,\n              '<foo><baz/></foo>'\n              );\n              }\n              }\n            \n```\n\n``` php\n$ phpunit XmlStringEqualsXmlStringTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) XmlStringEqualsXmlStringTest::testFailure\nFailed asserting that two DOM documents are equal.\n--- Expected\n+++ Actual\n@@ @@\n <?xml version=\"1.0\"?>\n <foo>\n-  <bar/>\n+  <baz/>\n </foo>\n\n/home/sb/XmlStringEqualsXmlStringTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/assertions.html](https://phpunit.readthedocs.io/en/9.5/assertions.html)"
- name: Code Coverage Analysis
  id: code-coverage-analysis
  summary: In computer science, code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite
  description: "# Code Coverage Analysis\n\n> *Wikipedia*:\n>\n> In computer science, code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage.\n\nIn this chapter you will learn all about PHPUnit’s code coverage functionality that provides an insight into what parts of the production code are executed when the tests are run. It makes use of the [php-code-coverage](https://github.com/sebastianbergmann/php-code-coverage) component, which in turn leverages the code coverage functionality provided by the [Xdebug](https://xdebug.org/) or [PCOV](https://github.com/krakjoe/pcov) extensions for PHP or by [PHPDBG](https://www.php.net/manual/en/book.phpdbg.php).\n\nNote\n\nIf you see a warning while running tests that no code coverage driver is available, it means that you are using the PHP CLI binary (`php`) and do not have Xdebug or PCOV loaded.\n\nPHPUnit can generate an HTML-based code coverage report as well as XML-based logfiles with code coverage information in various formats (Clover, Crap4J, PHPUnit). Code coverage information can also be reported as text (and printed to STDOUT) and exported as PHP code for further processing.\n\nPlease refer to [The Command-Line Test Runner](textui#textui) for a list of command line switches that control code coverage functionality as well as [The \\<logging\\> Element](configuration#appendixes-configuration-logging) for the relevant configuration settings.\n\n## Software Metrics for Code Coverage\n\nVarious software metrics exist to measure code coverage:\n\n*Line Coverage*\n\n> The *Line Coverage* software metric measures whether each executable line was executed.\n\n*Branch Coverage*\n\n> The *Branch Coverage* software metric measures whether the boolean expression of each control structure evaluated to both `true` and `false` while running the test suite.\n\n*Path Coverage*\n\n> The *Path Coverage* software metric measures whether each of the possible execution paths in a function or method has been followed while running the test suite. An execution path is a unique sequence of branches from the entry of the function or method to its exit.\n\n*Function and Method Coverage*\n\n> The *Function and Method Coverage* software metric measures whether each function or method has been invoked. php-code-coverage only considers a function or method as covered when all of its executable lines are covered.\n\n*Class and Trait Coverage*\n\n> The *Class and Trait Coverage* software metric measures whether each method of a class or trait is covered. php-code-coverage only considers a class or trait as covered when all of its methods are covered.\n\n*Change Risk Anti-Patterns (CRAP) Index*\n\n> The *Change Risk Anti-Patterns (CRAP) Index* is calculated based on the cyclomatic complexity and code coverage of a unit of code. Code that is not too complex and has an adequate test coverage will have a low CRAP index. The CRAP index can be lowered by writing tests and by refactoring the code to lower its complexity.\n\n## Including Files\n\nIt is mandatory to configure a filter for telling PHPUnit which sourcecode files to include in the code coverage report. This can either be done using the `--coverage-filter` [command line](textui#textui-clioptions) option or via the configuration file (see [The \\<include\\> Element](configuration#appendixes-configuration-coverage-include)).\n\nThe `includeUncoveredFilesInCodeCoverageReport` and `processUncoveredFilesForCodeCoverageReport` configuration settings are available to configure how the filter is used:\n\n- `includeUncoveredFilesInCodeCoverageReport=\"false\"` means that only files that have at least one line of executed code are included in the code coverage report\n- `includeUncoveredFilesInCodeCoverageReport=\"true\"` (default) means that all files are included in the code coverage report even if not a single line of code of such a file is executed\n- `processUncoveredFilesForCodeCoverageReport=\"false\"` (default) means that a file that has no executed lines of code will be added to the code coverage report (if `includeUncoveredFilesInCodeCoverageReport=\"true\"` is set) but it will not be loaded by PHPUnit and it will therefore not be analysed for correct executable lines of code information\n- `processUncoveredFilesForCodeCoverageReport=\"true\"` means that a file that has no executed lines of code will be loaded by PHPUnit so that it can be analysed for correct executable lines of code information\n\nNote\n\nPlease note that the loading of sourcecode files that is performed when `processUncoveredFilesForCodeCoverageReport=\"true\"` is set can cause problems when a sourcecode file contains code outside the scope of a class or function, for instance.\n\n## Ignoring Code Blocks\n\nSometimes you have blocks of code that you cannot test and that you may want to ignore during code coverage analysis. PHPUnit lets you do this using the `@codeCoverageIgnore`, `@codeCoverageIgnoreStart` and `@codeCoverageIgnoreEnd` annotations as shown in [Example 9.1](#code-coverage-analysis-ignoring-code-blocks-examples-sample-php).\n\nExample 9.1 Using the `@codeCoverageIgnore`, `@codeCoverageIgnoreStart` and `@codeCoverageIgnoreEnd` annotations\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @codeCoverageIgnore\n */\nfinal class Foo\n{\n    public function bar(): void\n    {\n    }\n}\n\nfinal class Bar\n{\n    /**\n     * @codeCoverageIgnore\n     */\n    public function foo(): void\n    {\n    }\n}\n\nif (false) {\n    // @codeCoverageIgnoreStart\n    print '*';\n    // @codeCoverageIgnoreEnd\n}\n\nexit; // @codeCoverageIgnore\n```\n\nThe ignored lines of code (marked as ignored using the annotations) are counted as executed (if they are executable) and will not be highlighted.\n\n## Specifying Covered Code Parts\n\nThe `@covers` annotation (see the [annotation documentation](annotations#appendixes-annotations-covers-tables-annotations)) can be used in the test code to specify which code parts a test class (or test method) wants to test. If provided, this effectively filters the code coverage report to include executed code from the referenced code parts only. [Example 9.2](#code-coverage-analysis-specifying-covered-parts-examples-invoicetest-php) shows an example.\n\nNote\n\nIf a method is specificed with the `@covers` annotation, only the referenced method will be considered as covered, but not methods called by this method. Hence, when a covered method is refactored using the *extract method* refactoring, corresponding `@covers` annotations need to be added. This is the reason it is recommended to use this annotation with class scope, not with method scope.\n\nExample 9.2 Test class that specifies which class it wants to cover\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @covers \\Invoice\n * @uses \\Money\n */\nfinal class InvoiceTest extends TestCase\n{\n    private $invoice;\n\n    protected function setUp(): void\n    {\n        $this->invoice = new Invoice;\n    }\n\n    public function testAmountInitiallyIsEmpty(): void\n    {\n        $this->assertEquals(new Money, $this->invoice->getAmount());\n    }\n}\n```\n\nExample 9.3 Tests that specify which method they want to cover\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class BankAccountTest extends TestCase\n{\n    private $ba;\n\n    protected function setUp(): void\n    {\n        $this->ba = new BankAccount;\n    }\n\n    /**\n     * @covers \\BankAccount::getBalance\n     */\n    public function testBalanceIsInitiallyZero(): void\n    {\n        $this->assertSame(0, $this->ba->getBalance());\n    }\n\n    /**\n     * @covers \\BankAccount::withdrawMoney\n     */\n    public function testBalanceCannotBecomeNegative(): void\n    {\n        try {\n            $this->ba->withdrawMoney(1);\n        }\n\n        catch (BankAccountException $e) {\n            $this->assertSame(0, $this->ba->getBalance());\n\n            return;\n        }\n\n        $this->fail();\n    }\n\n    /**\n     * @covers \\BankAccount::depositMoney\n     */\n    public function testBalanceCannotBecomeNegative2(): void\n    {\n        try {\n            $this->ba->depositMoney(-1);\n        }\n\n        catch (BankAccountException $e) {\n            $this->assertSame(0, $this->ba->getBalance());\n\n            return;\n        }\n\n        $this->fail();\n    }\n\n    /**\n     * @covers \\BankAccount::getBalance\n     * @covers \\BankAccount::depositMoney\n     * @covers \\BankAccount::withdrawMoney\n     */\n    public function testDepositWithdrawMoney(): void\n    {\n        $this->assertSame(0, $this->ba->getBalance());\n        $this->ba->depositMoney(1);\n        $this->assertSame(1, $this->ba->getBalance());\n        $this->ba->withdrawMoney(1);\n        $this->assertSame(0, $this->ba->getBalance());\n    }\n}\n```\n\nIt is also possible to specify that a test should not cover *any* method by using the `@coversNothing` annotation (see [@coversNothing](annotations#appendixes-annotations-coversnothing)). This can be helpful when writing integration tests to make sure you only generate code coverage with unit tests.\n\nExample 9.4 A test that specifies that no method should be covered\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\DbUnit\\TestCase\n\nfinal class GuestbookIntegrationTest extends TestCase\n{\n    /**\n     * @coversNothing\n     */\n    public function testAddEntry(): void\n    {\n        $guestbook = new Guestbook();\n        $guestbook->addEntry(\"suzy\", \"Hello world!\");\n\n        $queryTable = $this->getConnection()->createQueryTable(\n            'guestbook', 'SELECT * FROM guestbook'\n        );\n\n        $expectedTable = $this->createFlatXmlDataSet(\"expectedBook.xml\")\n                              ->getTable(\"guestbook\");\n\n        $this->assertTablesEqual($expectedTable, $queryTable);\n    }\n}\n```\n\n## Edge Cases\n\nThis section shows noteworthy edge cases that lead to confusing code coverage information.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n// Because it is \"line based\" and not statement base coverage\n// one line will always have one coverage status\nif (false) this_function_call_shows_up_as_covered();\n\n// Due to how code coverage works internally these two lines are special.\n// This line will show up as non executable\nif (false)\n    // This line will show up as covered because it is actually the\n    // coverage of the if statement in the line above that gets shown here!\n    will_also_show_up_as_covered();\n\n// To avoid this it is necessary that braces are used\nif (false) {\n    this_call_will_never_show_up_as_covered();\n}\n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/code-coverage-analysis.html](https://phpunit.readthedocs.io/en/9.5/code-coverage-analysis.html)"
- name: Extending PHPUnit
  id: extending-phpunit
  summary: PHPUnit can be extended in various ways to make the writing of tests easier and customize the feedback you get from running tests
  description: "# Extending PHPUnit\n\nPHPUnit can be extended in various ways to make the writing of tests easier and customize the feedback you get from running tests. Here are common starting points to extend PHPUnit.\n\n## Subclass PHPUnit\\Framework\\TestCase\n\nWrite custom assertions and utility methods in an abstract subclass of `PHPUnit\\Framework\\TestCase` and derive your test case classes from that class. This is one of the easiest ways to extend PHPUnit.\n\n## Write custom assertions\n\nWhen writing custom assertions it is the best practice to follow how PHPUnit’s own assertions are implemented. As you can see in [Example 10.1](#extending-phpunit-examples-assert-php), the `assertTrue()` method is a wrapper around the `isTrue()` and `assertThat()` methods: `isTrue()` creates a matcher object that is passed on to `assertThat()` for evaluation.\n\nExample 10.1 The assertTrue() and isTrue() methods of the PHPUnit\\Framework\\Assert class\n\n``` php\n<?php declare(strict_types=1);\nnamespace PHPUnit\\Framework;\n\nuse PHPUnit\\Framework\\Constraint\\IsTrue;\n\nabstract class Assert\n{\n    // ...\n\n    public static function assertTrue($condition, string $message = ''): void\n    {\n        static::assertThat($condition, static::isTrue(), $message);\n    }\n\n    // ...\n\n    public static function isTrue(): IsTrue\n    {\n        return new IsTrue;\n    }\n\n    // ...\n}\n```\n\n[Example 10.2](#extending-phpunit-examples-istrue-php) shows how `PHPUnit\\Framework\\Constraint\\IsTrue` extends the abstract base class for matcher objects (or constraints), `PHPUnit\\Framework\\Constraint`.\n\nExample 10.2 The PHPUnit\\FrameworkConstraint\\IsTrue class\n\n``` php\n<?php declare(strict_types=1);\nnamespace PHPUnit\\Framework\\Constraint;\n\nuse PHPUnit\\Framework\\Constraint;\n\nfinal class IsTrue extends Constraint\n{\n    public function toString(): string\n    {\n        return 'is true';\n    }\n\n    protected function matches($other): bool\n    {\n        return $other === true;\n    }\n}\n```\n\nThe effort of implementing the `assertTrue()` and `isTrue()` methods as well as the `PHPUnit\\Framework\\Constraint\\IsTrue` class yields the benefit that `assertThat()` automatically takes care of evaluating the assertion and bookkeeping tasks such as counting it for statistics. Furthermore, the `isTrue()` method can be used as a matcher when configuring mock objects.\n\n## Extending the TestRunner\n\nPHPUnit’s test runner can be extended by registering objects that implement one or more of the following interfaces:\n\n- `AfterIncompleteTestHook`\n- `AfterLastTestHook`\n- `AfterRiskyTestHook`\n- `AfterSkippedTestHook`\n- `AfterSuccessfulTestHook`\n- `AfterTestErrorHook`\n- `AfterTestFailureHook`\n- `AfterTestWarningHook`\n- `AfterTestHook`\n- `BeforeFirstTestHook`\n- `BeforeTestHook`\n\nEach “hook”, meaning each of the interfaces listed above, represents an event that can occur while the tests are being executed.\n\nSee [The \\<extensions\\> Element](configuration#appendixes-configuration-extensions) for details on how to register extensions in PHPUnit’s XML configuration.\n\n[Example 10.3](#extending-phpunit-examples-testrunnerextension) shows an example for an extension implementing `BeforeFirstTestHook` and `AfterLastTestHook`:\n\nExample 10.3 TestRunner Extension Example\n\n``` php\n<?php declare(strict_types=1);\nnamespace Vendor;\n\nuse PHPUnit\\Runner\\BeforeFirstTestHook;\nuse PHPUnit\\Runner\\AfterLastTestHook;\n\nfinal class MyExtension implements BeforeFirstTestHook, AfterLastTestHook\n{\n    public function executeBeforeFirstTest(): void\n    {\n        // called before the first test is being run\n    }\n\n    public function executeAfterLastTest(): void\n    {\n        // called after the last test has been run\n    }\n}\n```\n\n### Configuring extensions\n\nYou can configure PHPUnit extensions, assuming the extension accepts configuration values.\n\n[Example 10.4](#extending-phpunit-examples-testrunnerconfigurableextension) shows an example how to make an extension configurable, by adding an `__constructor()` definition to the extension class:\n\nExample 10.4 TestRunner Extension with constructor\n\n``` php\n<?php declare(strict_types=1);\nnamespace Vendor;\n\nuse PHPUnit\\Runner\\BeforeFirstTestHook;\nuse PHPUnit\\Runner\\AfterLastTestHook;\n\nfinal class MyConfigurableExtension implements BeforeFirstTestHook, AfterLastTestHook\n{\n    protected $config_value_1 = '';\n\n    protected $config_value_2 = 0;\n\n    public function __construct(string $value1 = '', int $value2 = 0)\n    {\n        $this->config_value_1 = $config_1;\n        $this->config_value_2 = $config_2;\n    }\n\n    public function executeBeforeFirstTest(): void\n    {\n        if (strlen($this->config_value_1) {\n            echo 'Testing with configuration value: ' . $this->config_value_1;\n        }\n    }\n\n    public function executeAfterLastTest(): void\n    {\n        if ($this->config_value_2 > 10) {\n            echo 'Second config value is OK!';\n        }\n    }\n}\n```\n\nTo input configuration to the extension via XML, the XML configuration file’s `extensions` section needs to be updated to have configuration values, as shown in [Example 10.5](#extending-phpunit-examples-testrunnerconfigurableextensionconfig):\n\nExample 10.5 TestRunner Extension configuration\n\n``` php\n<extensions>\n    <extension class=\"Vendor\\MyUnconfigurableExtension\" />\n    <extension class=\"Vendor\\MyConfigurableExtension\">\n        <arguments>\n            <string>Hello world!</string>\n            <int>15</int>\n        </arguments>\n    </extension>\n</extensions>\n```\n\nSee [The \\<arguments\\> Element](configuration#appendixes-configuration-extensions-extension-arguments) for details on how to use the `arguments` configuration.\n\nRemember: all configuration is optional, so make sure your extension either has sane defaults in place, or that it disables itself in case configuration is missing.\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/extending-phpunit.html](https://phpunit.readthedocs.io/en/9.5/extending-phpunit.html)"
- name: Fixtures
  id: fixtures
  summary: One of the most time-consuming parts of writing tests is writing the code to set the world up in a known state and then return it to its original state when the test is complete
  description: "# Fixtures\n\nOne of the most time-consuming parts of writing tests is writing the code to set the world up in a known state and then return it to its original state when the test is complete. This known state is called the *fixture* of the test.\n\nIn [Testing array operations with PHPUnit](writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest-php), the fixture was the array that is stored in the `$stack` variable. Most of the time, though, the fixture will be more complex than a simple array, and the amount of code needed to set it up will grow accordingly. The actual content of the test gets lost in the noise of setting up the fixture. This problem gets even worse when you write several tests with similar fixtures. Without some help from the testing framework, we would have to duplicate the code that sets up the fixture for each test we write.\n\nPHPUnit supports sharing the setup code. Before a test method is run, a template method called `setUp()` is invoked. `setUp()` is where you create the objects against which you will test. Once the test method has finished running, whether it succeeded or failed, another template method called `tearDown()` is invoked. `tearDown()` is where you clean up the objects against which you tested.\n\nIn [Using the @depends annotation to express dependencies](writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest2-php) we used the producer-consumer relationship between tests to share a fixture. This is not always desired or even possible. [Example 4.1](#fixtures-examples-stacktest-php) shows how we can write the tests of the `StackTest` in such a way that not the fixture itself is reused but the code that creates it. First we declare the instance variable, `$stack`, that we are going to use instead of a method-local variable. Then we put the creation of the `array` fixture into the `setUp()` method. Finally, we remove the redundant code from the test methods and use the newly introduced instance variable, `$this->stack`, instead of the method-local variable `$stack` with the `assertSame()` assertion method.\n\nExample 4.1 Using setUp() to create the stack fixture\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StackTest extends TestCase\n{\n    private $stack;\n\n    protected function setUp(): void\n    {\n        $this->stack = [];\n    }\n\n    public function testEmpty(): void\n    {\n        $this->assertTrue(empty($this->stack));\n    }\n\n    public function testPush(): void\n    {\n        array_push($this->stack, 'foo');\n\n        $this->assertSame('foo', $this->stack[count($this->stack)-1]);\n        $this->assertFalse(empty($this->stack));\n    }\n\n    public function testPop(): void\n    {\n        array_push($this->stack, 'foo');\n\n        $this->assertSame('foo', array_pop($this->stack));\n        $this->assertTrue(empty($this->stack));\n    }\n}\n```\n\nThe `setUp()` and `tearDown()` template methods are run once for each test method (and on fresh instances) of the test case class.\n\nIn addition, the `setUpBeforeClass()` and `tearDownAfterClass()` template methods are called before the first test of the test case class is run and after the last test of the test case class is run, respectively.\n\nThe example below shows all template methods that are available in a test case class.\n\nExample 4.2 Example showing all template methods available\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class TemplateMethodsTest extends TestCase\n{\n    public static function setUpBeforeClass(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function setUp(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function assertPreConditions(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    public function testOne(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n        $this->assertTrue(true);\n    }\n\n    public function testTwo(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n        $this->assertTrue(false);\n    }\n\n    protected function assertPostConditions(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function tearDown(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    public static function tearDownAfterClass(): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n    }\n\n    protected function onNotSuccessfulTest(Throwable $t): void\n    {\n        fwrite(STDOUT, __METHOD__ . \"\\n\");\n        throw $t;\n    }\n}\n```\n\n``` php\n$ phpunit TemplateMethodsTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nTemplateMethodsTest::setUpBeforeClass\nTemplateMethodsTest::setUp\nTemplateMethodsTest::assertPreConditions\nTemplateMethodsTest::testOne\nTemplateMethodsTest::assertPostConditions\nTemplateMethodsTest::tearDown\n.TemplateMethodsTest::setUp\nTemplateMethodsTest::assertPreConditions\nTemplateMethodsTest::testTwo\nTemplateMethodsTest::tearDown\nTemplateMethodsTest::onNotSuccessfulTest\nFTemplateMethodsTest::tearDownAfterClass\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) TemplateMethodsTest::testTwo\nFailed asserting that <boolean:false> is true.\n/home/sb/TemplateMethodsTest.php:30\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.\n```\n\n## More setUp() than tearDown()\n\n`setUp()` and `tearDown()` are nicely symmetrical in theory but not in practice. In practice, you only need to implement `tearDown()` if you have allocated external resources like files or sockets in `setUp()`. If your `setUp()` just creates plain PHP objects, you can generally ignore `tearDown()`. However, if you create many objects in your `setUp()`, you might want to `unset()` the variables pointing to those objects in your `tearDown()` so they can be garbage collected. The garbage collection of test case objects is not predictable.\n\n## Variations\n\nWhat happens when you have two tests with slightly different setups? There are two possibilities:\n\n- If the `setUp()` code differs only slightly, move the code that differs from the `setUp()` code to the test method.\n- If you really have a different `setUp()`, you need a different test case class. Name the class after the difference in the setup.\n\n## Sharing Fixture\n\nThere are few good reasons to share fixtures between tests, but in most cases the need to share a fixture between tests stems from an unresolved design problem.\n\nA good example of a fixture that makes sense to share across several tests is a database connection: you log into the database once and reuse the database connection instead of creating a new connection for each test. This makes your tests run faster.\n\n[Example 4.3](#fixtures-sharing-fixture-examples-databasetest-php) uses the `setUpBeforeClass()` and `tearDownAfterClass()` template methods to connect to the database before the test case class’ first test and to disconnect from the database after the last test of the test case, respectively.\n\nExample 4.3 Sharing fixture between the tests of a test suite\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DatabaseTest extends TestCase\n{\n    private static $dbh;\n\n    public static function setUpBeforeClass(): void\n    {\n        self::$dbh = new PDO('sqlite::memory:');\n    }\n\n    public static function tearDownAfterClass(): void\n    {\n        self::$dbh = null;\n    }\n}\n```\n\nIt cannot be emphasized enough that sharing fixtures between tests reduces the value of the tests. The underlying design problem is that objects are not loosely coupled. You will achieve better results solving the underlying design problem and then writing tests using stubs (see [Test Doubles](test-doubles#test-doubles)), than by creating dependencies between tests at runtime and ignoring the opportunity to improve your design.\n\n## Global State\n\n[It is hard to test code that uses singletons.](http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html) The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test’s change to a global variable might break another test.\n\nIn PHP, global variables work like this:\n\n- A global variable `$foo`` ``=`` ``'bar';` is stored as `$GLOBALS['foo']`` ``=`` ``'bar';`.\n- The `$GLOBALS` variable is a so-called *super-global* variable.\n- Super-global variables are built-in variables that are always available in all scopes.\n- In the scope of a function or method, you may access the global variable `$foo` by either directly accessing `$GLOBALS['foo']` or by using `global`` ``$foo;` to create a local variable with a reference to the global variable.\n\nBesides global variables, static attributes of classes are also part of the global state.\n\nPrior to version 6, by default, PHPUnit ran your tests in a way where changes to global and super-global variables (`$GLOBALS`, `$_ENV`, `$_POST`, `$_GET`, `$_COOKIE`, `$_SERVER`, `$_FILES`, `$_REQUEST`) do not affect other tests.\n\nAs of version 6, PHPUnit does not perform this backup and restore operation for global and super-global variables by default anymore. It can be activated by using the `--globals-backup` option or setting `backupGlobals=\"true\"` in the XML configuration file.\n\nBy using the `--static-backup` option or setting `backupStaticAttributes=\"true\"` in the XML configuration file, this isolation can be extended to static attributes of classes.\n\nNote\n\nThe backup and restore operations for global variables and static class attributes use `serialize()` and `unserialize()`.\n\nObjects of some classes (e.g., `PDO`) cannot be serialized and the backup operation will break when such an object is stored e.g. in the `$GLOBALS` array.\n\nThe `@backupGlobals` annotation that is discussed in [@backupGlobals](annotations#appendixes-annotations-backupglobals) can be used to control the backup and restore operations for global variables. Alternatively, you can provide a list of global variables that are to be excluded from the backup and restore operations like this\n\n``` php\nfinal class MyTest extends TestCase\n{\n    protected $backupGlobalsExcludeList = ['globalVariable'];\n\n    // ...\n}\n```\n\nNote\n\nSetting the `$backupGlobalsExcludeList` property inside e.g. the `setUp()` method has no effect.\n\nThe `@backupStaticAttributes` annotation discussed in [@backupStaticAttributes](annotations#appendixes-annotations-backupstaticattributes) can be used to back up all static property values in all declared classes before each test and restore them afterwards.\n\nIt processes all classes that are declared at the time a test starts, not only the test class itself. It only applies to static class properties, not static variables within functions.\n\nNote\n\nThe `@backupStaticAttributes` operation is executed before a test method, but only if it is enabled. If a static value was changed by a previously executed test that did not have `@backupStaticAttributes` enabled, then that value will be backed up and restored — not the originally declared default value. PHP does not record the originally declared default value of any static variable.\n\nThe same applies to static properties of classes that were newly loaded/declared within a test. They cannot be reset to their originally declared default value after the test, since that value is unknown. Whichever value is set will leak into subsequent tests.\n\nFor unit tests, it is recommended to explicitly reset the values of static properties under test in your `setUp()` code instead (and ideally also `tearDown()`, so as to not affect subsequently executed tests).\n\nYou can provide a list of static attributes that are to be excluded from the backup and restore operations:\n\n``` php\nfinal class MyTest extends TestCase\n{\n    protected $backupStaticAttributesExcludeList = [\n        'className' => ['attributeName']\n    ];\n\n    // ...\n}\n```\n\nNote\n\nSetting the `$backupStaticAttributesExcludeList` property inside e.g. the `setUp()` method has no effect.\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/fixtures.html](https://phpunit.readthedocs.io/en/9.5/fixtures.html)"
- name: Incomplete and Skipped Tests
  id: incomplete-and-skipped-tests
  summary: to keep track of the tests that you have to write
  description: "# Incomplete and Skipped Tests\n\n## Incomplete Tests\n\nWhen you are working on a new test case class, you might want to begin by writing empty test methods such as:\n\n``` php\npublic function testSomething(): void\n{\n}\n```\n\nto keep track of the tests that you have to write. The problem with empty test methods is that they are interpreted as a success by the PHPUnit framework. This misinterpretation leads to the test reports being useless – you cannot see whether a test is actually successful or just not yet implemented. Calling `$this->fail()` in the unimplemented test method does not help either, since then the test will be interpreted as a failure. This would be just as wrong as interpreting an unimplemented test as a success.\n\nIf we think of a successful test as a green light and a test failure as a red light, we need an additional yellow light to mark a test as being incomplete or not yet implemented. `PHPUnit\\Framework\\IncompleteTest` is a marker interface for marking an exception that is raised by a test method as the result of the test being incomplete or currently not implemented. `PHPUnit\\Framework\\IncompleteTestError` is the standard implementation of this interface.\n\n[Example 7.1](#incomplete-and-skipped-tests-incomplete-tests-examples-sampletest-php) shows a test case class, `SampleTest`, that contains one test method, `testSomething()`. By calling the convenience method `markTestIncomplete()` (which automatically raises an `PHPUnit\\Framework\\IncompleteTestError` exception) in the test method, we mark the test as being incomplete.\n\nExample 7.1 Marking a test as incomplete\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SampleTest extends TestCase\n{\n    public function testSomething(): void\n    {\n        // Optional: Test anything here, if you want.\n        $this->assertTrue(true, 'This should already work.');\n\n        // Stop here and mark this test as incomplete.\n        $this->markTestIncomplete(\n          'This test has not been implemented yet.'\n        );\n    }\n}\n```\n\nAn incomplete test is denoted by an `I` in the output of the PHPUnit command-line test runner, as shown in the following example:\n\n``` php\n$ phpunit --verbose SampleTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nI\n\nTime: 0 seconds, Memory: 3.95Mb\n\nThere was 1 incomplete test:\n\n1) SampleTest::testSomething\nThis test has not been implemented yet.\n\n/home/sb/SampleTest.php:12\nOK, but incomplete or skipped tests!\nTests: 1, Assertions: 1, Incomplete: 1.\n```\n\n[Table 7.1](#incomplete-and-skipped-tests-incomplete-tests-tables-api) shows the API for marking tests as incomplete.\n\n| Method                                             | Meaning                                                                          |\n|----------------------------------------------------|----------------------------------------------------------------------------------|\n| `void`` ``markTestIncomplete()`                    | Marks the current test as incomplete.                                            |\n| `void`` ``markTestIncomplete(string`` ``$message)` | Marks the current test as incomplete using `$message` as an explanatory message. |\n\nTable 7.1 API for Incomplete Tests {#incomplete-and-skipped-tests-incomplete-tests-tables-api}\n\n## Skipping Tests\n\nNot all tests can be run in every environment. Consider, for instance, a database abstraction layer that has several drivers for the different database systems it supports. The tests for the MySQL driver can only be run if a MySQL server is available.\n\n[Example 7.2](#incomplete-and-skipped-tests-skipping-tests-examples-databasetest-php) shows a test case class, `DatabaseTest`, that contains one test method, `testConnection()`. In the test case class’ `setUp()` template method we check whether the MySQLi extension is available and use the `markTestSkipped()` method to skip the test if it is not.\n\nExample 7.2 Skipping a test\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DatabaseTest extends TestCase\n{\n    protected function setUp(): void\n    {\n        if (!extension_loaded('mysqli')) {\n            $this->markTestSkipped(\n              'The MySQLi extension is not available.'\n            );\n        }\n    }\n\n    public function testConnection(): void\n    {\n        // ...\n    }\n}\n```\n\nA test that has been skipped is denoted by an `S` in the output of the PHPUnit command-line test runner, as shown in the following example:\n\n``` php\n$ phpunit --verbose DatabaseTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nS\n\nTime: 0 seconds, Memory: 3.95Mb\n\nThere was 1 skipped test:\n\n1) DatabaseTest::testConnection\nThe MySQLi extension is not available.\n\n/home/sb/DatabaseTest.php:9\nOK, but incomplete or skipped tests!\nTests: 1, Assertions: 0, Skipped: 1.\n```\n\n[Table 7.2](#incomplete-and-skipped-tests-skipped-tests-tables-api) shows the API for skipping tests.\n\n| Method                                          | Meaning                                                                       |\n|-------------------------------------------------|-------------------------------------------------------------------------------|\n| `void`` ``markTestSkipped()`                    | Marks the current test as skipped.                                            |\n| `void`` ``markTestSkipped(string`` ``$message)` | Marks the current test as skipped using `$message` as an explanatory message. |\n\nTable 7.2 API for Skipping Tests {#incomplete-and-skipped-tests-skipped-tests-tables-api}\n\n## Skipping Tests using @requires\n\nIn addition to the above methods it is also possible to use the `@requires` annotation to express common preconditions for a test case.\n\n| Type        | Possible Values                                                                                  | Examples                     | Another example                                    |\n|-------------|--------------------------------------------------------------------------------------------------|------------------------------|----------------------------------------------------|\n| `PHP`       | Any PHP version identifier along with an optional operator                                       | @requires PHP 7.1.20         | @requires PHP \\>= 7.2                              |\n| `PHPUnit`   | Any PHPUnit version identifier along with an optional operator                                   | @requires PHPUnit 7.3.1      | @requires PHPUnit \\< 8                             |\n| `OS`        | A regexp matching [PHP_OS](https://www.php.net/manual/en/reserved.constants.php#constant.php-os) | @requires OS Linux           | @requires OS WIN32\\|WINNT                          |\n| `OSFAMILY`  | Any [OS family](https://www.php.net/manual/en/reserved.constants.php#constant.php-os-family)     | @requires OSFAMILY Solaris   | @requires OSFAMILY Windows                         |\n| `function`  | Any valid parameter to [function_exists](https://www.php.net/function_exists)                    | @requires function imap_open | @requires function ReflectionMethod::setAccessible |\n| `extension` | Any extension name along with an optional version identifier and optional operator               | @requires extension mysqli   | @requires extension redis \\>= 2.2.0                |\n\nTable 7.3 Possible @requires usages {#incomplete-and-skipped-tests-requires-tables-api}\n\nThe following operators are supported for PHP, PHPUnit, and extension version constraints: `<`, `<=`, `>`, `>=`, `=`, `==`, `!=`, `<>`.\n\nVersions are compared using PHP’s [version_compare](https://www.php.net/version_compare) function. Among other things, this means that the `=` and `==` operator can only be used with complete `X.Y.Z` version numbers and that just `X.Y` will not work.\n\nExample 7.3 Skipping test cases using @requires\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\n/**\n * @requires extension mysqli\n */\nfinal class DatabaseTest extends TestCase\n{\n    /**\n     * @requires PHP >= 5.3\n     */\n    public function testConnection(): void\n    {\n        // Test requires the mysqli extension and PHP >= 5.3\n    }\n\n    // ... All other tests require the mysqli extension\n}\n```\n\nIf you are using syntax that doesn’t compile with a certain PHP Version look into the xml configuration for version dependent includes in [The \\<testsuites\\> Element](configuration#appendixes-configuration-testsuites)\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/incomplete-and-skipped-tests.html](https://phpunit.readthedocs.io/en/9.5/incomplete-and-skipped-tests.html)"
- name: Installing PHPUnit
  id: installation
  summary: PHPUnit 9.5 requires PHP 7.3; using the latest version of PHP is highly recommended
  description: "# Installing PHPUnit\n\n## Requirements\n\nPHPUnit 9.5 requires PHP 7.3; using the latest version of PHP is highly recommended.\n\nPHPUnit requires the [dom](http://php.net/manual/en/dom.setup.php) and [json](http://php.net/manual/en/json.installation.php) extensions, which are normally enabled by default.\n\nPHPUnit also requires the [pcre](http://php.net/manual/en/pcre.installation.php), [reflection](http://php.net/manual/en/reflection.installation.php), and [spl](http://php.net/manual/en/spl.installation.php) extensions. These standard extensions are enabled by default and cannot be disabled without patching PHP’s build system and/or C sources.\n\nThe code coverage report feature requires the [Xdebug](http://xdebug.org/) (2.7.0 or later) and [tokenizer](http://php.net/manual/en/tokenizer.installation.php) extensions. Generating XML reports requires the [xmlwriter](http://php.net/manual/en/xmlwriter.installation.php) extension.\n\n## PHP Archive (PHAR)\n\nThe easiest way to obtain PHPUnit is to download a [PHP Archive (PHAR)](http://php.net/phar) that has all required (as well as some optional) dependencies of PHPUnit bundled in a single file.\n\nThe [phar](http://php.net/manual/en/phar.installation.php) extension is required for using PHP Archives (PHAR).\n\nIf the [Suhosin](http://suhosin.org/) extension is enabled, you need to allow execution of PHARs in your `php.ini`:\n\n``` php\nsuhosin.executor.include.whitelist = phar\n```\n\nThe PHPUnit PHAR can be used immediately after download:\n\n``` php\n$ wget https://phar.phpunit.de/phpunit-9.5.phar\n$ php phpunit-9.5.phar --version\nPHPUnit x.y.z by Sebastian Bergmann and contributors.\n```\n\nIt is a common practice to make the PHAR executable:\n\n``` php\n$ wget https://phar.phpunit.de/phpunit-9.5.phar\n$ chmod +x phpunit-9.5.phar\n$ ./phpunit-9.5.phar --version\nPHPUnit x.y.z by Sebastian Bergmann and contributors.\n```\n\n### Verifying PHPUnit PHAR Releases\n\nAll official releases of code distributed by the PHPUnit Project are signed by the release manager for the release. PGP signatures and SHA256 hashes are available for verification on [phar.phpunit.de](https://phar.phpunit.de/).\n\nThe following example details how release verification works. We start by downloading `phpunit.phar` as well as its detached PGP signature `phpunit.phar.asc`:\n\n``` php\n$ wget https://phar.phpunit.de/phpunit-9.5.phar\n$ wget https://phar.phpunit.de/phpunit-9.5.phar.asc\n```\n\nWe want to verify PHPUnit’s PHP Archive (`phpunit-x.y.phar`) against its detached signature (`phpunit-x.y.phar.asc`):\n\n``` php\n$ gpg phpunit-9.5.phar.asc\ngpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A\ngpg: Can't check signature: public key not found\n```\n\nWe don’t have the release manager’s public key (`6372C20A`) in our local system. In order to proceed with the verification we need to retrieve the release manager’s public key from a key server. One such server is `pgp.uni-mainz.de`. The public key servers are linked together, so you should be able to connect to any key server.\n\n``` php\n$ curl --silent https://sebastian-bergmann.de/gpg.asc | gpg --import\ngpg: key 4AA394086372C20A: 452 signatures not checked due to missing keys\ngpg: /root/.gnupg/trustdb.gpg: trustdb created\ngpg: key 4AA394086372C20A: public key \"Sebastian Bergmann <sb@sebastian-bergmann.de>\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\ngpg: no ultimately trusted keys found\n```\n\nNow we have received a public key for an entity known as “Sebastian Bergmann \\<[sb@sebastian-bergmann.de](mailto:sb%40sebastian-bergmann.de)\\>”. However, we have no way of verifying this key was created by the person known as Sebastian Bergmann. But, let’s try to verify the release signature again.\n\n``` php\n$ gpg phpunit-9.5.phar.asc\ngpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A\ngpg: Good signature from \"Sebastian Bergmann <sb@sebastian-bergmann.de>\"\ngpg:                 aka \"Sebastian Bergmann <sebastian@php.net>\"\ngpg:                 aka \"Sebastian Bergmann <sebastian@thephp.cc>\"\ngpg:                 aka \"Sebastian Bergmann <sebastian@phpunit.de>\"\ngpg:                 aka \"Sebastian Bergmann <sebastian.bergmann@thephp.cc>\"\ngpg:                 aka \"[jpeg image of size 40635]\"\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A\n```\n\nAt this point, the signature is good, but we don’t trust this key. A good signature means that the file has not been tampered. However, due to the nature of public key cryptography, you need to additionally verify that key `6372C20A` was created by the real Sebastian Bergmann.\n\nAny attacker can create a public key and upload it to the public key servers. They can then create a malicious release signed by this fake key. Then, if you tried to verify the signature of this corrupt release, it would succeed because the key was not the “real” key. Therefore, you need to validate the authenticity of this key. Validating the authenticity of a public key, however, is outside the scope of this documentation.\n\nManually verifying the authenticity and integrity of a PHPUnit PHAR using GPG is tedious. This is why PHIVE, the PHAR Installation and Verification Environment, was created. You can learn about PHIVE on its [website](https://phar.io/)\n\n## Composer\n\nAdd a (development-time) dependency on `phpunit/phpunit` to your project’s `composer.json` file if you use [Composer](https://getcomposer.org/) to manage the dependencies of your project:\n\n``` php\ncomposer require --dev phpunit/phpunit ^9.5\n```\n\n## Global Installation\n\nPlease note that it is not recommended to install PHPUnit globally, as `/usr/bin/phpunit` or `/usr/local/bin/phpunit`, for instance.\n\nInstead, PHPUnit should be managed as a project-local dependency.\n\nEither put the PHAR of the specific PHPUnit version you need in your project’s `tools` directory (which should be managed by PHIVE) or depend on the specific PHPUnit version you need in your project’s `composer.json` if you use Composer.\n\n## Webserver\n\nPHPUnit is a framework for writing as well as a commandline tool for running tests. Writing and running tests is a development-time activity. There is no reason why PHPUnit should be installed on a webserver.\n\n**If you upload PHPUnit to a webserver then your deployment process is broken. On a more general note, if your** `vendor` **directory is publicly accessible on your webserver then your deployment process is also broken.**\n\nPlease note that if you upload PHPUnit to a webserver “bad things” may happen. [You have been warned.](https://thephp.cc/news/2020/02/phpunit-a-security-risk)\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/installation.html](https://phpunit.readthedocs.io/en/9.5/installation.html)"
- name: Organizing Tests
  id: organizing-tests
  summary: 'One of the goals of PHPUnit is that tests should be composable: we want to be able to run any number or combination of tests together, for instance all tests for the whole project, or the tests for all classes of a component that is part of the project, or just the tests for a single class'
  description: "# Organizing Tests\n\nOne of the goals of PHPUnit is that tests should be composable: we want to be able to run any number or combination of tests together, for instance all tests for the whole project, or the tests for all classes of a component that is part of the project, or just the tests for a single class.\n\nPHPUnit supports different ways of organizing tests and composing them into a test suite. This chapter shows the most commonly used approaches.\n\n## Composing a Test Suite Using the Filesystem\n\nProbably the easiest way to compose a test suite is to keep all test case source files in a test directory. PHPUnit can automatically discover and run the tests by recursively traversing the test directory.\n\nLets take a look at the test suite of the [sebastianbergmann/money](http://github.com/sebastianbergmann/money/) library. Looking at this project’s directory structure, we see that the test case classes in the `tests` directory mirror the package and class structure of the System Under Test (SUT) in the `src` directory:\n\n``` php\nsrc                                 tests\n`-- Currency.php                    `-- CurrencyTest.php\n`-- IntlFormatter.php               `-- IntlFormatterTest.php\n`-- Money.php                       `-- MoneyTest.php\n`-- autoload.php\n```\n\nTo run all tests for the library we need to point the PHPUnit command-line test runner to the test directory:\n\n``` php\n$ phpunit --bootstrap src/autoload.php tests\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n.................................\n\nTime: 636 ms, Memory: 3.50Mb\n\nOK (33 tests, 52 assertions)\n```\n\nNote\n\nIf you point the PHPUnit command-line test runner to a directory it will look for `*Test.php` files.\n\nTo run only the tests that are declared in the `CurrencyTest` test case class in `tests/CurrencyTest.php` we can use the following command:\n\n``` php\n$ phpunit --bootstrap src/autoload.php tests/CurrencyTest.php\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n........\n\nTime: 280 ms, Memory: 2.75Mb\n\nOK (8 tests, 8 assertions)\n```\n\nFor more fine-grained control of which tests to run we can use the `--filter` option:\n\n``` php\n$ phpunit --bootstrap src/autoload.php --filter testObjectCanBeConstructedForValidConstructorArgument tests\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n..\n\nTime: 167 ms, Memory: 3.00Mb\n\nOK (2 test, 2 assertions)\n```\n\nNote\n\nA drawback of this approach is that we have no control over the order in which the tests are run. This can lead to problems with regard to test dependencies, see [Test Dependencies](writing-tests-for-phpunit#writing-tests-for-phpunit-test-dependencies). In the next section you will see how you can make the test execution order explicit by using the XML configuration file.\n\n## Composing a Test Suite Using XML Configuration\n\nPHPUnit’s XML configuration file ([The XML Configuration File](configuration#appendixes-configuration)) can also be used to compose a test suite. [Example 5.1](#organizing-tests-xml-configuration-examples-phpunit-xml) shows a minimal `phpunit.xml` file that will add all `*Test` classes that are found in `*Test.php` files when the `tests` directory is recursively traversed.\n\nExample 5.1 Composing a Test Suite Using XML Configuration\n\n``` php\n<phpunit bootstrap=\"src/autoload.php\">\n  <testsuites>\n    <testsuite name=\"money\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n```\n\nTo run the test suite, use the the `--testsuite` option:\n\n``` php\n$ phpunit --bootstrap src/autoload.php --testsuite money\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n..\n\nTime: 167 ms, Memory: 3.00Mb\n\nOK (2 test, 2 assertions)\n```\n\nIf `phpunit.xml` or `phpunit.xml.dist` (in that order) exist in the current working directory and `--configuration` is *not* used, the configuration will be automatically read from that file.\n\nThe order in which tests are executed can be made explicit:\n\nExample 5.2 Composing a Test Suite Using XML Configuration\n\n``` php\n<phpunit bootstrap=\"src/autoload.php\">\n  <testsuites>\n    <testsuite name=\"money\">\n      <file>tests/IntlFormatterTest.php</file>\n      <file>tests/MoneyTest.php</file>\n      <file>tests/CurrencyTest.php</file>\n    </testsuite>\n  </testsuites>\n</phpunit>\n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/organizing-tests.html](https://phpunit.readthedocs.io/en/9.5/organizing-tests.html)"
- name: Risky Tests
  id: risky-tests
  summary: PHPUnit can perform the additional checks documented below while it executes the tests
  description: "# Risky Tests\n\nPHPUnit can perform the additional checks documented below while it executes the tests.\n\n## Useless Tests\n\nPHPUnit is by default strict about tests that do not test anything. This check can be disabled by using the `--dont-report-useless-tests` option on the [command line](textui#textui-clioptions) or by setting `beStrictAboutTestsThatDoNotTestAnything=\"false\"` in PHPUnit’s [configuration file](configuration#appendixes-configuration).\n\nA test that does not perform an assertion will be marked as risky when this check is enabled. Expectations on mock objects count as an assertion.\n\n## Unintentionally Covered Code\n\nPHPUnit can be strict about unintentionally covered code. This check can be enabled by using the `--strict-coverage` option on the [command line](textui#textui-clioptions) or by setting `beStrictAboutCoversAnnotation=\"true\"` in PHPUnit’s [configuration file](configuration#appendixes-configuration).\n\nA test that is annotated with [@covers](annotations#appendixes-annotations-covers) and executes code that is not listed using a [@covers](annotations#appendixes-annotations-covers) or [@uses](annotations#appendixes-annotations-uses) annotation will be marked as risky when this check is enabled.\n\nFurthermore, by setting `forceCoversAnnotation=\"true\"` in PHPUnit’s [configuration file](configuration#appendixes-configuration), a test can be marked as risky when it does not have a [@covers](annotations#appendixes-annotations-covers) annotation.\n\n## Output During Test Execution\n\nPHPUnit can be strict about output during tests. This check can be enabled by using the `--disallow-test-output` option on the [command line](textui#textui-clioptions) or by setting `beStrictAboutOutputDuringTests=\"true\"` in PHPUnit’s [configuration file](configuration#appendixes-configuration).\n\nA test that emits output, for instance by invoking print in either the test code or the tested code, will be marked as risky when this check is enabled.\n\n## Test Execution Timeout\n\nA time limit can be enforced for the execution of a test if the `PHP_Invoker` package is installed and the `pcntl` extension is available. The enforcing of this time limit can be enabled by using the `--enforce-time-limit` option on the [command line](textui#textui-clioptions) or by setting `enforceTimeLimit=\"true\"` in PHPUnit’s [configuration file](configuration#appendixes-configuration).\n\nA test annotated with `@large` will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the `timeoutForLargeTests` attribute in the [configuration file](configuration#appendixes-configuration).\n\nA test annotated with `@medium` will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the `timeoutForMediumTests` attribute in the configuration [configuration file](configuration#appendixes-configuration).\n\nA test annotated with `@small` will fail if it takes longer than 1 second to execute. This timeout is configurable via the `timeoutForSmallTests` attribute in the [configuration file](configuration#appendixes-configuration).\n\nNote\n\nTests need to be explicitly annotated by either `@small`, `@medium`, or `@large` to enable run time limits.\n\n## Global State Manipulation\n\nPHPUnit can be strict about tests that manipulate global state. This check can be enabled by using the `--strict-global-state` option on the [command line](textui#textui-clioptions) or by setting `beStrictAboutChangesToGlobalState=\"true\"` in PHPUnit’s [configuration file](configuration#appendixes-configuration).\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/risky-tests.html](https://phpunit.readthedocs.io/en/9.5/risky-tests.html)"
- name: Static vs. Non-Static Usage of Assertion Methods
  id: assertions#Static vs. Non-Static Usage of Assertion Methods
  summary: PHPUnit’s assertions are implemented in PHPUnit\Framework\Assert
  belongs_to: Assertions
  description: |-
    ## Static vs. Non-Static Usage of Assertion Methods

    PHPUnit’s assertions are implemented in `PHPUnit\Framework\Assert`. `PHPUnit\Framework\TestCase` inherits from `PHPUnit\Framework\Assert`.

    The assertion methods are declared static and can be invoked from any context using `PHPUnit\Framework\Assert::assertTrue()`, for instance, or using `$this->assertTrue()` or `self::assertTrue()`, for instance, in a class that extends `PHPUnit\Framework\TestCase`. You can even use global function wrappers such as `assertTrue()`.

    A common question, especially from developers new to PHPUnit, is whether using `$this->assertTrue()` or `self::assertTrue()`, for instance, is “the right way” to invoke an assertion. The short answer is: there is no right way. And there is no wrong way, either. It is a matter of personal preference.

    For most people it just “feels right” to use `$this->assertTrue()` because the test method is invoked on a test object. The fact that the assertion methods are declared static allows for (re)using them outside the scope of a test object. Lastly, the global function wrappers allow developers to type less characters (`assertTrue()` instead of `$this->assertTrue()` or `self::assertTrue()`).
- name: Test Doubles
  id: test-doubles
  summary: Sometimes it is just plain hard to test the system under test (SUT) because it depends on other components that cannot be used in the test environment
  description: "# Test Doubles\n\nGerard Meszaros introduces the concept of Test Doubles in [Meszaros2007](https://phpunit.readthedocs.io/en/9.5/bibliography.html#appendixes-bibliography) like this:\n\n> *Gerard Meszaros*:\n>\n> Sometimes it is just plain hard to test the system under test (SUT) because it depends on other components that cannot be used in the test environment. This could be because they aren’t available, they will not return the results needed for the test or because executing them would have undesirable side effects. In other cases, our test strategy requires us to have more control or visibility of the internal behavior of the SUT.\n>\n> When we are writing a test in which we cannot (or chose not to) use a real depended-on component (DOC), we can replace it with a Test Double. The Test Double doesn’t have to behave exactly like the real DOC; it merely has to provide the same API as the real one so that the SUT thinks it is the real one!\n\nThe `createStub($type)`, `createMock($type)`, and `getMockBuilder($type)` methods provided by PHPUnit can be used in a test to automatically generate an object that can act as a test double for the specified original type (interface or class name). This test double object can be used in every context where an object of the original type is expected or required.\n\nThe `createStub($type)` and `createMock($type)` method immediately return a test double object for the specified type (interface or class). The creation of this test double is performed using best practice defaults. The `__construct()` and `__clone()` methods of the original class are not executed and the arguments passed to a method of the test double will not be cloned. If these defaults are not what you need then you can use the `getMockBuilder($type)` method to customize the test double generation using a fluent interface.\n\nBy default, all methods of the original class are replaced with a dummy implementation that returns `null` (without calling the original method). Using the `will($this->returnValue())` method, for instance, you can configure these dummy implementations to return a value when called.\n\nLimitation: final, private, and static methods\n\nPlease note that `final`, `private`, and `static` methods cannot be stubbed or mocked. They are ignored by PHPUnit’s test double functionality and retain their original behavior except for `static` methods that will be replaced by a method throwing a `\\PHPUnit\\Framework\\MockObject\\BadMethodCallException` exception.\n\n## Stubs\n\nThe practice of replacing an object with a test double that (optionally) returns configured return values is referred to as *stubbing*. You can use a *stub* to “replace a real component on which the SUT depends so that the test has a control point for the indirect inputs of the SUT. This allows the test to force the SUT down paths it might not otherwise execute”.\n\n[Example 8.2](#test-doubles-stubs-examples-stubtest-php) shows how to stub method calls and set up return values. We first use the `createStub()` method that is provided by the `PHPUnit\\Framework\\TestCase` class to set up a stub object that looks like an object of `SomeClass` ([Example 8.1](#test-doubles-stubs-examples-someclass-php)). We then use the [Fluent Interface](http://martinfowler.com/bliki/FluentInterface.html) that PHPUnit provides to specify the behavior for the stub. In essence, this means that you do not need to create several temporary objects and wire them together afterwards. Instead, you chain method calls as shown in the example. This leads to more readable and “fluent” code.\n\nExample 8.1 The class we want to stub\n\n``` php\n<?php declare(strict_types=1);\nclass SomeClass\n{\n    public function doSomething()\n    {\n        // Do something.\n    }\n}\n```\n\nExample 8.2 Stubbing a method call to return a fixed value\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->willReturn('foo');\n\n        // Calling $stub->doSomething() will now return\n        // 'foo'.\n        $this->assertSame('foo', $stub->doSomething());\n    }\n}\n```\n\nLimitation: Methods named “method”\n\nThe example shown above only works when the original class does not declare a method named “method”.\n\nIf the original class does declare a method named “method” then `$stub->expects($this->any())->method('doSomething')->willReturn('foo');` has to be used.\n\n“Behind the scenes”, PHPUnit automatically generates a new PHP class that implements the desired behavior when the `createStub()` method is used.\n\nPlease note that `createStub()` will automatically and recursively stub return values based on a method’s return type. Consider the example shown below:\n\nExample 8.3 A method with a return type declaration\n\n``` php\n<?php declare(strict_types=1);\nclass C\n{\n    public function m(): D\n    {\n        // Do something.\n    }\n}\n```\n\nIn the example shown above, the `C::m()` method has a return type declaration indicating that this method returns an object of type `D`. When a test double for `C` is created and no return value is configured for `m()` using `willReturn()` (see above), for instance, then when `m()` is invoked PHPUnit will automatically create a test double for `D` to be returned.\n\nSimilarily, if `m` had a return type declaration for a scalar type then a return value such as `0` (for `int`), `0.0` (for `float`), or `[]` (for `array`) would be generated.\n\n[Example 8.4](#test-doubles-stubs-examples-stubtest2-php) shows an example of how to use the Mock Builder’s fluent interface to configure the creation of the test double. The configuration of this test double uses the same best practice defaults used by `createStub()`.\n\nExample 8.4 Using the Mock Builder API can be used to configure the generated test double class\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->getMockBuilder(SomeClass::class)\n                     ->disableOriginalConstructor()\n                     ->disableOriginalClone()\n                     ->disableArgumentCloning()\n                     ->disallowMockingUnknownTypes()\n                     ->getMock();\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->willReturn('foo');\n\n        // Calling $stub->doSomething() will now return\n        // 'foo'.\n        $this->assertSame('foo', $stub->doSomething());\n    }\n}\n```\n\nIn the examples so far we have been returning simple values using `willReturn($value)`. This short syntax is the same as `will($this->returnValue($value))`. We can use variations on this longer syntax to achieve more complex stubbing behaviour.\n\nSometimes you want to return one of the arguments of a method call (unchanged) as the result of a stubbed method call. [Example 8.5](#test-doubles-stubs-examples-stubtest3-php) shows how you can achieve this using `returnArgument()` instead of `returnValue()`.\n\nExample 8.5 Stubbing a method call to return one of the arguments\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testReturnArgumentStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->will($this->returnArgument(0));\n\n        // $stub->doSomething('foo') returns 'foo'\n        $this->assertSame('foo', $stub->doSomething('foo'));\n\n        // $stub->doSomething('bar') returns 'bar'\n        $this->assertSame('bar', $stub->doSomething('bar'));\n    }\n}\n```\n\nWhen testing a fluent interface, it is sometimes useful to have a stubbed method return a reference to the stubbed object. [Example 8.6](#test-doubles-stubs-examples-stubtest4-php) shows how you can use `returnSelf()` to achieve this.\n\nExample 8.6 Stubbing a method call to return a reference to the stub object\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testReturnSelf(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->will($this->returnSelf());\n\n        // $stub->doSomething() returns $stub\n        $this->assertSame($stub, $stub->doSomething());\n    }\n}\n```\n\nSometimes a stubbed method should return different values depending on a predefined list of arguments. You can use `returnValueMap()` to create a map that associates arguments with corresponding return values. See [Example 8.7](#test-doubles-stubs-examples-stubtest5-php) for an example.\n\nExample 8.7 Stubbing a method call to return the value from a map\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testReturnValueMapStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Create a map of arguments to return values.\n        $map = [\n            ['a', 'b', 'c', 'd'],\n            ['e', 'f', 'g', 'h']\n        ];\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->will($this->returnValueMap($map));\n\n        // $stub->doSomething() returns different values depending on\n        // the provided arguments.\n        $this->assertSame('d', $stub->doSomething('a', 'b', 'c'));\n        $this->assertSame('h', $stub->doSomething('e', 'f', 'g'));\n    }\n}\n```\n\nWhen the stubbed method call should return a calculated value instead of a fixed one (see `returnValue()`) or an (unchanged) argument (see `returnArgument()`), you can use `returnCallback()` to have the stubbed method return the result of a callback function or method. See [Example 8.8](#test-doubles-stubs-examples-stubtest6-php) for an example.\n\nExample 8.8 Stubbing a method call to return a value from a callback\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testReturnCallbackStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->will($this->returnCallback('str_rot13'));\n\n        // $stub->doSomething($argument) returns str_rot13($argument)\n        $this->assertSame('fbzrguvat', $stub->doSomething('something'));\n    }\n}\n```\n\nA simpler alternative to setting up a callback method may be to specify a list of desired return values. You can do this with the `onConsecutiveCalls()` method. See [Example 8.9](#test-doubles-stubs-examples-stubtest7-php) for an example.\n\nExample 8.9 Stubbing a method call to return a list of values in the specified order\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testOnConsecutiveCallsStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->will($this->onConsecutiveCalls(2, 3, 5, 7));\n\n        // $stub->doSomething() returns a different value each time\n        $this->assertSame(2, $stub->doSomething());\n        $this->assertSame(3, $stub->doSomething());\n        $this->assertSame(5, $stub->doSomething());\n    }\n}\n```\n\nInstead of returning a value, a stubbed method can also raise an exception. [Example 8.10](#test-doubles-stubs-examples-stubtest8-php) shows how to use `throwException()` to do this.\n\nExample 8.10 Stubbing a method call to throw an exception\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StubTest extends TestCase\n{\n    public function testThrowExceptionStub(): void\n    {\n        // Create a stub for the SomeClass class.\n        $stub = $this->createStub(SomeClass::class);\n\n        // Configure the stub.\n        $stub->method('doSomething')\n             ->will($this->throwException(new Exception));\n\n        // $stub->doSomething() throws Exception\n        $stub->doSomething();\n    }\n}\n```\n\nAlternatively, you can write the stub yourself and improve your design along the way. Widely used resources are accessed through a single façade, so you can replace the resource with the stub. For example, instead of having direct database calls scattered throughout the code, you have a single `Database` object, an implementor of the `IDatabase` interface. Then, you can create a stub implementation of `IDatabase` and use it for your tests. You can even create an option for running the tests with the stub database or the real database, so you can use your tests for both local testing during development and integration testing with the real database.\n\nFunctionality that needs to be stubbed out tends to cluster in the same object, improving cohesion. By presenting the functionality with a single, coherent interface you reduce the coupling with the rest of the system.\n\n## Mock Objects\n\nThe practice of replacing an object with a test double that verifies expectations, for instance asserting that a method has been called, is referred to as *mocking*.\n\nYou can use a *mock object* “as an observation point that is used to verify the indirect outputs of the SUT as it is exercised. Typically, the mock object also includes the functionality of a test stub in that it must return values to the SUT if it hasn’t already failed the tests but the emphasis is on the verification of the indirect outputs. Therefore, a mock object is a lot more than just a test stub plus assertions; it is used in a fundamentally different way” (Gerard Meszaros).\n\nLimitation: Automatic verification of expectations\n\nOnly mock objects generated within the scope of a test will be verified automatically by PHPUnit. Mock objects generated in data providers, for instance, or injected into the test using the `@depends` annotation will not be verified automatically by PHPUnit.\n\nHere is an example: suppose we want to test that the correct method, `update()` in our example, is called on an object that observes another object. [Example 8.11](#test-doubles-mock-objects-examples-sut-php) shows the code for the `Subject` and `Observer` classes that are part of the System under Test (SUT).\n\nExample 8.11 The Subject and Observer classes that are part of the System under Test (SUT)\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nclass Subject\n{\n    protected $observers = [];\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    public function doSomething()\n    {\n        // Do something.\n        // ...\n\n        // Notify observers that we did something.\n        $this->notify('something');\n    }\n\n    public function doSomethingBad()\n    {\n        foreach ($this->observers as $observer) {\n            $observer->reportError(42, 'Something bad happened', $this);\n        }\n    }\n\n    protected function notify($argument)\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update($argument);\n        }\n    }\n\n    // Other methods.\n}\n\nclass Observer\n{\n    public function update($argument)\n    {\n        // Do something.\n    }\n\n    public function reportError($errorCode, $errorMessage, Subject $subject)\n    {\n        // Do something\n    }\n\n    // Other methods.\n}\n```\n\n[Example 8.12](#test-doubles-mock-objects-examples-subjecttest-php) shows how to use a mock object to test the interaction between `Subject` and `Observer` objects.\n\nWe first use the `createMock()` method that is provided by the `PHPUnit\\Framework\\TestCase` class to set up a mock object for the `Observer`.\n\nBecause we are interested in verifying that a method is called, and which arguments it is called with, we introduce the `expects()` and `with()` methods to specify how this interaction should look.\n\nExample 8.12 Testing that a method gets called once and with a specified argument\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SubjectTest extends TestCase\n{\n    public function testObserversAreUpdated(): void\n    {\n        // Create a mock for the Observer class,\n        // only mock the update() method.\n        $observer = $this->createMock(Observer::class);\n\n        // Set up the expectation for the update() method\n        // to be called only once and with the string 'something'\n        // as its parameter.\n        $observer->expects($this->once())\n                 ->method('update')\n                 ->with($this->equalTo('something'));\n\n        // Create a Subject object and attach the mocked\n        // Observer object to it.\n        $subject = new Subject('My subject');\n        $subject->attach($observer);\n\n        // Call the doSomething() method on the $subject object\n        // which we expect to call the mocked Observer object's\n        // update() method with the string 'something'.\n        $subject->doSomething();\n    }\n}\n```\n\nThe `with()` method can take any number of arguments, corresponding to the number of arguments to the method being mocked. You can specify more advanced constraints on the method’s arguments than a simple match.\n\nExample 8.13 Testing that a method gets called with a number of arguments constrained in different ways\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SubjectTest extends TestCase\n{\n    public function testErrorReported(): void\n    {\n        // Create a mock for the Observer class, mocking the\n        // reportError() method\n        $observer = $this->createMock(Observer::class);\n\n        $observer->expects($this->once())\n                 ->method('reportError')\n                 ->with(\n                       $this->greaterThan(0),\n                       $this->stringContains('Something'),\n                       $this->anything()\n                   );\n\n        $subject = new Subject('My subject');\n        $subject->attach($observer);\n\n        // The doSomethingBad() method should report an error to the observer\n        // via the reportError() method\n        $subject->doSomethingBad();\n    }\n}\n```\n\nThe `withConsecutive()` method can take any number of arrays of arguments, depending on the calls you want to test against. Each array is a list of constraints corresponding to the arguments of the method being mocked, like in `with()`.\n\nExample 8.14 Testing that a method gets called two times with specific arguments.\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FooTest extends TestCase\n{\n    public function testFunctionCalledTwoTimesWithSpecificArguments(): void\n    {\n        $mock = $this->getMockBuilder(stdClass::class)\n                     ->setMethods(['set'])\n                     ->getMock();\n\n        $mock->expects($this->exactly(2))\n             ->method('set')\n             ->withConsecutive(\n                 [$this->equalTo('foo'), $this->greaterThan(0)],\n                 [$this->equalTo('bar'), $this->greaterThan(0)]\n             );\n\n        $mock->set('foo', 21);\n        $mock->set('bar', 48);\n    }\n}\n```\n\nThe `callback()` constraint can be used for more complex argument verification. This constraint takes a PHP callback as its only argument. The PHP callback will receive the argument to be verified as its only argument and should return `true` if the argument passes verification and `false` otherwise.\n\nExample 8.15 More complex argument verification\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class SubjectTest extends TestCase\n{\n    public function testErrorReported(): void\n    {\n        // Create a mock for the Observer class, mocking the\n        // reportError() method\n        $observer = $this->createMock(Observer::class);\n\n        $observer->expects($this->once())\n                 ->method('reportError')\n                 ->with(\n                     $this->greaterThan(0),\n                     $this->stringContains('Something'),\n                     $this->callback(function($subject)\n                     {\n                         return is_callable([$subject, 'getName']) &&\n                                $subject->getName() == 'My subject';\n                     }\n                 ));\n\n        $subject = new Subject('My subject');\n        $subject->attach($observer);\n\n        // The doSomethingBad() method should report an error to the observer\n        // via the reportError() method\n        $subject->doSomethingBad();\n    }\n}\n```\n\nExample 8.16 Testing that a method gets called once and with the identical object as was passed\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FooTest extends TestCase\n{\n    public function testIdenticalObjectPassed(): void\n    {\n        $expectedObject = new stdClass;\n\n        $mock = $this->getMockBuilder(stdClass::class)\n                     ->setMethods(['foo'])\n                     ->getMock();\n\n        $mock->expects($this->once())\n             ->method('foo')\n             ->with($this->identicalTo($expectedObject));\n\n        $mock->foo($expectedObject);\n    }\n}\n```\n\nExample 8.17 Create a mock object with cloning parameters enabled\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class FooTest extends TestCase\n{\n    public function testIdenticalObjectPassed(): void\n    {\n        $cloneArguments = true;\n\n        $mock = $this->getMockBuilder(stdClass::class)\n                     ->enableArgumentCloning()\n                     ->getMock();\n\n        // now your mock clones parameters so the identicalTo constraint\n        // will fail.\n    }\n}\n```\n\n[Constraints](assertions#appendixes-assertions-assertthat-tables-constraints) shows the constraints that can be applied to method arguments and [Table 8.1](#test-doubles-mock-objects-tables-matchers) shows the matchers that are available to specify the number of invocations.\n\n| Matcher                                                                         | Meaning                                                                                                |\n|---------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| `PHPUnit\\Framework\\MockObject\\Matcher\\AnyInvokedCount`` ``any()`                | Returns a matcher that matches when the method it is evaluated for is executed zero or more times.     |\n| `PHPUnit\\Framework\\MockObject\\Matcher\\InvokedCount`` ``never()`                 | Returns a matcher that matches when the method it is evaluated for is never executed.                  |\n| `PHPUnit\\Framework\\MockObject\\Matcher\\InvokedAtLeastOnce`` ``atLeastOnce()`     | Returns a matcher that matches when the method it is evaluated for is executed at least once.          |\n| `PHPUnit\\Framework\\MockObject\\Matcher\\InvokedCount`` ``once()`                  | Returns a matcher that matches when the method it is evaluated for is executed exactly once.           |\n| `PHPUnit\\Framework\\MockObject\\Matcher\\InvokedCount`` ``exactly(int`` ``$count)` | Returns a matcher that matches when the method it is evaluated for is executed exactly `$count` times. |\n| `PHPUnit\\Framework\\MockObject\\Matcher\\InvokedAtIndex`` ``at(int`` ``$index)`    | Returns a matcher that matches when the method it is evaluated for is invoked at the given `$index`.   |\n\nTable 8.1 Matchers {#test-doubles-mock-objects-tables-matchers}\n\nNote\n\nThe `$index` parameter for the `at()` matcher refers to the index, starting at zero, in *all method invocations* for a given mock object. Exercise caution when using this matcher as it can lead to brittle tests which are too closely tied to specific implementation details.\n\nAs mentioned in the beginning, when the defaults used by the `createStub()` and `createMock()` methods to generate the test double do not match your needs then you can use the `getMockBuilder($type)` method to customize the test double generation using a fluent interface. Here is a list of methods provided by the Mock Builder:\n\n- `setMethods(array`` ``$methods)` can be called on the Mock Builder object to specify the methods that are to be replaced with a configurable test double. The behavior of the other methods is not changed. If you call `setMethods(null)`, then no methods will be replaced.\n- `setMethodsExcept(array`` ``$methods)` can be called on the Mock Builder object to specify the methods that will not be replaced with a configurable test double while replacing all other public methods. This works inverse to `setMethods()`.\n- `setConstructorArgs(array`` ``$args)` can be called to provide a parameter array that is passed to the original class’ constructor (which is not replaced with a dummy implementation by default).\n- `setMockClassName($name)` can be used to specify a class name for the generated test double class.\n- `disableOriginalConstructor()` can be used to disable the call to the original class’ constructor.\n- `disableOriginalClone()` can be used to disable the call to the original class’ clone constructor.\n- `disableAutoload()` can be used to disable `__autoload()` during the generation of the test double class.\n\n## Mocking Traits and Abstract Classes\n\nThe `getMockForTrait()` method returns a mock object that uses a specified trait. All abstract methods of the given trait are mocked. This allows for testing the concrete methods of a trait.\n\nExample 8.18 Testing the concrete methods of a trait\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\ntrait AbstractTrait\n{\n    public function concreteMethod()\n    {\n        return $this->abstractMethod();\n    }\n\n    public abstract function abstractMethod();\n}\n\nfinal class TraitClassTest extends TestCase\n{\n    public function testConcreteMethod(): void\n    {\n        $mock = $this->getMockForTrait(AbstractTrait::class);\n\n        $mock->expects($this->any())\n             ->method('abstractMethod')\n             ->will($this->returnValue(true));\n\n        $this->assertTrue($mock->concreteMethod());\n    }\n}\n```\n\nThe `getMockForAbstractClass()` method returns a mock object for an abstract class. All abstract methods of the given abstract class are mocked. This allows for testing the concrete methods of an abstract class.\n\nExample 8.19 Testing the concrete methods of an abstract class\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nabstract class AbstractClass\n{\n    public function concreteMethod()\n    {\n        return $this->abstractMethod();\n    }\n\n    public abstract function abstractMethod();\n}\n\nfinal class AbstractClassTest extends TestCase\n{\n    public function testConcreteMethod(): void\n    {\n        $stub = $this->getMockForAbstractClass(AbstractClass::class);\n\n        $stub->expects($this->any())\n             ->method('abstractMethod')\n             ->will($this->returnValue(true));\n\n        $this->assertTrue($stub->concreteMethod());\n    }\n}\n```\n\n## Stubbing and Mocking Web Services\n\nWhen your application interacts with a web service you want to test it without actually interacting with the web service. To create stubs and mocks of web services, the `getMockFromWsdl()` can be used like `getMock()` (see above). The only difference is that `getMockFromWsdl()` returns a stub or mock based on a web service description in WSDL and `getMock()` returns a stub or mock based on a PHP class or interface.\n\n[Example 8.20](#test-doubles-stubbing-and-mocking-web-services-examples-googletest-php) shows how `getMockFromWsdl()` can be used to stub, for example, the web service described in `GoogleSearch.wsdl`.\n\nExample 8.20 Stubbing a web service\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class GoogleTest extends TestCase\n{\n    public function testSearch(): void\n    {\n        $googleSearch = $this->getMockFromWsdl(\n          'GoogleSearch.wsdl', 'GoogleSearch'\n        );\n\n        $directoryCategory = new stdClass;\n        $directoryCategory->fullViewableName = '';\n        $directoryCategory->specialEncoding = '';\n\n        $element = new stdClass;\n        $element->summary = '';\n        $element->URL = 'https://phpunit.de/';\n        $element->snippet = '...';\n        $element->title = '<b>PHPUnit</b>';\n        $element->cachedSize = '11k';\n        $element->relatedInformationPresent = true;\n        $element->hostName = 'phpunit.de';\n        $element->directoryCategory = $directoryCategory;\n        $element->directoryTitle = '';\n\n        $result = new stdClass;\n        $result->documentFiltering = false;\n        $result->searchComments = '';\n        $result->estimatedTotalResultsCount = 3.9000;\n        $result->estimateIsExact = false;\n        $result->resultElements = [$element];\n        $result->searchQuery = 'PHPUnit';\n        $result->startIndex = 1;\n        $result->endIndex = 1;\n        $result->searchTips = '';\n        $result->directoryCategories = [];\n        $result->searchTime = 0.248822;\n\n        $googleSearch->expects($this->any())\n                     ->method('doGoogleSearch')\n                     ->will($this->returnValue($result));\n\n        /**\n         * $googleSearch->doGoogleSearch() will now return a stubbed result and\n         * the web service's doGoogleSearch() method will not be invoked.\n         */\n        $this->assertEquals(\n          $result,\n          $googleSearch->doGoogleSearch(\n            '00000000000000000000000000000000',\n            'PHPUnit',\n            0,\n            1,\n            false,\n            '',\n            false,\n            '',\n            '',\n            ''\n          )\n        );\n    }\n}\n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/test-doubles.html](https://phpunit.readthedocs.io/en/9.5/test-doubles.html)"
- name: The <coverage> Element
  id: configuration#The <coverage> Element
  summary: When code coverage data is collected and processed, static code analysis is performed to improve reasoning about the covered code
  belongs_to: The XML Configuration File
  description: "## The `<coverage>` Element\n\nParent element: `<phpunit>`\n\nThe `<coverage>` element and its children can be used to configure code coverage:\n\n``` php\n            <coverage\n            cacheDirectory=\n            \"/path/to/directory\"\n            includeUncoveredFiles=\n            \"true\"\n            processUncoveredFiles=\n            \"true\"\n            pathCoverage=\n            \"false\"\n            ignoreDeprecatedCodeUnits=\n            \"true\"\n            disableCodeCoverageIgnore=\n            \"true\"\n            >\n            <!-- ... -->\n            </coverage>\n          \n```\n\n### The `cacheDirectory` Attribute\n\nPossible values: string\n\nWhen code coverage data is collected and processed, static code analysis is performed to improve reasoning about the covered code. This is an expensive operation, whose result can be cached. When the `cacheDirectory` attribute is set, static analysis results will be cached in the specified directory.\n\n### The `includeUncoveredFiles` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nWhen set to `true`, all sourcecode files that are configured to be considered for code coverage analysis will be included in the code coverage report(s). This includes sourcecode files that are not executed while the tests are running.\n\n### The `processUncoveredFiles` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nWhen set to `true`, all sourcecode files that are configured to be considered for code coverage analysis will be processed. This includes sourcecode files that are not executed while the tests are running.\n\n### The `ignoreDeprecatedCodeUnits` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether code units annotated with `@deprecated` should be ignored from code coverage.\n\n### The `pathCoverage` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nWhen set to `false`, only line coverage data will be collected, processed, and reported.\n\nWhen set to `true`, line coverage, branch coverage, and path coverage data will be collected, processed, and reported. This requires a code coverage driver that supports path coverage. Path Coverage is currently only implemented by Xdebug.\n\n### The `disableCodeCoverageIgnore` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the `@codeCoverageIgnore*` annotations should be ignored.\n\n### The `<include>` Element\n\nParent element: `<coverage>`\n\nConfigures a set of files to be included in code coverage report(s).\n\n``` php\n<include><directorysuffix=\".php\">src</directory></include>\n```\n\nThe example shown above instructs PHPUnit to include all sourcecode files with `.php` suffix in the `src` directory and its sub-directories in the code coverage report(s).\n\n### The `<exclude>` Element\n\nParent element: `<coverage>`\n\nConfigures a set of files to be excluded from code coverage report(s).\n\n``` php\n<include><directorysuffix=\".php\">src</directory></include><exclude><directorysuffix=\".php\">src/generated</directory><file>src/autoload.php</file></exclude>\n```\n\nThe example shown above instructs PHPUnit to include all sourcecode files with `.php` suffix in the `src` directory and its sub-directories in the code coverage report but exclude all files with `.php` suffix in the `src/generated` directory and its sub-directories as well as the `src/autoload.php` file from the code coverage report(s).\n\n### The `<directory>` Element\n\nParent elements: `<include>`, `<exclude>`\n\nConfigures a directory and its sub-directories for inclusion in or exclusion from code coverage report(s).\n\n#### The `prefix` Attribute\n\nPossible values: string\n\nConfigures a prefix-based filter that is applied to the names of files in the directory and its sub-directories.\n\n#### The `suffix` Attribute\n\nPossible values: string (default: `'.php'`)\n\nConfigures a suffix-based filter that is applied to the names of files in the directory and its sub-directories.\n\n#### The `phpVersion` Attribute\n\nPossible values: string\n\nConfigures a filter based on the version of the PHP runtime that is used to run the current PHPUnit process.\n\n#### The `phpVersionOperator` Attribute\n\nPossible values: `'<'`, `'lt'`, `'<='`, `'le'`, `'>'`, `'gt'`, `'>='`, `'ge'`, `'=='`, `'='`, `'eq'`, `'!='`, `'<>'`, `'ne'` (default: `'>='`)\n\nConfigures the comparison operator to be used with `version_compare()` for the filter based on the version of the PHP runtime that is used to run the current PHPUnit process.\n\n### The `<file>` Element\n\nParent elements: `<include>`, `<exclude>`\n\nConfigures a file for inclusion in or exclusion from code coverage report(s).\n\n### The `<report>` Element\n\nParent element: `<coverage>`\n\nConfigures the code coverage reports to be generated.\n\n``` php\n              <report>\n              <clover\n              outputFile=\n              \"clover.xml\"\n              />\n              <crap4j\n              outputFile=\n              \"crap4j.xml\"\n              threshold=\n              \"50\"\n              />\n              <html\n              outputDirectory=\n              \"html-coverage\"\n              lowUpperBound=\n              \"50\"\n              highLowerBound=\n              \"90\"\n              />\n              <php\n              outputFile=\n              \"coverage.php\"\n              />\n              <text\n              outputFile=\n              \"coverage.txt\"\n              showUncoveredFiles=\n              \"false\"\n              showOnlySummary=\n              \"true\"\n              />\n              <xml\n              outputDirectory=\n              \"xml-coverage\"\n              />\n              </report>\n            \n```\n\n#### The `<clover>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in Clover XML format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the Clover XML report is written.\n\n#### The `<crap4j>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in Crap4J XML format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the Crap4J XML report is written.\n\n##### The `threshold` Attribute\n\nPossible values: integer (default: `50`)\n\n#### The `<html>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in HTML format.\n\n##### The `outputDirectory` Attribute\n\nThe directory to which the HTML report is written.\n\n##### The `lowUpperBound` Attribute\n\nPossible values: integer (default: `50`)\n\nThe upper bound of what should be considered “low coverage”.\n\n##### The `highLowerBound` Attribute\n\nPossible values: integer (default: `90`)\n\nThe lower bound of what should be considered “high coverage”.\n\n#### The `<php>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in PHP format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the PHP report is written.\n\n#### The `<text>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in text format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the text report is written.\n\n##### The `showUncoveredFiles` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\n##### The `showOnlySummary` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\n#### The `<xml>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in PHPUnit XML format.\n\n##### The `outputDirectory` Attribute\n\nPossible values: string\n\nThe directory to which the PHPUnit XML report is written."
- name: The <extensions> Element
  id: configuration#The <extensions> Element
  summary: The <extensions> element and its <extension> children can be used to register test runner extensions
  belongs_to: The XML Configuration File
  description: "## The `<extensions>` Element\n\nParent element: `<phpunit>`\n\nThe `<extensions>` element and its `<extension>` children can be used to register test runner extensions.\n\n### The `<extension>` Element\n\nParent element: `<extensions>`\n\n``` php\n              <extensions>\n              <extension\n              class=\n              \"Vendor\\MyExtension\"\n              />\n              </extensions>\n            \n```\n\n#### The `<arguments>` Element\n\nParent element: `<extension>`\n\nThe `<arguments>` element can be used to configure a single `<extension>`.\n\nAccepts a list of elements of types, which are then used to configure individual extensions. The arguments are passed to the extension class’ `__constructor` method in the order they are defined in the configuration.\n\nAvailable types:\n\n- ` ``<boolean>`` `\n- ` ``<integer>`` `\n- ` ``<string>`` `\n- `<double>` (float)\n- ` ``<array>`` `\n- ` ``<object>`` `\n\n``` php\n<extensionclass=\"Vendor\\MyExtension\"><arguments><integer>1</integer><integer>2</integer><integer>3</integer><string>hello world</string><boolean>true</boolean><double>1.23</double><array><elementindex=\"0\"><string>value1</string></element><elementindex=\"1\"><string>value2</string></element></array><objectclass=\"Vendor\\MyPhpClass\"><string>constructor arg 1</string><string>constructor arg 2</string></object></arguments></extension>\n```"
- name: The <groups> Element
  id: configuration#The <groups> Element
  summary: The example shown above is equivalent to invoking the PHPUnit test runner with --group``name``--exclude-group``name
  belongs_to: The XML Configuration File
  description: |-
    ## The `<groups>` Element

    Parent element: `<phpunit>`

    The `<groups>` element and its `<include>`, `<exclude>`, and `<group>` children can be used to select groups of tests marked with the `@group` annotation (documented in [@group](annotations#appendixes-annotations-group)) that should (not) be run:

    ``` php
    <groups><include><group>name</group></include><exclude><group>name</group></exclude></groups>
    ```

    The example shown above is equivalent to invoking the PHPUnit test runner with `--group``name``--exclude-group``name`.
- name: The <listeners> Element
  id: configuration#The <listeners> Element
  summary: The <listeners> element and its <listener> children can be used to attach additional test listeners to the test execution
  belongs_to: The XML Configuration File
  description: "## The `<listeners>` Element\n\nParent element: `<phpunit>`\n\nThe `<listeners>` element and its `<listener>` children can be used to attach additional test listeners to the test execution.\n\n### The `<listener>` Element\n\nParent element: `<listeners>`\n\n``` php\n<listeners><listenerclass=\"MyListener\"file=\"/optional/path/to/MyListener.php\"><arguments><array><elementkey=\"0\"><string>Sebastian</string></element></array><integer>22</integer><string>April</string><double>19.78</double><null/><objectclass=\"stdClass\"/></arguments></listener></listeners>\n```\n\nThe XML configuration above corresponds to attaching the `$listener` object (see below) to the test execution:\n\n``` php\n              $listener\n              =\n              new\n              MyListener\n              (\n              [\n              'Sebastian'\n              ],\n              22\n              ,\n              'April'\n              ,\n              19.78\n              ,\n              null\n              ,\n              new\n              stdClass\n              );\n            \n```\n\nNote\n\nPlease note that the `PHPUnit\\Framework\\TestListener` interface is deprecated and will be removed in the future. TestRunner extensions should be used instead of test listeners."
- name: The <logging> Element
  id: configuration#The <logging> Element
  summary: The <logging> element and its children can be used to configure the logging of the test execution
  belongs_to: The XML Configuration File
  description: "## The `<logging>` Element\n\nParent element: `<phpunit>`\n\nThe `<logging>` element and its children can be used to configure the logging of the test execution.\n\n``` php\n            <logging>\n            <junit\n            outputFile=\n            \"junit.xml\"\n            />\n            <teamcity\n            outputFile=\n            \"teamcity.txt\"\n            />\n            <testdoxHtml\n            outputFile=\n            \"testdox.html\"\n            />\n            <testdoxText\n            outputFile=\n            \"testdox.txt\"\n            />\n            <testdoxXml\n            outputFile=\n            \"testdox.xml\"\n            />\n            <text\n            outputFile=\n            \"logfile.txt\"\n            />\n            </logging>\n          \n```\n\n### The `<junit>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in JUnit XML format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in JUnit XML format is written.\n\n### The `<teamcity>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TeamCity format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TeamCity format is written.\n\n### The `<testdoxHtml>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TestDox HTML format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TestDox HTML format is written.\n\n### The `<testdoxText>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TestDox text format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TestDox text format is written.\n\n### The `<testdoxXml>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TestDox XML format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TestDox XML format is written.\n\n### The `<text>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in text format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in text format is written."
- name: The <php> Element
  id: configuration#The <php> Element
  summary: The <php> element and its children can be used to configure PHP settings, constants, and global variables
  belongs_to: The XML Configuration File
  description: "## The `<php>` Element\n\nParent element: `<phpunit>`\n\nThe `<php>` element and its children can be used to configure PHP settings, constants, and global variables. It can also be used to prepend the `include_path`.\n\n### The `<includePath>` Element\n\nParent element: `<php>`\n\nThis element can be used to prepend a path to the `include_path`.\n\n### The `<ini>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a PHP configuration setting.\n\n``` php\n              <php>\n              <ini\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              ini_set\n              (\n              'foo'\n              ,\n              'bar'\n              );\n            \n```\n\n### The `<const>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a global constant.\n\n``` php\n              <php>\n              <const\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              define\n              (\n              'foo'\n              ,\n              'bar'\n              );\n            \n```\n\n### The `<var>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a global variable.\n\n``` php\n              <php>\n              <var\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $GLOBALS\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n### The `<env>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_ENV`.\n\n``` php\n              <php>\n              <env\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_ENV\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\nBy default, environment variables are not overwritten if they exist already. To force overwriting existing variables, use the `force` attribute:\n\n``` php\n              <php>\n              <env\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              force=\n              \"true\"\n              />\n              </php>\n            \n```\n\n### The `<get>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_GET`.\n\n``` php\n              <php>\n              <get\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_GET\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n### The `<post>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_POST`.\n\n``` php\n              <php>\n              <post\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_POST\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n### The `<cookie>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_COOKIE`.\n\n``` php\n              <php>\n              <cookie\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_COOKIE\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n### The `<server>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_SERVER`.\n\n``` php\n              <php>\n              <server\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_SERVER\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n### The `<files>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_FILES`.\n\n``` php\n              <php>\n              <files\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_FILES\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n### The `<request>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_REQUEST`.\n\n``` php\n              <php>\n              <request\n              name=\n              \"foo\"\n              value=\n              \"bar\"\n              />\n              </php>\n            \n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n              $_REQUEST\n              [\n              'foo'\n              ]\n              =\n              'bar'\n              ;\n            \n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/configuration.html](https://phpunit.readthedocs.io/en/9.5/configuration.html)"
- name: The <phpunit> Element
  id: configuration#The <phpunit> Element
  summary: PHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test
  belongs_to: The XML Configuration File
  description: |-
    ## The `<phpunit>` Element

    ### The `backupGlobals` Attribute

    Possible values: `true` or `false` (default: `false`)

    PHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test.

    This attribute configures this operation for all tests. This configuration can be overridden using the `@backupGlobals` annotation on the test case class and test method level.

    ### The `backupStaticAttributes` Attribute

    Possible values: `true` or `false` (default: `false`)

    PHPUnit can optionally backup all static attributes in all declared classes before each test and restore this backup after each test.

    This attribute configures this operation for all tests. This configuration can be overridden using the `@backupStaticAttributes` annotation on the test case class and test method level.

    ### The `bootstrap` Attribute

    This attribute configures the bootstrap script that is loaded before the tests are executed. This script usually only registers the autoloader callback that is used to load the code under test.

    ### The `cacheResult` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures the caching of test results. This caching is required for certain other features to work.

    ### The `cacheResultFile` Attribute

    This attribute configures the file in which the test result cache (see above) is stored.

    ### The `colors` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether colors are used in PHPUnit’s output.

    Setting this attribute to `true` is equivalent to using the `--colors=auto` CLI option.

    Setting this attribute to `false` is equivalent to using the `--colors=never` CLI option.

    ### The `columns` Attribute

    Possible values: integer or string `max` (default: `80`)

    This attribute configures the number of columns to use for progress output.

    If `max` is defined as value, the number of columns will be maximum of the current terminal.

    ### The `convertDeprecationsToExceptions` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures whether `E_DEPRECATED` and `E_USER_DEPRECATED` events triggered by the code under test are converted to an exception (and mark the test as error).

    ### The `convertErrorsToExceptions` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures whether `E_ERROR` and `E_USER_ERROR` events triggered by the code under test are converted to an exception (and mark the test as error).

    ### The `convertNoticesToExceptions` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures whether `E_STRICT`, `E_NOTICE`, and `E_USER_NOTICE` events triggered by the code under test are converted to an exception (and mark the test as error).

    ### The `convertWarningsToExceptions` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures whether `E_WARNING` and `E_USER_WARNING` events triggered by the code under test are converted to an exception (and mark the test as error).

    ### The `forceCoversAnnotation` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether a test will be marked as risky (see [Unintentionally Covered Code](risky-tests#risky-tests-unintentionally-covered-code)) when it does not have a [@covers](annotations#appendixes-annotations-covers) annotation.

    ### The `printerClass` Attribute

    Default: `PHPUnit\TextUI\ResultPrinter`

    This attribute configures the name of a class that either is `PHPUnit\TextUI\ResultPrinter` or that extends `PHPUnit\TextUI\ResultPrinter`. An object of this class is used to print progress and test results.

    ### The `printerFile` Attribute

    This attribute can be used to configure the path to the sourcecode file that declares the class configured with `printerClass` in case that class cannot be autoloaded.

    ### The `processIsolation` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether each test should be run in a separate PHP process for increased isolation.

    ### The `stopOnError` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with status “error”.

    ### The `stopOnFailure` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with status “failure”.

    ### The `stopOnIncomplete` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with status “incomplete”.

    ### The `stopOnRisky` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with status “risky”.

    ### The `stopOnSkipped` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with status “skipped”.

    ### The `stopOnWarning` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with status “warning”.

    ### The `stopOnDefect` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the test suite execution should be stopped after the first test finished with a status “error”, “failure”, “risky” or “warning”.

    ### The `failOnRisky` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the PHPUnit test runner should exit with a shell exit code that indicates failure when all tests are successful but there are tests that were marked as risky.

    ### The `failOnWarning` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the PHPUnit test runner should exit with a shell exit code that indicates failure when all tests are successful but there are tests that had warnings.

    ### The `beStrictAboutChangesToGlobalState` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether PHPUnit should mark a test as risky when global state is manipulated by the code under test (or the test code).

    ### The `beStrictAboutOutputDuringTests` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether PHPUnit should mark a test as risky when the code under test (or the test code) prints output.

    ### The `beStrictAboutResourceUsageDuringSmallTests` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether PHPUnit should mark a test that is annotated with `@small` as risky when it invokes a PHP built-in function or method that operates on `resource` variables.

    ### The `beStrictAboutTestsThatDoNotTestAnything` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures whether PHPUnit should mark a test as risky when no assertions are performed (expectations are also considered).

    ### The `beStrictAboutTodoAnnotatedTests` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether PHPUnit should mark a test as risky when it is annotated with `@todo`.

    ### The `beStrictAboutCoversAnnotation` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether PHPUnit should mark a test as risky when it executes code that is not specified using `@covers` or `@uses`.

    ### The `enforceTimeLimit` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether time limits should be enforced.

    ### The `defaultTimeLimit` Attribute

    Possible values: integer (default: `0`)

    This attribute configures the default time limit (in seconds).

    ### The `timeoutForSmallTests` Attribute

    Possible values: integer (default: `1`)

    This attribute configures the time limit for tests annotated with `@small` (in seconds).

    ### The `timeoutForMediumTests` Attribute

    Possible values: integer (default: `10`)

    This attribute configures the time limit for tests annotated with `@medium` (in seconds).

    ### The `timeoutForLargeTests` Attribute

    Possible values: integer (default: `60`)

    This attribute configures the time limit for tests annotated with `@large` (in seconds).

    ### The `testSuiteLoaderClass` Attribute

    Default: `PHPUnit\Runner\StandardTestSuiteLoader`

    This attribute configures the name of a class that implements the `PHPUnit\Runner\TestSuiteLoader` interface. An object of this class is used to load the test suite.

    ### The `testSuiteLoaderFile` Attribute

    This attribute can be used to configure the path to the sourcecode file that declares the class configured with `testSuiteLoaderClass` in case that class cannot be autoloaded.

    ### The `defaultTestSuite` Attribute

    This attribute configures the name of the default test suite.

    ### The `verbose` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether more verbose output should be printed.

    ### The `stderr` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether PHPUnit should print its output to `stderr` instead of `stdout`.

    ### The `reverseDefectList` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether tests that are not successful should be printed in reverse order.

    ### The `registerMockObjectsFromTestArgumentsRecursively` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether arrays and object graphs that are passed from one test to another using the `@depends` annotation should be recursively scanned for mock objects.

    ### The `extensionsDirectory` Attribute

    When `phpunit.phar` is used then this attribute may be used to configure a directory from which all `*.phar` files will be loaded as extensions for the PHPUnit test runner.

    ### The `executionOrder` Attribute

    Possible values: `default`, `defects`, `depends`, `no-depends`, `duration`, `random`, `reverse`, `size`

    Using multiple values is possible. These need to be separated by `,`.

    This attribute configures the order in which tests are executed.

    ### The `resolveDependencies` Attribute

    Possible values: `true` or `false` (default: `true`)

    This attribute configures whether dependencies between tests (expressed using the `@depends` annotation) should be resolved.

    ### The `testdox` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether the output should be printed in TestDox format.

    ### The `noInteraction` Attribute

    Possible values: `true` or `false` (default: `false`)

    This attribute configures whether progress should be animated when TestDox format is used, for instance.
- name: The <testdoxGroups> Element
  id: configuration#The <testdoxGroups> Element
  summary: null
  belongs_to: The XML Configuration File
  description: |-
    ## The `<testdoxGroups>` Element

    Parent element: `<phpunit>`

    … TBD …
- name: The <testsuites> Element
  id: configuration#The <testsuites> Element
  summary: This element is the root for one or more <testsuite> elements that are used to configure the tests that are to be executed
  belongs_to: The XML Configuration File
  description: |-
    ## The `<testsuites>` Element

    Parent element: `<phpunit>`

    This element is the root for one or more `<testsuite>` elements that are used to configure the tests that are to be executed.

    ### The `<testsuite>` Element

    Parent element: `<testsuites>`

    A `<testsuite>` element must have a `name` attribute and may have one or more `<directory>` and/or `<file>` child elements that configure directories and/or files, respectively, that should be searched for tests.

    ``` php
    <testsuites><testsuitename="unit"><directory>tests/unit</directory></testsuite><testsuitename="integration"><directory>tests/integration</directory></testsuite><testsuitename="edge-to-edge"><directory>tests/edge-to-edge</directory></testsuite></testsuites>
    ```

    Using the `phpVersion` and `phpVersionOperator` attributes, a required PHP version can be specified:

    ``` php
    <testsuites><testsuitename="unit"><directoryphpVersion="8.0.0"phpVersionOperator=">=">tests/unit</directory></testsuite></testsuites>
    ```

    In the example above, the tests from the `tests/unit` directory are only added to the test suite if the PHP version is at least 8.0.0. The `phpVersionOperator` attribute is optional and defaults to `>=`.
- name: The Command-Line Test Runner
  id: textui
  summary: The PHPUnit command-line test runner can be invoked through the phpunit command
  description: "# The Command-Line Test Runner\n\nThe PHPUnit command-line test runner can be invoked through the `phpunit` command. The following code shows how to run tests with the PHPUnit command-line test runner:\n\n``` php\n$ phpunit ArrayTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n..\n\nTime: 0 seconds\n\nOK (2 tests, 2 assertions)\n```\n\nWhen invoked as shown above, the PHPUnit command-line test runner will look for a `ArrayTest.php` sourcefile in the current working directory, load it, and expect to find a `ArrayTest` test case class. It will then execute the tests of that class.\n\nFor each test run, the PHPUnit command-line tool prints one character to indicate progress:\n\n`.`\n\n> Printed when the test succeeds.\n\n`F`\n\n> Printed when an assertion fails while running the test method.\n\n`E`\n\n> Printed when an error occurs while running the test method.\n\n`R`\n\n> Printed when the test has been marked as risky (see [Risky Tests](risky-tests#risky-tests)).\n\n`S`\n\n> Printed when the test has been skipped (see [Incomplete and Skipped Tests](incomplete-and-skipped-tests#incomplete-and-skipped-tests)).\n\n`I`\n\n> Printed when the test is marked as being incomplete or not yet implemented (see [Incomplete and Skipped Tests](incomplete-and-skipped-tests#incomplete-and-skipped-tests)).\n\nPHPUnit distinguishes between *failures* and *errors*. A failure is a violated PHPUnit assertion such as a failing `assertSame()` call. An error is an unexpected exception or a PHP error. Sometimes this distinction proves useful since errors tend to be easier to fix than failures. If you have a big list of problems, it is best to tackle the errors first and see if you have any failures left when they are all fixed.\n\n## Command-Line Options\n\nLet’s take a look at the command-line test runner’s options in the following code:\n\n``` php\n$ phpunit --help\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nUsage:\n  phpunit [options] UnitTest.php\n  phpunit [options] <directory>\n\nCode Coverage Options:\n  --coverage-clover <file>    Generate code coverage report in Clover XML format\n  --coverage-crap4j <file>    Generate code coverage report in Crap4J XML format\n  --coverage-html <dir>       Generate code coverage report in HTML format\n  --coverage-php <file>       Export PHP_CodeCoverage object to file\n  --coverage-text <file>      Generate code coverage report in text format [default: standard output]\n  --coverage-xml <dir>        Generate code coverage report in PHPUnit XML format\n  --coverage-cache <dir>      Cache static analysis results\n  --warm-coverage-cache       Warm static analysis cache\n  --coverage-filter <dir>     Include <dir> in code coverage analysis\n  --path-coverage             Perform path coverage analysis\n  --disable-coverage-ignore   Disable annotations for ignoring code coverage\n  --no-coverage               Ignore code coverage configuration\n\nLogging Options:\n  --log-junit <file>          Log test execution in JUnit XML format to file\n  --log-teamcity <file>       Log test execution in TeamCity format to file\n  --testdox-html <file>       Write agile documentation in HTML format to file\n  --testdox-text <file>       Write agile documentation in Text format to file\n  --testdox-xml <file>        Write agile documentation in XML format to file\n  --reverse-list              Print defects in reverse order\n  --no-logging                Ignore logging configuration\n\nTest Selection Options:\n  --filter <pattern>          Filter which tests to run\n  --testsuite <name>          Filter which testsuite to run\n  --group <name>              Only runs tests from the specified group(s)\n  --exclude-group <name>      Exclude tests from the specified group(s)\n  --list-groups               List available test groups\n  --list-suites               List available test suites\n  --list-tests                List available tests\n  --list-tests-xml <file>     List available tests in XML format\n  --test-suffix <suffixes>    Only search for test in files with specified suffix(es). Default: Test.php,.phpt\n\nTest Execution Options:\n  --dont-report-useless-tests Do not report tests that do not test anything\n  --strict-coverage           Be strict about @covers annotation usage\n  --strict-global-state       Be strict about changes to global state\n  --disallow-test-output      Be strict about output during tests\n  --disallow-resource-usage   Be strict about resource usage during small tests\n  --enforce-time-limit        Enforce time limit based on test size\n  --default-time-limit <sec>  Timeout in seconds for tests without @small, @medium or @large\n  --disallow-todo-tests       Disallow @todo-annotated tests\n\n  --process-isolation         Run each test in a separate PHP process\n  --globals-backup            Backup and restore $GLOBALS for each test\n  --static-backup             Backup and restore static attributes for each test\n\n  --colors <flag>             Use colors in output (\"never\", \"auto\" or \"always\")\n  --columns <n>               Number of columns to use for progress output\n  --columns max               Use maximum number of columns for progress output\n  --stderr                    Write to STDERR instead of STDOUT\n  --stop-on-defect            Stop execution upon first not-passed test\n  --stop-on-error             Stop execution upon first error\n  --stop-on-failure           Stop execution upon first error or failure\n  --stop-on-warning           Stop execution upon first warning\n  --stop-on-risky             Stop execution upon first risky test\n  --stop-on-skipped           Stop execution upon first skipped test\n  --stop-on-incomplete        Stop execution upon first incomplete test\n  --fail-on-incomplete        Treat incomplete tests as failures\n  --fail-on-risky             Treat risky tests as failures\n  --fail-on-skipped           Treat skipped tests as failures\n  --fail-on-warning           Treat tests with warnings as failures\n  -v|--verbose                Output more verbose information\n  --debug                     Display debugging information\n\n  --repeat <times>            Runs the test(s) repeatedly\n  --teamcity                  Report test execution progress in TeamCity format\n  --testdox                   Report test execution progress in TestDox format\n  --testdox-group             Only include tests from the specified group(s)\n  --testdox-exclude-group     Exclude tests from the specified group(s)\n  --no-interaction            Disable TestDox progress animation\n  --printer <printer>         TestListener implementation to use\n\n  --order-by <order>          Run tests in order: default|defects|duration|no-depends|random|reverse|size\n  --random-order-seed <N>     Use a specific random seed <N> for random order\n  --cache-result              Write test results to cache file\n  --do-not-cache-result       Do not write test results to cache file\n\nConfiguration Options:\n  --prepend <file>            A PHP script that is included as early as possible\n  --bootstrap <file>          A PHP script that is included before the tests run\n  -c|--configuration <file>   Read configuration from XML file\n  --no-configuration          Ignore default configuration file (phpunit.xml)\n  --extensions <extensions>   A comma separated list of PHPUnit extensions to load\n  --no-extensions             Do not load PHPUnit extensions\n  --include-path <path(s)>    Prepend PHP's include_path with given path(s)\n  -d <key[=value]>            Sets a php.ini value\n  --cache-result-file <file>  Specify result cache path and filename\n  --generate-configuration    Generate configuration file with suggested settings\n  --migrate-configuration     Migrate configuration file to current format\n\nMiscellaneous Options:\n  -h|--help                   Prints this usage information\n  --version                   Prints the version and exits\n  --atleast-version <min>     Checks that version is greater than min and exits\n  --check-version             Check whether PHPUnit is the latest version\n```\n\n`phpunit`` ``UnitTest`\n\n> Runs the tests that are provided by the class `UnitTest`. This class is expected to be declared in the `UnitTest.php` sourcefile.\n>\n> `UnitTest` must be either a class that inherits from `PHPUnit\\Framework\\TestCase` or a class that provides a `public`` ``static`` ``suite()` method which returns a `PHPUnit\\Framework\\Test` object, for example an instance of the `PHPUnit\\Framework\\TestSuite` class.\n\n`phpunit`` ``UnitTest`` ``UnitTest.php`\n\n> Runs the tests that are provided by the class `UnitTest`. This class is expected to be declared in the specified sourcefile.\n\n`--coverage-clover`\n\n> Generates a logfile in XML format with the code coverage information for the tests run. See [Code Coverage Analysis](code-coverage-analysis#code-coverage-analysis) for more details.\n\n`--coverage-crap4j`\n\n> Generates a code coverage report in Crap4j format. See [Code Coverage Analysis](code-coverage-analysis#code-coverage-analysis) for more details.\n\n`--coverage-html`\n\n> Generates a code coverage report in HTML format. See [Code Coverage Analysis](code-coverage-analysis#code-coverage-analysis) for more details.\n\n`--coverage-php`\n\n> Generates a serialized PHP_CodeCoverage object with the code coverage information.\n\n`--coverage-text`\n\n> Generates a logfile or command-line output in human readable format with the code coverage information for the tests run.\n\n`--log-junit`\n\n> Generates a logfile in JUnit XML format for the tests run.\n\n`--testdox-html` and `--testdox-text`\n\n> Generates agile documentation in HTML or plain text format for the tests that are run (see [TestDox](#textui-testdox)).\n\n`--filter`\n\n> Only runs tests whose name matches the given regular expression pattern. If the pattern is not enclosed in delimiters, PHPUnit will enclose the pattern in `/` delimiters.\n>\n> The test names to match will be in one of the following formats:\n>\n> `TestNamespace\\TestCaseClass::testMethod`\n>\n> > The default test name format is the equivalent of using the `__METHOD__` magic constant inside the test method.\n>\n> `TestNamespace\\TestCaseClass::testMethod`` ``with`` ``data`` ``set`` ``#0`\n>\n> > When a test has a data provider, each iteration of the data gets the current index appended to the end of the default test name.\n>\n> `TestNamespace\\TestCaseClass::testMethod`` ``with`` ``data`` ``set`` ``\"my`` ``named`` ``data\"`\n>\n> > When a test has a data provider that uses named sets, each iteration of the data gets the current name appended to the end of the default test name. See [Example 3.1](#textui-examples-testcaseclass-php) for an example of named data sets.\n> >\n> > Example 3.1 Named data sets\n> >\n> > ``` php\n> > <?php\n> > use PHPUnit\\Framework\\TestCase;\n> >\n> > namespace TestNamespace;\n> >\n> > class TestCaseClass extends TestCase\n> > {\n> >     /**\n> >      * @dataProvider provider\n> >      */\n> >     public function testMethod($data)\n> >     {\n> >         $this->assertTrue($data);\n> >     }\n> >\n> >     public function provider()\n> >     {\n> >         return [\n> >             'my named data' => [true],\n> >             'my data'       => [true]\n> >         ];\n> >     }\n> > }\n> > ```\n>\n> `/path/to/my/test.phpt`\n>\n> > The test name for a PHPT test is the filesystem path.\n>\n> See [Example 3.2](#textui-examples-filter-patterns) for examples of valid filter patterns.\n>\n> Example 3.2 Filter pattern examples\n>\n> ``` php\n> --filter 'TestNamespace\\\\TestCaseClass::testMethod'\n> --filter 'TestNamespace\\\\TestCaseClass'\n> --filter TestNamespace\n> --filter TestCaseClase\n> --filter testMethod\n> --filter '/::testMethod .*\"my named data\"/'\n> --filter '/::testMethod .*#5$/'\n> --filter '/::testMethod .*#(5|6|7)$/'\n> ```\n>\n> See [Example 3.3](#textui-examples-filter-shortcuts) for some additional shortcuts that are available for matching data providers.\n>\n> Example 3.3 Filter shortcuts\n>\n> ``` php\n> --filter 'testMethod#2'\n> --filter 'testMethod#2-4'\n> --filter '#2'\n> --filter '#2-4'\n> --filter 'testMethod@my named data'\n> --filter 'testMethod@my.*data'\n> --filter '@my named data'\n> --filter '@my.*data'\n> ```\n\n`--testsuite`\n\n> Only runs the test suite whose name matches the given pattern.\n\n`--group`\n\n> Only runs tests from the specified group(s). A test can be tagged as belonging to a group using the `@group` annotation.\n>\n> The `@author` and `@ticket` annotations are aliases for `@group` allowing to filter tests based on their authors or their ticket identifiers, respectively.\n\n`--exclude-group`\n\n> Exclude tests from the specified group(s). A test can be tagged as belonging to a group using the `@group` annotation.\n\n`--list-groups`\n\n> List available test groups.\n\n`--test-suffix`\n\n> Only search for test files with specified suffix(es).\n\n`--dont-report-useless-tests`\n\n> Do not report tests that do not test anything. See [Risky Tests](risky-tests#risky-tests) for details.\n\n`--strict-coverage`\n\n> Be strict about unintentionally covered code. See [Risky Tests](risky-tests#risky-tests) for details.\n\n`--strict-global-state`\n\n> Be strict about global state manipulation. See [Risky Tests](risky-tests#risky-tests) for details.\n\n`--disallow-test-output`\n\n> Be strict about output during tests. See [Risky Tests](risky-tests#risky-tests) for details.\n\n`--disallow-todo-tests`\n\n> Does not execute tests which have the `@todo` annotation in its docblock.\n\n`--enforce-time-limit`\n\n> Enforce time limit based on test size. See [Risky Tests](risky-tests#risky-tests) for details.\n\n`--process-isolation`\n\n> Run each test in a separate PHP process.\n\n`--no-globals-backup`\n\n> Do not backup and restore $GLOBALS. See [Global State](fixtures#fixtures-global-state) for more details.\n\n`--static-backup`\n\n> Backup and restore static attributes of user-defined classes. See [Global State](fixtures#fixtures-global-state) for more details.\n\n`--colors`\n\n> Use colors in output. On Windows, use [ANSICON](https://github.com/adoxa/ansicon) or [ConEmu](https://github.com/Maximus5/ConEmu).\n>\n> There are three possible values for this option:\n>\n> - `never`: never displays colors in the output. This is the default value when `--colors` option is not used.\n> - `auto`: displays colors in the output unless the current terminal doesn’t supports colors, or if the output is piped to a command or redirected to a file.\n> - `always`: always displays colors in the output even when the current terminal doesn’t supports colors, or when the output is piped to a command or redirected to a file.\n>\n> When `--colors` is used without any value, `auto` is the chosen value.\n\n`--columns`\n\n> Defines the number of columns to use for progress output. If `max` is defined as value, the number of columns will be maximum of the current terminal.\n\n`--stderr`\n\n> Optionally print to `STDERR` instead of `STDOUT`.\n\n`--stop-on-error`\n\n> Stop execution upon first error.\n\n`--stop-on-failure`\n\n> Stop execution upon first error or failure.\n\n`--stop-on-risky`\n\n> Stop execution upon first risky test.\n\n`--stop-on-skipped`\n\n> Stop execution upon first skipped test.\n\n`--stop-on-incomplete`\n\n> Stop execution upon first incomplete test.\n\n`--verbose`\n\n> Output more verbose information, for instance the names of tests that were incomplete or have been skipped.\n\n`--debug`\n\n> Output debug information such as the name of a test when its execution starts.\n\n`--loader`\n\n> Specifies the `PHPUnit\\Runner\\TestSuiteLoader` implementation to use.\n>\n> The standard test suite loader will look for the sourcefile in the current working directory and in each directory that is specified in PHP’s `include_path` configuration directive. A class name such as `Project_Package_Class` is mapped to the source filename `Project/Package/Class.php`.\n\n`--repeat`\n\n> Repeatedly runs the test(s) the specified number of times.\n\n`--testdox`\n\n> Reports the test progress in TestDox format (see [TestDox](#textui-testdox)).\n\n`--printer`\n\n> Specifies the result printer to use. The printer class must extend `PHPUnit\\Util\\Printer` and implement the `PHPUnit\\Framework\\TestListener` interface.\n\n`--bootstrap`\n\n> A “bootstrap” PHP file that is run before the tests.\n\n`--configuration`, `-c`\n\n> Read configuration from XML file. See [The XML Configuration File](configuration#appendixes-configuration) for more details.\n>\n> If `phpunit.xml` or `phpunit.xml.dist` (in that order) exist in the current working directory and `--configuration` is *not* used, the configuration will be automatically read from that file.\n>\n> If a directory is specified and if `phpunit.xml` or `phpunit.xml.dist` (in that order) exists in this directory, the configuration will be automatically read from that file.\n\n`--no-configuration`\n\n> Ignore `phpunit.xml` and `phpunit.xml.dist` from the current working directory.\n\n`--include-path`\n\n> Prepend PHP’s `include_path` with given path(s).\n\n`-d`\n\n> Sets the value of the given PHP configuration option.\n\nNote\n\nPlease note that options can be put after the argument(s).\n\n## TestDox\n\nPHPUnit’s TestDox functionality looks at a test class and all the test method names and converts them from camel case (or snake_case) PHP names to sentences: `testBalanceIsInitiallyZero()` (or `test_balance_is_initially_zero()` becomes “Balance is initially zero”. If there are several test methods whose names only differ in a suffix of one or more digits, such as `testBalanceCannotBecomeNegative()` and `testBalanceCannotBecomeNegative2()`, the sentence “Balance cannot become negative” will appear only once, assuming that all of these tests succeed.\n\nLet us take a look at the agile documentation generated for a `BankAccount` class:\n\n``` php\n$ phpunit --testdox BankAccountTest.php\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nBankAccount\n ✔ Balance is initially zero\n ✔ Balance cannot become negative\n```\n\nAlternatively, the agile documentation can be generated in HTML or plain text format and written to a file using the `--testdox-html` and `--testdox-text` arguments.\n\nAgile Documentation can be used to document the assumptions you make about the external packages that you use in your project. When you use an external package, you are exposed to the risks that the package will not behave as you expect, and that future versions of the package will change in subtle ways that will break your code, without you knowing it. You can address these risks by writing a test every time you make an assumption. If your test succeeds, your assumption is valid. If you document all your assumptions with tests, future releases of the external package will be no cause for concern: if the tests succeed, your system should continue working.\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/textui.html](https://phpunit.readthedocs.io/en/9.5/textui.html)"
- name: The XML Configuration File
  id: configuration
  summary: PHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test
  description: "# The XML Configuration File\n\n## The `<phpunit>` Element\n\n### The `backupGlobals` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nPHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test.\n\nThis attribute configures this operation for all tests. This configuration can be overridden using the `@backupGlobals` annotation on the test case class and test method level.\n\n### The `backupStaticAttributes` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nPHPUnit can optionally backup all static attributes in all declared classes before each test and restore this backup after each test.\n\nThis attribute configures this operation for all tests. This configuration can be overridden using the `@backupStaticAttributes` annotation on the test case class and test method level.\n\n### The `bootstrap` Attribute\n\nThis attribute configures the bootstrap script that is loaded before the tests are executed. This script usually only registers the autoloader callback that is used to load the code under test.\n\n### The `cacheResult` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures the caching of test results. This caching is required for certain other features to work.\n\n### The `cacheResultFile` Attribute\n\nThis attribute configures the file in which the test result cache (see above) is stored.\n\n### The `colors` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether colors are used in PHPUnit’s output.\n\nSetting this attribute to `true` is equivalent to using the `--colors=auto` CLI option.\n\nSetting this attribute to `false` is equivalent to using the `--colors=never` CLI option.\n\n### The `columns` Attribute\n\nPossible values: integer or string `max` (default: `80`)\n\nThis attribute configures the number of columns to use for progress output.\n\nIf `max` is defined as value, the number of columns will be maximum of the current terminal.\n\n### The `convertDeprecationsToExceptions` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures whether `E_DEPRECATED` and `E_USER_DEPRECATED` events triggered by the code under test are converted to an exception (and mark the test as error).\n\n### The `convertErrorsToExceptions` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures whether `E_ERROR` and `E_USER_ERROR` events triggered by the code under test are converted to an exception (and mark the test as error).\n\n### The `convertNoticesToExceptions` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures whether `E_STRICT`, `E_NOTICE`, and `E_USER_NOTICE` events triggered by the code under test are converted to an exception (and mark the test as error).\n\n### The `convertWarningsToExceptions` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures whether `E_WARNING` and `E_USER_WARNING` events triggered by the code under test are converted to an exception (and mark the test as error).\n\n### The `forceCoversAnnotation` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether a test will be marked as risky (see [Unintentionally Covered Code](risky-tests#risky-tests-unintentionally-covered-code)) when it does not have a [@covers](annotations#appendixes-annotations-covers) annotation.\n\n### The `printerClass` Attribute\n\nDefault: `PHPUnit\\TextUI\\ResultPrinter`\n\nThis attribute configures the name of a class that either is `PHPUnit\\TextUI\\ResultPrinter` or that extends `PHPUnit\\TextUI\\ResultPrinter`. An object of this class is used to print progress and test results.\n\n### The `printerFile` Attribute\n\nThis attribute can be used to configure the path to the sourcecode file that declares the class configured with `printerClass` in case that class cannot be autoloaded.\n\n### The `processIsolation` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether each test should be run in a separate PHP process for increased isolation.\n\n### The `stopOnError` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with status “error”.\n\n### The `stopOnFailure` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with status “failure”.\n\n### The `stopOnIncomplete` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with status “incomplete”.\n\n### The `stopOnRisky` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with status “risky”.\n\n### The `stopOnSkipped` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with status “skipped”.\n\n### The `stopOnWarning` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with status “warning”.\n\n### The `stopOnDefect` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the test suite execution should be stopped after the first test finished with a status “error”, “failure”, “risky” or “warning”.\n\n### The `failOnRisky` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the PHPUnit test runner should exit with a shell exit code that indicates failure when all tests are successful but there are tests that were marked as risky.\n\n### The `failOnWarning` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the PHPUnit test runner should exit with a shell exit code that indicates failure when all tests are successful but there are tests that had warnings.\n\n### The `beStrictAboutChangesToGlobalState` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether PHPUnit should mark a test as risky when global state is manipulated by the code under test (or the test code).\n\n### The `beStrictAboutOutputDuringTests` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether PHPUnit should mark a test as risky when the code under test (or the test code) prints output.\n\n### The `beStrictAboutResourceUsageDuringSmallTests` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether PHPUnit should mark a test that is annotated with `@small` as risky when it invokes a PHP built-in function or method that operates on `resource` variables.\n\n### The `beStrictAboutTestsThatDoNotTestAnything` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures whether PHPUnit should mark a test as risky when no assertions are performed (expectations are also considered).\n\n### The `beStrictAboutTodoAnnotatedTests` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether PHPUnit should mark a test as risky when it is annotated with `@todo`.\n\n### The `beStrictAboutCoversAnnotation` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether PHPUnit should mark a test as risky when it executes code that is not specified using `@covers` or `@uses`.\n\n### The `enforceTimeLimit` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether time limits should be enforced.\n\n### The `defaultTimeLimit` Attribute\n\nPossible values: integer (default: `0`)\n\nThis attribute configures the default time limit (in seconds).\n\n### The `timeoutForSmallTests` Attribute\n\nPossible values: integer (default: `1`)\n\nThis attribute configures the time limit for tests annotated with `@small` (in seconds).\n\n### The `timeoutForMediumTests` Attribute\n\nPossible values: integer (default: `10`)\n\nThis attribute configures the time limit for tests annotated with `@medium` (in seconds).\n\n### The `timeoutForLargeTests` Attribute\n\nPossible values: integer (default: `60`)\n\nThis attribute configures the time limit for tests annotated with `@large` (in seconds).\n\n### The `testSuiteLoaderClass` Attribute\n\nDefault: `PHPUnit\\Runner\\StandardTestSuiteLoader`\n\nThis attribute configures the name of a class that implements the `PHPUnit\\Runner\\TestSuiteLoader` interface. An object of this class is used to load the test suite.\n\n### The `testSuiteLoaderFile` Attribute\n\nThis attribute can be used to configure the path to the sourcecode file that declares the class configured with `testSuiteLoaderClass` in case that class cannot be autoloaded.\n\n### The `defaultTestSuite` Attribute\n\nThis attribute configures the name of the default test suite.\n\n### The `verbose` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether more verbose output should be printed.\n\n### The `stderr` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether PHPUnit should print its output to `stderr` instead of `stdout`.\n\n### The `reverseDefectList` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether tests that are not successful should be printed in reverse order.\n\n### The `registerMockObjectsFromTestArgumentsRecursively` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether arrays and object graphs that are passed from one test to another using the `@depends` annotation should be recursively scanned for mock objects.\n\n### The `extensionsDirectory` Attribute\n\nWhen `phpunit.phar` is used then this attribute may be used to configure a directory from which all `*.phar` files will be loaded as extensions for the PHPUnit test runner.\n\n### The `executionOrder` Attribute\n\nPossible values: `default`, `defects`, `depends`, `no-depends`, `duration`, `random`, `reverse`, `size`\n\nUsing multiple values is possible. These need to be separated by `,`.\n\nThis attribute configures the order in which tests are executed.\n\n### The `resolveDependencies` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nThis attribute configures whether dependencies between tests (expressed using the `@depends` annotation) should be resolved.\n\n### The `testdox` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the output should be printed in TestDox format.\n\n### The `noInteraction` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether progress should be animated when TestDox format is used, for instance.\n\n## The `<testsuites>` Element\n\nParent element: `<phpunit>`\n\nThis element is the root for one or more `<testsuite>` elements that are used to configure the tests that are to be executed.\n\n### The `<testsuite>` Element\n\nParent element: `<testsuites>`\n\nA `<testsuite>` element must have a `name` attribute and may have one or more `<directory>` and/or `<file>` child elements that configure directories and/or files, respectively, that should be searched for tests.\n\n``` php\n<testsuites>\n  <testsuite name=\"unit\">\n    <directory>tests/unit</directory>\n  </testsuite>\n\n  <testsuite name=\"integration\">\n    <directory>tests/integration</directory>\n  </testsuite>\n\n  <testsuite name=\"edge-to-edge\">\n    <directory>tests/edge-to-edge</directory>\n  </testsuite>\n</testsuites>\n```\n\nUsing the `phpVersion` and `phpVersionOperator` attributes, a required PHP version can be specified:\n\n``` php\n<testsuites>\n  <testsuite name=\"unit\">\n    <directory phpVersion=\"8.0.0\" phpVersionOperator=\">=\">tests/unit</directory>\n  </testsuite>\n</testsuites>\n```\n\nIn the example above, the tests from the `tests/unit` directory are only added to the test suite if the PHP version is at least 8.0.0. The `phpVersionOperator` attribute is optional and defaults to `>=`.\n\n## The `<coverage>` Element\n\nParent element: `<phpunit>`\n\nThe `<coverage>` element and its children can be used to configure code coverage:\n\n``` php\n<coverage cacheDirectory=\"/path/to/directory\"\n          includeUncoveredFiles=\"true\"\n          processUncoveredFiles=\"true\"\n          pathCoverage=\"false\"\n          ignoreDeprecatedCodeUnits=\"true\"\n          disableCodeCoverageIgnore=\"true\">\n    <!-- ... -->\n</coverage>\n```\n\n### The `cacheDirectory` Attribute\n\nPossible values: string\n\nWhen code coverage data is collected and processed, static code analysis is performed to improve reasoning about the covered code. This is an expensive operation, whose result can be cached. When the `cacheDirectory` attribute is set, static analysis results will be cached in the specified directory.\n\n### The `includeUncoveredFiles` Attribute\n\nPossible values: `true` or `false` (default: `true`)\n\nWhen set to `true`, all sourcecode files that are configured to be considered for code coverage analysis will be included in the code coverage report(s). This includes sourcecode files that are not executed while the tests are running.\n\n### The `processUncoveredFiles` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nWhen set to `true`, all sourcecode files that are configured to be considered for code coverage analysis will be processed. This includes sourcecode files that are not executed while the tests are running.\n\n### The `ignoreDeprecatedCodeUnits` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether code units annotated with `@deprecated` should be ignored from code coverage.\n\n### The `pathCoverage` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nWhen set to `false`, only line coverage data will be collected, processed, and reported.\n\nWhen set to `true`, line coverage, branch coverage, and path coverage data will be collected, processed, and reported. This requires a code coverage driver that supports path coverage. Path Coverage is currently only implemented by Xdebug.\n\n### The `disableCodeCoverageIgnore` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\nThis attribute configures whether the `@codeCoverageIgnore*` annotations should be ignored.\n\n### The `<include>` Element\n\nParent element: `<coverage>`\n\nConfigures a set of files to be included in code coverage report(s).\n\n``` php\n<include>\n    <directory suffix=\".php\">src</directory>\n</include>\n```\n\nThe example shown above instructs PHPUnit to include all sourcecode files with `.php` suffix in the `src` directory and its sub-directories in the code coverage report(s).\n\n### The `<exclude>` Element\n\nParent element: `<coverage>`\n\nConfigures a set of files to be excluded from code coverage report(s).\n\n``` php\n<include>\n    <directory suffix=\".php\">src</directory>\n</include>\n\n<exclude>\n    <directory suffix=\".php\">src/generated</directory>\n    <file>src/autoload.php</file>\n</exclude>\n```\n\nThe example shown above instructs PHPUnit to include all sourcecode files with `.php` suffix in the `src` directory and its sub-directories in the code coverage report but exclude all files with `.php` suffix in the `src/generated` directory and its sub-directories as well as the `src/autoload.php` file from the code coverage report(s).\n\n### The `<directory>` Element\n\nParent elements: `<include>`, `<exclude>`\n\nConfigures a directory and its sub-directories for inclusion in or exclusion from code coverage report(s).\n\n#### The `prefix` Attribute\n\nPossible values: string\n\nConfigures a prefix-based filter that is applied to the names of files in the directory and its sub-directories.\n\n#### The `suffix` Attribute\n\nPossible values: string (default: `'.php'`)\n\nConfigures a suffix-based filter that is applied to the names of files in the directory and its sub-directories.\n\n#### The `phpVersion` Attribute\n\nPossible values: string\n\nConfigures a filter based on the version of the PHP runtime that is used to run the current PHPUnit process.\n\n#### The `phpVersionOperator` Attribute\n\nPossible values: `'<'`, `'lt'`, `'<='`, `'le'`, `'>'`, `'gt'`, `'>='`, `'ge'`, `'=='`, `'='`, `'eq'`, `'!='`, `'<>'`, `'ne'` (default: `'>='`)\n\nConfigures the comparison operator to be used with `version_compare()` for the filter based on the version of the PHP runtime that is used to run the current PHPUnit process.\n\n### The `<file>` Element\n\nParent elements: `<include>`, `<exclude>`\n\nConfigures a file for inclusion in or exclusion from code coverage report(s).\n\n### The `<report>` Element\n\nParent element: `<coverage>`\n\nConfigures the code coverage reports to be generated.\n\n``` php\n<report>\n    <clover outputFile=\"clover.xml\"/>\n    <crap4j outputFile=\"crap4j.xml\" threshold=\"50\"/>\n    <html outputDirectory=\"html-coverage\" lowUpperBound=\"50\" highLowerBound=\"90\"/>\n    <php outputFile=\"coverage.php\"/>\n    <text outputFile=\"coverage.txt\" showUncoveredFiles=\"false\" showOnlySummary=\"true\"/>\n    <xml outputDirectory=\"xml-coverage\"/>\n</report>\n```\n\n#### The `<clover>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in Clover XML format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the Clover XML report is written.\n\n#### The `<crap4j>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in Crap4J XML format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the Crap4J XML report is written.\n\n##### The `threshold` Attribute\n\nPossible values: integer (default: `50`)\n\n#### The `<html>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in HTML format.\n\n##### The `outputDirectory` Attribute\n\nThe directory to which the HTML report is written.\n\n##### The `lowUpperBound` Attribute\n\nPossible values: integer (default: `50`)\n\nThe upper bound of what should be considered “low coverage”.\n\n##### The `highLowerBound` Attribute\n\nPossible values: integer (default: `90`)\n\nThe lower bound of what should be considered “high coverage”.\n\n#### The `<php>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in PHP format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the PHP report is written.\n\n#### The `<text>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in text format.\n\n##### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the text report is written.\n\n##### The `showUncoveredFiles` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\n##### The `showOnlySummary` Attribute\n\nPossible values: `true` or `false` (default: `false`)\n\n#### The `<xml>` Element\n\nParent element: `<report>`\n\nConfigures a code coverage report in PHPUnit XML format.\n\n##### The `outputDirectory` Attribute\n\nPossible values: string\n\nThe directory to which the PHPUnit XML report is written.\n\n## The `<logging>` Element\n\nParent element: `<phpunit>`\n\nThe `<logging>` element and its children can be used to configure the logging of the test execution.\n\n``` php\n<logging>\n    <junit outputFile=\"junit.xml\"/>\n    <teamcity outputFile=\"teamcity.txt\"/>\n    <testdoxHtml outputFile=\"testdox.html\"/>\n    <testdoxText outputFile=\"testdox.txt\"/>\n    <testdoxXml outputFile=\"testdox.xml\"/>\n    <text outputFile=\"logfile.txt\"/>\n</logging>\n```\n\n### The `<junit>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in JUnit XML format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in JUnit XML format is written.\n\n### The `<teamcity>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TeamCity format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TeamCity format is written.\n\n### The `<testdoxHtml>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TestDox HTML format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TestDox HTML format is written.\n\n### The `<testdoxText>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TestDox text format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TestDox text format is written.\n\n### The `<testdoxXml>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in TestDox XML format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in TestDox XML format is written.\n\n### The `<text>` Element\n\nParent element: `<logging>`\n\nConfigures a test result logfile in text format.\n\n#### The `outputFile` Attribute\n\nPossible values: string\n\nThe file to which the test result logfile in text format is written.\n\n## The `<groups>` Element\n\nParent element: `<phpunit>`\n\nThe `<groups>` element and its `<include>`, `<exclude>`, and `<group>` children can be used to select groups of tests marked with the `@group` annotation (documented in [@group](annotations#appendixes-annotations-group)) that should (not) be run:\n\n``` php\n<groups>\n  <include>\n    <group>name</group>\n  </include>\n  <exclude>\n    <group>name</group>\n  </exclude>\n</groups>\n```\n\nThe example shown above is equivalent to invoking the PHPUnit test runner with `--group`` ``name`` ``--exclude-group`` ``name`.\n\n## The `<testdoxGroups>` Element\n\nParent element: `<phpunit>`\n\n… TBD …\n\n## The `<listeners>` Element\n\nParent element: `<phpunit>`\n\nThe `<listeners>` element and its `<listener>` children can be used to attach additional test listeners to the test execution.\n\n### The `<listener>` Element\n\nParent element: `<listeners>`\n\n``` php\n<listeners>\n  <listener class=\"MyListener\" file=\"/optional/path/to/MyListener.php\">\n    <arguments>\n      <array>\n        <element key=\"0\">\n          <string>Sebastian</string>\n        </element>\n      </array>\n      <integer>22</integer>\n      <string>April</string>\n      <double>19.78</double>\n      <null/>\n      <object class=\"stdClass\"/>\n    </arguments>\n  </listener>\n</listeners>\n```\n\nThe XML configuration above corresponds to attaching the `$listener` object (see below) to the test execution:\n\n``` php\n$listener = new MyListener(\n    ['Sebastian'],\n    22,\n    'April',\n    19.78,\n    null,\n    new stdClass\n);\n```\n\nNote\n\nPlease note that the `PHPUnit\\Framework\\TestListener` interface is deprecated and will be removed in the future. TestRunner extensions should be used instead of test listeners.\n\n## The `<extensions>` Element\n\nParent element: `<phpunit>`\n\nThe `<extensions>` element and its `<extension>` children can be used to register test runner extensions.\n\n### The `<extension>` Element\n\nParent element: `<extensions>`\n\n``` php\n<extensions>\n    <extension class=\"Vendor\\MyExtension\"/>\n</extensions>\n```\n\n#### The `<arguments>` Element\n\nParent element: `<extension>`\n\nThe `<arguments>` element can be used to configure a single `<extension>`.\n\nAccepts a list of elements of types, which are then used to configure individual extensions. The arguments are passed to the extension class’ `__constructor` method in the order they are defined in the configuration.\n\nAvailable types:\n\n- `<boolean>`\n- `<integer>`\n- `<string>`\n- `<double>` (float)\n- `<array>`\n- `<object>`\n\n``` php\n<extension class=\"Vendor\\MyExtension\">\n    <arguments>\n        <integer>1</integer>\n        <integer>2</integer>\n        <integer>3</integer>\n        <string>hello world</string>\n        <boolean>true</boolean>\n        <double>1.23</double>\n        <array>\n            <element index=\"0\">\n                <string>value1</string>\n            </element>\n            <element index=\"1\">\n                <string>value2</string>\n            </element>\n        </array>\n        <object class=\"Vendor\\MyPhpClass\">\n            <string>constructor arg 1</string>\n            <string>constructor arg 2</string>\n        </object>\n    </arguments>\n</extension>\n```\n\n## The `<php>` Element\n\nParent element: `<phpunit>`\n\nThe `<php>` element and its children can be used to configure PHP settings, constants, and global variables. It can also be used to prepend the `include_path`.\n\n### The `<includePath>` Element\n\nParent element: `<php>`\n\nThis element can be used to prepend a path to the `include_path`.\n\n### The `<ini>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a PHP configuration setting.\n\n``` php\n<php>\n  <ini name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\nini_set('foo', 'bar');\n```\n\n### The `<const>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a global constant.\n\n``` php\n<php>\n  <const name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\ndefine('foo', 'bar');\n```\n\n### The `<var>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a global variable.\n\n``` php\n<php>\n  <var name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$GLOBALS['foo'] = 'bar';\n```\n\n### The `<env>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_ENV`.\n\n``` php\n<php>\n  <env name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_ENV['foo'] = 'bar';\n```\n\nBy default, environment variables are not overwritten if they exist already. To force overwriting existing variables, use the `force` attribute:\n\n``` php\n<php>\n  <env name=\"foo\" value=\"bar\" force=\"true\"/>\n</php>\n```\n\n### The `<get>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_GET`.\n\n``` php\n<php>\n  <get name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_GET['foo'] = 'bar';\n```\n\n### The `<post>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_POST`.\n\n``` php\n<php>\n  <post name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_POST['foo'] = 'bar';\n```\n\n### The `<cookie>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_COOKIE`.\n\n``` php\n<php>\n  <cookie name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_COOKIE['foo'] = 'bar';\n```\n\n### The `<server>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_SERVER`.\n\n``` php\n<php>\n  <server name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_SERVER['foo'] = 'bar';\n```\n\n### The `<files>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_FILES`.\n\n``` php\n<php>\n  <files name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_FILES['foo'] = 'bar';\n```\n\n### The `<request>` Element\n\nParent element: `<php>`\n\nThis element can be used to set a value in the super-global array `$_REQUEST`.\n\n``` php\n<php>\n  <request name=\"foo\" value=\"bar\"/>\n</php>\n```\n\nThe XML configuration above corresponds to the following PHP code:\n\n``` php\n$_REQUEST['foo'] = 'bar';\n```\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/configuration.html](https://phpunit.readthedocs.io/en/9.5/configuration.html)"
- name: Writing Tests for PHPUnit
  id: writing-tests-for-phpunit
  summary: Example 2.1 shows how we can write tests using PHPUnit that exercise PHP’s array operations
  description: "# Writing Tests for PHPUnit\n\n[Example 2.1](#writing-tests-for-phpunit-examples-stacktest-php) shows how we can write tests using PHPUnit that exercise PHP’s array operations. The example introduces the basic conventions and steps for writing tests with PHPUnit:\n\n1.  The tests for a class `Class` go into a class `ClassTest`.\n\n2.  `ClassTest` inherits (most of the time) from `PHPUnit\\Framework\\TestCase`.\n\n3.  The tests are public methods that are named `test*`.\n\n    Alternatively, you can use the `@test` annotation in a method’s docblock to mark it as a test method.\n\n4.  Inside the test methods, assertion methods such as `assertSame()` (see [Assertions](assertions#appendixes-assertions)) are used to assert that an actual value matches an expected value.\n\nExample 2.1 Testing array operations with PHPUnit\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StackTest extends TestCase\n{\n    public function testPushAndPop(): void\n    {\n        $stack = [];\n        $this->assertSame(0, count($stack));\n\n        array_push($stack, 'foo');\n        $this->assertSame('foo', $stack[count($stack)-1]);\n        $this->assertSame(1, count($stack));\n\n        $this->assertSame('foo', array_pop($stack));\n        $this->assertSame(0, count($stack));\n    }\n}\n```\n\n*Martin Fowler*:\n\n> Whenever you are tempted to type something into a `print` statement or a debugger expression, write it as a test instead.\n\n## Test Dependencies\n\n> *Adrian Kuhn et. al.*:\n>\n> Unit Tests are primarily written as a good practice to help developers identify and fix bugs, to refactor code and to serve as documentation for a unit of software under test. To achieve these benefits, unit tests ideally should cover all the possible paths in a program. One unit test usually covers one specific path in one function or method. However a test method is not necessarily an encapsulated, independent entity. Often there are implicit dependencies between test methods, hidden in the implementation scenario of a test.\n\nPHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers.\n\n- A producer is a test method that yields its unit under test as return value.\n- A consumer is a test method that depends on one or more producers and their return values.\n\n[Example 2.2](#writing-tests-for-phpunit-examples-stacktest2-php) shows how to use the `@depends` annotation to express dependencies between test methods.\n\nExample 2.2 Using the `@depends` annotation to express dependencies\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class StackTest extends TestCase\n{\n    public function testEmpty(): array\n    {\n        $stack = [];\n        $this->assertEmpty($stack);\n\n        return $stack;\n    }\n\n    /**\n     * @depends testEmpty\n     */\n    public function testPush(array $stack): array\n    {\n        array_push($stack, 'foo');\n        $this->assertSame('foo', $stack[count($stack)-1]);\n        $this->assertNotEmpty($stack);\n\n        return $stack;\n    }\n\n    /**\n     * @depends testPush\n     */\n    public function testPop(array $stack): void\n    {\n        $this->assertSame('foo', array_pop($stack));\n        $this->assertEmpty($stack);\n    }\n}\n```\n\nIn the example above, the first test, `testEmpty()`, creates a new array and asserts that it is empty. The test then returns the fixture as its result. The second test, `testPush()`, depends on `testEmpty()` and is passed the result of that depended-upon test as its argument. Finally, `testPop()` depends upon `testPush()`.\n\nNote\n\nThe return value yielded by a producer is passed “as-is” to its consumers by default. This means that when a producer returns an object, a reference to that object is passed to the consumers. Instead of a reference either (a) a (deep) copy via `@depends`` ``clone`, or (b) a (normal shallow) clone (based on PHP keyword `clone`) via `@depends`` ``shallowClone` are possible too.\n\nTo localize defects, we want our attention to be focussed on relevant failing tests. This is why PHPUnit skips the execution of a test when a depended-upon test has failed. This improves defect localization by exploiting the dependencies between tests as shown in [Example 2.3](#writing-tests-for-phpunit-examples-dependencyfailuretest-php).\n\nExample 2.3 Exploiting the dependencies between tests\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DependencyFailureTest extends TestCase\n{\n    public function testOne(): void\n    {\n        $this->assertTrue(false);\n    }\n\n    /**\n     * @depends testOne\n     */\n    public function testTwo(): void\n    {\n    }\n}\n```\n\n``` php\n$ phpunit --verbose DependencyFailureTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nFS\n\nTime: 0 seconds, Memory: 5.00Mb\n\nThere was 1 failure:\n\n1) DependencyFailureTest::testOne\nFailed asserting that false is true.\n\n/home/sb/DependencyFailureTest.php:6\n\nThere was 1 skipped test:\n\n1) DependencyFailureTest::testTwo\nThis test depends on \"DependencyFailureTest::testOne\" to pass.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1, Skipped: 1.\n```\n\nA test may have more than one `@depends` annotation. PHPUnit does not change the order in which tests are executed, you have to ensure that the dependencies of a test can actually be met before the test is run.\n\nA test that has more than one `@depends` annotation will get a fixture from the first producer as the first argument, a fixture from the second producer as the second argument, and so on. See [Example 2.4](#writing-tests-for-phpunit-examples-multipledependencies-php)\n\nExample 2.4 Test with multiple dependencies\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class MultipleDependenciesTest extends TestCase\n{\n    public function testProducerFirst(): string\n    {\n        $this->assertTrue(true);\n\n        return 'first';\n    }\n\n    public function testProducerSecond(): string\n    {\n        $this->assertTrue(true);\n\n        return 'second';\n    }\n\n    /**\n     * @depends testProducerFirst\n     * @depends testProducerSecond\n     */\n    public function testConsumer(string $a, string $b): void\n    {\n        $this->assertSame('first', $a);\n        $this->assertSame('second', $b);\n    }\n}\n```\n\n``` php\n$ phpunit --verbose MultipleDependenciesTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n...\n\nTime: 0 seconds, Memory: 3.25Mb\n\nOK (3 tests, 4 assertions)\n```\n\n## Data Providers\n\nA test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (`additionProvider()` in [Example 2.5](#writing-tests-for-phpunit-data-providers-examples-datatest-php)). The data provider method to be used is specified using the `@dataProvider` annotation.\n\nA data provider method must be `public` and either return an array of arrays or an object that implements the `Iterator` interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments.\n\nExample 2.5 Using a data provider that returns an array of arrays\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionProvider\n     */\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public function additionProvider(): array\n    {\n        return [\n            [0, 0, 0],\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 3]\n        ];\n    }\n}\n```\n\n``` php\n$ phpunit DataTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set #3 (1, 1, 3)\nFailed asserting that 2 is identical to 3.\n\n/home/sb/DataTest.php:9\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.\n```\n\nWhen using a large number of datasets it’s useful to name each one with string key instead of default numeric. Output will be more verbose as it’ll contain that name of a dataset that breaks a test.\n\nExample 2.6 Using a data provider with named datasets\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionProvider\n     */\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public function additionProvider(): array\n    {\n        return [\n            'adding zeros'  => [0, 0, 0],\n            'zero plus one' => [0, 1, 1],\n            'one plus zero' => [1, 0, 1],\n            'one plus one'  => [1, 1, 3]\n        ];\n    }\n}\n```\n\n``` php\n$ phpunit DataTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set \"one plus one\" (1, 1, 3)\nFailed asserting that 2 is identical to 3.\n\n/home/sb/DataTest.php:9\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.\n```\n\nExample 2.7 Using a data provider that returns an Iterator object\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionProvider\n     */\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public function additionProvider(): CsvFileIterator\n    {\n        return new CsvFileIterator('data.csv');\n    }\n}\n```\n\n``` php\n$ phpunit DataTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set #3 ('1', '1', '3')\nFailed asserting that 2 is identical to 3.\n\n/home/sb/DataTest.php:11\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.\n```\n\nExample 2.8 The CsvFileIterator class\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class CsvFileIterator implements Iterator\n{\n    private $file;\n    private $key = 0;\n    private $current;\n\n    public function __construct(string $file)\n    {\n        $this->file = fopen($file, 'r');\n    }\n\n    public function __destruct()\n    {\n        fclose($this->file);\n    }\n\n    public function rewind(): void\n    {\n        rewind($this->file);\n\n        $this->current = fgetcsv($this->file);\n        $this->key     = 0;\n    }\n\n    public function valid(): bool\n    {\n        return !feof($this->file);\n    }\n\n    public function key(): int\n    {\n        return $this->key;\n    }\n\n    public function current(): array\n    {\n        return $this->current;\n    }\n\n    public function next(): void\n    {\n        $this->current = fgetcsv($this->file);\n\n        $this->key++;\n    }\n}\n```\n\nWhen a test receives input from both a `@dataProvider` method and from one or more tests it `@depends` on, the arguments from the data provider will come before the ones from depended-upon tests. The arguments from depended-upon tests will be the same for each data set. See [Example 2.9](#writing-tests-for-phpunit-data-providers-examples-dependencyanddataprovidercombo-php)\n\nExample 2.9 Combination of @depends and @dataProvider in same test\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DependencyAndDataProviderComboTest extends TestCase\n{\n    public function provider(): array\n    {\n        return [['provider1'], ['provider2']];\n    }\n\n    public function testProducerFirst(): void\n    {\n        $this->assertTrue(true);\n\n        return 'first';\n    }\n\n    public function testProducerSecond(): void\n    {\n        $this->assertTrue(true);\n\n        return 'second';\n    }\n\n    /**\n     * @depends testProducerFirst\n     * @depends testProducerSecond\n     * @dataProvider provider\n     */\n    public function testConsumer(): void\n    {\n        $this->assertSame(\n            ['provider1', 'first', 'second'],\n            func_get_args()\n        );\n    }\n}\n```\n\n``` php\n$ phpunit --verbose DependencyAndDataProviderComboTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n...F\n\nTime: 0 seconds, Memory: 3.50Mb\n\nThere was 1 failure:\n\n1) DependencyAndDataProviderComboTest::testConsumer with data set #1 ('provider2')\nFailed asserting that two arrays are identical.\n--- Expected\n+++ Actual\n@@ @@\nArray &0 (\n-    0 => 'provider1'\n+    0 => 'provider2'\n     1 => 'first'\n     2 => 'second'\n)\n/home/sb/DependencyAndDataProviderComboTest.php:32\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.\n```\n\nExample 2.10 Using multiple data providers for a single test\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class DataTest extends TestCase\n{\n    /**\n     * @dataProvider additionWithNonNegativeNumbersProvider\n     * @dataProvider additionWithNegativeNumbersProvider\n     */\n    public function testAdd(int $a, int $b, int $expected): void\n    {\n        $this->assertSame($expected, $a + $b);\n    }\n\n    public function additionWithNonNegativeNumbersProvider(): void\n    {\n        return [\n            [0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 3]\n        ];\n    }\n\n    public function additionWithNegativeNumbersProvider(): array\n    {\n        return [\n            [-1, 1, 0],\n            [-1, -1, -2],\n            [1, -1, 0]\n        ];\n    }\n }\n```\n\n``` php\n$ phpunit DataTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n..F...                                                              6 / 6 (100%)\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) DataTest::testAdd with data set #3 (1, 1, 3)\nFailed asserting that 2 is identical to 3.\n\n/home/sb/DataTest.php:12\n\nFAILURES!\nTests: 6, Assertions: 6, Failures: 1.\n```\n\nNote\n\nWhen a test depends on a test that uses data providers, the depending test will be executed when the test it depends upon is successful for at least one data set. The result of a test that uses data providers cannot be injected into a depending test.\n\nNote\n\nAll data providers are executed before both the call to the `setUpBeforeClass()` static method and the first call to the `setUp()` method. Because of that you can’t access any variables you create there from within a data provider. This is required in order for PHPUnit to be able to compute the total number of tests.\n\n## Testing Exceptions\n\n[Example 2.11](#writing-tests-for-phpunit-exceptions-examples-exceptiontest-php) shows how to use the `expectException()` method to test whether an exception is thrown by the code under test.\n\nExample 2.11 Using the expectException() method\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExceptionTest extends TestCase\n{\n    public function testException(): void\n    {\n        $this->expectException(InvalidArgumentException::class);\n    }\n}\n```\n\n``` php\n$ phpunit ExceptionTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 4.75Mb\n\nThere was 1 failure:\n\n1) ExceptionTest::testException\nFailed asserting that exception of type \"InvalidArgumentException\" is thrown.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\nIn addition to the `expectException()` method the `expectExceptionCode()`, `expectExceptionMessage()`, and `expectExceptionMessageMatches()` methods exist to set up expectations for exceptions raised by the code under test.\n\nNote\n\nNote that `expectExceptionMessage()` asserts that the `$actual` message contains the `$expected` message and does not perform an exact string comparison.\n\n## Testing PHP Errors, Warnings, and Notices\n\nBy default, PHPUnit converts PHP errors, warnings, and notices that are triggered during the execution of a test to an exception. Among other benefits, this makes it possible to expect that a PHP error, warning, or notice is triggered in a test as shown in [Example 2.12](#writing-tests-for-phpunit-exceptions-examples-errortest-php).\n\nNote\n\nPHP’s `error_reporting` runtime configuration can limit which errors PHPUnit will convert to exceptions. If you are having issues with this feature, be sure PHP is not configured to suppress the type of error you are interested in.\n\nExample 2.12 Expecting PHP errors, warnings, and notices\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ErrorTest extends TestCase\n{\n    public function testDeprecationCanBeExpected(): void\n    {\n        $this->expectDeprecation();\n\n        // Optionally test that the message is equal to a string\n        $this->expectDeprecationMessage('foo');\n\n        // Or optionally test that the message matches a regular expression\n        $this->expectDeprecationMessageMatches('/foo/');\n\n        \\trigger_error('foo', \\E_USER_DEPRECATED);\n    }\n\n    public function testNoticeCanBeExpected(): void\n    {\n        $this->expectNotice();\n\n        // Optionally test that the message is equal to a string\n        $this->expectNoticeMessage('foo');\n\n        // Or optionally test that the message matches a regular expression\n        $this->expectNoticeMessageMatches('/foo/');\n\n        \\trigger_error('foo', \\E_USER_NOTICE);\n    }\n\n    public function testWarningCanBeExpected(): void\n    {\n        $this->expectWarning();\n\n        // Optionally test that the message is equal to a string\n        $this->expectWarningMessage('foo');\n\n        // Or optionally test that the message matches a regular expression\n        $this->expectWarningMessageMatches('/foo/');\n\n        \\trigger_error('foo', \\E_USER_WARNING);\n    }\n\n    public function testErrorCanBeExpected(): void\n    {\n        $this->expectError();\n\n        // Optionally test that the message is equal to a string\n        $this->expectErrorMessage('foo');\n\n        // Or optionally test that the message matches a regular expression\n        $this->expectErrorMessageMatches('/foo/');\n\n        \\trigger_error('foo', \\E_USER_ERROR);\n    }\n}\n```\n\nWhen testing code that uses PHP built-in functions such as `fopen()` that may trigger errors it can sometimes be useful to use error suppression while testing. This allows you to check the return values by suppressing notices that would lead to an exception raised by PHPUnit’s error handler.\n\nExample 2.13 Testing return values of code that uses PHP Errors\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ErrorSuppressionTest extends TestCase\n{\n    public function testFileWriting(): void\n    {\n        $writer = new FileWriter;\n\n        $this->assertFalse(@$writer->write('/is-not-writeable/file', 'stuff'));\n    }\n}\n\nfinal class FileWriter\n{\n    public function write($file, $content)\n    {\n        $file = fopen($file, 'w');\n\n        if ($file === false) {\n            return false;\n        }\n\n        // ...\n    }\n}\n```\n\n``` php\n$ phpunit ErrorSuppressionTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n.\n\nTime: 1 seconds, Memory: 5.25Mb\n\nOK (1 test, 1 assertion)\n```\n\nWithout the error suppression the test would fail reporting `fopen(/is-not-writeable/file):`` ``failed`` ``to`` ``open`` ``stream:`` ``No`` ``such`` ``file`` ``or`` ``directory`.\n\n## Testing Output\n\nSometimes you want to assert that the execution of a method, for instance, generates an expected output (via `echo` or `print`, for example). The `PHPUnit\\Framework\\TestCase` class uses PHP’s [Output Buffering](http://www.php.net/manual/en/ref.outcontrol.php) feature to provide the functionality that is necessary for this.\n\n[Example 2.14](#writing-tests-for-phpunit-output-examples-outputtest-php) shows how to use the `expectOutputString()` method to set the expected output. If this expected output is not generated, the test will be counted as a failure.\n\nExample 2.14 Testing the output of a function or method\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class OutputTest extends TestCase\n{\n    public function testExpectFooActualFoo(): void\n    {\n        $this->expectOutputString('foo');\n\n        print 'foo';\n    }\n\n    public function testExpectBarActualBaz(): void\n    {\n        $this->expectOutputString('bar');\n\n        print 'baz';\n    }\n}\n```\n\n``` php\n$ phpunit OutputTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\n.F\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere was 1 failure:\n\n1) OutputTest::testExpectBarActualBaz\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'bar'\n+'baz'\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.\n```\n\n[Table 2.1](#writing-tests-for-phpunit-output-tables-api) shows the methods provided for testing output\n\n| Method                                                      | Meaning                                                                        |\n|-------------------------------------------------------------|--------------------------------------------------------------------------------|\n| `void`` ``expectOutputRegex(string`` ``$regularExpression)` | Set up the expectation that the output matches a `$regularExpression`.         |\n| `void`` ``expectOutputString(string`` ``$expectedString)`   | Set up the expectation that the output is equal to an `$expectedString`.       |\n| `bool`` ``setOutputCallback(callable`` ``$callback)`        | Sets up a callback that is used to, for instance, normalize the actual output. |\n| `string`` ``getActualOutput()`                              | Get the actual output.                                                         |\n\nTable 2.1 Methods for testing output {#writing-tests-for-phpunit-output-tables-api}\n\nNote\n\nA test that emits output will fail in strict mode.\n\n## Error output\n\nWhenever a test fails PHPUnit tries its best to provide you with as much context as possible that can help to identify the problem.\n\nExample 2.15 Error output generated when an array comparison fails\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ArrayDiffTest extends TestCase\n{\n    public function testEquality(): void\n    {\n        $this->assertSame(\n            [1, 2,  3, 4, 5, 6],\n            [1, 2, 33, 4, 5, 6]\n        );\n    }\n}\n```\n\n``` php\n$ phpunit ArrayDiffTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) ArrayDiffTest::testEquality\nFailed asserting that two arrays are identical.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     0 => 1\n     1 => 2\n-    2 => 3\n+    2 => 33\n     3 => 4\n     4 => 5\n     5 => 6\n )\n\n/home/sb/ArrayDiffTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\nIn this example only one of the array values differs and the other values are shown to provide context on where the error occurred.\n\nWhen the generated output would be long to read PHPUnit will split it up and provide a few lines of context around every difference.\n\nExample 2.16 Error output when an array comparison of an long array fails\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class LongArrayDiffTest extends TestCase\n{\n    public function testEquality(): void\n    {\n        $this->assertSame(\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,  3, 4, 5, 6],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 33, 4, 5, 6]\n        );\n    }\n}\n```\n\n``` php\n$ phpunit LongArrayDiffTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) LongArrayDiffTest::testEquality\nFailed asserting that two arrays are identical.\n--- Expected\n+++ Actual\n@@ @@\n     11 => 0\n     12 => 1\n     13 => 2\n-    14 => 3\n+    14 => 33\n     15 => 4\n     16 => 5\n     17 => 6\n )\n\n/home/sb/LongArrayDiffTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\n### Edge Cases\n\nWhen a comparison fails PHPUnit creates textual representations of the input values and compares those. Due to that implementation a diff might show more problems than actually exist.\n\nThis only happens when using `assertEquals()` or other ‘weak’ comparison functions on arrays or objects.\n\nExample 2.17 Edge case in the diff generation when using weak comparison\n\n``` php\n<?php declare(strict_types=1);\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ArrayWeakComparisonTest extends TestCase\n{\n    public function testEquality(): void\n    {\n        $this->assertEquals(\n            [1, 2, 3, 4, 5, 6],\n            ['1', 2, 33, 4, 5, 6]\n        );\n    }\n}\n```\n\n``` php\n$ phpunit ArrayWeakComparisonTest\nPHPUnit 9.5.0 by Sebastian Bergmann and contributors.\n\nF\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere was 1 failure:\n\n1) ArrayWeakComparisonTest::testEquality\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => 1\n+    0 => '1'\n     1 => 2\n-    2 => 3\n+    2 => 33\n     3 => 4\n     4 => 5\n     5 => 6\n )\n\n/home/sb/ArrayWeakComparisonTest.php:7\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n```\n\nIn this example the difference in the first index between `1` and `'1'` is reported even though `assertEquals()` considers the values as a match.\n\n© 2005–2020 Sebastian Bergmann  \nLicensed under the Creative Commons Attribution 3.0 Unported License.  \n[https://phpunit.readthedocs.io/en/9.5/writing-tests-for-phpunit.html](https://phpunit.readthedocs.io/en/9.5/writing-tests-for-phpunit.html)"
