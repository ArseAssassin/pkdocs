---
name: Homebrew
slug: homebrew
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2009–present Homebrew contributors
  Licensed under the BSD 2-Clause License.
  https://docs.brew.sh/
homepage: https://brew.sh

---
- name: Acceptable Casks
  id: acceptable-casks
  summary: Some casks should not go in homebrew/cask
  description: "# Acceptable Casks\n\nSome casks should not go in [homebrew/cask](https://github.com/Homebrew/homebrew-cask). But there are additional [Interesting Taps and Forks](interesting-taps-and-forks) and anyone can [start their own](taps)!\n\n## Finding a Home For Your Cask\n\nWe maintain separate Taps for different types of binaries. Our nomenclature is:\n\n- **Stable**: The latest version provided by the developer defined by them as such.\n- **Beta, Development, Unstable**: Subsequent versions to **stable**, yet incomplete and under development, aiming to eventually become the new **stable**. Also includes alternate versions specifically targeted at developers.\n- **Nightly**: Constantly up-to-date versions of the current development state.\n- **Legacy**: Any **stable** version that is not the most recent.\n- **Regional, Localized**: Any version that isn’t the US English one, when that exists.\n- **Trial**: Time-limited version that stops working entirely after it expires, requiring payment to lift the limitation.\n- **Freemium**: Gratis version that works indefinitely but with limitations that can be removed by paying.\n- **Fork**: An alternate version of an existing project, with a based-on but modified source and binary.\n- **Unofficial**: An *allegedly* unmodified compiled binary, by a third-party, of a binary that has no existing build by the owner of the source code.\n- **Vendorless**: A binary distributed without an official website, like a forum posting.\n- **Walled**: When the download URL is both behind a login/registration form and from a host that differs from the homepage.\n- **Font**: Data file containing a set of glyphs, characters, or symbols, that changes typed text.\n- **Driver**: Software to make a hardware peripheral recognisable and usable by the system. If the software is useless without the peripheral, it’s considered a driver.\n\n### Stable Versions\n\nStable versions live in the main repository at [Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask). They should run on the latest release of macOS or the previous point release (High Sierra and Mojave as of late 2018).\n\n### But There Is No Stable Version!\n\nWhen software is only available as a beta, development, or unstable version, its cask can go in the main repo. When stable versions become available, only those will be accepted as subsequent updates.\n\n### Beta, Unstable, Development, Nightly, or Legacy\n\nAlternative versions should be submitted to [Homebrew/homebrew-cask-versions](https://github.com/Homebrew/homebrew-cask-versions).\n\n### Regional and Localized\n\nWhen an App exists in more than one language or has different regional editions, [the `language` stanza should be used to switch between languages or regions](cask-cookbook#stanza-language).\n\n### Trial and Freemium Versions\n\nBefore submitting a trial, make sure it can be made into a full working version without the need to be redownloaded. If an App provides a trial but the only way to buy the full version is via the Mac App Store, it does not belong in any of the official repos. Freemium versions are fine.\n\n### Forks and Apps with Conflicting Names\n\nForks must have the vendor’s name as a prefix on the Cask’s file name and token. If the original software is discontinued, forks still need to follow this rule so as to not be surprising to the user. There are two exceptions which allow the fork to replace the main cask:\n\n- The original discontinued software recommends that fork.\n- The fork is so overwhelmingly popular that it surpasses the original and is now the de facto project when people think of the name.\n\nFor unrelated Apps that share a name, the most popular one (usually the one already present) stays unprefixed. Since this can be subjective, if you disagree with a decision, open an issue and make your case to the maintainers.\n\n### Unofficial, Vendorless, and Walled Builds\n\nWe do not accept these casks since they offer a higher-than-normal security risk.\n\n### Fonts\n\nFont Casks live in the [Homebrew/homebrew-cask-fonts](https://github.com/Homebrew/homebrew-cask-fonts) repository. See the font repo [CONTRIBUTING.md](https://github.com/Homebrew/homebrew-cask-fonts/blob/HEAD/CONTRIBUTING.md) for details.\n\n### Drivers\n\nDriver Casks live in the [Homebrew/homebrew-cask-drivers](https://github.com/Homebrew/homebrew-cask-drivers) repository. See the drivers repo [CONTRIBUTING.md](https://github.com/Homebrew/homebrew-cask-drivers/blob/master/CONTRIBUTING.md) for details.\n\n## Apps that bundle malware\n\nUnfortunately, in the world of software there are bad actors that bundle malware with their apps. Even so, Homebrew Cask has long decided it will not be an active gatekeeper ([macOS already has one](https://support.apple.com/en-us/HT202491)) and [users are expected to know about the software they are installing](#homebrew-cask-is-not-a-discoverability-service). This means we will not always remove casks that link to these apps, in part because there is no clear line between useful app, potentially unwanted program, and the different shades of malware — what is useful to one user may be seen as malicious by another.\n\nBut we’d still like for users to enjoy some kind of protection while minimising occurrences of legitimate developers being branded as malware carriers. To do so, we evaluate casks on a case-by-case basis and any user is free to bring a potential malware case to our attention. However, it is important to never forget the last line of defence is *always* the user.\n\nIf an app that bundles malware was not signed with an Apple Developer ID and you purposefully disabled or bypassed Gatekeeper, no action will be taken on our part. When you disable security features, you do so at your own risk. If, however, an app that bundles malware is signed, Apple can revoke its permissions and it will no longer run on the computers of users that keep security features on — we all benefit, Homebrew Cask users or not. To report a signed app that bundles malware, use [Apple’s Feedback Assistant](https://feedbackassistant.apple.com)\n\nWe are also open to removing casks where we feel there is enough evidence that the app is malicious. To suggest a cask for removal, submit a Pull Request to delete it, together with your reasoning. Typically, this will mean presenting a [VirusTotal](https://www.virustotal.com) scan of the app showing it is malicious, ideally with some other reporting indicating it’s not a false positive.\n\nLikewise, software which provides both “clean” and malware-infested versions might be removed from the repo — even if we could have access to the *good* version — if its developers push for users to install the *bad* version. We do so because in these cases there’s a higher than normal risk that both versions are (or will soon become) compromised in some manner.\n\nIf a cask you depend on was removed due to these rules, fear not. Removal of a cask from the official repositories means we won’t support it, but you can do so by hosting your own [tap](how-to-create-and-maintain-a-tap).\n\n## Exceptions to the Notability Threshold\n\nCasks which do not reach a minimum notability threshold (see [Rejected Casks](#rejected-casks)) aren’t accepted in the main repositories because the increased maintenance burden doesn’t justify the poor usage numbers they will likely get. This notability check is performed automatically by the audit commands we provide, but its decisions aren’t set in stone. A cask which fails the notability check can be added if it is:\n\n1.  A popular app that has their own website but the developers use GitHub for hosting the binaries. That repository won’t be notable but the app may be.\n2.  Submitted by a maintainer or prolific contributor. A big part of the reasoning for the notability rule is unpopular software garners less attention and the cask gets abandoned, outdated, and broken. Someone with a proven investment in Hombrew Cask is less likely to let that happen for software they depend on.\n3.  A piece of software that was recently released to great fanfare—everyone is talking about it on Twitter and Hacker News and we’ve even gotten multiple premature submissions for it. That’s a clear case of an app that will reach the threshold in no time so that’s a PR we won’t close immediately (but may wait to merge).\n\nNote none of these exceptions is a guarantee for inclusion, but examples of situations where we may take a second look.\n\n## Homebrew Cask is not a discoverability service\n\nFrom the inception of Homebrew Cask, various requests fell under the umbrella of this reply. Though a somewhat popular request, after careful consideration on multiple occasions we’ve always come back to the same conclusion: we’re not a discoverability service and our users are expected to have reasonable knowledge about the apps they’re installing through us before doing so. For example, [grouping casks by categories](https://github.com/Homebrew/homebrew-cask/issues/5425) is not within the scope of the project.\n\nAmongst other things, the logistics of such requests are unsustainable for Homebrew Cask. Before making a request of this nature, you must read through previous related issues, as well as any other issues they link to, to get a full understanding of why that is the case, and why “but project *x* does *y*” arguments aren’t applicable, and not every package manager is the same.\n\nYou should also be able to present clear actionable fixes to those concerns. Simply asking for it without solutions will get your issue closed.\n\nHowever, there is a difference between discoverability (finding new apps you didn’t know about) and searchability (identifying the app you know about and want to install). While the former is unlikely to ever become part of our goals, the latter is indeed important to us, and we continue to work on it.\n\n## Rejected Casks\n\nBefore submitting a Cask to any of our repos, you must read [our documentation on acceptable Casks](#finding-a-home-for-your-cask) and perform a (at least quick) search to see if there were any previous attempts to introduce it.\n\nCommon reasons to reject a Cask entirely:\n\n- We have strong reasons to believe including the Cask can put the whole project at risk. Happened only once so far, [with Popcorn Time](https://github.com/Homebrew/homebrew-cask/pull/3954).\n- The Cask is unreasonably difficult to maintain. Examples once included [Audacity](https://github.com/Homebrew/homebrew-cask/pull/27517) and [older Java development Casks](https://github.com/Homebrew/homebrew-cask/issues/57387).\n- The app is a trial version, and the only way to acquire the full version is through the Mac App Store.\n  - Similarly (and trickier to spot), the app has moved to the Mac App Store but still provides old versions via direct download. We reject these in all official repos so users don’t get stuck using an old version, wrongly thinking they’re using the most up-to-date one (which, amongst other things, might be a security risk).\n- The app is both open-source and CLI-only (i.e. it only uses the `binary` artifact). In that case, and [in the spirit of deduplication](https://github.com/Homebrew/homebrew-cask/issues/15603), submit it first to [Homebrew/core](https://github.com/Homebrew/homebrew-core) as a formula that builds from source. If it is rejected, you may then try again as a cask (link us to the issue so we can see the discussion and reasoning for rejection).\n- The app is open-source and has a GUI but no compiled versions (or only old ones) are provided. It’s better to have them in [Homebrew/core](https://github.com/Homebrew/homebrew-core) so users don’t get perpetually outdated versions. See [`gedit`](https://github.com/Homebrew/homebrew-cask/pull/23360) for example.\n- The app has been rejected before due to an issue we cannot fix, and the new submission doesn’t fix that. An example would be [the first submission of `soapui`](https://github.com/Homebrew/homebrew-cask/pull/4939), whose installation problems were not fixed in the two subsequent submissions ([\\#9969](https://github.com/Homebrew/homebrew-cask/pull/9969), [\\#10606](https://github.com/Homebrew/homebrew-cask/pull/10606)).\n- The Cask is a duplicate. These submissions mostly occur when the [token reference](cask-cookbook#token-reference) was not followed.\n- The download URL for the app is both behind a login/registration form and from a host that differs from the homepage, meaning users can’t easily verify its authenticity.\n- The Cask is for an unmaintained app (no releases in the last year, or [explicitly discontinued](https://github.com/Homebrew/homebrew-cask/pull/22699)).\n- The Cask is for an app that is too obscure. Examples:\n  - An app from a code repository that is not notable enough (under 30 forks, 30 watchers, 75 stars).\n  - [Electronic Identification (eID) software](https://github.com/Homebrew/homebrew-cask/issues/59021).\n- The Cask is for an app with no information on the homepage (example: a GitHub repository without a README).\n- The author has [specifically asked us not to include it](https://github.com/Homebrew/homebrew-cask/pull/5342).\n- The Cask requires [SIP to be disabled](https://github.com/Homebrew/homebrew-cask/pull/41890) to be installed and/or used.\n- The Cask is a `pkg` that requires [`allow_untrusted: true`](cask-cookbook#pkg-allow_untrusted).\n\nCommon reasons to reject a Cask from the main repo:\n\n- The cask was submitted to the wrong repo. When drafting a cask, consult “[Finding a Home For Your Cask](#finding-a-home-for-your-cask)” to see where it belongs.\n\n## No cask is guaranteed to be accepted\n\nFollow the guidelines above and your submission has a great chance of being accepted. But remember documentation tends to lag behind current decision-making and we can’t predict every case. Maintainers may override these rules when experience tells us it will lead to a better overall Homebrew.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Acceptable-Casks](https://docs.brew.sh/Acceptable-Casks)"
- name: Acceptable Formulae
  id: acceptable-formulae
  summary: Some formulae should not go in homebrew/core
  description: "# Acceptable Formulae\n\nSome formulae should not go in [homebrew/core](https://github.com/Homebrew/homebrew-core). But there are additional [Interesting Taps and Forks](interesting-taps-and-forks) and anyone can start their own!\n\n### Supported platforms in `homebrew/core`\n\nThe formula needs to build and pass tests on the latest 3 supported macOS versions ([x86_64 and Apple Silicon/ARM](installation#macos-requirements)) and on x86_64 [Linux](linux-ci). Please have a look at the continuous integration jobs on a pull request in `homebrew/core` to see the full list of OSs. If upstream does not support one of these platforms, an exception can be made and the formula can be disabled for that platform.\n\n### Dupes in `homebrew/core`\n\nWe now accept stuff that comes with macOS as long as it uses `keg_only :provided_by_macos` to be keg-only by default.\n\n### Versioned formulae in `homebrew/core`\n\nWe now accept versioned formulae as long as they [meet the requirements](versions).\n\n### We don’t like tools that upgrade themselves\n\nSoftware that can upgrade itself does not integrate well with Homebrew’s own upgrade functionality. The self-update functionality should be disabled (while minimising complication to the formula).\n\n### We don’t like install scripts that download unversioned things\n\nWe don’t like install scripts that are pulling from the `master` branch of Git repositories or unversioned, unchecksummed tarballs. These should use `resource` blocks with specific revisions or checksummed tarballs instead. Note that we now allow tools like `cargo`, `gem` and `pip` to download specifically versioned libraries during installation.\n\n### We don’t like binary formulae\n\nOur policy is that formulae in the core tap ([homebrew/core](https://github.com/Homebrew/homebrew-core)) must be open-source with an [Debian Free Software Guidelines license](https://wiki.debian.org/DFSGLicenses) and either built from source or produce cross-platform binaries (e.g. Java, Mono). Binary-only formulae should go to [homebrew/cask](https://github.com/Homebrew/homebrew-cask).\n\nAdditionally, [homebrew/core](https://github.com/Homebrew/homebrew-core) formulae must also not depend on casks or any other proprietary software.\n\nThis includes automatic installation of casks at runtime.\n\n### Stable versions\n\nFormulae in the core repository must have a stable version tagged by the upstream project. Tarballs are preferred to Git checkouts, and tarballs should include the version in the filename whenever possible.\n\nWe don’t accept software without a tagged version because they regularly break due to upstream changes and we can’t provide [bottles](bottles) for them.\n\n### Niche (or self-submitted) stuff\n\nThe software in question must:\n\n- be maintained (i.e. the last release wasn’t ages ago, it works without patching on all Homebrew-supported OS versions and has no outstanding, unpatched security vulnerabilities)\n- be known\n- be stable (e.g. not declared “unstable” or “beta” by upstream)\n- be used\n- have a homepage\n\nWe will reject formulae that seem too obscure, partly because they won’t get maintained and partly because we have to draw the line somewhere.\n\nWe frown on authors submitting their own work unless it is very popular.\n\nDon’t forget Homebrew is all Git underneath! [Maintain your own tap](how-to-create-and-maintain-a-tap) if you have to!\n\nThere may be exceptions to these rules in the main repository; we may include things that don’t meet these criteria or reject things that do. Please trust that we need to use our discretion based on our experience running a package manager.\n\n### Stuff that builds an `.app`\n\nDon’t make your formula build an `.app` (native macOS Application); we don’t want those things in Homebrew. Encourage upstream projects to build and support a `.app` that can be distributed by [homebrew/cask](https://github.com/Homebrew/homebrew-cask) (and used without it, too).\n\n### Stuff that builds a GUI by default (but doesn’t have to)\n\nMake it build a command-line tool or a library by default and, if the GUI is useful and would be widely used, also build the GUI. Don’t build X11/XQuartz GUIs as they are a bad user experience on macOS.\n\n### Stuff that doesn’t build with the latest, stable Xcode Clang\n\nClang is the default C/C++ compiler on macOS (and has been for a long time). Software that doesn’t build with it hasn’t been adequately ported to macOS.\n\n### Stuff that requires heavy manual pre/post-install intervention\n\nWe’re a package manager so we want to do things like resolve dependencies and set up applications for our users. If things require too much manual intervention then they aren’t useful in a package manager.\n\n## Stuff that requires vendored versions of Homebrew formulae\n\nHomebrew formulae should avoid having multiple, separate, upstream projects bundled together in a single package to avoid shipping outdated/insecure versions of software that is already a formula. Veracode’s [State of Software Security report](https://www.veracode.com/blog/research/announcing-state-software-security-v11-open-source-edition) concludes\n\n> In fact, 79% of the time, developers never update third-party libraries after including them in a codebase.\n\nFor more info see [Debian’s](https://www.debian.org/doc/debian-policy/ch-source.html#s-embeddedfiles) and [Fedora’s](https://docs.fedoraproject.org/en-US/packaging-guidelines/#bundling) stances on this.\n\n### Sometimes there are exceptions\n\nEven if all criteria are met we may not accept the formula. Documentation tends to lag behind current decision-making. Although some rejections may seem arbitrary or strange they are based on years of experience making Homebrew work acceptably for our users.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Acceptable-Formulae](https://docs.brew.sh/Acceptable-Formulae)"
- name: Adding Software To Homebrew
  id: adding-software-to-homebrew
  summary: Is your favorite software missing from Homebrew? Then you’re the perfect person to resolve this problem
  description: "# Adding Software To Homebrew\n\nIs your favorite software missing from Homebrew? Then you’re the perfect person to resolve this problem.\n\nIf you want to add software that is either closed source or a GUI-only program, you will want to follow the guide for [Casks](#casks). Otherwise follow the guide for [Formulae](#formulae). See also: [Homebrew Terminology](formula-cookbook#homebrew-terminology)\n\nBefore you start, please check the open pull requests for [Homebrew/homebrew-core](https://github.com/Homebrew/homebrew-core/pulls) or [Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask/pulls) to make sure no one else beat you to the punch.\n\nNext, you will want to go through the [Acceptable Formulae](acceptable-formulae) or [Acceptable Casks](acceptable-casks) documentation to determine if the software is an appropriate addition to Homebrew. If you are creating a formula for an alternative version of software already in Homebrew (e.g. a major/minor version that differs significantly from the existing version), be sure to read the [Versions](versions) documentation to understand versioned formulae requirements.\n\nIf everything checks out, you’re ready to get started on a new formula!\n\n## Formulae\n\n### Writing the formula\n\n1.  It’s a good idea to find existing formulae in Homebrew that have similarities to the software you want to add. This will help you to understand how specific languages, build methods, etc. are typically handled.\n\n2.  If you’re starting from scratch, you can use the [`brew create` command](manpage#create-options-url) to produce a basic version of your formula. This command accepts a number of options and you may be able to save yourself some work by using an appropriate template option like `--python`.\n\n3.  You will now have to develop the boilerplate code from `brew create` into a full-fledged formula. Your main references will be the [Formula Cookbook](formula-cookbook), similar formulae in Homebrew, and the upstream documentation for your chosen software. Be sure to also take note of the Homebrew documentation for writing [Python](python-for-formula-authors) and [Node](node-for-formula-authors) formulae, if applicable.\n\n4.  Make sure you write a good test as part of your formula. Refer to the [Add a test to the formula](formula-cookbook#add-a-test-to-the-formula) section of the Cookbook for help with this.\n\n5.  Try installing your formula using `brew install --build-from-source <formula>`, where \\<formula\\> is the name of your formula. If any errors occur, correct your formula and attempt to install it again. The formula installation should finish without errors by the end of this step.\n\nIf you’re stuck, ask for help on GitHub or [Homebrew/discussions](https://github.com/homebrew/discussions/discussions). The maintainers are very happy to help but we also like to see that you’ve put effort into trying to find a solution first.\n\n### Testing and auditing the formula\n\n1.  Run `brew audit --strict --new-formula --online <formula>` with your formula. If any errors occur, correct your formula and run the audit again. The audit should finish without any errors by the end of this step.\n\n2.  Run your formula’s test using `brew test <formula>`. The test should finish without any errors.\n\n### Submitting the formula\n\nYou’re finally ready to submit your formula to the [homebrew-core](https://github.com/Homebrew/homebrew-core/) repository. If you haven’t done this before, you can refer to the [How to Open a Pull Request](how-to-open-a-homebrew-pull-request) documentation for help. Maintainers will review the pull request and provide feedback about any areas that need to be addressed before the formula can be added to Homebrew.\n\nIf you’ve made it this far, congratulations on submitting a Homebrew formula! We appreciate the hard work you put into this and you can take satisfaction in knowing that your work may benefit other Homebrew users as well.\n\n## Casks\n\n**Note:** Before taking the time to craft a new cask:\n\n- make sure it can be accepted by checking the [Rejected Casks FAQ](acceptable-casks#rejected-casks), and\n- check that the cask was not [already refused](https://github.com/Homebrew/homebrew-cask/search?q=is%3Aclosed&type=Issues).\n\n### Writing the cask\n\nMaking a new cask is easy. Follow the directions in [Getting Set Up To Contribute](https://github.com/Homebrew/homebrew-cask/blob/HEAD/CONTRIBUTING.md#getting-set-up-to-contribute) to begin.\n\n#### Examples\n\nHere’s a cask for `shuttle` as an example. Note the `verified` parameter below the `url`, which is needed when [the url and homepage hostnames differ](cask-cookbook#when-url-and-homepage-domains-differ-add-verified).\n\n``` ruby\ncask \"shuttle\" do\n  version \"1.2.9\"\n  sha256 \"0b80bf62922291da391098f979683e69cc7b65c4bdb986a431e3f1d9175fba20\"\n\n  url \"https://github.com/fitztrev/shuttle/releases/download/v#{version}/Shuttle.zip\",\n      verified: \"github.com/fitztrev/shuttle/\"\n  name \"Shuttle\"\n  desc \"Simple shortcut menu\"\n  homepage \"https://fitztrev.github.io/shuttle/\"\n\n  app \"Shuttle.app\"\n\n  zap trash: \"~/.shuttle.json\"\nend\n```\n\nAnd here is one for `noisy`. Note that it has an unversioned download (the download `url` does not contain the version number, unlike the example above). It also suppresses the checksum with `sha256 :no_check`, which is necessary because since the download `url` does not contain the version number, its checksum will change when a new version is made available.\n\n``` ruby\ncask \"noisy\" do\n  version \"1.3\"\n  sha256 :no_check\n\n  url \"https://github.com/downloads/jonshea/Noisy/Noisy.zip\"\n  name \"Noisy\"\n  desc \"White noise generator\"\n  homepage \"https://github.com/jonshea/Noisy\"\n\n  app \"Noisy.app\"\nend\n```\n\nHere is a last example for `airdisplay`, which uses a `pkg` installer to install the application instead of a stand-alone application bundle (`.app`). Note the [`uninstall pkgutil` stanza](cask-cookbook#uninstall-key-pkgutil), which is needed to uninstall all files that were installed using the installer.\n\nYou will also see how to adapt `version` to the download `url`. Use [our custom `version` methods](cask-cookbook#version-methods) to do so, resorting to the standard [Ruby String methods](https://ruby-doc.org/core/String.html) when they don’t suffice.\n\n``` ruby\ncask \"airdisplay\" do\n  version \"3.4.2,26581\"\n  sha256 \"272d14f33b3a4a16e5e0e1ebb2d519db4e0e3da17f95f77c91455b354bee7ee7\"\n\n  url \"https://www.avatron.com/updates/software/airdisplay/ad#{version.before_comma.no_dots}.zip\"\n  name \"Air Display\"\n  desc \"Utility for using a tablet as a second monitor\"\n  homepage \"https://avatron.com/applications/air-display/\"\n\n  livecheck do\n    url \"https://www.avatron.com/updates/software/airdisplay/appcast.xml\"\n    strategy :sparkle\n  end\n\n  depends_on macos: \">= :mojave\"\n\n  pkg \"Air Display Installer.pkg\"\n\n  uninstall pkgutil: [\n    \"com.avatron.pkg.AirDisplay\",\n    \"com.avatron.pkg.AirDisplayHost2\",\n  ]\nend\n```\n\n#### Generating a token for the cask\n\nThe cask **token** is the mnemonic string people will use to interact with the cask via `brew install`, etc. The name of the cask **file** is simply the token with the extension `.rb` appended.\n\nThe easiest way to generate a token for a cask is to run this command:\n\n``` bash\n$(brew --repository homebrew/cask)/developer/bin/generate_cask_token \"/full/path/to/new/software.app\"\n```\n\nIf the software you wish to create a cask for is not installed, or does not have an associated App bundle, just give the full proper name of the software instead of a pathname:\n\n``` bash\n$(brew --repository homebrew/cask)/developer/bin/generate_cask_token \"Google Chrome\"\n```\n\nIf the `generate_cask_token` script does not work for you, see [Cask Token Details](#cask-token-details).\n\n#### Creating the cask file\n\nOnce you know the token, create your cask with the handy-dandy `brew create --cask` command:\n\n``` bash\nbrew create --cask download-url --set-name my-new-cask\n```\n\nThis will open `$EDITOR` with a template for your new cask, to be stored in the file `my-new-cask.rb`. Running the `create` command above will get you a template that looks like this:\n\n``` ruby\ncask \"my-new-cask\" do\n  version \"\"\n  sha256 \"\"\n\n  url \"download-url\"\n  name \"\"\n  desc \"\"\n  homepage \"\"\n\n  app \"\"\nend\n```\n\n#### Cask stanzas\n\nFill in the following stanzas for your cask:\n\n| name       | value                                                                                                                                                                                                                                                                                                                                                                 |\n|------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `version`  | application version                                                                                                                                                                                                                                                                                                                                                   |\n| `sha256`   | SHA-256 checksum of the file downloaded from `url`, calculated by the command `shasum -a 256 <file>`. Can be suppressed by using the special value `:no_check`. (see [`sha256` Stanza Details](cask-cookbook#stanza-sha256))                                                                                                                                          |\n| `url`      | URL to the `.dmg`/`.zip`/`.tgz`/`.tbz2` file that contains the application. A [`verified` parameter](cask-cookbook#when-url-and-homepage-domains-differ-add-verified) must be added if the hostnames in the `url` and `homepage` stanzas differ. [Block syntax](cask-cookbook#using-a-block-to-defer-code-execution) is available for URLs that change on every visit |\n| `name`     | the full and proper name defined by the vendor, and any useful alternate names (see [`name` Stanza Details](cask-cookbook#stanza-name))                                                                                                                                                                                                                               |\n| `desc`     | one-line description of the software (see [`desc` Stanza Details](cask-cookbook#stanza-desc))                                                                                                                                                                                                                                                                         |\n| `homepage` | application homepage; used for the `brew home` command                                                                                                                                                                                                                                                                                                                |\n| `app`      | relative path to an `.app` bundle that should be moved into the `/Applications` folder on installation (see [`app` Stanza Details](cask-cookbook#stanza-app))                                                                                                                                                                                                         |\n\nOther commonly used stanzas are:\n\n| name        | value                                                                                                                                                          |\n|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `livecheck` | Ruby block describing how to find updates for this cask (see [`livecheck` Stanza Details](cask-cookbook#stanza-livecheck))                                     |\n| `pkg`       | relative path to a `.pkg` file containing the distribution (see [`pkg` Stanza Details](cask-cookbook#stanza-pkg))                                              |\n| `caveats`   | a string or Ruby block providing the user with cask-specific information at install time (see [`caveats` Stanza Details](cask-cookbook#stanza-caveats))        |\n| `uninstall` | procedures to uninstall a cask. Optional unless the `pkg` stanza is used. (see [`uninstall` Stanza Details](cask-cookbook#stanza-uninstall))                   |\n| `zap`       | additional procedures for a more complete uninstall, including configuration files and shared resources (see [`zap` Stanza Details](cask-cookbook#stanza-zap)) |\n\nAdditional [`artifact` stanzas](cask-cookbook#at-least-one-artifact-stanza-is-also-required) may be needed for special use cases. Even more special-use stanzas are listed at [Optional Stanzas](cask-cookbook#optional-stanzas).\n\n#### Cask token details\n\nIf a token conflicts with an already-existing cask, authors should manually make the new token unique by prepending the vendor name. Example: [unison.rb](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/unison.rb) and [panic-unison.rb](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/panic-unison.rb).\n\nIf possible, avoid creating tokens that differ only by the placement of hyphens.\n\nTo generate a token manually, or to learn about exceptions for unusual cases, see the [Token Reference](cask-cookbook#token-reference).\n\n#### Archives with subfolders\n\nWhen a downloaded archive expands to a subfolder, the subfolder name must be included in the `app` value.\n\nExample:\n\n1.  Texmaker is downloaded to the file `TexmakerMacosxLion.zip`.\n2.  `TexmakerMacosxLion.zip` unzips to a folder called `TexmakerMacosxLion`.\n3.  The folder `TexmakerMacosxLion` contains the application `texmaker.app`.\n4.  So, the `app` stanza should include the subfolder as a relative path:\n\n``` ruby\napp \"TexmakerMacosxLion/texmaker.app\"\n```\n\n### Testing and auditing the cask\n\nGive it a shot with:\n\n``` bash\nexport HOMEBREW_NO_AUTO_UPDATE=1\nbrew install my-new-cask\n```\n\nDid it install? If something went wrong, edit your cask with `brew edit my-new-cask` to fix it.\n\nTest also if the uninstall works successfully:\n\n``` bash\nbrew uninstall my-new-cask\n```\n\nIf everything looks good, you’ll also want to make sure your cask passes audit with:\n\n``` bash\nbrew audit --new-cask my-new-cask\n```\n\nYou should also check stylistic details with `brew style`:\n\n``` bash\nbrew style --fix my-new-cask\n```\n\nKeep in mind that all these checks will be made when you submit your PR, so by doing them in advance you’re saving everyone a lot of time and trouble.\n\nIf your application and Homebrew Cask do not work well together, feel free to [file an issue](https://github.com/Homebrew/homebrew-cask#reporting-bugs) after checking out open issues.\n\n### Submitting the cask\n\n#### Finding a home for your cask\n\nSee the [Acceptable Casks documentation](acceptable-casks#finding-a-home-for-your-cask).\n\nHop into your Tap and check to make sure your new cask is there:\n\n``` bash\n$ cd \"$(brew --repository)\"/Library/Taps/homebrew/homebrew-cask\n$ git status\n# On branch master\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#       Casks/my-new-cask.rb\n```\n\nSo far, so good. Now make a feature branch `my-new-cask-branch` that you’ll use in your pull request:\n\n``` bash\n$ git checkout -b my-new-cask-branch\nSwitched to a new branch 'my-new-cask-branch'\n```\n\nStage your cask with:\n\n``` bash\ngit add Casks/my-new-cask.rb\n```\n\nYou can view the changes that are to be committed with:\n\n``` bash\ngit diff --cached\n```\n\nCommit your changes with:\n\n``` bash\ngit commit -v\n```\n\n#### Commit messages\n\nFor any Git project, some good rules for commit messages are:\n\n- The first line is the commit summary, 50 characters or less,\n- Followed by an empty line,\n- Followed by an explanation of the commit, wrapped to 72 characters.\n\nSee [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) for more.\n\nThe first line of a commit message becomes the **title** of a pull request on GitHub, like the subject line of an email. Including the key info in the first line will help us respond faster to your pull request.\n\nFor cask commits in the Homebrew Cask project, we like to include the application name, version number, and purpose of the commit in the first line.\n\nExamples of good, clear commit summaries:\n\n- `Add Transmission.app v1.0`\n- `Upgrade Transmission.app to v2.82`\n- `Fix checksum in Transmission.app cask`\n- `Add CodeBox Latest`\n\nExamples of difficult, unclear commit summaries:\n\n- `Upgrade to v2.82`\n- `Checksum was bad`\n\n#### Pushing\n\nPush your changes on the branch `my-new-cask-branch` to your GitHub account:\n\n``` bash\ngit push  my-new-cask-branch\n```\n\nIf you are using [GitHub two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa) and have set your remote repository as HTTPS you will need to [set up a personal access token](https://docs.github.com/en/repositories/creating-and-managing-repositories/troubleshooting-cloning-errors#provide-an-access-token) and use that instead of your password.\n\n#### Filing a pull request on GitHub\n\n##### a) use suggestion from `git push`\n\nThe `git push` command prints a suggestion for how to create a pull request:\n\n``` plaintext\nremote: Create a pull request for 'new-cask-cask' on GitHub by visiting:\nremote:      https://github.com//homebrew-cask/pull/new/my-new-cask-branch\n```\n\n##### b) use suggestion from GitHub’s website\n\nNow go to the [`homebrew-cask` GitHub repository](https://github.com/Homebrew/homebrew-cask). GitHub will often show your `my-new-cask-branch` branch with a handy button to `Compare & pull request`.\n\n##### c) manually create a pull request on GitHub\n\nOtherwise, click the `Contribute > Open pull request` button and choose to `compare across forks`. The base fork should be `Homebrew/homebrew-cask @ master`, and the head fork should be `my-github-username/homebrew-cask @ my-new-cask-branch`. You can also add any further comments to your pull request at this stage.\n\n##### Congratulations!\n\nYou are done now, and your cask should be pulled in or otherwise noticed in a while. If a maintainer suggests some changes, just make them on the `my-new-cask-branch` branch locally and [push](#pushing).\n\n### Cleaning up\n\nAfter your pull request is submitted, you should get yourself back onto `master`, so that `brew update` will pull down new casks properly:\n\n``` bash\ncd \"$(brew --repository)\"/Library/Taps/homebrew/homebrew-cask\ngit checkout master\n```\n\nIf earlier you set the variable `HOMEBREW_NO_AUTO_UPDATE` then clean it up with:\n\n``` bash\nunset HOMEBREW_NO_AUTO_UPDATE\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Adding-Software-to-Homebrew](https://docs.brew.sh/Adding-Software-to-Homebrew)"
- name: Anonymous Aggregate User Behaviour Analytics
  id: analytics
  summary: Homebrew gathers anonymous aggregate user behaviour analytics using Google Analytics
  description: "# Anonymous Aggregate User Behaviour Analytics\n\nHomebrew gathers anonymous aggregate user behaviour analytics using Google Analytics. You will be notified the first time you run `brew update` or install Homebrew. Analytics are not enabled until after this notice is shown, to ensure that you can [opt out](analytics#opting-out) without ever sending analytics data.\n\n## Why?\n\nHomebrew is provided free of charge and run entirely by volunteers in their spare time. As a result, we do not have the resources to do detailed user studies of Homebrew users to decide on how best to design future features and prioritise current work. Anonymous aggregate user analytics allow us to prioritise fixes and features based on how, where and when people use Homebrew. For example:\n\n- If a formula is widely used and is failing often it will enable us to prioritise fixing that formula over others.\n- Collecting the OS version allows us to decide which versions of macOS to prioritise for support and identify build failures that occur only on single versions.\n\n## How Long?\n\nHomebrew’s anonymous user and event data have a 14 month retention period. This is the [lowest possible value for Google Analytics](https://support.google.com/analytics/answer/7667196).\n\n## What?\n\nHomebrew’s analytics record some shared information for every event:\n\n- The Homebrew user agent, e.g. `Homebrew/3.3.0 (Macintosh; Intel Mac OS X 10.15.6) curl/7.64.1`.\n- The [Google Analytics version](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#v), i.e. `1`.\n- The Homebrew [analytics tracking ID](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#tid), e.g. `UA-75654628-1`.\n- A Homebrew [analytics user ID](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cid), e.g. `1BAB65CC-FE7F-4D8C-AB45-B7DB5A6BA9CB`. This is generated by `uuidgen` and stored in the repository-specific Git configuration variable `homebrew.analyticsuuid` within `$(brew --repository)/.git/config`. This does not allow us to track individual users, but does enable us to accurately measure user counts versus event counts. The ID is specific to the Homebrew package manager, and does not permit Homebrew maintainers to e.g. track you across websites you visit.\n- Whether the [Google Analytics anonymous IP setting](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#aip) is enabled, i.e. `1`.\n- The Homebrew [application name](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#an), e.g. `Homebrew`.\n- The Homebrew [application version](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#av), e.g. `2.5.0`.\n- The Homebrew [analytics hit type](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#t), e.g. `event`.\n\nHomebrew’s analytics records the following different events:\n\n- An `event` hit type with the `install` event category and the Homebrew formula from a non-private GitHub tap you install plus any used options (e.g. `wget --HEAD`) as the action, and an event label (e.g. `macOS 10.15, non-/usr/local, CI`) to indicate the OS version, non-standard installation location and invocation as part of CI. This allows us to identify which formulae need fixing and where more easily.\n- An `event` hit type with the `install_on_request` event category and the Homebrew formula from a non-private GitHub tap you have requested to install (e.g. when explicitly named with a `brew install`) plus options and an event label as above. This allows us to differentiate the formulae that users intend to install from those pulled in as dependencies.\n- An `event` hit type with the `cask_install` event category and the Homebrew cask from a non-private GitHub tap you install as the action and an event label as above. This allows us to identify which casks need fixing and where more easily.\n- An `event` hit type with the `BuildError` event category and the Homebrew formula plus options that failed to install as the action and an event label as above, e.g. `wget --HEAD` and `macOS 10.15`.\n\nYou can also view all the information that is sent by Homebrew’s analytics by setting `HOMEBREW_ANALYTICS_DEBUG=1` in your environment. Please note this will also stop any analytics from being sent.\n\nIt is impossible for the Homebrew developers to match any particular event to any particular user, even if we had access to the Homebrew analytics user ID (which we do not). An example of the most user-specific information we can see from Google Analytics:\n\nAs far as we can tell it would be impossible for Google to match the randomly generated Homebrew-only analytics user ID to any other Google Analytics user ID. If Google turned evil the only thing they could do would be to lie about anonymising IP addresses and attempt to match users based on IP addresses.\n\n## When/Where?\n\nHomebrew’s analytics are sent throughout Homebrew’s execution to Google Analytics over HTTPS.\n\n## Who?\n\nSummaries of installation and error analytics are [publicly available](https://formulae.brew.sh/analytics/). A JSON API is also available. The majority of Homebrew maintainers are not granted more detailed analytics data beyond these public resources.\n\n## How?\n\nThe code is viewable in [`analytics.rb`](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/utils/analytics.rb) and [`analytics.sh`](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/utils/analytics.sh). They are done in a separate background process and fail fast to avoid delaying any execution. They will fail immediately and silently if you have no network connection.\n\n## Opting out\n\nHomebrew analytics helps us maintainers and leaving it on is appreciated. However, if you want to opt out of Homebrew’s analytics, you can set this variable in your environment:\n\n``` bash\nexport HOMEBREW_NO_ANALYTICS=1\n```\n\nAlternatively, this will prevent analytics from ever being sent:\n\n``` bash\nbrew analytics off\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Analytics](https://docs.brew.sh/Analytics)"
- name: Bottles
  id: bottles
  summary: Bottles are produced by installing a formula with brew install --build-bottle <formula> and then bottling it with brew bottle <formula>. This generates a bottle file in the current directory and outputs the bottle DSL for insertion into the formula file
  description: "# Bottles (Binary Packages)\n\nBottles are produced by installing a formula with `brew install --build-bottle <formula>` and then bottling it with `brew bottle <formula>`. This generates a bottle file in the current directory and outputs the bottle DSL for insertion into the formula file.\n\n## Usage\n\nWhen the formula being installed defines a bottle matching your system, it will be downloaded and installed automatically when you run `brew install <formula>`.\n\nBottles will not be used if:\n\n- the user requests it (by specifying `--build-from-source`),\n- the formula requests it (with `pour_bottle?`),\n- any options are specified during installation (bottles are all compiled with default options),\n- the bottle is not up to date (e.g. missing or mismatched checksum),\n- or the bottle’s `cellar` is neither `:any` (it requires being installed to a specific Cellar path) nor equal to the current `HOMEBREW_CELLAR` (the required Cellar path does not match that of the current Homebrew installation).\n\n## Creation\n\nBottles for `homebrew/core` formulae are created by [Brew Test Bot](brew-test-bot) when a pull request is submitted. If the formula builds successfully on each supported platform and a maintainer approves the change, Brew Test Bot updates its `bottle do` block and uploads each bottle to [GitHub Packages](https://github.com/orgs/Homebrew/packages).\n\nBy default, bottles will be built for the oldest CPU supported by the OS/architecture you’re building for (Core 2 for 64-bit x86 operating systems). This ensures that bottles are compatible with all computers you might distribute them to. If you *really* want your bottles to be optimised for something else, you can pass the `--bottle-arch=` option to build for another architecture; for example, `brew install foo --build-bottle --bottle-arch=penryn`. Just remember that if you build for a newer architecture, some of your users might get binaries they can’t run and that would be sad!\n\n## Format\n\nBottles are simple gzipped tarballs of compiled binaries. The formula name, version, target operating system and rebuild version is stored in the filename, any other metadata is in the formula’s bottle DSL, and the formula definition is located within the bottle at `<formula>/<version>/.brew/<formula>.rb`.\n\n## Bottle DSL (Domain Specific Language)\n\nBottles are specified in formula definitions by a DSL contained within a `bottle do ... end` block.\n\nA simple (and typical) example:\n\n``` ruby\nbottle do\n  sha256 arm64_big_sur: \"a9ae578b05c3da46cedc07dd428d94a856aeae7f3ef80a0f405bf89b8cde893a\"\n  sha256 big_sur:       \"5dc376aa20241233b76e2ec2c1d4e862443a0250916b2838a1ff871e8a6dc2c5\"\n  sha256 catalina:      \"924afbbc16549d8c2b80544fd03104ff8c17a4b1460238e3ed17a1313391a2af\"\n  sha256 mojave:        \"678d338adc7d6e8c352800fe03fc56660c796bd6da23eda2b1411fed18bd0d8d\"\nend\n```\n\nA full example:\n\n``` ruby\nbottle do\n  root_url \"https://example.com\"\n  rebuild 4\n  sha256 cellar: \"/opt/homebrew/Cellar\", arm64_big_sur: \"a9ae578b05c3da46cedc07dd428d94a856aeae7f3ef80a0f405bf89b8cde893a\"\n  sha256 cellar: :any,                   big_sur:       \"5dc376aa20241233b76e2ec2c1d4e862443a0250916b2838a1ff871e8a6dc2c5\"\n  sha256                                 catalina:      \"924afbbc16549d8c2b80544fd03104ff8c17a4b1460238e3ed17a1313391a2af\"\n  sha256                                 mojave:        \"678d338adc7d6e8c352800fe03fc56660c796bd6da23eda2b1411fed18bd0d8d\"\nend\n```\n\n### Root URL (`root_url`)\n\nOptionally contains the URL root used to determine bottle URLs.\n\nBy default this is omitted and Homebrew’s default bottle URL root is used. This may be useful for taps that wish to provide bottles for their formulae or cater to a non-default `HOMEBREW_CELLAR`.\n\n### Cellar (`cellar`)\n\nOptionally contains the value of `HOMEBREW_CELLAR` in which the bottles were built.\n\nMost compiled software contains references to its compiled location, preventing it from being simply relocated anywhere on disk. A value of `:any` or `:any_skip_relocation` means that the bottle can be safely installed in any Cellar as it did not contain any references to the Cellar in which it was originally built. This can be omitted if the bottle was compiled for the given OS/architecture’s default `HOMEBREW_CELLAR`, as is done for all bottles built by Brew Test Bot.\n\n### Rebuild version (`rebuild`)\n\nOptionally contains the rebuild version of the bottle.\n\nSometimes bottles may need be updated without bumping the version or revision of the formula, e.g. if a new patch was applied. In such cases `rebuild` will have a value of `1` or more.\n\n### Checksum (`sha256`)\n\nContains the SHA-256 hash of the bottle for the given OS/architecture.\n\n## Formula DSL\n\nAn additional bottle-related method is available in the formula DSL.\n\n### Pour bottle (`pour_bottle?`)\n\nOptionally returns a boolean to indicate whether a bottle should be used when installing this formula.\n\nFor example a bottle may break if a related formula has been compiled with non-default options, so this method could check for that case and return `false`.\n\nA full example:\n\n``` ruby\npour_bottle? do\n  reason \"The bottle needs to be installed into #{Homebrew::DEFAULT_PREFIX}.\"\n  satisfy { HOMEBREW_PREFIX.to_s == Homebrew::DEFAULT_PREFIX }\nend\n```\n\nCommonly used `pour_bottle?` conditions can be added as preset symbols to the `pour_bottle?` method, allowing them to be specified like this:\n\n``` ruby\npour_bottle? only_if: :default_prefix\npour_bottle? only_if: :clt_installed\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Bottles](https://docs.brew.sh/Bottles)"
- name: brew
  id: manpage
  summary: Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn’t include with macOS
  description: "# brew(1) – The Missing Package Manager for macOS (or Linux)\n\n## SYNOPSIS\n\n`brew` `--version`  \n`brew` *`command`* \\[`--verbose`\\|`-v`\\] \\[*`options`*\\] \\[*`formula`*\\] …\n\n## DESCRIPTION\n\nHomebrew is the easiest and most flexible way to install the UNIX tools Apple didn’t include with macOS. It can also install software not packaged for your Linux distribution to your home directory without requiring `sudo`.\n\n## TERMINOLOGY\n\n**formula**: Homebrew package definition built from upstream sources\n\n**cask**: Homebrew package definition that installs macOS native applications\n\n**keg**: installation destination directory of a given **formula** version e.g. `/usr/local/Cellar/foo/0.1`\n\n**rack**: directory containing one or more versioned kegs e.g. `/usr/local/Cellar/foo`\n\n**keg-only**: a **formula** is **keg-only** if it is not symlinked into Homebrew’s prefix (e.g. `/usr/local`)\n\n**cellar**: directory containing one or more named **racks** e.g. `/usr/local/Cellar`\n\n**Caskroom**: directory containing one or more named **casks** e.g. `/usr/local/Caskroom`\n\n**external command**: `brew` subcommand defined outside of the Homebrew/brew GitHub repository\n\n**tap**: directory (and usually Git repository) of **formulae**, **casks** and/or **external commands**\n\n**bottle**: pre-built **keg** poured into the **cellar**/**rack** instead of building from upstream sources\n\n## ESSENTIAL COMMANDS\n\nFor the full command list, see the [COMMANDS](#commands) section.\n\nWith `--verbose` or `--debug`, many commands print extra debugging information. Note that these options should only appear after a command.\n\nSome command behaviour can be customised with environment variables; see the [ENVIRONMENT](#environment) section.\n\n### `install` *`formula`*\n\nInstall *`formula`*.\n\n*`formula`* is usually the name of the formula to install, but it has other syntaxes which are listed in the [SPECIFYING FORMULAE](#specifying-formulae) section.\n\n### `uninstall` *`formula`*\n\nUninstall *`formula`*.\n\n### `list`\n\nList all installed formulae.\n\n### `search` \\[*`text`*\\|`/`*`text`*`/`\\]\n\nPerform a substring search of cask tokens and formula names for *`text`*. If *`text`* is flanked by slashes, it is interpreted as a regular expression. The search for *`text`* is extended online to `homebrew/core` and `homebrew/cask`. If no search term is provided, all locally available formulae are listed.\n\n## COMMANDS\n\n### `analytics` \\[*`subcommand`*\\]\n\nControl Homebrew’s anonymous aggregate user behaviour analytics. Read more at [https://docs.brew.sh/Analytics](analytics).\n\n`brew analytics` \\[`state`\\]  \nDisplay the current state of Homebrew’s analytics.\n\n`brew analytics` (`on`\\|`off`)  \nTurn Homebrew’s analytics on or off respectively.\n\n`brew analytics regenerate-uuid`  \nRegenerate the UUID used for Homebrew’s analytics.\n\n### `autoremove` \\[*`--dry-run`*\\]\n\nUninstall formulae that were only installed as a dependency of another formula and are now no longer needed.\n\n- `-n`, `--dry-run`: List what would be uninstalled, but do not actually uninstall anything.\n\n### `casks`\n\nList all locally installable casks including short names.\n\n### `cleanup` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nRemove stale lock files and outdated downloads for all formulae and casks, and remove old versions of installed formulae. If arguments are specified, only do this for the given formulae and casks. Removes all downloads more than 120 days old. This can be adjusted with `HOMEBREW_CLEANUP_MAX_AGE_DAYS`.\n\n- `--prune`: Remove all cache files older than specified *`days`*. If you want to remove everything, use `--prune=all`.\n- `-n`, `--dry-run`: Show what would be removed, but do not actually remove anything.\n- `-s`: Scrub the cache, including downloads for even the latest versions. Note that downloads for any installed formulae or casks will still not be deleted. If you want to delete those too: `rm -rf \"$(brew --cache)\"`\n- `--prune-prefix`: Only prune the symlinks and directories from the prefix and remove no other files.\n\n### `commands` \\[*`--quiet`*\\] \\[*`--include-aliases`*\\]\n\nShow lists of built-in and external commands.\n\n- `-q`, `--quiet`: List only the names of commands without category headers.\n- `--include-aliases`: Include aliases of internal commands.\n\n### `completions` \\[*`subcommand`*\\]\n\nControl whether Homebrew automatically links external tap shell completion files. Read more at [https://docs.brew.sh/Shell-Completion](shell-completion).\n\n`brew completions` \\[`state`\\]  \nDisplay the current state of Homebrew’s completions.\n\n`brew completions` (`link`\\|`unlink`)  \nLink or unlink Homebrew’s completions.\n\n### `config`, `--config`\n\nShow Homebrew and system configuration info useful for debugging. If you file a bug report, you will be required to provide this information.\n\n### `deps` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nShow dependencies for *`formula`*. Additional options specific to *`formula`* may be appended to the command. When given multiple formula arguments, show the intersection of dependencies for each formula.\n\n- `-n`: Sort dependencies in topological order.\n- `--1`: Only show dependencies one level down, instead of recursing.\n- `--union`: Show the union of dependencies for multiple *`formula`*, instead of the intersection.\n- `--full-name`: List dependencies by their full name.\n- `--include-build`: Include `:build` dependencies for *`formula`*.\n- `--include-optional`: Include `:optional` dependencies for *`formula`*.\n- `--include-test`: Include `:test` dependencies for *`formula`* (non-recursive).\n- `--skip-recommended`: Skip `:recommended` dependencies for *`formula`*.\n- `--include-requirements`: Include requirements in addition to dependencies for *`formula`*.\n- `--tree`: Show dependencies as a tree. When given multiple formula arguments, show individual trees for each formula.\n- `--graph`: Show dependencies as a directed graph.\n- `--dot`: Show text-based graph description in DOT format.\n- `--annotate`: Mark any build, test, optional, or recommended dependencies as such in the output.\n- `--installed`: List dependencies for formulae that are currently installed. If *`formula`* is specified, list only its dependencies that are currently installed.\n- `--all`: List dependencies for all available formulae.\n- `--for-each`: Switch into the mode used by the `--all` option, but only list dependencies for each provided *`formula`*, one formula per line. This is used for debugging the `--installed`/`--all` display mode.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `desc` \\[*`options`*\\] *`formula`*\\|*`cask`*\\|*`text`*\\|`/`*`regex`*`/` \\[…\\]\n\nDisplay *`formula`*’s name and one-line description. Formula descriptions are cached; the cache is created on the first search, making that search slower than subsequent ones.\n\n- `-s`, `--search`: Search both names and descriptions for *`text`*. If *`text`* is flanked by slashes, it is interpreted as a regular expression.\n- `-n`, `--name`: Search just names for *`text`*. If *`text`* is flanked by slashes, it is interpreted as a regular expression.\n- `-d`, `--description`: Search just descriptions for *`text`*. If *`text`* is flanked by slashes, it is interpreted as a regular expression.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `developer` \\[*`subcommand`*\\]\n\nControl Homebrew’s developer mode. When developer mode is enabled, `brew update` will update Homebrew to the latest commit on the `master` branch instead of the latest stable version along with some other behaviour changes.\n\n`brew developer` \\[`state`\\]  \nDisplay the current state of Homebrew’s developer mode.\n\n`brew developer` (`on`\\|`off`)  \nTurn Homebrew’s developer mode on or off respectively.\n\n### `doctor`, `dr` \\[*`--list-checks`*\\] \\[*`--audit-debug`*\\] \\[*`diagnostic_check`* …\\]\n\nCheck your system for potential problems. Will exit with a non-zero status if any potential problems are found. Please note that these warnings are just used to help the Homebrew maintainers with debugging if you file an issue. If everything you use Homebrew for is working fine: please don’t worry or file an issue; just ignore this.\n\n- `--list-checks`: List all audit methods, which can be run individually if provided as arguments.\n- `-D`, `--audit-debug`: Enable debugging and profiling of audit methods.\n\n### `fetch` \\[*`options`*\\] *`formula`*\\|*`cask`* \\[…\\]\n\nDownload a bottle (if available) or source packages for *`formula`*e and binaries for *`cask`*s. For files, also print SHA-256 checksums.\n\n- `--bottle-tag`: Download a bottle for given tag.\n- `--HEAD`: Fetch HEAD version instead of stable version.\n- `-f`, `--force`: Remove a previously cached version and re-fetch.\n- `-v`, `--verbose`: Do a verbose VCS checkout, if the URL represents a VCS. This is useful for seeing if an existing VCS cache has been updated.\n- `--retry`: Retry if downloading fails or re-download if the checksum of a previously cached version no longer matches.\n- `--deps`: Also download dependencies for any listed *`formula`*.\n- `-s`, `--build-from-source`: Download source packages rather than a bottle.\n- `--build-bottle`: Download source packages (for eventual bottling) rather than a bottle.\n- `--force-bottle`: Download a bottle if it exists for the current or newest version of macOS, even if it would not be used during installation.\n- `--[no-]quarantine`: Disable/enable quarantining of downloads (default: enabled).\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `formulae`\n\nList all locally installable formulae including short names.\n\n### `gist-logs` \\[*`options`*\\] *`formula`*\n\nUpload logs for a failed build of *`formula`* to a new Gist. Presents an error message if no logs are found.\n\n- `--with-hostname`: Include the hostname in the Gist.\n- `-n`, `--new-issue`: Automatically create a new issue in the appropriate GitHub repository after creating the Gist.\n- `-p`, `--private`: The Gist will be marked private and will not appear in listings but will be accessible with its link.\n\n### `home`, `homepage` \\[*`--formula`*\\] \\[*`--cask`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nOpen a *`formula`* or *`cask`*’s homepage in a browser, or open Homebrew’s own homepage if no argument is provided.\n\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `info`, `abv` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nDisplay brief statistics for your Homebrew installation.\n\nIf a *`formula`* or *`cask`* is provided, show summary of information about it.\n\n- `--analytics`: List global Homebrew analytics data or, if specified, installation and build error data for *`formula`* (provided neither `HOMEBREW_NO_ANALYTICS` nor `HOMEBREW_NO_GITHUB_API` are set).\n- `--days`: How many days of analytics data to retrieve. The value for *`days`* must be `30`, `90` or `365`. The default is `30`.\n- `--category`: Which type of analytics data to retrieve. The value for *`category`* must be `install`, `install-on-request` or `build-error`; `cask-install` or `os-version` may be specified if *`formula`* is not. The default is `install`.\n- `--github`: Open the GitHub source page for *`formula`* and *`cask`* in a browser. To view the history locally: `brew log -p` *`formula`* or *`cask`*\n- `--json`: Print a JSON representation. Currently the default value for *`version`* is `v1` for *`formula`*. For *`formula`* and *`cask`* use `v2`. See the docs for examples of using the JSON output: [https://docs.brew.sh/Querying-Brew](querying-brew)\n- `--installed`: Print JSON of formulae that are currently installed.\n- `--all`: Print JSON of all available formulae.\n- `--variations`: Include the variations hash in each formula’s JSON output.\n- `-v`, `--verbose`: Show more verbose analytics data for *`formula`*.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `install` \\[*`options`*\\] *`formula`*\\|*`cask`* \\[…\\]\n\nInstall a *`formula`* or *`cask`*. Additional options specific to a *`formula`* may be appended to the command.\n\nUnless `HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK` is set, `brew upgrade` or `brew reinstall` will be run for outdated dependents and dependents with broken linkage, respectively.\n\nUnless `HOMEBREW_NO_INSTALL_CLEANUP` is set, `brew cleanup` will then be run for the installed formulae or, every 30 days, for all formulae.\n\nUnless `HOMEBREW_NO_INSTALL_UPGRADE` is set, `brew install *`formula`*` will upgrade *`formula`* if it is already installed but outdated.\n\n- `-d`, `--debug`: If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.\n- `-f`, `--force`: Install formulae without checking for previously installed keg-only or non-migrated versions. When installing casks, overwrite existing files (binaries and symlinks are excluded, unless originally from the same cask).\n- `-v`, `--verbose`: Print the verification and postinstall steps.\n- `--formula`: Treat all named arguments as formulae.\n- `--ignore-dependencies`: An unsupported Homebrew development flag to skip installing any dependencies of any kind. If the dependencies are not already present, the formula will have issues. If you’re not developing Homebrew, consider adjusting your PATH rather than using this flag.\n- `--only-dependencies`: Install the dependencies with specified options but do not install the formula itself.\n- `--cc`: Attempt to compile using the specified *`compiler`*, which should be the name of the compiler’s executable, e.g. `gcc-7` for GCC 7. In order to use LLVM’s clang, specify `llvm_clang`. To use the Apple-provided clang, specify `clang`. This option will only accept compilers that are provided by Homebrew or bundled with macOS. Please do not file issues if you encounter errors while using this option.\n- `-s`, `--build-from-source`: Compile *`formula`* from source even if a bottle is provided. Dependencies will still be installed from bottles if they are available.\n- `--force-bottle`: Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.\n- `--include-test`: Install testing dependencies required to run `brew test` *`formula`*.\n- `--HEAD`: If *`formula`* defines it, install the HEAD version, aka. main, trunk, unstable, master.\n- `--fetch-HEAD`: Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository’s HEAD will only be checked for updates when a new stable or development version has been released.\n- `--keep-tmp`: Retain the temporary files created during installation.\n- `--debug-symbols`: Generate debug symbols on build. Source will be retained in a cache directory.\n- `--build-bottle`: Prepare the formula for eventual bottling during installation, skipping any post-install steps.\n- `--bottle-arch`: Optimise bottles for the specified architecture rather than the oldest architecture supported by the version of macOS the bottles are built on.\n- `--display-times`: Print install times for each package at the end of the run.\n- `-i`, `--interactive`: Download and patch *`formula`*, then open a shell. This allows the user to run `./configure --help` and otherwise determine how to turn the software package into a Homebrew package.\n- `-g`, `--git`: Create a Git repository, useful for creating patches to the software.\n- `--overwrite`: Delete files that already exist in the prefix while linking.\n- `--cask`: Treat all named arguments as casks.\n- `--[no-]binaries`: Disable/enable linking of helper executables (default: enabled).\n- `--require-sha`: Require all casks to have a checksum.\n- `--[no-]quarantine`: Disable/enable quarantining of downloads (default: enabled).\n- `--skip-cask-deps`: Skip installing cask dependencies.\n- `--zap`: For use with `brew reinstall --cask`. Remove all files associated with a cask. *May remove files which are shared between applications.*\n\n### `leaves` \\[*`--installed-on-request`*\\] \\[*`--installed-as-dependency`*\\]\n\nList installed formulae that are not dependencies of another installed formula.\n\n- `-r`, `--installed-on-request`: Only list leaves that were manually installed.\n- `-p`, `--installed-as-dependency`: Only list leaves that were installed as dependencies.\n\n### `link`, `ln` \\[*`options`*\\] *`installed_formula`* \\[…\\]\n\nSymlink all of *`formula`*’s installed files into Homebrew’s prefix. This is done automatically when you install formulae but can be useful for DIY installations.\n\n- `--overwrite`: Delete files that already exist in the prefix while linking.\n- `-n`, `--dry-run`: List files which would be linked or deleted by `brew link --overwrite` without actually linking or deleting any files.\n- `-f`, `--force`: Allow keg-only formulae to be linked.\n- `--HEAD`: Link the HEAD version of the formula if it is installed.\n\n### `list`, `ls` \\[*`options`*\\] \\[*`installed_formula`*\\|*`installed_cask`* …\\]\n\nList all installed formulae and casks.\n\nIf *`formula`* is provided, summarise the paths within its current keg. If *`cask`* is provided, list its artifacts.\n\n- `--formula`: List only formulae, or treat all named arguments as formulae.\n- `--cask`: List only casks, or treat all named arguments as casks.\n- `--full-name`: Print formulae with fully-qualified names. Unless `--full-name`, `--versions` or `--pinned` are passed, other options (i.e. `-1`, `-l`, `-r` and `-t`) are passed to `ls`(1) which produces the actual output.\n- `--versions`: Show the version number for installed formulae, or only the specified formulae if *`formula`* are provided.\n- `--multiple`: Only show formulae with multiple versions installed.\n- `--pinned`: List only pinned formulae, or only the specified (pinned) formulae if *`formula`* are provided. See also `pin`, `unpin`.\n- `-1`: Force output to be one entry per line. This is the default when output is not to a terminal.\n- `-l`: List formulae and/or casks in long format. Has no effect when a formula or cask name is passed as an argument.\n- `-r`: Reverse the order of the formulae and/or casks sort to list the oldest entries first. Has no effect when a formula or cask name is passed as an argument.\n- `-t`: Sort formulae and/or casks by time modified, listing most recently modified first. Has no effect when a formula or cask name is passed as an argument.\n\n### `log` \\[*`options`*\\] \\[*`formula`*\\|*`cask`*\\]\n\nShow the `git log` for *`formula`* or *`cask`*, or show the log for the Homebrew repository if no formula or cask is provided.\n\n- `-p`, `--patch`: Also print patch from commit.\n- `--stat`: Also print diffstat from commit.\n- `--oneline`: Print only one line per commit.\n- `-1`: Print only one commit.\n- `-n`, `--max-count`: Print only a specified number of commits.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `migrate` \\[*`--force`*\\] \\[*`--dry-run`*\\] *`installed_formula`* \\[…\\]\n\nMigrate renamed packages to new names, where *`formula`* are old names of packages.\n\n- `-f`, `--force`: Treat installed *`formula`* and provided *`formula`* as if they are from the same taps and migrate them anyway.\n- `-n`, `--dry-run`: Show what would be migrated, but do not actually migrate anything.\n\n### `missing` \\[*`--hide`*`=`\\] \\[*`formula`* …\\]\n\nCheck the given *`formula`* kegs for missing dependencies. If no *`formula`* are provided, check all kegs. Will exit with a non-zero status if any kegs are found to be missing dependencies.\n\n- `--hide`: Act as if none of the specified *`hidden`* are installed. *`hidden`* should be a comma-separated list of formulae.\n\n### `options` \\[*`options`*\\] \\[*`formula`* …\\]\n\nShow install options specific to *`formula`*.\n\n- `--compact`: Show all options on a single line separated by spaces.\n- `--installed`: Show options for formulae that are currently installed.\n- `--all`: Show options for all available formulae.\n- `--command`: Show options for the specified *`command`*.\n\n### `outdated` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nList installed casks and formulae that have an updated version available. By default, version information is displayed in interactive shells, and suppressed otherwise.\n\n- `-q`, `--quiet`: List only the names of outdated kegs (takes precedence over `--verbose`).\n- `-v`, `--verbose`: Include detailed version information.\n- `--formula`: List only outdated formulae.\n- `--cask`: List only outdated casks.\n- `--json`: Print output in JSON format. There are two versions: `v1` and `v2`. `v1` is deprecated and is currently the default if no version is specified. `v2` prints outdated formulae and casks.\n- `--fetch-HEAD`: Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository’s HEAD will only be checked for updates when a new stable or development version has been released.\n- `--greedy`: Also include outdated casks with `auto_updates true` or `version :latest`.\n- `--greedy-latest`: Also include outdated casks including those with `version :latest`.\n- `--greedy-auto-updates`: Also include outdated casks including those with `auto_updates true`.\n\n### `pin` *`installed_formula`* \\[…\\]\n\nPin the specified *`formula`*, preventing them from being upgraded when issuing the `brew upgrade` *`formula`* command. See also `unpin`.\n\n### `postinstall` *`installed_formula`* \\[…\\]\n\nRerun the post-install steps for *`formula`*.\n\n### `readall` \\[*`--aliases`*\\] \\[*`--syntax`*\\] \\[*`tap`* …\\]\n\nImport all items from the specified *`tap`*, or from all installed taps if none is provided. This can be useful for debugging issues across all items when making significant changes to `formula.rb`, testing the performance of loading all items or checking if any current formulae/casks have Ruby issues.\n\n- `--aliases`: Verify any alias symlinks in each tap.\n- `--syntax`: Syntax-check all of Homebrew’s Ruby files (if no `*`tap`*` is passed).\n\n### `reinstall` \\[*`options`*\\] *`formula`*\\|*`cask`* \\[…\\]\n\nUninstall and then reinstall a *`formula`* or *`cask`* using the same options it was originally installed with, plus any appended options specific to a *`formula`*.\n\nUnless `HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK` is set, `brew upgrade` or `brew reinstall` will be run for outdated dependents and dependents with broken linkage, respectively.\n\nUnless `HOMEBREW_NO_INSTALL_CLEANUP` is set, `brew cleanup` will then be run for the reinstalled formulae or, every 30 days, for all formulae.\n\n- `-d`, `--debug`: If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.\n- `-f`, `--force`: Install without checking for previously installed keg-only or non-migrated versions.\n- `-v`, `--verbose`: Print the verification and postinstall steps.\n- `--formula`: Treat all named arguments as formulae.\n- `-s`, `--build-from-source`: Compile *`formula`* from source even if a bottle is available.\n- `-i`, `--interactive`: Download and patch *`formula`*, then open a shell. This allows the user to run `./configure --help` and otherwise determine how to turn the software package into a Homebrew package.\n- `--force-bottle`: Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.\n- `--keep-tmp`: Retain the temporary files created during installation.\n- `--debug-symbols`: Generate debug symbols on build. Source will be retained in a cache directory.\n- `--display-times`: Print install times for each formula at the end of the run.\n- `-g`, `--git`: Create a Git repository, useful for creating patches to the software.\n- `--cask`: Treat all named arguments as casks.\n- `--[no-]binaries`: Disable/enable linking of helper executables (default: enabled).\n- `--require-sha`: Require all casks to have a checksum.\n- `--[no-]quarantine`: Disable/enable quarantining of downloads (default: enabled).\n- `--skip-cask-deps`: Skip installing cask dependencies.\n- `--zap`: For use with `brew reinstall --cask`. Remove all files associated with a cask. *May remove files which are shared between applications.*\n\n### `search`, `-S` \\[*`options`*\\] *`text`*\\|`/`*`regex`*`/` \\[…\\]\n\nPerform a substring search of cask tokens and formula names for *`text`*. If *`text`* is flanked by slashes, it is interpreted as a regular expression. The search for *`text`* is extended online to `homebrew/core` and `homebrew/cask`.\n\n- `--formula`: Search online and locally for formulae.\n- `--cask`: Search online and locally for casks.\n- `--desc`: Search for formulae with a description matching *`text`* and casks with a name or description matching *`text`*.\n- `--pull-request`: Search for GitHub pull requests containing *`text`*.\n- `--open`: Search for only open GitHub pull requests.\n- `--closed`: Search for only closed GitHub pull requests.\n- `--repology`: Search for *`text`* in the given database.\n- `--macports`: Search for *`text`* in the given database.\n- `--fink`: Search for *`text`* in the given database.\n- `--opensuse`: Search for *`text`* in the given database.\n- `--fedora`: Search for *`text`* in the given database.\n- `--archlinux`: Search for *`text`* in the given database.\n- `--debian`: Search for *`text`* in the given database.\n- `--ubuntu`: Search for *`text`* in the given database.\n\n### `shellenv`\n\nPrint export statements. When run in a shell, this installation of Homebrew will be added to your `PATH`, `MANPATH`, and `INFOPATH`.\n\nThe variables `HOMEBREW_PREFIX`, `HOMEBREW_CELLAR` and `HOMEBREW_REPOSITORY` are also exported to avoid querying them multiple times. To help guarantee idempotence, this command produces no output when Homebrew’s `bin` and `sbin` directories are first and second respectively in your `PATH`. Consider adding evaluation of this command’s output to your dotfiles (e.g. `~/.profile`, `~/.bash_profile`, or `~/.zprofile`) with: `eval \"$(brew shellenv)\"`\n\n### `tap` \\[*`options`*\\] \\[*`user`*`/`*`repo`*\\] \\[*`URL`*\\]\n\nTap a formula repository.\n\nIf no arguments are provided, list all installed taps.\n\nWith *`URL`* unspecified, tap a formula repository from GitHub using HTTPS. Since so many taps are hosted on GitHub, this command is a shortcut for `brew tap` *`user`*`/`*`repo`* `https://github.com/`*`user`*`/homebrew-`*`repo`*.\n\nWith *`URL`* specified, tap a formula repository from anywhere, using any transport protocol that `git`(1) handles. The one-argument form of `tap` simplifies but also limits. This two-argument command makes no assumptions, so taps can be cloned from places other than GitHub and using protocols other than HTTPS, e.g. SSH, git, HTTP, FTP(S), rsync.\n\n- `--[no-]force-auto-update`: Auto-update tap even if it is not hosted on GitHub. By default, only taps hosted on GitHub are auto-updated (for performance reasons).\n- `--custom-remote`: Install or change a tap with a custom remote. Useful for mirrors.\n- `--repair`: Migrate tapped formulae from symlink-based to directory-based structure.\n- `--list-pinned`: List all pinned taps.\n\n### `tap-info` \\[*`--installed`*\\] \\[*`--json`*\\] \\[*`tap`* …\\]\n\nShow detailed information about one or more *`tap`*s.\n\nIf no *`tap`* names are provided, display brief statistics for all installed taps.\n\n- `--installed`: Show information on each installed tap.\n- `--json`: Print a JSON representation of *`tap`*. Currently the default and only accepted value for *`version`* is `v1`. See the docs for examples of using the JSON output: [https://docs.brew.sh/Querying-Brew](querying-brew)\n\n### `uninstall`, `remove`, `rm` \\[*`options`*\\] *`installed_formula`*\\|*`installed_cask`* \\[…\\]\n\nUninstall a *`formula`* or *`cask`*.\n\n- `-f`, `--force`: Delete all installed versions of *`formula`*. Uninstall even if *`cask`* is not installed, overwrite existing files and ignore errors when removing files.\n- `--zap`: Remove all files associated with a *`cask`*. *May remove files which are shared between applications.*\n- `--ignore-dependencies`: Don’t fail uninstall, even if *`formula`* is a dependency of any installed formulae.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `unlink` \\[*`--dry-run`*\\] *`installed_formula`* \\[…\\]\n\nRemove symlinks for *`formula`* from Homebrew’s prefix. This can be useful for temporarily disabling a formula: `brew unlink` *`formula`* `&&` *`commands`* `&& brew link` *`formula`*\n\n- `-n`, `--dry-run`: List files which would be unlinked without actually unlinking or deleting any files.\n\n### `unpin` *`installed_formula`* \\[…\\]\n\nUnpin *`formula`*, allowing them to be upgraded by `brew upgrade` *`formula`*. See also `pin`.\n\n### `untap` \\[*`--force`*\\] *`tap`* \\[…\\]\n\nRemove a tapped formula repository.\n\n- `-f`, `--force`: Untap even if formulae or casks from this tap are currently installed.\n\n### `update` \\[*`options`*\\]\n\nFetch the newest version of Homebrew and all formulae from GitHub using `git`(1) and perform any necessary migrations.\n\n- `--merge`: Use `git merge` to apply updates (rather than `git rebase`).\n- `--auto-update`: Run on auto-updates (e.g. before `brew install`). Skips some slower steps.\n- `-f`, `--force`: Always do a slower, full update check (even if unnecessary).\n\n### `update-reset` \\[*`repository`* …\\]\n\nFetch and reset Homebrew and all tap repositories (or any specified *`repository`*) using `git`(1) to their latest `origin/HEAD`.\n\n*Note:* this will destroy all your uncommitted or committed changes.\n\n### `upgrade` \\[*`options`*\\] \\[*`outdated_formula`*\\|*`outdated_cask`* …\\]\n\nUpgrade outdated casks and outdated, unpinned formulae using the same options they were originally installed with, plus any appended brew formula options. If *`cask`* or *`formula`* are specified, upgrade only the given *`cask`* or *`formula`* kegs (unless they are pinned; see `pin`, `unpin`).\n\nUnless `HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK` is set, `brew upgrade` or `brew reinstall` will be run for outdated dependents and dependents with broken linkage, respectively.\n\nUnless `HOMEBREW_NO_INSTALL_CLEANUP` is set, `brew cleanup` will then be run for the upgraded formulae or, every 30 days, for all formulae.\n\n- `-d`, `--debug`: If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.\n- `-f`, `--force`: Install formulae without checking for previously installed keg-only or non-migrated versions. When installing casks, overwrite existing files (binaries and symlinks are excluded, unless originally from the same cask).\n- `-v`, `--verbose`: Print the verification and postinstall steps.\n- `-n`, `--dry-run`: Show what would be upgraded, but do not actually upgrade anything.\n- `--formula`: Treat all named arguments as formulae. If no named arguments are specified, upgrade only outdated formulae.\n- `-s`, `--build-from-source`: Compile *`formula`* from source even if a bottle is available.\n- `-i`, `--interactive`: Download and patch *`formula`*, then open a shell. This allows the user to run `./configure --help` and otherwise determine how to turn the software package into a Homebrew package.\n- `--force-bottle`: Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.\n- `--fetch-HEAD`: Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository’s HEAD will only be checked for updates when a new stable or development version has been released.\n- `--ignore-pinned`: Set a successful exit status even if pinned formulae are not upgraded.\n- `--keep-tmp`: Retain the temporary files created during installation.\n- `--debug-symbols`: Generate debug symbols on build. Source will be retained in a cache directory.\n- `--display-times`: Print install times for each package at the end of the run.\n- `--cask`: Treat all named arguments as casks. If no named arguments are specified, upgrade only outdated casks.\n- `--[no-]binaries`: Disable/enable linking of helper executables (default: enabled).\n- `--require-sha`: Require all casks to have a checksum.\n- `--[no-]quarantine`: Disable/enable quarantining of downloads (default: enabled).\n- `--skip-cask-deps`: Skip installing cask dependencies.\n- `--greedy`: Also include casks with `auto_updates true` or `version :latest`.\n- `--greedy-latest`: Also include casks with `version :latest`.\n- `--greedy-auto-updates`: Also include casks with `auto_updates true`.\n\n### `uses` \\[*`options`*\\] *`formula`* \\[…\\]\n\nShow formulae and casks that specify *`formula`* as a dependency; that is, show dependents of *`formula`*. When given multiple formula arguments, show the intersection of formulae that use *`formula`*. By default, `uses` shows all formulae and casks that specify *`formula`* as a required or recommended dependency for their stable builds.\n\n- `--recursive`: Resolve more than one level of dependencies.\n- `--installed`: Only list formulae and casks that are currently installed.\n- `--include-build`: Include all formulae that specify *`formula`* as `:build` type dependency.\n- `--include-test`: Include all formulae that specify *`formula`* as `:test` type dependency.\n- `--include-optional`: Include all formulae that specify *`formula`* as `:optional` type dependency.\n- `--skip-recommended`: Skip all formulae that specify *`formula`* as `:recommended` type dependency.\n- `--formula`: Include only formulae.\n- `--cask`: Include only casks.\n\n### `--cache` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nDisplay Homebrew’s download cache. See also `HOMEBREW_CACHE`.\n\nIf *`formula`* is provided, display the file or directory used to cache *`formula`*.\n\n- `-s`, `--build-from-source`: Show the cache file used when building from source.\n- `--force-bottle`: Show the cache file used when pouring a bottle.\n- `--bottle-tag`: Show the cache file used when pouring a bottle for the given tag.\n- `--HEAD`: Show the cache file used when building from HEAD.\n- `--formula`: Only show cache files for formulae.\n- `--cask`: Only show cache files for casks.\n\n### `--caskroom` \\[*`cask`* …\\]\n\nDisplay Homebrew’s Caskroom path.\n\nIf *`cask`* is provided, display the location in the Caskroom where *`cask`* would be installed, without any sort of versioned directory as the last path.\n\n### `--cellar` \\[*`formula`* …\\]\n\nDisplay Homebrew’s Cellar path. *Default:* `$(brew --prefix)/Cellar`, or if that directory doesn’t exist, `$(brew --repository)/Cellar`.\n\nIf *`formula`* is provided, display the location in the Cellar where *`formula`* would be installed, without any sort of versioned directory as the last path.\n\n### `--env`, `environment` \\[*`--shell`*`=`\\] \\[*`--plain`*\\] \\[*`formula`* …\\]\n\nSummarise Homebrew’s build environment as a plain list.\n\nIf the command’s output is sent through a pipe and no shell is specified, the list is formatted for export to `bash`(1) unless `--plain` is passed.\n\n- `--shell`: Generate a list of environment variables for the specified shell, or `--shell=auto` to detect the current shell.\n- `--plain`: Generate plain output even when piped.\n\n### `--prefix` \\[*`--unbrewed`*\\] \\[*`--installed`*\\] \\[*`formula`* …\\]\n\nDisplay Homebrew’s install path. *Default:*\n\n- macOS Intel: `/usr/local`\n- macOS ARM: `/opt/homebrew`\n- Linux: `/home/linuxbrew/.linuxbrew`\n\nIf *`formula`* is provided, display the location where *`formula`* is or would be installed.\n\n- `--unbrewed`: List files in Homebrew’s prefix not installed by Homebrew.\n- `--installed`: Outputs nothing and returns a failing status code if *`formula`* is not installed.\n\n### `--repository`, `--repo` \\[*`tap`* …\\]\n\nDisplay where Homebrew’s git repository is located.\n\nIf *`user`*`/`*`repo`* are provided, display where tap *`user`*`/`*`repo`*’s directory is located.\n\n### `--version`, `-v`\n\nPrint the version numbers of Homebrew, Homebrew/homebrew-core and Homebrew/homebrew-cask (if tapped) to standard output.\n\n## DEVELOPER COMMANDS\n\n### `audit` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nCheck *`formula`* for Homebrew coding style violations. This should be run before submitting a new formula or cask. If no *`formula`*\\|*`cask`* are provided, check all locally available formulae and casks and skip style checks. Will exit with a non-zero status if any errors are found.\n\n- `--strict`: Run additional, stricter style checks.\n- `--git`: Run additional, slower style checks that navigate the Git repository.\n- `--online`: Run additional, slower style checks that require a network connection.\n- `--installed`: Only check formulae and casks that are currently installed.\n- `--new`: Run various additional style checks to determine if a new formula or cask is eligible for Homebrew. This should be used when creating new formula and implies `--strict` and `--online`.\n- `--[no-]appcast`: Audit the appcast.\n- `--token-conflicts`: Audit for token conflicts.\n- `--tap`: Check the formulae within the given tap, specified as *`user`*`/`*`repo`*.\n- `--fix`: Fix style violations automatically using RuboCop’s auto-correct feature.\n- `--display-cop-names`: Include the RuboCop cop name for each violation in the output.\n- `--display-filename`: Prefix every line of output with the file or formula name being audited, to make output easy to grep.\n- `--display-failures-only`: Only display casks that fail the audit. This is the default for formulae.\n- `--skip-style`: Skip running non-RuboCop style checks. Useful if you plan on running `brew style` separately. Enabled by default unless a formula is specified by name.\n- `-D`, `--audit-debug`: Enable debugging and profiling of audit methods.\n- `--only`: Specify a comma-separated *`method`* list to only run the methods named `audit_`*`method`*.\n- `--except`: Specify a comma-separated *`method`* list to skip running the methods named `audit_`*`method`*.\n- `--only-cops`: Specify a comma-separated *`cops`* list to check for violations of only the listed RuboCop cops.\n- `--except-cops`: Specify a comma-separated *`cops`* list to skip checking for violations of the listed RuboCop cops.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `bottle` \\[*`options`*\\] *`installed_formula`*\\|*`file`* \\[…\\]\n\nGenerate a bottle (binary package) from a formula that was installed with `--build-bottle`. If the formula specifies a rebuild version, it will be incremented in the generated DSL. Passing `--keep-old` will attempt to keep it at its original value, while `--no-rebuild` will remove it.\n\n- `--skip-relocation`: Do not check if the bottle can be marked as relocatable.\n- `--force-core-tap`: Build a bottle even if *`formula`* is not in `homebrew/core` or any installed taps.\n- `--no-rebuild`: If the formula specifies a rebuild version, remove it from the generated DSL.\n- `--keep-old`: If the formula specifies a rebuild version, attempt to preserve its value in the generated DSL.\n- `--json`: Write bottle information to a JSON file, which can be used as the value for `--merge`.\n- `--merge`: Generate an updated bottle block for a formula and optionally merge it into the formula file. Instead of a formula name, requires the path to a JSON file generated with `brew bottle --json` *`formula`*.\n- `--write`: Write changes to the formula file. A new commit will be generated unless `--no-commit` is passed.\n- `--no-commit`: When passed with `--write`, a new commit will not generated after writing changes to the formula file.\n- `--only-json-tab`: When passed with `--json`, the tab will be written to the JSON file but not the bottle.\n- `--committer`: Specify a committer name and email in `git`’s standard author format.\n- `--root-url`: Use the specified *`URL`* as the root of the bottle’s URL instead of Homebrew’s default.\n- `--root-url-using`: Use the specified download strategy class for downloading the bottle’s URL instead of Homebrew’s default.\n\n### `bump` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nDisplay out-of-date brew formulae and the latest version available. If the returned current and livecheck versions differ or when querying specific formulae, also displays whether a pull request has been opened with the URL.\n\n- `--full-name`: Print formulae/casks with fully-qualified names.\n- `--no-pull-requests`: Do not retrieve pull requests from GitHub.\n- `--formula`: Check only formulae.\n- `--cask`: Check only casks.\n- `--open-pr`: Open a pull request for the new version if there are none already open.\n- `--limit`: Limit number of package results returned.\n- `--start-with`: Letter or word that the list of package results should alphabetically follow.\n\n### `bump-cask-pr` \\[*`options`*\\] *`cask`*\n\nCreate a pull request to update *`cask`* with a new version.\n\nA best effort to determine the *`SHA-256`* will be made if the value is not supplied by the user.\n\n- `-n`, `--dry-run`: Print what would be done rather than doing it.\n- `--write-only`: Make the expected file modifications without taking any Git actions.\n- `--commit`: When passed with `--write-only`, generate a new commit after writing changes to the cask file.\n- `--no-audit`: Don’t run `brew audit` before opening the PR.\n- `--online`: Run `brew audit --online` before opening the PR.\n- `--no-style`: Don’t run `brew style --fix` before opening the PR.\n- `--no-browse`: Print the pull request URL instead of opening in a browser.\n- `--no-fork`: Don’t try to fork the repository.\n- `--version`: Specify the new *`version`* for the cask.\n- `--message`: Append *`message`* to the default pull request message.\n- `--url`: Specify the *`URL`* for the new download.\n- `--sha256`: Specify the *`SHA-256`* checksum of the new download.\n- `--fork-org`: Use the specified GitHub organization for forking.\n- `-f`, `--force`: Ignore duplicate open PRs.\n\n### `bump-formula-pr` \\[*`options`*\\] \\[*`formula`*\\]\n\nCreate a pull request to update *`formula`* with a new URL or a new tag.\n\nIf a *`URL`* is specified, the *`SHA-256`* checksum of the new download should also be specified. A best effort to determine the *`SHA-256`* and *`formula`* name will be made if either or both values are not supplied by the user.\n\nIf a *`tag`* is specified, the Git commit *`revision`* corresponding to that tag should also be specified. A best effort to determine the *`revision`* will be made if the value is not supplied by the user.\n\nIf a *`version`* is specified, a best effort to determine the *`URL`* and *`SHA-256`* or the *`tag`* and *`revision`* will be made if both values are not supplied by the user.\n\n*Note:* this command cannot be used to transition a formula from a URL-and-SHA-256 style specification into a tag-and-revision style specification, nor vice versa. It must use whichever style specification the formula already uses.\n\n- `-n`, `--dry-run`: Print what would be done rather than doing it.\n- `--write-only`: Make the expected file modifications without taking any Git actions.\n- `--commit`: When passed with `--write-only`, generate a new commit after writing changes to the formula file.\n- `--no-audit`: Don’t run `brew audit` before opening the PR.\n- `--strict`: Run `brew audit --strict` before opening the PR.\n- `--online`: Run `brew audit --online` before opening the PR.\n- `--no-browse`: Print the pull request URL instead of opening in a browser.\n- `--no-fork`: Don’t try to fork the repository.\n- `--mirror`: Use the specified *`URL`* as a mirror URL. If *`URL`* is a comma-separated list of URLs, multiple mirrors will be added.\n- `--fork-org`: Use the specified GitHub organization for forking.\n- `--version`: Use the specified *`version`* to override the value parsed from the URL or tag. Note that `--version=0` can be used to delete an existing version override from a formula if it has become redundant.\n- `--message`: Append *`message`* to the default pull request message.\n- `--url`: Specify the *`URL`* for the new download. If a *`URL`* is specified, the *`SHA-256`* checksum of the new download should also be specified.\n- `--sha256`: Specify the *`SHA-256`* checksum of the new download.\n- `--tag`: Specify the new git commit *`tag`* for the formula.\n- `--revision`: Specify the new commit *`revision`* corresponding to the specified git *`tag`* or specified *`version`*.\n- `-f`, `--force`: Ignore duplicate open PRs. Remove all mirrors if `--mirror` was not specified.\n- `--python-package-name`: Use the specified *`package-name`* when finding Python resources for *`formula`*. If no package name is specified, it will be inferred from the formula’s stable URL.\n- `--python-extra-packages`: Include these additional Python packages when finding resources.\n- `--python-exclude-packages`: Exclude these Python packages when finding resources.\n\n### `bump-revision` \\[*`options`*\\] *`formula`* \\[…\\]\n\nCreate a commit to increment the revision of *`formula`*. If no revision is present, “revision 1” will be added.\n\n- `-n`, `--dry-run`: Print what would be done rather than doing it.\n- `--remove-bottle-block`: Remove the bottle block in addition to bumping the revision.\n- `--write-only`: Make the expected file modifications without taking any Git actions.\n- `--message`: Append *`message`* to the default commit message.\n\n### `bump-unversioned-casks` \\[*`options`*\\] *`cask`*\\|*`tap`* \\[…\\]\n\nCheck all casks with unversioned URLs in a given *`tap`* for updates.\n\n- `-n`, `--dry-run`: Do everything except caching state and opening pull requests.\n- `--limit`: Maximum runtime in minutes.\n- `--state-file`: File for caching state.\n\n### `cat` \\[*`--formula`*\\] \\[*`--cask`*\\] *`formula`*\\|*`cask`*\n\nDisplay the source of a *`formula`* or *`cask`*.\n\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n\n### `command` *`command`* \\[…\\]\n\nDisplay the path to the file being used when invoking `brew` *`cmd`*.\n\n### `contributions` *`email|name`* \\[*`--repositories`*`=`\\]\n\nContributions to Homebrew repos for a user.\n\nThe first argument is a name (e.g. “BrewTestBot”) or an email address (e.g. “brewtestbot@brew.sh”).\n\n- `--repositories`: Specify a comma-separated (no spaces) list of repositories to search. Supported repositories: `brew`, `core`, `cask`, `aliases`, `autoupdate`, `bundle`, `command-not-found`, `test-bot`, `services`, `cask-drivers`, `cask-fonts` and `cask-versions`.Omitting this flag, or specifying `--repositories=all`, will search all repositories.\n- `--from`: Date (ISO-8601 format) to start searching contributions.\n- `--to`: Date (ISO-8601 format) to stop searching contributions.\n\n### `create` \\[*`options`*\\] *`URL`*\n\nGenerate a formula or, with `--cask`, a cask for the downloadable file at *`URL`* and open it in the editor. Homebrew will attempt to automatically derive the formula name and version, but if it fails, you’ll have to make your own template. The `wget` formula serves as a simple example. For the complete API, see: <https://rubydoc.brew.sh/Formula>\n\n- `--autotools`: Create a basic template for an Autotools-style build.\n- `--cask`: Create a basic template for a cask.\n- `--cmake`: Create a basic template for a CMake-style build.\n- `--crystal`: Create a basic template for a Crystal build.\n- `--go`: Create a basic template for a Go build.\n- `--meson`: Create a basic template for a Meson-style build.\n- `--node`: Create a basic template for a Node build.\n- `--perl`: Create a basic template for a Perl build.\n- `--python`: Create a basic template for a Python build.\n- `--ruby`: Create a basic template for a Ruby build.\n- `--rust`: Create a basic template for a Rust build.\n- `--no-fetch`: Homebrew will not download *`URL`* to the cache and will thus not add its SHA-256 to the formula for you, nor will it check the GitHub API for GitHub projects (to fill out its description and homepage).\n- `--HEAD`: Indicate that *`URL`* points to the package’s repository rather than a file.\n- `--set-name`: Explicitly set the *`name`* of the new formula or cask.\n- `--set-version`: Explicitly set the *`version`* of the new formula or cask.\n- `--set-license`: Explicitly set the *`license`* of the new formula.\n- `--tap`: Generate the new formula within the given tap, specified as *`user`*`/`*`repo`*.\n- `-f`, `--force`: Ignore errors for disallowed formula names and names that shadow aliases.\n\n### `dispatch-build-bottle` \\[*`options`*\\] *`formula`* \\[…\\]\n\nBuild bottles for these formulae with GitHub Actions.\n\n- `--tap`: Target tap repository (default: `homebrew/core`).\n- `--timeout`: Build timeout (in minutes, default: 60).\n- `--issue`: If specified, post a comment to this issue number if the job fails.\n- `--macos`: Version(s) of macOS the bottle should be built for.\n- `--workflow`: Dispatch specified workflow (default: `dispatch-build-bottle.yml`).\n- `--upload`: Upload built bottles.\n- `--linux`: Dispatch bottle for Linux (using GitHub runners).\n- `--linux-self-hosted`: Dispatch bottle for Linux (using self-hosted runner).\n- `--linux-wheezy`: Use Debian Wheezy container for building the bottle on Linux.\n\n### `edit` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nOpen a *`formula`* or *`cask`* in the editor set by `EDITOR` or `HOMEBREW_EDITOR`, or open the Homebrew repository for editing if no formula is provided.\n\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n- `--print-path`: Print the file path to be edited, without opening an editor.\n\n### `extract` \\[*`--version`*`=`\\] \\[*`--force`*\\] *`formula`* *`tap`*\n\nLook through repository history to find the most recent version of *`formula`* and create a copy in *`tap`*. Specifically, the command will create the new formula file at *`tap`*`/Formula/`*`formula`*`@`*`version`*`.rb`. If the tap is not installed yet, attempt to install/clone the tap before continuing. To extract a formula from a tap that is not `homebrew/core` use its fully-qualified form of *`user`*`/`*`repo`*`/`*`formula`*.\n\n- `--version`: Extract the specified *`version`* of *`formula`* instead of the most recent.\n- `-f`, `--force`: Overwrite the destination formula if it already exists.\n\n### `formula` *`formula`* \\[…\\]\n\nDisplay the path where *`formula`* is located.\n\n### `generate-man-completions` \\[*`--fail-if-not-changed`*\\]\n\nGenerate Homebrew’s manpages and shell completions.\n\n- `--fail-if-not-changed`: Return a failing status code if no changes are detected in the manpage outputs. This can be used to notify CI when the manpages are out of date. Additionally, the date used in new manpages will match those in the existing manpages (to allow comparison without factoring in the date).\n\n### `install-bundler-gems` \\[*`--groups`*`=`\\]\n\nInstall Homebrew’s Bundler gems.\n\n- `--groups`: Installs the specified comma-separated list of gem groups (default: last used).\n\n### `irb` \\[*`--examples`*\\] \\[*`--pry`*\\]\n\nEnter the interactive Homebrew Ruby shell.\n\n- `--examples`: Show several examples.\n- `--pry`: Use Pry instead of IRB. Implied if `HOMEBREW_PRY` is set.\n\n### `linkage` \\[*`options`*\\] \\[*`installed_formula`* …\\]\n\nCheck the library links from the given *`formula`* kegs. If no *`formula`* are provided, check all kegs. Raises an error if run on uninstalled formulae.\n\n- `--test`: Show only missing libraries and exit with a non-zero status if any missing libraries are found.\n- `--strict`: Exit with a non-zero status if any undeclared dependencies with linkage are found.\n- `--reverse`: For every library that a keg references, print its dylib path followed by the binaries that link to it.\n- `--cached`: Print the cached linkage values stored in `HOMEBREW_CACHE`, set by a previous `brew linkage` run.\n\n### `livecheck`, `lc` \\[*`options`*\\] \\[*`formula`*\\|*`cask`* …\\]\n\nCheck for newer versions of formulae and/or casks from upstream.\n\nIf no formula or cask argument is passed, the list of formulae and casks to check is taken from `HOMEBREW_LIVECHECK_WATCHLIST` or `~/.brew_livecheck_watchlist`.\n\n- `--full-name`: Print formulae/casks with fully-qualified names.\n- `--tap`: Check formulae/casks within the given tap, specified as *`user`*`/`*`repo`*.\n- `--all`: Check all available formulae/casks.\n- `--installed`: Check formulae/casks that are currently installed.\n- `--newer-only`: Show the latest version only if it’s newer than the formula/cask.\n- `--json`: Output information in JSON format.\n- `-q`, `--quiet`: Suppress warnings, don’t print a progress bar for JSON output.\n- `--formula`: Only check formulae.\n- `--cask`: Only check casks.\n\n### `pr-automerge` \\[*`options`*\\]\n\nFind pull requests that can be automatically merged using `brew pr-publish`.\n\n- `--tap`: Target tap repository (default: `homebrew/core`).\n- `--workflow`: Workflow file to use with `brew pr-publish`.\n- `--with-label`: Pull requests must have this label.\n- `--without-labels`: Pull requests must not have these labels (default: `do not merge`, `new formula`, `automerge-skip`).\n- `--without-approval`: Pull requests do not require approval to be merged.\n- `--publish`: Run `brew pr-publish` on matching pull requests.\n- `--no-autosquash`: Instruct `brew pr-publish` to skip automatically reformatting and rewording commits in the pull request to the preferred format.\n- `--ignore-failures`: Include pull requests that have failing status checks.\n\n### `pr-publish` \\[*`options`*\\] *`pull_request`* \\[…\\]\n\nPublish bottles for a pull request with GitHub Actions. Requires write access to the repository.\n\n- `--no-autosquash`: Skip automatically reformatting and rewording commits in the pull request to the preferred format, even if supported on the target tap.\n- `--branch`: Branch to publish to (default: `master`).\n- `--message`: Message to include when autosquashing revision bumps, deletions, and rebuilds.\n- `--tap`: Target tap repository (default: `homebrew/core`).\n- `--workflow`: Target workflow filename (default: `publish-commit-bottles.yml`).\n\n### `pr-pull` \\[*`options`*\\] *`pull_request`* \\[…\\]\n\nDownload and publish bottles, and apply the bottle commit from a pull request with artifacts generated by GitHub Actions. Requires write access to the repository.\n\n- `--no-upload`: Download the bottles but don’t upload them.\n- `--no-commit`: Do not generate a new commit before uploading.\n- `-n`, `--dry-run`: Print what would be done rather than doing it.\n- `--clean`: Do not amend the commits from pull requests.\n- `--keep-old`: If the formula specifies a rebuild version, attempt to preserve its value in the generated DSL.\n- `--no-autosquash`: Skip automatically reformatting and rewording commits in the pull request to our preferred format.\n- `--branch-okay`: Do not warn if pulling to a branch besides the repository default (useful for testing).\n- `--resolve`: When a patch fails to apply, leave in progress and allow user to resolve, instead of aborting.\n- `--warn-on-upload-failure`: Warn instead of raising an error if the bottle upload fails. Useful for repairing bottle uploads that previously failed.\n- `--committer`: Specify a committer name and email in `git`’s standard author format.\n- `--message`: Message to include when autosquashing revision bumps, deletions, and rebuilds.\n- `--artifact`: Download artifacts with the specified name (default: `bottles`).\n- `--tap`: Target tap repository (default: `homebrew/core`).\n- `--root-url`: Use the specified *`URL`* as the root of the bottle’s URL instead of Homebrew’s default.\n- `--root-url-using`: Use the specified download strategy class for downloading the bottle’s URL instead of Homebrew’s default.\n- `--workflows`: Retrieve artifacts from the specified workflow (default: `tests.yml`). Can be a comma-separated list to include multiple workflows.\n- `--ignore-missing-artifacts`: Comma-separated list of workflows which can be ignored if they have not been run.\n\n### `pr-upload` \\[*`options`*\\]\n\nApply the bottle commit and publish bottles to a host.\n\n- `--keep-old`: If the formula specifies a rebuild version, attempt to preserve its value in the generated DSL.\n- `-n`, `--dry-run`: Print what would be done rather than doing it.\n- `--no-commit`: Do not generate a new commit before uploading.\n- `--warn-on-upload-failure`: Warn instead of raising an error if the bottle upload fails. Useful for repairing bottle uploads that previously failed.\n- `--upload-only`: Skip running `brew bottle` before uploading.\n- `--committer`: Specify a committer name and email in `git`’s standard author format.\n- `--root-url`: Use the specified *`URL`* as the root of the bottle’s URL instead of Homebrew’s default.\n- `--root-url-using`: Use the specified download strategy class for downloading the bottle’s URL instead of Homebrew’s default.\n\n### `prof` \\[*`--stackprof`*\\] *`command`* \\[…\\]\n\nRun Homebrew with a Ruby profiler. For example, `brew prof readall`.\n\n- `--stackprof`: Use `stackprof` instead of `ruby-prof` (the default).\n\n### `release` \\[*`--major`*\\] \\[*`--minor`*\\]\n\nCreate a new draft Homebrew/brew release with the appropriate version number and release notes.\n\nBy default, `brew release` will bump the patch version number. Pass `--major` or `--minor` to bump the major or minor version numbers, respectively. The command will fail if the previous major or minor release was made less than one month ago.\n\nRequires write access to the Homebrew/brew repository.\n\n- `--major`: Create a major release.\n- `--minor`: Create a minor release.\n\n### `rubocop`\n\nInstalls, configures and runs Homebrew’s `rubocop`.\n\n### `ruby` \\[*`options`*\\] (`-e` *`text`*\\|*`file`*)\n\nRun a Ruby instance with Homebrew’s libraries loaded. For example, `brew ruby -e \"puts :gcc.f.deps\"` or `brew ruby script.rb`.\n\n- `-r`: Load a library using `require`.\n- `-e`: Execute the given text string as a script.\n\n### `sh` \\[*`--env`*`=`\\] \\[*`--cmd`*`=`\\] \\[*`file`*\\]\n\nEnter an interactive shell for Homebrew’s build environment. Use years-battle-hardened build logic to help your `./configure && make && make install` and even your `gem install` succeed. Especially handy if you run Homebrew in an Xcode-only configuration since it adds tools like `make` to your `PATH` which build systems would not find otherwise.\n\n- `--env`: Use the standard `PATH` instead of superenv’s when `std` is passed.\n- `-c`, `--cmd`: Execute commands in a non-interactive shell.\n\n### `sponsors`\n\nUpdate the list of GitHub Sponsors in the `Homebrew/brew` README.\n\n### `style` \\[*`options`*\\] \\[*`file`*\\|*`tap`*\\|*`formula`*\\|*`cask`* …\\]\n\nCheck formulae or files for conformance to Homebrew style guidelines.\n\nLists of *`file`*, *`tap`* and *`formula`* may not be combined. If none are provided, `style` will run style checks on the whole Homebrew library, including core code and all formulae.\n\n- `--fix`: Fix style violations automatically using RuboCop’s auto-correct feature.\n- `--display-cop-names`: Include the RuboCop cop name for each violation in the output.\n- `--reset-cache`: Reset the RuboCop cache.\n- `--formula`: Treat all named arguments as formulae.\n- `--cask`: Treat all named arguments as casks.\n- `--only-cops`: Specify a comma-separated *`cops`* list to check for violations of only the listed RuboCop cops.\n- `--except-cops`: Specify a comma-separated *`cops`* list to skip checking for violations of the listed RuboCop cops.\n\n### `tap-new` \\[*`options`*\\] *`user`*`/`*`repo`*\n\nGenerate the template files for a new tap.\n\n- `--no-git`: Don’t initialize a Git repository for the tap.\n- `--pull-label`: Label name for pull requests ready to be pulled (default: `pr-pull`).\n- `--branch`: Initialize Git repository and setup GitHub Actions workflows with the specified branch name (default: `main`).\n- `--github-packages`: Upload bottles to GitHub Packages.\n\n### `test` \\[*`options`*\\] *`installed_formula`* \\[…\\]\n\nRun the test method provided by an installed formula. There is no standard output or return code, but generally it should notify the user if something is wrong with the installed formula.\n\n*Example:* `brew install jruby && brew test jruby`\n\n- `-f`, `--force`: Test formulae even if they are unlinked.\n- `--HEAD`: Test the head version of a formula.\n- `--keep-tmp`: Retain the temporary files created for the test.\n- `--retry`: Retry if a testing fails.\n\n### `tests` \\[*`options`*\\]\n\nRun Homebrew’s unit and integration tests.\n\n- `--coverage`: Generate code coverage reports.\n- `--generic`: Run only OS-agnostic tests.\n- `--no-compat`: Do not load the compatibility layer when running tests.\n- `--online`: Include tests that use the GitHub API and tests that use any of the taps for official external commands.\n- `--byebug`: Enable debugging using byebug.\n- `--changed`: Only runs tests on files that were changed from the master branch.\n- `--only`: Run only *`test_script`*`_spec.rb`. Appending `:`*`line_number`* will start at a specific line.\n- `--seed`: Randomise tests with the specified *`value`* instead of a random seed.\n\n### `typecheck`, `tc` \\[*`options`*\\]\n\nCheck for typechecking errors using Sorbet.\n\n- `--fix`: Automatically fix type errors.\n- `-q`, `--quiet`: Silence all non-critical errors.\n- `--update`: Update RBI files.\n- `--all`: Regenerate all RBI files rather than just updated gems.\n- `--suggest-typed`: Try upgrading `typed` sigils.\n- `--fail-if-not-changed`: Return a failing status code if all gems are up to date and gem definitions do not need a tapioca update.\n- `--dir`: Typecheck all files in a specific directory.\n- `--file`: Typecheck a single file.\n- `--ignore`: Ignores input files that contain the given string in their paths (relative to the input path passed to Sorbet).\n\n### `unbottled` \\[*`options`*\\] \\[*`formula`* …\\]\n\nShow the unbottled dependents of formulae.\n\n- `--tag`: Use the specified bottle tag (e.g. `big_sur`) instead of the current OS.\n- `--dependents`: Skip getting analytics data and sort by number of dependents instead.\n- `--all`: Print the number of unbottled and total formulae.\n\n### `unpack` \\[*`options`*\\] *`formula`* \\[…\\]\n\nUnpack the source files for *`formula`* into subdirectories of the current working directory.\n\n- `--destdir`: Create subdirectories in the directory named by *`path`* instead.\n- `--patch`: Patches for *`formula`* will be applied to the unpacked source.\n- `-g`, `--git`: Initialise a Git repository in the unpacked source. This is useful for creating patches for the software.\n- `-f`, `--force`: Overwrite the destination directory if it already exists.\n\n### `update-license-data` \\[*`--fail-if-not-changed`*\\]\n\nUpdate SPDX license data in the Homebrew repository.\n\n- `--fail-if-not-changed`: Return a failing status code if current license data’s version is the same as the upstream. This can be used to notify CI when the SPDX license data is out of date.\n\n### `update-maintainers`\n\nUpdate the list of maintainers in the `Homebrew/brew` README.\n\n### `update-python-resources` \\[*`options`*\\] *`formula`* \\[…\\]\n\nUpdate versions for PyPI resource blocks in *`formula`*.\n\n- `-p`, `--print-only`: Print the updated resource blocks instead of changing *`formula`*.\n- `-s`, `--silent`: Suppress any output.\n- `--ignore-non-pypi-packages`: Don’t fail if *`formula`* is not a PyPI package.\n- `--version`: Use the specified *`version`* when finding resources for *`formula`*. If no version is specified, the current version for *`formula`* will be used.\n- `--package-name`: Use the specified *`package-name`* when finding resources for *`formula`*. If no package name is specified, it will be inferred from the formula’s stable URL.\n- `--extra-packages`: Include these additional packages when finding resources.\n- `--exclude-packages`: Exclude these packages when finding resources.\n\n### `update-test` \\[*`options`*\\]\n\nRun a test of `brew update` with a new repository clone. If no options are passed, use `origin/master` as the start commit.\n\n- `--to-tag`: Set `HOMEBREW_UPDATE_TO_TAG` to test updating between tags.\n- `--keep-tmp`: Retain the temporary directory containing the new repository clone.\n- `--commit`: Use the specified *`commit`* as the start commit.\n- `--before`: Use the commit at the specified *`date`* as the start commit.\n\n### `vendor-gems` \\[*`--update`*`=`\\]\n\nInstall and commit Homebrew’s vendored gems.\n\n- `--update`: Update all vendored Gems to the latest version.\n\n## GLOBAL CASK OPTIONS\n\nThese options are applicable to the `install`, `reinstall`, and `upgrade` subcommands with the `--cask` flag.\n\n- `--appdir`: Target location for Applications (default: `/Applications`).\n\n- `--colorpickerdir`: Target location for Color Pickers (default: `~/Library/ColorPickers`).\n\n- `--prefpanedir`: Target location for Preference Panes (default: `~/Library/PreferencePanes`).\n\n- `--qlplugindir`: Target location for QuickLook Plugins (default: `~/Library/QuickLook`).\n\n- `--mdimporterdir`: Target location for Spotlight Plugins (default: `~/Library/Spotlight`).\n\n- `--dictionarydir`: Target location for Dictionaries (default: `~/Library/Dictionaries`).\n\n- `--fontdir`: Target location for Fonts (default: `~/Library/Fonts`).\n\n- `--servicedir`: Target location for Services (default: `~/Library/Services`).\n\n- `--input-methoddir`: Target location for Input Methods (default: `~/Library/Input Methods`).\n\n- `--internet-plugindir`: Target location for Internet Plugins (default: `~/Library/Internet Plug-Ins`).\n\n- `--audio-unit-plugindir`: Target location for Audio Unit Plugins (default: `~/Library/Audio/Plug-Ins/Components`).\n\n- `--vst-plugindir`: Target location for VST Plugins (default: `~/Library/Audio/Plug-Ins/VST`).\n\n- `--vst3-plugindir`: Target location for VST3 Plugins (default: `~/Library/Audio/Plug-Ins/VST3`).\n\n- `--screen-saverdir`: Target location for Screen Savers (default: `~/Library/Screen Savers`).\n\n- `--language`: Comma-separated list of language codes to prefer for cask installation. The first matching language is used, otherwise it reverts to the cask’s default language. The default value is the language of your system.\n\n## GLOBAL OPTIONS\n\nThese options are applicable across multiple subcommands.\n\n- `-d`, `--debug`: Display any debugging information.\n\n- `-q`, `--quiet`: Make some output more quiet.\n\n- `-v`, `--verbose`: Make some output more verbose.\n\n- `-h`, `--help`: Show this message.\n\n## OFFICIAL EXTERNAL COMMANDS\n\n### `alias` \\[*`alias`* … \\| *`alias`*=*`command`*\\]\n\nShow existing aliases. If no aliases are given, print the whole list.\n\n- `--edit`: Edit aliases in a text editor. Either one or all aliases may be opened at once. If the given alias doesn’t exist it’ll be pre-populated with a template.\n\n### `autoupdate` *`subcommand`* \\[*`interval`*\\] \\[*`options`*\\]\n\nAn easy, convenient way to automatically update Homebrew.\n\nThis script will run `brew update` in the background once every 24 hours (by default) until explicitly told to stop, utilising `launchd`.\n\n`brew autoupdate start` \\[*`interval`*\\] \\[*`options`*\\]  \nStart autoupdating either once every `interval` hours or once every 24 hours. Please note the interval has to be passed in seconds, so 12 hours would be `brew autoupdate start 43200`. Pass `--upgrade` or `--cleanup` to automatically run `brew upgrade` and/or `brew cleanup` respectively. Pass `--enable-notification` to send a notification when the autoupdate process has finished successfully.\n\n`brew autoupdate stop`  \nStop autoupdating, but retain plist & logs.\n\n`brew autoupdate delete`  \nCancel the autoupdate, delete the plist and logs.\n\n`brew autoupdate status`  \nPrints the current status of this tool.\n\n`brew autoupdate version`  \nOutput this tool’s current version, and a short changelog.\n\n- `--upgrade`: Automatically upgrade your installed formulae. If the Caskroom exists locally Casks will be upgraded as well. Must be passed with `start`.\n- `--greedy`: Upgrade casks with –greedy (include auto-updating casks). Must be passed with `start`.\n- `--cleanup`: Automatically clean brew’s cache and logs. Must be passed with `start`.\n- `--enable-notification`: Send a notification when the autoupdate process has finished successfully, if `terminal-notifier` is installed & found. Must be passed with `start`. \\<NOTE: Notifications are enabled by default on macOS Catalina and newer.\\>\n- `--immediate`: Starts the autoupdate command immediately, instead of waiting for one interval (24 hours by default) to pass first. Must be passed with `start`.\n\n### `bundle` \\[*`subcommand`*\\]\n\nBundler for non-Ruby dependencies from Homebrew, Homebrew Cask, Mac App Store and Whalebrew.\n\n`brew bundle` \\[`install`\\]  \nInstall and upgrade (by default) all dependencies from the `Brewfile`.\n\nYou can specify the `Brewfile` location using `--file` or by setting the `HOMEBREW_BUNDLE_FILE` environment variable.\n\nYou can skip the installation of dependencies by adding space-separated values to one or more of the following environment variables: `HOMEBREW_BUNDLE_BREW_SKIP`, `HOMEBREW_BUNDLE_CASK_SKIP`, `HOMEBREW_BUNDLE_MAS_SKIP`, `HOMEBREW_BUNDLE_WHALEBREW_SKIP`, `HOMEBREW_BUNDLE_TAP_SKIP`.\n\n`brew bundle` will output a `Brewfile.lock.json` in the same directory as the `Brewfile` if all dependencies are installed successfully. This contains dependency and system status information which can be useful in debugging `brew bundle` failures and replicating a “last known good build” state. You can opt-out of this behaviour by setting the `HOMEBREW_BUNDLE_NO_LOCK` environment variable or passing the `--no-lock` option. You may wish to check this file into the same version control system as your `Brewfile` (or ensure your version control system ignores it if you’d prefer to rely on debugging information from a local machine).\n\n`brew bundle dump`  \nWrite all installed casks/formulae/images/taps into a `Brewfile` in the current directory.\n\n`brew bundle cleanup`  \nUninstall all dependencies not listed from the `Brewfile`.\n\nThis workflow is useful for maintainers or testers who regularly install lots of formulae.\n\n`brew bundle check`  \nCheck if all dependencies are installed from the `Brewfile`.\n\nThis provides a successful exit code if everything is up-to-date, making it useful for scripting.\n\n`brew bundle list`  \nList all dependencies present in the `Brewfile`.\n\nBy default, only Homebrew dependencies are listed.\n\n`brew bundle exec` *`command`*  \nRun an external command in an isolated build environment based on the `Brewfile` dependencies.\n\nThis sanitized build environment ignores unrequested dependencies, which makes sure that things you didn’t specify in your `Brewfile` won’t get picked up by commands like `bundle install`, `npm install`, etc. It will also add compiler flags which will help find keg-only dependencies like `openssl`, `icu4c`, etc.\n\n- `--file`: Read the `Brewfile` from this location. Use `--file=-` to pipe to stdin/stdout.\n- `--global`: Read the `Brewfile` from `~/.Brewfile`.\n- `-v`, `--verbose`: `install` prints output from commands as they are run. `check` lists all missing dependencies.\n- `--no-upgrade`: `install` won’t run `brew upgrade` on outdated dependencies. Note they may still be upgraded by `brew install` if needed.\n- `-f`, `--force`: `dump` overwrites an existing `Brewfile`. `cleanup` actually performs its cleanup operations.\n- `--cleanup`: `install` performs cleanup operation, same as running `cleanup --force`.\n- `--no-lock`: `install` won’t output a `Brewfile.lock.json`.\n- `--all`: `list` all dependencies.\n- `--formula`: `list` Homebrew dependencies.\n- `--cask`: `list` Homebrew Cask dependencies.\n- `--tap`: `list` tap dependencies.\n- `--mas`: `list` Mac App Store dependencies.\n- `--whalebrew`: `list` Whalebrew dependencies.\n- `--describe`: `dump` adds a description comment above each line, unless the dependency does not have a description.\n- `--no-restart`: `dump` does not add `restart_service` to formula lines.\n- `--zap`: `cleanup` casks using the `zap` command instead of `uninstall`.\n\n### `command-not-found-init`\n\nPrint instructions for setting up the command-not-found hook for your shell. If the output is not to a tty, print the appropriate handler script for your shell.\n\n### `services` \\[*`subcommand`*\\]\n\nManage background services with macOS’ `launchctl`(1) daemon manager.\n\nIf `sudo` is passed, operate on `/Library/LaunchDaemons` (started at boot). Otherwise, operate on `~/Library/LaunchAgents` (started at login).\n\n\\[`sudo`\\] `brew services` \\[`list`\\] (`--json`)  \nList information about all managed services for the current user (or root).\n\n\\[`sudo`\\] `brew services info` (*`formula`*\\|`--all`\\|`--json`)  \nList all managed services for the current user (or root).\n\n\\[`sudo`\\] `brew services run` (*`formula`*\\|`--all`)  \nRun the service *`formula`* without registering to launch at login (or boot).\n\n\\[`sudo`\\] `brew services start` (*`formula`*\\|`--all`\\|`--file=`)  \nStart the service *`formula`* immediately and register it to launch at login (or boot).\n\n\\[`sudo`\\] `brew services stop` (*`formula`*\\|`--all`)  \nStop the service *`formula`* immediately and unregister it from launching at login (or boot).\n\n\\[`sudo`\\] `brew services kill` (*`formula`*\\|`--all`)  \nStop the service *`formula`* immediately but keep it registered to launch at login (or boot).\n\n\\[`sudo`\\] `brew services restart` (*`formula`*\\|`--all`)  \nStop (if necessary) and start the service *`formula`* immediately and register it to launch at login (or boot).\n\n\\[`sudo`\\] `brew services cleanup`  \nRemove all unused services.\n\n- `--file`: Use the service file from this location to `start` the service.\n- `--all`: Run *`subcommand`* on all services.\n- `--json`: Output as JSON.\n\n### `test-bot` \\[*`options`*\\] \\[*`formula`*\\]\n\nTests the full lifecycle of a Homebrew change to a tap (Git repository). For example, for a GitHub Actions pull request that changes a formula `brew test-bot` will ensure the system is cleaned and set up to test the formula, install the formula, run various tests and checks on it, bottle (package) the binaries and test formulae that depend on it to ensure they aren’t broken by these changes.\n\nOnly supports GitHub Actions as a CI provider. This is because Homebrew uses GitHub Actions and it’s freely available for public and private use with macOS and Linux workers.\n\n- `--dry-run`: Print what would be done rather than doing it.\n- `--cleanup`: Clean all state from the Homebrew directory. Use with care!\n- `--skip-setup`: Don’t check if the local system is set up correctly.\n- `--build-from-source`: Build from source rather than building bottles.\n- `--build-dependents-from-source`: Build dependents from source rather than testing bottles.\n- `--junit`: generate a JUnit XML test results file.\n- `--keep-old`: Run `brew bottle --keep-old` to build new bottles for a single platform.\n- `--skip-relocation`: Run `brew bottle --skip-relocation` to build new bottles that don’t require relocation.\n- `--only-json-tab`: Run `brew bottle --only-json-tab` to build new bottles that do not contain a tab.\n- `--local`: Ask Homebrew to write verbose logs under `./logs/` and set `$HOME` to `./home/`\n- `--tap`: Use the Git repository of the given tap. Defaults to the core tap for syntax checking.\n- `--fail-fast`: Immediately exit on a failing step.\n- `-v`, `--verbose`: Print test step output in real time. Has the side effect of passing output as raw bytes instead of re-encoding in UTF-8.\n- `--test-default-formula`: Use a default testing formula when not building a tap and no other formulae are specified.\n- `--root-url`: Use the specified *`URL`* as the root of the bottle’s URL instead of Homebrew’s default.\n- `--git-name`: Set the Git author/committer names to the given name.\n- `--git-email`: Set the Git author/committer email to the given email.\n- `--publish`: Publish the uploaded bottles.\n- `--skip-online-checks`: Don’t pass `--online` to `brew audit` and skip `brew livecheck`.\n- `--skip-dependents`: Don’t test any dependents.\n- `--skip-recursive-dependents`: Only test the direct dependents.\n- `--only-cleanup-before`: Only run the pre-cleanup step. Needs `--cleanup`.\n- `--only-setup`: Only run the local system setup check step.\n- `--only-tap-syntax`: Only run the tap syntax check step.\n- `--only-formulae`: Only run the formulae steps.\n- `--only-formulae-detect`: Only run the formulae detection steps.\n- `--only-formulae-dependents`: Only run the formulae dependents steps.\n- `--only-cleanup-after`: Only run the post-cleanup step. Needs `--cleanup`.\n- `--testing-formulae`: Use these testing formulae rather than running the formulae detection steps.\n- `--added-formulae`: Use these added formulae rather than running the formulae detection steps.\n- `--deleted-formulae`: Use these deleted formulae rather than running the formulae detection steps.\n- `--skipped-or-failed-formulae`: Use these skipped or failed formulae from formulae steps for a formulae dependents step.\n\n### `unalias` *`alias`* \\[…\\]\n\nRemove aliases.\n\n### `which-formula` \\[*`--explain`*\\] *`command`* \\[…\\]\n\nPrints the formula(e) which provides the given command.\n\n- `--explain`: Output explanation of how to get ‘cmd’ by installing one of the providing formulae.\n\n### `which-update` \\[*`options`*\\] \\[*`database`*\\]\n\nDatabase update for `brew which-formula`\n\n- `--stats`: Print statistics about the database contents (number of commands and formulae, list of missing formulae).\n- `--commit`: Commit the changes using `git`.\n- `--update-existing`: Update database entries with outdated formula versions.\n- `--install-missing`: Install and update formulae that are missing from the database and don’t have bottles.\n- `--max-downloads`: Specify a maximum number of formulae to download and update.\n\n## CUSTOM EXTERNAL COMMANDS\n\nHomebrew, like `git`(1), supports external commands. These are executable scripts that reside somewhere in the `PATH`, named `brew-`*`cmdname`* or `brew-`*`cmdname`*`.rb`, which can be invoked like `brew` *`cmdname`*. This allows you to create your own commands without modifying Homebrew’s internals.\n\nInstructions for creating your own commands can be found in the docs: [https://docs.brew.sh/External-Commands](external-commands)\n\n## SPECIFYING FORMULAE\n\nMany Homebrew commands accept one or more *`formula`* arguments. These arguments can take several different forms:\n\n- The name of a formula: e.g. `git`, `node`, `wget`.\n\n- The fully-qualified name of a tapped formula: Sometimes a formula from a tapped repository may conflict with one in `homebrew/core`. You can still access these formulae by using a special syntax, e.g. `homebrew/dupes/vim` or `homebrew/versions/node4`.\n\n- An arbitrary file: Homebrew can install formulae from a local path. It can point to either a formula file or a bottle. Prefix relative paths with `./` to prevent them from being interpreted as a formula or tap name.\n\n## SPECIFYING CASKS\n\nMany Homebrew Cask commands accept one or more *`cask`* arguments. These can be specified the same way as the *`formula`* arguments described in `SPECIFYING FORMULAE` above.\n\n## ENVIRONMENT\n\nNote that environment variables must have a value set to be detected. For example, run `export HOMEBREW_NO_INSECURE_REDIRECT=1` rather than just `export HOMEBREW_NO_INSECURE_REDIRECT`.\n\n- `HOMEBREW_ADDITIONAL_GOOGLE_ANALYTICS_ID`  \n  Additional Google Analytics tracking ID to emit user behaviour analytics to. For more information, see: [https://docs.brew.sh/Analytics](analytics)\n\n- `HOMEBREW_ARCH`  \n  Linux only: Pass this value to a type name representing the compiler’s `-march` option.\n\n  *Default:* `native`.\n\n- `HOMEBREW_ARTIFACT_DOMAIN`  \n  Prefix all download URLs, including those for bottles, with this value. For example, `HOMEBREW_ARTIFACT_DOMAIN=http://localhost:8080` will cause a formula with the URL `https://example.com/foo.tar.gz` to instead download from `http://localhost:8080/https://example.com/foo.tar.gz`. Bottle URLs however, have their domain replaced with this prefix. This results in e.g. `https://ghcr.io/v2/homebrew/core/gettext/manifests/0.21` to instead be downloaded from `http://localhost:8080/v2/homebrew/core/gettext/manifests/0.21`\n\n- `HOMEBREW_AUTO_UPDATE_SECS`  \n  Run `brew update` once every `HOMEBREW_AUTO_UPDATE_SECS` seconds before some commands, e.g. `brew install`, `brew upgrade` and `brew tap`. Alternatively, disable auto-update entirely with HOMEBREW_NO_AUTO_UPDATE.\n\n  *Default:* `300`.\n\n- `HOMEBREW_AUTOREMOVE`  \n  If set, calls to `brew cleanup` and `brew uninstall` will automatically remove unused formula dependents and if HOMEBREW_NO_INSTALL_CLEANUP is not set, `brew cleanup` will start running `brew autoremove` periodically.\n\n- `HOMEBREW_BAT`  \n  If set, use `bat` for the `brew cat` command.\n\n- `HOMEBREW_BAT_CONFIG_PATH`  \n  Use this as the `bat` configuration file.\n\n  *Default:* `$HOME/.config/bat/config`.\n\n- `HOMEBREW_BAT_THEME`  \n  Use this as the `bat` theme for syntax highlighting.\n\n  *Default:* `$BAT_THEME`.\n\n- `HOMEBREW_BOOTSNAP`  \n  If set, use Bootsnap to speed up repeated `brew` calls. A no-op when using Homebrew’s vendored, relocatable Ruby on macOS (as it doesn’t work).\n\n- `HOMEBREW_BOTTLE_DOMAIN`  \n  Use this URL as the download mirror for bottles. If bottles at that URL are temporarily unavailable, the default bottle domain will be used as a fallback mirror. For example, `HOMEBREW_BOTTLE_DOMAIN=http://localhost:8080` will cause all bottles to download from the prefix `http://localhost:8080/`. If bottles are not available at `HOMEBREW_BOTTLE_DOMAIN` they will be downloaded from the default bottle domain.\n\n  *Default:* `https://ghcr.io/v2/homebrew/core`.\n\n- `HOMEBREW_BREW_GIT_REMOTE`  \n  Use this URL as the Homebrew/brew `git`(1) remote.\n\n  *Default:* `https://github.com/Homebrew/brew`.\n\n- `HOMEBREW_BROWSER`  \n  Use this as the browser when opening project homepages.\n\n  *Default:* `$BROWSER` or the OS’s default browser.\n\n- `HOMEBREW_CACHE`  \n  Use this directory as the download cache.\n\n  *Default:* macOS: `$HOME/Library/Caches/Homebrew`, Linux: `$XDG_CACHE_HOME/Homebrew` or `$HOME/.cache/Homebrew`.\n\n- `HOMEBREW_CASK_OPTS`  \n  Append these options to all `cask` commands. All `--*dir` options, `--language`, `--require-sha`, `--no-quarantine` and `--no-binaries` are supported. For example, you might add something like the following to your `~/.profile`, `~/.bash_profile`, or `~/.zshenv`:\\n\\n `export HOMEBREW_CASK_OPTS=\"--appdir=~/Applications --fontdir=/Library/Fonts\"`\n\n- `HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS`  \n  If set, `brew install`, `brew upgrade` and `brew reinstall` will cleanup all formulae when this number of days has passed.\n\n  *Default:* `30`.\n\n- `HOMEBREW_CLEANUP_MAX_AGE_DAYS`  \n  Cleanup all cached files older than this many days.\n\n  *Default:* `120`.\n\n- `HOMEBREW_COLOR`  \n  If set, force colour output on non-TTY outputs.\n\n- `HOMEBREW_CORE_GIT_REMOTE`  \n  Use this URL as the Homebrew/homebrew-core `git`(1) remote.\n\n  *Default:* `https://github.com/Homebrew/homebrew-core`.\n\n- `HOMEBREW_CURLRC`  \n  If set, do not pass `--disable` when invoking `curl`(1), which disables the use of `curlrc`.\n\n- `HOMEBREW_CURL_PATH`  \n  Linux only: Set this value to a new enough `curl` executable for Homebrew to use.\n\n  *Default:* `curl`.\n\n- `HOMEBREW_CURL_RETRIES`  \n  Pass the given retry count to `--retry` when invoking `curl`(1).\n\n  *Default:* `3`.\n\n- `HOMEBREW_CURL_VERBOSE`  \n  If set, pass `--verbose` when invoking `curl`(1).\n\n- `HOMEBREW_DEVELOPER`  \n  If set, tweak behaviour to be more relevant for Homebrew developers (active or budding) by e.g. turning warnings into errors.\n\n- `HOMEBREW_DISABLE_LOAD_FORMULA`  \n  If set, refuse to load formulae. This is useful when formulae are not trusted (such as in pull requests).\n\n- `HOMEBREW_DISPLAY`  \n  Use this X11 display when opening a page in a browser, for example with `brew home`. Primarily useful on Linux.\n\n  *Default:* `$DISPLAY`.\n\n- `HOMEBREW_DISPLAY_INSTALL_TIMES`  \n  If set, print install times for each formula at the end of the run.\n\n- `HOMEBREW_EDITOR`  \n  Use this editor when editing a single formula, or several formulae in the same directory.\n\n  *Note:* `brew edit` will open all of Homebrew as discontinuous files and directories. Visual Studio Code can handle this correctly in project mode, but many editors will do strange things in this case.\n\n  *Default:* `$EDITOR` or `$VISUAL`.\n\n- `HOMEBREW_FAIL_LOG_LINES`  \n  Output this many lines of output on formula `system` failures.\n\n  *Default:* `15`.\n\n- `HOMEBREW_FORBIDDEN_LICENSES`  \n  A space-separated list of licenses. Homebrew will refuse to install a formula if it or any of its dependencies has a license on this list.\n\n- `HOMEBREW_FORCE_BREWED_CA_CERTIFICATES`  \n  If set, always use a Homebrew-installed `ca-certificates` rather than the system version. Automatically set if the system version is too old.\n\n- `HOMEBREW_FORCE_BREWED_CURL`  \n  If set, always use a Homebrew-installed `curl`(1) rather than the system version. Automatically set if the system version of `curl` is too old.\n\n- `HOMEBREW_FORCE_BREWED_GIT`  \n  If set, always use a Homebrew-installed `git`(1) rather than the system version. Automatically set if the system version of `git` is too old.\n\n- `HOMEBREW_FORCE_VENDOR_RUBY`  \n  If set, always use Homebrew’s vendored, relocatable Ruby version even if the system version of Ruby is new enough.\n\n- `HOMEBREW_GITHUB_API_TOKEN`  \n  Use this personal access token for the GitHub API, for features such as `brew search`. You can create one at <https://github.com/settings/tokens>. If set, GitHub will allow you a greater number of API requests. For more information, see: <https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting>\n\n  *Note:* Homebrew doesn’t require permissions for any of the scopes, but some developer commands may require additional permissions.\n\n- `HOMEBREW_GITHUB_PACKAGES_TOKEN`  \n  Use this GitHub personal access token when accessing the GitHub Packages Registry (where bottles may be stored).\n\n- `HOMEBREW_DOCKER_REGISTRY_BASIC_AUTH_TOKEN`  \n  Use this base64 encoded username and password for authenticating with a Docker registry proxying GitHub Packages. If HOMEBREW_DOCKER_REGISTRY_TOKEN is set, it will be used instead.\n\n- `HOMEBREW_DOCKER_REGISTRY_TOKEN`  \n  Use this bearer token for authenticating with a Docker registry proxying GitHub Packages. Preferred over HOMEBREW_DOCKER_REGISTRY_TOKEN_BASIC.\n\n- `HOMEBREW_GITHUB_PACKAGES_USER`  \n  Use this username when accessing the GitHub Packages Registry (where bottles may be stored).\n\n- `HOMEBREW_GIT_EMAIL`  \n  Set the Git author and committer email to this value.\n\n- `HOMEBREW_GIT_NAME`  \n  Set the Git author and committer name to this value.\n\n- `HOMEBREW_GIT_PATH`  \n  Linux only: Set this value to a new enough `git` executable for Homebrew to use.\n\n  *Default:* `git`.\n\n- `HOMEBREW_INSTALL_BADGE`  \n  Print this text before the installation summary of each successful build.\n\n  *Default:* The “Beer Mug” emoji.\n\n- `HOMEBREW_INSTALL_FROM_API`  \n  If set, install formulae and casks in homebrew/core and homebrew/cask taps using Homebrew’s API instead of needing (large, slow) local checkouts of these repositories.\n\n  *Note:* Setting HOMEBREW_INSTALL_FROM_API is not compatible with Homebrew’s developer mode so will error (as Homebrew development needs a full clone).\n\n- `HOMEBREW_LIVECHECK_WATCHLIST`  \n  Consult this file for the list of formulae to check by default when no formula argument is passed to `brew livecheck`.\n\n  *Default:* `$HOME/.brew_livecheck_watchlist`\n\n- `HOMEBREW_LOGS`  \n  Use this directory to store log files.\n\n  *Default:* macOS: `$HOME/Library/Logs/Homebrew`, Linux: `$XDG_CACHE_HOME/Homebrew/Logs` or `$HOME/.cache/Homebrew/Logs`.\n\n- `HOMEBREW_MAKE_JOBS`  \n  Use this value as the number of parallel jobs to run when building with `make`(1).\n\n  *Default:* The number of available CPU cores.\n\n- `HOMEBREW_NO_ANALYTICS`  \n  If set, do not send analytics. For more information, see: [https://docs.brew.sh/Analytics](analytics)\n\n- `HOMEBREW_NO_AUTO_UPDATE`  \n  If set, do not automatically update before running some commands, e.g. `brew install`, `brew upgrade` and `brew tap`. Alternatively, run this less often by setting HOMEBREW_AUTO_UPDATE_SECS to a value higher than the default.\n\n- `HOMEBREW_NO_BOOTSNAP`  \n  If set, do not use Bootsnap to speed up repeated `brew` calls.\n\n- `HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK`  \n  If set, do not check for broken linkage of dependents or outdated dependents after installing, upgrading or reinstalling formulae. This will result in fewer dependents (and their dependencies) being upgraded or reinstalled but may result in more breakage from running `brew install *`formula`*` or `brew upgrade *`formula`*`.\n\n- `HOMEBREW_NO_CLEANUP_FORMULAE`  \n  A comma-separated list of formulae. Homebrew will refuse to clean up or autoremove a formula if it appears on this list.\n\n- `HOMEBREW_NO_COLOR`  \n  If set, do not print text with colour added.\n\n  *Default:* `$NO_COLOR`.\n\n- `HOMEBREW_NO_COMPAT`  \n  If set, disable all use of legacy compatibility code.\n\n- `HOMEBREW_NO_EMOJI`  \n  If set, do not print `HOMEBREW_INSTALL_BADGE` on a successful build.\n\n  *Note:* Will only try to print emoji on OS X Lion or newer.\n\n- `HOMEBREW_NO_ENV_HINTS`  \n  If set, do not print any hints about changing Homebrew’s behaviour with environment variables.\n\n- `HOMEBREW_NO_GITHUB_API`  \n  If set, do not use the GitHub API, e.g. for searches or fetching relevant issues after a failed install.\n\n- `HOMEBREW_NO_INSECURE_REDIRECT`  \n  If set, forbid redirects from secure HTTPS to insecure HTTP.\n\n  *Note:* While ensuring your downloads are fully secure, this is likely to cause from-source SourceForge, some GNU & GNOME-hosted formulae to fail to download.\n\n- `HOMEBREW_NO_INSTALL_CLEANUP`  \n  If set, `brew install`, `brew upgrade` and `brew reinstall` will never automatically cleanup installed/upgraded/reinstalled formulae or all formulae every `HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS` days. Alternatively, HOMEBREW_NO_CLEANUP_FORMULAE allows specifying specific formulae to not clean up.\n\n- `HOMEBREW_NO_INSTALL_UPGRADE`  \n  If set, `brew install *`formula`*` will not upgrade `*`formula`*` if it is installed but outdated.\n\n- `HOMEBREW_PRY`  \n  If set, use Pry for the `brew irb` command.\n\n- `HOMEBREW_SIMULATE_MACOS_ON_LINUX`  \n  If set, running Homebrew on Linux will simulate certain macOS code paths. This is useful when auditing macOS formulae while on Linux.\n\n- `HOMEBREW_SSH_CONFIG_PATH`  \n  If set, Homebrew will use the given config file instead of `~/.ssh/config` when fetching `git` repos over `ssh`.\n\n  *Default:* `$HOME/.ssh/config`\n\n- `HOMEBREW_SKIP_OR_LATER_BOTTLES`  \n  If set along with `HOMEBREW_DEVELOPER`, do not use bottles from older versions of macOS. This is useful in development on new macOS versions.\n\n- `HOMEBREW_SORBET_RUNTIME`  \n  If set, enable runtime typechecking using Sorbet.\n\n- `HOMEBREW_SVN`  \n  Use this as the `svn`(1) binary.\n\n  *Default:* A Homebrew-built Subversion (if installed), or the system-provided binary.\n\n- `HOMEBREW_TEMP`  \n  Use this path as the temporary directory for building packages. Changing this may be needed if your system temporary directory and Homebrew prefix are on different volumes, as macOS has trouble moving symlinks across volumes when the target does not yet exist. This issue typically occurs when using FileVault or custom SSD configurations.\n\n  *Default:* macOS: `/private/tmp`, Linux: `/tmp`.\n\n- `HOMEBREW_UPDATE_REPORT_ALL_FORMULAE`  \n  If set, `brew update` lists changes to all formulae and cask files rather than only showing when they are new and not installed or outdated and installed.\n\n- `HOMEBREW_UPDATE_TO_TAG`  \n  If set, always use the latest stable tag (even if developer commands have been run).\n\n- `HOMEBREW_VERBOSE`  \n  If set, always assume `--verbose` when running commands.\n\n- `HOMEBREW_DEBUG`  \n  If set, always assume `--debug` when running commands.\n\n- `HOMEBREW_VERBOSE_USING_DOTS`  \n  If set, verbose output will print a `.` no more than once a minute. This can be useful to avoid long-running Homebrew commands being killed due to no output.\n\n- `all_proxy`  \n  Use this SOCKS5 proxy for `curl`(1), `git`(1) and `svn`(1) when downloading through Homebrew.\n\n- `ftp_proxy`  \n  Use this FTP proxy for `curl`(1), `git`(1) and `svn`(1) when downloading through Homebrew.\n\n- `http_proxy`  \n  Use this HTTP proxy for `curl`(1), `git`(1) and `svn`(1) when downloading through Homebrew.\n\n- `https_proxy`  \n  Use this HTTPS proxy for `curl`(1), `git`(1) and `svn`(1) when downloading through Homebrew.\n\n- `no_proxy`  \n  A comma-separated list of hostnames and domain names excluded from proxying by `curl`(1), `git`(1) and `svn`(1) when downloading through Homebrew.\n\n- `SUDO_ASKPASS`  \n  If set, pass the `-A` option when calling `sudo`(8).\n\n## USING HOMEBREW BEHIND A PROXY\n\nSet the `http_proxy`, `https_proxy`, `all_proxy`, `ftp_proxy` and/or `no_proxy` environment variables documented above.\n\nFor example, to use an unauthenticated HTTP or SOCKS5 proxy:\n\n``` plaintext\nexport http_proxy=http://$HOST:$PORT\n\nexport all_proxy=socks5://$HOST:$PORT\n```\n\nAnd for an authenticated HTTP proxy:\n\n``` plaintext\nexport http_proxy=http://$USER:$PASSWORD@$HOST:$PORT\n```\n\n## SEE ALSO\n\nHomebrew Documentation: <https://docs.brew.sh>\n\nHomebrew API: <https://rubydoc.brew.sh>\n\n`git`(1), `git-log`(1)\n\n## AUTHORS\n\nHomebrew’s Project Leader is Mike McQuaid.\n\nHomebrew’s Project Leadership Committee is Issy Long, Jonathan Chang, Mike McQuaid, Misty De Méo and Sean Molenaar.\n\nHomebrew’s Technical Steering Committee is Bo Anderson, FX Coudert, Michka Popoff, Mike McQuaid and Rylan Polster.\n\nHomebrew’s other current maintainers are Alexander Bayandin, Bevan Kay, Branch Vincent, Caleb Xu, Carlo Cabrera, Daniel Nachun, Dawid Dziurla, Dustin Rodrigues, Eric Knibbe, George Adams, Markus Reiter, Maxim Belkin, Miccal Matthews, Michael Cho, Nanda H Krishna, Randall, Rui Chen, Sam Ford, Shaun Jackman, Steve Peters, Thierry Moisan and Vítor Galvão.\n\nFormer maintainers with significant contributions include Claudia Pellegrino, Seeker, William Woodruff, Jan Viljanen, JCount, commitay, Dominyk Tiller, Tim Smith, Baptiste Fontaine, Xu Cheng, Martin Afanasjew, Brett Koonce, Charlie Sharpsteen, Jack Nagel, Adam Vandenberg, Andrew Janke, Alex Dunn, neutric, Tomasz Pajor, Uladzislau Shablinski, Alyssa Ross, ilovezfs, Chongyu Zhu and Homebrew’s creator: Max Howell.\n\n## BUGS\n\nSee our issues on GitHub:\n\n- **Homebrew/brew**:  \n  <https://github.com/Homebrew/brew/issues>\n\n- **Homebrew/homebrew-core**:  \n  <https://github.com/Homebrew/homebrew-core/issues>\n\n- **Homebrew/homebrew-cask**:  \n  <https://github.com/Homebrew/homebrew-cask/issues>\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Manpage](https://docs.brew.sh/Manpage)"
- name: brew livecheck
  id: brew-livecheck
  summary: The brew livecheck command finds the newest version of a formula or cask’s software by checking upstream
  description: "# `brew livecheck`\n\nThe `brew livecheck` command finds the newest version of a formula or cask’s software by checking upstream. Livecheck has [strategies](https://rubydoc.brew.sh/Homebrew/Livecheck/Strategy.html) to identify versions from various sources, such as Git repositories, websites, etc.\n\n## Behavior\n\nWhen livecheck isn’t given instructions for how to check for upstream versions, it does the following by default:\n\n1.  For formulae: Collect the `head`, `stable`, and `homepage` URLs, in that order. For casks: Collect the `url` and `homepage` URLs, in that order.\n2.  Determine if any strategies apply to the first URL. If not, try the next URL.\n3.  If a strategy can be applied, use it to check for new versions.\n4.  Return the newest version (or an error if versions could not be found at any available URLs).\n\nIt’s sometimes necessary to override this default behavior to create a working check. If a source doesn’t provide the newest version, we need to check a different one. If livecheck doesn’t correctly match version text, we need to provide an appropriate regex or `strategy` block.\n\nThis can be accomplished by adding a `livecheck` block to the formula/cask. For more information on the available methods, please refer to the [`Livecheck` class documentation](https://rubydoc.brew.sh/Livecheck.html).\n\n## Creating a check\n\n1.  **Use the debug output to understand the situation**. `brew livecheck --debug <formula>|<cask>` provides information about which URLs livecheck tries, any strategies that apply, matched versions, etc.\n\n2.  **Research available sources to select a URL**. Try removing the file name from `stable`/`url`, to see if this is a directory listing page. If that doesn’t work, try to find a page that links to the file (e.g. a download page). If it’s not possible to find the newest version on the website, try checking other sources from the formula/cask. When necessary, search for other sources outside of the formula/cask.\n\n3.  **Create a regex, if necessary**. If the check works without a regex and wouldn’t benefit from having one, it’s usually fine to omit it. More information on creating regexes can be found in the [regex guidelines](#regex-guidelines) section.\n\n### General guidelines\n\n- **Only use `strategy` when it’s necessary**. For example, if livecheck is already using `Git` for a URL, it’s not necessary to use `strategy :git`. However, if `Git` applies to a URL but we need to use `PageMatch`, it’s necessary to specify `strategy :page_match`.\n\n- **Only use the `GithubLatest` strategy when it’s necessary and correct**. `github.com` rate limits requests and we try to minimize our use of this strategy to avoid hitting the rate limit on CI or when using `brew livecheck --tap` on large taps (e.g. homebrew/core). The `Git` strategy is often sufficient and we only need to use `GithubLatest` when the “latest” release is different than the newest version from the tags.\n\n### URL guidelines\n\n- **A `url` is required in a `livecheck` block**. This can be a URL string (e.g. `\"https://www.example.com/downloads/\"`) or a formula/cask URL symbol (i.e. `:stable`, `:url`, `:head`, `:homepage`). The exception to this rule is a `livecheck` block that only uses `skip`.\n\n- **Check for versions in the same location as the stable archive, whenever possible**.\n\n- **Avoid checking paginated release pages, when possible**. For example, we generally avoid checking the `release` page for a GitHub project because the latest stable version can be pushed off the first page by pre-release versions. In this scenario, it’s more reliable to use the `Git` strategy, which fetches all the tags in the repository.\n\n### Regex guidelines\n\nThe `livecheck` block regex restricts matches to a subset of the fetched content and uses a capture group around the version text.\n\n- **Regexes should be made case insensitive, whenever possible**, by adding `i` at the end (e.g. `/.../i` or `%r{...}i`). This improves reliability, as the regex will handle changes in letter case without needing modifications.\n\n- **Regexes should only use a capturing group around the version text**. For example, in `/href=.*?example-v?(\\d+(?:\\.\\d+)+)(?:-src)?\\.t/i`, we’re only using a capturing group around the version test (matching a version like `1.2`, `1.2.3`, etc.) and we’re using non-capturing groups elsewhere (e.g. `(?:-src)?`).\n\n- **Anchor the start/end of the regex, to restrict the scope**. For example, on HTML pages we often match file names or version directories in `href` attribute URLs (e.g. `/href=.*?example[._-]v?(\\d+(?:\\.\\d+)+)\\.zip/i`). The general idea is that limiting scope will help exclude unwanted matches.\n\n- **Avoid generic catch-alls like `.*` or `.+`** in favor of something non-greedy and/or contextually appropriate. For example, to match characters within the bounds of an HTML attribute, use `[^\"' >]+?`.\n\n- **Use `[._-]` in place of a period/underscore/hyphen between the software name and version in a file name**. For a file named `example-1.2.3.tar.gz`, `example[._-]v?(\\d+(?:\\.\\d+)+)\\.t` will continue matching if the upstream file name format changes to `example_1.2.3.tar.gz` or `example.1.2.3.tar.gz`.\n\n- **Use `\\.t` in place of `\\.tgz`, `\\.tar\\.gz`, etc.** There are a variety of different file extensions for tarballs (e.g. `.tar.bz2`, `tbz2`, `.tar.gz`, `.tgz`, `.tar.xz`, `.txz`, etc.) and the upstream source may switch from one compression format to another over time. `\\.t` avoids this issue by matching current and future formats starting with `t`. Outside of tarballs, we use the full file extension in the regex like `\\.zip`, `\\.jar`, etc.\n\n## Example `livecheck` blocks\n\nThe following examples cover a number of patterns that you may encounter. These are intended to be representative samples and can be easily adapted.\n\nWhen in doubt, start with one of these examples instead of copy-pasting a `livecheck` block from a random formula/cask.\n\n### File names\n\nWhen matching the version from a file name on an HTML page, we often restrict matching to `href` attributes. `href=.*?` will match the opening delimiter (`\"`, `'`) as well as any part of the URL before the file name.\n\n``` ruby\nlivecheck do\n  url \"https://www.example.com/downloads/\"\n  regex(/href=.*?example[._-]v?(\\d+(?:\\.\\d+)+)\\.t/i)\nend\n```\n\nWe sometimes make this more explicit to exclude unwanted matches. URLs with a preceding path can use `href=.*?/` and others can use `href=[\"']?`. For example, this is necessary when the page also contains unwanted files with a longer prefix (`another-example-1.2.tar.gz`).\n\n### Version directories\n\nWhen checking a directory listing page, sometimes files are separated into version directories (e.g. `1.2.3/`). In this case, we must identify versions from the directory names.\n\n``` ruby\nlivecheck do\n  url \"https://www.example.com/releases/example/\"\n  regex(%r{href=[\"']?v?(\\d+(?:\\.\\d+)+)/?[\"' >]}i)\nend\n```\n\n### Git tags\n\nWhen the `stable` URL uses the `Git` strategy, the following example will only match tags like `1.2`/`v1.2`, etc.\n\n``` ruby\nlivecheck do\n  url :stable\n  regex(/^v?(\\d+(?:\\.\\d+)+)$/i)\nend\n```\n\nIf tags include the software name as a prefix (e.g. `example-1.2.3`), it’s easy to modify the regex accordingly: `/^example[._-]v?(\\d+(?:\\.\\d+)+)$/i`\n\n### Referenced formula/cask\n\nA formula/cask can use the same check as another by using `formula` or `cask`.\n\n``` ruby\nlivecheck do\n  formula \"another-formula\"\nend\n```\n\nThe referenced formula/cask should be in the same tap, as a reference to a formula/cask from another tap will generate an error if the user doesn’t already have it tapped.\n\n### `strategy` blocks\n\nIf the upstream version format needs to be manipulated to match the formula/cask format, a `strategy` block can be used instead of a `regex`.\n\n#### `PageMatch` `strategy` block\n\nIn the example below, we’re converting a date format like `2020-01-01` into `20200101`.\n\n``` ruby\nlivecheck do\n  url :homepage\n  strategy :page_match do |page|\n    page.scan(/href=.*?example[._-]v?(\\d{4}-\\d{2}-\\d{2})\\.t/i)\n        .map { |match| match&.first&.gsub(/\\D/, \"\") }\n  end\nend\n```\n\nThe `PageMatch` `strategy` block style seen here also applies to any strategy that uses `PageMatch` internally.\n\n#### `Git` `strategy` block\n\nA `strategy` block for `Git` is a bit different, as the block receives an array of tag strings instead of a page content string. Similar to the `PageMatch` example, this is converting tags with a date format like `2020-01-01` into `20200101`.\n\n``` ruby\nlivecheck do\n  url :stable\n  strategy :git do |tags|\n    tags.map { |tag| tag[/^(\\d{4}-\\d{2}-\\d{2})$/i, 1]&.gsub(/\\D/, \"\") }.compact\n  end\nend\n```\n\n#### `Sparkle` `strategy` block\n\nA `strategy` block for `Sparkle` receives an `item` which has methods for the `short_version`, `version`, `url` and `title`.\n\nThe default pattern for the `Sparkle` strategy is `\"#{item.short_version},#{item.version}\"` if both are set. In the example below, the `url` also includes a download ID which is needed:\n\n``` ruby\nlivecheck do\n  url \"https://www.example.com/example.xml\"\n  strategy :sparkle do |item|\n    \"#{item.short_version},#{item.version}:#{item.url[%r{/(\\d+)/[^/]+\\.zip}i, 1]}\"\n  end\nend\n```\n\n### `skip`\n\nLivecheck automatically skips some formulae/casks for a number of reasons (deprecated, disabled, discontinued, etc.). However, on rare occasions we need to use a `livecheck` block to do a manual skip. The `skip` method takes a string containing a very brief reason for skipping.\n\n``` ruby\nlivecheck do\n  skip \"No version information available\"\nend\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Brew-Livecheck](https://docs.brew.sh/Brew-Livecheck)"
- name: Brew Test Bot
  id: brew-test-bot
  summary: brew test-bot is the name for the automated review and testing system funded by our Kickstarter in 2013
  description: "# Brew Test Bot\n\n`brew test-bot` is the name for the automated review and testing system funded by [our Kickstarter in 2013](https://www.kickstarter.com/projects/homebrew/brew-test-bot).\n\nIt comprises three Mac Pros hosting virtual machines that run the [`test-bot.rb`](https://github.com/Homebrew/homebrew-test-bot/) external command to perform automated testing of commits to the master branch, pull requests and custom builds requested by maintainers.\n\n## Pull Requests\n\nThe bot automatically builds pull requests and updates their status depending on the result of the job.\n\nFor example, a job which has been queued but not yet completed will have a section in the pull request that looks like this:\n\n------------------------------------------------------------------------\n\nA failed build looks like this:\n\n------------------------------------------------------------------------\n\nA passed build looks like this:\n\n------------------------------------------------------------------------\n\nOn failed or passed builds you can click the “Details” link to view the result in GitHub Actions.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Brew-Test-Bot](https://docs.brew.sh/Brew-Test-Bot)"
- name: Building Against Non-Homebrew Dependencies
  id: building-against-non-homebrew-dependencies
  summary: Originally Homebrew was a build-from-source package manager and all user environment variables and non-Homebrew-installed software were available to builds
  description: "# Building Against Non-Homebrew Dependencies\n\n## History\n\nOriginally Homebrew was a build-from-source package manager and all user environment variables and non-Homebrew-installed software were available to builds. Since then Homebrew added `Requirement`s to specify dependencies on non-Homebrew software (such as those provided by `brew cask` like X11/XQuartz), the `superenv` build system to strip out unspecified dependencies, environment filtering to stop the user environment leaking into Homebrew builds and `default_formula` to specify that a `Requirement` can be satisfied by a particular formula.\n\nAs Homebrew became primarily a binary package manager, most users were fulfilling `Requirement`s with the `default_formula`, not with arbitrary alternatives. To improve quality and reduce variation, Homebrew now exclusively supports using the default formula, as an ordinary dependency, and no longer supports using arbitrary alternatives.\n\n## Today\n\nIf you wish to build against custom non-Homebrew dependencies that are provided by Homebrew (e.g. a non-Homebrew, non-macOS `ruby`) then you must [create and maintain your own tap](how-to-create-and-maintain-a-tap) as these formulae will not be accepted in Homebrew/homebrew-core. Once you have done that you can specify `env :std` in the formula which will allow e.g. `which ruby` to access your existing `PATH` variable and allow compilation to link against this Ruby. You can also [include a custom Requirement](https://github.com/Homebrew/brew/tree/HEAD/Library/Homebrew/requirements) in your formula that more accurately describes the non-Homebrew software you build against.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Building-Against-Non-Homebrew-Dependencies](https://docs.brew.sh/Building-Against-Non-Homebrew-Dependencies)"
- name: C++ Standard Libraries
  id: c++-standard-libraries
  summary: There are two C++ standard libraries supported by Apple compilers
  description: "# C++ Standard Libraries\n\nThere are two C++ standard libraries supported by Apple compilers.\n\nThe default for 10.9 and later is **libc++**, which is also the default for `clang` on older platforms when building C++11 code.\n\nThe default for 10.8 and earlier was **libstdc++**, supported by Apple GCC compilers, GNU GCC compilers, and `clang`. This was marked deprecated with a warning during compilation as of Xcode 8.\n\nThere are subtle incompatibilities between several of the C++ standard libraries, so Homebrew will refuse to install software if a dependency was built with an incompatible C++ library. It’s recommended that you install the dependency tree using a compatible compiler.\n\n**If you’ve upgraded to 10.9 or later from an earlier version:** Because the default C++ standard library is now libc++, you may not be able to build software using dependencies that you built on 10.8 or earlier. If you’re reading this page because you were directed here by a build error, you can most likely fix the issue if you reinstall all the dependencies of the package you’re trying to build.\n\nExample install using GCC 7:\n\n``` bash\nbrew install gcc@7\nbrew install --cc=gcc-7 <formula>\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/C++-Standard-Libraries](https://docs.brew.sh/C++-Standard-Libraries)"
- name: Cask Cookbook
  id: cask-cookbook
  summary: Each Cask is a Ruby block, beginning with a special header line
  description: "# Cask Cookbook\n\nEach Cask is a Ruby block, beginning with a special header line. The Cask definition itself is always enclosed in a `do … end` block. Example:\n\n``` ruby\ncask \"alfred\" do\n  version \"2.7.1_387\"\n  sha256 \"a3738d0513d736918a6d71535ef3d85dd184af267c05698e49ac4c6b48f38e17\"\n\n  url \"https://cachefly.alfredapp.com/Alfred_#{version}.zip\"\n  name \"Alfred\"\n  desc \"Application launcher and productivity software\"\n  homepage \"https://www.alfredapp.com/\"\n\n  app \"Alfred 2.app\"\n  app \"Alfred 2.app/Contents/Preferences/Alfred Preferences.app\"\nend\n```\n\n## The Cask Language Is Declarative\n\nEach Cask contains a series of stanzas (or “fields”) which *declare* how the software is to be obtained and installed. In a declarative language, the author does not need to worry about **order**. As long as all the needed fields are present, Homebrew Cask will figure out what needs to be done at install time.\n\nTo make maintenance easier, the most-frequently-updated stanzas are usually placed at the top. But that’s a convention, not a rule.\n\nException: `do` blocks such as `postflight` may enclose a block of pure Ruby code. Lines within that block follow a procedural (order-dependent) paradigm.\n\n## Conditional Statements\n\n### Efficiency\n\nConditional statements are permitted, but only if they are very efficient. Tests on the following values are known to be acceptable:\n\n| value           | examples                                                                                                                                                                                                                                                             |\n|-----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `MacOS.version` | [coconutbattery.rb](https://github.com/Homebrew/homebrew-cask/blob/a11ee55e8ed8255f7dab77120dfb1fb955789559/Casks/coconutbattery.rb#L2-L16), [yasu.rb](https://github.com/Homebrew/homebrew-cask/blob/21d3f7ac8a4adac0fe474b3d4b020d284eeef88d/Casks/yasu.rb#L2-L23) |\n\n### Version Comparisons\n\nTests against `MacOS.version` may use either symbolic names or version strings with numeric comparison operators:\n\n``` ruby\nif MacOS.version <= :mojave        # symbolic name\n```\n\n``` ruby\nif MacOS.version <= \"10.14\"        # version string\n```\n\nThe available symbols for macOS versions are: `:el_capitan`, `:sierra`, `:high_sierra`, `:mojave`, `:catalina` and `:big_sur`. The corresponding numeric version strings should be given as major releases containing a single dot.\n\nNote that in the official Homebrew Cask repositories only the symbolic names are allowed. The numeric comparison may only be used for third-party taps.\n\n### Always Fall Through to the Newest Case\n\nConditionals should be constructed so that the default is the newest OS version. When using an `if` statement, test for older versions, and then let the `else` statement hold the latest and greatest. This makes it more likely that the Cask will work without alteration when a new OS is released. Example (from [coconutbattery.rb](https://github.com/Homebrew/homebrew-cask/blob/2c801af44be29fff7f3cb2996455fce5dd95d1cc/Casks/coconutbattery.rb)):\n\n``` ruby\nif MacOS.version <= :sierra\n  # ...\nelsif MacOS.version <= :mojave\n  # ...\nelse\n  # ...\nend\n```\n\n### Switch Between Languages or Regions\n\nIf a cask is available in multiple languages, you can use the `language` stanza to switch between languages or regions based on the system locale.\n\n## Arbitrary Ruby Methods\n\nIn the exceptional case that the Cask DSL is insufficient, it is possible to define arbitrary Ruby variables and methods inside the Cask by creating a `Utils` namespace. Example:\n\n``` ruby\ncask \"myapp\" do\n  module Utils\n    def self.arbitrary_method\n      ...\n    end\n  end\n\n  name \"MyApp\"\n  version \"1.0\"\n  sha256 \"a32565cdb1673f4071593d4cc9e1c26bc884218b62fef8abc450daa47ba8fa92\"\n\n  url \"https://#{Utils.arbitrary_method}\"\n  homepage \"https://www.example.com/\"\n  ...\nend\n```\n\nThis should be used sparingly: any method which is needed by two or more Casks should instead be rolled into the core. Care must also be taken that such methods be very efficient.\n\nVariables and methods should not be defined outside the `Utils` namespace, as they may collide with Homebrew Cask internals.\n\n## Header Line Details\n\nThe first non-comment line in a Cask follows the form:\n\n``` ruby\ncask \"<cask-token>\" do\n```\n\n[`<cask-token>`](#token-reference) should match the Cask filename, without the `.rb` extension, enclosed in single quotes.\n\nThere are currently some arbitrary limitations on Cask tokens which are in the process of being removed. GitHub Actions will catch any errors during the transition.\n\n## Stanza order\n\nHaving a common order for stanzas makes Casks easier to update and parse. Below is the complete stanza sequence (no Cask will have all stanzas). The empty lines shown here are also important, as they help to visually delineate information.\n\n``` plaintext\nversion\nsha256\n\nlanguage\n\nurl\nappcast\nname\ndesc\nhomepage\n\nlivecheck\n\nauto_updates\nconflicts_with\ndepends_on\ncontainer\n\nsuite\napp\npkg\ninstaller\nbinary\nmanpage\ncolorpicker\ndictionary\nfont\ninput_method\ninternet_plugin\nprefpane\nqlplugin\nmdimporter\nscreen_saver\nservice\naudio_unit_plugin\nvst_plugin\nvst3_plugin\nartifact, target: # target: shown here as is required with `artifact`\nstage_only\n\npreflight\n\npostflight\n\nuninstall_preflight\n\nuninstall_postflight\n\nuninstall\n\nzap\n\ncaveats\n```\n\nNote that every stanza that has additional parameters (`:symbols` after a `,`) shall have them on separate lines, one per line, in alphabetical order. An exception is `target:` which typically consists of short lines.\n\n## Stanzas\n\n### Required Stanzas\n\nEach of the following stanzas is required for every Cask.\n\n| name       | multiple occurrences allowed? | value                                                                                                                                                                                                                                                                                                                                                    |\n|------------|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `version`  | no                            | Application version. See [Version Stanza Details](#stanza-version) for more information.                                                                                                                                                                                                                                                                 |\n| `sha256`   | no                            | SHA-256 checksum of the file downloaded from `url`, calculated by the command `shasum -a 256 <file>`. Can be suppressed by using the special value `:no_check`. See [Checksum Stanza Details](#stanza-sha256) for more information.                                                                                                                      |\n| `url`      | no                            | URL to the `.dmg`/`.zip`/`.tgz`/`.tbz2` file that contains the application. A [comment](#when-url-and-homepage-hostnames-differ-add-a-comment) should be added if the hostnames in the `url` and `homepage` stanzas differ. Block syntax should be used for URLs that change on every visit. See [URL Stanza Details](#stanza-url) for more information. |\n| `name`     | yes                           | String providing the full and proper name defined by the vendor. See [Name Stanza Details](#stanza-name) for more information.                                                                                                                                                                                                                           |\n| `desc`     | no                            | One-line description of the Cask. Shows when running `brew info`. See [Desc Stanza Details](#stanza-desc) for more information.                                                                                                                                                                                                                          |\n| `homepage` | no                            | Application homepage; used for the `brew home` command.                                                                                                                                                                                                                                                                                                  |\n\n### At Least One Artifact Stanza Is Also Required\n\nEach Cask must declare one or more *artifacts* (i.e. something to install).\n\n| name                | multiple occurrences allowed? | value                                                                                                                                                                                                                                                                                                                                                           |\n|---------------------|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `app`               | yes                           | Relative path to an `.app` that should be moved into the `/Applications` folder on installation. See [App Stanza Details](#stanza-app) for more information.                                                                                                                                                                                                    |\n| `pkg`               | yes                           | Relative path to a `.pkg` file containing the distribution. See [Pkg Stanza Details](#stanza-pkg) for more information.                                                                                                                                                                                                                                         |\n| `binary`            | yes                           | Relative path to a Binary that should be linked into the `$(brew --prefix)/bin` folder (typically `/usr/local/bin`) on installation. See [Binary Stanza Details](#stanza-binary) for more information.                                                                                                                                                          |\n| `colorpicker`       | yes                           | Relative path to a ColorPicker plugin that should be moved into the `~/Library/ColorPickers` folder on installation.                                                                                                                                                                                                                                            |\n| `dictionary`        | yes                           | Relative path to a Dictionary that should be moved into the `~/Library/Dictionaries` folder on installation.                                                                                                                                                                                                                                                    |\n| `font`              | yes                           | Relative path to a Font that should be moved into the `~/Library/Fonts` folder on installation.                                                                                                                                                                                                                                                                 |\n| `input_method`      | yes                           | Relative path to a Input Method that should be moved into the `~/Library/Input Methods` folder on installation.                                                                                                                                                                                                                                                 |\n| `internet_plugin`   | yes                           | Relative path to a Service that should be moved into the `~/Library/Internet Plug-Ins` folder on installation.                                                                                                                                                                                                                                                  |\n| `manpage`           | yes                           | Relative path to a Man Page that should be linked into the respective man page folder on installation, e.g. `/usr/local/share/man/man3` for `my_app.3`.                                                                                                                                                                                                         |\n| `prefpane`          | yes                           | Relative path to a Preference Pane that should be moved into the `~/Library/PreferencePanes` folder on installation.                                                                                                                                                                                                                                            |\n| `qlplugin`          | yes                           | Relative path to a QuickLook Plugin that should be moved into the `~/Library/QuickLook` folder on installation.                                                                                                                                                                                                                                                 |\n| `mdimporter`        | yes                           | Relative path to a Spotlight metadata importer that should be moved into the `~/Library/Spotlight` folder on installation.                                                                                                                                                                                                                                      |\n| `screen_saver`      | yes                           | Relative path to a Screen Saver that should be moved into the `~/Library/Screen Savers` folder on installation.                                                                                                                                                                                                                                                 |\n| `service`           | yes                           | Relative path to a Service that should be moved into the `~/Library/Services` folder on installation.                                                                                                                                                                                                                                                           |\n| `audio_unit_plugin` | yes                           | Relative path to an Audio Unit plugin that should be moved into the `~/Library/Audio/Components` folder on installation.                                                                                                                                                                                                                                        |\n| `vst_plugin`        | yes                           | Relative path to a VST Plugin that should be moved into the `~/Library/Audio/VST` folder on installation.                                                                                                                                                                                                                                                       |\n| `vst3_plugin`       | yes                           | Relative path to a VST3 Plugin that should be moved into the `~/Library/Audio/VST3` folder on installation.                                                                                                                                                                                                                                                     |\n| `suite`             | yes                           | Relative path to a containing directory that should be moved into the `/Applications` folder on installation. See [Suite Stanza Details](#stanza-suite) for more information.                                                                                                                                                                                   |\n| `artifact`          | yes                           | Relative path to an arbitrary path that should be moved on installation. Must provide an absolute path as a `target` (example [alcatraz.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/alcatraz.rb#L12)). This is only for unusual cases. The `app` stanza is strongly preferred when moving `.app` bundles. |\n| `installer`         | yes                           | Describes an executable which must be run to complete the installation. See [Installer Stanza Details](#stanza-installer) for more information.                                                                                                                                                                                                                 |\n| `stage_only`        | no                            | `true`. Assert that the Cask contains no activatable artifacts.                                                                                                                                                                                                                                                                                                 |\n\n### Optional Stanzas\n\n| name                   | multiple occurrences allowed? | value                                                                                                                                                                                                                                                                                                                                            |\n|------------------------|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `uninstall`            | yes                           | Procedures to uninstall a Cask. Optional unless the `pkg` stanza is used. See [Uninstall Stanza Details](#stanza-uninstall) for more information.                                                                                                                                                                                                |\n| `zap`                  | yes                           | Additional procedures for a more complete uninstall, including user files and shared resources. See [Zap Stanza Details](#stanza-zap) for more information.                                                                                                                                                                                      |\n| `appcast`              | no                            | URL providing an appcast feed to find updates for this Cask. See [Appcast Stanza Details](#stanza-appcast) for more information.                                                                                                                                                                                                                 |\n| `depends_on`           | yes                           | List of dependencies and requirements for this Cask. See [Depends_on Stanza Details](#stanza-depends_on) for more information.                                                                                                                                                                                                                   |\n| `conflicts_with`       | yes                           | List of conflicts with this Cask (*not yet functional*). See [Conflicts_with Stanza Details](#stanza-conflicts_with) for more information.                                                                                                                                                                                                       |\n| `caveats`              | yes                           | String or Ruby block providing the user with Cask-specific information at install time. See [Caveats Stanza Details](#stanza-caveats) for more information.                                                                                                                                                                                      |\n| `livecheck`            | no                            | Ruby block describing how to find updates for this Cask. See [Livecheck Stanza Details](#stanza-livecheck) for more information.                                                                                                                                                                                                                 |\n| `preflight`            | yes                           | Ruby block containing preflight install operations (needed only in very rare cases).                                                                                                                                                                                                                                                             |\n| `postflight`           | yes                           | Ruby block containing postflight install operations. See [Postflight Stanza Details](#stanza-flight) for more information.                                                                                                                                                                                                                       |\n| `uninstall_preflight`  | yes                           | Ruby block containing preflight uninstall operations (needed only in very rare cases).                                                                                                                                                                                                                                                           |\n| `uninstall_postflight` | yes                           | Ruby block containing postflight uninstall operations.                                                                                                                                                                                                                                                                                           |\n| `language`             | required                      | Ruby block, called with language code parameters, containing other stanzas and/or a return value. See [Language Stanza Details](#stanza-language) for more information.                                                                                                                                                                          |\n| `container nested:`    | no                            | Relative path to an inner container that must be extracted before moving on with the installation. This allows us to support dmg inside tar, zip inside dmg, etc.                                                                                                                                                                                |\n| `container type:`      | no                            | Symbol to override container-type autodetect. May be one of: `:air`, `:bz2`, `:cab`, `:dmg`, `:generic_unar`, `:gzip`, `:otf`, `:pkg`, `:rar`, `:seven_zip`, `:sit`, `:tar`, `:ttf`, `:xar`, `:zip`, `:naked`. (Example: [parse.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/parse.rb#L11)) |\n| `auto_updates`         | no                            | `true`. Assert the Cask artifacts auto-update. Use if `Check for Updates…` or similar is present in app menu, but not if it only opens a webpage and does not do the download and installation for you.                                                                                                                                          |\n\n## Stanza descriptions\n\n### Stanza: `app`\n\nIn the simple case of a string argument to `app`, the source file is moved to the target `/Applications` directory. For example:\n\n``` ruby\napp \"Alfred 2.app\"\n```\n\nby default moves the source to:\n\n``` bash\n/Applications/Alfred 2.app\n```\n\n#### Renaming the Target\n\nYou can rename the target which appears in your `/Applications` directory by adding a `target:` key to `app`. Example (from [scala-ide.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/scala-ide.rb#L21)):\n\n``` ruby\napp \"eclipse/Eclipse.app\", target: \"Scala IDE.app\"\n```\n\n#### target: May Contain an Absolute Path\n\nIf `target:` has a leading slash, it is interpreted as an absolute path. The containing directory for the absolute path will be created if it does not already exist. Example (from [manopen.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/manopen.rb#L12)):\n\n``` ruby\nartifact \"openman.1\", target: \"/usr/local/share/man/man1/openman.1\"\n```\n\n#### target: Works on Most Artifact Types\n\nThe `target:` key works similarly for most Cask artifacts, such as `app`, `binary`, `colorpicker`, `dictionary`, `font`, `input_method`, `prefpane`, `qlplugin`, `mdimporter`, `service`, `suite`, and `artifact`.\n\n#### target: Should Only Be Used in Select Cases\n\nDon’t use `target:` for aesthetic reasons, like removing version numbers (`app \"Slack #{version}.app\", target: \"Slack.app\"`). Use it when it makes sense functionally and document your reason clearly in the Cask, using one of the templates: [for clarity](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/imagemin.rb#L12); [for consistency](https://github.com/Homebrew/homebrew-cask/blob/d2a6b26df69fc28c4d84d6f5198b2b652c2f414d/Casks/devonthink-pro-office.rb#L16); [to prevent conflicts](https://github.com/Homebrew/homebrew-cask/blob/bd6dc1a64e0bdd35ba0e20789045ea023b0b6aed/Casks/flash-player-debugger.rb#L11); [due to developer suggestion](https://github.com/Homebrew/homebrew-cask/blob/ff3e9c4a6623af44b8a071027e8dcf3f4edfc6d9/Casks/kivy.rb#L12).\n\n### Stanza: `appcast`\n\nThe value of the `appcast` stanza is a string, holding the URL for an appcast which provides information on future updates.\n\nNote: The [`livecheck` stanza](#stanza-livecheck) should be preferred in most cases, as it allows casks to be updated automatically.\n\nThe main casks repo only accepts submissions for stable versions of software (and [documented exceptions](acceptable-casks#but-there-is-no-stable-version)), but it still gets pull requests for unstable versions. By checking the submitted `version` against the contents of an appcast, we can better detect these invalid cases.\n\nExample: [`atom.rb`](https://github.com/Homebrew/homebrew-cask/blob/645dbb8228ec2f1f217ed1431e188687aac13ca5/Casks/atom.rb#L7)\n\nThere are a few different ways the `appcast` can be determined:\n\n- If the app is distributed via GitHub releases, the `appcast` will be of the form `https://github.com/<user>/<project_name>/releases.atom`. Example: [`electron.rb`](https://github.com/Homebrew/homebrew-cask/blob/645dbb8228ec2f1f217ed1431e188687aac13ca5/Casks/electron.rb#L7)\n\n- If the app is distributed via GitLab releases, the `appcast` will be of the form `https://gitlab.com/<user>/<project_name>/-/tags?format=atom`. Example: [`grafx.rb`](https://github.com/Homebrew/homebrew-cask/blob/b22381902f9da870bb07d21b496558f283dad612/Casks/grafx.rb#L6)\n\n- The popular update framework [Sparkle](https://sparkle-project.org/) generally uses the `SUFeedURL` property in `Contents/Info.plist` inside `.app` bundles. Example: [`glyphs.rb`](https://github.com/Homebrew/homebrew-cask/blob/645dbb8228ec2f1f217ed1431e188687aac13ca5/Casks/glyphs.rb#L6)\n\n- Sourceforge projects follow the form `https://sourceforge.net/projects/<project_name>/rss`. A more specific page can be used as needed, pointing to a specific directory structure: `https://sourceforge.net/projects/<project_name>/rss?path=/<path_here>`. Example: [`seashore.rb`](https://github.com/Homebrew/homebrew-cask/blob/645dbb8228ec2f1f217ed1431e188687aac13ca5/Casks/seashore.rb#L6)\n\n- An appcast can be any URL hosted by the app’s developer that changes every time a new release is out or that contains the version number of the current release (e.g. a download HTML page). Webpages that only change on new version releases are preferred, as are sites that do not contain previous version strings (i.e. avoid changelog pages if the download page contains the current version number but not older ones). Example: [`razorsql.rb`](https://github.com/Homebrew/homebrew-cask/blob/645dbb8228ec2f1f217ed1431e188687aac13ca5/Casks/razorsql.rb#L6)\n\nThe [`find-appcast`](https://github.com/Homebrew/homebrew-cask/blob/HEAD/developer/bin/find-appcast) script is able to identify some of these, as well as `electron-builder` appcasts which are trickier to find by hand. Run it with `\"$(brew --repository homebrew/cask)/developer/bin/find-appcast\" '</path/to/software.app>'`.\n\n#### Parameters\n\n| key             | value                                                               |\n|-----------------|---------------------------------------------------------------------|\n| `must_contain:` | a custom string for `brew audit --appcast <cask>` to check against. |\n\nSometimes a `version` doesn’t match a string on the webpage, in which case we tweak what to search for. Example: if `version` is `6.26.1440` and the appcast’s contents only show `6.24`, the check for “is `version` in the appcast feed” will fail. With `must_contain`, the check is told to “look for this string instead of `version`”. In the example, `must_contain: version.major_minor` is saying “look for `6.24`”, making the check succeed.\n\nIf no `must_contain` is given, the check considers from the beginning of the `version` string until the first character that isn’t alphanumeric or a period. Example: if `version` is `6.26b-14,40`, the check will see `6.26b`. This is so it covers most cases by default, while still allowing complex `version`s suitable for interpolation on the rest of the cask.\n\nExample of using `must_contain`: [`hwsensors.rb`](https://github.com/Homebrew/homebrew-cask/blob/87bc3860f43d5b14d0c38ae8de469d24ee7f5b2f/Casks/hwsensors.rb#L6L7)\n\n### Stanza: `binary`\n\nIn the simple case of a string argument to `binary`, the source file is linked into the `$(brew --prefix)/bin` directory (typically `/usr/local/bin`) on installation. For example (from [operadriver.rb](https://github.com/Homebrew/homebrew-cask/blob/60531a2812005dd5f17dc92f3ce7419af3c5d019/Casks/operadriver.rb#L11)):\n\n``` ruby\nbinary \"operadriver\"\n```\n\ncreates a symlink to:\n\n``` bash\n$(brew --prefix)/bin/operadriver\n```\n\nfrom a source file such as:\n\n``` bash\n/usr/local/Caskroom/operadriver/0.2.2/operadriver\n```\n\nA binary (or multiple) can also be contained in an application bundle:\n\n``` ruby\napp \"Atom.app\"\nbinary \"#{appdir}/Atom.app/Contents/Resources/app/apm/bin/apm\"\n```\n\nYou can rename the target which appears in your binaries directory by adding a `target:` key to `binary`:\n\n``` ruby\nbinary \"#{appdir}/Atom.app/Contents/Resources/app/atom.sh\", target: \"atom\"\n```\n\nBehaviour and usage of `target:` is [the same as with `app`](#renaming-the-target). However, for `binary` the select cases don’t apply as rigidly. It’s fine to take extra liberties with `target:` to be consistent with other command-line tools, like [changing case](https://github.com/Homebrew/homebrew-cask/blob/9ad93b833961f1d969505bc6bdb1c2ad4e58a433/Casks/openscad.rb#L12), [removing an extension](https://github.com/Homebrew/homebrew-cask/blob/c443d4f5c6864538efe5bb1ecf662565a5ffb438/Casks/filebot.rb#L13), or [cleaning up the name](https://github.com/Homebrew/homebrew-cask/blob/146917cbcc679648de6b0bccff4e9b43fce0e6c8/Casks/minishift.rb#L13).\n\n### Stanza: `caveats`\n\nSometimes there are particularities with the installation of a piece of software that cannot or should not be handled programmatically by Homebrew Cask. In those instances, `caveats` is the way to inform the user. Information in `caveats` is displayed when a cask is invoked with either `install` or `info`.\n\nTo avoid flooding users with too many messages (thus desensitising them to the important ones), `caveats` should be used sparingly and exclusively for installation-related matters. If you’re not sure a `caveat` you find pertinent is installation-related or not, ask a maintainer. As a general rule, if your case isn’t already covered in our comprehensive [`caveats Mini-DSL`](#caveats-mini-dsl), it’s unlikely to be accepted.\n\n#### caveats as a String\n\nWhen `caveats` is a string, it is evaluated at compile time. The following methods are available for interpolation if `caveats` is placed in its customary position at the end of the Cask:\n\n| method          | description                                                                                                                           |\n|-----------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| `token`         | the Cask token                                                                                                                        |\n| `version`       | the Cask version                                                                                                                      |\n| `homepage`      | the Cask homepage                                                                                                                     |\n| `caskroom_path` | the containing directory for this Cask, typically `/usr/local/Caskroom/<token>` (only available with block form)                      |\n| `staged_path`   | the staged location for this Cask, including version number: `/usr/local/Caskroom/<token>/<version>` (only available with block form) |\n\nExample:\n\n``` ruby\ncaveats \"Using #{token} is hazardous to your health.\"\n```\n\n#### caveats as a Block\n\nWhen `caveats` is a Ruby block, evaluation is deferred until install time. Within a block you may refer to the `@cask` instance variable, and invoke any method available on `@cask`.\n\n#### caveats Mini-DSL\n\nThere is a mini-DSL available within `caveats` blocks.\n\nThe following methods may be called to generate standard warning messages:\n\n| method                             | description                                                                                                                                                              |\n|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `path_environment_variable \"path\"` | users should make sure `path` is in their `$PATH` environment variable.                                                                                                  |\n| `zsh_path_helper \"path\"`           | zsh users must take additional steps to make sure `path` is in their `$PATH` environment variable.                                                                       |\n| `depends_on_java \"version\"`        | users should make sure they have the specified version of java installed. `version` can be exact (e.g. `6`), a minimum (e.g. `7+`), or omitted (when any version works). |\n| `logout`                           | users should log out and log back in to complete installation.                                                                                                           |\n| `reboot`                           | users should reboot to complete installation.                                                                                                                            |\n| `files_in_usr_local`               | the Cask installs files to `/usr/local`, which may confuse Homebrew.                                                                                                     |\n| `discontinued`                     | all software development has been officially discontinued upstream.                                                                                                      |\n| `free_license \"web_page\"`          | users may get an official license to use the software at `web_page`.                                                                                                     |\n| `kext`                             | users may need to enable their kexts in System Preferences → Security & Privacy → General.                                                                               |\n| `unsigned_accessibility`           | users will need to re-enable the app on each update in System Preferences → Security & Privacy → Privacy as it is unsigned.                                              |\n| `license \"web_page\"`               | software has a usage license at `web_page`.                                                                                                                              |\n\nExample:\n\n``` ruby\ncaveats do\n  path_environment_variable \"/usr/texbin\"\nend\n```\n\n### Stanza: `conflicts_with`\n\n`conflicts_with` is used to declare conflicts that keep a Cask from installing or working correctly.\n\n#### conflicts_with cask\n\nThe value should be another Cask token.\n\nExample use: [`wireshark`](https://github.com/Homebrew/homebrew-cask/blob/903493e09cf33b845e7cf497ecf9cfc9709087ee/Casks/wireshark.rb#L10), which conflicts with `wireshark-chmodbpf`.\n\n``` ruby\nconflicts_with cask: \"wireshark-chmodbpf\"\n```\n\n#### conflicts_with formula\n\nNote: `conflicts_with formula:` is a stub and is not yet functional.\n\nThe value should be another formula name.\n\nExample use: [`macvim`](https://github.com/Homebrew/homebrew-cask/blob/84b90afd7b571e581f8a48d4bdf9c7bb24ebff3b/Casks/macvim.rb#L10), which conflicts with the `macvim` formula.\n\n``` ruby\nconflicts_with formula: \"macvim\"\n```\n\n### Stanza: `depends_on`\n\n`depends_on` is used to declare dependencies and requirements for a Cask. `depends_on` is not consulted until `install` is attempted.\n\n#### depends_on cask\n\nThe value should be another Cask token, needed by the current Cask.\n\nExample use: [`cellery`](https://github.com/Homebrew/homebrew-cask/blob/4002df8f6bca93ed6eb40494995fcfa038cf99bf/Casks/cellery.rb#L11) depends on OSXFUSE:\n\n``` ruby\ndepends_on cask: \"osxfuse\"\n```\n\n#### depends_on formula\n\nThe value should name a Homebrew Formula needed by the Cask.\n\nExample use: some distributions are contained in archive formats such as `7z` which are not supported by stock Apple tools. For these cases, a more capable archive reader may be pulled in at install time by declaring a dependency on the Homebrew Formula `unar`:\n\n``` ruby\ndepends_on formula: \"unar\"\n```\n\n#### depends_on macos\n\n##### Requiring an Exact macOS Release\n\nThe value for `depends_on macos:` may be a symbol or an array of symbols, listing the exact compatible macOS releases.\n\nThe available values for macOS releases are:\n\n| symbol         | corresponding release |\n|----------------|-----------------------|\n| `:el_capitan`  | `10.11`               |\n| `:sierra`      | `10.12`               |\n| `:high_sierra` | `10.13`               |\n| `:mojave`      | `10.14`               |\n| `:catalina`    | `10.15`               |\n| `:big_sur`     | `11.0`                |\n| `:monterey`    | `12.0`                |\n\nOnly major releases are covered (version numbers containing a single dot). The symbol form is used for readability. The following are all valid ways to enumerate the exact macOS release requirements for a Cask:\n\n``` ruby\ndepends_on macos: :big_sur\ndepends_on macos: [\n  :catalina,\n  :big_sur,\n]\n```\n\n##### Setting a Minimum macOS Release\n\n`depends_on macos:` can also accept a string starting with a comparison operator such as `>=`, followed by an macOS release in the form above. The following is a valid expression meaning “at least macOS Big Sur (11.0)”:\n\n``` ruby\ndepends_on macos: \">= :big_sur\"\n```\n\nA comparison expression cannot be combined with any other form of `depends_on macos:`.\n\n#### depends_on arch\n\nThe value for `depends_on arch:` may be a symbol or an array of symbols, listing the hardware compatibility requirements for a Cask. The requirement is satisfied at install time if any one of multiple `arch:` value matches the user’s hardware.\n\nThe available symbols for hardware are:\n\n| symbol    | meaning       |\n|-----------|---------------|\n| `:x86_64` | 64-bit Intel  |\n| `:intel`  | 64-bit Intel  |\n| `:arm64`  | Apple Silicon |\n\nThe following are all valid expressions:\n\n``` ruby\ndepends_on arch: :intel\ndepends_on arch: :x86_64            # same meaning as above\ndepends_on arch: [:x86_64]          # same meaning as above\ndepends_on arch: :arm64\n```\n\n#### All depends_on Keys\n\n| key        | description                                                                           |\n|------------|---------------------------------------------------------------------------------------|\n| `formula:` | a Homebrew Formula                                                                    |\n| `cask:`    | a Cask token                                                                          |\n| `macos:`   | a symbol, string, array, or comparison expression defining macOS release requirements |\n| `arch:`    | a symbol or array defining hardware requirements                                      |\n| `java:`    | *stub - not yet functional*                                                           |\n\n### Stanza: `desc`\n\n`desc` accepts a single-line UTF-8 string containing a short description of the software. It’s used to help with searchability and disambiguation, thus it must concisely describe what the software does (or what you can accomplish with it).\n\n`desc` is not for app slogans! Vendors’ descriptions tend to be filled with generic adjectives such as “modern” and “lightweight”. Those are meaningless marketing fluff (do you ever see apps proudly describing themselves as outdated and bulky?) which must the deleted. It’s fine to use the information on the software’s website as a starting point, but it will require editing in almost all cases.\n\n#### Dos and Don’ts\n\n- **Do** start with an uppercase letter.\n\n  ``` diff\n  - desc \"sound and music editor\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do** be brief, i.e. use less than 80 characters.\n\n  ``` diff\n  - desc \"Sound and music editor which comes with effects, instruments, sounds and all kinds of creative features\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do** describe what the software does or is:\n\n  ``` diff\n  - desc \"Development of musical ideas made easy\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do not** include the platform. Casks only work on macOS, so this is redundant information.\n\n  ``` diff\n  - desc \"Sound and music editor for macOS\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do not** include the Cask’s [name](#stanza-name).\n\n  ``` diff\n  - desc \"Ableton Live is a sound and music editor\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do not** include the vendor. This should be added to the Cask’s [name](#stanza-name) instead.\n\n  ``` diff\n  - desc \"Sound and music editor made by Ableton\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do not** add user pronouns.\n\n  ``` diff\n  - desc \"Edit your music files\"\n  + desc \"Sound and music editor\"\n  ```\n\n- **Do not** use empty marketing jargon.\n\n  ``` diff\n  - desc \"Beautiful and powerful modern sound and music editor\"\n  + desc \"Sound and music editor\"\n  ```\n\n### Stanza: `\\*flight`\n\n#### Evaluation of Blocks is Always Deferred\n\nThe Ruby blocks defined by `preflight`, `postflight`, `uninstall_preflight`, and `uninstall_postflight` are not evaluated until install time or uninstall time. Within a block, you may refer to the `@cask` instance variable, and invoke any method available on `@cask`.\n\n#### \\*flight Mini-DSL\n\nThere is a mini-DSL available within these blocks.\n\nThe following methods may be called to perform standard tasks:\n\n| method                                    | availability                                     | description                                                                                                                                                                                          |\n|-------------------------------------------|--------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `set_ownership(paths)`                    | `preflight`, `postflight`, `uninstall_preflight` | set user and group ownership of `paths`. Example: [`unifi-controller.rb`](https://github.com/Homebrew/homebrew-cask/blob/8a452a41707af6a661049da6254571090fac5418/Casks/unifi-controller.rb#L13)     |\n| `set_permissions(paths, permissions_str)` | `preflight`, `postflight`, `uninstall_preflight` | set permissions in `paths` to `permissions_str`. Example: [`docker-machine.rb`](https://github.com/Homebrew/homebrew-cask/blob/8a452a41707af6a661049da6254571090fac5418/Casks/docker-machine.rb#L16) |\n\n`set_ownership(paths)` defaults user ownership to the current user and group ownership to `staff`. These can be changed by passing in extra options: `set_ownership(paths, user: 'user', group: 'group')`.\n\n### Stanza: `installer`\n\nThis stanza must always be accompanied by [`uninstall`](#stanza-uninstall).\n\nThe `installer` stanza takes a series of key-value pairs, the first key of which must be `manual:` or `script:`.\n\n#### installer manual\n\n`installer manual:` takes a single string value, describing a GUI installer which must be run by the user at a later time. The path may be absolute, or relative to the Cask. Example (from [nutstore.rb](https://github.com/Homebrew/homebrew-cask/blob/249ec31048591308e63e50f79dae01d2f933cccf/Casks/nutstore.rb#L9)):\n\n``` ruby\ninstaller manual: \"Nutstore Installer.app\"\n```\n\n#### installer script\n\n`installer script:` introduces a series of key-value pairs describing a command which will automate completion of the install. **It should never be used for interactive installations.** The form is similar to `uninstall script:`:\n\n| key             | value                                                       |\n|-----------------|-------------------------------------------------------------|\n| `executable:`   | path to an install script to be run                         |\n| `args:`         | array of arguments to the install script                    |\n| `input:`        | array of lines of input to be sent to `stdin` of the script |\n| `must_succeed:` | set to `false` if the script is allowed to fail             |\n| `sudo:`         | set to `true` if the script needs `sudo`                    |\n\nThe path may be absolute, or relative to the Cask. Example (from [miniforge.rb](https://github.com/Homebrew/homebrew-cask/blob/ed2033fb3578376c3ee58a2cb459ef96fa6eb37d/Casks/miniforge.rb#L15L18)):\n\n``` ruby\ninstaller script: {\n    executable: \"Miniforge3-#{version}-MacOSX-x86_64.sh\",\n    args:       [\"-b\", \"-p\", \"#{caskroom_path}/base\"],\n  }\n```\n\nIf the `installer script:` does not require any of the key-values it can point directly to the path of the install script:\n\n``` ruby\ninstaller script: \"#{staged_path}/install.sh\"\n```\n\n### Stanza: `language`\n\nThe `language` stanza can match [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language codes, regional identifiers ([ISO 3166-1 Alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)) and script codes ([ISO 15924](https://en.wikipedia.org/wiki/ISO_15924)), or a combination thereof.\n\nUS English should always be used as the default language:\n\n``` ruby\nlanguage \"zh\", \"CN\" do\n  \"zh_CN\"\nend\n\nlanguage \"de\" do\n  \"de_DE\"\nend\n\nlanguage \"en-GB\" do\n  \"en_GB\"\nend\n\nlanguage \"en\", default: true do\n  \"en_US\"\nend\n```\n\nNote that the following are not the same:\n\n``` ruby\nlanguage \"en\", \"GB\" do\n  # matches all locales containing \"en\" or \"GB\"\nend\n\nlanguage \"en-GB\" do\n  # matches only locales containing \"en\" and \"GB\"\nend\n```\n\nThe return value of the matching `language` block can be accessed by simply calling `language`.\n\n``` ruby\nhomepage \"https://example.org/#{language}\"\n```\n\nExamples: [Firefox](https://github.com/Homebrew/homebrew-cask/blob/306b8fbd9502036f1ca742f70c569d8677b62403/Casks/firefox.rb#L4L74), [Battle.net](https://github.com/Homebrew/homebrew-cask/blob/306b8fbd9502036f1ca742f70c569d8677b62403/Casks/battle-net.rb#L5L17)\n\n#### Installation\n\nTo install a cask in a specific language, you can pass the `--language=` option to `brew install`:\n\n``` plaintext\nbrew install firefox --language=it\n```\n\n### Stanza: `livecheck`\n\nThe `livecheck` stanza is used to automatically fetch the latest version of a cask from changelogs, release notes, appcasts, etc. See also: [`brew livecheck` reference](brew-livecheck)\n\nEvery `livecheck` block must contain a `url`, which can either be a string or a symbol pointing to other URLs in the cask (`:url` or `:homepage`).\n\nAdditionally, a `livecheck` should specify which `strategy` should be used to extract the version:\n\n| `strategy`      | Description                                                                  |\n|-----------------|------------------------------------------------------------------------------|\n| `:header_match` | extract version from HTTP headers (e.g. `Location` or `Content-Disposition`) |\n| `:page_match`   | extract version from page contents                                           |\n| `:sparkle`      | extract version from Sparkle appcast contents                                |\n\nHere is a basic example, extracting a simple version from a page:\n\n``` ruby\nlivecheck do\n  url \"https://example.org/my-app/download\"\n  strategy :page_match\n  regex(%r{href=.*?/MyApp-(\\d+(?:\\.\\d+)*)\\.zip}i)\nend\n```\n\nIf the download URL is present on the homepage, we can use a symbol instead of a string:\n\n``` ruby\nlivecheck do\n  url :homepage\n  strategy :page_match\n  regex(%r{href=.*?/MyApp-(\\d+(?:\\.\\d+)*)\\.zip}i)\nend\n```\n\nThe `header_match` strategy will try parsing a version from the filename (in the `Content-Disposition` header) and the final URL (in the `Location` header). If that doesn’t work, a `regex` can be specified, e.g.:\n\n``` ruby\nstrategy :header_match\nregex(/MyApp-(\\d+(?:\\.\\d+)*)\\.zip/i)\n```\n\nIf the version depends on multiple header fields, a block can be specified, e.g.\n\n``` ruby\nstrategy :header_match do |headers|\n  v = headers[\"content-disposition\"][/MyApp-(\\d+(?:\\.\\d+)*)\\.zip/i, 1]\n  id = headers[\"location\"][%r{/(\\d+)/download$}i, 1]\n  next if v.blank? || id.blank?\n\n  \"#{v},#{id}\"\nend\n```\n\nSimilarly, the `:page_match` strategy can also be used for more complex versions by specifying a block:\n\n``` ruby\nstrategy :page_match do |page|\n  match = page.match(%r{href=.*?/(\\d+)/MyApp-(\\d+(?:\\.\\d+)*)\\.zip}i)\n  next if match.blank?\n\n  \"#{match[2]},#{match[1]}\"\nend\n```\n\n### Stanza: `name`\n\n`name` accepts a UTF-8 string defining the name of the software, including capitalization and punctuation. It is used to help with searchability and disambiguation.\n\nUnlike the [token](#token-reference), which is simplified and reduced to a limited set of characters, the `name` stanza can include the proper capitalization, spacing and punctuation to match the official name of the software. For disambiguation purposes, it is recommended to spell out the name of the application, and including the vendor name if necessary. A good example is [`pycharm-ce`](https://github.com/Homebrew/homebrew-cask/blob/fc05c0353aebb28e40db72faba04b82ca832d11a/Casks/pycharm-ce.rb#L6-L7), whose name is spelled out as `Jetbrains PyCharm Community Edition`, even though it is likely never referenced as such anywhere.\n\nAdditional details about the software can be provided in the [desc](#stanza-desc) stanza.\n\nThe `name` stanza can be repeated multiple times if there are useful alternative names. The first instance should use the Latin alphabet. For example, see the [`cave-story`](https://github.com/Homebrew/homebrew-cask/blob/0fe48607f5656e4f1de58c6884945378b7e6f960/Casks/cave-story.rb#L7-L9) cask, whose original name does not use the Latin alphabet.\n\n### Stanza: `pkg`\n\nThis stanza must always be accompanied by [`uninstall`](#stanza-uninstall)\n\nThe first argument to the `pkg` stanza should be a relative path to the `.pkg` file to be installed. For example:\n\n``` ruby\npkg \"Unity.pkg\"\n```\n\nSubsequent arguments to `pkg` are key/value pairs which modify the install process. Currently supported keys are `allow_untrusted:` and `choices:`.\n\n#### `pkg allow_untrusted:`\n\n`pkg allow_untrusted: true` can be used to install the `.pkg` with an untrusted certificate passing `-allowUntrusted` to `/usr/sbin/installer`.\n\nThis option is not permitted in official Homebrew Cask taps, it is only provided for use in third-party taps or local Casks.\n\nExample ([alinof-timer.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/alinof-timer.rb#L10)):\n\n``` ruby\npkg \"AlinofTimer.pkg\", allow_untrusted: true\n```\n\n#### `pkg choices:`\n\n`pkg choices:` can be used to override `.pkg`’s default install options via `-applyChoiceChangesXML`. It uses a deserialized version of the `choiceChanges` property list (refer to the `CHOICE CHANGES FILE` section of the `installer` manual page by running `man -P 'less --pattern \"^CHOICE CHANGES FILE\"' installer`).\n\nRunning the macOS command:\n\n``` bash\ninstaller -showChoicesXML -pkg '/path/to/my.pkg'\n```\n\nwill output an XML which you can use to extract the `choices:` values, as well as their equivalents to the GUI options.\n\nSee [this pull request for wireshark-chmodbpf](https://github.com/Homebrew/homebrew-cask/pull/26997) and [this one for wine-staging](https://github.com/Homebrew/homebrew-cask/pull/27937) for some examples of the procedure.\n\nExample ([wireshark-chmodbpf.rb](https://github.com/Homebrew/homebrew-cask/blob/f95b8a8306b91fe9da7908b842f4a5fa80f7afe0/Casks/wireshark-chmodbpf.rb#L9-L26)):\n\n``` ruby\npkg \"Wireshark #{version} Intel 64.pkg\",\n    choices: [\n               {\n                 \"choiceIdentifier\" => \"wireshark\",\n                 \"choiceAttribute\"  => \"selected\",\n                 \"attributeSetting\" => 0,\n               },\n               {\n                 \"choiceIdentifier\" => \"chmodbpf\",\n                 \"choiceAttribute\"  => \"selected\",\n                 \"attributeSetting\" => 1,\n               },\n               {\n                 \"choiceIdentifier\" => \"cli\",\n                 \"choiceAttribute\"  => \"selected\",\n                 \"attributeSetting\" => 0,\n               },\n             ]\n```\n\nExample ([wine-staging.rb](https://github.com/Homebrew/homebrew-cask/blob/51b65f6a5a25a7f79af4d372e1a0bf1dc3849251/Casks/wine-staging.rb#L11-L18)):\n\n``` ruby\npkg \"winehq-staging-#{version}.pkg\",\n    choices: [\n               {\n                 \"choiceIdentifier\" => \"choice3\",\n                 \"choiceAttribute\"  => \"selected\",\n                 \"attributeSetting\" => 1,\n               },\n             ]\n```\n\n### Stanza: `sha256`\n\n#### Calculating the SHA256\n\nThe `sha256` value is usually calculated by the command:\n\n``` bash\nshasum --algorithm 256 <file>\n```\n\n#### Special Value `:no_check`\n\nThe special value `sha256 :no_check` is used to turn off SHA checking whenever checksumming is impractical due to the upstream configuration.\n\n`version :latest` requires `sha256 :no_check`, and this pairing is common. However, `sha256 :no_check` does not require `version :latest`.\n\nWe use a checksum whenever possible.\n\n### Stanza: `suite`\n\nSome distributions provide a suite of multiple applications, or an application with required data, to be installed together in a subdirectory of `/Applications`.\n\nFor these Casks, use the `suite` stanza to define the directory containing the application suite. Example (from [sketchup.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/sketchup.rb#L12)):\n\n``` ruby\nsuite \"SketchUp 2016\"\n```\n\nThe value of `suite` is never an `.app` bundle, but a plain directory.\n\n### Stanza: `uninstall`\n\n> If you cannot design a working `uninstall` stanza, please submit your cask anyway. The maintainers can help you write an `uninstall` stanza, just ask!\n\n#### `uninstall pkgutil:` Is The Easiest and Most Useful\n\n`pkgutil:` is the easiest and most useful `uninstall` directive. See [Uninstall Key pkgutil:](#uninstall-key-pkgutil).\n\n#### `uninstall` Is Required for Casks That Install a pkg or installer manual\n\nFor most Casks, uninstall actions are determined automatically, and an explicit `uninstall` stanza is not needed. However, a Cask which uses the `pkg` or `installer manual:` stanzas will **not** know how to uninstall correctly unless an `uninstall` stanza is given.\n\nSo, while the [Cask DSL](#required-stanzas) does not enforce the requirement, it is much better for end-users if every `pkg` and `installer manual:` has a corresponding `uninstall`.\n\nThe `uninstall` stanza is available for non-`pkg` Casks, and is useful for a few corner cases. However, the documentation below concerns the typical case of using `uninstall` to define procedures for a `pkg`.\n\n#### There Are Multiple Uninstall Techniques\n\nSince `pkg` installers can do arbitrary things, different techniques are needed to uninstall in each case. You may need to specify one, or several, of the following key/value pairs as arguments to `uninstall`.\n\n#### Summary of Keys\n\n- `early_script:` (string or hash) - like [`script:`](#uninstall-key-script), but runs early (for special cases, best avoided)\n- [`launchctl:`](#uninstall-key-launchctl) (string or array) - ids of `launchctl` jobs to remove\n- [`quit:`](#uninstall-key-quit) (string or array) - bundle ids of running applications to quit\n- [`signal:`](#uninstall-key-signal) (array of arrays) - signal numbers and bundle ids of running applications to send a Unix signal to (used when `quit:` does not work)\n- [`login_item:`](#uninstall-key-login_item) (string or array) - names of login items to remove\n- [`kext:`](#uninstall-key-kext) (string or array) - bundle ids of kexts to unload from the system\n- [`script:`](#uninstall-key-script) (string or hash) - relative path to an uninstall script to be run via sudo; use hash if args are needed\n  - `executable:` - relative path to an uninstall script to be run via sudo (required for hash form)\n  - `args:` - array of arguments to the uninstall script\n  - `input:` - array of lines of input to be sent to `stdin` of the script\n  - `must_succeed:` - set to `false` if the script is allowed to fail\n  - `sudo:` - set to `true` if the script needs `sudo`\n- [`pkgutil:`](#uninstall-key-pkgutil) (string, regexp or array of strings and regexps) - strings or regexps matching bundle ids of packages to uninstall using `pkgutil`\n- [`delete:`](#uninstall-key-delete) (string or array) - single-quoted, absolute paths of files or directory trees to remove. `delete:` should only be used as a last resort. `pkgutil:` is strongly preferred.\n- `rmdir:` (string or array) - single-quoted, absolute paths of directories to remove if empty. Works recursively.\n- [`trash:`](#uninstall-key-trash) (string or array) - single-quoted, absolute paths of files or directory trees to move to Trash.\n\nEach `uninstall` technique is applied according to the order above. The order in which `uninstall` keys appear in the Cask file is ignored.\n\nFor assistance filling in the right values for `uninstall` keys, there are several helper scripts found under `developer/bin` in the Homebrew Cask repository. Each of these scripts responds to the `-help` option with additional documentation.\n\nThe easiest way to work out an `uninstall` stanza is on a system where the `pkg` is currently installed and operational. To operate on an uninstalled `pkg` file, see [Working With a pkg File Manually](#working-with-a-pkg-file-manually), below.\n\n#### `uninstall` Key `pkgutil:`\n\nThis is the most useful uninstall key. `pkgutil:` is often sufficient to completely uninstall a `pkg`, and is strongly preferred over `delete:`.\n\nIDs for the most recently-installed packages can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_recent_pkg_ids\"\n```\n\n`pkgutil:` also accepts a regular expression match against multiple package IDs. The regular expressions are somewhat nonstandard. To test a `pkgutil:` regular expression against currently-installed packages, use the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_pkg_ids_by_regexp\" <regular-expression>\n```\n\n#### List Files Associated With a pkg Id\n\nOnce you know the ID for an installed package, (above), you can list all files on your system associated with that package ID using the macOS command:\n\n``` bash\npkgutil --files <package.id.goes.here>\n```\n\nListing the associated files can help you assess whether the package included any `launchctl` jobs or kernel extensions (kexts).\n\n#### `uninstall` Key `launchctl:`\n\nIDs for currently loaded `launchctl` jobs can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_loaded_launchjob_ids\"\n```\n\nIDs for all installed `launchctl` jobs can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_installed_launchjob_ids\"\n```\n\n#### `uninstall` Key `quit:`\n\nBundle IDs for currently running Applications can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_running_app_ids\"\n```\n\nBundle IDs inside an Application bundle on disk can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_ids_in_app\" '/path/to/application.app'\n```\n\n#### `uninstall` Key `signal:`\n\n`signal:` should only be needed in the rare case that a process does not respond to `quit:`.\n\nBundle IDs for `signal:` targets may be obtained as for `quit:`. The value for `signal:` is an array-of-arrays, with each cell containing two elements: the desired Unix signal followed by the corresponding bundle ID.\n\nThe Unix signal may be given in numeric or string form (see the `kill` man page for more details).\n\nThe elements of the `signal:` array are applied in order, only if there is an existing process associated the bundle ID, and stopping when that process terminates. A bundle ID may be repeated to send more than one signal to the same process.\n\nIt is better to use the least-severe signals which are sufficient to stop a process. The `KILL` signal in particular can have unwanted side-effects.\n\nAn example, with commonly-used signals in ascending order of severity:\n\n``` ruby\nuninstall signal: [\n                      [\"TERM\", \"fr.madrau.switchresx.daemon\"],\n                      [\"QUIT\", \"fr.madrau.switchresx.daemon\"],\n                      [\"INT\",  \"fr.madrau.switchresx.daemon\"],\n                      [\"HUP\",  \"fr.madrau.switchresx.daemon\"],\n                      [\"KILL\", \"fr.madrau.switchresx.daemon\"],\n                    ]\n```\n\nNote that when multiple running processes match the given Bundle ID, all matching processes will be signaled.\n\nUnlike `quit:` directives, Unix signals originate from the current user, not from the superuser. This is construed as a safety feature, since the superuser is capable of bringing down the system via signals. However, this inconsistency may also be considered a bug, and should be addressed in some fashion in a future version.\n\n## `uninstall` key `login_item:`\n\nLogin items associated with an Application bundle on disk can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_login_items_for_app\" '/path/to/application.app'\n```\n\nNote that you will likely need to have opened the app at least once for any login items to be present.\n\n#### `uninstall` Key `kext:`\n\nIDs for currently loaded kernel extensions can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_loaded_kext_ids\"\n```\n\nIDs inside a kext bundle you have located on disk can be listed using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_id_in_kext\" '/path/to/name.kext'\n```\n\n#### `uninstall` Key `script:`\n\n`uninstall script:` introduces a series of key-value pairs describing a command which will automate completion of the uninstall. Example (from [gpgtools.rb](#)):\n\n``` ruby\nuninstall script:    {\n                         executable: \"#{staged_path}/Uninstall.app/Contents/Resources/GPG Suite Uninstaller.app/Contents/Resources/uninstall.sh\",\n                         sudo:       true,\n                       }\n```\n\nIt is important to note that, although `script:` in the above example does attempt to completely uninstall the `pkg`, it should not be used in detriment of [`pkgutil:`](#uninstall-key-pkgutil), but as a complement when possible.\n\n#### `uninstall` Key `delete:`\n\n`delete:` should only be used as a last resort, if other `uninstall` methods are insufficient.\n\nArguments to `uninstall delete:` should use the following basic rules:\n\n- Basic tilde expansion is performed on paths, i.e. leading `~` is expanded to the home directory.\n- Paths must be absolute.\n- Glob expansion is performed using the [standard set of characters](https://en.wikipedia.org/wiki/Glob_(programming)).\n\nTo remove user-specific files, use the [`zap` stanza](#stanza-zap).\n\n#### `uninstall` Key `trash:`\n\n`trash:` arguments follow the same rules listed above for `delete:`.\n\n#### Working With a pkg File Manually\n\nAdvanced users may wish to work with a `pkg` file manually, without having the package installed.\n\nA list of files which may be installed from a `pkg` can be extracted using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_payload_in_pkg\" '/path/to/my.pkg'\n```\n\nCandidate application names helpful for determining the name of a Cask may be extracted from a `pkg` file using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_apps_in_pkg\" '/path/to/my.pkg'\n```\n\nCandidate package IDs which may be useful in a `pkgutil:` key may be extracted from a `pkg` file using the command:\n\n``` bash\n\"$(brew --repository homebrew/cask)/developer/bin/list_ids_in_pkg\" '/path/to/my.pkg'\n```\n\nA fully manual method for finding bundle ids in a package file follows:\n\n1.  Unpack `/path/to/my.pkg` (replace with your package name) with `pkgutil --expand /path/to/my.pkg /tmp/expanded.unpkg`.\n2.  The unpacked package is a folder. Bundle ids are contained within files named `PackageInfo`. These files can be found with the command `find /tmp/expanded.unpkg -name PackageInfo`.\n3.  `PackageInfo` files are XML files, and bundle ids are found within the `identifier` attributes of `<pkg-info>` tags that look like `<pkg-info ... identifier=\"com.oracle.jdk7u51\" ... >`, where extraneous attributes have been snipped out and replaced with ellipses.\n4.  Kexts inside packages are also described in `PackageInfo` files. If any kernel extensions are present, the command `find /tmp/expanded.unpkg -name PackageInfo -print0 | xargs -0 grep -i kext` should return a `<bundle id>` tag with a `path` attribute that contains a `.kext` extension, for example `<bundle id=\"com.wavtap.driver.WavTap\" ... path=\"./WavTap.kext\" ... />`.\n5.  Once bundle ids have been identified, the unpacked package directory can be deleted.\n\n### Stanza: `url`\n\n#### HTTPS URLs are Preferred\n\nIf available, an HTTPS URL is preferred. A plain HTTP URL should only be used in the absence of a secure alternative.\n\n#### Additional HTTP/S URL Parameters\n\nWhen a plain URL string is insufficient to fetch a file, additional information may be provided to the `curl`-based downloader, in the form of key/value pairs appended to `url`:\n\n| key           | value                                                                                                                                                                                                                                      |\n|---------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verified:`   | a string repeating the beginning of `url`, for verification purposes. [See below](#when-url-and-homepage-domains-differ-add-verified).                                                                                                     |\n| `using:`      | the symbol `:post` is the only legal value                                                                                                                                                                                                 |\n| `cookies:`    | a hash of cookies to be set in the download request                                                                                                                                                                                        |\n| `referer:`    | a string holding the URL to set as referer in the download request                                                                                                                                                                         |\n| `header:`     | a string holding the header to set for the download request.                                                                                                                                                                               |\n| `user_agent:` | a string holding the user agent to set for the download request. Can also be set to the symbol `:fake`, which will use a generic Browser-like user agent string. We prefer `:fake` when the server does not require a specific user agent. |\n| `data:`       | a hash of parameters to be set in the POST request                                                                                                                                                                                         |\n\nExample of using `cookies:`: [java.rb](https://github.com/Homebrew/homebrew-cask/blob/472930df191d66747a57d5c96c0d00511d56e21b/Casks/java.rb#L5-L8)\n\nExample of using `referer:`: [rrootage.rb](https://github.com/Homebrew/homebrew-cask/blob/312ae841f1f1b2ec07f4d88b7dfdd7fbdf8d4f94/Casks/rrootage.rb#L5)\n\nExample of using `header:`: [issue-325182724](https://github.com/Homebrew/brew/pull/6545#issue-325182724)\n\n#### When URL and Homepage Domains Differ, Add `verified:`\n\nWhen the domains of `url` and `homepage` differ, the discrepancy should be documented with the `verified:` parameter, repeating the smallest possible portion of the URL that uniquely identifies the app or vendor, excluding the protocol. Example: [`shotcut.rb`](https://github.com/Homebrew/homebrew-cask/blob/08733296b49c59c58b6beeada59ed4207cef60c3/Casks/shotcut.rb#L5L6).\n\nThis must be added so a user auditing the cask knows the URL was verified by the Homebrew Cask team as the one provided by the vendor, even though it may look unofficial. It is our responsibility as Homebrew Cask maintainers to verify both the `url` and `homepage` information when first added (or subsequently modified, apart from versioning).\n\nThe parameter doesn’t mean you should trust the source blindly, but we only approve casks in which users can easily verify its authenticity with basic means, such as checking the official homepage or public repository. Occasionally, slightly more elaborate techniques may be used, such as inspecting an [`appcast`](#stanza-appcast) we established as official. Cases where such quick verifications aren’t possible (e.g. when the download URL is behind a registration wall) are [treated in a stricter manner](acceptable-casks#unofficial-vendorless-and-walled-builds).\n\n#### Difficulty Finding a URL\n\nWeb browsers may obscure the direct `url` download location for a variety of reasons. Homebrew Cask supplies a script which can read extended file attributes to extract the actual source URL for most files downloaded by a browser on macOS. The script usually emits multiple candidate URLs; you may have to test each of them:\n\n``` bash\n$(brew --repository homebrew/cask)/developer/bin/list_url_attributes_on_file <file>\n```\n\n#### Subversion URLs\n\nIn rare cases, a distribution may not be available over ordinary HTTP/S. Subversion URLs are also supported, and can be specified by appending the following key/value pairs to `url`:\n\n| key           | value                                                                                                         |\n|---------------|---------------------------------------------------------------------------------------------------------------|\n| `using:`      | the symbol `:svn` is the only legal value                                                                     |\n| `revision:`   | a string identifying the subversion revision to download                                                      |\n| `trust_cert:` | set to `true` to automatically trust the certificate presented by the server (avoiding an interactive prompt) |\n\n#### SourceForge/OSDN URLs\n\nSourceForge and OSDN (formerly `SourceForge.JP`) projects are common ways to distribute binaries, but they provide many different styles of URLs to get to the goods.\n\nWe prefer URLs of this format:\n\n``` plaintext\nhttps://downloads.sourceforge.net/<project_name>/<filename>.<ext>\n```\n\nOr, if it’s from [OSDN](https://osdn.jp/):\n\n``` plaintext\nhttp://<subdomain>.osdn.jp/<project_name>/<release_id>/<filename>.<ext>\n```\n\n`<subdomain>` is typically of the form `dl` or `<user>.dl`.\n\nIf these formats are not available, and the application is macOS-exclusive (otherwise a command-line download defaults to the Windows version) we prefer the use of this format:\n\n``` plaintext\nhttps://sourceforge.net/projects/<project_name>/files/latest/download\n```\n\n#### Some Providers Block Command-line Downloads\n\nSome hosting providers actively block command-line HTTP clients. Such URLs cannot be used in Casks.\n\nOther providers may use URLs that change periodically, or even on each visit (example: FossHub). While some cases [could be circumvented](#using-a-block-to-defer-code-execution), they tend to occur when the vendor is actively trying to prevent automated downloads, so we prefer to not add those casks to the main repository.\n\n#### Using a Block to Defer Code Execution\n\nSome casks—notably nightlies—have versioned download URLs but are updated so often that they become impractical to keep current with the usual process. For those, we want to dynamically determine `url`.\n\n##### The Problem\n\nIn theory, one can write arbitrary Ruby code right in the Cask definition to fetch and construct a disposable URL.\n\nHowever, this typically involves an HTTP round trip to a landing site, which may take a long time. Because of the way Homebrew Cask loads and parses Casks, it is not acceptable that such expensive operations be performed directly in the body of a Cask definition.\n\n##### Writing the Block\n\nSimilar to the `preflight`, `postflight`, `uninstall_preflight`, and `uninstall_postflight` blocks, the `url` stanza offers an optional *block syntax*:\n\n``` rb\nurl \"https://handbrake.fr/nightly.php\" do |page|\n  file_path = page[/href=[\"']?([^\"' >]*Handbrake[._-][^\"' >]+\\.dmg)[\"' >]/i, 1]\n  file_path ? URI.join(page.url, file_path) : nil\nend\n```\n\nYou can also nest `url do` blocks inside `url do` blocks to follow a chain of URLs.\n\nThe block is only evaluated when needed, for example on download time or when auditing a Cask. Inside a block, you may safely do things such as HTTP/S requests that may take a long time to execute. You may also refer to the `@cask` instance variable, and invoke any method available on `@cask`.\n\nThe block will be called immediately before downloading; its result value will be assumed to be a `String` (or a pair of a `String` and `Hash` containing parameters) and subsequently used as a download URL.\n\nYou can use the `url` stanza with either a direct argument or a block but not with both.\n\nExample for using the block syntax: [vlc-nightly.rb](https://github.com/Homebrew/homebrew-cask-versions/blob/2bf0f13dd49d263ebec0ca56e58ad8458633f789/Casks/vlc-nightly.rb#L5L10)\n\n##### Mixing Additional URL Parameters With the Block Syntax\n\nIn rare cases, you might need to set URL parameters like `cookies` or `referer` while also using the block syntax.\n\nThis is possible by returning a two-element array as a block result. The first element of the array must be the download URL; the second element must be a `Hash` containing the parameters.\n\n### Stanza: `version`\n\n`version`, while related to the app’s own versioning, doesn’t have to follow it exactly. It is common to change it slightly so it can be [interpolated](https://en.wikipedia.org/wiki/String_interpolation#Ruby_/_Crystal) in other stanzas, usually in `url` to create a Cask that only needs `version` and `sha256` changes when updated. This can be taken further, when needed, with [ruby String methods](https://ruby-doc.org/core/String.html).\n\nFor example:\n\nInstead of\n\n``` ruby\nversion \"1.2.3\"\nurl \"https://example.com/file-version-123.dmg\"\n```\n\nWe can use\n\n``` ruby\nversion \"1.2.3\"\nurl \"https://example.com/file-version-#{version.delete('.')}.dmg\"\n```\n\nWe can also leverage the power of regular expressions. So instead of\n\n``` ruby\nversion \"1.2.3build4\"\nurl \"https://example.com/1.2.3/file-version-1.2.3build4.dmg\"\n```\n\nWe can use\n\n``` ruby\nversion \"1.2.3build4\"\nurl \"https://example.com/#{version.sub(%r{build\\d+}, '')}/file-version-#{version}.dmg\"\n```\n\n#### version :latest\n\nThe special value `:latest` is used on casks which:\n\n1.  `url` doesn’t contain a version.\n2.  Having a correct value to `version` is too difficult or impractical, even with our automated systems.\n\nExample: [spotify.rb](https://github.com/Homebrew/homebrew-cask/blob/f56e8ba057687690e26a6502623aa9476ff4ac0e/Casks/spotify.rb#L2)\n\n#### version methods\n\nThe examples above can become hard to read, however. Since many of these changes are common, we provide a number of helpers to clearly interpret otherwise obtuse cases:\n\n| Method              | Input              | Output             |\n|---------------------|--------------------|--------------------|\n| `major`             | `1.2.3-a45,ccdd88` | `1`                |\n| `minor`             | `1.2.3-a45,ccdd88` | `2`                |\n| `patch`             | `1.2.3-a45,ccdd88` | `3-a45`            |\n| `major_minor`       | `1.2.3-a45,ccdd88` | `1.2`              |\n| `major_minor_patch` | `1.2.3-a45,ccdd88` | `1.2.3-a45`        |\n| `minor_patch`       | `1.2.3-a45,ccdd88` | `2.3-a45`          |\n| `before_comma`      | `1.2.3-a45,ccdd88` | `1.2.3-a45`        |\n| `after_comma`       | `1.2.3-a45,ccdd88` | `ccdd88`           |\n| `dots_to_hyphens`   | `1.2.3-a45,ccdd88` | `1-2-3-a45,ccdd88` |\n| `no_dots`           | `1.2.3-a45,ccdd88` | `123-a45,ccdd88`   |\n\nSimilar to `dots_to_hyphens`, we provide all logical permutations of `{dots,hyphens,underscores}_to_{dots,hyphens,underscores}`. The same applies to `no_dots` in the form of `no_{dots,hyphens,underscores}`, with an extra `no_dividers` that applies all of those at once.\n\nFinally, there is `csv` that returns an array of comma-separated values. `csv`, `before_comma` and `after_comma` are extra special to allow for otherwise complex cases, and should be used sparingly. There should be no more than two of `,` per `version`.\n\n### Stanza: `zap`\n\n#### `zap` Stanza Purpose\n\nThe `zap` stanza describes a more complete uninstallation of files associated with a Cask. The `zap` procedures will never be performed by default, but only if the user uses `--zap` on `uninstall`:\n\n``` bash\nbrew uninstall --zap firefox\n```\n\n`zap` stanzas may remove:\n\n- Preference files and caches stored within the user’s `~/Library` directory.\n- Shared resources such as application updaters. Since shared resources may be removed, other applications may be affected by `brew uninstall --zap`. Understanding that is the responsibility of the end user.\n\n`zap` stanzas should not remove:\n\n- Files created by the user directly.\n\nAppending `--force` to the command will allow you to perform these actions even if the Cask is no longer installed:\n\n``` bash\nbrew uninstall --zap --force firefox\n```\n\n#### `zap` Stanza Syntax\n\nThe form of `zap` stanza follows the [`uninstall` stanza](#stanza-uninstall). All of the same directives are available. The `trash:` key is preferred over `delete:`.\n\nExample: [dropbox.rb](https://github.com/Homebrew/homebrew-cask/blob/31cd96cc0e00dab1bff74d622e32d816bafd1f6f/Casks/dropbox.rb#L17-L35)\n\n#### `zap` Creation\n\nThe simplest method is to use [@nrlquaker’s CreateZap](https://github.com/nrlquaker/homebrew-createzap), which can automatically generate the stanza. In a few instances it may fail to pick up anything and manual creation may be required.\n\nManual creation can be facilitated with:\n\n- Some of the developer tools are already available in Homebrew Cask.\n- `sudo find / -iname \"*<search item>*\"`\n- An uninstaller tool such as [AppCleaner](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/appcleaner.rb).\n- Inspecting the usual suspects, i.e. `/Library/{'Application Support',LaunchAgents,LaunchDaemons,Frameworks,Logs,Preferences,PrivilegedHelperTools}` and `~/Library/{'Application Support',Caches,Containers,LaunchAgents,Logs,Preferences,'Saved Application State'}`.\n\n------------------------------------------------------------------------\n\n## Token reference\n\nThis section describes the algorithm implemented in the `generate_cask_token` script, and covers detailed rules and exceptions which are not needed in most cases.\n\n- [Purpose](#purpose)\n- [Finding the Simplified Name of the Vendor’s Distribution](#finding-the-simplified-name-of-the-vendors-distribution)\n- [Converting the Simplified Name To a Token](#converting-the-simplified-name-to-a-token)\n- [Cask Filenames](#cask-filenames)\n- [Cask Headers](#cask-headers)\n- [Cask Token Examples](#cask-token-examples)\n- [Tap Specific Cask Token Examples](#tap-specific-cask-token-examples)\n- [Token Overlap](#token-overlap)\n\n## Purpose\n\nSoftware vendors are often inconsistent with their naming. By enforcing strict naming conventions we aim to:\n\n- Prevent duplicate submissions\n- Minimize renaming events\n- Unambiguously boil down the name of the software into a unique identifier\n\nDetails of software names and brands will inevitably be lost in the conversion to a minimal token. To capture the vendor’s full name for a distribution, use the [`name`](#stanza-name) within a Cask. `name` accepts an unrestricted UTF-8 string.\n\n## Finding the Simplified Name of the Vendor’s Distribution\n\n### Simplified Names of Apps\n\n- Start with the exact name of the Application bundle as it appears on disk, such as `Google Chrome.app`.\n\n- If the name uses letters outside A-Z, convert it to ASCII as described in [Converting to ASCII](#converting-to-ascii).\n\n- Remove `.app` from the end.\n\n- Remove from the end: the string “app”, if the vendor styles the name like “Software App.app”. Exception: when “app” is an inseparable part of the name, without which the name would be inherently nonsensical, as in [whatsapp.rb](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/whatsapp.rb).\n\n- Remove from the end: version numbers or incremental release designations such as “alpha”, “beta”, or “release candidate”. Strings which distinguish different capabilities or codebases such as “Community Edition” are currently accepted. Exception: when a number is not an incremental release counter, but a differentiator for a different product from a different vendor, as in [kdiff3.rb](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/kdiff3.rb).\n\n- If the version number is arranged to occur in the middle of the App name, it should also be removed.\n\n- Remove from the end: “Launcher”, “Quick Launcher”.\n\n- Remove from the end: strings such as “Desktop”, “for Desktop”.\n\n- Remove from the end: strings such as “Mac”, “for Mac”, “for OS X”, “macOS”, “for macOS”. These terms are generally added to ported software such as “MAME OS X.app”. Exception: when the software is not a port, and “Mac” is an inseparable part of the name, without which the name would be inherently nonsensical, as in [PlayOnMac.app](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/playonmac.rb).\n\n- Remove from the end: hardware designations such as “for x86”, “32-bit”, “ppc”.\n\n- Remove from the end: software framework names such as “Cocoa”, “Qt”, “Gtk”, “Wx”, “Java”, “Oracle JVM”, etc. Exception: the framework is the product being Casked.\n\n- Remove from the end: localization strings such as “en-US”.\n\n- If the result of that process is a generic term, such as “Macintosh Installer”, try prepending the name of the vendor or developer, followed by a hyphen. If that doesn’t work, then just create the best name you can, based on the vendor’s web page.\n\n- If the result conflicts with the name of an existing Cask, make yours unique by prepending the name of the vendor or developer, followed by a hyphen. Example: [unison.rb](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/unison.rb) and [panic-unison.rb](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/panic-unison.rb).\n\n- Inevitably, there are a small number of exceptions not covered by the rules. Don’t hesitate to [use the forum](https://github.com/orgs/Homebrew/discussions) if you have a problem.\n\n### Converting to ASCII\n\n- If the vendor provides an English localization string, that is preferred. Here are the places it may be found, in order of preference:\n\n  - `CFBundleDisplayName` in the main `Info.plist` file of the app bundle\n  - `CFBundleName` in the main `Info.plist` file of the app bundle\n  - `CFBundleDisplayName` in `InfoPlist.strings` of an `en.lproj` localization directory\n  - `CFBundleName` in `InfoPlist.strings` of an `en.lproj` localization directory\n  - `CFBundleDisplayName` in `InfoPlist.strings` of an `English.lproj` localization directory\n  - `CFBundleName` in `InfoPlist.strings` of an `English.lproj` localization directory\n\n- When there is no vendor localization string, romanize the name by transliteration or decomposition.\n\n- As a last resort, translate the name of the app bundle into English.\n\n### Simplified Names of `pkg`-based Installers\n\n- The Simplified Name of a `pkg` may be more tricky to determine than that of an App. If a `pkg` installs an App, then use that App name with the rules above. If not, just create the best name you can, based on the vendor’s web page.\n\n### Simplified Names of non-App Software\n\n- Currently, rules for generating a token are not well-defined for Preference Panes, QuickLook plugins, and several other types of software installable by Homebrew Cask. Just create the best name you can, based on the filename on disk or the vendor’s web page. Watch out for duplicates.\n\n  Non-app tokens should become more standardized in the future.\n\n## Converting the Simplified Name To a Token\n\nThe token is the primary identifier for a package in our project. It’s the unique string users refer to when operating on the Cask.\n\nTo convert the App’s Simplified Name (above) to a token:\n\n- Convert all letters to lower case.\n- Expand the `+` symbol into a separated English word: `-plus-`.\n- Expand the `@` symbol into a separated English word: `-at-`.\n- Spaces become hyphens.\n- Underscores become hyphens.\n- Middots/Interpuncts become hyphens.\n- Hyphens stay hyphens.\n- Digits stay digits.\n- Delete any character which is not alphanumeric or a hyphen.\n- Collapse a series of multiple hyphens into one hyphen.\n- Delete a leading or trailing hyphen.\n\n## Cask Filenames\n\nCasks are stored in a Ruby file named after the token, with the file extension `.rb`.\n\n## Cask Headers\n\nThe token is also given in the header line for each Cask.\n\n## Cask Token Examples\n\nThese illustrate most of the rules for generating a token:\n\n| App Name on Disk       | Simplified App Name | Cask Token       | Filename              |\n|------------------------|---------------------|------------------|-----------------------|\n| `Audio Hijack Pro.app` | Audio Hijack Pro    | audio-hijack-pro | `audio-hijack-pro.rb` |\n| `VLC.app`              | VLC                 | vlc              | `vlc.rb`              |\n| `BetterTouchTool.app`  | BetterTouchTool     | bettertouchtool  | `bettertouchtool.rb`  |\n| `LPK25 Editor.app`     | LPK25 Editor        | lpk25-editor     | `lpk25-editor.rb`     |\n| `Sublime Text 2.app`   | Sublime Text        | sublime-text     | `sublime-text.rb`     |\n\n## Tap Specific Cask Token Examples\n\nCask taps have naming conventions specific to each tap.\n\n[Homebrew/cask-versions](https://github.com/Homebrew/homebrew-cask-versions/blob/HEAD/CONTRIBUTING.md#naming-versions-casks)\n\n[Homebrew/cask-fonts](https://github.com/Homebrew/homebrew-cask-fonts/blob/HEAD/CONTRIBUTING.md#naming-font-casks)\n\n[Homebrew/cask-drivers](https://github.com/Homebrew/homebrew-cask-drivers/blob/HEAD/CONTRIBUTING.md#naming-driver-casks)\n\n# Special Affixes\n\nA few situations require a prefix or suffix to be added to the token.\n\n## Token Overlap\n\nWhen the token for a new Cask would otherwise conflict with the token of an already existing Cask, the nature of that overlap dictates the token (for possibly both Casks). See [Forks and Apps with Conflicting Names](acceptable-casks#forks-and-apps-with-conflicting-names) for information on how to proceed.\n\n## Potentially Misleading Name\n\nIf the token for a piece of unofficial software that interacts with a popular service would make it look official and the vendor is not authorised to use the name, [a prefix must be added](acceptable-casks#forks-and-apps-with-conflicting-names) for disambiguation.\n\nIn cases where the prefix is ambiguous and would make the app appear official, the `-unofficial` suffix may be used.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Cask-Cookbook](https://docs.brew.sh/Cask-Cookbook)"
- name: Common Issues
  id: common-issues
  summary: This is a list of commonly encountered problems, known issues, and their solutions
  description: "# Common Issues\n\nThis is a list of commonly encountered problems, known issues, and their solutions.\n\n## Running `brew`\n\n### `brew` complains about absence of “Command Line Tools”\n\nYou need to have the Xcode Command Line Utilities installed (and updated): run `xcode-select --install` in the terminal.\n\n### Ruby: `bad interpreter: /usr/bin/ruby^M: no such file or directory`\n\nYou cloned with `git`, and your Git configuration is set to use Windows line endings. See this page on [configuring Git to handle line endings](https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings).\n\n### Ruby: `bad interpreter: /usr/bin/ruby`\n\nYou don’t have a `/usr/bin/ruby` or it is not executable. It’s not recommended to let this persist; you’d be surprised how many `.app`s, tools and scripts expect your macOS-provided files and directories to be *unmodified* since macOS was installed.\n\n### `brew update` complains about untracked working tree files\n\nAfter running `brew update`, you receive a Git error warning about untracked files or local changes that would be overwritten by a checkout or merge, followed by a list of files inside your Homebrew installation.\n\nThis is caused by an old bug in in the `update` code that has long since been fixed. However, the nature of the bug requires that you do the following:\n\n``` bash\ncd \"$(brew --repository)\"\ngit reset --hard FETCH_HEAD\n```\n\nIf `brew doctor` still complains about uncommitted modifications, also run this command:\n\n``` bash\ncd \"$(brew --repository)/Library\"\ngit clean -fd\n```\n\n### `launchctl` refuses to load launchd plist files\n\nWhen trying to load a plist file with `launchctl`, you receive an error that resembles either:\n\n``` plaintext\nBug: launchctl.c:2325 (23930):13: (dbfd = open(g_job_overrides_db_path, [...]\nlaunch_msg(): Socket is not connected\n```\n\nor:\n\n``` plaintext\nCould not open job overrides database at: /private/var/db/launchd.db/com.apple.launchd/overrides.plist: 13: Permission denied\nlaunch_msg(): Socket is not connected\n```\n\nThese are likely due to one of four issues:\n\n1.  You are using iTerm. The solution is to use Terminal.app when interacting with `launchctl`.\n2.  You are using a terminal multiplexer such as `tmux` or `screen`. You should interact with `launchctl` from a separate Terminal.app shell.\n3.  You are attempting to run `launchctl` while logged in remotely. You should enable screen sharing on the remote machine and issue the command using Terminal.app running on that machine.\n4.  You are `su`‘ed as a different user.\n\n### `brew upgrade` errors out\n\nWhen running `brew upgrade`, you see something like this:\n\n``` plaintext\nError: undefined method `include?' for nil:NilClass\nPlease report this bug:\n    https://docs.brew.sh/Troubleshooting\n/usr/local/Library/Homebrew/formula.rb:393:in `canonical_name'\n/usr/local/Library/Homebrew/formula.rb:425:in `factory'\n/usr/local/Library/Contributions/examples/brew-upgrade.rb:7\n/usr/local/Library/Contributions/examples/brew-upgrade.rb:7:in `map'\n/usr/local/Library/Contributions/examples/brew-upgrade.rb:7\n/usr/local/bin/brew:46:in `require'\n/usr/local/bin/brew:46:in `require?'\n/usr/local/bin/brew:79\n```\n\nThis happens because an old version of the upgrade command is hanging around for some reason. The fix:\n\n``` bash\ncd \"$(brew --repository)/Library/Contributions/examples\"\ngit clean -n # if this doesn't list anything that you want to keep, then\ngit clean -f # this will remove untracked files\n```\n\n### Python: `easy-install.pth` cannot be linked\n\n``` plaintext\nWarning: Could not link <formula>. Unlinking...\nError: The `brew link` step did not complete successfully\nThe formula built, but is not symlinked into /usr/local\nYou can try again using `brew link <formula>'\n\nPossible conflicting files are:\n/usr/local/lib/python2.7/site-packages/site.py\n/usr/local/lib/python2.7/site-packages/easy-install.pth\n==> Could not symlink file: /homebrew/Cellar/<formula>/<version>/lib/python2.7/site-packages/site.py\nTarget /usr/local/lib/python2.7/site-packages/site.py already exists. You may need to delete it.\nTo force the link and overwrite all other conflicting files, do:\n  brew link --overwrite formula_name\n\nTo list all files that would be deleted:\n  brew link --overwrite --dry-run formula_name\n```\n\nDon’t follow the advice here but fix by using `Language::Python.setup_install_args` in the formula as described in [Python for Formula Authors](python-for-formula-authors).\n\n## Upgrading macOS\n\nUpgrading macOS can cause errors like the following:\n\n- `dyld: Library not loaded: /usr/local/opt/icu4c/lib/libicui18n.54.dylib`\n- `configure: error: Cannot find libz`\n\nFollowing a macOS upgrade it may be necessary to reinstall the Xcode Command Line Tools and then `brew upgrade` all installed formulae:\n\n``` bash\nxcode-select --install\nbrew upgrade\n```\n\n## Cask - cURL error\n\nFirst, let’s tackle a common problem: do you have a `.curlrc` file? Check with `ls -A ~ | grep .curlrc` (if you get a result, the file exists). Those are a frequent cause of issues of this nature. Before anything else, remove that file and try again. If it now works, do not open an issue. Incompatible `.curlrc` configurations must be fixed on your side.\n\nIf, however, you do not have a `.curlrc` or removing it did not work, let’s see if the issue is upstream:\n\n1.  Go to the vendor’s website (`brew home <cask_name>`).\n2.  Find the download link for the app and click on it.\n\n### If the download works\n\nThe cask is outdated. Let’s fix it:\n\n1.  Look around the app’s website and find out what the latest version is. It will likely be expressed in the URL used to download it.\n2.  Take a look at the cask’s version (`brew cat <cask_name>`) and verify it is indeed outdated. If the app’s version is `:latest`, it means the `url` itself is outdated. It will need to be changed to the new one.\n\nHelp us by [submitting a fix](https://github.com/Homebrew/homebrew-cask/blob/HEAD/CONTRIBUTING.md#updating-a-cask). If you get stumped, [open an issue](https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.md) explaining your steps so far and where you’re having trouble.\n\n### If the download does not work\n\nThe issue isn’t in any way related to Homebrew Cask, but with the vendor or your connection.\n\nStart by diagnosing your connection (try to download other casks, go around the web). If the problem is with your connection, try a website like [Ask Different](https://apple.stackexchange.com/) to ask for advice.\n\nIf you’re sure the issue is not with your connection, contact the app’s vendor and let them know their link is down, so they can fix it.\n\n**Do not open an issue.**\n\n## Cask - checksum does not match\n\nFirst, check if the problem was with your download. Delete the downloaded file (its location will be pointed out in the error message) and try again.\n\nIf the problem persists, the cask must be outdated. It’ll likely need a new version, but it’s possible the version has remained the same (happens occasionally when the vendor updates the app in place).\n\n1.  Go to the vendor’s website (`brew home <cask_name>`).\n2.  Find out what the latest version is. It may be expressed in the URL used to download it.\n3.  Take a look at the cask’s version (`brew info <cask_name>`) and verify it is indeed outdated. If it is:\n\nHelp us by [submitting a fix](https://github.com/Homebrew/homebrew-cask/blob/HEAD/CONTRIBUTING.md#updating-a-cask). If you get stumped, [open an issue](https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.md) explaining your steps so far and where you’re having trouble.\n\n## Cask - permission denied\n\nIn this case, it’s likely your user account has no admin rights so you don’t have permissions to write to `/Applications` (which is the default). You can use [`--appdir`](https://github.com/Homebrew/homebrew-cask/blob/HEAD/USAGE.md#options) to choose where to install your applications.\n\nIf `--appdir` doesn’t fix the issue or you do have write permissions to `/Applications`, verify you’re the owner of the `Caskroom` directory by running `ls -dl \"$(brew --prefix)/Caskroom\"` and checking the third field. If you are not the owner, fix it with `sudo chown -R \"$(whoami)\" \"$(brew --prefix)/Caskroom\"`. If you are, the problem may lie in the app bundle itself.\n\nSome app bundles don’t have certain permissions that are necessary for us to move them to the appropriate location. You may check such permissions with `ls -ls <path_to_app_bundle>`. If you see something like `dr-xr-xr-x` at the start of the output, that may be the cause. To fix it, we change the app bundle’s permission to allow us to move it, and then set it back to what it was (in case the developer set those permissions deliberately). See [`litecoin`](https://github.com/Homebrew/homebrew-cask/blob/0cde71f1fea8ad62d6ec4732fcf35ac0c52d8792/Casks/litecoin.rb#L14L20) for an example of such a cask.\n\nHelp us by [submitting a fix](https://github.com/Homebrew/homebrew-cask/blob/HEAD/CONTRIBUTING.md#updating-a-cask). If you get stumped, [open an issue](https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.md) explaining your steps so far and where you’re having trouble.\n\n## Cask - source is not there\n\nFirst, you need to identify which artifact is not being handled correctly anymore. It’s explicit in the error message: if it says `It seems the App source…'` the problem is [`app`](cask-cookbook#stanza-app). The pattern is the same across [all artifacts](cask-cookbook#at-least-one-artifact-stanza-is-also-required).\n\nFixing this error is typically easy, and requires only a bit of time on your part. Start by downloading the package for the cask: `brew fetch <cask_name>`. The last line of output will inform you of the location of the download. Navigate there and manually unpack it. As an example, lets say the structure inside the archive is as follows:\n\n``` plaintext\n.\n├─ Files/SomeApp.app\n├─ Files/script.sh\n└─ README.md\n```\n\nNow, let’s look at the cask (`brew cat <cask_name>`):\n\n``` plaintext\n(…)\napp \"SomeApp.app\"\n(…)\n```\n\nThe cask was expecting `SomeApp.app` to be in the top directory of the archive (see how it says simply `SomeApp.app`) but the developer changed it to inside a `Files` directory. All we have to do is update that line of the cask to follow the new structure: `app 'Files/SomeApp.app'`.\n\nNote that occasionally the app’s name changes completely (from `SomeApp.app` to `OtherApp.app`, let’s say). In these instances, the filename of the cask itself, as well as its token, must also change. Consult the [`token reference`](cask-cookbook#token-reference) for complete instructions on the new name.\n\nHelp us by [submitting a fix](https://github.com/Homebrew/homebrew-cask/blob/HEAD/CONTRIBUTING.md#updating-a-cask). If you get stumped, [open an issue](https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.md) explaining your steps so far and where you’re having trouble.\n\n## Cask - wrong number of arguments\n\nMake sure the issue really lies with your macOS version. To do so, try to install the software manually. If it is incompatible with your macOS version, it will tell you. In that case, there is nothing we can do to help you install the software, but we can add a [`depends_on macos:`](cask-cookbook#depends_on-macos) stanza to prevent the cask from trying to install on incompatible macOS versions.\n\nHelp us by [submitting a fix](https://github.com/Homebrew/homebrew-cask/blob/HEAD/CONTRIBUTING.md#updating-a-cask). If you get stumped, [open an issue](https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.md) explaining your steps so far and where you’re having trouble.\n\n## Other local issues\n\nIf your Homebrew installation gets messed up (and fixing the issues found by `brew doctor` doesn’t solve the problem), reinstalling Homebrew may help to reset to a normal state. To easily reinstall Homebrew, use [Homebrew Bundle](https://github.com/Homebrew/homebrew-bundle) to automatically restore your installed formulae and casks. To do so, run `brew bundle dump`, [uninstall](faq#how-do-i-uninstall-homebrew), [reinstall](installation) and run `brew bundle install`.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Common-Issues](https://docs.brew.sh/Common-Issues)"
- name: Creating a Homebrew Issue
  id: creating-a-homebrew-issue
  summary: First, check to make sure your issue is not listed in the FAQ or Common Issues and can’t otherwise be resolved with the information in the Tips and Tricks documentation
  description: "# Creating a Homebrew Issue\n\nFirst, check to make sure your issue is not listed in the [FAQ](faq) or [Common Issues](common-issues) and can’t otherwise be resolved with the information in the [Tips and Tricks](tips-n'-tricks) documentation. Next, go through the steps in the [Troubleshooting guide](troubleshooting).\n\nIf the preceding steps did not help, it may be appropriate to submit an issue. This can be done by navigating to the relevant repository, clicking the “Issues” link, and clicking on the “New issue” button. When creating an issue, make sure you use the provided template, as it’s important in helping others to understand and potentially triage your issue efficiently.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Creating-a-Homebrew-Issue](https://docs.brew.sh/Creating-a-Homebrew-Issue)"
- name: Custom GCC and Cross Compilers
  id: custom-gcc-and-cross-compilers
  summary: Homebrew depends on having an up-to-date version of Xcode because it comes with specific versions of build tools, e.g
  description: "# Custom GCC and Cross Compilers\n\nHomebrew depends on having an up-to-date version of Xcode because it comes with specific versions of build tools, e.g. `clang`. Installing a custom version of GCC or Autotools into your `PATH` has the potential to break lots of compiles so we prefer the Apple- or Homebrew-provided compilers. Cross compilers based on GCC will typically be “keg-only” and therefore not linked into your `PATH` by default, or be prefixed with the target architecture, again to avoid conflicting with Apple or Homebrew compilers.\n\nRather than merging formulae for either of these cases at this time, we’re listing them on this page. If you come up with a formula for a new version of GCC or cross-compiler suite, please link to it here.\n\n- Homebrew provides a `gcc` formula for use with Xcode 4.2+.\n- Homebrew provides older GCC formulae, e.g. `gcc@7`.\n- Homebrew provides some cross-compilers and toolchains, but these are named to avoid clashing with the default tools, e.g. `i686-elf-gcc`, `x86_64-elf-gcc`.\n- Homebrew provides LLVM’s Clang, which is bundled with the `llvm` formula.\n- [RISC-V](https://github.com/riscv/homebrew-riscv) provides the RISC-V toolchain including binutils and GCC.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Custom-GCC-and-cross-compilers](https://docs.brew.sh/Custom-GCC-and-cross-compilers)"
- name: Deprecating, Disabling, and Removing Formulae
  id: deprecating-disabling-and-removing-formulae
  summary: There are many reasons why formulae may be deprecated, disabled, or removed
  description: "# Deprecating, Disabling, and Removing Formulae\n\nThere are many reasons why formulae may be deprecated, disabled, or removed. This document explains the differences between each method as well as explaining when one method should be used over another.\n\n## Overview\n\nThis general rule of thumb can be followed:\n\n- `deprecate!` should be used for formulae that *should* no longer be used.\n- `disable!` should be used for formulae that *cannot* be used.\n- Formulae that are no longer acceptable in homebrew/core or have been disabled for over a year should be removed.\n\n## Deprecation\n\nIf a user attempts to install a deprecated formula, they will be shown a warning message but the install will proceed.\n\nA formula should be deprecated to indicate to users that the formula should not be used and will be disabled in the future. Deprecated formulae should be maintained by the Homebrew maintainers so they can still build from source and their bottles continue to work (even if unmaintained upstream). If this is not possible, they should be disabled.\n\nThe most common reasons for deprecation are when the upstream project is deprecated, unmaintained, or archived.\n\nFormulae with dependents may be deprecated only if at least one of the following are true:\n\n- its dependents are all deprecated\n- the formula does not build on any of our supported macOS versions and on Linux\n- the formula has outstanding CVEs\n\nTo deprecate a formula, add a `deprecate!` call. This call should include a deprecation date (in the ISO 8601 format) and a deprecation reason:\n\n``` ruby\ndeprecate! date: \"YYYY-MM-DD\", because: :reason\n```\n\nThe `date` parameter should be set to the date that the project or version became (or will become) deprecated. If there is no clear date but the formula needs to be deprecated, use today’s date. If the `date` parameter is set to a date in the future, the formula will not become deprecated until that date. This can be useful if the upstream developers have indicated a date where the project or version will stop being supported.\n\nThe `because` parameter can be a preset reason (using a symbol) or a custom reason. See the [Deprecate and Disable Reasons](#deprecate-and-disable-reasons) section below for more details about the `because` parameter.\n\n## Disabling\n\nIf a user attempts to install a disabled formula, they will be shown an error message and the install will fail.\n\nA formula should be disabled to indicate to users that the formula cannot be used and will be removed in the future. Disabled formulae may no longer build from source or have working bottles.\n\nThe most common reasons for disabling a formula are:\n\n- it cannot be built from source (meaning no bottles can be built)\n- it has been deprecated for a long time\n- the upstream repository has been removed\n- the project has no license\n\nFormulae should not be disabled without a deprecation period of at least three months unless the circumstances are exceptional (e.g. the formula does not build on any supported macOS version or Linux). Popular formulae should have longer deprecation periods. The popularity of a formula should be based on our analytics data.\n\n**Note: disabled formulae in homebrew/core will be automatically removed one year after their disable date**\n\nTo disable a formula, add a `disable!` call. This call should include a deprecation date (in the ISO 8601 format) and a deprecation reason:\n\n``` ruby\ndisable! date: \"YYYY-MM-DD\", because: :reason\n```\n\nThe `date` parameter should be set to the date that the reason for disabling came into effect. If there is no clear date but the formula needs to be disabled, use today’s date. If the `date` parameter is set to a date in the future, the formula will be deprecated until that date (on which the formula will become disabled).\n\nThe `because` parameter can be a preset reason (using a symbol) or a custom reason. See the [Deprecate and Disable Reasons](#deprecate-and-disable-reasons) section below for more details about the `because` parameter.\n\n## Removal\n\nA formula should be removed if it does not meet our criteria for [acceptable formulae](acceptable-formulae) or [versioned formulae](versions), has a non-open-source license, or has been disabled for over a year.\n\n## Deprecate and Disable Reasons\n\nWhen a formula is deprecated or disabled, a reason explaining the action must be provided.\n\nThere are two ways to indicate the reason. The preferred way is to use a pre-existing symbol to indicate the reason. The available symbols are listed below and can be found in the [`DeprecateDisable` module](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/deprecate_disable.rb):\n\n- `:does_not_build`: the formula cannot be built from source\n- `:no_license`: the formula does not have a license\n- `:repo_archived`: the upstream repository has been archived\n- `:repo_removed`: the upstream repository has been removed\n- `:unmaintained`: the project appears to be abandoned\n- `:unsupported`: Homebrew’s application of the software is not supported by the upstream developers (e.g. upstream only supports macOS versions prior to 10.14)\n- `:deprecated_upstream`: the project is deprecated upstream\n- `:versioned_formula`: the formula is a versioned formula\n\nThese reasons can be specified by their symbols (the comments show the message that will be displayed to users):\n\n``` ruby\n# Warning: <formula> has been deprecated because it is deprecated upstream!\ndeprecate! date: \"2020-01-01\", because: :deprecated_upstream\n```\n\n``` ruby\n# Error: <formula> has been disabled because it does not build!\ndisable! date: \"2020-01-01\", because: :does_not_build\n```\n\nIf these pre-existing reasons do not fit, a custom reason can be specified. These reasons should be written to fit into the sentence `<formula> has been deprecated/disabled because it <reason>!`.\n\nA well-worded example of a custom reason would be:\n\n``` ruby\n# Warning: <formula> has been deprecated because it fetches unversioned dependencies at runtime!\ndeprecate! date: \"2020-01-01\", because: \"fetches unversioned dependencies at runtime\"\n```\n\nA poorly-worded example of a custom reason would be:\n\n``` ruby\n# Error: <formula> has been disabled because it invalid license!\ndisable! date: \"2020-01-01\", because: \"invalid license\"\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Deprecating-Disabling-and-Removing-Formulae](https://docs.brew.sh/Deprecating-Disabling-and-Removing-Formulae)"
- name: Diagram Guidelines
  id: diagram-guidelines
  summary: For complex diagrams, use the .drawio.svg format
  description: "# Diagram Guidelines\n\n## Preferred file format\n\nFor complex diagrams, use the `.drawio.svg` format.\n\nFiles with the `.drawio.svg` extension are SVG files with embedded [draw.io](https://www.diagrams.net/) source code. Using that format lends itself to a developer-friendly workflow: it is valid SVG, plays well with `git diff` and can be edited in lock-step using various online and offline flavours of draw.io. If you use VS Code, you can use an [extension](https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio) for draw.io integration.\n\nFiles in the `.drawio.svg` format can be processed offline.\n\n## Embedding a diagram into Markdown\n\nTo embed a `.drawio.svg` file into Markdown, use the same syntax as for any image. Example: `![My diagram](my-diagram.drawio.svg)`\n\nMind that GitHub doesn’t allow styling in Markdown documents. Where styling is allowed (e.g. in the exported brew.sh version of the documentation), always set a background colour of `white` for the diagram. That’s the colour draw.io assumes, and keeps the diagram easy to read in dark mode without further customization. You can use the CSS selector `img[src$=\".drawio.svg\"]` for styling.\n\n## Example\n\nExample for an SVG image embedded into Markdown:\n\n``` md\n![Example diagram: Managing Pull Requests](/assets/img/docs/managing-pull-requests.drawio.svg)\n```\n\nResult:\n\nExample for styling (where allowed):\n\n``` css\nimg[src$=\".drawio.svg\"] {\n  background-color: white;\n  margin-bottom: 20px;\n  padding: 5%;\n  width: 90%;\n}\n\n@media (prefers-color-scheme: dark) {\n  img[src$=\".drawio.svg\"] {\n    filter: invert(85%);\n    -webkit-filter: invert(85%);\n  }\n}\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Diagram-Guidelines](https://docs.brew.sh/Diagram-Guidelines)"
- name: External Commands
  id: external-commands
  summary: Homebrew, like Git, supports external commands
  description: "# External Commands\n\nHomebrew, like Git, supports *external commands*. This lets you create new commands that can be run like:\n\n``` bash\nbrew mycommand --option1 --option3 <formula>\n```\n\nwithout modifying Homebrew’s internals.\n\n## Command types\n\nExternal commands come in two flavours: Ruby commands and shell scripts.\n\nIn both cases, the command file should be executable (`chmod +x`) and live somewhere in your `PATH`.\n\nExternal commands can be added to a tap to allow easy distribution. See [below](#external-commands-in-taps) for more details.\n\n### Ruby commands\n\nAn external command `extcmd` implemented as a Ruby command should be named `brew-extcmd.rb`. The command is executed by doing a `require` on the full pathname. As the command is `require`d, it has full access to the Homebrew “environment”, i.e. all global variables and modules that any internal command has access to. Be wary of using Homebrew internals; they may change at any time without warning.\n\nThe command may `Kernel.exit` with a status code if it needs to; if it doesn’t explicitly exit then Homebrew will return `0`.\n\n### Other executable scripts\n\nAn executable script for a command named `extcmd` should be named `brew-extcmd`. The script itself can use any suitable shebang (`#!`) line, so an external script can be written in Bash, Ruby, or even Python. Unlike the ruby commands this file must not end with a language-specific suffix (`.sh`, or `.py`). This file will be run via `exec` with some Homebrew variables set as environment variables, and passed any additional command-line arguments.\n\n| Variable                | Description                                                                                                                                                               |\n|-------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `HOMEBREW_CACHE`        | Where Homebrew caches downloaded tarballs to, by default `~/Library/Caches/Homebrew`.                                                                                     |\n| `HOMEBREW_PREFIX`       | Where Homebrew installs software. `/usr/local` by default for macOS Intel, `/opt/homebrew` for Apple Silicon and `/home/linuxbrew/.linuxbrew` for Linux.                  |\n| `HOMEBREW_CELLAR`       | The location of the Homebrew Cellar, where software is staged. This will be `HOMEBREW_PREFIX/Cellar` if that directory exists, or `HOMEBREW_REPOSITORY/Cellar` otherwise. |\n| `HOMEBREW_LIBRARY_PATH` | The directory containing Homebrew’s own application code.                                                                                                                 |\n| `HOMEBREW_REPOSITORY`   | The Git repository directory (i.e. where Homebrew’s `.git` directory lives). Usually either the same as `HOMEBREW_PREFIX` or a `Homebrew` subdirectory.                   |\n\n## Providing `--help`\n\nAll internal and external Homebrew commands can provide styled `--help` output by using Homebrew’s [argument parser](https://rubydoc.brew.sh/Homebrew/CLI/Parser.html), as seen in the [`brew services` command](https://github.com/Homebrew/homebrew-services/blob/HEAD/cmd/services.rb); or by including lines starting with `#:` (a comment then `:` character in both Bash and Ruby), as seen in the [header of `update.sh`](https://github.com/Homebrew/brew/blob/cf7def0c68903814c6b4e04a55fe8f3cb3f5605e/Library/Homebrew/cmd/update.sh#L1-L10), which is printed with `brew update --help`.\n\n## Unofficial external commands\n\nThese commands have been contributed by Homebrew users but are not included in the main Homebrew organisation, nor are they installed by the installer script. You can install them manually, as outlined above.\n\nNote they are largely untested, and as always, be careful about running untested code on your machine.\n\n### brew-gem\n\nInstall any `gem` package into a self-contained Homebrew Cellar location: <https://github.com/sportngin/brew-gem>\n\nNote this can also be installed with `brew install brew-gem`.\n\n## External commands in taps\n\nExternal commands can be hosted in a [tap](taps) to allow users to easily install and use them. See [How to Create and Maintain a Tap](how-to-create-and-maintain-a-tap) for more details about creating and maintaining a tap.\n\nExternal commands should be added to a `cmd` directory in the tap. An external command `extcmd` implemented as a Ruby command should live in `cmd/extcmd.rb` (don’t forget to `chmod +x`).\n\nTo easily use Homebrew’s argument parser, replicate the following Ruby template for external commands (replacing all instances of `foo` with the name of the command):\n\n``` ruby\n# frozen_string_literal: true\n\nmodule Homebrew\n  module_function\n\n  def foo_args\n    Homebrew::CLI::Parser.new do\n      description <<~EOS\n        Do something. Place a description here.\n      EOS\n      switch \"-f\", \"--force\",\n             description: \"Force doing something in the command.\"\n      flag   \"--file=\",\n             description: \"Specify a file to do something with in the command.\"\n      comma_array \"--names\",\n                  description: \"Add a list of names to the command.\"\n\n      named_args [:formula, :cask], min: 1\n    end\n  end\n\n  def foo\n    args = foo_args.parse\n\n    something if args.force?\n    something_else if args.file == \"file.txt\"\n  end\nend\n```\n\nUsing the above will generate appropriate help text:\n\n``` console\n$ brew foo --help\nUsage: brew foo [options] formula|cask [...]\n\nDo something. Place a description here.\n\n  -f, --force                      Force doing something in the command.\n      --file                       Specify a file to do something with in the\n                                   command.\n      --names                      Add a list of names to the command.\n  -d, --debug                      Display any debugging information.\n  -q, --quiet                      Make some output more quiet.\n  -v, --verbose                    Make some output more verbose.\n  -h, --help                       Show this message.\n```\n\nThe usage string is automatically generated based on the specified number and type of named arguments (see below for more details on specifying named arguments). The generated usage string can be overridden by passing the correct usage string to the `usage_banner` method (placed just before the `description` method). See the [`brew tap` command](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/cmd/tap.rb) for an example.\n\nUse the `named_args` method to specify the type and number of named arguments that are expected. Pass either a symbol to indicate the type of argument expected, an array of symbols to indicate that multiple types should be expected, or an array of strings to specify which specific options should be expected (see the [`brew analytics` command](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/cmd/analytics.rb) for an example of this).\n\nPass an integer to the `number`, `min`, or `max` parameter of `named_args` to specify the number of named arguments that are expected. See the following examples:\n\n``` ruby\n# Accept no named args\nnamed_args :none\n\n# Accept any number (including none) of formula arguments\nnamed_args :formula\n\n# Accept exactly one of the specified options as an argument\nnamed_args %w[state off on], number: 1\n\n# Accept at least one argument that is either a formula or a cask\nnamed_args [:formula, :cask], min: 1\n\n# Accept no more than one argument that is a tap\nnamed_args :tap, max: 1\n\n# Accept between one and two named args\nnamed_args min: 1, max: 2\n```\n\nNamed arguments can be accessed by calling `args.named`. Check out the internal [commands](https://github.com/Homebrew/brew/tree/HEAD/Library/Homebrew/cmd) and [developer commands](https://github.com/Homebrew/brew/tree/HEAD/Library/Homebrew/dev-cmd) for more usage examples.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/External-Commands](https://docs.brew.sh/External-Commands)"
- name: FAQ
  id: faq
  summary: The Formula Cookbook has a list of Homebrew terminology
  description: "# FAQ\n\n## Is there a glossary of terms around?\n\nThe Formula Cookbook has a list of [Homebrew terminology](formula-cookbook#homebrew-terminology).\n\n## How do I update my local packages?\n\nFirst update all package definitions (formulae) and Homebrew itself:\n\n``` plaintext\nbrew update\n```\n\nYou can now list which of your installed packages (kegs) are outdated with:\n\n``` plaintext\nbrew outdated\n```\n\nUpgrade everything with:\n\n``` plaintext\nbrew upgrade\n```\n\nOr upgrade a specific formula with:\n\n``` plaintext\nbrew upgrade <formula>\n```\n\n## How do I stop certain formulae from being updated?\n\nTo stop something from being updated/upgraded:\n\n``` plaintext\nbrew pin <formula>\n```\n\nTo allow that formulae to update again:\n\n``` plaintext\nbrew unpin <formula>\n```\n\nNote that pinned, outdated formulae that another formula depends on need to be upgraded when required, as we do not allow formulae to be built against outdated versions. If this is not desired, you can instead use `brew extract` to [maintain your own copy of the formula in a tap](how-to-create-and-maintain-a-tap).\n\n## How do I uninstall Homebrew?\n\nTo uninstall Homebrew, run the [uninstall script from the Homebrew/install repository](https://github.com/homebrew/install#uninstall-homebrew).\n\n## How do I keep old versions of a formula when upgrading?\n\nHomebrew automatically uninstalls old versions of each formula that is upgraded with `brew upgrade`, and periodically performs additional cleanup every 30 days.\n\nTo **disable** automatic `brew cleanup`:\n\n``` plaintext\nexport HOMEBREW_NO_INSTALL_CLEANUP=1\n```\n\nTo disable automatic `brew cleanup` only for formulae `foo` and `bar`:\n\n``` plaintext\nexport HOMEBREW_NO_CLEANUP_FORMULAE=foo,bar\n```\n\nWhen automatic `brew cleanup` is disabled, if you uninstall a formula, it will only remove the latest version you have installed. It will not remove all versions of the formula that you may have installed in the past. Homebrew will continue to attempt to install the newest version it knows about when you run `brew upgrade`. This can be surprising.\n\nIn this case, to remove a formula entirely, you may run `brew uninstall --force <formula>`. Be careful as this is a destructive operation.\n\n## Why does `brew upgrade <formula>` or `brew install <formula>` also upgrade a bunch of other stuff?\n\nHomebrew doesn’t support arbitrary mixing and matching of formula versions, so everything a formula depends on, and everything that depends on it in turn, needs to be upgraded to the latest version as that’s the only combination of formulae we test. As a consequence any given `upgrade` or `install` command can upgrade many other (seemingly unrelated) formulae, especially if something important like `python` or `openssl` also needed an upgrade.\n\n## Where does stuff get downloaded?\n\n``` plaintext\nbrew --cache\n```\n\nWhich is usually: `~/Library/Caches/Homebrew`\n\n## My Mac `.app`s don’t find Homebrew utilities!\n\nGUI apps on macOS don’t have Homebrew’s prefix in their `PATH` by default. If you’re on Mountain Lion or later, you can fix this by running `sudo launchctl config user path \"$(brew --prefix)/bin:${PATH}\"` and then rebooting, as documented in `man launchctl`. Note that this sets the `launchctl` `PATH` for *all users*. For earlier versions of macOS, see [this page](https://developer.apple.com/legacy/library/qa/qa1067/_index.html).\n\n## How do I contribute to Homebrew?\n\nRead our [contribution guidelines](https://github.com/Homebrew/brew/blob/HEAD/CONTRIBUTING.md#contributing-to-homebrew).\n\n## Why do you compile everything?\n\nHomebrew provides pre-built binary packages for many formulae. These are referred to as [bottles](bottles) and are available at <https://github.com/Homebrew/homebrew-core/packages>.\n\nIf available, bottled binaries will be used by default except under the following conditions:\n\n- The `--build-from-source` option is invoked.\n- No bottle is available for the machine’s currently running OS version. (Bottles for macOS are generated only for supported macOS versions.)\n- Homebrew is installed to a prefix other than the default (although some bottles support this).\n- Formula options were passed to the install command. For example, `brew install <formula>` will try to find a bottled binary, but `brew install --with-foo <formula>` will trigger a source build.\n\nWe aim to bottle everything.\n\n## How do I get a formula from someone else’s pull request?\n\n``` bash\nbrew install hub\nbrew update\ncd \"$(brew --repository homebrew/core)\"\nhub fetch github_username\nhub pr checkout pull_request_number\n```\n\n## Why should I install Homebrew in the default location?\n\nHomebrew’s pre-built binary packages (known as [bottles](bottles)) of many formulae can only be used if you install in the default installation prefix, otherwise they have to be built from source. Building from source takes a long time, is prone to failure, and is not supported. The default prefix is:\n\n- `/usr/local` for macOS on Intel,\n- `/opt/homebrew` for macOS on Apple Silicon/ARM, and\n- `/home/linuxbrew/.linuxbrew` for Linux.\n\nDo yourself a favour and install to the default prefix so that you can use our pre-built binary packages. *Pick another prefix at your peril!*\n\n## Why is the default installation prefix `/opt/homebrew` on Apple Silicon?\n\nThe prefix `/opt/homebrew` was chosen to allow installations in `/opt/homebrew` for Apple Silicon and `/usr/local` for Rosetta 2 to coexist and use bottles.\n\n## Why is the default installation prefix `/home/linuxbrew/.linuxbrew` on Linux?\n\nThe prefix `/home/linuxbrew/.linuxbrew` was chosen so that users without admin access can still benefit from precompiled binaries via a `linuxbrew` role account. If you do not yourself have admin privileges, consider asking your admin staff to create a `linuxbrew` role account for you with home directory `/home/linuxbrew`.\n\n## Why does Homebrew say sudo is bad?\n\n**tl;dr** Sudo is dangerous, and you installed TextMate.app without sudo anyway.\n\nHomebrew refuses to work using sudo.\n\nYou should only ever sudo a tool you trust. Of course, you can trust Homebrew 😉 — but do you trust the multi-megabyte Makefile that Homebrew runs? Developers often understand C++ far better than they understand `make` syntax. It’s too high a risk to sudo such stuff. It could modify (or upload) any files on your system. And indeed, we’ve seen some build scripts try to modify `/usr` even when the prefix was specified as something else entirely.\n\nWe use the macOS sandbox to stop this but this doesn’t work when run as the `root` user (which also has read and write access to almost everything on the system).\n\nDid you `chown root /Applications/TextMate.app`? Probably not. So is it that important to `chown root wget`?\n\nIf you need to run Homebrew in a multi-user environment, consider creating a separate user account specifically for use of Homebrew.\n\n## Why isn’t a particular command documented?\n\nIf it’s not in [`man brew`](manpage), it’s probably an [external command](external-commands) with documentation available using `--help`.\n\n## Why haven’t you merged my pull request?\n\nIf all maintainer feedback has been addressed and all tests are passing, bump it with a “bump” comment. Sometimes we miss requests and there are plenty of them. In the meantime, rebase your pull request so that it can be more easily merged.\n\n## Can I edit formulae myself?\n\nYes! It’s easy! Just `brew edit <formula>`. You don’t have to submit modifications back to `homebrew/core`, just edit the formula to what you personally need and `brew install <formula>`. As a bonus, `brew update` will merge your changes with upstream so you can still keep the formula up-to-date **with** your personal modifications!\n\n## Can I make new formulae?\n\nYes! It’s easy! Just `brew create URL`. Homebrew will then open the formula in `EDITOR` so you can edit it, but it probably already installs; try it: `brew install <formula>`. If you encounter any issues, run the command with the `--debug` switch like so: `brew install --debug <formula>`, which drops you into a debugging shell.\n\nIf you want your new formula to be part of `homebrew/core` or want to learn more about writing formulae, then please read the [Formula Cookbook](formula-cookbook).\n\n## Why was a formula deleted or disabled?\n\nUse `brew log <formula>` to find out! Likely because it had [unresolved issues](acceptable-formulae) and/or [our analytics](https://formulae.brew.sh/analytics/) indicated it was not widely used.\n\nFor disabled and deprecated formulae, running `brew info <formula>` will also provide an explanation.\n\n## Homebrew is a poor name, it’s too generic; why was it chosen?\n\nHomebrew’s creator @mxcl wasn’t too concerned with the beer theme and didn’t consider that the project may actually prove popular. By the time Max realised that it was popular, it was too late. However, today, the first Google hit for “homebrew” is not beer related 😉\n\n## What does “keg-only” mean?\n\nIt means the formula is installed only into the Cellar and is not linked into the default prefix. This means most tools will not find it. You can see why a formula was installed as keg-only, and instructions for including it in your `PATH`, by running `brew info <formula>`.\n\nYou can [modify a tool’s build configuration](how-to-build-software-outside-homebrew-with-homebrew-keg-only-dependencies) to find keg-only dependencies. Or, you can link in the formula if you need to with `brew link <formula>`, though this can cause unexpected behaviour if you are shadowing macOS software.\n\n## How can I specify different configure arguments for a formula?\n\n`brew edit <formula>` and edit the formula directly. Currently there is no other way to do this.\n\n## Why can’t I open a Mac app from an “unidentified developer”?\n\nChances are that certain apps will give you a popup message like this:\n\nThis is a [security feature from Apple](https://support.apple.com/en-us/HT202491). The single most important thing to know is that **you can allow individual apps to be exempt from this feature.** This allows the app to run while the rest of the system remains under protection.\n\n**Always leave system-wide protection enabled,** and disable it only for specific apps as needed.\n\nIf you’re sure you want to trust the app, you can disable protection for it by right-clicking its icon and choosing *Open*:\n\nIn the resulting dialog, click the *Open* button to have macOS permanently allow the app to run on this Mac. **Don’t do this unless you’re sure you trust the app.**\n\nAlternatively, you may provide the [`--no-quarantine` flag](https://github.com/Homebrew/homebrew-cask/blob/HEAD/USAGE.md#options) at install time to not add this feature to a specific app.\n\n## Why aren’t some apps included during `brew upgrade`?\n\nAfter running `brew upgrade`, you may notice some casks you think should be upgrading, aren’t.\n\nAs you’re likely aware, a lot of macOS software can upgrade itself:\n\nThat could cause conflicts when used in tandem with Homebrew Cask’s `upgrade` mechanism.\n\nWhen software uses its built-in mechanisms to upgrade itself, it happens without Homebrew Cask’s knowledge, causing both versions get out of sync. If you were to then upgrade through Homebrew Cask while we have a lower version of the software on record, you’d get a downgrade.\n\nThere are a few ideas to fix this problem:\n\n- Try to prevent the software’s automated updates. It wouldn’t be a universal solution and may cause it to break. Most software on Homebrew Cask is closed-source, so we’d be guessing. This is also why pinning casks to a version isn’t available.\n- Try to extract the installed software’s version and compare it to the cask, deciding what to do at that time. It’d be a complicated solution that would break other parts of our methodology, such as using versions to interpolate `url` values (a definite win for maintainability). This solution also isn’t universal, as many software developers are inconsistent in their versioning schemes (and app bundles are meant to have two version strings) and it doesn’t work for all types of software we support.\n\nSo we let software be. Anything installed with Homebrew Cask should behave the same as if it were installed manually. But since we also want to support software that doesn’t self-upgrade, we add [`auto_updates true`](https://github.com/Homebrew/homebrew-cask/blob/62c0495b254845a481dacac6ea7c8005e27a3fb0/Casks/alfred.rb#L10) to casks for software that does, which excludes them from `brew upgrade`.\n\nCasks which use [`version :latest`](cask-cookbook#version-latest) are also excluded, because we have no way to track their installed version. It helps to ask the developers of such software to provide versioned releases (i.e. include the version in the path of the download `url`).\n\nIf you still want to force software to be upgraded via Homebrew Cask, you can reference it specifically in the `upgrade` command:\n\n``` plaintext\nbrew upgrade <cask>\n```\n\nOr use the `--greedy` flag:\n\n``` plaintext\nbrew upgrade --greedy\n```\n\nRefer to the `upgrade` section of the [`brew` manual page](manpage) for more details.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/FAQ](https://docs.brew.sh/FAQ)"
- name: Formula Cookbook
  id: formula-cookbook
  summary: A formula is a package definition written in Ruby
  description: "# Formula Cookbook\n\nA *formula* is a package definition written in Ruby. It can be created with `brew create <URL>` where `<URL>` is a zip or tarball, installed with `brew install <formula>`, and debugged with `brew install --debug --verbose <formula>`. Formulae use the [Formula API](https://rubydoc.brew.sh/Formula) which provides various Homebrew-specific helpers.\n\n## Homebrew terminology\n\n| Term            | Description                                                                                        | Example                                                                                         |\n|-----------------|----------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|\n| **Formula**     | The package definition                                                                             | `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/foo.rb`                        |\n| **Keg**         | The installation prefix of a **Formula**                                                           | `/usr/local/Cellar/foo/0.1`                                                                     |\n| **Keg-only**    | A **Formula** is **Keg-only** if it is not linked into the Homebrew prefix                         | The [`openjdk` formula](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/openjdk.rb) |\n| **opt prefix**  | A symlink to the active version of a **Keg**                                                       | `/usr/local/opt/foo `                                                                           |\n| **Cellar**      | All **Kegs** are installed here                                                                    | `/usr/local/Cellar`                                                                             |\n| **Tap**         | A Git repository of **Formulae** and/or commands                                                   | `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core`                                       |\n| **Bottle**      | Pre-built **Keg** used instead of building from source                                             | `qt-4.8.4.catalina.bottle.tar.gz`                                                               |\n| **Cask**        | An [extension of Homebrew](https://github.com/Homebrew/homebrew-cask) to install macOS native apps | `/Applications/MacDown.app/Contents/SharedSupport/bin/macdown`                                  |\n| **Brew Bundle** | An [extension of Homebrew](https://github.com/Homebrew/homebrew-bundle) to describe dependencies   | `brew 'myservice', restart_service: true`                                                       |\n\n## An introduction\n\nHomebrew uses Git for downloading updates and contributing to the project.\n\nHomebrew installs to the `Cellar` and then symlinks some of the installation into `/usr/local` so that other programs can see what’s going on. We suggest you `brew ls` a few of the kegs in your Cellar to see how it is all arranged.\n\nPackages are installed according to their formulae, which live in `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula`. Check out a simple one, e.g. `brew edit etl` (or [`etl`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/etl.rb)) or a more advanced one, e.g. `brew edit git` (or [`git`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/git.rb)).\n\n## Basic instructions\n\nMake sure you run `brew update` before you start. This turns your Homebrew installation into a Git repository.\n\nBefore submitting a new formula make sure your package:\n\n- meets all our [Acceptable Formulae](acceptable-formulae) requirements\n- isn’t already in Homebrew (check `brew search <formula>`)\n- isn’t already waiting to be merged (check the [issue tracker](https://github.com/Homebrew/homebrew-core/pulls))\n- is still supported by upstream (i.e. doesn’t require extensive patching)\n- has a stable, tagged version (i.e. not just a GitHub repository with no versions)\n- passes all `brew audit --new-formula <formula>` tests\n\nBefore submitting a new formula make sure you read over our [contribution guidelines](https://github.com/Homebrew/brew/blob/HEAD/CONTRIBUTING.md#contributing-to-homebrew).\n\n### Grab the URL\n\nRun `brew create` with a URL to the source tarball:\n\n``` bash\nbrew create https://example.com/foo-0.1.tar.gz\n```\n\nThis creates `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/foo.rb` and opens it in your `EDITOR`. It’ll look something like:\n\n``` ruby\nclass Foo < Formula\n  desc \"\"\n  homepage \"\"\n  url \"https://example.com/foo-0.1.tar.gz\"\n  sha256 \"85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7\"\n  license \"\"\n\n  # depends_on \"cmake\" => :build\n\n  def install\n    # ENV.deparallelize\n    system \"./configure\", \"--disable-debug\",\n                          \"--disable-dependency-tracking\",\n                          \"--disable-silent-rules\",\n                          \"--prefix=#{prefix}\"\n    # system \"cmake\", \".\", *std_cmake_args\n    system \"make\", \"install\"\n  end\n\n  test do\n    system \"false\"\n  end\nend\n```\n\nIf `brew` said `Warning: Version cannot be determined from URL` when doing the `create` step, you’ll need to explicitly add the correct [`version`](https://rubydoc.brew.sh/Formula#version-class_method) to the formula and then save the formula.\n\nHomebrew will try to guess the formula’s name from its URL. If it fails to do so you can override this with `brew create <URL> --set-name <name>`.\n\n### Fill in the `homepage`\n\n**We don’t accept formulae without a [`homepage`](https://rubydoc.brew.sh/Formula#homepage%3D-class_method)!**\n\nAn SSL/TLS (https) [`homepage`](https://rubydoc.brew.sh/Formula#homepage%3D-class_method) is preferred, if one is available.\n\nTry to summarise from the [`homepage`](https://rubydoc.brew.sh/Formula#homepage%3D-class_method) what the formula does in the [`desc`](https://rubydoc.brew.sh/Formula#desc%3D-class_method)ription. Note that the [`desc`](https://rubydoc.brew.sh/Formula#desc%3D-class_method)ription is automatically prepended with the formula name.\n\n### Fill in the `license`\n\n**We don’t accept new formulae into Homebrew/homebrew-core without a [`license`](https://rubydoc.brew.sh/Formula#license-class_method)!**\n\nWe only accept formulae that use a [Debian Free Software Guidelines license](https://wiki.debian.org/DFSGLicenses) or are released into the public domain following [DFSG Guidelines on Public Domain software](https://wiki.debian.org/DFSGLicenses#Public_Domain).\n\nUse the license identifier from the [SPDX License List](https://spdx.org/licenses/) e.g. `license \"BSD-2-Clause\"`, or use `license :public_domain` for public domain software.\n\nUse `:any_of`, `:all_of` or `:with` to describe complex license expressions. `:any_of` should be used when the user can choose which license to use. `:all_of` should be used when the user must use all licenses. `:with` should be used to specify a valid SPDX exception. Add `+` to an identifier to indicate that the formulae can be licensed under later versions of the same license.\n\nCheck out the [License Guidelines](license-guidelines) for examples of complex license expressions in Homebrew formulae.\n\n### Check the build system\n\n``` bash\nbrew install --interactive foo\n```\n\nYou’re now at a new prompt with the tarball extracted to a temporary sandbox.\n\nCheck the package’s `README`. Does the package install with `./configure`, `cmake`, or something else? Delete the commented out `cmake` lines if the package uses `./configure`.\n\n### Check for dependencies\n\nThe `README` probably tells you about dependencies and Homebrew or macOS probably already has them. You can check for Homebrew dependencies with `brew search`. Some common dependencies that macOS comes with:\n\n- `libexpat`\n- `libGL`\n- `libiconv`\n- `libpcap`\n- `libxml2`\n- `python`\n- `ruby`\n\nThere are plenty of others; check `/usr/lib` for them.\n\nWe generally try not to duplicate system libraries and complicated tools in core Homebrew but we do duplicate some commonly used tools.\n\nSpecial exceptions are OpenSSL and LibreSSL. Things that use either *should* be built using Homebrew’s shipped equivalent and our Brew Test Bot’s post-install `audit` will warn if it detects you haven’t done this.\n\nHomebrew’s OpenSSL is [`keg_only`](https://rubydoc.brew.sh/Formula#keg_only-class_method) to avoid conflicting with the system so sometimes formulae need to have environment variables set or special configuration flags passed to locate our OpenSSL. You can see this mechanism in the [`clamav`](https://github.com/Homebrew/homebrew-core/blob/89c4574ef1a6d15e92196637ff315a0a4bb3e289/Formula/clamav.rb#L37) formula. Usually this is unnecessary because Homebrew sets up our [build environment](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/extend/ENV/super.rb) to favour finding [`keg_only`](https://rubydoc.brew.sh/Formula#keg_only-class_method) formulae first.\n\n**Important:** `$(brew --prefix)/bin` is NOT on the `PATH` during formula installation. If you have dependencies at build time, you must specify them and `brew` will add them to the `PATH` or create a [`Requirement`](https://rubydoc.brew.sh/Requirement).\n\n### Specifying other formulae as dependencies\n\n``` ruby\nclass Foo < Formula\n  depends_on \"pkg-config\"\n  depends_on \"jpeg\"\n  depends_on \"readline\" => :recommended\n  depends_on \"gtk+\" => :optional\n  depends_on \"httpd\" => [:build, :test]\n  depends_on :xcode => \"9.3\"\nend\n```\n\nA String (e.g. `\"jpeg\"`) specifies a formula dependency.\n\nA Symbol (e.g. `:xcode`) specifies a [`Requirement`](https://rubydoc.brew.sh/Requirement) which can be fulfilled by one or more formulae, casks or other system-wide installed software (e.g. Xcode).\n\nA Hash (e.g. `=>`) adds information to a dependency. Given a String or Symbol, the value can be one or more of the following values:\n\n- `:build` means that dependency is a build-time only dependency so it can be skipped when installing from a bottle or when listing missing dependencies using `brew missing`.\n\n- `:test` means that dependency is only required when running `brew test`.\n\n- `:optional` generates an implicit `with-foo` option for the formula. This means that, given `depends_on \"foo\" => :optional`, the user must pass `--with-foo` in order to use the dependency.\n\n- `:recommended` generates an implicit `without-foo` option, meaning that the dependency is enabled by default and the user must pass `--without-foo` to disable this dependency. The default description can be overridden using the normal option syntax (in this case, the option declaration must precede the dependency):\n\n  ``` ruby\n  option \"with-foo\", \"Compile with foo bindings\" # This overrides the generated description if you want to\n    depends_on \"foo\" => :optional # Generated description would otherwise be \"Build with foo support\"\n  ```\n\n- Some [`Requirement`](https://rubydoc.brew.sh/Requirement)s can also take a string specifying their minimum version that the formula depends on.\n\n**Note:** `:optional` and `:recommended` are not allowed in Homebrew/homebrew-core as they are not tested by CI.\n\n### Specifying conflicts with other formulae\n\nSometimes there’s hard conflict between formulae, and it can’t be avoided or circumvented with [`keg_only`](https://rubydoc.brew.sh/Formula#keg_only-class_method).\n\nA good example formula for minor conflict is [`mbedtls`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/mbedtls.rb), which ships and compiles a “Hello World” executable. This is obviously non-essential to `mbedtls`’s functionality, and conflict with the popular GNU [`hello`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/hello.rb) formula would be overkill, so we just [remove it](https://github.com/Homebrew/homebrew-core/blob/966273060ad507fea490bd931971963de8b1a1dc/Formula/mbedtls.rb#L30-L31) during the installation process.\n\n[`pdftohtml`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/pdftohtml.rb) provides an example of a serious conflict, where both formula ship an identically-named binary that is essential to functionality, so a [`conflicts_with`](https://rubydoc.brew.sh/Formula#conflicts_with-class_method) is preferable.\n\nAs a general rule, [`conflicts_with`](https://rubydoc.brew.sh/Formula#conflicts_with-class_method) should be a last-resort option. It’s a fairly blunt instrument.\n\nThe syntax for a conflict that can’t be worked around is:\n\n``` ruby\nconflicts_with \"blueduck\", because: \"yellowduck also ships a duck binary\"\n```\n\n### Formulae revisions\n\nIn Homebrew we sometimes accept formulae updates that don’t include a version bump. These include resource updates, new patches or fixing a security issue with a formula.\n\nOccasionally, these updates require a forced-recompile of the formula itself or its dependents to either ensure formulae continue to function as expected or to close a security issue. This forced-recompile is known as a [`revision`](https://rubydoc.brew.sh/Formula#revision%3D-class_method) and is inserted underneath the [`homepage`](https://rubydoc.brew.sh/Formula#homepage%3D-class_method)/[`url`](https://rubydoc.brew.sh/Formula#url-class_method)/[`sha256`](https://rubydoc.brew.sh/Formula#sha256%3D-class_method) block.\n\nWhen a dependent of a formula fails against a new version of that dependency it must receive a [`revision`](https://rubydoc.brew.sh/Formula#revision%3D-class_method). An example of such failure can be seen [here](https://github.com/Homebrew/legacy-homebrew/issues/31195) and the fix [here](https://github.com/Homebrew/legacy-homebrew/pull/31207).\n\n[`revision`](https://rubydoc.brew.sh/Formula#revision%3D-class_method)s are also used for formulae that move from the system OpenSSL to the Homebrew-shipped OpenSSL without any other changes to that formula. This ensures users aren’t left exposed to the potential security issues of the outdated OpenSSL. An example of this can be seen in [this commit](https://github.com/Homebrew/homebrew-core/commit/0d4453a91923e6118983961e18d0609e9828a1a4).\n\n### Version scheme changes\n\nSometimes formulae have version schemes that change such that a direct comparison between two versions no longer produces the correct result. For example, a project might be version `13` and then decide to become `1.0.0`. As `13` is translated to `13.0.0` by our versioning system by default this requires intervention.\n\nWhen a version scheme of a formula fails to recognise a new version as newer it must receive a [`version_scheme`](https://rubydoc.brew.sh/Formula#version_scheme%3D-class_method). An example of this can be seen [here](https://github.com/Homebrew/homebrew-core/pull/4006).\n\n### Double-check for dependencies\n\nWhen you already have a lot of formulae installed, it’s easy to miss a common dependency. You can double-check which libraries a binary links to with the `otool` command (perhaps you need to use `xcrun otool`):\n\n``` bash\n$ otool -L /usr/local/bin/ldapvi\n/usr/local/bin/ldapvi:\n    /usr/local/opt/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/local/lib/libglib-2.0.0.dylib (compatibility version 4201.0.0, current version 4201.0.0)\n    /usr/local/opt/gettext/lib/libintl.8.dylib (compatibility version 10.0.0, current version 10.2.0)\n    /usr/local/opt/readline/lib/libreadline.6.dylib (compatibility version 6.0.0, current version 6.3.0)\n    /usr/local/lib/libpopt.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)\n    /System/Library/Frameworks/LDAP.framework/Versions/A/LDAP (compatibility version 1.0.0, current version 2.4.0)\n    /usr/lib/libresolv.9.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1213.0.0)\n```\n\n### Specifying gems, Python modules, Go projects, etc. as dependencies\n\nHomebrew doesn’t package already-packaged language-specific libraries. These should be installed directly from `gem`/`cpan`/`pip` etc.\n\nIf you’re installing an application then use [`resource`](https://rubydoc.brew.sh/Formula#resource-class_method)s for all language-specific dependencies:\n\n``` ruby\nclass Foo < Formula\n  resource \"pycrypto\" do\n    url \"https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz\"\n    sha256 \"f2ce1e989b272cfcb677616763e0a2e7ec659effa67a88aa92b3a65528f60a3c\"\n  end\n\n  def install\n    resource(\"pycrypto\").stage { system \"python\", *Language::Python.setup_install_args(libexec/\"vendor\") }\n  end\nend\n```\n\n[`jrnl`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/jrnl.rb) is an example of a formula that does this well. The end result means the user doesn’t have to use `pip` or Python and can just run `jrnl`.\n\nFor Python formulae, running `brew update-python-resources <formula>` will automatically add the necessary [`resource`](https://rubydoc.brew.sh/Formula#resource-class_method) stanzas for the dependencies of your Python application to the formula. Note that `brew update-python-resources` is run automatically by `brew create` if you pass the `--python` flag. If `brew update-python-resources` is unable to determine the correct `resource` stanzas, [homebrew-pypi-poet](https://github.com/tdsmith/homebrew-pypi-poet) is a good third-party alternative that may help.\n\n### Install the formula\n\n``` bash\nbrew install --build-from-source --verbose --debug foo\n```\n\n`--debug` will ask you to open an interactive shell if the build fails so you can try to figure out what went wrong.\n\nCheck the top of the e.g. `./configure` output. Some configure scripts do not recognise e.g. `--disable-debug`. If you see a warning about it, remove the option from the formula.\n\n### Add a test to the formula\n\nAdd a valid test to the [`test do`](https://rubydoc.brew.sh/Formula#test-class_method) block of the formula. This will be run by `brew test foo` and the [Brew Test Bot](brew-test-bot).\n\nThe [`test do`](https://rubydoc.brew.sh/Formula#test-class_method) block automatically creates and changes to a temporary directory which is deleted after run. You can access this [`Pathname`](https://rubydoc.brew.sh/Pathname) with the [`testpath`](https://rubydoc.brew.sh/Formula#testpath-instance_method) function. The environment variable `HOME` is set to [`testpath`](https://rubydoc.brew.sh/Formula#testpath-instance_method) within the [`test do`](https://rubydoc.brew.sh/Formula#test-class_method) block.\n\nWe want tests that don’t require any user input and test the basic functionality of the application. For example `foo build-foo input.foo` is a good test and (despite their widespread use) `foo --version` and `foo --help` are bad tests. However, a bad test is better than no test at all.\n\nSee [`cmake`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/cmake.rb) for an example of a formula with a good test. The formula writes a basic `CMakeLists.txt` file into the test directory then calls CMake to generate Makefiles. This test checks that CMake doesn’t e.g. segfault during basic operation.\n\nYou can check that the output is as expected with `assert_equal` or `assert_match` on the output of the [Formula assertions](https://rubydoc.brew.sh/Homebrew/Assertions.html) such as in this example from the [envv formula](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/envv.rb):\n\n``` ruby\nassert_equal \"mylist=A:C; export mylist\", shell_output(\"#{bin}/envv del mylist B\").strip\n```\n\nYou can also check that an output file was created:\n\n``` ruby\nassert_predicate testpath/\"output.txt\", :exist?\n```\n\nSome advice for specific cases:\n\n- If the formula is a library, compile and run some simple code that links against it. It could be taken from upstream’s documentation / source examples. A good example is [`tinyxml2`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/tinyxml2.rb), which writes a small C++ source file into the test directory, compiles and links it against the tinyxml2 library and finally checks that the resulting program runs successfully.\n- If the formula is for a GUI program, try to find some function that runs as command-line only, like a format conversion, reading or displaying a config file, etc.\n- If the software cannot function without credentials or requires a virtual machine, docker instance, etc. to run, a test could be to try to connect with invalid credentials (or without credentials) and confirm that it fails as expected. This is preferred over mocking a dependency.\n- Homebrew comes with a number of [standard test fixtures](https://github.com/Homebrew/brew/tree/master/Library/Homebrew/test/support/fixtures), including numerous sample images, sounds, and documents in various formats. You can get the file path to a test fixture with `test_fixtures(\"test.svg\")`.\n- If your test requires a test file that isn’t a standard test fixture, you can install it from a source repository during the `test` phase with a resource block, like this:\n\n``` ruby\nresource(\"testdata\") do\n  url \"https://example.com/input.foo\"\n  sha256 \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\nend\n\ntest do\n  resource(\"testdata\").stage do\n    assert_match \"OK\", shell_output(\"#{bin}/foo build-foo input.foo\")\n  end\nend\n```\n\n### Manuals\n\nHomebrew expects to find manual pages in `#{prefix}/share/man/...`, and not in `#{prefix}/man/...`.\n\nSome software installs to `man` instead of `share/man`, so check the output and add a `\"--mandir=#{man}\"` to the `./configure` line if needed.\n\n### Caveats\n\nIn case there are specific issues with the Homebrew packaging (compared to how the software is installed from other sources) a `caveats` block can be added to the formula to warn users. This can indicate non-standard install paths, an example from the `ruby` formula:\n\n``` plaintext\n==> Caveats\nBy default, binaries installed by gem will be placed into:\n  /usr/local/lib/ruby/gems/bin\n\nYou may want to add this to your PATH.\n```\n\n### A quick word on naming\n\nName the formula like the project markets the product. So it’s `pkg-config`, not `pkgconfig`; `sdl_mixer`, not `sdl-mixer` or `sdlmixer`.\n\nThe only exception is stuff like “Apache Ant”. Apache sticks “Apache” in front of everything, but we use the formula name `ant`. We only include the prefix in cases like `gnuplot` (because it’s part of the name) and `gnu-go` (because everyone calls it “GNU Go”—nobody just calls it “Go”). The word “Go” is too common and there are too many implementations of it.\n\nIf you’re not sure about the name, check its homepage, Wikipedia page and [what Debian calls it](https://www.debian.org/distrib/packages).\n\nWhen Homebrew already has a formula called `foo` we typically do not accept requests to replace that formula with something else also named `foo`. This is to avoid both confusing and surprising users’ expectations.\n\nWhen two formulae share an upstream name, e.g. [AESCrypt](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/aescrypt.rb) and [AES Crypt](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/aescrypt-packetizer.rb) the newer formula must typically adapt its name to avoid conflict with the current formula.\n\nIf you’re *still* not sure, just commit. We’ll apply some arbitrary rule and make a decision 😉.\n\nWhen importing classes, Homebrew will require the formula and then create an instance of the class. It does this by assuming the formula name can be directly converted to the class name using a `regexp`. The rules are simple:\n\n- `foo-bar.rb` =\\> `FooBar`\n- `foobar.rb` =\\> `Foobar`\n\nThus, if you change the name of the class, you must also rename the file. Filenames should be all lowercase, and class names should be the strict CamelCase equivalent, e.g. formulae `gnu-go` and `sdl_mixer` become classes `GnuGo` and `SdlMixer`, even if part of their name is an acronym.\n\nAdd aliases by creating symlinks in an `Aliases` directory in the tap root.\n\n### Audit the formula\n\nYou can run `brew audit --strict --online` to test formulae for adherence to Homebrew house style. The `audit` command includes warnings for trailing whitespace, preferred URLs for certain source hosts, and a lot of other style issues. Fixing these warnings before committing will make the process a lot quicker for everyone.\n\nNew formulae being submitted to Homebrew should run `brew audit --new-formula foo`. This command is performed by the Brew Test Bot on new submissions as part of the automated build and test process, and highlights more potential issues than the standard audit.\n\nUse `brew info` and check if the version guessed by Homebrew from the URL is correct. Add an explicit [`version`](https://rubydoc.brew.sh/Formula#version-class_method) if not.\n\n### Commit\n\nEverything is built on Git, so contribution is easy:\n\n``` bash\nbrew update # required in more ways than you think (initialises the brew git repository if you don't already have it)\ncd \"$(brew --repository homebrew/core)\"\n# Create a new git branch for your formula so your pull request is easy to\n# modify if any changes come up during review.\ngit checkout -b <some-descriptive-name> origin/master\ngit add Formula/foo.rb\ngit commit\n```\n\nThe established standard for Git commit messages is:\n\n- the first line is a commit summary of *50 characters or less*\n- two (2) newlines, then\n- explain the commit thoroughly.\n\nAt Homebrew, we like to put the name of the formula up front like so: `foobar 7.3 (new formula)`. This may seem crazy short, but you’ll find that forcing yourself to summarise the commit encourages you to be atomic and concise. If you can’t summarise it in 50-80 characters, you’re probably trying to commit two commits as one. For a more thorough explanation, please read Tim Pope’s excellent blog post, [A Note About Git Commit Messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n\nThe preferred commit message format for simple version updates is `foobar 7.3` and for fixes is `foobar: fix flibble matrix.`.\n\nEnsure you reference any relevant GitHub issue, e.g. `Closes #12345` in the commit message. Homebrew’s history is the first thing future contributors will look to when trying to understand the current state of formulae they’re interested in.\n\n### Push\n\nNow you just need to push your commit to GitHub.\n\nIf you haven’t forked Homebrew yet, [go to the `homebrew-core` repository and hit the Fork button](https://github.com/Homebrew/homebrew-core).\n\nIf you have already forked Homebrew on GitHub, then you can manually push (just make sure you have been pulling from the `Homebrew/homebrew-core` master):\n\n``` bash\ngit push https://github.com/myname/homebrew-core/ <what-you-called-your-branch>\n```\n\nNow, [open a pull request](how-to-open-a-homebrew-pull-request) for your changes.\n\n- One formula per commit; one commit per formula.\n- Keep merge commits out of the pull request.\n\n## Convenience tools\n\n### Messaging\n\nThree commands are provided for displaying informational messages to the user:\n\n- `ohai` for general info\n- `opoo` for warning messages\n- `odie` for error messages and immediately exiting\n\nUse `odie` when you need to exit a formula gracefully for any reason. For example:\n\n``` ruby\nif build.head?\n  lib_jar = Dir[\"cfr-*-SNAPSHOT.jar\"]\n  doc_jar = Dir[\"cfr-*-SNAPSHOT-javadoc.jar\"]\n  odie \"Unexpected number of artifacts!\" if (lib_jar.length != 1) || (doc_jar.length != 1)\nend\n```\n\n### `bin.install \"foo\"`\n\nYou’ll see stuff like this in some formulae. This moves the file `foo` into the formula’s `bin` directory (`/usr/local/Cellar/pkg/0.1/bin`) and makes it executable (`chmod 0555 foo`).\n\nYou can also rename the file during the installation process. This can be useful for adding a prefix to binaries that would otherwise cause conflicts with another formula, or for removing a file extension. For example, to install `foo.py` into the formula’s `bin` directory (`/usr/local/Cellar/pkg/0.1/bin`) as just `foo` instead of `foo.py`:\n\n``` ruby\nbin.install \"foo.py\" => \"foo\"\n```\n\n### `inreplace`\n\n[`inreplace`](https://rubydoc.brew.sh/Utils/Inreplace) is a convenience function that can edit files in-place. For example:\n\n``` ruby\ninreplace \"path\", before, after\n```\n\n`before` and `after` can be strings or regular expressions. You should use the block form if you need to make multiple replacements in a file:\n\n``` ruby\ninreplace \"path\" do |s|\n  s.gsub!(/foo/, \"bar\")\n  s.gsub! \"123\", \"456\"\nend\n```\n\nMake sure you modify `s`! This block ignores the returned value.\n\n[`inreplace`](https://rubydoc.brew.sh/Utils/Inreplace) should be used instead of patches when patching something that will never be accepted upstream, e.g. making the software’s build system respect Homebrew’s installation hierarchy. If it’s something that affects both Homebrew and MacPorts (i.e. macOS specific) it should be turned into an upstream submitted patch instead.\n\nIf you need modify variables in a `Makefile`, rather than using [`inreplace`](https://rubydoc.brew.sh/Utils/Inreplace), pass them as arguments to `make`:\n\n``` ruby\nsystem \"make\", \"target\", \"VAR2=value1\", \"VAR2=value2\", \"VAR3=values can have spaces\"\n```\n\n``` ruby\nsystem \"make\", \"CC=#{ENV.cc}\", \"PREFIX=#{prefix}\"\n```\n\nNote that values *can* contain unescaped spaces if you use the multiple-argument form of `system`.\n\n## Patches\n\nWhile [`patch`](https://rubydoc.brew.sh/Formula#patch-class_method)es should generally be avoided, sometimes they are temporarily necessary.\n\nWhen [`patch`](https://rubydoc.brew.sh/Formula#patch-class_method)ing (i.e. fixing header file inclusion, fixing compiler warnings, etc.) the first thing to do is check whether or not the upstream project is aware of the issue. If not, file a bug report and/or submit your patch for inclusion. We may sometimes still accept your patch before it was submitted upstream but by getting the ball rolling on fixing the upstream issue you reduce the length of time we have to carry the patch around.\n\n*Always justify a [`patch`](https://rubydoc.brew.sh/Formula#patch-class_method) with a code comment!* Otherwise, nobody will know when it is safe to remove the patch, or safe to leave it in when updating the formula. The comment should include a link to the relevant upstream issue(s).\n\nExternal [`patch`](https://rubydoc.brew.sh/Formula#patch-class_method)es can be declared using resource-style blocks:\n\n``` ruby\npatch do\n  url \"https://example.com/example_patch.diff\"\n  sha256 \"85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7\"\nend\n```\n\nA strip level of `-p1` is assumed. It can be overridden using a symbol argument:\n\n``` ruby\npatch :p0 do\n  url \"https://example.com/example_patch.diff\"\n  sha256 \"85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7\"\nend\n```\n\n[`patch`](https://rubydoc.brew.sh/Formula#patch-class_method)es can be declared in [`stable`](https://rubydoc.brew.sh/Formula#stable-class_method) and [`head`](https://rubydoc.brew.sh/Formula#head-class_method) blocks. Always use a block instead of a conditional, i.e. `stable do ... end` instead of `if build.stable? then ... end`.\n\n``` ruby\nstable do\n  # some other things...\n\n  patch do\n    url \"https://example.com/example_patch.diff\"\n    sha256 \"85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7\"\n  end\nend\n```\n\nEmbedded (**END**) patches can be declared like so:\n\n``` ruby\npatch :DATA\npatch :p0, :DATA\n```\n\nwith the patch data included at the end of the file:\n\n``` plaintext\n__END__\ndiff --git a/foo/showfigfonts b/foo/showfigfonts\nindex 643c60b..543379c 100644\n--- a/foo/showfigfonts\n+++ b/foo/showfigfonts\n@@ -14,6 +14,7 @@\n…\n```\n\nPatches can also be embedded by passing a string. This makes it possible to provide multiple embedded patches while making only some of them conditional.\n\n``` ruby\npatch :p0, \"...\"\n```\n\nIn embedded patches, the string “HOMEBREW_PREFIX” is replaced with the value of the constant `HOMEBREW_PREFIX` before the patch is applied.\n\n### Creating the diff\n\n``` bash\nbrew install --interactive --git foo\n# (make some edits)\ngit diff | pbcopy\nbrew edit foo\n```\n\nNow just paste into the formula after `__END__`. Instead of `git diff | pbcopy`, for some editors `git diff >> path/to/your/formula/foo.rb` might help you ensure that the patch is not touched, e.g. white space removal, indentation changes, etc.\n\n## Advanced formula tricks\n\nIf anything isn’t clear, you can usually figure it out by `grep`ping the `$(brew --repository homebrew/core)` directory. Please submit a pull request to amend this document if you think it will help!\n\n### Handling different system configurations\n\nOften, formulae need different dependencies, resources, patches, conflicts, deprecations or `keg_only` statuses on different OSes and arches. In these cases, the components can be nested inside `on_macos`, `on_linux`, `on_arm` or `on_intel` blocks. For example, here’s how to add `gcc` as a Linux-only dependency:\n\n``` ruby\non_linux do\n  depends_on \"gcc\"\nend\n```\n\nComponents can also be declared for specific macOS versions or version ranges. For example, to declare a dependency only on High Sierra, nest the `depends_on` call inside an `on_high_sierra` block. Add an `:or_older` or `:or_newer` parameter to the `on_high_sierra` method to add the dependency to all macOS versions that meet the condition. For example, to add `gettext` as a build dependency on Mojave and all later macOS versions, use:\n\n``` ruby\non_mojave :or_newer do\n  depends_on \"gettext\" => :build\nend\n```\n\nSometimes, a dependency is needed on certain macOS versions *and* on Linux. In these cases, a special `on_system` method can be used:\n\n``` ruby\non_system :linux, macos: :sierra_or_older do\n  depends_on \"gettext\" => :build\nend\n```\n\nTo check multiple conditions, nest the corresponding blocks. For example, the following code adds a `gettext` build dependency when on ARM *and* macOS:\n\n``` ruby\non_macos do\n  on_arm do\n    depends_on \"gettext\" => :build\n  end\nend\n```\n\n#### Inside `def install` and `test do`\n\nInside `def install` and `test do`, don’t use these `on_*` methods. Instead, use `if` statements and the following conditionals:\n\n- `OS.mac?` and `OS.linux?` return `true` or `false` based on the OS\n- `Hardware::CPU.intel?` and `Hardware::CPU.arm?` return `true` or `false` based on the arch\n- `MacOS.version` returns the current macOS version. Use `==`, `<=` or `>=` to compare to symbols corresponding to macOS versions (e.g. `if MacOS.version >= :mojave`)\n\nSee [`rust`](https://github.com/Homebrew/homebrew-core/blob/fe831237a7c24033a48f588a1578ba54f953f922/Formula/rust.rb#L72) for an example.\n\n### `livecheck` blocks\n\nWhen `brew livecheck` is unable to identify versions for a formula, we can control its behavior using a `livecheck` block. Here is a simple example to check a page for links containing a filename like `example-1.2.tar.gz`:\n\n``` ruby\nlivecheck do\n  url \"https://www.example.com/downloads/\"\n  regex(/href=.*?example[._-]v?(\\d+(?:\\.\\d+)+)\\.t/i)\nend\n```\n\nFor `url`/`regex` guidelines and additional `livecheck` block examples, refer to the [`brew livecheck` documentation](brew-livecheck). For more technical information on the methods used in a `livecheck` block, please refer to the [`Livecheck` class documentation](https://rubydoc.brew.sh/Livecheck.html).\n\n### Unstable versions (`head`)\n\nFormulae can specify an alternate download for the upstream project’s [`head`](https://rubydoc.brew.sh/Formula#head-class_method) (`master`/`trunk`).\n\n#### `head`\n\n[`head`](https://rubydoc.brew.sh/Formula#head-class_method) URLs (activated by passing `--HEAD`) build the development cutting edge. Specifying it is easy:\n\n``` ruby\nclass Foo < Formula\n  head \"https://github.com/mxcl/lastfm-cocoa.git\"\nend\n```\n\nHomebrew understands `git`, `svn`, and `hg` URLs, and has a way to specify `cvs` repositories as a URL as well. You can test whether the [`head`](https://rubydoc.brew.sh/Formula#head-class_method) is being built with `build.head?`.\n\nTo use a specific commit, tag, or branch from a repository, specify [`head`](https://rubydoc.brew.sh/Formula#head-class_method) with the `:tag` and `:revision`, `:revision`, or `:branch` option, like so:\n\n``` ruby\nclass Foo < Formula\n  head \"https://github.com/some/package.git\", revision: \"090930930295adslfknsdfsdaffnasd13\"\n                                         # or branch: \"main\" (the default is \"master\")\n                                         # or tag: \"1_0_release\", revision: \"090930930295adslfknsdfsdaffnasd13\"\nend\n```\n\n### Compiler selection\n\nSometimes a package fails to build when using a certain compiler. Since recent [Xcode versions](xcode) no longer include a GCC compiler we cannot simply force the use of GCC. Instead, the correct way to declare this is the [`fails_with`](https://rubydoc.brew.sh/Formula#fails_with-class_method) DSL method. A properly constructed [`fails_with`](https://rubydoc.brew.sh/Formula#fails_with-class_method) block documents the latest compiler build version known to cause compilation to fail, and the cause of the failure. For example:\n\n``` ruby\nfails_with :clang do\n  build 211\n  cause \"Miscompilation resulting in segfault on queries\"\nend\n```\n\n`build` takes a Fixnum (an integer; you can find this number in your `brew --config` output). `cause` takes a String, and the use of heredocs is encouraged to improve readability and allow for more comprehensive documentation.\n\n[`fails_with`](https://rubydoc.brew.sh/Formula#fails_with-class_method) declarations can be used with any of `:gcc`, `:llvm`, and `:clang`. Homebrew will use this information to select a working compiler (if one is available).\n\n### Specifying the download strategy explicitly\n\nTo use one of Homebrew’s built-in download strategies, specify the `:using =>` flag on a [`url`](https://rubydoc.brew.sh/Formula#url-class_method) or [`head`](https://rubydoc.brew.sh/Formula#head-class_method). For example:\n\n``` ruby\nclass Python3 < Formula\n  homepage \"https://www.python.org/\"\n  url \"https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tar.xz\"\n  sha256 \"b5b3963533768d5fc325a4d7a6bd6f666726002d696f1d399ec06b043ea996b8\"\n  head \"https://hg.python.org/cpython\", :using => :hg\n```\n\nHomebrew offers anonymous download strategies.\n\n| `:using` value | download strategy             |\n|----------------|-------------------------------|\n| `:bzr`         | `BazaarDownloadStrategy`      |\n| `:curl`        | `CurlDownloadStrategy`        |\n| `:cvs`         | `CVSDownloadStrategy`         |\n| `:fossil`      | `FossilDownloadStrategy`      |\n| `:git`         | `GitDownloadStrategy`         |\n| `:hg`          | `MercurialDownloadStrategy`   |\n| `:nounzip`     | `NoUnzipCurlDownloadStrategy` |\n| `:post`        | `CurlPostDownloadStrategy`    |\n| `:svn`         | `SubversionDownloadStrategy`  |\n\nIf you need more control over the way files are downloaded and staged, you can create a custom download strategy and specify it using the [`url`](https://rubydoc.brew.sh/Formula#url-class_method) method’s `:using` option:\n\n``` ruby\nclass MyDownloadStrategy < SomeHomebrewDownloadStrategy\n  def fetch(timeout: nil, **options)\n    opoo \"Unhandled options in #{self.class}#fetch: #{options.keys.join(\", \")}\" unless options.empty?\n\n    # downloads output to `temporary_path`\n  end\nend\n\nclass Foo < Formula\n  url \"something\", :using => MyDownloadStrategy\nend\n```\n\n### Just moving some files\n\nWhen your code in the install function is run, the current working directory is set to the extracted tarball.\n\nSo it is easy to just move some files:\n\n``` ruby\nprefix.install \"file1\", \"file2\"\n```\n\nOr everything:\n\n``` ruby\nprefix.install Dir[\"output/*\"]\n```\n\nGenerally we’d rather you were specific about what files or directories need to be installed rather than installing everything.\n\n#### Variables for directory locations\n\n| Name                  | Default                                        | Example                                                     |\n|-----------------------|------------------------------------------------|-------------------------------------------------------------|\n| **`HOMEBREW_PREFIX`** | `/usr/local`                                   |                                                             |\n| **`prefix`**          | `#{HOMEBREW_PREFIX}/Cellar/#{name}/#{version}` | `/usr/local/Cellar/foo/0.1`                                 |\n| **`opt_prefix`**      | `#{HOMEBREW_PREFIX}/opt/#{name}`               | `/usr/local/opt/foo`                                        |\n| **`bin`**             | `#{prefix}/bin`                                | `/usr/local/Cellar/foo/0.1/bin`                             |\n| **`doc`**             | `#{prefix}/share/doc/#{name}`                  | `/usr/local/Cellar/foo/0.1/share/doc/foo`                   |\n| **`include`**         | `#{prefix}/include`                            | `/usr/local/Cellar/foo/0.1/include`                         |\n| **`info`**            | `#{prefix}/share/info`                         | `/usr/local/Cellar/foo/0.1/share/info`                      |\n| **`lib`**             | `#{prefix}/lib`                                | `/usr/local/Cellar/foo/0.1/lib`                             |\n| **`libexec`**         | `#{prefix}/libexec`                            | `/usr/local/Cellar/foo/0.1/libexec`                         |\n| **`man`**             | `#{prefix}/share/man`                          | `/usr/local/Cellar/foo/0.1/share/man`                       |\n| **`man[1-8]`**        | `#{prefix}/share/man/man[1-8]`                 | `/usr/local/Cellar/foo/0.1/share/man/man[1-8]`              |\n| **`sbin`**            | `#{prefix}/sbin`                               | `/usr/local/Cellar/foo/0.1/sbin`                            |\n| **`share`**           | `#{prefix}/share`                              | `/usr/local/Cellar/foo/0.1/share`                           |\n| **`pkgshare`**        | `#{prefix}/share/#{name}`                      | `/usr/local/Cellar/foo/0.1/share/foo`                       |\n| **`elisp`**           | `#{prefix}/share/emacs/site-lisp/#{name}`      | `/usr/local/Cellar/foo/0.1/share/emacs/site-lisp/foo`       |\n| **`frameworks`**      | `#{prefix}/Frameworks`                         | `/usr/local/Cellar/foo/0.1/Frameworks`                      |\n| **`kext_prefix`**     | `#{prefix}/Library/Extensions`                 | `/usr/local/Cellar/foo/0.1/Library/Extensions`              |\n| **`zsh_function`**    | `#{prefix}/share/zsh/site-functions`           | `/usr/local/Cellar/foo/0.1/share/zsh/site-functions`        |\n| **`fish_function`**   | `#{prefix}/share/fish/vendor_functions`        | `/usr/local/Cellar/foo/0.1/share/fish/vendor_functions`     |\n| **`bash_completion`** | `#{prefix}/etc/bash_completion.d`              | `/usr/local/Cellar/foo/0.1/etc/bash_completion.d`           |\n| **`zsh_completion`**  | `#{prefix}/share/zsh/site-functions`           | `/usr/local/Cellar/foo/0.1/share/zsh/site-functions`        |\n| **`fish_completion`** | `#{prefix}/share/fish/vendor_completions.d`    | `/usr/local/Cellar/foo/0.1/share/fish/vendor_completions.d` |\n| **`etc`**             | `#{HOMEBREW_PREFIX}/etc`                       | `/usr/local/etc`                                            |\n| **`pkgetc`**          | `#{HOMEBREW_PREFIX}/etc/#{name}`               | `/usr/local/etc/foo`                                        |\n| **`var`**             | `#{HOMEBREW_PREFIX}/var`                       | `/usr/local/var`                                            |\n| **`buildpath`**       | A temporary directory somewhere on your system | `/private/tmp/[formula-name]-0q2b/[formula-name]`           |\n\nThese can be used, for instance, in code such as\n\n``` ruby\nbin.install Dir[\"output/*\"]\n```\n\nto move binaries into their correct location into the Cellar, and\n\n``` ruby\nman.mkpath\n```\n\nto create the directory structure for the manual page location.\n\nTo install man pages into specific locations, use `man1.install \"foo.1\", \"bar.1\"`, `man2.install \"foo.2\"`, etc.\n\nNote that in the context of Homebrew, [`libexec`](https://rubydoc.brew.sh/Formula#libexec-instance_method) is reserved for private use by the formula and therefore is not symlinked into `HOMEBREW_PREFIX`.\n\n### Adding optional steps\n\n**Note:** [`option`](https://rubydoc.brew.sh/Formula#option-class_method)s are not allowed in Homebrew/homebrew-core as they are not tested by CI.\n\nIf you want to add an [`option`](https://rubydoc.brew.sh/Formula#option-class_method):\n\n``` ruby\nclass Yourformula < Formula\n  ...\n  option \"with-ham\", \"Description of the option\"\n  option \"without-spam\", \"Another description\"\n\n  depends_on \"foo\" => :optional  # will automatically add a with-foo option\n  ...\n```\n\nAnd then to define the effects the [`option`](https://rubydoc.brew.sh/Formula#option-class_method)s have:\n\n``` ruby\nif build.with? \"ham\"\n  # note, no \"with\" in the option name (it is added by the build.with? method)\nend\n\nif build.without? \"ham\"\n  # works as you'd expect. True if `--without-ham` was given.\nend\n```\n\n[`option`](https://rubydoc.brew.sh/Formula#option-class_method) names should be prefixed with the words `with` or `without`. For example, an option to run a test suite should be named `--with-test` or `--with-check` rather than `--test`, and an option to enable a shared library `--with-shared` rather than `--shared` or `--enable-shared`.\n\n[`option`](https://rubydoc.brew.sh/Formula#option-class_method)s that aren’t `build.with? ` or `build.without?` should be deprecated with [`deprecated_option`](https://rubydoc.brew.sh/Formula#deprecated_option-class_method). See [`wget`](https://github.com/Homebrew/homebrew-core/blob/3f762b63c6fbbd49191ffdf58574d7e18937d93f/Formula/wget.rb#L27-L31) for an example.\n\n### File level operations\n\nYou can use the file utilities provided by Ruby’s [`FileUtils`](https://www.ruby-doc.org/stdlib/libdoc/fileutils/rdoc/index.html). These are included in the [`Formula`](https://rubydoc.brew.sh/Formula) class, so you do not need the `FileUtils.` prefix to use them.\n\nWhen creating symlinks, take special care to ensure they are *relative* symlinks. This makes it easier to create a relocatable bottle. For example, to create a symlink in `bin` to an executable in `libexec`, use\n\n``` ruby\nbin.install_symlink libexec/\"name\"\n```\n\ninstead of:\n\n``` ruby\nln_s libexec/\"name\", bin\n```\n\nThe symlinks created by [`install_symlink`](https://rubydoc.brew.sh/Pathname#install_symlink-instance_method) are guaranteed to be relative. `ln_s` will only produce a relative symlink when given a relative path.\n\n### Rewriting a script shebang\n\nSome formulae install executable scripts written in an interpreted language such as Python or Perl. Homebrew provides a `rewrite_shebang` method to rewrite the shebang of a script. This replaces a script’s original interpreter path with the one the formula depends on. This guarantees that the correct interpreter is used at execution time. This isn’t required if the build system already handles it (e.g. often with `pip` or Perl `ExtUtils::MakeMaker`).\n\nFor example, the [`icdiff` formula](https://github.com/Homebrew/homebrew-core/blob/7beae5ab57c65249403699b2b0700fbccf14e6cb/Formula/icdiff.rb#L16) uses such utility. Note that it is necessary to include the utility in the formula, for example with Python one must use `include Language::Python::Shebang`.\n\n### Handling files that should persist over formula upgrades\n\nFor example, Ruby 1.9’s gems should be installed to `var/lib/ruby/` so that gems don’t need to be reinstalled when upgrading Ruby. You can usually do this with symlink trickery, or (ideally) a configure option.\n\nAnother example would be configuration files that should not be overwritten on package upgrades. If after installation you find that to-be-persisted configuration files are not copied but instead *symlinked* into `/usr/local/etc/` from the Cellar, this can often be rectified by passing an appropriate argument to the package’s configure script. That argument will vary depending on a given package’s configure script and/or Makefile, but one example might be: `--sysconfdir=#{etc}`\n\n### Service files\n\nThere are two ways to add plists and systemd services to a formula, so that [`brew services`](https://github.com/Homebrew/homebrew-services) can pick it up:\n\n1.  If the formula already provides a file the formula can install it into the prefix like so.\n\n``` ruby\nprefix.install_symlink \"file.plist\" => \"#{plist_name}.plist\"\nprefix.install_symlink \"file.service\" => \"#{service_name}.service\"\n```\n\n1.  If the formula does not provide a service you can generate one using the following stanza.\n\n    ``` rb\n    service do\n      run bin/\"script\"\n    end\n    ```\n\n#### Service block methods\n\nThere are many more options you can set within such a block, and in this table you will find them all. The only required field in a `service` block is the `run` field to indicate what to run.\n\n| Method                  | Default      | macOS | Linux | Description                                                                              |\n|-------------------------|--------------|-------|-------|------------------------------------------------------------------------------------------|\n| `run`                   | \\-           | yes   | yes   | Command to execute, an array with arguments or a path                                    |\n| `run_type`              | `:immediate` | yes   | yes   | The type of service, `:immediate`, `:interval` or `:cron`                                |\n| `keep_alive`            | `false`      | yes   | yes   | If the service needs to keep the process running after exit                              |\n| `interval`              | \\-           | yes   | yes   | Controls the start interval, required for the `:interval` type                           |\n| `cron`                  | \\-           | yes   | yes   | Controls the trigger times, required for the `:cron` type                                |\n| `launch_only_once`      | false        | yes   | yes   | If the command should only run once                                                      |\n| `environment_variables` | \\-           | yes   | yes   | A hash of variables to set                                                               |\n| `working_dir`           | \\-           | yes   | yes   | The directory to operate from                                                            |\n| `root_dir`              | \\-           | yes   | yes   | The directory to use as a chroot for the process                                         |\n| `input_path`            | \\-           | yes   | yes   | Path to use as input for the process                                                     |\n| `log_path`              | \\-           | yes   | yes   | Path to write stdout to                                                                  |\n| `error_log_path`        | \\-           | yes   | yes   | Path to write stderr to                                                                  |\n| `restart_delay`         | \\-           | yes   | yes   | The delay before restarting a process                                                    |\n| `process_type`          | \\-           | yes   | no-op | The type of process to manage, `:background`, `:standard`, `:interactive` or `:adaptive` |\n| `macos_legacy_timers`   | \\-           | yes   | no-op | Timers created by launchd jobs are coalesced unless this is set                          |\n| `sockets`               | \\-           | yes   | no-op | A socket that is created as an accesspoint to the service                                |\n\nFor services that start and keep running alive you can use the default `run_type :` like so:\n\n``` ruby\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    keep_alive true\n    run_type :immediate # This should be omitted since it's the default\n  end\n```\n\nIf a service needs to run on an interval, use `run_type :interval` and specify an interval:\n\n``` ruby\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    run_type :interval\n    interval 500\n  end\n```\n\nIf a service needs to run at certain times, use `run_type :cron` and specify a time with the crontab syntax:\n\n``` ruby\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    run_type :cron\n    cron \"5 * * * *\"\n  end\n```\n\nFor environment variables you can specify a hash. For the path there is the helper method `std_service_path_env`. This method will set the path to `#{HOMEBREW_PREFIX}/bin:#{HOMEBREW_PREFIX}/sbin:/usr/bin:/bin:/usr/sbin:/sbin` so the service can find other `brew` commands.\n\n``` rb\nservice do\n    run opt_bin/\"beanstalkd\"\n    environment_variables PATH: std_service_path_env\n  end\n```\n\n#### KeepAlive options\n\nThe standard options, keep alive regardless of any status or circomstances\n\n``` rb\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    keep_alive true # or false\n  end\n```\n\nSame as above in hash form\n\n``` rb\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    keep_alive { always: true }\n  end\n```\n\nKeep alive until the job exits with a non-zero return code\n\n``` rb\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    keep_alive { succesful_exit: true }\n  end\n```\n\nKeep alive only if the job crashed\n\n``` rb\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    keep_alive { crashed: true }\n  end\n```\n\nKeep alive as long as a file exists\n\n``` rb\nservice do\n    run [opt_bin/\"beanstalkd\", \"test\"]\n    keep_alive { path: \"/some/path\" }\n  end\n```\n\n#### Socket format\n\nThe sockets method accepts a formatted socket definition as `<type>://<host>:<port>`.\n\n- `type`: `udp` or `tcp`\n- `host`: The host to run the socket on. For example `0.0.0.0`\n- `port`: The port the socket should listen on.\n\nPlease note that sockets will be accessible on IPv4 and IPv6 addresses by default.\n\n### Using environment variables\n\nHomebrew has multiple levels of environment variable filtering which affects variables available to formulae.\n\nFirstly, the overall environment in which Homebrew runs is filtered to avoid environment contamination breaking from-source builds (<https://github.com/Homebrew/brew/issues/932>). In particular, this process filters all but the given whitelisted variables, but allows environment variables prefixed with `HOMEBREW_`. The specific implementation can be seen in [`bin/brew`](https://github.com/Homebrew/brew/blob/HEAD/bin/brew).\n\nThe second level of filtering removes sensitive environment variables (such as credentials like keys, passwords or tokens) to avoid malicious subprocesses obtaining them (<https://github.com/Homebrew/brew/pull/2524>). This has the effect of preventing any such variables from reaching a formula’s Ruby code as they are filtered before it is called. The specific implementation can be seen in the [`ENV.clear_sensitive_environment!` method](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/extend/ENV.rb).\n\nYou can set environment variables in a formula’s `install` method using `ENV[\"VARIABLE_NAME\"] = \"VALUE\"`. An example can be seen in [the `gh` formula](https://github.com/Homebrew/homebrew-core/blob/fd9ad29f8e3ca9476f838ebb13794ddb7dafba00/Formula/gh.rb#L22). Environment variables can also be set temporarily using the `with_env` method; any variables defined in the call to that method will be restored to their original values at the end of the block. An example can be seen in [the `csound` formula](https://github.com/Homebrew/homebrew-core/blob/c3feaff8cdb578331385676620c865796cfc3388/Formula/csound.rb#L155-L157).\n\nIn summary, environment variables used by a formula need to conform to these filtering rules in order to be available.\n\n### Deprecating and disabling a formula\n\nSee our [Deprecating, Disabling, and Removing Formulae](deprecating-disabling-and-removing-formulae) documentation for more information about how and when to deprecate or disable a formula.\n\n## Updating formulae\n\nEventually a new version of the software will be released. In this case you should update the [`url`](https://rubydoc.brew.sh/Formula#url-class_method) and [`sha256`](https://rubydoc.brew.sh/Formula#sha256%3D-class_method). You can use:\n\n``` bash\nbrew bump-formula-pr foo\n```\n\nIf a [`revision`](https://rubydoc.brew.sh/Formula#revision%3D-class_method) line exists outside any `bottle do` block it should be removed.\n\nLeave the `bottle do ... end` block as-is; our CI system will update it when we pull your change.\n\nCheck if the formula you are updating is a dependency for any other formulae by running `brew uses <formula>`. If it is a dependency, run `brew reinstall` for all the dependencies after it is installed and verify they work correctly.\n\n## Style guide\n\nHomebrew wants to maintain a consistent Ruby style across all formulae mostly based on [Ruby Style Guide](https://github.com/rubocop-hq/ruby-style-guide#the-ruby-style-guide). Other formulae may not have been updated to match this guide yet but all new ones should. Also:\n\n- The order of methods in a formula should be consistent with other formulae (e.g.: `def install` goes before `def post_install`).\n- An empty line is required before the `__END__` line.\n\n## Troubleshooting for people writing new formulae\n\n### Version detection fails\n\nHomebrew tries to automatically determine the [`version`](https://rubydoc.brew.sh/Formula#version-class_method) from the [`url`](https://rubydoc.brew.sh/Formula#url-class_method) to avoid duplication. If the tarball has an unusual name you may need to manually assign the [`version`](https://rubydoc.brew.sh/Formula#version-class_method).\n\n### Bad makefiles\n\nNot all projects have makefiles that will run in parallel so try to deparallelize by adding these lines to the `install` method:\n\n``` ruby\nENV.deparallelize\nsystem \"make\"  # separate make and make install steps\nsystem \"make\", \"install\"\n```\n\nIf that fixes it, please open an [issue](https://github.com/Homebrew/homebrew-core/issues) so that we can fix it for everyone.\n\n### Still won’t work?\n\nCheck out what MacPorts and Fink do:\n\n``` bash\nbrew search --macports foo\nbrew search --fink foo\n```\n\n## Superenv notes\n\n`superenv` is our “super environment” that isolates builds by removing `/usr/local/bin` and all user `PATH`s that are not essential for the build. It does this because user `PATH`s are often full of stuff that breaks builds. `superenv` also removes bad flags from the commands passed to `clang`/`gcc` and injects others (for example all [`keg_only`](https://rubydoc.brew.sh/Formula#keg_only-class_method) dependencies are added to the `-I` and `-L` flags).\n\n## Fortran\n\nSome software requires a Fortran compiler. This can be declared by adding `depends_on \"gcc\"` to a formula.\n\n## MPI\n\nFormula requiring MPI should use [OpenMPI](https://www.open-mpi.org/) by adding `depends_on \"open-mpi\"` to the formula, rather than [MPICH](https://www.mpich.org/). These packages have conflicts and provide the same standardised interfaces. Choosing a default implementation and requiring it to be adopted allows software to link against multiple libraries that rely on MPI without creating un-anticipated incompatibilities due to differing MPI runtimes.\n\n## Linear algebra libraries\n\nBy default packages that require BLAS/LAPACK linear algebra interfaces should link to [OpenBLAS](https://www.openblas.net/) using `depends_on \"openblas\"` and passing `-DBLA_VENDOR=OpenBLAS` to CMake (applies to CMake based formula only) rather than Apple’s Accelerate framework, or the default reference lapack implementation. Apple’s implementation of BLAS/LAPACK is outdated and may introduce hard-to-debug problems. The reference `lapack` formula is fine, although it is not actively maintained or tuned. For this reason, formulae needing BLAS/LAPACK should link with OpenBLAS.\n\n## How to start over (reset to upstream `master`)\n\nHave you created a real mess in Git which stops you from creating a commit you want to submit to us? You might want to consider starting again from scratch. Your changes can be reset to the Homebrew `master` branch by running:\n\n``` bash\ngit checkout -f master\ngit reset --hard origin/master\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Formula-Cookbook](https://docs.brew.sh/Formula-Cookbook)"
- name: Gems, Eggs and Perl Modules
  id: gems,-eggs-and-perl-modules
  summary: 'You need sudo to install to these like so: sudo gem install, sudo easy_install or sudo cpan -i'
  description: "# Gems, Eggs and Perl Modules\n\nOn a fresh macOS installation there are three empty directories for add-ons available to all users:\n\n- `/Library/Ruby`\n- `/Library/Python`\n- `/Library/Perl`\n\nYou need sudo to install to these like so: `sudo gem install`, `sudo easy_install` or `sudo cpan -i`.\n\n## Python packages (eggs) without sudo using system Python\n\nAn option to avoid sudo is to use an access control list. For example:\n\n``` bash\nchmod +a 'user:<YOUR_NAME_HERE> allow add_subdirectory,add_file,delete_child,directory_inherit' /Library/Python/3.y/site-packages\n```\n\nwill let you add packages to Python 3.y as yourself, which is probably safer than changing the group ownership of the directory.\n\n### So why was I using sudo?\n\nHabit maybe?\n\nOne reason is executables go in `/usr/local/bin`. Usually this isn’t a writable location. But if you installed Homebrew as we recommend on macOS Intel, `/usr/local` will be writable without sudo. So now you are good to install the development tools you need without risking the use of sudo.\n\n### An alternative package path\n\n*This is only recommended if you **don’t** use a brewed Python.*\n\nOn macOS, any Python version X.Y [also searches in `~/Library/Python/X.Y/lib/python/site-packages` for modules](https://docs.python.org/2/install/index.html#alternate-installation-the-user-scheme). That path might not yet exist, but you can create it:\n\n``` bash\nmkdir -p ~/Library/Python/2.7/lib/python/site-packages\n```\n\nTo teach `easy_install` and `pip` to install there, either use the `--user` switch or create a `~/.pydistutils.cfg` file with the following content:\n\n``` plaintext\n[install]\ninstall_lib = ~/Library/Python/$py_version_short/lib/python/site-packages\n```\n\n### Using virtualenv (with system Python)\n\n[Virtualenv](https://virtualenv.pypa.io/) ships `pip` and creates isolated Python environments with separate `site-packages`, which therefore don’t need sudo.\n\n## Rubygems without sudo\n\n*This is only recommended if you **don’t** use rbenv or RVM.*\n\nBrewed Ruby installs executables to `$(brew --prefix)/opt/ruby/bin` without sudo. You should add this to your path. See the caveats in the `ruby` formula for up-to-date information.\n\n### With system Ruby\n\nTo make Ruby install to `/usr/local`, we need to add `gem: -n/usr/local/bin` to your `~/.gemrc`. It’s YAML, so do it manually or use this:\n\n``` bash\necho \"gem: -n/usr/local/bin\" >> ~/.gemrc\n```\n\n**However, all versions of RubyGems before 1.3.6 are buggy** and ignore the above setting. Sadly a fresh install of Snow Leopard comes with 1.3.5. Currently the only known way to get around this is to upgrade rubygems as root:\n\n``` bash\nsudo gem update --system\n```\n\n### An alternative gem path\n\nJust install everything into the Homebrew prefix like this:\n\n``` bash\necho \"export GEM_HOME=\\\"$(brew --prefix)\\\"\" >> ~/.bashrc\n```\n\n### It doesn’t work! I get some “permissions” error when I try to install stuff!\n\n*Note that you may not want to do this, since Apple has decided it is not a good default.*\n\nIf you ever did a `sudo gem`, etc. before then a lot of files will have been created owned by root. Fix with:\n\n``` bash\nsudo chown -R $(whoami) /Library/Ruby/* /Library/Perl/* /Library/Python/*\n```\n\n## Perl CPAN modules without sudo\n\nThe Perl module `local::lib` works similarly to rbenv/RVM (although for modules only, not Perl installations). A simple solution that only pollutes your `/Library/Perl` a little is to install [`local::lib`](https://metacpan.org/pod/local::lib) with sudo:\n\n``` bash\nsudo cpan local::lib\n```\n\nNote that this will install some other dependencies like `Module::Install`. Then put the appropriate incantation in your shell’s startup, e.g. for `.profile` you’d insert the below; for others see the [`local::lib`](https://metacpan.org/pod/local::lib) docs.\n\n``` bash\neval \"$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)\"\n```\n\nNow (after you restart your shell) `cpan` or `perl -MCPAN -eshell` etc. will install modules and binaries in `~/perl5` and the relevant subdirectories will be in your `PATH` and `PERL5LIB`.\n\n### Avoiding sudo altogether for Perl\n\nIf you don’t even want (or can’t) use sudo for bootstrapping `local::lib`, just manually install `local::lib` in `~/perl5` and add the relevant path to `PERL5LIB` before the `.bashrc` eval incantation.\n\nAnother alternative is to use `perlbrew` to install a separate copy of Perl in your home directory, or wherever you like:\n\n``` bash\ncurl -L https://install.perlbrew.pl | bash\nperlbrew install perl-5.16.2\necho \".~/perl5/perlbrew/etc/bashrc\" >> ~/.bashrc\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Gems,-Eggs-and-Perl-Modules](https://docs.brew.sh/Gems,-Eggs-and-Perl-Modules)"
- name: Homebrew Governance Responsibilities
  id: homebrew-leadership-responsibilities
  summary: © 2009–present Homebrew contributors Licensed under the BSD 2-Clause License
  description: "# Homebrew Governance Responsibilities\n\n## Project Leadership Committee\n\n### PLC Sole Responsibilities\n\n- organising the AGM\n- voting on maintainer hardware grants (before they are purchased)\n- voting on maintainer hackathon/conference/AGM travel expenses (before they are booked)\n- responding to and handling Code of Conduct complaints\n- removing inactive members (that are not maintainers) that did not vote in the AGM\n\n### PLC Shared Responsibilities\n\n- approving Open Collective expenses that are expected or have already been agreed upon by the PLC (e.g. Homebrew cloud usage on a personal credit card) (only one approval needed)\n- blocking abusive GitHub users\n- performing GitHub admin operations on the Homebrew GitHub organisation\n- performing Slack admin operations on the Homebrew Slack\n\n### PLC Dated Yearly Tasks\n\n- January: check membership, announce AGM votes\n  - Ask for nominations for the for the PLC and project leader, and ask who is interested in serving on the TSC\n  - Create ballots for the elections on https://www.opavote.com\n  - Ask the project leader and representatives of the PLC and TSC to prepare reports for the AGM\n  - Ask for members interested in presenting lightning talks at the AGM\n- February: organise the annual general meeting (AGM)\n  - Create a dedicated Slack channel\n  - Book a group dinner (which Homebrew pays for) and check for any dietary requirements\n  - Ask someone to bring a conference/table microphone for people to be able to remotely participate in AGM\n- February after the AGM:\n  - Add the minutes of the AGM to https://github.com/Homebrew/homebrew-governance\n  - Create [issue in homebrew-governance](https://github.com/homebrew/homebrew-governance/issues) to ask members who did not vote in the election whether they wish to remain or step down as members\n    - Members that are not maintainers should be a least one of:\n      - An current or previously active maintainer, PLC/TSC member or Project Leader\n      - A long-standing member of the Homebrew community (e.g. been submitting good bug reports for over two years)\n- October: arrange in-person AGM\n  - Offer to pay for Homebrew maintainers who are at least one of:\n    - active Homebrew maintainers (i.e. not just contributors)\n    - new Homebrew maintainers (i.e. this would be their first AGM)\n    - current members of or running for election for PLC/TSC/Project Leader\n  - Authorise people to book travel\n\n## Project Leader\n\n### PL Sole Responsibilities\n\n- manage all day-to-day technical decisions\n- resolve disputes related to the operation of Homebrew between maintainers, members, other contributors, and users\n- [product management](https://en.wikipedia.org/wiki/Product_management) for the various Homebrew products\n- in February, before the AGM: checking for activity of non-PLC/TSC maintainers and asking them to step down if they have not been active enough in the past 12 months\n\n### PL Shared Responsibilities\n\n- approving new Homebrew maintainers (only one approval needed)\n- approving Open Collective expenses that are expected or have already been agreed upon by the PLC (e.g. Homebrew cloud usage on a personal credit card) (only one approval needed)\n- blocking abusive GitHub users\n- performing GitHub admin operations on the Homebrew GitHub organisation\n- performing Slack admin operations on the Homebrew Slack\n\n## Technical Steering Committee\n\n### TSC Sole Responsibilities\n\n- decide on technical disputes between Homebrew maintainers and the Project Leader\n\n### TSC Shared Responsibilities\n\n- approving new Homebrew maintainers (only one approval needed)\n- blocking abusive GitHub users\n- performing GitHub admin operations on the Homebrew GitHub organisation\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Homebrew-Leadership-Responsibilities](https://docs.brew.sh/Homebrew-Leadership-Responsibilities)"
- name: Homebrew on Linux
  id: homebrew-on-linux
  summary: The Homebrew package manager may be used on Linux and Windows Subsystem for Linux (WSL)
  description: "# Homebrew on Linux\n\nThe Homebrew package manager may be used on Linux and [Windows Subsystem for Linux (WSL)](https://docs.microsoft.com/en-us/windows/wsl/about). Homebrew was formerly referred to as Linuxbrew when running on Linux or WSL. It can be installed in your home directory, in which case it does not use *sudo*. Homebrew does not use any libraries provided by your host system, except *glibc* and *gcc* if they are new enough. Homebrew can install its own current versions of *glibc* and *gcc* for older distributions of Linux.\n\n[Features](#features), [installation instructions](#install) and [requirements](#requirements) are described below. Terminology (e.g. the difference between a Cellar, Tap, Cask and so forth) is [explained in the documentation](formula-cookbook#homebrew-terminology).\n\n## Features\n\n- Can install software to your home directory and so does not require *sudo*\n- Install software not packaged by your host distribution\n- Install up-to-date versions of software when your host distribution is old\n- Use the same package manager to manage your macOS, Linux, and Windows systems\n\n## Install\n\nInstructions for a supported install of Homebrew on Linux are on the [homepage](https://brew.sh).\n\nThe installation script installs Homebrew to `/home/linuxbrew/.linuxbrew` using *sudo* if possible and within your home directory at `~/.linuxbrew` otherwise. Homebrew does not use *sudo* after installation. Using `/home/linuxbrew/.linuxbrew` allows the use of more binary packages (bottles) than installing in your personal home directory.\n\nThe prefix `/home/linuxbrew/.linuxbrew` was chosen so that users without admin access can ask an admin to create a `linuxbrew` role account and still benefit from precompiled binaries. If you do not yourself have admin privileges, consider asking your admin staff to create a `linuxbrew` role account for you with home directory set to `/home/linuxbrew`.\n\nFollow the *Next steps* instructions to add Homebrew to your `PATH` and to your bash shell profile script, either `~/.profile` on Debian/Ubuntu or `~/.bash_profile` on CentOS/Fedora/Red Hat.\n\n``` bash\ntest -d ~/.linuxbrew && eval \"$(~/.linuxbrew/bin/brew shellenv)\"\ntest -d /home/linuxbrew/.linuxbrew && eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\ntest -r ~/.bash_profile && echo \"eval \\\"\\$($(brew --prefix)/bin/brew shellenv)\\\"\" >> ~/.bash_profile\necho \"eval \\\"\\$($(brew --prefix)/bin/brew shellenv)\\\"\" >> ~/.profile\n```\n\nYou’re done! Try installing a package:\n\n``` bash\nbrew install hello\n```\n\nIf you’re using an older distribution of Linux, installing your first package will also install a recent version of *glibc* and *gcc*. Use `brew doctor` to troubleshoot common issues.\n\n## Requirements\n\n- **GCC** 4.7.0 or newer\n- **Linux** 2.6.32 or newer\n- **Glibc** 2.13 or newer\n- **64-bit x86_64** CPU\n\nTo install build tools, paste at a terminal prompt:\n\n- **Debian or Ubuntu**\n\n  ``` bash\n  sudo apt-get install build-essential procps curl file git\n  ```\n\n- **Fedora, CentOS, or Red Hat**\n\n  ``` bash\n  sudo yum groupinstall 'Development Tools'\n  sudo yum install procps-ng curl file git\n  sudo yum install libxcrypt-compat # needed by Fedora 30 and up\n  ```\n\n### ARM\n\nHomebrew can run on 32-bit ARM (Raspberry Pi and others) and 64-bit ARM (AArch64), but no binary packages (bottles) are available. Support for ARM is on a best-effort basis. Pull requests are welcome to improve the experience on ARM platforms.\n\nYou may need to install your own Ruby using your system package manager, a PPA, or `rbenv/ruby-build` as we no longer distribute a Homebrew Portable Ruby for ARM.\n\n### 32-bit x86\n\nHomebrew does not currently support 32-bit x86 platforms. It would be possible for Homebrew to work on 32-bit x86 platforms with some effort. An interested and dedicated person could maintain a fork of Homebrew to develop support for 32-bit x86.\n\n## Homebrew on Linux Community\n\n- [@HomebrewOnLinux on Twitter](https://twitter.com/HomebrewOnLinux)\n- [Homebrew/discussions (forum)](https://github.com/homebrew/discussions/discussions)\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Homebrew-on-Linux](https://docs.brew.sh/Homebrew-on-Linux)"
- name: Homebrew Shell Completion
  id: shell-completion
  summary: Homebrew comes with completion definitions for the brew command
  description: "# Homebrew Shell Completion\n\nHomebrew comes with completion definitions for the `brew` command. Some packages also provide completion definitions for their own programs.\n\n`zsh`, `bash` and `fish` are currently supported.\n\nYou must manually configure your shell to enable its completion support. This is because the Homebrew-managed completions are stored under `HOMEBREW_PREFIX` which your system shell may not be aware of, and since it is difficult to automatically configure `bash` and `zsh` completions in a robust manner, the Homebrew installer does not do it for you.\n\nShell completions for external Homebrew commands are not automatically installed. To opt-in to using completions for external commands (if provided), they need to be linked to `HOMEBREW_PREFIX` by running `brew completions link`.\n\n## Configuring Completions in `bash`\n\nTo make Homebrew’s completions available in `bash`, you must source the definitions as part of your shell’s startup. Add the following to your `~/.bash_profile` (or, if it doesn’t exist, `~/.profile`):\n\n``` bash\nif type brew &>/dev/null\nthen\n  HOMEBREW_PREFIX=\"$(brew --prefix)\"\n  if [[ -r \"${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh\" ]]\n  then\n    source \"${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh\"\n  else\n    for COMPLETION in \"${HOMEBREW_PREFIX}/etc/bash_completion.d/\"*\n    do\n      [[ -r \"${COMPLETION}\" ]] && source \"${COMPLETION}\"\n    done\n  fi\nfi\n```\n\nIf you install the `bash-completion` formula, this will automatically source the completions’ initialisation script (so you do not need to follow the instructions in the formula’s caveats).\n\nIf you are using Homebrew’s `bash` as your shell (i.e. `bash` \\>= v4) you should use the `bash-completion@2` formula instead.\n\n## Configuring Completions in `zsh`\n\nTo make Homebrew’s completions available in `zsh`, you must insert the Homebrew-managed `zsh/site-functions` path into your `FPATH` before initialising `zsh`’s completion facility. Add the following to your `~/.zshrc`:\n\n``` bash\nif type brew &>/dev/null\nthen\n  FPATH=\"$(brew --prefix)/share/zsh/site-functions:${FPATH}\"\n\n  autoload -Uz compinit\n  compinit\nfi\n```\n\nThis must be done before `compinit` is called. Note that if you are using Oh My Zsh, it will call `compinit` for you, so this must be done before you call `oh-my-zsh.sh`. This may be done by appending the following line to your `~/.zprofile` after Homebrew’s initialization, instead of modifying your `~/.zshrc` as above:\n\n``` bash\nFPATH=\"$(brew --prefix)/share/zsh/site-functions:${FPATH}\"\n```\n\nYou may also need to forcibly rebuild `zcompdump`:\n\n``` bash\nrm -f ~/.zcompdump; compinit\n```\n\nAdditionally, if you receive “zsh compinit: insecure directories” warnings when attempting to load these completions, you may need to run this:\n\n``` bash\nchmod -R go-w \"$(brew --prefix)/share\"\n```\n\n## Configuring Completions in `fish`\n\nNo configuration is needed if you’re using Homebrew’s `fish`. Friendly!\n\nIf your `fish` is from somewhere else, add the following to your `~/.config/fish/config.fish`:\n\n``` bash\nif test -d (brew --prefix)\"/share/fish/completions\"\n    set -gx fish_complete_path $fish_complete_path (brew --prefix)/share/fish/completions\nend\n\nif test -d (brew --prefix)\"/share/fish/vendor_completions.d\"\n    set -gx fish_complete_path $fish_complete_path (brew --prefix)/share/fish/vendor_completions.d\nend\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Shell-Completion](https://docs.brew.sh/Shell-Completion)"
- name: How to Build Software Outside Homebrew with Homebrew keg_only Dependencies
  id: how-to-build-software-outside-homebrew-with-homebrew-keg-only-dependencies
  summary: The FAQ briefly explains this
  description: "# How to Build Software Outside Homebrew with Homebrew `keg_only` Dependencies\n\n## What does “keg-only” mean?\n\nThe [FAQ](faq#what-does-keg-only-mean) briefly explains this.\n\nAs an example:\n\n*OpenSSL isn’t symlinked into my `PATH` and non-Homebrew builds can’t find it!*\n\nThis is because Homebrew isolates it within its individual prefix, rather than symlinking to the publicly available location.\n\n## Advice on potential workarounds\n\nA number of people in this situation are either forcefully linking keg-only tools with `brew link --force` or moving default system utilities out of the `PATH` and replacing them with manually created symlinks to the Homebrew-provided tool.\n\n*Please* do not remove macOS native tools and forcefully replace them with symlinks back to the Homebrew-provided tool. Doing so can and likely will cause significant breakage when attempting to build software.\n\n`brew link --force` creates a warning in `brew doctor` to let both you and maintainers know that a link exists that could be causing issues. If you’ve linked something and there’s no problems at all? Feel free to ignore the `brew doctor` error.\n\n## How do I use those tools outside of Homebrew?\n\nUseful, reliable alternatives exist should you wish to use keg-only tools outside of Homebrew.\n\n### Build flags\n\nYou can set flags to give configure scripts or Makefiles a nudge in the right direction. An example of flag setting:\n\n``` bash\n./configure --prefix=/Users/Dave/Downloads CFLAGS=\"-I$(brew --prefix)/opt/openssl/include\" LDFLAGS=\"-L$(brew --prefix)/opt/openssl/lib\"\n```\n\nAn example using `pip`:\n\n``` bash\nCFLAGS=\"-I$(brew --prefix)/opt/icu4c/include\" LDFLAGS=\"-L$(brew --prefix)/opt/icu4c/lib\" pip install pyicu\n```\n\n### `PATH` modification\n\nYou can temporarily prepend your `PATH` with the tool’s `bin` directory, such as:\n\n``` bash\nexport PATH=\"$(brew --prefix)/opt/openssl/bin:${PATH}\"\n```\n\nThis will prepend the directory to your `PATH`, ensuring any build script that searches the `PATH` will find it first.\n\nChanging your `PATH` using this command ensures the change only exists for the duration of the shell session. Once the current session ends, the `PATH` reverts to its prior state.\n\n### `pkg-config` detection\n\nIf the tool you are attempting to build is [pkg-config](https://en.wikipedia.org/wiki/Pkg-config) aware, you can amend your `PKG_CONFIG_PATH` to find a keg-only utility’s `.pc` files, if it has any. Not all formulae ship with these files.\n\nAn example of this is:\n\n``` bash\nexport PKG_CONFIG_PATH=\"$(brew --prefix)/opt/openssl/lib/pkgconfig\"\n```\n\nIf you’re curious about the `PKG_CONFIG_PATH` variable, `man pkg-config` goes into more detail.\n\nYou can get `pkg-config` to print the default search path with:\n\n``` bash\npkg-config --variable pc_path pkg-config\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/How-to-Build-Software-Outside-Homebrew-with-Homebrew-keg-only-Dependencies](https://docs.brew.sh/How-to-Build-Software-Outside-Homebrew-with-Homebrew-keg-only-Dependencies)"
- name: How to Create and Maintain a Tap
  id: how-to-create-and-maintain-a-tap
  summary: Taps are external sources of Homebrew formulae, casks and/or external commands
  description: "# How to Create and Maintain a Tap\n\n[Taps](taps) are external sources of Homebrew formulae, casks and/or external commands. They can be created by anyone to provide their own formulae, casks and/or external commands to any Homebrew user.\n\n## Creating a tap\n\nA tap is usually a Git repository available online, but you can use anything as long as it’s a protocol that Git understands, or even just a directory with files in it. If hosted on GitHub, we recommend that the repository’s name start with `homebrew-` so the short `brew tap` command can be used. See the [manpage](manpage) for more information on repository naming.\n\nThe `brew tap-new` command can be used to create a new tap along with some template files.\n\nTap formulae follow the same format as the core’s ones, and can be added under either the `Formula` subdirectory, the `HomebrewFormula` subdirectory or the repository’s root. The first available directory is used, other locations will be ignored. We recommend use of subdirectories because it makes the repository organisation easier to grasp, and top-level files are not mixed with formulae.\n\nSee [homebrew/core](https://github.com/Homebrew/homebrew-core) for an example of a tap with a `Formula` subdirectory.\n\n## Naming your formulae to avoid clashes\n\nIf your formulae have the same name as Homebrew/homebrew-core formulae they cannot be installed side-by-side. If you wish to create a different version of a formula that’s in Homebrew/homebrew-core (e.g. with `option`s) consider giving it a different name e.g. `nginx-full` for more fully-featured `nginx` formula. This will allow both `nginx` and `nginx-full` to be installed at the same time (assuming one is `keg_only` or the linked files do not clash).\n\n### Installing\n\nIf it’s on GitHub, users can install any of your formulae with `brew install user/repo/formula`. Homebrew will automatically add your `github.com/user/homebrew-repo` tap before installing the formula. `user/repo/formula` points to the `github.com/user/homebrew-repo/**/formula.rb` file here.\n\nIf they want to get your tap without installing any formula at the same time, users can add it with the [`brew tap` command](taps).\n\nIf it’s on GitHub, they can use `brew tap user/repo`, where `user` is your GitHub username and `homebrew-repo` is your repository.\n\nIf it’s hosted outside of GitHub, they have to use `brew tap user/repo <URL>`, where `user` and `repo` will be used to refer to your tap and `<URL>` is your Git clone URL.\n\nUsers can then install your formulae either with `brew install foo` if there’s no core formula with the same name, or with `brew install user/repo/foo` to avoid conflicts.\n\n## Maintaining a tap\n\nA tap is just a Git repository so you don’t have to do anything specific when making modifications, apart from committing and pushing your changes.\n\n### Updating\n\nOnce your tap is installed, Homebrew will update it each time a user runs `brew update`. Outdated formulae will be upgraded when a user runs `brew upgrade`, like core formulae.\n\n## Casks\n\nCasks can also be installed from a tap. Casks can be included in taps with formulae, or in a tap with just casks. Place any cask files you wish to make available in a `Casks` directory at the top level of your tap.\n\nSee [homebrew/cask](https://github.com/Homebrew/homebrew-cask) for an example of a tap with a `Casks` subdirectory.\n\n### Naming\n\nUnlike formulae, casks must have globally unique names to avoid clashes. This can be achieved by e.g. prepending the cask name with your github username: `username-formula-name`.\n\n## External commands\n\nYou can provide your tap users with custom `brew` commands by adding them in a `cmd` subdirectory. [Read more on external commands](external-commands).\n\nSee [homebrew/aliases](https://github.com/Homebrew/homebrew-aliases) for an example of a tap with external commands.\n\n## Official Vendor Taps\n\nSome upstream software providers like to package their software in their own Homebrew tap. When their software is [eligible for Homebrew/homebrew-core](acceptable-formulae) we prefer to maintain software there for ease of updates, improved discoverability and use of tools such as [formulae.brew.sh](https://formulae.brew.sh).\n\nWe are not willing to remove software packaged in Homebrew/homebrew-core in favour of an upstream tap. We are not willing to instruct users in our formulae to use your formulae instead. If upstream projects have issues with how Homebrew packages your software: please file issues (or, ideally, pull requests) to address these problems.\n\nThere’s an increasing desire in commercial open source about “maintaining control” e.g. defining exactly what binaries are shipping to users. Not supporting users (or even software distributions) to build-from-source is antithetical to the values of open source. If you think Homebrew’s perspective is annoying on this: try and see how Debian responds to requests to ship your binaries.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap](https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap)"
- name: How To Open a Homebrew Pull Request
  id: how-to-open-a-homebrew-pull-request
  summary: The following commands are used by Homebrew contributors to set up a fork of Homebrew’s Git repository on GitHub, create a new branch and create a GitHub pull request (“PR”) of the changes in that branch
  description: "# How To Open a Homebrew Pull Request\n\nThe following commands are used by Homebrew contributors to set up a fork of Homebrew’s Git repository on GitHub, create a new branch and create a GitHub pull request (“PR”) of the changes in that branch.\n\nDepending on the change you want to make, you need to send the pull request to the appropriate one of Homebrew’s main repositories. If you want to submit a change to Homebrew core code (the `brew` implementation), you should open the pull request on [Homebrew/brew](https://github.com/Homebrew/brew). If you want to submit a change for a formula, you should open the pull request on the [homebrew/core](https://github.com/Homebrew/homebrew-core) tap, for casks you should open the pull request on the [homebrew/cask](https://github.com/Homebrew/homebrew-cask) tap or another [official tap](https://github.com/Homebrew), based on the formula type.\n\n## Submit a new version of an existing formula\n\n1.  Use `brew bump-formula-pr` to do everything (i.e. forking, committing, pushing) with a single command. Run `brew bump-formula-pr --help` to learn more.\n\n## Submit a new version of an existing cask\n\n1.  Use `brew bump-cask-pr` to do everything (i.e. forking, committing, pushing) with a single command. Run `brew bump-cask-pr --help` to learn more.\n\n## Set up your own fork of the Homebrew repository\n\n### Core `brew` code related pull request\n\n1.  [Fork the Homebrew/brew repository on GitHub](https://github.com/Homebrew/brew/fork).\n    - This creates a personal remote repository that you can push to. This is needed because only Homebrew maintainers have push access to the main repositories.\n\n2.  Change to the directory containing your Homebrew installation:\n\n    ``` bash\n    cd \"$(brew --repository)\"\n    ```\n\n3.  Add your pushable forked repository as a new remote:\n\n    ``` bash\n    git remote add <YOUR_USERNAME> https://github.com/<YOUR_USERNAME>/brew.git\n    ```\n\n    - `<YOUR_USERNAME>` is your GitHub username, not your local machine username.\n\n### Formulae related pull request\n\n1.  [Fork the Homebrew/homebrew-core repository on GitHub](https://github.com/Homebrew/homebrew-core/fork).\n    - This creates a personal remote repository that you can push to. This is needed because only Homebrew maintainers have push access to the main repositories.\n\n2.  Change to the directory containing Homebrew formulae:\n\n    ``` bash\n    cd \"$(brew --repository homebrew/core)\"\n    ```\n\n3.  Add your pushable forked repository as a new remote:\n\n    ``` bash\n    git remote add <YOUR_USERNAME> https://github.com/<YOUR_USERNAME>/homebrew-core.git\n    ```\n\n    - `<YOUR_USERNAME>` is your GitHub username, not your local machine username.\n\n### Cask related pull request\n\n1.  [Fork the Homebrew/homebrew-cask repository on GitHub](https://github.com/Homebrew/homebrew-cask/fork).\n    - This creates a personal remote repository that you can push to. This is needed because only Homebrew maintainers have push access to the main repositories.\n\n2.  Change to the directory containing Homebrew casks:\n\n    ``` bash\n    cd \"$(brew --repository homebrew/cask)\"\n    ```\n\n3.  Add your pushable forked repository as a new remote:\n\n    ``` bash\n    git remote add <YOUR_USERNAME> https://github.com/<YOUR_USERNAME>/homebrew-cask.git\n    ```\n\n    - `<YOUR_USERNAME>` is your GitHub username, not your local machine username.\n\n## Create your pull request from a new branch\n\nTo make a new branch and submit it for review, create a GitHub pull request with the following steps:\n\n1.  Check out the `master` branch:\n\n    ``` bash\n    git checkout master\n    ```\n\n2.  Retrieve new changes to the `master` branch:\n\n    ``` bash\n    brew update\n    ```\n\n3.  Create a new branch from the latest `master` branch:\n\n    ``` bash\n    git checkout -b <YOUR_BRANCH_NAME> origin/master\n    ```\n\n4.  Make your changes. For formulae or casks, use `brew edit` or your favourite text editor, following all the guidelines in the [Formula Cookbook](formula-cookbook) or [Cask Cookbook](cask-cookbook).\n    - If there’s a `bottle do` block in the formula, don’t remove or change it; we’ll update it when we pull your PR.\n\n5.  Test your changes by running the following, and ensure they all pass without issue. For changed formulae and casks, make sure you do the `brew audit` step while your changed formula/cask is installed.\n\n    ``` bash\n    brew tests\n     brew install --build-from-source <CHANGED_FORMULA|CHANGED_CASK>\n     brew test <CHANGED_FORMULA|CHANGED_CASK>\n     brew audit --strict --online <CHANGED_FORMULA|CHANGED_CASK>\n    ```\n\n6.  [Make a separate commit](formula-cookbook#commit) for each changed formula with `git add` and `git commit`.\n    - Please note that our preferred commit message format for simple version updates is “`<FORMULA_NAME> <NEW_VERSION>`”, e.g. “`source-highlight 3.1.8`”.\n\n7.  Upload your branch of new commits to your fork:\n\n    ``` bash\n    git push --set-upstream <YOUR_USERNAME> <YOUR_BRANCH_NAME>\n    ```\n\n8.  Go to the relevant repository (e.g. <https://github.com/Homebrew/brew>, <https://github.com/Homebrew/homebrew-core>, etc.) and create a pull request to request review and merging of the commits in your pushed branch. Explain why the change is needed and, if fixing a bug, how to reproduce the bug. Make sure you have done each step in the checklist that appears in your new PR.\n\n9.  Await feedback or a merge from Homebrew’s maintainers. We typically respond to all PRs within a couple days, but it may take up to a week, depending on the maintainers’ workload.\n\nThank you!\n\n## Following up\n\nTo respond well to feedback:\n\n1.  Ask for clarification of anything you don’t understand and for help with anything you don’t know how to do.\n2.  Post a comment on your pull request if you’ve provided all the requested changes/information and it hasn’t been merged after a week. Post a comment on your pull request if you’re stuck and need help.\n    - A `needs response` label on a PR means that the Homebrew maintainers need you to respond to previous comments.\n3.  Keep discussion in the pull request unless requested otherwise (i.e. do not email maintainers privately).\n4.  Do not continue discussion in closed pull requests.\n5.  Do not argue with Homebrew maintainers. You may disagree but unless they change their mind, please implement what they request. Ultimately they control what is included in Homebrew, as they have to support any changes that are made.\n\nTo make changes based on feedback:\n\n1.  Check out your branch again:\n\n    ``` bash\n    git checkout <YOUR_BRANCH_NAME>\n    ```\n\n2.  Make any requested changes and commit them with `git add` and `git commit`.\n\n3.  Squash new commits into one commit per formula:\n\n    ``` bash\n    git rebase --interactive origin/master\n    ```\n\n    - If you are working on a PR for a single formula, `git commit --amend` is a convenient way of keeping your commits squashed as you go.\n\n4.  Push to your remote fork’s branch and the pull request:\n\n    ``` bash\n    git push --force\n    ```\n\nOnce all feedback has been addressed and if it’s a change we want to include (we include most changes), then we’ll add your commit to Homebrew. Note that the PR status may show up as “Closed” instead of “Merged” because of the way we merge contributions. Don’t worry: you will still get author credit in the actual merged commit.\n\nWell done, you are now a Homebrew contributor!\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request](https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request)"
- name: Installation
  id: installation
  summary: Instructions for a supported install of Homebrew are on the homepage
  description: "# Installation\n\nInstructions for a supported install of Homebrew are on the [homepage](https://brew.sh).\n\nThis script installs Homebrew to its preferred prefix (`/usr/local` for macOS Intel, `/opt/homebrew` for Apple Silicon and `/home/linuxbrew/.linuxbrew` for Linux) so that [you don’t need sudo](faq#why-does-homebrew-say-sudo-is-bad) when you `brew install`. It is a careful script; it can be run even if you have stuff installed in the preferred prefix already. It tells you exactly what it will do before it does it too. You have to confirm everything it will do before it starts.\n\n## macOS Requirements\n\n- A 64-bit Intel CPU or Apple Silicon CPU ^([1](#1))\n- macOS Catalina (10.15) (or higher) ^([2](#2))\n- Command Line Tools (CLT) for Xcode (from `xcode-select --install` or <https://developer.apple.com/download/all/>) or [Xcode](https://itunes.apple.com/us/app/xcode/id497799835) ^([3](#3))\n- The Bourne-again shell for installation (i.e. `bash`) ^([4](#4))\n\n## Git Remote Mirroring\n\nYou can use geolocalized Git mirrors to speed up Homebrew’s installation and `brew update` by setting `HOMEBREW_BREW_GIT_REMOTE` and/or `HOMEBREW_CORE_GIT_REMOTE` in your shell environment with this script:\n\n``` bash\nexport HOMEBREW_BREW_GIT_REMOTE=\"...\"  # put your Git mirror of Homebrew/brew here\nexport HOMEBREW_CORE_GIT_REMOTE=\"...\"  # put your Git mirror of Homebrew/homebrew-core here\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\nThe default Git remote will be used if the corresponding environment variable is unset.\n\n## Alternative Installs\n\n### Linux or Windows 10 Subsystem for Linux\n\nCheck out [the Homebrew on Linux installation documentation](homebrew-on-linux).\n\n### Untar anywhere\n\nJust extract (or `git clone`) Homebrew wherever you want. Just avoid:\n\n- Directories with names that contain spaces. Homebrew itself can handle spaces, but many build scripts cannot.\n- `/tmp` subdirectories because Homebrew gets upset.\n- `/sw` and `/opt/local` because build scripts get confused when Homebrew is there instead of Fink or MacPorts, respectively.\n\nHowever do yourself a favour and use the installer to install to the default prefix. Some things may not build when installed elsewhere. One of the reasons Homebrew just works relative to the competition is **because** we recommend installing here. *Pick another prefix at your peril!*\n\n``` bash\nmkdir homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew\n```\n\nor\n\n``` bash\ngit clone https://github.com/Homebrew/brew homebrew\n```\n\nthen\n\n``` bash\neval \"$(homebrew/bin/brew shellenv)\"\nbrew update --force --quiet\nchmod -R go-w \"$(brew --prefix)/share/zsh\"\n```\n\n### Multiple installations\n\nCreate a Homebrew installation wherever you extract the tarball. Whichever `brew` command is called is where the packages will be installed. You can use this as you see fit, e.g. to have a system set of libs in the default prefix and tweaked formulae for development in `~/homebrew`.\n\n### Unattended installation\n\nIf you want a non-interactive run of the Homebrew installer that doesn’t prompt for passwords (e.g. in automation scripts), prepend [`NONINTERACTIVE=1`](https://github.com/Homebrew/install/#install-homebrew-on-macos-or-linux) to the installation command.\n\n## Uninstallation\n\nUninstallation is documented in the [FAQ](faq).\n\n¹ For 32-bit or PPC support see [Tigerbrew](https://github.com/mistydemeo/tigerbrew).\n\n² 10.15 or higher is recommended, while 10.11–10.14 are supported on a best-effort basis. For 10.4–10.6 see [Tigerbrew](https://github.com/mistydemeo/tigerbrew).\n\n³ Most formulae require a compiler. A handful require a full Xcode installation. You can install Xcode, the CLT, or both; Homebrew supports all three configurations. Downloading Xcode may require an Apple Developer account on older versions of Mac OS X. Sign up for free at [Apple’s website](https://developer.apple.com/register/index.action).\n\n⁴ The one-liner installation method found on [brew.sh](https://brew.sh) requires the Bourne-again shell, i.e. `bash`. Notably, `zsh`, `fish`, `tcsh` and `csh` will not work.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Installation](https://docs.brew.sh/Installation)"
- name: Interesting Taps & Forks
  id: interesting-taps-and-forks
  summary: A tap is Homebrew-speak for a Git repository containing additional formulae
  description: "# Interesting Taps & Forks\n\nA [tap](taps) is Homebrew-speak for a Git repository containing additional formulae.\n\nHomebrew has the capability to add (and remove) multiple taps to your local installation with the `brew tap` and `brew untap` commands; run `man brew` in your terminal for usage information. The main repository at <https://github.com/Homebrew/homebrew-core>, often called `homebrew/core`, is always built-in.\n\nYour taps are Git repositories located at `$(brew --repository)/Library/Taps`.\n\n## Unsupported interesting taps\n\n- [homebrew-ffmpeg/ffmpeg](https://github.com/homebrew-ffmpeg/homebrew-ffmpeg): A tap for FFmpeg with additional options, including nonfree additions.\n\n- [denji/nginx](https://github.com/denji/homebrew-nginx): A tap for NGINX modules, intended for its `nginx-full` formula which includes more module options.\n\n- [InstantClientTap/instantclient](https://github.com/InstantClientTap/homebrew-instantclient): A tap for Oracle Instant Client.\n\n- [osx-cross/avr](https://github.com/osx-cross/homebrew-avr): GNU AVR toolchain (Libc, compilers and other tools for Atmel MCUs), useful for Arduino hackers and AVR programmers.\n\n- [petere/postgresql](https://github.com/petere/homebrew-postgresql): Allows installing multiple PostgreSQL versions in parallel.\n\n- [osrf/simulation](https://github.com/osrf/homebrew-simulation): Tools for robotics simulation.\n\n- [brewsci/bio](https://github.com/brewsci/homebrew-bio): Bioinformatics formulae.\n\n- [davidchall/hep](https://github.com/davidchall/homebrew-hep): High energy physics formulae.\n\n- [lifepillar/appleii](https://github.com/lifepillar/homebrew-appleii): Formulae for vintage Apple emulation.\n\n- [gromgit/fuse](https://github.com/gromgit/homebrew-fuse): macOS FUSE formulae that are no longer available in `homebrew/core`.\n\n- [cloudflare/cloudflare](https://github.com/cloudflare/homebrew-cloudflare): Formulae for the applications by Cloudflare, including curl with HTTP/3 support.\n\n## Unsupported interesting forks\n\n- [mistydemeo/tigerbrew](https://github.com/mistydemeo/tigerbrew): Experimental Tiger/Leopard PowerPC version.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Interesting-Taps-and-Forks](https://docs.brew.sh/Interesting-Taps-and-Forks)"
- name: License Guidelines
  id: license-guidelines
  summary: We only accept formulae that use a Debian Free Software Guidelines license or are released into the public domain following DFSG Guidelines on Public Domain software
  description: "# License Guidelines\n\nWe only accept formulae that use a [Debian Free Software Guidelines license](https://wiki.debian.org/DFSGLicenses) or are released into the public domain following [DFSG Guidelines on Public Domain software](https://wiki.debian.org/DFSGLicenses#Public_Domain).\n\n## Specifying a License\n\nAll licenses are identified by their license identifier from the [SPDX License List](https://spdx.org/licenses/).\n\nSpecify a license by passing it to the `license` method:\n\n``` ruby\nlicense \"MIT\"\n```\n\nThe public domain can be indicated using a symbol:\n\n``` ruby\nlicense :public_domain\n```\n\nIf the license for a formula cannot be represented using an SPDX expression:\n\n``` ruby\nlicense :cannot_represent\n```\n\n## Complex SPDX License Expressions\n\nSome formulae have multiple licenses that need to be combined in different ways. In these cases, a more complex license expression can be used. These expressions are based on the [SPDX License Expression Guidelines](https://spdx.github.io/spdx-spec/appendix-IV-SPDX-license-expressions/).\n\nAdd a `+` to indicate that the user can choose a later version of the same license:\n\n``` ruby\nlicense \"EPL-1.0+\"\n```\n\nGNU licenses (`GPL`, `LGPL`, `AGPL` and `GFDL`) require either the `-only` or the `-or-later` suffix to indicate whether a later version of the license is allowed:\n\n``` ruby\nlicense \"LGPL-2.1-only\"\n```\n\n``` ruby\nlicense \"GPL-1.0-or-later\"\n```\n\nUse `:any_of` to indicate that the user can choose which license applies:\n\n``` ruby\nlicense any_of: [\"MIT\", \"0BSD\"]\n```\n\nUse `:all_of` to indicate that the user must comply with multiple licenses:\n\n``` ruby\nlicense all_of: [\"MIT\", \"0BSD\"]\n```\n\nUse `:with` to indicate a license exception:\n\n``` ruby\nlicense \"MIT\" => { with: \"LLVM-exception\" }\n```\n\nThese expressions can be nested as needed:\n\n``` ruby\nlicense any_of: [\n  \"MIT\",\n  :public_domain,\n  all_of: [\"0BSD\", \"Zlib\", \"Artistic-1.0+\"],\n  \"Apache-2.0\" => { with: \"LLVM-exception\" },\n]\n```\n\n## Specifying Forbidden Licenses\n\nThe `HOMEBREW_FORBIDDEN_LICENSES` environment variable can be set to forbid installation of formulae that require or have dependencies that require certain licenses.\n\nThe `HOMEBREW_FORBIDDEN_LICENSES` should be set to a space separated list of licenses. Use `public_domain` to forbid installation of formulae with a `:public_domain` license.\n\nFor example, the following forbids installation of `MIT`, `Artistic-1.0` and `:public_domain` licenses:\n\n``` bash\nexport HOMEBREW_FORBIDDEN_LICENSES=\"MIT Artistic-1.0 public_domain\"\n```\n\nIn this example Homebrew would refuse to install any formula that specifies the `MIT` license. Homebrew would also forbid installation of any formula that declares a dependency on a formula that specifies `MIT`, even if the original formula has an allowed license.\n\nHomebrew interprets complex license expressions and determines whether the licenses allow installation. To continue the above example, Homebrew would not allow installation of a formula with the following license declarations:\n\n``` ruby\nlicense any_of: [\"MIT\", \"Artistic-1.0\"]\n```\n\n``` ruby\nlicense all_of: [\"MIT\", \"0BSD\"]\n```\n\nHomebrew *would* allow formulae with the following declaration to be installed:\n\n``` ruby\nlicense any_of: [\"MIT\", \"0BSD\"]\n```\n\n`HOMEBREW_FORBIDDEN_LICENSES` can also forbid future versions of specific licenses. For example, to forbid `Artistic-1.0`, `Artistic-2.0` and any future Artistic licenses, use:\n\n``` bash\nexport HOMEBREW_FORBIDDEN_LICENSES=\"Artistic-1.0+\"\n```\n\nFor GNU licenses (such as `GPL`, `LGPL`, `AGPL` and `GFDL`), use `-only` or `-or-later`. For example, the following would forbid `GPL-2.0`, `LGPL-2.1` and `LGPL-3.0` formulae from being installed, but would allow `GPL-3.0`\n\n``` bash\nexport HOMEBREW_FORBIDDEN_LICENSES=\"GPL-2.0-only LGPL-2.1-or-later\"\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/License-Guidelines](https://docs.brew.sh/License-Guidelines)"
- name: Linux CI in homebrew/core
  id: linux-ci
  summary: We currently use Ubuntu 16.04 for bottling in homebrew/core
  description: "# Linux CI in `homebrew/core`\n\nWe currently use Ubuntu 16.04 for bottling in `homebrew/core`.\n\n## Ubuntu vs. other Linux distributions\n\nAs of 2022, around 77% of our users are using Ubuntu. This is the reason why we have chosen this distribution for our base CI image. We have successfully used Ubuntu for CI since version 14.04. The Ubuntu LTS versions are supported for 5 years. A new LTS version is released every 2 years.\n\nOur bottles are compatible with other distributions like Debian/CentOS, even when compiled on Ubuntu.\n\n## Past and next versions\n\nWe are currently moving our CI to Ubuntu 22.04. This work will probably be done before end of 2022. Moving from Ubuntu 16.04 to Ubuntu 22.04 (and thus skipping version 18.04 and 20.04) took longer than expected.\n\nWe plan to proceed with regular updates from 2022 onwards. We aim to use the latest Ubuntu LTS version for our CI.\n\nWe will start using the latest Ubuntu LTS version for our CI no earlier than 3 months after its release and, ideally, no more than 12 months after its release.\n\n| Distribution | Glibc | GCC | Usage             |\n|--------------|-------|-----|-------------------|\n| Ubuntu 14.04 | 2.19  | 4   | From 2014 to 2017 |\n| Ubuntu 16.04 | 2.23  | 5   | From 2017 to 2022 |\n| Ubuntu 22.04 | 2.35  | 11  | From 2022 to 2024 |\n| Ubuntu 24.04 | ?     | ?   | From 2024 to 2026 |\n\n## Why always use the latest version?\n\nHomebrew is a rolling-release package manager. We try to ship the newest things as quickly as possible, on macOS and Linux.\n\nWhen a formula needs a newer GCC because our host GCC in CI is too old, we needed to make that formula depend on a newer Homebrew GCC. All C++ dependents of that formula immediately acquire a dependency on Homebrew GCC as well. While we have taken the steps to make sure this no longer holds up GCC updates, it still creates a maintenance burden. This problem is more likely for formula which are very actively maintained and try to use newer features of C++. We decided that we shouldn’t have a maintenance burden for formulae which are doing the right thing by staying up to date. It makes a lot of sense for Homebrew maintainers to submit upstream fixes when formulae are not working with newer compilers. It makes a lot less sense for Homebrew maintainers to submit fixes because our host compiler is too old.\n\nNote that `glibc` will need to be installed for more users as their `glibc` version will often be too old: disk space is cheap and we have can handle this situation for our users. This situation will often arise when update to a new LTS version and adoption of the new Ubuntu is still low during the first months. For the same reasons as above: we prefer to stay on the bleeding edge and give our users a gentle nudge to think about updating their OS.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Linux-CI](https://docs.brew.sh/Linux-CI)"
- name: MD5 and SHA-1 Deprecation
  id: checksum_deprecation
  summary: In early 2015 Homebrew started the process of deprecating SHA1 for package integrity verification
  description: "# MD5 and SHA-1 Deprecation\n\nIn early 2015 Homebrew started the process of deprecating *SHA1* for package integrity verification. Since then formulae under the Homebrew organisation have been migrated to use *SHA256* for verification; this includes both source packages and our precompiled packages (bottles).\n\nHomebrew has since stopped supporting *SHA1* and *MD5* entirely. *MD5* checksums were removed from core formulae in 2012 and as of April 2015 installing a formula verified by *MD5* is actively blocked.\n\nWe removed *SHA1* support in **November 2016**, 21 months after we started warning people to move away from it for verification. This is enforced in the same way *MD5* is, by blocking the installation of that individual formula until the checksum is migrated.\n\nThis means custom taps, local custom formulae, etc. need to be migrated to use *SHA256* before you can install them.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Checksum_Deprecation](https://docs.brew.sh/Checksum_Deprecation)"
- name: Migrating A Formula To A Tap
  id: migrating-a-formula-to-a-tap
  summary: There are times when we may wish to migrate a formula from one tap into another tap
  description: "# Migrating A Formula To A Tap\n\nThere are times when we may wish to migrate a formula from one tap into another tap. To do this:\n\n1.  Create a pull request to the new tap adding the formula file as-is from the original tap. Fix any test failures that may occur due to the stricter requirements for new formulae than existing formula (e.g. `brew audit --strict` must pass for that formula).\n2.  Create a pull request to the original tap deleting the formula file and add it to `tap_migrations.json` with a commit message like `gv: migrate to homebrew/core`.\n3.  Put a link for each pull request in the other pull request so the maintainers can merge them both at once.\n\nCongratulations, you’ve moved a formula to a tap!\n\nFor Homebrew maintainers, formulae should only ever be migrated into and within the Homebrew organisation (e.g. from Homebrew/core to Homebrew/cask, or from a third-party tap to Homebrew/core), and never out of it.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Migrating-A-Formula-To-A-Tap](https://docs.brew.sh/Migrating-A-Formula-To-A-Tap)"
- name: Node for Formula Authors
  id: node-for-formula-authors
  summary: This document explains how to successfully use Node and npm in a Node module based Homebrew formula
  description: "# Node for Formula Authors\n\nThis document explains how to successfully use Node and npm in a Node module based Homebrew formula.\n\n## Running `npm install`\n\nHomebrew provides two helper methods in a `Language::Node` module: `std_npm_install_args` and `local_npm_install_args`. They both set up the correct environment for npm and return arguments for `npm install` for their specific use cases. Your formula should use these instead of invoking `npm install` explicitly. The syntax for a standard Node module installation is:\n\n``` ruby\nsystem \"npm\", \"install\", *Language::Node.std_npm_install_args(libexec)\n```\n\nwhere `libexec` is the destination prefix (usually the `libexec` variable).\n\n## Download URL\n\nIf the Node module is also available on the npm registry, we prefer npm hosted release tarballs over GitHub (or elsewhere) hosted source tarballs. The advantages of these tarballs are that they don’t include the files from the `.npmignore` (such as tests) resulting in a smaller download size and that any possible transpilation step is already done (e.g. no need to compile CoffeeScript files as a build step).\n\nThe npm registry URLs usually have the format of:\n\n``` plaintext\nhttps://registry.npmjs.org/<name>/-/<name>-<version>.tgz\n```\n\nAlternatively you could `curl` the JSON at `https://registry.npmjs.org/<name>` and look for the value of `versions[<version>].dist.tarball` for the correct tarball URL.\n\n## Dependencies\n\nNode modules which are compatible with the latest Node version should declare a dependency on the `node` formula.\n\n``` ruby\ndepends_on \"node\"\n```\n\nIf your formula requires being executed with an older Node version you should use one of the versioned node formulae (e.g. `node@12`).\n\n### Special requirements for native addons\n\nIf your Node module is a native addon or has a native addon somewhere in its dependency tree you have to declare an additional dependency. Since the compilation of the native addon results in an invocation of `node-gyp` we need an additional build time dependency on `\"python\"` (because GYP depends on Python).\n\n``` ruby\ndepends_on \"python\" => :build\n```\n\nAlso note that such a formula would only be compatible with the same Node major version it originally was compiled with. This means that we need to revision every formula with a Node native addon with every major version bump of the `node` formula. To make sure we don’t overlook your formula on a Node major version bump, write a meaningful test which would fail in such a case (invoked with an ABI-incompatible Node version).\n\n## Installation\n\nNode modules should be installed to `libexec`. This prevents the Node modules from contaminating the global `node_modules`, which is important so that npm doesn’t try to manage Homebrew-installed Node modules.\n\nIn the following we distinguish between two types of Node modules installed using formulae:\n\n- formulae for standard Node modules compatible with npm’s global module format which should use [`std_npm_install_args`](#installing-global-style-modules-with-std_npm_install_args-to-libexec) (like [`azure-cli`](https://github.com/Homebrew/homebrew-core/blob/0f3b27d252b8112c744e0460d871cfe1def6b993/Formula/azure-cli.rb) or [`webpack`](https://github.com/Homebrew/homebrew-core/blob/6282879973d569962e63da7c81ac4623e1a8336b/Formula/webpack.rb))\n- formulae where the `npm install` call is not the only required install step (e.g. need to also compile non-JavaScript sources) which have to use [`local_npm_install_args`](#installing-module-dependencies-locally-with-local_npm_install_args) (like [`elixirscript`](https://github.com/Homebrew/homebrew-core/blob/4bb491b7b246830aed57b97348a17e9401374978/Formula/elixirscript.rb) or [`grunt-cli`](https://github.com/Homebrew/homebrew-core/blob/93be1840908adb2f9ee8c48c66586ee6327480e3/Formula/grunt-cli.rb))\n\nWhat both methods have in common is that they are setting the correct environment for using npm inside Homebrew and are returning the arguments for invoking `npm install` for their specific use cases. This includes fixing an important edge case with the npm cache (caused by Homebrew’s redirection of `HOME` during the build and test process) by using our own custom `npm_cache` inside `HOMEBREW_CACHE`, which would otherwise result in very long build times and high disk space usage.\n\nTo use them you have to require the Node language module at the beginning of your formula file with:\n\n``` ruby\nrequire \"language/node\"\n```\n\n### Installing global style modules with `std_npm_install_args` to `libexec`\n\nIn your formula’s `install` method, simply `cd` to the top level of your Node module if necessary and then use `system` to invoke `npm install` with `Language::Node.std_npm_install_args` like:\n\n``` ruby\nsystem \"npm\", \"install\", *Language::Node.std_npm_install_args(libexec)\n```\n\nThis will install your Node module in npm’s global module style with a custom prefix to `libexec`. All your modules’ executables will be automatically resolved by npm into `libexec/bin` for you, which is not symlinked into Homebrew’s prefix. We need to make sure these are installed. To do this we need to symlink all executables to `bin` with:\n\n``` ruby\nbin.install_symlink Dir[\"#{libexec}/bin/*\"]\n```\n\n### Installing module dependencies locally with `local_npm_install_args`\n\nIn your formula’s `install` method, do any installation steps which need to be done before the `npm install` step and then `cd` to the top level of the included Node module. Then, use `system` with `Language::Node.local_npm_install_args` to invoke `npm install` like:\n\n``` ruby\nsystem \"npm\", \"install\", *Language::Node.local_npm_install_args\n```\n\nThis will install all of your Node modules dependencies to your local build path. You can now continue with your build steps and take care of the installation into the Homebrew `prefix` on your own, following the [general Homebrew formula instructions](formula-cookbook).\n\n## Example\n\nInstalling a standard Node module based formula would look like this:\n\n``` ruby\nrequire \"language/node\"\n\nclass Foo < Formula\n  desc \"...\"\n  homepage \"...\"\n  url \"https://registry.npmjs.org/foo/-/foo-1.4.2.tgz\"\n  sha256 \"...\"\n\n  depends_on \"node\"\n  # uncomment if there is a native addon inside the dependency tree\n  # depends_on \"python\" => :build\n\n  def install\n    system \"npm\", \"install\", *Language::Node.std_npm_install_args(libexec)\n    bin.install_symlink Dir[\"#{libexec}/bin/*\"]\n  end\n\n  test do\n    # add a meaningful test here\n  end\nend\n```\n\n## Tooling\n\nYou can use [homebrew-npm-noob](https://github.com/zmwangx/homebrew-npm-noob) to automatically generate a formula like the example above for an npm package.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Node-for-Formula-Authors](https://docs.brew.sh/Node-for-Formula-Authors)"
- name: Prose Style Guidelines
  id: prose-style-guidelines
  summary: This is a set of style and usage guidelines for Homebrew’s prose documentation aimed at users, contributors, and maintainers (as opposed to executable computer code)
  description: "# Prose Style Guidelines\n\nThis is a set of style and usage guidelines for Homebrew’s prose documentation aimed at users, contributors, and maintainers (as opposed to executable computer code). It applies to documents like those in `docs` in the `Homebrew/brew` repository, announcement emails, and other communications with the Homebrew community.\n\nThis does not apply to any Ruby or other computer code. You can use it to inform technical documentation extracted from computer code, like embedded man pages, but it’s just a suggestion there.\n\n## Goals and audience\n\nThe primary goal of Homebrew’s prose documents is communicating with its community of users and contributors. “Users” includes “contributors” here; wherever you see “users” you can substitute “users and contributors”.\n\nUnderstandability is more important than any particular style guideline.\n\nUsers take precedence over maintainers, except in specifically maintainer-focused documents.\n\nHomebrew’s audience includes users with a wide range of education and experience, and users for whom English is not a native language. We aim to support as many of those users as feasible.\n\nWe strive for “correct” but not “fancy” usage. Think newspaper article, not academic paper.\n\nThis is a set of guidelines to be applied using human judgement, not a set of hard and fast rules. It is like [The Economist’s Style Guide](https://web.archive.org/web/20170830001125/https://www.economist.com/styleguide/introduction) or [Garner’s Modern American Usage](https://en.wikipedia.org/wiki/Garner's_Modern_American_Usage). It is less like the [Ruby Style Guide](https://github.com/rubocop-hq/ruby-style-guide#the-ruby-style-guide). All guidelines here are open to interpretation and discussion. 100% conformance to these guidelines is *not* a goal.\n\nThe intent of this document is to help authors make decisions about clarity, style, and consistency. It is not to help settle arguments about who knows English better. Don’t use this document to be a jerk.\n\n## Guidelines\n\nWe prefer:\n\n### Style and usage\n\n- British/Commonwealth English over American English, in general\n- “e.g.” and “i.e.”: Go ahead and use “e.g.” or “i.e.” instead of spelling them out. Don’t worry about putting a comma after them.\n  - “e.g.” means “for example”; “i.e.” means “that is”\n- Offset nontrivial subordinate clauses with commas\n\n### Personal pronouns\n\n- We respect all people’s choice of personal pronouns\n- Singular “they” when someone’s gender is unknown\n- Avoid gender-specific language when not necessary\n\n### Structure and markup\n\n- Title Case in `h1` headings; sentence case in all other headings\n- Periods at the ends of list items where most items in that list are complete sentences\n- More generally, parallel list item structure\n- Capitalise all list items if you want, even if they’re not complete sentences; just be consistent within each list, and preferably, throughout the whole page\n- Use a subordinate list item instead of dropping a multi-sentence paragraph-long item into a list of sentence fragments\n- Prefer Markdown over other markup formats unless their specific features are needed\n  - GitHub Flavoured Markdown. GitHub’s implementation is the standard, period.\n\n### Typographical conventions\n\n- Literal text in commands and code is styled in `fixed width font`\n- Placeholders inside code snippets are marked up with `<...>` brackets\n  - e.g. `git remote add <my-user-name> https://github.com/<my-user-name>/homebrew-core.git`\n- Names of commands like `git` and `brew` are styled in `fixed width font`\n- No “$” with environment variables mentioned outside code snippets\n  - e.g. “Set `BLAH` to 5”, not “Set `$BLAH` to 5”\n- One space after periods, not two\n- Capitalised proper nouns\n- We do not defer to extensive nonstandard capitalisation, typesetting, or other styling of brand names, aside from the normal capitalisation of proper nouns and simple internal capitalisation\n- No “TM”, ™, ^(SM), ©, ®, or other explicit indicators of rights ownership or trademarks; we take these as understood when the brand name is mentioned\n- Tap names like `homebrew/core` are styled in `fixed width font`. Repository names may be styled in either fixed width font like “`Homebrew/homebrew-core`”, as links like “[Homebrew/homebrew-core](https://github.com/homebrew/homebrew-core)”, or regular text like “Homebrew/homebrew-core”, based on which looks best for a given use.\n  - But be consistent within a single document\n  - Capitalise repository names to match the user and repository names on GitHub. Keep tap names in lower case.\n- Commas\n  - No Oxford commas\n  - Prefer a “loose” comma style: “when in doubt, leave it out” unless needed for clarity\n\n### Terminology, words, and word styling\n\n- “pull request”, not “Pull Request”\n- “check out” is the verb; “checkout” is the noun\n- Spell out certain technical words\n  - “repository”, not “repo”\n  - When abbreviating, introduce the abbreviation with the first usage in any document\n- Some abbreviations (near-universally understood among our user base) are fine, though.\n  - “Mac” is fine; “Macintosh” isn’t necessary\n- “macOS” for all versions, “OS X” or “Mac OS X” when describing specific older versions\n- “RuboCop”, not “Rubocop”\n- A pull request is made “on” a repository; that repository is “at” a URL\n\n## How to use these guidelines\n\nRefer to these guidelines to make decisions about style and usage in your own writing for Homebrew documents and communication.\n\nPRs that fix style and usage throughout a document or multiple documents are okay and encouraged. PRs for just one or two style changes are a bit much.\n\nGiving style and usage feedback on a PR or commit that involves documents is okay and encouraged. But keep in mind that these are just guidelines, and for any change, the author may have made a deliberate choice to break these rules in the interest of understandability or aesthetics.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Prose-Style-Guidelines](https://docs.brew.sh/Prose-Style-Guidelines)"
- name: Python
  id: homebrew-and-python
  summary: This page describes how Python is handled in Homebrew for users
  description: "# Python\n\nThis page describes how Python is handled in Homebrew for users. See [Python for Formula Authors](python-for-formula-authors) for advice on writing formulae to install packages written in Python.\n\nHomebrew should work with any [CPython](https://stackoverflow.com/questions/2324208/is-there-any-difference-between-cpython-and-python) and defaults to the macOS system Python.\n\nHomebrew provides formulae to brew Python 3.y. A `python@2` formula was provided until the end of 2019, at which point it was removed due to the Python 2 deprecation.\n\n**Important:** If you choose to use a Python which isn’t either of these two (system Python or brewed Python), the Homebrew team cannot support any breakage that may occur.\n\n## Python 3.y\n\nHomebrew provides formulae for maintained releases of Python 3.y (`python@3.y`).\n\n**Important:** Python may be upgraded to a newer version at any time. Consider using a version manager such as `pyenv` if you require stability of minor or patch versions for virtual environments.\n\nThe executables are organised as follows:\n\n- `python3` points to Homebrew’s Python 3.y (if installed)\n- `pip3` points to Homebrew’s Python 3.y’s pip (if installed)\n\nUnversioned symlinks for `python`, `python-config`, `pip` etc. are installed here:\n\n``` bash\n$(brew --prefix)/opt/python/libexec/bin\n```\n\n## Setuptools, Pip, etc.\n\nThe Python formulae install [pip](https://pip.pypa.io/) (as `pip3`) and [Setuptools](https://pypi.org/project/setuptools/).\n\nSetuptools can be updated via pip3, without having to re-brew Python:\n\n``` bash\npython3 -m pip install --upgrade setuptools\n```\n\nSimilarly, pip3 can be used to upgrade itself via:\n\n``` bash\npython3 -m pip install --upgrade pip\n```\n\n## `site-packages` and the `PYTHONPATH`\n\nThe `site-packages` is a directory that contains Python modules, including bindings installed by other formulae. Homebrew creates it here:\n\n``` bash\n$(brew --prefix)/lib/pythonX.Y/site-packages\n```\n\nSo, for Python 3.y.z, you’ll find it at `/usr/local/lib/python3.y/site-packages`.\n\nPython 3.y also searches for modules in:\n\n- `/Library/Python/3.y/site-packages`\n- `~/Library/Python/3.y/lib/python/site-packages`\n\nHomebrew’s `site-packages` directory is first created (1) once any Homebrew formulae with Python bindings are installed, or (2) upon `brew install python`.\n\n### Why here?\n\nThe reasoning for this location is to preserve your modules between (minor) upgrades or re-installations of Python. Additionally, Homebrew has a strict policy never to write stuff outside of the `brew --prefix`, so we don’t spam your system.\n\n## Homebrew-provided Python bindings\n\nSome formulae provide Python bindings.\n\n**Warning!** Python may crash (see [Common Issues](common-issues)) when you `import <module>` from a brewed Python if you ran `brew install <formula_with_python_bindings>` against the system Python. If you decide to switch to the brewed Python, then reinstall all formulae with Python bindings (e.g. `pyside`, `wxwidgets`, `pyqt`, `pygobject3`, `opencv`, `vtk` and `boost-python`).\n\n## Policy for non-brewed Python bindings\n\nThese should be installed via `pip install <package>`. To discover, you can use `pip search` or <https://pypi.org>.\n\n**Note:** macOS’s system Python does not provide `pip`. Follow the [pip documentation](https://pip.pypa.io/en/stable/installation/) to install it for your system Python if you would like it.\n\n## Brewed Python modules\n\nFor brewed Python, modules installed with `pip3` or `python3 setup.py install` will be installed to the `$(brew --prefix)/lib/pythonX.Y/site-packages` directory (explained above). Executable Python scripts will be in `$(brew --prefix)/bin`.\n\nSince the system Python may not know which compiler flags to set when building bindings for software installed by Homebrew, you may need to run:\n\n``` bash\nCFLAGS=\"-I$(brew --prefix)/include\" LDFLAGS=\"-L$(brew --prefix)/lib\" pip install <package>\n```\n\n## Virtualenv\n\n**Warning!** When you `brew install` formulae that provide Python bindings, you should **not be in an active virtual environment**.\n\nActivate the virtualenv *after* you’ve brewed, or brew in a fresh terminal window. This will ensure Python modules are installed into Homebrew’s `site-packages` and *not* into that of the virtual environment.\n\nVirtualenv has a `--system-site-packages` switch to allow “global” (i.e. Homebrew’s) `site-packages` to be accessible from within the virtualenv.\n\n## Why is Homebrew’s Python being installed as a dependency?\n\nFormulae that declare an unconditional dependency on the `python` formula are bottled against Homebrew’s Python 3.y and require it to be installed.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Homebrew-and-Python](https://docs.brew.sh/Homebrew-and-Python)"
- name: Python for Formula Authors
  id: python-for-formula-authors
  summary: This document explains how to successfully use Python in a Homebrew formula
  description: "# Python for Formula Authors\n\nThis document explains how to successfully use Python in a Homebrew formula.\n\nHomebrew draws a distinction between Python **applications** and Python **libraries**. The difference is that users generally do not care that applications are written in Python; it is unusual that a user would expect to be able to `import foo` after installing an application. Examples of applications are [`ansible`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/ansible.rb) and [`jrnl`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/jrnl.rb).\n\nPython libraries exist to be imported by other Python modules; they are often dependencies of Python applications. They are usually no more than incidentally useful in a terminal. Examples of libraries are [`py2cairo`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/py2cairo.rb) and the bindings that are installed by [`protobuf`](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/protobuf.rb).\n\nBindings are a special case of libraries that allow Python code to interact with a library or application implemented in another language.\n\nHomebrew is happy to accept applications that are built in Python, whether the apps are available from PyPI or not. Homebrew generally won’t accept libraries that can be installed correctly with `pip install foo`. Bindings may be installed for packages that provide them, especially if equivalent functionality isn’t available through pip.\n\nApplications should unconditionally bundle all of their Python-language dependencies and libraries and should install any unsatisfied dependencies; these strategies are discussed in depth in the following sections.\n\n## Applications\n\n### Python declarations\n\nFormulae for apps that require Python 3 **should** declare an unconditional dependency on `\"python@3.x\"`. These apps **must** work with the current Homebrew Python 3.x formula.\n\nApplications that are compatible with Python 2 **should** use the Apple-provided system Python in `/usr/bin` on systems that provide Python 2.7. No explicit Python dependency is needed since `/usr/bin` is always in `PATH` for Homebrew formulae.\n\n### Installing\n\nApplications should be installed into a Python [virtualenv](https://virtualenv.pypa.io/en/stable/) environment rooted in `libexec`. This prevents the app’s Python modules from contaminating the system site-packages and vice versa.\n\nAll of the Python module dependencies of the application (and their dependencies, recursively) should be declared as `resource`s in the formula and installed into the virtualenv, as well. Each dependency should be explicitly specified; please do not rely on `setup.py` or `pip` to perform automatic dependency resolution, for the [reasons described here](acceptable-formulae#we-dont-like-install-scripts-that-download-unversioned-things).\n\nYou can use `brew update-python-resources` to help you write resource stanzas. To use it, simply run `brew update-python-resources <formula>`. Sometimes, `brew update-python-resources` won’t be able to automatically update the resources. If this happens, try running `brew update-python-resources --print-only <formula>` to print the resource stanzas instead of applying the changes directly to the file. You can then copy and paste resources as needed.\n\nIf using `brew update-python-resources` doesn’t work, you can use [homebrew-pypi-poet](https://pypi.python.org/pypi/homebrew-pypi-poet) to help you write resource stanzas. To use it, set up a virtualenv and install your package and all its dependencies. Then, `pip install homebrew-pypi-poet` into the same virtualenv. Running `poet some_package` will generate the necessary resource stanzas. You can do this like:\n\n``` bash\n# Use a temporary directory for the virtual environment\ncd \"$(mktemp -d)\"\n\n# Create and source a new virtual environment in the venv/ directory\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install the package of interest as well as homebrew-pypi-poet\npip install some_package homebrew-pypi-poet\npoet some_package\n\n# Destroy the virtual environment\ndeactivate\nrm -rf venv\n```\n\nHomebrew provides helper methods for instantiating and populating virtualenvs. You can use them by putting `include Language::Python::Virtualenv` at the top of the `Formula` class definition.\n\nFor most applications, all you will need to write is:\n\n``` ruby\ndef install\n  virtualenv_install_with_resources\nend\n```\n\nThis is exactly the same as writing:\n\n``` ruby\ndef install\n  # Create a virtualenv in `libexec`. If your app needs Python 3, make sure that\n  # `depends_on \"python\"` is declared, and use `virtualenv_create(libexec, \"python3\")`.\n  venv = virtualenv_create(libexec)\n  # Install all of the resources declared on the formula into the virtualenv.\n  venv.pip_install resources\n  # `pip_install_and_link` takes a look at the virtualenv's bin directory\n  # before and after installing its argument. New scripts will be symlinked\n  # into `bin`. `pip_install_and_link buildpath` will install the package\n  # that the formula points to, because buildpath is the location where the\n  # formula's tarball was unpacked.\n  venv.pip_install_and_link buildpath\nend\n```\n\n### Example\n\nInstalling a formula with dependencies will look like this:\n\n``` ruby\nclass Foo < Formula\n  include Language::Python::Virtualenv\n\n  url \"...\"\n\n  resource \"six\" do\n    url \"https://pypi.python.org/packages/source/s/six/six-1.9.0.tar.gz\"\n    sha256 \"e24052411fc4fbd1f672635537c3fc2330d9481b18c0317695b46259512c91d5\"\n  end\n\n  resource \"parsedatetime\" do\n    url \"https://pypi.python.org/packages/source/p/parsedatetime/parsedatetime-1.4.tar.gz\"\n    sha256 \"09bfcd8f3c239c75e77b3ff05d782ab2c1aed0892f250ce2adf948d4308fe9dc\"\n  end\n\n  def install\n    virtualenv_install_with_resources\n  end\nend\n```\n\nYou can also use the more verbose form and request that specific resources be installed:\n\n``` ruby\ndef install\n  venv = virtualenv_create(libexec)\n  %w[six parsedatetime].each do |r|\n    venv.pip_install resource(r)\n  end\n  venv.pip_install_and_link buildpath\nend\n```\n\nin case you need to do different things for different resources.\n\n## Bindings\n\nTo add bindings for Python 3, please add `depends_on \"python@3.x\"` to work with the current Homebrew Python 3.x formula.\n\nBuild Python 2 bindings with the system Python by default (don’t add an option) and they should be usable with any binary-compatible Python. If that isn’t the case, it’s an upstream bug; [here’s some advice for resolving it](https://blog.tim-smith.us/2015/09/python-extension-modules-os-x/).\n\n### Dependencies\n\nBindings should follow the same advice for Python module dependencies as libraries; see below for more.\n\n### Installing bindings\n\nIf the bindings are installed by invoking a `setup.py`, do something like:\n\n``` ruby\ncd \"source/python\" do\n  system Formula[\"python@3.x\"].opt_bin/\"python3\", *Language::Python.setup_install_args(prefix)\nend\n```\n\nIf the configure script takes a `--with-python` flag, it usually will not need extra help finding Python.\n\nIf the `configure` and `make` scripts do not want to install into the Cellar, sometimes you can:\n\n1.  call `./configure --without-python` (or a similar named option)\n2.  `cd` into the directory containing the Python bindings\n3.  call `setup.py` with `system` and `Language::Python.setup_install_args` (as described above)\n\nSometimes we have to edit a `Makefile` on-the-fly to use our prefix for the Python bindings using Homebrew’s [`inreplace`](formula-cookbook#inreplace) helper method.\n\n## Libraries\n\n### Python declarations\n\nLibraries built for Python 3 should include `depends_on \"python@3.x\"`, which will bottle against Homebrew’s Python 3.x. Python 2.x libraries must function when they are installed against either the system Python or brewed Python.\n\nPython 2 libraries need a `uses_from_macos \"python@2\"` declaration; they will be built with the system Python, but should still be usable with any other Python 2.7. If this is not the case, it’s an upstream bug; [here’s some advice for resolving it](https://blog.tim-smith.us/2015/09/python-extension-modules-os-x/).\n\n### Installing\n\nLibraries may be installed to `libexec` and added to `sys.path` by writing a `.pth` file (named like “homebrew-foo.pth”) to the `prefix` site-packages. This simplifies the ensuing drama if `pip` is accidentally used to upgrade a Homebrew-installed package and prevents the accumulation of stale .pyc files in Homebrew’s site-packages.\n\nMost formulae presently just install to `prefix`.\n\n### Dependencies\n\nThe dependencies of libraries must be installed so that they are importable. To minimise the potential for linking conflicts, dependencies should be installed to `libexec/<vendor>` and added to `sys.path` by writing a second `.pth` file (named like “homebrew-foo-dependencies.pth”) to the `prefix` site-packages.\n\n## Further down the rabbit hole\n\nAdditional commentary that explains why Homebrew does some of the things it does.\n\n### setuptools vs. distutils vs. pip\n\nDistutils is a module in the Python standard library that provides developers a basic package management API. Setuptools is a module distributed outside the standard library that extends distutils. It is a convention that Python packages provide a `setup.py` that calls the `setup()` function from either distutils or setuptools.\n\nSetuptools provides the `easy_install` command, which is an end-user package management tool that fetches and installs packages from PyPI, the Python Package Index. `pip` is another, newer end-user package management tool, which is also provided outside the standard library. While pip supplants `easy_install`, pip does not replace the other functionality of the setuptools module.\n\nDistutils and pip use a “flat” installation hierarchy that installs modules as individual files under site-packages while `easy_install` installs zipped eggs to site-packages instead.\n\nDistribute (not to be confused with distutils) is an obsolete fork of setuptools. Distlib is a package maintained outside the standard library which is used by pip for some low-level packaging operations and is not relevant to most `setup.py` users.\n\n### Running `setup.py`\n\nIn the event that a formula needs to interact with `setup.py` instead of calling `pip`, Homebrew provides a helper method, `Language::Python.setup_install_args`, which returns useful arguments for invoking `setup.py`. Your formula should use this instead of invoking `setup.py` explicitly. The syntax is:\n\n``` ruby\nsystem Formula[\"python@3.x\"].opt_bin/\"python3\", *Language::Python.setup_install_args(prefix)\n```\n\nwhere `prefix` is the destination prefix (usually `libexec` or `prefix`).\n\n### What is `--single-version-externally-managed`?\n\n`--single-version-externally-managed` (“SVEM”) is a setuptools-only [argument to `setup.py install`](https://setuptools.readthedocs.io/en/latest/setuptools.html?#install-run-easy-install-or-old-style-installation). The primary effect of SVEM is to use distutils to perform the install instead of using setuptools’ `easy_install`.\n\n`easy_install` does a few things that we need to avoid:\n\n- fetches and installs dependencies\n- upgrades dependencies in `sys.path` in-place\n- writes `.pth` and `site.py` files which aren’t useful for us and cause link conflicts\n\nSetuptools requires that SVEM is used in conjunction with `--record`, which provides a list of files that can later be used to uninstall the package. We don’t need or want this because Homebrew can manage uninstallation but since setuptools demands it we comply. The Homebrew convention is to call the record file “installed.txt”.\n\nDetecting whether a `setup.py` uses `setup()` from setuptools or distutils is difficult, but we always need to pass this flag to setuptools-based scripts. `pip` faces the same problem that we do and forces `setup()` to use the setuptools version by loading a shim around `setup.py` that imports setuptools before doing anything else. Since setuptools monkey-patches distutils and replaces its `setup` function, this provides a single, consistent interface. We have borrowed this code and use it in `Language::Python.setup_install_args`.\n\n### `--prefix` vs `--root`\n\n`setup.py` accepts a slightly bewildering array of installation options. The correct switch for Homebrew is `--prefix`, which automatically sets the `--install-foo` family of options using sane POSIX-y values.\n\n`--root` [is used](https://mail.python.org/pipermail/distutils-sig/2010-November/017099.html) when installing into a prefix that will not become part of the final installation location of the files, like when building a .rpm or binary distribution. When using a `setup.py`-based setuptools, `--root` has the side effect of activating `--single-version-externally-managed`. It is not safe to use `--root` with an empty `--prefix` because the `root` is removed from paths when byte-compiling modules.\n\nIt is probably safe to use `--prefix` with `--root=/`, which should work with either setuptools or distutils-based `setup.py`’s but is kinda ugly.\n\n### `pip` vs. `setup.py`\n\n[PEP 453](https://legacy.python.org/dev/peps/pep-0453/#recommendations-for-downstream-distributors) makes a recommendation to downstream distributors (us) that sdist tarballs should be installed with `pip` instead of by invoking `setup.py` directly. We do not do this because Apple’s Python distribution does not include pip, so we can’t assume that pip is available. We could do something clever to work around Apple’s piplessness but the value proposition is not yet clear.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Python-for-Formula-Authors](https://docs.brew.sh/Python-for-Formula-Authors)"
- name: Querying brew
  id: querying-brew
  summary: In this document we will be using jq to parse JSON, available from Homebrew using brew install jq
  description: "# Querying `brew`\n\n*In this document we will be using [jq](https://stedolan.github.io/jq/) to parse JSON, available from Homebrew using `brew install jq`.*\n\n## Overview\n\n`brew` provides commands for getting common types of information out of the system. `brew list` shows installed formulae. `brew deps foo` shows the dependencies that `foo` needs.\n\nAdditional commands, including external commands, can of course be written to provide more detailed information. There are a couple of disadvantages here. First, it requires writing Ruby against a possibly changing Homebrew codebase. There will be more code to touch during refactors, and Homebrew can’t guarantee that external commands will continue to work. Second, it requires designing the commands themselves, specifying input parameters and output formats.\n\nTo enable users to do rich queries without the problems above, Homebrew provides the `brew info` command.\n\n## `brew info --json`\n\n`brew info` can output JSON-formatted information about formulae. This JSON can then be parsed using your tools of choice. See more details in `brew info --help`.\n\nThe default schema version is `v1`, which returns info about formulae; specify `--json=v2` to include both formulae and casks. Note that fields may be added to the schema as needed without incrementing the schema. Any significant breaking changes will cause a change to the schema version.\n\nThe schema itself is not currently documented outside of the code in [`formula.rb`](https://github.com/Homebrew/brew/blob/2e6b6ab3a20da503ba2a22a37fdd6bd936d818ed/Library/Homebrew/formula.rb#L1922-L2017) that generates it.\n\n## Examples\n\n*The top-level element of the JSON output is always an array, so the `map` operator is used to act on the data.*\n\n### Pretty-print a single formula’s info\n\n``` bash\nbrew info --json=v1 tig | jq .\n```\n\n### Installed formulae\n\nTo show full JSON information about all installed formulae:\n\n``` bash\nbrew info --json=v1 --all | jq \"map(select(.installed != []))\"\n```\n\nYou’ll note that processing all formulae can be slow; it’s quicker to let `brew` do this:\n\n``` bash\nbrew info --json=v1 --installed\n```\n\n### Linked keg-only formulae\n\nSome formulae are marked as “keg-only”, meaning that installed files are not linked to the shared `bin`, `lib`, etc. directories, as doing so can cause conflicts. Such formulae can be forced to link to the shared directories, but doing so is not recommended (and will cause `brew doctor` to complain.)\n\nTo find the names of linked keg-only formulae:\n\n``` bash\nbrew info --json=v1 --installed | jq \"map(select(.keg_only == true and .linked_keg != null) | .name)\"\n```\n\n### Unlinked normal formulae\n\nTo find the names of normal (not keg-only) formulae that are installed, but not linked to the shared directories:\n\n``` bash\nbrew info --json=v1 --installed | jq \"map(select(.keg_only == false and .linked_keg == null) | .name)\"\n```\n\n## formulae.brew.sh\n\n[formulae.brew.sh](https://formulae.brew.sh) has a [documented JSON API](https://formulae.brew.sh/docs/api/) which provides access to the `brew info --json=v1` output without needing access to Homebrew.\n\n## Concluding remarks\n\nBy using the JSON output, queries can be made against Homebrew with less risk of being broken due to Homebrew code changes, and without needing to understand Homebrew’s Ruby internals.\n\nIf the JSON output does not provide some information that it ought to, please submit a request, preferably with a patch to add the desired information.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Querying-Brew](https://docs.brew.sh/Querying-Brew)"
- name: Releases
  id: releases
  summary: Since Homebrew 1.0.0 most Homebrew users (those who haven’t run a dev-cmd or set HOMEBREW_DEVELOPER=1 which is ~99.9% based on analytics data) require tags on the Homebrew/brew repository in order to get new versions of Homebrew
  description: "# Releases\n\nSince Homebrew 1.0.0 most Homebrew users (those who haven’t run a `dev-cmd` or set `HOMEBREW_DEVELOPER=1` which is ~99.9% based on analytics data) require tags on the [Homebrew/brew repository](https://github.com/homebrew/brew) in order to get new versions of Homebrew. There are a few steps in making a new Homebrew release:\n\n1.  Check the [Homebrew/brew pull requests](https://github.com/homebrew/brew/pulls), [issues](https://github.com/homebrew/brew/issues), [Homebrew/homebrew-core issues](https://github.com/homebrew/homebrew-core/issues) and [Homebrew/discussions (forum)](https://github.com/homebrew/discussions/discussions) to see if there is anything pressing that needs to be fixed or merged before the next release. If so, fix and merge these changes.\n2.  Ensure that no code changes have happened for at least a couple of hours (ideally 4 hours), at least one Homebrew/homebrew-core pull request CI job has completed successfully, checked the state of the Homebrew/brew `master` CI job (i.e. main jobs green or green after rerunning), and that you are confident there are no major regressions on the current `master`, branch.\n3.  Run `brew release` to create a new draft release. For major or minor version bumps, pass `--major` or `--minor`, respectively.\n4.  Publish the draft release on [GitHub](https://github.com/Homebrew/brew/releases).\n\nIf this is a major or minor release (e.g. X.0.0 or X.Y.0) then there are a few more steps:\n\n1.  Before creating the tag you should delete any `odisabled` code, make any `odeprecated` code `odisabled`, uncomment any `# odeprecated` code and add any new `odeprecations` that are desired. Also delete any command argument definitions that pass `replacement: ...`.\n2.  Write up a release notes blog post to <https://brew.sh> e.g. [brew.sh#319](https://github.com/Homebrew/brew.sh/pull/319). This should use the output from `brew release [--major|--minor]` as input but have the wording adjusted to be more human readable and explain not just what has changed but why.\n3.  When the release has shipped and the blog post has been merged, tweet the blog post as the [@MacHomebrew Twitter account](https://twitter.com/MacHomebrew) or tweet it yourself and retweet it with the @MacHomebrew Twitter account (credentials are in 1Password).\n4.  Consider whether to submit it to other sources e.g. Hacker News, Reddit.\n    - Pros: gets a wider reach and user feedback\n    - Cons: negative comments are common and people take this as a chance to complain about Homebrew (regardless of their usage)\n\nPlease do not manually create a release based on older commits on the `master` branch. It’s very hard to judge whether these have been sufficiently tested by users or if they will cause negative side-effects with the current state of Homebrew/homebrew-core. If a new branch is needed ASAP but there are things on `master` that cannot be released yet (e.g. new deprecations and you want to make a patch release) then revert the relevant PRs, follow the process above and then revert the reverted PRs to reapply them on `master`.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Releases](https://docs.brew.sh/Releases)"
- name: Renaming a Formula
  id: rename-a-formula
  summary: Sometimes software and formulae need to be renamed
  description: "# Renaming a Formula\n\nSometimes software and formulae need to be renamed. To rename a formula you need to:\n\n1.  Rename the formula file and its class to a new formula. The new name must meet all the usual rules of formula naming. Fix any test failures that may occur due to the stricter requirements for new formulae than existing formulae (i.e. `brew audit --online --new-formula` must pass for that formula).\n\n2.  Create a pull request to the corresponding tap deleting the old formula file, adding the new formula file, and adding it to `formula_renames.json` with a commit message like `newack: renamed from ack`. Use the canonical name (e.g. `ack` instead of `user/repo/ack`).\n\nA `formula_renames.json` example for a formula rename:\n\n``` json\n{\n  \"ack\": \"newack\"\n}\n```\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Rename-A-Formula](https://docs.brew.sh/Rename-A-Formula)"
- name: Taps
  id: taps
  summary: The brew tap command adds more repositories to the list of formulae that Homebrew tracks, updates, and installs from
  description: "# Taps (Third-Party Repositories)\n\nThe `brew tap` command adds more repositories to the list of formulae that Homebrew tracks, updates, and installs from. By default, `tap` assumes that the repositories come from GitHub, but the command isn’t limited to any one location.\n\n## The `brew tap` command\n\n- `brew tap` without arguments lists all currently tapped repositories. For example:\n\n  ``` bash\n  $ brew tap\n  homebrew/cask\n  homebrew/core\n  petere/postgresql\n  ```\n\n- `brew tap <user/repo>` makes a clone of the repository at *https://github.com/\\<user\\>/homebrew-\\<repo\\>* into `$(brew --repository)/Library/Taps`. After that, `brew` will be able to work with those formulae as if they were in Homebrew’s [homebrew/core](https://github.com/Homebrew/homebrew-core) canonical repository. You can install and uninstall them with `brew [un]install`, and the formulae are automatically updated when you run `brew update`. (See below for details about how `brew tap` handles the names of repositories.)\n\n&nbsp;\n\n- `brew tap <user/repo> <URL>` makes a clone of the repository at *URL*. Unlike the one-argument version, *URL* is not assumed to be GitHub, and it doesn’t have to be HTTP. Any location and any protocol that Git can handle is fine, although non-GitHub taps require running `brew tap --force-auto-update <user/repo>` to enable automatic updating.\n\n- `brew tap --repair` migrates tapped formulae from a symlink-based to directory-based structure. (This should only need to be run once.)\n\n- `brew untap user/repo [user/repo user/repo ...]` removes the given taps. The repositories are deleted and `brew` will no longer be aware of their formulae. `brew untap` can handle multiple removals at once.\n\n## Repository naming conventions and assumptions\n\nOn GitHub, your repository must be named `homebrew-something` to use the one-argument form of `brew tap`. The prefix “homebrew-“ is not optional. (The two-argument form doesn’t have this limitation, but it forces you to give the full URL explicitly.)\n\nWhen you use `brew tap` on the command line, however, you can leave out the “homebrew-“ prefix in commands. That is, `brew tap username/foobar` can be used as a shortcut for the long version: `brew tap username/homebrew-foobar`. `brew` will automatically add back the “homebrew-“ prefix whenever it’s necessary.\n\n## Formula with duplicate names\n\nIf your tap contains a formula that is also present in [homebrew/core](https://github.com/Homebrew/homebrew-core), that’s fine, but you would need to specify its fully qualified name in the form `<user>/<repo>/<formula>` to install your version.\n\nWhenever a `brew install foo` command is issued, `brew` selects which formula to use by searching in the following order:\n\n- core formulae\n- other taps\n\nIf you need a formula to be installed from a particular tap, you can use fully qualified names to refer to them.\n\nIf you were to create a tap for an alternative `vim` formula, the behaviour would be:\n\n``` bash\nbrew install vim                     # installs from homebrew/core\nbrew install username/repo/vim       # installs from your custom repository\n```\n\nAs a result, we recommend you give new names to customized formulae if you want to make them easier to install. Note that there is (intentionally) no way of replacing dependencies of core formulae with those from other taps.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Taps](https://docs.brew.sh/Taps)"
- name: Tips and Tricks
  id: tips-n'-tricks
  summary: Some formulae in homebrew/core are made available as versioned formulae using a special naming format, e.g
  description: "# Tips and Tricks\n\n## Install previous versions of formulae\n\nSome formulae in `homebrew/core` are made available as [versioned formulae](versions) using a special naming format, e.g. `gcc@7`. If the version you’re looking for isn’t available, consider using `brew extract`.\n\n## Quickly remove something from Homebrew’s prefix\n\n``` bash\nbrew unlink <formula>\n```\n\nThis can be useful if a package can’t build against the version of something you have linked into Homebrew’s prefix.\n\nAnd of course, you can simply `brew link <formula>` again afterwards!\n\n## Pre-download a file for a formula\n\nSometimes it’s faster to download a file via means other than the strategies that are available as part of Homebrew. For example, Erlang provides a torrent that’ll let you download at 4–5× compared to the normal HTTP method.\n\nDownloads are saved in the `downloads` subdirectory of Homebrew’s cache directory (as specified by `brew --cache`, e.g. `~/Library/Caches/Homebrew`) and renamed as `<url-hash>--<formula>-<version>`. The command `brew --cache --build-from-source <formula>` will print the expected path of the cached download, so after downloading the file, you can run `mv the_tarball \"$(brew --cache --build-from-source <formula>)\"` to relocate it to the cache.\n\nYou can also pre-cache the download by using the command `brew fetch <formula>` which also displays the SHA-256 hash. This can be useful for updating formulae to new versions.\n\n## Install stuff without the Xcode CLT\n\n``` bash\nbrew sh          # or: eval \"$(brew --env)\"\ngem install ronn # or c-programs\n```\n\nThis imports the `brew` environment into your existing shell; `gem` will pick up the environment variables and be able to build. As a bonus, `brew`’s automatically determined optimization flags are set.\n\n## Install only a formula’s dependencies (not the formula)\n\n``` bash\nbrew install --only-dependencies <formula>\n```\n\n## Use the interactive Homebrew shell\n\n``` bash\n$ brew irb\n==> Interactive Homebrew Shell\nExample commands available with: `brew irb --examples`\nirb(main):001:0> Formulary.factory(\"ace\").methods - Object.methods\n=> [:install, :test, :test_defined?, :sbin, :pkgshare, :elisp,\n:frameworks, :kext_prefix, :any_version_installed?, :etc, :pkgetc,\n...\n:on_macos, :on_linux, :debug?, :quiet?, :verbose?, :with_context]\nirb(main):002:0>\n```\n\n## Hide the beer mug emoji when finishing a build\n\n``` bash\nexport HOMEBREW_NO_EMOJI=1\n```\n\nThis sets the `HOMEBREW_NO_EMOJI` environment variable, causing Homebrew to hide all emoji.\n\nThe beer emoji can also be replaced with other character(s):\n\n``` bash\nexport HOMEBREW_INSTALL_BADGE=\"☕️ 🐸\"\n```\n\n## Editor plugins\n\n### Sublime Text\n\n- [Homebrew-formula-syntax](https://github.com/samueljohn/Homebrew-formula-syntax) can be installed with Package Control in Sublime Text 2/3, which adds highlighting for inline patches.\n\n### Vim\n\n- [brew.vim](https://github.com/xu-cheng/brew.vim) adds highlighting to inline patches in Vim.\n\n### Emacs\n\n- [homebrew-mode](https://github.com/dunn/homebrew-mode) provides syntax highlighting for inline patches as well as a number of helper functions for editing formula files.\n\n- [pcmpl-homebrew](https://github.com/hiddenlotus/pcmpl-homebrew) provides completion for emacs shell-mode and eshell-mode.\n\n### Atom\n\n- [language-homebrew-formula](https://atom.io/packages/language-homebrew-formula) adds highlighting and diff support (with the [language-diff](https://atom.io/packages/language-diff) plugin).\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Tips-N'-Tricks](https://docs.brew.sh/Tips-N'-Tricks)"
- name: Troubleshooting
  id: troubleshooting
  summary: This document will help you check for common issues and make sure your issue has not already been reported
  description: "# Troubleshooting\n\n**Run `brew update` twice and `brew doctor` (and fix all the warnings) *before* creating an issue!**\n\nThis document will help you check for common issues and make sure your issue has not already been reported.\n\n## Check for common issues\n\n- Read through the list of [Common Issues](common-issues).\n\n## Check to see if the issue has been reported\n\n- Search the appropriate issue tracker to see if someone else has already reported the same issue:\n  - [Homebrew/homebrew-core issue tracker](https://github.com/Homebrew/homebrew-core/issues) (formulae)\n  - [Homebrew/homebrew-cask issue tracker](https://github.com/Homebrew/homebrew-cask/issues) (casks)\n  - [Homebrew/brew issue tracker](https://github.com/Homebrew/brew/issues) (`brew` itself)\n- If the formula or cask that has failed to install is part of a non-Homebrew tap, then check that tap’s issue tracker instead.\n- Search the [Homebrew discussion forum](https://github.com/homebrew/discussions/discussions) or [Discourse archive](https://discourse.brew.sh/) to see if any discussions have started about the issue.\n\n## Create an issue\n\nIf your problem hasn’t been solved or reported, then create an issue:\n\n1.  Collect debugging information:\n    - If you have a problem with installing a formula: run `brew gist-logs <formula>` (where `<formula>` is the name of the formula) to upload the logs to a new [Gist](https://gist.github.com).\n    - If your have a non-formula problem: collect the output of `brew config` and `brew doctor`.\n2.  Create a new issue on the issue tracker for [Homebrew/homebrew-core](https://github.com/Homebrew/homebrew-core/issues/new/choose), [Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask/issues/new/choose) or [Homebrew/brew](https://github.com/Homebrew/brew/issues/new/choose) and follow the instructions:\n    - Give your issue a descriptive title which includes the formula name (if applicable) and the version of macOS or Linux you are using. For example, if a formula fails to build, title your issue “\\<formula\\> failed to build on \\<platform\\>”, where “\\<formula\\>” is the name of the formula that failed to build, and “\\<platform\\>” is the name and version of macOS or Linux you are using.\n    - Include the URL provided by `brew gist-logs <formula>` (if applicable) plus links to any additional Gists you may have created.\n    - Include the output of `brew config` and `brew doctor`.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Troubleshooting](https://docs.brew.sh/Troubleshooting)"
- name: Type Checking With Sorbet
  id: typechecking
  summary: The majority of the code in Homebrew is written in Ruby which is a dynamic language
  description: "# Type Checking With Sorbet\n\nThe majority of the code in Homebrew is written in Ruby which is a dynamic language. To avail the benefits of static type checking, we have set up Sorbet in our codebase which provides the benefits of static type checking to dynamic languages like Ruby.\n\nThe [Sorbet Documentation](https://sorbet.org/docs/overview) is a good place to get started if you want to dive deeper into Sorbet and it’s abilities.\n\n## Sorbet in the Homebrew Codebase\n\n### Inline Type Annotations\n\nTo add type annotations to a class or module, we need to first extend it with the `T::Sig` module (read this as `Type::Signature`). This adds the `sig` method which is used to annotate method signatures. Here’s a simple example:\n\n``` ruby\nclass MyClass\n  extend T::Sig\n\n  sig { params(name: String).returns(String) }\n  def my_method(name)\n    \"Hello, #{name}!\"\n  end\nend\n```\n\nWith `params`, we specify that we have a parameter `name` which must be a `String` and with `returns`, we specify that this method always returns a `String`.\n\nFor more information on how to express more complex types, refer to the official documentation:\n\n- [Method Signatures](https://sorbet.org/docs/sigs)\n- [Class Types](https://sorbet.org/docs/class-types)\n- [Nilable Types](https://sorbet.org/docs/nilable-types)\n- [Union Types](https://sorbet.org/docs/union-types)\n\n### Ruby Interface Files (`.rbi`)\n\nRBI files help Sorbet learn about constants, ancestors and methods defined in ways it doesn’t understand natively. We can also create a RBI file to help Sorbet understand dynamic definitions.\n\nSometimes it is necessary to explicitly include the `Kernel` module in order for Sorbet to know that methods such as `puts` are available in a given context. This is mostly necessary for modules since they can be used in both `BasicObject`s (which don’t include `Kernel`) and `Object`s (which include `Kernel` by default). In this case, it is necessary to create an `.rbi` file ([example](https://github.com/Homebrew/brew/blob/61b79318ed089b5010501e2cbf163fd8e48e2dfc/Library/Homebrew/global.rbi)) since re-including the `Kernel` module in actual code can break things.\n\nRead more about RBI files [here](https://sorbet.org/docs/rbi).\n\n### The [`Library/Homebrew/sorbet`](https://github.com/Homebrew/brew/tree/master/Library/Homebrew/sorbet) Directory\n\n- The `rbi` directory contains all Ruby Interface (`.rbi`) files auto-generated by running `brew typecheck --update`:\n\n  - RBI files for all gems are generated using [Tapioca](https://github.com/Shopify/tapioca#tapioca).\n  - Definitions for dynamic code (i.e. meta-programming) are generated using `srb rbi hidden-definitions`.\n  - Definitions for missing constants are generated using `srb rbi todo`.\n\n- The `config` file is a newline-separated list of arguments to pass to `srb tc`, the same as if they’d been passed at the command-line. Arguments in the config file are always passed first, followed by arguments provided on the command-line. We use it to ignore Gem directories which we do not wish to type check.\n\n- Every Ruby file in the codebase has a magic `# typed: <level>` comment at the top, where `<level>` is one of [Sorbet’s strictness levels](https://sorbet.org/docs/static#file-level-granularity-strictness-levels), usually `false`, `true` or `strict`. The `false` files only report errors related to the syntax, constant resolution and correctness of the method signatures, but no type errors. Our long-term goal is to move all `false` files to `true` and start reporting type errors on those files as well. Therefore, when adding new files, you should ideally mark it with `# typed: true` and work out any resulting type errors.\n\n## Using `brew typecheck`\n\nWhen run without any arguments, `brew typecheck`, will run considering the strictness levels set in each of the individual Ruby files in the core Homebrew codebase. However, when it is run on a specific file or directory, more errors may show up since Sorbet cannot resolve constants defined outside the scope of the specified file. These problems can be solved with RBI files. Currently `brew typecheck` provides `--quiet`, `--file`, `--dir` and `--ignore` options but you can explore more options with `srb tc --help` and passing them with `srb tc`.\n\n## Resolving Type Errors\n\nSorbet reports type errors along with an error reference code, which can be used to look up more information on how to debug the error, or what causes the error in the [Sorbet Documentation](https://sorbet.org/docs/overview). Here is how to debug some common type errors:\n\n- Using `T.reveal_type`. In files which are `true` or higher, if we wrap a variable or method call in `T.reveal_type`, Sorbet will show us what type it thinks that variable has in the output of `srb tc`. This is particularly useful when writing [method signatures](https://sorbet.org/docs/sigs) and debugging. Make sure to remove this line from your code before committing your changes, since this is just a debugging tool.\n\n- One of the most frequent errors that we’ve encountered is: `7003: Method does not exist.` Since Ruby is a very dynamic language, methods can be defined in ways Sorbet cannot see statically. In such cases, check if the method exists at runtime, if not, then Sorbet has caught a future bug! But, it is also possible that even though a method exists at runtime, Sorbet cannot see it. In such cases, we use [`.rbi` files](#ruby-interface-files-rbi).\n\n- Since Sorbet does not automatically assume that Kernel is to be included in Modules, we may encounter many errors while trying to use methods like `puts`, `ohai`, `odebug` et cetera. A simple workaround for this would be to add an extra `include Kernel` line in the respective RBI file.\n\n- The tips above are very generic and apply to lots of cases. For some common gotchas when using Sorbet, refer to the [Sorbet Error Reference](https://sorbet.org/docs/error-reference) and [FAQ](https://sorbet.org/docs/faq).\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Typechecking](https://docs.brew.sh/Typechecking)"
- name: Updating Software in Homebrew
  id: updating-software-in-homebrew
  summary: Did you find something in Homebrew that wasn’t the latest version? You can help yourself and others by submitting a pull request to update the formula
  description: "# Updating Software in Homebrew\n\nDid you find something in Homebrew that wasn’t the latest version? You can help yourself and others by submitting a pull request to update the formula.\n\nFirst, check the pull requests in the Homebrew tap repositories to make sure a PR isn’t already open. If you’re submitting a [formula](formula-cookbook#homebrew-terminology), check [homebrew-core](https://github.com/Homebrew/homebrew-core/pulls). If you’re submitting a [cask](formula-cookbook#homebrew-terminology), check [homebrew-cask](https://github.com/Homebrew/homebrew-cask/pulls). You may also want to look through closed pull requests in the repositories, as sometimes packages run into problems preventing them from being updated and it’s better to be aware of any issues before putting significant effort into an update.\n\nThe [How To Open a Homebrew Pull Request](how-to-open-a-homebrew-pull-request) documentation should explain most everything you need to know about the process of creating a PR for a version update. For simple updates, this typically involves changing the URL and SHA256 values.\n\nHowever, some updates require additional changes to the package. You can look back at previous pull requests to see how others have handled things in the past but be sure to look at a variety of PRs. Sometimes packages aren’t updated properly, so you may need to use your judgment to determine how to best proceed.\n\nOnce you’ve created the pull request in the appropriate Homebrew repository your commit(s) will be tested on our continuous integration servers, showing a green check mark if everything passed or a red X if there were failures. Maintainers will review your pull request and provide feedback about any changes that need to be made before it can be merged.\n\nWe appreciate your help in keeping Homebrew’s repositories up to date as new versions of software are released!\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Updating-Software-in-Homebrew](https://docs.brew.sh/Updating-Software-in-Homebrew)"
- name: Versions
  id: versions
  summary: homebrew/core supports multiple versions of formulae with a special naming format
  description: "# Versions\n\n[homebrew/core](https://github.com/homebrew/homebrew-core) supports multiple versions of formulae with a special naming format. For example, the formula for GCC 6 is named `gcc@6.rb` and begins with `class GccAT6 < Formula`.\n\n## Acceptable versioned formulae\n\nVersioned formulae we include in [homebrew/core](https://github.com/homebrew/homebrew-core) must meet the following standards:\n\n- Versioned software should build on all Homebrew’s supported versions of macOS.\n- Versioned formulae should differ in major/minor (not patch) versions from the current stable release. This is because patch versions indicate bug or security updates, and we want to ensure you apply security updates.\n- Unstable versions (alpha, beta, development versions) are not acceptable for versioned (or unversioned) formulae.\n- Upstream should have a release branch for each formula version, and have an explicit policy of releasing security updates for each version when necessary. For example, [PHP 7.0 was not a supported version but PHP 7.2 was](https://php.net/supported-versions.php) in January 2020. By contrast, most software projects are structured to only release security updates for their latest versions, so their earlier versions are not eligible for versioning.\n- Versioned formulae should share a codebase with the main formula. If the project is split into a different repository, we recommend creating a new formula (`formula2` rather than `formula@2` or `formula@1`).\n- Formulae that depend on versioned formulae must not depend on the same formulae at two different versions twice in their recursive dependencies. For example, if you depend on `openssl@1.0` and `foo`, and `foo` depends on `openssl` then you must instead use `openssl`.\n- Versioned formulae should only be linkable at the same time as their non-versioned counterpart if the upstream project provides support for it, e.g. using suffixed binaries. If this is not possible, use `keg_only :versioned_formula` to allow users to have multiple versions installed at once.\n- A `keg_only :versioned_formula` should not `post_install` anything in the `HOMEBREW_PREFIX` that conflicts with or duplicates the main counterpart (or other versioned formulae). For example, a `node@6` formula should not install its `npm` into `HOMEBREW_PREFIX` like the `node` formula does.\n- Versioned formulae submitted should be expected to be used by a large number of people. If this ceases to be the case, they will be removed. We will aim not to remove those in the [top 3,000 `install_on_request` formulae](https://brew.sh/analytics/install-on-request/).\n- Versioned formulae should not have `resource`s that require security updates. For example, a `node@6` formula should not have an `npm` resource but instead rely on the `npm` provided by the upstream tarball.\n- Versioned formulae should be as similar as possible and sensible compared to the main formulae. Creating or updating a versioned formula should be a chance to ask questions of the main formula and vice versa, e.g. can some unused or useless options be removed or made default?\n- No more than five versions of a formula (including the main one) will be supported at any given time, regardless of usage. When removing formulae that violate this, we will aim to do so based on usage and support status rather than age.\n- Versioned formulae must be ABI stable for the lifetime of the version branch. Updates to the versioned formula must not introduce ABI incompatibilities or otherwise require dependents to be revision bumped. In practice, this means that their dependents should never need `revision` bumps to be rebuilt against newer versions. Version updates which violate this should be rejected and the formula be deprecated from that point onwards.\n\nHomebrew’s versions should not be used to “pin” formulae to your personal requirements. You should instead create your own [tap](how-to-create-and-maintain-a-tap) for formulae you or your organisation wish to control the versioning of, or those that do not meet the above standards. Software that has regular API or ABI breaking releases still needs to meet all the above requirements; that a `brew upgrade` has broken something for you is not an argument for us to add and maintain a formula for you.\n\nIf there is a formula that currently exists in the Homebrew/homebrew-core repository or has existed in the past (i.e. was migrated or deleted), you can recover it for your own use with the `brew extract` command. This will copy the desired version of the formula into a custom tap. For example, if your project depends on `automake` 1.12 instead of the most recent version, you can obtain the `automake` formula at version 1.12 by running `brew extract automake <YOUR_GITHUB_USER>/<YOUR_TAP_REPOSITORY_NAME> --version=1.12`. Formulae obtained this way may contain deprecated, disabled or removed Homebrew syntax (e.g. checksums may be `sha1` instead of `sha256`); the `brew extract` command does not edit or update formulae to meet current standards and style requirements.\n\nWe may temporarily add versioned formulae for our own needs that do not meet these standards in [homebrew/core](https://github.com/homebrew/homebrew-core). The presence of a versioned formula there does not imply it will be maintained indefinitely or that we are willing to accept any more versions that do not meet the requirements above.\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Versions](https://docs.brew.sh/Versions)"
- name: Xcode
  id: xcode
  summary: Homebrew supports and recommends the latest Xcode and/or Command Line Tools available for your platform (see OS::Mac::Xcode.latest_version and OS::Mac::CLT.latest_clang_version in Library/Homebrew/os/mac/xcode.rb)
  description: "# Xcode\n\n## Supported Xcode versions\n\nHomebrew supports and recommends the latest Xcode and/or Command Line Tools available for your platform (see `OS::Mac::Xcode.latest_version` and `OS::Mac::CLT.latest_clang_version` in [`Library/Homebrew/os/mac/xcode.rb`](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/os/mac/xcode.rb)).\n\n## Updating for new Xcode releases\n\nWhen a new Xcode release is made, the following things need to be updated:\n\n- In [`Library/Homebrew/os/mac/xcode.rb`](https://github.com/Homebrew/brew/blob/HEAD/Library/Homebrew/os/mac/xcode.rb)\n  - `OS::Mac::Xcode.latest_version`\n  - `OS::Mac::CLT.latest_clang_version`\n  - `OS::Mac::Xcode.detect_version_from_clang_version`\n\n© 2009–present Homebrew contributors  \nLicensed under the BSD 2-Clause License.  \n[https://docs.brew.sh/Xcode](https://docs.brew.sh/Xcode)"
