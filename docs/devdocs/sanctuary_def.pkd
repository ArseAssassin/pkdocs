---
name: Sanctuary Def
slug: sanctuary_def
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2020 Sanctuary
  © 2016 Plaid Technologies, Inc.
  Licensed under the MIT License.
  https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/README.md
homepage: https://github.com/sanctuary-js/sanctuary-def

---
- name: Unknown
  id: index#user-content-unknown--type
  summary: Type used to represent missing type information
  description: |-
    ### [`Unknown :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L518)

    Type used to represent missing type information. The type of `[]`, for example, is `Array ???`.

    May be used with type constructors when defining environments. Given a type constructor `List :: Type -> Type`, one could use `List ($.Unknown)` to include an infinite number of types in an environment:

    - `List Number`
    - `List String`
    - `List (List Number)`
    - `List (List String)`
    - `List (List (List Number))`
    - `List (List (List String))`
    - `...`
- name: Void
  id: index#user-content-void--type
  summary: Uninhabited type
  description: |-
    ### [`Void :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L537)

    Uninhabited type.

    May be used to convey that a type parameter of an algebraic data type will not be used. For example, a future of type `Future Void String` will never be rejected.
- name: Any
  id: index#user-content-any--type
  summary: Type comprising every JavaScript value
  description: |-
    ### [`Any :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L549)

    Type comprising every JavaScript value.
- name: AnyFunction
  id: index#user-content-anyfunction--type
  summary: Type comprising every Function value
  description: |-
    ### [`AnyFunction :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L557)

    Type comprising every Function value.
- name: Arguments
  id: index#user-content-arguments--type
  summary: Type comprising every arguments object
  description: |-
    ### [`Arguments :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L565)

    Type comprising every [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.
- name: Array
  id: index#user-content-array--type---type
  summary: Constructor for homogeneous Array types
  description: |-
    ### [`Array :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L573)

    Constructor for homogeneous Array types.
- name: Array0
  id: index#user-content-array0--type
  summary: Type whose sole member is []
  description: |-
    ### [`Array0 :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L582)

    Type whose sole member is `[]`.
- name: Array1
  id: index#user-content-array1--type---type
  summary: Constructor for singleton Array types
  description: |-
    ### [`Array1 :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L590)

    Constructor for singleton Array types.
- name: Array2
  id: index#user-content-array2--type---type---type
  summary: Constructor for heterogeneous Array types of length 2
  description: |-
    ### [`Array2 :: Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L599)

    Constructor for heterogeneous Array types of length 2. `['foo', true]` is a member of `Array2 String Boolean`.
- name: Boolean
  id: index#user-content-boolean--type
  summary: Type comprising true and false
  description: |-
    ### [`Boolean :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L610)

    Type comprising `true` and `false`.
- name: Buffer
  id: index#user-content-buffer--type
  summary: Type comprising every Buffer object
  description: |-
    ### [`Buffer :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L618)

    Type comprising every [Buffer](https://nodejs.org/api/buffer.html#buffer_buffer) object.
- name: Date
  id: index#user-content-date--type
  summary: Type comprising every Date value
  description: |-
    ### [`Date :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L630)

    Type comprising every Date value.
- name: ValidDate
  id: index#user-content-validdate--type
  summary: Type comprising every Date value except new Date (NaN)
  description: |-
    ### [`ValidDate :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L638)

    Type comprising every [`Date`](#Date) value except `new Date (NaN)`.
- name: Descending
  id: index#user-content-descending--type---type
  summary: Descending type constructor
  description: |-
    ### [`Descending :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L646)

    [Descending](https://github.com/sanctuary-js/sanctuary-descending/tree/v2.1.0) type constructor.
- name: Either
  id: index#user-content-either--type---type---type
  summary: Either type constructor
  description: |-
    ### [`Either :: Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L655)

    [Either](https://github.com/sanctuary-js/sanctuary-either/tree/v2.1.0) type constructor.
- name: Error
  id: index#user-content-error--type
  summary: Type comprising every Error value, including values of more specific constructors such as SyntaxError and TypeError
  description: |-
    ### [`Error :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L665)

    Type comprising every Error value, including values of more specific constructors such as [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) and [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).
- name: Fn
  id: index#user-content-fn--type---type---type
  summary: Binary type constructor for unary function types
  description: |-
    ### [`Fn :: Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L674)

    Binary type constructor for unary function types. `$.Fn (I) (O)` represents `I -> O`, the type of functions that take a value of type `I` and return a value of type `O`.
- name: Function
  id: index#user-content-function--nonemptyarraytype---type
  summary: Constructor for Function types
  description: |-
    ### [`Function :: NonEmpty (Array Type) -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L681)

    Constructor for Function types.

    Examples:

    - `$.Function ([$.Date, $.String])` represents the `Date -> String` type; and
    - `$.Function ([a, b, a])` represents the `(a, b) -> a` type.

    &nbsp;
- name: HtmlElement
  id: index#user-content-htmlelement--type
  summary: Type comprising every HTML element
  description: |-
    ### [`HtmlElement :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L721)

    Type comprising every [HTML element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element).
- name: Identity
  id: index#user-content-identity--type---type
  summary: Identity type constructor
  description: |-
    ### [`Identity :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L731)

    [Identity](https://github.com/sanctuary-js/sanctuary-identity/tree/v2.1.0) type constructor.
- name: JsMap
  id: index#user-content-jsmap--type---type---type
  summary: Constructor for native Map types
  description: |-
    ### [`JsMap :: Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L740)

    Constructor for native Map types. `$.JsMap ($.Number) ($.String)`, for example, is the type comprising every native Map whose keys are numbers and whose values are strings.
- name: JsSet
  id: index#user-content-jsset--type---type
  summary: Constructor for native Set types
  description: |-
    ### [`JsSet :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L752)

    Constructor for native Set types. `$.JsSet ($.Number)`, for example, is the type comprising every native Set whose values are numbers.
- name: Maybe
  id: index#user-content-maybe--type---type
  summary: Maybe type constructor
  description: |-
    ### [`Maybe :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L762)

    [Maybe](https://github.com/sanctuary-js/sanctuary-maybe/tree/v2.1.0) type constructor.
- name: Module
  id: index#user-content-module--type
  summary: Type comprising every ES module
  description: |-
    ### [`Module :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L771)

    Type comprising every ES module.
- name: NonEmpty
  id: index#user-content-nonempty--type---type
  summary: Constructor for non-empty types
  description: |-
    ### [`NonEmpty :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L779)

    Constructor for non-empty types. `$.NonEmpty ($.String)`, for example, is the type comprising every [`String`](#String) value except `''`.

    The given type must satisfy the [Monoid](https://github.com/fantasyland/fantasy-land#monoid) and [Setoid](https://github.com/fantasyland/fantasy-land#setoid) specifications.
- name: 'Null'
  id: index#user-content-null--type
  summary: Type whose sole member is null
  description: |-
    ### [`Null :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L795)

    Type whose sole member is `null`.
- name: Nullable
  id: index#user-content-nullable--type---type
  summary: Constructor for types that include null as a member
  description: |-
    ### [`Nullable :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L803)

    Constructor for types that include `null` as a member.
- name: Number
  id: index#user-content-number--type
  summary: Type comprising every primitive Number value (including NaN)
  description: |-
    ### [`Number :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L815)

    Type comprising every primitive Number value (including `NaN`).
- name: PositiveNumber
  id: index#user-content-positivenumber--type
  summary: Type comprising every Number value greater than zero
  description: |-
    ### [`PositiveNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L828)

    Type comprising every [`Number`](#Number) value greater than zero.
- name: NegativeNumber
  id: index#user-content-negativenumber--type
  summary: Type comprising every Number value less than zero
  description: |-
    ### [`NegativeNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L836)

    Type comprising every [`Number`](#Number) value less than zero.
- name: ValidNumber
  id: index#user-content-validnumber--type
  summary: Type comprising every Number value except NaN
  description: |-
    ### [`ValidNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L844)

    Type comprising every [`Number`](#Number) value except `NaN`.
- name: NonZeroValidNumber
  id: index#user-content-nonzerovalidnumber--type
  summary: Type comprising every ValidNumber value except 0 and -0
  description: |-
    ### [`NonZeroValidNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L852)

    Type comprising every [`ValidNumber`](#ValidNumber) value except `0` and `-0`.
- name: FiniteNumber
  id: index#user-content-finitenumber--type
  summary: Type comprising every ValidNumber value except Infinity and -Infinity
  description: |-
    ### [`FiniteNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L860)

    Type comprising every [`ValidNumber`](#ValidNumber) value except `Infinity` and `-Infinity`.
- name: NonZeroFiniteNumber
  id: index#user-content-nonzerofinitenumber--type
  summary: Type comprising every FiniteNumber value except 0 and -0
  description: |-
    ### [`NonZeroFiniteNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L869)

    Type comprising every [`FiniteNumber`](#FiniteNumber) value except `0` and `-0`.
- name: PositiveFiniteNumber
  id: index#user-content-positivefinitenumber--type
  summary: Type comprising every FiniteNumber value greater than zero
  description: |-
    ### [`PositiveFiniteNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L877)

    Type comprising every [`FiniteNumber`](#FiniteNumber) value greater than zero.
- name: NegativeFiniteNumber
  id: index#user-content-negativefinitenumber--type
  summary: Type comprising every FiniteNumber value less than zero
  description: |-
    ### [`NegativeFiniteNumber :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L885)

    Type comprising every [`FiniteNumber`](#FiniteNumber) value less than zero.
- name: Integer
  id: index#user-content-integer--type
  summary: Type comprising every integer in the range [Number.MIN_SAFE_INTEGER .. Number.MAX_SAFE_INTEGER]
  description: |-
    ### [`Integer :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L893)

    Type comprising every integer in the range \[[`Number.MIN_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) .. [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\].
- name: NonZeroInteger
  id: index#user-content-nonzerointeger--type
  summary: Type comprising every Integer value except 0 and -0
  description: |-
    ### [`NonZeroInteger :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L906)

    Type comprising every [`Integer`](#Integer) value except `0` and `-0`.
- name: NonNegativeInteger
  id: index#user-content-nonnegativeinteger--type
  summary: Type comprising every non-negative Integer value (including -0)
  description: |-
    ### [`NonNegativeInteger :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L914)

    Type comprising every non-negative [`Integer`](#Integer) value (including `-0`). Also known as the set of natural numbers under ISO 80000-2:2009.
- name: PositiveInteger
  id: index#user-content-positiveinteger--type
  summary: Type comprising every Integer value greater than zero
  description: |-
    ### [`PositiveInteger :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L923)

    Type comprising every [`Integer`](#Integer) value greater than zero.
- name: NegativeInteger
  id: index#user-content-negativeinteger--type
  summary: Type comprising every Integer value less than zero
  description: |-
    ### [`NegativeInteger :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L931)

    Type comprising every [`Integer`](#Integer) value less than zero.
- name: Object
  id: index#user-content-object--type
  summary: Type comprising every "plain" Object value
  description: |-
    ### [`Object :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L939)

    Type comprising every "plain" Object value. Specifically, values created via:

    - object literal syntax;
    - [`Object.create`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create); or
    - the `new` operator in conjunction with `Object` or a custom constructor function.

    &nbsp;
- name: Pair
  id: index#user-content-pair--type---type---type
  summary: Pair type constructor
  description: |-
    ### [`Pair :: Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L953)

    [Pair](https://github.com/sanctuary-js/sanctuary-pair/tree/v2.1.0) type constructor.
- name: RegExp
  id: index#user-content-regexp--type
  summary: Type comprising every RegExp value
  description: |-
    ### [`RegExp :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L963)

    Type comprising every RegExp value.
- name: GlobalRegExp
  id: index#user-content-globalregexp--type
  summary: Type comprising every RegExp value whose global flag is true
  description: |-
    ### [`GlobalRegExp :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L971)

    Type comprising every [`RegExp`](#RegExp) value whose `global` flag is `true`.

    See also [`NonGlobalRegExp`](#NonGlobalRegExp).
- name: NonGlobalRegExp
  id: index#user-content-nonglobalregexp--type
  summary: Type comprising every RegExp value whose global flag is false
  description: |-
    ### [`NonGlobalRegExp :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L981)

    Type comprising every [`RegExp`](#RegExp) value whose `global` flag is `false`.

    See also [`GlobalRegExp`](#GlobalRegExp).
- name: StrMap
  id: index#user-content-strmap--type---type
  summary: Constructor for homogeneous Object types
  description: |-
    ### [`StrMap :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L991)

    Constructor for homogeneous Object types.

    `{foo: 1, bar: 2, baz: 3}`, for example, is a member of `StrMap Number`; `{foo: 1, bar: 2, baz: 'XXX'}` is not.
- name: String
  id: index#user-content-string--type
  summary: Type comprising every primitive String value
  description: |-
    ### [`String :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1003)

    Type comprising every primitive String value.
- name: RegexFlags
  id: index#user-content-regexflags--type
  summary: null
  description: |-
    ### [`RegexFlags :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1011)

    Type comprising the canonical RegExp flags:

    - `''`
    - `'g'`
    - `'i'`
    - `'m'`
    - `'gi'`
    - `'gm'`
    - `'im'`
    - `'gim'`

    &nbsp;
- name: Symbol
  id: index#user-content-symbol--type
  summary: Type comprising every Symbol value
  description: |-
    ### [`Symbol :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1028)

    Type comprising every Symbol value.
- name: Type
  id: index#user-content-type--type
  summary: Type comprising every Type value
  description: |-
    ### [`Type :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1036)

    Type comprising every `Type` value.
- name: TypeClass
  id: index#user-content-typeclass--type
  summary: Type comprising every TypeClass value
  description: |-
    ### [`TypeClass :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1044)

    Type comprising every [`TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes#TypeClass) value.
- name: Undefined
  id: index#user-content-undefined--type
  summary: Type whose sole member is undefined
  description: |-
    ### [`Undefined :: Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1052)

    Type whose sole member is `undefined`.
- name: env
  id: index#user-content-env--arraytype
  summary: null
  description: |-
    ### [`env :: Array Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1060)

    An array of [types](#types):

    - ` `[`AnyFunction`](#AnyFunction)` `
    - ` `[`Arguments`](#Arguments)` `
    - [`Array`](#Array)` (`[`Unknown`](#Unknown)`)`
    - [`Array2`](#Array2)` (`[`Unknown`](#Unknown)`) (`[`Unknown`](#Unknown)`)`
    - ` `[`Boolean`](#Boolean)` `
    - ` `[`Buffer`](#Buffer)` `
    - ` `[`Date`](#Date)` `
    - [`Descending`](#Descending)` (`[`Unknown`](#Unknown)`)`
    - [`Either`](#Either)` (`[`Unknown`](#Unknown)`) (`[`Unknown`](#Unknown)`)`
    - ` `[`Error`](#Error)` `
    - [`Fn`](#Fn)` (`[`Unknown`](#Unknown)`) (`[`Unknown`](#Unknown)`)`
    - ` `[`HtmlElement`](#HtmlElement)` `
    - [`Identity`](#Identity)` (`[`Unknown`](#Unknown)`)`
    - [`JsMap`](#JsMap)` (`[`Unknown`](#Unknown)`) (`[`Unknown`](#Unknown)`)`
    - [`JsSet`](#JsSet)` (`[`Unknown`](#Unknown)`)`
    - [`Maybe`](#Maybe)` (`[`Unknown`](#Unknown)`)`
    - ` `[`Module`](#Module)` `
    - ` `[`Null`](#Null)` `
    - ` `[`Number`](#Number)` `
    - ` `[`Object`](#Object)` `
    - [`Pair`](#Pair)` (`[`Unknown`](#Unknown)`) (`[`Unknown`](#Unknown)`)`
    - ` `[`RegExp`](#RegExp)` `
    - [`StrMap`](#StrMap)` (`[`Unknown`](#Unknown)`)`
    - ` `[`String`](#String)` `
    - ` `[`Symbol`](#Symbol)` `
    - ` `[`Type`](#Type)` `
    - ` `[`TypeClass`](#TypeClass)` `
    - ` `[`Undefined`](#Undefined)` `

    &nbsp;
- name: test
  id: index#user-content-test--arraytype---type---a---boolean
  summary: Takes an environment, a type, and any value
  description: |-
    ### [`test :: Array Type -⁠> Type -⁠> a -⁠> Boolean`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1495)

    Takes an environment, a type, and any value. Returns `true` if the value is a member of the type; `false` otherwise.

    The environment is only significant if the type contains [type variables](#TypeVariable).

    ## [Type constructors](#type-constructors)

    sanctuary-def provides several functions for defining types.
- name: NullaryType
  id: index#user-content-nullarytype--string---string---arraytype---any-boolean---type
  summary: Type constructor for types with no type variables (such as Number)
  description: |-
    ### [`NullaryType :: String -⁠> String -⁠> Array Type -⁠> (Any -⁠> Boolean) -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1515)

    Type constructor for types with no type variables (such as [`Number`](#Number)).

    To define a nullary type `t` one must provide:

    - the name of `t` (exposed as `t.name`);

    - the documentation URL of `t` (exposed as `t.url`);

    - an array of supertypes (exposed as `t.supertypes`); and

    - a predicate that accepts any value that is a member of every one of the given supertypes, and returns `true` if (and only if) the value is a member of `t`.

    For example:

    ``` js
    //    Integer :: Type
    const Integer = $.NullaryType
      ('Integer')
      ('http://example.com/my-package#Integer')
      ([])
      (x => typeof x === 'number' &&
            Math.floor (x) === x &&
            x >= Number.MIN_SAFE_INTEGER &&
            x <= Number.MAX_SAFE_INTEGER);

    //    NonZeroInteger :: Type
    const NonZeroInteger = $.NullaryType
      ('NonZeroInteger')
      ('http://example.com/my-package#NonZeroInteger')
      ([Integer])
      (x => x !== 0);

    //    rem :: Integer -> NonZeroInteger -> Integer
    const rem =
    def ('rem')
        ({})
        ([Integer, NonZeroInteger, Integer])
        (x => y => x % y);

    rem (42) (5);
    // => 2

    rem (0.5);
    // ! TypeError: Invalid value
    //
    //   rem :: Integer -> NonZeroInteger -> Integer
    //          ^^^^^^^
    //             1
    //
    //   1)  0.5 :: Number
    //
    //   The value at position 1 is not a member of ‘Integer’.
    //
    //   See http://example.com/my-package#Integer for information about the Integer type.

    rem (42) (0);
    // ! TypeError: Invalid value
    //
    //   rem :: Integer -> NonZeroInteger -> Integer
    //                     ^^^^^^^^^^^^^^
    //                           1
    //
    //   1)  0 :: Number
    //
    //   The value at position 1 is not a member of ‘NonZeroInteger’.
    //
    //   See http://example.com/my-package#NonZeroInteger for information about the NonZeroInteger type.
    ```
- name: UnaryType
  id: index#user-content-unarytype--foldablef--string---string---arraytype---any-boolean---ta-fa---type---type
  summary: Type constructor for types with one type variable (such as Array)
  description: |-
    ### [`UnaryType :: Foldable f => String -⁠> String -⁠> Array Type -⁠> (Any -⁠> Boolean) -⁠> (t a -⁠> f a) -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1597)

    Type constructor for types with one type variable (such as [`Array`](#Array)).

    To define a unary type `t a` one must provide:

    - the name of `t` (exposed as `t.name`);

    - the documentation URL of `t` (exposed as `t.url`);

    - an array of supertypes (exposed as `t.supertypes`);

    - a predicate that accepts any value that is a member of every one of the given supertypes, and returns `true` if (and only if) the value is a member of `t x` for some type `x`;

    - a function that takes any value of type `t a` and returns the values of type `a` contained in the `t`; and

    - the type of `a`.

    For example:

    ``` js
    const show = require ('sanctuary-show');
    const type = require ('sanctuary-type-identifiers');

    //    maybeTypeIdent :: String
    const maybeTypeIdent = 'my-package/Maybe';

    //    Maybe :: Type -> Type
    const Maybe = $.UnaryType
      ('Maybe')
      ('http://example.com/my-package#Maybe')
      ([])
      (x => type (x) === maybeTypeIdent)
      (maybe => maybe.isJust ? [maybe.value] : []);

    //    Nothing :: Maybe a
    const Nothing = {
      'isJust': false,
      'isNothing': true,
      '@@type': maybeTypeIdent,
      '@@show': () => 'Nothing',
    };

    //    Just :: a -> Maybe a
    const Just = x => ({
      'isJust': true,
      'isNothing': false,
      '@@type': maybeTypeIdent,
      '@@show': () => `Just (${show (x)})`,
      'value': x,
    });

    //    fromMaybe :: a -> Maybe a -> a
    const fromMaybe =
    def ('fromMaybe')
        ({})
        ([a, Maybe (a), a])
        (x => m => m.isJust ? m.value : x);

    fromMaybe (0) (Just (42));
    // => 42

    fromMaybe (0) (Nothing);
    // => 0

    fromMaybe (0) (Just ('XXX'));
    // ! TypeError: Type-variable constraint violation
    //
    //   fromMaybe :: a -> Maybe a -> a
    //                ^          ^
    //                1          2
    //
    //   1)  0 :: Number
    //
    //   2)  "XXX" :: String
    //
    //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.
    ```
- name: BinaryType
  id: index#user-content-binarytype--foldablef--string---string---arraytype---any-boolean---tab-fa---tab-fb---type---type---type
  summary: Type constructor for types with two type variables (such as Array2)
  description: |-
    ### [`BinaryType :: Foldable f => String -⁠> String -⁠> Array Type -⁠> (Any -⁠> Boolean) -⁠> (t a b -⁠> f a) -⁠> (t a b -⁠> f b) -⁠> Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1708)

    Type constructor for types with two type variables (such as [`Array2`](#Array2)).

    To define a binary type `t a b` one must provide:

    - the name of `t` (exposed as `t.name`);

    - the documentation URL of `t` (exposed as `t.url`);

    - an array of supertypes (exposed as `t.supertypes`);

    - a predicate that accepts any value that is a member of every one of the given supertypes, and returns `true` if (and only if) the value is a member of `t x y` for some types `x` and `y`;

    - a function that takes any value of type `t a b` and returns the values of type `a` contained in the `t`;

    - a function that takes any value of type `t a b` and returns the values of type `b` contained in the `t`;

    - the type of `a`; and

    - the type of `b`.

    For example:

    ``` js
    const type = require ('sanctuary-type-identifiers');

    //    pairTypeIdent :: String
    const pairTypeIdent = 'my-package/Pair';

    //    $Pair :: Type -> Type -> Type
    const $Pair = $.BinaryType
      ('Pair')
      ('http://example.com/my-package#Pair')
      ([])
      (x => type (x) === pairTypeIdent)
      (({fst}) => [fst])
      (({snd}) => [snd]);

    //    Pair :: a -> b -> Pair a b
    const Pair =
    def ('Pair')
        ({})
        ([a, b, $Pair (a) (b)])
        (fst => snd => ({
           'fst': fst,
           'snd': snd,
           '@@type': pairTypeIdent,
           '@@show': () => `Pair (${show (fst)}) (${show (snd)})`,
         }));

    //    Rank :: Type
    const Rank = $.NullaryType
      ('Rank')
      ('http://example.com/my-package#Rank')
      ([$.String])
      (x => /^(A|2|3|4|5|6|7|8|9|10|J|Q|K)$/.test (x));

    //    Suit :: Type
    const Suit = $.NullaryType
      ('Suit')
      ('http://example.com/my-package#Suit')
      ([$.String])
      (x => /^[\u2660\u2663\u2665\u2666]$/.test (x));

    //    Card :: Type
    const Card = $Pair (Rank) (Suit);

    //    showCard :: Card -> String
    const showCard =
    def ('showCard')
        ({})
        ([Card, $.String])
        (card => card.fst + card.snd);

    showCard (Pair ('A') ('♠'));
    // => 'A♠'

    showCard (Pair ('X') ('♠'));
    // ! TypeError: Invalid value
    //
    //   showCard :: Pair Rank Suit -> String
    //                    ^^^^
    //                     1
    //
    //   1)  "X" :: String
    //
    //   The value at position 1 is not a member of ‘Rank’.
    //
    //   See http://example.com/my-package#Rank for information about the Rank type.
    ```
- name: EnumType
  id: index#user-content-enumtype--string---string---arrayany---type
  summary: Type constructor for enumerated types (such as RegexFlags)
  description: |-
    ### [`EnumType :: String -⁠> String -⁠> Array Any -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1840)

    Type constructor for [enumerated types](https://en.wikipedia.org/wiki/Enumerated_type) (such as [`RegexFlags`](#RegexFlags)).

    To define an enumerated type `t` one must provide:

    - the name of `t` (exposed as `t.name`);

    - the documentation URL of `t` (exposed as `t.url`); and

    - an array of distinct values.

    For example:

    ``` js
    //    Denomination :: Type
    const Denomination = $.EnumType
      ('Denomination')
      ('http://example.com/my-package#Denomination')
      ([10, 20, 50, 100, 200]);
    ```
- name: RecordType
  id: index#user-content-recordtype--strmaptype---type
  summary: RecordType is used to construct anonymous record types
  description: |-
    ### [`RecordType :: StrMap Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1867)

    `RecordType` is used to construct anonymous record types. The type definition specifies the name and type of each required field. A field is an enumerable property (either an own property or an inherited property).

    To define an anonymous record type one must provide:

    - an object mapping field name to type.

    For example:

    ``` js
    //    Point :: Type
    const Point = $.RecordType ({x: $.FiniteNumber, y: $.FiniteNumber});

    //    dist :: Point -> Point -> FiniteNumber
    const dist =
    def ('dist')
        ({})
        ([Point, Point, $.FiniteNumber])
        (p => q => Math.sqrt (Math.pow (p.x - q.x, 2) +
                              Math.pow (p.y - q.y, 2)));

    dist ({x: 0, y: 0}) ({x: 3, y: 4});
    // => 5

    dist ({x: 0, y: 0}) ({x: 3, y: 4, color: 'red'});
    // => 5

    dist ({x: 0, y: 0}) ({x: NaN, y: NaN});
    // ! TypeError: Invalid value
    //
    //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber
    //                                                              ^^^^^^^^^^^^
    //                                                                   1
    //
    //   1)  NaN :: Number
    //
    //   The value at position 1 is not a member of ‘FiniteNumber’.

    dist (0);
    // ! TypeError: Invalid value
    //
    //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber
    //           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    //                              1
    //
    //   1)  0 :: Number
    //
    //   The value at position 1 is not a member of ‘{ x :: FiniteNumber, y :: FiniteNumber }’.
    ```
- name: NamedRecordType
  id: index#user-content-namedrecordtype--nonemptystring---string---arraytype---strmaptype---type
  summary: NamedRecordType is used to construct named record types
  description: |-
    ### [`NamedRecordType :: NonEmpty String -⁠> String -⁠> Array Type -⁠> StrMap Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L1951)

    `NamedRecordType` is used to construct named record types. The type definition specifies the name and type of each required field. A field is an enumerable property (either an own property or an inherited property).

    To define a named record type `t` one must provide:

    - the name of `t` (exposed as `t.name`);

    - the documentation URL of `t` (exposed as `t.url`);

    - an array of supertypes (exposed as `t.supertypes`); and

    - an object mapping field name to type.

    For example:

    ``` js
    //    Circle :: Type
    const Circle = $.NamedRecordType
      ('my-package/Circle')
      ('http://example.com/my-package#Circle')
      ([])
      ({radius: $.PositiveFiniteNumber});

    //    Cylinder :: Type
    const Cylinder = $.NamedRecordType
      ('Cylinder')
      ('http://example.com/my-package#Cylinder')
      ([Circle])
      ({height: $.PositiveFiniteNumber});

    //    volume :: Cylinder -> PositiveFiniteNumber
    const volume =
    def ('volume')
        ({})
        ([Cylinder, $.FiniteNumber])
        (cyl => Math.PI * cyl.radius * cyl.radius * cyl.height);

    volume ({radius: 2, height: 10});
    // => 125.66370614359172

    volume ({radius: 2});
    // ! TypeError: Invalid value
    //
    //   volume :: Cylinder -> FiniteNumber
    //             ^^^^^^^^
    //                1
    //
    //   1)  {"radius": 2} :: Object, StrMap Number
    //
    //   The value at position 1 is not a member of ‘Cylinder’.
    //
    //   See http://example.com/my-package#Cylinder for information about the Cylinder type.
    ```
- name: TypeVariable
  id: index#user-content-typevariable--string---type
  summary: Polymorphism is powerful
  description: |-
    ### [`TypeVariable :: String -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L2060)

    Polymorphism is powerful. Not being able to define a function for all types would be very limiting indeed: one couldn't even define the identity function!

    Before defining a polymorphic function one must define one or more type variables:

    ``` js
    const a = $.TypeVariable ('a');
    const b = $.TypeVariable ('b');

    //    id :: a -> a
    const id = def ('id') ({}) ([a, a]) (x => x);

    id (42);
    // => 42

    id (null);
    // => null
    ```

    The same type variable may be used in multiple positions, creating a constraint:

    ``` js
    //    cmp :: a -> a -> Number
    const cmp =
    def ('cmp')
        ({})
        ([a, a, $.Number])
        (x => y => x < y ? -1 : x > y ? 1 : 0);

    cmp (42) (42);
    // => 0

    cmp ('a') ('z');
    // => -1

    cmp ('z') ('a');
    // => 1

    cmp (0) ('1');
    // ! TypeError: Type-variable constraint violation
    //
    //   cmp :: a -> a -> Number
    //          ^    ^
    //          1    2
    //
    //   1)  0 :: Number
    //
    //   2)  "1" :: String
    //
    //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.
    ```
- name: UnaryTypeVariable
  id: index#user-content-unarytypevariable--string---type---type
  summary: Combines UnaryType and TypeVariable
  description: |-
    ### [`UnaryTypeVariable :: String -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L2122)

    Combines [`UnaryType`](#UnaryType) and [`TypeVariable`](#TypeVariable).

    To define a unary type variable `t a` one must provide:

    - a name (conventionally matching `^[a-z]$`); and

    - the type of `a`.

    Consider the type of a generalized `map`:

    ``` haskell
    map :: Functor f => (a -> b) -> f a -> f b
    ```

    `f` is a unary type variable. With two (nullary) type variables, one unary type variable, and one [type class](#type-classes) it's possible to define a fully polymorphic `map` function:

    ``` js
    const $ = require ('sanctuary-def');
    const Z = require ('sanctuary-type-classes');

    const a = $.TypeVariable ('a');
    const b = $.TypeVariable ('b');
    const f = $.UnaryTypeVariable ('f');

    //    map :: Functor f => (a -> b) -> f a -> f b
    const map =
    def ('map')
        ({f: [Z.Functor]})
        ([$.Function ([a, b]), f (a), f (b)])
        (f => functor => Z.map (f, functor));
    ```

    Whereas a regular type variable is fully resolved (`a` might become `Array (Array String)`, for example), a unary type variable defers to its type argument, which may itself be a type variable. The type argument corresponds to the type argument of a unary type or the *second* type argument of a binary type. The second type argument of `Map k v`, for example, is `v`. One could replace `Functor => f` with `Map k` or with `Map Integer`, but not with `Map`.

    This shallow inspection makes it possible to constrain a value's "outer" and "inner" types independently.
- name: BinaryTypeVariable
  id: index#user-content-binarytypevariable--string---type---type---type
  summary: Combines BinaryType and TypeVariable
  description: |-
    ### [`BinaryTypeVariable :: String -⁠> Type -⁠> Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L2176)

    Combines [`BinaryType`](#BinaryType) and [`TypeVariable`](#TypeVariable).

    To define a binary type variable `t a b` one must provide:

    - a name (conventionally matching `^[a-z]$`);

    - the type of `a`; and

    - the type of `b`.

    The more detailed explanation of [`UnaryTypeVariable`](#UnaryTypeVariable) also applies to `BinaryTypeVariable`.
- name: Thunk
  id: index#user-content-thunk--type---type
  summary: $.Thunk (T) is shorthand for $.Function ([T]), the type comprising every nullary function (thunk) that returns a value of type T
  description: |-
    ### [`Thunk :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L2201)

    `$.Thunk (T)` is shorthand for `$.Function ([T])`, the type comprising every nullary function (thunk) that returns a value of type `T`.
- name: Predicate
  id: index#user-content-predicate--type---type
  summary: $.Predicate (T) is shorthand for $.Fn (T) ($.Boolean), the type comprising every predicate function that takes a value of type T
  description: "### [`Predicate :: Type -⁠> Type`](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/index.js#L2207)\n\n`$.Predicate (T)` is shorthand for `$.Fn (T) ($.Boolean)`, the type comprising every predicate function that takes a value of type `T`.\n\n## [Type classes](#type-classes)\n\nOne can trivially define a function of type `String -> String -> String` that concatenates two strings. This is overly restrictive, though, since other types support concatenation (`Array a`, for example).\n\nOne could use a type variable to define a polymorphic \"concat\" function:\n\n``` js\n//    _concat :: a -> a -> a\nconst _concat =\ndef ('_concat')\n    ({})\n    ([a, a, a])\n    (x => y => x.concat (y));\n\n_concat ('fizz') ('buzz');\n// => 'fizzbuzz'\n\n_concat ([1, 2]) ([3, 4]);\n// => [1, 2, 3, 4]\n\n_concat ([1, 2]) ('buzz');\n// ! TypeError: Type-variable constraint violation\n//\n//   _concat :: a -> a -> a\n//              ^    ^\n//              1    2\n//\n//   1)  [1, 2] :: Array Number\n//\n//   2)  \"buzz\" :: String\n//\n//   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n```\n\nThe type of `_concat` is misleading: it suggests that it can operate on any two values of *any* one type. In fact there's an implicit constraint, since the type must support concatenation (in [mathematical](https://en.wikipedia.org/wiki/Semigroup) terms, the type must have a [semigroup](https://github.com/fantasyland/fantasy-land#semigroup)). Violating this implicit constraint results in a run-time error in the implementation:\n\n``` js\n_concat (null) (null);\n// ! TypeError: Cannot read property 'concat' of null\n```\n\nThe solution is to constrain `a` by first defining a [`TypeClass`](https://github.com/sanctuary-js/sanctuary-type-classes#TypeClass) value, then specifying the constraint in the definition of the \"concat\" function:\n\n``` js\nconst Z = require ('sanctuary-type-classes');\n\n//    Semigroup :: TypeClass\nconst Semigroup = Z.TypeClass (\n  'my-package/Semigroup',\n  'http://example.com/my-package#Semigroup',\n  [],\n  x => x != null && typeof x.concat === 'function'\n);\n\n//    concat :: Semigroup a => a -> a -> a\nconst concat =\ndef ('concat')\n    ({a: [Semigroup]})\n    ([a, a, a])\n    (x => y => x.concat (y));\n\nconcat ([1, 2]) ([3, 4]);\n// => [1, 2, 3, 4]\n\nconcat (null) (null);\n// ! TypeError: Type-class constraint violation\n//\n//   concat :: Semigroup a => a -> a -> a\n//             ^^^^^^^^^^^    ^\n//                            1\n//\n//   1)  null :: Null\n//\n//   ‘concat’ requires ‘a’ to satisfy the Semigroup type-class constraint; the value at position 1 does not.\n//\n//   See http://example.com/my-package#Semigroup for information about the my-package/Semigroup type class.\n```\n\nMultiple constraints may be placed on a type variable by including multiple `TypeClass` values in the array (e.g. `{a: [Foo, Bar, Baz]}`).\n\n© 2020 Sanctuary  \n© 2016 Plaid Technologies, Inc.  \nLicensed under the MIT License.  \n[https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/README.md](https://github.com/sanctuary-js/sanctuary-def/blob/v0.22.0/README.md)"
