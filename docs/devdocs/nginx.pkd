---
name: nginx
slug: nginx
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2002-2021 Igor Sysoev
  © 2011-2024 Nginx, Inc.
  Licensed under the BSD License.
  https://nginx.org/en/docs/index.html
homepage: https://nginx.org/

---
- name: A debugging log
  id: debugging_log
  summary: and then set the debug level
  description: "# A debugging log\n\n- [Debugging log for selected clients](#clients)\n- [Logging to a cyclic memory buffer](#memory)\n\nTo enable a debugging log, nginx needs to be configured to support debugging during the build:\n\n``` nginx\n./configure --with-debug ...\n```\n\nThen the `debug` level should be set with the [error_log](ngx_core_module#error_log) directive:\n\n``` nginx\nerror_log /path/to/log debug;\n```\n\nTo verify that nginx is configured to support debugging, run the `nginx -V` command:\n\n``` nginx\nconfigure arguments: --with-debug ...\n```\n\nPre-built [Linux](https://nginx.org/en/linux_packages.html) packages provide out-of-the-box support for debugging log with the `nginx-debug` binary (1.9.8) which can be run using commands\n\n``` nginx\nservice nginx stop\nservice nginx-debug start\n```\n\nand then set the `debug` level. The nginx binary version for Windows is always built with the debugging log support, so only setting the `debug` level will suffice.\n\nNote that redefining the log without also specifying the `debug` level will disable the debugging log. In the example below, redefining the log on the [server](http/ngx_http_core_module#server) level disables the debugging log for this server:\n\n``` nginx\nerror_log /path/to/log debug;\n\nhttp {\n    server {\n        error_log /path/to/log;\n        ...\n```\n\nTo avoid this, either the line redefining the log should be commented out, or the `debug` level specification should also be added:\n\n``` nginx\nerror_log /path/to/log debug;\n\nhttp {\n    server {\n        error_log /path/to/log debug;\n        ...\n```\n\n#### Debugging log for selected clients\n\nIt is also possible to enable the debugging log for [selected client addresses](ngx_core_module#debug_connection) only:\n\n``` nginx\nerror_log /path/to/log;\n\nevents {\n    debug_connection 192.168.1.1;\n    debug_connection 192.168.10.0/24;\n}\n```\n\n#### Logging to a cyclic memory buffer\n\nThe debugging log can be written to a cyclic memory buffer:\n\n``` nginx\nerror_log memory:32m debug;\n```\n\nLogging to the memory buffer on the `debug` level does not have significant impact on performance even under high load. In this case, the log can be extracted using a `gdb` script like the following one:\n\n``` nginx\nset $log = ngx_cycle->log\n\nwhile $log->writer != ngx_log_memory_writer\n    set $log = $log->next\nend\n\nset $buf = (ngx_log_memory_buf_t *) $log->wdata\ndump binary memory debug_log.txt $buf->start $buf->end\n```\n\nOr using an `lldb` script as follows:\n\n``` nginx\nexpr ngx_log_t *$log = ngx_cycle->log\nexpr while ($log->writer != ngx_log_memory_writer) { $log = $log->next; }\nexpr ngx_log_memory_buf_t *$buf = (ngx_log_memory_buf_t *) $log->wdata\nmemory read --force --outfile debug_log.txt --binary $buf->start $buf->end\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/debugging_log.html](https://nginx.org/en/docs/debugging_log.html)"
- name: absolute_redirect
  id: http/ngx_http_core_module#absolute_redirect
  summary: This directive appeared in version 1.11.8
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`absolute_redirect`**` on | off;` |
    | Default: | `absolute_redirect on;`             |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.11.8.

    If disabled, redirects issued by nginx will be relative.

    See also [server_name_in_redirect](#server_name_in_redirect) and [port_in_redirect](#port_in_redirect) directives.
- name: accept_mutex (Core functionality)
  id: ngx_core_module#accept_mutex
  summary: If accept_mutex is enabled, worker processes will accept new connections by turn
  belongs_to: Core functionality
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`accept_mutex`**` on | off;` |
    | Default: | `accept_mutex off;`            |
    | Context: | `events`                       |

    If `accept_mutex` is enabled, worker processes will accept new connections by turn. Otherwise, all worker processes will be notified about new connections, and if volume of new connections is low, some of the worker processes may just waste system resources.

    There is no need to enable `accept_mutex` on systems that support the [EPOLLEXCLUSIVE](events#epoll) flag (1.11.3) or when using [reuseport](http/ngx_http_core_module#reuseport).

    Prior to version 1.11.3, the default value was `on`.
- name: accept_mutex_delay (Core functionality)
  id: ngx_core_module#accept_mutex_delay
  summary: If accept_mutex is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections
  belongs_to: Core functionality
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`accept_mutex_delay`***`time`*`;` |
    | Default: | `accept_mutex_delay 500ms;`         |
    | Context: | `events`                            |

    If [accept_mutex](#accept_mutex) is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections.
- name: access_log
  id: http/ngx_http_log_module#access_log
  summary: Sets the path, format, and configuration for a buffered log write
  belongs_to: ngx_http_log_module
  description: |-
    |          |                                                                                                                                                     |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`access_log`***`path`*` [`*`format`*` [buffer=`*`size`*`] [gzip[=`*`level`*`]] [flush=`*`time`*`] [if=`*`condition`*`]];` **`access_log`**` off;` |
    | Default: | `access_log logs/access.log combined;`                                                                                                              |
    | Context: | `http`, `server`, `location`, `if in location`, `limit_except`                                                                                      |

    Sets the path, format, and configuration for a buffered log write. Several logs can be specified on the same configuration level. Logging to [syslog](../syslog) can be configured by specifying the “`syslog:`” prefix in the first parameter. The special value `off` cancels all `access_log` directives on the current level. If the format is not specified then the predefined “`combined`” format is used.

    If either the `buffer` or `gzip` (1.3.10, 1.2.7) parameter is used, writes to log will be buffered.

    The buffer size must not exceed the size of an atomic write to a disk file. For FreeBSD this size is unlimited.

    When buffering is enabled, the data will be written to the file:

    - if the next log line does not fit into the buffer;
    - if the buffered data is older than specified by the `flush` parameter (1.3.10, 1.2.7);
    - when a worker process is [re-opening](../control) log files or is shutting down.

    If the `gzip` parameter is used, then the buffered data will be compressed before writing to the file. The compression level can be set between 1 (fastest, less compression) and 9 (slowest, best compression). By default, the buffer size is equal to 64K bytes, and the compression level is set to 1. Since the data is compressed in atomic blocks, the log file can be decompressed or read by “`zcat`” at any time.

    Example:

    ``` nginx
    access_log /path/to/log.gz combined gzip flush=5m;
    ```

    For gzip compression to work, nginx must be built with the zlib library.

    The file path can contain variables (0.7.6+), but such logs have some constraints:

    - the [user](../ngx_core_module#user) whose credentials are used by worker processes should have permissions to create files in a directory with such logs;

    - buffered writes do not work;

    - the file is opened and closed for each log write. However, since the descriptors of frequently used files can be stored in a [cache](#open_log_file_cache), writing to the old file can continue during the time specified by the [open_log_file_cache](#open_log_file_cache) directive’s `valid` parameter

    - during each log write the existence of the request’s [root directory](ngx_http_core_module#root) is checked, and if it does not exist the log is not created. It is thus a good idea to specify both [root](ngx_http_core_module#root) and `access_log` on the same configuration level:

      ``` nginx
      server {
          root       /spool/vhost/data/$host;
          access_log /spool/vhost/logs/$host;
          ...
      ```

    The `if` parameter (1.7.0) enables conditional logging. A request will not be logged if the *`condition`* evaluates to “0” or an empty string. In the following example, the requests with response codes 2xx and 3xx will not be logged:

    ``` nginx
    map $status $loggable {
        ~^[23]  0;
        default 1;
    }

    access_log /path/to/access.log combined if=$loggable;
    ```
- name: access_log (ngx_stream_log_module)
  id: stream/ngx_stream_log_module#access_log
  summary: Sets the path, format, and configuration for a buffered log write
  belongs_to: ngx_stream_log_module
  description: |-
    |          |                                                                                                                                            |
    |----------|--------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`access_log`***`pathformat`*` [buffer=`*`size`*`] [gzip[=`*`level`*`]] [flush=`*`time`*`] [if=`*`condition`*`];` **`access_log`**` off;` |
    | Default: | `access_log off;`                                                                                                                          |
    | Context: | `stream`, `server`                                                                                                                         |

    Sets the path, [format](#log_format), and configuration for a buffered log write. Several logs can be specified on the same configuration level. Logging to [syslog](../syslog) can be configured by specifying the “`syslog:`” prefix in the first parameter. The special value `off` cancels all `access_log` directives on the current level.

    If either the `buffer` or `gzip` parameter is used, writes to log will be buffered.

    The buffer size must not exceed the size of an atomic write to a disk file. For FreeBSD this size is unlimited.

    When buffering is enabled, the data will be written to the file:

    - if the next log line does not fit into the buffer;
    - if the buffered data is older than specified by the `flush` parameter;
    - when a worker process is [re-opening](../control) log files or is shutting down.

    If the `gzip` parameter is used, then the buffered data will be compressed before writing to the file. The compression level can be set between 1 (fastest, less compression) and 9 (slowest, best compression). By default, the buffer size is equal to 64K bytes, and the compression level is set to 1. Since the data is compressed in atomic blocks, the log file can be decompressed or read by “`zcat`” at any time.

    Example:

    ``` nginx
    access_log /path/to/log.gz basic gzip flush=5m;
    ```

    For gzip compression to work, nginx must be built with the zlib library.

    The file path can contain variables, but such logs have some constraints:

    - the [user](../ngx_core_module#user) whose credentials are used by worker processes should have permissions to create files in a directory with such logs;
    - buffered writes do not work;
    - the file is opened and closed for each log write. However, since the descriptors of frequently used files can be stored in a [cache](#open_log_file_cache), writing to the old file can continue during the time specified by the [open_log_file_cache](#open_log_file_cache) directive’s `valid` parameter

    The `if` parameter enables conditional logging. A session will not be logged if the *`condition`* evaluates to “0” or an empty string.
- name: add_after_body
  id: http/ngx_http_addition_module#add_after_body
  summary: Adds the text returned as a result of processing a given subrequest after the response body
  belongs_to: ngx_http_addition_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`add_after_body`***`uri`*`;` |
    | Default: | —                              |
    | Context: | `http`, `server`, `location`   |

    Adds the text returned as a result of processing a given subrequest after the response body. An empty string (`""`) as a parameter cancels addition inherited from the previous configuration level.
- name: add_before_body
  id: http/ngx_http_addition_module#add_before_body
  summary: Adds the text returned as a result of processing a given subrequest before the response body
  belongs_to: ngx_http_addition_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`add_before_body`***`uri`*`;` |
    | Default: | —                               |
    | Context: | `http`, `server`, `location`    |

    Adds the text returned as a result of processing a given subrequest before the response body. An empty string (`""`) as a parameter cancels addition inherited from the previous configuration level.
- name: add_header
  id: http/ngx_http_headers_module#add_header
  summary: Adds the specified field to a response header provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0)
  belongs_to: ngx_http_headers_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`add_header`***`namevalue`*` [always];`      |
    | Default: | —                                              |
    | Context: | `http`, `server`, `location`, `if in location` |

    Adds the specified field to a response header provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). Parameter value can contain variables.

    There could be several `add_header` directives. These directives are inherited from the previous configuration level if and only if there are no `add_header` directives defined on the current level.

    If the `always` parameter is specified (1.7.5), the header field will be added regardless of the response code.
- name: add_trailer
  id: http/ngx_http_headers_module#add_trailer
  summary: This directive appeared in version 1.13.2
  belongs_to: ngx_http_headers_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`add_trailer`***`namevalue`*` [always];`     |
    | Default: | —                                              |
    | Context: | `http`, `server`, `location`, `if in location` |

    This directive appeared in version 1.13.2.

    Adds the specified field to the end of a response provided that the response code equals 200, 201, 206, 301, 302, 303, 307, or 308. Parameter value can contain variables.

    There could be several `add_trailer` directives. These directives are inherited from the previous configuration level if and only if there are no `add_trailer` directives defined on the current level.

    If the `always` parameter is specified the specified field will be added regardless of the response code.
- name: addition_types
  id: http/ngx_http_addition_module#addition_types
  summary: This directive appeared in version 0.7.9
  belongs_to: ngx_http_addition_module
  description: "|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`addition_types`***`mime-type`*` ...;` |\n| Default: | `addition_types text/html;`              |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 0.7.9.\n\nAllows adding text in responses with the specified MIME types, in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_addition_module.html](https://nginx.org/en/docs/http/ngx_http_addition_module.html)"
- name: aio
  id: http/ngx_http_core_module#aio
  summary: This directive appeared in version 0.8.11
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`aio`**` on | off | threads[=`*`pool`*`];` |
    | Default: | `aio off;`                                   |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 0.8.11.

    Enables or disables the use of asynchronous file I/O (AIO) on FreeBSD and Linux:

    ``` nginx
    location /video/ {
        aio            on;
        output_buffers 1 64k;
    }
    ```

    On FreeBSD, AIO can be used starting from FreeBSD 4.3. Prior to FreeBSD 11.0, AIO can either be linked statically into a kernel:

    ``` nginx
    options VFS_AIO
    ```

    or loaded dynamically as a kernel loadable module:

    ``` nginx
    kldload aio
    ```

    On Linux, AIO can be used starting from kernel version 2.6.22. Also, it is necessary to enable [directio](#directio), or otherwise reading will be blocking:

    ``` nginx
    location /video/ {
        aio            on;
        directio       512;
        output_buffers 1 128k;
    }
    ```

    On Linux, [directio](#directio) can only be used for reading blocks that are aligned on 512-byte boundaries (or 4K for XFS). File’s unaligned end is read in blocking mode. The same holds true for byte range requests and for FLV requests not from the beginning of a file: reading of unaligned data at the beginning and end of a file will be blocking.

    When both AIO and [sendfile](#sendfile) are enabled on Linux, AIO is used for files that are larger than or equal to the size specified in the [directio](#directio) directive, while [sendfile](#sendfile) is used for files of smaller sizes or when [directio](#directio) is disabled.

    ``` nginx
    location /video/ {
        sendfile       on;
        aio            on;
        directio       8m;
    }
    ```

    Finally, files can be read and [sent](#sendfile) using multi-threading (1.7.11), without blocking a worker process:

    ``` nginx
    location /video/ {
        sendfile       on;
        aio            threads;
    }
    ```

    Read and send file operations are offloaded to threads of the specified [pool](../ngx_core_module#thread_pool). If the pool name is omitted, the pool with the name “`default`” is used. The pool name can also be set with variables:

    ``` nginx
    aio threads=pool$disk;
    ```

    By default, multi-threading is disabled, it should be enabled with the `--with-threads` configuration parameter. Currently, multi-threading is compatible only with the [epoll](../events#epoll), [kqueue](../events#kqueue), and [eventport](../events#eventport) methods. Multi-threaded sending of files is only supported on Linux.

    See also the [sendfile](#sendfile) directive.
- name: aio_write
  id: http/ngx_http_core_module#aio_write
  summary: This directive appeared in version 1.9.13
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`aio_write`**` on | off;`  |
    | Default: | `aio_write off;`             |
    | Context: | `http`, `server`, `location` |

    This directive appeared in version 1.9.13.

    If [aio](#aio) is enabled, specifies whether it is used for writing files. Currently, this only works when using `aio threads` and is limited to writing temporary files with data received from proxied servers.
- name: alias
  id: http/ngx_http_core_module#alias
  summary: Defines a replacement for the specified location
  belongs_to: ngx_http_core_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`alias`***`path`*`;` |
    | Default: | —                      |
    | Context: | `location`             |

    Defines a replacement for the specified location. For example, with the following configuration

    ``` nginx
    location /i/ {
        alias /data/w3/images/;
    }
    ```

    on request of “`/i/top.gif`”, the file `/data/w3/images/top.gif` will be sent.

    The *`path`* value can contain variables, except `$document_root` and `$realpath_root`.

    If `alias` is used inside a location defined with a regular expression then such regular expression should contain captures and `alias` should refer to these captures (0.7.40), for example:

    ``` nginx
    location ~ ^/users/(.+\.(?:gif|jpe?g|png))$ {
        alias /data/w3/images/$1;
    }
    ```

    When location matches the last part of the directive’s value:

    ``` nginx
    location /images/ {
        alias /data/w3/images/;
    }
    ```

    it is better to use the [root](#root) directive instead:

    ``` nginx
    location /images/ {
        root /data/w3;
    }
    ```
- name: allow
  id: http/ngx_http_access_module#allow
  summary: Allows access for the specified network or address
  belongs_to: ngx_http_access_module
  description: |-
    |          |                                                      |
    |----------|------------------------------------------------------|
    | Syntax:  | **`allow`***`address`*` | `*`CIDR`*` | unix: | all;` |
    | Default: | —                                                    |
    | Context: | `http`, `server`, `location`, `limit_except`         |

    Allows access for the specified network or address. If the special value `unix:` is specified (1.5.1), allows access for all UNIX-domain sockets.
- name: allow (ngx_stream_access_module)
  id: stream/ngx_stream_access_module#allow
  summary: Allows access for the specified network or address
  belongs_to: ngx_stream_access_module
  description: |-
    |          |                                                      |
    |----------|------------------------------------------------------|
    | Syntax:  | **`allow`***`address`*` | `*`CIDR`*` | unix: | all;` |
    | Default: | —                                                    |
    | Context: | `stream`, `server`                                   |

    Allows access for the specified network or address. If the special value `unix:` is specified, allows access for all UNIX-domain sockets.
- name: ancient_browser
  id: http/ngx_http_browser_module#ancient_browser
  summary: If any of the specified substrings is found in the “User-Agent” request header field, the browser will be considered ancient
  belongs_to: ngx_http_browser_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ancient_browser`***`string`*` ...;` |
    | Default: | —                                      |
    | Context: | `http`, `server`, `location`           |

    If any of the specified substrings is found in the “User-Agent” request header field, the browser will be considered ancient. The special string “`netscape4`” corresponds to the regular expression “`^Mozilla/[1-4]`”.
- name: ancient_browser_value
  id: http/ngx_http_browser_module#ancient_browser_value
  summary: Sets a value for the $ancient_browser variables
  belongs_to: ngx_http_browser_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`ancient_browser_value`***`string`*`;` |
    | Default: | `ancient_browser_value 1;`               |
    | Context: | `http`, `server`, `location`             |

    Sets a value for the `$ancient_browser` variables.
- name: api
  id: http/ngx_http_api_module#api
  summary: Turns on the REST API interface in the surrounding location
  belongs_to: ngx_http_api_module
  description: |-
    |          |                             |
    |----------|-----------------------------|
    | Syntax:  | **`api`**` [write=on|off];` |
    | Default: | —                           |
    | Context: | `location`                  |

    Turns on the REST API interface in the surrounding location. Access to this location should be [limited](ngx_http_core_module#satisfy).

    The `write` parameter determines whether the API is read-only or read-write. By default, the API is read-only.

    All API requests should contain a supported API version in the URI. If the request URI equals the location prefix, the list of supported API versions is returned. The current API version is “`9`”.

    The optional “`fields`” argument in the request line specifies which fields of the requested objects will be output:

    ``` nginx
    http://127.0.0.1/api/9/nginx?fields=version,build
    ```
- name: auth_basic
  id: http/ngx_http_auth_basic_module#auth_basic
  summary: Enables validation of user name and password using the “HTTP Basic Authentication” protocol
  belongs_to: ngx_http_auth_basic_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`auth_basic`***`string`*` | off;`          |
    | Default: | `auth_basic off;`                            |
    | Context: | `http`, `server`, `location`, `limit_except` |

    Enables validation of user name and password using the “HTTP Basic Authentication” protocol. The specified parameter is used as a *`realm`*. Parameter value can contain variables (1.3.10, 1.2.7). The special value `off` cancels the effect of the `auth_basic` directive inherited from the previous configuration level.
- name: auth_basic_user_file
  id: http/ngx_http_auth_basic_module#auth_basic_user_file
  summary: The file name can contain variables
  belongs_to: ngx_http_auth_basic_module
  description: "|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`auth_basic_user_file`***`file`*`;`        |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`, `limit_except` |\n\nSpecifies a file that keeps user names and passwords, in the following format:\n\n``` nginx\n# comment\nname1:password1\nname2:password2:comment\nname3:password3\n```\n\nThe *`file`* name can contain variables.\n\nThe following password types are supported:\n\n- encrypted with the `crypt()` function; can be generated using the “`htpasswd`” utility from the Apache HTTP Server distribution or the “`openssl passwd`” command;\n\n- hashed with the Apache variant of the MD5-based password algorithm (apr1); can be generated with the same tools;\n\n- specified by the “`{`*`scheme`*`}`*`data`*” syntax (1.0.3+) as described in [RFC 2307](https://datatracker.ietf.org/doc/html/rfc2307#section-5.3); currently implemented schemes include `PLAIN` (an example one, should not be used), `SHA` (1.3.13) (plain SHA-1 hashing, should not be used) and `SSHA` (salted SHA-1 hashing, used by some software packages, notably OpenLDAP and Dovecot).\n\nSupport for `SHA` scheme was added only to aid in migration from other web servers. It should not be used for new passwords, since unsalted SHA-1 hashing that it employs is vulnerable to [rainbow table](http://en.wikipedia.org/wiki/Rainbow_attack) attacks.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html](https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)"
- name: auth_delay
  id: http/ngx_http_core_module#auth_delay
  summary: This directive appeared in version 1.17.10
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`auth_delay`***`time`*`;`  |
    | Default: | `auth_delay 0s;`             |
    | Context: | `http`, `server`, `location` |

    This directive appeared in version 1.17.10.

    Delays processing of unauthorized requests with 401 response code to prevent timing attacks when access is limited by [password](ngx_http_auth_basic_module), by the [result of subrequest](ngx_http_auth_request_module), or by [JWT](ngx_http_auth_jwt_module).
- name: auth_http (ngx_mail_auth_http_module)
  id: mail/ngx_mail_auth_http_module#auth_http
  summary: Sets the URL of the HTTP authentication server
  belongs_to: ngx_mail_auth_http_module
  description: |-
    |          |                           |
    |----------|---------------------------|
    | Syntax:  | **`auth_http`***`URL`*`;` |
    | Default: | —                         |
    | Context: | `mail`, `server`          |

    Sets the URL of the HTTP authentication server. The protocol is described [below](#protocol).
- name: auth_http_header (ngx_mail_auth_http_module)
  id: mail/ngx_mail_auth_http_module#auth_http_header
  summary: Appends the specified header to requests sent to the authentication server
  belongs_to: ngx_mail_auth_http_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`auth_http_header`***`headervalue`*`;` |
    | Default: | —                                        |
    | Context: | `mail`, `server`                         |

    Appends the specified header to requests sent to the authentication server. This header can be used as the shared secret to verify that the request comes from nginx. For example:

    ``` nginx
    auth_http_header X-Auth-Key "secret_string";
    ```
- name: auth_http_pass_client_cert (ngx_mail_auth_http_module)
  id: mail/ngx_mail_auth_http_module#auth_http_pass_client_cert
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_mail_auth_http_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`auth_http_pass_client_cert`**` on | off;` |
    | Default: | `auth_http_pass_client_cert off;`            |
    | Context: | `mail`, `server`                             |

    This directive appeared in version 1.7.11.

    Appends the “Auth-SSL-Cert” header with the [client](ngx_mail_ssl_module#ssl_verify_client) certificate in the PEM format (urlencoded) to requests sent to the authentication server.
- name: auth_http_timeout (ngx_mail_auth_http_module)
  id: mail/ngx_mail_auth_http_module#auth_http_timeout
  summary: Sets the timeout for communication with the authentication server
  belongs_to: ngx_mail_auth_http_module
  description: "|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`auth_http_timeout`***`time`*`;` |\n| Default: | `auth_http_timeout 60s;`           |\n| Context: | `mail`, `server`                   |\n\nSets the timeout for communication with the authentication server.\n\n#### Protocol\n\nThe HTTP protocol is used to communicate with the authentication server. The data in the response body is ignored, the information is passed only in the headers.\n\nExamples of requests and responses:\n\nRequest:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: plain # plain/apop/cram-md5/external\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap # imap/pop3/smtp\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\n```\n\nGood response:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 198.51.100.1\nAuth-Port: 143\n```\n\nBad response:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: Invalid login or password\nAuth-Wait: 3\n```\n\nIf there is no “Auth-Wait” header, an error will be returned and the connection will be closed. The current implementation allocates memory for each authentication attempt. The memory is freed only at the end of a session. Therefore, the number of invalid authentication attempts in a single session must be limited — the server must respond without the “Auth-Wait” header after 10-20 attempts (the attempt number is passed in the “Auth-Login-Attempt” header).\n\nWhen the APOP or CRAM-MD5 are used, request-response will look as follows:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: apop\nAuth-User: user\nAuth-Salt: <238188073.1163692009@mail.example.com>\nAuth-Pass: auth_response\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\n```\n\nGood response:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 198.51.100.1\nAuth-Port: 143\nAuth-Pass: plain-text-pass\n```\n\nIf the “Auth-User” header exists in the response, it overrides the username used to authenticate with the backend.\n\nFor the SMTP, the response additionally takes into account the “Auth-Error-Code” header — if exists, it is used as a response code in case of an error. Otherwise, the 535 5.7.0 code will be added to the “Auth-Status” header.\n\nFor example, if the following response is received from the authentication server:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: Temporary server problem, try again later\nAuth-Error-Code: 451 4.3.0\nAuth-Wait: 3\n```\n\nthen the SMTP client will receive an error\n\n``` nginx\n451 4.3.0 Temporary server problem, try again later\n```\n\nIf proxying SMTP does not require authentication, the request will look as follows:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: none\nAuth-User:\nAuth-Pass:\nAuth-Protocol: smtp\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\nAuth-SMTP-Helo: client.example.org\nAuth-SMTP-From: MAIL FROM: <>\nAuth-SMTP-To: RCPT TO: <postmaster@mail.example.com>\n```\n\nFor the SSL/TLS client connection (1.7.11), the “Auth-SSL” header is added, and “Auth-SSL-Verify” will contain the result of client certificate verification, if [enabled](ngx_mail_ssl_module#ssl_verify_client): “`SUCCESS`”, “`FAILED:`*`reason`*”, and “`NONE`” if a certificate was not present.\n\nPrior to version 1.11.7, the “`FAILED`” result did not contain the *`reason`* string.\n\nWhen the client certificate was present, its details are passed in the following request headers: “Auth-SSL-Subject”, “Auth-SSL-Issuer”, “Auth-SSL-Serial”, and “Auth-SSL-Fingerprint”. If [auth_http_pass_client_cert](#auth_http_pass_client_cert) is enabled, the certificate itself is passed in the “Auth-SSL-Cert” header. The protocol and cipher of the established connection are passed in the “Auth-SSL-Protocol” and “Auth-SSL-Cipher” headers (1.21.2). The request will look as follows:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: plain\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nAuth-SSL: on\nAuth-SSL-Protocol: TLSv1.3\nAuth-SSL-Cipher: TLS_AES_256_GCM_SHA384\nAuth-SSL-Verify: SUCCESS\nAuth-SSL-Subject: /CN=example.com\nAuth-SSL-Issuer: /CN=example.com\nAuth-SSL-Serial: C07AD56B846B5BFF\nAuth-SSL-Fingerprint: 29d6a80a123d13355ed16b4b04605e29cb55a5ad\n```\n\nWhen the [PROXY protocol](ngx_mail_core_module#proxy_protocol) is used, its details are passed in the following request headers: “Proxy-Protocol-Addr”, “Proxy-Protocol-Port”, “Proxy-Protocol-Server-Addr”, and “Proxy-Protocol-Server-Port” (1.19.8).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html](https://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html)"
- name: auth_jwt
  id: http/ngx_http_auth_jwt_module#auth_jwt
  summary: Enables validation of JSON Web Token
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                                           |
    |----------|-----------------------------------------------------------|
    | Syntax:  | **`auth_jwt`***`string`*` [token=`*`$variable`*`] | off;` |
    | Default: | `auth_jwt off;`                                           |
    | Context: | `http`, `server`, `location`, `limit_except`              |

    Enables validation of JSON Web Token. The specified *`string`* is used as a `realm`. Parameter value can contain variables.

    The optional `token` parameter specifies a variable that contains JSON Web Token. By default, JWT is passed in the “Authorization” header as a [Bearer Token](https://datatracker.ietf.org/doc/html/rfc6750). JWT may be also passed as a cookie or a part of a query string:

    ``` nginx
    auth_jwt "closed site" token=$cookie_auth_token;
    ```

    The special value `off` cancels the effect of the `auth_jwt` directive inherited from the previous configuration level.
- name: auth_jwt_claim_set
  id: http/ngx_http_auth_jwt_module#auth_jwt_claim_set
  summary: This directive appeared in version 1.11.10
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                                  |
    |----------|--------------------------------------------------|
    | Syntax:  | **`auth_jwt_claim_set`***`$variablename`*` ...;` |
    | Default: | —                                                |
    | Context: | `http`                                           |

    This directive appeared in version 1.11.10.

    Sets the *`variable`* to a JWT claim parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.

    ``` nginx
    auth_jwt_claim_set $email info e-mail;
    auth_jwt_claim_set $job info "job title";
    ```

    Prior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.

    Variable values for tokens encrypted with JWE are available only after decryption which occurs during the [Access](../dev/development_guide#http_phases) phase.
- name: auth_jwt_header_set
  id: http/ngx_http_auth_jwt_module#auth_jwt_header_set
  summary: This directive appeared in version 1.11.10
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`auth_jwt_header_set`***`$variablename`*` ...;` |
    | Default: | —                                                 |
    | Context: | `http`                                            |

    This directive appeared in version 1.11.10.

    Sets the *`variable`* to a JOSE header parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.

    Prior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.
- name: auth_jwt_key_cache
  id: http/ngx_http_auth_jwt_module#auth_jwt_key_cache
  summary: This directive appeared in version 1.21.4
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`auth_jwt_key_cache`***`time`*`;` |
    | Default: | `auth_jwt_key_cache 0;`             |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.21.4.

    Enables or disables caching of keys obtained from a [file](#auth_jwt_key_file) or from a [subrequest](#auth_jwt_key_request), and sets caching time for them. Caching of keys obtained from variables is not supported. By default, caching of keys is disabled.
- name: auth_jwt_key_file
  id: http/ngx_http_auth_jwt_module#auth_jwt_key_file
  summary: Specifies a file in JSON Web Key Set format for validating JWT signature
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`auth_jwt_key_file`***`file`*`;`           |
    | Default: | —                                            |
    | Context: | `http`, `server`, `location`, `limit_except` |

    Specifies a *`file`* in [JSON Web Key Set](https://datatracker.ietf.org/doc/html/rfc7517#section-5) format for validating JWT signature. Parameter value can contain variables.

    Several `auth_jwt_key_file` directives can be specified on the same level (1.21.1):

    ``` nginx
    auth_jwt_key_file conf/keys.json;
    auth_jwt_key_file conf/key.jwk;
    ```

    If at least one of the specified keys cannot be loaded or processed, nginx will return the 500 (Internal Server Error) error.
- name: auth_jwt_key_request
  id: http/ngx_http_auth_jwt_module#auth_jwt_key_request
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`auth_jwt_key_request`***`uri`*`;`         |
    | Default: | —                                            |
    | Context: | `http`, `server`, `location`, `limit_except` |

    This directive appeared in version 1.15.6.

    Allows retrieving a [JSON Web Key Set](https://datatracker.ietf.org/doc/html/rfc7517#section-5) file from a subrequest for validating JWT signature and sets the URI where the subrequest will be sent to. Parameter value can contain variables. To avoid validation overhead, it is recommended to cache the key file:

    ``` nginx
    proxy_cache_path /data/nginx/cache levels=1 keys_zone=foo:10m;

    server {
        ...

        location / {
            auth_jwt             "closed site";
            auth_jwt_key_request /jwks_uri;
        }

        location = /jwks_uri {
            internal;
            proxy_cache foo;
            proxy_pass  http://idp.example.com/keys;
        }
    }
    ```

    Several `auth_jwt_key_request` directives can be specified on the same level (1.21.1):

    ``` nginx
    auth_jwt_key_request /jwks_uri;
    auth_jwt_key_request /jwks2_uri;
    ```

    If at least one of the specified keys cannot be loaded or processed, nginx will return the 500 (Internal Server Error) error.
- name: auth_jwt_leeway
  id: http/ngx_http_auth_jwt_module#auth_jwt_leeway
  summary: This directive appeared in version 1.13.10
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`auth_jwt_leeway`***`time`*`;` |
    | Default: | `auth_jwt_leeway 0s;`            |
    | Context: | `http`, `server`, `location`     |

    This directive appeared in version 1.13.10.

    Sets the maximum allowable leeway to compensate clock skew when verifying the [exp](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4) and [nbf](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5) JWT claims.
- name: auth_jwt_require
  id: http/ngx_http_auth_jwt_module#auth_jwt_require
  summary: This directive appeared in version 1.21.2
  belongs_to: ngx_http_auth_jwt_module
  description: "|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`auth_jwt_require`***`$value`*` ... [error=401 | 403] ;` |\n| Default: | —                                                          |\n| Context: | `http`, `server`, `location`, `limit_except`               |\n\nThis directive appeared in version 1.21.2.\n\nSpecifies additional checks for JWT validation. The value can contain text, variables, and their combination, and must start with a variable (1.21.7). The authentication will succeed only if all the values are not empty and are not equal to “0”.\n\n``` nginx\nmap $jwt_claim_iss $valid_jwt_iss {\n    \"good\" 1;\n}\n...\n\nauth_jwt_require $valid_jwt_iss;\n```\n\nIf any of the checks fails, the `401` error code is returned. The optional `error` parameter (1.21.7) allows redefining the error code to `403`.\n\n#### Embedded Variables\n\nThe `ngx_http_auth_jwt_module` module supports embedded variables:\n\n`$jwt_header_`*`name`*\n\nreturns the value of a specified [JOSE header](https://datatracker.ietf.org/doc/html/rfc7515#section-4)\n\n`$jwt_claim_`*`name`*\n\nreturns the value of a specified [JWT claim](https://datatracker.ietf.org/doc/html/rfc7519#section-4)\n\nFor nested claims and claims including a dot (“.”), the value of the variable cannot be evaluated; the [auth_jwt_claim_set](#auth_jwt_claim_set) directive should be used instead.\n\nVariable values for tokens encrypted with JWE are available only after decryption which occurs during the [Access](../dev/development_guide#http_phases) phase.\n\n`$jwt_payload`\n\nreturns the decrypted top-level payload of `nested` or `encrypted` tokens (1.21.2). For nested tokens returns the enclosed JWS token. For encrypted tokens returns JSON with claims.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html](https://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html)"
- name: auth_jwt_type
  id: http/ngx_http_auth_jwt_module#auth_jwt_type
  summary: This directive appeared in version 1.19.7
  belongs_to: ngx_http_auth_jwt_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`auth_jwt_type`**` signed | encrypted | nested;` |
    | Default: | `auth_jwt_type signed;`                            |
    | Context: | `http`, `server`, `location`, `limit_except`       |

    This directive appeared in version 1.19.7.

    Specifies which type of JSON Web Token to expect: JWS (`signed`), JWE (`encrypted`), or signed and then encrypted Nested JWT (`nested`) (1.21.0).
- name: auth_request
  id: http/ngx_http_auth_request_module#auth_request
  summary: Enables authorization based on the result of a subrequest and sets the URI to which the subrequest will be sent
  belongs_to: ngx_http_auth_request_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`auth_request`***`uri`*` | off;` |
    | Default: | `auth_request off;`                |
    | Context: | `http`, `server`, `location`       |

    Enables authorization based on the result of a subrequest and sets the URI to which the subrequest will be sent.
- name: auth_request_set
  id: http/ngx_http_auth_request_module#auth_request_set
  summary: Sets the request variable to the given value after the authorization request completes
  belongs_to: ngx_http_auth_request_module
  description: "|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`auth_request_set`***`$variablevalue`*`;` |\n| Default: | —                                           |\n| Context: | `http`, `server`, `location`                |\n\nSets the request *`variable`* to the given *`value`* after the authorization request completes. The value may contain variables from the authorization request, such as `$upstream_http_*`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_auth_request_module.html](https://nginx.org/en/docs/http/ngx_http_auth_request_module.html)"
- name: autoindex
  id: http/ngx_http_autoindex_module#autoindex
  summary: Enables or disables the directory listing output
  belongs_to: ngx_http_autoindex_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`autoindex`**` on | off;`  |
    | Default: | `autoindex off;`             |
    | Context: | `http`, `server`, `location` |

    Enables or disables the directory listing output.
- name: autoindex_exact_size
  id: http/ngx_http_autoindex_module#autoindex_exact_size
  summary: For the HTML format, specifies whether exact file sizes should be output in the directory listing, or rather rounded to kilobytes, megabytes, and gigabytes
  belongs_to: ngx_http_autoindex_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`autoindex_exact_size`**` on | off;` |
    | Default: | `autoindex_exact_size on;`             |
    | Context: | `http`, `server`, `location`           |

    For the HTML [format](#autoindex_format), specifies whether exact file sizes should be output in the directory listing, or rather rounded to kilobytes, megabytes, and gigabytes.
- name: autoindex_format
  id: http/ngx_http_autoindex_module#autoindex_format
  summary: This directive appeared in version 1.7.9
  belongs_to: ngx_http_autoindex_module
  description: |-
    |          |                                                     |
    |----------|-----------------------------------------------------|
    | Syntax:  | **`autoindex_format`**` html | xml | json | jsonp;` |
    | Default: | `autoindex_format html;`                            |
    | Context: | `http`, `server`, `location`                        |

    This directive appeared in version 1.7.9.

    Sets the format of a directory listing.

    When the JSONP format is used, the name of a callback function is set with the `callback` request argument. If the argument is missing or has an empty value, then the JSON format is used.

    The XML output can be transformed using the [ngx_http_xslt_module](ngx_http_xslt_module) module.
- name: autoindex_localtime
  id: http/ngx_http_autoindex_module#autoindex_localtime
  summary: For the HTML format, specifies whether times in the directory listing should be output in the local time zone or UTC
  belongs_to: ngx_http_autoindex_module
  description: "|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`autoindex_localtime`**` on | off;` |\n| Default: | `autoindex_localtime off;`            |\n| Context: | `http`, `server`, `location`          |\n\nFor the HTML [format](#autoindex_format), specifies whether times in the directory listing should be output in the local time zone or UTC.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_autoindex_module.html](https://nginx.org/en/docs/http/ngx_http_autoindex_module.html)"
- name: Beginner’s Guide
  id: beginners_guide
  summary: This guide gives a basic introduction to nginx and describes some simple tasks that can be done with it
  description: "# Beginner’s Guide\n\n- [Starting, Stopping, and Reloading Configuration](#control)\n- [Configuration File’s Structure](#conf_structure)\n- [Serving Static Content](#static)\n- [Setting Up a Simple Proxy Server](#proxy)\n- [Setting Up FastCGI Proxying](#fastcgi)\n\nThis guide gives a basic introduction to nginx and describes some simple tasks that can be done with it. It is supposed that nginx is already installed on the reader’s machine. If it is not, see the [Installing nginx](install) page. This guide describes how to start and stop nginx, and reload its configuration, explains the structure of the configuration file and describes how to set up nginx to serve out static content, how to configure nginx as a proxy server, and how to connect it with a FastCGI application.\n\nnginx has one master process and several worker processes. The main purpose of the master process is to read and evaluate configuration, and maintain worker processes. Worker processes do actual processing of requests. nginx employs event-based model and OS-dependent mechanisms to efficiently distribute requests among worker processes. The number of worker processes is defined in the configuration file and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores (see [worker_processes](ngx_core_module#worker_processes)).\n\nThe way nginx and its modules work is determined in the configuration file. By default, the configuration file is named `nginx.conf` and placed in the directory `/usr/local/nginx/conf`, `/etc/nginx`, or `/usr/local/etc/nginx`.\n\n#### Starting, Stopping, and Reloading Configuration\n\nTo start nginx, run the executable file. Once nginx is started, it can be controlled by invoking the executable with the `-s` parameter. Use the following syntax:\n\n``` nginx\nnginx -s signal\n```\n\nWhere *signal* may be one of the following:\n\n- `stop` — fast shutdown\n- `quit` — graceful shutdown\n- `reload` — reloading the configuration file\n- `reopen` — reopening the log files\n\nFor example, to stop nginx processes with waiting for the worker processes to finish serving current requests, the following command can be executed:\n\n``` nginx\nnginx -s quit\n```\n\nThis command should be executed under the same user that started nginx.\n\nChanges made in the configuration file will not be applied until the command to reload configuration is sent to nginx or it is restarted. To reload configuration, execute:\n\n``` nginx\nnginx -s reload\n```\n\nOnce the master process receives the signal to reload configuration, it checks the syntax validity of the new configuration file and tries to apply the configuration provided in it. If this is a success, the master process starts new worker processes and sends messages to old worker processes, requesting them to shut down. Otherwise, the master process rolls back the changes and continues to work with the old configuration. Old worker processes, receiving a command to shut down, stop accepting new connections and continue to service current requests until all such requests are serviced. After that, the old worker processes exit.\n\nA signal may also be sent to nginx processes with the help of Unix tools such as the `kill` utility. In this case a signal is sent directly to a process with a given process ID. The process ID of the nginx master process is written, by default, to the `nginx.pid` in the directory `/usr/local/nginx/logs` or `/var/run`. For example, if the master process ID is 1628, to send the QUIT signal resulting in nginx’s graceful shutdown, execute:\n\n``` nginx\nkill -s QUIT 1628\n```\n\nFor getting the list of all running nginx processes, the `ps` utility may be used, for example, in the following way:\n\n``` nginx\nps -ax | grep nginx\n```\n\nFor more information on sending signals to nginx, see [Controlling nginx](control).\n\n#### Configuration File’s Structure\n\nnginx consists of modules which are controlled by directives specified in the configuration file. Directives are divided into simple directives and block directives. A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (`;`). A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of additional instructions surrounded by braces (`{` and `}`). If a block directive can have other directives inside braces, it is called a context (examples: [events](ngx_core_module#events), [http](http/ngx_http_core_module#http), [server](http/ngx_http_core_module#server), and [location](http/ngx_http_core_module#location)).\n\nDirectives placed in the configuration file outside of any contexts are considered to be in the [main](ngx_core_module) context. The `events` and `http` directives reside in the `main` context, `server` in `http`, and `location` in `server`.\n\nThe rest of a line after the `#` sign is considered a comment.\n\n#### Serving Static Content\n\nAn important web server task is serving out files (such as images or static HTML pages). You will implement an example where, depending on the request, files will be served from different local directories: `/data/www` (which may contain HTML files) and `/data/images` (containing images). This will require editing of the configuration file and setting up of a [server](http/ngx_http_core_module#server) block inside the [http](http/ngx_http_core_module#http) block with two [location](http/ngx_http_core_module#location) blocks.\n\nFirst, create the `/data/www` directory and put an `index.html` file with any text content into it and create the `/data/images` directory and place some images in it.\n\nNext, open the configuration file. The default configuration file already includes several examples of the `server` block, mostly commented out. For now comment out all such blocks and start a new `server` block:\n\n``` nginx\nhttp {\n    server {\n    }\n}\n```\n\nGenerally, the configuration file may include several `server` blocks [distinguished](http/request_processing) by ports on which they [listen](http/ngx_http_core_module#listen) to and by [server names](http/server_names). Once nginx decides which `server` processes a request, it tests the URI specified in the request’s header against the parameters of the `location` directives defined inside the `server` block.\n\nAdd the following `location` block to the `server` block:\n\n``` nginx\nlocation / {\n    root /data/www;\n}\n```\n\nThis `location` block specifies the “`/`” prefix compared with the URI from the request. For matching requests, the URI will be added to the path specified in the [root](http/ngx_http_core_module#root) directive, that is, to `/data/www`, to form the path to the requested file on the local file system. If there are several matching `location` blocks nginx selects the one with the longest prefix. The `location` block above provides the shortest prefix, of length one, and so only if all other `location` blocks fail to provide a match, this block will be used.\n\nNext, add the second `location` block:\n\n``` nginx\nlocation /images/ {\n    root /data;\n}\n```\n\nIt will be a match for requests starting with `/images/` (`location /` also matches such requests, but has shorter prefix).\n\nThe resulting configuration of the `server` block should look like this:\n\n``` nginx\nserver {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n```\n\nThis is already a working configuration of a server that listens on the standard port 80 and is accessible on the local machine at `http://localhost/`. In response to requests with URIs starting with `/images/`, the server will send files from the `/data/images` directory. For example, in response to the `http://localhost/images/example.png` request nginx will send the `/data/images/example.png` file. If such file does not exist, nginx will send a response indicating the 404 error. Requests with URIs not starting with `/images/` will be mapped onto the `/data/www` directory. For example, in response to the `http://localhost/some/example.html` request nginx will send the `/data/www/some/example.html` file.\n\nTo apply the new configuration, start nginx if it is not yet started or send the `reload` signal to the nginx’s master process, by executing:\n\n``` nginx\nnginx -s reload\n```\n\nIn case something does not work as expected, you may try to find out the reason in `access.log` and `error.log` files in the directory `/usr/local/nginx/logs` or `/var/log/nginx`.\n\n#### Setting Up a Simple Proxy Server\n\nOne of the frequent uses of nginx is setting it up as a proxy server, which means a server that receives requests, passes them to the proxied servers, retrieves responses from them, and sends them to the clients.\n\nWe will configure a basic proxy server, which serves requests of images with files from the local directory and sends all other requests to a proxied server. In this example, both servers will be defined on a single nginx instance.\n\nFirst, define the proxied server by adding one more `server` block to the nginx’s configuration file with the following contents:\n\n``` nginx\nserver {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n```\n\nThis will be a simple server that listens on the port 8080 (previously, the `listen` directive has not been specified since the standard port 80 was used) and maps all requests to the `/data/up1` directory on the local file system. Create this directory and put the `index.html` file into it. Note that the `root` directive is placed in the `server` context. Such `root` directive is used when the `location` block selected for serving a request does not include its own `root` directive.\n\nNext, use the server configuration from the previous section and modify it to make it a proxy server configuration. In the first `location` block, put the [proxy_pass](http/ngx_http_proxy_module#proxy_pass) directive with the protocol, name and port of the proxied server specified in the parameter (in our case, it is `http://localhost:8080`):\n\n``` nginx\nserver {\n    location / {\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n```\n\nWe will modify the second `location` block, which currently maps requests with the `/images/` prefix to the files under the `/data/images` directory, to make it match the requests of images with typical file extensions. The modified `location` block looks like this:\n\n``` nginx\nlocation ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n```\n\nThe parameter is a regular expression matching all URIs ending with `.gif`, `.jpg`, or `.png`. A regular expression should be preceded with `~`. The corresponding requests will be mapped to the `/data/images` directory.\n\nWhen nginx selects a `location` block to serve a request it first checks [location](http/ngx_http_core_module#location) directives that specify prefixes, remembering `location` with the longest prefix, and then checks regular expressions. If there is a match with a regular expression, nginx picks this `location` or, otherwise, it picks the one remembered earlier.\n\nThe resulting configuration of a proxy server will look like this:\n\n``` nginx\nserver {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n```\n\nThis server will filter requests ending with `.gif`, `.jpg`, or `.png` and map them to the `/data/images` directory (by adding URI to the `root` directive’s parameter) and pass all other requests to the proxied server configured above.\n\nTo apply new configuration, send the `reload` signal to nginx as described in the previous sections.\n\nThere are many [more](http/ngx_http_proxy_module) directives that may be used to further configure a proxy connection.\n\n#### Setting Up FastCGI Proxying\n\nnginx can be used to route requests to FastCGI servers which run applications built with various frameworks and programming languages such as PHP.\n\nThe most basic nginx configuration to work with a FastCGI server includes using the [fastcgi_pass](http/ngx_http_fastcgi_module#fastcgi_pass) directive instead of the `proxy_pass` directive, and [fastcgi_param](http/ngx_http_fastcgi_module#fastcgi_param) directives to set parameters passed to a FastCGI server. Suppose the FastCGI server is accessible on `localhost:9000`. Taking the proxy configuration from the previous section as a basis, replace the `proxy_pass` directive with the `fastcgi_pass` directive and change the parameter to `localhost:9000`. In PHP, the `SCRIPT_FILENAME` parameter is used for determining the script name, and the `QUERY_STRING` parameter is used to pass request parameters. The resulting configuration would be:\n\n``` nginx\nserver {\n    location / {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param QUERY_STRING    $query_string;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n```\n\nThis will set up a server that will route all requests except for requests for static images to the proxied server operating on `localhost:9000` through the FastCGI protocol.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/beginners_guide.html](https://nginx.org/en/docs/beginners_guide.html)"
- name: break
  id: http/ngx_http_rewrite_module#break
  summary: Stops processing the current set of ngx_http_rewrite_module directives
  belongs_to: ngx_http_rewrite_module
  description: |-
    |          |                            |
    |----------|----------------------------|
    | Syntax:  | **`break`**`;`             |
    | Default: | —                          |
    | Context: | `server`, `location`, `if` |

    Stops processing the current set of `ngx_http_rewrite_module` directives.

    If a directive is specified inside the [location](ngx_http_core_module#location), further processing of the request continues in this location.

    Example:

    ``` nginx
    if ($slow) {
        limit_rate 10k;
        break;
    }
    ```
- name: Building nginx from Sources
  id: configure
  summary: The build is configured using the configure command
  description: "# Building nginx from Sources\n\nThe build is configured using the `configure` command. It defines various aspects of the system, including the methods nginx is allowed to use for connection processing. At the end it creates a `Makefile`.\n\nThe `configure` command supports the following parameters:\n\n`--help`  \nprints a help message.\n\n`--prefix=`*`path`*  \ndefines a directory that will keep server files. This same directory will also be used for all relative paths set by `configure` (except for paths to libraries sources) and in the `nginx.conf` configuration file. It is set to the `/usr/local/nginx` directory by default.\n\n`--sbin-path=`*`path`*  \nsets the name of an nginx executable file. This name is used only during installation. By default the file is named *`prefix`*`/sbin/nginx`.\n\n`--modules-path=`*`path`*  \ndefines a directory where nginx dynamic modules will be installed. By default the *`prefix`*`/modules` directory is used.\n\n`--conf-path=`*`path`*  \nsets the name of an `nginx.conf` configuration file. If needs be, nginx can always be started with a different configuration file, by specifying it in the command-line parameter `-c `*`file`*. By default the file is named *`prefix`*`/conf/nginx.conf`.\n\n`--error-log-path=`*`path`*  \nsets the name of the primary error, warnings, and diagnostic file. After installation, the file name can always be changed in the `nginx.conf` configuration file using the [error_log](ngx_core_module#error_log) directive. By default the file is named *`prefix`*`/logs/error.log`.\n\n`--pid-path=`*`path`*  \nsets the name of an `nginx.pid` file that will store the process ID of the main process. After installation, the file name can always be changed in the `nginx.conf` configuration file using the [pid](ngx_core_module#pid) directive. By default the file is named *`prefix`*`/logs/nginx.pid`.\n\n`--lock-path=`*`path`*  \nsets a prefix for the names of lock files. After installation, the value can always be changed in the `nginx.conf` configuration file using the [lock_file](ngx_core_module#lock_file) directive. By default the value is *`prefix`*`/logs/nginx.lock`.\n\n&nbsp;\n\n`--user=`*`name`*  \nsets the name of an unprivileged user whose credentials will be used by worker processes. After installation, the name can always be changed in the `nginx.conf` configuration file using the [user](ngx_core_module#user) directive. The default user name is nobody.\n\n`--group=`*`name`*  \nsets the name of a group whose credentials will be used by worker processes. After installation, the name can always be changed in the `nginx.conf` configuration file using the [user](ngx_core_module#user) directive. By default, a group name is set to the name of an unprivileged user.\n\n&nbsp;\n\n`--build=`*`name`*  \nsets an optional nginx build name.\n\n`--builddir=`*`path`*  \nsets a build directory.\n\n&nbsp;\n\n`--with-select_module`  \n`--without-select_module`  \nenables or disables building a module that allows the server to work with the `select()` method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.\n\n`--with-poll_module`  \n`--without-poll_module`  \nenables or disables building a module that allows the server to work with the `poll()` method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.\n\n`--with-threads`  \nenables the use of [thread pools](ngx_core_module#thread_pool).\n\n`--with-file-aio`  \nenables the use of [asynchronous file I/O](http/ngx_http_core_module#aio) (AIO) on FreeBSD and Linux.\n\n&nbsp;\n\n`--with-http_ssl_module`  \nenables building a module that adds the [HTTPS protocol support](http/ngx_http_ssl_module) to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module.\n\n`--with-http_v2_module`  \nenables building a module that provides support for [HTTP/2](http/ngx_http_v2_module). This module is not built by default.\n\n`--with-http_v3_module`  \nenables building a module that provides support for [HTTP/3](http/ngx_http_v3_module). This module is not built by default. An SSL library that provides HTTP/3 support is recommended to build and run this module, such as [BoringSSL](https://boringssl.googlesource.com/boringssl), [LibreSSL](https://www.libressl.org), or [QuicTLS](https://github.com/quictls/openssl). Otherwise, if using the OpenSSL library, OpenSSL compatibility layer will be used that does not support QUIC [early data](http/ngx_http_ssl_module#ssl_early_data).\n\n`--with-http_realip_module`  \nenables building the [ngx_http_realip_module](http/ngx_http_realip_module) module that changes the client address to the address sent in the specified header field. This module is not built by default.\n\n`--with-http_addition_module`  \nenables building the [ngx_http_addition_module](http/ngx_http_addition_module) module that adds text before and after a response. This module is not built by default.\n\n`--with-http_xslt_module`  \n`--with-http_xslt_module=dynamic`  \nenables building the [ngx_http_xslt_module](http/ngx_http_xslt_module) module that transforms XML responses using one or more XSLT stylesheets. This module is not built by default. The [libxml2](http://xmlsoft.org) and [libxslt](http://xmlsoft.org/XSLT/) libraries are required to build and run this module.\n\n`--with-http_image_filter_module`  \n`--with-http_image_filter_module=dynamic`  \nenables building the [ngx_http_image_filter_module](http/ngx_http_image_filter_module) module that transforms images in JPEG, GIF, PNG, and WebP formats. This module is not built by default.\n\n`--with-http_geoip_module`  \n`--with-http_geoip_module=dynamic`  \nenables building the [ngx_http_geoip_module](http/ngx_http_geoip_module) module that creates variables depending on the client IP address and the precompiled [MaxMind](http://www.maxmind.com) databases. This module is not built by default.\n\n`--with-http_sub_module`  \nenables building the [ngx_http_sub_module](http/ngx_http_sub_module) module that modifies a response by replacing one specified string by another. This module is not built by default.\n\n`--with-http_dav_module`  \nenables building the [ngx_http_dav_module](http/ngx_http_dav_module) module that provides file management automation via the WebDAV protocol. This module is not built by default.\n\n`--with-http_flv_module`  \nenables building the [ngx_http_flv_module](http/ngx_http_flv_module) module that provides pseudo-streaming server-side support for Flash Video (FLV) files. This module is not built by default.\n\n`--with-http_mp4_module`  \nenables building the [ngx_http_mp4_module](http/ngx_http_mp4_module) module that provides pseudo-streaming server-side support for MP4 files. This module is not built by default.\n\n`--with-http_gunzip_module`  \nenables building the [ngx_http_gunzip_module](http/ngx_http_gunzip_module) module that decompresses responses with “`Content-Encoding: gzip`” for clients that do not support “gzip” encoding method. This module is not built by default.\n\n`--with-http_gzip_static_module`  \nenables building the [ngx_http_gzip_static_module](http/ngx_http_gzip_static_module) module that enables sending precompressed files with the “`.gz`” filename extension instead of regular files. This module is not built by default.\n\n`--with-http_auth_request_module`  \nenables building the [ngx_http_auth_request_module](http/ngx_http_auth_request_module) module that implements client authorization based on the result of a subrequest. This module is not built by default.\n\n`--with-http_random_index_module`  \nenables building the [ngx_http_random_index_module](http/ngx_http_random_index_module) module that processes requests ending with the slash character (‘`/`’) and picks a random file in a directory to serve as an index file. This module is not built by default.\n\n`--with-http_secure_link_module`  \nenables building the [ngx_http_secure_link_module](http/ngx_http_secure_link_module) module. This module is not built by default.\n\n`--with-http_degradation_module`  \nenables building the `ngx_http_degradation_module` module. This module is not built by default.\n\n`--with-http_slice_module`  \nenables building the [ngx_http_slice_module](http/ngx_http_slice_module) module that splits a request into subrequests, each returning a certain range of response. The module provides more effective caching of big responses. This module is not built by default.\n\n`--with-http_stub_status_module`  \nenables building the [ngx_http_stub_status_module](http/ngx_http_stub_status_module) module that provides access to basic status information. This module is not built by default.\n\n&nbsp;\n\n`--without-http_charset_module`  \ndisables building the [ngx_http_charset_module](http/ngx_http_charset_module) module that adds the specified charset to the “Content-Type” response header field and can additionally convert data from one charset to another.\n\n`--without-http_gzip_module`  \ndisables building a module that [compresses responses](http/ngx_http_gzip_module) of an HTTP server. The zlib library is required to build and run this module.\n\n`--without-http_ssi_module`  \ndisables building the [ngx_http_ssi_module](http/ngx_http_ssi_module) module that processes SSI (Server Side Includes) commands in responses passing through it.\n\n`--without-http_userid_module`  \ndisables building the [ngx_http_userid_module](http/ngx_http_userid_module) module that sets cookies suitable for client identification.\n\n`--without-http_access_module`  \ndisables building the [ngx_http_access_module](http/ngx_http_access_module) module that allows limiting access to certain client addresses.\n\n`--without-http_auth_basic_module`  \ndisables building the [ngx_http_auth_basic_module](http/ngx_http_auth_basic_module) module that allows limiting access to resources by validating the user name and password using the “HTTP Basic Authentication” protocol.\n\n`--without-http_mirror_module`  \ndisables building the [ngx_http_mirror_module](http/ngx_http_mirror_module) module that implements mirroring of an original request by creating background mirror subrequests.\n\n`--without-http_autoindex_module`  \ndisables building the [ngx_http_autoindex_module](http/ngx_http_autoindex_module) module that processes requests ending with the slash character (‘`/`’) and produces a directory listing in case the [ngx_http_index_module](http/ngx_http_index_module) module cannot find an index file.\n\n`--without-http_geo_module`  \ndisables building the [ngx_http_geo_module](http/ngx_http_geo_module) module that creates variables with values depending on the client IP address.\n\n`--without-http_map_module`  \ndisables building the [ngx_http_map_module](http/ngx_http_map_module) module that creates variables with values depending on values of other variables.\n\n`--without-http_split_clients_module`  \ndisables building the [ngx_http_split_clients_module](http/ngx_http_split_clients_module) module that creates variables for A/B testing.\n\n`--without-http_referer_module`  \ndisables building the [ngx_http_referer_module](http/ngx_http_referer_module) module that can block access to a site for requests with invalid values in the “Referer” header field.\n\n`--without-http_rewrite_module`  \ndisables building a module that allows an HTTP server to [redirect requests and change URI of requests](http/ngx_http_rewrite_module). The PCRE library is required to build and run this module.\n\n`--without-http_proxy_module`  \ndisables building an HTTP server [proxying module](http/ngx_http_proxy_module).\n\n`--without-http_fastcgi_module`  \ndisables building the [ngx_http_fastcgi_module](http/ngx_http_fastcgi_module) module that passes requests to a FastCGI server.\n\n`--without-http_uwsgi_module`  \ndisables building the [ngx_http_uwsgi_module](http/ngx_http_uwsgi_module) module that passes requests to a uwsgi server.\n\n`--without-http_scgi_module`  \ndisables building the [ngx_http_scgi_module](http/ngx_http_scgi_module) module that passes requests to an SCGI server.\n\n`--without-http_grpc_module`  \ndisables building the [ngx_http_grpc_module](http/ngx_http_grpc_module) module that passes requests to a gRPC server.\n\n`--without-http_memcached_module`  \ndisables building the [ngx_http_memcached_module](http/ngx_http_memcached_module) module that obtains responses from a memcached server.\n\n`--without-http_limit_conn_module`  \ndisables building the [ngx_http_limit_conn_module](http/ngx_http_limit_conn_module) module that limits the number of connections per key, for example, the number of connections from a single IP address.\n\n`--without-http_limit_req_module`  \ndisables building the [ngx_http_limit_req_module](http/ngx_http_limit_req_module) module that limits the request processing rate per key, for example, the processing rate of requests coming from a single IP address.\n\n`--without-http_empty_gif_module`  \ndisables building a module that [emits single-pixel transparent GIF](http/ngx_http_empty_gif_module).\n\n`--without-http_browser_module`  \ndisables building the [ngx_http_browser_module](http/ngx_http_browser_module) module that creates variables whose values depend on the value of the “User-Agent” request header field.\n\n`--without-http_upstream_hash_module`  \ndisables building a module that implements the [hash](http/ngx_http_upstream_module#hash) load balancing method.\n\n`--without-http_upstream_ip_hash_module`  \ndisables building a module that implements the [ip_hash](http/ngx_http_upstream_module#ip_hash) load balancing method.\n\n`--without-http_upstream_least_conn_module`  \ndisables building a module that implements the [least_conn](http/ngx_http_upstream_module#least_conn) load balancing method.\n\n`--without-http_upstream_random_module`  \ndisables building a module that implements the [random](http/ngx_http_upstream_module#random) load balancing method.\n\n`--without-http_upstream_keepalive_module`  \ndisables building a module that provides [caching of connections](http/ngx_http_upstream_module#keepalive) to upstream servers.\n\n`--without-http_upstream_zone_module`  \ndisables building a module that makes it possible to store run-time state of an upstream group in a shared memory [zone](http/ngx_http_upstream_module#zone).\n\n&nbsp;\n\n`--with-http_perl_module`  \n`--with-http_perl_module=dynamic`  \nenables building the [embedded Perl module](http/ngx_http_perl_module). This module is not built by default.\n\n`--with-perl_modules_path=`*`path`*  \ndefines a directory that will keep Perl modules.\n\n`--with-perl=`*`path`*  \nsets the name of the Perl binary.\n\n&nbsp;\n\n`--http-log-path=`*`path`*  \nsets the name of the primary request log file of the HTTP server. After installation, the file name can always be changed in the `nginx.conf` configuration file using the [access_log](http/ngx_http_log_module#access_log) directive. By default the file is named *`prefix`*`/logs/access.log`.\n\n`--http-client-body-temp-path=`*`path`*  \ndefines a directory for storing temporary files that hold client request bodies. After installation, the directory can always be changed in the `nginx.conf` configuration file using the [client_body_temp_path](http/ngx_http_core_module#client_body_temp_path) directive. By default the directory is named *`prefix`*`/client_body_temp`.\n\n`--http-proxy-temp-path=`*`path`*  \ndefines a directory for storing temporary files with data received from proxied servers. After installation, the directory can always be changed in the `nginx.conf` configuration file using the [proxy_temp_path](http/ngx_http_proxy_module#proxy_temp_path) directive. By default the directory is named *`prefix`*`/proxy_temp`.\n\n`--http-fastcgi-temp-path=`*`path`*  \ndefines a directory for storing temporary files with data received from FastCGI servers. After installation, the directory can always be changed in the `nginx.conf` configuration file using the [fastcgi_temp_path](http/ngx_http_fastcgi_module#fastcgi_temp_path) directive. By default the directory is named *`prefix`*`/fastcgi_temp`.\n\n`--http-uwsgi-temp-path=`*`path`*  \ndefines a directory for storing temporary files with data received from uwsgi servers. After installation, the directory can always be changed in the `nginx.conf` configuration file using the [uwsgi_temp_path](http/ngx_http_uwsgi_module#uwsgi_temp_path) directive. By default the directory is named *`prefix`*`/uwsgi_temp`.\n\n`--http-scgi-temp-path=`*`path`*  \ndefines a directory for storing temporary files with data received from SCGI servers. After installation, the directory can always be changed in the `nginx.conf` configuration file using the [scgi_temp_path](http/ngx_http_scgi_module#scgi_temp_path) directive. By default the directory is named *`prefix`*`/scgi_temp`.\n\n&nbsp;\n\n`--without-http`  \ndisables the [HTTP](http/ngx_http_core_module) server.\n\n`--without-http-cache`  \ndisables HTTP cache.\n\n&nbsp;\n\n`--with-mail`  \n`--with-mail=dynamic`  \nenables POP3/IMAP4/SMTP [mail proxy](mail/ngx_mail_core_module) server.\n\n`--with-mail_ssl_module`  \nenables building a module that adds the [SSL/TLS protocol support](mail/ngx_mail_ssl_module) to the mail proxy server. This module is not built by default. The OpenSSL library is required to build and run this module.\n\n`--without-mail_pop3_module`  \ndisables the [POP3](mail/ngx_mail_pop3_module) protocol in mail proxy server.\n\n`--without-mail_imap_module`  \ndisables the [IMAP](mail/ngx_mail_imap_module) protocol in mail proxy server.\n\n`--without-mail_smtp_module`  \ndisables the [SMTP](mail/ngx_mail_smtp_module) protocol in mail proxy server.\n\n&nbsp;\n\n`--with-stream`  \n`--with-stream=dynamic`  \nenables building the [stream module](stream/ngx_stream_core_module) for generic TCP/UDP proxying and load balancing. This module is not built by default.\n\n`--with-stream_ssl_module`  \nenables building a module that adds the [SSL/TLS protocol support](stream/ngx_stream_ssl_module) to the stream module. This module is not built by default. The OpenSSL library is required to build and run this module.\n\n`--with-stream_realip_module`  \nenables building the [ngx_stream_realip_module](stream/ngx_stream_realip_module) module that changes the client address to the address sent in the PROXY protocol header. This module is not built by default.\n\n`--with-stream_geoip_module`  \n`--with-stream_geoip_module=dynamic`  \nenables building the [ngx_stream_geoip_module](stream/ngx_stream_geoip_module) module that creates variables depending on the client IP address and the precompiled [MaxMind](http://www.maxmind.com) databases. This module is not built by default.\n\n`--with-stream_ssl_preread_module`  \nenables building the [ngx_stream_ssl_preread_module](stream/ngx_stream_ssl_preread_module) module that allows extracting information from the [ClientHello](https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.2) message without terminating SSL/TLS. This module is not built by default.\n\n`--without-stream_limit_conn_module`  \ndisables building the [ngx_stream_limit_conn_module](stream/ngx_stream_limit_conn_module) module that limits the number of connections per key, for example, the number of connections from a single IP address.\n\n`--without-stream_access_module`  \ndisables building the [ngx_stream_access_module](stream/ngx_stream_access_module) module that allows limiting access to certain client addresses.\n\n`--without-stream_geo_module`  \ndisables building the [ngx_stream_geo_module](stream/ngx_stream_geo_module) module that creates variables with values depending on the client IP address.\n\n`--without-stream_map_module`  \ndisables building the [ngx_stream_map_module](stream/ngx_stream_map_module) module that creates variables with values depending on values of other variables.\n\n`--without-stream_split_clients_module`  \ndisables building the [ngx_stream_split_clients_module](stream/ngx_stream_split_clients_module) module that creates variables for A/B testing.\n\n`--without-stream_return_module`  \ndisables building the [ngx_stream_return_module](stream/ngx_stream_return_module) module that sends some specified value to the client and then closes the connection.\n\n`--without-stream_set_module`  \ndisables building the [ngx_stream_set_module](stream/ngx_stream_set_module) module that sets a value for a variable.\n\n`--without-stream_upstream_hash_module`  \ndisables building a module that implements the [hash](stream/ngx_stream_upstream_module#hash) load balancing method.\n\n`--without-stream_upstream_least_conn_module`  \ndisables building a module that implements the [least_conn](stream/ngx_stream_upstream_module#least_conn) load balancing method.\n\n`--without-stream_upstream_random_module`  \ndisables building a module that implements the [random](stream/ngx_stream_upstream_module#random) load balancing method.\n\n`--without-stream_upstream_zone_module`  \ndisables building a module that makes it possible to store run-time state of an upstream group in a shared memory [zone](stream/ngx_stream_upstream_module#zone).\n\n&nbsp;\n\n`--with-google_perftools_module`  \nenables building the [ngx_google_perftools_module](ngx_google_perftools_module) module that enables profiling of nginx worker processes using [Google Performance Tools](https://github.com/gperftools/gperftools). The module is intended for nginx developers and is not built by default.\n\n`--with-cpp_test_module`  \nenables building the `ngx_cpp_test_module` module.\n\n&nbsp;\n\n`--add-module=`*`path`*  \nenables an external module.\n\n`--add-dynamic-module=`*`path`*  \nenables an external dynamic module.\n\n&nbsp;\n\n`--with-compat`  \nenables dynamic modules compatibility.\n\n&nbsp;\n\n`--with-cc=`*`path`*  \nsets the name of the C compiler.\n\n`--with-cpp=`*`path`*  \nsets the name of the C preprocessor.\n\n`--with-cc-opt=`*`parameters`*  \nsets additional parameters that will be added to the CFLAGS variable. When using the system PCRE library under FreeBSD, `--with-cc-opt=\"-I /usr/local/include\"` should be specified. If the number of files supported by `select()` needs to be increased it can also be specified here such as this: `--with-cc-opt=\"-D FD_SETSIZE=2048\"`.\n\n`--with-ld-opt=`*`parameters`*  \nsets additional parameters that will be used during linking. When using the system PCRE library under FreeBSD, `--with-ld-opt=\"-L /usr/local/lib\"` should be specified.\n\n`--with-cpu-opt=`*`cpu`*  \nenables building per specified CPU: `pentium`, `pentiumpro`, `pentium3`, `pentium4`, `athlon`, `opteron`, `sparc32`, `sparc64`, `ppc64`.\n\n&nbsp;\n\n`--without-pcre`  \ndisables the usage of the PCRE library.\n\n`--with-pcre`  \nforces the usage of the PCRE library.\n\n`--with-pcre=`*`path`*  \nsets the path to the sources of the PCRE library. The library distribution needs to be downloaded from the [PCRE](http://www.pcre.org) site and extracted. The rest is done by nginx’s `./configure` and `make`. The library is required for regular expressions support in the [location](http/ngx_http_core_module#location) directive and for the [ngx_http_rewrite_module](http/ngx_http_rewrite_module) module.\n\n`--with-pcre-opt=`*`parameters`*  \nsets additional build options for PCRE.\n\n`--with-pcre-jit`  \nbuilds the PCRE library with “just-in-time compilation” support (1.1.12, the [pcre_jit](ngx_core_module#pcre_jit) directive).\n\n`--without-pcre2`  \ndisables use of the PCRE2 library instead of the original PCRE library (1.21.5).\n\n&nbsp;\n\n`--with-zlib=`*`path`*  \nsets the path to the sources of the zlib library. The library distribution needs to be downloaded from the [zlib](http://zlib.net) site and extracted. The rest is done by nginx’s `./configure` and `make`. The library is required for the [ngx_http_gzip_module](http/ngx_http_gzip_module) module.\n\n`--with-zlib-opt=`*`parameters`*  \nsets additional build options for zlib.\n\n`--with-zlib-asm=`*`cpu`*  \nenables the use of the zlib assembler sources optimized for one of the specified CPUs: `pentium`, `pentiumpro`.\n\n&nbsp;\n\n`--with-libatomic`  \nforces the libatomic_ops library usage.\n\n`--with-libatomic=`*`path`*  \nsets the path to the libatomic_ops library sources.\n\n&nbsp;\n\n`--with-openssl=`*`path`*  \nsets the path to the OpenSSL library sources.\n\n`--with-openssl-opt=`*`parameters`*  \nsets additional build options for OpenSSL.\n\n&nbsp;\n\n`--with-debug`  \nenables the [debugging log](debugging_log).\n\nExample of parameters usage (all of this needs to be typed in one line):\n\n``` nginx\n./configure\n    --sbin-path=/usr/local/nginx/nginx\n    --conf-path=/usr/local/nginx/nginx.conf\n    --pid-path=/usr/local/nginx/nginx.pid\n    --with-http_ssl_module\n    --with-pcre=../pcre2-10.39\n    --with-zlib=../zlib-1.3\n```\n\nAfter configuration, nginx is compiled and installed using `make`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/configure.html](https://nginx.org/en/docs/configure.html)"
- name: Building nginx on the Win32 platform with Visual C
  id: howto_build_on_win32
  summary: Ensure that paths to Perl, Mercurial and MSYS bin directories are added to PATH environment variable before you start build
  description: "# Building nginx on the Win32 platform with Visual C\n\n- [Build steps](#build_steps)\n- [See also](#see_also)\n\n#### Prerequisites\n\nTo build nginx on the Microsoft Win32^(®) platform you need:\n\n- Microsoft Visual C compiler. Microsoft Visual Studio^(®) 8 and 10 are known to work.\n- [MSYS](https://sourceforge.net/projects/mingw/files/MSYS/) or [MSYS2](https://www.msys2.org).\n- Perl, if you want to build OpenSSL^(®) and nginx with SSL support. For example [ActivePerl](http://www.activestate.com/activeperl) or [Strawberry Perl](http://strawberryperl.com).\n- [Mercurial](https://www.mercurial-scm.org) client.\n- [PCRE](http://www.pcre.org), [zlib](http://zlib.net) and [OpenSSL](http://www.openssl.org) libraries sources.\n\n#### Build steps\n\nEnsure that paths to Perl, Mercurial and MSYS bin directories are added to PATH environment variable before you start build. To set Visual C environment run vcvarsall.bat script from Visual C directory.\n\nTo build nginx:\n\n- Start MSYS bash.\n\n- Check out nginx sources from the hg.nginx.org repository. For example:\n\n  ``` nginx\n  hg clone http://hg.nginx.org/nginx\n  ```\n\n- Create a build and lib directories, and unpack zlib, PCRE and OpenSSL libraries sources into lib directory:\n\n  ``` nginx\n  mkdir objs\n  mkdir objs/lib\n  cd objs/lib\n  tar -xzf ../../pcre2-10.39.tar.gz\n  tar -xzf ../../zlib-1.3.1.tar.gz\n  tar -xzf ../../openssl-3.0.14.tar.gz\n  ```\n\n- Run configure script:\n\n  ``` nginx\n  auto/configure \\\n      --with-cc=cl \\\n      --with-debug \\\n      --prefix= \\\n      --conf-path=conf/nginx.conf \\\n      --pid-path=logs/nginx.pid \\\n      --http-log-path=logs/access.log \\\n      --error-log-path=logs/error.log \\\n      --sbin-path=nginx.exe \\\n      --http-client-body-temp-path=temp/client_body_temp \\\n      --http-proxy-temp-path=temp/proxy_temp \\\n      --http-fastcgi-temp-path=temp/fastcgi_temp \\\n      --http-scgi-temp-path=temp/scgi_temp \\\n      --http-uwsgi-temp-path=temp/uwsgi_temp \\\n      --with-cc-opt=-DFD_SETSIZE=1024 \\\n      --with-pcre=objs/lib/pcre2-10.39 \\\n      --with-zlib=objs/lib/zlib-1.3.1 \\\n      --with-openssl=objs/lib/openssl-3.0.14 \\\n      --with-openssl-opt=no-asm \\\n      --with-http_ssl_module\n  ```\n\n- Run make:\n\n  ``` nginx\n  nmake\n  ```\n\n#### See also\n\n- [nginx for Windows](windows)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/howto_build_on_win32.html](https://nginx.org/en/docs/howto_build_on_win32.html)"
- name: built-in modules (Reference)
  id: njs/reference#builtin_modules
  summary: Allocates a new Buffer of a specified size
  belongs_to: Reference
  description: |-
    #### built-in modules

    #### Buffer

    |                                                        |
    |--------------------------------------------------------|
    | [`Buffer.alloc()`](#buffer_alloc)                      |
    | [`Buffer.allocUnsafe()`](#buffer_alloc_unsafe)         |
    | [`Buffer.byteLength()`](#buffer_bytelength)            |
    | [`Buffer.compare()`](#buffer_compare)                  |
    | [`Buffer.concat()`](#buffer_concat)                    |
    | [`Buffer.from(array)`](#buffer_from_array)             |
    | [`Buffer.from(arrayBuffer)`](#buffer_from_arraybuffer) |
    | [`Buffer.from(buffer)`](#buffer_from_buffer)           |
    | [`Buffer.from(object)`](#buffer_from_object)           |
    | [`Buffer.from(string)`](#buffer_from_string)           |
    | [`Buffer.isBuffer()`](#buffer_is_buffer)               |
    | [`Buffer.isEncoding()`](#buffer_is_encoding)           |
    | [`buffer[]`](#buf_index)                               |
    | [`buf.buffer`](#buf_buffer)                            |
    | [`buf.byteOffset`](#buf_byte_offset)                   |
    | [`buf.compare()`](#buf_compare)                        |
    | [`buf.copy()`](#buf_copy)                              |
    | [`buf.equals()`](#buf_equals)                          |
    | [`buf.fill()`](#buf_fill)                              |
    | [`buf.includes()`](#buf_includes)                      |
    | [`buf.indexOf()`](#buf_indexof)                        |
    | [`buf.lastIndexOf()`](#buf_lastindexof)                |
    | [`buf.length`](#buf_length)                            |
    | [`buf.readIntBE()`](#buf_readintbe)                    |
    | [`buf.readIntLE()`](#buf_readintle)                    |
    | [`buf.readUIntBE()`](#buf_readuintbe)                  |
    | [`buf.readUIntLE()`](#buf_readuintle)                  |
    | [`buf.readDoubleBE`](#buf_readdobulebe)                |
    | [`buf.readDoubleLE()`](#buf_readdobulele)              |
    | [`buf.readFloatBE()`](#buf_readfloatbe)                |
    | [`buf.readFloatLE()`](#buf_readfloatle)                |
    | [`buf.subarray()`](#buf_subarray)                      |
    | [`buf.slice()`](#buf_slice)                            |
    | [`buf.swap16()`](#buf_swap16)                          |
    | [`buf.swap32()`](#buf_swap32)                          |
    | [`buf.swap64()`](#buf_swap64)                          |
    | [`buf.toJSON()`](#buf_tojson)                          |
    | [`buf.toString()`](#buf_tostring)                      |
    | [`buf.write()`](#buf_write)                            |
    | [`buf.writeIntBE()`](#buf_writeintbe)                  |
    | [`buf.writeIntLE()`](#buf_writeintle)                  |
    | [`buf.writeUIntBE()`](#buf_writeuintbe)                |
    | [`buf.writeUIntLE()`](#buf_writeuintle)                |
    | [`buf.writeDoubleBE()`](#buf_writedoublebe)            |
    | [`buf.writeDoubleLE()`](#buf_writedoublele)            |
    | [`buf.writeFloatBE()`](#buf_writefloatbe)              |
    | [`buf.writeFloatLE()`](#buf_writefloatle)              |

    `Buffer.alloc(`*`size`*`[, `*`fill`*`[, `*`encoding`*`]]))`

    Allocates a new Buffer of a specified *`size`*. If *`fill`* is not specified, the Buffer will be zero-filled. If *`fill`* is specified, the allocated Buffer will be initialized by calling [`buf.fill(fill)`](#buf_fill). If *`fill`* and *`encoding`* are specified, the allocated Buffer will be initialized by calling [`buf.fill(fill, encoding)`](#buf_fill).

    The *`fill`* parameter may be a *`string`*, *`Buffer`*, *`Uint8Array`*, or *`integer`*.

    `Buffer.allocUnsafe(`*`size`*`)`

    The same as [`Buffer.alloc()`](#buffer_alloc), with the difference that the memory allocated for the buffer is not initialized, the contents of the new buffer is unknown and may contain sensitive data.

    `Buffer.byteLength(`*`value`*`[, `*`encoding`*`])`

    Returns the byte length of a specified value, when encoded using *`encoding`*. The value can be a `string`, `Buffer`, `TypedArray`, `DataView`, or `ArrayBuffer`. If the value is a *`string`*, the `encoding` parameter is its encoding, can be *`utf8`*, *`hex`*, *`base64`*, *`base64url`*; by default is *`utf8`*.

    `Buffer.compare(`*`buffer1`*`, `*`buffer2`*`)`

    Compares *`buffer1`* with *`buffer2`* when sorting arrays of Buffer instances. Returns `0` if *`buffer1`* is the same as *`buffer2`*, `1` if *`buffer2`* should come before *`buffer1`* when sorted, or `-1` if *`buffer2`* should come after *`buffer1`* when sorted.

    `Buffer.concat(`*`list`*`[, `*`totalLength`*`])`

    Returns a new Buffer which is the result of concatenating all the Buffer instances in the list. If there are no items in the list or the total length is 0, a new zero-length Buffer is returned. If *`totalLength`* is not specified, it is calculated from the Buffer instances in list by adding their lengths. If *`totalLength`* is specified, it is coerced to an unsigned integer. If the combined length of the Buffers in list exceeds *`totalLength`*, the result is truncated to *`totalLength`*.

    `Buffer.from(`*`array`*`)`

    Allocates a new Buffer using an array of bytes in the range `0` – `255`. Array entries outside that range will be truncated.

    `Buffer.from(`*`arrayBuffer`*`, `*`byteOffset`*`[, `*`length`*`]])`

    Creates a view of the *`ArrayBuffer`* without copying the underlying memory. The optional *`byteOffset`* and *`length`* arguments specify a memory range within the *`arrayBuffer`* that will be shared by the Buffer.

    `Buffer.from(`*`buffer`*`)`

    Copies the passed buffer data onto a new Buffer instance.

    `Buffer.from(`*`object`*`[, `*`offsetOrEncoding`*`[, `*`length`*`]])`

    For objects whose `valueOf()` function returns a value not strictly equal to object, returns `Buffer.from(object.valueOf()`, `offsetOrEncoding`, `length`).

    `Buffer.from(`*`string`*`[, `*`encoding`*`])`

    Creates a new Buffer with a *`string`*. The *`encoding`* parameter identifies the character encoding to be used when converting a string into bytes. The encoding can be `utf8`, `hex`, `base64`, `base64url`; by default is `utf8`.

    `Buffer.isBuffer(`*`object`*`)`

    A boolean value, returns `true` if *`object`* is a Buffer.

    `Buffer.isEncoding(`*`encoding`*`)`

    A boolean value, returns `true` if encoding is the name of a supported character encoding.

    `buffer[`*`index`*`]`

    The index operator that can be used to get and set the octet at position `index` in `buffer`. The values refer to individual bytes, so the legal value range is between 0 and 255 (decimal).

    `buf.buffer`

    The underlying `ArrayBuffer` object based on which this Buffer object is created.

    `buf.byteOffset`

    An integer, specifying the `byteOffset` of the Buffers underlying `ArrayBuffer` object.

    `buf.compare(`*`target`*`[, `*`targetStart`*`[, `*`targetEnd`*`[, `*`sourceStart`*`[, `*`sourceEnd`*`]]]])`

    Compares buffer with *`target`* and returns a number indicating whether buffer comes before, after, or is the same as *`target`* in sort order. Comparison is based on the actual sequence of bytes in each Buffer. The `targetStart` is an integer specifying the offset within *`target`* at which to begin comparison, by default is 0. The `targetEnd` is an integer specifying the offset within *`target`* at which to end comparison, by default is `target.length`. The `sourceStart` is an integer specifying the offset within buffer at which to begin comparison, by default is 0. The `sourceEnd` is an integer specifying the offset within buffer at which to end comparison (not inclusive), by default is `buf.length`.

    `buf.copy(`*`target`*`[, `*`targetStart`*`[, `*`sourceStart`*`[, `*`sourceEnd`*`]]])`

    Copies data from a region of buffer to a region in *`target`*, even if the target memory region overlaps with buffer. The `target` parameter is a *`Buffer`* or *`Uint8Array`* to copy into.

    The `targetStart` is an integer specifying the offset within target at which to begin writing, by default is 0. The `sourceStart` is an integer specifying the offset within buffer from which to begin copying, by default is 0. The `sourceEnd` is an integer specifying the offset within buffer at which to stop copying (not inclusive) by default is *`buf.length`*.

    `buf.equals(`*`otherBuffer`*`)`

    A boolean value, returns `true` if both Buffer and *`otherBuffer`* have exactly the same bytes.

    `buf.fill(`*`value`*`[, `*`offset`*`[, `*`end`*`]][, `*`encoding`*`])`

    Fills the Buffer with the specified *`value`*. If the *`offset`* and *`end`* are not specified, the entire Buffer will be filled. The *`value`* is coerced to *`uint32`* if it is not a `string`, `Buffer`, or `integer`. If the resulting integer is greater than 255, the Buffer will be filled with *`value`* and 255.

    `buf.includes(`*`value`*`[, `*`byteOffset`*`][, `*`encoding`*`])`

    Equivalent to [`buf.indexOf()`](#buf_indexof) `!== -1`, returns `true` if the *`value`* was found in Buffer.

    `buf.indexOf(`*`value`*`[, `*`byteOffset`*`][, `*`encoding`*`])`

    Returns an integer which is the index of the first occurrence of *`value`* in Buffer, or *`-1`* if Buffer does not contain value. The *`value`* can be a `string` with specified *`encoding`* (by default *`utf8`*), `Buffer`, `Unit8Array`, or a number between 0 and 255.

    `buf.lastIndexOf(`*`value`*`[, `*`byteOffset`*`][, `*`encoding`*`])`

    The same as [`buf.indexOf()`](#buf_indexof), except the last occurrence of the *`value`* is found instead of the first occurrence. The *`value`* can be a string, Buffer, or integer between 1 and 255. If the *`value`* is an empty string or empty Buffer, `byteOffset` will be returned.

    `buf.length`

    Returns the number of bytes in Buffer.

    `buf.readIntBE(`*`offset`*`, `*`byteLength`*`)`

    Reads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a big-endian, two's complement signed value supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The similar methods are also supported: `buf.readInt8([offset])`, `buf.readInt16BE([offset])`, `buf.readInt32BE([offset])`.

    `buf.readIntLE(`*`offset`*`, `*`byteLength`*`)`

    Reads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a little-endian, two's complement signed value supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The similar methods are also supported: `buf.readInt8([offset])`, `buf.readInt16LE([offset])`, `buf.readInt32LE([offset])`.

    `buf.readUIntBE(`*`offset`*`, `*`byteLength`*`)`

    Reads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a big-endian integer supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The similar methods are also supported: `buf.readUInt8([offset])`, `buf.readUInt16BE([offset])`, `buf.readUInt32BE([offset])`.

    `buf.readUIntLE(`*`offset`*`, `*`byteLength`*`)`

    Reads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a little-endian integer supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The similar methods are also supported: `buf.readUInt8([offset])`, `buf.readUInt16LE([offset])`, `buf.readUInt32LE([offset])`.

    `buf.readDoubleBE`(\[*`offset`*\])

    Reads a 64-bit, big-endian double from `buf` at the specified *`offset`*.

    `buf.readDoubleLE`(\[*`offset`*\])

    Reads a 64-bit, little-endian double from `buf` at the specified *`offset`*.

    `buf.readFloatBE`(\[*`offset`*\])

    Reads a 32-bit, big-endian float from `buf` at the specified *`offset`*.

    `buf.readFloatLE`(\[*`offset`*\])

    Reads a 32-bit, little-endian float from `buf` at the specified *`offset`*.

    `buf.subarray([`*`start`*`[, `*`end`*`]])`

    Returns a new `buf` that references the same memory as the original, but offset and cropped by *`start`* and *`end`*. If *`end`* is greater than [`buf.length`](#buf_length), the same result as that of end equal to [`buf.length`](#buf_length) is returned.

    `buf.slice([`*`start`*`[, `*`end`*`]])`

    Returns a new `buf` that references the same memory as the original, but offset and cropped by the *`start`* and *`end`* values. The method is not compatible with the `Uint8Array.prototype.slice()`, which is a superclass of Buffer. To copy the slice, use `Uint8Array.prototype.slice()`.

    `buf.swap16`()

    Interprets `buf` as an array of unsigned 16-bit numbers and swaps the byte order in-place. Throws an error if [`buf.length`](#buf_length) is not a multiple of 2.

    `buf.swap32`()

    Interprets `buf` as an array of unsigned 32-bit numbers and swaps the byte order in-place. Throws an error if [`buf.length`](#buf_length) is not a multiple of 4.

    `buf.swap64`()

    Interprets `buf` as an array of 64-bit numbers and swaps byte order in-place. Throws an error if [`buf.length`](#buf_length) is not a multiple of 8.

    `buf.toJSON`()

    Returns a JSON representation of `buf.` `JSON.stringify()` implicitly calls this function when stringifying a Buffer instance.

    `buf.toString([`*`encoding`*`[, `*`start`*`[, `*`end`*`]]])`

    Decodes `buf` to a string according to the specified character *`encoding`* which can be *`utf8`*, *`hex`*, *`base64`*, *`base64url`*. The *`start`* and *`end`* parameters may be passed to decode only a subset of Buffer.

    `buf.write(`*`string`*`[, `*`offset`*`[, `*`length`*`]][, `*`encoding`*`])`

    Writes a *`string`* to `buf` at *`offset`* according to the character *`encoding`*. The *`length`* parameter is the number of bytes to write. If Buffer did not contain enough space to fit the entire string, only part of string will be written, however, partially encoded characters will not be written. The *`encoding`* can be *`utf8`*, *`hex`*, *`base64`*, *`base64url`*.

    `buf.writeIntBE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`

    Writes *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as big-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The following similar methods are also supported: `buf.writeInt8`, `buf.writeInt16BE`, `buf.writeInt32BE`.

    `buf.writeIntLE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`

    Writes *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as little-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The following similar methods are also supported: `buf.writeInt8`, `buf.writeInt16LE`, `buf.writeInt32LE`.

    `buf.writeUIntBE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`

    Writes *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as big-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The following similar methods are also supported: `buf.writeUInt8`, `buf.writeUInt16BE`, `buf.writeUInt32BE`.

    `buf.writeUIntLE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`

    Writes *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as little-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.

    The following similar methods are also supported: `buf.writeUInt8`, `buf.writeUInt16LE`, `buf.writeUInt32LE`.

    `buf.writeDoubleBE(`*`value`*`, [`*`offset`*`])`

    Writes the *`value`* to `buf` at the specified *`offset`* as big-endian.

    `buf.writeDoubleLE(`*`value`*`, [`*`offset`*`])`

    Writes the *`value`* to `buf` at the specified *`offset`* as little-endian.

    `buf.writeFloatBE(`*`value`*`, [`*`offset`*`])`

    Writes the *`value`* to `buf` at the specified *`offset`* as big-endian.

    `buf.writeFloatLE(`*`value`*`, [`*`offset`*`])`

    Writes the *`value`* to `buf` at the specified *`offset`* as little-endian.

    #### Crypto

    |                                             |
    |---------------------------------------------|
    | [`crypto.createHash()`](#crypto_createhash) |
    | [`crypto.createHmac()`](#crypto_createhmac) |

    Since [0.7.0](changes#njs0.7.0), extended crypto API is available as a global [crypto](#builtin_crypto) object.

    The Crypto module provides cryptographic functionality support. The Crypto module object is returned by `require('crypto')`.

    `crypto.createHash(`*`algorithm`*`)`

    Creates and returns a [Hash](#crypto_hash) object that can be used to generate hash digests using the given *`algorithm`*. The algorithm can be `md5`, `sha1`, and `sha256`.

    `crypto.createHmac(`*`algorithm`*`, `*`secret key`*`)`

    Creates and returns an [HMAC](#crypto_hmac) object that uses the given *`algorithm`* and *`secret key`*. The algorithm can be `md5`, `sha1`, and `sha256`.

    #### Hash

    |                                        |
    |----------------------------------------|
    | [`hash.update()`](#crypto_hash_update) |
    | [`hash.digest()`](#crypto_hash_digest) |

    `hash.update(`*`data`*`)`

    Updates the hash content with the given *`data`*.

    `hash.digest([`*`encoding`*`])`

    Calculates the digest of all of the data passed using `hash.update()`. The encoding can be `hex`, `base64`, and `base64url`. If encoding is not provided, a Buffer object ([0.4.4](changes#njs0.4.4)) is returned.

    Before version ([0.4.4](changes#njs0.4.4)), a byte string was returned instead of a Buffer object.

    `hash.copy()`

    Makes a copy of the current state of the hash (since [0.7.12](changes#njs0.7.12)).

    ``` nginx
    >> var cr = require('crypto')
    undefined

    >> cr.createHash('sha1').update('A').update('B').digest('base64url')
    'BtlFlCqiamG-GMPiK_GbvKjdK10'
    ```

    #### HMAC

    |                                        |
    |----------------------------------------|
    | [`hmac.update()`](#crypto_hmac_update) |
    | [`hmac.digest()`](#crypto_hmac_digest) |

    `hmac.update(`*`data`*`)`

    Updates the HMAC content with the given *`data`*.

    `hmac.digest([`*`encoding`*`])`

    Calculates the HMAC digest of all of the data passed using `hmac.update()`. The encoding can be `hex`, `base64`, and `base64url`. If encoding is not provided, a Buffer object ([0.4.4](changes#njs0.4.4)) is returned.

    Before version [0.4.4](changes#njs0.4.4), a byte string was returned instead of a Buffer object.

    ``` nginx
    >> var cr = require('crypto')
    undefined

    >> cr.createHmac('sha1', 'secret.key').update('AB').digest('base64url')
    'Oglm93xn23_MkiaEq_e9u8zk374'
    ```

    #### File System

    |                                             |
    |---------------------------------------------|
    | [`fs.accessSync()`](#fs_accesssync)         |
    | [`fs.appendFileSync()`](#fs_appendfilesync) |
    | [`fs.closeSync()`](#fs_closesync)           |
    | [`fs.existsSync()`](#fs_existssync)         |
    | [`fs.fstatSync()`](#fs_fstatsync)           |
    | [`fs.lstatSync()`](#fs_lstatsync)           |
    | [`fs.mkdirSync()`](#fs_mkdirsync)           |
    | [`fs.openSync()`](#fs_opensync)             |
    | [`fs.promises.open()`](#fs_promises_open)   |
    | [`fs.readdirSync()`](#fs_readdirsync)       |
    | [`fs.readFileSync()`](#fs_readfilesync)     |
    | [`fs.readSync()`](#fs_readsync)             |
    | [`fs.realpathSync()`](#fs_realpathsync)     |
    | [`fs.renameSync()`](#fs_renamesync)         |
    | [`fs.rmdirSync()`](#fs_rmdirsync)           |
    | [`fs.statSync()`](#fs_statsync)             |
    | [`fs.symlinkSync()`](#fs_symlinksync)       |
    | [`fs.unlinkSync()`](#fs_unlinksync)         |
    | [`fs.writeFileSync()`](#fs_writefilesync)   |
    | [`fs.writeSync()`](#fs_writesync_buf)       |
    | [`fs.writeSync()`](#fs_writesync_str)       |

    |                                          |
    |------------------------------------------|
    | [`fs.Dirent`](#fs_dirent)                |
    | [`fs.FileHandle`](#fs_filehandle)        |
    | [`fs.Stats`](#fs_stats)                  |
    | [`File Access Constants`](#access_const) |
    | [`File System Flags`](#njs_api_fs_flags) |

    The File System module provides operations with files.

    The module object is returned by `require('fs')`. Since [0.3.9](changes#njs0.3.9), promissified versions of file system methods are available through `require('fs').promises` object:

    ``` nginx
    > var fs = require('fs').promises;
    undefined
    > fs.readFile("/file/path").then((data)=>console.log(data))
    <file data>
    ```

    `accessSync(`*`path`*`[, `*`mode`*`])`

    Synchronously tests permissions for a file or directory specified in the `path` ([0.3.9](changes#njs0.3.9)). If the check fails, an error will be returned, otherwise, the method will return undefined.

    `mode`

    an optional integer that specifies the accessibility checks to be performed, by default is [`fs.constants.F_OK`](#access_const)

    ``` nginx
    try {
        fs.accessSync('/file/path', fs.constants.R_OK | fs.constants.W_OK);
        console.log('has access');
    } catch (e) {
        console.log('no access');)
    }
    ```

    `appendFileSync(`*`filename`*`, `*`data`*`[, `*`options`*`])`

    Synchronously appends specified `data` to a file with provided `filename`. The `data` is expected to be a string or a Buffer object ([0.4.4](changes#njs0.4.4)). If the file does not exist, it will be created. The `options` parameter is expected to be an object with the following keys:

    `mode`

    mode option, by default is `0o666`

    `flag`

    file system [flag](#njs_api_fs_flags), by default is `a`

    `closeSync(`*`fd`*`)`

    Closes the `fd` file descriptor represented by an integer used by the method. Returns `undefined`.

    `existsSync(`*`path`*`)`

    Boolean value, returns `true` if the specified *`path`* exists. ([0.8.2](changes#njs0.8.2))

    `fstatSync(`*`fd`*`)`

    Retrieves the [`fs.Stats`](#fs_stats) object for the file descriptor ([0.7.7](changes#njs0.7.7)). The `fd` parameter is an integer representing the file descriptor used by the method.

    `lstatSync(`*`path`*`[, `*`options`*`])`

    Synchronously retrieves the [`fs.Stats`](#fs_stats) object for the symbolic link referred to by `path` ([0.7.1](changes#njs0.7.1)). The `options` parameter is expected to be an object with the following keys:

    `throwIfNoEntry`

    a boolean value which indicates whether an exception is thrown if no file system entry exists, rather than returning `undefined`, by default is `false`.

    `mkdirSync(`*`path`*`[, `*`options`*`])`

    Synchronously creates a directory at the specified `path` ([0.4.2](changes#njs0.4.2)). The `options` parameter is expected to be an `integer` that specifies the [mode](#fs_mkdirsync_mode), or an object with the following keys:

    `mode`

    mode option, by default is `0o777`.

    `openSync(`*`path`*`[, `*`flags`*`[, `*`mode`*`]])`

    Returns an integer representing the file descriptor for the opened file `path` ([0.7.7](changes#njs0.7.7)).

    `flags`

    file system [flag](#njs_api_fs_flags), by default is `r`

    `mode`

    mode option, by default is `0o666`

    `promises.open(`*`path`*`[, `*`flags`*`[, `*`mode`*`]])`

    Returns a [`FileHandle`](#fs_filehandle) object representing the opened file `path` ([0.7.7](changes#njs0.7.7)).

    `flags`

    file system [flag](#njs_api_fs_flags), by default is `r`

    `mode`

    mode option, by default is `0o666`

    `readdirSync(`*`path`*`[, `*`options`*`])`

    Synchronously reads the contents of a directory at the specified `path` ([0.4.2](changes#njs0.4.2)). The `options` parameter is expected to be a string that specifies [encoding](#fs_readdirsync_encoding) or an object with the following keys:

    `encoding`

    encoding, by default is `utf8`. The encoding can be `utf8` and `buffer` ([0.4.4](changes#njs0.4.4)).

    `withFileTypes`

    if set to `true`, the files array will contain [`fs.Dirent`](#fs_dirent) objects, by default is `false`.

    `readFileSync(`*`filename`*`[, `*`options`*`])`

    Synchronously returns the contents of the file with provided `filename`. The `options` parameter holds `string` that specifies encoding. If an encoding is specified, a string is returned, otherwise, a Buffer object ([0.4.4](changes#njs0.4.4)) is returned.

    Before version [0.4.4](changes#njs0.4.4), a [byte string](#string_tobytes) was returned if encoding was not specified. Otherwise, `options` is expected to be an object with the following keys:

    `encoding`

    encoding, by default is not specified. The encoding can be `utf8`, `hex` ([0.4.4](changes#njs0.4.4)), `base64` ([0.4.4](changes#njs0.4.4)), `base64url` ([0.4.4](changes#njs0.4.4)).

    `flag`

    file system [flag](#njs_api_fs_flags), by default is `r`

    ``` nginx
    >> var fs = require('fs')
    undefined
    >> var file = fs.readFileSync('/file/path.tar.gz')
    undefined
    >> var gzipped = file.slice(0,2).toString('hex') === '1f8b'; gzipped
    true
    ```

    `readSync(`*`fd`*`, `*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`

    Reads the content of a file path using file descriptor `fd`, returns the number of bytes read ([0.7.7](changes#njs0.7.7)).

    `buffer`

    the `buffer` value can be a `Buffer`, `TypedArray`, or `DataView`

    `offset`

    is an `integer` representing the position in buffer to write the data to

    `length`

    is an `integer` representing the number of bytes to read

    `position`

    specifies where to begin reading from in the file, the value can be `integer` or `null`, by default is `null`. If `position` is `null`, data will be read from the current file position, and the file position will be updated. If position is an `integer`, the file position will be unchanged

    `realpathSync(`*`path`*`[, `*`options`*`])`

    Synchronously computes the canonical pathname by resolving `.`, `..` and symbolic links using [realpath(3)](http://man7.org/linux/man-pages/man3/realpath.3.html). The `options` argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback ([0.3.9](changes#njs0.3.9)).

    `renameSync(`*`oldPath`*`, `*`newPath`*`)`

    Synchronously changes the name or location of a file from `oldPath` to `newPath` ([0.3.4](changes#njs0.3.4)).

    ``` nginx
    >> var fs = require('fs')
    undefined
    >> var file = fs.renameSync('hello.txt', 'HelloWorld.txt')
    undefined
    ```

    `rmdirSync(`*`path`*`)`

    Synchronously removes a directory at the specified `path` ([0.4.2](changes#njs0.4.2)).

    `statSync(`*`path`*`,[ `*`options`*`])`

    Synchronously retrieves the [`fs.Stats`](#fs_stats) object for the specified `path` ([0.7.1](changes#njs0.7.1)). The `path` can be a `string` or `buffer`. The `options` parameter is expected to be an object with the following keys:

    `throwIfNoEntry`

    a boolean value which indicates whether an exception is thrown if no file system entry exists rather than returning `undefined`, by default is `true`.

    `symlinkSync(`*`target`*`, `*`path`*`)`

    Synchronously creates the link called `path` pointing to `target` using [symlink(2)](http://man7.org/linux/man-pages/man2/symlink.2.html) ([0.3.9](changes#njs0.3.9)). Relative targets are relative to the link’s parent directory.

    `unlinkSync(`*`path`*`)`

    Synchronously unlinks a file by `path` ([0.3.9](changes#njs0.3.9)).

    `writeFileSync(`*`filename`*`, `*`data`*`[, `*`options`*`])`

    Synchronously writes `data` to a file with provided `filename`. The `data` is expected to be a string or a Buffer object ([0.4.4](changes#njs0.4.4)). If the file does not exist, it will be created, if the file exists, it will be replaced. The `options` parameter is expected to be an object with the following keys:

    `mode`

    mode option, by default is `0o666`

    `flag`

    file system [flag](#njs_api_fs_flags), by default is `w`

    ``` nginx
    >> var fs = require('fs')
    undefined
    >> var file = fs.writeFileSync('hello.txt', 'Hello world')
    undefined
    ```

    `writeSync(`*`fd`*`, `*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`

    Writes a buffer to a file using file descriptor, returns the `number` of bytes written ([0.7.7](changes#njs0.7.7)).

    `fd`

    an `integer` representing the file descriptor

    `buffer`

    the `buffer` value can be a `Buffer`, `TypedArray`, or `DataView`

    `offset`

    is an `integer` that determines the part of the buffer to be written, by default `0`

    `length`

    is an `integer` specifying the number of bytes to write, by default is an offset of [Buffer.byteLength](#buffer_bytelength)

    `position`

    refers to the offset from the beginning of the file where this data should be written, can be an `integer` or `null`, by default is `null`. See also [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html).

    `writeSync(`*`fd`*`, `*`string`*`[, `*`position`*`[, `*`encoding`*`]])`

    Writes a `string` to a file using file descriptor `fd`, returns the `number` of bytes written ([0.7.7](changes#njs0.7.7)).

    `fd`

    is an `integer` representing a file descriptor

    `position`

    refers to the offset from the beginning of the file where this data should be written, can be an `integer` or `null`, by default is `null`. See also [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html)

    `encoding`

    is a `string`, by default is `utf8`

    #### fs.Dirent

    `fs.Dirent` is a representation of a directory entry — a file or a subdirectory. When [`readdirSync()`](#fs_readdirsync) is called with the [`withFileTypes`](#fs_readdirsync_withfiletypes) option, the resulting array contains `fs.Dirent` objects.

    - `dirent.isBlockDevice()` — returns `true` if the `fs.Dirent` object describes a block device.
    - `dirent.isCharacterDevice()` — returns `true` if the `fs.Dirent` object describes a character device.
    - `dirent.isDirectory()` — returns `true` if the `fs.Dirent` object describes a file system directory.
    - `dirent.isFIFO()` — returns `true` if the `fs.Dirent` object describes a first-in-first-out (FIFO) pipe.
    - `dirent.isFile()` — returns `true` if the `fs.Dirent` object describes a regular file.
    - `dirent.isSocket()` — returns `true` if the `fs.Dirent` object describes a socket.
    - `dirent.isSymbolicLink()` — returns `true` if the `fs.Dirent` object describes a symbolic link.
    - `dirent.name` — the name of the file `fs.Dirent` object refers to.

    #### fs.FileHandle

    |                                                        |
    |--------------------------------------------------------|
    | [`filehandle.close()`](#filehandle_close)              |
    | [`filehandle.fd`](#filehandle_fd)                      |
    | [`filehandle.read()`](#filehandle_read)                |
    | [`filehandle.stat()`](#filehandle_stat)                |
    | [`filehandle.write(`*`buf`*`)`](#filehandle_write_buf) |
    | [`filehandle.write(`*`str`*`)`](#filehandle_write_str) |

    The `FileHandle` object is an object wrapper for a numeric file descriptor ([0.7.7](changes#njs0.7.7)). Instances of the `FileHandle` object are created by the [`fs.promises.open()`](#fs_promises_open) method. If a `FileHandle` is not closed using the [`filehandle.close()`](#filehandle_close) method, it will try to automatically close the file descriptor, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable. Instead, always explicitly close a `FileHandle`.

    `filehandle.close()`

    Closes the file handle after waiting for any pending operation on the handle to complete. Returns a `promise`, fulfills with undefined upon success.

    `filehandle.fd`

    The numeric file descriptor managed by the `FileHandle` object.

    `filehandle.read(`*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`

    Reads data from the file and stores that in the given buffer.

    `buffer`

    a buffer that will be filled with the file data read, the value can be a `Buffer`, `TypedArray`, or `DataView`

    `offset`

    is an `integer` representing the location in the buffer at which to start filling

    `length`

    is an `integer` representing the number of bytes to read

    `position`

    the location where to begin reading data from the file, the value can be `integer`, `null`. If `null`, data will be read from the current file position and the position will be updated. If position is an `integer`, the current file position will remain unchanged.

    Returns a `Promise` which fulfills upon success with an object with two properties:

    `bytesRead`

    is an `integer` representing the number of bytes read

    `buffer`

    is a reference to the passed argument in buffer, can be `Buffer`, `TypedArray`, or `DataView`

    `filehandle.stat()`

    Fulfills with an [fs.Stats](#fs_stats) for the file, returns a `promise`.

    `filehandle.write(`*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`

    Writes a buffer to the file.

    `buffer`

    the `buffer` value can be a `Buffer`, `TypedArray`, or `DataView`

    `offset`

    is an `integer` representing the start position from within buffer where the data to write begins

    `length`

    is an `integer` representing the number of bytes from buffer to write, by default is an offset of [Buffer.byteLength](#buffer_bytelength)

    `position`

    the offset from the beginning of the file where the data from buffer should be written, can be an `integer` or `null`, by default is `null`. If `position` is not a `number`, the data will be written at the current position. See the POSIX [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html) documentation for details.

    Returns a `Promise` which is resolved with an object containing two properties:

    `bytesWritten`

    is an `integer` representing the number of bytes written

    `buffer`

    a reference to the buffer written, can be a `Buffer`, `TypedArray`, or `DataView`

    It is unsafe to use `filehandle.write()` multiple times on the same file without waiting for the promise to be resolved or rejected.

    `filehandle.write(`*`string`*`[, `*`position`*`[, `*`encoding`*`]])`

    Writes a `string` to the file.

    `position`

    the offset from the beginning of the file where the data from buffer should be written, can be an `integer` or `null`, by default is `null`. If `position` is not a `number`, the data will be written at the current position. See the POSIX [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html) documentation for details.

    `encoding`

    the expected encoding of the string, by default `utf8`

    Returns a `Promise` which is resolved with an object containing two properties:

    `bytesWritten`

    is an `integer` representing the number of bytes written

    `buffer`

    a reference to the buffer written, can be a `Buffer`, `TypedArray`, or `DataView`

    It is unsafe to use `filehandle.write()` multiple times on the same file without waiting for the promise to be resolved or rejected.

    #### fs.Stats

    The `fs.Stats` object provides information about a file. The object is returned from [fs.statSync()](#fs_statsync) and [fs.lstatSync()](#fs_lstatsync).

    - `stats.isBlockDevice()` — returns `true` if the `fs.Stats` object describes a block device.
    - `stats.isDirectory()` — returns `true` if the `fs.Stats` object describes a file system directory.
    - `stats.isFIFO()` — returns `true` if the `fs.Stats` object describes a first-in-first-out (FIFO) pipe.
    - `stats.isFile()` — returns `true` if the `fs.Stats` object describes a regular file.
    - `stats.isSocket()` — returns `true` if the `fs.Stats` object describes a socket.
    - `stats.isSymbolicLink()` — returns `true` if the `fs.Stats` object describes a symbolic link.
    - `stats.dev` — the numeric identifier of the device containing the file.
    - `stats.ino` — the file system specific `Inode` number for the file.
    - `stats.mode` — a bit-field describing the file type and mode.
    - `stats.nlink` — the number of hard-links that exist for the file.
    - `stats.uid` — the numeric user identifier of the user that owns the file (POSIX).
    - `stats.gid` — the numeric group identifier of the group that owns the file (POSIX).
    - `stats.rdev` — the numeric device identifier if the file represents a device.
    - `stats.size` — the size of the file in bytes.
    - `stats.blksize` — the file system block size for i/o operations.
    - `stats.blocks` — the number of blocks allocated for this file.
    - `stats.atimeMs` — the timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.
    - `stats.mtimeMs` — the timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.
    - `stats.ctimeMs` — the timestamp indicating the last time this file was changed expressed in milliseconds since the POSIX Epoch.
    - `stats.birthtimeMs` — the timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.
    - `stats.atime` — the timestamp indicating the last time this file was accessed.
    - `stats.mtime` — the timestamp indicating the last time this file was modified.
    - `stats.ctime` — the timestamp indicating the last time this file was changed.
    - `stats.birthtime` — the timestamp indicating the creation time of this file.

    #### File Access Constants

    The [`access()`](#fs_accesssync) method can accept the following flags. These flags are exported by `fs.constants`:

    - `F_OK` — indicates that the file is visible to the calling process, used by default if no mode is specified
    - `R_OK` — indicates that the file can be read by the calling process
    - `W_OK` — indicates that the file can be written by the calling process
    - `X_OK` — indicates that the file can be executed by the calling process

    #### File System Flags

    The `flag` option can accept the following values:

    - `a` — open a file for appending. The file is created if it does not exist
    - `ax` — the same as `a` but fails if the file already exists
    - `a+` — open a file for reading and appending. If the file does not exist, it will be created
    - `ax+` — the same as `a+` but fails if the file already exists
    - `as` — open a file for appending in synchronous mode. If the file does not exist, it will be created
    - `as+` — open a file for reading and appending in synchronous mode. If the file does not exist, it will be created
    - `r` — open a file for reading. An exception occurs if the file does not exist
    - `r+` — open a file for reading and writing. An exception occurs if the file does not exist
    - `rs+` — open a file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache
    - `w` — open a file for writing. If the file does not exist, it will be created. If the file exists, it will be replaced
    - `wx` — the same as `w` but fails if the file already exists
    - `w+` — open a file for reading and writing. If the file does not exist, it will be created. If the file exists, it will be replaced
    - `wx+` — the same as `w+` but fails if the file already exists

    #### Query String

    |                                                     |
    |-----------------------------------------------------|
    | [`querystring.decode()`](#querystring_decode)       |
    | [`querystring.encode()`](#querystring_encode)       |
    | [`querystring.escape()`](#querystring_escape)       |
    | [`querystring.parse()`](#querystring_parse)         |
    | [`querystring.stringify()`](#querystring_stringify) |
    | [`querystring.unescape()`](#querystring_unescape)   |

    The Query String module provides support for parsing and formatting URL query strings ([0.4.3](changes#njs0.4.3)). The Query String module object is returned by `require('querystring')`.

    `querystring.decode()`

    is an alias for [`querystring.parse()`](#querystring_parse).

    `querystring.encode()`

    is an alias for [`querystring.stringify()`](#querystring_stringify).

    `querystring.escape(`*`string`*`)`

    Performs URL encoding of the given `string`, returns an escaped query string. The method is used by [`querystring.stringify()`](#querystring_stringify) and should not be used directly.

    `querystring.parse(`*`string`*`[, `*`separator`*`[, `*`equal`*`[, `*`options`*`]]])`

    Parses the query string URL and returns an object.

    The `separator` parameter is a substring for delimiting key and value pairs in the query string, by default is “`&`”.

    The `equal` parameter is a substring for delimiting keys and values in the query string, by default is “`=`”.

    The `options` parameter is expected to be an object with the following keys:

    `decodeURIComponent`*`function`*

    Function used to decode percent-encoded characters in the query string, by default is [`querystring.unescape()`](#querystring_unescape)

    `maxKeys`*`number`*

    the maximum number of keys to parse, by default is `1000`. The `0` value removes limitations for counting keys.

    By default, percent-encoded characters within the query string are assumed to use the UTF-8 encoding, invalid UTF-8 sequences will be replaced with the `U+FFFD` replacement character.

    For example, for the following query string

    ``` nginx
    'foo=bar&abc=xyz&abc=123'
    ```

    the output will be:

    ``` nginx
    {
      foo: 'bar',
      abc: ['xyz', '123']
    }
    ```

    `querystring.stringify(`*`object`*`[, `*`separator`*`[, `*`equal`*`[, `*`options`*`]]])`

    Serializes an object and returns a URL query string.

    The `separator` parameter is a substring for delimiting key and value pairs in the query string, by default is “`&`”.

    The `equal` parameter is a substring for delimiting keys and values in the query string, by default is “`=`”.

    The `options` parameter is expected to be an object with the following keys:

    `encodeURIComponent`*`function`*

    The function to use when converting URL-unsafe characters to percent-encoding in the query string, by default is [`querystring.escape()`](#querystring_escape).

    By default, characters that require percent-encoding within the query string are encoded as UTF-8. If other encoding is required, then `encodeURIComponent` option should be specified.

    For example, for the following command

    ``` nginx
    querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], 123: '' });
    ```

    the query string will be:

    ``` nginx
    'foo=bar&baz=qux&baz=quux&123='
    ```

    `querystring.unescape(`*`string`*`)`

    Performs decoding of URL percent-encoded characters of the `string`, returns an unescaped query string. The method is used by [`querystring.parse()`](#querystring_parse) and should not be used directly.

    #### XML

    |                                                      |
    |------------------------------------------------------|
    | [`xml.parse()`](#xml_parse)                          |
    | [`xml.c14n()`](#xml_c14n)                            |
    | [`xml.exclusiveC14n()`](#xml_exclusivec14n)          |
    | [`xml.serialize()`](#xml_serialize)                  |
    | [`xml.serializeToString()`](#xml_serialize_tostring) |
    | [`XMLDoc`](#xml_doc)                                 |
    | [`XMLNode`](#xml_node)                               |
    | [`XMLAttr`](#xml_xmlattr)                            |

    The XML module allows working with XML documents (since [0.7.10](changes#njs0.7.10)). The XML module object is returned by `require('xml')`.

    Example:

    ``` nginx
    const xml = require("xml");
    let data = `<note><to b="bar" a= "foo" >Tove</to><from>Jani</from></note>`;
    let doc = xml.parse(data);

    console.log(doc.note.to.$text) /* 'Tove' */
    console.log(doc.note.to.$attr$b) /* 'bar' */
    console.log(doc.note.$tags[1].$text) /* 'Jani' */

    let dec = new TextDecoder();
    let c14n = dec.decode(xml.exclusiveC14n(doc.note));
    console.log(c14n) /* '<note><to a="foo" b="bar">Tove</to><from>Jani</from></note>' */

    c14n = dec.decode(xml.exclusiveC14n(doc.note.to));
    console.log(c14n) /* '<to a="foo" b="bar">Tove</to>' */

    c14n = dec.decode(xml.exclusiveC14n(doc.note, doc.note.to /* excluding 'to' */));
    console.log(c14n) /* '<note><from>Jani</from></note>' */
    ```

    `parse(`*`string`*` | `*`Buffer`*`)`

    Parses a string or Buffer for an XML document, returns an [`XMLDoc`](#xml_doc) wrapper object representing the parsed XML document.

    `c14n(`*`root_node`*`[, `*`excluding_node`*`])`

    Canonicalizes `root_node` and its children according to [Canonical XML Version 1.1](https://www.w3.org/TR/xml-c14n). The `root_node` can be [`XMLNode`](#xml_node) or [`XMLDoc`](#xml_doc) wrapper object around XML structure. Returns Buffer object that contains canonicalized output.

    `excluding_node`

    allows omitting from the output a part of the document

    `exclusiveC14n(`*`root_node`*`[, `*`excluding_node`*`[, `*`withComments`*` [,`*`prefix_list`*`]]])`

    Canonicalizes `root_node` and its children according to [Exclusive XML Canonicalization Version 1.0](https://www.w3.org/TR/xml-exc-c14n/).

    `root_node`

    is [`XMLNode`](#xml_node) or [`XMLDoc`](#xml_doc) wrapper object around XML structure

    `excluding_node`

    allows omitting from the output a part of the document corresponding to the node and its children

    `withComments`

    a boolean value, `false` by default. If `true`, canonicalization corresponds to [Exclusive XML Canonicalization Version 1.0](http://www.w3.org/2001/10/xml-exc-c14n#WithComments). Returns Buffer object that contains canonicalized output.

    `prefix_list`

    an optional string with a space separated namespace prefixes for namespaces that should also be included into the output

    `serialize()`

    The same as [`xml.c14n()`](#xml_c14n) (since [0.7.11](changes#njs0.7.11)).

    `serializeToString()`

    The same as [`xml.c14n()`](#xml_c14n) except it returns the result as a `string` (since [0.7.11](changes#njs0.7.11)).

    `XMLDoc`

    An XMLDoc wrapper object around XML structure, the root node of the document.

    `doc.$root`

    the document's root by its name or undefined

    `doc.`*`abc`*

    the first root tag named *`abc`* as [`XMLNode`](#xml_node) wrapper object

    `XMLNode`

    An XMLNode wrapper object around XML tag node.

    `node.`*`abc`*

    the same as [`node.$tag$`*`abc`*](#node_tag)

    `node.$attr$`*`abc`*

    the node's attribute value of *`abc`*, writable since [0.7.11](changes#njs0.7.11)

    `node.$attr$`*`abc`*=*`xyz`*

    the same as [`node.setAttribute('`*`abc`*`', `*`xyz`*`)`](#node_setattribute) (since [0.7.11](changes#njs0.7.11))

    `node.$attrs`

    an [`XMLAttr`](#xml_xmlattr) wrapper object for all attributes of the node

    `node.$name`

    the name of the node

    `node.$ns`

    the namespace of the node

    `node.$parent`

    the parent node of the current node

    `node.$tag$`*`abc`*

    the first child tag of the node named *`abc`*, writable since [0.7.11](changes#njs0.7.11)

    `node.$tags`

    an array of all children tags

    `node.$tags = [node1, node2, ...]`

    the same as [`node.removeChildren`()](#node_removechildren); [`node.addChild(`*`node1`*`)`](#node_addchild); [`node.addChild(`*`node2`*`)`](#node_addchild) (since [0.7.11](changes#njs0.7.11)).

    `node.$tags$`*`abc`*

    all children tags named *`abc`* of the node, writable since [0.7.11](changes#njs0.7.11)

    `node.$text`

    the content of the node, writable since [0.7.11](changes#njs0.7.11)

    `node.$text = 'abc' `

    the same as [`node.setText('abc')`](#node_settext) (since [0.7.11](changes#njs0.7.11))

    `node.addChild(`*`nd`*`)`

    adds XMLNode as a child to node (since [0.7.11](changes#njs0.7.11)). `nd` is recursively copied before adding to the node

    `node.removeAllAttributes()`

    removes all attributes of the node (since [0.7.11](changes#njs0.7.11))

    `node.removeAttribute(`*`attr_name`*`)`

    removes the attribute named `attr_name` (since [0.7.11](changes#njs0.7.11))

    `node.removeChildren(`*`tag_name`*`)`

    removes all the children tags named `tag_name` (since [0.7.11](changes#njs0.7.11)). If `tag_name` is absent, all children tags are removed

    `node.removeText()`

    removes the node's text value ([0.7.11](changes#njs0.7.11))

    `node.setAttribute(`*`attr_name`*`, `*`value`*`)`

    sets a value for an `attr_name` (since [0.7.11](changes#njs0.7.11)). When the value is `null`, the attribute named `attr_name` is deleted

    `node.setText(`*`value`*`)`

    sets a text value for the node (since [0.7.11](changes#njs0.7.11)). When the value is `null`, the text of the node is deleted.

    `XMLAttr`

    An XMLAttrs wrapper object around XML node attributes.

    `attr.`*`abc`*

    the attribute value of *`abc`*
- name: built-in objects (Reference)
  id: njs/reference#builtin_objects
  summary: null
  belongs_to: Reference
  description: '#### built-in objects'
- name: Changes
  id: njs/changes
  summary: 'Change: r.variables.var, r.requestText, r.responseText, s.variables.var, and the data argument of the s.on() callback with upload or download event types will now convert bytes invalid in UTF-8 encoding into the replacement character'
  description: "# Changes\n\n#### Changes with njs 0.8.5\n\nRelease Date: 25 June 2024\n\nnginx modules:\n\n- Change: [`r.variables.var`](reference#r_variables), [`r.requestText`](reference#r_request_text), [`r.responseText`](reference#r_response_text), [`s.variables.var`](reference#s_variables), and the `data` argument of the [`s.on()`](reference#njs_on) callback with `upload` or `download` event types will now convert bytes invalid in UTF-8 encoding into the replacement character. When working with binary data, use [`r.rawVariables.var`](reference#r_raw_variables), [`r.requestBuffer`](reference#r_request_buffer), [`r.responseBuffer`](reference#r_response_buffer), [`s.rawVariables.var`](reference#s_raw_variables), and the `upstream` or `downstream` event type for [`s.on()`](reference#njs_on) instead.\n\n- Feature: added `timeout` argument for [`add()`](reference#dict_add), [`set()`](reference#dict_set), and [`incr()`](reference#dict_incr) methods of a shared dictionary.\n\n- Bugfix: fixed checking for duplicate [`js_set`](../http/ngx_http_js_module#js_set) variables.\n\n- Bugfix: fixed request `Host` header when the port is non-standard.\n\n- Bugfix: fixed handling of a zero-length request body in [`ngx.fetch()`](reference#ngx_fetch) and [`r.subrequest()`](reference#r_subrequest).\n\n- Bugfix: fixed heap-buffer-overflow in `Headers.get()`.\n\n- Bugfix: fixed [`r.subrequest()`](reference#r_subrequest) error handling.\n\nCore:\n\n- Feature: added `zlib` module for `QuickJS` engine.\n\n- Bugfix: fixed [`zlib.inflate()`](reference#zlib_inflatesync).\n\n- Bugfix: fixed `String.prototype.replaceAll()` with a zero-length argument.\n\n- Bugfix: fixed `retval` handling after an exception in `Array.prototype.toSpliced()`, `Array.prototype.toReversed()`, `Array.prototype.toSorted()`.\n\n- Bugfix: fixed `RegExp.prototype[@@replace]()` with replacements containing `$'`, `` $` `` and strings with Unicode characters.\n\n- Bugfix: fixed a one-byte overread in `decodeURI()` and `decodeURIComponent()`.\n\n- Bugfix: fixed tracking of argument scope.\n\n- Bugfix: fixed integer overflow in `Date.parse()`.\n\n#### Changes with njs 0.8.4\n\nRelease Date: 16 April 2024\n\nnginx modules:\n\n- Feature: the `Server` header for outgoing header can be set.\n\n- Improvement: validating URI and args arguments in [`r.subrequest()`](reference#r_subrequest).\n\n- Improvement: checking for duplicate [js_set](../http/ngx_http_js_module#js_set) variables.\n\n- Bugfix: fixed [`clear()`](reference#dict_clear) method of a shared dictionary without a timeout introduced in [0.8.3](#njs0.8.3).\n\n- Bugfix: fixed [`r.send()`](reference#r_send) method of a shared dictionary without a timeout with `Buffer` argument.\n\nCore:\n\n- Feature: added `QuickJS` engine support in CLI.\n\n- Bugfix: fixed [`atob()`](reference#atob) with non-padded `base64` strings.\n\n#### Changes with njs 0.8.3\n\nRelease Date: 07 February 2024\n\nnginx modules:\n\n- Bugfix: fixed [`Headers.set()`](reference#headers_set).\n\n- Bugfix: fixed [js_set](../http/ngx_http_js_module#js_set) with `Buffer` values.\n\n- Bugfix: fixed [`clear()`](reference#dict_clear) method of a shared dictionary when a timeout is not specified.\n\n- Bugfix: fixed [stub_status](../http/ngx_http_stub_status_module) statistics when [js_periodic](../http/ngx_http_js_module#js_periodic) is enabled.\n\nCore:\n\n- Bugfix: fixed building with [libxml2](https://gitlab.gnome.org/GNOME/libxml2) 2.12 and later.\n\n- Bugfix: fixed `Date` constructor for overflows and with `NaN` values.\n\n- Bugfix: fixed underflow in [`querystring.parse()`](reference#querystring_parse).\n\n- Bugfix: fixed potential buffer overread in `String.prototype.match()`.\n\n- Bugfix: fixed parsing of `for-in` loops.\n\n- Bugfix: fixed parsing of hexadecimal, octal, and binary literals with no digits.\n\n#### Changes with njs 0.8.2\n\nRelease Date: 24 October 2023\n\nnginx modules:\n\n- Feature: introduced [console](reference#console) object. The following methods were introduced: [`error()`](reference#console_error), [`info()`](reference#console_info), [`log()`](reference#console_log), [`time()`](reference#console_time), [`timeEnd()`](reference#console_time_end), [`warn()`](reference#console_warn).\n\n- Bugfix: fixed `HEAD` response handling with large Content-Length in [Fetch API](reference#ngx_fetch).\n\n- Bugfix: fixed [`items()`](reference#dict_items) method for a shared dictionary.\n\n- Bugfix: fixed [`delete()`](reference#dict_delete) method for a shared dictionary.\n\nCore:\n\n- Feature: extended [`fs`](reference#njs_api_fs) module. Added [`fs.existsSync()`](reference#fs_existssync).\n\n- Bugfix: fixed [`xml`](reference#xml) module. Broken XML exception handling in [`xml.parse()`](reference#xml_parse) method was fixed.\n\n- Bugfix: fixed `Regexp.prototype.exec()` with global regexp and Unicode input.\n\n#### Changes with njs 0.8.1\n\nRelease Date: 12 September 2023\n\nnginx modules:\n\n- Feature: introduced the `js_periodic` directive for [http](../http/ngx_http_js_module#js_periodic) and [stream](../stream/ngx_stream_js_module#js_periodic) that allows specifying a JS handler to run at regular intervals.\n\n- Feature: implemented [`items()`](reference#dict_items) method of a [shared dictionary](reference#ngx_shared). The method returns all the non-expired key-value pairs.\n\n- Bugfix: fixed [`size()`](reference#dict_size) and [`keys()`](reference#dict_keys) methods of a [shared dictionary](reference#ngx_shared).\n\n- Bugfix: fixed erroneous exception in [`r.internalRedirect()`](reference#r_internal_redirect) introduced in [0.8.0](#njs0.8.0).\n\nCore:\n\n- Bugfix: fixed incorrect order of keys in `Object.getOwnPropertyNames()`.\n\n#### Changes with njs 0.8.0\n\nRelease Date: 06 July 2023\n\nnginx modules:\n\n- Change: removed special treatment of forbidden headers in [Fetch API](reference#ngx_fetch) introduced in [0.7.10](#njs0.7.10).\n\n- Change: removed deprecated since [0.5.0](#njs0.5.0) [`r.requestBody`](reference#r_request_body) and [`r.responseBody`](reference#r_response_body) in [`http`](../http/ngx_http_js_module) module.\n\n- Change: throwing an exception in [`r.internalRedirect()`](reference#r_internal_redirect) while filtering in [`http`](../http/ngx_http_js_module) module.\n\n- Feature: introduced more global [`nginx`](reference#ngx) properties: [`ngx.build`](reference#ngx_build), [`ngx.conf_file_path`](reference#ngx_conf_file_path), [`ngx.error_log_path`](reference#ngx_error_log_path), [`ngx.prefix`](reference#ngx_prefix), [`ngx.version`](reference#ngx_version), [`ngx.version_number`](reference#ngx_version_number), and [`ngx.worker_id`](reference#ngx_worker_id).\n\n- Feature: introduced the `js_shared_dict_zone` directive for [http](../http/ngx_http_js_module#js_shared_dict_zone) and [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) that allows declaring a dictionary shared between worker processes.\n\n- Feature: introduced global [`nginx.shared`](reference#ngx_shared) methods and properties for working with shared dictionaries.\n\n- Improvement: added compile-time options to disable njs modules. For example, to disable libxslt-related code:\n\n  ``` nginx\n  NJS_LIBXSLT=NO ./configure  .. --add-module=/path/to/njs/module\n  ```\n\n- Bugfix: fixed [`r.status`](reference#r_status) setter when filtering in [`http`](../http/ngx_http_js_module) module.\n\n- Bugfix: fixed setting of Location header in [`http`](../http/ngx_http_js_module) module.\n\nCore:\n\n- Change: native methods are provided with `retval` argument. This change breaks compatibility with C extension for njs requiring the modification of the code.\n\n- Change: non-compliant deprecated String methods were removed. The following methods were removed: [`String.bytesFrom()`](reference#string_bytesfrom), [`String.prototype.fromBytes()`](reference#string_frombytes), [`String.prototype.fromUTF8()`](reference#string_fromutf8), [`String.prototype.toBytes()`](reference#string_tobytes), [`String.prototype.toUTF8()`](reference#string_toutf8), [`String.prototype.toString(`*`encoding`*`)`](reference#string_toutf8).\n\n- Change: removed support for building with GNU readline.\n\n- Feature: added ES13-compliant `Array` methods: `Array.from()`, `Array.prototype.toSorted()`, `Array.prototype.toSpliced()`, `Array.prototype.toReversed()`.\n\n- Feature: added ES13-compliant `TypedArray` methods: `%TypedArray%.prototype.toSorted()`, `%TypedArray%.prototype.toSpliced()`, `%TypedArray%.prototype.toReversed()`.\n\n- Feature: added [`CryptoKey`](reference#cryptokey) properties in [WebCrypto API](reference#builtin_crypto). The following properties were added: [`algorithm`](reference#cryptokey_alg), [`extractable`](reference#cryptokey_extractable), [`type`](reference#cryptokey_type), [`usages`](reference#cryptokey_usages).\n\n- Bugfix: fixed `retval` of [`сrypto.getRandomValues()`](reference#crypto_get_random_values).\n\n- Bugfix: fixed evaluation of computed property names with function expressions.\n\n- Bugfix: fixed implicit name for a function expression declared in arrays.\n\n- Bugfix: fixed parsing of `for-in` loops.\n\n- Bugfix: fixed `Date.parse()` with ISO-8601 format and UTC time offset.\n\n#### Changes with njs 0.7.12\n\nRelease Date: 10 April 2023\n\nnginx modules:\n\n- Bugfix: fixed `Headers()` constructor in [Fetch API](reference#ngx_fetch).\n\nCore:\n\n- Feature: added [`Hash.copy()`](reference#crypto_hash_copy) method in [crypto](reference#crypto) module.\n\n- Feature: added [zlib](reference#zlib) module.\n\n- Improvement: added support for `export {name as default}` statement.\n\n- Bugfix: fixed `Number` constructor according to the spec.\n\n#### Changes with njs 0.7.11\n\nRelease Date: 09 March 2023\n\nnginx modules:\n\n- Bugfix: added missed linking with [libxml2](https://gitlab.gnome.org/GNOME/libxml2) for the dynamic module. The bug was introduced in [0.7.10](#njs0.7.10).\n\nCore:\n\n- Feature: added [XMLNode API](reference#xml_node) to modify XML documents.\n\n- Change: removed `XML_PARSE_DTDVALID` during parsing of an XML document due to security implications. The issue was introduced in [0.7.10](#njs0.7.10). When `XML_PARSE_DTDVALID` is enabled, [libxml2](https://gitlab.gnome.org/GNOME/libxml2) parses and executes external entities present inside an XML document.\n\n- Bugfix: fixed the detection of `await` in arguments.\n\n- Bugfix: fixed `Error()` instance dumping when “`name`” prop is not primitive.\n\n- Bugfix: fixed array instance with a `getter` property dumping.\n\n- Bugfix: fixed `njs_object_property()` with `NJS_WHITEOUT` properties.\n\n- Bugfix: fixed `func` instance dumping with “`name`” as getter.\n\n- Bugfix: fixed attaching of a stack to an error object.\n\n- Bugfix: fixed `String.prototype.replace()` with replacement containing “`$'`”, “`` $` ``”.\n\n#### Changes with njs 0.7.10\n\nRelease Date: 07 February 2023\n\nnginx modules:\n\n- Feature: added [`Request`](reference#request), [`Response`](reference#response), and [`Headers`](reference#headers) ctors in [Fetch API](reference#ngx_fetch).\n\n- Bugfix: fixed nginx logger callback for calls in the master process.\n\nCore:\n\n- Feature: added signal support in CLI.\n\n- Feature: added [`xml`](reference#xml) module for working with XML documents.\n\n- Feature: extended support for symmetric and asymmetric keys in WebCrypto. Most notably `JWK` format for [`importKey()`](reference#crypto_subtle_import_key) was added.\n\n- Feature: extended support for symmetric and asymmetric keys in [WebCrypto API](reference#builtin_crypto). Most notably `JWK` format for [`importKey()`](reference#crypto_subtle_import_key) was added. [`generateKey()`](reference#crypto_subtle_generate_key) and [`exportKey()`](reference#crypto_subtle_export_key) were also implemented.\n\n- Feature: added `String.prototype.replaceAll()`.\n\n- Bugfix: fixed `for(expr1;` conditional syntax error handling.\n\n- Bugfix: `Object.values()` and `Object.entries()` with external objects.\n\n- Bugfix: fixed `RegExp.prototype[@@replace]()`.\n\n#### Changes with njs 0.7.9\n\nRelease Date: 17 November 2022\n\nnginx modules:\n\n- Bugfix: fixed [`Fetch`](reference#ngx_fetch) Response prototype reinitialization. When at least one `js_import` directive was declared in both [HTTP](../http/ngx_http_js_module#js_import) and [Stream](../stream/ngx_stream_js_module#js_import), [`ngx.fetch()`](reference#ngx_fetch) returned inapproriate response in Stream. The bug was introduced in [0.7.7](#njs0.7.7).\n\nCore:\n\n- Bugfix: fixed `String.prototype.replace(re)` if `re.exec()` returns non-flat array.\n\n- Bugfix: fixed `Array.prototype.fill()` when `start` object changes `this`.\n\n- Bugfix: fixed description for [`fs.mkdir()`](reference#fs_mkdirsync) and [`fs.rmdir()`](reference#fs_rmdirsync) methods.\n\n- Bugfix: fixed `%TypedArray%.prototype.set(s)` when `s` element changes `this`.\n\n- Bugfix: fixed `Array.prototype.splice(s,d)` when `d` resizes `this` during eval.\n\n- Bugfix: fixed `for-in` loop with left and right hand side expressions.\n\n#### Changes with njs 0.7.8\n\nRelease Date: 25 October 2022\n\nnginx modules:\n\n- Feature: added [js_preload_object](../http/ngx_http_js_module#js_preload_object) directive.\n\n- Feature: added [`ngx.conf_prefix`](reference#ngx_conf_prefix) property.\n\n- Feature: added [`s.sendUpstream()`](reference#s_send_upstream) and [`s.sendDownstream()`](reference#s_send_downstream) in [stream](../stream/ngx_stream_js_module) module.\n\n- Feature: added support for `HEAD` method in [Fetch API](reference#ngx_fetch).\n\n- Improvement: improved `async` callback support for [`s.send()`](reference#s_send) in [stream](../stream/ngx_stream_js_module) module.\n\nCore:\n\n- Feature: added `name` instance property for a function object.\n\n- Feature: added [`njs.memoryStats`](reference#njs_memory_stats) object.\n\n- Bugfix: fixed `String.prototype.trimEnd()` with unicode string.\n\n- Bugfix: fixed `Object.freeze()` with fast arrays.\n\n- Bugfix: fixed `Object.defineProperty()` with fast arrays.\n\n- Bugfix: fixed `async` token as a property name of an object.\n\n- Bugfix: fixed property set instruction when key modifies base binding.\n\n- Bugfix: fixed complex assignments.\n\n- Bugfix: fixed handling of unhandled promise rejection.\n\n- Bugfix: fixed process.env when duplicate environ variables are present.\n\n- Bugfix: fixed double declaration detection in modules.\n\n- Bugfix: fixed bound function calls according to the spec.\n\n- Bugfix: fixed break label for `if` statement.\n\n- Bugfix: fixed labeled empty statements.\n\n#### Changes with njs 0.7.7\n\nRelease Date: 30 August 2022\n\nnginx modules:\n\n- Feature: the number of nginx configuration contexts where js directives can be specified is extended.\n\n  - HTTP: the [js_import](../http/ngx_http_js_module#js_import), [js_path](../http/ngx_http_js_module#js_path), [js_set](../http/ngx_http_js_module#js_set), and [js_var](../http/ngx_http_js_module#js_var) directives are allowed in `server` and `location` contexts. The [js_content](../http/ngx_http_js_module#js_content), [js_body_filter](../http/ngx_http_js_module#js_body_filter) and [js_header_filter](../http/ngx_http_js_module#js_header_filter) are allowed in [if](../http/ngx_http_rewrite_module#if) context.\n\n  - Stream: the [js_import](../http/ngx_http_js_module#js_import), [js_path](../http/ngx_http_js_module#js_path), [js_set](../http/ngx_http_js_module#js_set), and [js_var](../http/ngx_http_js_module#js_var) are allowed in `server` context.\n\n- Feature: added [`r.internal`](reference#r_internal) property.\n\n- Bugfix: fixed reading response body in [Fetch API](reference#ngx_fetch).\n\n- Bugfix: fixed [js_fetch_timeout](../stream/ngx_stream_js_module#js_fetch_timeout) in [stream](../stream/ngx_stream_js_module).\n\n- Bugfix: fixed socket leak with `0` fetch timeout.\n\nCore:\n\n- Feature: extended [`fs`](reference#njs_api_fs) module. Added [`fs.openSync()`](reference#fs_opensync), [`fs.promises.open()`](reference#fs_promises_open), [`fs.fstatSync()`](reference#fs_fstatsync), [`fs.readSync()`](reference#fs_readsync), [`fs.writeSync()`](reference#fs_writesync_buf).\n\n  The following properties of [`FileHandle`](reference#fs_filehandle) are implemented: `fd`, `read()`, `stat()`, `write()`, `close()`.\n\n- Bugfix: fixed `parseInt()`, `parseFloat()`, `Symbol.for()` with no arguments.\n\n#### Changes with njs 0.7.6\n\nRelease Date: 19 July 2022\n\nnginx modules:\n\n- Feature: improved [`r.args{}`](reference#r_args) object. Added support for multiple arguments with the same key. Added case sensitivity for keys. Keys and values are percent-decoded now.\n\n- Bugfix: fixed [`r.headersOut{}`](reference#r_headers_out) setter for special headers.\n\nCore:\n\n- Feature: added `Symbol.for()` and `Symbol.keyfor()`.\n\n- Feature: added [`atob()`](reference#atob) and [`btoa()`](reference#btoa) from [WHATWG](https://html.spec.whatwg.org) spec.\n\n- Bugfix: fixed large non-decimal literals.\n\n- Bugfix: fixed Unicode argument trimming in `parseInt()`.\n\n- Bugfix: fixed `break` instruction in `try-catch` block.\n\n- Bugfix: fixed `async` function declaration in CLI.\n\n#### Changes with njs 0.7.5\n\nRelease Date: 21 June 2022\n\nnginx modules:\n\n- Change: adapting to changes in nginx header structures.\n\n- Bugfix: fixed [`r.headersOut{}`](reference#r_headers_out) special getters when value is absent.\n\n- Change: returning undefined value instead of an empty string for `Content-Type` when the header is absent.\n\nCore:\n\n- Bugfix: fixed catching of the exception thrown from an awaited function.\n\n- Bugfix: fixed function value initialization.\n\n- Bugfix: fixed interpreter when await fails.\n\n- Bugfix: fixed typed-array constructor when source array is changed while iterating.\n\n- Bugfix:fixed `String.prototype.replace()` with byte strings.\n\n- Bugfix: fixed template literal from producing byte-strings.\n\n- Bugfix: fixed array iterator with sparse arrays.\n\n- Bugfix: fixed memory free while converting a flat array to a slow array.\n\n- Bugfix: properly handling `NJS_DECLINE` in `promise` native functions.\n\n- Bugfix: fixed working with an array-like object in `Promise.all()` and friends.\n\n#### Changes with njs 0.7.4\n\nRelease Date: 24 May 2022\n\nnginx modules:\n\n- Feature: added extended directives for configuring [Fetch API](reference#ngx_fetch). The following directives were added for [http](../http/ngx_http_js_module) and [stream](../stream/ngx_stream_js_module):\n\n  - [js_fetch_timeout](../http/ngx_http_js_module#js_fetch_timeout),\n\n  - [js_fetch_verify](../http/ngx_http_js_module#js_fetch_verify),\n\n  - [js_fetch_buffer_size](../http/ngx_http_js_module#js_fetch_buffer_size),\n\n  - [js_fetch_max_response_buffer_size](../http/ngx_http_js_module#js_fetch_max_response_buffer_size).\n\n- Change: [`r.internalRedirect()`](reference#r_internal_redirect) now accepts escaped URIs.\n\n- Bugfix: fixed [Response](reference#response) parsing with more than 8 headers in [Fetch API](reference#ngx_fetch).\n\nCore:\n\n- Feature: added [`njs.version_number`](reference#njs_version_number) property.\n\n- Feature: added compatibility with BoringSSL for [WebCrypto API](reference#builtin_crypto).\n\n- Bugfix: fixed `Array.prototype.sort()` when arr size is changed in a comparator.\n\n- Bugfix: fixed `Array.prototype.slice()` with slow `this` argument.\n\n- Bugfix: fixed aggregation methods of `Promise` ctor with array-like object.\n\n- Bugfix: fixed `String.prototype.lastIndexOf()` with Unicode string as `this`.\n\n- Bugfix: fixed `JSON.parse()` when `reviver` function is provided.\n\n- Bugfix: fixed `Object.defineProperty()` when a recursive descriptor is provided.\n\n- Bugfix: fixed `Array.prototype.fill()` for typed-arrays.\n\n- Bugfix: making function expression binding immutable according to the specs.\n\n- Bugfix: fixed redefinition of special props in `Object.defineProperty()`.\n\n#### Changes with njs 0.7.3\n\nRelease Date: 12 April 2022\n\nCore:\n\n- Feature: added support of module resolution callback. This feature allows the host environment to control how imported modules are loaded.\n\n- Bugfix: fixed backtraces while traversing imported user modules.\n\n- Bugfix: fixed `Array.prototype.concat()` when `this` is a slow array.\n\n- Bugfix: fixed frame allocation from an awaited frame.\n\n- Bugfix: fixed allocation of large array literals.\n\n- Bugfix: fixed interpreter when `toString` conversion fails.\n\n#### Changes with njs 0.7.2\n\nRelease Date: 25 January 2022\n\nCore:\n\n- Bugfix: fixed `Array.prototype.join()` when array is changed while iterating.\n\n- Bugfix: fixed `Array.prototype.slice()` when array is changed while iterating.\n\n- Bugfix: fixed `Array.prototype.concat()` when array is changed while iterating.\n\n- Bugfix: fixed `Array.prototype.reverse()` when array is changed while iterating.\n\n- Bugfix: fixed `Buffer.concat()` with subarrays. Thanks to Sylvain Etienne.\n\n- Bugfix: fixed type confusion bug while resolving promises.\n\n- Bugfix: fixed `Function.prototype.apply()` with large array arguments.\n\n- Bugfix: fixed recursive `async` function calls.\n\n- Bugfix: fixed function redeclaration. The bug was introduced in [0.7.0](#njs0.7.0).\n\n#### Changes with njs 0.7.1\n\nRelease Date: 28 December 2021\n\nnginx modules:\n\n- Change: the [js_include](../http/ngx_http_js_module#js_include) directive deprecated since [0.4.0](#njs0.4.0) was removed.\n\n- Change: PCRE/PCRE2-specific code was moved to the modules. This ensures that njs uses the same RegExp library as nginx.\n\nCore:\n\n- Bugfix: fixed `decodeURI()` and `decodeURIComponent()` with invalid byte strings. The bug was introduced in [0.4.3](#njs0.4.3).\n\n- Bugfix: fixed heap-use-after-free in `await` frame. The bug was introduced in [0.7.0](#njs0.7.0).\n\n- Bugfix: fixed WebCrypto `sign()` and `verify()` methods with OpenSSL 3.0.\n\n- Bugfix: fixed exception throwing when RegExp match fails. The bug was introduced in [0.1.15](#njs0.1.15).\n\n- Bugfix: fixed catching of exception thrown in `try` block of `async` function. The bug was introduced in [0.7.0](#njs0.7.0).\n\n- Bugfix: fixed execution of `async` function in synchronous context. The bug was introduced in [0.7.0](#njs0.7.0).\n\n- Bugfix: fixed function redeclaration in CLI when interactive mode is on. The bug was introduced in [0.6.2](#njs0.6.2).\n\n- Bugfix: fixed `typeof` operator with `DataView` object.\n\n- Bugfix: eliminated information leak in `Buffer.from()`.\n\n#### Changes with njs 0.7.0\n\nRelease Date: 19 October 2021\n\nnginx modules:\n\n- Feature: Added [HTTPS](../http/ngx_http_js_module#js_fetch_protocols) support for [Fetch API](reference#ngx_fetch).\n\n- Feature: Added `setReturnValue()` method for [http](reference#r_set_return_value) and [stream](reference#s_set_return_value).\n\nCore:\n\n- Feature: introduced `Async/Await` implementation.\n\n- Feature: added [WebCrypto API](reference#builtin_crypto) implementation.\n\n- Bugfix: fixed copying of closures for declared functions. The bug was introduced in [0.6.0](#njs0.6.0).\n\n- Bugfix: fixed unhandled `promise` rejection in handle events.\n\n- Bugfix: fixed Response.headers getter in Fetch API.\n\n#### Changes with njs 0.6.2\n\nRelease Date: 31 August 2021\n\nnginx modules:\n\n- Bugfix: fixed CPU hog when `js_filter` is registered in both directions.\n\nCore:\n\n- Feature: introduced `AggregateError` implementation.\n\n- Feature: added remaining `Promise` constructor methods. The following methods were added: `Promise.all()`, `Promise.allSettled()`, `Promise.any()`, `Promise.race()`.\n\n- Improvement: removed recursion from code generator.\n\n- Bugfix: fixed rest parameter parsing without binding identifier.\n\n- Bugfix: fixed resolve/reject callback for `Promise.prototype.finally()` .\n\n- Bugfix: fixed `%TypedArray%.prototype.join()` with detached buffer.\n\n- Bugfix: fixed memory leak in interactive shell.\n\n#### Changes with njs 0.6.1\n\nRelease Date: 29 June 2021\n\n- Bugfix: fixed `RegExpBuiltinExec()` with UTF-8 only regexps. The bug was introduced in [0.4.2](#njs0.4.2).\n\n- Bugfix: fixed parsing of export default declaration with non-assignment expressions. Thanks to Artem S. Povalyukhin.\n\n#### Changes with njs 0.6.0\n\nRelease Date: 15 June 2021\n\nCore:\n\n- Feature: added `let` and `const` declaration support.\n\n- Feature: added `RegExp.prototype[Symbol.split]`.\n\n- Feature: added sticky flag support for RegExp.\n\n- Bugfix: fixed heap-buffer-overflow in `String.prototype.lastIndexOf()`.\n\n- Bugfix: fixed `RegExp.prototype.test()` according to the specification.\n\n- Bugfix: fixed `String.prototype.split()` according to the specification.\n\n- Bugfix: fixed use-of-uninitialized-value while tracking rejected promises.\n\n- Bugfix: fixed `njs.dump()` for objects with circular references.\n\n#### Changes with njs 0.5.3\n\nRelease Date: 30 March 2021\n\nnginx modules:\n\n- Feature: added the `js_var` directive for [http](../http/ngx_http_js_module#js_var) and [stream](../stream/ngx_stream_js_module#js_var).\n\n#### Changes with njs 0.5.2\n\nRelease Date: 09 March 2021\n\nnginx modules:\n\n- Feature: added the [`js_body_filter`](../http/ngx_http_js_module#js_body_filter) directive.\n\n- Feature: introduced the [`s.status`](reference#s_status) property for [Stream Session](reference#stream) object.\n\nCore:\n\n- Feature: added [`njs.on`](reference#njs_on) (`exit`) callback support.\n\n- Bugfix: fixed property descriptor reuse for not extensible objects. Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed `Object.freeze()` and friends according to the specification. Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed `Function()` in CLI mode.\n\n- Bugfix: fixed `for-in` iteration of typed array values. Thanks to Artem S. Povalyukhin.\n\n#### Changes with njs 0.5.1\n\nRelease Date: 16 February 2021\n\nnginx modules:\n\n- Feature: introduced [`ngx.fetch()`](reference#ngx_fetch) method implementing Fetch API.\n\n  The following properties and methods of [`Response`](reference#response) object are implemented: [`arrayBuffer()`](reference#response_arraybuffer), [`bodyUsed`](reference#response_bodyused), [`json()`](reference#response_json), [`headers`](reference#response_headers), [`ok`](reference#response_ok), [`redirect`](reference#response_redirect), [`status`](reference#response_status), [`statusText`](reference#response_statustext), [`text()`](reference#response_text), [`type`](reference#response_type), [`url`](reference#response_url).\n\n  Notable limitations: only the `http://` scheme is supported, redirects are not handled.\n\n  In collaboration with 洪志道 (Hong Zhi Dao).\n\n- Feature: added the [`js_header_filter`](../http/ngx_http_js_module#js_header_filter) directive.\n\n- Bugfix: fixed processing buffered data in body filter in [stream](../stream/ngx_stream_js_module) module.\n\nCore:\n\n- Bugfix: fixed safe mode bypass in `Function` constructor.\n\n- Bugfix: fixed `Date.prototype.toISOString()` with invalid date values.\n\n#### Changes with njs 0.5.0\n\nRelease Date: 01 December 2020\n\nnginx modules:\n\n- Feature: introduced global [`ngx`](reference#ngx) object.\n\n  The following methods were added:\n\n  - [`ngx.log(level, message)`](reference#ngx_log)\n\n  The following properties were added:\n\n  - `ngx.INFO`, `ngx.WARN`, `ngx.ERR`.\n\n- Feature: added support for `Buffer` object where string is expected.\n\n- Feature: added Buffer version of existing properties.\n\n  The following properties were added:\n\n  - [`r.requestBuffer`](reference#r_request_buffer) ([`r.requestBody`](reference#r_request_body)), [`r.responseBuffer`](reference#r_response_buffer) ([`r.responseBody`](reference#r_response_body)), [`r.rawVariables`](reference#r_raw_variables) ([`r.variables`](reference#r_variables)), [`s.rawVariables`](reference#s_raw_variables) ([`s.variables`](reference#s_variables)).\n\n  The following events were added in the stream module:\n\n  - [`upstream`](reference#s_on) (upload), [`downstream`](reference#s_on) (download).\n\n- Improvement: added aliases to existing properties.\n\n  The following properties were added:\n\n  - [`r.requestText`](reference#r_request_text) ([`r.requestBody`](reference#r_request_body)), [`r.responseText`](reference#r_response_text) ([`r.responseBody`](reference#r_response_body)).\n\n- Improvement: throwing an exception in [`r.internalRedirect()`](reference#r_internal_redirect) for a subrequest.\n\n- Bugfix: fixed promise [`r.subrequest()`](reference#r_subrequest) with [`error_page`](../http/ngx_http_core_module#error_page) redirect.\n\n- Bugfix: fixed `promise` events handling.\n\nCore:\n\n- Feature: added `TypeScript` definitions for built-in modules. Thanks to Jakub Jirutka.\n\n- Feature: tracking unhandled `promise` rejection.\n\n- Feature: added initial iterator support. Thanks to Artem S. Povalyukhin.\n\n- Improvement: `TypeScript` definitions are refactored. Thanks to Jakub Jirutka.\n\n- Improvement: added forgotten support for `Object.prototype.valueOf()` in `Buffer.from()`.\n\n- Bugfix: fixed heap-use-after-free in `JSON.parse()`.\n\n- Bugfix: fixed heap-use-after-free in `JSON.stringify()`.\n\n- Bugfix: fixed `JSON.stringify()` for arrays resizable via getters.\n\n- Bugfix: fixed heap-buffer-overflow for `RegExp.prototype[Symbol.replace]`.\n\n- Bugfix: fixed returned value for `Buffer.prototype.write*` functions.\n\n- Bugfix: fixed [`querystring.stringify()`](reference#querystring_stringify). Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed the catch handler for `Promise.prototype.finally()`.\n\n- Bugfix: fixed [`querystring.parse()`](reference#querystring_parse).\n\n#### Changes with njs 0.4.4\n\nRelease Date: 29 September 2020\n\nnginx modules:\n\n- Bugfix: fixed location merge.\n\n- Bugfix: fixed [`r.httpVersion`](reference#r_http_version) for HTTP/2.\n\nCore:\n\n- Feature: added support for numeric separators (ES12).\n\n- Feature: added remaining methods for `%TypedArray%.prototype`. The following methods were added: `every()`, `filter()`, `find()`, `findIndex()`, `forEach()`, `includes()`, `indexOf()`, `lastIndexOf()`, `map()`, `reduce()`, `reduceRight()`, `reverse()`, `some()`.\n\n- Feature: added `%TypedArray%` remaining methods. The following methods were added: `from()`, `of()`.\n\n- Feature: added `DataView` object.\n\n- Feature: added `Buffer` object implementation.\n\n- Feature: added support for `ArrayBuffer` in [`TextDecoder.prototype.decode()`](reference#textdecoder_decode)\n\n- Feature: added support for `Buffer` object in [`crypto`](reference#crypto) methods.\n\n- Feature: added support for `Buffer` object in [`fs`](reference#njs_api_fs) methods.\n\n- Change: [`Hash.prototype.digest()`](reference#crypto_hash_digest) and [`Hmac.prototype.digest()`](reference#crypto_hmac_digest) now return a `Buffer` instance instead of a byte string when encoding is not provided.\n\n- Change: [`fs.readFile()`](reference#readfilesync) and friends now return a `Buffer` instance instead of a byte string when encoding is not provided.\n\n- Bugfix: fixed function `prototype` property handler while setting.\n\n- Bugfix: fixed function `constructor` property handler while setting.\n\n- Bugfix: fixed `String.prototype.indexOf()` for byte strings.\n\n- Bugfix: fixed `RegExpBuiltinExec()` with a global flag and byte strings.\n\n- Bugfix: fixed `RegExp.prototype[Symbol.replace]` the when replacement value is a function.\n\n- Bugfix: fixed [`TextDecoder.prototype.decode()`](reference#textdecoder_decode) with non-zero `TypedArray` offset.\n\n#### Changes with njs 0.4.3\n\nRelease Date: 11 August 2020\n\nCore:\n\n- Feature: added [`Query String`](reference#querystring) module.\n\n- Feature: improved [`fs.mkdir()`](reference#fs_mkdirsync) to support recursive directory creation. Thanks to Artem S. Povalyukhin.\n\n- Feature: improved [`fs.rmdir()`](reference#fs_rmdirsync) to support recursive directory removal. Thanks to Artem S. Povalyukhin.\n\n- Feature: introduced UTF-8 decoder according to [WHATWG](https://encoding.spec.whatwg.org/) encoding spec.\n\n- Feature: added [`TextDecoder()`](reference#textdecoder) and [`TextEncoder()`](reference#textencoder) implementation.\n\n- Bugfix: fixed parsing return statement without semicolon.\n\n- Bugfix: fixed `njs_number_to_int32()` for big-endian platforms.\n\n- Bugfix: fixed unit test on big-endian platforms.\n\n- Bugfix: fixed regexp-literals parsing with “`=`” characters.\n\n- Bugfix: fixed pre/post increment/decrement in assignment operations.\n\n#### Changes with njs 0.4.2\n\nRelease Date: 07 July 2020\n\nCore:\n\n- Feature: added `RegExp.prototype[Symbol.replace]`.\n\n- Feature: introduced line level backtrace.\n\n- Feature: added `%TypedArray%.prototype.sort()`.\n\n- Feature: extended [`fs`](reference#njs_api_fs) module. Added [`mkdir()`](reference#fs_mkdirsync), [`readdir()`](reference#fs_readdirsync), [`rmdir()`](reference#fs_rmdirsync), and friends.\n\n- Improvement: parser refactoring.\n\n- Bugfix: fixed TypedScript API description for HTTP headers.\n\n- Bugfix: fixed TypedScript API description for `NjsByteString` type.\n\n- Bugfix: fixed `String.prototype.repeat()` according to the specification.\n\n- Bugfix: fixed `String.prototype.replace()` according to the specification.\n\n- Bugfix: fixed parsing of flags for regexp literals.\n\n- Bugfix: fixed index generation for global objects in generator.\n\n- Bugfix: fixed `%TypedArray%.prototype.copyWithin()` with nonzero byte offset.\n\n- Bugfix: fixed `Array.prototype.splice()` for sparse arrays.\n\n- Bugfix: fixed `Array.prototype.reverse()` for sparse arrays.\n\n- Bugfix: fixed `Array.prototype.sort()` for sparse arrays.\n\n#### Changes with njs 0.4.1\n\nRelease Date: 19 May 2020\n\nnginx modules:\n\n- Feature: added support for multi-value headers in [`r.headersIn{}`](reference#r_headers_in).\n\n- Feature: introduced `raw headers` API: [`r.rawHeadersIn[]`](reference#r_raw_headers_in) and [`r.rawHeadersOut[]`](reference#r_raw_headers_out).\n\n- Feature: added [TypeScript](typescript) API description.\n\nCore:\n\n- Bugfix: fixed `Array.prototype.slice()` for sparse arrays.\n\n#### Changes with njs 0.4.0\n\nRelease Date: 23 April 2020\n\nnginx modules:\n\n- Feature: added support for multi-value headers in [`r.headersOut{}`](reference#r_headers_out).\n\n- Feature: added `js_import` directive for [http](../http/ngx_http_js_module#js_import) and [stream](../stream/ngx_stream_js_module#js_import).\n\n- Improvement: improved iteration over [`r.headersOut{}`](reference#r_headers_out) with special headers.\n\n- Improvement: improved iteration over [`r.headersOut{}`](reference#r_headers_out) with duplicates.\n\n- Change: [`r.responseBody`](reference#r_response_body) property handler now returns `undefined` instead of throwing an exception if the response body is not available.\n\nCore:\n\n- Feature: added script arguments support in CLI.\n\n- Feature: converting externals values to native js objects.\n\n- Bugfix: fixed NULL-pointer dereference in `__proto__` property handler.\n\n- Bugfix: fixed handling of no-newline at the end of the script.\n\n- Bugfix: fixed `RegExp()` constructor with empty pattern and non-empty flags.\n\n- Bugfix: fixed `String.prototype.replace()` when function returns non-string.\n\n- Bugfix: fixed reading of pseudofiles in [`fs`](reference#njs_api_fs).\n\n#### Changes with njs 0.3.9\n\nRelease Date: 03 March 2020\n\nnginx modules:\n\n- Feature: added detached mode for [`r.subrequest()`](reference#r_subrequest). Responses to detached subrequests are ignored. Unlike ordinary subrequests, a detached subrequest can be created inside a variable handler.\n\nCore:\n\n- Feature: added `promises` API for [`fs`](reference#njs_api_fs) module. Thanks to Artem S. Povalyukhin.\n\n- Feature: extended [`fs`](reference#njs_api_fs) module. Added [`access()`](reference#fs_accesssync), [`symlink()`](reference#fs_symlinksync), [`unlink()`](reference#fs_unlinksync), [`realpath()`](reference#fs_realpathsync), and friends. Thanks to Artem S. Povalyukhin.\n\n- Improvement: introduced memory-efficient ordinary arrays.\n\n- Improvement: lexer refactoring.\n\n- Bugfix: fixed matching of native functions in backtraces.\n\n- Bugfix: fixed callback invocations in [`fs`](reference#njs_api_fs) module. Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed `Object.getOwnPropertySymbols()`.\n\n- Bugfix: fixed heap-buffer-overflow in `njs_json_append_string()`.\n\n- Bugfix: fixed `encodeURI()` and `decodeURI()` according to the specification.\n\n- Bugfix: fixed `Number.prototype.toPrecision()`.\n\n- Bugfix: fixed handling of space argument in `JSON.stringify()`.\n\n- Bugfix: fixed `JSON.stringify()` with `Number()` and `String()` objects.\n\n- Bugfix: fixed Unicode Escaping in `JSON.stringify()` according to specification.\n\n- Bugfix: fixed non-native module importing. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Bugfix: fixed `njs.dump()` with the `Date()` instance in a container.\n\n#### Changes with njs 0.3.8\n\nRelease Date: 21 January 2020\n\nnginx modules:\n\n- Feature: added `Promise` support for [`r.subrequest()`](reference#r_subrequest). If a callback is not provided, [`r.subrequest()`](reference#r_subrequest) returns an ordinary `Promise` object that resolves to a subrequest response object.\n\n- Change: [`r.parent`](reference#r_parent) property handler now returns `undefined` instead of throwing an exception if a parent object is not available.\n\nCore:\n\n- Feature: added `Promise` support. Implemented according to the specification without: `Promise.all()`, `Promise.allSettled()`, `Promise.race()`.\n\n- Feature: added initial Typed-arrays support. Thanks to Tiago Natel de Moura.\n\n- Feature: added `ArrayBuffer` support. Thanks to Tiago Natel de Moura.\n\n- Feature: added initial `Symbol` support. Thanks to Artem S. Povalyukhin.\n\n- Feature: added externals support for `JSON.stringify()`.\n\n- Feature: added `Object.is()`. Thanks to Artem S. Povalyukhin.\n\n- Feature: added `Object.setPrototypeOf()`. Thanks to Artem S. Povalyukhin.\n\n- Feature: introduced nullish coalescing operator.\n\n- Bugfix: fixed `Object.getPrototypeOf()` according to the specification.\n\n- Bugfix: fixed `Object.prototype.valueOf()` according to the specification.\n\n- Bugfix: fixed `JSON.stringify()` with unprintable values and replacer function.\n\n- Bugfix: fixed operator `in` according to the specification.\n\n- Bugfix: fixed `Object.defineProperties()` according to the specification.\n\n- Bugfix: fixed `Object.create()` according to the specification. Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed `Number.prototype.toString(radix)` when fast-math is enabled.\n\n- Bugfix: fixed `RegExp()` instance properties.\n\n- Bugfix: fixed import segfault. Thanks to 洪志道 (Hong Zhi Dao).\n\n#### Changes with njs 0.3.7\n\nRelease Date: 19 November 2019\n\nnginx modules:\n\n- Improvement: refactored iteration over external objects.\n\nCore:\n\n- Feature: added `Object.assign()`.\n\n- Feature: added `Array.prototype.copyWithin()`.\n\n- Feature: added support for labels in `console.time()`.\n\n- Change: removed `console.help()` from CLI.\n\n- Improvement: moved constructors and top-level objects to global object.\n\n- Improvement: arguments validation for configure script.\n\n- Improvement: refactored JSON methods.\n\n- Bugfix: fixed heap-buffer-overflow in `njs_array_reverse_iterator()` function. The following functions were affected: `Array.prototype.lastIndexOf()`, `Array.prototype.reduceRight()`.\n\n- Bugfix: fixed `[[Prototype]]` slot of `NativeErrors`.\n\n- Bugfix: fixed `NativeError.prototype.message` properties.\n\n- Bugfix: added conversion of `this` value to object in `Array.prototype functions`.\n\n- Bugfix: fixed iterator for `Array.prototype.find()` and `Array.prototype.findIndex()` functions.\n\n- Bugfix: fixed `Array.prototype.includes()` and `Array.prototype.join()` with `undefined` argument.\n\n- Bugfix: fixed `constructor` property of `Hash` and `Hmac` objects.\n\n- Bugfix: fixed `__proto__` property of getters and setters.\n\n- Bugfix: fixed `Date` object string formatting.\n\n- Bugfix: fixed handling of `NaN` and `-0` arguments in `Math.min()` and `Math.max()`.\n\n- Bugfix: fixed `Math.round()` according to the specification.\n\n- Bugfix: reimplemented `bound` functions according to the specification.\n\n#### Changes with njs 0.3.6\n\nRelease Date: 22 October 2019\n\nnginx modules:\n\n- Improvement: getting special headers from [`r.headersIn{}`](reference#r_headers_in).\n\nCore:\n\n- Feature: added new `Function()` support.\n\n- Feature: added `Number.prototype.toFixed()`.\n\n- Feature: added `Number.prototype.toPrecision()`.\n\n- Feature: added `Number.prototype.toExponential()`.\n\n- Improvement: making `prototype` property of function instances writable.\n\n- Improvement: limiting recursion depth while compiling.\n\n- Improvement: moving global functions to the global object.\n\n- Bugfix: fixed prototype mutation for object literals.\n\n- Bugfix: fixed heap-buffer-overflow while parsing regexp literals.\n\n- Bugfix: fixed integer-overflow while parsing exponent of number literals.\n\n- Bugfix: fixed `parseFloat()`.\n\n- Bugfix: fixed `Array.prototype` functions according to the specification. The following functions were fixed: `every`, `includes`, `indexOf`, `filter`, `find`, `findIndex`, `forEach`, `lastIndexOf`, `map`, `pop`, `push`, `reduce`, `reduceRight`, `shift`, `some`, `unshift`.\n\n- Bugfix: fixed handing of accessor descriptors in `Object.freeze()`.\n\n- Bugfix: fixed `String.prototype.replace()` when first argument is not a string.\n\n- Bugfix: fixed stack-use-after-scope in `Array.prototype.map()`.\n\n- Bugfix: `Date.prototype.toUTCString()` format was aligned to ES9.\n\n- Bugfix: fixed buffer overflow in `Number.prototype.toString(radix)`.\n\n- Bugfix: fixed `Regexp.prototype.test()` for regexps with backreferences.\n\n- Bugfix: fixed `Array.prototype.map()` for objects with nonexistent values.\n\n- Bugfix: fixed `Array.prototype.pop()` and `shift()` for sparse objects.\n\n- Bugfix: fixed `Date.UTC()` according to the specification.\n\n- Bugfix: fixed `Date()` constructor according to the specification.\n\n- Bugfix: fixed type of `Date.prototype`. Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed `Date.prototype.setTime()`. Thanks to Artem S. Povalyukhin.\n\n- Bugfix: fixed default number of arguments expected by built-in functions.\n\n- Bugfix: fixed `caller` and `arguments` properties of a function instance. Thanks to Artem S. Povalyukhin.\n\n#### Changes with njs 0.3.5\n\nRelease Date: 15 August 2019\n\nCore:\n\n- Bugfix: fixed module importing using `require()`. The bug was introduced in [0.3.4](#0.3.4).\n\n- Bugfix: fixed `[[SetPrototypeOf]]`.\n\n#### Changes with njs 0.3.4\n\nRelease Date: 13 August 2019\n\nCore:\n\n- Feature: added `Object` shorthand methods and computed property names. Thanks to 洪志道 (Hong Zhi Dao) and Artem S. Povalyukhin.\n\n- Feature: added getter/setter literal support. Thanks to 洪志道 (Hong Zhi Dao) and Artem S. Povalyukhin.\n\n- Feature: added [`fs.renameSync()`](reference#fs_renamesync).\n\n- Feature: added `String.prototype.trimEnd()` and `String.prototype.trimStart()`.\n\n- Improvement: added memory-sanitizer support.\n\n- Improvement: Unicode case tables updated to version 12.1.\n\n- Improvement: added UTF8 validation for string literals.\n\n- Bugfix: fixed reading files with zero size in [`fs.readFileSync()`](reference#readfilesync).\n\n- Bugfix: extended the list of space separators in `String.prototype.trim()`.\n\n- Bugfix: fixed using of uninitialized value in `String.prototype.padStart()`.\n\n- Bugfix: fixed `String.prototype.replace()` for `$0` and `$&` replacement string.\n\n- Bugfix: fixed `String.prototype.replace()` for byte strings with regex argument.\n\n- Bugfix: fixed global match in `String.prototype.replace()` with regexp argument.\n\n- Bugfix: fixed `Array.prototype.slice()` for primitive types.\n\n- Bugfix: fixed heap-buffer-overflow while importing module.\n\n- Bugfix: fixed UTF-8 character escaping.\n\n- Bugfix: fixed `Object.values()` and `Object.entries()` for shared objects.\n\n- Bugfix: fixed uninitialized memory access in `String.prototype.match()`.\n\n- Bugfix: fixed `String.prototype.match()` for byte strings with regex argument.\n\n- Bugfix: fixed `Array.prototype.lastIndexOf()` with undefined arguments.\n\n- Bugfix: fixed `String.prototype.substring()` with empty substring.\n\n- Bugfix: fixed invalid memory access in `String.prototype.substring()`.\n\n- Bugfix: fixed `String.fromCharCode()` for code points more than `65535` and `NaN`.\n\n- Bugfix: fixed `String.prototype.toLowerCase()` and `String.prototype.toUpperCase()`.\n\n- Bugfix: fixed `Error()` constructor with no arguments.\n\n- Bugfix: fixed `in` operator for values with accessor descriptors.\n\n- Bugfix: fixed `Object.defineProperty()` for non-boolean descriptor props.\n\n- Bugfix: fixed `Error.prototype.toString()` with UTF8 string properties.\n\n- Bugfix: fixed `Error.prototype.toString()` with non-string values for `name` and `message`.\n\n#### Changes with njs 0.3.3\n\nRelease Date: 25 June 2019\n\nnginx modules:\n\n- Improvement: getting of special response headers in [`r.headersOut{}`](reference#r_headers_out).\n\n- Improvement: working with unknown methods in [`r.subrequest()`](reference#r_subrequest).\n\n- Improvement: added support for null as a second argument of [`r.subrequest()`](reference#r_subrequest).\n\n- Bugfix: fixed processing empty output chain in stream body filter.\n\nCore:\n\n- Feature: added runtime support for property getter/setter. Thanks to 洪志道 (Hong Zhi Dao) and Artem S. Povalyukhin.\n\n- Feature: added [`process`](reference#process) global object.\n\n- Feature: writable most of built-in properties and methods.\n\n- Feature: added generic implementation of `Array.prototype.fill()`.\n\n- Bugfix: fixed integer-overflow in `String.prototype.concat()`.\n\n- Bugfix: fixed setting of object properties.\n\n- Bugfix: fixed `Array.prototype.toString()`.\n\n- Bugfix: fixed `Date.prototype.toJSON()`.\n\n- Bugfix: fixed overwriting “constructor” property of built-in prototypes.\n\n- Bugfix: fixed processing of invalid surrogate pairs in strings.\n\n- Bugfix: fixed processing of invalid surrogate pairs in JSON strings.\n\n- Bugfix: fixed heap-buffer-overflow in `toUpperCase()` and `toLowerCase()`.\n\n- Bugfix: fixed escaping lone closing square brackets in `RegExp()` constructor.\n\n- Bugfix: fixed handling zero byte characters inside RegExp pattern strings.\n\n- Bugfix: fixed `String.prototype.toBytes()` for ASCII strings.\n\n- Bugfix: fixed truth value of JSON numbers in `JSON.parse()`.\n\n- Bugfix: fixed use-of-uninitialized-value in `njs_string_replace_join()`.\n\n- Bugfix: fixed `parseInt('-0')`. Thanks to Artem S. Povalyukhin.\n\n#### Changes with njs 0.3.2\n\nRelease Date: 21 May 2019\n\nCore:\n\n- Feature: added support for template literals. Thanks to 洪志道 (Hong Zhi Dao) and Artem S. Povalyukhin.\n\n- Feature: executing command from command line arguments.\n\n- Feature: added support for RegExp `groups` object (ES9).\n\n- Feature: added block scoped function definitions support.\n\n- Feature: added support for building with GNU Readline library.\n\n- Feature: made configurable `length`, `name`, and most of built-in methods.\n\n- Feature: made all constructor properties configurable.\n\n- Bugfix: fixed `Regexp.prototype.exec()` for Unicode-only regexps.\n\n- Bugfix: fixed `njs_vm_value_dump()` for empty string values.\n\n- Bugfix: fixed RegExp constructor for regexp value arguments.\n\n- Bugfix: fixed walking over prototypes chain during iteration over an object.\n\n- Bugfix: fixed overflow in `Array.prototype.concat()`.\n\n- Bugfix: fixed length calculation for UTF-8 string with escape characters.\n\n- Bugfix: fixed parsing surrogate pair presents as UTF-16 escape sequences.\n\n- Bugfix: fixed processing the “\\*” quantifier for `String.prototype.match()`.\n\n- Bugfix: fixed `Date()` constructor with one argument.\n\n- Bugfix: fixed arrays expansion.\n\n- Bugfix: fixed heap-buffer-overflow in `String.prototype.replace()`.\n\n- Bugfix: fixed heap-buffer-overflow in `String.prototype.lastIndexOf()`.\n\n- Bugfix: fixed regexp literals parsing with escaped backslash and backslash in square brackets.\n\n- Bugfix: fixed regexp literals with lone closing brackets.\n\n- Bugfix: fixed uninitialized-memory-access in `Object.defineProperties()`.\n\n- Bugfix: fixed processing the “\\*” quantifier for `String.prototype.replace()`.\n\n- Bugfix: fixed `Array.prototype.slice()` for UTF8-invalid byte strings.\n\n- Bugfix: fixed `String.prototype.split()` for UTF8-invalid byte strings.\n\n- Bugfix: fixed handling of empty block statements.\n\n#### Changes with njs 0.3.1\n\nRelease Date: 16 April 2019\n\nCore:\n\n- Feature: added arrow functions support. Thanks to 洪志道 (Hong Zhi Dao) and Artem S. Povalyukhin.\n\n- Feature: added `Object.getOwnPropertyNames()`. Thanks to Artem S. Povalyukhin.\n\n- Feature: added `Object.getOwnPropertyDescriptors()`. Thanks to Artem S. Povalyukhin.\n\n- Feature: making `__proto__` accessor descriptor of `Object` instances mutable.\n\n- Feature: added shebang support in CLI.\n\n- Feature: added support for module mode execution in CLI. In module mode global, this is unavailable.\n\n- Bugfix: fixed editline detection.\n\n- Bugfix: fixed `Function.prototype.bind()`. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Bugfix: fixed checking of duplication of parameters for functions. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Bugfix: fixed function declaration with the same name as a variable. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Improvement: code related to parsing of objects, variables and functions is refactored. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Improvement: large-value output improved in `console.log()`.\n\n- Improvement: string output improved in `console.log()` in a compliant way (without escaping and quotes).\n\n- Improvement: using ES6 version of `ToInt32()`, `ToUint32()`, `ToLength()`.\n\n#### Changes with njs 0.3.0\n\nRelease Date: 26 March 2019\n\nnginx modules:\n\n- Feature: added the `js_path` directive for [http](../http/ngx_http_js_module#js_path) and [stream](../stream/ngx_stream_js_module#js_path).\n\n- Change: returning undefined value instead of empty strings for absent properties in the following objects: [`r.args{}`](reference#r_args), [`r.headersIn{}`](reference#r_headers_in), [`r.headersOut{}`](reference#r_headers_out), [`r.variables{}`](reference#r_variables), [`s.variables{}`](reference#s_variables).\n\n- Change: returning undefined value instead of throwing an exception for [`r.requestBody`](reference#r_request_body) when request body is unavailable.\n\n- Bugfix: fixed crash while iterating over [`r.args{}`](reference#r_args) when a value is absent in a key-value pair.\n\nCore:\n\n- Feature: added initial ES6 modules support. Default import and default export statements are supported. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Feature: added `Object.prototype.propertyIsEnumerable()`.\n\n- Feature: reporting file name and function name in disassembler output.\n\n- Bugfix: fixed function redeclarations in interactive shell. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Bugfix: fixed RegExp literals parsing.\n\n- Bugfix: fixed setting length of UTF8 string in [`fs.readFileSync()`](reference#readfilesync).\n\n- Bugfix: fixed `nxt_file_dirname()` for paths with no dir component.\n\n#### Changes with njs 0.2.8\n\nRelease Date: 26 February 2019\n\nnginx modules:\n\n- Change: properties of HTTP request deprecated in [0.2.2](#njs0.2.2) are removed.\n\n- Feature: added support for delete operation in [`r.headersOut{}`](reference#r_headers_out).\n\n- Feature: added support for setting nginx variables.\n\n- Bugfix: fixed [`r.subrequest()`](reference#r_subrequest) for empty body value.\n\n- Improvement: setting special response headers in [`r.headersOut{}`](reference#r_headers_out).\n\nCore:\n\n- Feature: added labels support.\n\n- Feature: added `setImmediate()` method.\n\n- Feature: added support for shorthand property names for Object literals.\n\n- Bugfix: fixed `Function.prototype.bind()`.\n\n- Bugfix: fixed parsing of string literals containing newline characters.\n\n- Bugfix: fixed line number in reporting variable reference errors.\n\n- Bugfix: fixed creation of long UTF8 strings.\n\n- Bugfix: fixed setting special response headers in `String.prototype.split()` for Unicode strings.\n\n- Bugfix: fixed heap-buffer-overflow in `String.prototype.split()`.\n\n- Bugfix: fixed `Array.prototype.fill()`. Thanks to Artem S. Povalyukhin.\n\n- Improvement: code related to function invocation is refactored. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Improvement: code related to variables is refactored. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Improvement: parser is refactored. Thanks to 洪志道 (Hong Zhi Dao).\n\n- Improvement: reporting filenames in exceptions.\n\n#### Changes with njs 0.2.7\n\nRelease Date: 25 December 2018\n\nCore:\n\n- Feature: rest parameters syntax (destructuring is not supported). Thanks to Alexander Pyshchev.\n\n- Feature: added `Object.entries()` method.\n\n- Feature: added `Object.values()` method.\n\n- Improvement: code generator refactored and simplified.\n\n- Bugfix: fixed automatic semicolon insertion.\n\n- Bugfix: fixed assignment expression from compound assignment.\n\n- Bugfix: fixed comparison of Byte and UTF8 strings.\n\n- Bugfix: fixed type of iteration variable in `for-in` with array values.\n\n- Bugfix: fixed building on platforms without librt.\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.2.6\n\nRelease Date: 27 November 2018\n\nCore:\n\n- Feature: making built-in prototypes mutable.\n\n- Feature: making global object mutable.\n\n- Feature: [`console.time()`](reference#console_time) and [`console.timeEnd()`](reference#console_time_end) methods.\n\n- Feature: allowing variables and functions to be redeclared.\n\n- Feature: extending `Object.defineProperty()` spec conformance.\n\n- Feature: introduced quiet mode for CLI to handle simple expressions from stdin.\n\n- Feature: introduced compact form of backtraces to handle stack overflows.\n\n- Improvement: improved wording for various exceptions.\n\n- Bugfix: fixed closure values handling.\n\n- Bugfix: fixed equality operator for various value types.\n\n- Bugfix: fixed handling of `this` keyword in various scopes.\n\n- Bugfix: fixed handling non-object values in `Object.keys()`.\n\n- Bugfix: fixed parsing of throw statement inside `if` statement.\n\n- Bugfix: fixed parsing of newline after throw statement.\n\n- Bugfix: fixed parsing of statements in if statement without newline.\n\n- Bugfix: fixed size `uint32_t` overflow in `njs_array_expand()`.\n\n- Bugfix: fixed `typeof` operator for `object_value` type.\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.2.5\n\nRelease Date: 30 October 2018\n\nnginx modules:\n\n- Bugfix: fixed counting pending events in stream module.\n\n- Bugfix: fixed `s.off()` in stream module.\n\n- Bugfix: fixed processing of data chunks in `js_filter` in stream module.\n\n- Bugfix: fixed http `status` and `contentType` getter in http module.\n\n- Bugfix: fixed http response and parent getters in http module.\n\nCore:\n\n- Feature: arguments object support.\n\n- Feature: non-integer fractions support.\n\n- Improvement: handling non-array values in `Array.prototype.slice()`.\n\n- Bugfix: fixed `Array.prototype.length` setter\n\n- Bugfix: fixed `njs_array_alloc()` for length \\> 2\\*\\*31.\n\n- Bugfix: handling int overflow in `njs_array_alloc()` on 32bit archs.\n\n- Bugfix: fixed code size mismatch error message.\n\n- Bugfix: fixed delete operator in a loop.\n\n- Bugfix: fixed `Object.getOwnPropertyDescriptor()` for complex object (inherited from `Array` and `string` values).\n\n- Bugfix: fixed `Object.prototype.hasOwnProperty()` for non-object properties\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.2.4\n\nRelease Date: 18 September 2018\n\nnginx modules:\n\n- Change: stream module handlers refactored.\n\n  New methods and properties: [`s.on()`](reference#s_on), [`s.off()`](reference#s_off), [`s.allow()`](reference#s_allow), [`s.done()`](reference#s_done), [`s.decline()`](reference#s_decline), [`s.deny()`](reference#s_deny).\n\n  Removed properties of the [Stream](reference#stream) object: `s.OK`, `s.ABORT`, `s.AGAIN`, `s.DECLINED`, `s.ERROR` (replaced with [`s.allow()`](reference#s_allow), [`s.done()`](reference#s_done), [`s.deny()`](reference#s_deny)).\n\n  `s.buffer` (for reading replaced with data argument of the corresponding callback, for writing use [`s.send()`](reference#s_send)).\n\n  `s.fromUpstream` (replaced with a callback for a corresponding event).\n\n  `s.eof` (replaced with [`flags.last`](reference#s_on_callback_last)).\n\nCore:\n\n- Feature: added `Function.prototype.length`.\n\n- Feature: introduced sandboxing mode.\n\n- Improvement: added exception strings where appropriate.\n\n- Improvement: improved wording for primitive type conversion exception.\n\n- Bugfix: throwing `TypeError` for attempts to change frozen properties.\n\n- Bugfix: fixed `Object.defineProperty()` for existing properties.\n\n- Bugfix: respecting the enumerable attribute while iterating by for in.\n\n- Bugfix: respecting writable attribute for property handlers.\n\n- Bugfix: fixed exception handling in arguments of a function.\n\n- Bugfix: fixed `Object.prototype.toString` for different value types.\n\n- Bugfix: fixed `Object()` constructor for object types arguments.\n\n- Bugfix: fixed comparison of objects and strings.\n\n- Bugfix: fixed `String.slice()` for undefined arguments.\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.2.3\n\nRelease Date: 31 July 2018\n\nnginx modules:\n\n- Bugfix: making a subrequest from a `Reply` object caused a segmentation fault.\n\n- Bugfix: getting the parent property of the main [HTTP Request](reference#http) object caused a segmentation fault.\n\nCore:\n\n- Feature: added the pretty string representation for values.\n\n- Feature: correctly printing floating point numbers.\n\n- Feature: correctly parsing floating point numbers.\n\n- Feature: [`String.bytesFrom()`](reference#string_bytesfrom) method (decoding `hex`, `base64`, `base64url` into a byte string).\n\n- Feature: `String.padStart()` and `String.padEnd()` methods.\n\n- Feature: added support of binary literals.\n\n- Improvement: added information about illegal token in number parsing.\n\n- Improvement: allowed uppercased `O` in octal literal values.\n\n- Improvement: added support for multiple arguments in `console.log()`.\n\n- Bugfix: fixed applying `call()` to methods of external values.\n\n- Bugfix: fixed addition operator applied to an object.\n\n- Bugfix: fixed exception handling in `njs_vm_value_to_ext_string()`.\n\n- Bugfix: fixed `Number()` with boolean, null and undefined arguments.\n\n- Bugfix: fixed error handling of setting non-numeric `Array.length`.\n\n- Bugfix: fixed autocompletion for global objects.\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.2.2\n\nRelease Date: 19 June 2018\n\nnginx modules:\n\n- Change: merged HTTP `Response` and `Reply` into [HTTP Request](reference#http). New members of `Request`:\n\n  - `req.status` (`res.status`)\n\n  - `req.parent` (`reply.parent`)\n\n  - `req.requestBody` (`req.body`)\n\n  - `req.responseBody` (`reply.body`)\n\n  - `req.headersIn` (`req.headers`)\n\n  - `req.headersOut` (`res.headers`)\n\n  - `req.sendHeader()` (`res.sendHeader()`)\n\n  - `req.send()` (`res.send()`)\n\n  - `req.finish()` (`res.finish()`)\n\n  - `req.return()` (`res.return()`)\n\n  Deprecated members of `Request`:\n\n  - `req.body` (use `req.requestBody` or `req.responseBody`)\n\n  - `req.headers` (use `req.headersIn` or `req.headersOut`)\n\n  - `req.response`\n\n  Deprecated members of `Response`:\n\n  - `res.contentLength` (use [`req.headersOut`](reference#r_headers_out)`['Content-Length']`)\n\n  - `res.contentType` (use [`req.headersOut`](reference#r_headers_out)`['Content-Type']`)\n\n  The deprecated properties will be removed in [next](#njs0.2.8) releases.\n\n- Feature: HTTP [internalRedirect()](reference#r_internal_redirect) method.\n\nCore:\n\n- Bugfix: fixed heap-buffer-overflow in `crypto.createHmac()`.\n\n#### Changes with njs 0.2.1\n\nRelease Date: 31 May 2018\n\nnginx modules:\n\n- Feature: HTTP request body getter.\n\n- Improvement: moved njs vm to the `main` configuration.\n\n- Improvement: improved logging for [js_set](../http/ngx_http_js_module#js_set) and [js_content](../http/ngx_http_js_module#js_content) directives.\n\n- Improvement: setting status code to 500 by default in the [js_content](../http/ngx_http_js_module#js_content) handler\n\n- Improvement: added the debug for the returned status code in [js_content](../http/ngx_http_js_module#js_content) handler\n\n- Bugfix: fixed error logging in [js_include](../http/ngx_http_js_module#js_include).\n\nCore:\n\n- Feature: added array length setter.\n\n- Improvement: public header `cleanup. njscript.h` is renamed to `njs.h`.\n\n- Bugfix: fixed crypto `update()` method after `digest()` is called.\n\n- Bugfix: fixed `crypto.createHmac()` for keys with size \\<= alg size and \\> 64.\n\n- Bugfix: fixed `JSON.stringify()` for arrays with empty cells.\n\n- Bugfix: fixed exception type for unsupported types in `JSON.stringify()`.\n\n- Bugfix: fixed handling of undefined arguments of functions.\n\n- Bugfix: fixed handling of missing `arg` of `Object.getOwnPropertyDescriptor()`.\n\n- Bugfix: fixed handling of properties in `Object.getOwnPropertyDescriptor()`.\n\n- Bugfix: fixed the writeable flag of `Array.length` property.\n\n- Bugfix: fixed return value type of `clearTimeout()`.\n\n- Bugfix: fixed `njs_vm_external_bind()`.\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.2.0\n\nRelease Date: 03 April 2018\n\n- Feature: reporting njs version by CLI.\n\n- Feature: textual description for type converting exceptions.\n\n- Feature: `setTimeout()` and `clearTimeout()` methods.\n\n- Feature: Byte string to `hex`, `base64`, `base64url` encodings.\n\n- Feature: [Node.js style](https://nodejs.org/api/crypto.html#crypto_class_hash) `Crypto` methods.\n\n- Feature: HTTP and stream `warn()` and `error()` methods.\n\n- Feature: HTTP `subrequest()` method.\n\n- Feature: HTTP `return()` method.\n\n- Bugfix: miscellaneous bugs have been fixed in the core and interactive shell.\n\n#### Changes with njs 0.1.15\n\nRelease Date: 20 November 2017\n\n- Feature: `Error`, `EvalError`, `InternalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError`, `URIError` objects.\n\n- Feature: octal literals support.\n\n- Feature: [Node.js style](https://nodejs.org/api/fs.html#fs_file_system) `File system` access methods: `fs.readFile()`, `fs.readFileSync()`, `fs.appendFile()`, `fs.appendFileSync()`, `fs.writeFile()`, `fs.writeFileSync()`.\n\n- Feature: nginx modules print backtrace on exception.\n\n- Bugfix: miscellaneous bugs have been fixed.\n\n#### Changes with njs 0.1.14\n\nRelease Date: 09 October 2017\n\n- Feature: JSON object.\n\n- Feature: object level completions in interactive shell.\n\n- Feature: various configure improvements.\n\n- Bugfix: miscellaneous bugs have been fixed in the core and interactive shell.\n\n#### Changes with njs 0.1.13\n\nRelease Date: 31 August 2017\n\n- Feature: `console.log()` and `console.help()` methods in interactive shell.\n\n- Feature: interactive shell prints backtrace on exception.\n\n- Feature: interactive shell by default if `libedit` is available.\n\n- Bugfix: processing of large files from `stdin` in command line mode.\n\n- Bugfix: improved `editline` detection.\n\n#### Changes with njs 0.1.12\n\nRelease Date: 08 August 2017\n\n- Feature: Interactive shell.\n\n- Bugfix: in `Object.isSealed()`.\n\n#### Changes with njs 0.1.11\n\nRelease Date: 27 June 2017\n\n- Feature: `Object.keys()`, `Object.prototype.hasOwnProperty()` methods.\n\n- Feature: `Object.defineProperty()`, `Object.defineProperties()`, `Object.getOwnPropertyDescriptor()` methods.\n\n- Feature: `Object.getPrototypeOf()`, `Object.prototype.isPrototypeOf()` methods.\n\n- Feature: `Object.preventExtensions()`, `Object.isExtensible()`, `Object.freeze()`, `Object.isFrozen()`, `Object.seal()`, `Object.isSealed()` methods.\n\n- Feature: scientific notation (`3.35e10`) literals support.\n\n- Feature: hexadecimal (`0x1123`) literals support.\n\n- Bugfix: processing of large array indexes.\n\n- Bugfix: in `parseInt()` and `Date.parse()`.\n\n#### Changes with njs 0.1.10\n\nRelease Date: 04 April 2017\n\n- Feature: nested functions and function closures.\n\n- Feature: `Array.of()`, `Array.prototype.fill()`, `Array.prototype.find()`, `Array.prototype.findIndex()` methods.\n\n- Bugfix: miscellaneous bugs and segmentation faults have been fixed.\n\n#### Changes with njs 0.1.9\n\nRelease Date: 01 February 2017\n\n- Bugfix: global variables were not initialized when njs was used in nginx.\n\n#### Changes with njs 0.1.8\n\nRelease Date: 24 January 2017\n\n- Change: the `strict` mode is enforced, variables must be explicitly declared.\n\n- Feature: `for` and `for-in` loops support variable declaration.\n\n- Bugfix: global and function scopes have been fixed.\n\n- Bugfix: now `for-in` loop does not discard the last value of property variable.\n\n- Bugfix: miscellaneous bugs and segmentation faults have been fixed.\n\n#### Changes with njs 0.1.7\n\nRelease Date: 27 December 2016\n\n- Change: the [js_include](../http/ngx_http_js_module#js_include) directive has been disabled at server and location levels.\n\n- Feature: exponentiation operators.\n\n- Bugfix: miscellaneous bugs and segmentation faults have been fixed.\n\n#### Changes with njs 0.1.6\n\nRelease Date: 13 December 2016\n\n- Change: the [js_set](../http/ngx_http_js_module#js_set) directive has been disabled at server and location levels.\n\n- Feature: ES6 `Math` methods.\n\n- Bugfix: miscellaneous bugs and segmentation faults have been fixed.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/changes.html](https://nginx.org/en/docs/njs/changes.html)"
- name: charset
  id: http/ngx_http_charset_module#charset
  summary: Adds the specified charset to the “Content-Type” response header field
  belongs_to: ngx_http_charset_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`charset`***`charset`*` | off;`              |
    | Default: | `charset off;`                                 |
    | Context: | `http`, `server`, `location`, `if in location` |

    Adds the specified charset to the “Content-Type” response header field. If this charset is different from the charset specified in the [source_charset](#source_charset) directive, a conversion is performed.

    The parameter `off` cancels the addition of charset to the “Content-Type” response header field.

    A charset can be defined with a variable:

    ``` nginx
    charset $charset;
    ```

    In such a case, all possible values of a variable need to be present in the configuration at least once in the form of the [charset_map](#charset_map), [charset](#charset), or [source_charset](#source_charset) directives. For `utf-8`, `windows-1251`, and `koi8-r` charsets, it is sufficient to include the files `conf/koi-win`, `conf/koi-utf`, and `conf/win-utf` into configuration. For other charsets, simply making a fictitious conversion table works, for example:

    ``` nginx
    charset_map iso-8859-5 _ { }
    ```

    In addition, a charset can be set in the “X-Accel-Charset” response header field. This capability can be disabled using the [proxy_ignore_headers](ngx_http_proxy_module#proxy_ignore_headers), [fastcgi_ignore_headers](ngx_http_fastcgi_module#fastcgi_ignore_headers), [uwsgi_ignore_headers](ngx_http_uwsgi_module#uwsgi_ignore_headers), [scgi_ignore_headers](ngx_http_scgi_module#scgi_ignore_headers), and [grpc_ignore_headers](ngx_http_grpc_module#grpc_ignore_headers) directives.
- name: charset_map
  id: http/ngx_http_charset_module#charset_map
  summary: Describes the conversion table from one charset to another
  belongs_to: ngx_http_charset_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`charset_map`***`charset1charset2`*` { ... }` |
    | Default: | —                                               |
    | Context: | `http`                                          |

    Describes the conversion table from one charset to another. A reverse conversion table is built using the same data. Character codes are given in hexadecimal. Missing characters in the range 80-FF are replaced with “`?`”. When converting from UTF-8, characters missing in a one-byte charset are replaced with “`&#XXXX;`”.

    Example:

    ``` nginx
    charset_map koi8-r windows-1251 {
        C0 FE ; # small yu
        C1 E0 ; # small a
        C2 E1 ; # small b
        C3 F6 ; # small ts
        ...
    }
    ```

    When describing a conversion table to UTF-8, codes for the UTF-8 charset should be given in the second column, for example:

    ``` nginx
    charset_map koi8-r utf-8 {
        C0 D18E ; # small yu
        C1 D0B0 ; # small a
        C2 D0B1 ; # small b
        C3 D186 ; # small ts
        ...
    }
    ```

    Full conversion tables from `koi8-r` to `windows-1251`, and from `koi8-r` and `windows-1251` to `utf-8` are provided in the distribution files `conf/koi-win`, `conf/koi-utf`, and `conf/win-utf`.
- name: charset_types
  id: http/ngx_http_charset_module#charset_types
  summary: This directive appeared in version 0.7.9
  belongs_to: ngx_http_charset_module
  description: |-
    |          |                                                                                                            |
    |----------|------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`charset_types`***`mime-type`*` ...;`                                                                    |
    | Default: | `charset_types text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;` |
    | Context: | `http`, `server`, `location`                                                                               |

    This directive appeared in version 0.7.9.

    Enables module processing in responses with the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).

    Until version 1.5.4, “`application/x-javascript`” was used as the default MIME type instead of “`application/javascript`”.
- name: chunked_transfer_encoding
  id: http/ngx_http_core_module#chunked_transfer_encoding
  summary: Allows disabling chunked transfer encoding in HTTP/1.1
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`chunked_transfer_encoding`**` on | off;` |
    | Default: | `chunked_transfer_encoding on;`             |
    | Context: | `http`, `server`, `location`                |

    Allows disabling chunked transfer encoding in HTTP/1.1. It may come in handy when using a software failing to support chunked encoding despite the standard’s requirement.
- name: client_body_buffer_size
  id: http/ngx_http_core_module#client_body_buffer_size
  summary: Sets buffer size for reading client request body
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`client_body_buffer_size`***`size`*`;` |
    | Default: | `client_body_buffer_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`             |

    Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a [temporary file](#client_body_temp_path). By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.
- name: client_body_in_file_only
  id: http/ngx_http_core_module#client_body_in_file_only
  summary: Determines whether nginx should save the entire client request body into a file
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`client_body_in_file_only`**` on | clean | off;` |
    | Default: | `client_body_in_file_only off;`                    |
    | Context: | `http`, `server`, `location`                       |

    Determines whether nginx should save the entire client request body into a file. This directive can be used during debugging, or when using the `$request_body_file` variable, or the [$r-\>request_body_file](ngx_http_perl_module#methods) method of the module [ngx_http_perl_module](ngx_http_perl_module).

    When set to the value `on`, temporary files are not removed after request processing.

    The value `clean` will cause the temporary files left after request processing to be removed.
- name: client_body_in_single_buffer
  id: http/ngx_http_core_module#client_body_in_single_buffer
  summary: Determines whether nginx should save the entire client request body in a single buffer
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`client_body_in_single_buffer`**` on | off;` |
    | Default: | `client_body_in_single_buffer off;`            |
    | Context: | `http`, `server`, `location`                   |

    Determines whether nginx should save the entire client request body in a single buffer. The directive is recommended when using the `$request_body` variable, to save the number of copy operations involved.
- name: client_body_temp_path
  id: http/ngx_http_core_module#client_body_temp_path
  summary: Defines a directory for storing temporary files holding client request bodies
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                                                     |
    |----------|-------------------------------------------------------------------------------------|
    | Syntax:  | **`client_body_temp_path`***`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |
    | Default: | `client_body_temp_path client_body_temp;`                                           |
    | Context: | `http`, `server`, `location`                                                        |

    Defines a directory for storing temporary files holding client request bodies. Up to three-level subdirectory hierarchy can be used under the specified directory. For example, in the following configuration

    ``` nginx
    client_body_temp_path /spool/nginx/client_temp 1 2;
    ```

    a path to a temporary file might look like this:

    ``` nginx
    /spool/nginx/client_temp/7/45/00000123457
    ```
- name: client_body_timeout
  id: http/ngx_http_core_module#client_body_timeout
  summary: Defines a timeout for reading client request body
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`client_body_timeout`***`time`*`;` |
    | Default: | `client_body_timeout 60s;`           |
    | Context: | `http`, `server`, `location`         |

    Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything within this time, the request is terminated with the 408 (Request Time-out) error.
- name: client_header_buffer_size
  id: http/ngx_http_core_module#client_header_buffer_size
  summary: Sets buffer size for reading client request header
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`client_header_buffer_size`***`size`*`;` |
    | Default: | `client_header_buffer_size 1k;`            |
    | Context: | `http`, `server`                           |

    Sets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. However, if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. If a request line or a request header field does not fit into this buffer then larger buffers, configured by the [large_client_header_buffers](#large_client_header_buffers) directive, are allocated.

    If the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.
- name: client_header_timeout
  id: http/ngx_http_core_module#client_header_timeout
  summary: Defines a timeout for reading client request header
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`client_header_timeout`***`time`*`;` |
    | Default: | `client_header_timeout 60s;`           |
    | Context: | `http`, `server`                       |

    Defines a timeout for reading client request header. If a client does not transmit the entire header within this time, the request is terminated with the 408 (Request Time-out) error.
- name: client_max_body_size
  id: http/ngx_http_core_module#client_max_body_size
  summary: Sets the maximum allowed size of the client request body
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`client_max_body_size`***`size`*`;` |
    | Default: | `client_max_body_size 1m;`            |
    | Context: | `http`, `server`, `location`          |

    Sets the maximum allowed size of the client request body. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client. Please be aware that browsers cannot correctly display this error. Setting *`size`* to 0 disables checking of client request body size.
- name: Command-line interface
  id: njs/cli
  summary: njs scripts development and debugging can be performed from the command-line
  description: "# Command-line interface\n\nnjs scripts development and debugging can be performed from the command-line. The command-line utility is available after the installation of the Linux [package](install#install_package) or after building from the [sources](install#install_sources). Compared to njs running inside nginx, nginx objects ([HTTP](reference#http) and [Stream](reference#stream)) are not available in the utility.\n\n``` nginx\n$ echo \"2**3\" | njs -q\n8\n\n$ njs\n>> globalThis\nglobal {\n njs: njs {\n  version: '0.3.9'\n },\n global: [Circular],\n process: process {\n  argv: [\n   '/usr/bin/njs'\n  ],\n  env: {\n   PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',\n   HOSTNAME: 'f777c149d4f8',\n   TERM: 'xterm',\n   NGINX_VERSION: '1.17.9',\n   NJS_VERSION: '0.3.9',\n   PKG_RELEASE: '1~buster',\n   HOME: '/root'\n  }\n },\n console: {\n  log: [Function: native],\n  dump: [Function: native],\n  time: [Function: native],\n  timeEnd: [Function: native]\n },\n print: [Function: native]\n}\n>>\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/cli.html](https://nginx.org/en/docs/njs/cli.html)"
- name: Command-line parameters
  id: switches
  summary: -? | -h — print help for command-line parameters
  description: "# Command-line parameters\n\nnginx supports the following command-line parameters:\n\n- `-?` \\| `-h` — print help for command-line parameters.\n\n- `-c `*`file`* — use an alternative configuration *`file`* instead of a default file.\n\n- `-e `*`file`* — use an alternative error log *`file`* to store the log instead of a default file (1.19.5). The special value `stderr` selects the standard error file.\n\n- `-g `*`directives`* — set [global configuration directives](ngx_core_module), for example,\n\n  ``` nginx\n  nginx -g \"pid /var/run/nginx.pid; worker_processes `sysctl -n hw.ncpu`;\"\n  ```\n\n- `-p `*`prefix`* — set nginx path prefix, i.e. a directory that will keep server files (default value is *`/usr/local/nginx`*).\n\n- `-q` — suppress non-error messages during configuration testing.\n\n- `-s `*`signal`* — send a *signal* to the master process. The argument *signal* can be one of:\n  - `stop` — shut down quickly\n  - `quit` — shut down gracefully\n  - `reload` — reload configuration, start the new worker process with a new configuration, gracefully shut down old worker processes.\n  - `reopen` — reopen log files\n\n- `-t` — test the configuration file: nginx checks the configuration for correct syntax, and then tries to open files referred in the configuration.\n\n- `-T` — same as `-t`, but additionally dump configuration files to standard output (1.9.2).\n\n- `-v` — print nginx version.\n\n- `-V` — print nginx version, compiler version, and configure parameters.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/switches.html](https://nginx.org/en/docs/switches.html)"
- name: Compatibility
  id: njs/compatibility
  summary: njs is created in compliance with ECMAScript 5.1 (strict mode) with some ECMAScript 6 and later extensions
  description: "# Compatibility\n\nnjs is created in compliance with [ECMAScript 5.1](http://www.ecma-international.org/ecma-262/5.1/) (strict mode) with some [ECMAScript 6](http://www.ecma-international.org/ecma-262/6.0/) and later extensions. The compliance is still evolving.\n\nDefinitions of njs specific properties and methods not compliant with ECMAScript can be found in [Reference](reference). Definitions of njs properties and methods compliant with ECMAScript can be found in [ECMAScript specification](http://www.ecma-international.org/ecma-262/).\n\n#### What is currently supported\n\n- Boolean values, numbers, strings, objects, arrays, functions, function constructors ([0.3.6](changes#njs0.3.6)), and regular expressions\n- ES5.1 operators, ES7 exponentiation operators\n- ES5.1 statements: `break`, `catch`, `continue`, `do while`, `else`, `finally`, `for`, `for in`, `if`, `return`, `switch`, `throw`, `try`, `var`, `while`, labeled statements ([0.2.8](changes#njs0.2.8))\n- ES6 statements: `let` ([0.6.0](changes#njs0.6.0)), `const` ([0.6.0](changes#njs0.6.0)), `async` ([0.7.0](changes#njs0.7.0)), `await` ([0.7.0](changes#njs0.7.0))\n- `Math` properties:\n  - ES6: `E`, `LN10`, `LN2`, `LOG10E`, `LOG2E`, `PI`, `SQRT1_2`, `SQRT2`\n- `Math` methods:\n  - ES6: `abs`, `acos`, `acosh`, `asin`, `asinh`, `atan`, `atan2`, `atanh`, `cbrt`, `ceil`, `clz32`, `cos`, `cosh`, `exp`, `expm1`, `floor`, `fround`, `hypot`, `imul`, `log`, `log10`, `log1p`, `log2`, `max`, `min`, `pow`, `random`, `round`, `sign`, `sin`, `sinh`, `sqrt`, `tan`, `tanh`, `trunc`\n- `Number` properties:\n  - ES6: `EPSILON`, `MAX_SAFE_INTEGER`, `MAX_VALUE`, `MIN_SAFE_INTEGER`, `MIN_VALUE`, `NEGATIVE_INFINITY`, `NaN`, `POSITIVE_INFINITY`\n- `Number` methods:\n  - ES6: `isFinite`, `isInteger`, `isNaN`, `isSafeInteger`, `parseFloat`, `parseInt`\n- `Number` prototype methods:\n  - ES6: `toExponential` ([0.3.6](changes#njs0.3.6)), `toFixed` ([0.3.6](changes#njs0.3.6)), `toPrecision` ([0.3.6](changes#njs0.3.6))\n- `String` methods:\n  - ES5.1: `fromCharCode`\n  - ES6: `fromCodePoint`\n- `String` prototype methods:\n  - ES5.1: `charAt`, `concat`, `indexOf`, `lastIndexOf`, `match`, `replace`, `search`, `slice`, `split`, `substr`, `substring`, `toLowerCase`, `trim`, `toUpperCase`\n  - ES6: `codePointAt`, `endsWith`, `includes`, `repeat`, `startsWith`\n  - ES8: `padEnd`, `padStart`\n  - ES9: `trimEnd` ([0.3.4](changes#njs0.3.4)), `trimStart` ([0.3.4](changes#njs0.3.4))\n  - ES12: `replaceAll` ([0.7.10](changes#njs0.7.10))\n- `Object` methods:\n  - ES5.1: `create` (support without properties list), `defineProperties` (accessor descriptors support since [0.3.3](changes#njs0.3.3)), `defineProperty` (accessor descriptors support since [0.3.3](changes#njs0.3.3)), `freeze`, `getOwnPropertyDescriptor`, `getOwnPropertyDescriptors` ([0.3.1](changes#njs0.3.1)), `getOwnPropertyNames` ([0.3.1](changes#njs0.3.1)), `getPrototypeOf`, `isExtensible`, `isFrozen`, `isSealed`, `keys`, `preventExtensions`, `seal`\n  - ES6: `assign` ([0.3.7](changes#njs0.3.7))\n  - ES8: `entries` ([0.2.7](changes#njs0.2.7)), `values` ([0.2.7](changes#njs0.2.7))\n- `Object` prototype methods:\n  - ES5.1: `hasOwnProperty`, `isPrototypeOf`, ([0.3.0](changes#njs0.3.0)), `propertyIsEnumerable`, `toString`, `valueOf`\n  - ES6: `is` ([0.3.8](changes#njs0.3.8)), `setPrototypeOf` ([0.3.8](changes#njs0.3.8))\n- `Array` methods:\n  - ES5.1: `isArray`\n  - ES6: `of`\n  - ES13: `from` ([0.8.0](changes#njs0.8.0)),\n- `Array` prototype methods:\n  - ES5.1: `concat`, `every`, `filter`, `forEach`, `indexOf`, `join`, `lastIndexOf`, `map`, `pop`, `push`, `reduce`, `reduceRight`, `reverse`, `shift`, `slice`, `some`, `sort`, `splice`, `unshift`\n  - ES6: `copyWithin` ([0.3.7](changes#njs0.3.7)), `fill`, `find`, `findIndex`\n  - ES7: `includes`\n  - ES13: `toReversed` ([0.8.0](changes#njs0.8.0)), `toSorted` ([0.8.0](changes#njs0.8.0)), `toSpliced` ([0.8.0](changes#njs0.8.0))\n- `ArrayBuffer` methods ([0.3.8](changes#njs0.3.8)):\n  - ES6: `isView`\n- `ArrayBuffer` prototype methods ([0.3.8](changes#njs0.3.8)):\n  - ES6: `slice`\n- `Typed-array` constructors ([0.3.8](changes#njs0.3.8)):\n  - ES6: `Int8Array`, `Uint8Array`, `Uint8ClampedArray`, `Int16Array`, `Uint16Array`, `Int32Array`, `Uint32Array`, `Float32Array`, `Float64Array`\n- `Typed-array` prototype methods ([0.3.8](changes#njs0.3.8)):\n  - ES6: `copyWithin`, `every` ([0.4.4](changes#njs0.4.4)), `fill`, `filter` ([0.4.4](changes#njs0.4.4)), `find` ([0.4.4](changes#njs0.4.4)), `findIndex` ([0.4.4](changes#njs0.4.4)), `forEach` ([0.4.4](changes#njs0.4.4)), `includes` ([0.4.4](changes#njs0.4.4)), `indexOf` ([0.4.4](changes#njs0.4.4)), `join`, `lastIndexOf` ([0.4.4](changes#njs0.4.4)), `map` ([0.4.4](changes#njs0.4.4)), `reduce` ([0.4.4](changes#njs0.4.4)), `reduceRight` ([0.4.4](changes#njs0.4.4)), `reverse` ([0.4.4](changes#njs0.4.4)), `set`, `slice`, `some` ([0.4.4](changes#njs0.4.4)), `sort` ([0.4.2](changes#njs0.4.2)), `subarray`, `toString`\n  - ES13: `toReversed` ([0.8.0](changes#njs0.8.0)) `toSorted` ([0.8.0](changes#njs0.8.0))\n- `Buffer` methods ([0.4.4](changes#njs0.4.4)):\n  - [`alloc`](reference#buffer_alloc), [`allocUnsafe`](reference#buffer_alloc_unsafe), [`byteLength`](reference#buffer_bytelength), [`compare`](reference#buffer_compare), [`concat`](reference#buffer_concat), [`from`](reference#buffer_from_array), [`isBuffer`](reference#buffer_is_buffer), [`isEncoding`](reference#buffer_is_encoding)\n- `Buffer` prototype methods: ([0.4.4](changes#njs0.4.4)):\n  - [`compare`](reference#buf_compare), [`copy`](reference#buf_copy), [`equals`](reference#buf_equals), [`fill`](reference#buf_fill), [`includes`](reference#buf_includes), [`indexOf`](reference#buf_indexof), [`lastIndexOf`](reference#buf_lastindexof), [`readIntBE`](reference#buf_readintbe), `readInt8`, `readInt16BE`, `readInt32BE`, [`readIntLE`](reference#buf_readintle), `readInt8`, `readInt16LE`, `readInt32LE`, [`readUIntBE`](reference#buf_readuintbe), `readUInt8`, `readUInt16BE`, `readUInt32BE`, [`readUIntLE`](reference#buf_readuintle), `readUInt8`, `readUInt16LE`, `readUInt32LE`, [`readDoubleBE`](reference#buf_readdobulebe), [`readDoubleLE`](reference#buf_readdobulele), [`readFloatBE`](reference#buf_readfloatbe), [`readFloatLE`](reference#buf_readfloatle), [`subarray`](reference#buf_subarray), [`slice`](reference#buf_slice), [`swap16`](reference#buf_swap16), [`swap32`](reference#buf_swap32), [`swap64`](reference#buf_swap64), [`toJSON`](reference#buf_tojson), [`toString`](reference#buf_tostring), [`write`](reference#buf_write), [`writeIntBE`](reference#buf_writeintbe), `writeInt8`, `writeInt16BE`, `writeInt32BE`, [`writeIntLE`](reference#buf_writeintle), `writeInt8`, `writeInt16LE`, `writeInt32LE`, [`writeUIntBE`](reference#buf_writeuintbe), `writeUInt8`, `writeUInt16BE`, `writeUInt32BE`, [`writeUIntLE`](reference#buf_writeuintle), `writeUInt8`, `writeUInt16LE`, `writeUInt32LE`, [`writeDoubleBE`](reference#buf_writedoublebe), [`writeDoubleLE`](reference#buf_writedoublele), [`writeFloatBE`](reference#buf_writefloatbe), [`writeFloatLE`](reference#buf_writefloatle)\n- `Promise` methods ([0.3.8](changes#njs0.3.8)):\n  - ES6: `any` ([0.6.2](changes#njs0.6.2)), ` all` ([0.6.2](changes#njs0.6.2)), ` allSettled` ([0.6.2](changes#njs0.6.2)), `reject`, `resolve`, `race` ([0.6.2](changes#njs0.6.2))\n- `Promise` prototype methods ([0.3.8](changes#njs0.3.8)):\n  - ES6: `catch`, `finally`, `then`\n- `Function` prototype methods:\n  - ES5.1: `apply`, `bind`, `call`\n- `RegExp` prototype accessor properties:\n  - `flags` ([0.6.0](changes#njs0.6.0)), `global`, `ignoreCase`, `multiline`, `source`, `sticky` ([0.6.0](changes#njs0.6.0))\n- `RegExp` prototype methods:\n  - `[@@replace]` ([0.4.2](changes#njs0.4.2)), `[@@split]` ([0.6.0](changes#njs0.6.0))\n  - ES5.1: `exec`, `test`, `toString`\n- `RegExp` instance properties:\n  - `lastIndex`\n- `RegExp` ES9 named capture groups ([0.3.2](changes#njs0.3.2))\n- `DataView` prototype methods ([0.4.4](changes#njs0.4.4)):\n  - ES6: `getFloat32`, `getFloat64`, `getInt16`, `getInt32`, `getInt8`, `getUint16`, `getUint32`, `getUint8`, `setFloat32`, `setFloat64`, `setInt16`, `setInt32`, `setInt8`, `setUint16`, `setUint32`, `setUint8`\n- `Date` methods:\n  - ES5.1: `now`, `parse`, `UTC`\n- `Date` prototype methods:\n  - ES5.1: `getDate`, `getDay`, `getFullYear`, `getHours`, `getMilliseconds`, `getMinutes`, `getMonth`, `getSeconds`, `getTime`, `getTimezoneOffset`, `getUTCDate`, `getUTCDay`, `getUTCFullYear`, `getUTCHours`, `getUTCMilliseconds`, `getUTCMinutes`, `getUTCMonth`, `getUTCSeconds`, `toDateString`, `toISOString`, `toLocaleDateString`, `toLocaleString`, `toLocaleTimeString`, `toTimeString`, `toUTCString`, `setDate`, `setFullYear`, `setHours`, `setMinutes`, `setMilliseconds`, `setMonth`, `setSeconds`, `setTime`, `setUTCDate`, `setUTCFullYear`, `setUTCHours`, `setUTCMilliseconds`, `setUTCMinutes`, `setUTCMonth`, `setUTCSeconds`\n- `JSON` methods:\n  - ES5.1: `parse`, `stringify`\n- `Symbol` methods ([0.7.6](changes#njs0.7.6)):\n  - `for`, `keyfor`\n- ES5.1 `arguments` object ([0.2.5](changes#njs0.2.5))\n- ES6 rest parameters syntax (without destructuring support) ([0.2.7](changes#njs0.2.7))\n- ES5.1 global functions: `decodeURI`, `decodeURIComponent`, `encodeURI`, `encodeURIComponent`, `isFinite`, `isNaN`, `parseFloat`, `parseInt`\n- Global functions ([0.7.6](changes#njs0.7.6)): [`atob`](reference#atob), [`btoa`](reference#btoa)\n- `Error` objects: `Error`, `EvalError`, `InternalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError`, `URIError`\n- [`clearTimeout`](reference#cleartimeout) and [`setTimeout`](reference#settimeout) functions ([0.2.0](changes#njs0.2.0))\n- `File system` methods: [`fs.accessSync`](reference#fs_accesssync) ([0.3.9](changes#njs0.3.9)), [`fs.appendFileSync`](reference#appendfilesync), [`fs.closeSync`](reference#fs_closesync), [`fs.existsSync`](reference#fs_existssync) ([0.8.2](changes#njs0.8.2)), [`fs.FileHandle`](reference#fs_filehandle) ([0.7.7](changes#njs0.7.7)), [`fs.fstatSync`](reference#fs_fstatsync) ([0.7.7](changes#njs0.7.7)), [`fs.lstatSync`](reference#fs_lstatsync) ([0.7.1](changes#njs0.7.7)), [`fs.mkdirSync`](reference#fs_mkdirsync) ([0.4.2](changes#njs0.4.2)), [`fs.openSync`](reference#fs_opensync) ([0.7.7](changes#njs0.7.7)), [`fs.promises.open`](reference#fs_promises_open) ([0.7.7](changes#njs0.7.7)), [`fs.readdirSync`](reference#fs_readdirsync) ([0.4.2](changes#njs0.4.2)), [`fs.readFileSync`](reference#readfilesync), [`fs.readSync`](reference#fs_readsync) ([0.7.7](changes#njs0.7.7)), [`fs.realpathSync`](reference#fs_realpathsync) ([0.3.9](changes#njs0.3.9)), [`fs.renameSync`](reference#fs_renamesync) ([0.3.4](changes#njs0.3.4)), [`fs.rmdirSync`](reference#fs_rmdirsync) ([0.4.2](changes#njs0.4.2)), [`fs.symlinkSync`](reference#fs_symlinksync) ([0.3.9](changes#njs0.3.9)), [`fs.unlinkSync`](reference#fs_unlinksync) ([0.3.9](changes#njs0.3.9)), [`fs.writeFileSync`](reference#fs_writefilesync) [`fs.writeSync`](reference#fs_writesync_buf) ([0.7.7](changes#njs0.7.7))\n- `fs.promises` API ([0.3.9](changes#njs0.3.9)), asynchronous version of file system methods.\n- [`Crypto`](reference#crypto) methods ([0.2.0](changes#njs0.2.0)): [`crypto.createHash`](reference#crypto_createhash), [`crypto.createHmac`](reference#crypto_createhmac)\n- [`Query String`](reference#querystring) methods ([0.4.3](changes#njs0.4.3)): [`querystring.decode`](reference#querystring_decode), [`querystring.encode`](reference#querystring_encode), [`querystring.escape`](reference#querystring_escape), [`querystring.parse`](reference#querystring_parse), [`querystring.stringify`](reference#querystring_stringify), [`querystring.unescape`](reference#querystring_unescape)\n- [`TextDecoder`](reference#textdecoder) methods ([0.4.3](changes#njs0.4.3)): [`encoding`](reference#textdecoder_encoding), [`fatal`](reference#textdecoder_fatal), [`ignoreBOM`](reference#textdecoder_ignorebom), [`decode`](reference#textdecoder_ignorebom)\n- [`TextEncoder`](reference#textencoder) methods ([0.4.3](changes#njs0.4.3)): [`encode`](reference#textencoder_encode), [`encodeInto`](reference#textencoder_encodeinto)\n- [`XML`](reference#xml) methods ([0.7.10](changes#njs0.7.10)): [`parse`](reference#xml_parse), [`xml.c14n`](reference#xml_c14n), [`xml.exclusiveC14n`](reference#xml_exclusiveC14n)\n- [`zlib`](reference#zlib) methods ([0.7.12](changes#njs0.7.12)): [`deflateRawSync`](reference#zlib_deflaterawsync), [`deflateSync`](reference#zlib_deflatesync), [`inflateRawSync`](reference#zlib_inflaterawsync) [`inflateSync`](reference#zlib_inflatesync)\n- ES6 modules support: default `export` and default `import` statements ([0.3.0](changes#njs0.3.0))\n- ES6 arrow functions ([0.3.1](changes#njs0.3.1))\n- Template literals: multiline strings, expression interpolation, nesting templates ([0.3.2](changes#njs0.3.2))\n- Global objects ([0.3.3](changes#njs0.3.3)):\n  - [`console`](reference#console) ([0.8.2](changes#njs0.8.2)): [`error`](reference#console_error), [`info`](reference#console_info), [`log`](reference#console_log), [`time`](reference#console_time), [`timeEnd`](reference#console_time_end), [`warn`](reference#console_warn)\n  - [`crypto`](reference#builtin_crypto) ([0.7.0](changes#njs0.7.0)): [`getRandomValues`](reference#crypto_get_random_values), [`subtle.encrypt`](reference#crypto_subtle_encrypt), [`subtle.decrypt`](reference#crypto_subtle_decrypt), [`subtle.deriveBits`](reference#crypto_subtle_derive_bits), [`subtle.deriveKey`](reference#crypto_subtle_derive_key), [`subtle.digest`](reference#crypto_subtle_digest) [`subtle.exportKey`](reference#crypto_subtle_export_key) ([0.7.10](changes#njs0.7.10)), [`subtle.generateKey`](reference#crypto_subtle_generate_key) ([0.7.10](changes#njs0.7.10)), [`subtle.importKey`](reference#crypto_subtle_import_key), [`subtle.sign`](reference#crypto_subtle_sign), [`subtle.verify`](reference#crypto_subtle_verify)\n  - `globalThis` alias ([0.3.8](changes#njs0.3.8)),\n  - [`njs`](reference#njs): [`version`](reference#njs_version), [`version_number`](reference#njs_version_number) ([0.7.4](changes#njs0.7.4)), [`dump`](reference#njs_dump), [`memoryStats`](reference#njs_memory_stats) ([0.7.8](changes#njs0.7.8)), [`on`](reference#njs_on) ([0.5.2](changes#njs0.5.2))\n  - [`process`](reference#process): [`argv`](reference#process_argv), [`env`](reference#process_env), [`pid`](reference#process_pid), [`ppid`](reference#process_ppid)\n- nginx object methods:\n  - [`HTTP Request`](reference#http): [`r.done`](reference#r_done) ([0.5.2](changes#njs0.5.2)), [`r.error`](reference#r_error), [`r.finish`](reference#r_finish), [`r.internalRedirect`](reference#r_internal_redirect), [`r.log`](reference#r_log), [`r.return`](reference#r_return) ([0.5.0](changes#njs0.5.0)), [`r.send`](reference#r_send) ([0.5.0](changes#njs0.5.0)), [`r.sendBuffer`](reference#r_sendbuffer) ([0.5.2](changes#njs0.5.2)), [`r.sendHeader`](reference#r_send_header), [`r.setReturnValue`](reference#r_set_return_value) ([0.7.0](changes#njs0.7.0)), [`r.subrequest`](reference#r_subrequest), [`r.warn`](reference#r_warn)\n  - [`Stream Session`](reference#stream): [`s.allow`](reference#s_allow) ([0.2.4](changes#njs0.2.4)), [`s.decline`](reference#s_decline) ([0.2.4](changes#njs0.2.4)), [`s.deny`](reference#s_deny) ([0.2.4](changes#njs0.2.4)), [`s.done`](reference#s_done) ([0.2.4](changes#njs0.2.4)), [`s.error`](reference#s_error), [`s.log`](reference#s_log), [`s.off`](reference#s_off) ([0.2.4](changes#njs0.2.4)), [`s.on`](reference#s_on) ([0.2.4](changes#njs0.2.4)), [`s.send`](reference#s_send) ([0.2.4](changes#njs0.2.4)), [`s.sendDownstream`](reference#s_send_downstream) ([0.7.8](changes#njs0.7.8)), [`s.sendUpstream`](reference#s_send_upstream) ([0.7.8](changes#njs0.7.8)), [`s.setReturnValue`](reference#s_set_return_value) ([0.7.0](changes#njs0.7.0)), [`s.warn`](reference#s_warn)\n  - [`Headers`](reference#headers) ([0.5.1](changes#njs0.5.1)): [`append`](reference#headers_append), [`delete`](reference#headers_delete), [`get`](reference#headers_get), [`getAll`](reference#headers_getall), [`forEach`](reference#headers_foreach), [`has`](reference#headers_has), [`set`](reference#headers_set)\n  - [`Request`](reference#request) ([0.7.10](changes#njs0.7.10)): [`arrayBuffer`](reference#request_arraybuffer), [`headers`](reference#request_headers), [`json`](reference#request_json), [`text`](reference#request_text)\n  - [`Response`](reference#response) ([0.5.1](changes#njs0.5.1)): [`arrayBuffer`](reference#response_arraybuffer), [`headers`](reference#response_headers), [`json`](reference#response_json), [`text`](reference#response_text)\n  - [`ngx`](reference#ngx) ([0.5.0](changes#njs0.5.0)): [`fetch`](reference#ngx_fetch) ([0.5.1](changes#njs0.5.1)), [`log`](reference#ngx_log)\n  - [`ngx.shared`](reference#ngx_shared) ([0.8.0](changes#njs0.8.0)): [`add`](reference#dict_add), [`clear`](reference#dict_clear), [`delete`](reference#dict_delete), [`freeSpace`](reference#dict_freespace), [`get`](reference#dict_get), [`has`](reference#dict_has), [`incr`](reference#dict_incr), [`items`](reference#dict_items), [`keys`](reference#dict_keys), [`pop`](reference#dict_pop), [`replace`](reference#dict_replace), [`set`](reference#dict_set), [`size`](reference#dict_size)\n- nginx object properties:\n  - [`HTTP Request`](reference#http): [`r.args`](reference#r_args), [`r.headersIn`](reference#r_headers_in), [`r.headersOut`](reference#r_headers_out), [`r.httpVersion`](reference#r_http_version), [`r.internal`](reference#r_internal), [`r.method`](reference#r_method), [`r.parent`](reference#r_parent), [`r.rawHeadersIn`](reference#r_raw_headers_in) ([0.4.1](changes#njs0.4.1)), [`r.rawHeadersOut`](reference#r_raw_headers_out) ([0.4.1](changes#njs0.4.1)), [`r.rawVariables`](reference#r_raw_variables) ([0.5.0](changes#njs0.5.0)), [`r.remoteAddress`](reference#r_remote_address), [`r.requestBuffer`](reference#r_request_buffer) ([0.5.0](changes#njs0.5.0)), [`r.requestText`](reference#r_request_text), [`r.responseBuffer`](reference#r_response_buffer) ([0.5.0](changes#njs0.5.0)), [`r.responseText`](reference#r_response_text) ([0.5.0](changes#njs0.5.0)), [`r.status`](reference#r_status), [`r.uri`](reference#r_uri), [`r.variables`](reference#r_variables) ([0.2.8](changes#njs0.2.8))\n  - [`Stream Session`](reference#stream): [`s.remoteAddress`](reference#s_remote_address), [`s.rawVariables`](reference#s_raw_variables) ([0.5.0](changes#njs0.5.0)), [`s.status`](reference#s_status) ([0.5.2](changes#njs0.5.2)), [`s.variables`](reference#s_variables) ([0.2.8](changes#njs0.2.8))\n  - [`Periodic Session`](reference#periodic_session) ([0.8.1](changes#njs0.8.1)): [`PeriodicSession.rawVariables`](reference#periodic_session_raw_variables), [`PeriodicSession.variables`](reference#periodic_session_variables)\n  - [`Request`](reference#request) ([0.7.10](changes#njs0.7.10)): [`bodyUsed`](reference#request_bodyused), [`cache`](reference#request_cache), [`credentials`](reference#request_credentials), [`method`](reference#request_method), [`mode`](reference#request_mode), [`url`](reference#request_url)\n  - [`Response`](reference#response) ([0.5.1](changes#njs0.5.1)): [`bodyUsed`](reference#response_bodyused), [`ok`](reference#response_ok), [`redirected`](reference#response_redirect), [`status`](reference#response_status), [`statusText`](reference#response_statustext), [`type`](reference#response_type), [`url`](reference#response_url)\n  - [`ngx`](reference#ngx) ([0.5.0](changes#njs0.5.0)): [`build`](reference#ngx_build) ([0.8.0](changes#njs0.8.0)), [`conf_file_path`](reference#ngx_conf_file_path) ([0.8.0](changes#njs0.8.0)), [`conf_prefix`](reference#ngx_conf_prefix) ([0.7.8](changes#njs0.7.8)), [`error_log_path`](reference#ngx_error_log_path) ([0.8.0](changes#njs0.8.0)), [`prefix`](reference#ngx_prefix) ([0.8.0](changes#njs0.8.0)), [`version`](reference#ngx_version) ([0.8.0](changes#njs0.8.0)), [`version_number`](reference#ngx_version_number) ([0.8.0](changes#njs0.8.0)), [`worker_id`](reference#ngx_worker_id) ([0.8.0](changes#njs0.8.0))\n  - [`ngx.shared`](reference#ngx_shared) ([0.8.0](changes#njs0.8.0)): [`capacity`](reference#dict_capacity), [`name`](reference#dict_name), [`type`](reference#dict_name)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/compatibility.html](https://nginx.org/en/docs/njs/compatibility.html)"
- name: Configuration file measurement units
  id: syntax
  summary: Offsets may be also specified in gigabytes using g or G suffixes
  description: "# Configuration file measurement units\n\nSizes can be specified in bytes, kilobytes (suffixes `k` and `K`) or megabytes (suffixes `m` and `M`), for example, “`1024`”, “`8k`”, “`1m`”.\n\nOffsets may be also specified in gigabytes using `g` or `G` suffixes.\n\nTime intervals can be specified in milliseconds, seconds, minutes, hours, days and so on, using the following suffixes:\n\n|     |                 |\n|-----|-----------------|\n| ms  | milliseconds    |\n| s   | seconds         |\n| m   | minutes         |\n| h   | hours           |\n| d   | days            |\n| w   | weeks           |\n| M   | months, 30 days |\n| y   | years, 365 days |\n\nMultiple units can be combined in a single value by specifying them in the order from the most to the least significant, and optionally separated by whitespace. For example, “`1h 30m`” specifies the same time as “`90m`” or “`5400s`”. A value without a suffix means seconds. It is recommended to always specify a suffix.\n\nSome of the time intervals can be specified only with a seconds resolution.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/syntax.html](https://nginx.org/en/docs/syntax.html)"
- name: Configuring HTTPS servers
  id: http/configuring_https_servers
  summary: The server certificate is a public entity
  description: "# Configuring HTTPS servers\n\n- [HTTPS server optimization](#optimization)\n- [SSL certificate chains](#chains)\n- [A single HTTP/HTTPS server](#single_http_https_server)\n- [Name-based HTTPS servers](#name_based_https_servers)\n- [An SSL certificate with several names](#certificate_with_several_names)\n- [Server Name Indication](#sni)\n- [Compatibility](#compatibility)\n\nTo configure an HTTPS server, the `ssl` parameter must be enabled on [listening sockets](ngx_http_core_module#listen) in the [server](ngx_http_core_module#server) block, and the locations of the [server certificate](ngx_http_ssl_module#ssl_certificate) and [private key](ngx_http_ssl_module#ssl_certificate_key) files should be specified:\n\n``` nginx\nserver {\n    listen              443 ssl;\n    server_name         www.example.com;\n    ssl_certificate     www.example.com.crt;\n    ssl_certificate_key www.example.com.key;\n    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_ciphers         HIGH:!aNULL:!MD5;\n    ...\n}\n```\n\nThe server certificate is a public entity. It is sent to every client that connects to the server. The private key is a secure entity and should be stored in a file with restricted access, however, it must be readable by nginx’s master process. The private key may alternately be stored in the same file as the certificate:\n\n``` nginx\n    ssl_certificate     www.example.com.cert;\n    ssl_certificate_key www.example.com.cert;\n```\n\nin which case the file access rights should also be restricted. Although the certificate and the key are stored in one file, only the certificate is sent to a client.\n\nThe directives [ssl_protocols](ngx_http_ssl_module#ssl_protocols) and [ssl_ciphers](ngx_http_ssl_module#ssl_ciphers) can be used to limit connections to include only the strong versions and ciphers of SSL/TLS. By default nginx uses “`ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3`” and “`ssl_ciphers HIGH:!aNULL:!MD5`”, so configuring them explicitly is generally not needed. Note that default values of these directives were [changed](#compatibility) several times.\n\n#### HTTPS server optimization\n\nSSL operations consume extra CPU resources. On multi-processor systems several [worker processes](../ngx_core_module#worker_processes) should be run, no less than the number of available CPU cores. The most CPU-intensive operation is the SSL handshake. There are two ways to minimize the number of these operations per client: the first is by enabling [keepalive](ngx_http_core_module#keepalive_timeout) connections to send several requests via one connection and the second is to reuse SSL session parameters to avoid SSL handshakes for parallel and subsequent connections. The sessions are stored in an SSL session cache shared between workers and configured by the [ssl_session_cache](ngx_http_ssl_module#ssl_session_cache) directive. One megabyte of the cache contains about 4000 sessions. The default cache timeout is 5 minutes. It can be increased by using the [ssl_session_timeout](ngx_http_ssl_module#ssl_session_timeout) directive. Here is a sample configuration optimized for a multi-core system with 10 megabyte shared session cache:\n\n``` nginx\nworker_processes auto;\n\nhttp {\n    ssl_session_cache   shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    server {\n        listen              443 ssl;\n        server_name         www.example.com;\n        keepalive_timeout   70;\n\n        ssl_certificate     www.example.com.crt;\n        ssl_certificate_key www.example.com.key;\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n        ssl_ciphers         HIGH:!aNULL:!MD5;\n        ...\n```\n\n#### SSL certificate chains\n\nSome browsers may complain about a certificate signed by a well-known certificate authority, while other browsers may accept the certificate without issues. This occurs because the issuing authority has signed the server certificate using an intermediate certificate that is not present in the certificate base of well-known trusted certificate authorities which is distributed with a particular browser. In this case the authority provides a bundle of chained certificates which should be concatenated to the signed server certificate. The server certificate must appear before the chained certificates in the combined file:\n\n``` nginx\n$ cat www.example.com.crt bundle.crt > www.example.com.chained.crt\n```\n\nThe resulting file should be used in the [ssl_certificate](ngx_http_ssl_module#ssl_certificate) directive:\n\n``` nginx\nserver {\n    listen              443 ssl;\n    server_name         www.example.com;\n    ssl_certificate     www.example.com.chained.crt;\n    ssl_certificate_key www.example.com.key;\n    ...\n}\n```\n\nIf the server certificate and the bundle have been concatenated in the wrong order, nginx will fail to start and will display the error message:\n\n``` nginx\nSSL_CTX_use_PrivateKey_file(\" ... /www.example.com.key\") failed\n   (SSL: error:0B080074:x509 certificate routines:\n    X509_check_private_key:key values mismatch)\n```\n\nbecause nginx has tried to use the private key with the bundle’s first certificate instead of the server certificate.\n\nBrowsers usually store intermediate certificates which they receive and which are signed by trusted authorities, so actively used browsers may already have the required intermediate certificates and may not complain about a certificate sent without a chained bundle. To ensure the server sends the complete certificate chain, the `openssl` command-line utility may be used, for example:\n\n``` nginx\n$ openssl s_client -connect www.godaddy.com:443\n...\nCertificate chain\n 0 s:/C=US/ST=Arizona/L=Scottsdale/1.3.6.1.4.1.311.60.2.1.3=US\n     /1.3.6.1.4.1.311.60.2.1.2=AZ/O=GoDaddy.com, Inc\n     /OU=MIS Department/CN=www.GoDaddy.com\n     /serialNumber=0796928-7/2.5.4.15=V1.0, Clause 5.(b)\n   i:/C=US/ST=Arizona/L=Scottsdale/O=GoDaddy.com, Inc.\n     /OU=http://certificates.godaddy.com/repository\n     /CN=Go Daddy Secure Certification Authority\n     /serialNumber=07969287\n 1 s:/C=US/ST=Arizona/L=Scottsdale/O=GoDaddy.com, Inc.\n     /OU=http://certificates.godaddy.com/repository\n     /CN=Go Daddy Secure Certification Authority\n     /serialNumber=07969287\n   i:/C=US/O=The Go Daddy Group, Inc.\n     /OU=Go Daddy Class 2 Certification Authority\n 2 s:/C=US/O=The Go Daddy Group, Inc.\n     /OU=Go Daddy Class 2 Certification Authority\n   i:/L=ValiCert Validation Network/O=ValiCert, Inc.\n     /OU=ValiCert Class 2 Policy Validation Authority\n     /CN=http://www.valicert.com//emailAddress=info@valicert.com\n...\n```\n\nWhen testing configurations with [SNI](#sni), it is important to specify the `-servername` option as `openssl` does not use SNI by default.\n\nIn this example the subject (“*s*”) of the `www.GoDaddy.com` server certificate \\#0 is signed by an issuer (“*i*”) which itself is the subject of the certificate \\#1, which is signed by an issuer which itself is the subject of the certificate \\#2, which signed by the well-known issuer *ValiCert, Inc.* whose certificate is stored in the browsers’ built-in certificate base (that lay in the house that Jack built).\n\nIf a certificate bundle has not been added, only the server certificate \\#0 will be shown.\n\n#### A single HTTP/HTTPS server\n\nIt is possible to configure a single server that handles both HTTP and HTTPS requests:\n\n``` nginx\nserver {\n    listen              80;\n    listen              443 ssl;\n    server_name         www.example.com;\n    ssl_certificate     www.example.com.crt;\n    ssl_certificate_key www.example.com.key;\n    ...\n}\n```\n\nPrior to 0.7.14 SSL could not be enabled selectively for individual listening sockets, as shown above. SSL could only be enabled for the entire server using the [ssl](ngx_http_ssl_module#ssl) directive, making it impossible to set up a single HTTP/HTTPS server. The `ssl` parameter of the [listen](ngx_http_core_module#listen) directive was added to solve this issue. The use of the [ssl](ngx_http_ssl_module#ssl) directive in modern versions is thus discouraged.\n\n#### Name-based HTTPS servers\n\nA common issue arises when configuring two or more HTTPS servers listening on a single IP address:\n\n``` nginx\nserver {\n    listen          443 ssl;\n    server_name     www.example.com;\n    ssl_certificate www.example.com.crt;\n    ...\n}\n\nserver {\n    listen          443 ssl;\n    server_name     www.example.org;\n    ssl_certificate www.example.org.crt;\n    ...\n}\n```\n\nWith this configuration a browser receives the default server’s certificate, i.e. `www.example.com` regardless of the requested server name. This is caused by SSL protocol behaviour. The SSL connection is established before the browser sends an HTTP request and nginx does not know the name of the requested server. Therefore, it may only offer the default server’s certificate.\n\nThe oldest and most robust method to resolve the issue is to assign a separate IP address for every HTTPS server:\n\n``` nginx\nserver {\n    listen          192.168.1.1:443 ssl;\n    server_name     www.example.com;\n    ssl_certificate www.example.com.crt;\n    ...\n}\n\nserver {\n    listen          192.168.1.2:443 ssl;\n    server_name     www.example.org;\n    ssl_certificate www.example.org.crt;\n    ...\n}\n```\n\n#### An SSL certificate with several names\n\nThere are other ways that allow sharing a single IP address between several HTTPS servers. However, all of them have their drawbacks. One way is to use a certificate with several names in the SubjectAltName certificate field, for example, `www.example.com` and `www.example.org`. However, the SubjectAltName field length is limited.\n\nAnother way is to use a certificate with a wildcard name, for example, `*.example.org`. A wildcard certificate secures all subdomains of the specified domain, but only on one level. This certificate matches `www.example.org`, but does not match `example.org` and `www.sub.example.org`. These two methods can also be combined. A certificate may contain exact and wildcard names in the SubjectAltName field, for example, `example.org` and `*.example.org`.\n\nIt is better to place a certificate file with several names and its private key file at the *http* level of configuration to inherit their single memory copy in all servers:\n\n``` nginx\nssl_certificate     common.crt;\nssl_certificate_key common.key;\n\nserver {\n    listen          443 ssl;\n    server_name     www.example.com;\n    ...\n}\n\nserver {\n    listen          443 ssl;\n    server_name     www.example.org;\n    ...\n}\n```\n\n#### Server Name Indication\n\nA more generic solution for running several HTTPS servers on a single IP address is [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066), which allows a browser to pass a requested server name during the SSL handshake and, therefore, the server will know which certificate it should use for the connection. SNI is currently [supported](http://en.wikipedia.org/wiki/Server_Name_Indication#Support) by most modern browsers, though may not be used by some old or special clients.\n\nOnly domain names can be passed in SNI, however some browsers may erroneously pass an IP address of the server as its name if a request includes literal IP address. One should not rely on this.\n\nIn order to use SNI in nginx, it must be supported in both the OpenSSL library with which the nginx binary has been built as well as the library to which it is being dynamically linked at run time. OpenSSL supports SNI since 0.9.8f version if it was built with config option “--enable-tlsext”. Since OpenSSL 0.9.8j this option is enabled by default. If nginx was built with SNI support, then nginx will show this when run with the “-V” switch:\n\n``` nginx\n$ nginx -V\n...\nTLS SNI support enabled\n...\n```\n\nHowever, if the SNI-enabled nginx is linked dynamically to an OpenSSL library without SNI support, nginx displays the warning:\n\n``` nginx\nnginx was built with SNI support, however, now it is linked\ndynamically to an OpenSSL library which has no tlsext support,\ntherefore SNI is not available\n```\n\n#### Compatibility\n\n- The SNI support status has been shown by the “-V” switch since 0.8.21 and 0.7.62.\n- The `ssl` parameter of the [listen](ngx_http_core_module#listen) directive has been supported since 0.7.14. Prior to 0.8.21 it could only be specified along with the `default` parameter.\n- SNI has been supported since 0.5.23.\n- The shared SSL session cache has been supported since 0.5.6.\n\n- Version 1.23.4 and later: the default SSL protocols are TLSv1, TLSv1.1, TLSv1.2, and TLSv1.3 (if supported by the OpenSSL library).\n- Version 1.9.1 and later: the default SSL protocols are TLSv1, TLSv1.1, and TLSv1.2 (if supported by the OpenSSL library).\n- Version 0.7.65, 0.8.19 and later: the default SSL protocols are SSLv3, TLSv1, TLSv1.1, and TLSv1.2 (if supported by the OpenSSL library).\n- Version 0.7.64, 0.8.18 and earlier: the default SSL protocols are SSLv2, SSLv3, and TLSv1.\n\n&nbsp;\n\n- Version 1.0.5 and later: the default SSL ciphers are “`HIGH:!aNULL:!MD5`”.\n- Version 0.7.65, 0.8.20 and later: the default SSL ciphers are “`HIGH:!ADH:!MD5`”.\n- Version 0.8.19: the default SSL ciphers are “`ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM`”.\n- Version 0.7.64, 0.8.18 and earlier: the default SSL ciphers are  \n  “`ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP`”.\n\n|                                               |\n|----------------------------------------------:|\n| written by Igor Sysoev edited by Brian Mercer |\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/configuring_https_servers.html](https://nginx.org/en/docs/http/configuring_https_servers.html)"
- name: connect_timeout (ngx_mgmt_module)
  id: ngx_mgmt_module#connect_timeout
  summary: Defines a timeout for establishing a connection with the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`connect_timeout`***`time`*`;` |
    | Default: | `connect_timeout 15s;`           |
    | Context: | `mgmt`                           |

    Defines a timeout for establishing a connection with the Instance Manager.
- name: Connection processing methods
  id: events
  summary: nginx supports a variety of connection processing methods
  description: "# Connection processing methods\n\nnginx supports a variety of connection processing methods. The availability of a particular method depends on the platform used. On platforms that support several methods nginx will normally select the most efficient method automatically. However, if needed, a connection processing method can be selected explicitly with the [use](ngx_core_module#use) directive.\n\nThe following connection processing methods are supported:\n\n- `select` — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The `--with-select_module` and `--without-select_module` configuration parameters can be used to forcibly enable or disable the build of this module.\n\n- `poll` — standard method. The supporting module is built automatically on platforms that lack more efficient methods. The `--with-poll_module` and `--without-poll_module` configuration parameters can be used to forcibly enable or disable the build of this module.\n\n- `kqueue` — efficient method used on FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0, and macOS.\n\n- `epoll` — efficient method used on Linux 2.6+.\n\nThe `EPOLLRDHUP` (Linux 2.6.17, glibc 2.8) and `EPOLLEXCLUSIVE` (Linux 4.5, glibc 2.24) flags are supported since 1.11.3.\n\nSome older distributions like SuSE 8.2 provide patches that add epoll support to 2.4 kernels.\n\n- `/dev/poll` — efficient method used on Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+, and Tru64 UNIX 5.1A+.\n\n- `eventport` — event ports, method used on Solaris 10+ (due to known issues, it is recommended using the `/dev/poll` method instead).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/events.html](https://nginx.org/en/docs/events.html)"
- name: connection_pool_size
  id: http/ngx_http_core_module#connection_pool_size
  summary: Allows accurate tuning of per-connection memory allocations
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`connection_pool_size`***`size`*`;` |
    | Default: | `connection_pool_size 256|512;`       |
    | Context: | `http`, `server`                      |

    Allows accurate tuning of per-connection memory allocations. This directive has minimal impact on performance and should not generally be used. By default, the size is equal to 256 bytes on 32-bit platforms and 512 bytes on 64-bit platforms.

    Prior to version 1.9.8, the default value was 256 on all platforms.
- name: console (Reference)
  id: njs/reference#console
  summary: The console object is available in nginx since 0.8.2, in CLI since 0.2.6
  belongs_to: Reference
  description: |-
    #### console

    |                                          |
    |------------------------------------------|
    | [`console.error()`](#console_error)      |
    | [`console.info()`](#console_info)        |
    | [`console.log()`](#console_log)          |
    | [`console.time()`](#console_time)        |
    | [`console.timeEnd()`](#console_time_end) |
    | [`console.warn()`](#console_warn)        |

    The `console` object is available in nginx since [0.8.2](changes#njs0.8.2), in CLI since [0.2.6](changes#njs0.2.6).

    `console.error(`*`msg`*`[, `*`msg2`*` ...])`

    Outputs one or more error messages. The message may be a string or an object.

    `console.info(`*`msg`*`[, `*`msg2`*` ...])`

    Outputs one or more info messages. The message may be a string or an object.

    `console.log(`*`msg`*`[, `*`msg2`*` ...])`

    Outputs one or more log messages. The message may be a string or an object.

    `console.time(`*`label`*`)`

    Starts a timer that can track how long an operation takes. The `label` parameter allows naming different timers. If [`console.timeEnd()`](#console_time_end) with the same name is called, the time that elapsed since the timer was started will be output, in milliseconds.

    `console.timeEnd(`*`label`*`)`

    Stops a timer previously started by [`console.time()`](#console_time) The `label` parameter allows naming different timers.

    `console.warn(`*`msg`*`[, `*`msg2`*` ...])`

    Outputs one or more warning messages. The message may be a string or an object.
- name: Controlling nginx
  id: control
  summary: nginx can be controlled with signals
  description: "# Controlling nginx\n\n- [Changing Configuration](#reconfiguration)\n- [Rotating Log-files](#logs)\n- [Upgrading Executable on the Fly](#upgrade)\n\nnginx can be controlled with signals. The process ID of the master process is written to the file `/usr/local/nginx/logs/nginx.pid` by default. This name may be changed at configuration time, or in `nginx.conf` using the [pid](ngx_core_module#pid) directive. The master process supports the following signals:\n\n|           |                                                                                                                                                                                             |\n|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| TERM, INT | fast shutdown                                                                                                                                                                               |\n| QUIT      | graceful shutdown                                                                                                                                                                           |\n| HUP       | changing configuration, keeping up with a changed time zone (only for FreeBSD and Linux), starting new worker processes with a new configuration, graceful shutdown of old worker processes |\n| USR1      | re-opening log files                                                                                                                                                                        |\n| USR2      | upgrading an executable file                                                                                                                                                                |\n| WINCH     | graceful shutdown of worker processes                                                                                                                                                       |\n\nIndividual worker processes can be controlled with signals as well, though it is not required. The supported signals are:\n\n|           |                                                                                                          |\n|-----------|----------------------------------------------------------------------------------------------------------|\n| TERM, INT | fast shutdown                                                                                            |\n| QUIT      | graceful shutdown                                                                                        |\n| USR1      | re-opening log files                                                                                     |\n| WINCH     | abnormal termination for debugging (requires [debug_points](ngx_core_module#debug_points) to be enabled) |\n\n#### Changing Configuration\n\nIn order for nginx to re-read the configuration file, a HUP signal should be sent to the master process. The master process first checks the syntax validity, then tries to apply new configuration, that is, to open log files and new listen sockets. If this fails, it rolls back changes and continues to work with old configuration. If this succeeds, it starts new worker processes, and sends messages to old worker processes requesting them to shut down gracefully. Old worker processes close listen sockets and continue to service old clients. After all clients are serviced, old worker processes are shut down.\n\nLet’s illustrate this by example. Imagine that nginx is run on FreeBSD and the command\n\n``` nginx\nps axw -o pid,ppid,user,%cpu,vsz,wchan,command | egrep '(nginx|PID)'\n```\n\nproduces the following output:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33127 33126 nobody   0.0  1380 kqread nginx: worker process (nginx)\n33128 33126 nobody   0.0  1364 kqread nginx: worker process (nginx)\n33129 33126 nobody   0.0  1364 kqread nginx: worker process (nginx)\n```\n\nIf HUP is sent to the master process, the output becomes:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33129 33126 nobody   0.0  1380 kqread nginx: worker process is shutting down (nginx)\n33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33135 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n```\n\nOne of the old worker processes with PID 33129 still continues to work. After some time it exits:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33135 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n```\n\n#### Rotating Log-files\n\nIn order to rotate log files, they need to be renamed first. After that USR1 signal should be sent to the master process. The master process will then re-open all currently open log files and assign them an unprivileged user under which the worker processes are running, as an owner. After successful re-opening, the master process closes all open files and sends the message to worker process to ask them to re-open files. Worker processes also open new files and close old files right away. As a result, old files are almost immediately available for post processing, such as compression.\n\n#### Upgrading Executable on the Fly\n\nIn order to upgrade the server executable, the new executable file should be put in place of an old file first. After that USR2 signal should be sent to the master process. The master process first renames its file with the process ID to a new file with the `.oldbin` suffix, e.g. `/usr/local/nginx/logs/nginx.pid.oldbin`, then starts a new executable file that in turn starts new worker processes:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33134 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n33135 33126 nobody   0.0  1380 kqread nginx: worker process (nginx)\n33136 33126 nobody   0.0  1368 kqread nginx: worker process (nginx)\n36264 33126 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n```\n\nAfter that all worker processes (old and new ones) continue to accept requests. If the WINCH signal is sent to the first master process, it will send messages to its worker processes, requesting them to shut down gracefully, and they will start to exit:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n33135 33126 nobody   0.0  1380 kqread nginx: worker process is shutting down (nginx)\n36264 33126 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n```\n\nAfter some time, only the new worker processes will process requests:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n33126     1 root     0.0  1164 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36264 33126 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n```\n\nIt should be noted that the old master process does not close its listen sockets, and it can be managed to start its worker processes again if needed. If for some reason the new executable file works unacceptably, one of the following can be done:\n\n- Send the HUP signal to the old master process. The old master process will start new worker processes without re-reading the configuration. After that, all new processes can be shut down gracefully, by sending the QUIT signal to the new master process.\n\n- Send the TERM signal to the new master process. It will then send a message to its worker processes requesting them to exit immediately, and they will all exit almost immediately. (If new processes do not exit for some reason, the KILL signal should be sent to them to force them to exit.) When the new master process exits, the old master process will start new worker processes automatically.\n\nIf the new master process exits then the old master process discards the `.oldbin` suffix from the file name with the process ID.\n\nIf upgrade was successful, then the QUIT signal should be sent to the old master process, and only new processes will stay:\n\n``` nginx\n  PID  PPID USER    %CPU   VSZ WCHAN  COMMAND\n36264     1 root     0.0  1148 pause  nginx: master process /usr/local/nginx/sbin/nginx\n36265 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36266 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n36267 36264 nobody   0.0  1364 kqread nginx: worker process (nginx)\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/control.html](https://nginx.org/en/docs/control.html)"
- name: Converting rewrite rules
  id: http/converting_rewrite_rules
  summary: This is a wrong, cumbersome, and ineffective way
  description: "# Converting rewrite rules\n\n- [Converting Mongrel rules](#converting_mongrel_rules)\n\n#### A redirect to a main site\n\nPeople who during their shared hosting life used to configure *everything* using *only* Apache’s .htaccess files, usually translate the following rules:\n\n``` nginx\nRewriteCond  %{HTTP_HOST}  example.org\nRewriteRule  (.*)          http://www.example.org$1\n```\n\nto something like this:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  www.example.org  example.org;\n    if ($http_host = example.org) {\n        rewrite  (.*)  http://www.example.org$1;\n    }\n    ...\n}\n```\n\nThis is a wrong, cumbersome, and ineffective way. The right way is to define a separate server for `example.org`:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  example.org;\n    return       301 http://www.example.org$request_uri;\n}\n\nserver {\n    listen       80;\n    server_name  www.example.org;\n    ...\n}\n```\n\nOn versions prior to 0.9.1, redirects can be made with:\n\n``` nginx\n    rewrite      ^ http://www.example.org$request_uri?;\n```\n\nAnother example. Instead of the “upside-down” logic “all that is not `example.com` and is not `www.example.com`”:\n\n``` nginx\nRewriteCond  %{HTTP_HOST}  !example.com\nRewriteCond  %{HTTP_HOST}  !www.example.com\nRewriteRule  (.*)          http://www.example.com$1\n```\n\none should simply define `example.com`, `www.example.com`, and “everything else”:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  example.com www.example.com;\n    ...\n}\n\nserver {\n    listen       80 default_server;\n    server_name  _;\n    return       301 http://example.com$request_uri;\n}\n```\n\nOn versions prior to 0.9.1, redirects can be made with:\n\n``` nginx\n    rewrite      ^ http://example.com$request_uri?;\n```\n\n#### Converting Mongrel rules\n\nTypical Mongrel rules:\n\n``` nginx\nDocumentRoot /var/www/myapp.com/current/public\n\nRewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f\nRewriteCond %{SCRIPT_FILENAME} !maintenance.html\nRewriteRule ^.*$ %{DOCUMENT_ROOT}/system/maintenance.html [L]\n\nRewriteCond %{REQUEST_FILENAME} -f\nRewriteRule ^(.*)$ $1 [QSA,L]\n\nRewriteCond %{REQUEST_FILENAME}/index.html -f\nRewriteRule ^(.*)$ $1/index.html [QSA,L]\n\nRewriteCond %{REQUEST_FILENAME}.html -f\nRewriteRule ^(.*)$ $1.html [QSA,L]\n\nRewriteRule ^/(.*)$ balancer://mongrel_cluster%{REQUEST_URI} [P,QSA,L]\n```\n\nshould be converted to\n\n``` nginx\nlocation / {\n    root       /var/www/myapp.com/current/public;\n\n    try_files  /system/maintenance.html\n               $uri  $uri/index.html $uri.html\n               @mongrel;\n}\n\nlocation @mongrel {\n    proxy_pass  http://mongrel;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/converting_rewrite_rules.html](https://nginx.org/en/docs/http/converting_rewrite_rules.html)"
- name: Core functionality
  id: ngx_core_module
  summary: If accept_mutex is enabled, worker processes will accept new connections by turn
  description: "# Core functionality\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [accept_mutex](#accept_mutex)\n- [accept_mutex_delay](#accept_mutex_delay)\n- [daemon](#daemon)\n- [debug_connection](#debug_connection)\n- [debug_points](#debug_points)\n- [env](#env)\n- [error_log](#error_log)\n- [events](#events)\n- [include](#include)\n- [load_module](#load_module)\n- [lock_file](#lock_file)\n- [master_process](#master_process)\n- [multi_accept](#multi_accept)\n- [pcre_jit](#pcre_jit)\n- [pid](#pid)\n- [ssl_engine](#ssl_engine)\n- [thread_pool](#thread_pool)\n- [timer_resolution](#timer_resolution)\n- [use](#use)\n- [user](#user)\n- [worker_aio_requests](#worker_aio_requests)\n- [worker_connections](#worker_connections)\n- [worker_cpu_affinity](#worker_cpu_affinity)\n- [worker_priority](#worker_priority)\n- [worker_processes](#worker_processes)\n- [worker_rlimit_core](#worker_rlimit_core)\n- [worker_rlimit_nofile](#worker_rlimit_nofile)\n- [worker_shutdown_timeout](#worker_shutdown_timeout)\n- [working_directory](#working_directory)\n\n#### Example Configuration\n\n``` nginx\nuser www www;\nworker_processes 2;\n\nerror_log /var/log/nginx-error.log info;\n\nevents {\n    use kqueue;\n    worker_connections 2048;\n}\n\n...\n```\n\n#### Directives\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`accept_mutex`**` on | off;` |\n| Default: | `accept_mutex off;`            |\n| Context: | `events`                       |\n\nIf `accept_mutex` is enabled, worker processes will accept new connections by turn. Otherwise, all worker processes will be notified about new connections, and if volume of new connections is low, some of the worker processes may just waste system resources.\n\nThere is no need to enable `accept_mutex` on systems that support the [EPOLLEXCLUSIVE](events#epoll) flag (1.11.3) or when using [reuseport](http/ngx_http_core_module#reuseport).\n\nPrior to version 1.11.3, the default value was `on`.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`accept_mutex_delay`**` `*`time`*`;` |\n| Default: | `accept_mutex_delay 500ms;`            |\n| Context: | `events`                               |\n\nIf [accept_mutex](#accept_mutex) is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections.\n\n|          |                          |\n|----------|--------------------------|\n| Syntax:  | **`daemon`**` on | off;` |\n| Default: | `daemon on;`             |\n| Context: | `main`                   |\n\nDetermines whether nginx should become a daemon. Mainly used during development.\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`debug_connection`**` `*`address`*` | `*`CIDR`*` | unix:;` |\n| Default: | —                                                            |\n| Context: | `events`                                                     |\n\nEnables debugging log for selected client connections. Other connections will use logging level set by the [error_log](#error_log) directive. Debugged connections are specified by IPv4 or IPv6 (1.3.0, 1.2.1) address or network. A connection may also be specified using a hostname. For connections using UNIX-domain sockets (1.3.0, 1.2.1), debugging log is enabled by the “`unix:`” parameter.\n\n``` nginx\nevents {\n    debug_connection 127.0.0.1;\n    debug_connection localhost;\n    debug_connection 192.0.2.0/24;\n    debug_connection ::1;\n    debug_connection 2001:0db8::/32;\n    debug_connection unix:;\n    ...\n}\n```\n\nFor this directive to work, nginx needs to be built with `--with-debug`, see “[A debugging log](debugging_log)”.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`debug_points`**` abort | stop;` |\n| Default: | —                                  |\n| Context: | `main`                             |\n\nThis directive is used for debugging.\n\nWhen internal error is detected, e.g. the leak of sockets on restart of working processes, enabling `debug_points` leads to a core file creation (`abort`) or to stopping of a process (`stop`) for further analysis using a system debugger.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`env`**` `*`variable`*`[=`*`value`*`];` |\n| Default: | `env TZ;`                                 |\n| Context: | `main`                                    |\n\nBy default, nginx removes all environment variables inherited from its parent process except the TZ variable. This directive allows preserving some of the inherited variables, changing their values, or creating new environment variables. These variables are then:\n\n- inherited during a [live upgrade](control#upgrade) of an executable file;\n- used by the [ngx_http_perl_module](http/ngx_http_perl_module) module;\n- used by worker processes. One should bear in mind that controlling system libraries in this way is not always possible as it is common for libraries to check variables only during initialization, well before they can be set using this directive. An exception from this is an above mentioned [live upgrade](control#upgrade) of an executable file.\n\nThe TZ variable is always inherited and available to the [ngx_http_perl_module](http/ngx_http_perl_module) module, unless it is configured explicitly.\n\nUsage example:\n\n``` nginx\nenv MALLOC_OPTIONS;\nenv PERL5LIB=/data/site/modules;\nenv OPENSSL_ALLOW_PROXY_CERTS=1;\n```\n\nThe NGINX environment variable is used internally by nginx and should not be set directly by the user.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`error_log`**` `*`file`*` [`*`level`*`];`            |\n| Default: | `error_log logs/error.log error;`                      |\n| Context: | `main`, `http`, `mail`, `stream`, `server`, `location` |\n\nConfigures logging. Several logs can be specified on the same configuration level (1.5.2). If on the `main` configuration level writing a log to a file is not explicitly defined, the default file will be used.\n\nThe first parameter defines a *`file`* that will store the log. The special value `stderr` selects the standard error file. Logging to [syslog](syslog) can be configured by specifying the “`syslog:`” prefix. Logging to a [cyclic memory buffer](debugging_log#memory) can be configured by specifying the “`memory:`” prefix and buffer *`size`*, and is generally used for debugging (1.7.11).\n\nThe second parameter determines the *`level`* of logging, and can be one of the following: `debug`, `info`, `notice`, `warn`, `error`, `crit`, `alert`, or `emerg`. Log levels above are listed in the order of increasing severity. Setting a certain log level will cause all messages of the specified and more severe log levels to be logged. For example, the default level `error` will cause `error`, `crit`, `alert`, and `emerg` messages to be logged. If this parameter is omitted then `error` is used.\n\nFor `debug` logging to work, nginx needs to be built with `--with-debug`, see “[A debugging log](debugging_log)”.\n\nThe directive can be specified on the `stream` level starting from version 1.7.11, and on the `mail` level starting from version 1.9.0.\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`events`**` { ... }` |\n| Default: | —                      |\n| Context: | `main`                 |\n\nProvides the configuration file context in which the directives that affect connection processing are specified.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`include`**` `*`file`*` | `*`mask`*`;` |\n| Default: | —                                        |\n| Context: | `any`                                    |\n\nIncludes another *`file`*, or files matching the specified *`mask`*, into configuration. Included files should consist of syntactically correct directives and blocks.\n\nUsage example:\n\n``` nginx\ninclude mime.types;\ninclude vhosts/*.conf;\n```\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`load_module`**` `*`file`*`;` |\n| Default: | —                               |\n| Context: | `main`                          |\n\nThis directive appeared in version 1.9.11.\n\nLoads a dynamic module.\n\nExample:\n\n``` nginx\nload_module modules/ngx_mail_module.so;\n```\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`lock_file`**` `*`file`*`;` |\n| Default: | `lock_file logs/nginx.lock;`  |\n| Context: | `main`                        |\n\nnginx uses the locking mechanism to implement [accept_mutex](#accept_mutex) and serialize access to shared memory. On most systems the locks are implemented using atomic operations, and this directive is ignored. On other systems the “lock file” mechanism is used. This directive specifies a prefix for the names of lock files.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`master_process`**` on | off;` |\n| Default: | `master_process on;`             |\n| Context: | `main`                           |\n\nDetermines whether worker processes are started. This directive is intended for nginx developers.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`multi_accept`**` on | off;` |\n| Default: | `multi_accept off;`            |\n| Context: | `events`                       |\n\nIf `multi_accept` is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time.\n\nThe directive is ignored if [kqueue](events#kqueue) connection processing method is used, because it reports the number of new connections waiting to be accepted.\n\n|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`pcre_jit`**` on | off;` |\n| Default: | `pcre_jit off;`            |\n| Context: | `main`                     |\n\nThis directive appeared in version 1.1.12.\n\nEnables or disables the use of “just-in-time compilation” (PCRE JIT) for the regular expressions known by the time of configuration parsing.\n\nPCRE JIT can speed up processing of regular expressions significantly.\n\nThe JIT is available in PCRE libraries starting from version 8.20 built with the `--enable-jit` configuration parameter. When the PCRE library is built with nginx (`--with-pcre=`), the JIT support is enabled via the `--with-pcre-jit` configuration parameter.\n\n|          |                         |\n|----------|-------------------------|\n| Syntax:  | **`pid`**` `*`file`*`;` |\n| Default: | `pid logs/nginx.pid;`   |\n| Context: | `main`                  |\n\nDefines a *`file`* that will store the process ID of the main process.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`ssl_engine`**` `*`device`*`;` |\n| Default: | —                                |\n| Context: | `main`                           |\n\nDefines the name of the hardware SSL accelerator.\n\n|          |                                                                               |\n|----------|-------------------------------------------------------------------------------|\n| Syntax:  | **`thread_pool`**` `*`name`*` threads=`*`number`*` [max_queue=`*`number`*`];` |\n| Default: | `thread_pool default threads=32 max_queue=65536;`                             |\n| Context: | `main`                                                                        |\n\nThis directive appeared in version 1.7.11.\n\nDefines the *`name`* and parameters of a thread pool used for multi-threaded reading and sending of files [without blocking](http/ngx_http_core_module#aio) worker processes.\n\nThe `threads` parameter defines the number of threads in the pool.\n\nIn the event that all threads in the pool are busy, a new task will wait in the queue. The `max_queue` parameter limits the number of tasks allowed to be waiting in the queue. By default, up to 65536 tasks can wait in the queue. When the queue overflows, the task is completed with an error.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`timer_resolution`**` `*`interval`*`;` |\n| Default: | —                                        |\n| Context: | `main`                                   |\n\nReduces timer resolution in worker processes, thus reducing the number of `gettimeofday()` system calls made. By default, `gettimeofday()` is called each time a kernel event is received. With reduced resolution, `gettimeofday()` is only called once per specified *`interval`*.\n\nExample:\n\n``` nginx\ntimer_resolution 100ms;\n```\n\nInternal implementation of the interval depends on the method used:\n\n- the `EVFILT_TIMER` filter if `kqueue` is used;\n- `timer_create()` if `eventport` is used;\n- `setitimer()` otherwise.\n\n|          |                           |\n|----------|---------------------------|\n| Syntax:  | **`use`**` `*`method`*`;` |\n| Default: | —                         |\n| Context: | `events`                  |\n\nSpecifies the [connection processing](events) *`method`* to use. There is normally no need to specify it explicitly, because nginx will by default use the most efficient method.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`user`**` `*`user`*` [`*`group`*`];` |\n| Default: | `user nobody nobody;`                  |\n| Context: | `main`                                 |\n\nDefines *`user`* and *`group`* credentials used by worker processes. If *`group`* is omitted, a group whose name equals that of *`user`* is used.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`worker_aio_requests`**` `*`number`*`;` |\n| Default: | `worker_aio_requests 32;`                 |\n| Context: | `events`                                  |\n\nThis directive appeared in versions 1.1.4 and 1.0.7.\n\nWhen using [aio](http/ngx_http_core_module#aio) with the [epoll](events#epoll) connection processing method, sets the maximum *`number`* of outstanding asynchronous I/O operations for a single worker process.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`worker_connections`**` `*`number`*`;` |\n| Default: | `worker_connections 512;`                |\n| Context: | `events`                                 |\n\nSets the maximum number of simultaneous connections that can be opened by a worker process.\n\nIt should be kept in mind that this number includes all connections (e.g. connections with proxied servers, among others), not only connections with clients. Another consideration is that the actual number of simultaneous connections cannot exceed the current limit on the maximum number of open files, which can be changed by [worker_rlimit_nofile](#worker_rlimit_nofile).\n\n|          |                                                                                                  |\n|----------|--------------------------------------------------------------------------------------------------|\n| Syntax:  | **`worker_cpu_affinity`**` `*`cpumask`*` ...;` **`worker_cpu_affinity`**` auto [`*`cpumask`*`];` |\n| Default: | —                                                                                                |\n| Context: | `main`                                                                                           |\n\nBinds worker processes to the sets of CPUs. Each CPU set is represented by a bitmask of allowed CPUs. There should be a separate set defined for each of the worker processes. By default, worker processes are not bound to any specific CPUs.\n\nFor example,\n\n``` nginx\nworker_processes    4;\nworker_cpu_affinity 0001 0010 0100 1000;\n```\n\nbinds each worker process to a separate CPU, while\n\n``` nginx\nworker_processes    2;\nworker_cpu_affinity 0101 1010;\n```\n\nbinds the first worker process to CPU0/CPU2, and the second worker process to CPU1/CPU3. The second example is suitable for hyper-threading.\n\nThe special value `auto` (1.9.10) allows binding worker processes automatically to available CPUs:\n\n``` nginx\nworker_processes auto;\nworker_cpu_affinity auto;\n```\n\nThe optional mask parameter can be used to limit the CPUs available for automatic binding:\n\n``` nginx\nworker_cpu_affinity auto 01010101;\n```\n\nThe directive is only available on FreeBSD and Linux.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`worker_priority`**` `*`number`*`;` |\n| Default: | `worker_priority 0;`                  |\n| Context: | `main`                                |\n\nDefines the scheduling priority for worker processes like it is done by the `nice` command: a negative *`number`* means higher priority. Allowed range normally varies from -20 to 20.\n\nExample:\n\n``` nginx\nworker_priority -10;\n```\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`worker_processes`**` `*`number`*` | auto;` |\n| Default: | `worker_processes 1;`                         |\n| Context: | `main`                                        |\n\nDefines the number of worker processes.\n\nThe optimal value depends on many factors including (but not limited to) the number of CPU cores, the number of hard disk drives that store data, and load pattern. When one is in doubt, setting it to the number of available CPU cores would be a good start (the value “`auto`” will try to autodetect it).\n\nThe `auto` parameter is supported starting from versions 1.3.8 and 1.2.5.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`worker_rlimit_core`**` `*`size`*`;` |\n| Default: | —                                      |\n| Context: | `main`                                 |\n\nChanges the limit on the largest size of a core file (`RLIMIT_CORE`) for worker processes. Used to increase the limit without restarting the main process.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`worker_rlimit_nofile`**` `*`number`*`;` |\n| Default: | —                                          |\n| Context: | `main`                                     |\n\nChanges the limit on the maximum number of open files (`RLIMIT_NOFILE`) for worker processes. Used to increase the limit without restarting the main process.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`worker_shutdown_timeout`**` `*`time`*`;` |\n| Default: | —                                           |\n| Context: | `main`                                      |\n\nThis directive appeared in version 1.11.11.\n\nConfigures a timeout for a graceful shutdown of worker processes. When the *`time`* expires, nginx will try to close all the connections currently open to facilitate shutdown.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`working_directory`**` `*`directory`*`;` |\n| Default: | —                                          |\n| Context: | `main`                                     |\n\nDefines the current working directory for a worker process. It is primarily used when writing a core-file, in which case a worker process should have write permission for the specified directory.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_core_module.html](https://nginx.org/en/docs/ngx_core_module.html)"
- name: create_full_put_path
  id: http/ngx_http_dav_module#create_full_put_path
  summary: The WebDAV specification only allows creating files in already existing directories
  belongs_to: ngx_http_dav_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`create_full_put_path`**` on | off;` |
    | Default: | `create_full_put_path off;`            |
    | Context: | `http`, `server`, `location`           |

    The WebDAV specification only allows creating files in already existing directories. This directive allows creating all needed intermediate directories.
- name: crypto (Reference)
  id: njs/reference#builtin_crypto
  summary: The crypto object is a global object that allows using cryptographic functionality (since 0.7.0)
  belongs_to: Reference
  description: |-
    #### crypto

    |                                                              |
    |--------------------------------------------------------------|
    | [`сrypto.getRandomValues()`](#crypto_get_random_values)      |
    | [`сrypto.subtle.encrypt()`](#crypto_subtle_encrypt)          |
    | [`сrypto.subtle.decrypt()`](#crypto_subtle_decrypt)          |
    | [`сrypto.subtle.deriveBits()`](#crypto_subtle_derive_bits)   |
    | [`сrypto.subtle.deriveKey()`](#crypto_subtle_derive_key)     |
    | [`сrypto.subtle.digest()`](#crypto_subtle_digest)            |
    | [`сrypto.subtle.exportKey()`](#crypto_subtle_export_key)     |
    | [`сrypto.subtle.generateKey()`](#crypto_subtle_generate_key) |
    | [`сrypto.subtle.importKey()`](#crypto_subtle_import_key)     |
    | [`сrypto.subtle.sign()`](#crypto_subtle_sign)                |
    | [`сrypto.subtle.verify()`](#crypto_subtle_verify)            |

    The `crypto` object is a global object that allows using cryptographic functionality (since [0.7.0](changes#njs0.7.0)).

    `сrypto.getRandomValues`([`typedArray`](#crypto_get_random_values_array))

    Gets cryptographically strong random values. Returns the same array passed as `typedArray` but with its contents replaced with the newly generated random numbers. Possible values:

    `typedArray`

    can be `Int8Array`, `Int16Array`, `Uint16Array`, `Int32Array`, or `Uint32Array`

    `сrypto.subtle.encrypt`([`algorithm`](#crypto_encrypt_alg), [`key`](#crypto_encrypt_key), [`data`](#crypto_encrypt_data))

    Encrypts [`data`](#crypto_encrypt_data) using the provided [`algorithm`](#crypto_encrypt_algorithm) and [`key`](#crypto_encrypt_key). Returns a `Promise` that fulfills with an `ArrayBuffer` containing the ciphertext. Possible values:

    `algorithm`

    an object that specifies the algorithm to be used and any extra parameters if required:

    - for `RSA-OAEP`, pass the object with the following keys:
      - `name` is a string, should be set to `RSA-OAEP`:

        ``` nginx
        crypto.subtle.encrypt({name: "RSA-OAEP"}, key, data)
        ```
    - for `AES-CTR`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-CTR`
      - `counter` is an `ArrayBuffer`, `TypedArray`, or `DataView` — the initial value of the counter block, must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter
      - `length` is the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap.
    - for `AES-CBC`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-CBC`
      - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret, for example, it may be transmitted unencrypted along with the ciphertext.
    - for `AES-GCM`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-GCM`
      - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, and must be unique for every encryption operation carried out with a given key
      - `additionalData` (optional) is an `ArrayBuffer`, `TypedArray`, or `DataView` that contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If `additionalData` is specified, then the same data must be specified in the corresponding call to `decrypt()`: if the data given to the `decrypt()` call does not match the original data, the decryption will throw an exception. The bit length of `additionalData` must be smaller than `2^64 - 1`.
      - `tagLength` (optional, default is `128`) - a `number` that determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption Possible values: `32`, `64`, `96`, `104`, `112`, `120`, or `128`. The AES-GCM specification recommends that it should be `96`, `104`, `112`, `120`, or `128`, although `32` or `64` bits may be acceptable in some applications.

    `key`

    a [`CryptoKey`](#cryptokey) that contains the key to be used for encryption

    `data`

    an `ArrayBuffer`, `TypedArray`, or `DataView` that contains the data to be encrypted (also known as the plaintext)

    `сrypto.subtle.decrypt`([`algorithm`](#crypto_decrypt_alg), [`key`](#crypto_decrypt_key), [`data`](#crypto_decrypt_data))

    Decrypts encrypted data. Returns a `Promise` with the decrypted data. Possible values:

    `algorithm`

    an object that specifies the algorithm to be used, and any extra parameters as required. The values given for the extra parameters must match those passed into the corresponding `encrypt()` call.

    - for `RSA-OAEP`, pass the object with the following keys:
      - `name` is a string, should be set to `RSA-OAEP`:

        ``` nginx
        crypto.subtle.encrypt({name: "RSA-OAEP"}, key, data)
        ```
    - for `AES-CTR`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-CTR`
      - `counter` is an `ArrayBuffer`, `TypedArray`, or `DataView` — the initial value of the counter block, must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter.
      - `length` is the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap.
    - for `AES-CBC`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-CBC`
      - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret (for example, it may be transmitted unencrypted along with the ciphertext).
    - for `AES-GCM`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-GCM`
      - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, and must be unique for every encryption operation carried out with a given key
      - `additionalData` (optional) is an `ArrayBuffer`, `TypedArray`, or `DataView` that contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If `additionalData` is specified, then the same data must be specified in the corresponding call to `decrypt()`: if the data given to the `decrypt()` call does not match the original data, the decryption will throw an exception. The bit length of `additionalData` must be smaller than `2^64 - 1`.
      - `tagLength` (optional, default is `128`) - a `number` that determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption. Possible values: `32`, `64`, `96`, `104`, `112`, `120`, or `128`. The AES-GCM specification recommends that it should be `96`, `104`, `112`, `120`, or `128`, although `32` or `64` bits may be acceptable in some applications.

    `key`

    a [`CryptoKey`](#cryptokey) that contains the key to be used for decryption. If `RSA-OAEP` is used, this is the `privateKey` property of the [`CryptoKeyPair`](#cryptokeypair) object.

    `data`

    an `ArrayBuffer`, `TypedArray`, or `DataView` that contains the data to be decrypted (also known as ciphertext)

    `сrypto.subtle.deriveBits`([`algorithm`](#crypto_derive_bits_alg), [`baseKey`](#crypto_derive_bits_basekey), [`length`](#crypto_derive_bits_length))

    Derives an array of bits from a base key. Returns a `Promise` which will be fulfilled with an `ArrayBuffer` that contains the derived bits. Possible values:

    `algorithm`

    is an object that defines the derivation algorithm to use:

    - for `HKDF`, pass the object with the following keys:
      - `name` is a string, should be set to `HKDF`
      - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`
      - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value with the same length as the output of the `digest` function. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.
      - `info` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents application-specific contextual information used to bind the derived key to an application or context, and enables deriving different keys for different contexts while using the same input key material. This property is required but may be an empty buffer.
    - for `PBKDF2`, pass the object with the following keys:
      - `name` is a string, should be set to `PBKDF2`
      - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`
      - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value of at least `16` bytes. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.
      - `iterations` is a `number` that represents the number of times the hash function will be executed in `deriveKey()`

    `baseKey`

    is a [`CryptoKey`](#cryptokey) that represents the input to the derivation algorithm - the initial key material for the derivation function: for example, for `PBKDF2` it might be a password, imported as a [`CryptoKey`](#cryptokey) using [`сrypto.subtle.importKey()`](#crypto_subtle_import_key)

    `length`

    is a number representing the number of bits to derive. For browsers compatibility, the number should be a multiple of `8`

    `сrypto.subtle.deriveKey`([`algorithm`](#crypto_derive_key_alg), [`baseKey`](#crypto_derive_key_basekey), [`derivedKeyAlgorithm`](#crypto_derive_key_derivedkeyalg), [`extractable`](#crypto_derive_key_extractable), [`keyUsages`](#crypto_derive_key_keyusages))

    Derives a secret key from a master key. Possible values:

    `algorithm`

    is an object that defines the derivation algorithm to use:

    - for `HKDF`, pass the object with the following keys:
      - `name` is a string, should be set to `HKDF`
      - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`
      - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value with the same length as the output of the `digest` function. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.
      - `info` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents application-specific contextual information used to bind the derived key to an application or context, and enables deriving different keys for different contexts while using the same input key material. This property is required but may be an empty buffer.
    - for `PBKDF2`, pass the object with the following keys:
      - `name` is a string, should be set to `PBKDF2`
      - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`
      - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value of at least `16` bytes. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.
      - `iterations` is a `number` that represents the number of times the hash function will be executed in `deriveKey()`

    `baseKey`

    is a [`CryptoKey`](#cryptokey) that represents the input to the derivation algorithm - the initial key material for the derivation function: for example, for `PBKDF2` it might be a password, imported as a [`CryptoKey`](#cryptokey) using [`сrypto.subtle.importKey()`](#crypto_subtle_import_key).

    `derivedKeyAlgorithm`

    is an object that defines the algorithm the derived key will be used for:

    - for `HMAC`, pass the object with the following keys:
      - `name` is a string, should be set to `HMAC`
      - `hash` is a string with the name of the digest function to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`
      - `length` (optional) is a `number` that represents the length in bits of the key. If not specified, the length of the key is equal to the block size of the chozen hash function
    - for `AES-CTR`, `AES-CBC`, or `AES-GCM`, pass the object with the following keys:
      - `name` is a string, should be set to `AES-CTR`, `AES-CBC`, or `AES-GCM`, depending on the algorithm used
      - `length` is a `number` that represents the length in bits of the key to generate: `128`, `192`, or `256`

    `extractable`

    is a boolean value that indicates whether it will be possible to export the key

    `keyUsages`

    is an `Array` that indicates what can be done with the derived key. The key usages must be allowed by the algorithm set in `derivedKeyAlgorithm`. Possible values:

    `encrypt`

    key for encrypting messages

    `decrypt`

    key for decrypting messages

    `sign`

    key for signing messages

    `verify`

    key for verifying signatures

    `deriveKey`

    key for deriving a new key

    `deriveBits`

    key for deriving bits

    `wrapKey`

    key for wrapping a key

    `unwrapKey`

    key for unwrapping a key

    `сrypto.subtle.digest`([`algorithm`](#crypto_digest_alg), [`data`](#crypto_digest_data))

    Generates a digest of the given data. Takes as its arguments an identifier for the digest algorithm to use and the data to digest. Returns a `Promise` which will be fulfilled with the digest. Possible values:

    `algorithm`

    is a string that defines the hash function to use: `SHA-1` (not for cryptographic applications), `SHA-256`, `SHA-384`, or `SHA-512`

    `data`

    is an `ArrayBuffer`, `TypedArray`, or `DataView` that contains the data to be digested

    `сrypto.subtle.exportKey`([`format`](#crypto_export_key_format), [`key`](#crypto_export_key_keydata))

    Exports a key: takes a key as a [`CryptoKey`](#cryptokey) object and returns the key in an external, portable format (since [0.7.10](changes#njs0.7.10)). If the `format` was `jwk`, then the `Promise` fulfills with a JSON object containing the key. Otherwise, the promise fulfills with an `ArrayBuffer` containing the key. Possible values:

    `format`

    a string that describes the data format in which the key should be exported, can be the following:

    `raw`

    the raw data format

    `pkcs8`

    the [PKCS \#8](https://datatracker.ietf.org/doc/html/rfc5208) format

    `spki`

    the [SubjectPublicKeyInfo](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1) format

    `jwk`

    the [JSON Web Key](https://datatracker.ietf.org/doc/html/rfc7517) (JWK) format (since [0.7.10](changes#njs0.7.10))

    `key`

    the [`CryptoKey`](#cryptokey) that contains the key to be exported

    `сrypto.subtle.generateKey`([`algorithm`](#crypto_generate_key_alg), [`extractable`](#crypto_generate_key_extractable), [`usage`](#crypto_generate_key_usage))

    Generates a new key for symmetric algorithms or key pair for public-key algorithms (since [0.7.10](changes#njs0.7.10)). Returns a `Promise` that fulfills with the generated key as a [`CryptoKey`](#cryptokey) or [`CryptoKeyPair`](#cryptokeypair) object. Possible values:

    `algorithm`

    a dictionary object that defines the type of key to generate and provides extra algorithm-specific parameters:

    - for `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, pass the object with the following keys:
      - `name` is a string, should be set to `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, depending on the used algorithm
      - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-256`, `SHA-384`, or `SHA-512`
    - for `ECDSA`, pass the object with the following keys:
      - `name` is a string, should be set to `ECDSA`
      - `namedCurve` is a string that represents the name of the elliptic curve to use, may be `P-256`, `P-384`, or `P-521`
    - for `HMAC`, pass the object with the following keys:
      - `name` is a string, should be set to `HMAC`
      - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-256`, `SHA-384`, or `SHA-512`
      - `length` (optional) is a number that represents the length in bits of the key. If omitted, the length of the key is equal to the length of the digest generated by the chosen digest function.
    - for `AES-CTR`, `AES-CBC`, or `AES-GCM`, pass the string identifying the algorithm or an object of the form `{ "name": "ALGORITHM" }`, where `ALGORITHM` is the name of the algorithm

    `extractable`

    boolean value that indicates if it is possible to export the key

    `usage`

    an `array` that indicates possible actions with the key:

    `encrypt`

    key for encrypting messages

    `decrypt`

    key for decrypting messages

    `sign`

    key for signing messages

    `verify`

    key for verifying signatures

    `deriveKey`

    key for deriving a new key

    `deriveBits`

    key for deriving bits

    `wrapKey`

    key for wrapping a key

    `unwrapKey`

    key for unwrapping a key

    `сrypto.subtle.importKey`([`format`](#crypto_import_key_format), [`keyData`](#crypto_import_key_keydata), [`algorithm`](#crypto_import_key_alg), [`extractable`](#crypto_import_key_extractable), [`keyUsages`](#crypto_import_key_keyusages))

    Imports a key: takes as input a key in an external, portable format and gives a [`CryptoKey`](#cryptokey) object. Returns a `Promise` that fulfills with the imported key as a [`CryptoKey`](#cryptokey) object. Possible values:

    `format`

    a string that describes the data format of the key to import, can be the following:

    `raw`

    the raw data format

    `pkcs8`

    the [PKCS \#8](https://datatracker.ietf.org/doc/html/rfc5208) format

    `spki`

    the [SubjectPublicKeyInfo](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1) format

    `jwk`

    the [JSON Web Key](https://datatracker.ietf.org/doc/html/rfc7517) (JWK) format (since [0.7.10](changes#njs0.7.10))

    `keyData`

    the `ArrayBuffer`, `TypedArray`, or `DataView` object that contains the key in the given format

    `algorithm`

    a dictionary object that defines the type of key to import and provides extra algorithm-specific parameters:

    - for `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, pass the object with the following keys:
      - `name` is a string, should be set to `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, depending on the used algorithm
      - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`
    - for `ECDSA`, pass the object with the following keys:
      - `name` is a string, should be set to `ECDSA`
      - `namedCurve` is a string that represents the name of the elliptic curve to use, may be `P-256`, `P-384`, or `P-521`
    - for `HMAC`, pass the object with the following keys:
      - `name` is a string, should be set to `HMAC`
      - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-256`, `SHA-384`, or `SHA-512`
      - `length` (optional) is a number that represents the length in bits of the key. If omitted, the length of the key is equal to the length of the digest generated by the chosen digest function.
    - for `AES-CTR`, `AES-CBC`, or `AES-GCM`, pass the string identifying the algorithm or an object of the form `{ "name": "ALGORITHM" }`, where `ALGORITHM` is the name of the algorithm
    - for `PBKDF2`, pass the `PBKDF2` string
    - for `HKDF`, pass the `HKDF` string

    `extractable`

    boolean value that indicates if it is possible to export the key

    `keyUsages`

    an `array` that indicates possible actions with the key:

    `encrypt`

    key for encrypting messages

    `decrypt`

    key for decrypting messages

    `sign`

    key for signing messages

    `verify`

    key for verifying signatures

    `deriveKey`

    key for deriving a new key

    `deriveBits`

    key for deriving bits

    `wrapKey`

    key for wrapping a key

    `unwrapKey`

    key for unwrapping a key

    `сrypto.subtle.sign`([`algorithm`](#crypto_sign_alg), [`key`](#crypto_sign_key), [`data`](#crypto_sign_data))

    Returns `signature` as a `Promise` that fulfills with an `ArrayBuffer` containing the signature. Possible values:

    `algorithm`

    is a string or object that specifies the signature algorithm to use and its parameters:

    - for `RSASSA-PKCS1-v1_5`, pass the string identifying the algorithm or an object of the form `{ "name": "ALGORITHM" }`
    - for `RSA-PSS`, pass the object with the following keys:
      - `name` is a string, should be set to `RSA-PSS`
      - `saltLength` is a long `integer` that represents the length of the random salt to use, in bytes
    - for `ECDSA`, pass the object with the following keys:
      - `name` is a string, should be set to `ECDSA`
      - `hash` is an identifier for the digest algorithm to use, can be `SHA-256`, `SHA-384`, or `SHA-512`
    - for `HMAC`, pass the string identifying the algorithm or an object of the form `{ "name": "ALGORITHM" }`

    `key`

    is a [`CryptoKey`](#cryptokey) object that the key to be used for signing. If algorithm identifies a public-key cryptosystem, this is the private key.

    `data`

    is an `ArrayBuffer`, `TypedArray`, or `DataView` object that contains the data to be signed

    `сrypto.subtle.verify`([`algorithm`](#crypto_verify_alg), [`key`](#crypto_verify_key), [`signature`](#crypto_verify_signature), [`data`](#crypto_verify_data))

    Verifies a digital signature, returns a `Promise` that fulfills with a boolean value: `true` if the signature is valid, otherwise `false`. Possible values:

    `algorithm`

    is a string or object that specifies the algorithm to use and its parameters:

    - for `RSASSA-PKCS1-v1_5`, pass the string identifying the algorithm or an object of the form `{ "name": "ALGORITHM" }`
    - for `RSA-PSS`, pass the object with the following keys:
      - `name` is a string, should be set to `RSA-PSS`
      - `saltLength` is a long `integer` that represents the length of the random salt to use, in bytes
    - for `ECDSA`, pass the object with the following keys:
      - `name` is a string, should be set to `ECDSA`
      - `hash` is an identifier for the digest algorithm to use, can be `SHA-256`, `SHA-384`, or `SHA-512`
    - for `HMAC`, pass the string identifying the algorithm or an object of the form `{ "name": "ALGORITHM" }`

    `key`

    is a [`CryptoKey`](#cryptokey) object that the key to be used for verifying. It is the secret key for a symmetric algorithm and the public key for a public-key system.

    `signature`

    is an `ArrayBuffer`, `TypedArray`, or `DataView` that contains the signature to verify

    `data`

    is an `ArrayBuffer`, `TypedArray`, or `DataView` object that contains the data whose signature is to be verified

    #### CryptoKey

    |                                                   |
    |---------------------------------------------------|
    | [`CryptoKey.algorithm`](#cryptokey_alg)           |
    | [`CryptoKey.extractable`](#cryptokey_extractable) |
    | [`CryptoKey.type`](#cryptokey_type)               |
    | [`CryptoKey.usages`](#cryptokey_usages)           |

    The `CryptoKey` object represents a cryptographic `key` obtained from one of the `SubtleCrypto` methods: [`сrypto.subtle.generateKey()`](#crypto_subtle_generate_key), [`сrypto.subtle.deriveKey()`](#crypto_subtle_derive_key), [`сrypto.subtle.importKey()`](#crypto_subtle_import_key).

    `CryptoKey.algorithm`

    returns an object describing the algorithm for which this key can be used and any associated extra parameters (since [0.8.0](changes#njs0.8.0)), read-only

    `CryptoKey.extractable`

    a boolean value, `true` if the key can be exported (since [0.8.0](changes#njs0.8.0)), read-only

    `CryptoKey.type`

    a string value that indicates which kind of key is represented by the object, read-only. Possible values:

    `secret`

    This key is a secret key for use with a symmetric algorithm.

    `private`

    This key is the private half of an asymmetric algorithm's [`CryptoKeyPair`](#cryptokeypair)

    `public`

    This key is the public half of an asymmetric algorithm's [`CryptoKeyPair`](#cryptokeypair).

    `CryptoKey.usages`

    An array of strings indicating what this key can be used for (since [0.8.0](changes#njs0.8.0)), read-only. Possible array values:

    `encrypt`

    key for encrypting messages

    `decrypt`

    key for decrypting messages

    `sign`

    key for signing messages

    `verify`

    key for verifying signatures

    `deriveKey`

    key for deriving a new key

    `deriveBits`

    key for deriving bits

    #### CryptoKeyPair

    |                                                         |
    |---------------------------------------------------------|
    | [`CryptoKeyPair.privateKey`](#cryptokeypair_privatekey) |
    | [`CryptoKeyPair.publicKey`](#cryptokeypair_publickey)   |

    The `CryptoKeyPair` is a dictionary object of the [WebCrypto API](#builtin_crypto) that represents an asymmetric key pair.

    `CryptoKeyPair.privateKey`

    A [`CryptoKey`](#cryptokey) object representing the private key.

    `CryptoKeyPair.publicKey`

    A [`CryptoKey`](#cryptokey) object representing the public key.
- name: daemon (Core functionality)
  id: ngx_core_module#daemon
  summary: Determines whether nginx should become a daemon
  belongs_to: Core functionality
  description: |-
    |          |                          |
    |----------|--------------------------|
    | Syntax:  | **`daemon`**` on | off;` |
    | Default: | `daemon on;`             |
    | Context: | `main`                   |

    Determines whether nginx should become a daemon. Mainly used during development.
- name: dav_access
  id: http/ngx_http_dav_module#dav_access
  summary: null
  belongs_to: ngx_http_dav_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`dav_access`***`users`*`:`*`permissions`*` ...;` |
    | Default: | `dav_access user:rw;`                              |
    | Context: | `http`, `server`, `location`                       |

    Sets access permissions for newly created files and directories, e.g.:

    ``` nginx
    dav_access user:rw group:rw all:r;
    ```

    If any `group` or `all` access permissions are specified then `user` permissions may be omitted:

    ``` nginx
    dav_access group:rw all:r;
    ```
- name: dav_methods
  id: http/ngx_http_dav_module#dav_methods
  summary: Allows the specified HTTP and WebDAV methods
  belongs_to: ngx_http_dav_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`dav_methods`**` off | `*`method`*` ...;` |
    | Default: | `dav_methods off;`                          |
    | Context: | `http`, `server`, `location`                |

    Allows the specified HTTP and WebDAV methods. The parameter `off` denies all methods processed by this module. The following methods are supported: `PUT`, `DELETE`, `MKCOL`, `COPY`, and `MOVE`.

    A file uploaded with the PUT method is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [client_body_temp_path](ngx_http_core_module#client_body_temp_path) directive, are put on the same file system.

    When creating a file with the PUT method, it is possible to specify the modification date by passing it in the “Date” header field.
- name: debug_connection (Core functionality)
  id: ngx_core_module#debug_connection
  summary: Enables debugging log for selected client connections
  belongs_to: Core functionality
  description: |-
    |          |                                                           |
    |----------|-----------------------------------------------------------|
    | Syntax:  | **`debug_connection`***`address`*` | `*`CIDR`*` | unix:;` |
    | Default: | —                                                         |
    | Context: | `events`                                                  |

    Enables debugging log for selected client connections. Other connections will use logging level set by the [error_log](#error_log) directive. Debugged connections are specified by IPv4 or IPv6 (1.3.0, 1.2.1) address or network. A connection may also be specified using a hostname. For connections using UNIX-domain sockets (1.3.0, 1.2.1), debugging log is enabled by the “`unix:`” parameter.

    ``` nginx
    events {
        debug_connection 127.0.0.1;
        debug_connection localhost;
        debug_connection 192.0.2.0/24;
        debug_connection ::1;
        debug_connection 2001:0db8::/32;
        debug_connection unix:;
        ...
    }
    ```

    For this directive to work, nginx needs to be built with `--with-debug`, see “[A debugging log](debugging_log)”.
- name: debug_points (Core functionality)
  id: ngx_core_module#debug_points
  summary: This directive is used for debugging
  belongs_to: Core functionality
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`debug_points`**` abort | stop;` |
    | Default: | —                                  |
    | Context: | `main`                             |

    This directive is used for debugging.

    When internal error is detected, e.g. the leak of sockets on restart of working processes, enabling `debug_points` leads to a core file creation (`abort`) or to stopping of a process (`stop`) for further analysis using a system debugger.
- name: Debugging nginx with DTrace pid provider
  id: nginx_dtrace_pid_provider
  summary: This article assumes the reader has a general knowledge of nginx internals and DTrace
  description: "# Debugging nginx with DTrace pid provider\n\nThis article assumes the reader has a general knowledge of nginx internals and [DTrace](#see_also).\n\nAlthough nginx built with the [--with-debug](debugging_log) option already provides a lot of information about request processing, it is sometimes desirable to trace particular parts of code path more thoroughly and at the same time omit the rest of debugging output. DTrace pid provider (available on Solaris, macOS) is a useful tool to explore userland program’s internals, since it doesn’t require any code changes and it can help with the task. A simple DTrace script to trace and print nginx function calls may look like this:\n\n``` nginx\n#pragma D option flowindent\n\npid$target:nginx::entry {\n}\n\npid$target:nginx::return {\n}\n```\n\nDTrace capabilities for function calls tracing provide only a limited amount of useful information, though. Real-time inspection of function arguments is typically more interesting, but also a bit more complicated. Examples below are intended to help the reader become more familiar with DTrace and the process of analyzing nginx behavior using DTrace.\n\nOne of the common scenarios for using DTrace with nginx is the following: attach to the nginx worker process to log request lines and request start times. The corresponding function to attach is `ngx_http_process_request()`, and the argument in question is a pointer to the `ngx_http_request_t` structure. DTrace script for such request logging can be as simple as:\n\n``` nginx\npid$target::*ngx_http_process_request:entry\n{\n    this->request = (ngx_http_request_t *)copyin(arg0, sizeof(ngx_http_request_t));\n    this->request_line = stringof(copyin((uintptr_t)this->request->request_line.data,\n                                         this->request->request_line.len));\n    printf(\"request line = %s\\n\", this->request_line);\n    printf(\"request start sec = %d\\n\", this->request->start_sec);\n}\n```\n\nIt should be noted that in the example above DTrace requires some knowledge about the `ngx_http_request_t` structure. Unfortunately while it is possible to use a specific `#include` directive in the DTrace script and then pass it to a C preprocessor (with the `-C` flag), that doesn’t really work. Due to a lot of cross dependencies, almost all nginx header files have to be included. In turn, based on `configure` script settings, nginx headers will include PCRE, OpenSSL and a variety of system header files. While in theory all those header files related to a specific nginx build might be included in DTrace script preprocessing and compilation, in reality DTrace script most probably will fail to compile because of unknown syntax in some header files.\n\nThe problem above can be solved by including only the relevant and necessary structure and type definitions in the DTrace script. DTrace has to know sizes of structures, types, and fields offsets. Thus dependencies can be further reduced by manually optimizing structure definitions for use with DTrace.\n\nLet’s use DTrace script example above and see what structure definitions it needs to work properly.\n\nFirst of all `objs/ngx_auto_config.h` file generated by configure should be included, because it defines a number of constants affecting various `#ifdef`’s. After that, some basic types and definitions like `ngx_str_t`, `ngx_table_elt_t`, `ngx_uint_t` etc. should be put at the beginning of the DTrace script. These definitions are compact, commonly used and unlikely to be frequently changed.\n\nThen there’s the `ngx_http_request_t` structure that contains a lot of pointers to other structures. Because these pointers are really irrelevant to this script, and because they have the same size, it is possible to just replace them with void pointers. Instead of changing definitions, it is better to add appropriate typedefs, though:\n\n``` nginx\ntypedef ngx_http_upstream_t     void;\ntypedef ngx_http_request_body_t void;\n```\n\nLast but not least it is necessary to add definitions of two member structures (`ngx_http_headers_in_t`, `ngx_http_headers_out_t`), declarations of callback functions and definitions of constants.\n\nThe final DTrace script can be downloaded from [here](http://nginx.org/download/trace_process_request.d).\n\nThe following example shows the output of running this script:\n\n``` nginx\n# dtrace -C -I ./objs -s trace_process_request.d -p 4848\ndtrace: script 'trace_process_request.d' matched 1 probe\nCPU     ID                    FUNCTION:NAME\n  1      4 .XAbmO.ngx_http_process_request:entry request line = GET / HTTP/1.1\nrequest start sec = 1349162898\n\n  0      4 .XAbmO.ngx_http_process_request:entry request line = GET /en/docs/nginx_dtrace_pid_provider.html HTTP/1.1\nrequest start sec = 1349162899\n```\n\nUsing similar techniques the reader should be able to trace other nginx function calls.\n\n#### See also\n\n- [Solaris Dynamic Tracing Guide](http://docs.oracle.com/cd/E19253-01/817-6223/index.html)\n- [Introduction article on DTrace pid provider](http://dtrace.org/blogs/brendan/2011/02/09/dtrace-pid-provider/)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/nginx_dtrace_pid_provider.html](https://nginx.org/en/docs/nginx_dtrace_pid_provider.html)"
- name: default_type
  id: http/ngx_http_core_module#default_type
  summary: Defines the default MIME type of a response
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`default_type`***`mime-type`*`;` |
    | Default: | `default_type text/plain;`         |
    | Context: | `http`, `server`, `location`       |

    Defines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the [types](#types) directive.
- name: deny
  id: http/ngx_http_access_module#deny
  summary: Denies access for the specified network or address
  belongs_to: ngx_http_access_module
  description: "|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`deny`***`address`*` | `*`CIDR`*` | unix: | all;` |\n| Default: | —                                                   |\n| Context: | `http`, `server`, `location`, `limit_except`        |\n\nDenies access for the specified network or address. If the special value `unix:` is specified (1.5.1), denies access for all UNIX-domain sockets.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_access_module.html](https://nginx.org/en/docs/http/ngx_http_access_module.html)"
- name: deny (ngx_stream_access_module)
  id: stream/ngx_stream_access_module#deny
  summary: Denies access for the specified network or address
  belongs_to: ngx_stream_access_module
  description: "|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`deny`***`address`*` | `*`CIDR`*` | unix: | all;` |\n| Default: | —                                                   |\n| Context: | `stream`, `server`                                  |\n\nDenies access for the specified network or address. If the special value `unix:` is specified, denies access for all UNIX-domain sockets.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_access_module.html](https://nginx.org/en/docs/stream/ngx_stream_access_module.html)"
- name: Development guide
  id: dev/development_guide
  summary: For general purposes, nginx code uses two integer types, ngx_int_t and ngx_uint_t, which are typedefs for intptr_t and uintptr_t respectively
  description: "# Development guide\n\n- [Introduction](#introduction)\n- [Code layout](#code_layout)\n- [Include files](#include_files)\n- [Integers](#integers)\n- [Common return codes](#common_return_codes)\n- [Error handling](#error_handling)\n- [Strings](#strings)\n- [Overview](#string_overview)\n- [Formatting](#formatting)\n- [Numeric conversion](#numeric_conversion)\n- [Regular expressions](#regex)\n- [Time](#time)\n- [Containers](#containers)\n- [Array](#array)\n- [List](#list)\n- [Queue](#queue)\n- [Red-Black tree](#red_black_tree)\n- [Hash](#hash)\n- [Memory management](#memory_management)\n- [Heap](#heap)\n- [Pool](#pool)\n- [Shared memory](#shared_memory)\n- [Logging](#logging)\n- [Cycle](#cycle)\n- [Buffer](#buffer)\n- [Networking](#networking)\n- [Connection](#connection)\n- [Events](#events)\n- [Event](#event)\n- [I/O events](#i_o_events)\n- [Timer events](#timer_events)\n- [Posted events](#posted_events)\n- [Event loop](#event_loop)\n- [Processes](#processes)\n- [Threads](#threads)\n- [Modules](#Modules)\n- [Adding new modules](#adding_new_modules)\n- [Core Modules](#core_modules)\n- [Configuration Directives](#config_directives)\n- [HTTP](#http)\n- [Connection](#http_connection)\n- [Request](#http_request)\n- [Configuration](#http_conf)\n- [Phases](#http_phases)\n- [Variables](#http_variables)\n- [Complex values](#http_complex_values)\n- [Request redirection](#http_request_redirection)\n- [Subrequests](#http_subrequests)\n- [Request finalization](#http_request_finalization)\n- [Request body](#http_request_body)\n- [Request body filters](#http_request_body_filters)\n- [Response](#http_response)\n- [Response body](#http_response_body)\n- [Response body filters](#http_response_body_filters)\n- [Building filter modules](#http_building_filter_modules)\n- [Buffer reuse](#http_body_buffers_reuse)\n- [Load balancing](#http_load_balancing)\n- [Examples](#examples)\n- [Code style](#code_style)\n- [General rules](#code_style_general_rules)\n- [Files](#code_style_files)\n- [Comments](#code_style_comments)\n- [Preprocessor](#code_style_preprocessor)\n- [Types](#code_style_types)\n- [Variables](#code_style_variables)\n- [Functions](#code_style_functions)\n- [Expressions](#code_style_expressions)\n- [Conditionals and Loops](#code_style_conditionals_and_loops)\n- [Labels](#code_style_labels)\n- [Debugging memory issues](#debug_memory)\n- [Common Pitfalls](#common_pitfals)\n- [Writing a C module](#module_pitfall)\n- [C Strings](#c_strings)\n- [Global Variables](#global_variables)\n- [Manual Memory Management](#manual_memory_management)\n- [Threads](#threads_pitfalls)\n- [Blocking Libraries](#libraries)\n- [HTTP Requests to External Services](#http_requests_to_ext)\n\n#### Introduction\n\n#### Code layout\n\n- `auto` — Build scripts\n- `src`\n  - `core` — Basic types and functions — string, array, log, pool, etc.\n  - `event` — Event core\n    - `modules` — Event notification modules: `epoll`, `kqueue`, `select` etc.\n  - `http` — Core HTTP module and common code\n    - `modules` — Other HTTP modules\n    - `v2` — HTTP/2\n  - `mail` — Mail modules\n  - `os` — Platform-specific code\n    - `unix`\n    - `win32`\n  - `stream` — Stream modules\n\n#### Include files\n\nThe following two `#include` statements must appear at the beginning of every nginx file:\n\n``` nginx\n#include <ngx_config.h>\n#include <ngx_core.h>\n```\n\nIn addition to that, HTTP code should include\n\n``` nginx\n#include <ngx_http.h>\n```\n\nMail code should include\n\n``` nginx\n#include <ngx_mail.h>\n```\n\nStream code should include\n\n``` nginx\n#include <ngx_stream.h>\n```\n\n#### Integers\n\nFor general purposes, nginx code uses two integer types, `ngx_int_t` and `ngx_uint_t`, which are typedefs for `intptr_t` and `uintptr_t` respectively.\n\n#### Common return codes\n\nMost functions in nginx return the following codes:\n\n- `NGX_OK` — Operation succeeded.\n- `NGX_ERROR` — Operation failed.\n- `NGX_AGAIN` — Operation incomplete; call the function again.\n- `NGX_DECLINED` — Operation rejected, for example, because it is disabled in the configuration. This is never an error.\n- `NGX_BUSY` — Resource is not available.\n- `NGX_DONE` — Operation complete or continued elsewhere. Also used as an alternative success code.\n- `NGX_ABORT` — Function was aborted. Also used as an alternative error code.\n\n#### Error handling\n\nThe `ngx_errno` macro returns the last system error code. It's mapped to `errno` on POSIX platforms and to `GetLastError()` call in Windows. The `ngx_socket_errno` macro returns the last socket error number. Like the `ngx_errno` macro, it's mapped to `errno` on POSIX platforms. It's mapped to the `WSAGetLastError()` call on Windows. Accessing the values of `ngx_errno` or `ngx_socket_errno` more than once in a row can cause performance issues. If the error value might be used multiple times, store it in a local variable of type `ngx_err_t`. To set errors, use the `ngx_set_errno(errno)` and `ngx_set_socket_errno(errno)` macros.\n\nThe values of `ngx_errno` and `ngx_socket_errno` can be passed to the logging functions `ngx_log_error()` and `ngx_log_debugX()`, in which case system error text is added to the log message.\n\nExample using `ngx_errno`:\n\n``` nginx\nngx_int_t\nngx_my_kill(ngx_pid_t pid, ngx_log_t *log, int signo)\n{\n    ngx_err_t  err;\n\n    if (kill(pid, signo) == -1) {\n        err = ngx_errno;\n\n        ngx_log_error(NGX_LOG_ALERT, log, err, \"kill(%P, %d) failed\", pid, signo);\n\n        if (err == NGX_ESRCH) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    return 0;\n}\n```\n\n#### Strings\n\n#### Overview\n\nFor C strings, nginx uses the unsigned character type pointer `u_char *`.\n\nThe nginx string type `ngx_str_t` is defined as follows:\n\n``` nginx\ntypedef struct {\n    size_t      len;\n    u_char     *data;\n} ngx_str_t;\n```\n\nThe `len` field holds the string length and `data` holds the string data. The string, held in `ngx_str_t`, may or may not be null-terminated after the `len` bytes. In most cases it’s not. However, in certain parts of the code (for example, when parsing configuration), `ngx_str_t` objects are known to be null-terminated, which simplifies string comparison and makes it easier to pass the strings to syscalls.\n\nThe string operations in nginx are declared in `src/core/ngx_string.h` Some of them are wrappers around standard C functions:\n\n- `ngx_strcmp()`\n- `ngx_strncmp()`\n- `ngx_strstr()`\n- `ngx_strlen()`\n- `ngx_strchr()`\n- `ngx_memcmp()`\n- `ngx_memset()`\n- `ngx_memcpy()`\n- `ngx_memmove()`\n\nOther string functions are nginx-specific\n\n- `ngx_memzero()` — Fills memory with zeroes.\n- `ngx_explicit_memzero()` — Does the same as `ngx_memzero()`, but this call is never removed by the compiler's dead store elimination optimization. This function can be used to clear sensitive data such as passwords and keys.\n- `ngx_cpymem()` — Does the same as `ngx_memcpy()`, but returns the final destination address This one is handy for appending multiple strings in a row.\n- `ngx_movemem()` — Does the same as `ngx_memmove()`, but returns the final destination address.\n- `ngx_strlchr()` — Searches for a character in a string, delimited by two pointers.\n\nThe following functions perform case conversion and comparison:\n\n- `ngx_tolower()`\n- `ngx_toupper()`\n- `ngx_strlow()`\n- `ngx_strcasecmp()`\n- `ngx_strncasecmp()`\n\nThe following macros simplify string initialization:\n\n- `ngx_string(text)` — static initializer for the `ngx_str_t` type from the C string literal `text`\n- `ngx_null_string` — static empty string initializer for the `ngx_str_t` type\n- `ngx_str_set(str, text)` — initializes string `str` of `ngx_str_t *` type with the C string literal `text`\n- `ngx_str_null(str)` — initializes string `str` of `ngx_str_t *` type with the empty string\n\n#### Formatting\n\nThe following formatting functions support nginx-specific types:\n\n- `ngx_sprintf(buf, fmt, ...)`\n- `ngx_snprintf(buf, max, fmt, ...)`\n- `ngx_slprintf(buf, last, fmt, ...)`\n- `ngx_vslprintf(buf, last, fmt, args)`\n- `ngx_vsnprintf(buf, max, fmt, args)`\n\nThe full list of formatting options, supported by these functions is in `src/core/ngx_string.c`. Some of them are:\n\n- `%O` — `off_t`\n- `%T` — `time_t`\n- `%z` — `ssize_t`\n- `%i` — `ngx_int_t`\n- `%p` — `void *`\n- `%V` — `ngx_str_t *`\n- `%s` — `u_char *` (null-terminated)\n- `%*s` — `size_t + u_char *`\n\nYou can prepend `u` on most types to make them unsigned. To convert output to hex, use `X` or `x`.\n\nFor example:\n\n``` nginx\nu_char      buf[NGX_INT_T_LEN];\nsize_t      len;\nngx_uint_t  n;\n\n/* set n here */\n\nlen = ngx_sprintf(buf, \"%ui\", n) — buf;\n```\n\n#### Numeric conversion\n\nSeveral functions for numeric conversion are implemented in nginx. The first four each convert a string of given length to a positive integer of the indicated type. They return `NGX_ERROR` on error.\n\n- `ngx_atoi(line, n)` — `ngx_int_t`\n- `ngx_atosz(line, n)` — `ssize_t`\n- `ngx_atoof(line, n)` — `off_t`\n- `ngx_atotm(line, n)` — `time_t`\n\nThere are two additional numeric conversion functions. Like the first four, they return `NGX_ERROR` on error.\n\n- `ngx_atofp(line, n, point)` — Converts a fixed point floating number of given length to a positive integer of type `ngx_int_t`. The result is shifted left by `point` decimal positions. The string representation of the number is expected to have no more than `points` fractional digits. For example, `ngx_atofp(\"10.5\", 4, 2)` returns `1050`.\n- `ngx_hextoi(line, n)` — Converts a hexadecimal representation of a positive integer to `ngx_int_t`.\n\n#### Regular expressions\n\nThe regular expressions interface in nginx is a wrapper around the [PCRE](http://www.pcre.org) library. The corresponding header file is `src/core/ngx_regex.h`.\n\nTo use a regular expression for string matching, it first needs to be compiled, which is usually done at the configuration phase. Note that since PCRE support is optional, all code using the interface must be protected by the surrounding `NGX_PCRE` macro:\n\n``` nginx\n#if (NGX_PCRE)\nngx_regex_t          *re;\nngx_regex_compile_t   rc;\n\nu_char                errstr[NGX_MAX_CONF_ERRSTR];\n\nngx_str_t  value = ngx_string(\"message (\\\\d\\\\d\\\\d).*Codeword is '(?<cw>\\\\w+)'\");\n\nngx_memzero(&rc, sizeof(ngx_regex_compile_t));\n\nrc.pattern = value;\nrc.pool = cf->pool;\nrc.err.len = NGX_MAX_CONF_ERRSTR;\nrc.err.data = errstr;\n/* rc.options can be set to NGX_REGEX_CASELESS */\n\nif (ngx_regex_compile(&rc) != NGX_OK) {\n    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, \"%V\", &rc.err);\n    return NGX_CONF_ERROR;\n}\n\nre = rc.regex;\n#endif\n```\n\nAfter successful compilation, the `captures` and `named_captures` fields in the `ngx_regex_compile_t` structure contain the count of all captures and named captures, respectively, found in the regular expression.\n\nThe compiled regular expression can then be used for matching against strings:\n\n``` nginx\nngx_int_t  n;\nint        captures[(1 + rc.captures) * 3];\n\nngx_str_t input = ngx_string(\"This is message 123. Codeword is 'foobar'.\");\n\nn = ngx_regex_exec(re, &input, captures, (1 + rc.captures) * 3);\nif (n >= 0) {\n    /* string matches expression */\n\n} else if (n == NGX_REGEX_NO_MATCHED) {\n    /* no match was found */\n\n} else {\n    /* some error */\n    ngx_log_error(NGX_LOG_ALERT, log, 0, ngx_regex_exec_n \" failed: %i\", n);\n}\n```\n\nThe arguments to `ngx_regex_exec()` are the compiled regular expression `re`, the string to match `input`, an optional array of integers to hold any `captures` that are found, and the array's `size`. The size of the `captures` array must be a multiple of three, as required by the [PCRE API](http://www.pcre.org/original/doc/html/pcreapi.html). In the example, the size is calculated from the total number of captures plus one for the matched string itself.\n\nIf there are matches, captures can be accessed as follows:\n\n``` nginx\nu_char     *p;\nsize_t      size;\nngx_str_t   name, value;\n\n/* all captures */\nfor (i = 0; i < n * 2; i += 2) {\n    value.data = input.data + captures[i];\n    value.len = captures[i + 1] — captures[i];\n}\n\n/* accessing named captures */\n\nsize = rc.name_size;\np = rc.names;\n\nfor (i = 0; i < rc.named_captures; i++, p += size) {\n\n    /* capture name */\n    name.data = &p[2];\n    name.len = ngx_strlen(name.data);\n\n    n = 2 * ((p[0] << 8) + p[1]);\n\n    /* captured value */\n    value.data = &input.data[captures[n]];\n    value.len = captures[n + 1] — captures[n];\n}\n```\n\nThe `ngx_regex_exec_array()` function accepts the array of `ngx_regex_elt_t` elements (which are just compiled regular expressions with associated names), a string to match, and a log. The function applies expressions from the array to the string until either a match is found or no more expressions are left. The return value is `NGX_OK` when there is a match and `NGX_DECLINED` otherwise, or `NGX_ERROR` in case of error.\n\n#### Time\n\nThe `ngx_time_t` structure represents time with three separate types for seconds, milliseconds, and the GMT offset:\n\n``` nginx\ntypedef struct {\n    time_t      sec;\n    ngx_uint_t  msec;\n    ngx_int_t   gmtoff;\n} ngx_time_t;\n```\n\nThe `ngx_tm_t` structure is an alias for `struct tm` on UNIX platforms and `SYSTEMTIME` on Windows.\n\nTo obtain the current time, it is usually sufficient to access one of the available global variables, representing the cached time value in the desired format.\n\nThe available string representations are:\n\n- `ngx_cached_err_log_time` — Used in error log entries: `\"1970/09/28 12:00:00\"`\n- `ngx_cached_http_log_time` — Used in HTTP access log entries: `\"28/Sep/1970:12:00:00 +0600\"`\n- `ngx_cached_syslog_time` — Used in syslog entries: `\"Sep 28 12:00:00\"`\n- `ngx_cached_http_time` — Used in HTTP headers: `\"Mon, 28 Sep 1970 06:00:00 GMT\"`\n- `ngx_cached_http_log_iso8601` — The ISO 8601 standard format: `\"1970-09-28T12:00:00+06:00\"`\n\nThe `ngx_time()` and `ngx_timeofday()` macros return the current time value in seconds and are the preferred way to access the cached time value.\n\nTo obtain the time explicitly, use `ngx_gettimeofday()`, which updates its argument (pointer to `struct timeval`). The time is always updated when nginx returns to the event loop from system calls. To update the time immediately, call `ngx_time_update()`, or `ngx_time_sigsafe_update()` if updating the time in the signal handler context.\n\nThe following functions convert `time_t` into the indicated broken-down time representation. The first function in each pair converts `time_t` to `ngx_tm_t` and the second (with the `_libc_` infix) to `struct tm`:\n\n- `ngx_gmtime(), ngx_libc_gmtime()` — Time expressed as UTC\n- `ngx_localtime(), ngx_libc_localtime()` — Time expressed relative to the local time zone\n\nThe `ngx_http_time(buf, time)` function returns a string representation suitable for use in HTTP headers (for example, `\"Mon, 28 Sep 1970 06:00:00 GMT\"`). The `ngx_http_cookie_time(buf, time)` returns a string representation function returns a string representation suitable for HTTP cookies (`\"Thu, 31-Dec-37 23:55:55 GMT\"`).\n\n#### Containers\n\n#### Array\n\nThe nginx array type `ngx_array_t` is defined as follows\n\n``` nginx\ntypedef struct {\n    void        *elts;\n    ngx_uint_t   nelts;\n    size_t       size;\n    ngx_uint_t   nalloc;\n    ngx_pool_t  *pool;\n} ngx_array_t;\n```\n\nThe elements of the array are available in the `elts` field. The `nelts` field holds the number of elements. The `size` field holds the size of a single element and is set when the array is initialized.\n\nUse the `ngx_array_create(pool, n, size)` call to create an array in a pool, and the `ngx_array_init(array, pool, n, size)` call to initialize an array object that has already been allocated.\n\n``` nginx\nngx_array_t  *a, b;\n\n/* create an array of strings with preallocated memory for 10 elements */\na = ngx_array_create(pool, 10, sizeof(ngx_str_t));\n\n/* initialize string array for 10 elements */\nngx_array_init(&b, pool, 10, sizeof(ngx_str_t));\n```\n\nUse the following functions to add elements to an array:\n\n- `ngx_array_push(a)` adds one tail element and returns pointer to it\n- `ngx_array_push_n(a, n)` adds `n` tail elements and returns pointer to the first one\n\nIf the currently allocated amount of memory is not large enough to accommodate the new elements, a new block of memory is allocated and the existing elements are copied to it. The new memory block is normally twice as large as the existing one.\n\n``` nginx\ns = ngx_array_push(a);\nss = ngx_array_push_n(&b, 3);\n```\n\n#### List\n\nIn nginx a list is a sequence of arrays, optimized for inserting a potentially large number of items. The `ngx_list_t` list type is defined as follows:\n\n``` nginx\ntypedef struct {\n    ngx_list_part_t  *last;\n    ngx_list_part_t   part;\n    size_t            size;\n    ngx_uint_t        nalloc;\n    ngx_pool_t       *pool;\n} ngx_list_t;\n```\n\nThe actual items are stored in list parts, which are defined as follows:\n\n``` nginx\ntypedef struct ngx_list_part_s  ngx_list_part_t;\n\nstruct ngx_list_part_s {\n    void             *elts;\n    ngx_uint_t        nelts;\n    ngx_list_part_t  *next;\n};\n```\n\nBefore use, a list must be initialized by calling `ngx_list_init(list, pool, n, size)` or created by calling `ngx_list_create(pool, n, size)`. Both functions take as arguments the size of a single item and a number of items per list part. To add an item to a list, use the `ngx_list_push(list)` function. To iterate over the items, directly access the list fields as shown in the example:\n\n``` nginx\nngx_str_t        *v;\nngx_uint_t        i;\nngx_list_t       *list;\nngx_list_part_t  *part;\n\nlist = ngx_list_create(pool, 100, sizeof(ngx_str_t));\nif (list == NULL) { /* error */ }\n\n/* add items to the list */\n\nv = ngx_list_push(list);\nif (v == NULL) { /* error */ }\nngx_str_set(v, \"foo\");\n\nv = ngx_list_push(list);\nif (v == NULL) { /* error */ }\nngx_str_set(v, \"bar\");\n\n/* iterate over the list */\n\npart = &list->part;\nv = part->elts;\n\nfor (i = 0; /* void */; i++) {\n\n    if (i >= part->nelts) {\n        if (part->next == NULL) {\n            break;\n        }\n\n        part = part->next;\n        v = part->elts;\n        i = 0;\n    }\n\n    ngx_do_smth(&v[i]);\n}\n```\n\nLists are primarily used for HTTP input and output headers.\n\nLists do not support item removal. However, when needed, items can internally be marked as missing without actually being removed from the list. For example, to mark HTTP output headers (which are stored as `ngx_table_elt_t` objects) as missing, set the `hash` field in `ngx_table_elt_t` to zero. Items marked in this way are explicitly skipped when the headers are iterated over.\n\n#### Queue\n\nIn nginx a queue is an intrusive doubly linked list, with each node defined as follows:\n\n``` nginx\ntypedef struct ngx_queue_s  ngx_queue_t;\n\nstruct ngx_queue_s {\n    ngx_queue_t  *prev;\n    ngx_queue_t  *next;\n};\n```\n\nThe head queue node is not linked with any data. Use the `ngx_queue_init(q)` call to initialize the list head before use. Queues support the following operations:\n\n- `ngx_queue_insert_head(h, x)`, `ngx_queue_insert_tail(h, x)` — Insert a new node\n- `ngx_queue_remove(x)` — Remove a queue node\n- `ngx_queue_split(h, q, n)` — Split a queue at a node, returning the queue tail in a separate queue\n- `ngx_queue_add(h, n)` — Add a second queue to the first queue\n- `ngx_queue_head(h)`, `ngx_queue_last(h)` — Get first or last queue node\n- `ngx_queue_sentinel(h)` - Get a queue sentinel object to end iteration at\n- `ngx_queue_data(q, type, link)` — Get a reference to the beginning of a queue node data structure, considering the queue field offset in it\n\nAn example:\n\n``` nginx\ntypedef struct {\n    ngx_str_t    value;\n    ngx_queue_t  queue;\n} ngx_foo_t;\n\nngx_foo_t    *f;\nngx_queue_t   values, *q;\n\nngx_queue_init(&values);\n\nf = ngx_palloc(pool, sizeof(ngx_foo_t));\nif (f == NULL) { /* error */ }\nngx_str_set(&f->value, \"foo\");\n\nngx_queue_insert_tail(&values, &f->queue);\n\n/* insert more nodes here */\n\nfor (q = ngx_queue_head(&values);\n     q != ngx_queue_sentinel(&values);\n     q = ngx_queue_next(q))\n{\n    f = ngx_queue_data(q, ngx_foo_t, queue);\n\n    ngx_do_smth(&f->value);\n}\n```\n\n#### Red-Black tree\n\nThe `src/core/ngx_rbtree.h` header file provides access to the effective implementation of red-black trees.\n\n``` nginx\ntypedef struct {\n    ngx_rbtree_t       rbtree;\n    ngx_rbtree_node_t  sentinel;\n\n    /* custom per-tree data here */\n} my_tree_t;\n\ntypedef struct {\n    ngx_rbtree_node_t  rbnode;\n\n    /* custom per-node data */\n    foo_t              val;\n} my_node_t;\n```\n\nTo deal with a tree as a whole, you need two nodes: root and sentinel. Typically, they are added to a custom structure, allowing you to organize your data into a tree in which the leaves contain a link to or embed your data.\n\nTo initialize a tree:\n\n``` nginx\nmy_tree_t  root;\n\nngx_rbtree_init(&root.rbtree, &root.sentinel, insert_value_function);\n```\n\nTo traverse a tree and insert new values, use the \"`insert_value`\" functions. For example, the `ngx_str_rbtree_insert_value` function deals with the `ngx_str_t` type. Its arguments are pointers to a root node of an insertion, the newly created node to be added, and a tree sentinel.\n\n``` nginx\nvoid ngx_str_rbtree_insert_value(ngx_rbtree_node_t *temp,\n                                 ngx_rbtree_node_t *node,\n                                 ngx_rbtree_node_t *sentinel)\n```\n\nThe traversal is pretty straightforward and can be demonstrated with the following lookup function pattern:\n\n``` nginx\nmy_node_t *\nmy_rbtree_lookup(ngx_rbtree_t *rbtree, foo_t *val, uint32_t hash)\n{\n    ngx_int_t           rc;\n    my_node_t          *n;\n    ngx_rbtree_node_t  *node, *sentinel;\n\n    node = rbtree->root;\n    sentinel = rbtree->sentinel;\n\n    while (node != sentinel) {\n\n        n = (my_node_t *) node;\n\n        if (hash != node->key) {\n            node = (hash < node->key) ? node->left : node->right;\n            continue;\n        }\n\n        rc = compare(val, node->val);\n\n        if (rc < 0) {\n            node = node->left;\n            continue;\n        }\n\n        if (rc > 0) {\n            node = node->right;\n            continue;\n        }\n\n        return n;\n    }\n\n    return NULL;\n}\n```\n\nThe `compare()` function is a classic comparator function that returns a value less than, equal to, or greater than zero. To speed up lookups and avoid comparing user objects that can be big, an integer hash field is used.\n\nTo add a node to a tree, allocate a new node, initialize it and call `ngx_rbtree_insert()`:\n\n``` nginx\n    my_node_t          *my_node;\n    ngx_rbtree_node_t  *node;\n\n    my_node = ngx_palloc(...);\n    init_custom_data(&my_node->val);\n\n    node = &my_node->rbnode;\n    node->key = create_key(my_node->val);\n\n    ngx_rbtree_insert(&root->rbtree, node);\n```\n\nTo remove a node, call the `ngx_rbtree_delete()` function:\n\n``` nginx\nngx_rbtree_delete(&root->rbtree, node);\n```\n\n#### Hash\n\nHash table functions are declared in `src/core/ngx_hash.h`. Both exact and wildcard matching are supported. The latter requires extra setup and is described in a separate section below.\n\nBefore initializing a hash, you need to know the number of elements it will hold so that nginx can build it optimally. Two parameters that need to be configured are `max_size` and `bucket_size`, as detailed in a separate [document](../hash). They are usually configurable by the user. Hash initialization settings are stored with the `ngx_hash_init_t` type, and the hash itself is `ngx_hash_t`:\n\n``` nginx\nngx_hash_t       foo_hash;\nngx_hash_init_t  hash;\n\nhash.hash = &foo_hash;\nhash.key = ngx_hash_key;\nhash.max_size = 512;\nhash.bucket_size = ngx_align(64, ngx_cacheline_size);\nhash.name = \"foo_hash\";\nhash.pool = cf->pool;\nhash.temp_pool = cf->temp_pool;\n```\n\nThe `key` is a pointer to a function that creates the hash integer key from a string. There are two generic key-creation functions: `ngx_hash_key(data, len)` and `ngx_hash_key_lc(data, len)`. The latter converts a string to all lowercase characters, so the passed string must be writable. If that is not true, pass the `NGX_HASH_READONLY_KEY` flag to the function, initializing the key array (see below).\n\nThe hash keys are stored in `ngx_hash_keys_arrays_t` and are initialized with `ngx_hash_keys_array_init(arr, type)`: The second parameter (`type`) controls the amount of resources preallocated for the hash and can be either `NGX_HASH_SMALL` or `NGX_HASH_LARGE`. The latter is appropriate if you expect the hash to contain thousands of elements.\n\n``` nginx\nngx_hash_keys_arrays_t  foo_keys;\n\nfoo_keys.pool = cf->pool;\nfoo_keys.temp_pool = cf->temp_pool;\n\nngx_hash_keys_array_init(&foo_keys, NGX_HASH_SMALL);\n```\n\nTo insert keys into a hash keys array, use the `ngx_hash_add_key(keys_array, key, value, flags)` function:\n\n``` nginx\nngx_str_t k1 = ngx_string(\"key1\");\nngx_str_t k2 = ngx_string(\"key2\");\n\nngx_hash_add_key(&foo_keys, &k1, &my_data_ptr_1, NGX_HASH_READONLY_KEY);\nngx_hash_add_key(&foo_keys, &k2, &my_data_ptr_2, NGX_HASH_READONLY_KEY);\n```\n\nTo build the hash table, call the `ngx_hash_init(hinit, key_names, nelts)` function:\n\n``` nginx\nngx_hash_init(&hash, foo_keys.keys.elts, foo_keys.keys.nelts);\n```\n\nThe function fails if `max_size` or `bucket_size` parameters are not big enough.\n\nWhen the hash is built, use the `ngx_hash_find(hash, key, name, len)` function to look up elements:\n\n``` nginx\nmy_data_t   *data;\nngx_uint_t   key;\n\nkey = ngx_hash_key(k1.data, k1.len);\n\ndata = ngx_hash_find(&foo_hash, key, k1.data, k1.len);\nif (data == NULL) {\n    /* key not found */\n}\n```\n\n#### Wildcard matching\n\nTo create a hash that works with wildcards, use the `ngx_hash_combined_t` type. It includes the hash type described above and has two additional keys arrays: `dns_wc_head` and `dns_wc_tail`. The initialization of basic properties is similar to a regular hash:\n\n``` nginx\nngx_hash_init_t      hash\nngx_hash_combined_t  foo_hash;\n\nhash.hash = &foo_hash.hash;\nhash.key = ...;\n```\n\nIt is possible to add wildcard keys using the `NGX_HASH_WILDCARD_KEY` flag:\n\n``` nginx\n/* k1 = \".example.org\"; */\n/* k2 = \"foo.*\";        */\nngx_hash_add_key(&foo_keys, &k1, &data1, NGX_HASH_WILDCARD_KEY);\nngx_hash_add_key(&foo_keys, &k2, &data2, NGX_HASH_WILDCARD_KEY);\n```\n\nThe function recognizes wildcards and adds keys into the corresponding arrays. Please refer to the [map](../http/ngx_http_map_module#map) module documentation for the description of the wildcard syntax and the matching algorithm.\n\nDepending on the contents of added keys, you may need to initialize up to three key arrays: one for exact matching (described above), and two more to enable matching starting from the head or tail of a string:\n\n``` nginx\nif (foo_keys.dns_wc_head.nelts) {\n\n    ngx_qsort(foo_keys.dns_wc_head.elts,\n              (size_t) foo_keys.dns_wc_head.nelts,\n              sizeof(ngx_hash_key_t),\n              cmp_dns_wildcards);\n\n    hash.hash = NULL;\n    hash.temp_pool = pool;\n\n    if (ngx_hash_wildcard_init(&hash, foo_keys.dns_wc_head.elts,\n                               foo_keys.dns_wc_head.nelts)\n        != NGX_OK)\n    {\n        return NGX_ERROR;\n    }\n\n    foo_hash.wc_head = (ngx_hash_wildcard_t *) hash.hash;\n}\n```\n\nThe keys array needs to be sorted, and initialization results must be added to the combined hash. The initialization of `dns_wc_tail` array is done similarly.\n\nThe lookup in a combined hash is handled by the `ngx_hash_find_combined(chash, key, name, len)`:\n\n``` nginx\n/* key = \"bar.example.org\"; — will match \".example.org\" */\n/* key = \"foo.example.com\"; — will match \"foo.*\"        */\n\nhkey = ngx_hash_key(key.data, key.len);\nres = ngx_hash_find_combined(&foo_hash, hkey, key.data, key.len);\n```\n\n#### Memory management\n\n#### Heap\n\nTo allocate memory from system heap, use the following functions:\n\n- `ngx_alloc(size, log)` — Allocate memory from system heap. This is a wrapper around `malloc()` with logging support. Allocation error and debugging information is logged to `log`.\n- `ngx_calloc(size, log)` — Allocate memory from system heap like `ngx_alloc()`, but fill memory with zeros after allocation.\n- `ngx_memalign(alignment, size, log)` — Allocate aligned memory from system heap. This is a wrapper around `posix_memalign()` on those platforms that provide that function. Otherwise implementation falls back to `ngx_alloc()` which provides maximum alignment.\n- `ngx_free(p)` — Free allocated memory. This is a wrapper around `free()`\n\n#### Pool\n\nMost nginx allocations are done in pools. Memory allocated in an nginx pool is freed automatically when the pool is destroyed. This provides good allocation performance and makes memory control easy.\n\nA pool internally allocates objects in continuous blocks of memory. Once a block is full, a new one is allocated and added to the pool memory block list. When the requested allocation is too large to fit into a block, the request is forwarded to the system allocator and the returned pointer is stored in the pool for further deallocation.\n\nThe type for nginx pools is `ngx_pool_t`. The following operations are supported:\n\n- `ngx_create_pool(size, log)` — Create a pool with specified block size. The pool object returned is allocated in the pool as well. The `size` should be at least `NGX_MIN_POOL_SIZE` and a multiple of `NGX_POOL_ALIGNMENT`.\n- `ngx_destroy_pool(pool)` — Free all pool memory, including the pool object itself.\n- `ngx_palloc(pool, size)` — Allocate aligned memory from the specified pool.\n- `ngx_pcalloc(pool, size)` — Allocate aligned memory from the specified pool and fill it with zeroes.\n- `ngx_pnalloc(pool, size)` — Allocate unaligned memory from the specified pool. Mostly used for allocating strings.\n- `ngx_pfree(pool, p)` — Free memory that was previously allocated in the specified pool. Only allocations that result from requests forwarded to the system allocator can be freed.\n\n``` nginx\nu_char      *p;\nngx_str_t   *s;\nngx_pool_t  *pool;\n\npool = ngx_create_pool(1024, log);\nif (pool == NULL) { /* error */ }\n\ns = ngx_palloc(pool, sizeof(ngx_str_t));\nif (s == NULL) { /* error */ }\nngx_str_set(s, \"foo\");\n\np = ngx_pnalloc(pool, 3);\nif (p == NULL) { /* error */ }\nngx_memcpy(p, \"foo\", 3);\n```\n\nChain links (`ngx_chain_t`) are actively used in nginx, so the nginx pool implementation provides a way to reuse them. The `chain` field of `ngx_pool_t` keeps a list of previously allocated links ready for reuse. For efficient allocation of a chain link in a pool, use the `ngx_alloc_chain_link(pool)` function. This function looks up a free chain link in the pool list and allocates a new chain link if the pool list is empty. To free a link, call the `ngx_free_chain(pool, cl)` function.\n\nCleanup handlers can be registered in a pool. A cleanup handler is a callback with an argument which is called when pool is destroyed. A pool is usually tied to a specific nginx object (like an HTTP request) and is destroyed when the object reaches the end of its lifetime. Registering a pool cleanup is a convenient way to release resources, close file descriptors or make final adjustments to the shared data associated with the main object.\n\nTo register a pool cleanup, call `ngx_pool_cleanup_add(pool, size)`, which returns a `ngx_pool_cleanup_t` pointer to be filled in by the caller. Use the `size` argument to allocate context for the cleanup handler.\n\n``` nginx\nngx_pool_cleanup_t  *cln;\n\ncln = ngx_pool_cleanup_add(pool, 0);\nif (cln == NULL) { /* error */ }\n\ncln->handler = ngx_my_cleanup;\ncln->data = \"foo\";\n\n...\n\nstatic void\nngx_my_cleanup(void *data)\n{\n    u_char  *msg = data;\n\n    ngx_do_smth(msg);\n}\n```\n\n#### Shared memory\n\nShared memory is used by nginx to share common data between processes. The `ngx_shared_memory_add(cf, name, size, tag)` function adds a new shared memory entry `ngx_shm_zone_t` to a cycle. The function receives the `name` and `size` of the zone. Each shared zone must have a unique name. If a shared zone entry with the provided `name` and `tag` already exists, the existing zone entry is reused. The function fails with an error if an existing entry with the same name has a different tag. Usually, the address of the module structure is passed as `tag`, making it possible to reuse shared zones by name within one nginx module.\n\nThe shared memory entry structure `ngx_shm_zone_t` has the following fields:\n\n- `init` — Initialization callback, called after the shared zone is mapped to actual memory\n- `data` — Data context, used to pass arbitrary data to the `init` callback\n- `noreuse` — Flag that disables reuse of a shared zone from the old cycle\n- `tag` — Shared zone tag\n- `shm` — Platform-specific object of type `ngx_shm_t`, having at least the following fields:\n  - `addr` — Mapped shared memory address, initially NULL\n  - `size` — Shared memory size\n  - `name` — Shared memory name\n  - `log` — Shared memory log\n  - `exists` — Flag that indicates shared memory was inherited from the master process (Windows-specific)\n\nShared zone entries are mapped to actual memory in `ngx_init_cycle()` after the configuration is parsed. On POSIX systems, the `mmap()` syscall is used to create the shared anonymous mapping. On Windows, the `CreateFileMapping()`/ `MapViewOfFileEx()` pair is used.\n\nFor allocating in shared memory, nginx provides the slab pool `ngx_slab_pool_t` type. A slab pool for allocating memory is automatically created in each nginx shared zone. The pool is located in the beginning of the shared zone and can be accessed by the expression `(ngx_slab_pool_t *) shm_zone->shm.addr`. To allocate memory in a shared zone, call either `ngx_slab_alloc(pool, size)` or `ngx_slab_calloc(pool, size)`. To free memory, call `ngx_slab_free(pool, p)`.\n\nSlab pool divides all shared zone into pages. Each page is used for allocating objects of the same size. The specified size must be a power of 2, and greater than the minimum size of 8 bytes. Nonconforming values are rounded up. A bitmask for each page tracks which blocks are in use and which are free for allocation. For sizes greater than a half page (which is usually 2048 bytes), allocation is done an entire page at a time\n\nTo protect data in shared memory from concurrent access, use the mutex available in the `mutex` field of `ngx_slab_pool_t`. A mutex is most commonly used by the slab pool while allocating and freeing memory, but it can be used to protect any other user data structures allocated in the shared zone. To lock or unlock a mutex, call `ngx_shmtx_lock(&shpool->mutex)` or `ngx_shmtx_unlock(&shpool->mutex)` respectively.\n\n``` nginx\nngx_str_t        name;\nngx_foo_ctx_t   *ctx;\nngx_shm_zone_t  *shm_zone;\n\nngx_str_set(&name, \"foo\");\n\n/* allocate shared zone context */\nctx = ngx_pcalloc(cf->pool, sizeof(ngx_foo_ctx_t));\nif (ctx == NULL) {\n    /* error */\n}\n\n/* add an entry for 64k shared zone */\nshm_zone = ngx_shared_memory_add(cf, &name, 65536, &ngx_foo_module);\nif (shm_zone == NULL) {\n    /* error */\n}\n\n/* register init callback and context */\nshm_zone->init = ngx_foo_init_zone;\nshm_zone->data = ctx;\n\n\n...\n\n\nstatic ngx_int_t\nngx_foo_init_zone(ngx_shm_zone_t *shm_zone, void *data)\n{\n    ngx_foo_ctx_t  *octx = data;\n\n    size_t            len;\n    ngx_foo_ctx_t    *ctx;\n    ngx_slab_pool_t  *shpool;\n\n    value = shm_zone->data;\n\n    if (octx) {\n        /* reusing a shared zone from old cycle */\n        ctx->value = octx->value;\n        return NGX_OK;\n    }\n\n    shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;\n\n    if (shm_zone->shm.exists) {\n        /* initialize shared zone context in Windows nginx worker */\n        ctx->value = shpool->data;\n        return NGX_OK;\n    }\n\n    /* initialize shared zone */\n\n    ctx->value = ngx_slab_alloc(shpool, sizeof(ngx_uint_t));\n    if (ctx->value == NULL) {\n        return NGX_ERROR;\n    }\n\n    shpool->data = ctx->value;\n\n    return NGX_OK;\n}\n```\n\n#### Logging\n\nFor logging nginx uses `ngx_log_t` objects. The nginx logger supports several types of output:\n\n- stderr — Logging to standard error (stderr)\n- file — Logging to a file\n- syslog — Logging to syslog\n- memory — Logging to internal memory storage for development purposes; the memory can be accessed later with a debugger\n\nA logger instance can be a chain of loggers, linked to each other with the `next` field. In this case, each message is written to all loggers in the chain.\n\nFor each logger, a severity level controls which messages are written to the log (only events assigned that level or higher are logged). The following severity levels are supported:\n\n- `NGX_LOG_EMERG`\n- `NGX_LOG_ALERT`\n- `NGX_LOG_CRIT`\n- `NGX_LOG_ERR`\n- `NGX_LOG_WARN`\n- `NGX_LOG_NOTICE`\n- `NGX_LOG_INFO`\n- `NGX_LOG_DEBUG`\n\nFor debug logging, the debug mask is checked as well. The debug masks are:\n\n- `NGX_LOG_DEBUG_CORE`\n- `NGX_LOG_DEBUG_ALLOC`\n- `NGX_LOG_DEBUG_MUTEX`\n- `NGX_LOG_DEBUG_EVENT`\n- `NGX_LOG_DEBUG_HTTP`\n- `NGX_LOG_DEBUG_MAIL`\n- `NGX_LOG_DEBUG_STREAM`\n\nNormally, loggers are created by existing nginx code from `error_log` directives and are available at nearly every stage of processing in cycle, configuration, client connection and other objects.\n\nNginx provides the following logging macros:\n\n- `ngx_log_error(level, log, err, fmt, ...)` — Error logging\n- `ngx_log_debug0(level, log, err, fmt)`, `ngx_log_debug1(level, log, err, fmt, arg1)` etc — Debug logging with up to eight supported formatting arguments\n\nA log message is formatted in a buffer of size `NGX_MAX_ERROR_STR` (currently, 2048 bytes) on stack. The message is prepended with the severity level, process ID (PID), connection ID (stored in `log->connection`), and the system error text. For non-debug messages `log->handler` is called as well to prepend more specific information to the log message. HTTP module sets `ngx_http_log_error()` function as log handler to log client and server addresses, current action (stored in `log->action`), client request line, server name etc.\n\n``` nginx\n/* specify what is currently done */\nlog->action = \"sending mp4 to client\";\n\n/* error and debug log */\nngx_log_error(NGX_LOG_INFO, c->log, 0, \"client prematurely\n              closed connection\");\n\nngx_log_debug2(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,\n               \"mp4 start:%ui, length:%ui\", mp4->start, mp4->length);\n```\n\nThe example above results in log entries like these:\n\n``` nginx\n2016/09/16 22:08:52 [info] 17445#0: *1 client prematurely closed connection while\nsending mp4 to client, client: 127.0.0.1, server: , request: \"GET /file.mp4 HTTP/1.1\"\n2016/09/16 23:28:33 [debug] 22140#0: *1 mp4 start:0, length:10000\n```\n\n#### Cycle\n\nA cycle object stores the nginx runtime context created from a specific configuration. Its type is `ngx_cycle_t`. The current cycle is referenced by the `ngx_cycle` global variable and inherited by nginx workers as they start. Each time the nginx configuration is reloaded, a new cycle is created from the new nginx configuration; the old cycle is usually deleted after the new one is successfully created.\n\nA cycle is created by the `ngx_init_cycle()` function, which takes the previous cycle as its argument. The function locates the previous cycle's configuration file and inherits as many resources as possible from the previous cycle. A placeholder cycle called \"init cycle\" is created as nginx start, then is replaced by an actual cycle built from configuration.\n\nMembers of the cycle include:\n\n- `pool` — Cycle pool. Created for each new cycle.\n- `log` — Cycle log. Initially inherited from the old cycle, it is set to point to `new_log` after the configuration is read.\n- `new_log` — Cycle log, created by the configuration. It's affected by the root-scope `error_log` directive.\n- `connections`, `connection_n` — Array of connections of type `ngx_connection_t`, created by the event module while initializing each nginx worker. The `worker_connections` directive in the nginx configuration sets the number of connections `connection_n`.\n- `free_connections`, `free_connection_n` — List and number of currently available connections. If no connections are available, an nginx worker refuses to accept new clients or connect to upstream servers.\n- `files`, `files_n` — Array for mapping file descriptors to nginx connections. This mapping is used by the event modules, having the `NGX_USE_FD_EVENT` flag (currently, it's `poll` and `devpoll`).\n- `conf_ctx` — Array of core module configurations. The configurations are created and filled during reading of nginx configuration files.\n- `modules`, `modules_n` — Array of modules of type `ngx_module_t`, both static and dynamic, loaded by the current configuration.\n- `listening` — Array of listening objects of type `ngx_listening_t`. Listening objects are normally added by the `listen` directive of different modules which call the `ngx_create_listening()` function. Listen sockets are created based on the listening objects.\n- `paths` — Array of paths of type `ngx_path_t`. Paths are added by calling the function `ngx_add_path()` from modules which are going to operate on certain directories. These directories are created by nginx after reading configuration, if missing. Moreover, two handlers can be added for each path:\n  - path loader — Executes only once in 60 seconds after starting or reloading nginx. Normally, the loader reads the directory and stores data in nginx shared memory. The handler is called from the dedicated nginx process “nginx cache loader”.\n  - path manager — Executes periodically. Normally, the manager removes old files from the directory and updates nginx memory to reflect the changes. The handler is called from the dedicated “nginx cache manager” process.\n- `open_files` — List of open file objects of type `ngx_open_file_t`, which are created by calling the function `ngx_conf_open_file()`. Currently, nginx uses this kind of open files for logging. After reading the configuration, nginx opens all files in the `open_files` list and stores each file descriptor in the object's `fd` field. The files are opened in append mode and are created if missing. The files in the list are reopened by nginx workers upon receiving the reopen signal (most often `USR1`). In this case the descriptor in the `fd` field is changed to a new value.\n- `shared_memory` — List of shared memory zones, each added by calling the `ngx_shared_memory_add()` function. Shared zones are mapped to the same address range in all nginx processes and are used to share common data, for example the HTTP cache in-memory tree.\n\n#### Buffer\n\nFor input/output operations, nginx provides the buffer type `ngx_buf_t`. Normally, it's used to hold data to be written to a destination or read from a source. A buffer can reference data in memory or in a file and it's technically possible for a buffer to reference both at the same time. Memory for the buffer is allocated separately and is not related to the buffer structure `ngx_buf_t`.\n\nThe `ngx_buf_t` structure has the following fields:\n\n- `start`, `end` — The boundaries of the memory block allocated for the buffer.\n- `pos`, `last` — The boundaries of the memory buffer; normally a subrange of `start` .. `end`.\n- `file_pos`, `file_last` — The boundaries of a file buffer, expressed as offsets from the beginning of the file.\n- `tag` — Unique value used to distinguish buffers; created by different nginx modules, usually for the purpose of buffer reuse.\n- `file` — File object.\n- `temporary` — Flag indicating that the buffer references writable memory.\n- `memory` — Flag indicating that the buffer references read-only memory.\n- `in_file` — Flag indicating that the buffer references data in a file.\n- `flush` — Flag indicating that all data prior to the buffer need to be flushed.\n- `recycled` — Flag indicating that the buffer can be reused and needs to be consumed as soon as possible.\n- `sync` — Flag indicating that the buffer carries no data or special signal like `flush` or `last_buf`. By default nginx considers such buffers an error condition, but this flag tells nginx to skip the error check.\n- `last_buf` — Flag indicating that the buffer is the last in output.\n- `last_in_chain` — Flag indicating that there are no more data buffers in a request or subrequest.\n- `shadow` — Reference to another (\"shadow\") buffer related to the current buffer, usually in the sense that the buffer uses data from the shadow. When the buffer is consumed, the shadow buffer is normally also marked as consumed.\n- `last_shadow` — Flag indicating that the buffer is the last one that references a particular shadow buffer.\n- `temp_file` — Flag indicating that the buffer is in a temporary file.\n\nFor input and output operations buffers are linked in chains. A chain is a sequence of chain links of type `ngx_chain_t`, defined as follows:\n\n``` nginx\ntypedef struct ngx_chain_s  ngx_chain_t;\n\nstruct ngx_chain_s {\n    ngx_buf_t    *buf;\n    ngx_chain_t  *next;\n};\n```\n\nEach chain link keeps a reference to its buffer and a reference to the next chain link.\n\nAn example of using buffers and chains:\n\n``` nginx\nngx_chain_t *\nngx_get_my_chain(ngx_pool_t *pool)\n{\n    ngx_buf_t    *b;\n    ngx_chain_t  *out, *cl, **ll;\n\n    /* first buf */\n    cl = ngx_alloc_chain_link(pool);\n    if (cl == NULL) { /* error */ }\n\n    b = ngx_calloc_buf(pool);\n    if (b == NULL) { /* error */ }\n\n    b->start = (u_char *) \"foo\";\n    b->pos = b->start;\n    b->end = b->start + 3;\n    b->last = b->end;\n    b->memory = 1; /* read-only memory */\n\n    cl->buf = b;\n    out = cl;\n    ll = &cl->next;\n\n    /* second buf */\n    cl = ngx_alloc_chain_link(pool);\n    if (cl == NULL) { /* error */ }\n\n    b = ngx_create_temp_buf(pool, 3);\n    if (b == NULL) { /* error */ }\n\n    b->last = ngx_cpymem(b->last, \"foo\", 3);\n\n    cl->buf = b;\n    cl->next = NULL;\n    *ll = cl;\n\n    return out;\n}\n```\n\n#### Networking\n\n#### Connection\n\nThe connection type `ngx_connection_t` is a wrapper around a socket descriptor. It includes the following fields:\n\n- `fd` — Socket descriptor\n- `data` — Arbitrary connection context. Normally, it is a pointer to a higher-level object built on top of the connection, such as an HTTP request or a Stream session.\n- `read`, `write` — Read and write events for the connection.\n- `recv`, `send`, `recv_chain`, `send_chain` — I/O operations for the connection.\n- `pool` — Connection pool.\n- `log` — Connection log.\n- `sockaddr`, `socklen`, `addr_text` — Remote socket address in binary and text forms.\n- `local_sockaddr`, `local_socklen` — Local socket address in binary form. Initially, these fields are empty. Use the `ngx_connection_local_sockaddr()` function to get the local socket address.\n- `proxy_protocol_addr`, `proxy_protocol_port` - PROXY protocol client address and port, if the PROXY protocol is enabled for the connection.\n- `ssl` — SSL context for the connection.\n- `reusable` — Flag indicating the connection is in a state that makes it eligible for reuse.\n- `close` — Flag indicating that the connection is being reused and needs to be closed.\n\nAn nginx connection can transparently encapsulate the SSL layer. In this case the connection's `ssl` field holds a pointer to an `ngx_ssl_connection_t` structure, keeping all SSL-related data for the connection, including `SSL_CTX` and `SSL`. The `recv`, `send`, `recv_chain`, and `send_chain` handlers are set to SSL-enabled functions as well.\n\nThe `worker_connections` directive in the nginx configuration limits the number of connections per nginx worker. All connection structures are precreated when a worker starts and stored in the `connections` field of the cycle object. To retrieve a connection structure, use the `ngx_get_connection(s, log)` function. It takes as its `s` argument a socket descriptor, which needs to be wrapped in a connection structure.\n\nBecause the number of connections per worker is limited, nginx provides a way to grab connections that are currently in use. To enable or disable reuse of a connection, call the `ngx_reusable_connection(c, reusable)` function. Calling `ngx_reusable_connection(c, 1)` sets the `reuse` flag in the connection structure and inserts the connection into the `reusable_connections_queue` of the cycle. Whenever `ngx_get_connection()` finds out there are no available connections in the cycle's `free_connections` list, it calls `ngx_drain_connections()` to release a specific number of reusable connections. For each such connection, the `close` flag is set and its read handler is called which is supposed to free the connection by calling `ngx_close_connection(c)` and make it available for reuse. To exit the state when a connection can be reused `ngx_reusable_connection(c, 0)` is called. HTTP client connections are an example of reusable connections in nginx; they are marked as reusable until the first request byte is received from the client.\n\n#### Events\n\n#### Event\n\nEvent object `ngx_event_t` in nginx provides a mechanism for notification that a specific event has occurred.\n\nFields in `ngx_event_t` include:\n\n- `data` — Arbitrary event context used in event handlers, usually as pointer to a connection related to the event.\n- `handler` — Callback function to be invoked when the event happens.\n- `write` — Flag indicating a write event. Absence of the flag indicates a read event.\n- `active` — Flag indicating that the event is registered for receiving I/O notifications, normally from notification mechanisms like `epoll`, `kqueue`, `poll`.\n- `ready` — Flag indicating that the event has received an I/O notification.\n- `delayed` — Flag indicating that I/O is delayed due to rate limiting.\n- `timer` — Red-black tree node for inserting the event into the timer tree.\n- `timer_set` — Flag indicating that the event timer is set and not yet expired.\n- `timedout` — Flag indicating that the event timer has expired.\n- `eof` — Flag indicating that EOF occurred while reading data.\n- `pending_eof` — Flag indicating that EOF is pending on the socket, even though there may be some data available before it. The flag is delivered via the `EPOLLRDHUP` `epoll` event or `EV_EOF` `kqueue` flag.\n- `error` — Flag indicating that an error occurred during reading (for a read event) or writing (for a write event).\n- `cancelable` — Timer event flag indicating that the event should be ignored while shutting down the worker. Graceful worker shutdown is delayed until there are no non-cancelable timer events scheduled.\n- `posted` — Flag indicating that the event is posted to a queue.\n- `queue` — Queue node for posting the event to a queue.\n\n#### I/O events\n\nEach connection obtained by calling the `ngx_get_connection()` function has two attached events, `c->read` and `c->write`, which are used for receiving notification that the socket is ready for reading or writing. All such events operate in Edge-Triggered mode, meaning that they only trigger notifications when the state of the socket changes. For example, doing a partial read on a socket does not make nginx deliver a repeated read notification until more data arrives on the socket. Even when the underlying I/O notification mechanism is essentially Level-Triggered (`poll`, `select` etc), nginx converts the notifications to Edge-Triggered. To make nginx event notifications consistent across all notifications systems on different platforms, the functions `ngx_handle_read_event(rev, flags)` and `ngx_handle_write_event(wev, lowat)` must be called after handling an I/O socket notification or calling any I/O functions on that socket. Normally, the functions are called once at the end of each read or write event handler.\n\n#### Timer events\n\nAn event can be set to send a notification when a timeout expires. The timer used by events counts milliseconds since some unspecified point in the past truncated to `ngx_msec_t` type. Its current value can be obtained from the `ngx_current_msec` variable.\n\nThe function `ngx_add_timer(ev, timer)` sets a timeout for an event, `ngx_del_timer(ev)` deletes a previously set timeout. The global timeout red-black tree `ngx_event_timer_rbtree` stores all timeouts currently set. The key in the tree is of type `ngx_msec_t` and is the time when the event occurs. The tree structure enables fast insertion and deletion operations, as well as access to the nearest timeouts, which nginx uses to find out how long to wait for I/O events and for expiring timeout events.\n\n#### Posted events\n\nAn event can be posted which means that its handler will be called at some point later within the current event loop iteration. Posting events is a good practice for simplifying code and escaping stack overflows. Posted events are held in a post queue. The `ngx_post_event(ev, q)` macro posts the event `ev` to the post queue `q`. The `ngx_delete_posted_event(ev)` macro deletes the event `ev` from the queue it's currently posted in. Normally, events are posted to the `ngx_posted_events` queue, which is processed late in the event loop — after all I/O and timer events are already handled. The function `ngx_event_process_posted()` is called to process an event queue. It calls event handlers until the queue is not empty. This means that a posted event handler can post more events to be processed within the current event loop iteration.\n\nAn example:\n\n``` nginx\nvoid\nngx_my_connection_read(ngx_connection_t *c)\n{\n    ngx_event_t  *rev;\n\n    rev = c->read;\n\n    ngx_add_timer(rev, 1000);\n\n    rev->handler = ngx_my_read_handler;\n\n    ngx_my_read(rev);\n}\n\n\nvoid\nngx_my_read_handler(ngx_event_t *rev)\n{\n    ssize_t            n;\n    ngx_connection_t  *c;\n    u_char             buf[256];\n\n    if (rev->timedout) { /* timeout expired */ }\n\n    c = rev->data;\n\n    while (rev->ready) {\n        n = c->recv(c, buf, sizeof(buf));\n\n        if (n == NGX_AGAIN) {\n            break;\n        }\n\n        if (n == NGX_ERROR) { /* error */ }\n\n        /* process buf */\n    }\n\n    if (ngx_handle_read_event(rev, 0) != NGX_OK) { /* error */ }\n}\n```\n\n#### Event loop\n\nExcept for the nginx master process, all nginx processes do I/O and so have an event loop. (The nginx master process instead spends most of its time in the `sigsuspend()` call waiting for signals to arrive.) The nginx event loop is implemented in the `ngx_process_events_and_timers()` function, which is called repeatedly until the process exits.\n\nThe event loop has the following stages:\n\n- Find the timeout that is closest to expiring, by calling `ngx_event_find_timer()`. This function finds the leftmost node in the timer tree and returns the number of milliseconds until the node expires.\n- Process I/O events by calling a handler, specific to the event notification mechanism, chosen by nginx configuration. This handler waits for at least one I/O event to happen, but only until the next timeout expires. When a read or write event occurs, the `ready` flag is set and the event's handler is called. For Linux, the `ngx_epoll_process_events()` handler is normally used, which calls `epoll_wait()` to wait for I/O events.\n- Expire timers by calling `ngx_event_expire_timers()`. The timer tree is iterated from the leftmost element to the right until an unexpired timeout is found. For each expired node the `timedout` event flag is set, the `timer_set` flag is reset, and the event handler is called\n- Process posted events by calling `ngx_event_process_posted()`. The function repeatedly removes the first element from the posted events queue and calls the element's handler, until the queue is empty.\n\nAll nginx processes handle signals as well. Signal handlers only set global variables which are checked after the `ngx_process_events_and_timers()` call.\n\n#### Processes\n\nThere are several types of processes in nginx. The type of a process is kept in the `ngx_process` global variable, and is one of the following:\n\n- `NGX_PROCESS_MASTER` — The master process, which reads the NGINX configuration, creates cycles, and starts and controls child processes. It does not perform any I/O and responds only to signals. Its cycle function is `ngx_master_process_cycle()`.\n\n- `NGX_PROCESS_WORKER` — The worker process, which handles client connections. It is started by the master process and responds to its signals and channel commands as well. Its cycle function is `ngx_worker_process_cycle()`. There can be multiple worker processes, as configured by the `worker_processes` directive.\n\n- `NGX_PROCESS_SINGLE` — The single process, which exists only in `master_process off` mode, and is the only process running in that mode. It creates cycles (like the master process does) and handles client connections (like the worker process does). Its cycle function is `ngx_single_process_cycle()`.\n\n- `NGX_PROCESS_HELPER` — The helper process, of which currently there are two types: cache manager and cache loader. The cycle function for both is `ngx_cache_manager_process_cycle()`.\n\nThe nginx processes handle the following signals:\n\n- `NGX_SHUTDOWN_SIGNAL` (`SIGQUIT` on most systems) — Gracefully shutdown. Upon receiving this signal, the master process sends a shutdown signal to all child processes. When no child processes are left, the master destroys the cycle pool and exits. When a worker process receives this signal, it closes all listening sockets and waits until there are no non-cancelable events scheduled, then destroys the cycle pool and exits. When the cache manager or the cache loader process receives this signal, it exits immediately. The `ngx_quit` variable is set to `1` when a process receives this signal, and is immediately reset after being processed. The `ngx_exiting` variable is set to `1` while a worker process is in the shutdown state.\n\n- `NGX_TERMINATE_SIGNAL` (`SIGTERM` on most systems) — Terminate. Upon receiving this signal, the master process sends a terminate signal to all child processes. If a child process does not exit within 1 second, the master process sends the `SIGKILL` signal to kill it. When no child processes are left, the master process destroys the cycle pool and exits. When a worker process, the cache manager process or the cache loader process receives this signal, it destroys the cycle pool and exits. The variable `ngx_terminate` is set to `1` when this signal is received.\n\n- `NGX_NOACCEPT_SIGNAL` (`SIGWINCH` on most systems) - Shut down all worker and helper processes. Upon receiving this signal, the master process shuts down its child processes. If a previously started new nginx binary exits, the child processes of the old master are started again. When a worker process receives this signal, it shuts down in debug mode set by the `debug_points` directive.\n\n- `NGX_RECONFIGURE_SIGNAL` (`SIGHUP` on most systems) - Reconfigure. Upon receiving this signal, the master process re-reads the configuration and creates a new cycle based on it. If the new cycle is created successfully, the old cycle is deleted and new child processes are started. Meanwhile, the old child processes receive the `NGX_SHUTDOWN_SIGNAL` signal. In single-process mode, nginx creates a new cycle, but keeps the old one until there are no longer clients with active connections tied to it. The worker and helper processes ignore this signal.\n\n- `NGX_REOPEN_SIGNAL` (`SIGUSR1` on most systems) — Reopen files. The master process sends this signal to workers, which reopen all `open_files` related to the cycle.\n\n- `NGX_CHANGEBIN_SIGNAL` (`SIGUSR2` on most systems) — Change the nginx binary. The master process starts a new nginx binary and passes in a list of all listen sockets. The text-format list, passed in the `“NGINX”` environment variable, consists of descriptor numbers separated with semicolons. The new nginx binary reads the `“NGINX”` variable and adds the sockets to its init cycle. Other processes ignore this signal.\n\nWhile all nginx worker processes are able to receive and properly handle POSIX signals, the master process does not use the standard `kill()` syscall to pass signals to workers and helpers. Instead, nginx uses inter-process socket pairs which allow sending messages between all nginx processes. Currently, however, messages are only sent from the master to its children. The messages carry the standard signals.\n\n#### Threads\n\nIt is possible to offload into a separate thread tasks that would otherwise block the nginx worker process. For example, nginx can be configured to use threads to perform [file I/O](../http/ngx_http_core_module#aio). Another use case is a library that doesn't have asynchronous interface and thus cannot be normally used with nginx. Keep in mind that the threads interface is a helper for the existing asynchronous approach to processing client connections, and by no means intended as a replacement.\n\nTo deal with synchronization, the following wrappers over `pthreads` primitives are available:\n\n- `typedef pthread_mutex_t ngx_thread_mutex_t;`\n  - `ngx_int_t ngx_thread_mutex_create(ngx_thread_mutex_t *mtx, ngx_log_t *log);`\n  - `ngx_int_t ngx_thread_mutex_destroy(ngx_thread_mutex_t *mtx, ngx_log_t *log);`\n  - `ngx_int_t ngx_thread_mutex_lock(ngx_thread_mutex_t *mtx, ngx_log_t *log);`\n  - `ngx_int_t ngx_thread_mutex_unlock(ngx_thread_mutex_t *mtx, ngx_log_t *log);`\n- `typedef pthread_cond_t ngx_thread_cond_t;`\n  - `ngx_int_t ngx_thread_cond_create(ngx_thread_cond_t *cond, ngx_log_t *log);`\n  - `ngx_int_t ngx_thread_cond_destroy(ngx_thread_cond_t *cond, ngx_log_t *log);`\n  - `ngx_int_t ngx_thread_cond_signal(ngx_thread_cond_t *cond, ngx_log_t *log);`\n  - `ngx_int_t ngx_thread_cond_wait(ngx_thread_cond_t *cond, ngx_thread_mutex_t *mtx, ngx_log_t *log);`\n\nInstead of creating a new thread for each task, nginx implements a [thread_pool](../ngx_core_module#thread_pool) strategy. Multiple thread pools may be configured for different purposes (for example, performing I/O on different sets of disks). Each thread pool is created at startup and contains a limited number of threads that process a queue of tasks. When a task is completed, a predefined completion handler is called.\n\nThe `src/core/ngx_thread_pool.h` header file contains relevant definitions:\n\n``` nginx\nstruct ngx_thread_task_s {\n    ngx_thread_task_t   *next;\n    ngx_uint_t           id;\n    void                *ctx;\n    void               (*handler)(void *data, ngx_log_t *log);\n    ngx_event_t          event;\n};\n\ntypedef struct ngx_thread_pool_s  ngx_thread_pool_t;\n\nngx_thread_pool_t *ngx_thread_pool_add(ngx_conf_t *cf, ngx_str_t *name);\nngx_thread_pool_t *ngx_thread_pool_get(ngx_cycle_t *cycle, ngx_str_t *name);\n\nngx_thread_task_t *ngx_thread_task_alloc(ngx_pool_t *pool, size_t size);\nngx_int_t ngx_thread_task_post(ngx_thread_pool_t *tp, ngx_thread_task_t *task);\n```\n\nAt configuration time, a module willing to use threads has to obtain a reference to a thread pool by calling `ngx_thread_pool_add(cf, name)`, which either creates a new thread pool with the given `name` or returns a reference to the pool with that name if it already exists.\n\nTo add a `task` into a queue of a specified thread pool `tp` at runtime, use the `ngx_thread_task_post(tp, task)` function. To execute a function in a thread, pass parameters and setup a completion handler using the `ngx_thread_task_t` structure:\n\n``` nginx\ntypedef struct {\n    int    foo;\n} my_thread_ctx_t;\n\n\nstatic void\nmy_thread_func(void *data, ngx_log_t *log)\n{\n    my_thread_ctx_t *ctx = data;\n\n    /* this function is executed in a separate thread */\n}\n\n\nstatic void\nmy_thread_completion(ngx_event_t *ev)\n{\n    my_thread_ctx_t *ctx = ev->data;\n\n    /* executed in nginx event loop */\n}\n\n\nngx_int_t\nmy_task_offload(my_conf_t *conf)\n{\n    my_thread_ctx_t    *ctx;\n    ngx_thread_task_t  *task;\n\n    task = ngx_thread_task_alloc(conf->pool, sizeof(my_thread_ctx_t));\n    if (task == NULL) {\n        return NGX_ERROR;\n    }\n\n    ctx = task->ctx;\n\n    ctx->foo = 42;\n\n    task->handler = my_thread_func;\n    task->event.handler = my_thread_completion;\n    task->event.data = ctx;\n\n    if (ngx_thread_task_post(conf->thread_pool, task) != NGX_OK) {\n        return NGX_ERROR;\n    }\n\n    return NGX_OK;\n}\n```\n\n#### Modules\n\n#### Adding new modules\n\nEach standalone nginx module resides in a separate directory that contains at least two files: `config` and a file with the module source code. The `config` file contains all information needed for nginx to integrate the module, for example:\n\n``` nginx\nngx_module_type=CORE\nngx_module_name=ngx_foo_module\nngx_module_srcs=\"$ngx_addon_dir/ngx_foo_module.c\"\n\n. auto/module\n\nngx_addon_name=$ngx_module_name\n```\n\nThe `config` file is a POSIX shell script that can set and access the following variables:\n\n- `ngx_module_type` — Type of module to build. Possible values are `CORE`, `HTTP`, `HTTP_FILTER`, `HTTP_INIT_FILTER`, `HTTP_AUX_FILTER`, `MAIL`, `STREAM`, or `MISC`.\n\n- `ngx_module_name` — Module names. To build multiple modules from a set of source files, specify a whitespace-separated list of names. The first name indicates the name of the output binary for the dynamic module. The names in the list must match the names used in the source code.\n\n- `ngx_addon_name` — Name of the module as it appears in output on the console from the configure script.\n\n- `ngx_module_srcs` — Whitespace-separated list of source files used to compile the module. The `$ngx_addon_dir` variable can be used to represent the path to the module directory.\n\n- `ngx_module_incs` — Include paths required to build the module\n\n- `ngx_module_deps` — Whitespace-separated list of the module's dependencies. Usually, it is the list of header files.\n\n- `ngx_module_libs` — Whitespace-separated list of libraries to link with the module. For example, use `ngx_module_libs=-lpthread` to link `libpthread` library. The following macros can be used to link against the same libraries as nginx: `LIBXSLT`, `LIBGD`, `GEOIP`, `PCRE`, `OPENSSL`, `MD5`, `SHA1`, `ZLIB`, and `PERL`.\n\n- `ngx_module_link` — Variable set by the build system to `DYNAMIC` for a dynamic module or `ADDON` for a static module and used to determine different actions to perform depending on linking type.\n\n- `ngx_module_order` — Load order for the module; useful for the `HTTP_FILTER` and `HTTP_AUX_FILTER` module types. The format for this option is a whitespace-separated list of modules. All modules in the list following the current module's name end up after it in the global list of modules, which sets up the order for modules initialization. For filter modules later initialization means earlier execution.\n\n  The following modules are typically used as references. The `ngx_http_copy_filter_module` reads the data for other filter modules and is placed near the bottom of the list so that it is one of the first to be executed. The `ngx_http_write_filter_module` writes the data to the client socket and is placed near the top of the list, and is the last to be executed.\n\n  By default, filter modules are placed before the `ngx_http_copy_filter` in the module list so that the filter handler is executed after the copy filter handler. For other module types the default is the empty string.\n\nTo compile a module into nginx statically, use the `--add-module=/path/to/module` argument to the configure script. To compile a module for later dynamic loading into nginx, use the `--add-dynamic-module=/path/to/module` argument.\n\n#### Core Modules\n\nModules are the building blocks of nginx, and most of its functionality is implemented as modules. The module source file must contain a global variable of type `ngx_module_t`, which is defined as follows:\n\n``` nginx\nstruct ngx_module_s {\n\n    /* private part is omitted */\n\n    void                 *ctx;\n    ngx_command_t        *commands;\n    ngx_uint_t            type;\n\n    ngx_int_t           (*init_master)(ngx_log_t *log);\n\n    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);\n\n    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);\n    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);\n    void                (*exit_thread)(ngx_cycle_t *cycle);\n    void                (*exit_process)(ngx_cycle_t *cycle);\n\n    void                (*exit_master)(ngx_cycle_t *cycle);\n\n    /* stubs for future extensions are omitted */\n};\n```\n\nThe omitted private part includes the module version and a signature and is filled using the predefined macro `NGX_MODULE_V1`.\n\nEach module keeps its private data in the `ctx` field, recognizes the configuration directives, specified in the `commands` array, and can be invoked at certain stages of nginx lifecycle. The module lifecycle consists of the following events:\n\n- Configuration directive handlers are called as they appear in configuration files in the context of the master process.\n- After the configuration is parsed successfully, `init_module` handler is called in the context of the master process. The `init_module` handler is called in the master process each time a configuration is loaded.\n- The master process creates one or more worker processes and the `init_process` handler is called in each of them.\n- When a worker process receives the shutdown or terminate command from the master, it invokes the `exit_process` handler.\n- The master process calls the `exit_master` handler before exiting.\n\nBecause threads are used in nginx only as a supplementary I/O facility with its own API, `init_thread` and `exit_thread` handlers are not currently called. There is also no `init_master` handler, because it would be unnecessary overhead.\n\nThe module `type` defines exactly what is stored in the `ctx` field. Its value is one of the following types:\n\n- `NGX_CORE_MODULE`\n- `NGX_EVENT_MODULE`\n- `NGX_HTTP_MODULE`\n- `NGX_MAIL_MODULE`\n- `NGX_STREAM_MODULE`\n\nThe `NGX_CORE_MODULE` is the most basic and thus the most generic and most low-level type of module. The other module types are implemented on top of it and provide a more convenient way to deal with corresponding domains, like handling events or HTTP requests.\n\nThe set of core modules includes `ngx_core_module`, `ngx_errlog_module`, `ngx_regex_module`, `ngx_thread_pool_module` and `ngx_openssl_module` modules. The HTTP module, the stream module, the mail module and event modules are core modules too. The context of a core module is defined as:\n\n``` nginx\ntypedef struct {\n    ngx_str_t             name;\n    void               *(*create_conf)(ngx_cycle_t *cycle);\n    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);\n} ngx_core_module_t;\n```\n\nwhere the `name` is a module name string, `create_conf` and `init_conf` are pointers to functions that create and initialize module configuration respectively. For core modules, nginx calls `create_conf` before parsing a new configuration and `init_conf` after all configuration is parsed successfully. The typical `create_conf` function allocates memory for the configuration and sets default values.\n\nFor example, a simplistic module called `ngx_foo_module` might look like this:\n\n``` nginx\n/*\n * Copyright (C) Author.\n */\n\n\n#include <ngx_config.h>\n#include <ngx_core.h>\n\n\ntypedef struct {\n    ngx_flag_t  enable;\n} ngx_foo_conf_t;\n\n\nstatic void *ngx_foo_create_conf(ngx_cycle_t *cycle);\nstatic char *ngx_foo_init_conf(ngx_cycle_t *cycle, void *conf);\n\nstatic char *ngx_foo_enable(ngx_conf_t *cf, void *post, void *data);\nstatic ngx_conf_post_t  ngx_foo_enable_post = { ngx_foo_enable };\n\n\nstatic ngx_command_t  ngx_foo_commands[] = {\n\n    { ngx_string(\"foo_enabled\"),\n      NGX_MAIN_CONF|NGX_DIRECT_CONF|NGX_CONF_FLAG,\n      ngx_conf_set_flag_slot,\n      0,\n      offsetof(ngx_foo_conf_t, enable),\n      &ngx_foo_enable_post },\n\n      ngx_null_command\n};\n\n\nstatic ngx_core_module_t  ngx_foo_module_ctx = {\n    ngx_string(\"foo\"),\n    ngx_foo_create_conf,\n    ngx_foo_init_conf\n};\n\n\nngx_module_t  ngx_foo_module = {\n    NGX_MODULE_V1,\n    &ngx_foo_module_ctx,                   /* module context */\n    ngx_foo_commands,                      /* module directives */\n    NGX_CORE_MODULE,                       /* module type */\n    NULL,                                  /* init master */\n    NULL,                                  /* init module */\n    NULL,                                  /* init process */\n    NULL,                                  /* init thread */\n    NULL,                                  /* exit thread */\n    NULL,                                  /* exit process */\n    NULL,                                  /* exit master */\n    NGX_MODULE_V1_PADDING\n};\n\n\nstatic void *\nngx_foo_create_conf(ngx_cycle_t *cycle)\n{\n    ngx_foo_conf_t  *fcf;\n\n    fcf = ngx_pcalloc(cycle->pool, sizeof(ngx_foo_conf_t));\n    if (fcf == NULL) {\n        return NULL;\n    }\n\n    fcf->enable = NGX_CONF_UNSET;\n\n    return fcf;\n}\n\n\nstatic char *\nngx_foo_init_conf(ngx_cycle_t *cycle, void *conf)\n{\n    ngx_foo_conf_t *fcf = conf;\n\n    ngx_conf_init_value(fcf->enable, 0);\n\n    return NGX_CONF_OK;\n}\n\n\nstatic char *\nngx_foo_enable(ngx_conf_t *cf, void *post, void *data)\n{\n    ngx_flag_t  *fp = data;\n\n    if (*fp == 0) {\n        return NGX_CONF_OK;\n    }\n\n    ngx_log_error(NGX_LOG_NOTICE, cf->log, 0, \"Foo Module is enabled\");\n\n    return NGX_CONF_OK;\n}\n```\n\n#### Configuration Directives\n\nThe `ngx_command_t` type defines a single configuration directive. Each module that supports configuration provides an array of such structures that describe how to process arguments and what handlers to call:\n\n``` nginx\ntypedef struct ngx_command_s  ngx_command_t;\n\nstruct ngx_command_s {\n    ngx_str_t             name;\n    ngx_uint_t            type;\n    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);\n    ngx_uint_t            conf;\n    ngx_uint_t            offset;\n    void                 *post;\n};\n```\n\nTerminate the array with the special value `ngx_null_command`. The `name` is the name of a directive as it appears in the configuration file, for example \"worker_processes\" or \"listen\". The `type` is a bit-field of flags that specify the number of arguments the directive takes, its type, and the context in which it appears. The flags are:\n\n- `NGX_CONF_NOARGS` — Directive takes no arguments.\n- `NGX_CONF_1MORE` — Directive takes one or more arguments.\n- `NGX_CONF_2MORE` — Directive takes two or more arguments.\n- `NGX_CONF_TAKE1`..`NGX_CONF_TAKE7` — Directive takes exactly the indicated number of arguments.\n- `NGX_CONF_TAKE12`, `NGX_CONF_TAKE13`, `NGX_CONF_TAKE23`, `NGX_CONF_TAKE123`, `NGX_CONF_TAKE1234` — Directive may take different number of arguments. Options are limited to the given numbers. For example, `NGX_CONF_TAKE12` means it takes one or two arguments.\n\nThe flags for directive types are:\n\n- `NGX_CONF_BLOCK` — Directive is a block, that is, it can contain other directives within its opening and closing braces, or even implement its own parser to handle contents inside.\n- `NGX_CONF_FLAG` — Directive takes a boolean value, either `on` or `off`.\n\nA directive's context defines where it may appear in the configuration:\n\n- `NGX_MAIN_CONF` — In the top level context.\n- `NGX_HTTP_MAIN_CONF` — In the `http` block.\n- `NGX_HTTP_SRV_CONF` — In a `server` block within the `http` block.\n- `NGX_HTTP_LOC_CONF` — In a `location` block within the `http` block.\n- `NGX_HTTP_UPS_CONF` — In an `upstream` block within the `http` block.\n- `NGX_HTTP_SIF_CONF` — In an `if` block within a `server` block in the `http` block.\n- `NGX_HTTP_LIF_CONF` — In an `if` block within a `location` block in the `http` block.\n- `NGX_HTTP_LMT_CONF` — In a `limit_except` block within the `http` block.\n- `NGX_STREAM_MAIN_CONF` — In the `stream` block.\n- `NGX_STREAM_SRV_CONF` — In a `server` block within the `stream` block.\n- `NGX_STREAM_UPS_CONF` — In an `upstream` block within the `stream` block.\n- `NGX_MAIL_MAIN_CONF` — In the `mail` block.\n- `NGX_MAIL_SRV_CONF` — In a `server` block within the `mail` block.\n- `NGX_EVENT_CONF` — In the `event` block.\n- `NGX_DIRECT_CONF` — Used by modules that don't create a hierarchy of contexts and only have one global configuration. This configuration is passed to the handler as the `conf` argument.\n\nThe configuration parser uses these flags to throw an error in case of a misplaced directive and calls directive handlers supplied with a proper configuration pointer, so that the same directives in different locations can store their values in distinct places.\n\nThe `set` field defines a handler that processes a directive and stores parsed values into the corresponding configuration. There's a number of functions that perform common conversions:\n\n- `ngx_conf_set_flag_slot` — Converts the literal strings `on` and `off` into an `ngx_flag_t` value with values 1 or 0, respectively.\n- `ngx_conf_set_str_slot` — Stores a string as a value of the `ngx_str_t` type.\n- `ngx_conf_set_str_array_slot` — Appends a value to an array `ngx_array_t` of strings `ngx_str_t`. The array is created if does not already exist.\n- `ngx_conf_set_keyval_slot` — Appends a key-value pair to an array `ngx_array_t` of key-value pairs `ngx_keyval_t`. The first string becomes the key and the second the value. The array is created if it does not already exist.\n- `ngx_conf_set_num_slot` — Converts a directive's argument to an `ngx_int_t` value.\n- `ngx_conf_set_size_slot` — Converts a [size](../syntax) to a `size_t` value expressed in bytes.\n- `ngx_conf_set_off_slot` — Converts an [offset](../syntax) to an `off_t` value expressed in bytes.\n- `ngx_conf_set_msec_slot` — Converts a [time](../syntax) to an `ngx_msec_t` value expressed in milliseconds.\n- `ngx_conf_set_sec_slot` — Converts a [time](../syntax) to a `time_t` value expressed in in seconds.\n- `ngx_conf_set_bufs_slot` — Converts the two supplied arguments into an `ngx_bufs_t` object that holds the number and [size](../syntax) of buffers.\n- `ngx_conf_set_enum_slot` — Converts the supplied argument into an `ngx_uint_t` value. The null-terminated array of `ngx_conf_enum_t` passed in the `post` field defines the acceptable strings and corresponding integer values.\n- `ngx_conf_set_bitmask_slot` — Converts the supplied arguments into an `ngx_uint_t` value. The mask values for each argument are ORed producing the result. The null-terminated array of `ngx_conf_bitmask_t` passed in the `post` field defines the acceptable strings and corresponding mask values.\n- `set_path_slot` — Converts the supplied arguments to an `ngx_path_t` value and performs all required initializations. For details, see the documentation for the [proxy_temp_path](../http/ngx_http_proxy_module#proxy_temp_path) directive.\n- `set_access_slot` — Converts the supplied arguments to a file permissions mask. For details, see the documentation for the [proxy_store_access](../http/ngx_http_proxy_module#proxy_store_access) directive.\n\nThe `conf` field defines which configuration structure is passed to the directory handler. Core modules only have the global configuration and set `NGX_DIRECT_CONF` flag to access it. Modules like HTTP, Stream or Mail create hierarchies of configurations. For example, a module's configuration is created for `server`, `location` and `if` scopes.\n\n- `NGX_HTTP_MAIN_CONF_OFFSET` — Configuration for the `http` block.\n- `NGX_HTTP_SRV_CONF_OFFSET` — Configuration for a `server` block within the `http` block.\n- `NGX_HTTP_LOC_CONF_OFFSET` — Configuration for a `location` block within the `http`.\n- `NGX_STREAM_MAIN_CONF_OFFSET` — Configuration for the `stream` block.\n- `NGX_STREAM_SRV_CONF_OFFSET` — Configuration for a `server` block within the `stream` block.\n- `NGX_MAIL_MAIN_CONF_OFFSET` — Configuration for the `mail` block.\n- `NGX_MAIL_SRV_CONF_OFFSET` — Configuration for a `server` block within the `mail` block.\n\nThe `offset` defines the offset of a field in a module configuration structure that holds values for this particular directive. The typical use is to employ the `offsetof()` macro.\n\nThe `post` field has two purposes: it may be used to define a handler to be called after the main handler has completed, or to pass additional data to the main handler. In the first case, the `ngx_conf_post_t` structure needs to be initialized with a pointer to the handler, for example:\n\n``` nginx\nstatic char *ngx_do_foo(ngx_conf_t *cf, void *post, void *data);\nstatic ngx_conf_post_t  ngx_foo_post = { ngx_do_foo };\n```\n\nThe `post` argument is the `ngx_conf_post_t` object itself, and the `data` is a pointer to the value, converted from arguments by the main handler with the appropriate type.\n\n#### HTTP\n\n#### Connection\n\nEach HTTP client connection runs through the following stages:\n\n- `ngx_event_accept()` accepts a client TCP connection. This handler is called in response to a read notification on a listen socket. A new `ngx_connection_t` object is created at this stage to wrap the newly accepted client socket. Each nginx listener provides a handler to pass the new connection object to. For HTTP connections it's `ngx_http_init_connection(c)`.\n- `ngx_http_init_connection()` performs early initialization of the HTTP connection. At this stage an `ngx_http_connection_t` object is created for the connection and its reference is stored in the connection's `data` field. Later it will be replaced by an HTTP request object. A PROXY protocol parser and the SSL handshake are started at this stage as well.\n- `ngx_http_wait_request_handler()` read event handler is called when data is available on the client socket. At this stage an HTTP request object `ngx_http_request_t` is created and set to the connection's `data` field.\n- `ngx_http_process_request_line()` read event handler reads client request line. The handler is set by `ngx_http_wait_request_handler()`. The data is read into connection's `buffer`. The size of the buffer is initially set by the directive [client_header_buffer_size](../http/ngx_http_core_module#client_header_buffer_size). The entire client header is supposed to fit in the buffer. If the initial size is not sufficient, a bigger buffer is allocated, with the capacity set by the `large_client_header_buffers` directive.\n- `ngx_http_process_request_headers()` read event handler, is set after `ngx_http_process_request_line()` to read the client request header.\n- `ngx_http_core_run_phases()` is called when the request header is completely read and parsed. This function runs request phases from `NGX_HTTP_POST_READ_PHASE` to `NGX_HTTP_CONTENT_PHASE`. The last phase is intended to generate a response and pass it along the filter chain. The response is not necessarily sent to the client at this phase. It might remain buffered and be sent at the finalization stage.\n- `ngx_http_finalize_request()` is usually called when the request has generated all the output or produced an error. In the latter case an appropriate error page is looked up and used as the response. If the response is not completely sent to the client by this point, an HTTP writer `ngx_http_writer()` is activated to finish sending outstanding data.\n- `ngx_http_finalize_connection()` is called when the complete response has been sent to the client and the request can be destroyed. If the client connection keepalive feature is enabled, `ngx_http_set_keepalive()` is called, which destroys the current request and waits for the next request on the connection. Otherwise, `ngx_http_close_request()` destroys both the request and the connection.\n\n#### Request\n\nFor each client HTTP request the `ngx_http_request_t` object is created. Some of the fields of this object are:\n\n- `connection` — Pointer to a `ngx_connection_t` client connection object. Several requests can reference the same connection object at the same time - one main request and its subrequests. After a request is deleted, a new request can be created on the same connection.\n\n  Note that for HTTP connections `ngx_connection_t`'s `data` field points back to the request. Such requests are called active, as opposed to the other requests tied to the connection. An active request is used to handle client connection events and is allowed to output its response to the client. Normally, each request becomes active at some point so that it can send its output.\n\n- `ctx` — Array of HTTP module contexts. Each module of type `NGX_HTTP_MODULE` can store any value (normally, a pointer to a structure) in the request. The value is stored in the `ctx` array at the module's `ctx_index` position. The following macros provide a convenient way to get and set request contexts:\n\n  - `ngx_http_get_module_ctx(r, module)` — Returns the `module`'s context\n  - `ngx_http_set_ctx(r, c, module)` — Sets `c` as the `module`'s context\n\n- `main_conf`, `srv_conf`, `loc_conf` — Arrays of current request configurations. Configurations are stored at the module's `ctx_index` positions.\n\n- `read_event_handler`, `write_event_handler` - Read and write event handlers for the request. Normally, both the read and write event handlers for an HTTP connection are set to `ngx_http_request_handler()`. This function calls the `read_event_handler` and `write_event_handler` handlers for the currently active request.\n\n- `cache` — Request cache object for caching the upstream response.\n\n- `upstream` — Request upstream object for proxying.\n\n- `pool` — Request pool. The request object itself is allocated in this pool, which is destroyed when the request is deleted. For allocations that need to be available throughout the client connection's lifetime, use `ngx_connection_t`'s pool instead.\n\n- `header_in` — Buffer into which the client HTTP request header is read.\n\n- `headers_in`, `headers_out` — Input and output HTTP headers objects. Both objects contain the `headers` field of type `ngx_list_t` for keeping the raw list of headers. In addition to that, specific headers are available for getting and setting as separate fields, for example `content_length_n`, `status` etc.\n\n- `request_body` — Client request body object.\n\n- `start_sec`, `start_msec` — Time point when the request was created, used for tracking request duration.\n\n- `method`, `method_name` — Numeric and text representation of the client HTTP request method. Numeric values for methods are defined in `src/http/ngx_http_request.h` with the macros `NGX_HTTP_GET`, `NGX_HTTP_HEAD`, `NGX_HTTP_POST`, etc.\n\n- `http_protocol` — Client HTTP protocol version in its original text form (“HTTP/1.0”, “HTTP/1.1” etc).\n\n- `http_version` — Client HTTP protocol version in numeric form (`NGX_HTTP_VERSION_10`, `NGX_HTTP_VERSION_11`, etc.).\n\n- `http_major`, `http_minor` — Client HTTP protocol version in numeric form split into major and minor parts.\n\n- `request_line`, `unparsed_uri` — Request line and URI in the original client request.\n\n- `uri`, `args`, `exten` — URI, arguments and file extension for the current request. The URI value here might differ from the original URI sent by the client due to normalization. Throughout request processing, these values can change as internal redirects are performed.\n\n- `main` — Pointer to a main request object. This object is created to process a client HTTP request, as opposed to subrequests, which are created to perform a specific subtask within the main request.\n\n- `parent` — Pointer to the parent request of a subrequest.\n\n- `postponed` — List of output buffers and subrequests, in the order in which they are sent and created. The list is used by the postpone filter to provide consistent request output when parts of it are created by subrequests.\n\n- `post_subrequest` — Pointer to a handler with the context to be called when a subrequest gets finalized. Unused for main requests.\n\n- `posted_requests` — List of requests to be started or resumed, which is done by calling the request's `write_event_handler`. Normally, this handler holds the request main function, which at first runs request phases and then produces the output.\n\n  A request is usually posted by the `ngx_http_post_request(r, NULL)` call. It is always posted to the main request `posted_requests` list. The function `ngx_http_run_posted_requests(c)` runs all requests that are posted in the main request of the passed connection's active request. All event handlers call `ngx_http_run_posted_requests`, which can lead to new posted requests. Normally, it is called after invoking a request's read or write handler.\n\n- `phase_handler` — Index of current request phase.\n\n- `ncaptures`, `captures`, `captures_data` — Regex captures produced by the last regex match of the request. A regex match can occur at a number of places during request processing: map lookup, server lookup by SNI or HTTP Host, rewrite, proxy_redirect, etc. Captures produced by a lookup are stored in the above mentioned fields. The field `ncaptures` holds the number of captures, `captures` holds captures boundaries and `captures_data` holds the string against which the regex was matched and which is used to extract captures. After each new regex match, request captures are reset to hold new values.\n\n- `count` — Request reference counter. The field only makes sense for the main request. Increasing the counter is done by simple `r->main->count++`. To decrease the counter, call `ngx_http_finalize_request(r, rc)`. Creating of a subrequest and running the request body read process both increment the counter.\n\n- `subrequests` — Current subrequest nesting level. Each subrequest inherits its parent's nesting level, decreased by one. An error is generated if the value reaches zero. The value for the main request is defined by the `NGX_HTTP_MAX_SUBREQUESTS` constant.\n\n- `uri_changes` — Number of URI changes remaining for the request. The total number of times a request can change its URI is limited by the `NGX_HTTP_MAX_URI_CHANGES` constant. With each change the value is decremented until it reaches zero, at which time an error is generated. Rewrites and internal redirects to normal or named locations are considered URI changes.\n\n- `blocked` — Counter of blocks held on the request. While this value is non-zero, the request cannot be terminated. Currently, this value is increased by pending AIO operations (POSIX AIO and thread operations) and active cache lock.\n\n- `buffered` — Bitmask showing which modules have buffered the output produced by the request. A number of filters can buffer output; for example, sub_filter can buffer data because of a partial string match, copy filter can buffer data because of the lack of free output buffers etc. As long as this value is non-zero, the request is not finalized pending the flush.\n\n- `header_only` — Flag indicating that the output does not require a body. For example, this flag is used by HTTP HEAD requests.\n\n- `keepalive` — Flag indicating whether client connection keepalive is supported. The value is inferred from the HTTP version and the value of the “Connection” header.\n\n- `header_sent` — Flag indicating that the output header has already been sent by the request.\n\n- `internal` — Flag indicating that the current request is internal. To enter the internal state, a request must pass through an internal redirect or be a subrequest. Internal requests are allowed to enter internal locations.\n\n- `allow_ranges` — Flag indicating that a partial response can be sent to the client, as requested by the HTTP Range header.\n\n- `subrequest_ranges` — Flag indicating that a partial response can be sent while a subrequest is being processed.\n\n- `single_range` — Flag indicating that only a single continuous range of output data can be sent to the client. This flag is usually set when sending a stream of data, for example from a proxied server, and the entire response is not available in one buffer.\n\n- `main_filter_need_in_memory`, `filter_need_in_memory` — Flags requesting that the output produced in memory buffers rather than files. This is a signal to the copy filter to read data from file buffers even if sendfile is enabled. The difference between the two flags is the location of the filter modules that set them. Filters called before the postpone filter in the filter chain set `filter_need_in_memory`, requesting that only the current request output come in memory buffers. Filters called later in the filter chain set `main_filter_need_in_memory`, requesting that both the main request and all subrequests read files in memory while sending output.\n\n- `filter_need_temporary` — Flag requesting that the request output be produced in temporary buffers, but not in readonly memory buffers or file buffers. This is used by filters which may change output directly in the buffers where it's sent.\n\n#### Configuration\n\nEach HTTP module can have three types of configuration:\n\n- Main configuration — Applies to the entire `http` block. Functions as global settings for a module.\n- Server configuration — Applies to a single `server` block. Functions as server-specific settings for a module.\n- Location configuration — Applies to a single `location`, `if` or `limit_except` block. Functions as location-specific settings for a module.\n\nConfiguration structures are created at the nginx configuration stage by calling functions, which allocate the structures, initialize them and merge them. The following example shows how to create a simple location configuration for a module. The configuration has one setting, `foo`, of type unsigned integer.\n\n``` nginx\ntypedef struct {\n    ngx_uint_t  foo;\n} ngx_http_foo_loc_conf_t;\n\n\nstatic ngx_http_module_t  ngx_http_foo_module_ctx = {\n    NULL,                                  /* preconfiguration */\n    NULL,                                  /* postconfiguration */\n\n    NULL,                                  /* create main configuration */\n    NULL,                                  /* init main configuration */\n\n    NULL,                                  /* create server configuration */\n    NULL,                                  /* merge server configuration */\n\n    ngx_http_foo_create_loc_conf,          /* create location configuration */\n    ngx_http_foo_merge_loc_conf            /* merge location configuration */\n};\n\n\nstatic void *\nngx_http_foo_create_loc_conf(ngx_conf_t *cf)\n{\n    ngx_http_foo_loc_conf_t  *conf;\n\n    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_foo_loc_conf_t));\n    if (conf == NULL) {\n        return NULL;\n    }\n\n    conf->foo = NGX_CONF_UNSET_UINT;\n\n    return conf;\n}\n\n\nstatic char *\nngx_http_foo_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)\n{\n    ngx_http_foo_loc_conf_t *prev = parent;\n    ngx_http_foo_loc_conf_t *conf = child;\n\n    ngx_conf_merge_uint_value(conf->foo, prev->foo, 1);\n}\n```\n\nAs seen in the example, the `ngx_http_foo_create_loc_conf()` function creates a new configuration structure, and `ngx_http_foo_merge_loc_conf()` merges a configuration with configuration from a higher level. In fact, server and location configuration do not exist only at the server and location levels, but are also created for all levels above them. Specifically, a server configuration is also created at the main level and location configurations are created at the main, server, and location levels. These configurations make it possible to specify server- and location-specific settings at any level of an nginx configuration file. Eventually configurations are merged down. A number of macros like `NGX_CONF_UNSET` and `NGX_CONF_UNSET_UINT` are provided for indicating a missing setting and ignoring it while merging. Standard nginx merge macros like `ngx_conf_merge_value()` and `ngx_conf_merge_uint_value()` provide a convenient way to merge a setting and set the default value if none of the configurations provided an explicit value. For complete list of macros for different types, see `src/core/ngx_conf_file.h`.\n\nThe following macros are available. for accessing configuration for HTTP modules at configuration time. They all take `ngx_conf_t` reference as the first argument.\n\n- `ngx_http_conf_get_module_main_conf(cf, module)`\n- `ngx_http_conf_get_module_srv_conf(cf, module)`\n- `ngx_http_conf_get_module_loc_conf(cf, module)`\n\nThe following example gets a pointer to a location configuration of standard nginx core module [ngx_http_core_module](../http/ngx_http_core_module) and replaces the location content handler kept in the `handler` field of the structure.\n\n``` nginx\nstatic ngx_int_t ngx_http_foo_handler(ngx_http_request_t *r);\n\n\nstatic ngx_command_t  ngx_http_foo_commands[] = {\n\n    { ngx_string(\"foo\"),\n      NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS,\n      ngx_http_foo,\n      0,\n      0,\n      NULL },\n\n      ngx_null_command\n};\n\n\nstatic char *\nngx_http_foo(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)\n{\n    ngx_http_core_loc_conf_t  *clcf;\n\n    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);\n    clcf->handler = ngx_http_bar_handler;\n\n    return NGX_CONF_OK;\n}\n```\n\nThe following macros are available for accessing configuration for HTTP modules at runtime.\n\n- `ngx_http_get_module_main_conf(r, module)`\n- `ngx_http_get_module_srv_conf(r, module)`\n- `ngx_http_get_module_loc_conf(r, module)`\n\nThese macros receive a reference to an HTTP request `ngx_http_request_t`. The main configuration of a request never changes. Server configuration can change from the default after the virtual server for the request is chosen. Location configuration selected for processing a request can change multiple times as a result of a rewrite operation or internal redirect. The following example shows how to access a module's HTTP configuration at runtime.\n\n``` nginx\nstatic ngx_int_t\nngx_http_foo_handler(ngx_http_request_t *r)\n{\n    ngx_http_foo_loc_conf_t  *flcf;\n\n    flcf = ngx_http_get_module_loc_conf(r, ngx_http_foo_module);\n\n    ...\n}\n```\n\n#### Phases\n\nEach HTTP request passes through a sequence of phases. In each phase a distinct type of processing is performed on the request. Module-specific handlers can be registered in most phases, and many standard nginx modules register their phase handlers as a way to get called at a specific stage of request processing. Phases are processed successively and the phase handlers are called once the request reaches the phase. Following is the list of nginx HTTP phases.\n\n- `NGX_HTTP_POST_READ_PHASE` — First phase. The [ngx_http_realip_module](../http/ngx_http_realip_module) registers its handler at this phase to enable substitution of client addresses before any other module is invoked.\n- `NGX_HTTP_SERVER_REWRITE_PHASE` — Phase where rewrite directives defined in a `server` block (but outside a `location` block) are processed. The [ngx_http_rewrite_module](../http/ngx_http_rewrite_module) installs its handler at this phase.\n- `NGX_HTTP_FIND_CONFIG_PHASE` — Special phase where a location is chosen based on the request URI. Before this phase, the default location for the relevant virtual server is assigned to the request, and any module requesting a location configuration receives the configuration for the default server location. This phase assigns a new location to the request. No additional handlers can be registered at this phase.\n- `NGX_HTTP_REWRITE_PHASE` — Same as `NGX_HTTP_SERVER_REWRITE_PHASE`, but for rewrite rules defined in the location, chosen in the previous phase.\n- `NGX_HTTP_POST_REWRITE_PHASE` — Special phase where the request is redirected to a new location if its URI changed during a rewrite. This is implemented by the request going through the `NGX_HTTP_FIND_CONFIG_PHASE` again. No additional handlers can be registered at this phase.\n- `NGX_HTTP_PREACCESS_PHASE` — A common phase for different types of handlers, not associated with access control. The standard nginx modules [ngx_http_limit_conn_module](../http/ngx_http_limit_conn_module) and [ngx_http_limit_req_module](../http/ngx_http_limit_req_module) register their handlers at this phase.\n- `NGX_HTTP_ACCESS_PHASE` — Phase where it is verified that the client is authorized to make the request. Standard nginx modules such as [ngx_http_access_module](../http/ngx_http_access_module) and [ngx_http_auth_basic_module](../http/ngx_http_auth_basic_module) register their handlers at this phase. By default the client must pass the authorization check of all handlers registered at this phase for the request to continue to the next phase. The [satisfy](../http/ngx_http_core_module#satisfy) directive, can be used to permit processing to continue if any of the phase handlers authorizes the client.\n- `NGX_HTTP_POST_ACCESS_PHASE` — Special phase where the [satisfy any](../http/ngx_http_core_module#satisfy) directive is processed. If some access phase handlers denied access and none explicitly allowed it, the request is finalized. No additional handlers can be registered at this phase.\n- `NGX_HTTP_PRECONTENT_PHASE` — Phase for handlers to be called prior to generating content. Standard modules such as [ngx_http_try_files_module](../http/ngx_http_core_module#try_files) and [ngx_http_mirror_module](../http/ngx_http_mirror_module) register their handlers at this phase.\n- `NGX_HTTP_CONTENT_PHASE` — Phase where the response is normally generated. Multiple nginx standard modules register their handlers at this phase, including [ngx_http_index_module](../http/ngx_http_index_module) or `ngx_http_static_module`. They are called sequentially until one of them produces the output. It's also possible to set content handlers on a per-location basis. If the [ngx_http_core_module](../http/ngx_http_core_module)'s location configuration has `handler` set, it is called as the content handler and the handlers installed at this phase are ignored.\n- `NGX_HTTP_LOG_PHASE` — Phase where request logging is performed. Currently, only the [ngx_http_log_module](../http/ngx_http_log_module) registers its handler at this stage for access logging. Log phase handlers are called at the very end of request processing, right before freeing the request.\n\nFollowing is the example of a preaccess phase handler.\n\n``` nginx\nstatic ngx_http_module_t  ngx_http_foo_module_ctx = {\n    NULL,                                  /* preconfiguration */\n    ngx_http_foo_init,                     /* postconfiguration */\n\n    NULL,                                  /* create main configuration */\n    NULL,                                  /* init main configuration */\n\n    NULL,                                  /* create server configuration */\n    NULL,                                  /* merge server configuration */\n\n    NULL,                                  /* create location configuration */\n    NULL                                   /* merge location configuration */\n};\n\n\nstatic ngx_int_t\nngx_http_foo_handler(ngx_http_request_t *r)\n{\n    ngx_table_elt_t  *ua;\n\n    ua = r->headers_in.user_agent;\n\n    if (ua == NULL) {\n        return NGX_DECLINED;\n    }\n\n    /* reject requests with \"User-Agent: foo\" */\n    if (ua->value.len == 3 && ngx_strncmp(ua->value.data, \"foo\", 3) == 0) {\n        return NGX_HTTP_FORBIDDEN;\n    }\n\n    return NGX_DECLINED;\n}\n\n\nstatic ngx_int_t\nngx_http_foo_init(ngx_conf_t *cf)\n{\n    ngx_http_handler_pt        *h;\n    ngx_http_core_main_conf_t  *cmcf;\n\n    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);\n\n    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers);\n    if (h == NULL) {\n        return NGX_ERROR;\n    }\n\n    *h = ngx_http_foo_handler;\n\n    return NGX_OK;\n}\n```\n\nPhase handlers are expected to return specific codes:\n\n- `NGX_OK` — Proceed to the next phase.\n- `NGX_DECLINED` — Proceed to the next handler of the current phase. If the current handler is the last in the current phase, move to the next phase.\n- `NGX_AGAIN`, `NGX_DONE` — Suspend phase handling until some future event which can be an asynchronous I/O operation or just a delay, for example. It is assumed, that phase handling will be resumed later by calling `ngx_http_core_run_phases()`.\n- Any other value returned by the phase handler is treated as a request finalization code, in particular, an HTTP response code. The request is finalized with the code provided.\n\nFor some phases, return codes are treated in a slightly different way. At the content phase, any return code other that `NGX_DECLINED` is considered a finalization code. Any return code from the location content handlers is considered a finalization code. At the access phase, in [satisfy any](../http/ngx_http_core_module#satisfy) mode, any return code other than `NGX_OK`, `NGX_DECLINED`, `NGX_AGAIN`, `NGX_DONE` is considered a denial. If no subsequent access handlers allow or deny access with a different code, the denial code will become the finalization code.\n\n#### Variables\n\n#### Accessing existing variables\n\nVariables can be referenced by index (this is the most common method) or name (see [below](#http_creating_variables)). The index is created at configuration stage, when a variable is added to the configuration. To obtain the variable index, use `ngx_http_get_variable_index()`:\n\n``` nginx\nngx_str_t  name;  /* ngx_string(\"foo\") */\nngx_int_t  index;\n\nindex = ngx_http_get_variable_index(cf, &name);\n```\n\nHere, `cf` is a pointer to nginx configuration and `name` points to a string containing the variable name. The function returns `NGX_ERROR` on error or a valid index otherwise, which is typically stored somewhere in the module's configuration for future use.\n\nAll HTTP variables are evaluated in the context of a given HTTP request, and results are specific to and cached in that HTTP request. All functions that evaluate variables return the `ngx_http_variable_value_t` type, representing the variable value:\n\n``` nginx\ntypedef ngx_variable_value_t  ngx_http_variable_value_t;\n\ntypedef struct {\n    unsigned    len:28;\n\n    unsigned    valid:1;\n    unsigned    no_cacheable:1;\n    unsigned    not_found:1;\n    unsigned    escape:1;\n\n    u_char     *data;\n} ngx_variable_value_t;\n```\n\nwhere:\n\n- `len` — The length of the value\n- `data` — The value itself\n- `valid` — The value is valid\n- `not_found` — The variable was not found and thus the `data` and `len` fields are irrelevant; this can happen, for example, with variables like `$arg_foo` when a corresponding argument was not passed in a request\n- `no_cacheable` — Do not cache result\n- `escape` — Used internally by the logging module to mark values that require escaping on output.\n\nThe `ngx_http_get_flushed_variable()` and `ngx_http_get_indexed_variable()` functions are used to obtain the value of a variable. They have the same interface - accepting an HTTP request `r` as a context for evaluating the variable and an `index` that identifies it. An example of typical usage:\n\n``` nginx\nngx_http_variable_value_t  *v;\n\nv = ngx_http_get_flushed_variable(r, index);\n\nif (v == NULL || v->not_found) {\n    /* we failed to get value or there is no such variable, handle it */\n    return NGX_ERROR;\n}\n\n/* some meaningful value is found */\n```\n\nThe difference between functions is that the `ngx_http_get_indexed_variable()` returns a cached value and `ngx_http_get_flushed_variable()` flushes the cache for non-cacheable variables.\n\nSome modules, such as SSI and Perl, need to deal with variables for which the name is not known at configuration time. An index therefore cannot be used to access them, but the `ngx_http_get_variable(r, name, key)` function is available. It searches for a variable with a given `name` and its hash `key` derived from the name.\n\n#### Creating variables\n\nTo create a variable, use the `ngx_http_add_variable()` function. It takes as arguments a configuration (where the variable is registered), the variable name and flags that control the function's behaviour:\n\n- `NGX_HTTP_VAR_CHANGEABLE` — Enables redefinition of the variable: there is no conflict if another module defines a variable with the same name. This allows the [set](../http/ngx_http_rewrite_module#set) directive to override variables.\n- `NGX_HTTP_VAR_NOCACHEABLE` — Disables caching, which is useful for variables such as `$time_local`.\n- `NGX_HTTP_VAR_NOHASH` — Indicates that this variable is only accessible by index, not by name. This is a small optimization for use when it is known that the variable is not needed in modules like SSI or Perl.\n- `NGX_HTTP_VAR_PREFIX` — The name of the variable is a prefix. In this case, a handler must implement additional logic to obtain the value of a specific variable. For example, all “`arg_`” variables are processed by the same handler, which performs lookup in request arguments and returns the value of a specific argument.\n\nThe function returns NULL in case of error or a pointer to `ngx_http_variable_t` otherwise:\n\n``` nginx\nstruct ngx_http_variable_s {\n    ngx_str_t                     name;\n    ngx_http_set_variable_pt      set_handler;\n    ngx_http_get_variable_pt      get_handler;\n    uintptr_t                     data;\n    ngx_uint_t                    flags;\n    ngx_uint_t                    index;\n};\n```\n\nThe `get` and `set` handlers are called to obtain or set the variable value, `data` is passed to variable handlers, and `index` holds assigned variable index used to reference the variable.\n\nUsually, a null-terminated static array of `ngx_http_variable_t` structures is created by a module and processed at the preconfiguration stage to add variables into the configuration, for example:\n\n``` nginx\nstatic ngx_http_variable_t  ngx_http_foo_vars[] = {\n\n    { ngx_string(\"foo_v1\"), NULL, ngx_http_foo_v1_variable, 0, 0, 0 },\n\n      ngx_http_null_variable\n};\n\nstatic ngx_int_t\nngx_http_foo_add_variables(ngx_conf_t *cf)\n{\n    ngx_http_variable_t  *var, *v;\n\n    for (v = ngx_http_foo_vars; v->name.len; v++) {\n        var = ngx_http_add_variable(cf, &v->name, v->flags);\n        if (var == NULL) {\n            return NGX_ERROR;\n        }\n\n        var->get_handler = v->get_handler;\n        var->data = v->data;\n    }\n\n    return NGX_OK;\n}\n```\n\nThis function in the example is used to initialize the `preconfiguration` field of the HTTP module context and is called before the parsing of HTTP configuration, so that the parser can refer to these variables.\n\nThe `get` handler is responsible for evaluating a variable in the context of a specific request, for example:\n\n``` nginx\nstatic ngx_int_t\nngx_http_variable_connection(ngx_http_request_t *r,\n    ngx_http_variable_value_t *v, uintptr_t data)\n{\n    u_char  *p;\n\n    p = ngx_pnalloc(r->pool, NGX_ATOMIC_T_LEN);\n    if (p == NULL) {\n        return NGX_ERROR;\n    }\n\n    v->len = ngx_sprintf(p, \"%uA\", r->connection->number) - p;\n    v->valid = 1;\n    v->no_cacheable = 0;\n    v->not_found = 0;\n    v->data = p;\n\n    return NGX_OK;\n}\n```\n\nIt returns `NGX_ERROR` in case of internal error (for example, failed memory allocation) or `NGX_OK` otherwise. To learn the status of variable evaluation, inspect the flags in `ngx_http_variable_value_t` (see the description [above](#http_existing_variables)).\n\nThe `set` handler allows setting the property referenced by the variable. For example, the set handler of the `$limit_rate` variable modifies the request's `limit_rate` field:\n\n``` nginx\n...\n{ ngx_string(\"limit_rate\"), ngx_http_variable_request_set_size,\n  ngx_http_variable_request_get_size,\n  offsetof(ngx_http_request_t, limit_rate),\n  NGX_HTTP_VAR_CHANGEABLE|NGX_HTTP_VAR_NOCACHEABLE, 0 },\n...\n\nstatic void\nngx_http_variable_request_set_size(ngx_http_request_t *r,\n    ngx_http_variable_value_t *v, uintptr_t data)\n{\n    ssize_t    s, *sp;\n    ngx_str_t  val;\n\n    val.len = v->len;\n    val.data = v->data;\n\n    s = ngx_parse_size(&val);\n\n    if (s == NGX_ERROR) {\n        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,\n                      \"invalid size \\\"%V\\\"\", &val);\n        return;\n    }\n\n    sp = (ssize_t *) ((char *) r + data);\n\n    *sp = s;\n\n    return;\n}\n```\n\n#### Complex values\n\nA complex value, despite its name, provides an easy way to evaluate expressions which can contain text, variables, and their combination.\n\nThe complex value description in `ngx_http_compile_complex_value` is compiled at the configuration stage into `ngx_http_complex_value_t` which is used at runtime to obtain results of expression evaluation.\n\n``` nginx\nngx_str_t                         *value;\nngx_http_complex_value_t           cv;\nngx_http_compile_complex_value_t   ccv;\n\nvalue = cf->args->elts; /* directive arguments */\n\nngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));\n\nccv.cf = cf;\nccv.value = &value[1];\nccv.complex_value = &cv;\nccv.zero = 1;\nccv.conf_prefix = 1;\n\nif (ngx_http_compile_complex_value(&ccv) != NGX_OK) {\n    return NGX_CONF_ERROR;\n}\n```\n\nHere, `ccv` holds all parameters that are required to initialize the complex value `cv`:\n\n- `cf` — Configuration pointer\n- `value` — String to be parsed (input)\n- `complex_value` — Compiled value (output)\n- `zero` — Flag that enables zero-terminating value\n- `conf_prefix` — Prefixes the result with the configuration prefix (the directory where nginx is currently looking for configuration)\n- `root_prefix` — Prefixes the result with the root prefix (the normal nginx installation prefix)\n\nThe `zero` flag is useful when results are to be passed to libraries that require zero-terminated strings, and prefixes are handy when dealing with filenames.\n\nUpon successful compilation, `cv.lengths` contains information about the presence of variables in the expression. The NULL value means that the expression contained static text only, and so can be stored in a simple string rather than as a complex value.\n\nThe `ngx_http_set_complex_value_slot()` is a convenient function used to initialize a complex value completely in the directive declaration itself.\n\nAt runtime, a complex value can be calculated using the `ngx_http_complex_value()` function:\n\n``` nginx\nngx_str_t  res;\n\nif (ngx_http_complex_value(r, &cv, &res) != NGX_OK) {\n    return NGX_ERROR;\n}\n```\n\nGiven the request `r` and previously compiled value `cv`, the function evaluates the expression and writes the result to `res`.\n\n#### Request redirection\n\nAn HTTP request is always connected to a location via the `loc_conf` field of the `ngx_http_request_t` structure. This means that at any point the location configuration of any module can be retrieved from the request by calling `ngx_http_get_module_loc_conf(r, module)`. Request location can change several times during the request's lifetime. Initially, a default server location of the default server is assigned to a request. If the request switches to a different server (chosen by the HTTP “Host” header or SSL SNI extension), the request switches to the default location of that server as well. The next change of the location takes place at the `NGX_HTTP_FIND_CONFIG_PHASE` request phase. At this phase a location is chosen by request URI among all non-named locations configured for the server. The [ngx_http_rewrite_module](../http/ngx_http_rewrite_module) can change the request URI at the `NGX_HTTP_REWRITE_PHASE` request phase as a result of the [rewrite](../http/ngx_http_rewrite_module#rewrite) directive and send the request back to the `NGX_HTTP_FIND_CONFIG_PHASE` phase for selection of a new location based on the new URI.\n\nIt is also possible to redirect a request to a new location at any point by calling one of `ngx_http_internal_redirect(r, uri, args)` or `ngx_http_named_location(r, name)`.\n\nThe `ngx_http_internal_redirect(r, uri, args)` function changes the request URI and returns the request to the `NGX_HTTP_SERVER_REWRITE_PHASE` phase. The request proceeds with a server default location. Later at `NGX_HTTP_FIND_CONFIG_PHASE` a new location is chosen based on the new request URI.\n\nThe following example performs an internal redirect with the new request arguments.\n\n``` nginx\nngx_int_t\nngx_http_foo_redirect(ngx_http_request_t *r)\n{\n    ngx_str_t  uri, args;\n\n    ngx_str_set(&uri, \"/foo\");\n    ngx_str_set(&args, \"bar=1\");\n\n    return ngx_http_internal_redirect(r, &uri, &args);\n}\n```\n\nThe function `ngx_http_named_location(r, name)` redirects a request to a named location. The name of the location is passed as the argument. The location is looked up among all named locations of the current server, after which the requests switches to the `NGX_HTTP_REWRITE_PHASE` phase.\n\nThe following example performs a redirect to a named location @foo.\n\n``` nginx\nngx_int_t\nngx_http_foo_named_redirect(ngx_http_request_t *r)\n{\n    ngx_str_t  name;\n\n    ngx_str_set(&name, \"foo\");\n\n    return ngx_http_named_location(r, &name);\n}\n```\n\nBoth functions - `ngx_http_internal_redirect(r, uri, args)` and `ngx_http_named_location(r, name)` can be called when nginx modules have already stored some contexts in a request's `ctx` field. It's possible for these contexts to become inconsistent with the new location configuration. To prevent inconsistency, all request contexts are erased by both redirect functions.\n\nCalling `ngx_http_internal_redirect(r, uri, args)` or `ngx_http_named_location(r, name)` increases the request `count`. For consistent request reference counting, call `ngx_http_finalize_request(r, NGX_DONE)` after redirecting the request. This will finalize current request code path and decrease the counter.\n\nRedirected and rewritten requests become internal and can access the [internal](../http/ngx_http_core_module#internal) locations. Internal requests have the `internal` flag set.\n\n#### Subrequests\n\nSubrequests are primarily used to insert output of one request into another, possibly mixed with other data. A subrequest looks like a normal request, but shares some data with its parent. In particular, all fields related to client input are shared because a subrequest does not receive any other input from the client. The request field `parent` for a subrequest contains a link to its parent request and is NULL for the main request. The field `main` contains a link to the main request in a group of requests.\n\nA subrequest starts in the `NGX_HTTP_SERVER_REWRITE_PHASE` phase. It passes through the same subsequent phases as a normal request and is assigned a location based on its own URI.\n\nThe output header in a subrequest is always ignored. The `ngx_http_postpone_filter` places the subrequest's output body in the right position relative to other data produced by the parent request.\n\nSubrequests are related to the concept of active requests. A request `r` is considered active if `c->data == r`, where `c` is the client connection object. At any given point, only the active request in a request group is allowed to output its buffers to the client. An inactive request can still send its output to the filter chain, but it does not pass beyond the `ngx_http_postpone_filter` and remains buffered by that filter until the request becomes active. Here are some rules of request activation:\n\n- Initially, the main request is active.\n- The first subrequest of an active request becomes active right after creation.\n- The `ngx_http_postpone_filter` activates the next request in the active request's subrequest list, once all data prior to that request are sent.\n- When a request is finalized, its parent is activated.\n\nCreate a subrequest by calling the function `ngx_http_subrequest(r, uri, args, psr, ps, flags)`, where `r` is the parent request, `uri` and `args` are the URI and arguments of the subrequest, `psr` is the output parameter, which receives the newly created subrequest reference, `ps` is a callback object for notifying the parent request that the subrequest is being finalized, and `flags` is bitmask of flags. The following flags are available:\n\n- `NGX_HTTP_SUBREQUEST_IN_MEMORY` - Output is not sent to the client, but rather stored in memory. The flag only affects subrequests which are processed by one of the proxying modules. After a subrequest is finalized its output is available in `r->out` of type `ngx_buf_t`.\n- `NGX_HTTP_SUBREQUEST_WAITED` - The subrequest's `done` flag is set even if the subrequest is not active when it is finalized. This subrequest flag is used by the SSI filter.\n- `NGX_HTTP_SUBREQUEST_CLONE` - The subrequest is created as a clone of its parent. It is started at the same location and proceeds from the same phase as the parent request.\n\nThe following example creates a subrequest with the URI of `/foo`.\n\n``` nginx\nngx_int_t            rc;\nngx_str_t            uri;\nngx_http_request_t  *sr;\n\n...\n\nngx_str_set(&uri, \"/foo\");\n\nrc = ngx_http_subrequest(r, &uri, NULL, &sr, NULL, 0);\nif (rc == NGX_ERROR) {\n    /* error */\n}\n```\n\nThis example clones the current request and sets a finalization callback for the subrequest.\n\n``` nginx\nngx_int_t\nngx_http_foo_clone(ngx_http_request_t *r)\n{\n    ngx_http_request_t          *sr;\n    ngx_http_post_subrequest_t  *ps;\n\n    ps = ngx_palloc(r->pool, sizeof(ngx_http_post_subrequest_t));\n    if (ps == NULL) {\n        return NGX_ERROR;\n    }\n\n    ps->handler = ngx_http_foo_subrequest_done;\n    ps->data = \"foo\";\n\n    return ngx_http_subrequest(r, &r->uri, &r->args, &sr, ps,\n                               NGX_HTTP_SUBREQUEST_CLONE);\n}\n\n\nngx_int_t\nngx_http_foo_subrequest_done(ngx_http_request_t *r, void *data, ngx_int_t rc)\n{\n    char  *msg = (char *) data;\n\n    ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,\n                  \"done subrequest r:%p msg:%s rc:%i\", r, msg, rc);\n\n    return rc;\n}\n```\n\nSubrequests are normally created in a body filter, in which case their output can be treated like the output from any explicit request. This means that eventually the output of a subrequest is sent to the client, after all explicit buffers that are passed before subrequest creation and before any buffers that are passed after creation. This ordering is preserved even for large hierarchies of subrequests. The following example inserts output from a subrequest after all request data buffers, but before the final buffer with the `last_buf` flag.\n\n``` nginx\nngx_int_t\nngx_http_foo_body_filter(ngx_http_request_t *r, ngx_chain_t *in)\n{\n    ngx_int_t                   rc;\n    ngx_buf_t                  *b;\n    ngx_uint_t                  last;\n    ngx_chain_t                *cl, out;\n    ngx_http_request_t         *sr;\n    ngx_http_foo_filter_ctx_t  *ctx;\n\n    ctx = ngx_http_get_module_ctx(r, ngx_http_foo_filter_module);\n    if (ctx == NULL) {\n        return ngx_http_next_body_filter(r, in);\n    }\n\n    last = 0;\n\n    for (cl = in; cl; cl = cl->next) {\n        if (cl->buf->last_buf) {\n            cl->buf->last_buf = 0;\n            cl->buf->last_in_chain = 1;\n            cl->buf->sync = 1;\n            last = 1;\n        }\n    }\n\n    /* Output explicit output buffers */\n\n    rc = ngx_http_next_body_filter(r, in);\n\n    if (rc == NGX_ERROR || !last) {\n        return rc;\n    }\n\n    /*\n     * Create the subrequest.  The output of the subrequest\n     * will automatically be sent after all preceding buffers,\n     * but before the last_buf buffer passed later in this function.\n     */\n\n    if (ngx_http_subrequest(r, ctx->uri, NULL, &sr, NULL, 0) != NGX_OK) {\n        return NGX_ERROR;\n    }\n\n    ngx_http_set_ctx(r, NULL, ngx_http_foo_filter_module);\n\n    /* Output the final buffer with the last_buf flag */\n\n    b = ngx_calloc_buf(r->pool);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    b->last_buf = 1;\n\n    out.buf = b;\n    out.next = NULL;\n\n    return ngx_http_output_filter(r, &out);\n}\n```\n\nA subrequest can also be created for other purposes than data output. For example, the [ngx_http_auth_request_module](../http/ngx_http_auth_request_module) module creates a subrequest at the `NGX_HTTP_ACCESS_PHASE` phase. To disable output at this point, the `header_only` flag is set on the subrequest. This prevents the subrequest body from being sent to the client. Note that the subrequest's header is never sent to the client. The result of the subrequest can be analyzed in the callback handler.\n\n#### Request finalization\n\nAn HTTP request is finalized by calling the function `ngx_http_finalize_request(r, rc)`. It is usually finalized by the content handler after all output buffers are sent to the filter chain. At this point all of the output might not be sent to the client, with some of it remaining buffered somewhere along the filter chain. If it is, the `ngx_http_finalize_request(r, rc)` function automatically installs a special handler `ngx_http_writer(r)` to finish sending the output. A request is also finalized in case of an error or if a standard HTTP response code needs to be returned to the client.\n\nThe function `ngx_http_finalize_request(r, rc)` expects the following `rc` values:\n\n- `NGX_DONE` - Fast finalization. Decrement the request `count` and destroy the request if it reaches zero. The client connection can be used for more requests after the current request is destroyed.\n- `NGX_ERROR`, `NGX_HTTP_REQUEST_TIME_OUT` (`408`), `NGX_HTTP_CLIENT_CLOSED_REQUEST` (`499`) - Error finalization. Terminate the request as soon as possible and close the client connection.\n- `NGX_HTTP_CREATED` (`201`), `NGX_HTTP_NO_CONTENT` (`204`), codes greater than or equal to `NGX_HTTP_SPECIAL_RESPONSE` (`300`) - Special response finalization. For these values nginx either sends to the client a default response page for the code or performs the internal redirect to an [error_page](../http/ngx_http_core_module#error_page) location if that is configured for the code.\n- Other codes are considered successful finalization codes and might activate the request writer to finish sending the response body. Once the body is completely sent, the request `count` is decremented. If it reaches zero, the request is destroyed, but the client connection can still be used for other requests. If `count` is positive, there are unfinished activities within the request, which will be finalized at a later point.\n\n#### Request body\n\nFor dealing with the body of a client request, nginx provides the `ngx_http_read_client_request_body(r, post_handler)` and `ngx_http_discard_request_body(r)` functions. The first function reads the request body and makes it available via the `request_body` request field. The second function instructs nginx to discard (read and ignore) the request body. One of these functions must be called for every request. Normally, the content handler makes the call.\n\nReading or discarding the client request body from a subrequest is not allowed. It must always be done in the main request. When a subrequest is created, it inherits the parent's `request_body` object which can be used by the subrequest if the main request has previously read the request body.\n\nThe function `ngx_http_read_client_request_body(r, post_handler)` starts the process of reading the request body. When the body is completely read, the `post_handler` callback is called to continue processing the request. If the request body is missing or has already been read, the callback is called immediately. The function `ngx_http_read_client_request_body(r, post_handler)` allocates the `request_body` request field of type `ngx_http_request_body_t`. The field `bufs` of this object keeps the result as a buffer chain. The body can be saved in memory buffers or file buffers, if the capacity specified by the [client_body_buffer_size](../http/ngx_http_core_module#client_body_buffer_size) directive is not enough to fit the entire body in memory.\n\nThe following example reads a client request body and returns its size.\n\n``` nginx\nngx_int_t\nngx_http_foo_content_handler(ngx_http_request_t *r)\n{\n    ngx_int_t  rc;\n\n    rc = ngx_http_read_client_request_body(r, ngx_http_foo_init);\n\n    if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {\n        /* error */\n        return rc;\n    }\n\n    return NGX_DONE;\n}\n\n\nvoid\nngx_http_foo_init(ngx_http_request_t *r)\n{\n    off_t         len;\n    ngx_buf_t    *b;\n    ngx_int_t     rc;\n    ngx_chain_t  *in, out;\n\n    if (r->request_body == NULL) {\n        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);\n        return;\n    }\n\n    len = 0;\n\n    for (in = r->request_body->bufs; in; in = in->next) {\n        len += ngx_buf_size(in->buf);\n    }\n\n    b = ngx_create_temp_buf(r->pool, NGX_OFF_T_LEN);\n    if (b == NULL) {\n        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);\n        return;\n    }\n\n    b->last = ngx_sprintf(b->pos, \"%O\", len);\n    b->last_buf = (r == r->main) ? 1 : 0;\n    b->last_in_chain = 1;\n\n    r->headers_out.status = NGX_HTTP_OK;\n    r->headers_out.content_length_n = b->last - b->pos;\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {\n        ngx_http_finalize_request(r, rc);\n        return;\n    }\n\n    out.buf = b;\n    out.next = NULL;\n\n    rc = ngx_http_output_filter(r, &out);\n\n    ngx_http_finalize_request(r, rc);\n}\n```\n\nThe following fields of the request determine how the request body is read:\n\n- `request_body_in_single_buf` - Read the body to a single memory buffer.\n- `request_body_in_file_only` - Always read the body to a file, even if fits in the memory buffer.\n- `request_body_in_persistent_file` - Do not unlink the file immediately after creation. A file with this flag can be moved to another directory.\n- `request_body_in_clean_file` - Unlink the file when the request is finalized. This can be useful when a file was supposed to be moved to another directory but was not moved for some reason.\n- `request_body_file_group_access` - Enable group access to the file by replacing the default 0600 access mask with 0660.\n- `request_body_file_log_level` - Severity level at which to log file errors.\n- `request_body_no_buffering` - Read the request body without buffering.\n\nThe `request_body_no_buffering` flag enables the unbuffered mode of reading a request body. In this mode, after calling `ngx_http_read_client_request_body()`, the `bufs` chain might keep only a part of the body. To read the next part, call the `ngx_http_read_unbuffered_request_body(r)` function. The return value `NGX_AGAIN` and the request flag `reading_body` indicate that more data is available. If `bufs` is NULL after calling this function, there is nothing to read at the moment. The request callback `read_event_handler` will be called when the next part of request body is available.\n\n#### Request body filters\n\nAfter a request body part is read, it's passed to the request body filter chain by calling the first body filter handler stored in the `ngx_http_top_request_body_filter` variable. It's assumed that every body handler calls the next handler in the chain until the final handler `ngx_http_request_body_save_filter(r, cl)` is called. This handler collects the buffers in `r->request_body->bufs` and writes them to a file if necessary. The last request body buffer has nonzero `last_buf` flag.\n\nIf a filter is planning to delay data buffers, it should set the flag `r->request_body->filter_need_buffering` to `1` when called for the first time.\n\nFollowing is an example of a simple request body filter that delays request body by one second.\n\n``` nginx\n#include <ngx_config.h>\n#include <ngx_core.h>\n#include <ngx_http.h>\n\n\n#define NGX_HTTP_DELAY_BODY  1000\n\n\ntypedef struct {\n    ngx_event_t   event;\n    ngx_chain_t  *out;\n} ngx_http_delay_body_ctx_t;\n\n\nstatic ngx_int_t ngx_http_delay_body_filter(ngx_http_request_t *r,\n    ngx_chain_t *in);\nstatic void ngx_http_delay_body_cleanup(void *data);\nstatic void ngx_http_delay_body_event_handler(ngx_event_t *ev);\nstatic ngx_int_t ngx_http_delay_body_init(ngx_conf_t *cf);\n\n\nstatic ngx_http_module_t  ngx_http_delay_body_module_ctx = {\n    NULL,                          /* preconfiguration */\n    ngx_http_delay_body_init,      /* postconfiguration */\n\n    NULL,                          /* create main configuration */\n    NULL,                          /* init main configuration */\n\n    NULL,                          /* create server configuration */\n    NULL,                          /* merge server configuration */\n\n    NULL,                          /* create location configuration */\n    NULL                           /* merge location configuration */\n};\n\n\nngx_module_t  ngx_http_delay_body_filter_module = {\n    NGX_MODULE_V1,\n    &ngx_http_delay_body_module_ctx, /* module context */\n    NULL,                          /* module directives */\n    NGX_HTTP_MODULE,               /* module type */\n    NULL,                          /* init master */\n    NULL,                          /* init module */\n    NULL,                          /* init process */\n    NULL,                          /* init thread */\n    NULL,                          /* exit thread */\n    NULL,                          /* exit process */\n    NULL,                          /* exit master */\n    NGX_MODULE_V1_PADDING\n};\n\n\nstatic ngx_http_request_body_filter_pt   ngx_http_next_request_body_filter;\n\n\nstatic ngx_int_t\nngx_http_delay_body_filter(ngx_http_request_t *r, ngx_chain_t *in)\n{\n    ngx_int_t                   rc;\n    ngx_chain_t                *cl, *ln;\n    ngx_http_cleanup_t         *cln;\n    ngx_http_delay_body_ctx_t  *ctx;\n\n    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,\n                   \"delay request body filter\");\n\n    ctx = ngx_http_get_module_ctx(r, ngx_http_delay_body_filter_module);\n\n    if (ctx == NULL) {\n        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_delay_body_ctx_t));\n        if (ctx == NULL) {\n            return NGX_HTTP_INTERNAL_SERVER_ERROR;\n        }\n\n        ngx_http_set_ctx(r, ctx, ngx_http_delay_body_filter_module);\n\n        r->request_body->filter_need_buffering = 1;\n    }\n\n    if (ngx_chain_add_copy(r->pool, &ctx->out, in) != NGX_OK) {\n        return NGX_HTTP_INTERNAL_SERVER_ERROR;\n    }\n\n    if (!ctx->event.timedout) {\n        if (!ctx->event.timer_set) {\n\n            /* cleanup to remove the timer in case of abnormal termination */\n\n            cln = ngx_http_cleanup_add(r, 0);\n            if (cln == NULL) {\n                return NGX_HTTP_INTERNAL_SERVER_ERROR;\n            }\n\n            cln->handler = ngx_http_delay_body_cleanup;\n            cln->data = ctx;\n\n            /* add timer */\n\n            ctx->event.handler = ngx_http_delay_body_event_handler;\n            ctx->event.data = r;\n            ctx->event.log = r->connection->log;\n\n            ngx_add_timer(&ctx->event, NGX_HTTP_DELAY_BODY);\n        }\n\n        return ngx_http_next_request_body_filter(r, NULL);\n    }\n\n    rc = ngx_http_next_request_body_filter(r, ctx->out);\n\n    for (cl = ctx->out; cl; /* void */) {\n        ln = cl;\n        cl = cl->next;\n        ngx_free_chain(r->pool, ln);\n    }\n\n    ctx->out = NULL;\n\n    return rc;\n}\n\n\nstatic void\nngx_http_delay_body_cleanup(void *data)\n{\n    ngx_http_delay_body_ctx_t *ctx = data;\n\n    if (ctx->event.timer_set) {\n        ngx_del_timer(&ctx->event);\n    }\n}\n\n\nstatic void\nngx_http_delay_body_event_handler(ngx_event_t *ev)\n{\n    ngx_connection_t    *c;\n    ngx_http_request_t  *r;\n\n    r = ev->data;\n    c = r->connection;\n\n    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,\n                   \"delay request body event\");\n\n    ngx_post_event(c->read, &ngx_posted_events);\n}\n\n\nstatic ngx_int_t\nngx_http_delay_body_init(ngx_conf_t *cf)\n{\n    ngx_http_next_request_body_filter = ngx_http_top_request_body_filter;\n    ngx_http_top_request_body_filter = ngx_http_delay_body_filter;\n\n    return NGX_OK;\n}\n```\n\n#### Response\n\nIn nginx an HTTP response is produced by sending the response header followed by the optional response body. Both header and body are passed through a chain of filters and eventually get written to the client socket. An nginx module can install its handler into the header or body filter chain and process the output coming from the previous handler.\n\n#### Response header\n\nThe `ngx_http_send_header(r)` function sends the output header. Do not call this function until `r->headers_out` contains all of the data required to produce the HTTP response header. The `status` field in `r->headers_out` must always be set. If the response status indicates that a response body follows the header, `content_length_n` can be set as well. The default value for this field is `-1`, which means that the body size is unknown. In this case, chunked transfer encoding is used. To output an arbitrary header, append the `headers` list.\n\n``` nginx\nstatic ngx_int_t\nngx_http_foo_content_handler(ngx_http_request_t *r)\n{\n    ngx_int_t         rc;\n    ngx_table_elt_t  *h;\n\n    /* send header */\n\n    r->headers_out.status = NGX_HTTP_OK;\n    r->headers_out.content_length_n = 3;\n\n    /* X-Foo: foo */\n\n    h = ngx_list_push(&r->headers_out.headers);\n    if (h == NULL) {\n        return NGX_ERROR;\n    }\n\n    h->hash = 1;\n    ngx_str_set(&h->key, \"X-Foo\");\n    ngx_str_set(&h->value, \"foo\");\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {\n        return rc;\n    }\n\n    /* send body */\n\n    ...\n}\n```\n\n#### Header filters\n\nThe `ngx_http_send_header(r)` function invokes the header filter chain by calling the first header filter handler stored in the `ngx_http_top_header_filter` variable. It's assumed that every header handler calls the next handler in the chain until the final handler `ngx_http_header_filter(r)` is called. The final header handler constructs the HTTP response based on `r->headers_out` and passes it to the `ngx_http_writer_filter` for output.\n\nTo add a handler to the header filter chain, store its address in the global variable `ngx_http_top_header_filter` at configuration time. The previous handler address is normally stored in a static variable in a module and is called by the newly added handler before exiting.\n\nThe following example of a header filter module adds the HTTP header \"`X-Foo: foo`\" to every response with status `200`.\n\n``` nginx\n#include <ngx_config.h>\n#include <ngx_core.h>\n#include <ngx_http.h>\n\n\nstatic ngx_int_t ngx_http_foo_header_filter(ngx_http_request_t *r);\nstatic ngx_int_t ngx_http_foo_header_filter_init(ngx_conf_t *cf);\n\n\nstatic ngx_http_module_t  ngx_http_foo_header_filter_module_ctx = {\n    NULL,                                   /* preconfiguration */\n    ngx_http_foo_header_filter_init,        /* postconfiguration */\n\n    NULL,                                   /* create main configuration */\n    NULL,                                   /* init main configuration */\n\n    NULL,                                   /* create server configuration */\n    NULL,                                   /* merge server configuration */\n\n    NULL,                                   /* create location configuration */\n    NULL                                    /* merge location configuration */\n};\n\n\nngx_module_t  ngx_http_foo_header_filter_module = {\n    NGX_MODULE_V1,\n    &ngx_http_foo_header_filter_module_ctx, /* module context */\n    NULL,                                   /* module directives */\n    NGX_HTTP_MODULE,                        /* module type */\n    NULL,                                   /* init master */\n    NULL,                                   /* init module */\n    NULL,                                   /* init process */\n    NULL,                                   /* init thread */\n    NULL,                                   /* exit thread */\n    NULL,                                   /* exit process */\n    NULL,                                   /* exit master */\n    NGX_MODULE_V1_PADDING\n};\n\n\nstatic ngx_http_output_header_filter_pt  ngx_http_next_header_filter;\n\n\nstatic ngx_int_t\nngx_http_foo_header_filter(ngx_http_request_t *r)\n{\n    ngx_table_elt_t  *h;\n\n    /*\n     * The filter handler adds \"X-Foo: foo\" header\n     * to every HTTP 200 response\n     */\n\n    if (r->headers_out.status != NGX_HTTP_OK) {\n        return ngx_http_next_header_filter(r);\n    }\n\n    h = ngx_list_push(&r->headers_out.headers);\n    if (h == NULL) {\n        return NGX_ERROR;\n    }\n\n    h->hash = 1;\n    ngx_str_set(&h->key, \"X-Foo\");\n    ngx_str_set(&h->value, \"foo\");\n\n    return ngx_http_next_header_filter(r);\n}\n\n\nstatic ngx_int_t\nngx_http_foo_header_filter_init(ngx_conf_t *cf)\n{\n    ngx_http_next_header_filter = ngx_http_top_header_filter;\n    ngx_http_top_header_filter = ngx_http_foo_header_filter;\n\n    return NGX_OK;\n}\n```\n\n#### Response body\n\nTo send the response body, call the `ngx_http_output_filter(r, cl)` function. The function can be called multiple times. Each time, it sends a part of the response body in the form of a buffer chain. Set the `last_buf` flag in the last body buffer.\n\nThe following example produces a complete HTTP response with \"foo\" as its body. For the example to work as subrequest as well as a main request, the `last_in_chain` flag is set in the last buffer of the output. The `last_buf` flag is set only for the main request because the last buffer for a subrequest does not end the entire output.\n\n``` nginx\nstatic ngx_int_t\nngx_http_bar_content_handler(ngx_http_request_t *r)\n{\n    ngx_int_t     rc;\n    ngx_buf_t    *b;\n    ngx_chain_t   out;\n\n    /* send header */\n\n    r->headers_out.status = NGX_HTTP_OK;\n    r->headers_out.content_length_n = 3;\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {\n        return rc;\n    }\n\n    /* send body */\n\n    b = ngx_calloc_buf(r->pool);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    b->last_buf = (r == r->main) ? 1 : 0;\n    b->last_in_chain = 1;\n\n    b->memory = 1;\n\n    b->pos = (u_char *) \"foo\";\n    b->last = b->pos + 3;\n\n    out.buf = b;\n    out.next = NULL;\n\n    return ngx_http_output_filter(r, &out);\n}\n```\n\n#### Response body filters\n\nThe function `ngx_http_output_filter(r, cl)` invokes the body filter chain by calling the first body filter handler stored in the `ngx_http_top_body_filter` variable. It's assumed that every body handler calls the next handler in the chain until the final handler `ngx_http_write_filter(r, cl)` is called.\n\nA body filter handler receives a chain of buffers. The handler is supposed to process the buffers and pass a possibly new chain to the next handler. It's worth noting that the chain links `ngx_chain_t` of the incoming chain belong to the caller, and must not be reused or changed. Right after the handler completes, the caller can use its output chain links to keep track of the buffers it has sent. To save the buffer chain or to substitute some buffers before passing to the next filter, a handler needs to allocate its own chain links.\n\nFollowing is an example of a simple body filter that counts the number of bytes in the body. The result is available as the `$counter` variable which can be used in the access log.\n\n``` nginx\n#include <ngx_config.h>\n#include <ngx_core.h>\n#include <ngx_http.h>\n\n\ntypedef struct {\n    off_t  count;\n} ngx_http_counter_filter_ctx_t;\n\n\nstatic ngx_int_t ngx_http_counter_body_filter(ngx_http_request_t *r,\n    ngx_chain_t *in);\nstatic ngx_int_t ngx_http_counter_variable(ngx_http_request_t *r,\n    ngx_http_variable_value_t *v, uintptr_t data);\nstatic ngx_int_t ngx_http_counter_add_variables(ngx_conf_t *cf);\nstatic ngx_int_t ngx_http_counter_filter_init(ngx_conf_t *cf);\n\n\nstatic ngx_http_module_t  ngx_http_counter_filter_module_ctx = {\n    ngx_http_counter_add_variables,        /* preconfiguration */\n    ngx_http_counter_filter_init,          /* postconfiguration */\n\n    NULL,                                  /* create main configuration */\n    NULL,                                  /* init main configuration */\n\n    NULL,                                  /* create server configuration */\n    NULL,                                  /* merge server configuration */\n\n    NULL,                                  /* create location configuration */\n    NULL                                   /* merge location configuration */\n};\n\n\nngx_module_t  ngx_http_counter_filter_module = {\n    NGX_MODULE_V1,\n    &ngx_http_counter_filter_module_ctx,   /* module context */\n    NULL,                                  /* module directives */\n    NGX_HTTP_MODULE,                       /* module type */\n    NULL,                                  /* init master */\n    NULL,                                  /* init module */\n    NULL,                                  /* init process */\n    NULL,                                  /* init thread */\n    NULL,                                  /* exit thread */\n    NULL,                                  /* exit process */\n    NULL,                                  /* exit master */\n    NGX_MODULE_V1_PADDING\n};\n\n\nstatic ngx_http_output_body_filter_pt  ngx_http_next_body_filter;\n\nstatic ngx_str_t  ngx_http_counter_name = ngx_string(\"counter\");\n\n\nstatic ngx_int_t\nngx_http_counter_body_filter(ngx_http_request_t *r, ngx_chain_t *in)\n{\n    ngx_chain_t                    *cl;\n    ngx_http_counter_filter_ctx_t  *ctx;\n\n    ctx = ngx_http_get_module_ctx(r, ngx_http_counter_filter_module);\n    if (ctx == NULL) {\n        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_counter_filter_ctx_t));\n        if (ctx == NULL) {\n            return NGX_ERROR;\n        }\n\n        ngx_http_set_ctx(r, ctx, ngx_http_counter_filter_module);\n    }\n\n    for (cl = in; cl; cl = cl->next) {\n        ctx->count += ngx_buf_size(cl->buf);\n    }\n\n    return ngx_http_next_body_filter(r, in);\n}\n\n\nstatic ngx_int_t\nngx_http_counter_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,\n    uintptr_t data)\n{\n    u_char                         *p;\n    ngx_http_counter_filter_ctx_t  *ctx;\n\n    ctx = ngx_http_get_module_ctx(r, ngx_http_counter_filter_module);\n    if (ctx == NULL) {\n        v->not_found = 1;\n        return NGX_OK;\n    }\n\n    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);\n    if (p == NULL) {\n        return NGX_ERROR;\n    }\n\n    v->data = p;\n    v->len = ngx_sprintf(p, \"%O\", ctx->count) - p;\n    v->valid = 1;\n    v->no_cacheable = 0;\n    v->not_found = 0;\n\n    return NGX_OK;\n}\n\n\nstatic ngx_int_t\nngx_http_counter_add_variables(ngx_conf_t *cf)\n{\n    ngx_http_variable_t  *var;\n\n    var = ngx_http_add_variable(cf, &ngx_http_counter_name, 0);\n    if (var == NULL) {\n        return NGX_ERROR;\n    }\n\n    var->get_handler = ngx_http_counter_variable;\n\n    return NGX_OK;\n}\n\n\nstatic ngx_int_t\nngx_http_counter_filter_init(ngx_conf_t *cf)\n{\n    ngx_http_next_body_filter = ngx_http_top_body_filter;\n    ngx_http_top_body_filter = ngx_http_counter_body_filter;\n\n    return NGX_OK;\n}\n```\n\n#### Building filter modules\n\nWhen writing a body or header filter, pay special attention to the filter's position in the filter order. There's a number of header and body filters registered by nginx standard modules. The nginx standard modules register a number of head and body filters and it's important to register a new filter module in the right place with respect to them. Normally, modules register filters in their postconfiguration handlers. The order in which filters are called during processing is obviously the reverse of the order in which they are registered.\n\nFor third-party filter modules nginx provides a special slot `HTTP_AUX_FILTER_MODULES`. To register a filter module in this slot, set the `ngx_module_type` variable to `HTTP_AUX_FILTER` in the module's configuration.\n\nThe following example shows a filter module config file assuming for a module with just one source file, `ngx_http_foo_filter_module.c`.\n\n``` nginx\nngx_module_type=HTTP_AUX_FILTER\nngx_module_name=ngx_http_foo_filter_module\nngx_module_srcs=\"$ngx_addon_dir/ngx_http_foo_filter_module.c\"\n\n. auto/module\n```\n\n#### Buffer reuse\n\nWhen issuing or altering a stream of buffers, it's often desirable to reuse the allocated buffers. A standard and widely adopted approach in nginx code is to keep two buffer chains for this purpose: `free` and `busy`. The `free` chain keeps all free buffers, which can be reused. The `busy` chain keeps all buffers sent by the current module that are still in use by some other filter handler. A buffer is considered in use if its size is greater than zero. Normally, when a buffer is consumed by a filter, its `pos` (or `file_pos` for a file buffer) is moved towards `last` (`file_last` for a file buffer). Once a buffer is completely consumed, it's ready to be reused. To add newly freed buffers to the `free` chain it's enough to iterate over the `busy` chain and move the zero size buffers at the head of it to `free`. This operation is so common that there is a special function for it, `ngx_chain_update_chains(free, busy, out, tag)`. The function appends the output chain `out` to `busy` and moves free buffers from the top of `busy` to `free`. Only the buffers with the specified `tag` are reused. This lets a module reuse only the buffers that it allocated itself.\n\nThe following example is a body filter that inserts the string “foo” before each incoming buffer. The new buffers allocated by the module are reused if possible. Note that for this example to work properly, setting up a [header filter](#http_header_filters) and resetting `content_length_n` to `-1` is also required, but the relevant code is not provided here.\n\n``` nginx\ntypedef struct {\n    ngx_chain_t  *free;\n    ngx_chain_t  *busy;\n}  ngx_http_foo_filter_ctx_t;\n\n\nngx_int_t\nngx_http_foo_body_filter(ngx_http_request_t *r, ngx_chain_t *in)\n{\n    ngx_int_t                   rc;\n    ngx_buf_t                  *b;\n    ngx_chain_t                *cl, *tl, *out, **ll;\n    ngx_http_foo_filter_ctx_t  *ctx;\n\n    ctx = ngx_http_get_module_ctx(r, ngx_http_foo_filter_module);\n    if (ctx == NULL) {\n        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_foo_filter_ctx_t));\n        if (ctx == NULL) {\n            return NGX_ERROR;\n        }\n\n        ngx_http_set_ctx(r, ctx, ngx_http_foo_filter_module);\n    }\n\n    /* create a new chain \"out\" from \"in\" with all the changes */\n\n    ll = &out;\n\n    for (cl = in; cl; cl = cl->next) {\n\n        /* append \"foo\" in a reused buffer if possible */\n\n        tl = ngx_chain_get_free_buf(r->pool, &ctx->free);\n        if (tl == NULL) {\n            return NGX_ERROR;\n        }\n\n        b = tl->buf;\n        b->tag = (ngx_buf_tag_t) &ngx_http_foo_filter_module;\n        b->memory = 1;\n        b->pos = (u_char *) \"foo\";\n        b->last = b->pos + 3;\n\n        *ll = tl;\n        ll = &tl->next;\n\n        /* append the next incoming buffer */\n\n        tl = ngx_alloc_chain_link(r->pool);\n        if (tl == NULL) {\n            return NGX_ERROR;\n        }\n\n        tl->buf = cl->buf;\n        *ll = tl;\n        ll = &tl->next;\n    }\n\n    *ll = NULL;\n\n    /* send the new chain */\n\n    rc = ngx_http_next_body_filter(r, out);\n\n    /* update \"busy\" and \"free\" chains for reuse */\n\n    ngx_chain_update_chains(r->pool, &ctx->free, &ctx->busy, &out,\n                            (ngx_buf_tag_t) &ngx_http_foo_filter_module);\n\n    return rc;\n}\n```\n\n#### Load balancing\n\nThe [ngx_http_upstream_module](../http/ngx_http_upstream_module) provides the basic functionality needed to pass requests to remote servers. Modules that implement specific protocols, such as HTTP or FastCGI, use this functionality. The module also provides an interface for creating custom load-balancing modules and implements a default round-robin method.\n\nThe [least_conn](../http/ngx_http_upstream_module#least_conn) and [hash](../http/ngx_http_upstream_module#hash) modules implement alternative load-balancing methods, but are actually implemented as extensions of the upstream round-robin module and share a lot of code with it, such as the representation of a server group. The [keepalive](../http/ngx_http_upstream_module#keepalive) module is an independent module that extends upstream functionality.\n\nThe [ngx_http_upstream_module](../http/ngx_http_upstream_module) can be configured explicitly by placing the corresponding [upstream](../http/ngx_http_upstream_module#upstream) block into the configuration file, or implicitly by using directives such as [proxy_pass](../http/ngx_http_proxy_module#proxy_pass) that accept a URL that gets evaluated at some point into a list of servers. The alternative load-balancing methods are available only with an explicit upstream configuration. The upstream module configuration has its own directive context `NGX_HTTP_UPS_CONF`. The structure is defined as follows:\n\n``` nginx\nstruct ngx_http_upstream_srv_conf_s {\n    ngx_http_upstream_peer_t         peer;\n    void                           **srv_conf;\n\n    ngx_array_t                     *servers;  /* ngx_http_upstream_server_t */\n\n    ngx_uint_t                       flags;\n    ngx_str_t                        host;\n    u_char                          *file_name;\n    ngx_uint_t                       line;\n    in_port_t                        port;\n    ngx_uint_t                       no_port;  /* unsigned no_port:1 */\n\n#if (NGX_HTTP_UPSTREAM_ZONE)\n    ngx_shm_zone_t                  *shm_zone;\n#endif\n};\n```\n\n- `srv_conf` — Configuration context of upstream modules.\n\n- `servers` — Array of `ngx_http_upstream_server_t`, the result of parsing a set of [server](../http/ngx_http_upstream_module#server) directives in the `upstream` block.\n\n- `flags` — Flags that mostly mark which features are supported by the load-balancing method. The features are configured as parameters of the [server](../http/ngx_http_upstream_module#server) directive:\n  - `NGX_HTTP_UPSTREAM_CREATE` — Distinguishes explicitly defined upstreams from those that are automatically created by the [proxy_pass](../http/ngx_http_proxy_module#proxy_pass) directive and “friends” (FastCGI, SCGI, etc.)\n  - `NGX_HTTP_UPSTREAM_WEIGHT` — The “`weight`” parameter is supported\n  - `NGX_HTTP_UPSTREAM_MAX_FAILS` — The “`max_fails`” parameter is supported\n  - `NGX_HTTP_UPSTREAM_FAIL_TIMEOUT` — The “`fail_timeout`” parameter is supported\n  - `NGX_HTTP_UPSTREAM_DOWN` — The “`down`” parameter is supported\n  - `NGX_HTTP_UPSTREAM_BACKUP` — The “`backup`” parameter is supported\n  - `NGX_HTTP_UPSTREAM_MAX_CONNS` — The “`max_conns`” parameter is supported\n\n- `host` — Name of the upstream.\n\n- `file_name, line` — Name of the configuration file and the line where the `upstream` block is located.\n\n- `port` and `no_port` — Not used for explicitly defined upstream groups.\n\n- `shm_zone` — Shared memory zone used by this upstream group, if any.\n\n- `peer` — object that holds generic methods for initializing upstream configuration:\n\n  ``` nginx\n  typedef struct {\n      ngx_http_upstream_init_pt        init_upstream;\n      ngx_http_upstream_init_peer_pt   init;\n      void                            *data;\n  } ngx_http_upstream_peer_t;\n  ```\n\n  A module that implements a load-balancing algorithm must set these methods and initialize private `data`. If `init_upstream` was not initialized during configuration parsing, `ngx_http_upstream_module` sets it to the default `ngx_http_upstream_init_round_robin` algorithm.\n\n  - `init_upstream(cf, us)` — Configuration-time method responsible for initializing a group of servers and initializing the `init()` method in case of success. A typical load-balancing module uses a list of servers in the `upstream` block to create an efficient data structure that it uses and saves its own configuration to the `data` field.\n  - `init(r, us)` — Initializes a per-request `ngx_http_upstream_peer_t.peer` structure that is used for load balancing (not to be confused with the `ngx_http_upstream_srv_conf_t.peer` described above which is per-upstream). It is passed as the `data` argument to all callbacks that deal with server selection.\n\nWhen nginx has to pass a request to another host for processing, it uses the configured load-balancing method to obtain an address to connect to. The method is obtained from the `ngx_http_upstream_t.peer` object of type `ngx_peer_connection_t`:\n\n``` nginx\nstruct ngx_peer_connection_s {\n    ...\n\n    struct sockaddr                 *sockaddr;\n    socklen_t                        socklen;\n    ngx_str_t                       *name;\n\n    ngx_uint_t                       tries;\n\n    ngx_event_get_peer_pt            get;\n    ngx_event_free_peer_pt           free;\n    ngx_event_notify_peer_pt         notify;\n    void                            *data;\n\n#if (NGX_SSL || NGX_COMPAT)\n    ngx_event_set_peer_session_pt    set_session;\n    ngx_event_save_peer_session_pt   save_session;\n#endif\n\n    ...\n};\n```\n\nThe structure has the following fields:\n\n- `sockaddr`, `socklen`, `name` — Address of the upstream server to connect to; this is the output parameter of a load-balancing method.\n- `data` — The per-request data of a load-balancing method; keeps the state of the selection algorithm and usually includes the link to the upstream configuration. It is passed as an argument to all methods that deal with server selection (see [below](#lb_method_get)).\n- `tries` — Allowed [number](../http/ngx_http_proxy_module#proxy_next_upstream_tries) of attempts to connect to an upstream server.\n- `get`, `free`, `notify`, `set_session`, and `save_session` - Methods of the load-balancing module, described below.\n\nAll methods accept at least two arguments: a peer connection object `pc` and the `data` created by `ngx_http_upstream_srv_conf_t.peer.init()`. Note that it might differ from `pc.data` due to “chaining” of load-balancing modules.\n\n- `get(pc, data)` — The method called when the upstream module is ready to pass a request to an upstream server and needs to know its address. The method has to fill the `sockaddr`, `socklen`, and `name` fields of `ngx_peer_connection_t` structure. The return is one of:\n  - `NGX_OK` — Server was selected.\n  - `NGX_ERROR` — Internal error occurred.\n  - `NGX_BUSY` — no servers are currently available. This can happen due to many reasons, including: the dynamic server group is empty, all servers in the group are in the failed state, or all servers in the group are already handling the maximum number of connections.\n  - `NGX_DONE` — the underlying connection was reused and there is no need to create a new connection to the upstream server. This value is set by the `keepalive` module.\n- `free(pc, data, state)` — The method called when an upstream module has finished work with a particular server. The `state` argument is the completion status of the upstream connection, a bitmask with the following possible values:\n  - `NGX_PEER_FAILED` — Attempt was [unsuccessful](../http/ngx_http_upstream_module#max_fails)\n  - `NGX_PEER_NEXT` — A special case when upstream server returns codes `403` or `404`, which are not considered a [failure](../http/ngx_http_upstream_module#max_fails).\n  - `NGX_PEER_KEEPALIVE` — Currently unused\n\n  This method also decrements the `tries` counter.\n- `notify(pc, data, type)` — Currently unused in the OSS version.\n- `set_session(pc, data)` and `save_session(pc, data)` — SSL-specific methods that enable caching sessions to upstream servers. The implementation is provided by the round-robin balancing method.\n\n#### Examples\n\nThe [nginx-dev-examples](http://hg.nginx.org/nginx-dev-examples) repository provides nginx module examples.\n\n#### Code style\n\n#### General rules\n\n- maximum text width is 80 characters\n- indentation is 4 spaces\n- no tabs, no trailing spaces\n- list elements on the same line are separated with spaces\n- hexadecimal literals are lowercase\n- file names, function and type names, and global variables have the `ngx_` or more specific prefix such as `ngx_http_` and `ngx_mail_`\n\n``` nginx\nsize_t\nngx_utf8_length(u_char *p, size_t n)\n{\n    u_char  c, *last;\n    size_t  len;\n\n    last = p + n;\n\n    for (len = 0; p < last; len++) {\n\n        c = *p;\n\n        if (c < 0x80) {\n            p++;\n            continue;\n        }\n\n        if (ngx_utf8_decode(&p, last - p) > 0x10ffff) {\n            /* invalid UTF-8 */\n            return n;\n        }\n    }\n\n    return len;\n}\n```\n\n#### Files\n\nA typical source file may contain the following sections separated by two empty lines:\n\n- copyright statements\n- includes\n- preprocessor definitions\n- type definitions\n- function prototypes\n- variable definitions\n- function definitions\n\nCopyright statements look like this:\n\n``` nginx\n/*\n * Copyright (C) Author Name\n * Copyright (C) Organization, Inc.\n */\n```\n\nIf the file is modified significantly, the list of authors should be updated, the new author is added to the top.\n\nThe `ngx_config.h` and `ngx_core.h` files are always included first, followed by one of `ngx_http.h`, `ngx_stream.h`, or `ngx_mail.h`. Then follow optional external header files:\n\n``` nginx\n#include <ngx_config.h>\n#include <ngx_core.h>\n#include <ngx_http.h>\n\n#include <libxml/parser.h>\n#include <libxml/tree.h>\n#include <libxslt/xslt.h>\n\n#if (NGX_HAVE_EXSLT)\n#include <libexslt/exslt.h>\n#endif\n```\n\nHeader files should include the so called \"header protection\":\n\n``` nginx\n#ifndef _NGX_PROCESS_CYCLE_H_INCLUDED_\n#define _NGX_PROCESS_CYCLE_H_INCLUDED_\n...\n#endif /* _NGX_PROCESS_CYCLE_H_INCLUDED_ */\n```\n\n#### Comments\n\n- “`//`” comments are not used\n\n- text is written in English, American spelling is preferred\n\n- multi-line comments are formatted like this:\n\n  ``` nginx\n  /*\n   * The red-black tree code is based on the algorithm described in\n   * the \"Introduction to Algorithms\" by Cormen, Leiserson and Rivest.\n   */\n  ```\n\n  ``` nginx\n  /* find the server configuration for the address:port */\n  ```\n\n#### Preprocessor\n\nMacro names start from `ngx_` or `NGX_` (or more specific) prefix. Macro names for constants are uppercase. Parameterized macros and macros for initializers are lowercase. The macro name and value are separated by at least two spaces:\n\n``` nginx\n#define NGX_CONF_BUFFER  4096\n\n#define ngx_buf_in_memory(b)  (b->temporary || b->memory || b->mmap)\n\n#define ngx_buf_size(b)                                                      \\\n    (ngx_buf_in_memory(b) ? (off_t) (b->last - b->pos):                      \\\n                            (b->file_last - b->file_pos))\n\n#define ngx_null_string  { 0, NULL }\n```\n\nConditions are inside parentheses, negation is outside:\n\n``` nginx\n#if (NGX_HAVE_KQUEUE)\n...\n#elif ((NGX_HAVE_DEVPOLL && !(NGX_TEST_BUILD_DEVPOLL)) \\\n       || (NGX_HAVE_EVENTPORT && !(NGX_TEST_BUILD_EVENTPORT)))\n...\n#elif (NGX_HAVE_EPOLL && !(NGX_TEST_BUILD_EPOLL))\n...\n#elif (NGX_HAVE_POLL)\n...\n#else /* select */\n...\n#endif /* NGX_HAVE_KQUEUE */\n```\n\n#### Types\n\nType names end with the “`_t`” suffix. A defined type name is separated by at least two spaces:\n\n``` nginx\ntypedef ngx_uint_t  ngx_rbtree_key_t;\n```\n\nStructure types are defined using `typedef`. Inside structures, member types and names are aligned:\n\n``` nginx\ntypedef struct {\n    size_t      len;\n    u_char     *data;\n} ngx_str_t;\n```\n\nKeep alignment identical among different structures in the file. A structure that points to itself has the name, ending with “`_s`”. Adjacent structure definitions are separated with two empty lines:\n\n``` nginx\ntypedef struct ngx_list_part_s  ngx_list_part_t;\n\nstruct ngx_list_part_s {\n    void             *elts;\n    ngx_uint_t        nelts;\n    ngx_list_part_t  *next;\n};\n\n\ntypedef struct {\n    ngx_list_part_t  *last;\n    ngx_list_part_t   part;\n    size_t            size;\n    ngx_uint_t        nalloc;\n    ngx_pool_t       *pool;\n} ngx_list_t;\n```\n\nEach structure member is declared on its own line:\n\n``` nginx\ntypedef struct {\n    ngx_uint_t        hash;\n    ngx_str_t         key;\n    ngx_str_t         value;\n    u_char           *lowcase_key;\n} ngx_table_elt_t;\n```\n\nFunction pointers inside structures have defined types ending with “`_pt`”:\n\n``` nginx\ntypedef ssize_t (*ngx_recv_pt)(ngx_connection_t *c, u_char *buf, size_t size);\ntypedef ssize_t (*ngx_recv_chain_pt)(ngx_connection_t *c, ngx_chain_t *in,\n    off_t limit);\ntypedef ssize_t (*ngx_send_pt)(ngx_connection_t *c, u_char *buf, size_t size);\ntypedef ngx_chain_t *(*ngx_send_chain_pt)(ngx_connection_t *c, ngx_chain_t *in,\n    off_t limit);\n\ntypedef struct {\n    ngx_recv_pt        recv;\n    ngx_recv_chain_pt  recv_chain;\n    ngx_recv_pt        udp_recv;\n    ngx_send_pt        send;\n    ngx_send_pt        udp_send;\n    ngx_send_chain_pt  udp_send_chain;\n    ngx_send_chain_pt  send_chain;\n    ngx_uint_t         flags;\n} ngx_os_io_t;\n```\n\nEnumerations have types ending with “`_e`”:\n\n``` nginx\ntypedef enum {\n    ngx_http_fastcgi_st_version = 0,\n    ngx_http_fastcgi_st_type,\n    ...\n    ngx_http_fastcgi_st_padding\n} ngx_http_fastcgi_state_e;\n```\n\n#### Variables\n\nVariables are declared sorted by length of a base type, then alphabetically. Type names and variable names are aligned. The type and name “columns” are separated with two spaces. Large arrays are put at the end of a declaration block:\n\n``` nginx\nu_char                      |  | *rv, *p;\nngx_conf_t                  |  | *cf;\nngx_uint_t                  |  |  i, j, k;\nunsigned int                |  |  len;\nstruct sockaddr             |  | *sa;\nconst unsigned char         |  | *data;\nngx_peer_connection_t       |  | *pc;\nngx_http_core_srv_conf_t    |  |**cscfp;\nngx_http_upstream_srv_conf_t|  | *us, *uscf;\nu_char                      |  |  text[NGX_SOCKADDR_STRLEN];\n```\n\nStatic and global variables may be initialized on declaration:\n\n``` nginx\nstatic ngx_str_t  ngx_http_memcached_key = ngx_string(\"memcached_key\");\n```\n\n``` nginx\nstatic ngx_uint_t  mday[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n```\n\n``` nginx\nstatic uint32_t  ngx_crc32_table16[] = {\n    0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n    ...\n    0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c\n};\n```\n\nThere is a bunch of commonly used type/name combinations:\n\n``` nginx\nu_char                        *rv;\nngx_int_t                      rc;\nngx_conf_t                    *cf;\nngx_connection_t              *c;\nngx_http_request_t            *r;\nngx_peer_connection_t         *pc;\nngx_http_upstream_srv_conf_t  *us, *uscf;\n```\n\n#### Functions\n\nAll functions (even static ones) should have prototypes. Prototypes include argument names. Long prototypes are wrapped with a single indentation on continuation lines:\n\n``` nginx\nstatic char *ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);\nstatic ngx_int_t ngx_http_init_phases(ngx_conf_t *cf,\n    ngx_http_core_main_conf_t *cmcf);\n\nstatic char *ngx_http_merge_servers(ngx_conf_t *cf,\n    ngx_http_core_main_conf_t *cmcf, ngx_http_module_t *module,\n    ngx_uint_t ctx_index);\n```\n\nThe function name in a definition starts with a new line. The function body opening and closing braces are on separate lines. The body of a function is indented. There are two empty lines between functions:\n\n``` nginx\nstatic ngx_int_t\nngx_http_find_virtual_server(ngx_http_request_t *r, u_char *host, size_t len)\n{\n    ...\n}\n\n\nstatic ngx_int_t\nngx_http_add_addresses(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,\n    ngx_http_conf_port_t *port, ngx_http_listen_opt_t *lsopt)\n{\n    ...\n}\n```\n\nThere is no space after the function name and opening parenthesis. Long function calls are wrapped such that continuation lines start from the position of the first function argument. If this is impossible, format the first continuation line such that it ends at position 79:\n\n``` nginx\nngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,\n               \"http header: \\\"%V: %V\\\"\",\n               &h->key, &h->value);\n\nhc->busy = ngx_palloc(r->connection->pool,\n                  cscf->large_client_header_buffers.num * sizeof(ngx_buf_t *));\n```\n\nThe `ngx_inline` macro should be used instead of `inline`:\n\n``` nginx\nstatic ngx_inline void ngx_cpuid(uint32_t i, uint32_t *buf);\n```\n\n#### Expressions\n\nBinary operators except “`.`” and “`−>`” should be separated from their operands by one space. Unary operators and subscripts are not separated from their operands by spaces:\n\n``` nginx\nwidth = width * 10 + (*fmt++ - '0');\n```\n\n``` nginx\nch = (u_char) ((decoded << 4) + (ch - '0'));\n```\n\n``` nginx\nr->exten.data = &r->uri.data[i + 1];\n```\n\nType casts are separated by one space from casted expressions. An asterisk inside type cast is separated with space from type name:\n\n``` nginx\nlen = ngx_sock_ntop((struct sockaddr *) sin6, p, len, 1);\n```\n\nIf an expression does not fit into single line, it is wrapped. The preferred point to break a line is a binary operator. The continuation line is lined up with the start of expression:\n\n``` nginx\nif (status == NGX_HTTP_MOVED_PERMANENTLY\n    || status == NGX_HTTP_MOVED_TEMPORARILY\n    || status == NGX_HTTP_SEE_OTHER\n    || status == NGX_HTTP_TEMPORARY_REDIRECT\n    || status == NGX_HTTP_PERMANENT_REDIRECT)\n{\n    ...\n}\n```\n\n``` nginx\np->temp_file->warn = \"an upstream response is buffered \"\n                     \"to a temporary file\";\n```\n\nAs a last resort, it is possible to wrap an expression so that the continuation line ends at position 79:\n\n``` nginx\nhinit->hash = ngx_pcalloc(hinit->pool, sizeof(ngx_hash_wildcard_t)\n                                     + size * sizeof(ngx_hash_elt_t *));\n```\n\nThe above rules also apply to sub-expressions, where each sub-expression has its own indentation level:\n\n``` nginx\nif (((u->conf->cache_use_stale & NGX_HTTP_UPSTREAM_FT_UPDATING)\n     || c->stale_updating) && !r->background\n    && u->conf->cache_background_update)\n{\n    ...\n}\n```\n\nSometimes, it is convenient to wrap an expression after a cast. In this case, the continuation line is indented:\n\n``` nginx\nnode = (ngx_rbtree_node_t *)\n           ((u_char *) lr - offsetof(ngx_rbtree_node_t, color));\n```\n\nPointers are explicitly compared to `NULL` (not `0`):\n\n``` nginx\nif (ptr != NULL) {\n    ...\n}\n```\n\n#### Conditionals and Loops\n\nThe “`if`” keyword is separated from the condition by one space. Opening brace is located on the same line, or on a dedicated line if the condition takes several lines. Closing brace is located on a dedicated line, optionally followed by “`else if` / `else`”. Usually, there is an empty line before the “`else if` / `else`” part:\n\n``` nginx\nif (node->left == sentinel) {\n    temp = node->right;\n    subst = node;\n\n} else if (node->right == sentinel) {\n    temp = node->left;\n    subst = node;\n\n} else {\n    subst = ngx_rbtree_min(node->right, sentinel);\n\n    if (subst->left != sentinel) {\n        temp = subst->left;\n\n    } else {\n        temp = subst->right;\n    }\n}\n```\n\nSimilar formatting rules are applied to “`do`” and “`while`” loops:\n\n``` nginx\nwhile (p < last && *p == ' ') {\n    p++;\n}\n```\n\n``` nginx\ndo {\n    ctx->node = rn;\n    ctx = ctx->next;\n} while (ctx);\n```\n\nThe “`switch`” keyword is separated from the condition by one space. Opening brace is located on the same line. Closing brace is located on a dedicated line. The “`case`” keywords are lined up with “`switch`”:\n\n``` nginx\nswitch (ch) {\ncase '!':\n    looked = 2;\n    state = ssi_comment0_state;\n    break;\n\ncase '<':\n    copy_end = p;\n    break;\n\ndefault:\n    copy_end = p;\n    looked = 0;\n    state = ssi_start_state;\n    break;\n}\n```\n\nMost “`for`” loops are formatted like this:\n\n``` nginx\nfor (i = 0; i < ccf->env.nelts; i++) {\n    ...\n}\n```\n\n``` nginx\nfor (q = ngx_queue_head(locations);\n     q != ngx_queue_sentinel(locations);\n     q = ngx_queue_next(q))\n{\n    ...\n}\n```\n\nIf some part of the “`for`” statement is omitted, this is indicated by the “`/* void */`” comment:\n\n``` nginx\nfor (i = 0; /* void */ ; i++) {\n    ...\n}\n```\n\nA loop with an empty body is also indicated by the “`/* void */`” comment which may be put on the same line:\n\n``` nginx\nfor (cl = *busy; cl->next; cl = cl->next) { /* void */ }\n```\n\nAn endless loop looks like this:\n\n``` nginx\nfor ( ;; ) {\n    ...\n}\n```\n\n#### Labels\n\nLabels are surrounded with empty lines and are indented at the previous level:\n\n``` nginx\n    if (i == 0) {\n        u->err = \"host not found\";\n        goto failed;\n    }\n\n    u->addrs = ngx_pcalloc(pool, i * sizeof(ngx_addr_t));\n    if (u->addrs == NULL) {\n        goto failed;\n    }\n\n    u->naddrs = i;\n\n    ...\n\n    return NGX_OK;\n\nfailed:\n\n    freeaddrinfo(res);\n    return NGX_ERROR;\n```\n\n#### Debugging memory issues\n\nTo debug memory issues such as buffer overruns or use-after-free errors, you can use the [AddressSanitizer](https://en.wikipedia.org/wiki/AddressSanitizer) (ASan) supported by some modern compilers. To enable ASan with `gcc` and `clang`, use the `-fsanitize=address` compiler and linker option. When building nginx, this can be done by adding the option to `--with-cc-opt` and `--with-ld-opt` parameters of the `configure` script.\n\nSince most allocations in nginx are made from nginx internal [pool](#pool), enabling ASan may not always be enough to debug memory issues. The internal pool allocates a big chunk of memory from the system and cuts smaller allocations from it. However, this mechanism can be disabled by setting the `NGX_DEBUG_PALLOC` macro to `1`. In this case, allocations are passed directly to the system allocator giving it full control over the buffers boundaries.\n\nThe following configuration line summarizes the information provided above. It is recommended while developing third-party modules and testing nginx on different platforms.\n\n``` nginx\nauto/configure --with-cc-opt='-fsanitize=address -DNGX_DEBUG_PALLOC=1'\n               --with-ld-opt=-fsanitize=address\n```\n\n#### Common Pitfalls\n\n#### Writing a C module\n\nThe most common pitfall is an attempt to write a full-fledged C module when it can be avoided. In most cases your task can be accomplished by creating a proper configuration. If writing a module is inevitable, try to make it as small and simple as possible. For example, a module can only export some [variables](#http_variables).\n\nBefore starting a module, consider the following questions:\n\n- Is it possible to implement a desired feature using already [available modules](../index)?\n- Is it possible to solve an issue using built-in scripting languages, such as [Perl](../http/ngx_http_perl_module) or [njs](../njs/index)?\n\n#### C Strings\n\nThe most used string type in nginx, [ngx_str_t](#string_overview) is not a C-Style zero-terminated string. You cannot pass the data to standard C library functions such as `strlen()` or `strstr()`. Instead, nginx [counterparts](#string_overview) that accept either `ngx_str_t` should be used or pointer to data and a length. However, there is a case when `ngx_str_t` holds a pointer to a zero-terminated string: strings that come as a result of configuration file parsing are zero-terminated.\n\n#### Global Variables\n\nAvoid using global variables in your modules. Most likely this is an error to have a global variable. Any global data should be tied to a [configuration cycle](#cycle) and be allocated from the corresponding [memory pool](#pool). This allows nginx to perform graceful configuration reloads. An attempt to use global variables will likely break this feature, because it will be impossible to have two configurations at the same time and get rid of them. Sometimes global variables are required. In this case, special attention is needed to manage reconfiguration properly. Also, check if libraries used by your code have implicit global state that may be broken on reload.\n\n#### Manual Memory Management\n\nInstead of dealing with malloc/free approach which is error prone, learn how to use nginx [pools](#pool). A pool is created and tied to an object - [configuration](#http_conf), [cycle](#cycle), [connection](#connection), or [HTTP request](#http_request). When the object is destroyed, the associated pool is destroyed too. So when working with an object, it is possible to allocate the amount needed from the corresponding pool and don't care about freeing memory even in case of errors.\n\n#### Threads\n\nIt is recommended to avoid using threads in nginx because it will definitely break things: most nginx functions are not thread-safe. It is expected that a thread will be executing only system calls and thread-safe library functions. If you need to run some code that is not related to client request processing, the proper way is to schedule a timer in the `init_process` module handler and perform required actions in timer handler. Internally nginx makes use of [threads](#threads) to boost IO-related operations, but this is a special case with a lot of limitations.\n\n#### Blocking Libraries\n\nA common mistake is to use libraries that are blocking internally. Most libraries out there are synchronous and blocking by nature. In other words, they perform one operation at a time and waste time waiting for response from other peer. As a result, when a request is processed with such library, whole nginx worker is blocked, thus destroying performance. Use only libraries that provide asynchronous interface and don't block whole process.\n\n#### HTTP Requests to External Services\n\nOften modules need to perform an HTTP call to some external service. A common mistake is to use some external library, such as libcurl, to perform the HTTP request. It is absolutely unnecessary to bring a huge amount of external (probably [blocking](#using_libraries)!) code for the task which can be accomplished by nginx itself.\n\nThere are two basic usage scenarios when an external request is needed:\n\n- in the context of processing a client request (for example, in content handler)\n- in the context of a worker process (for example, timer handler)\n\nIn the first case, the best is to use [subrequests API](#http_subrequests). Instead of directly accessing external service, you declare a location in nginx configuration and direct your subrequest to this location. This location is not limited to [proxying](../http/ngx_http_proxy_module#proxy_pass) requests, but may contain other nginx directives. An example of such approach is the [auth_request](../http/ngx_http_auth_request_module#auth_request) directive implemented in [ngx_http_auth_request module](http://hg.nginx.org/nginx/file/tip/src/http/modules/ngx_http_auth_request_module.c).\n\nFor the second case, it is possible to use basic HTTP client functionality available in nginx. For example, [OCSP module](http://hg.nginx.org/nginx/file/tip/src/event/ngx_event_openssl_stapling.c) implements simple HTTP client.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/dev/development_guide.html](https://nginx.org/en/docs/dev/development_guide.html)"
- name: directio
  id: http/ngx_http_core_module#directio
  summary: This directive appeared in version 0.7.7
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`directio`***`size`*` | off;` |
    | Default: | `directio off;`                 |
    | Context: | `http`, `server`, `location`    |

    This directive appeared in version 0.7.7.

    Enables the use of the `O_DIRECT` flag (FreeBSD, Linux), the `F_NOCACHE` flag (macOS), or the `directio()` function (Solaris), when reading files that are larger than or equal to the specified *`size`*. The directive automatically disables (0.7.15) the use of [sendfile](#sendfile) for a given request. It can be useful for serving large files:

    ``` nginx
    directio 4m;
    ```

    or when using [aio](#aio) on Linux.
- name: directio_alignment
  id: http/ngx_http_core_module#directio_alignment
  summary: This directive appeared in version 0.8.11
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`directio_alignment`***`size`*`;` |
    | Default: | `directio_alignment 512;`           |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 0.8.11.

    Sets the alignment for [directio](#directio). In most cases, a 512-byte alignment is enough. However, when using XFS under Linux, it needs to be increased to 4K.
- name: disable_symlinks
  id: http/ngx_http_core_module#disable_symlinks
  summary: This directive appeared in version 1.1.15
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                                                            |
    |----------|--------------------------------------------------------------------------------------------|
    | Syntax:  | **`disable_symlinks`**` off;`**`disable_symlinks`**` on | if_not_owner [from=`*`part`*`];` |
    | Default: | `disable_symlinks off;`                                                                    |
    | Context: | `http`, `server`, `location`                                                               |

    This directive appeared in version 1.1.15.

    Determines how symbolic links should be treated when opening files:

    `off`

    Symbolic links in the pathname are allowed and not checked. This is the default behavior.

    `on`

    If any component of the pathname is a symbolic link, access to a file is denied.

    `if_not_owner`

    Access to a file is denied if any component of the pathname is a symbolic link, and the link and object that the link points to have different owners.

    `from`=*`part`*

    When checking symbolic links (parameters `on` and `if_not_owner`), all components of the pathname are normally checked. Checking of symbolic links in the initial part of the pathname may be avoided by specifying additionally the `from`=*`part`* parameter. In this case, symbolic links are checked only from the pathname component that follows the specified initial part. If the value is not an initial part of the pathname checked, the whole pathname is checked as if this parameter was not specified at all. If the value matches the whole file name, symbolic links are not checked. The parameter value can contain variables.

    Example:

    ``` nginx
    disable_symlinks on from=$document_root;
    ```

    This directive is only available on systems that have the `openat()` and `fstatat()` interfaces. Such systems include modern versions of FreeBSD, Linux, and Solaris.

    Parameters `on` and `if_not_owner` add a processing overhead.

    On systems that do not support opening of directories only for search, to use these parameters it is required that worker processes have read permissions for all directories being checked.

    The [ngx_http_autoindex_module](ngx_http_autoindex_module), [ngx_http_random_index_module](ngx_http_random_index_module), and [ngx_http_dav_module](ngx_http_dav_module) modules currently ignore this directive.
- name: Download and install
  id: njs/install
  summary: To build only njs command-line utility, run ./configure and make njs commands from njs root directory
  description: "# Download and install\n\n- [Installing as a Linux package](#install_package)\n- [Building from the sources](#install_sources)\n\n#### Installing as a Linux package\n\nFor Linux, njs modules [packages](https://nginx.org/en/linux_packages.html#dynmodules) can be used:\n\n- `nginx-module-njs` — njs [dynamic](../ngx_core_module#load_module) modules\n- `nginx-module-njs-dbg` — debug symbols for the `nginx-module-njs` package\n\nAfter package installation, njs dynamic modules need to be loaded with the [`load_module`](../ngx_core_module#load_module) directive:\n\n``` nginx\nload_module modules/ngx_http_js_module.so;\n```\n\nor\n\n``` nginx\nload_module modules/ngx_stream_js_module.so;\n```\n\n#### Building from the sources\n\nThe [repository](https://github.com/nginx/njs) with njs sources can be cloned with the following command: (requires [Git](https://git-scm.com/) client):\n\n``` nginx\ngit clone https://github.com/nginx/njs\n```\n\nThen the modules should be compiled from [nginx](../configure) root directory using the `--add-module` configuration parameter:\n\n``` nginx\n./configure --add-module=path-to-njs/nginx\n```\n\nThe modules can also be built as [dynamic](../ngx_core_module#load_module):\n\n``` nginx\n./configure --add-dynamic-module=path-to-njs/nginx\n```\n\nTo build only njs command-line [utility](cli), run `./configure` and `make njs` commands from njs root directory. The utility is available as `./build/njs`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/install.html](https://nginx.org/en/docs/njs/install.html)"
- name: empty_gif
  id: http/ngx_http_empty_gif_module#empty_gif
  summary: Turns on module processing in a surrounding location
  belongs_to: ngx_http_empty_gif_module
  description: "|          |                    |\n|----------|--------------------|\n| Syntax:  | **`empty_gif`**`;` |\n| Default: | —                  |\n| Context: | `location`         |\n\nTurns on module processing in a surrounding location.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html](https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html)"
- name: env (Core functionality)
  id: ngx_core_module#env
  summary: By default, nginx removes all environment variables inherited from its parent process except the TZ variable
  belongs_to: Core functionality
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`env`***`variable`*`[=`*`value`*`];` |
    | Default: | `env TZ;`                              |
    | Context: | `main`                                 |

    By default, nginx removes all environment variables inherited from its parent process except the TZ variable. This directive allows preserving some of the inherited variables, changing their values, or creating new environment variables. These variables are then:

    - inherited during a [live upgrade](control#upgrade) of an executable file;
    - used by the [ngx_http_perl_module](http/ngx_http_perl_module) module;
    - used by worker processes. One should bear in mind that controlling system libraries in this way is not always possible as it is common for libraries to check variables only during initialization, well before they can be set using this directive. An exception from this is an above mentioned [live upgrade](control#upgrade) of an executable file.

    The TZ variable is always inherited and available to the [ngx_http_perl_module](http/ngx_http_perl_module) module, unless it is configured explicitly.

    Usage example:

    ``` nginx
    env MALLOC_OPTIONS;
    env PERL5LIB=/data/site/modules;
    env OPENSSL_ALLOW_PROXY_CERTS=1;
    ```

    The NGINX environment variable is used internally by nginx and should not be set directly by the user.
- name: error_log (Core functionality)
  id: ngx_core_module#error_log
  summary: Configures logging
  belongs_to: Core functionality
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`error_log`***`file`*` [`*`level`*`];`               |
    | Default: | `error_log logs/error.log error;`                      |
    | Context: | `main`, `http`, `mail`, `stream`, `server`, `location` |

    Configures logging. Several logs can be specified on the same configuration level (1.5.2). If on the `main` configuration level writing a log to a file is not explicitly defined, the default file will be used.

    The first parameter defines a *`file`* that will store the log. The special value `stderr` selects the standard error file. Logging to [syslog](syslog) can be configured by specifying the “`syslog:`” prefix. Logging to a [cyclic memory buffer](debugging_log#memory) can be configured by specifying the “`memory:`” prefix and buffer *`size`*, and is generally used for debugging (1.7.11).

    The second parameter determines the *`level`* of logging, and can be one of the following: `debug`, `info`, `notice`, `warn`, `error`, `crit`, `alert`, or `emerg`. Log levels above are listed in the order of increasing severity. Setting a certain log level will cause all messages of the specified and more severe log levels to be logged. For example, the default level `error` will cause `error`, `crit`, `alert`, and `emerg` messages to be logged. If this parameter is omitted then `error` is used.

    For `debug` logging to work, nginx needs to be built with `--with-debug`, see “[A debugging log](debugging_log)”.

    The directive can be specified on the `stream` level starting from version 1.7.11, and on the `mail` level starting from version 1.9.0.
- name: error_page
  id: http/ngx_http_core_module#error_page
  summary: Defines the URI that will be shown for the specified errors
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                               |
    |----------|---------------------------------------------------------------|
    | Syntax:  | **`error_page`***`code`*` ... [=[`*`response`*`]] `*`uri`*`;` |
    | Default: | —                                                             |
    | Context: | `http`, `server`, `location`, `if in location`                |

    Defines the URI that will be shown for the specified errors. A *`uri`* value can contain variables.

    Example:

    ``` nginx
    error_page 404             /404.html;
    error_page 500 502 503 504 /50x.html;
    ```

    This causes an internal redirect to the specified *`uri`* with the client request method changed to “`GET`” (for all methods other than “`GET`” and “`HEAD`”).

    Furthermore, it is possible to change the response code to another using the “`=`*`response`*” syntax, for example:

    ``` nginx
    error_page 404 =200 /empty.gif;
    ```

    If an error response is processed by a proxied server or a FastCGI/uwsgi/SCGI/gRPC server, and the server may return different response codes (e.g., 200, 302, 401 or 404), it is possible to respond with the code it returns:

    ``` nginx
    error_page 404 = /404.php;
    ```

    If there is no need to change URI and method during internal redirection it is possible to pass error processing into a named location:

    ``` nginx
    location / {
        error_page 404 = @fallback;
    }

    location @fallback {
        proxy_pass http://backend;
    }
    ```

    If *`uri`* processing leads to an error, the status code of the last occurred error is returned to the client.

    It is also possible to use URL redirects for error processing:

    ``` nginx
    error_page 403      http://example.com/forbidden.html;
    error_page 404 =301 http://example.com/notfound.html;
    ```

    In this case, by default, the response code 302 is returned to the client. It can only be changed to one of the redirect status codes (301, 302, 303, 307, and 308).

    The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.

    The code 308 was not treated as a redirect until version 1.13.0.

    These directives are inherited from the previous configuration level if and only if there are no `error_page` directives defined on the current level.
- name: etag
  id: http/ngx_http_core_module#etag
  summary: This directive appeared in version 1.3.3
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`etag`**` on | off;`       |
    | Default: | `etag on;`                   |
    | Context: | `http`, `server`, `location` |

    This directive appeared in version 1.3.3.

    Enables or disables automatic generation of the “ETag” response header field for static resources.
- name: events (Core functionality)
  id: ngx_core_module#events
  summary: Provides the configuration file context in which the directives that affect connection processing are specified
  belongs_to: Core functionality
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`events`**` { ... }` |
    | Default: | —                      |
    | Context: | `main`                 |

    Provides the configuration file context in which the directives that affect connection processing are specified.
- name: expires
  id: http/ngx_http_headers_module#expires
  summary: Enables or disables adding or modifying the “Expires” and “Cache-Control” response header fields provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0)
  belongs_to: ngx_http_headers_module
  description: "|          |                                                                           |\n|----------|---------------------------------------------------------------------------|\n| Syntax:  | **`expires`**` [modified] `*`time`*`;` **`expires`**` epoch | max | off;` |\n| Default: | `expires off;`                                                            |\n| Context: | `http`, `server`, `location`, `if in location`                            |\n\nEnables or disables adding or modifying the “Expires” and “Cache-Control” response header fields provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). The parameter can be a positive or negative [time](../syntax).\n\nThe time in the “Expires” field is computed as a sum of the current time and *`time`* specified in the directive. If the `modified` parameter is used (0.7.0, 0.6.32) then the time is computed as a sum of the file’s modification time and the *`time`* specified in the directive.\n\nIn addition, it is possible to specify a time of day using the “`@`” prefix (0.7.9, 0.6.34):\n\n``` nginx\nexpires @15h30m;\n```\n\nThe contents of the “Cache-Control” field depends on the sign of the specified time:\n\n- time is negative — “Cache-Control: no-cache”.\n- time is positive or zero — “Cache-Control: max-age=*`t`*”, where *`t`* is a time specified in the directive, in seconds.\n\nThe `epoch` parameter sets “Expires” to the value “`Thu, 01 Jan 1970 00:00:01 GMT`”, and “Cache-Control” to “`no-cache`”.\n\nThe `max` parameter sets “Expires” to the value “`Thu, 31 Dec 2037 23:55:55 GMT`”, and “Cache-Control” to 10 years.\n\nThe `off` parameter disables adding or modifying the “Expires” and “Cache-Control” response header fields.\n\nThe last parameter value can contain variables (1.7.9):\n\n``` nginx\nmap $sent_http_content_type $expires {\n    default         off;\n    application/pdf 42d;\n    ~image/         max;\n}\n\nexpires $expires;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_headers_module.html](https://nginx.org/en/docs/http/ngx_http_headers_module.html)"
- name: f4f
  id: http/ngx_http_f4f_module#f4f
  summary: Turns on module processing in the surrounding location
  belongs_to: ngx_http_f4f_module
  description: |-
    |          |              |
    |----------|--------------|
    | Syntax:  | **`f4f`**`;` |
    | Default: | —            |
    | Context: | `location`   |

    Turns on module processing in the surrounding location.
- name: f4f_buffer_size
  id: http/ngx_http_f4f_module#f4f_buffer_size
  summary: Sets the size of the buffer used for reading the .f4x index file
  belongs_to: ngx_http_f4f_module
  description: "|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`f4f_buffer_size`***`size`*`;` |\n| Default: | `f4f_buffer_size 512k;`          |\n| Context: | `http`, `server`, `location`     |\n\nSets the *`size`* of the buffer used for reading the `.f4x` index file.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_f4f_module.html](https://nginx.org/en/docs/http/ngx_http_f4f_module.html)"
- name: fastcgi_bind
  id: http/ngx_http_fastcgi_module#fastcgi_bind
  summary: This directive appeared in version 0.8.22
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                      |
    |----------|------------------------------------------------------|
    | Syntax:  | **`fastcgi_bind`***`address`*` [transparent] | off;` |
    | Default: | —                                                    |
    | Context: | `http`, `server`, `location`                         |

    This directive appeared in version 0.8.22.

    Makes outgoing connections to a FastCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `fastcgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.

    The `transparent` parameter (1.11.0) allows outgoing connections to a FastCGI server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    fastcgi_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the FastCGI server.
- name: fastcgi_buffer_size
  id: http/ngx_http_fastcgi_module#fastcgi_buffer_size
  summary: Sets the size of the buffer used for reading the first part of the response received from the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`fastcgi_buffer_size`***`size`*`;` |
    | Default: | `fastcgi_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`         |

    Sets the *`size`* of the buffer used for reading the first part of the response received from the FastCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.
- name: fastcgi_buffering
  id: http/ngx_http_fastcgi_module#fastcgi_buffering
  summary: This directive appeared in version 1.5.6
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`fastcgi_buffering`**` on | off;` |
    | Default: | `fastcgi_buffering on;`             |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.5.6.

    Enables or disables buffering of responses from the FastCGI server.

    When buffering is enabled, nginx receives a response from the FastCGI server as soon as possible, saving it into the buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#fastcgi_temp_path) on the disk. Writing to temporary files is controlled by the [fastcgi_max_temp_file_size](#fastcgi_max_temp_file_size) and [fastcgi_temp_file_write_size](#fastcgi_temp_file_write_size) directives.

    When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the FastCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the [fastcgi_buffer_size](#fastcgi_buffer_size) directive.

    Buffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [fastcgi_ignore_headers](#fastcgi_ignore_headers) directive.
- name: fastcgi_buffers
  id: http/ngx_http_fastcgi_module#fastcgi_buffers
  summary: Sets the number and size of the buffers used for reading a response from the FastCGI server, for a single connection
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`fastcgi_buffers`***`numbersize`*`;` |
    | Default: | `fastcgi_buffers 8 4k|8k;`             |
    | Context: | `http`, `server`, `location`           |

    Sets the *`number`* and *`size`* of the buffers used for reading a response from the FastCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
- name: fastcgi_busy_buffers_size
  id: http/ngx_http_fastcgi_module#fastcgi_busy_buffers_size
  summary: When buffering of responses from the FastCGI server is enabled, limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`fastcgi_busy_buffers_size`***`size`*`;` |
    | Default: | `fastcgi_busy_buffers_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`               |

    When [buffering](#fastcgi_buffering) of responses from the FastCGI server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives.
- name: fastcgi_cache
  id: http/ngx_http_fastcgi_module#fastcgi_cache
  summary: Defines a shared memory zone used for caching
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`fastcgi_cache`***`zone`*` | off;` |
    | Default: | `fastcgi_cache off;`                 |
    | Context: | `http`, `server`, `location`         |

    Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.
- name: fastcgi_cache_background_update
  id: http/ngx_http_fastcgi_module#fastcgi_cache_background_update
  summary: This directive appeared in version 1.11.10
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`fastcgi_cache_background_update`**` on | off;` |
    | Default: | `fastcgi_cache_background_update off;`            |
    | Context: | `http`, `server`, `location`                      |

    This directive appeared in version 1.11.10.

    Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#fastcgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.
- name: fastcgi_cache_bypass
  id: http/ngx_http_fastcgi_module#fastcgi_cache_bypass
  summary: Defines conditions under which the response will not be taken from a cache
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`fastcgi_cache_bypass`***`string`*` ...;` |
    | Default: | —                                           |
    | Context: | `http`, `server`, `location`                |

    Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:

    ``` nginx
    fastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
    fastcgi_cache_bypass $http_pragma    $http_authorization;
    ```

    Can be used along with the [fastcgi_no_cache](#fastcgi_no_cache) directive.
- name: fastcgi_cache_key
  id: http/ngx_http_fastcgi_module#fastcgi_cache_key
  summary: null
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`fastcgi_cache_key`***`string`*`;` |
    | Default: | —                                    |
    | Context: | `http`, `server`, `location`         |

    Defines a key for caching, for example

    ``` nginx
    fastcgi_cache_key localhost:9000$request_uri;
    ```
- name: fastcgi_cache_lock
  id: http/ngx_http_fastcgi_module#fastcgi_cache_lock
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`fastcgi_cache_lock`**` on | off;` |
    | Default: | `fastcgi_cache_lock off;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.1.12.

    When enabled, only one request at a time will be allowed to populate a new cache element identified according to the [fastcgi_cache_key](#fastcgi_cache_key) directive by passing a request to a FastCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [fastcgi_cache_lock_timeout](#fastcgi_cache_lock_timeout) directive.
- name: fastcgi_cache_lock_age
  id: http/ngx_http_fastcgi_module#fastcgi_cache_lock_age
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`fastcgi_cache_lock_age`***`time`*`;` |
    | Default: | `fastcgi_cache_lock_age 5s;`            |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.7.8.

    If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the FastCGI server.
- name: fastcgi_cache_lock_timeout
  id: http/ngx_http_fastcgi_module#fastcgi_cache_lock_timeout
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`fastcgi_cache_lock_timeout`***`time`*`;` |
    | Default: | `fastcgi_cache_lock_timeout 5s;`            |
    | Context: | `http`, `server`, `location`                |

    This directive appeared in version 1.1.12.

    Sets a timeout for [fastcgi_cache_lock](#fastcgi_cache_lock). When the *`time`* expires, the request will be passed to the FastCGI server, however, the response will not be cached.

    Before 1.7.8, the response could be cached.
- name: fastcgi_cache_max_range_offset
  id: http/ngx_http_fastcgi_module#fastcgi_cache_max_range_offset
  summary: This directive appeared in version 1.11.6
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`fastcgi_cache_max_range_offset`***`number`*`;` |
    | Default: | —                                                 |
    | Context: | `http`, `server`, `location`                      |

    This directive appeared in version 1.11.6.

    Sets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the FastCGI server and the response will not be cached.
- name: fastcgi_cache_methods
  id: http/ngx_http_fastcgi_module#fastcgi_cache_methods
  summary: This directive appeared in version 0.7.59
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                      |
    |----------|------------------------------------------------------|
    | Syntax:  | **`fastcgi_cache_methods`**` GET | HEAD | POST ...;` |
    | Default: | `fastcgi_cache_methods GET HEAD;`                    |
    | Context: | `http`, `server`, `location`                         |

    This directive appeared in version 0.7.59.

    If the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [fastcgi_no_cache](#fastcgi_no_cache) directive.
- name: fastcgi_cache_min_uses
  id: http/ngx_http_fastcgi_module#fastcgi_cache_min_uses
  summary: Sets the number of requests after which the response will be cached
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`fastcgi_cache_min_uses`***`number`*`;` |
    | Default: | `fastcgi_cache_min_uses 1;`               |
    | Context: | `http`, `server`, `location`              |

    Sets the *`number`* of requests after which the response will be cached.
- name: fastcgi_cache_path
  id: http/ngx_http_fastcgi_module#fastcgi_cache_path
  summary: Sets the path and other parameters of a cache
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
    |----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`fastcgi_cache_path`***`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |
    | Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    | Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                            |

    Sets the path and other parameters of a cache. Cache data are stored in files. Both the key and file name in a cache are a result of applying the MD5 function to the proxied URL. The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration

    ``` nginx
    fastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;
    ```

    file names in a cache will look like this:

    ``` nginx
    /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c
    ```

    A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [fastcgi_temp_path](#fastcgi_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.

    In addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.

    As part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.

    Cached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.

    The special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.

    A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.

    Additionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):

    `purger`=`on`\|`off`

    Instructs whether cache entries that match a [wildcard key](#fastcgi_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.

    `purger_files`=*`number`*

    Sets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.

    `purger_threshold`=*`number`*

    Sets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.

    `purger_sleep`=*`number`*

    Sets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.

    In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.
- name: fastcgi_cache_purge
  id: http/ngx_http_fastcgi_module#fastcgi_cache_purge
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`fastcgi_cache_purge`**` string ...;` |
    | Default: | —                                       |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.5.7.

    Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#fastcgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.

    If the [cache key](#fastcgi_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#fastcgi_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.

    Example configuration:

    ``` nginx
    fastcgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;

    map $request_method $purge_method {
        PURGE   1;
        default 0;
    }

    server {
        ...
        location / {
            fastcgi_pass        backend;
            fastcgi_cache       cache_zone;
            fastcgi_cache_key   $uri;
            fastcgi_cache_purge $purge_method;
        }
    }
    ```

    This functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: fastcgi_cache_revalidate
  id: http/ngx_http_fastcgi_module#fastcgi_cache_revalidate
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`fastcgi_cache_revalidate`**` on | off;` |
    | Default: | `fastcgi_cache_revalidate off;`            |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.5.7.

    Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.
- name: fastcgi_cache_use_stale
  id: http/ngx_http_fastcgi_module#fastcgi_cache_use_stale
  summary: Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                                                                                                               |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`fastcgi_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | http_429 | off ...;` |
    | Default: | `fastcgi_cache_use_stale off;`                                                                                                                |
    | Context: | `http`, `server`, `location`                                                                                                                  |

    Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server. The directive’s parameters match the parameters of the [fastcgi_next_upstream](#fastcgi_next_upstream) directive.

    The `error` parameter also permits using a stale cached response if a FastCGI server to process a request cannot be selected.

    Additionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to FastCGI servers when updating cached data.

    Using a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.

    - The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.
    - The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.

    To minimize the number of accesses to FastCGI servers when populating a new cache element, the [fastcgi_cache_lock](#fastcgi_cache_lock) directive can be used.
- name: fastcgi_cache_valid
  id: http/ngx_http_fastcgi_module#fastcgi_cache_valid
  summary: Sets caching time for different response codes
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                          |
    |----------|----------------------------------------------------------|
    | Syntax:  | **`fastcgi_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |
    | Default: | —                                                        |
    | Context: | `http`, `server`, `location`                             |

    Sets caching time for different response codes. For example, the following directives

    ``` nginx
    fastcgi_cache_valid 200 302 10m;
    fastcgi_cache_valid 404      1m;
    ```

    set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.

    If only caching *`time`* is specified

    ``` nginx
    fastcgi_cache_valid 5m;
    ```

    then only 200, 301, and 302 responses are cached.

    In addition, the `any` parameter can be specified to cache any responses:

    ``` nginx
    fastcgi_cache_valid 200 302 10m;
    fastcgi_cache_valid 301      1h;
    fastcgi_cache_valid any      1m;
    ```

    Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.

    - The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.
    - If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.
    - If the header includes the “Set-Cookie” field, such a response will not be cached.
    - If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).

    Processing of one or more of these response header fields can be disabled using the [fastcgi_ignore_headers](#fastcgi_ignore_headers) directive.
- name: fastcgi_catch_stderr
  id: http/ngx_http_fastcgi_module#fastcgi_catch_stderr
  summary: Sets a string to search for in the error stream of a response received from a FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`fastcgi_catch_stderr`***`string`*`;` |
    | Default: | —                                       |
    | Context: | `http`, `server`, `location`            |

    Sets a string to search for in the error stream of a response received from a FastCGI server. If the *`string`* is found then it is considered that the FastCGI server has returned an [invalid response](#fastcgi_next_upstream). This allows handling application errors in nginx, for example:

    ``` nginx
    location /php/ {
        fastcgi_pass backend:9000;
        ...
        fastcgi_catch_stderr "PHP Fatal error";
        fastcgi_next_upstream error timeout invalid_header;
    }
    ```
- name: fastcgi_connect_timeout
  id: http/ngx_http_fastcgi_module#fastcgi_connect_timeout
  summary: Defines a timeout for establishing a connection with a FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`fastcgi_connect_timeout`***`time`*`;` |
    | Default: | `fastcgi_connect_timeout 60s;`           |
    | Context: | `http`, `server`, `location`             |

    Defines a timeout for establishing a connection with a FastCGI server. It should be noted that this timeout cannot usually exceed 75 seconds.
- name: fastcgi_force_ranges
  id: http/ngx_http_fastcgi_module#fastcgi_force_ranges
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`fastcgi_force_ranges`**` on | off;` |
    | Default: | `fastcgi_force_ranges off;`            |
    | Context: | `http`, `server`, `location`           |

    This directive appeared in version 1.7.7.

    Enables byte-range support for both cached and uncached responses from the FastCGI server regardless of the “Accept-Ranges” field in these responses.
- name: fastcgi_hide_header
  id: http/ngx_http_fastcgi_module#fastcgi_hide_header
  summary: By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`fastcgi_hide_header`***`field`*`;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client. The `fastcgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [fastcgi_pass_header](#fastcgi_pass_header) directive can be used.
- name: fastcgi_ignore_client_abort
  id: http/ngx_http_fastcgi_module#fastcgi_ignore_client_abort
  summary: Determines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`fastcgi_ignore_client_abort`**` on | off;` |
    | Default: | `fastcgi_ignore_client_abort off;`            |
    | Context: | `http`, `server`, `location`                  |

    Determines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response.
- name: fastcgi_ignore_headers
  id: http/ngx_http_fastcgi_module#fastcgi_ignore_headers
  summary: Disables processing of certain response header fields from the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`fastcgi_ignore_headers`***`field`*` ...;` |
    | Default: | —                                            |
    | Context: | `http`, `server`, `location`                 |

    Disables processing of certain response header fields from the FastCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).

    If not disabled, processing of these header fields has the following effect:

    - “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#fastcgi_cache_valid);
    - “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;
    - “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;
    - “X-Accel-Buffering” enables or disables [buffering](#fastcgi_buffering) of a response;
    - “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.
- name: fastcgi_index
  id: http/ngx_http_fastcgi_module#fastcgi_index
  summary: Sets a file name that will be appended after a URI that ends with a slash, in the value of the $fastcgi_script_name variable
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`fastcgi_index`***`name`*`;` |
    | Default: | —                              |
    | Context: | `http`, `server`, `location`   |

    Sets a file name that will be appended after a URI that ends with a slash, in the value of the `$fastcgi_script_name` variable. For example, with these settings

    ``` nginx
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
    ```

    and the “`/page.php`” request, the `SCRIPT_FILENAME` parameter will be equal to “`/home/www/scripts/php/page.php`”, and with the “`/`” request it will be equal to “`/home/www/scripts/php/index.php`”.
- name: fastcgi_intercept_errors
  id: http/ngx_http_fastcgi_module#fastcgi_intercept_errors
  summary: Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`fastcgi_intercept_errors`**` on | off;` |
    | Default: | `fastcgi_intercept_errors off;`            |
    | Context: | `http`, `server`, `location`               |

    Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.
- name: fastcgi_keep_conn
  id: http/ngx_http_fastcgi_module#fastcgi_keep_conn
  summary: This directive appeared in version 1.1.4
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`fastcgi_keep_conn`**` on | off;` |
    | Default: | `fastcgi_keep_conn off;`            |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.1.4.

    By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value `on`, nginx will instruct a FastCGI server to keep connections open. This is necessary, in particular, for [keepalive](ngx_http_upstream_module#keepalive) connections to FastCGI servers to function.
- name: fastcgi_limit_rate
  id: http/ngx_http_fastcgi_module#fastcgi_limit_rate
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`fastcgi_limit_rate`***`rate`*`;` |
    | Default: | `fastcgi_limit_rate 0;`             |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.7.7.

    Limits the speed of reading the response from the FastCGI server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the FastCFI server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#fastcgi_buffering) of responses from the FastCGI server is enabled. Parameter value can contain variables (1.27.0).
- name: fastcgi_max_temp_file_size
  id: http/ngx_http_fastcgi_module#fastcgi_max_temp_file_size
  summary: When buffering of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the fastcgi_buffer_size and fastcgi_buffers directives, a part of the response can be saved to a temporary file
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`fastcgi_max_temp_file_size`***`size`*`;` |
    | Default: | `fastcgi_max_temp_file_size 1024m;`         |
    | Context: | `http`, `server`, `location`                |

    When [buffering](#fastcgi_buffering) of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [fastcgi_temp_file_write_size](#fastcgi_temp_file_write_size) directive.

    The zero value disables buffering of responses to temporary files.

    This restriction does not apply to responses that will be [cached](#fastcgi_cache) or [stored](#fastcgi_store) on disk.
- name: fastcgi_next_upstream
  id: http/ngx_http_fastcgi_module#fastcgi_next_upstream
  summary: disables passing a request to the next server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                                                                                                                   |
    |----------|---------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`fastcgi_next_upstream`**` error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |
    | Default: | `fastcgi_next_upstream error timeout;`                                                                                                            |
    | Context: | `http`, `server`, `location`                                                                                                                      |

    Specifies in which cases a request should be passed to the next server:

    `error`

    an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `timeout`

    a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `invalid_header`

    a server returned an empty or invalid response;

    `http_500`

    a server returned a response with the code 500;

    `http_503`

    a server returned a response with the code 503;

    `http_403`

    a server returned a response with the code 403;

    `http_404`

    a server returned a response with the code 404;

    `http_429`

    a server returned a response with the code 429 (1.11.13);

    `non_idempotent`

    normally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;

    `off`

    disables passing a request to the next server.

    One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.

    The directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_503`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.

    Passing a request to the next server can be limited by [the number of tries](#fastcgi_next_upstream_tries) and by [time](#fastcgi_next_upstream_timeout).
- name: fastcgi_next_upstream_timeout
  id: http/ngx_http_fastcgi_module#fastcgi_next_upstream_timeout
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`fastcgi_next_upstream_timeout`***`time`*`;` |
    | Default: | `fastcgi_next_upstream_timeout 0;`             |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.7.5.

    Limits the time during which a request can be passed to the [next server](#fastcgi_next_upstream). The `0` value turns off this limitation.
- name: fastcgi_next_upstream_tries
  id: http/ngx_http_fastcgi_module#fastcgi_next_upstream_tries
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`fastcgi_next_upstream_tries`***`number`*`;` |
    | Default: | `fastcgi_next_upstream_tries 0;`               |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.7.5.

    Limits the number of possible tries for passing a request to the [next server](#fastcgi_next_upstream). The `0` value turns off this limitation.
- name: fastcgi_no_cache
  id: http/ngx_http_fastcgi_module#fastcgi_no_cache
  summary: Defines conditions under which the response will not be saved to a cache
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`fastcgi_no_cache`***`string`*` ...;` |
    | Default: | —                                       |
    | Context: | `http`, `server`, `location`            |

    Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:

    ``` nginx
    fastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;
    fastcgi_no_cache $http_pragma    $http_authorization;
    ```

    Can be used along with the [fastcgi_cache_bypass](#fastcgi_cache_bypass) directive.
- name: fastcgi_param
  id: http/ngx_http_fastcgi_module#fastcgi_param
  summary: Sets a parameter that should be passed to the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                         |
    |----------|---------------------------------------------------------|
    | Syntax:  | **`fastcgi_param`***`parametervalue`*` [if_not_empty];` |
    | Default: | —                                                       |
    | Context: | `http`, `server`, `location`                            |

    Sets a *`parameter`* that should be passed to the FastCGI server. The *`value`* can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `fastcgi_param` directives defined on the current level.

    The following example shows the minimum required settings for PHP:

    ``` nginx
    fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
    fastcgi_param QUERY_STRING    $query_string;
    ```

    The `SCRIPT_FILENAME` parameter is used in PHP for determining the script name, and the `QUERY_STRING` parameter is used to pass request parameters.

    For scripts that process `POST` requests, the following three parameters are also required:

    ``` nginx
    fastcgi_param REQUEST_METHOD  $request_method;
    fastcgi_param CONTENT_TYPE    $content_type;
    fastcgi_param CONTENT_LENGTH  $content_length;
    ```

    If PHP was built with the `--enable-force-cgi-redirect` configuration parameter, the `REDIRECT_STATUS` parameter should also be passed with the value “200”:

    ``` nginx
    fastcgi_param REDIRECT_STATUS 200;
    ```

    If the directive is specified with `if_not_empty` (1.1.11) then such a parameter will be passed to the server only if its value is not empty:

    ``` nginx
    fastcgi_param HTTPS           $https if_not_empty;
    ```
- name: fastcgi_pass
  id: http/ngx_http_fastcgi_module#fastcgi_pass
  summary: Sets the address of a FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`fastcgi_pass`***`address`*`;` |
    | Default: | —                                |
    | Context: | `location`, `if in location`     |

    Sets the address of a FastCGI server. The address can be specified as a domain name or IP address, and a port:

    ``` nginx
    fastcgi_pass localhost:9000;
    ```

    or as a UNIX-domain socket path:

    ``` nginx
    fastcgi_pass unix:/tmp/fastcgi.socket;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).

    Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).
- name: fastcgi_pass_header
  id: http/ngx_http_fastcgi_module#fastcgi_pass_header
  summary: Permits passing otherwise disabled header fields from a FastCGI server to a client
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`fastcgi_pass_header`***`field`*`;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    Permits passing [otherwise disabled](#fastcgi_hide_header) header fields from a FastCGI server to a client.
- name: fastcgi_pass_request_body
  id: http/ngx_http_fastcgi_module#fastcgi_pass_request_body
  summary: Indicates whether the original request body is passed to the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`fastcgi_pass_request_body`**` on | off;` |
    | Default: | `fastcgi_pass_request_body on;`             |
    | Context: | `http`, `server`, `location`                |

    Indicates whether the original request body is passed to the FastCGI server. See also the [fastcgi_pass_request_headers](#fastcgi_pass_request_headers) directive.
- name: fastcgi_pass_request_headers
  id: http/ngx_http_fastcgi_module#fastcgi_pass_request_headers
  summary: Indicates whether the header fields of the original request are passed to the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`fastcgi_pass_request_headers`**` on | off;` |
    | Default: | `fastcgi_pass_request_headers on;`             |
    | Context: | `http`, `server`, `location`                   |

    Indicates whether the header fields of the original request are passed to the FastCGI server. See also the [fastcgi_pass_request_body](#fastcgi_pass_request_body) directive.
- name: fastcgi_read_timeout
  id: http/ngx_http_fastcgi_module#fastcgi_read_timeout
  summary: Defines a timeout for reading a response from the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`fastcgi_read_timeout`***`time`*`;` |
    | Default: | `fastcgi_read_timeout 60s;`           |
    | Context: | `http`, `server`, `location`          |

    Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the FastCGI server does not transmit anything within this time, the connection is closed.
- name: fastcgi_request_buffering
  id: http/ngx_http_fastcgi_module#fastcgi_request_buffering
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`fastcgi_request_buffering`**` on | off;` |
    | Default: | `fastcgi_request_buffering on;`             |
    | Context: | `http`, `server`, `location`                |

    This directive appeared in version 1.7.11.

    Enables or disables buffering of a client request body.

    When buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to a FastCGI server.

    When buffering is disabled, the request body is sent to the FastCGI server immediately as it is received. In this case, the request cannot be passed to the [next server](#fastcgi_next_upstream) if nginx already started sending the request body.
- name: fastcgi_send_lowat
  id: http/ngx_http_fastcgi_module#fastcgi_send_lowat
  summary: If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either NOTE_LOWAT flag of the kqueue method, or the SO_SNDLOWAT socket option, with the specified size
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`fastcgi_send_lowat`***`size`*`;` |
    | Default: | `fastcgi_send_lowat 0;`             |
    | Context: | `http`, `server`, `location`        |

    If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either `NOTE_LOWAT` flag of the [kqueue](../events#kqueue) method, or the `SO_SNDLOWAT` socket option, with the specified *`size`*.

    This directive is ignored on Linux, Solaris, and Windows.
- name: fastcgi_send_timeout
  id: http/ngx_http_fastcgi_module#fastcgi_send_timeout
  summary: Sets a timeout for transmitting a request to the FastCGI server
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`fastcgi_send_timeout`***`time`*`;` |
    | Default: | `fastcgi_send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`          |

    Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the FastCGI server does not receive anything within this time, the connection is closed.
- name: fastcgi_socket_keepalive
  id: http/ngx_http_fastcgi_module#fastcgi_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`fastcgi_socket_keepalive`**` on | off;` |
    | Default: | `fastcgi_socket_keepalive off;`            |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.15.6.

    Configures the “TCP keepalive” behavior for outgoing connections to a FastCGI server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.
- name: fastcgi_split_path_info
  id: http/ngx_http_fastcgi_module#fastcgi_split_path_info
  summary: Defines a regular expression that captures a value for the $fastcgi_path_info variable
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`fastcgi_split_path_info`***`regex`*`;` |
    | Default: | —                                         |
    | Context: | `location`                                |

    Defines a regular expression that captures a value for the `$fastcgi_path_info` variable. The regular expression should have two captures: the first becomes a value of the `$fastcgi_script_name` variable, the second becomes a value of the `$fastcgi_path_info` variable. For example, with these settings

    ``` nginx
    location ~ ^(.+\.php)(.*)$ {
        fastcgi_split_path_info       ^(.+\.php)(.*)$;
        fastcgi_param SCRIPT_FILENAME /path/to/php$fastcgi_script_name;
        fastcgi_param PATH_INFO       $fastcgi_path_info;
    ```

    and the “`/show.php/article/0001`” request, the `SCRIPT_FILENAME` parameter will be equal to “`/path/to/php/show.php`”, and the `PATH_INFO` parameter will be equal to “`/article/0001`”.
- name: fastcgi_store
  id: http/ngx_http_fastcgi_module#fastcgi_store
  summary: Enables saving of files to a disk
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`fastcgi_store`**` on | off | `*`string`*`;` |
    | Default: | `fastcgi_store off;`                           |
    | Context: | `http`, `server`, `location`                   |

    Enables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:

    ``` nginx
    fastcgi_store /data/www$original_uri;
    ```

    The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [fastcgi_temp_path](#fastcgi_temp_path) directive, are put on the same file system.

    This directive can be used to create local copies of static unchangeable files, e.g.:

    ``` nginx
    location /images/ {
        root                 /data/www;
        error_page           404 = /fetch$uri;
    }

    location /fetch/ {
        internal;

        fastcgi_pass         backend:9000;
        ...

        fastcgi_store        on;
        fastcgi_store_access user:rw group:rw all:r;
        fastcgi_temp_path    /data/temp;

        alias                /data/www/;
    }
    ```
- name: fastcgi_store_access
  id: http/ngx_http_fastcgi_module#fastcgi_store_access
  summary: null
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                                              |
    |----------|--------------------------------------------------------------|
    | Syntax:  | **`fastcgi_store_access`***`users`*`:`*`permissions`*` ...;` |
    | Default: | `fastcgi_store_access user:rw;`                              |
    | Context: | `http`, `server`, `location`                                 |

    Sets access permissions for newly created files and directories, e.g.:

    ``` nginx
    fastcgi_store_access user:rw group:rw all:r;
    ```

    If any `group` or `all` access permissions are specified then `user` permissions may be omitted:

    ``` nginx
    fastcgi_store_access group:rw all:r;
    ```
- name: fastcgi_temp_file_write_size
  id: http/ngx_http_fastcgi_module#fastcgi_temp_file_write_size
  summary: Limits the size of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled
  belongs_to: ngx_http_fastcgi_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`fastcgi_temp_file_write_size`***`size`*`;` |
    | Default: | `fastcgi_temp_file_write_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`                  |

    Limits the *`size`* of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives. The maximum size of a temporary file is set by the [fastcgi_max_temp_file_size](#fastcgi_max_temp_file_size) directive.
- name: fastcgi_temp_path
  id: http/ngx_http_fastcgi_module#fastcgi_temp_path
  summary: Defines a directory for storing temporary files with data received from FastCGI servers
  belongs_to: ngx_http_fastcgi_module
  description: "|          |                                                                                 |\n|----------|---------------------------------------------------------------------------------|\n| Syntax:  | **`fastcgi_temp_path`***`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `fastcgi_temp_path fastcgi_temp;`                                               |\n| Context: | `http`, `server`, `location`                                                    |\n\nDefines a directory for storing temporary files with data received from FastCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nfastcgi_temp_path /spool/nginx/fastcgi_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/fastcgi_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [fastcgi_cache_path](#fastcgi_cache_path) directive.\n\n#### Parameters Passed to a FastCGI Server\n\nHTTP request header fields are passed to a FastCGI server as parameters. In applications and scripts running as FastCGI servers, these parameters are usually made available as environment variables. For example, the “User-Agent” header field is passed as the `HTTP_USER_AGENT` parameter. In addition to HTTP request header fields, it is possible to pass arbitrary parameters using the [fastcgi_param](#fastcgi_param) directive.\n\n#### Embedded Variables\n\nThe `ngx_http_fastcgi_module` module supports embedded variables that can be used to set parameters using the [fastcgi_param](#fastcgi_param) directive:\n\n`$fastcgi_script_name`\n\nrequest URI or, if a URI ends with a slash, request URI with an index file name configured by the [fastcgi_index](#fastcgi_index) directive appended to it. This variable can be used to set the `SCRIPT_FILENAME` and `PATH_TRANSLATED` parameters that determine the script name in PHP. For example, for the “`/info/`” request with the following directives\n\n``` nginx\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n```\n\nthe `SCRIPT_FILENAME` parameter will be equal to “`/home/www/scripts/php/info/index.php`”.\n\nWhen using the [fastcgi_split_path_info](#fastcgi_split_path_info) directive, the `$fastcgi_script_name` variable equals the value of the first capture set by the directive.\n\n`$fastcgi_path_info`\n\nthe value of the second capture set by the [fastcgi_split_path_info](#fastcgi_split_path_info) directive. This variable can be used to set the `PATH_INFO` parameter.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html)"
- name: flv
  id: http/ngx_http_flv_module#flv
  summary: Turns on module processing in a surrounding location
  belongs_to: ngx_http_flv_module
  description: "|          |              |\n|----------|--------------|\n| Syntax:  | **`flv`**`;` |\n| Default: | —            |\n| Context: | `location`   |\n\nTurns on module processing in a surrounding location.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_flv_module.html](https://nginx.org/en/docs/http/ngx_http_flv_module.html)"
- name: geo
  id: http/ngx_http_geo_module#geo
  summary: Describes the dependency of values of the specified variable on the client IP address
  belongs_to: ngx_http_geo_module
  description: "|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`geo`**` [`*`$address`*`] `*`$variable`*` { ... }` |\n| Default: | —                                                    |\n| Context: | `http`                                               |\n\nDescribes the dependency of values of the specified variable on the client IP address. By default, the address is taken from the `$remote_addr` variable, but it can also be taken from another variable (0.7.27), for example:\n\n``` nginx\ngeo $arg_remote_addr $geo {\n    ...;\n}\n```\n\nSince variables are evaluated only when used, the mere existence of even a large number of declared “`geo`” variables does not cause any extra costs for request processing.\n\nIf the value of a variable does not represent a valid IP address then the “`255.255.255.255`” address is used.\n\nAddresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges (0.7.23).\n\nIPv6 prefixes are supported starting from versions 1.3.10 and 1.2.7.\n\nThe following special parameters are also supported:\n\n`delete`\n\ndeletes the specified network (0.7.23).\n\n`default`\n\na value set to the variable if the client address does not match any of the specified addresses. When addresses are specified in CIDR notation, “`0.0.0.0/0`” and “`::/0`” can be used instead of `default`. When `default` is not specified, the default value will be an empty string.\n\n`include`\n\nincludes a file with addresses and values. There can be several inclusions.\n\n`proxy`\n\ndefines trusted addresses (0.8.7, 0.7.63). When a request comes from a trusted address, an address from the “X-Forwarded-For” request header field will be used instead. In contrast to the regular addresses, trusted addresses are checked sequentially.\n\nTrusted IPv6 addresses are supported starting from versions 1.3.0 and 1.2.1.\n\n`proxy_recursive`\n\nenables recursive address search (1.3.0, 1.2.1). If recursive search is disabled then instead of the original client address that matches one of the trusted addresses, the last address sent in “X-Forwarded-For” will be used. If recursive search is enabled then instead of the original client address that matches one of the trusted addresses, the last non-trusted address sent in “X-Forwarded-For” will be used.\n\n`ranges`\n\nindicates that addresses are specified as ranges (0.7.23). This parameter should be the first. To speed up loading of a geo base, addresses should be put in ascending order.\n\nExample:\n\n``` nginx\ngeo $country {\n    default        ZZ;\n    include        conf/geo.conf;\n    delete         127.0.0.0/16;\n    proxy          192.168.100.0/24;\n    proxy          2001:0db8::/32;\n\n    127.0.0.0/24   US;\n    127.0.0.1/32   RU;\n    10.1.0.0/16    RU;\n    192.168.1.0/24 UK;\n}\n```\n\nThe `conf/geo.conf` file could contain the following lines:\n\n``` nginx\n10.2.0.0/16    RU;\n192.168.2.0/24 RU;\n```\n\nA value of the most specific match is used. For example, for the 127.0.0.1 address the value “`RU`” will be chosen, not “`US`”.\n\nExample with ranges:\n\n``` nginx\ngeo $country {\n    ranges;\n    default                   ZZ;\n    127.0.0.0-127.0.0.0       US;\n    127.0.0.1-127.0.0.1       RU;\n    127.0.0.1-127.0.0.255     US;\n    10.1.0.0-10.1.255.255     RU;\n    192.168.1.0-192.168.1.255 UK;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_geo_module.html](https://nginx.org/en/docs/http/ngx_http_geo_module.html)"
- name: geo (ngx_stream_geo_module)
  id: stream/ngx_stream_geo_module#geo
  summary: Describes the dependency of values of the specified variable on the client IP address
  belongs_to: ngx_stream_geo_module
  description: "|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`geo`**` [`*`$address`*`] `*`$variable`*` { ... }` |\n| Default: | —                                                    |\n| Context: | `stream`                                             |\n\nDescribes the dependency of values of the specified variable on the client IP address. By default, the address is taken from the `$remote_addr` variable, but it can also be taken from another variable, for example:\n\n``` nginx\ngeo $arg_remote_addr $geo {\n    ...;\n}\n```\n\nSince variables are evaluated only when used, the mere existence of even a large number of declared “`geo`” variables does not cause any extra costs for connection processing.\n\nIf the value of a variable does not represent a valid IP address then the “`255.255.255.255`” address is used.\n\nAddresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges.\n\nThe following special parameters are also supported:\n\n`delete`\n\ndeletes the specified network.\n\n`default`\n\na value set to the variable if the client address does not match any of the specified addresses. When addresses are specified in CIDR notation, “`0.0.0.0/0`” and “`::/0`” can be used instead of `default`. When `default` is not specified, the default value will be an empty string.\n\n`include`\n\nincludes a file with addresses and values. There can be several inclusions.\n\n`ranges`\n\nindicates that addresses are specified as ranges. This parameter should be the first. To speed up loading of a geo base, addresses should be put in ascending order.\n\nExample:\n\n``` nginx\ngeo $country {\n    default        ZZ;\n    include        conf/geo.conf;\n    delete         127.0.0.0/16;\n\n    127.0.0.0/24   US;\n    127.0.0.1/32   RU;\n    10.1.0.0/16    RU;\n    192.168.1.0/24 UK;\n}\n```\n\nThe `conf/geo.conf` file could contain the following lines:\n\n``` nginx\n10.2.0.0/16    RU;\n192.168.2.0/24 RU;\n```\n\nA value of the most specific match is used. For example, for the 127.0.0.1 address the value “`RU`” will be chosen, not “`US`”.\n\nExample with ranges:\n\n``` nginx\ngeo $country {\n    ranges;\n    default                   ZZ;\n    127.0.0.0-127.0.0.0       US;\n    127.0.0.1-127.0.0.1       RU;\n    127.0.0.1-127.0.0.255     US;\n    10.1.0.0-10.1.255.255     RU;\n    192.168.1.0-192.168.1.255 UK;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_geo_module.html](https://nginx.org/en/docs/stream/ngx_stream_geo_module.html)"
- name: geoip_city
  id: http/ngx_http_geoip_module#geoip_city
  summary: Specifies a database used to determine the country, region, and city depending on the client IP address
  belongs_to: ngx_http_geoip_module
  description: |-
    |          |                             |
    |----------|-----------------------------|
    | Syntax:  | **`geoip_city`***`file`*`;` |
    | Default: | —                           |
    | Context: | `http`                      |

    Specifies a database used to determine the country, region, and city depending on the client IP address. The following variables are available when using this database:

    `$geoip_area_code`

    telephone area code (US only).

    This variable may contain outdated information since the corresponding database field is deprecated.

    `$geoip_city_continent_code`

    two-letter continent code, for example, “`EU`”, “`NA`”.

    `$geoip_city_country_code`

    two-letter country code, for example, “`RU`”, “`US`”.

    `$geoip_city_country_code3`

    three-letter country code, for example, “`RUS`”, “`USA`”.

    `$geoip_city_country_name`

    country name, for example, “`Russian Federation`”, “`United States`”.

    `$geoip_dma_code`

    DMA region code in US (also known as “metro code”), according to the [geotargeting](https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions) in Google AdWords API.

    `$geoip_latitude`

    latitude.

    `$geoip_longitude`

    longitude.

    `$geoip_region`

    two-symbol country region code (region, territory, state, province, federal land and the like), for example, “`48`”, “`DC`”.

    `$geoip_region_name`

    country region name (region, territory, state, province, federal land and the like), for example, “`Moscow City`”, “`District of Columbia`”.

    `$geoip_city`

    city name, for example, “`Moscow`”, “`Washington`”.

    `$geoip_postal_code`

    postal code.
- name: geoip_city (ngx_stream_geoip_module)
  id: stream/ngx_stream_geoip_module#geoip_city
  summary: Specifies a database used to determine the country, region, and city depending on the client IP address
  belongs_to: ngx_stream_geoip_module
  description: |-
    |          |                             |
    |----------|-----------------------------|
    | Syntax:  | **`geoip_city`***`file`*`;` |
    | Default: | —                           |
    | Context: | `stream`                    |

    Specifies a database used to determine the country, region, and city depending on the client IP address. The following variables are available when using this database:

    `$geoip_area_code`

    telephone area code (US only).

    This variable may contain outdated information since the corresponding database field is deprecated.

    `$geoip_city_continent_code`

    two-letter continent code, for example, “`EU`”, “`NA`”.

    `$geoip_city_country_code`

    two-letter country code, for example, “`RU`”, “`US`”.

    `$geoip_city_country_code3`

    three-letter country code, for example, “`RUS`”, “`USA`”.

    `$geoip_city_country_name`

    country name, for example, “`Russian Federation`”, “`United States`”.

    `$geoip_dma_code`

    DMA region code in US (also known as “metro code”), according to the [geotargeting](https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions) in Google AdWords API.

    `$geoip_latitude`

    latitude.

    `$geoip_longitude`

    longitude.

    `$geoip_region`

    two-symbol country region code (region, territory, state, province, federal land and the like), for example, “`48`”, “`DC`”.

    `$geoip_region_name`

    country region name (region, territory, state, province, federal land and the like), for example, “`Moscow City`”, “`District of Columbia`”.

    `$geoip_city`

    city name, for example, “`Moscow`”, “`Washington`”.

    `$geoip_postal_code`

    postal code.
- name: geoip_country
  id: http/ngx_http_geoip_module#geoip_country
  summary: Specifies a database used to determine the country depending on the client IP address
  belongs_to: ngx_http_geoip_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`geoip_country`***`file`*`;` |
    | Default: | —                              |
    | Context: | `http`                         |

    Specifies a database used to determine the country depending on the client IP address. The following variables are available when using this database:

    `$geoip_country_code`

    two-letter country code, for example, “`RU`”, “`US`”.

    `$geoip_country_code3`

    three-letter country code, for example, “`RUS`”, “`USA`”.

    `$geoip_country_name`

    country name, for example, “`Russian Federation`”, “`United States`”.
- name: geoip_country (ngx_stream_geoip_module)
  id: stream/ngx_stream_geoip_module#geoip_country
  summary: Specifies a database used to determine the country depending on the client IP address
  belongs_to: ngx_stream_geoip_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`geoip_country`***`file`*`;` |
    | Default: | —                              |
    | Context: | `stream`                       |

    Specifies a database used to determine the country depending on the client IP address. The following variables are available when using this database:

    `$geoip_country_code`

    two-letter country code, for example, “`RU`”, “`US`”.

    `$geoip_country_code3`

    three-letter country code, for example, “`RUS`”, “`USA`”.

    `$geoip_country_name`

    country name, for example, “`Russian Federation`”, “`United States`”.
- name: geoip_org
  id: http/ngx_http_geoip_module#geoip_org
  summary: This directive appeared in version 1.0.3
  belongs_to: ngx_http_geoip_module
  description: |-
    |          |                            |
    |----------|----------------------------|
    | Syntax:  | **`geoip_org`***`file`*`;` |
    | Default: | —                          |
    | Context: | `http`                     |

    This directive appeared in version 1.0.3.

    Specifies a database used to determine the organization depending on the client IP address. The following variable is available when using this database:

    `$geoip_org`

    organization name, for example, “The University of Melbourne”.
- name: geoip_org (ngx_stream_geoip_module)
  id: stream/ngx_stream_geoip_module#geoip_org
  summary: Specifies a database used to determine the organization depending on the client IP address
  belongs_to: ngx_stream_geoip_module
  description: "|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`geoip_org`***`file`*`;` |\n| Default: | —                          |\n| Context: | `stream`                   |\n\nSpecifies a database used to determine the organization depending on the client IP address. The following variable is available when using this database:\n\n`$geoip_org`\n\norganization name, for example, “The University of Melbourne”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html](https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html)"
- name: geoip_proxy
  id: http/ngx_http_geoip_module#geoip_proxy
  summary: This directive appeared in versions 1.3.0 and 1.2.1
  belongs_to: ngx_http_geoip_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`geoip_proxy`***`address`*` | `*`CIDR`*`;` |
    | Default: | —                                            |
    | Context: | `http`                                       |

    This directive appeared in versions 1.3.0 and 1.2.1.

    Defines trusted addresses. When a request comes from a trusted address, an address from the “X-Forwarded-For” request header field will be used instead.
- name: geoip_proxy_recursive
  id: http/ngx_http_geoip_module#geoip_proxy_recursive
  summary: This directive appeared in versions 1.3.0 and 1.2.1
  belongs_to: ngx_http_geoip_module
  description: "|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`geoip_proxy_recursive`**` on | off;` |\n| Default: | `geoip_proxy_recursive off;`            |\n| Context: | `http`                                  |\n\nThis directive appeared in versions 1.3.0 and 1.2.1.\n\nIf recursive search is disabled then instead of the original client address that matches one of the trusted addresses, the last address sent in “X-Forwarded-For” will be used. If recursive search is enabled then instead of the original client address that matches one of the trusted addresses, the last non-trusted address sent in “X-Forwarded-For” will be used.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_geoip_module.html](https://nginx.org/en/docs/http/ngx_http_geoip_module.html)"
- name: google_perftools_profiles (ngx_google_perftools_module)
  id: ngx_google_perftools_module#google_perftools_profiles
  summary: Sets a file name that keeps profiling information of nginx worker process
  belongs_to: ngx_google_perftools_module
  description: "|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`google_perftools_profiles`***`file`*`;` |\n| Default: | —                                          |\n| Context: | `main`                                     |\n\nSets a file name that keeps profiling information of nginx worker process. The ID of the worker process is always a part of the file name and is appended to the end of the file name, after a dot.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_google_perftools_module.html](https://nginx.org/en/docs/ngx_google_perftools_module.html)"
- name: grpc_bind
  id: http/ngx_http_grpc_module#grpc_bind
  summary: Makes outgoing connections to a gRPC server originate from the specified local IP address with an optional port
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`grpc_bind`***`address`*` [transparent ] | off;` |
    | Default: | —                                                  |
    | Context: | `http`, `server`, `location`                       |

    Makes outgoing connections to a gRPC server originate from the specified local IP address with an optional port. Parameter value can contain variables. The special value `off` cancels the effect of the `grpc_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.

    The `transparent` parameter allows outgoing connections to a gRPC server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    grpc_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the gRPC server.
- name: grpc_buffer_size
  id: http/ngx_http_grpc_module#grpc_buffer_size
  summary: Sets the size of the buffer used for reading the response received from the gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`grpc_buffer_size`***`size`*`;` |
    | Default: | `grpc_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`      |

    Sets the *`size`* of the buffer used for reading the response received from the gRPC server. The response is passed to the client synchronously, as soon as it is received.
- name: grpc_connect_timeout
  id: http/ngx_http_grpc_module#grpc_connect_timeout
  summary: Defines a timeout for establishing a connection with a gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`grpc_connect_timeout`***`time`*`;` |
    | Default: | `grpc_connect_timeout 60s;`           |
    | Context: | `http`, `server`, `location`          |

    Defines a timeout for establishing a connection with a gRPC server. It should be noted that this timeout cannot usually exceed 75 seconds.
- name: grpc_hide_header
  id: http/ngx_http_grpc_module#grpc_hide_header
  summary: By default, nginx does not pass the header fields “Date”, “Server”, and “X-Accel-...” from the response of a gRPC server to a client
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`grpc_hide_header`***`field`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    By default, nginx does not pass the header fields “Date”, “Server”, and “X-Accel-...” from the response of a gRPC server to a client. The `grpc_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [grpc_pass_header](#grpc_pass_header) directive can be used.
- name: grpc_ignore_headers
  id: http/ngx_http_grpc_module#grpc_ignore_headers
  summary: Disables processing of certain response header fields from the gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`grpc_ignore_headers`***`field`*` ...;` |
    | Default: | —                                         |
    | Context: | `http`, `server`, `location`              |

    Disables processing of certain response header fields from the gRPC server. The following fields can be ignored: “X-Accel-Redirect” and “X-Accel-Charset”.

    If not disabled, processing of these header fields has the following effect:

    - “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;
    - “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.
- name: grpc_intercept_errors
  id: http/ngx_http_grpc_module#grpc_intercept_errors
  summary: Determines whether gRPC server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`grpc_intercept_errors`**` on | off;` |
    | Default: | `grpc_intercept_errors off;`            |
    | Context: | `http`, `server`, `location`            |

    Determines whether gRPC server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.
- name: grpc_next_upstream
  id: http/ngx_http_grpc_module#grpc_next_upstream
  summary: disables passing a request to the next server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                                                                                                                                                      |
    |----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`grpc_next_upstream`**` error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |
    | Default: | `grpc_next_upstream error timeout;`                                                                                                                                  |
    | Context: | `http`, `server`, `location`                                                                                                                                         |

    Specifies in which cases a request should be passed to the next server:

    `error`

    an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `timeout`

    a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `invalid_header`

    a server returned an empty or invalid response;

    `http_500`

    a server returned a response with the code 500;

    `http_502`

    a server returned a response with the code 502;

    `http_503`

    a server returned a response with the code 503;

    `http_504`

    a server returned a response with the code 504;

    `http_403`

    a server returned a response with the code 403;

    `http_404`

    a server returned a response with the code 404;

    `http_429`

    a server returned a response with the code 429;

    `non_idempotent`

    normally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server; enabling this option explicitly allows retrying such requests;

    `off`

    disables passing a request to the next server.

    One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.

    The directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_502`, `http_503`, `http_504`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.

    Passing a request to the next server can be limited by [the number of tries](#grpc_next_upstream_tries) and by [time](#grpc_next_upstream_timeout).
- name: grpc_next_upstream_timeout
  id: http/ngx_http_grpc_module#grpc_next_upstream_timeout
  summary: Limits the time during which a request can be passed to the next server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`grpc_next_upstream_timeout`***`time`*`;` |
    | Default: | `grpc_next_upstream_timeout 0;`             |
    | Context: | `http`, `server`, `location`                |

    Limits the time during which a request can be passed to the [next server](#grpc_next_upstream). The `0` value turns off this limitation.
- name: grpc_next_upstream_tries
  id: http/ngx_http_grpc_module#grpc_next_upstream_tries
  summary: Limits the number of possible tries for passing a request to the next server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`grpc_next_upstream_tries`***`number`*`;` |
    | Default: | `grpc_next_upstream_tries 0;`               |
    | Context: | `http`, `server`, `location`                |

    Limits the number of possible tries for passing a request to the [next server](#grpc_next_upstream). The `0` value turns off this limitation.
- name: grpc_pass
  id: http/ngx_http_grpc_module#grpc_pass
  summary: Sets the gRPC server address
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`grpc_pass`***`address`*`;` |
    | Default: | —                             |
    | Context: | `location`, `if in location`  |

    Sets the gRPC server address. The address can be specified as a domain name or IP address, and a port:

    ``` nginx
    grpc_pass localhost:9000;
    ```

    or as a UNIX-domain socket path:

    ``` nginx
    grpc_pass unix:/tmp/grpc.socket;
    ```

    Alternatively, the “`grpc://`” scheme can be used:

    ``` nginx
    grpc_pass grpc://127.0.0.1:9000;
    ```

    To use gRPC over SSL, the “`grpcs://`” scheme should be used:

    ``` nginx
    grpc_pass grpcs://127.0.0.1:443;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).

    Parameter value can contain variables (1.17.8). In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).
- name: grpc_pass_header
  id: http/ngx_http_grpc_module#grpc_pass_header
  summary: Permits passing otherwise disabled header fields from a gRPC server to a client
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`grpc_pass_header`***`field`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    Permits passing [otherwise disabled](#grpc_hide_header) header fields from a gRPC server to a client.
- name: grpc_read_timeout
  id: http/ngx_http_grpc_module#grpc_read_timeout
  summary: Defines a timeout for reading a response from the gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`grpc_read_timeout`***`time`*`;` |
    | Default: | `grpc_read_timeout 60s;`           |
    | Context: | `http`, `server`, `location`       |

    Defines a timeout for reading a response from the gRPC server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the gRPC server does not transmit anything within this time, the connection is closed.
- name: grpc_send_timeout
  id: http/ngx_http_grpc_module#grpc_send_timeout
  summary: Sets a timeout for transmitting a request to the gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`grpc_send_timeout`***`time`*`;` |
    | Default: | `grpc_send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`       |

    Sets a timeout for transmitting a request to the gRPC server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the gRPC server does not receive anything within this time, the connection is closed.
- name: grpc_set_header
  id: http/ngx_http_grpc_module#grpc_set_header
  summary: Allows redefining or appending fields to the request header passed to the gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`grpc_set_header`***`fieldvalue`*`;`            |
    | Default: | `grpc_set_header Content-Length $content_length;` |
    | Context: | `http`, `server`, `location`                      |

    Allows redefining or appending fields to the request header [passed](#grpc_pass_request_headers) to the gRPC server. The *`value`* can contain text, variables, and their combinations. These directives are inherited from the previous configuration level if and only if there are no `grpc_set_header` directives defined on the current level.

    If the value of a header field is an empty string then this field will not be passed to a gRPC server:

    ``` nginx
    grpc_set_header Accept-Encoding "";
    ```
- name: grpc_socket_keepalive
  id: http/ngx_http_grpc_module#grpc_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`grpc_socket_keepalive`**` on | off;` |
    | Default: | `grpc_socket_keepalive off;`            |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.15.6.

    Configures the “TCP keepalive” behavior for outgoing connections to a gRPC server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.
- name: grpc_ssl_certificate
  id: http/ngx_http_grpc_module#grpc_ssl_certificate
  summary: Specifies a file with the certificate in the PEM format used for authentication to a gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`grpc_ssl_certificate`***`file`*`;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    Specifies a *`file`* with the certificate in the PEM format used for authentication to a gRPC SSL server.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: grpc_ssl_certificate_key
  id: http/ngx_http_grpc_module#grpc_ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format used for authentication to a gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`grpc_ssl_certificate_key`***`file`*`;` |
    | Default: | —                                         |
    | Context: | `http`, `server`, `location`              |

    Specifies a *`file`* with the secret key in the PEM format used for authentication to a gRPC SSL server.

    The value `engine`:*`name`*:*`id`* can be specified instead of the *`file`*, which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: grpc_ssl_ciphers
  id: http/ngx_http_grpc_module#grpc_ssl_ciphers
  summary: Specifies the enabled ciphers for requests to a gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`grpc_ssl_ciphers`***`ciphers`*`;` |
    | Default: | `grpc_ssl_ciphers DEFAULT;`          |
    | Context: | `http`, `server`, `location`         |

    Specifies the enabled ciphers for requests to a gRPC SSL server. The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: grpc_ssl_conf_command
  id: http/ngx_http_grpc_module#grpc_ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`grpc_ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                           |
    | Context: | `http`, `server`, `location`                |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the gRPC SSL server.

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `grpc_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `grpc_ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: grpc_ssl_crl
  id: http/ngx_http_grpc_module#grpc_ssl_crl
  summary: Specifies a file with revoked certificates (CRL) in the PEM format used to verify the certificate of the gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`grpc_ssl_crl`***`file`*`;` |
    | Default: | —                             |
    | Context: | `http`, `server`, `location`  |

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#grpc_ssl_verify) the certificate of the gRPC SSL server.
- name: grpc_ssl_name
  id: http/ngx_http_grpc_module#grpc_ssl_name
  summary: Allows overriding the server name used to verify the certificate of the gRPC SSL server and to be passed through SNI when establishing a connection with the gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`grpc_ssl_name`***`name`*`;`       |
    | Default: | `grpc_ssl_name host from grpc_pass;` |
    | Context: | `http`, `server`, `location`         |

    Allows overriding the server name used to [verify](#grpc_ssl_verify) the certificate of the gRPC SSL server and to be [passed through SNI](#grpc_ssl_server_name) when establishing a connection with the gRPC SSL server.

    By default, the host part from [grpc_pass](#grpc_pass) is used.
- name: grpc_ssl_password_file
  id: http/ngx_http_grpc_module#grpc_ssl_password_file
  summary: Specifies a file with passphrases for secret keys where each passphrase is specified on a separate line
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`grpc_ssl_password_file`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `http`, `server`, `location`            |

    Specifies a *`file`* with passphrases for [secret keys](#grpc_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.
- name: grpc_ssl_protocols
  id: http/ngx_http_grpc_module#grpc_ssl_protocols
  summary: Enables the specified protocols for requests to a gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                                                                   |
    |----------|-----------------------------------------------------------------------------------|
    | Syntax:  | **`grpc_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `grpc_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `http`, `server`, `location`                                                      |

    Enables the specified protocols for requests to a gRPC SSL server.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: grpc_ssl_server_name
  id: http/ngx_http_grpc_module#grpc_ssl_server_name
  summary: Enables or disables passing of the server name through TLS Server Name Indication extension (SNI, RFC 6066) when establishing a connection with the gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`grpc_ssl_server_name`**` on | off;` |
    | Default: | `grpc_ssl_server_name off;`            |
    | Context: | `http`, `server`, `location`           |

    Enables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the gRPC SSL server.
- name: grpc_ssl_session_reuse
  id: http/ngx_http_grpc_module#grpc_ssl_session_reuse
  summary: Determines whether SSL sessions can be reused when working with the gRPC server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`grpc_ssl_session_reuse`**` on | off;` |
    | Default: | `grpc_ssl_session_reuse on;`             |
    | Context: | `http`, `server`, `location`             |

    Determines whether SSL sessions can be reused when working with the gRPC server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.
- name: grpc_ssl_trusted_certificate
  id: http/ngx_http_grpc_module#grpc_ssl_trusted_certificate
  summary: Specifies a file with trusted CA certificates in the PEM format used to verify the certificate of the gRPC SSL server
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`grpc_ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                             |
    | Context: | `http`, `server`, `location`                  |

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#grpc_ssl_verify) the certificate of the gRPC SSL server.
- name: grpc_ssl_verify
  id: http/ngx_http_grpc_module#grpc_ssl_verify
  summary: Enables or disables verification of the gRPC SSL server certificate
  belongs_to: ngx_http_grpc_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`grpc_ssl_verify`**` on | off;` |
    | Default: | `grpc_ssl_verify off;`            |
    | Context: | `http`, `server`, `location`      |

    Enables or disables verification of the gRPC SSL server certificate.
- name: grpc_ssl_verify_depth
  id: http/ngx_http_grpc_module#grpc_ssl_verify_depth
  summary: Sets the verification depth in the gRPC SSL server certificates chain
  belongs_to: ngx_http_grpc_module
  description: "|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`grpc_ssl_verify_depth`***`number`*`;` |\n| Default: | `grpc_ssl_verify_depth 1;`               |\n| Context: | `http`, `server`, `location`             |\n\nSets the verification depth in the gRPC SSL server certificates chain.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_grpc_module.html](https://nginx.org/en/docs/http/ngx_http_grpc_module.html)"
- name: gunzip
  id: http/ngx_http_gunzip_module#gunzip
  summary: Enables or disables decompression of gzipped responses for clients that lack gzip support
  belongs_to: ngx_http_gunzip_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`gunzip`**` on | off;`     |
    | Default: | `gunzip off;`                |
    | Context: | `http`, `server`, `location` |

    Enables or disables decompression of gzipped responses for clients that lack gzip support. If enabled, the following directives are also taken into account when determining if clients support gzip: [gzip_http_version](ngx_http_gzip_module#gzip_http_version), [gzip_proxied](ngx_http_gzip_module#gzip_proxied), and [gzip_disable](ngx_http_gzip_module#gzip_disable). See also the [gzip_vary](ngx_http_gzip_module#gzip_vary) directive.
- name: gunzip_buffers
  id: http/ngx_http_gunzip_module#gunzip_buffers
  summary: Sets the number and size of buffers used to decompress a response
  belongs_to: ngx_http_gunzip_module
  description: "|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`gunzip_buffers`***`numbersize`*`;` |\n| Default: | `gunzip_buffers 32 4k|16 8k;`         |\n| Context: | `http`, `server`, `location`          |\n\nSets the *`number`* and *`size`* of buffers used to decompress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_gunzip_module.html](https://nginx.org/en/docs/http/ngx_http_gunzip_module.html)"
- name: gzip
  id: http/ngx_http_gzip_module#gzip
  summary: Enables or disables gzipping of responses
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`gzip`**` on | off;`                         |
    | Default: | `gzip off;`                                    |
    | Context: | `http`, `server`, `location`, `if in location` |

    Enables or disables gzipping of responses.
- name: gzip_buffers
  id: http/ngx_http_gzip_module#gzip_buffers
  summary: Sets the number and size of buffers used to compress a response
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`gzip_buffers`***`numbersize`*`;` |
    | Default: | `gzip_buffers 32 4k|16 8k;`         |
    | Context: | `http`, `server`, `location`        |

    Sets the *`number`* and *`size`* of buffers used to compress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.

    Until version 0.7.28, four 4K or 8K buffers were used by default.
- name: gzip_comp_level
  id: http/ngx_http_gzip_module#gzip_comp_level
  summary: Sets a gzip compression level of a response
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`gzip_comp_level`***`level`*`;` |
    | Default: | `gzip_comp_level 1;`              |
    | Context: | `http`, `server`, `location`      |

    Sets a gzip compression *`level`* of a response. Acceptable values are in the range from 1 to 9.
- name: gzip_disable
  id: http/ngx_http_gzip_module#gzip_disable
  summary: This directive appeared in version 0.6.23
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`gzip_disable`***`regex`*` ...;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 0.6.23.

    Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions.

    The special mask “`msie6`” (0.7.12) corresponds to the regular expression “`MSIE [4-6]\.`”, but works faster. Starting from version 0.8.11, “`MSIE 6.0; ... SV1`” is excluded from this mask.
- name: gzip_http_version
  id: http/ngx_http_gzip_module#gzip_http_version
  summary: Sets the minimum HTTP version of a request required to compress a response
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`gzip_http_version`**` 1.0 | 1.1;` |
    | Default: | `gzip_http_version 1.1;`             |
    | Context: | `http`, `server`, `location`         |

    Sets the minimum HTTP version of a request required to compress a response.
- name: gzip_min_length
  id: http/ngx_http_gzip_module#gzip_min_length
  summary: Sets the minimum length of a response that will be gzipped
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`gzip_min_length`***`length`*`;` |
    | Default: | `gzip_min_length 20;`              |
    | Context: | `http`, `server`, `location`       |

    Sets the minimum length of a response that will be gzipped. The length is determined only from the “Content-Length” response header field.
- name: gzip_proxied
  id: http/ngx_http_gzip_module#gzip_proxied
  summary: Enables or disables gzipping of responses for proxied requests depending on the request and response
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                                                                                                   |
    |----------|-------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`gzip_proxied`**` off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;` |
    | Default: | `gzip_proxied off;`                                                                                               |
    | Context: | `http`, `server`, `location`                                                                                      |

    Enables or disables gzipping of responses for proxied requests depending on the request and response. The fact that the request is proxied is determined by the presence of the “Via” request header field. The directive accepts multiple parameters:

    `off`

    disables compression for all proxied requests, ignoring other parameters;

    `expired`

    enables compression if a response header includes the “Expires” field with a value that disables caching;

    `no-cache`

    enables compression if a response header includes the “Cache-Control” field with the “`no-cache`” parameter;

    `no-store`

    enables compression if a response header includes the “Cache-Control” field with the “`no-store`” parameter;

    `private`

    enables compression if a response header includes the “Cache-Control” field with the “`private`” parameter;

    `no_last_modified`

    enables compression if a response header does not include the “Last-Modified” field;

    `no_etag`

    enables compression if a response header does not include the “ETag” field;

    `auth`

    enables compression if a request header includes the “Authorization” field;

    `any`

    enables compression for all proxied requests.
- name: gzip_static
  id: http/ngx_http_gzip_static_module#gzip_static
  summary: Enables (“on”) or disables (“off”) checking the existence of precompressed files
  belongs_to: ngx_http_gzip_static_module
  description: "|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`gzip_static`**` on | off | always;` |\n| Default: | `gzip_static off;`                     |\n| Context: | `http`, `server`, `location`           |\n\nEnables (“`on`”) or disables (“`off`”) checking the existence of precompressed files. The following directives are also taken into account: [gzip_http_version](ngx_http_gzip_module#gzip_http_version), [gzip_proxied](ngx_http_gzip_module#gzip_proxied), [gzip_disable](ngx_http_gzip_module#gzip_disable), and [gzip_vary](ngx_http_gzip_module#gzip_vary).\n\nWith the “`always`” value (1.3.6), gzipped file is used in all cases, without checking if the client supports it. It is useful if there are no uncompressed files on the disk anyway or the [ngx_http_gunzip_module](ngx_http_gunzip_module) is used.\n\nThe files can be compressed using the `gzip` command, or any other compatible one. It is recommended that the modification date and time of original and compressed files be the same.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html](https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html)"
- name: gzip_types
  id: http/ngx_http_gzip_module#gzip_types
  summary: Enables gzipping of responses for the specified MIME types in addition to “text/html”. The special value “*” matches any MIME type (0.8.29)
  belongs_to: ngx_http_gzip_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`gzip_types`***`mime-type`*` ...;` |
    | Default: | `gzip_types text/html;`              |
    | Context: | `http`, `server`, `location`         |

    Enables gzipping of responses for the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29). Responses with the “`text/html`” type are always compressed.
- name: gzip_vary
  id: http/ngx_http_gzip_module#gzip_vary
  summary: 'Enables or disables inserting the “Vary: Accept-Encoding” response header field if the directives gzip, gzip_static, or gunzip are active'
  belongs_to: ngx_http_gzip_module
  description: "|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`gzip_vary`**` on | off;`  |\n| Default: | `gzip_vary off;`             |\n| Context: | `http`, `server`, `location` |\n\nEnables or disables inserting the “Vary: Accept-Encoding” response header field if the directives [gzip](#gzip), [gzip_static](ngx_http_gzip_static_module#gzip_static), or [gunzip](ngx_http_gunzip_module#gunzip) are active.\n\n#### Embedded Variables\n\n`$gzip_ratio`\n\nachieved compression ratio, computed as the ratio between the original and compressed response sizes.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_gzip_module.html](https://nginx.org/en/docs/http/ngx_http_gzip_module.html)"
- name: hash
  id: http/ngx_http_upstream_module#hash
  summary: This directive appeared in version 1.7.2
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`hash`***`key`*` [consistent];` |
    | Default: | —                                 |
    | Context: | `upstream`                        |

    This directive appeared in version 1.7.2.

    Specifies a load balancing method for a server group where the client-server mapping is based on the hashed *`key`* value. The *`key`* can contain text, variables, and their combinations. Note that adding or removing a server from the group may result in remapping most of the keys to different servers. The method is compatible with the [Cache::Memcached](https://metacpan.org/pod/Cache::Memcached) Perl library.

    If the `consistent` parameter is specified, the [ketama](https://www.metabrew.com/article/libketama-consistent-hashing-algo-memcached-clients) consistent hashing method will be used instead. The method ensures that only a few keys will be remapped to different servers when a server is added to or removed from the group. This helps to achieve a higher cache hit ratio for caching servers. The method is compatible with the [Cache::Memcached::Fast](https://metacpan.org/pod/Cache::Memcached::Fast) Perl library with the *`ketama_points`* parameter set to 160.
- name: hash (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#hash
  summary: Specifies a load balancing method for a server group where the client-server mapping is based on the hashed key value
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`hash`***`key`*` [consistent];` |
    | Default: | —                                 |
    | Context: | `upstream`                        |

    Specifies a load balancing method for a server group where the client-server mapping is based on the hashed *`key`* value. The *`key`* can contain text, variables, and their combinations (1.11.2). Usage example:

    ``` nginx
    hash $remote_addr;
    ```

    Note that adding or removing a server from the group may result in remapping most of the keys to different servers. The method is compatible with the [Cache::Memcached](https://metacpan.org/pod/Cache::Memcached) Perl library.

    If the `consistent` parameter is specified, the [ketama](https://www.metabrew.com/article/libketama-consistent-hashing-algo-memcached-clients) consistent hashing method will be used instead. The method ensures that only a few keys will be remapped to different servers when a server is added to or removed from the group. This helps to achieve a higher cache hit ratio for caching servers. The method is compatible with the [Cache::Memcached::Fast](https://metacpan.org/pod/Cache::Memcached::Fast) Perl library with the *`ketama_points`* parameter set to 160.
- name: health_check
  id: http/ngx_http_upstream_hc_module#health_check
  summary: Enables periodic health checks of the servers in a group referenced in the surrounding location
  belongs_to: ngx_http_upstream_hc_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`health_check`**` [`*`parameters`*`];` |
    | Default: | —                                        |
    | Context: | `location`                               |

    Enables periodic health checks of the servers in a [group](ngx_http_upstream_module#upstream) referenced in the surrounding location.

    The following optional parameters are supported:

    `interval`=*`time`*

    sets the interval between two consecutive health checks, by default, 5 seconds.

    `jitter`=*`time`*

    sets the time within which each health check will be randomly delayed, by default, there is no delay.

    `fails`=*`number`*

    sets the number of consecutive failed health checks of a particular server after which this server will be considered unhealthy, by default, 1.

    `passes`=*`number`*

    sets the number of consecutive passed health checks of a particular server after which the server will be considered healthy, by default, 1.

    `uri`=*`uri`*

    defines the URI used in health check requests, by default, “`/`”.

    `mandatory` \[`persistent`\]

    sets the initial “checking” state for a server until the first health check is completed (1.11.7). Client requests are not passed to servers in the “checking” state. If the parameter is not specified, the server will be initially considered healthy.

    The `persistent` parameter (1.19.7) sets the initial “up” state for a server after reload if the server was considered healthy before reload.

    `match`=*`name`*

    specifies the `match` block configuring the tests that a response should pass in order for a health check to pass. By default, the response should have status code 2xx or 3xx.

    `port`=*`number`*

    defines the port used when connecting to a server to perform a health check (1.9.7). By default, equals the [server](ngx_http_upstream_module#server) port.

    `type`=`grpc` \[`grpc_service`=*`name`*\] \[`grpc_status`=*`code`*\]

    enables periodic [health checks](https://github.com/grpc/grpc/blob/master/doc/health-checking.md#grpc-health-checking-protocol) of a gRPC server or a particular gRPC service specified with the optional `grpc_service` parameter (1.19.5). If the server does not support the gRPC Health Checking Protocol, the optional `grpc_status` parameter can be used to specify non-zero gRPC [status](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md#status-codes-and-their-use-in-grpc) (for example, status code “`12`” / “`UNIMPLEMENTED`”) that will be treated as healthy:

    ``` nginx
    health_check mandatory type=grpc grpc_status=12;
    ```

    The `type`=`grpc` parameter must be specified after all other directive parameters, `grpc_service` and `grpc_status` must follow `type`=`grpc`. The parameter is not compatible with [`uri`](#health_check_uri) or [`match`](#health_check_match) parameters.

    `keepalive_time`=*`time`*

    enables [keepalive](ngx_http_upstream_module#keepalive) connections for health checks and specifies the time during which requests can be processed through one keepalive connection (1.21.7). By default keepalive connections are disabled.
- name: health_check (ngx_stream_upstream_hc_module)
  id: stream/ngx_stream_upstream_hc_module#health_check
  summary: Enables periodic health checks of the servers in a group
  belongs_to: ngx_stream_upstream_hc_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`health_check`**` [`*`parameters`*`];` |
    | Default: | —                                        |
    | Context: | `server`                                 |

    Enables periodic health checks of the servers in a [group](ngx_stream_upstream_module#upstream).

    The following optional parameters are supported:

    `interval`=*`time`*

    sets the interval between two consecutive health checks, by default, 5 seconds.

    `jitter`=*`time`*

    sets the time within which each health check will be randomly delayed, by default, there is no delay.

    `fails`=*`number`*

    sets the number of consecutive failed health checks of a particular server after which this server will be considered unhealthy, by default, 1.

    `passes`=*`number`*

    sets the number of consecutive passed health checks of a particular server after which the server will be considered healthy, by default, 1.

    `mandatory` \[`persistent`\]

    sets the initial “checking” state for a server until the first health check is completed (1.11.7). Client connections are not passed to servers in the “checking” state. If the parameter is not specified, the server will be initially considered healthy.

    The `persistent` parameter (1.21.1) sets the initial “up” state for a server after reload if the server was considered healthy before reload.

    `match`=*`name`*

    specifies the `match` block configuring the tests that a successful connection should pass in order for a health check to pass. By default, for TCP, only the ability to establish a TCP connection with the server is checked. For [UDP](#health_check_udp), the absence of ICMP “`Destination Unreachable`” message is expected in reply to the sent string “`nginx health check`”.

    Prior to version 1.11.7, by default, UDP health check required a [match](#hc_match) block with the [send](#match_send) and [expect](#match_expect) parameters.

    `port`=*`number`*

    defines the port used when connecting to a server to perform a health check (1.9.7). By default, equals the [server](ngx_stream_upstream_module#server) port.

    `udp`

    specifies that the `UDP` protocol should be used for health checks instead of the default `TCP` protocol (1.9.13).
- name: health_check_timeout (ngx_stream_upstream_hc_module)
  id: stream/ngx_stream_upstream_hc_module#health_check_timeout
  summary: Overrides the proxy_timeout value for health checks
  belongs_to: ngx_stream_upstream_hc_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`health_check_timeout`***`timeout`*`;` |
    | Default: | `health_check_timeout 5s;`               |
    | Context: | `stream`, `server`                       |

    Overrides the [proxy_timeout](ngx_stream_proxy_module#proxy_timeout) value for health checks.
- name: hls
  id: http/ngx_http_hls_module#hls
  summary: Turns on HLS streaming in the surrounding location
  belongs_to: ngx_http_hls_module
  description: |-
    |          |              |
    |----------|--------------|
    | Syntax:  | **`hls`**`;` |
    | Default: | —            |
    | Context: | `location`   |

    Turns on HLS streaming in the surrounding location.
- name: hls_buffers
  id: http/ngx_http_hls_module#hls_buffers
  summary: Sets the maximum number and size of buffers that are used for reading and writing data frames
  belongs_to: ngx_http_hls_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`hls_buffers`***`numbersize`*`;` |
    | Default: | `hls_buffers 8 2m;`                |
    | Context: | `http`, `server`, `location`       |

    Sets the maximum *`number`* and *`size`* of buffers that are used for reading and writing data frames.
- name: hls_forward_args
  id: http/ngx_http_hls_module#hls_forward_args
  summary: This directive appeared in version 1.5.12
  belongs_to: ngx_http_hls_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`hls_forward_args`**` on | off;` |
    | Default: | `hls_forward_args off;`            |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 1.5.12.

    Adds arguments from a playlist request to URIs of fragments. This may be useful for performing client authorization at the moment of requesting a fragment, or when protecting an HLS stream with the [ngx_http_secure_link_module](ngx_http_secure_link_module) module.

    For example, if a client requests a playlist `http://example.com/hls/test.mp4.m3u8?a=1&b=2`, the arguments `a=1` and `b=2` will be added to URIs of fragments after the arguments `start` and `end`:

    ``` nginx
    #EXTM3U
    #EXT-X-VERSION:3
    #EXT-X-TARGETDURATION:15
    #EXT-X-PLAYLIST-TYPE:VOD

    #EXTINF:9.333,
    test.mp4.ts?start=0.000&end=9.333&a=1&b=2
    #EXTINF:7.167,
    test.mp4.ts?start=9.333&end=16.500&a=1&b=2
    #EXTINF:5.416,
    test.mp4.ts?start=16.500&end=21.916&a=1&b=2
    #EXTINF:5.500,
    test.mp4.ts?start=21.916&end=27.416&a=1&b=2
    #EXTINF:15.167,
    test.mp4.ts?start=27.416&end=42.583&a=1&b=2
    #EXTINF:9.626,
    test.mp4.ts?start=42.583&end=52.209&a=1&b=2

    #EXT-X-ENDLIST
    ```

    If an HLS stream is protected with the [ngx_http_secure_link_module](ngx_http_secure_link_module) module, `$uri` should not be used in the [secure_link_md5](ngx_http_secure_link_module#secure_link_md5) expression because this will cause errors when requesting the fragments. [Base URI](ngx_http_map_module#map) should be used instead of `$uri` (`$hls_uri` in the example):

    ``` nginx
    http {
        ...

        map $uri $hls_uri {
            ~^(?<base_uri>.*).m3u8$ $base_uri;
            ~^(?<base_uri>.*).ts$   $base_uri;
            default                 $uri;
        }

        server {
            ...

            location /hls/ {
                hls;
                hls_forward_args on;

                alias /var/videos/;

                secure_link $arg_md5,$arg_expires;
                secure_link_md5 "$secure_link_expires$hls_uri$remote_addr secret";

                if ($secure_link = "") {
                    return 403;
                }

                if ($secure_link = "0") {
                    return 410;
                }
            }
        }
    }
    ```
- name: hls_fragment
  id: http/ngx_http_hls_module#hls_fragment
  summary: Defines the default fragment length for playlist URIs requested without the “len” argument
  belongs_to: ngx_http_hls_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`hls_fragment`***`time`*`;` |
    | Default: | `hls_fragment 5s;`            |
    | Context: | `http`, `server`, `location`  |

    Defines the default fragment length for playlist URIs requested without the “`len`” argument.
- name: hls_mp4_buffer_size
  id: http/ngx_http_hls_module#hls_mp4_buffer_size
  summary: Sets the initial size of the buffer used for processing MP4 and MOV files
  belongs_to: ngx_http_hls_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`hls_mp4_buffer_size`***`size`*`;` |
    | Default: | `hls_mp4_buffer_size 512k;`          |
    | Context: | `http`, `server`, `location`         |

    Sets the initial *`size`* of the buffer used for processing MP4 and MOV files.
- name: hls_mp4_max_buffer_size
  id: http/ngx_http_hls_module#hls_mp4_max_buffer_size
  summary: During metadata processing, a larger buffer may become necessary
  belongs_to: ngx_http_hls_module
  description: "|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`hls_mp4_max_buffer_size`***`size`*`;` |\n| Default: | `hls_mp4_max_buffer_size 10m;`           |\n| Context: | `http`, `server`, `location`             |\n\nDuring metadata processing, a larger buffer may become necessary. Its size cannot exceed the specified *`size`*, or else nginx will return the server error 500 (Internal Server Error), and log the following message:\n\n``` nginx\n\"/some/movie/file.mp4\" mp4 moov atom is too large:\n12583268, you may want to increase hls_mp4_max_buffer_size\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_hls_module.html](https://nginx.org/en/docs/http/ngx_http_hls_module.html)"
- name: How nginx processes a request
  id: http/request_processing
  summary: nginx first decides which server should process the request
  description: "# How nginx processes a request\n\n- [How to prevent processing requests with undefined server names](#how_to_prevent_undefined_server_names)\n- [Mixed name-based and IP-based virtual servers](#mixed_name_ip_based_servers)\n- [A simple PHP site configuration](#simple_php_site_configuration)\n\n#### Name-based virtual servers\n\nnginx first decides which *server* should process the request. Let’s start with a simple configuration where all three virtual servers listen on port \\*:80:\n\n``` nginx\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\nIn this configuration nginx tests only the request’s header field “Host” to determine which server the request should be routed to. If its value does not match any server name, or the request does not contain this header field at all, then nginx will route the request to the default server for this port. In the configuration above, the default server is the first one — which is nginx’s standard default behaviour. It can also be set explicitly which server should be default, with the `default_server` parameter in the [listen](ngx_http_core_module#listen) directive:\n\n``` nginx\nserver {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n```\n\nThe `default_server` parameter has been available since version 0.8.21. In earlier versions the `default` parameter should be used instead.\n\nNote that the default server is a property of the listen port and not of the server name. More about this later.\n\n#### How to prevent processing requests with undefined server names\n\nIf requests without the “Host” header field should not be allowed, a server that just drops the requests can be defined:\n\n``` nginx\nserver {\n    listen      80;\n    server_name \"\";\n    return      444;\n}\n```\n\nHere, the server name is set to an empty string that will match requests without the “Host” header field, and a special nginx’s non-standard code 444 is returned that closes the connection.\n\nSince version 0.8.48, this is the default setting for the server name, so the `server_name \"\"` can be omitted. In earlier versions, the machine’s *hostname* was used as a default server name.\n\n#### Mixed name-based and IP-based virtual servers\n\nLet’s look at a more complex configuration where some virtual servers listen on different addresses:\n\n``` nginx\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\nIn this configuration, nginx first tests the IP address and port of the request against the [listen](ngx_http_core_module#listen) directives of the [server](ngx_http_core_module#server) blocks. It then tests the “Host” header field of the request against the [server_name](ngx_http_core_module#server_name) entries of the [server](ngx_http_core_module#server) blocks that matched the IP address and port. If the server name is not found, the request will be processed by the default server. For example, a request for `www.example.com` received on the 192.168.1.1:80 port will be handled by the default server of the 192.168.1.1:80 port, i.e., by the first server, since there is no `www.example.com` defined for this port.\n\nAs already stated, a default server is a property of the listen port, and different default servers may be defined for different ports:\n\n``` nginx\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n#### A simple PHP site configuration\n\nNow let’s look at how nginx chooses a *location* to process a request for a typical, simple PHP site:\n\n``` nginx\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\nnginx first searches for the most specific prefix location given by literal strings regardless of the listed order. In the configuration above the only prefix location is “`/`” and since it matches any request it will be used as a last resort. Then nginx checks locations given by regular expression in the order listed in the configuration file. The first matching expression stops the search and nginx will use this location. If no regular expression matches a request, then nginx uses the most specific prefix location found earlier.\n\nNote that locations of all types test only a URI part of request line without arguments. This is done because arguments in the query string may be given in several ways, for example:\n\n``` nginx\n/index.php?user=john&page=1\n/index.php?page=1&user=john\n```\n\nBesides, anyone may request anything in the query string:\n\n``` nginx\n/index.php?page=1&something+else&user=john\n```\n\nNow let’s look at how requests would be processed in the configuration above:\n\n- A request “`/logo.gif`” is matched by the prefix location “`/`” first and then by the regular expression “`\\.(gif|jpg|png)$`”, therefore, it is handled by the latter location. Using the directive “`root /data/www`” the request is mapped to the file `/data/www/logo.gif`, and the file is sent to the client.\n- A request “`/index.php`” is also matched by the prefix location “`/`” first and then by the regular expression “`\\.(php)$`”. Therefore, it is handled by the latter location and the request is passed to a FastCGI server listening on localhost:9000. The [fastcgi_param](ngx_http_fastcgi_module#fastcgi_param) directive sets the FastCGI parameter `SCRIPT_FILENAME` to “`/data/www/index.php`”, and the FastCGI server executes the file. The variable `$document_root` is equal to the value of the [root](ngx_http_core_module#root) directive and the variable `$fastcgi_script_name` is equal to the request URI, i.e. “`/index.php`”.\n- A request “`/about.html`” is matched by the prefix location “`/`” only, therefore, it is handled in this location. Using the directive “`root /data/www`” the request is mapped to the file `/data/www/about.html`, and the file is sent to the client.\n- Handling a request “`/`” is more complex. It is matched by the prefix location “`/`” only, therefore, it is handled by this location. Then the [index](ngx_http_index_module#index) directive tests for the existence of index files according to its parameters and the “`root /data/www`” directive. If the file `/data/www/index.html` does not exist, and the file `/data/www/index.php` exists, then the directive does an internal redirect to “`/index.php`”, and nginx searches the locations again as if the request had been sent by a client. As we saw before, the redirected request will eventually be handled by the FastCGI server.\n\n|                                               |\n|----------------------------------------------:|\n| written by Igor Sysoev edited by Brian Mercer |\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/request_processing.html](https://nginx.org/en/docs/http/request_processing.html)"
- name: How nginx processes a TCP/UDP session
  id: stream/stream_processing
  summary: Post-accept The first phase after accepting a client connection
  description: "# How nginx processes a TCP/UDP session\n\nA TCP/UDP session from a client is processed in successive steps called **phases**:\n\n`Post-accept`  \nThe first phase after accepting a client connection. The [ngx_stream_realip_module](ngx_stream_realip_module) module is invoked at this phase.\n\n`Pre-access`  \nPreliminary check for access. The [ngx_stream_limit_conn_module](ngx_stream_limit_conn_module) and [ngx_stream_set_module](ngx_stream_set_module) modules are invoked at this phase.\n\n`Access`  \nClient access limitation before actual data processing. At this phase, the [ngx_stream_access_module](ngx_stream_access_module) module is invoked, for [njs](../njs/index), the [js_access](ngx_stream_js_module#js_access) directive is invoked.\n\n`SSL`  \nTLS/SSL termination. The [ngx_stream_ssl_module](ngx_stream_ssl_module) module is invoked at this phase.\n\n`Preread`  \nReading initial bytes of data into the [preread buffer](ngx_stream_core_module#preread_buffer_size) to allow modules such as [ngx_stream_ssl_preread_module](ngx_stream_ssl_preread_module) analyze the data before its processing. For [njs](../njs/index), the [js_preread](ngx_stream_js_module#js_preread) directive is invoked at this phase.\n\n`Content`  \nMandatory phase where data is actually processed, usually [proxied](ngx_stream_proxy_module) to [upstream](ngx_stream_upstream_module) servers, or a specified value is [returned](ngx_stream_return_module) to a client. For [njs](../njs/index), the [js_filter](ngx_stream_js_module#js_filter) directive is invoked at this phase.\n\n`Log`  \nThe final phase where the result of a client session processing is recorded. The [ngx_stream_log_module](ngx_stream_log_module) module is invoked at this phase.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/stream_processing.html](https://nginx.org/en/docs/stream/stream_processing.html)"
- name: http
  id: http/ngx_http_core_module#http
  summary: Provides the configuration file context in which the HTTP server directives are specified
  belongs_to: ngx_http_core_module
  description: |-
    |          |                      |
    |----------|----------------------|
    | Syntax:  | **`http`**` { ... }` |
    | Default: | —                    |
    | Context: | `main`               |

    Provides the configuration file context in which the HTTP server directives are specified.
- name: http2
  id: http/ngx_http_v2_module#http2
  summary: This directive appeared in version 1.25.1
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                         |
    |----------|-------------------------|
    | Syntax:  | **`http2`**` on | off;` |
    | Default: | `http2 off;`            |
    | Context: | `http`, `server`        |

    This directive appeared in version 1.25.1.

    Enables the [HTTP/2](https://datatracker.ietf.org/doc/html/rfc9113) protocol.
- name: http2_body_preread_size
  id: http/ngx_http_v2_module#http2_body_preread_size
  summary: This directive appeared in version 1.11.0
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`http2_body_preread_size`***`size`*`;` |
    | Default: | `http2_body_preread_size 64k;`           |
    | Context: | `http`, `server`                         |

    This directive appeared in version 1.11.0.

    Sets the *`size`* of the buffer per each request in which the request body may be saved before it is started to be processed.
- name: http2_chunk_size
  id: http/ngx_http_v2_module#http2_chunk_size
  summary: Sets the maximum size of chunks into which the response body is sliced
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`http2_chunk_size`***`size`*`;` |
    | Default: | `http2_chunk_size 8k;`            |
    | Context: | `http`, `server`, `location`      |

    Sets the maximum size of chunks into which the response body is sliced. A too low value results in higher overhead. A too high value impairs prioritization due to [HOL blocking](http://en.wikipedia.org/wiki/Head-of-line_blocking).
- name: http2_idle_timeout
  id: http/ngx_http_v2_module#http2_idle_timeout
  summary: This directive is obsolete since version 1.19.7
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`http2_idle_timeout`***`time`*`;` |
    | Default: | `http2_idle_timeout 3m;`            |
    | Context: | `http`, `server`                    |

    This directive is obsolete since version 1.19.7. The [keepalive_timeout](ngx_http_core_module#keepalive_timeout) directive should be used instead.

    Sets the timeout of inactivity after which the connection is closed.
- name: http2_max_concurrent_pushes
  id: http/ngx_http_v2_module#http2_max_concurrent_pushes
  summary: This directive appeared in version 1.13.9
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`http2_max_concurrent_pushes`***`number`*`;` |
    | Default: | `http2_max_concurrent_pushes 10;`              |
    | Context: | `http`, `server`                               |

    This directive appeared in version 1.13.9.

    This directive is obsolete since version 1.25.1.

    Limits the maximum number of concurrent [push](#http2_push) requests in a connection.
- name: http2_max_concurrent_streams
  id: http/ngx_http_v2_module#http2_max_concurrent_streams
  summary: Sets the maximum number of concurrent HTTP/2 streams in a connection
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`http2_max_concurrent_streams`***`number`*`;` |
    | Default: | `http2_max_concurrent_streams 128;`             |
    | Context: | `http`, `server`                                |

    Sets the maximum number of concurrent HTTP/2 streams in a connection.
- name: http2_max_field_size
  id: http/ngx_http_v2_module#http2_max_field_size
  summary: This directive is obsolete since version 1.19.7
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`http2_max_field_size`***`size`*`;` |
    | Default: | `http2_max_field_size 4k;`            |
    | Context: | `http`, `server`                      |

    This directive is obsolete since version 1.19.7. The [large_client_header_buffers](ngx_http_core_module#large_client_header_buffers) directive should be used instead.

    Limits the maximum size of an [HPACK](https://datatracker.ietf.org/doc/html/rfc7541)-compressed request header field. The limit applies equally to both name and value. Note that if Huffman encoding is applied, the actual size of decompressed name and value strings may be larger. For most requests, the default limit should be enough.
- name: http2_max_header_size
  id: http/ngx_http_v2_module#http2_max_header_size
  summary: This directive is obsolete since version 1.19.7
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`http2_max_header_size`***`size`*`;` |
    | Default: | `http2_max_header_size 16k;`           |
    | Context: | `http`, `server`                       |

    This directive is obsolete since version 1.19.7. The [large_client_header_buffers](ngx_http_core_module#large_client_header_buffers) directive should be used instead.

    Limits the maximum size of the entire request header list after [HPACK](https://datatracker.ietf.org/doc/html/rfc7541) decompression. For most requests, the default limit should be enough.
- name: http2_max_requests
  id: http/ngx_http_v2_module#http2_max_requests
  summary: This directive appeared in version 1.11.6
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`http2_max_requests`***`number`*`;` |
    | Default: | `http2_max_requests 1000;`            |
    | Context: | `http`, `server`                      |

    This directive appeared in version 1.11.6.

    This directive is obsolete since version 1.19.7. The [keepalive_requests](ngx_http_core_module#keepalive_requests) directive should be used instead.

    Sets the maximum number of requests (including [push](#http2_push) requests) that can be served through one HTTP/2 connection, after which the next client request will lead to connection closing and the need of establishing a new connection.

    Closing connections periodically is necessary to free per-connection memory allocations. Therefore, using too high maximum number of requests could result in excessive memory usage and not recommended.
- name: http2_push
  id: http/ngx_http_v2_module#http2_push
  summary: This directive appeared in version 1.13.9
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`http2_push`***`uri`*` | off;` |
    | Default: | `http2_push off;`                |
    | Context: | `http`, `server`, `location`     |

    This directive appeared in version 1.13.9.

    This directive is obsolete since version 1.25.1.

    Pre-emptively sends ([pushes](https://datatracker.ietf.org/doc/html/rfc9113#section-8.4)) a request to the specified *`uri`* along with the response to the original request. Only relative URIs with absolute path will be processed, for example:

    ``` nginx
    http2_push /static/css/main.css;
    ```

    The *`uri`* value can contain variables.

    Several `http2_push` directives can be specified on the same configuration level. The `off` parameter cancels the effect of the `http2_push` directives inherited from the previous configuration level.
- name: http2_push_preload
  id: http/ngx_http_v2_module#http2_push_preload
  summary: This directive appeared in version 1.13.9
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`http2_push_preload`**` on | off;` |
    | Default: | `http2_push_preload off;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.13.9.

    This directive is obsolete since version 1.25.1.

    Enables automatic conversion of [preload links](https://www.w3.org/TR/preload/#server-push-http-2) specified in the “Link” response header fields into [push](https://datatracker.ietf.org/doc/html/rfc9113#section-8.4) requests.
- name: http2_recv_buffer_size
  id: http/ngx_http_v2_module#http2_recv_buffer_size
  summary: Sets the size of the per worker input buffer
  belongs_to: ngx_http_v2_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`http2_recv_buffer_size`***`size`*`;` |
    | Default: | `http2_recv_buffer_size 256k;`          |
    | Context: | `http`                                  |

    Sets the size of the per [worker](../ngx_core_module#worker_processes) input buffer.
- name: http2_recv_timeout
  id: http/ngx_http_v2_module#http2_recv_timeout
  summary: This directive is obsolete since version 1.19.7
  belongs_to: ngx_http_v2_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`http2_recv_timeout`***`time`*`;` |\n| Default: | `http2_recv_timeout 30s;`           |\n| Context: | `http`, `server`                    |\n\nThis directive is obsolete since version 1.19.7. The [client_header_timeout](ngx_http_core_module#client_header_timeout) directive should be used instead.\n\nSets the timeout for expecting more data from the client, after which the connection is closed.\n\n#### Embedded Variables\n\nThe `ngx_http_v2_module` module supports the following embedded variables:\n\n`$http2`\n\nnegotiated protocol identifier: “`h2`” for HTTP/2 over TLS, “`h2c`” for HTTP/2 over cleartext TCP, or an empty string otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_v2_module.html](https://nginx.org/en/docs/http/ngx_http_v2_module.html)"
- name: http3
  id: http/ngx_http_v3_module#http3
  summary: Enables HTTP/3 protocol negotiation
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                         |
    |----------|-------------------------|
    | Syntax:  | **`http3`**` on | off;` |
    | Default: | `http3 on;`             |
    | Context: | `http`, `server`        |

    Enables [HTTP/3](https://datatracker.ietf.org/doc/html/rfc9114) protocol negotiation.
- name: http3_hq
  id: http/ngx_http_v3_module#http3_hq
  summary: Enables HTTP/0.9 protocol negotiation used in QUIC interoperability tests
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                            |
    |----------|----------------------------|
    | Syntax:  | **`http3_hq`**` on | off;` |
    | Default: | `http3_hq off;`            |
    | Context: | `http`, `server`           |

    Enables HTTP/0.9 protocol negotiation used in [QUIC interoperability tests](https://github.com/marten-seemann/quic-interop-runner).
- name: http3_max_concurrent_streams
  id: http/ngx_http_v3_module#http3_max_concurrent_streams
  summary: Sets the maximum number of concurrent HTTP/3 request streams in a connection
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`http3_max_concurrent_streams`***`number`*`;` |
    | Default: | `http3_max_concurrent_streams 128;`             |
    | Context: | `http`, `server`                                |

    Sets the maximum number of concurrent HTTP/3 request streams in a connection.
- name: http3_stream_buffer_size
  id: http/ngx_http_v3_module#http3_stream_buffer_size
  summary: Sets the size of the buffer used for reading and writing of the QUIC streams
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`http3_stream_buffer_size`***`size`*`;` |
    | Default: | `http3_stream_buffer_size 64k;`           |
    | Context: | `http`, `server`                          |

    Sets the size of the buffer used for reading and writing of the QUIC streams.
- name: if
  id: http/ngx_http_rewrite_module#if
  summary: The specified condition is evaluated
  belongs_to: ngx_http_rewrite_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`if`**` (`*`condition`*`) { ... }` |
    | Default: | —                                    |
    | Context: | `server`, `location`                 |

    The specified *`condition`* is evaluated. If true, this module directives specified inside the braces are executed, and the request is assigned the configuration inside the `if` directive. Configurations inside the `if` directives are inherited from the previous configuration level.

    A condition may be any of the following:

    - a variable name; false if the value of a variable is an empty string or “`0`”;

    Before version 1.0.1, any string starting with “`0`” was considered a false value.

    - comparison of a variable with a string using the “`=`” and “`!=`” operators;
    - matching of a variable against a regular expression using the “`~`” (for case-sensitive matching) and “`~*`” (for case-insensitive matching) operators. Regular expressions can contain captures that are made available for later reuse in the `$1`..`$9` variables. Negative operators “`!~`” and “`!~*`” are also available. If a regular expression includes the “`}`” or “`;`” characters, the whole expressions should be enclosed in single or double quotes.
    - checking of a file existence with the “`-f`” and “`!-f`” operators;
    - checking of a directory existence with the “`-d`” and “`!-d`” operators;
    - checking of a file, directory, or symbolic link existence with the “`-e`” and “`!-e`” operators;
    - checking for an executable file with the “`-x`” and “`!-x`” operators.

    Examples:

    ``` nginx
    if ($http_user_agent ~ MSIE) {
        rewrite ^(.*)$ /msie/$1 break;
    }

    if ($http_cookie ~* "id=([^;]+)(?:;|$)") {
        set $id $1;
    }

    if ($request_method = POST) {
        return 405;
    }

    if ($slow) {
        limit_rate 10k;
    }

    if ($invalid_referer) {
        return 403;
    }
    ```

    A value of the `$invalid_referer` embedded variable is set by the [valid_referers](ngx_http_referer_module#valid_referers) directive.
- name: if_modified_since
  id: http/ngx_http_core_module#if_modified_since
  summary: This directive appeared in version 0.7.24
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`if_modified_since`**` off | exact | before;` |
    | Default: | `if_modified_since exact;`                      |
    | Context: | `http`, `server`, `location`                    |

    This directive appeared in version 0.7.24.

    Specifies how to compare modification time of a response with the time in the “If-Modified-Since” request header field:

    `off`

    the response is always considered modified (0.7.34);

    `exact`

    exact match;

    `before`

    modification time of the response is less than or equal to the time in the “If-Modified-Since” request header field.
- name: ignore_invalid_headers
  id: http/ngx_http_core_module#ignore_invalid_headers
  summary: Controls whether header fields with invalid names should be ignored
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`ignore_invalid_headers`**` on | off;` |
    | Default: | `ignore_invalid_headers on;`             |
    | Context: | `http`, `server`                         |

    Controls whether header fields with invalid names should be ignored. Valid names are composed of English letters, digits, hyphens, and possibly underscores (as controlled by the [underscores_in_headers](#underscores_in_headers) directive).

    If the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.
- name: image_filter
  id: http/ngx_http_image_filter_module#image_filter
  summary: turns off module processing in a surrounding location
  belongs_to: ngx_http_image_filter_module
  description: |-
    |          |                                                                                                                                                                                                                                  |
    |----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`image_filter`**` off;`**`image_filter`**` test;`**`image_filter`**` size;`**`image_filter`**` rotate 90 | 180 | 270;`**`image_filter`**` resize `*`width`*` `*`height`*`;`**`image_filter`**` crop `*`width`*` `*`height`*`;` |
    | Default: | `image_filter off;`                                                                                                                                                                                                              |
    | Context: | `location`                                                                                                                                                                                                                       |

    Sets the type of transformation to perform on images:

    `off`

    turns off module processing in a surrounding location.

    `test`

    ensures that responses are images in either JPEG, GIF, PNG, or WebP format. Otherwise, the 415 (Unsupported Media Type) error is returned.

    `size`

    outputs information about images in a JSON format, e.g.:

    ``` nginx
    { "img" : { "width": 100, "height": 100, "type": "gif" } }
    ```

    In case of an error, the output is as follows:

    ``` nginx
    {}
    ```

    `rotate``90`\|`180`\|`270`

    rotates images counter-clockwise by the specified number of degrees. Parameter value can contain variables. This mode can be used either alone or along with the `resize` and `crop` transformations.

    `resize`*`width``height`*

    proportionally reduces an image to the specified sizes. To reduce by only one dimension, another dimension can be specified as “`-`”. In case of an error, the server will return code 415 (Unsupported Media Type). Parameter values can contain variables. When used along with the `rotate` parameter, the rotation happens **after** reduction.

    `crop`*`width``height`*

    proportionally reduces an image to the larger side size and crops extraneous edges by another side. To reduce by only one dimension, another dimension can be specified as “`-`”. In case of an error, the server will return code 415 (Unsupported Media Type). Parameter values can contain variables. When used along with the `rotate` parameter, the rotation happens **before** reduction.
- name: image_filter_buffer
  id: http/ngx_http_image_filter_module#image_filter_buffer
  summary: Sets the maximum size of the buffer used for reading images
  belongs_to: ngx_http_image_filter_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`image_filter_buffer`***`size`*`;` |
    | Default: | `image_filter_buffer 1M;`            |
    | Context: | `http`, `server`, `location`         |

    Sets the maximum size of the buffer used for reading images. When the size is exceeded the server returns error 415 (Unsupported Media Type).
- name: image_filter_interlace
  id: http/ngx_http_image_filter_module#image_filter_interlace
  summary: This directive appeared in version 1.3.15
  belongs_to: ngx_http_image_filter_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`image_filter_interlace`**` on | off;` |
    | Default: | `image_filter_interlace off;`            |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.3.15.

    If enabled, final images will be interlaced. For JPEG, final images will be in “progressive JPEG” format.
- name: image_filter_jpeg_quality
  id: http/ngx_http_image_filter_module#image_filter_jpeg_quality
  summary: Sets the desired quality of the transformed JPEG images
  belongs_to: ngx_http_image_filter_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`image_filter_jpeg_quality`***`quality`*`;` |
    | Default: | `image_filter_jpeg_quality 75;`               |
    | Context: | `http`, `server`, `location`                  |

    Sets the desired *`quality`* of the transformed JPEG images. Acceptable values are in the range from 1 to 100. Lesser values usually imply both lower image quality and less data to transfer. The maximum recommended value is 95. Parameter value can contain variables.
- name: image_filter_sharpen
  id: http/ngx_http_image_filter_module#image_filter_sharpen
  summary: Increases sharpness of the final image
  belongs_to: ngx_http_image_filter_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`image_filter_sharpen`***`percent`*`;` |
    | Default: | `image_filter_sharpen 0;`                |
    | Context: | `http`, `server`, `location`             |

    Increases sharpness of the final image. The sharpness percentage can exceed 100. The zero value disables sharpening. Parameter value can contain variables.
- name: image_filter_transparency
  id: http/ngx_http_image_filter_module#image_filter_transparency
  summary: Defines whether transparency should be preserved when transforming GIF images or PNG images with colors specified by a palette
  belongs_to: ngx_http_image_filter_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`image_filter_transparency`**` on|off;` |
    | Default: | `image_filter_transparency on;`           |
    | Context: | `http`, `server`, `location`              |

    Defines whether transparency should be preserved when transforming GIF images or PNG images with colors specified by a palette. The loss of transparency results in images of a better quality. The alpha channel transparency in PNG is always preserved.
- name: image_filter_webp_quality
  id: http/ngx_http_image_filter_module#image_filter_webp_quality
  summary: This directive appeared in version 1.11.6
  belongs_to: ngx_http_image_filter_module
  description: "|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`image_filter_webp_quality`***`quality`*`;` |\n| Default: | `image_filter_webp_quality 80;`               |\n| Context: | `http`, `server`, `location`                  |\n\nThis directive appeared in version 1.11.6.\n\nSets the desired *`quality`* of the transformed WebP images. Acceptable values are in the range from 1 to 100. Lesser values usually imply both lower image quality and less data to transfer. Parameter value can contain variables.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_image_filter_module.html](https://nginx.org/en/docs/http/ngx_http_image_filter_module.html)"
- name: imap_auth (ngx_mail_imap_module)
  id: mail/ngx_mail_imap_module#imap_auth
  summary: Sets permitted methods of authentication for IMAP clients
  belongs_to: ngx_mail_imap_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`imap_auth`***`method`*` ...;` |
    | Default: | `imap_auth plain;`               |
    | Context: | `mail`, `server`                 |

    Sets permitted methods of authentication for IMAP clients. Supported methods are:

    `plain`

    [LOGIN](https://datatracker.ietf.org/doc/html/rfc3501), [AUTH=PLAIN](https://datatracker.ietf.org/doc/html/rfc4616)

    `login`

    [AUTH=LOGIN](https://datatracker.ietf.org/doc/html/draft-murchison-sasl-login-00)

    `cram-md5`

    [AUTH=CRAM-MD5](https://datatracker.ietf.org/doc/html/rfc2195). In order for this method to work, the password must be stored unencrypted.

    `external`

    [AUTH=EXTERNAL](https://datatracker.ietf.org/doc/html/rfc4422) (1.11.6).

    Plain text authentication methods (the `LOGIN` command, `AUTH=PLAIN`, and `AUTH=LOGIN`) are always enabled, though if the `plain` and `login` methods are not specified, `AUTH=PLAIN` and `AUTH=LOGIN` will not be automatically included in [imap_capabilities](#imap_capabilities).
- name: imap_capabilities (ngx_mail_imap_module)
  id: mail/ngx_mail_imap_module#imap_capabilities
  summary: Sets the IMAP protocol extensions list that is passed to the client in response to the CAPABILITY command
  belongs_to: ngx_mail_imap_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`imap_capabilities`***`extension`*` ...;`  |
    | Default: | `imap_capabilities IMAP4 IMAP4rev1 UIDPLUS;` |
    | Context: | `mail`, `server`                             |

    Sets the [IMAP protocol](https://datatracker.ietf.org/doc/html/rfc3501) extensions list that is passed to the client in response to the `CAPABILITY` command. The authentication methods specified in the [imap_auth](#imap_auth) directive and [STARTTLS](https://datatracker.ietf.org/doc/html/rfc2595) are automatically added to this list depending on the [starttls](ngx_mail_ssl_module#starttls) directive value.

    It makes sense to specify the extensions supported by the IMAP backends to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies a client connection to the backend).

    The current list of standardized extensions is published at [www.iana.org](http://www.iana.org/assignments/imap4-capabilities).
- name: imap_client_buffer (ngx_mail_imap_module)
  id: mail/ngx_mail_imap_module#imap_client_buffer
  summary: Sets the size of the buffer used for reading IMAP commands
  belongs_to: ngx_mail_imap_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`imap_client_buffer`***`size`*`;` |\n| Default: | `imap_client_buffer 4k|8k;`         |\n| Context: | `mail`, `server`                    |\n\nSets the *`size`* of the buffer used for reading IMAP commands. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_imap_module.html](https://nginx.org/en/docs/mail/ngx_mail_imap_module.html)"
- name: include (Core functionality)
  id: ngx_core_module#include
  summary: Includes another file, or files matching the specified mask, into configuration
  belongs_to: Core functionality
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`include`***`file`*` | `*`mask`*`;` |
    | Default: | —                                     |
    | Context: | `any`                                 |

    Includes another *`file`*, or files matching the specified *`mask`*, into configuration. Included files should consist of syntactically correct directives and blocks.

    Usage example:

    ``` nginx
    include mime.types;
    include vhosts/*.conf;
    ```
- name: index
  id: http/ngx_http_index_module#index
  summary: Defines files that will be used as an index
  belongs_to: ngx_http_index_module
  description: "|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`index`***`file`*` ...;`   |\n| Default: | `index index.html;`          |\n| Context: | `http`, `server`, `location` |\n\nDefines files that will be used as an index. The *`file`* name can contain variables. Files are checked in the specified order. The last element of the list can be a file with an absolute path. Example:\n\n``` nginx\nindex index.$geo.html index.0.html /index.html;\n```\n\nIt should be noted that using an index file causes an internal redirect, and the request can be processed in a different location. For example, with the following configuration:\n\n``` nginx\nlocation = / {\n    index index.html;\n}\n\nlocation / {\n    ...\n}\n```\n\na “`/`” request will actually be processed in the second location as “`/index.html`”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_index_module.html](https://nginx.org/en/docs/http/ngx_http_index_module.html)"
- name: Installing nginx
  id: install
  summary: nginx can be installed differently, depending on the operating system
  description: "# Installing nginx\n\nnginx can be installed differently, depending on the operating system.\n\n#### Installation on Linux\n\nFor Linux, nginx [packages](https://nginx.org/en/linux_packages.html) from nginx.org can be used.\n\n#### Installation on FreeBSD\n\nOn FreeBSD, nginx can be installed either from the [packages](https://docs.freebsd.org/en/books/handbook/ports/#pkgng-intro) or through the [ports](https://docs.freebsd.org/en/books/handbook/ports/#ports-using) system. The ports system provides greater flexibility, allowing selection among a wide range of options. The port will compile nginx with the specified options and install it.\n\n#### Building from Sources\n\nIf some special functionality is required, not available with packages and ports, nginx can also be compiled from source files. While more flexible, this approach may be complex for a beginner. For more information, see [Building nginx from Sources](configure).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/install.html](https://nginx.org/en/docs/install.html)"
- name: internal
  id: http/ngx_http_core_module#internal
  summary: Specifies that a given location can only be used for internal requests
  belongs_to: ngx_http_core_module
  description: |-
    |          |                   |
    |----------|-------------------|
    | Syntax:  | **`internal`**`;` |
    | Default: | —                 |
    | Context: | `location`        |

    Specifies that a given location can only be used for internal requests. For external requests, the client error 404 (Not Found) is returned. Internal requests are the following:

    - requests redirected by the [error_page](#error_page), [index](ngx_http_index_module#index), [internal_redirect](ngx_http_internal_redirect_module#internal_redirect), [random_index](ngx_http_random_index_module#random_index), and [try_files](#try_files) directives;
    - requests redirected by the “X-Accel-Redirect” response header field from an upstream server;
    - subrequests formed by the “`include virtual`” command of the [ngx_http_ssi_module](ngx_http_ssi_module) module, by the [ngx_http_addition_module](ngx_http_addition_module) module directives, and by [auth_request](ngx_http_auth_request_module#auth_request) and [mirror](ngx_http_mirror_module#mirror) directives;
    - requests changed by the [rewrite](ngx_http_rewrite_module#rewrite) directive.

    Example:

    ``` nginx
    error_page 404 /404.html;

    location = /404.html {
        internal;
    }
    ```

    There is a limit of 10 internal redirects per request to prevent request processing cycles that can occur in incorrect configurations. If this limit is reached, the error 500 (Internal Server Error) is returned. In such cases, the “rewrite or internal redirection cycle” message can be seen in the error log.
- name: internal_redirect
  id: http/ngx_http_internal_redirect_module#internal_redirect
  summary: Sets the URI for internal redirection of the request
  belongs_to: ngx_http_internal_redirect_module
  description: "|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`internal_redirect`***`uri`*`;` |\n| Default: | —                                 |\n| Context: | `server`, `location`              |\n\nSets the URI for internal redirection of the request. It is also possible to use a [named location](ngx_http_core_module#location_named) instead of the URI. The *`uri`* value can contain variables. If the *`uri`* value is empty, then the redirect will not be made.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_internal_redirect_module.html](https://nginx.org/en/docs/http/ngx_http_internal_redirect_module.html)"
- name: ip_hash
  id: http/ngx_http_upstream_module#ip_hash
  summary: Specifies that a group should use a load balancing method where requests are distributed between servers based on client IP addresses
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                  |
    |----------|------------------|
    | Syntax:  | **`ip_hash`**`;` |
    | Default: | —                |
    | Context: | `upstream`       |

    Specifies that a group should use a load balancing method where requests are distributed between servers based on client IP addresses. The first three octets of the client IPv4 address, or the entire IPv6 address, are used as a hashing key. The method ensures that requests from the same client will always be passed to the same server except when this server is unavailable. In the latter case client requests will be passed to another server. Most probably, it will always be the same server as well.

    IPv6 addresses are supported starting from versions 1.3.2 and 1.2.2.

    If one of the servers needs to be temporarily removed, it should be marked with the `down` parameter in order to preserve the current hashing of client IP addresses.

    Example:

    ``` nginx
    upstream backend {
        ip_hash;

        server backend1.example.com;
        server backend2.example.com;
        server backend3.example.com down;
        server backend4.example.com;
    }
    ```

    Until versions 1.3.1 and 1.2.2, it was not possible to specify a weight for servers using the `ip_hash` load balancing method.
- name: js_access (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_access
  summary: Sets an njs function which will be called at the access phase
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`js_access`***`function`*` | `*`module.function`*`;` |
    | Default: | —                                                      |
    | Context: | `stream`, `server`                                     |

    Sets an njs function which will be called at the [access](stream_processing#access_phase) phase. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.

    The function is called once at the moment when the stream session reaches the [access](stream_processing#access_phase) phase for the first time. The function is called with the following arguments:

    `s`

    the [Stream Session](../njs/reference#stream) object

    At this phase, it is possible to perform initialization or register a callback with the [`s.on()`](../njs/reference#s_on) method for each incoming data chunk until one of the following methods are called: [`s.allow()`](../njs/reference#s_allow), [`s.decline()`](../njs/reference#s_decline), [`s.done()`](../njs/reference#s_done). As soon as one of these methods is called, the stream session processing switches to the [next phase](stream_processing) and all current [`s.on()`](../njs/reference#s_on) callbacks are dropped.
- name: js_body_filter
  id: http/ngx_http_js_module#js_body_filter
  summary: This directive appeared in version 0.5.2
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                                                                             |
    |----------|-------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`js_body_filter`***`function`*` | `*`module.function`*` [`*`buffer_type`*`=`*`string`*` | `*`buffer`*`];` |
    | Default: | —                                                                                                           |
    | Context: | `location`, `if in location`, `limit_except`                                                                |

    This directive appeared in version 0.5.2.

    Sets an njs function as a response body filter. The filter function is called for each data chunk of a response body with the following arguments:

    `r`

    the [HTTP request](../njs/reference#http) object

    `data`

    the incoming data chunk, may be a string or Buffer depending on the `buffer_type` value, by default is a string.

    `flags`

    an object with the following properties:

    `last`

    a boolean value, true if data is a last buffer.

    The filter function can pass its own modified version of the input data chunk to the next body filter by calling [`r.sendBuffer()`](../njs/reference#r_sendbuffer). For example, to transform all the lowercase letters in the response body:

    ``` nginx
    function filter(r, data, flags) {
        r.sendBuffer(data.toLowerCase(), flags);
    }
    ```

    To stop filtering (following data chunks will be passed to client without calling `js_body_filter`), [`r.done()`](../njs/reference#r_done) can be used.

    If the filter function changes the length of the response body, then it is required to clear out the “Content-Length” response header (if any) in [`js_header_filter`](#js_header_filter) to enforce chunked transfer encoding.

    As the `js_body_filter` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [r.subrequest()](../njs/reference#r_subrequest) or [setTimeout()](../njs/reference#settimeout) are not supported.

    The directive can be specified inside the [if](ngx_http_rewrite_module#if) block since [0.7.7](../njs/changes#njs0.7.7).
- name: js_content
  id: http/ngx_http_js_module#js_content
  summary: Sets an njs function as a location content handler
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                         |
    |----------|---------------------------------------------------------|
    | Syntax:  | **`js_content`***`function`*` | `*`module.function`*`;` |
    | Default: | —                                                       |
    | Context: | `location`, `if in location`, `limit_except`            |

    Sets an njs function as a location content handler. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.

    The directive can be specified inside the [if](ngx_http_rewrite_module#if) block since [0.7.7](../njs/changes#njs0.7.7).
- name: js_fetch_buffer_size
  id: http/ngx_http_js_module#js_fetch_buffer_size
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`js_fetch_buffer_size`***`size`*`;` |
    | Default: | `js_fetch_buffer_size 16k;`           |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 0.7.4.

    Sets the *`size`* of the buffer used for reading and writing with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_buffer_size (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_buffer_size
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`js_fetch_buffer_size`***`size`*`;` |
    | Default: | `js_fetch_buffer_size 16k;`           |
    | Context: | `stream`, `server`                    |

    This directive appeared in version 0.7.4.

    Sets the *`size`* of the buffer used for reading and writing with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_ciphers
  id: http/ngx_http_js_module#js_fetch_ciphers
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`js_fetch_ciphers`***`ciphers`*`;` |
    | Default: | `js_fetch_ciphers HIGH:!aNULL:!MD5;` |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 0.7.0.

    Specifies the enabled ciphers for HTTPS requests with [Fetch API](../njs/reference#ngx_fetch). The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: js_fetch_ciphers (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_ciphers
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`js_fetch_ciphers`***`ciphers`*`;` |
    | Default: | `js_fetch_ciphers HIGH:!aNULL:!MD5;` |
    | Context: | `stream`, `server`                   |

    This directive appeared in version 0.7.0.

    Specifies the enabled ciphers for HTTPS connections with [Fetch API](../njs/reference#ngx_fetch). The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: js_fetch_max_response_buffer_size
  id: http/ngx_http_js_module#js_fetch_max_response_buffer_size
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`js_fetch_max_response_buffer_size`***`size`*`;` |
    | Default: | `js_fetch_max_response_buffer_size 1m;`            |
    | Context: | `http`, `server`, `location`                       |

    This directive appeared in version 0.7.4.

    Sets the maximum *`size`* of the response received with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_max_response_buffer_size (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_max_response_buffer_size
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`js_fetch_max_response_buffer_size`***`size`*`;` |
    | Default: | `js_fetch_max_response_buffer_size 1m;`            |
    | Context: | `stream`, `server`                                 |

    This directive appeared in version 0.7.4.

    Sets the maximum *`size`* of the response received with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_protocols
  id: http/ngx_http_js_module#js_fetch_protocols
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                                   |
    |----------|-------------------------------------------------------------------|
    | Syntax:  | **`js_fetch_protocols`**` [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `js_fetch_protocols TLSv1 TLSv1.1 TLSv1.2;`                       |
    | Context: | `http`, `server`, `location`                                      |

    This directive appeared in version 0.7.0.

    Enables the specified protocols for HTTPS requests with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_protocols (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_protocols
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                                   |
    |----------|-------------------------------------------------------------------|
    | Syntax:  | **`js_fetch_protocols`**` [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `js_fetch_protocols TLSv1 TLSv1.1 TLSv1.2;`                       |
    | Context: | `stream`, `server`                                                |

    This directive appeared in version 0.7.0.

    Enables the specified protocols for HTTPS connections with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_timeout
  id: http/ngx_http_js_module#js_fetch_timeout
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`js_fetch_timeout`***`time`*`;` |
    | Default: | `js_fetch_timeout 60s;`           |
    | Context: | `http`, `server`, `location`      |

    This directive appeared in version 0.7.4.

    Defines a timeout for reading and writing for [Fetch API](../njs/reference#ngx_fetch). The timeout is set only between two successive read/write operations, not for the whole response. If no data is transmitted within this time, the connection is closed.
- name: js_fetch_timeout (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_timeout
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`js_fetch_timeout`***`time`*`;` |
    | Default: | `js_fetch_timeout 60s;`           |
    | Context: | `stream`, `server`                |

    This directive appeared in version 0.7.4.

    Defines a timeout for reading and writing for [Fetch API](../njs/reference#ngx_fetch). The timeout is set only between two successive read/write operations, not for the whole response. If no data is transmitted within this time, the connection is closed.
- name: js_fetch_trusted_certificate
  id: http/ngx_http_js_module#js_fetch_trusted_certificate
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`js_fetch_trusted_certificate`***`file`*`;` |
    | Default: | —                                             |
    | Context: | `http`, `server`, `location`                  |

    This directive appeared in version 0.7.0.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](../njs/reference#fetch_verify) the HTTPS certificate with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_trusted_certificate (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_trusted_certificate
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`js_fetch_trusted_certificate`***`file`*`;` |
    | Default: | —                                             |
    | Context: | `stream`, `server`                            |

    This directive appeared in version 0.7.0.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](../njs/reference#fetch_verify) the HTTPS certificate with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_verify
  id: http/ngx_http_js_module#js_fetch_verify
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`js_fetch_verify`**` on | off;` |
    | Default: | `js_fetch_verify on;`             |
    | Context: | `http`, `server`, `location`      |

    This directive appeared in version 0.7.4.

    Enables or disables verification of the HTTPS server certificate with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_verify (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_verify
  summary: This directive appeared in version 0.7.4
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`js_fetch_verify`**` on | off;` |
    | Default: | `js_fetch_verify on;`             |
    | Context: | `stream`, `server`                |

    This directive appeared in version 0.7.4.

    Enables or disables verification of the HTTPS server certificate with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_verify_depth
  id: http/ngx_http_js_module#js_fetch_verify_depth
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`js_fetch_verify_depth`***`number`*`;` |
    | Default: | `js_fetch_verify_depth 100;`             |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 0.7.0.

    Sets the verification depth in the HTTPS server certificates chain with [Fetch API](../njs/reference#ngx_fetch).
- name: js_fetch_verify_depth (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_fetch_verify_depth
  summary: This directive appeared in version 0.7.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`js_fetch_verify_depth`***`number`*`;` |
    | Default: | `js_fetch_verify_depth 100;`             |
    | Context: | `stream`, `server`                       |

    This directive appeared in version 0.7.0.

    Sets the verification depth in the HTTPS server certificates chain with [Fetch API](../njs/reference#ngx_fetch).
- name: js_filter (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_filter
  summary: Sets a data filter
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`js_filter`***`function`*` | `*`module.function`*`;` |
    | Default: | —                                                      |
    | Context: | `stream`, `server`                                     |

    Sets a data filter. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced. The filter function is called once at the moment when the stream session reaches the [content](stream_processing#content_phase) phase.

    The filter function is called with the following arguments:

    `s`

    the [Stream Session](../njs/reference#stream) object

    At this phase, it is possible to perform initialization or register a callback with the [`s.on()`](../njs/reference#s_on) method for each incoming data chunk. The [`s.off()`](../njs/reference#s_off) method may be used to unregister a callback and stop filtering.

    As the `js_filter` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [`ngx.fetch()`](../njs/reference#ngx_fetch) or [`setTimeout()`](../njs/reference#settimeout) are not supported.
- name: js_header_filter
  id: http/ngx_http_js_module#js_header_filter
  summary: This directive appeared in version 0.5.1
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                               |
    |----------|---------------------------------------------------------------|
    | Syntax:  | **`js_header_filter`***`function`*` | `*`module.function`*`;` |
    | Default: | —                                                             |
    | Context: | `location`, `if in location`, `limit_except`                  |

    This directive appeared in version 0.5.1.

    Sets an njs function as a response header filter. The directive allows changing arbitrary header fields of a response header.

    As the `js_header_filter` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [r.subrequest()](../njs/reference#r_subrequest) or [setTimeout()](../njs/reference#settimeout) are not supported.

    The directive can be specified inside the [if](ngx_http_rewrite_module#if) block since [0.7.7](../njs/changes#njs0.7.7).
- name: js_import
  id: http/ngx_http_js_module#js_import
  summary: This directive appeared in version 0.4.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                                    |
    |----------|--------------------------------------------------------------------|
    | Syntax:  | **`js_import`***`module.js`*` | `*`export_name from module.js`*`;` |
    | Default: | —                                                                  |
    | Context: | `http`, `server`, `location`                                       |

    This directive appeared in version 0.4.0.

    Imports a module that implements location and variable handlers in njs. The `export_name` is used as a namespace to access module functions. If the `export_name` is not specified, the module name will be used as a namespace.

    ``` nginx
    js_import http.js;
    ```

    Here, the module name `http` is used as a namespace while accessing exports. If the imported module exports `foo()`, `http.foo` is used to refer to it.

    Several `js_import` directives can be specified.

    The directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).
- name: js_import (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_import
  summary: This directive appeared in version 0.4.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                                    |
    |----------|--------------------------------------------------------------------|
    | Syntax:  | **`js_import`***`module.js`*` | `*`export_name from module.js`*`;` |
    | Default: | —                                                                  |
    | Context: | `stream`, `server`                                                 |

    This directive appeared in version 0.4.0.

    Imports a module that implements location and variable handlers in njs. The `export_name` is used as a namespace to access module functions. If the `export_name` is not specified, the module name will be used as a namespace.

    ``` nginx
    js_import stream.js;
    ```

    Here, the module name `stream` is used as a namespace while accessing exports. If the imported module exports `foo()`, `stream.foo` is used to refer to it.

    Several `js_import` directives can be specified.

    The directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).
- name: js_include
  id: http/ngx_http_js_module#js_include
  summary: The directive was made obsolete in version 0.4.0 and was removed in version 0.7.1
  belongs_to: ngx_http_js_module
  description: |-
    |          |                             |
    |----------|-----------------------------|
    | Syntax:  | **`js_include`***`file`*`;` |
    | Default: | —                           |
    | Context: | `http`                      |

    Specifies a file that implements location and variable handlers in njs:

    ``` nginx
    nginx.conf:
    js_include http.js;
    location   /version {
        js_content version;
    }

    http.js:
    function version(r) {
        r.return(200, njs.version);
    }
    ```

    The directive was made obsolete in version [0.4.0](../njs/changes#njs0.4.0) and was removed in version [0.7.1](../njs/changes#njs0.7.1). The [js_import](#js_import) directive should be used instead.
- name: js_include (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_include
  summary: The directive was made obsolete in version 0.4.0 and was removed in version 0.7.1
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                             |
    |----------|-----------------------------|
    | Syntax:  | **`js_include`***`file`*`;` |
    | Default: | —                           |
    | Context: | `stream`                    |

    Specifies a file that implements server and variable handlers in njs:

    ``` nginx
    nginx.conf:
    js_include stream.js;
    js_set     $js_addr address;
    server {
        listen 127.0.0.1:12345;
        return $js_addr;
    }

    stream.js:
    function address(s) {
        return s.remoteAddress;
    }
    ```

    The directive was made obsolete in version [0.4.0](../njs/changes#njs0.4.0) and was removed in version [0.7.1](../njs/changes#njs0.7.1). The [js_import](#js_import) directive should be used instead.
- name: js_path
  id: http/ngx_http_js_module#js_path
  summary: This directive appeared in version 0.3.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`js_path`***`path`*`;`     |
    | Default: | —                            |
    | Context: | `http`, `server`, `location` |

    This directive appeared in version 0.3.0.

    Sets an additional path for njs modules.

    The directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).
- name: js_path (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_path
  summary: This directive appeared in version 0.3.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                          |
    |----------|--------------------------|
    | Syntax:  | **`js_path`***`path`*`;` |
    | Default: | —                        |
    | Context: | `stream`, `server`       |

    This directive appeared in version 0.3.0.

    Sets an additional path for njs modules.

    The directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).
- name: js_periodic
  id: http/ngx_http_js_module#js_periodic
  summary: This directive appeared in version 0.8.1
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                                                                                                   |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`js_periodic`***`function`*` | `*`module.function`*` [interval=`*`time`*`] [jitter=`*`number`*`] [worker_affinity=`*`mask`*`];` |
    | Default: | —                                                                                                                                 |
    | Context: | `location`                                                                                                                        |

    This directive appeared in version 0.8.1.

    Specifies a content handler to run at regular interval. The handler receives a [session object](../njs/reference#periodic_session) as its first argument, it also has access to global objects such as [ngx](../njs/reference#ngx).

    The optional `interval` parameter sets the interval between two consecutive runs, by default, 5 seconds.

    The optional `jitter` parameter sets the time within which the location content handler will be randomly delayed, by default, there is no delay.

    By default, the `js_handler` is executed on worker process 0. The optional `worker_affinity` parameter allows specifying particular worker processes where the location content handler should be executed. Each worker process set is represented by a bitmask of allowed worker processes. The `all` mask allows the handler to be executed in all worker processes.

    Example:

    ``` nginx
    example.conf:

    location @periodics {
        # to be run at 1 minute intervals in worker process 0
        js_periodic main.handler interval=60s;

        # to be run at 1 minute intervals in all worker processes
        js_periodic main.handler interval=60s worker_affinity=all;

        # to be run at 1 minute intervals in worker processes 1 and 3
        js_periodic main.handler interval=60s worker_affinity=0101;

        resolver 10.0.0.1;
        js_fetch_trusted_certificate /path/to/ISRG_Root_X1.pem;
    }

    example.js:

    async function handler(s) {
        let reply = await ngx.fetch('https://nginx.org/en/docs/njs/');
        let body = await reply.text();

        ngx.log(ngx.INFO, body);
    }
    ```
- name: js_periodic (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_periodic
  summary: This directive appeared in version 0.8.1
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                                                                                                   |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`js_periodic`***`function`*` | `*`module.function`*` [interval=`*`time`*`] [jitter=`*`number`*`] [worker_affinity=`*`mask`*`];` |
    | Default: | —                                                                                                                                 |
    | Context: | `server`                                                                                                                          |

    This directive appeared in version 0.8.1.

    Specifies a content handler to run at regular interval. The handler receives a [session object](../njs/reference#periodic_session) as its first argument, it also has access to global objects such as [ngx](../njs/reference#ngx).

    The optional `interval` parameter sets the interval between two consecutive runs, by default, 5 seconds.

    The optional `jitter` parameter sets the time within which the location content handler will be randomly delayed, by default, there is no delay.

    By default, the `js_handler` is executed on worker process 0. The optional `worker_affinity` parameter allows specifying particular worker processes where the location content handler should be executed. Each worker process set is represented by a bitmask of allowed worker processes. The `all` mask allows the handler to be executed in all worker processes.

    Example:

    ``` nginx
    example.conf:

    location @periodics {
        # to be run at 1 minute intervals in worker process 0
        js_periodic main.handler interval=60s;

        # to be run at 1 minute intervals in all worker processes
        js_periodic main.handler interval=60s worker_affinity=all;

        # to be run at 1 minute intervals in worker processes 1 and 3
        js_periodic main.handler interval=60s worker_affinity=0101;

        resolver 10.0.0.1;
        js_fetch_trusted_certificate /path/to/ISRG_Root_X1.pem;
    }

    example.js:

    async function handler(s) {
        let reply = await ngx.fetch('https://nginx.org/en/docs/njs/');
        let body = await reply.text();

        ngx.log(ngx.INFO, body);
    }
    ```
- name: js_preload_object
  id: http/ngx_http_js_module#js_preload_object
  summary: This directive appeared in version 0.7.8
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                                           |
    |----------|---------------------------------------------------------------------------|
    | Syntax:  | **`js_preload_object`***`name.json`*` | `*`name`*` from `*`file.json`*`;` |
    | Default: | —                                                                         |
    | Context: | `http`, `server`, `location`                                              |

    This directive appeared in version 0.7.8.

    Preloads an [immutable object](../njs/preload_objects) at configure time. The `name` is used as a name of the global variable though which the object is available in njs code. If the `name` is not specified, the file name will be used instead.

    ``` nginx
    js_preload_object map.json;
    ```

    Here, the `map` is used as a name while accessing the preloaded object.

    Several `js_preload_object` directives can be specified.
- name: js_preload_object (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_preload_object
  summary: This directive appeared in version 0.7.8
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                                           |
    |----------|---------------------------------------------------------------------------|
    | Syntax:  | **`js_preload_object`***`name.json`*` | `*`name`*` from `*`file.json`*`;` |
    | Default: | —                                                                         |
    | Context: | `stream`, `server`                                                        |

    This directive appeared in version 0.7.8.

    Preloads an [immutable object](../njs/preload_objects) at configure time. The `name` is used as a name of the global variable though which the object is available in njs code. If the `name` is not specified, the file name will be used instead.

    ``` nginx
    js_preload_object map.json;
    ```

    Here, the `map` is used as a name while accessing the preloaded object.

    Several `js_preload_object` directives can be specified.
- name: js_preread (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_preread
  summary: Sets an njs function which will be called at the preread phase
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                         |
    |----------|---------------------------------------------------------|
    | Syntax:  | **`js_preread`***`function`*` | `*`module.function`*`;` |
    | Default: | —                                                       |
    | Context: | `stream`, `server`                                      |

    Sets an njs function which will be called at the [preread](stream_processing#preread_phase) phase. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.

    The function is called once at the moment when the stream session reaches the [preread](stream_processing#preread_phase) phase for the first time. The function is called with the following arguments:

    `s`

    the [Stream Session](../njs/reference#stream) object

    At this phase, it is possible to perform initialization or register a callback with the [`s.on()`](../njs/reference#s_on) method for each incoming data chunk until one of the following methods are called: [`s.allow()`](../njs/reference#s_allow), [`s.decline()`](../njs/reference#s_decline), [`s.done()`](../njs/reference#s_done). When one of these methods is called, the stream session switches to the [next phase](stream_processing) and all current [`s.on()`](../njs/reference#s_on) callbacks are dropped.

    As the `js_preread` handler returns its result immediately, it supports only synchronous callbacks. Thus, asynchronous callbacks such as [`ngx.fetch()`](../njs/reference#ngx_fetch) or [`setTimeout()`](../njs/reference#settimeout) are not supported. Nevertheless, asynchronous operations are supported in [`s.on()`](../njs/reference#s_on) callbacks in the [preread](stream_processing#preread_phase) phase. See [this example](https://github.com/nginx/njs-examples#authorizing-connections-using-ngx-fetch-as-auth-request-stream-auth-request) for more information.
- name: js_set
  id: http/ngx_http_js_module#js_set
  summary: Sets an njs function for the specified variable
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                              |
    |----------|--------------------------------------------------------------|
    | Syntax:  | **`js_set`***`$variablefunction`*` | `*`module.function`*`;` |
    | Default: | —                                                            |
    | Context: | `http`, `server`, `location`                                 |

    Sets an njs `function` for the specified `variable`. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.

    The function is called when the variable is referenced for the first time for a given request. The exact moment depends on a [phase](../dev/development_guide#http_phases) at which the variable is referenced. This can be used to perform some logic not related to variable evaluation. For example, if the variable is referenced only in the [log_format](ngx_http_log_module#log_format) directive, its handler will not be executed until the log phase. This handler can be used to do some cleanup right before the request is freed.

    As the `js_set` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [r.subrequest()](../njs/reference#r_subrequest) or [setTimeout()](../njs/reference#settimeout) are not supported.

    The directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).
- name: js_set (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_set
  summary: Sets an njs function for the specified variable
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                              |
    |----------|--------------------------------------------------------------|
    | Syntax:  | **`js_set`***`$variablefunction`*` | `*`module.function`*`;` |
    | Default: | —                                                            |
    | Context: | `stream`, `server`                                           |

    Sets an njs `function` for the specified `variable`. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.

    The function is called when the variable is referenced for the first time for a given request. The exact moment depends on a [phase](stream_processing) at which the variable is referenced. This can be used to perform some logic not related to variable evaluation. For example, if the variable is referenced only in the [log_format](ngx_stream_log_module#log_format) directive, its handler will not be executed until the log phase. This handler can be used to do some cleanup right before the request is freed.

    As the `js_set` handler returns its result immediately, it supports only synchronous callbacks. Thus, asynchronous callbacks such as [ngx.fetch()](../njs/reference#ngx_fetch) or [setTimeout()](../njs/reference#settimeout) are not supported.

    The directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).
- name: js_shared_dict_zone
  id: http/ngx_http_js_module#js_shared_dict_zone
  summary: This directive appeared in version 0.8.0
  belongs_to: ngx_http_js_module
  description: |-
    |          |                                                                                                           |
    |----------|-----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`js_shared_dict_zone`**` zone=`*`name`*`:`*`size`*` [timeout=`*`time`*`] [type=string|number] [evict];` |
    | Default: | —                                                                                                         |
    | Context: | `http`                                                                                                    |

    This directive appeared in version 0.8.0.

    Sets the *`name`* and *`size`* of the shared memory zone that keeps the key-value [dictionary](../njs/reference#dict) shared between worker processes.

    By default the shared dictionary uses a string as a key and a value. The optional `type` parameter allows redefining the value type to number.

    The optional `timeout` parameter sets the time in milliseconds after which all shared dictionary entries are removed from the zone. If some entries require a different removal time, it can be set with the `timeout` argument of the [add](../njs/reference#dict_add), [incr](../njs/reference#dict_incr), and [set](../njs/reference#dict_set) methods ([0.8.5](../njs/changes#njs0.8.5)).

    The optional `evict` parameter removes the oldest key-value pair when the zone storage is exhausted.

    Example:

    ``` nginx
    example.conf:
        # Creates a 1Mb dictionary with string values,
        # removes key-value pairs after 60 seconds of inactivity:
        js_shared_dict_zone zone=foo:1M timeout=60s;

        # Creates a 512Kb dictionary with string values,
        # forcibly removes oldest key-value pairs when the zone is exhausted:
        js_shared_dict_zone zone=bar:512K timeout=30s evict;

        # Creates a 32Kb permanent dictionary with number values:
        js_shared_dict_zone zone=num:32k type=number;

    example.js:
        function get(r) {
            r.return(200, ngx.shared.foo.get(r.args.key));
        }

        function set(r) {
            r.return(200, ngx.shared.foo.set(r.args.key, r.args.value));
        }

        function del(r) {
            r.return(200, ngx.shared.bar.delete(r.args.key));
        }

        function increment(r) {
            r.return(200, ngx.shared.num.incr(r.args.key, 2));
        }
    ```
- name: js_shared_dict_zone (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_shared_dict_zone
  summary: This directive appeared in version 0.8.0
  belongs_to: ngx_stream_js_module
  description: |-
    |          |                                                                                                           |
    |----------|-----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`js_shared_dict_zone`**` zone=`*`name`*`:`*`size`*` [timeout=`*`time`*`] [type=string|number] [evict];` |
    | Default: | —                                                                                                         |
    | Context: | `stream`                                                                                                  |

    This directive appeared in version 0.8.0.

    Sets the *`name`* and *`size`* of the shared memory zone that keeps the key-value [dictionary](../njs/reference#dict) shared between worker processes.

    By default the shared dictionary uses a string as a key and a value. The optional `type` parameter allows redefining the value type to number.

    The optional `timeout` parameter sets the time in milliseconds after which all shared dictionary entries are removed from the zone. If some entries require a different removal time, it can be set with the `timeout` argument of the [add](../njs/reference#dict_add), [incr](../njs/reference#dict_incr), and [set](../njs/reference#dict_set) methods ([0.8.5](../njs/changes#njs0.8.5)).

    The optional `evict` parameter removes the oldest key-value pair when the zone storage is exhausted.

    Example:

    ``` nginx
    example.conf:
        # Creates a 1Mb dictionary with string values,
        # removes key-value pairs after 60 seconds of inactivity:
        js_shared_dict_zone zone=foo:1M timeout=60s;

        # Creates a 512Kb dictionary with string values,
        # forcibly removes oldest key-value pairs when the zone is exhausted:
        js_shared_dict_zone zone=bar:512K timeout=30s evict;

        # Creates a 32Kb permanent dictionary with number values:
        js_shared_dict_zone zone=num:32k type=number;

    example.js:
        function get(r) {
            r.return(200, ngx.shared.foo.get(r.args.key));
        }

        function set(r) {
            r.return(200, ngx.shared.foo.set(r.args.key, r.args.value));
        }

        function del(r) {
            r.return(200, ngx.shared.bar.delete(r.args.key));
        }

        function increment(r) {
            r.return(200, ngx.shared.num.incr(r.args.key, 2));
        }
    ```
- name: js_var
  id: http/ngx_http_js_module#js_var
  summary: This directive appeared in version 0.5.3
  belongs_to: ngx_http_js_module
  description: "|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`js_var`***`$variable`*` [`*`value`*`];` |\n| Default: | —                                          |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 0.5.3.\n\nDeclares a [writable](../njs/reference#r_variables) variable. The value can contain text, variables, and their combination. The variable is not overwritten after a redirect unlike variables created with the [set](ngx_http_rewrite_module#set) directive.\n\nThe directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).\n\n#### Request Argument\n\nEach HTTP njs handler receives one argument, a request [object](../njs/reference#http).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_js_module.html](https://nginx.org/en/docs/http/ngx_http_js_module.html)"
- name: js_var (ngx_stream_js_module)
  id: stream/ngx_stream_js_module#js_var
  summary: This directive appeared in version 0.5.3
  belongs_to: ngx_stream_js_module
  description: "|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`js_var`***`$variable`*` [`*`value`*`];` |\n| Default: | —                                          |\n| Context: | `stream`, `server`                         |\n\nThis directive appeared in version 0.5.3.\n\nDeclares a [writable](../njs/reference#r_variables) variable. The value can contain text, variables, and their combination.\n\nThe directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).\n\n#### Session Object Properties\n\nEach stream njs handler receives one argument, a stream session [object](../njs/reference#stream).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_js_module.html](https://nginx.org/en/docs/stream/ngx_stream_js_module.html)"
- name: keepalive
  id: http/ngx_http_upstream_module#keepalive
  summary: This directive appeared in version 1.1.4
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`keepalive`***`connections`*`;` |
    | Default: | —                                 |
    | Context: | `upstream`                        |

    This directive appeared in version 1.1.4.

    Activates the cache for connections to upstream servers.

    The *`connections`* parameter sets the maximum number of idle keepalive connections to upstream servers that are preserved in the cache of each worker process. When this number is exceeded, the least recently used connections are closed.

    It should be particularly noted that the `keepalive` directive does not limit the total number of connections to upstream servers that an nginx worker process can open. The *`connections`* parameter should be set to a number small enough to let upstream servers process new incoming connections as well.

    When using load balancing methods other than the default round-robin method, it is necessary to activate them before the `keepalive` directive.

    Example configuration of memcached upstream with keepalive connections:

    ``` nginx
    upstream memcached_backend {
        server 127.0.0.1:11211;
        server 10.0.0.2:11211;

        keepalive 32;
    }

    server {
        ...

        location /memcached/ {
            set $memcached_key $uri;
            memcached_pass memcached_backend;
        }

    }
    ```

    For HTTP, the [proxy_http_version](ngx_http_proxy_module#proxy_http_version) directive should be set to “`1.1`” and the “Connection” header field should be cleared:

    ``` nginx
    upstream http_backend {
        server 127.0.0.1:8080;

        keepalive 16;
    }

    server {
        ...

        location /http/ {
            proxy_pass http://http_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            ...
        }
    }
    ```

    Alternatively, HTTP/1.0 persistent connections can be used by passing the “Connection: Keep-Alive” header field to an upstream server, though this method is not recommended.

    For FastCGI servers, it is required to set [fastcgi_keep_conn](ngx_http_fastcgi_module#fastcgi_keep_conn) for keepalive connections to work:

    ``` nginx
    upstream fastcgi_backend {
        server 127.0.0.1:9000;

        keepalive 8;
    }

    server {
        ...

        location /fastcgi/ {
            fastcgi_pass fastcgi_backend;
            fastcgi_keep_conn on;
            ...
        }
    }
    ```

    SCGI and uwsgi protocols do not have a notion of keepalive connections.
- name: keepalive_disable
  id: http/ngx_http_core_module#keepalive_disable
  summary: Disables keep-alive connections with misbehaving browsers
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                     |
    |----------|-----------------------------------------------------|
    | Syntax:  | **`keepalive_disable`**` none | `*`browser`*` ...;` |
    | Default: | `keepalive_disable msie6;`                          |
    | Context: | `http`, `server`, `location`                        |

    Disables keep-alive connections with misbehaving browsers. The *`browser`* parameters specify which browsers will be affected. The value `msie6` disables keep-alive connections with old versions of MSIE, once a POST request is received. The value `safari` disables keep-alive connections with Safari and Safari-like browsers on macOS and macOS-like operating systems. The value `none` enables keep-alive connections with all browsers.

    Prior to version 1.1.18, the value `safari` matched all Safari and Safari-like browsers on all operating systems, and keep-alive connections with them were disabled by default.
- name: keepalive_requests
  id: http/ngx_http_core_module#keepalive_requests
  summary: This directive appeared in version 0.8.0
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`keepalive_requests`***`number`*`;` |
    | Default: | `keepalive_requests 1000;`            |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 0.8.0.

    Sets the maximum number of requests that can be served through one keep-alive connection. After the maximum number of requests are made, the connection is closed.

    Closing connections periodically is necessary to free per-connection memory allocations. Therefore, using too high maximum number of requests could result in excessive memory usage and not recommended.

    Prior to version 1.19.10, the default value was 100.
- name: keepalive_requests
  id: http/ngx_http_upstream_module#keepalive_requests
  summary: This directive appeared in version 1.15.3
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`keepalive_requests`***`number`*`;` |
    | Default: | `keepalive_requests 1000;`            |
    | Context: | `upstream`                            |

    This directive appeared in version 1.15.3.

    Sets the maximum number of requests that can be served through one keepalive connection. After the maximum number of requests is made, the connection is closed.

    Closing connections periodically is necessary to free per-connection memory allocations. Therefore, using too high maximum number of requests could result in excessive memory usage and not recommended.

    Prior to version 1.19.10, the default value was 100.
- name: keepalive_time
  id: http/ngx_http_core_module#keepalive_time
  summary: This directive appeared in version 1.19.10
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`keepalive_time`***`time`*`;` |
    | Default: | `keepalive_time 1h;`            |
    | Context: | `http`, `server`, `location`    |

    This directive appeared in version 1.19.10.

    Limits the maximum time during which requests can be processed through one keep-alive connection. After this time is reached, the connection is closed following the subsequent request processing.
- name: keepalive_time
  id: http/ngx_http_upstream_module#keepalive_time
  summary: This directive appeared in version 1.19.10
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`keepalive_time`***`time`*`;` |
    | Default: | `keepalive_time 1h;`            |
    | Context: | `upstream`                      |

    This directive appeared in version 1.19.10.

    Limits the maximum time during which requests can be processed through one keepalive connection. After this time is reached, the connection is closed following the subsequent request processing.
- name: keepalive_timeout
  id: http/ngx_http_core_module#keepalive_timeout
  summary: The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                              |
    |----------|--------------------------------------------------------------|
    | Syntax:  | **`keepalive_timeout`***`timeout`*` [`*`header_timeout`*`];` |
    | Default: | `keepalive_timeout 75s;`                                     |
    | Context: | `http`, `server`, `location`                                 |

    The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=*`time`*” response header field. Two parameters may differ.

    The “Keep-Alive: timeout=*`time`*” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive connections by itself in about 60 seconds.
- name: keepalive_timeout
  id: http/ngx_http_upstream_module#keepalive_timeout
  summary: This directive appeared in version 1.15.3
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`keepalive_timeout`***`timeout`*`;` |
    | Default: | `keepalive_timeout 60s;`              |
    | Context: | `upstream`                            |

    This directive appeared in version 1.15.3.

    Sets a timeout during which an idle keepalive connection to an upstream server will stay open.
- name: keyval
  id: http/ngx_http_keyval_module#keyval
  summary: Creates a new $variable whose value is looked up by the key in the key-value database
  belongs_to: ngx_http_keyval_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`keyval`***`key$variable`*` zone=`*`name`*`;` |
    | Default: | —                                               |
    | Context: | `http`                                          |

    Creates a new *`$variable`* whose value is looked up by the *`key`* in the key-value database. Matching rules are defined by the [`type`](#keyval_type) parameter of the [`keyval_zone`](#keyval_zone) directive. The database is stored in a shared memory zone specified by the `zone` parameter.
- name: keyval (ngx_stream_keyval_module)
  id: stream/ngx_stream_keyval_module#keyval
  summary: Creates a new $variable whose value is looked up by the key in the key-value database
  belongs_to: ngx_stream_keyval_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`keyval`***`key$variable`*` zone=`*`name`*`;` |
    | Default: | —                                               |
    | Context: | `stream`                                        |

    Creates a new *`$variable`* whose value is looked up by the *`key`* in the key-value database. Matching rules are defined by the [`type`](#keyval_type) parameter of the [`keyval_zone`](#keyval_zone) directive. The database is stored in a shared memory zone specified by the `zone` parameter.
- name: keyval_zone
  id: http/ngx_http_keyval_module#keyval_zone
  summary: Sets the name and size of the shared memory zone that keeps the key-value database
  belongs_to: ngx_http_keyval_module
  description: "|          |                                                                                                                        |\n|----------|------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`keyval_zone`**` zone=`*`name`*`:`*`size`*` [state=`*`file`*`] [timeout=`*`time`*`] [type=string|ip|prefix] [sync];` |\n| Default: | —                                                                                                                      |\n| Context: | `http`                                                                                                                 |\n\nSets the *`name`* and *`size`* of the shared memory zone that keeps the key-value database. Key-value pairs are managed by the [API](ngx_http_api_module#http_keyvals_).\n\nThe optional `state` parameter specifies a *`file`* that keeps the current state of the key-value database in the JSON format and makes it persistent across nginx restarts. Changing the file content directly should be avoided.\n\nExamples:\n\n``` nginx\nkeyval_zone zone=one:32k state=/var/lib/nginx/state/one.keyval; # path for Linux\nkeyval_zone zone=one:32k state=/var/db/nginx/state/one.keyval;  # path for FreeBSD\n```\n\nThe optional `timeout` parameter (1.15.0) sets the time after which key-value pairs are removed from the zone.\n\nThe optional `type` parameter (1.17.1) activates an extra index optimized for matching the key of a certain type and defines matching rules when evaluating a [keyval](#keyval) `$variable`.\n\nThe index is stored in the same shared memory zone and thus requires additional storage.\n\n`type=string`\n\ndefault, no index is enabled; variable lookup is performed using exact match of the record key and a search key\n\n`type=ip`\n\nthe search key is the textual representation of IPv4 or IPv6 address or CIDR range; to match a record key, the search key must belong to a subnet specified by a record key or exactly match an IP address\n\n`type=prefix`\n\nvariable lookup is performed using prefix match of a record key and a search key (1.17.5); to match a record key, the record key must be a prefix of the search key\n\nThe optional `sync` parameter (1.15.0) enables [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of the shared memory zone. The synchronization requires the `timeout` parameter to be set.\n\nIf the synchronization is enabled, removal of key-value pairs (no matter [one](ngx_http_api_module#patchHttpKeyvalZoneKeyValue) or [all](ngx_http_api_module#deleteHttpKeyvalZoneData)) will be performed only on a target cluster node. The same key-value pairs on other cluster nodes will be removed upon `timeout`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_keyval_module.html](https://nginx.org/en/docs/http/ngx_http_keyval_module.html)"
- name: keyval_zone (ngx_stream_keyval_module)
  id: stream/ngx_stream_keyval_module#keyval_zone
  summary: Sets the name and size of the shared memory zone that keeps the key-value database
  belongs_to: ngx_stream_keyval_module
  description: "|          |                                                                                                                        |\n|----------|------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`keyval_zone`**` zone=`*`name`*`:`*`size`*` [state=`*`file`*`] [timeout=`*`time`*`] [type=string|ip|prefix] [sync];` |\n| Default: | —                                                                                                                      |\n| Context: | `stream`                                                                                                               |\n\nSets the *`name`* and *`size`* of the shared memory zone that keeps the key-value database. Key-value pairs are managed by the [API](../http/ngx_http_api_module#stream_keyvals_).\n\nThe optional `state` parameter specifies a *`file`* that keeps the current state of the key-value database in the JSON format and makes it persistent across nginx restarts. Changing the file content directly should be avoided.\n\nExamples:\n\n``` nginx\nkeyval_zone zone=one:32k state=/var/lib/nginx/state/one.keyval; # path for Linux\nkeyval_zone zone=one:32k state=/var/db/nginx/state/one.keyval;  # path for FreeBSD\n```\n\nThe optional `timeout` parameter (1.15.0) sets the time after which key-value pairs are removed from the zone.\n\nThe optional `type` parameter (1.17.1) activates an extra index optimized for matching the key of a certain type and defines matching rules when evaluating a [keyval](#keyval) `$variable`.\n\nThe index is stored in the same shared memory zone and thus requires additional storage.\n\n`type=string`\n\ndefault, no index is enabled; variable lookup is performed using exact match of the record key and a search key\n\n`type=ip`\n\nthe search key is the textual representation of IPv4 or IPv6 address or CIDR range; to match a record key, the search key must belong to a subnet specified by a record key or exactly match an IP address\n\n`type=prefix`\n\nvariable lookup is performed using prefix match of a record key and a search key (1.17.5); to match a record key, the record key must be a prefix of the search key\n\nThe optional `sync` parameter (1.15.0) enables [synchronization](ngx_stream_zone_sync_module#zone_sync) of the shared memory zone. The synchronization requires the `timeout` parameter to be set.\n\nIf the synchronization is enabled, removal of key-value pairs (no matter [one](../http/ngx_http_api_module#patchStreamKeyvalZoneKeyValue) or [all](../http/ngx_http_api_module#deleteStreamKeyvalZoneData)) will be performed only on a target cluster node. The same key-value pairs on other cluster nodes will be removed upon `timeout`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_keyval_module.html](https://nginx.org/en/docs/stream/ngx_stream_keyval_module.html)"
- name: large_client_header_buffers
  id: http/ngx_http_core_module#large_client_header_buffers
  summary: Sets the maximum number and size of buffers used for reading large client request header
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`large_client_header_buffers`***`numbersize`*`;` |
    | Default: | `large_client_header_buffers 4 8k;`                |
    | Context: | `http`, `server`                                   |

    Sets the maximum *`number`* and *`size`* of buffers used for reading large client request header. A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client. A request header field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client. Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes. If after the end of request processing a connection is transitioned into the keep-alive state, these buffers are released.

    If the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.
- name: least_conn
  id: http/ngx_http_upstream_module#least_conn
  summary: This directive appeared in versions 1.3.1 and 1.2.2
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                     |
    |----------|---------------------|
    | Syntax:  | **`least_conn`**`;` |
    | Default: | —                   |
    | Context: | `upstream`          |

    This directive appeared in versions 1.3.1 and 1.2.2.

    Specifies that a group should use a load balancing method where a request is passed to the server with the least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.
- name: least_conn (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#least_conn
  summary: Specifies that a group should use a load balancing method where a connection is passed to the server with the least number of active connections, taking into account weights of servers
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                     |
    |----------|---------------------|
    | Syntax:  | **`least_conn`**`;` |
    | Default: | —                   |
    | Context: | `upstream`          |

    Specifies that a group should use a load balancing method where a connection is passed to the server with the least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.
- name: least_time
  id: http/ngx_http_upstream_module#least_time
  summary: This directive appeared in version 1.7.10
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`least_time`**` header | last_byte [inflight];` |
    | Default: | —                                                 |
    | Context: | `upstream`                                        |

    This directive appeared in version 1.7.10.

    Specifies that a group should use a load balancing method where a request is passed to the server with the least average response time and least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.

    If the `header` parameter is specified, time to receive the [response header](#var_upstream_header_time) is used. If the `last_byte` parameter is specified, time to receive the [full response](#var_upstream_response_time) is used. If the `inflight` parameter is specified (1.11.6), incomplete requests are also taken into account.

    Prior to version 1.11.6, incomplete requests were taken into account by default.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: least_time (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#least_time
  summary: Specifies that a group should use a load balancing method where a connection is passed to the server with the least average time and least number of active connections, taking into account weights of servers
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                                                 |
    |----------|-----------------------------------------------------------------|
    | Syntax:  | **`least_time`**` connect | first_byte | last_byte [inflight];` |
    | Default: | —                                                               |
    | Context: | `upstream`                                                      |

    Specifies that a group should use a load balancing method where a connection is passed to the server with the least average time and least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.

    If the `connect` parameter is specified, time to [connect](#var_upstream_connect_time) to the upstream server is used. If the `first_byte` parameter is specified, time to receive the [first byte](#var_upstream_first_byte_time) of data is used. If the `last_byte` is specified, time to receive the [last byte](#var_upstream_session_time) of data is used. If the `inflight` parameter is specified (1.11.6), incomplete connections are also taken into account.

    Prior to version 1.11.6, incomplete connections were taken into account by default.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: limit_conn
  id: http/ngx_http_limit_conn_module#limit_conn
  summary: Sets the shared memory zone and the maximum allowed number of connections for a given key value
  belongs_to: ngx_http_limit_conn_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`limit_conn`***`zonenumber`*`;` |
    | Default: | —                                 |
    | Context: | `http`, `server`, `location`      |

    Sets the shared memory zone and the maximum allowed number of connections for a given key value. When this limit is exceeded, the server will return the [error](#limit_conn_status) in reply to a request. For example, the directives

    ``` nginx
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    server {
        location /download/ {
            limit_conn addr 1;
        }
    ```

    allow only one connection per an IP address at a time.

    In HTTP/2 and HTTP/3, each concurrent request is considered a separate connection.

    There could be several `limit_conn` directives. For example, the following configuration will limit the number of connections to the server per a client IP and, at the same time, the total number of connections to the virtual server:

    ``` nginx
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    server {
        ...
        limit_conn perip 10;
        limit_conn perserver 100;
    }
    ```

    These directives are inherited from the previous configuration level if and only if there are no `limit_conn` directives defined on the current level.
- name: limit_conn (ngx_stream_limit_conn_module)
  id: stream/ngx_stream_limit_conn_module#limit_conn
  summary: Sets the shared memory zone and the maximum allowed number of connections for a given key value
  belongs_to: ngx_stream_limit_conn_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`limit_conn`***`zonenumber`*`;` |
    | Default: | —                                 |
    | Context: | `stream`, `server`                |

    Sets the shared memory zone and the maximum allowed number of connections for a given key value. When this limit is exceeded, the server will close the connection. For example, the directives

    ``` nginx
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    server {
        ...
        limit_conn addr 1;
    }
    ```

    allow only one connection per an IP address at a time.

    When several `limit_conn` directives are specified, any configured limit will apply.

    These directives are inherited from the previous configuration level if and only if there are no `limit_conn` directives defined on the current level.
- name: limit_conn_dry_run
  id: http/ngx_http_limit_conn_module#limit_conn_dry_run
  summary: This directive appeared in version 1.17.6
  belongs_to: ngx_http_limit_conn_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`limit_conn_dry_run`**` on | off;` |
    | Default: | `limit_conn_dry_run off;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.17.6.

    Enables the dry run mode. In this mode, the number of connections is not limited, however, in the shared memory zone, the number of excessive connections is accounted as usual.
- name: limit_conn_dry_run (ngx_stream_limit_conn_module)
  id: stream/ngx_stream_limit_conn_module#limit_conn_dry_run
  summary: This directive appeared in version 1.17.6
  belongs_to: ngx_stream_limit_conn_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`limit_conn_dry_run`**` on | off;` |
    | Default: | `limit_conn_dry_run off;`            |
    | Context: | `stream`, `server`                   |

    This directive appeared in version 1.17.6.

    Enables the dry run mode. In this mode, the number of connections is not limited, however, in the shared memory zone, the number of excessive connections is accounted as usual.
- name: limit_conn_log_level
  id: http/ngx_http_limit_conn_module#limit_conn_log_level
  summary: This directive appeared in version 0.8.18
  belongs_to: ngx_http_limit_conn_module
  description: |-
    |          |                                                            |
    |----------|------------------------------------------------------------|
    | Syntax:  | **`limit_conn_log_level`**` info | notice | warn | error;` |
    | Default: | `limit_conn_log_level error;`                              |
    | Context: | `http`, `server`, `location`                               |

    This directive appeared in version 0.8.18.

    Sets the desired logging level for cases when the server limits the number of connections.
- name: limit_conn_log_level (ngx_stream_limit_conn_module)
  id: stream/ngx_stream_limit_conn_module#limit_conn_log_level
  summary: Sets the desired logging level for cases when the server limits the number of connections
  belongs_to: ngx_stream_limit_conn_module
  description: |-
    |          |                                                            |
    |----------|------------------------------------------------------------|
    | Syntax:  | **`limit_conn_log_level`**` info | notice | warn | error;` |
    | Default: | `limit_conn_log_level error;`                              |
    | Context: | `stream`, `server`                                         |

    Sets the desired logging level for cases when the server limits the number of connections.
- name: limit_conn_status
  id: http/ngx_http_limit_conn_module#limit_conn_status
  summary: This directive appeared in version 1.3.15
  belongs_to: ngx_http_limit_conn_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`limit_conn_status`***`code`*`;` |
    | Default: | `limit_conn_status 503;`           |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 1.3.15.

    Sets the status code to return in response to rejected requests.
- name: limit_conn_zone
  id: http/ngx_http_limit_conn_module#limit_conn_zone
  summary: Sets parameters for a shared memory zone that will keep states for various keys
  belongs_to: ngx_http_limit_conn_module
  description: |-
    |          |                                                            |
    |----------|------------------------------------------------------------|
    | Syntax:  | **`limit_conn_zone`***`key`*` zone=`*`name`*`:`*`size`*`;` |
    | Default: | —                                                          |
    | Context: | `http`                                                     |

    Sets parameters for a shared memory zone that will keep states for various keys. In particular, the state includes the current number of connections. The *`key`* can contain text, variables, and their combination. Requests with an empty key value are not accounted.

    Prior to version 1.7.6, a *`key`* could contain exactly one variable.

    Usage example:

    ``` nginx
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    ```

    Here, a client IP address serves as a key. Note that instead of `$remote_addr`, the `$binary_remote_addr` variable is used here. The `$remote_addr` variable’s size can vary from 7 to 15 bytes. The stored state occupies either 32 or 64 bytes of memory on 32-bit platforms and always 64 bytes on 64-bit platforms. The `$binary_remote_addr` variable’s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 32 or 64 bytes on 32-bit platforms and 64 bytes on 64-bit platforms. One megabyte zone can keep about 32 thousand 32-byte states or about 16 thousand 64-byte states. If the zone storage is exhausted, the server will return the [error](#limit_conn_status) to all further requests.

    Additionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), the [status information](ngx_http_api_module#http_limit_conns_) for each such shared memory zone can be [obtained](ngx_http_api_module#getHttpLimitConnZone) or [reset](ngx_http_api_module#deleteHttpLimitConnZoneStat) with the [API](ngx_http_api_module) since 1.17.7.
- name: limit_conn_zone (ngx_stream_limit_conn_module)
  id: stream/ngx_stream_limit_conn_module#limit_conn_zone
  summary: Sets parameters for a shared memory zone that will keep states for various keys
  belongs_to: ngx_stream_limit_conn_module
  description: "|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`limit_conn_zone`***`key`*` zone=`*`name`*`:`*`size`*`;` |\n| Default: | —                                                          |\n| Context: | `stream`                                                   |\n\nSets parameters for a shared memory zone that will keep states for various keys. In particular, the state includes the current number of connections. The *`key`* can contain text, variables, and their combinations (1.11.2). Connections with an empty key value are not accounted. Usage example:\n\n``` nginx\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n```\n\nHere, the key is a client IP address set by the `$binary_remote_addr` variable. The size of `$binary_remote_addr` is 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 32 or 64 bytes on 32-bit platforms and 64 bytes on 64-bit platforms. One megabyte zone can keep about 32 thousand 32-byte states or about 16 thousand 64-byte states. If the zone storage is exhausted, the server will close the connection.\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), the [status information](../http/ngx_http_api_module#stream_limit_conns_) for each such shared memory zone can be [obtained](../http/ngx_http_api_module#getStreamLimitConnZone) or [reset](../http/ngx_http_api_module#deleteStreamLimitConnZoneStat) with the [API](../http/ngx_http_api_module) since 1.17.7.\n\n#### Embedded Variables\n\n`$limit_conn_status`\n\nkeeps the result of limiting the number of connections (1.17.6): `PASSED`, `REJECTED`, or `REJECTED_DRY_RUN`\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html](https://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html)"
- name: limit_except
  id: http/ngx_http_core_module#limit_except
  summary: Limits allowed HTTP methods inside a location
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`limit_except`***`method`*` ... { ... }` |
    | Default: | —                                          |
    | Context: | `location`                                 |

    Limits allowed HTTP methods inside a location. The *`method`* parameter can be one of the following: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `MKCOL`, `COPY`, `MOVE`, `OPTIONS`, `PROPFIND`, `PROPPATCH`, `LOCK`, `UNLOCK`, or `PATCH`. Allowing the `GET` method makes the `HEAD` method also allowed. Access to other methods can be limited using the [ngx_http_access_module](ngx_http_access_module), [ngx_http_auth_basic_module](ngx_http_auth_basic_module), and [ngx_http_auth_jwt_module](ngx_http_auth_jwt_module) (1.13.10) modules directives:

    ``` nginx
    limit_except GET {
        allow 192.168.1.0/32;
        deny  all;
    }
    ```

    Please note that this will limit access to all methods **except** GET and HEAD.
- name: limit_rate
  id: http/ngx_http_core_module#limit_rate
  summary: Limits the rate of response transmission to a client
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`limit_rate`***`rate`*`;`                    |
    | Default: | `limit_rate 0;`                                |
    | Context: | `http`, `server`, `location`, `if in location` |

    Limits the rate of response transmission to a client. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if a client simultaneously opens two connections, the overall rate will be twice as much as the specified limit.

    Parameter value can contain variables (1.17.0). It may be useful in cases where rate should be limited depending on a certain condition:

    ``` nginx
    map $slow $rate {
        1     4k;
        2     8k;
    }

    limit_rate $rate;
    ```

    Rate limit can also be set in the [`$limit_rate`](#var_limit_rate) variable, however, since version 1.17.0, this method is not recommended:

    ``` nginx
    server {

        if ($slow) {
            set $limit_rate 4k;
        }

        ...
    }
    ```

    Rate limit can also be set in the “X-Accel-Limit-Rate” header field of a proxied server response. This capability can be disabled using the [proxy_ignore_headers](ngx_http_proxy_module#proxy_ignore_headers), [fastcgi_ignore_headers](ngx_http_fastcgi_module#fastcgi_ignore_headers), [uwsgi_ignore_headers](ngx_http_uwsgi_module#uwsgi_ignore_headers), and [scgi_ignore_headers](ngx_http_scgi_module#scgi_ignore_headers) directives.
- name: limit_rate_after
  id: http/ngx_http_core_module#limit_rate_after
  summary: This directive appeared in version 0.8.0
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`limit_rate_after`***`size`*`;`              |
    | Default: | `limit_rate_after 0;`                          |
    | Context: | `http`, `server`, `location`, `if in location` |

    This directive appeared in version 0.8.0.

    Sets the initial amount after which the further transmission of a response to a client will be rate limited. Parameter value can contain variables (1.17.0).

    Example:

    ``` nginx
    location /flv/ {
        flv;
        limit_rate_after 500k;
        limit_rate       50k;
    }
    ```
- name: limit_req
  id: http/ngx_http_limit_req_module#limit_req
  summary: Sets the shared memory zone and the maximum burst size of requests
  belongs_to: ngx_http_limit_req_module
  description: |-
    |          |                                                                                        |
    |----------|----------------------------------------------------------------------------------------|
    | Syntax:  | **`limit_req`**` zone=`*`name`*` [burst=`*`number`*`] [nodelay | delay=`*`number`*`];` |
    | Default: | —                                                                                      |
    | Context: | `http`, `server`, `location`                                                           |

    Sets the shared memory zone and the maximum burst size of requests. If the requests rate exceeds the rate configured for a zone, their processing is delayed such that requests are processed at a defined rate. Excessive requests are delayed until their number exceeds the maximum burst size in which case the request is terminated with an [error](#limit_req_status). By default, the maximum burst size is equal to zero. For example, the directives

    ``` nginx
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    server {
        location /search/ {
            limit_req zone=one burst=5;
        }
    ```

    allow not more than 1 request per second at an average, with bursts not exceeding 5 requests.

    If delaying of excessive requests while requests are being limited is not desired, the parameter `nodelay` should be used:

    ``` nginx
    limit_req zone=one burst=5 nodelay;
    ```

    The `delay` parameter (1.15.7) specifies a limit at which excessive requests become delayed. Default value is zero, i.e. all excessive requests are delayed.

    There could be several `limit_req` directives. For example, the following configuration will limit the processing rate of requests coming from a single IP address and, at the same time, the request processing rate by the virtual server:

    ``` nginx
    limit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;
    limit_req_zone $server_name zone=perserver:10m rate=10r/s;

    server {
        ...
        limit_req zone=perip burst=5 nodelay;
        limit_req zone=perserver burst=10;
    }
    ```

    These directives are inherited from the previous configuration level if and only if there are no `limit_req` directives defined on the current level.
- name: limit_req_dry_run
  id: http/ngx_http_limit_req_module#limit_req_dry_run
  summary: This directive appeared in version 1.17.1
  belongs_to: ngx_http_limit_req_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`limit_req_dry_run`**` on | off;` |
    | Default: | `limit_req_dry_run off;`            |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.17.1.

    Enables the dry run mode. In this mode, requests processing rate is not limited, however, in the shared memory zone, the number of excessive requests is accounted as usual.
- name: limit_req_log_level
  id: http/ngx_http_limit_req_module#limit_req_log_level
  summary: This directive appeared in version 0.8.18
  belongs_to: ngx_http_limit_req_module
  description: |-
    |          |                                                           |
    |----------|-----------------------------------------------------------|
    | Syntax:  | **`limit_req_log_level`**` info | notice | warn | error;` |
    | Default: | `limit_req_log_level error;`                              |
    | Context: | `http`, `server`, `location`                              |

    This directive appeared in version 0.8.18.

    Sets the desired logging level for cases when the server refuses to process requests due to rate exceeding, or delays request processing. Logging level for delays is one point less than for refusals; for example, if “`limit_req_log_level notice`” is specified, delays are logged with the `info` level.
- name: limit_req_status
  id: http/ngx_http_limit_req_module#limit_req_status
  summary: This directive appeared in version 1.3.15
  belongs_to: ngx_http_limit_req_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`limit_req_status`***`code`*`;` |
    | Default: | `limit_req_status 503;`           |
    | Context: | `http`, `server`, `location`      |

    This directive appeared in version 1.3.15.

    Sets the status code to return in response to rejected requests.
- name: limit_req_zone
  id: http/ngx_http_limit_req_module#limit_req_zone
  summary: Sets parameters for a shared memory zone that will keep states for various keys
  belongs_to: ngx_http_limit_req_module
  description: "|          |                                                                                  |\n|----------|----------------------------------------------------------------------------------|\n| Syntax:  | **`limit_req_zone`***`key`*` zone=`*`name`*`:`*`size`*` rate=`*`rate`*` [sync];` |\n| Default: | —                                                                                |\n| Context: | `http`                                                                           |\n\nSets parameters for a shared memory zone that will keep states for various keys. In particular, the state stores the current number of excessive requests. The *`key`* can contain text, variables, and their combination. Requests with an empty key value are not accounted.\n\nPrior to version 1.7.6, a *`key`* could contain exactly one variable.\n\nUsage example:\n\n``` nginx\nlimit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n```\n\nHere, the states are kept in a 10 megabyte zone “one”, and an average request processing rate for this zone cannot exceed 1 request per second.\n\nA client IP address serves as a key. Note that instead of `$remote_addr`, the `$binary_remote_addr` variable is used here. The `$binary_remote_addr` variable’s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 64 bytes on 32-bit platforms and 128 bytes on 64-bit platforms. One megabyte zone can keep about 16 thousand 64-byte states or about 8 thousand 128-byte states.\n\nIf the zone storage is exhausted, the least recently used state is removed. If even after that a new state cannot be created, the request is terminated with an [error](#limit_req_status).\n\nThe rate is specified in requests per second (r/s). If a rate of less than one request per second is desired, it is specified in request per minute (r/m). For example, half-request per second is 30r/m.\n\nThe `sync` parameter (1.15.3) enables [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of the shared memory zone.\n\nThe `sync` parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), the [status information](ngx_http_api_module#http_limit_reqs_) for each such shared memory zone can be [obtained](ngx_http_api_module#getHttpLimitReqZone) or [reset](ngx_http_api_module#deleteHttpLimitReqZoneStat) with the [API](ngx_http_api_module) since 1.17.7.\n\n#### Embedded Variables\n\n`$limit_req_status`\n\nkeeps the result of limiting the request processing rate (1.17.6): `PASSED`, `DELAYED`, `REJECTED`, `DELAYED_DRY_RUN`, or `REJECTED_DRY_RUN`\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_limit_req_module.html](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html)"
- name: limit_zone
  id: http/ngx_http_limit_conn_module#limit_zone
  summary: This directive was made obsolete in version 1.1.8 and was removed in version 1.7.6
  belongs_to: ngx_http_limit_conn_module
  description: "|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`limit_zone`***`name$variablesize`*`;` |\n| Default: | —                                        |\n| Context: | `http`                                   |\n\nThis directive was made obsolete in version 1.1.8 and was removed in version 1.7.6. An equivalent [limit_conn_zone](#limit_conn_zone) directive with a changed syntax should be used instead:\n\n`limit_conn_zone` *`$variable`* `zone`=*`name`*:*`size`*;\n\n#### Embedded Variables\n\n`$limit_conn_status`\n\nkeeps the result of limiting the number of connections (1.17.6): `PASSED`, `REJECTED`, or `REJECTED_DRY_RUN`\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html](https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html)"
- name: lingering_close
  id: http/ngx_http_core_module#lingering_close
  summary: This directive appeared in versions 1.1.0 and 1.0.6
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`lingering_close`**` off | on | always;` |
    | Default: | `lingering_close on;`                      |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in versions 1.1.0 and 1.0.6.

    Controls how nginx closes client connections.

    The default value “`on`” instructs nginx to [wait for](#lingering_timeout) and [process](#lingering_time) additional data from a client before fully closing a connection, but only if heuristics suggests that a client may be sending more data.

    The value “`always`” will cause nginx to unconditionally wait for and process additional client data.

    The value “`off`” tells nginx to never wait for more data and close the connection immediately. This behavior breaks the protocol and should not be used under normal circumstances.

    To control closing [HTTP/2](ngx_http_v2_module) connections, the directive must be specified on the [server](#server) level (1.19.1).
- name: lingering_time
  id: http/ngx_http_core_module#lingering_time
  summary: When lingering_close is in effect, this directive specifies the maximum time during which nginx will process (read and ignore) additional data coming from a client
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`lingering_time`***`time`*`;` |
    | Default: | `lingering_time 30s;`           |
    | Context: | `http`, `server`, `location`    |

    When [lingering_close](#lingering_close) is in effect, this directive specifies the maximum time during which nginx will process (read and ignore) additional data coming from a client. After that, the connection will be closed, even if there will be more data.
- name: lingering_timeout
  id: http/ngx_http_core_module#lingering_timeout
  summary: When lingering_close is in effect, this directive specifies the maximum waiting time for more client data to arrive
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`lingering_timeout`***`time`*`;` |
    | Default: | `lingering_timeout 5s;`            |
    | Context: | `http`, `server`, `location`       |

    When [lingering_close](#lingering_close) is in effect, this directive specifies the maximum waiting time for more client data to arrive. If data are not received during this time, the connection is closed. Otherwise, the data are read and ignored, and nginx starts waiting for more data again. The “wait-read-ignore” cycle is repeated, but no longer than specified by the [lingering_time](#lingering_time) directive.
- name: listen
  id: http/ngx_http_core_module#listen
  summary: Sets the address and port for IP, or the path for a UNIX-domain socket on which the server will accept requests
  belongs_to: ngx_http_core_module
  description: |-
    |          ||
    |----------||
    | Syntax:  | **`listen`***`address`*`[:`*`port`*`] [default_server] [ssl] [http2 | quic] [proxy_protocol] [setfib=`*`number`*`] [fastopen=`*`number`*`] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];`**`listen`***`port`*` [default_server] [ssl] [http2 | quic] [proxy_protocol] [setfib=`*`number`*`] [fastopen=`*`number`*`] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];`**`listen`**` unix:`*`path`*` [default_server] [ssl] [http2 | quic] [proxy_protocol] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` |
    | Default: | `listen *:80 | *:8000;`|
    | Context: | `server`|

    Sets the *`address`* and *`port`* for IP, or the *`path`* for a UNIX-domain socket on which the server will accept requests. Both *`address`* and *`port`*, or only *`address`* or only *`port`* can be specified. An *`address`* may also be a hostname, for example:

    ``` nginx
    listen 127.0.0.1:8000;
    listen 127.0.0.1;
    listen 8000;
    listen *:8000;
    listen localhost:8000;
    ```

    IPv6 addresses (0.7.36) are specified in square brackets:

    ``` nginx
    listen [::]:8000;
    listen [::1];
    ```

    UNIX-domain sockets (0.8.21) are specified with the “`unix:`” prefix:

    ``` nginx
    listen unix:/var/run/nginx.sock;
    ```

    If only *`address`* is given, the port 80 is used.

    If the directive is not present then either `*:80` is used if nginx runs with the superuser privileges, or `*:8000` otherwise.

    The `default_server` parameter, if present, will cause the server to become the default server for the specified *`address`*:*`port`* pair. If none of the directives have the `default_server` parameter then the first server with the *`address`*:*`port`* pair will be the default server for this pair.

    In versions prior to 0.8.21 this parameter is named simply `default`.

    The `ssl` parameter (0.7.14) allows specifying that all connections accepted on this port should work in SSL mode. This allows for a more compact [configuration](configuring_https_servers#single_http_https_server) for the server that handles both HTTP and HTTPS requests.

    The `http2` parameter (1.9.5) configures the port to accept [HTTP/2](ngx_http_v2_module) connections. Normally, for this to work the `ssl` parameter should be specified as well, but nginx can also be configured to accept HTTP/2 connections without SSL.

    The parameter is deprecated, the [http2](ngx_http_v2_module#http2) directive should be used instead.

    The `quic` parameter (1.25.0) configures the port to accept [QUIC](ngx_http_v3_module) connections.

    The `proxy_protocol` parameter (1.5.12) allows specifying that all connections accepted on this port should use the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt).

    The PROXY protocol version 2 is supported since version 1.13.11.

    The `listen` directive can have several additional parameters specific to socket-related system calls. These parameters can be specified in any `listen` directive, but only once for a given *`address`*:*`port`* pair.

    In versions prior to 0.8.21, they could only be specified in the `listen` directive together with the `default` parameter.

    `setfib`=*`number`*

    this parameter (0.8.44) sets the associated routing table, FIB (the `SO_SETFIB` option) for the listening socket. This currently works only on FreeBSD.

    `fastopen`=*`number`*

    enables “[TCP Fast Open](http://en.wikipedia.org/wiki/TCP_Fast_Open)” for the listening socket (1.5.8) and [limits](https://datatracker.ietf.org/doc/html/rfc7413#section-5.1) the maximum length for the queue of connections that have not yet completed the three-way handshake.

    Do not enable this feature unless the server can handle receiving the [same SYN packet with data](https://datatracker.ietf.org/doc/html/rfc7413#section-6.1) more than once.

    `backlog`=*`number`*

    sets the `backlog` parameter in the `listen()` call that limits the maximum length for the queue of pending connections. By default, `backlog` is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.

    `rcvbuf`=*`size`*

    sets the receive buffer size (the `SO_RCVBUF` option) for the listening socket.

    `sndbuf`=*`size`*

    sets the send buffer size (the `SO_SNDBUF` option) for the listening socket.

    `accept_filter`=*`filter`*

    sets the name of accept filter (the `SO_ACCEPTFILTER` option) for the listening socket that filters incoming connections before passing them to `accept()`. This works only on FreeBSD and NetBSD 5.0+. Possible values are [dataready](http://man.freebsd.org/accf_data) and [httpready](http://man.freebsd.org/accf_http).

    `deferred`

    instructs to use a deferred `accept()` (the `TCP_DEFER_ACCEPT` socket option) on Linux.

    `bind`

    instructs to make a separate `bind()` call for a given *`address`*:*`port`* pair. This is useful because if there are several `listen` directives with the same port but different addresses, and one of the `listen` directives listens on all addresses for the given port (`*:`*`port`*), nginx will `bind()` only to `*:`*`port`*. It should be noted that the `getsockname()` system call will be made in this case to determine the address that accepted the connection. If the `setfib`, `fastopen`, `backlog`, `rcvbuf`, `sndbuf`, `accept_filter`, `deferred`, `ipv6only`, `reuseport`, or `so_keepalive` parameters are used then for a given *`address`*:*`port`* pair a separate `bind()` call will always be made.

    `ipv6only`=`on`\|`off`

    this parameter (0.7.42) determines (via the `IPV6_V6ONLY` socket option) whether an IPv6 socket listening on a wildcard address `[::]` will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.

    Prior to version 1.3.4, if this parameter was omitted then the operating system’s settings were in effect for the socket.

    `reuseport`

    this parameter (1.9.1) instructs to create an individual listening socket for each worker process (using the `SO_REUSEPORT` socket option on Linux 3.9+ and DragonFly BSD, or `SO_REUSEPORT_LB` on FreeBSD 12+), allowing a kernel to distribute incoming connections between worker processes. This currently works only on Linux 3.9+, DragonFly BSD, and FreeBSD 12+ (1.15.1).

    Inappropriate use of this option may have its security [implications](http://man7.org/linux/man-pages/man7/socket.7.html).

    `so_keepalive`=`on`\|`off`\|\[*`keepidle`*\]:\[*`keepintvl`*\]:\[*`keepcnt`*\]

    this parameter (1.1.11) configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “`on`”, the `SO_KEEPALIVE` option is turned on for the socket. If it is set to the value “`off`”, the `SO_KEEPALIVE` option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the `TCP_KEEPIDLE`, `TCP_KEEPINTVL`, and `TCP_KEEPCNT` socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the *`keepidle`*, *`keepintvl`*, and *`keepcnt`* parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example,

    ``` nginx
    so_keepalive=30m::10
    ```

    will set the idle timeout (`TCP_KEEPIDLE`) to 30 minutes, leave the probe interval (`TCP_KEEPINTVL`) at its system default, and set the probes count (`TCP_KEEPCNT`) to 10 probes.

    Example:

    ``` nginx
    listen 127.0.0.1 default_server accept_filter=dataready backlog=1024;
    ```
- name: listen (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#listen
  summary: Sets the address and port for the socket on which the server will accept requests
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                                                                                                                                                                                                                               |
    |----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`listen`***`address`*`:`*`port`*` [ssl] [proxy_protocol] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [bind] [ipv6only=on|off] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` |
    | Default: | —                                                                                                                                                                                                                             |
    | Context: | `server`                                                                                                                                                                                                                      |

    Sets the *`address`* and *`port`* for the socket on which the server will accept requests. It is possible to specify just the port. The address can also be a hostname, for example:

    ``` nginx
    listen 127.0.0.1:110;
    listen *:110;
    listen 110;     # same as *:110
    listen localhost:110;
    ```

    IPv6 addresses (0.7.58) are specified in square brackets:

    ``` nginx
    listen [::1]:110;
    listen [::]:110;
    ```

    UNIX-domain sockets (1.3.5) are specified with the “`unix:`” prefix:

    ``` nginx
    listen unix:/var/run/nginx.sock;
    ```

    Different servers must listen on different *`address`*:*`port`* pairs.

    The `ssl` parameter allows specifying that all connections accepted on this port should work in SSL mode.

    The `proxy_protocol` parameter (1.19.8) allows specifying that all connections accepted on this port should use the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt). Obtained information is passed to the [authentication server](ngx_mail_auth_http_module#proxy_protocol) and can be used to [change the client address](ngx_mail_realip_module).

    The `listen` directive can have several additional parameters specific to socket-related system calls.

    `backlog`=*`number`*

    sets the `backlog` parameter in the `listen()` call that limits the maximum length for the queue of pending connections (1.9.2). By default, `backlog` is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.

    `rcvbuf`=*`size`*

    sets the receive buffer size (the `SO_RCVBUF` option) for the listening socket (1.11.13).

    `sndbuf`=*`size`*

    sets the send buffer size (the `SO_SNDBUF` option) for the listening socket (1.11.13).

    `bind`

    this parameter instructs to make a separate `bind()` call for a given address:port pair. The fact is that if there are several `listen` directives with the same port but different addresses, and one of the `listen` directives listens on all addresses for the given port (`*:`*`port`*), nginx will `bind()` only to `*:`*`port`*. It should be noted that the `getsockname()` system call will be made in this case to determine the address that accepted the connection. If the `backlog`, `rcvbuf`, `sndbuf`, `ipv6only`, or `so_keepalive` parameters are used then for a given *`address`*:*`port`* pair a separate `bind()` call will always be made.

    `ipv6only`=`on`\|`off`

    this parameter determines (via the `IPV6_V6ONLY` socket option) whether an IPv6 socket listening on a wildcard address `[::]` will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.

    `so_keepalive`=`on`\|`off`\|\[*`keepidle`*\]:\[*`keepintvl`*\]:\[*`keepcnt`*\]

    this parameter configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “`on`”, the `SO_KEEPALIVE` option is turned on for the socket. If it is set to the value “`off`”, the `SO_KEEPALIVE` option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the `TCP_KEEPIDLE`, `TCP_KEEPINTVL`, and `TCP_KEEPCNT` socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the *`keepidle`*, *`keepintvl`*, and *`keepcnt`* parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example,

    ``` nginx
    so_keepalive=30m::10
    ```

    will set the idle timeout (`TCP_KEEPIDLE`) to 30 minutes, leave the probe interval (`TCP_KEEPINTVL`) at its system default, and set the probes count (`TCP_KEEPCNT`) to 10 probes.
- name: listen (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#listen
  summary: Sets the address and port for the socket on which the server will accept connections
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                                                                                                                                                                                                                                                                                                                                        |
    |----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`listen`***`address`*`:`*`port`*` [default_server] [ssl] [udp] [proxy_protocol] [setfib=`*`number`*`] [fastopen=`*`number`*`] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` |
    | Default: | —                                                                                                                                                                                                                                                                                                                                                      |
    | Context: | `server`                                                                                                                                                                                                                                                                                                                                               |

    Sets the *`address`* and *`port`* for the socket on which the server will accept connections. It is possible to specify just the port. The address can also be a hostname, for example:

    ``` nginx
    listen 127.0.0.1:12345;
    listen *:12345;
    listen 12345;     # same as *:12345
    listen localhost:12345;
    ```

    IPv6 addresses are specified in square brackets:

    ``` nginx
    listen [::1]:12345;
    listen [::]:12345;
    ```

    UNIX-domain sockets are specified with the “`unix:`” prefix:

    ``` nginx
    listen unix:/var/run/nginx.sock;
    ```

    Port ranges (1.15.10) are specified with the first and last port separated by a hyphen:

    ``` nginx
    listen 127.0.0.1:12345-12399;
    listen 12345-12399;
    ```

    The `default_server` parameter, if present, will cause the server to become the default server for the specified *`address`*:*`port`* pair (1.25.5). If none of the directives have the `default_server` parameter then the first server with the *`address`*:*`port`* pair will be the default server for this pair.

    The `ssl` parameter allows specifying that all connections accepted on this port should work in SSL mode.

    The `udp` parameter configures a listening socket for working with datagrams (1.9.13). In order to handle packets from the same address and port in the same session, the [`reuseport`](#reuseport) parameter should also be specified.

    The `proxy_protocol` parameter (1.11.4) allows specifying that all connections accepted on this port should use the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt).

    The PROXY protocol version 2 is supported since version 1.13.11.

    The `listen` directive can have several additional parameters specific to socket-related system calls. These parameters can be specified in any `listen` directive, but only once for a given *`address`*:*`port`* pair.

    `setfib`=*`number`*

    this parameter (1.25.5) sets the associated routing table, FIB (the `SO_SETFIB` option) for the listening socket. This currently works only on FreeBSD.

    `fastopen`=*`number`*

    enables “[TCP Fast Open](http://en.wikipedia.org/wiki/TCP_Fast_Open)” for the listening socket (1.21.0) and [limits](https://datatracker.ietf.org/doc/html/rfc7413#section-5.1) the maximum length for the queue of connections that have not yet completed the three-way handshake.

    Do not enable this feature unless the server can handle receiving the [same SYN packet with data](https://datatracker.ietf.org/doc/html/rfc7413#section-6.1) more than once.

    `backlog`=*`number`*

    sets the `backlog` parameter in the `listen()` call that limits the maximum length for the queue of pending connections (1.9.2). By default, `backlog` is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.

    `rcvbuf`=*`size`*

    sets the receive buffer size (the `SO_RCVBUF` option) for the listening socket (1.11.13).

    `sndbuf`=*`size`*

    sets the send buffer size (the `SO_SNDBUF` option) for the listening socket (1.11.13).

    `accept_filter`=*`filter`*

    sets the name of accept filter (the `SO_ACCEPTFILTER` option) for the listening socket that filters incoming connections before passing them to `accept()` (1.25.5). This works only on FreeBSD and NetBSD 5.0+. Possible values are [dataready](http://man.freebsd.org/accf_data) and [httpready](http://man.freebsd.org/accf_http).

    `deferred`

    instructs to use a deferred `accept()` (the `TCP_DEFER_ACCEPT` socket option) on Linux (1.25.5).

    `bind`

    this parameter instructs to make a separate `bind()` call for a given address:port pair. The fact is that if there are several `listen` directives with the same port but different addresses, and one of the `listen` directives listens on all addresses for the given port (`*:`*`port`*), nginx will `bind()` only to `*:`*`port`*. It should be noted that the `getsockname()` system call will be made in this case to determine the address that accepted the connection. If the `setfib`, `fastopen`, `backlog`, `rcvbuf`, `sndbuf`, `accept_filter`, `deferred`, `ipv6only`, `reuseport`, or `so_keepalive` parameters are used then for a given *`address`*:*`port`* pair a separate `bind()` call will always be made.

    `ipv6only`=`on`\|`off`

    this parameter determines (via the `IPV6_V6ONLY` socket option) whether an IPv6 socket listening on a wildcard address `[::]` will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.

    `reuseport`

    this parameter (1.9.1) instructs to create an individual listening socket for each worker process (using the `SO_REUSEPORT` socket option on Linux 3.9+ and DragonFly BSD, or `SO_REUSEPORT_LB` on FreeBSD 12+), allowing a kernel to distribute incoming connections between worker processes. This currently works only on Linux 3.9+, DragonFly BSD, and FreeBSD 12+ (1.15.1).

    Inappropriate use of this option may have its security [implications](http://man7.org/linux/man-pages/man7/socket.7.html).

    `so_keepalive`=`on`\|`off`\|\[*`keepidle`*\]:\[*`keepintvl`*\]:\[*`keepcnt`*\]

    this parameter configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “`on`”, the `SO_KEEPALIVE` option is turned on for the socket. If it is set to the value “`off`”, the `SO_KEEPALIVE` option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the `TCP_KEEPIDLE`, `TCP_KEEPINTVL`, and `TCP_KEEPCNT` socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the *`keepidle`*, *`keepintvl`*, and *`keepcnt`* parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example,

    ``` nginx
    so_keepalive=30m::10
    ```

    will set the idle timeout (`TCP_KEEPIDLE`) to 30 minutes, leave the probe interval (`TCP_KEEPINTVL`) at its system default, and set the probes count (`TCP_KEEPCNT`) to 10 probes.

    Before version 1.25.5, different servers must listen on different *`address`*:*`port`* pairs.
- name: load_module (Core functionality)
  id: ngx_core_module#load_module
  summary: This directive appeared in version 1.9.11
  belongs_to: Core functionality
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`load_module`***`file`*`;` |
    | Default: | —                            |
    | Context: | `main`                       |

    This directive appeared in version 1.9.11.

    Loads a dynamic module.

    Example:

    ``` nginx
    load_module modules/ngx_mail_module.so;
    ```
- name: location
  id: http/ngx_http_core_module#location
  summary: Sets configuration depending on a request URI
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                                                            |
    |----------|--------------------------------------------------------------------------------------------|
    | Syntax:  | **`location`**` [ = | ~ | ~* | ^~ ] `*`uri`*` { ... }`**`location`**` @`*`name`*` { ... }` |
    | Default: | —                                                                                          |
    | Context: | `server`, `location`                                                                       |

    Sets configuration depending on a request URI.

    The matching is performed against a normalized URI, after decoding the text encoded in the “`%XX`” form, resolving references to relative path components “`.`” and “`..`”, and possible [compression](#merge_slashes) of two or more adjacent slashes into a single slash.

    A location can either be defined by a prefix string, or by a regular expression. Regular expressions are specified with the preceding “`~*`” modifier (for case-insensitive matching), or the “`~`” modifier (for case-sensitive matching). To find location matching a given request, nginx first checks locations defined using the prefix strings (prefix locations). Among them, the location with the longest matching prefix is selected and remembered. Then regular expressions are checked, in the order of their appearance in the configuration file. The search of regular expressions terminates on the first match, and the corresponding configuration is used. If no match with a regular expression is found then the configuration of the prefix location remembered earlier is used.

    `location` blocks can be nested, with some exceptions mentioned below.

    For case-insensitive operating systems such as macOS and Cygwin, matching with prefix strings ignores a case (0.7.7). However, comparison is limited to one-byte locales.

    Regular expressions can contain captures (0.7.40) that can later be used in other directives.

    If the longest matching prefix location has the “`^~`” modifier then regular expressions are not checked.

    Also, using the “`=`” modifier it is possible to define an exact match of URI and location. If an exact match is found, the search terminates. For example, if a “`/`” request happens frequently, defining “`location = /`” will speed up the processing of these requests, as search terminates right after the first comparison. Such a location cannot obviously contain nested locations.

    In versions from 0.7.1 to 0.8.41, if a request matched the prefix location without the “`=`” and “`^~`” modifiers, the search also terminated and regular expressions were not checked.

    Let’s illustrate the above by an example:

    ``` nginx
    location = / {
        [ configuration A ]
    }

    location / {
        [ configuration B ]
    }

    location /documents/ {
        [ configuration C ]
    }

    location ^~ /images/ {
        [ configuration D ]
    }

    location ~* \.(gif|jpg|jpeg)$ {
        [ configuration E ]
    }
    ```

    The “`/`” request will match configuration A, the “`/index.html`” request will match configuration B, the “`/documents/document.html`” request will match configuration C, the “`/images/1.gif`” request will match configuration D, and the “`/documents/1.jpg`” request will match configuration E.

    The “`@`” prefix defines a named location. Such a location is not used for a regular request processing, but instead used for request redirection. They cannot be nested, and cannot contain nested locations.

    If a location is defined by a prefix string that ends with the slash character, and requests are processed by one of [proxy_pass](ngx_http_proxy_module#proxy_pass), [fastcgi_pass](ngx_http_fastcgi_module#fastcgi_pass), [uwsgi_pass](ngx_http_uwsgi_module#uwsgi_pass), [scgi_pass](ngx_http_scgi_module#scgi_pass), [memcached_pass](ngx_http_memcached_module#memcached_pass), or [grpc_pass](ngx_http_grpc_module#grpc_pass), then the special processing is performed. In response to a request with URI equal to this string, but without the trailing slash, a permanent redirect with the code 301 will be returned to the requested URI with the slash appended. If this is not desired, an exact match of the URI and location could be defined like this:

    ``` nginx
    location /user/ {
        proxy_pass http://user.example.com;
    }

    location = /user {
        proxy_pass http://login.example.com;
    }
    ```
- name: lock_file (Core functionality)
  id: ngx_core_module#lock_file
  summary: nginx uses the locking mechanism to implement accept_mutex and serialize access to shared memory
  belongs_to: Core functionality
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`lock_file`***`file`*`;`   |
    | Default: | `lock_file logs/nginx.lock;` |
    | Context: | `main`                       |

    nginx uses the locking mechanism to implement [accept_mutex](#accept_mutex) and serialize access to shared memory. On most systems the locks are implemented using atomic operations, and this directive is ignored. On other systems the “lock file” mechanism is used. This directive specifies a prefix for the names of lock files.
- name: log_format
  id: http/ngx_http_log_module#log_format
  summary: Specifies log format
  belongs_to: ngx_http_log_module
  description: |-
    |          |                                                                         |
    |----------|-------------------------------------------------------------------------|
    | Syntax:  | **`log_format`***`name`*` [escape=default|json|none] `*`string`*` ...;` |
    | Default: | `log_format combined "...";`                                            |
    | Context: | `http`                                                                  |

    Specifies log format.

    The `escape` parameter (1.11.8) allows setting `json` or `default` characters escaping in variables, by default, `default` escaping is used. The `none` value (1.13.10) disables escaping.

    For `default` escaping, characters “`"`”, “`\`”, and other characters with values less than 32 (0.7.0) or above 126 (1.1.6) are escaped as “`\xXX`”. If the variable value is not found, a hyphen (“`-`”) will be logged.

    For `json` escaping, all characters not allowed in JSON [strings](https://datatracker.ietf.org/doc/html/rfc8259#section-7) will be escaped: characters “`"`” and “`\`” are escaped as “`\"`” and “`\\`”, characters with values less than 32 are escaped as “`\n`”, “`\r`”, “`\t`”, “`\b`”, “`\f`”, or “`\u00XX`”.

    The log format can contain common variables, and variables that exist only at the time of a log write:

    `$bytes_sent`

    the number of bytes sent to a client

    `$connection`

    connection serial number

    `$connection_requests`

    the current number of requests made through a connection (1.1.18)

    `$msec`

    time in seconds with a milliseconds resolution at the time of the log write

    `$pipe`

    “`p`” if request was pipelined, “`.`” otherwise

    `$request_length`

    request length (including request line, header, and request body)

    `$request_time`

    request processing time in seconds with a milliseconds resolution; time elapsed between the first bytes were read from the client and the log write after the last bytes were sent to the client

    `$status`

    response status

    `$time_iso8601`

    local time in the ISO 8601 standard format

    `$time_local`

    local time in the Common Log Format

    In the modern nginx versions variables [$status](ngx_http_core_module#var_status) (1.3.2, 1.2.2), [$bytes_sent](ngx_http_core_module#var_bytes_sent) (1.3.8, 1.2.5), [$connection](ngx_http_core_module#var_connection) (1.3.8, 1.2.5), [$connection_requests](ngx_http_core_module#var_connection_requests) (1.3.8, 1.2.5), [$msec](ngx_http_core_module#var_msec) (1.3.9, 1.2.6), [$request_time](ngx_http_core_module#var_request_time) (1.3.9, 1.2.6), [$pipe](ngx_http_core_module#var_pipe) (1.3.12, 1.2.7), [$request_length](ngx_http_core_module#var_request_length) (1.3.12, 1.2.7), [$time_iso8601](ngx_http_core_module#var_time_iso8601) (1.3.12, 1.2.7), and [$time_local](ngx_http_core_module#var_time_local) (1.3.12, 1.2.7) are also available as common variables.

    Header lines sent to a client have the prefix “`sent_http_`”, for example, `$sent_http_content_range`.

    The configuration always includes the predefined “`combined`” format:

    ``` nginx
    log_format combined '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';
    ```
- name: log_format (ngx_stream_log_module)
  id: stream/ngx_stream_log_module#log_format
  summary: The escape parameter (1.11.8) allows setting json or default characters escaping in variables, by default, default escaping is used
  belongs_to: ngx_stream_log_module
  description: |-
    |          |                                                                         |
    |----------|-------------------------------------------------------------------------|
    | Syntax:  | **`log_format`***`name`*` [escape=default|json|none] `*`string`*` ...;` |
    | Default: | —                                                                       |
    | Context: | `stream`                                                                |

    Specifies the log format, for example:

    ``` nginx
    log_format proxy '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time "$upstream_addr" '
                     '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    ```

    The `escape` parameter (1.11.8) allows setting `json` or `default` characters escaping in variables, by default, `default` escaping is used. The `none` parameter (1.13.10) disables escaping.

    For `default` escaping, characters “`"`”, “`\`”, and other characters with values less than 32 or above 126 are escaped as “`\xXX`”. If the variable value is not found, a hyphen (“`-`”) will be logged.

    For `json` escaping, all characters not allowed in JSON [strings](https://datatracker.ietf.org/doc/html/rfc8259#section-7) will be escaped: characters “`"`” and “`\`” are escaped as “`\"`” and “`\\`”, characters with values less than 32 are escaped as “`\n`”, “`\r`”, “`\t`”, “`\b`”, “`\f`”, or “`\u00XX`”.
- name: log_not_found
  id: http/ngx_http_core_module#log_not_found
  summary: Enables or disables logging of errors about not found files into error_log
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`log_not_found`**` on | off;` |
    | Default: | `log_not_found on;`             |
    | Context: | `http`, `server`, `location`    |

    Enables or disables logging of errors about not found files into [error_log](../ngx_core_module#error_log).
- name: log_subrequest
  id: http/ngx_http_core_module#log_subrequest
  summary: Enables or disables logging of subrequests into access_log
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`log_subrequest`**` on | off;` |
    | Default: | `log_subrequest off;`            |
    | Context: | `http`, `server`, `location`     |

    Enables or disables logging of subrequests into [access_log](ngx_http_log_module#access_log).
- name: Logging to syslog
  id: syslog
  summary: The error_log and access_log directives support logging to syslog
  description: "# Logging to syslog\n\nThe [error_log](ngx_core_module#error_log) and [access_log](http/ngx_http_log_module#access_log) directives support logging to syslog. The following parameters configure logging to syslog:\n\n`server=`*`address`*  \nDefines the address of a syslog server. The address can be specified as a domain name or IP address, with an optional port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. If port is not specified, the UDP port 514 is used. If a domain name resolves to several IP addresses, the first resolved address is used.\n\n`facility=`*`string`*  \nSets facility of syslog messages, as defined in [RFC 3164](https://datatracker.ietf.org/doc/html/rfc3164#section-4.1.1). Facility can be one of “`kern`”, “`user`”, “`mail`”, “`daemon`”, “`auth`”, “`intern`”, “`lpr`”, “`news`”, “`uucp`”, “`clock`”, “`authpriv`”, “`ftp`”, “`ntp`”, “`audit`”, “`alert`”, “`cron`”, “`local0`”..“`local7`”. Default is “`local7`”.\n\n`severity=`*`string`*  \nSets severity of syslog messages for [access_log](http/ngx_http_log_module#access_log), as defined in [RFC 3164](https://datatracker.ietf.org/doc/html/rfc3164#section-4.1.1). Possible values are the same as for the second parameter (level) of the [error_log](ngx_core_module#error_log) directive. Default is “`info`”.\n\nSeverity of error messages is determined by nginx, thus the parameter is ignored in the `error_log` directive.\n\n`tag=`*`string`*  \nSets the tag of syslog messages. Default is “`nginx`”.\n\n`nohostname`  \nDisables adding the “hostname” field into the syslog message header (1.9.7).\n\nExample syslog configuration:\n\n``` nginx\nerror_log syslog:server=192.168.1.1 debug;\n\naccess_log syslog:server=unix:/var/log/nginx.sock,nohostname;\naccess_log syslog:server=[2001:db8::1]:12345,facility=local7,tag=nginx,severity=info combined;\n```\n\nLogging to syslog is available since version 1.7.1. As part of our [commercial subscription](https://www.f5.com/products/nginx) logging to syslog is available since version 1.5.3.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/syslog.html](https://nginx.org/en/docs/syslog.html)"
- name: mail (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#mail
  summary: Provides the configuration file context in which the mail server directives are specified
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                      |
    |----------|----------------------|
    | Syntax:  | **`mail`**` { ... }` |
    | Default: | —                    |
    | Context: | `main`               |

    Provides the configuration file context in which the mail server directives are specified.
- name: map
  id: http/ngx_http_map_module#map
  summary: Creates a new variable whose value depends on values of one or more of the source variables specified in the first parameter
  belongs_to: ngx_http_map_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`map`***`string$variable`*` { ... }` |
    | Default: | —                                      |
    | Context: | `http`                                 |

    Creates a new variable whose value depends on values of one or more of the source variables specified in the first parameter.

    Before version 0.9.0 only a single variable could be specified in the first parameter.

    Since variables are evaluated only when they are used, the mere declaration even of a large number of “`map`” variables does not add any extra costs to request processing.

    Parameters inside the `map` block specify a mapping between source and resulting values.

    Source values are specified as strings or regular expressions (0.9.6).

    Strings are matched ignoring the case.

    A regular expression should either start from the “`~`” symbol for a case-sensitive matching, or from the “`~*`” symbols (1.0.4) for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable.

    If a source value matches one of the names of special parameters described below, it should be prefixed with the “`\`” symbol.

    The resulting value can contain text, variable (0.9.0), and their combination (1.11.0).

    The following special parameters are also supported:

    `default`*`value`*

    sets the resulting value if the source value matches none of the specified variants. When `default` is not specified, the default resulting value will be an empty string.

    `hostnames`

    indicates that source values can be hostnames with a prefix or suffix mask:

    ``` nginx
    *.example.com 1;
    example.*     1;
    ```

    The following two records

    ``` nginx
    example.com   1;
    *.example.com 1;
    ```

    can be combined:

    ``` nginx
    .example.com  1;
    ```

    This parameter should be specified before the list of values.

    `include`*`file`*

    includes a file with values. There can be several inclusions.

    `volatile`

    indicates that the variable is not cacheable (1.11.7).

    If the source value matches more than one of the specified variants, e.g. both a mask and a regular expression match, the first matching variant will be chosen, in the following order of priority:

    1.  string value without a mask
    2.  longest string value with a prefix mask, e.g. “`*.example.com`”
    3.  longest string value with a suffix mask, e.g. “`mail.*`”
    4.  first matching regular expression (in order of appearance in a configuration file)
    5.  default value
- name: map (ngx_stream_map_module)
  id: stream/ngx_stream_map_module#map
  summary: Creates a new variable whose value depends on values of one or more of the source variables specified in the first parameter
  belongs_to: ngx_stream_map_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`map`***`string$variable`*` { ... }` |
    | Default: | —                                      |
    | Context: | `stream`                               |

    Creates a new variable whose value depends on values of one or more of the source variables specified in the first parameter.

    Since variables are evaluated only when they are used, the mere declaration even of a large number of “`map`” variables does not add any extra costs to connection processing.

    Parameters inside the `map` block specify a mapping between source and resulting values.

    Source values are specified as strings or regular expressions.

    Strings are matched ignoring the case.

    A regular expression should either start from the “`~`” symbol for a case-sensitive matching, or from the “`~*`” symbols for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable.

    If a source value matches one of the names of special parameters described below, it should be prefixed with the “`\`” symbol.

    The resulting value can contain text, variable, and their combination.

    The following special parameters are also supported:

    `default`*`value`*

    sets the resulting value if the source value matches none of the specified variants. When `default` is not specified, the default resulting value will be an empty string.

    `hostnames`

    indicates that source values can be hostnames with a prefix or suffix mask:

    ``` nginx
    *.example.com 1;
    example.*     1;
    ```

    The following two records

    ``` nginx
    example.com   1;
    *.example.com 1;
    ```

    can be combined:

    ``` nginx
    .example.com  1;
    ```

    This parameter should be specified before the list of values.

    `include`*`file`*

    includes a file with values. There can be several inclusions.

    `volatile`

    indicates that the variable is not cacheable (1.11.7).

    If the source value matches more than one of the specified variants, e.g. both a mask and a regular expression match, the first matching variant will be chosen, in the following order of priority:

    1.  string value without a mask
    2.  longest string value with a prefix mask, e.g. “`*.example.com`”
    3.  longest string value with a suffix mask, e.g. “`mail.*`”
    4.  first matching regular expression (in order of appearance in a configuration file)
    5.  default value
- name: map_hash_bucket_size
  id: http/ngx_http_map_module#map_hash_bucket_size
  summary: Sets the bucket size for the map variables hash tables
  belongs_to: ngx_http_map_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`map_hash_bucket_size`***`size`*`;` |
    | Default: | `map_hash_bucket_size 32|64|128;`     |
    | Context: | `http`                                |

    Sets the bucket size for the [map](#map) variables hash tables. Default value depends on the processor’s cache line size. The details of setting up hash tables are provided in a separate [document](../hash).
- name: map_hash_bucket_size (ngx_stream_map_module)
  id: stream/ngx_stream_map_module#map_hash_bucket_size
  summary: Sets the bucket size for the map variables hash tables
  belongs_to: ngx_stream_map_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`map_hash_bucket_size`***`size`*`;` |
    | Default: | `map_hash_bucket_size 32|64|128;`     |
    | Context: | `stream`                              |

    Sets the bucket size for the [map](#map) variables hash tables. Default value depends on the processor’s cache line size. The details of setting up hash tables are provided in a separate [document](../hash).
- name: map_hash_max_size
  id: http/ngx_http_map_module#map_hash_max_size
  summary: Sets the maximum size of the map variables hash tables
  belongs_to: ngx_http_map_module
  description: "|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`map_hash_max_size`***`size`*`;` |\n| Default: | `map_hash_max_size 2048;`          |\n| Context: | `http`                             |\n\nSets the maximum *`size`* of the [map](#map) variables hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_map_module.html](https://nginx.org/en/docs/http/ngx_http_map_module.html)"
- name: map_hash_max_size (ngx_stream_map_module)
  id: stream/ngx_stream_map_module#map_hash_max_size
  summary: Sets the maximum size of the map variables hash tables
  belongs_to: ngx_stream_map_module
  description: "|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`map_hash_max_size`***`size`*`;` |\n| Default: | `map_hash_max_size 2048;`          |\n| Context: | `stream`                           |\n\nSets the maximum *`size`* of the [map](#map) variables hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_map_module.html](https://nginx.org/en/docs/stream/ngx_stream_map_module.html)"
- name: master_process (Core functionality)
  id: ngx_core_module#master_process
  summary: Determines whether worker processes are started
  belongs_to: Core functionality
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`master_process`**` on | off;` |
    | Default: | `master_process on;`             |
    | Context: | `main`                           |

    Determines whether worker processes are started. This directive is intended for nginx developers.
- name: match
  id: http/ngx_http_upstream_hc_module#match
  summary: Defines the named test set used to verify responses to health check requests
  belongs_to: ngx_http_upstream_hc_module
  description: "|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`match`***`name`*` { ... }` |\n| Default: | —                             |\n| Context: | `http`                        |\n\nDefines the named test set used to verify responses to health check requests.\n\nThe following items can be tested in a response:\n\n`status 200;`\n\nstatus is 200\n\n`status ! 500;`\n\nstatus is not 500\n\n`status 200 204;`\n\nstatus is 200 or 204\n\n`status ! 301 302;`\n\nstatus is neither 301 nor 302\n\n`status 200-399;`\n\nstatus is in the range from 200 to 399\n\n`status ! 400-599;`\n\nstatus is not in the range from 400 to 599\n\n`status 301-303 307;`\n\nstatus is either 301, 302, 303, or 307\n\n`header Content-Type = text/html;`\n\nheader contains “Content-Type” with value `text/html`\n\n`header Content-Type != text/html;`\n\nheader contains “Content-Type” with value other than `text/html`\n\n`header Connection ~ close;`\n\nheader contains “Connection” with value matching regular expression `close`\n\n`header Connection !~ close;`\n\nheader contains “Connection” with value not matching regular expression `close`\n\n`header Host;`\n\nheader contains “Host”\n\n`header ! X-Accel-Redirect;`\n\nheader lacks “X-Accel-Redirect”\n\n`body ~ \"Welcome to nginx!\";`\n\nbody matches regular expression “`Welcome to nginx!`”\n\n`body !~ \"Welcome to nginx!\";`\n\nbody does not match regular expression “`Welcome to nginx!`”\n\n`require`*`$variable`*`...;`\n\nall specified variables are not empty and not equal to “0” (1.15.9).\n\nIf several tests are specified, the response matches only if it matches all tests.\n\nOnly the first 256k of the response body are examined.\n\nExamples:\n\n``` nginx\n# status is 200, content type is \"text/html\",\n# and body contains \"Welcome to nginx!\"\nmatch welcome {\n    status 200;\n    header Content-Type = text/html;\n    body ~ \"Welcome to nginx!\";\n}\n```\n\n``` nginx\n# status is not one of 301, 302, 303, or 307, and header does not have \"Refresh:\"\nmatch not_redirect {\n    status ! 301-303 307;\n    header ! Refresh;\n}\n```\n\n``` nginx\n# status ok and not in maintenance mode\nmatch server_ok {\n    status 200-399;\n    body !~ \"maintenance mode\";\n}\n```\n\n``` nginx\n# status is 200 or 204\nmap $upstream_status $good_status {\n    200 1;\n    204 1;\n}\n\nmatch server_ok {\n    require $good_status;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_upstream_hc_module.html](https://nginx.org/en/docs/http/ngx_http_upstream_hc_module.html)"
- name: match (ngx_stream_upstream_hc_module)
  id: stream/ngx_stream_upstream_hc_module#match
  summary: Defines the named test set used to verify server responses to health checks
  belongs_to: ngx_stream_upstream_hc_module
  description: "|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`match`***`name`*` { ... }` |\n| Default: | —                             |\n| Context: | `stream`                      |\n\nDefines the named test set used to verify server responses to health checks.\n\nThe following parameters can be configured:\n\n`send`*`string`*;\n\nsends a *`string`* to the server;\n\n`expect`*`string`* \\| `~` *`regex`*;\n\na literal string (1.9.12) or a regular expression that the data obtained from the server should match. The regular expression is specified with the preceding “`~*`” modifier (for case-insensitive matching), or the “`~`” modifier (for case-sensitive matching).\n\nBoth `send` and `expect` parameters can contain hexadecimal literals with the prefix “`\\x`” followed by two hex digits, for example, “`\\x80`” (1.9.12).\n\nHealth check is passed if:\n\n- the TCP connection was successfully established;\n- the *`string`* from the `send` parameter, if specified, was sent;\n- the data obtained from the server matched the string or regular expression from the `expect` parameter, if specified;\n- the time elapsed does not exceed the value specified in the [health_check_timeout](#health_check_timeout) directive.\n\nExample:\n\n``` nginx\nupstream backend {\n    zone     upstream_backend 10m;\n    server   127.0.0.1:12345;\n}\n\nmatch http {\n    send     \"GET / HTTP/1.0\\r\\nHost: localhost\\r\\n\\r\\n\";\n    expect ~ \"200 OK\";\n}\n\nserver {\n    listen       12346;\n    proxy_pass   backend;\n    health_check match=http;\n}\n```\n\nOnly the first [proxy_buffer_size](ngx_stream_proxy_module#proxy_buffer_size) bytes of data obtained from the server are examined.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_upstream_hc_module.html](https://nginx.org/en/docs/stream/ngx_stream_upstream_hc_module.html)"
- name: max_errors (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#max_errors
  summary: This directive appeared in version 1.21.0
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`max_errors`***`number`*`;` |
    | Default: | `max_errors 5;`               |
    | Context: | `mail`, `server`              |

    This directive appeared in version 1.21.0.

    Sets the number of protocol errors after which the connection is closed.
- name: max_ranges
  id: http/ngx_http_core_module#max_ranges
  summary: This directive appeared in version 1.1.2
  belongs_to: ngx_http_core_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`max_ranges`***`number`*`;` |
    | Default: | —                             |
    | Context: | `http`, `server`, `location`  |

    This directive appeared in version 1.1.2.

    Limits the maximum allowed number of ranges in byte-range requests. Requests that exceed the limit are processed as if there were no byte ranges specified. By default, the number of ranges is not limited. The zero value disables the byte-range support completely.
- name: memcached_bind
  id: http/ngx_http_memcached_module#memcached_bind
  summary: This directive appeared in version 0.8.22
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                                         |
    |----------|---------------------------------------------------------|
    | Syntax:  | **`memcached_bind`***`address`*` [transparent ] | off;` |
    | Default: | —                                                       |
    | Context: | `http`, `server`, `location`                            |

    This directive appeared in version 0.8.22.

    Makes outgoing connections to a memcached server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `memcached_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.

    The `transparent` parameter (1.11.0) allows outgoing connections to a memcached server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    memcached_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the memcached server.
- name: memcached_buffer_size
  id: http/ngx_http_memcached_module#memcached_buffer_size
  summary: Sets the size of the buffer used for reading the response received from the memcached server
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`memcached_buffer_size`***`size`*`;` |
    | Default: | `memcached_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`           |

    Sets the *`size`* of the buffer used for reading the response received from the memcached server. The response is passed to the client synchronously, as soon as it is received.
- name: memcached_connect_timeout
  id: http/ngx_http_memcached_module#memcached_connect_timeout
  summary: Defines a timeout for establishing a connection with a memcached server
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`memcached_connect_timeout`***`time`*`;` |
    | Default: | `memcached_connect_timeout 60s;`           |
    | Context: | `http`, `server`, `location`               |

    Defines a timeout for establishing a connection with a memcached server. It should be noted that this timeout cannot usually exceed 75 seconds.
- name: memcached_gzip_flag
  id: http/ngx_http_memcached_module#memcached_gzip_flag
  summary: This directive appeared in version 1.3.6
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`memcached_gzip_flag`***`flag`*`;` |
    | Default: | —                                    |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.3.6.

    Enables the test for the *`flag`* presence in the memcached server response and sets the “`Content-Encoding`” response header field to “`gzip`” if the flag is set.
- name: memcached_next_upstream
  id: http/ngx_http_memcached_module#memcached_next_upstream
  summary: disables passing a request to the next server
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                                                                           |
    |----------|-------------------------------------------------------------------------------------------|
    | Syntax:  | **`memcached_next_upstream`**` error | timeout | invalid_response | not_found | off ...;` |
    | Default: | `memcached_next_upstream error timeout;`                                                  |
    | Context: | `http`, `server`, `location`                                                              |

    Specifies in which cases a request should be passed to the next server:

    `error`

    an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `timeout`

    a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `invalid_response`

    a server returned an empty or invalid response;

    `not_found`

    a response was not found on the server;

    `off`

    disables passing a request to the next server.

    One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.

    The directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_response` are always considered unsuccessful attempts, even if they are not specified in the directive. The case of `not_found` is never considered an unsuccessful attempt.

    Passing a request to the next server can be limited by [the number of tries](#memcached_next_upstream_tries) and by [time](#memcached_next_upstream_timeout).
- name: memcached_next_upstream_timeout
  id: http/ngx_http_memcached_module#memcached_next_upstream_timeout
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                                  |
    |----------|--------------------------------------------------|
    | Syntax:  | **`memcached_next_upstream_timeout`***`time`*`;` |
    | Default: | `memcached_next_upstream_timeout 0;`             |
    | Context: | `http`, `server`, `location`                     |

    This directive appeared in version 1.7.5.

    Limits the time during which a request can be passed to the [next server](#memcached_next_upstream). The `0` value turns off this limitation.
- name: memcached_next_upstream_tries
  id: http/ngx_http_memcached_module#memcached_next_upstream_tries
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                                  |
    |----------|--------------------------------------------------|
    | Syntax:  | **`memcached_next_upstream_tries`***`number`*`;` |
    | Default: | `memcached_next_upstream_tries 0;`               |
    | Context: | `http`, `server`, `location`                     |

    This directive appeared in version 1.7.5.

    Limits the number of possible tries for passing a request to the [next server](#memcached_next_upstream). The `0` value turns off this limitation.
- name: memcached_pass
  id: http/ngx_http_memcached_module#memcached_pass
  summary: Sets the memcached server address
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`memcached_pass`***`address`*`;` |
    | Default: | —                                  |
    | Context: | `location`, `if in location`       |

    Sets the memcached server address. The address can be specified as a domain name or IP address, and a port:

    ``` nginx
    memcached_pass localhost:11211;
    ```

    or as a UNIX-domain socket path:

    ``` nginx
    memcached_pass unix:/tmp/memcached.socket;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).
- name: memcached_read_timeout
  id: http/ngx_http_memcached_module#memcached_read_timeout
  summary: Defines a timeout for reading a response from the memcached server
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`memcached_read_timeout`***`time`*`;` |
    | Default: | `memcached_read_timeout 60s;`           |
    | Context: | `http`, `server`, `location`            |

    Defines a timeout for reading a response from the memcached server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the memcached server does not transmit anything within this time, the connection is closed.
- name: memcached_send_timeout
  id: http/ngx_http_memcached_module#memcached_send_timeout
  summary: Sets a timeout for transmitting a request to the memcached server
  belongs_to: ngx_http_memcached_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`memcached_send_timeout`***`time`*`;` |
    | Default: | `memcached_send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`            |

    Sets a timeout for transmitting a request to the memcached server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the memcached server does not receive anything within this time, the connection is closed.
- name: memcached_socket_keepalive
  id: http/ngx_http_memcached_module#memcached_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_memcached_module
  description: "|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`memcached_socket_keepalive`**` on | off;` |\n| Default: | `memcached_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a memcached server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n#### Embedded Variables\n\n`$memcached_key`\n\nDefines a key for obtaining response from a memcached server.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_memcached_module.html](https://nginx.org/en/docs/http/ngx_http_memcached_module.html)"
- name: merge_slashes
  id: http/ngx_http_core_module#merge_slashes
  summary: Enables or disables compression of two or more adjacent slashes in a URI into a single slash
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`merge_slashes`**` on | off;` |
    | Default: | `merge_slashes on;`             |
    | Context: | `http`, `server`                |

    Enables or disables compression of two or more adjacent slashes in a URI into a single slash.

    Note that compression is essential for the correct matching of prefix string and regular expression locations. Without it, the “`//scripts/one.php`” request would not match

    ``` nginx
    location /scripts/ {
        ...
    }
    ```

    and might be processed as a static file. So it gets converted to “`/scripts/one.php`”.

    Turning the compression `off` can become necessary if a URI contains base64-encoded names, since base64 uses the “`/`” character internally. However, for security considerations, it is better to avoid turning the compression off.

    If the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.
- name: mgmt (ngx_mgmt_module)
  id: ngx_mgmt_module#mgmt
  summary: Provides the configuration file context in which the management server directives are specified
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                      |
    |----------|----------------------|
    | Syntax:  | **`mgmt`**` { ... }` |
    | Default: | —                    |
    | Context: | `main`               |

    Provides the configuration file context in which the management server directives are specified.
- name: min_delete_depth
  id: http/ngx_http_dav_module#min_delete_depth
  summary: Allows the DELETE method to remove files provided that the number of elements in a request path is not less than the specified number
  belongs_to: ngx_http_dav_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`min_delete_depth`***`number`*`;` |\n| Default: | `min_delete_depth 0;`               |\n| Context: | `http`, `server`, `location`        |\n\nAllows the DELETE method to remove files provided that the number of elements in a request path is not less than the specified number. For example, the directive\n\n``` nginx\nmin_delete_depth 4;\n```\n\nallows removing files on requests\n\n``` nginx\n/users/00/00/name\n/users/00/00/name/pic.jpg\n/users/00/00/page.html\n```\n\nand denies the removal of\n\n``` nginx\n/users/00/00\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_dav_module.html](https://nginx.org/en/docs/http/ngx_http_dav_module.html)"
- name: mirror
  id: http/ngx_http_mirror_module#mirror
  summary: Sets the URI to which an original request will be mirrored
  belongs_to: ngx_http_mirror_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`mirror`***`uri`*` | off;` |
    | Default: | `mirror off;`                |
    | Context: | `http`, `server`, `location` |

    Sets the URI to which an original request will be mirrored. Several mirrors can be specified on the same configuration level.
- name: mirror_request_body
  id: http/ngx_http_mirror_module#mirror_request_body
  summary: Indicates whether the client request body is mirrored
  belongs_to: ngx_http_mirror_module
  description: "|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`mirror_request_body`**` on | off;` |\n| Default: | `mirror_request_body on;`             |\n| Context: | `http`, `server`, `location`          |\n\nIndicates whether the client request body is mirrored. When enabled, the client request body will be read prior to creating mirror subrequests. In this case, unbuffered client request body proxying set by the [proxy_request_buffering](ngx_http_proxy_module#proxy_request_buffering), [fastcgi_request_buffering](ngx_http_fastcgi_module#fastcgi_request_buffering), [scgi_request_buffering](ngx_http_scgi_module#scgi_request_buffering), and [uwsgi_request_buffering](ngx_http_uwsgi_module#uwsgi_request_buffering) directives will be disabled.\n\n``` nginx\nlocation / {\n    mirror /mirror;\n    mirror_request_body off;\n    proxy_pass http://backend;\n}\n\nlocation = /mirror {\n    internal;\n    proxy_pass http://log_backend;\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header X-Original-URI $request_uri;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_mirror_module.html](https://nginx.org/en/docs/http/ngx_http_mirror_module.html)"
- name: modern_browser
  id: http/ngx_http_browser_module#modern_browser
  summary: Specifies a version starting from which a browser is considered modern
  belongs_to: ngx_http_browser_module
  description: |-
    |          |                                                                            |
    |----------|----------------------------------------------------------------------------|
    | Syntax:  | **`modern_browser`***`browserversion`*`;` **`modern_browser`**` unlisted;` |
    | Default: | —                                                                          |
    | Context: | `http`, `server`, `location`                                               |

    Specifies a version starting from which a browser is considered modern. A browser can be any one of the following: `msie`, `gecko` (browsers based on Mozilla), `opera`, `safari`, or `konqueror`.

    Versions can be specified in the following formats: X, X.X, X.X.X, or X.X.X.X. The maximum values for each of the format are 4000, 4000.99, 4000.99.99, and 4000.99.99.99, respectively.

    The special value `unlisted` specifies to consider a browser as modern if it was not listed by the `modern_browser` and [ancient_browser](#ancient_browser) directives. Otherwise such a browser is considered ancient. If a request does not provide the “User-Agent” field in the header, the browser is treated as not being listed.
- name: modern_browser_value
  id: http/ngx_http_browser_module#modern_browser_value
  summary: Sets a value for the $modern_browser variables
  belongs_to: ngx_http_browser_module
  description: "|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`modern_browser_value`***`string`*`;` |\n| Default: | `modern_browser_value 1;`               |\n| Context: | `http`, `server`, `location`            |\n\nSets a value for the `$modern_browser` variables.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_browser_module.html](https://nginx.org/en/docs/http/ngx_http_browser_module.html)"
- name: mp4
  id: http/ngx_http_mp4_module#mp4
  summary: Turns on module processing in a surrounding location
  belongs_to: ngx_http_mp4_module
  description: |-
    |          |              |
    |----------|--------------|
    | Syntax:  | **`mp4`**`;` |
    | Default: | —            |
    | Context: | `location`   |

    Turns on module processing in a surrounding location.
- name: mp4_buffer_size
  id: http/ngx_http_mp4_module#mp4_buffer_size
  summary: Sets the initial size of the buffer used for processing MP4 files
  belongs_to: ngx_http_mp4_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`mp4_buffer_size`***`size`*`;` |
    | Default: | `mp4_buffer_size 512K;`          |
    | Context: | `http`, `server`, `location`     |

    Sets the initial *`size`* of the buffer used for processing MP4 files.
- name: mp4_limit_rate
  id: http/ngx_http_mp4_module#mp4_limit_rate
  summary: Limits the rate of response transmission to a client
  belongs_to: ngx_http_mp4_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`mp4_limit_rate`**` on | off | `*`factor`*`;` |
    | Default: | `mp4_limit_rate off;`                           |
    | Context: | `http`, `server`, `location`                    |

    Limits the rate of response transmission to a client. The rate is limited based on the average bitrate of the MP4 file served. To calculate the rate, the bitrate is multiplied by the specified *`factor`*. The special value “`on`” corresponds to the factor of 1.1. The special value “`off`” disables rate limiting. The limit is set per a request, and so if a client simultaneously opens two connections, the overall rate will be twice as much as the specified limit.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: mp4_limit_rate_after
  id: http/ngx_http_mp4_module#mp4_limit_rate_after
  summary: Sets the initial amount of media data (measured in playback time) after which the further transmission of the response to a client will be rate limited
  belongs_to: ngx_http_mp4_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`mp4_limit_rate_after`***`time`*`;` |
    | Default: | `mp4_limit_rate_after 60s;`           |
    | Context: | `http`, `server`, `location`          |

    Sets the initial amount of media data (measured in playback time) after which the further transmission of the response to a client will be rate limited.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: mp4_max_buffer_size
  id: http/ngx_http_mp4_module#mp4_max_buffer_size
  summary: During metadata processing, a larger buffer may become necessary
  belongs_to: ngx_http_mp4_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`mp4_max_buffer_size`***`size`*`;` |
    | Default: | `mp4_max_buffer_size 10M;`           |
    | Context: | `http`, `server`, `location`         |

    During metadata processing, a larger buffer may become necessary. Its size cannot exceed the specified *`size`*, or else nginx will return the 500 (Internal Server Error) server error, and log the following message:

    ``` nginx
    "/some/movie/file.mp4" mp4 moov atom is too large:
    12583268, you may want to increase mp4_max_buffer_size
    ```
- name: mp4_start_key_frame
  id: http/ngx_http_mp4_module#mp4_start_key_frame
  summary: This directive appeared in version 1.21.4
  belongs_to: ngx_http_mp4_module
  description: "|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`mp4_start_key_frame`**` on | off;` |\n| Default: | `mp4_start_key_frame off;`            |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 1.21.4.\n\nForces output video to always start with a key video frame. If the `start` argument does not point to a key frame, initial frames are hidden using an mp4 edit list. Edit lists are supported by major players and browsers such as Chrome, Safari, QuickTime and ffmpeg, partially supported by Firefox.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_mp4_module.html](https://nginx.org/en/docs/http/ngx_http_mp4_module.html)"
- name: mqtt (ngx_stream_mqtt_filter_module)
  id: stream/ngx_stream_mqtt_filter_module#mqtt
  summary: Enables the MQTT protocol for the given virtual server
  belongs_to: ngx_stream_mqtt_filter_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`mqtt`**` on | off;` |
    | Default: | `mqtt off;`            |
    | Context: | `stream`, `server`     |

    Enables the MQTT protocol for the given virtual server.
- name: mqtt_buffers (ngx_stream_mqtt_filter_module)
  id: stream/ngx_stream_mqtt_filter_module#mqtt_buffers
  summary: This directive appeared in version 1.25.1
  belongs_to: ngx_stream_mqtt_filter_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`mqtt_buffers`***`numbersize`*`;` |
    | Default: | `mqtt_buffers 100 1k;`              |
    | Context: | `stream`, `server`                  |

    This directive appeared in version 1.25.1.

    Sets the *`number`* and *`size`* of the buffers used for handling MQTT messages, for a single connection.
- name: mqtt_preread (ngx_stream_mqtt_preread_module)
  id: stream/ngx_stream_mqtt_preread_module#mqtt_preread
  summary: Enables extracting information from the MQTT CONNECT message at the preread phase
  belongs_to: ngx_stream_mqtt_preread_module
  description: "|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`mqtt_preread`**` on | off;` |\n| Default: | `mqtt_preread off;`            |\n| Context: | `stream`, `server`             |\n\nEnables extracting information from the MQTT CONNECT message at the [preread](stream_processing#preread_phase) phase.\n\n#### Embedded Variables\n\n`$mqtt_preread_clientid`\n\nthe `clientid` value from the CONNECT message\n\n`$mqtt_preread_username`\n\nthe `username` value from the CONNECT message\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_mqtt_preread_module.html](https://nginx.org/en/docs/stream/ngx_stream_mqtt_preread_module.html)"
- name: mqtt_rewrite_buffer_size (ngx_stream_mqtt_filter_module)
  id: stream/ngx_stream_mqtt_filter_module#mqtt_rewrite_buffer_size
  summary: This directive is obsolete since version 1.25.1
  belongs_to: ngx_stream_mqtt_filter_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`mqtt_rewrite_buffer_size`***`size`*`;` |
    | Default: | `mqtt_rewrite_buffer_size 4k|8k;`         |
    | Context: | `server`                                  |

    This directive is obsolete since version 1.25.1. The [mqtt_buffers](#mqtt_buffers) directive should be used instead.

    Sets the *`size`* of the buffer used for writing a modified message. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.
- name: mqtt_set_connect (ngx_stream_mqtt_filter_module)
  id: stream/ngx_stream_mqtt_filter_module#mqtt_set_connect
  summary: Sets the message field to the given value for CONNECT message
  belongs_to: ngx_stream_mqtt_filter_module
  description: "|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`mqtt_set_connect`**` field `*`value`*`;` |\n| Default: | —                                           |\n| Context: | `server`                                    |\n\nSets the message `field` to the given `value` for CONNECT message. The following fields are supported: `clientid`, `username`, and `password`. The value can contain text, variables, and their combination.\n\nSeveral `mqtt_set_connect` directives can be specified on the same level:\n\n``` nginx\nmqtt_set_connect clientid \"$client\";\nmqtt_set_connect username \"$name\";\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_mqtt_filter_module.html](https://nginx.org/en/docs/stream/ngx_stream_mqtt_filter_module.html)"
- name: msie_padding
  id: http/ngx_http_core_module#msie_padding
  summary: Enables or disables adding comments to responses for MSIE clients with status greater than 400 to increase the response size to 512 bytes
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`msie_padding`**` on | off;` |
    | Default: | `msie_padding on;`             |
    | Context: | `http`, `server`, `location`   |

    Enables or disables adding comments to responses for MSIE clients with status greater than 400 to increase the response size to 512 bytes.
- name: msie_refresh
  id: http/ngx_http_core_module#msie_refresh
  summary: Enables or disables issuing refreshes instead of redirects for MSIE clients
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`msie_refresh`**` on | off;` |
    | Default: | `msie_refresh off;`            |
    | Context: | `http`, `server`, `location`   |

    Enables or disables issuing refreshes instead of redirects for MSIE clients.
- name: multi_accept (Core functionality)
  id: ngx_core_module#multi_accept
  summary: If multi_accept is disabled, a worker process will accept one new connection at a time
  belongs_to: Core functionality
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`multi_accept`**` on | off;` |
    | Default: | `multi_accept off;`            |
    | Context: | `events`                       |

    If `multi_accept` is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time.

    The directive is ignored if [kqueue](events#kqueue) connection processing method is used, because it reports the number of new connections waiting to be accepted.
- name: nginx for Windows
  id: windows
  summary: Version of nginx for Windows uses the native Win32 API (not the Cygwin emulation layer)
  description: "# nginx for Windows\n\n- [Known issues](#known_issues)\n- [Possible future enhancements](#possible_future_enhancements)\n\nVersion of nginx for Windows uses the native Win32 API (not the Cygwin emulation layer). Only the `select()` and `poll()` (1.15.9) connection processing methods are currently used, so high performance and scalability should not be expected. Due to this and some other known issues version of nginx for Windows is considered to be a *beta* version. At this time, it provides almost the same functionality as a UNIX version of nginx except for XSLT filter, image filter, GeoIP module, and embedded Perl language.\n\nTo install nginx/Windows, [download](https://nginx.org/en/download.html) the latest mainline version distribution (1.27.1), since the mainline branch of nginx contains all known fixes. Then unpack the distribution, go to the nginx-1.27.1 directory, and run `nginx`. Here is an example for the drive C: root directory:\n\n``` nginx\ncd c:\\\nunzip nginx-1.27.1.zip\ncd nginx-1.27.1\nstart nginx\n```\n\nRun the `tasklist` command-line utility to see nginx processes:\n\n``` nginx\nC:\\nginx-1.27.1>tasklist /fi \"imagename eq nginx.exe\"\n\nImage Name           PID Session Name     Session#    Mem Usage\n=============== ======== ============== ========== ============\nnginx.exe            652 Console                 0      2 780 K\nnginx.exe           1332 Console                 0      3 112 K\n```\n\nOne of the processes is the master process and another is the worker process. If nginx does not start, look for the reason in the error log file `logs\\error.log`. If the log file has not been created, the reason for this should be reported in the Windows Event Log. If an error page is displayed instead of the expected page, also look for the reason in the `logs\\error.log` file.\n\nnginx/Windows uses the directory where it has been run as the prefix for relative paths in the configuration. In the example above, the prefix is `C:\\nginx-1.27.1\\`. Paths in a configuration file must be specified in UNIX-style using forward slashes:\n\n``` nginx\naccess_log   logs/site.log;\nroot         C:/web/html;\n```\n\nnginx/Windows runs as a standard console application (not a service), and it can be managed using the following commands:\n\n|                 |                                                                                                                           |\n|-----------------|---------------------------------------------------------------------------------------------------------------------------|\n| nginx -s stop   | fast shutdown                                                                                                             |\n| nginx -s quit   | graceful shutdown                                                                                                         |\n| nginx -s reload | changing configuration, starting new worker processes with a new configuration, graceful shutdown of old worker processes |\n| nginx -s reopen | re-opening log files                                                                                                      |\n\n#### Known issues\n\n- Although several workers can be started, only one of them actually does any work.\n- The UDP proxy functionality is not supported.\n\n#### Possible future enhancements\n\n- Running as a service.\n- Using the I/O completion ports as a connection processing method.\n- Using multiple worker threads inside a single worker process.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/windows.html](https://nginx.org/en/docs/windows.html)"
- name: nginx objects (Reference)
  id: njs/reference#http_stream
  summary: The HTTP request object is available only in the ngx_http_js_module module
  belongs_to: Reference
  description: |-
    #### nginx objects

    #### HTTP Request

    |                                                |
    |------------------------------------------------|
    | [`r.args{}`](#r_args)                          |
    | [`r.done()`](#r_done)                          |
    | [`r.error()`](#r_error)                        |
    | [`r.finish()`](#r_finish)                      |
    | [`r.headersIn{}`](#r_headers_in)               |
    | [`r.headersOut{}`](#r_headers_out)             |
    | [`r.httpVersion`](#r_http_version)             |
    | [`r.internal`](#r_internal)                    |
    | [`r.internalRedirect()`](#r_internal_redirect) |
    | [`r.log()`](#r_log)                            |
    | [`r.method`](#r_method)                        |
    | [`r.parent`](#r_parent)                        |
    | [`r.remoteAddress`](#r_remote_address)         |
    | [`r.requestBody`](#r_request_body)             |
    | [`r.requestBuffer`](#r_request_buffer)         |
    | [`r.requestText`](#r_request_text)             |
    | [`r.rawHeadersIn[]`](#r_raw_headers_in)        |
    | [`r.rawHeadersOut[]`](#r_raw_headers_out)      |
    | [`r.responseBody`](#r_response_body)           |
    | [`r.responseBuffer`](#r_response_buffer)       |
    | [`r.responseText`](#r_response_text)           |
    | [`r.return()`](#r_return)                      |
    | [`r.send()`](#r_send)                          |
    | [`r.sendBuffer()`](#r_sendbuffer)              |
    | [`r.sendHeader()`](#r_send_header)             |
    | [`r.setReturnValue()`](#r_set_return_value)    |
    | [`r.status`](#r_status)                        |
    | [`r.subrequest()`](#r_subrequest)              |
    | [`r.uri`](#r_uri)                              |
    | [`r.rawVariables{}`](#r_raw_variables)         |
    | [`r.variables{}`](#r_variables)                |
    | [`r.warn()`](#r_warn)                          |

    The HTTP request object is available only in the [ngx_http_js_module](../http/ngx_http_js_module) module. Before [0.8.5](changes#njs0.8.5), all string properties of the object were [byte strings](#string).

    `r.args{}`

    request arguments object, read-only.

    The query string is returned as an object. Since [0.7.6](changes#njs0.7.6), duplicate keys are returned as an array, keys are case-sensitive, both keys and values are percent-decoded.

    For example, the query string

    ``` nginx
    'a=1&b=%32&A=3&b=4&B=two%20words'
    ```

    is converted to `r.args` as:

    ``` nginx
    {a: "1", b: ["2", "4"], A: "3", B: "two words"}
    ```

    More advanced parsing scenarios can be achieved with the [Query String](#querystring) module and with the [`$args`](../http/ngx_http_core_module#var_args) variable, for example:

    ``` nginx
    import qs from 'querystring';

    function args(r) {
        return qs.parse(r.variables.args);
    }
    ```

    The argument object is evaluated at the first access to `r.args`. If only a single argument is needed, for example `foo`, [nginx variables](https://nginx.org/en/docs/varindex.html) can be used:

    ``` nginx
    r.variables.arg_foo
    ```

    Here, [nginx variables object](#r_variables) returns the first value for a given key, case-insensitive, without percent-decoding.

    To convert `r.args` back to a string, the Query String [`stringify`](#querystring_stringify) method can be used.

    `r.done()`

    after calling this function, next data chunks will be passed to client without calling [js_body_filter](../http/ngx_http_js_module#js_body_filter) ([0.5.2](changes#njs0.5.2)). May be called only from the [js_body_filter](../http/ngx_http_js_module#js_body_filter) function

    `r.error(`*`string`*`)`

    writes a `string` to the error log on the `error` level of logging

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    `r.finish()`

    finishes sending a response to the client

    `r.headersIn{}`

    incoming headers object, read-only.

    The `Foo` request header can be accessed with the syntax: `headersIn.foo` or `headersIn['Foo']`.

    The “Authorization”, “Content-Length”, “Content-Range”, “Content-Type”, “ETag”, “Expect”, “From”, “Host”, “If-Match”, “If-Modified-Since”, “If-None-Match”, “If-Range”, “If-Unmodified-Since”, “Max-Forwards”, “Proxy-Authorization”, “Referer”, “Transfer-Encoding”, and “User-Agent” request headers can have only one field value ([0.4.1](changes#njs0.4.1)). Duplicate field values in “Cookie” headers are separated by semicolon (`;`). Duplicate field values in all other request headers are separated by commas.

    `r.headersOut{}`

    outgoing headers object for the main request, writable.

    If `r.headersOut{}` is the response object of a [subrequest](#r_subrequest), it represents response headers. In this case, field values in “Accept-Ranges”, “Connection”, “Content-Disposition”, “Content-Encoding”, “Content-Length”, “Content-Range”, “Date”, “Keep-Alive”, “Server”, “Transfer-Encoding”, “X-Accel-\*” response headers may be omitted.

    The “Foo” response header can be accessed with the syntax: `headersOut.foo` or `headersOut['Foo']`.

    Outgoing headers should be set before a response header is sent to a client, otherwise header update will be ignored. This means that `r.headersOut{}` is effectively writable in:

    - the [js_content](../http/ngx_http_js_module#js_content) handler before [`r.sendHeader()`](#r_send_header) or [`r.return()`](#r_return) are called
    - the [js_header_filter](../http/ngx_http_js_module#js_header_filter) handler

    Field values of multi-value response headers ([0.4.0](changes#njs0.4.0)) can be set with the syntax:

    ``` nginx
    r.headersOut['Foo'] = ['a', 'b']
    ```

    where the output will be:

    ``` nginx
    Foo: a
    Foo: b
    ```

    All previous field values of the “Foo” response header will be deleted.

    For standard response headers that accept only a single field value such as “Content-Type”, only the last element of the array will take effect. Field values of the “Set-Cookie” response header are always returned as an array. Duplicate field values in “Age”, “Content-Encoding”, “Content-Length”, “Content-Type”, “ETag”, “Expires”, “Last-Modified”, “Location”, “Retry-After” response headers are ignored. Duplicate field values in all other response headers are separated by commas.

    `r.httpVersion`

    HTTP version, read-only

    `r.internal`

    boolean value, true for [internal](../http/ngx_http_core_module#internal) locations

    `r.internalRedirect(`*`uri`*`)`

    performs an [internal redirect](../dev/development_guide#http_request_redirection) to the specified `uri`. If the uri starts with the “`@`” prefix, it is considered a named location. In a new location, all request processing is repeated starting from [NGX_HTTP_SERVER_REWRITE_PHASE](../dev/development_guide#http_phases) for ordinary locations and from [NGX_HTTP_REWRITE_PHASE](../dev/development_guide#http_phases) for named locations. As a result, a redirect to a named location does not check [client_max_body_size](../http/ngx_http_core_module#client_max_body_size) limit. See [dev guide](../dev/development_guide#http_request_redirection) for more details. Redirected requests become internal and can access the [internal](../http/ngx_http_core_module#internal) locations. The actual redirect happens after the handler execution is completed.

    After redirect, a new njs VM is started in the target location, the VM in the original location is stopped. Values of [nginx variables](https://nginx.org/en/docs/varindex.html) are kept and can be used to pass information to the target location. Since [0.5.3](changes#njs0.5.3), the variable declared with the `js_var` directive for [http](../http/ngx_http_js_module#js_var) or [stream](../stream/ngx_stream_js_module#js_var) can be used.

    Since [0.7.4](changes#njs0.7.4), the method accepts escaped URIs.

    `r.log(`*`string`*`)`

    writes a `string` to the error log on the `info` level of logging

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    `r.method`

    HTTP method, read-only

    `r.parent`

    references the parent request object

    `r.remoteAddress`

    client address, read-only

    `r.requestBody`

    the property was made obsolete in [0.5.0](changes#njs0.5.0) and was removed in [0.8.0](changes#njs0.8.0). The [`r.requestBuffer`](#r_request_buffer) or [`r.requestText`](#r_request_text) property should be used instead.

    `r.requestBuffer`

    client request body if it has not been written to a temporary file (since [0.5.0](changes#njs0.5.0)). To ensure that the client request body is in memory, its size should be limited by [client_max_body_size](../http/ngx_http_core_module#client_max_body_size), and a sufficient buffer size should be set using [client_body_buffer_size](../http/ngx_http_core_module#client_body_buffer_size). The property is available only in the [js_content](../http/ngx_http_js_module#js_content) directive.

    `r.requestText`

    the same as [`r.requestBuffer`](#r_request_buffer), but returns a `string`. Note that it may convert bytes invalid in UTF-8 encoding into the replacement character.

    `r.rawHeadersIn[]`

    returns an array of key-value pairs exactly as they were received from the client ([0.4.1](changes#njs0.4.1)).

    For example, with the following request headers:

    ``` nginx
    Host: localhost
    Foo:  bar
    foo:  bar2
    ```

    the output of `r.rawHeadersIn` will be:

    ``` nginx
    [
        ['Host', 'localhost'],
        ['Foo', 'bar'],
        ['foo', 'bar2']
    ]
    ```

    All `foo` headers can be collected with the syntax:

    ``` nginx
    r.rawHeadersIn.filter(v=>v[0].toLowerCase() == 'foo').map(v=>v[1])
    ```

    the output will be:

    ``` nginx
    ['bar', 'bar2']
    ```

    Header field names are not converted to lower case, duplicate field values are not merged.

    `r.rawHeadersOut[]`

    returns an array of key-value pairs of response headers ([0.4.1](changes#njs0.4.1)). Header field names are not converted to lower case, duplicate field values are not merged.

    `r.responseBody`

    the property was made obsolete in [0.5.0](changes#njs0.5.0) and was removed in [0.8.0](changes#njs0.8.0). The [`r.responseBuffer`](#r_response_buffer) or the [`r.responseText`](#r_response_text) property should be used instead.

    `r.responseBuffer`

    holds the [subrequest](#r_subrequest) response body, read-only (since [0.5.0](changes#njs0.5.0)). The size of `r.responseBuffer` is limited by the [subrequest_output_buffer_size](../http/ngx_http_core_module#subrequest_output_buffer_size) directive.

    `r.responseText`

    the same as [`r.responseBuffer`](#r_response_buffer) but returns a string (since [0.5.0](changes#njs0.5.0)). Note that it may convert bytes invalid in UTF-8 encoding into the replacement character.

    `r.return(status[, string | Buffer])`

    sends the entire response with the specified `status` to the client. The response can be a string or Buffer ([0.5.0](changes#njs0.5.0)).

    It is possible to specify either a redirect URL (for codes 301, 302, 303, 307, and 308) or the response body text (for other codes) as the second argument

    `r.send(string | Buffer)`

    sends a part of the response body to the client. The data sent can be a string or Buffer ([0.5.0](changes#njs0.5.0))

    `r.sendBuffer(`*`data`*`[, `*`options`*`])`

    adds data to the chain of data chunks to be forwarded to the next body filter ([0.5.2](changes#njs0.5.2)). The actual forwarding happens later, when the all the data chunks of the current chain are processed.

    The data can be a string or Buffer. The `options` is an object used to override nginx buffer flags derived from an incoming data chunk buffer. The flags can be overridden with the following flags:

    `last`

    boolean, true if the buffer is the last buffer

    `flush`

    boolean, true if the buffer should have the `flush` flag

    The method may be called only from the [js_body_filter](../http/ngx_http_js_module#js_body_filter) function.

    `r.sendHeader()`

    sends the HTTP headers to the client

    `r.setReturnValue(`*`value`*`)`

    sets the return value of the [js_set](../http/ngx_http_js_module#js_set) handler ([0.7.0](changes#njs0.7.0)). Unlike an ordinary return statement, this method should be used when the handler is JS async function. For example:

    ``` nginx
    async function js_set(r) {
        const digest = await crypto.subtle.digest('SHA-256', r.headersIn.host);
        r.setReturnValue(digest);
    }
    ```

    `r.status`

    status, writable

    `r.subrequest(`*`uri`*`[, `*`options`*`[, `*`callback`*`]])`

    creates a subrequest with the given `uri` and `options`, and installs an optional completion `callback`.

    A [subrequest](../dev/development_guide#http_subrequests) shares its input headers with the client request. To send headers different from original headers to a proxied server, the [proxy_set_header](../http/ngx_http_proxy_module#proxy_set_header) directive can be used. To send a completely new set of headers to a proxied server, the [proxy_pass_request_headers](../http/ngx_http_proxy_module#proxy_pass_request_headers) directive can be used.

    If `options` is a string, then it holds the subrequest arguments string. Otherwise, `options` is expected to be an object with the following keys:

    `args`

    arguments string, by default an empty string is used

    `body`

    request body, by default the request body of the parent request object is used

    `method`

    HTTP method, by default the `GET` method is used

    `detached`

    boolean flag ([0.3.9](changes#njs0.3.9)), if `true`, the created subrequest is a detached subrequest. Responses to detached subrequests are ignored. Unlike ordinary subrequests, a detached subrequest can be created inside a variable handler. The `detached` flag and callback argument are mutually exclusive.

    The completion `callback` receives a [subrequest response object](#http) with methods and properties identical to the parent request object.

    Since [0.3.8](changes#njs0.3.8), if a `callback` is not provided, the `Promise` object that resolves to the [subrequest response object](#http) is returned.

    For example, to view all response headers in the subrequest:

    ``` nginx
    async function handler(r) {
        const reply = await r.subrequest('/path');

        for (const h in reply.headersOut) {
            r.log(`${h}: ${reply.headersOut[h]}`);
        }

        r.return(200);
    }
    ```

    `r.uri`

    current [URI](../http/ngx_http_core_module#var_uri) in request, [normalized](../http/ngx_http_core_module#location), read-only

    `r.rawVariables{}`

    nginx [variables](#r_variables) as Buffers, writable (since [0.5.0](changes#njs0.5.0))

    `r.variables{}`

    [nginx variables](https://nginx.org/en/docs/varindex.html) object, writable (since [0.2.8](changes#njs0.2.8)).

    For example, to get the `$foo` variable, one of the following syntax can be used:

    ``` nginx
    r.variables['foo']
    r.variables.foo
    ```

    nginx treats variables referenced in `nginx.conf` and unreferenced variables differently. When a variable is referenced, it may be cacheable, but when it is unreferenced it is always uncacheable. For example, when the [$request_id](../http/ngx_http_core_module#var_request_id) variable is only accessed from njs, it has a new value every time it is evaluated. But, when the [$request_id](../http/ngx_http_core_module#var_request_id) is referenced, for example:

    ``` nginx
    proxy_set_header X-Request-Id $request_id;
    ```

    the `r.variables.request_id` returns the same value every time.

    A variable is writable if:

    - it was created using the `js_var` directive for [http](../http/ngx_http_js_module#js_var) or [stream](../stream/ngx_stream_js_module#js_var) (since [0.5.3](changes#njs0.5.3))
    - it is referenced in nginx configuration file

    Even so, some embedded variables still cannot be assigned a value (for example, [`$http_`](../http/ngx_http_core_module#var_http_)).

    `r.warn(`*`string`*`)`

    writes a `string` to the error log on the `warning` level of logging

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    #### Stream Session

    |                                             |
    |---------------------------------------------|
    | [`s.allow()`](#s_allow)                     |
    | [`s.decline()`](#s_decline)                 |
    | [`s.deny()`](#s_deny)                       |
    | [`s.done()`](#s_done)                       |
    | [`s.error()`](#s_error)                     |
    | [`s.log()`](#s_log)                         |
    | [`s.off()`](#s_off)                         |
    | [`s.on()`](#s_on)                           |
    | [`s.remoteAddress`](#s_remote_address)      |
    | [`s.rawVariables{}`](#s_raw_variables)      |
    | [`s.send()`](#s_send)                       |
    | [`s.sendDownstream()`](#s_send_downstream)  |
    | [`s.sendUpstream()`](#s_send_upstream)      |
    | [`s.status`](#s_status)                     |
    | [`s.setReturnValue()`](#s_set_return_value) |
    | [`s.variables{}`](#s_variables)             |
    | [`s.warn()`](#s_warn)                       |

    The stream session object is available only in the [ngx_stream_js_module](../stream/ngx_stream_js_module) module. Before [0.8.5](changes#njs0.8.5), all string properties of the object were [byte strings](#string).

    `s.allow()`

    an alias to [`s.done(0)`](#s_done) ([0.2.4](changes#njs0.2.4))

    `s.decline()`

    an alias to [`s.done(-5)`](#s_done) ([0.2.4](changes#njs0.2.4))

    `s.deny()`

    an alias to [`s.done(403)`](#s_done) ([0.2.4](changes#njs0.2.4))

    `s.done([`*`code`*`]`)

    sets an exit `code` for the current [phase](../stream/stream_processing) handler to a code value, by default `0`. The actual finalization happens when the js handler is completed and all pending events, for example, from [`ngx.fetch()`](#ngx_fetch) or [`setTimeout()`](#settimeout), are processed ([0.2.4](changes#njs0.2.4)).

    Possible code values:

    - `0` — successful finalization, passing control to the next phase
    - `-5` — undecided, passing control to the next handler of the current phase (if any)
    - `403` — access is forbidden

    May be called only from a phase handler function: [`js_access`](../stream/ngx_stream_js_module#js_access) or [`js_preread`](../stream/ngx_stream_js_module#js_preread).

    `s.error(`*`string`*`)`

    writes a sent `string` to the error log on the `error` level of logging

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    `s.log(`*`string`*`)`

    writes a sent *`string`* to the error log on the `info` level of logging

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    `s.off(`*`eventName`*`)`

    unregisters the callback set by the [s.on()](#s_on) method ([0.2.4](changes#njs0.2.4))

    `s.on(`*`event`*`, `*`callback`*`)`

    registers a `callback` for the specified `event` ([0.2.4](changes#njs0.2.4)).

    An `event` may be one of the following strings:

    `upload`

    new data (string) from a client

    `download`

    new data (string) to a client

    `upstream`

    new data (Buffer) from a client (since [0.5.0](changes#njs0.5.0))

    `downstream`

    new data (Buffer) to a client (since [0.5.0](changes#njs0.5.0))

    The completion callback has the following prototype: `callback(data, flags)`, where `data` is string or Buffer (depending on the event type) `flags` is an object with the following properties:

    `last`

    a boolean value, true if data is a last buffer.

    `s.remoteAddress`

    client address, read-only

    `s.rawVariables`

    nginx [variables](#s_variables) as Buffers, writable (since [0.5.0](changes#njs0.5.0))

    `s.send(`*`data`*`[, `*`options`*`])`

    adds data to the chain of data chunks that will be forwarded in the forward direction: in download callback to a client; in upload to an upstream server ([0.2.4](changes#njs0.2.4)). The actual forwarding happens later, when the all the data chunks of the current chain are processed.

    The data can be a string or Buffer ([0.5.0](changes#njs0.5.0)). The `options` is an object used to override nginx buffer flags derived from an incoming data chunk buffer. The flags can be overridden with the following flags:

    `last`

    boolean, true if the buffer is the last buffer

    `flush`

    boolean, true if the buffer should have the `flush` flag

    The method can be called multiple times per callback invocation.

    `s.sendDownstream()`

    is identical to [s.send()](#s_send), except for it always sends data to a client (since [0.7.8](changes#njs0.7.8)).

    `s.sendUpstream()`

    is identical to [s.send()](#s_send), except for it always sends data from a client (since [0.7.8](changes#njs0.7.8)).

    `s.status`

    session status code, an alias to the [`$status`](../stream/ngx_stream_core_module#var_status) variable, read only (since [0.5.2](changes#njs0.5.2))

    `s.setReturnValue(`*`value`*`)`

    sets the return value of the [js_set](../stream/ngx_stream_js_module#js_set) handler ([0.7.0](changes#njs0.7.0)). Unlike an ordinary return statement, this method should be used when the handler is JS async function. For example:

    ``` nginx
    async function js_set(r) {
        const digest = await crypto.subtle.digest('SHA-256', r.headersIn.host);
        r.setReturnValue(digest);
    }
    ```

    `s.variables{}`

    [nginx variables](https://nginx.org/en/docs/varindex.html) object, writable (since [0.2.8](changes#njs0.2.8)). A variable can be writable only if it is referenced in nginx configuration file. Even so, some embedded variables still cannot be assigned a value.

    `s.warn(`*`string`*`)`

    writes a sent `string` to the error log on the `warning` level of logging

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    #### Periodic Session

    |                                                                     |
    |---------------------------------------------------------------------|
    | [`PeriodicSession.rawVariables{}`](#periodic_session_raw_variables) |
    | [`PeriodicSession.variables{}`](#periodic_session_variables)        |

    The `Periodic Session` object is provided as the first argument for the `js_periodic` handler for [http](../http/ngx_http_js_module#js_periodic) and [stream](../stream/ngx_stream_js_module#js_periodic) (since [0.8.1](changes#njs0.8.1)).

    `PeriodicSession.rawVariables{}`

    nginx [variables](#periodic_session_variables) as Buffers, writable.

    `PeriodicSession.variables{}`

    [nginx variables](https://nginx.org/en/docs/varindex.html) object, writable.

    #### Headers

    |                                         |
    |-----------------------------------------|
    | [`Headers()`](#headers_constructor)     |
    | [`Headers.append()`](#headers_append)   |
    | [`Headers.delete()`](#headers_delete)   |
    | [`Headers.get()`](#headers_get)         |
    | [`Headers.getAll()`](#headers_getall)   |
    | [`Headers.forEach()`](#headers_foreach) |
    | [`Headers.has()`](#headers_has)         |
    | [`Headers.set()`](#headers_set)         |

    The `Headers` interface of the [`Fetch API`](#ngx_fetch) is available since [0.5.1](changes#njs0.5.1).

    A new `Headers` object can be created using the [`Headers()`](#headers_constructor) constructor: (since [0.7.10](changes#njs0.7.10)):

    `Headers([`*`init`*`])`

    `init`

    An object containing HTTP headers for prepopulating the `Headers` object, can be a `string`, an `array` of name-value pairs, or an existing `Headers` object.

    A new `Headers` object can be created with the following properties and methods:

    `append()`

    Appends a new value into an existing header in the `Headers` object, or adds the header if it does not already exist (since [0.7.10](changes#njs0.7.10)).

    `delete()`

    Deletes a header from the `Headers` object (since [0.7.10](changes#njs0.7.10)).

    `get()`

    Returns a string containing the values of all headers with the specified name separated by a comma and a space.

    `getAll(`*`name`*`)`

    Returns an array containing the values of all headers with the specified name.

    `forEach()`

    Executes a provided function once for each key/value pair in the `Headers` object (since [0.7.10](changes#njs0.7.10)).

    `has()`

    Returns a boolean value indicating whether a header with the specified name exists.

    `set()`

    Sets a new value for an existing header inside the `Headers` object, or adds the header if it does not already exist (since [0.7.10](changes#njs0.7.10)).

    #### Request

    |                                                 |
    |-------------------------------------------------|
    | [`Request()`](#request_constructor)             |
    | [`Request.arrayBuffer()`](#request_arraybuffer) |
    | [`Request.bodyUsed`](#request_bodyused)         |
    | [`Request.cache`](#request_cache)               |
    | [`Request.credentials`](#request_credentials)   |
    | [`Request.headers`](#request_headers)           |
    | [`Request.json()`](#request_json)               |
    | [`Request.method`](#request_method)             |
    | [`Request.mode`](#request_mode)                 |
    | [`Request.text()`](#request_text)               |
    | [`Request.url`](#request_url)                   |

    The `Request` interface of the [`Fetch API`](#ngx_fetch) is available since [0.7.10](changes#njs0.7.10).

    A new `Request` object can be created using the [`Request()`](#request_constructor) constructor:

    `Request[`*`resource`*`[, `*`options`*`]])`

    Creates a `Request` object to fetch that can be passed later to [`ngx.fetch()`](#ngx_fetch). The `resource` can be a URL or an existing `Request` object. The `options` is an optional argument that is expected to be an object with the following keys:

    `body`

    The request body, by default is empty.

    `headers`

    The response headers object — the object containing HTTP headers for prepopulating the [`Headers`](#headers) object, can be a `string`, an `array` of name-value pairs, or an existing [`Headers`](#headers) object.

    `method`

    The HTTP method, by default the GET method is used.

    A new `Request` object can be created with the following properties and methods:

    `arrayBuffer()`

    Returns a `Promise` that resolves with an `ArrayBuffer`.

    `bodyUsed`

    A boolean value, `true` if the body was used in the request.

    `cache`

    Contains the cache mode of the request.

    `credentials`

    Contains the credentials of the request, by default is `same-origin`.

    `headers`

    The [`Headers`](#headers) read-only object associated with the [`Request`](#request).

    `json()`

    Returns a `Promise` that resolves with the result of parsing the request body as JSON.

    `method`

    Contains the request method.

    `mode`

    Contains the mode of the request.

    `text()`

    Returns a `Promise` that resolves with a string representation of the request body.

    `url`

    Contains the URL of the request.

    #### Response

    |                                                   |
    |---------------------------------------------------|
    | [`Response()`](#response_constructor)             |
    | [`Response.arrayBuffer()`](#response_arraybuffer) |
    | [`Response.bodyUsed`](#response_bodyused)         |
    | [`Response.headers`](#response_headers)           |
    | [`Response.json()`](#response_json)               |
    | [`Response.ok`](#response_ok)                     |
    | [`Response.redirected`](#response_redirect)       |
    | [`Response.status`](#response_status)             |
    | [`Response.statusText`](#response_statustext)     |
    | [`Response.text()`](#response_text)               |
    | [`Response.type`](#response_type)                 |
    | [`Response.url`](#response_url)                   |

    The `Response` interface is available since [0.5.1](changes#njs0.5.1).

    A new `Response` object can be created using the [`Response()`](#response_constructor) constructor (since [0.7.10](changes#njs0.7.10)):

    `Response[`*`body`*`[, `*`options`*`]])`

    Creates a `Response` object. The `body` is an optional argument, can be a `string` or a `buffer`, by default is `null`. The `options` is an optional argument that is expected to be an object with the following keys:

    `headers`

    The response headers object — the object containing HTTP headers for prepopulating the [`Headers`](#headers) object, can be a `string`, an `array` of name-value pairs, or an existing [`Headers`](#headers) object.

    `status`

    The status code of the response.

    `statusText`

    The status message corresponding to the status code.

    A new `Response()` object can be created with the following properties and methods:

    `arrayBuffer()`

    Takes a `Response` stream and reads it to completion. Returns a `Promise` that resolves with an `ArrayBuffer`.

    `bodyUsed`

    A boolean value, `true` if the body was read.

    `headers`

    The [`Headers`](#headers) read-only object associated with the [`Response`](#response).

    `json()`

    Takes a `Response` stream and reads it to completion. Returns a `Promise` that resolves with the result of parsing the body text as JSON.

    `ok`

    A boolean value, `true` if the response was successful (status codes between 200–299).

    `redirected`

    A boolean value, `true` if the response is the result of a redirect.

    `status`

    The status code of the response.

    `statusText`

    The status message corresponding to the status code.

    `text()`

    Takes a `Response` stream and reads it to completion. Returns a `Promise` that resolves with a string.

    `type`

    The type of the response.

    `url`

    The URL of the response.
- name: ngx (Reference)
  id: njs/reference#ngx
  summary: The ngx global object is available since 0.5.0
  belongs_to: Reference
  description: |-
    #### ngx

    |                                             |
    |---------------------------------------------|
    | [`ngx.build`](#ngx_build)                   |
    | [`ngx.conf_file_path`](#ngx_conf_file_path) |
    | [`ngx.conf_prefix`](#ngx_conf_prefix)       |
    | [`ngx.error_log_path`](#ngx_error_log_path) |
    | [`ngx.fetch()`](#ngx_fetch)                 |
    | [`ngx.log()`](#ngx_log)                     |
    | [`ngx.prefix`](#ngx_prefix)                 |
    | [`ngx.version`](#ngx_version)               |
    | [`ngx.version_number`](#ngx_version_number) |
    | [`ngx.worker_id`](#ngx_worker_id)           |

    The `ngx` global object is available since [0.5.0](changes#njs0.5.0).

    `ngx.build`

    a string containing an optional nginx build name, corresponds to the [`--build=name`](../configure#build) argument of the [configure](../configure) script, by default is `""` ([0.8.0](changes#njs0.8.0))

    `ngx.conf_file_path`

    a string containing the file path to current nginx configuration file ([0.8.0](changes#njs0.8.0))

    `ngx.conf_prefix`

    a string containing the file path to [nginx configuration prefix](../configure#conf_path) — the directory where nginx is currently looking for configuration ([0.7.8](changes#njs0.7.8))

    `ngx.error_log_path`

    a string containing the file path to the current [error log](../ngx_core_module#error_log) file ([0.8.0](changes#njs0.8.0))

    `ngx.fetch(`*`resource`*`, [`*`options`*`])`

    Makes a request to fetch a *`resource`* ([0.5.1](changes#njs0.5.1)), which can be an URL or the [`Request`](#request) object ([0.7.10](changes#njs0.7.10)). Returns a `Promise` that resolves with the [`Response`](#response) object. Since [0.7.0](changes#njs0.7.0), the `https://` scheme is supported, redirects are not handled.

    If the URL in the *`resource`* is specified as a domain name, it is determined using a [resolver](../http/ngx_http_core_module#resolver). If the `https://` scheme is specified, the [js_fetch_trusted_certificate](../http/ngx_http_js_module#js_fetch_trusted_certificate) directive should be configured for the authentication of the *`resource`*'s HTTPS server.

    The `options` parameter is expected to be an object with the following keys:

    `body`

    request body, by default is empty

    `buffer_size`

    the buffer size for reading the response, by default is `4096`

    `headers`

    request [headers](#headers) object

    `max_response_body_size`

    the maximum size of the response body in bytes, by default is `32768`

    `method`

    HTTP method, by default the `GET` method is used

    `verify`

    enables or disables verification of the HTTPS server certificate, by default is `true` ([0.7.0](changes#njs0.7.0))

    Example:

    ``` nginx
    let reply = await ngx.fetch('http://nginx.org/');
    let body = await reply.text();

    r.return(200, body);
    ```

    `ngx.log`(*`level`*, *`message`*)

    writes a message to the error log with the specified level of logging. The *`level`* parameter specifies one of the log levels, the *`message`* parameter can be a string or Buffer. The following log levels can be specified: `ngx.INFO`, `ngx.WARN`, and `ngx.ERR`.

    As nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.

    `ngx.prefix`

    a string containing the file path to [nginx prefix](../configure#prefix) — a directory that keeps server files ([0.8.0](changes#njs0.8.0))

    `ngx.version`

    a string containing nginx version, for example: `1.25.0` ([0.8.0](changes#njs0.8.0))

    `ngx.version_number`

    a number containing nginx version, for example: `1025000` ([0.8.0](changes#njs0.8.0))

    `ngx.worker_id`

    a number that corresponds to nginx internal worker id, the value is between `0` and the value specified in the [worker_processes](../ngx_core_module#worker_processes) directive ([0.8.0](changes#njs0.8.0))
- name: ngx.shared (Reference)
  id: njs/reference#ngx_shared
  summary: The ngx.shared global object is available since 0.8.0
  belongs_to: Reference
  description: |-
    #### ngx.shared

    The `ngx.shared` global object is available since [0.8.0](changes#njs0.8.0).

    #### SharedDict

    |                                                        |
    |--------------------------------------------------------|
    | [`ngx.shared.SharedDict.add()`](#dict_add)             |
    | [`ngx.shared.SharedDict.capacity`](#dict_capacity)     |
    | [`ngx.shared.SharedDict.clear()`](#dict_clear)         |
    | [`ngx.shared.SharedDict.delete()`](#dict_delete)       |
    | [`ngx.shared.SharedDict.freeSpace()`](#dict_freespace) |
    | [`ngx.shared.SharedDict.get()`](#dict_get)             |
    | [`ngx.shared.SharedDict.has()`](#dict_has)             |
    | [`ngx.shared.SharedDict.incr()`](#dict_incr)           |
    | [`ngx.shared.SharedDict.items()`](#dict_items)         |
    | [`ngx.shared.SharedDict.keys()`](#dict_keys)           |
    | [`ngx.shared.SharedDict.name`](#dict_name)             |
    | [`ngx.shared.SharedDict.pop()`](#dict_pop)             |
    | [`ngx.shared.SharedDict.replace()`](#dict_replace)     |
    | [`ngx.shared.SharedDict.set()`](#dict_set)             |
    | [`ngx.shared.SharedDict.size()`](#dict_size)           |
    | [`ngx.shared.SharedDict.type`](#dict_type)             |

    The shared dictionary object is available since [0.8.0](changes#njs0.8.0). The shared dictionary name, type, and size are set with the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).

    A `SharedDict()` object has the following properties and methods:

    `ngx.shared.SharedDict.add(`*`key`*`, `*`value`*` [,`*`timeout`*`])`

    Sets the `value` for the specified `key` in the dictionary only if the key does not exist yet. The `key` is a string representing the key of the item to add, the `value` is the value of the item to add.

    The optional `timeout` argument is specified in milliseconds and overrides the `timeout` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) (since [0.8.5](changes#njs0.8.5)). It can be useful when some keys are expected to have unique timeouts.

    Returns `true` if the value has been successfully added to the `SharedDict` dictionary, `false` if the key already exists in the dictionary. Throws `SharedMemoryError` if there is not enough free space in the `SharedDict` dictionary. Throws `TypeError` if the `value` is of a different type than expected by this dictionary.

    `ngx.shared.SharedDict.capacity`

    Returns the capacity of the `SharedDict` dictionary, corresponds to the `size` parameter of `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).

    `ngx.shared.SharedDict.clear()`

    Removes all items from the `SharedDict` dictionary.

    `ngx.shared.SharedDict.delete(`*`key`*`)`

    Removes the item associated with the specified key from the `SharedDict` dictionary, `true` if the item in the dictionary existed and was removed, `false` otherwise.

    `ngx.shared.SharedDict.freeSpace()`

    Returns the free page size in bytes. If the size is zero, the `SharedDict` dictionary will still accept new values if there is space in the occupied pages.

    `ngx.shared.SharedDict.get(`*`key`*`)`

    Retrieves the item by its `key`, returns the value associated with the `key` or `undefined` if there is none.

    `ngx.shared.SharedDict.has(`*`key`*`)`

    Searches for an item by its `key`, returns `true` if such item exists or `false` otherwise.

    `ngx.shared.SharedDict.incr(`*`key`*`,`*`delta`*`[[,`*`init`*`], `*`timeout`*`]))`

    Increments the integer value associated with the `key` by `delta`. The `key` is a string, the `delta` is the number to increment or decrement the value by. If the key does not exist, the item will be initialized to an optional `init` argument, by default is `0`.

    The optional `timeout` argument is specified in milliseconds and overrides the `timeout` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) (since [0.8.5](changes#njs0.8.5)). It can be useful when some keys are expected to have unique timeouts.

    Returns the new value. Throws `SharedMemoryError` if there is not enough free space in the `SharedDict` dictionary. Throws `TypeError` if this dictionary does not expect numbers.

    This method can be used only if the dictionary type was declared with `type=number` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).

    `ngx.shared.SharedDict.items([`*`maxCount`*`])`

    Returns an array of the `SharedDict` dictionary key-value items (since [0.8.1](changes#njs0.8.1)). The `maxCount` parameter sets maximum number of items to retrieve, by default is `1024`.

    `ngx.shared.SharedDict.keys([`*`maxCount`*`])`

    Returns an array of the `SharedDict` dictionary keys. The `maxCount` parameter sets maximum number of keys to retrieve, by default is `1024`.

    `ngx.shared.SharedDict.name`

    Returns the name of the `SharedDict` dictionary, corresponds to the `zone=` parameter of `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).

    `ngx.shared.SharedDict.pop(`*`key`*`)`

    Removes the item associated with the specified `key` from the `SharedDict` dictionary, returns the value associated with the `key` or `undefined` if there is none.

    `ngx.shared.SharedDict.replace(`*`key`*`, `*`value`*`)`

    Replaces the `value` for the specified `key` only if the key already exists, returns `true` if the value was successfully replaced, `false` if the key does not exist in the `SharedDict` dictionary. Throws `SharedMemoryError` if there is not enough free space in the `SharedDict` dictionary. Throws `TypeError` if the `value` is of a different type than expected by this dictionary.

    `ngx.shared.SharedDict.set(`*`key`*`, `*`value`*` [,`*`timeout`*`])`

    Sets the `value` for the specified `key`, returns this `SharedDict` dictionary (for method chaining).

    The optional `timeout` argument is specified in milliseconds and overrides the `timeout` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) (since [0.8.5](changes#njs0.8.5)). It can be useful when some keys are expected to have unique timeouts.

    `ngx.shared.SharedDict.size()`

    Returns the number of items for the `SharedDict` dictionary.

    `ngx.shared.SharedDict.type`

    Returns `string` or `number` that corresponds to the `SharedDict` dictionary type set by the `type=` parameter of `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).
- name: ngx_google_perftools_module
  id: ngx_google_perftools_module
  summary: The ngx_google_perftools_module module (0.6.29) enables profiling of nginx worker processes using Google Performance Tools
  description: "# Module ngx_google_perftools_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [google_perftools_profiles](#google_perftools_profiles)\n\nThe `ngx_google_perftools_module` module (0.6.29) enables profiling of nginx worker processes using [Google Performance Tools](https://github.com/gperftools/gperftools). The module is intended for nginx developers.\n\nThis module is not built by default, it should be enabled with the `--with-google_perftools_module` configuration parameter.\n\nThis module requires the [gperftools](https://github.com/gperftools/gperftools) library.\n\n#### Example Configuration\n\n``` nginx\ngoogle_perftools_profiles /path/to/profile;\n```\n\nProfiles will be stored as `/path/to/profile.<worker_pid>`.\n\n#### Directives\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`google_perftools_profiles`**` `*`file`*`;` |\n| Default: | —                                             |\n| Context: | `main`                                        |\n\nSets a file name that keeps profiling information of nginx worker process. The ID of the worker process is always a part of the file name and is appended to the end of the file name, after a dot.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_google_perftools_module.html](https://nginx.org/en/docs/ngx_google_perftools_module.html)"
- name: ngx_http_access_module
  id: http/ngx_http_access_module
  summary: The ngx_http_access_module module allows limiting access to certain client addresses
  description: "# Module ngx_http_access_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [allow](#allow)\n- [deny](#deny)\n\nThe `ngx_http_access_module` module allows limiting access to certain client addresses.\n\nAccess can also be limited by [password](ngx_http_auth_basic_module), by the [result of subrequest](ngx_http_auth_request_module), or by [JWT](ngx_http_auth_jwt_module). Simultaneous limitation of access by address and by password is controlled by the [satisfy](ngx_http_core_module#satisfy) directive.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    deny  192.168.1.1;\n    allow 192.168.1.0/24;\n    allow 10.1.1.0/16;\n    allow 2001:0db8::/32;\n    deny  all;\n}\n```\n\nThe rules are checked in sequence until the first match is found. In this example, access is allowed only for IPv4 networks `10.1.1.0/16` and `192.168.1.0/24` excluding the address `192.168.1.1`, and for IPv6 network `2001:0db8::/32`. In case of a lot of rules, the use of the [ngx_http_geo_module](ngx_http_geo_module) module variables is preferable.\n\n#### Directives\n\n|          |                                                         |\n|----------|---------------------------------------------------------|\n| Syntax:  | **`allow`**` `*`address`*` | `*`CIDR`*` | unix: | all;` |\n| Default: | —                                                       |\n| Context: | `http`, `server`, `location`, `limit_except`            |\n\nAllows access for the specified network or address. If the special value `unix:` is specified (1.5.1), allows access for all UNIX-domain sockets.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`deny`**` `*`address`*` | `*`CIDR`*` | unix: | all;` |\n| Default: | —                                                      |\n| Context: | `http`, `server`, `location`, `limit_except`           |\n\nDenies access for the specified network or address. If the special value `unix:` is specified (1.5.1), denies access for all UNIX-domain sockets.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_access_module.html](https://nginx.org/en/docs/http/ngx_http_access_module.html)"
- name: ngx_http_addition_module
  id: http/ngx_http_addition_module
  summary: The ngx_http_addition_module module is a filter that adds text before and after a response
  description: "# Module ngx_http_addition_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [add_before_body](#add_before_body)\n- [add_after_body](#add_after_body)\n- [addition_types](#addition_types)\n\nThe `ngx_http_addition_module` module is a filter that adds text before and after a response. This module is not built by default, it should be enabled with the `--with-http_addition_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    add_before_body /before_action;\n    add_after_body  /after_action;\n}\n```\n\n#### Directives\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`add_before_body`**` `*`uri`*`;` |\n| Default: | —                                  |\n| Context: | `http`, `server`, `location`       |\n\nAdds the text returned as a result of processing a given subrequest before the response body. An empty string (`\"\"`) as a parameter cancels addition inherited from the previous configuration level.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`add_after_body`**` `*`uri`*`;` |\n| Default: | —                                 |\n| Context: | `http`, `server`, `location`      |\n\nAdds the text returned as a result of processing a given subrequest after the response body. An empty string (`\"\"`) as a parameter cancels addition inherited from the previous configuration level.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`addition_types`**` `*`mime-type`*` ...;` |\n| Default: | `addition_types text/html;`                 |\n| Context: | `http`, `server`, `location`                |\n\nThis directive appeared in version 0.7.9.\n\nAllows adding text in responses with the specified MIME types, in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_addition_module.html](https://nginx.org/en/docs/http/ngx_http_addition_module.html)"
- name: ngx_http_api_module
  id: http/ngx_http_api_module
  summary: The ngx_http_api_module module (1.13.3) provides REST API for accessing various status information, configuring upstream server groups on-the-fly, and managing key-value pairs without the need of reconfiguring nginx
  description: "# Module ngx_http_api_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [api](#api)\n- [status_zone](#status_zone)\n- [Compatibility](#compatibility)\n- [Endpoints](#endpoints)\n- [/](#root)\n- [/nginx](#nginx)\n- [/processes](#processes)\n- [/connections](#connections)\n- [/slabs/](#slabs_)\n- [/slabs/{slabZoneName}](#slabs_slab_zone_name)\n- [/http/](#http_)\n- [/http/requests](#http_requests)\n- [/http/server_zones/](#http_server_zones_)\n- [/http/server_zones/{httpServerZoneName}](#http_server_zones_http_server_zone_name)\n- [/http/location_zones/](#http_location_zones_)\n- [/http/location_zones/{httpLocationZoneName}](#http_location_zones_http_location_zone_name)\n- [/http/caches/](#http_caches_)\n- [/http/caches/{httpCacheZoneName}](#http_caches_http_cache_zone_name)\n- [/http/limit_conns/](#http_limit_conns_)\n- [/http/limit_conns/{httpLimitConnZoneName}](#http_limit_conns_http_limit_conn_zone_name)\n- [/http/limit_reqs/](#http_limit_reqs_)\n- [/http/limit_reqs/{httpLimitReqZoneName}](#http_limit_reqs_http_limit_req_zone_name)\n- [/http/upstreams/](#http_upstreams_)\n- [/http/upstreams/{httpUpstreamName}/](#http_upstreams_http_upstream_name_)\n- [/http/upstreams/{httpUpstreamName}/servers/](#http_upstreams_http_upstream_name_servers_)\n- [/http/upstreams/{httpUpstreamName}/servers/{httpUpstreamServerId}](#http_upstreams_http_upstream_name_servers_http_upstream_server_id)\n- [/http/keyvals/](#http_keyvals_)\n- [/http/keyvals/{httpKeyvalZoneName}](#http_keyvals_http_keyval_zone_name)\n- [/stream/](#stream_)\n- [/stream/server_zones/](#stream_server_zones_)\n- [/stream/server_zones/{streamServerZoneName}](#stream_server_zones_stream_server_zone_name)\n- [/stream/limit_conns/](#stream_limit_conns_)\n- [/stream/limit_conns/{streamLimitConnZoneName}](#stream_limit_conns_stream_limit_conn_zone_name)\n- [/stream/upstreams/](#stream_upstreams_)\n- [/stream/upstreams/{streamUpstreamName}/](#stream_upstreams_stream_upstream_name_)\n- [/stream/upstreams/{streamUpstreamName}/servers/](#stream_upstreams_stream_upstream_name_servers_)\n- [/stream/upstreams/{streamUpstreamName}/servers/{streamUpstreamServerId}](#stream_upstreams_stream_upstream_name_servers_stream_upstream_server_id)\n- [/stream/keyvals/](#stream_keyvals_)\n- [/stream/keyvals/{streamKeyvalZoneName}](#stream_keyvals_stream_keyval_zone_name)\n- [/stream/zone_sync/](#stream_zone_sync_)\n- [/resolvers/](#resolvers_)\n- [/resolvers/{resolverZoneName}](#resolvers_resolver_zone_name)\n- [/ssl](#ssl)\n- [/workers/](#workers_)\n- [/workers/{workerId}](#workers_worker_id)\n- [Response Objects](#definitions)\n\nThe `ngx_http_api_module` module (1.13.3) provides REST API for accessing various status information, configuring upstream server groups on-the-fly, and managing [key-value pairs](ngx_http_keyval_module) without the need of reconfiguring nginx.\n\nThe module supersedes the [ngx_http_status_module](ngx_http_status_module) and [ngx_http_upstream_conf_module](ngx_http_upstream_conf_module) modules.\n\nWhen using the `PATCH` or `POST` methods, make sure that the payload does not exceed the [buffer size](ngx_http_core_module#client_body_buffer_size) for reading the client request body, otherwise, the 413 (Request Entity Too Large) error may be returned.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    upstream backend {\n        zone http_backend 64k;\n\n        server backend1.example.com weight=5;\n        server backend2.example.com;\n    }\n\n    proxy_cache_path /data/nginx/cache_backend keys_zone=cache_backend:10m;\n\n    server {\n        server_name backend.example.com;\n\n        location / {\n            proxy_pass  http://backend;\n            proxy_cache cache_backend;\n\n            health_check;\n        }\n\n        status_zone server_backend;\n    }\n\n    keyval_zone zone=one:32k state=one.keyval;\n    keyval $arg_text $text zone=one;\n\n    server {\n        listen 127.0.0.1;\n\n        location /api {\n            api write=on;\n            allow 127.0.0.1;\n            deny all;\n        }\n    }\n}\n\nstream {\n    upstream backend {\n        zone stream_backend 64k;\n\n        server backend1.example.com:12345 weight=5;\n        server backend2.example.com:12345;\n    }\n\n    server {\n        listen      127.0.0.1:12345;\n        proxy_pass  backend;\n        status_zone server_backend;\n        health_check;\n    }\n}\n```\n\nAll API requests include a supported API [version](#api_version) in the URI. Examples of API requests with this configuration:\n\n``` nginx\nhttp://127.0.0.1/api/9/\nhttp://127.0.0.1/api/9/nginx\nhttp://127.0.0.1/api/9/connections\nhttp://127.0.0.1/api/9/workers\nhttp://127.0.0.1/api/9/http/requests\nhttp://127.0.0.1/api/9/http/server_zones/server_backend\nhttp://127.0.0.1/api/9/http/caches/cache_backend\nhttp://127.0.0.1/api/9/http/upstreams/backend\nhttp://127.0.0.1/api/9/http/upstreams/backend/servers/\nhttp://127.0.0.1/api/9/http/upstreams/backend/servers/1\nhttp://127.0.0.1/api/9/http/keyvals/one?key=arg1\nhttp://127.0.0.1/api/9/stream/\nhttp://127.0.0.1/api/9/stream/server_zones/server_backend\nhttp://127.0.0.1/api/9/stream/upstreams/\nhttp://127.0.0.1/api/9/stream/upstreams/backend\nhttp://127.0.0.1/api/9/stream/upstreams/backend/servers/1\n```\n\n#### Directives\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`api`**` [write=on|off];` |\n| Default: | —                           |\n| Context: | `location`                  |\n\nTurns on the REST API interface in the surrounding location. Access to this location should be [limited](ngx_http_core_module#satisfy).\n\nThe `write` parameter determines whether the API is read-only or read-write. By default, the API is read-only.\n\nAll API requests should contain a supported API version in the URI. If the request URI equals the location prefix, the list of supported API versions is returned. The current API version is “`9`”.\n\nThe optional “`fields`” argument in the request line specifies which fields of the requested objects will be output:\n\n``` nginx\nhttp://127.0.0.1/api/9/nginx?fields=version,build\n```\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`status_zone`**` `*`zone`*`;`        |\n| Default: | —                                      |\n| Context: | `server`, `location`, `if in location` |\n\nThis directive appeared in version 1.13.12.\n\nEnables collection of virtual [http](ngx_http_core_module#server) or [stream](../stream/ngx_stream_core_module#server) server status information in the specified *`zone`*. Several servers may share the same zone.\n\nStarting from 1.17.0, status information can be collected per [location](ngx_http_core_module#location). The special value `off` disables statistics collection in nested location blocks. Note that the statistics is collected in the context of a location where processing ends. It may be different from the original location, if an [internal redirect](ngx_http_core_module#internal) happens during request processing.\n\n#### Compatibility\n\n- The [/workers/](#workers_) data were added in [version](#api_version) 9.\n- Detailed failure counters were added to SSL statistics in [version](#api_version) 8 (1.23.2).\n- The `ssl` data for each HTTP [upstream](#def_nginx_http_upstream), [server zone](#def_nginx_http_server_zone), and stream [upstream](#def_nginx_stream_upstream), [server zone](#def_nginx_stream_server_zone), were added in [version](#api_version) 8 (1.21.6).\n- The `codes` data in `responses` for each HTTP [upstream](#def_nginx_http_upstream), [server zone](#def_nginx_http_server_zone), and [location zone](#def_nginx_http_location_zone) were added in [version](#api_version) 7.\n- The [/stream/limit_conns/](#stream_limit_conns_) data were added in [version](#api_version) 6.\n- The [/http/limit_conns/](#http_limit_conns_) data were added in [version](#api_version) 6.\n- The [/http/limit_reqs/](#http_limit_reqs_) data were added in [version](#api_version) 6.\n- The “`expire`” parameter of a [key-value](ngx_http_keyval_module) pair can be [set](#postHttpKeyvalZoneData) or [changed](#patchHttpKeyvalZoneKeyValue) since [version](#api_version) 5.\n- The [/resolvers/](#resolvers_) data were added in [version](#api_version) 5.\n- The [/http/location_zones/](#http_location_zones_) data were added in [version](#api_version) 5.\n- The `path` and `method` fields of [nginx error object](#def_nginx_error) were removed in [version](#api_version) 4. These fields continue to exist in earlier api versions, but show an empty value.\n- The [/stream/zone_sync/](#stream_zone_sync_) data were added in [version](#api_version) 3.\n- The [drain](#def_nginx_http_upstream_conf_server) parameter was added in [version](#api_version) 2.\n- The [/stream/keyvals/](#stream_keyvals_) data were added in [version](#api_version) 2.\n\n#### Endpoints\n\n`/`  \nSupported methods:\n\n- `GET` - Return list of root endpoints\n\n  Returns a list of root endpoints.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of strings\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/nginx`  \nSupported methods:\n\n- `GET` - Return status of nginx running instance\n\n  Returns nginx version, build name, address, number of configuration reloads, IDs of master and worker processes.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of nginx running instance will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [nginx](#def_nginx_object)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/processes`  \nSupported methods:\n\n- `GET` - Return nginx processes status\n\n  Returns the number of abnormally terminated and respawned child processes.\n\n  Possible responses:\n\n  - 200 - Success, returns [Processes](#def_nginx_processes)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset nginx processes statistics\n\n  Resets counters of abnormally terminated and respawned child processes.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/connections`  \nSupported methods:\n\n- `GET` - Return client connections statistics\n\n  Returns statistics of client connections.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the connections statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Connections](#def_nginx_connections)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset client connections statistics\n\n  Resets statistics of accepted and dropped client connections.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/slabs/`  \nSupported methods:\n\n- `GET` - Return status of all slabs\n\n  Returns status of slabs for each shared memory zone with slab allocator.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of slab zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Shared memory zone with slab allocator](#def_nginx_slab_zone)\" objects for all slabs\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/slabs/{slabZoneName}`  \nParameters common for all methods:\n\n`slabZoneName` (`string`, required)  \nThe name of the shared memory zone with slab allocator.\n\nSupported methods:\n\n- `GET` - Return status of a slab\n\n  Returns status of slabs for a particular shared memory zone with slab allocator.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the slab zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Shared memory zone with slab allocator](#def_nginx_slab_zone)\n  - 404 - Slab not found (`SlabNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset slab statistics\n\n  Resets the “`reqs`” and “`fails`” metrics for each memory slot.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Slab not found (`SlabNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/`  \nSupported methods:\n\n- `GET` - Return list of HTTP-related endpoints\n\n  Returns a list of first level HTTP endpoints.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of strings\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/requests`  \nSupported methods:\n\n- `GET` - Return HTTP requests statistics\n\n  Returns status of client HTTP requests.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of client HTTP requests statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Requests](#def_nginx_http_requests)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset HTTP requests statistics\n\n  Resets the number of total client HTTP requests.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/server_zones/`  \nSupported methods:\n\n- `GET` - Return status of all HTTP server zones\n\n  Returns status information for each HTTP [server zone](ngx_http_api_module#status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of server zones will be output. If the “`fields`” value is empty, then only server zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Server Zone](#def_nginx_http_server_zone)\" objects for all HTTP server zones\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/server_zones/{httpServerZoneName}`  \nParameters common for all methods:\n\n`httpServerZoneName` (`string`, required)  \nThe name of an HTTP server zone.\n\nSupported methods:\n\n- `GET` - Return status of an HTTP server zone\n\n  Returns status of a particular HTTP server zone.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the server zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Server Zone](#def_nginx_http_server_zone)\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for an HTTP server zone\n\n  Resets statistics of accepted and discarded requests, responses, received and sent bytes, counters of SSL handshakes and session reuses in a particular HTTP server zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/location_zones/`  \nSupported methods:\n\n- `GET` - Return status of all HTTP location zones\n\n  Returns status information for each HTTP [location zone](ngx_http_api_module#status_zone_location).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of location zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Location Zone](#def_nginx_http_location_zone)\" objects for all HTTP location zones\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/location_zones/{httpLocationZoneName}`  \nParameters common for all methods:\n\n`httpLocationZoneName` (`string`, required)  \nThe name of an HTTP [location zone](ngx_http_api_module#status_zone_location).\n\nSupported methods:\n\n- `GET` - Return status of an HTTP location zone\n\n  Returns status of a particular HTTP [location zone](ngx_http_api_module#status_zone_location).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the location zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Location Zone](#def_nginx_http_location_zone)\n  - 404 - Location zone not found (`LocationZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a location zone.\n\n  Resets statistics of accepted and discarded requests, responses, received and sent bytes in a particular location zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Location zone not found (`LocationZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/caches/`  \nSupported methods:\n\n- `GET` - Return status of all caches\n\n  Returns status of each cache configured by [proxy_cache_path](ngx_http_proxy_module#proxy_cache_path) and other “`*_cache_path`” directives.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of cache zones will be output. If the “`fields`” value is empty, then only names of cache zones will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Cache](#def_nginx_http_cache)\" objects for all HTTP caches\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/caches/{httpCacheZoneName}`  \nParameters common for all methods:\n\n`httpCacheZoneName` (`string`, required)  \nThe name of the cache zone.\n\nSupported methods:\n\n- `GET` - Return status of a cache\n\n  Returns status of a particular cache.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the cache zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Cache](#def_nginx_http_cache)\n  - 404 - Cache not found (`CacheNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset cache statistics\n\n  Resets statistics of cache hits/misses in a particular cache zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Cache not found (`CacheNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/limit_conns/`  \nSupported methods:\n\n- `GET` - Return status of all HTTP limit_conn zones\n\n  Returns status information for each HTTP [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of limit_conn zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Connections Limiting](#def_nginx_http_limit_conn_zone)\" objects for all HTTP limit conns\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/limit_conns/{httpLimitConnZoneName}`  \nParameters common for all methods:\n\n`httpLimitConnZoneName` (`string`, required)  \nThe name of a [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone).\n\nSupported methods:\n\n- `GET` - Return status of an HTTP limit_conn zone\n\n  Returns status of a particular HTTP [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone) will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Connections Limiting](#def_nginx_http_limit_conn_zone)\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for an HTTP limit_conn zone\n\n  Resets the connection limiting statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/limit_reqs/`  \nSupported methods:\n\n- `GET` - Return status of all HTTP limit_req zones\n\n  Returns status information for each HTTP [limit_req zone](ngx_http_limit_req_module#limit_req_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of limit_req zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Requests Rate Limiting](#def_nginx_http_limit_req_zone)\" objects for all HTTP limit reqs\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/limit_reqs/{httpLimitReqZoneName}`  \nParameters common for all methods:\n\n`httpLimitReqZoneName` (`string`, required)  \nThe name of a [limit_req zone](ngx_http_limit_req_module#limit_req_zone).\n\nSupported methods:\n\n- `GET` - Return status of an HTTP limit_req zone\n\n  Returns status of a particular HTTP [limit_req zone](ngx_http_limit_req_module#limit_req_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the [limit_req zone](ngx_http_limit_req_module#limit_req_zone) will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Requests Rate Limiting](#def_nginx_http_limit_req_zone)\n  - 404 - limit_req not found (`LimitReqNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for an HTTP limit_req zone\n\n  Resets the requests limiting statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - limit_req not found (`LimitReqNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/`  \nSupported methods:\n\n- `GET` - Return status of all HTTP upstream server groups\n\n  Returns status of each HTTP upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of upstream server groups will be output. If the “`fields`” value is empty, only names of upstreams will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Upstream](#def_nginx_http_upstream)\" objects for all HTTP upstreams\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/{httpUpstreamName}/`  \nParameters common for all methods:\n\n`httpUpstreamName` (`string`, required)  \nThe name of an HTTP upstream server group.\n\nSupported methods:\n\n- `GET` - Return status of an HTTP upstream server group\n\n  Returns status of a particular HTTP upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the upstream server group will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Upstream](#def_nginx_http_upstream)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics of an HTTP upstream server group\n\n  Resets the statistics for each upstream server in an upstream server group and queue statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/{httpUpstreamName}/servers/`  \nParameters common for all methods:\n\n`httpUpstreamName` (`string`, required)  \nThe name of an upstream server group.\n\nSupported methods:\n\n- `GET` - Return configuration of all servers in an HTTP upstream server group\n\n  Returns configuration of each server in a particular HTTP upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [HTTP Upstream Servers](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a server to an HTTP upstream server group\n\n  Adds a new server to an HTTP upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `postHttpUpstreamServer` ([HTTP Upstream Server](#def_nginx_http_upstream_conf_server), required)  \n  Address of a new server and other optional parameters in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 201 - Created, returns [HTTP Upstream Server](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), missing “`server`” argument (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), service upstream “`host`” may not have port (`UpstreamBadAddress`), service upstream “`host`” requires domain name (`UpstreamBadAddress`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), reading request body failed `BodyReadError`), route is too long (`UpstreamBadRoute`), “`service`” is empty (`UpstreamBadService`), no resolver defined to resolve (`UpstreamConfNoResolver`), upstream “*`name`*” has no backup (`UpstreamNoBackup`), upstream “*`name`*” memory exhausted (`UpstreamOutOfMemory`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/{httpUpstreamName}/servers/{httpUpstreamServerId}`  \nParameters common for all methods:\n\n`httpUpstreamName` (`string`, required)  \nThe name of the upstream server group.\n\n`httpUpstreamServerId` (`string`, required)  \nThe ID of the server.\n\nSupported methods:\n\n- `GET` - Return configuration of a server in an HTTP upstream server group\n\n  Returns configuration of a particular server in the HTTP upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Upstream Server](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a server in an HTTP upstream server group\n\n  Modifies settings of a particular server in an HTTP upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `patchHttpUpstreamServer` ([HTTP Upstream Server](#def_nginx_http_upstream_conf_server), required)  \n  Server parameters, specified in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Upstream Server](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), invalid “`server`” argument (`UpstreamBadAddress`), invalid server ID (`UpstreamBadServerId`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), reading request body failed `BodyReadError`), route is too long (`UpstreamBadRoute`), “`service`” is empty (`UpstreamBadService`), server “*`ID`*” address is immutable (`UpstreamServerImmutable`), server “`ID`” weight is immutable (`UpstreamServerWeightImmutable`), upstream “`name`” memory exhausted (`UpstreamOutOfMemory`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Remove a server from an HTTP upstream server group\n\n  Removes a server from an HTTP upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [HTTP Upstream Servers](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), server “*`id`*” not removable (`UpstreamServerImmutable`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/keyvals/`  \nSupported methods:\n\n- `GET` - Return key-value pairs from all HTTP keyval zones\n\n  Returns key-value pairs for each HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  If the “`fields`” value is empty, then only HTTP keyval zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone)\" objects for all HTTP keyvals\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/keyvals/{httpKeyvalZoneName}`  \nParameters common for all methods:\n\n`httpKeyvalZoneName` (`string`, required)  \nThe name of an HTTP keyval shared memory zone.\n\nSupported methods:\n\n- `GET` - Return key-value pairs from an HTTP keyval zone\n\n  Returns key-value pairs stored in a particular HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `key` (`string`, optional)  \n  Get a particular key-value pair from the HTTP keyval zone.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a key-value pair to the HTTP keyval zone\n\n  Adds a new key-value pair to the HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone). Several key-value pairs can be entered if the HTTP keyval shared memory zone is empty.\n\n  Request parameters:\n\n  `Key-value` ([HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone_post_patch), required)  \n  A key-value pair is specified in the JSON format. Several key-value pairs can be entered if the HTTP keyval shared memory zone is empty. Expiration time in milliseconds can be specified for a key-value pair with the `expire` parameter which overrides the [`timeout`](ngx_http_keyval_module#keyval_timeout) parameter of the [keyval_zone](ngx_http_keyval_module#keyval_zone) directive.\n\n  Possible responses:\n\n  - 201 - Created\n  - 400 - Invalid JSON (`KeyvalFormatError`), invalid key format (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be added (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), key already exists (`KeyvalKeyExists`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a key-value or delete a key\n\n  Changes the value of the selected key in the key-value pair, deletes a key by setting the key value to `null`, changes expiration time of a key-value pair. If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, deletes a key only on a target cluster node. Expiration time in milliseconds can be specified for a key-value pair with the `expire` parameter which overrides the [`timeout`](ngx_http_keyval_module#keyval_timeout) parameter of the [keyval_zone](ngx_http_keyval_module#keyval_zone) directive.\n\n  Request parameters:\n\n  `httpKeyvalZoneKeyValue` ([HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone_post_patch), required)  \n  A new value for the key is specified in the JSON format.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Invalid JSON (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be updated (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Empty the HTTP keyval zone\n\n  Deletes all key-value pairs from the HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone). If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, empties the keyval zone only on a target cluster node.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/`  \nSupported methods:\n\n- `GET` - Return list of stream-related endpoints\n\n  Returns a list of first level stream endpoints.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of strings\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/server_zones/`  \nSupported methods:\n\n- `GET` - Return status of all stream server zones\n\n  Returns status information for each stream [server zone](ngx_http_api_module#status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of server zones will be output. If the “`fields`” value is empty, then only server zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Server Zone](#def_nginx_stream_server_zone)\" objects for all stream server zones\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/server_zones/{streamServerZoneName}`  \nParameters common for all methods:\n\n`streamServerZoneName` (`string`, required)  \nThe name of a stream server zone.\n\nSupported methods:\n\n- `GET` - Return status of a stream server zone\n\n  Returns status of a particular stream server zone.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the server zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Server Zone](#def_nginx_stream_server_zone)\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a stream server zone\n\n  Resets statistics of accepted and discarded connections, sessions, received and sent bytes, counters of SSL handshakes and session reuses in a particular stream server zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/limit_conns/`  \nSupported methods:\n\n- `GET` - Return status of all stream limit_conn zones\n\n  Returns status information for each stream [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of limit_conn zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Connections Limiting](#def_nginx_stream_limit_conn_zone)\" objects for all stream limit conns\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/limit_conns/{streamLimitConnZoneName}`  \nParameters common for all methods:\n\n`streamLimitConnZoneName` (`string`, required)  \nThe name of a [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone).\n\nSupported methods:\n\n- `GET` - Return status of an stream limit_conn zone\n\n  Returns status of a particular stream [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone) will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Connections Limiting](#def_nginx_stream_limit_conn_zone)\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a stream limit_conn zone\n\n  Resets the connection limiting statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/`  \nSupported methods:\n\n- `GET` - Return status of all stream upstream server groups\n\n  Returns status of each stream upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of upstream server groups will be output. If the “`fields`” value is empty, only names of upstreams will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Upstream](#def_nginx_stream_upstream)\" objects for all stream upstreams\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/{streamUpstreamName}/`  \nParameters common for all methods:\n\n`streamUpstreamName` (`string`, required)  \nThe name of a stream upstream server group.\n\nSupported methods:\n\n- `GET` - Return status of a stream upstream server group\n\n  Returns status of a particular stream upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the upstream server group will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Upstream](#def_nginx_stream_upstream)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics of a stream upstream server group\n\n  Resets the statistics for each upstream server in an upstream server group.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/{streamUpstreamName}/servers/`  \nParameters common for all methods:\n\n`streamUpstreamName` (`string`, required)  \nThe name of an upstream server group.\n\nSupported methods:\n\n- `GET` - Return configuration of all servers in a stream upstream server group\n\n  Returns configuration of each server in a particular stream upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [Stream Upstream Servers](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a server to a stream upstream server group\n\n  Adds a new server to a stream upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `postStreamUpstreamServer` ([Stream Upstream Server](#def_nginx_stream_upstream_conf_server), required)  \n  Address of a new server and other optional parameters in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 201 - Created, returns [Stream Upstream Server](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), missing “`server`” argument (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), no port in server “`host`” (`UpstreamBadAddress`), service upstream “`host`” may not have port (`UpstreamBadAddress`), service upstream “`host`” requires domain name (`UpstreamBadAddress`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), “`service`” is empty (`UpstreamBadService`), no resolver defined to resolve (`UpstreamConfNoResolver`), upstream “*`name`*” has no backup (`UpstreamNoBackup`), upstream “*`name`*” memory exhausted (`UpstreamOutOfMemory`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/{streamUpstreamName}/servers/{streamUpstreamServerId}`  \nParameters common for all methods:\n\n`streamUpstreamName` (`string`, required)  \nThe name of the upstream server group.\n\n`streamUpstreamServerId` (`string`, required)  \nThe ID of the server.\n\nSupported methods:\n\n- `GET` - Return configuration of a server in a stream upstream server group\n\n  Returns configuration of a particular server in the stream upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Upstream Server](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a server in a stream upstream server group\n\n  Modifies settings of a particular server in a stream upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `patchStreamUpstreamServer` ([Stream Upstream Server](#def_nginx_stream_upstream_conf_server), required)  \n  Server parameters, specified in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Upstream Server](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), invalid “`server`” argument (`UpstreamBadAddress`), no port in server “`host`” (`UpstreamBadAddress`), invalid server ID (`UpstreamBadServerId`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), reading request body failed `BodyReadError`), “`service`” is empty (`UpstreamBadService`), server “*`ID`*” address is immutable (`UpstreamServerImmutable`), server “*`ID`*” weight is immutable (`UpstreamServerWeightImmutable`), upstream “`name`” memory exhausted (`UpstreamOutOfMemory`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Remove a server from a stream upstream server group\n\n  Removes a server from a stream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [Stream Upstream Servers](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), server “*`id`*” not removable (`UpstreamServerImmutable`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/keyvals/`  \nSupported methods:\n\n- `GET` - Return key-value pairs from all stream keyval zones\n\n  Returns key-value pairs for each stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  If the “`fields`” value is empty, then only stream keyval zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone)\" objects for all stream keyvals\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/keyvals/{streamKeyvalZoneName}`  \nParameters common for all methods:\n\n`streamKeyvalZoneName` (`string`, required)  \nThe name of a stream keyval shared memory zone.\n\nSupported methods:\n\n- `GET` - Return key-value pairs from a stream keyval zone\n\n  Returns key-value pairs stored in a particular stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `key` (`string`, optional)  \n  Get a particular key-value pair from the stream keyval zone.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a key-value pair to the stream keyval zone\n\n  Adds a new key-value pair to the stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone). Several key-value pairs can be entered if the stream keyval shared memory zone is empty.\n\n  Request parameters:\n\n  `Key-value` ([Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone_post_patch), required)  \n  A key-value pair is specified in the JSON format. Several key-value pairs can be entered if the stream keyval shared memory zone is empty. Expiration time in milliseconds can be specified for a key-value pair with the `expire` parameter which overrides the [`timeout`](../stream/ngx_stream_keyval_module#keyval_timeout) parameter of the [keyval_zone](../stream/ngx_stream_keyval_module#keyval_zone) directive.\n\n  Possible responses:\n\n  - 201 - Created\n  - 400 - Invalid JSON (`KeyvalFormatError`), invalid key format (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be added (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), key already exists (`KeyvalKeyExists`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a key-value or delete a key\n\n  Changes the value of the selected key in the key-value pair, deletes a key by setting the key value to `null`, changes expiration time of a key-value pair. If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, deletes a key only on a target cluster node. Expiration time is specified in milliseconds with the `expire` parameter which overrides the [`timeout`](../stream/ngx_stream_keyval_module#keyval_timeout) parameter of the [keyval_zone](../stream/ngx_stream_keyval_module#keyval_zone) directive.\n\n  Request parameters:\n\n  `streamKeyvalZoneKeyValue` ([Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone_post_patch), required)  \n  A new value for the key is specified in the JSON format.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Invalid JSON (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be updated (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Empty the stream keyval zone\n\n  Deletes all key-value pairs from the stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone). If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, empties the keyval zone only on a target cluster node.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/zone_sync/`  \nSupported methods:\n\n- `GET` - Return sync status of a node\n\n  Returns synchronization status of a cluster node.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Zone Sync Node](#def_nginx_stream_zone_sync)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/resolvers/`  \nSupported methods:\n\n- `GET` - Return status for all resolver zones\n\n  Returns status information for each [resolver zone](ngx_http_core_module#resolver_status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of resolvers statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Resolver Zone](#def_nginx_resolver_zone)\" objects for all resolvers\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/resolvers/{resolverZoneName}`  \nParameters common for all methods:\n\n`resolverZoneName` (`string`, required)  \nThe name of a resolver zone.\n\nSupported methods:\n\n- `GET` - Return statistics of a resolver zone\n\n  Returns statistics stored in a particular resolver [zone](ngx_http_core_module#resolver_status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of the resolver zone will be output (requests, responses, or both).\n\n  Possible responses:\n\n  - 200 - Success, returns [Resolver Zone](#def_nginx_resolver_zone)\n  - 404 - Resolver zone not found (`ResolverZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a resolver zone.\n\n  Resets statistics in a particular resolver zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Resolver zone not found (`ResolverZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/ssl`  \nSupported methods:\n\n- `GET` - Return SSL statistics\n\n  Returns SSL statistics.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of SSL statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [SSL](#def_nginx_ssl_object)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset SSL statistics\n\n  Resets counters of SSL handshakes and session reuses.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/workers/`  \nSupported methods:\n\n- `GET` - Return statistics for all worker processes\n\n  Returns statistics for all worker processes such as accepted, dropped, active, idle connections, total and current requests.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of worker process statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Worker process](#def_nginx_worker)\" objects for all workers\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for all worker processes.\n\n  Resets statistics for all worker processes such as accepted, dropped, active, idle connections, total and current requests.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/workers/{workerId}`  \nParameters common for all methods:\n\n`workerId` (`string`, required)  \nThe ID of the worker process.\n\nSupported methods:\n\n- `GET` - Return status of a worker process\n\n  Returns status of a particular worker process.\n\n  Request parameters:\n\n  `fields` (`string`, optional)  \n  Limits which fields of worker process statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Worker process](#def_nginx_worker)\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a worker process.\n\n  Resets statistics of accepted, dropped, active, idle connections, as well as total and current requests.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n#### Response Objects\n\n- nginx:\n\n  General information about nginx:\n  `version` (`string`)  \n  Version of nginx.\n\n  `build` (`string`)  \n  Name of nginx build.\n\n  `address` (`string`)  \n  The address of the server that accepted status request.\n\n  `generation` (`integer`)  \n  The total number of configuration [reloads](../control#reconfiguration).\n\n  `load_timestamp` (`string`)  \n  Time of the last reload of configuration, in the ISO 8601 format with millisecond resolution.\n\n  `timestamp` (`string`)  \n  Current time in the ISO 8601 format with millisecond resolution.\n\n  `pid` (`integer`)  \n  The ID of the worker process that handled status request.\n\n  `ppid` (`integer`)  \n  The ID of the master process that started the [worker process](ngx_http_status_module#pid).\n\n  Example:\n\n  ``` nginx\n  {\n    \"nginx\" : {\n      \"version\" : \"1.21.6\",\n      \"build\" : \"nginx-plus-r27\",\n      \"address\" : \"206.251.255.64\",\n      \"generation\" : 6,\n      \"load_timestamp\" : \"2022-06-28T11:15:44.467Z\",\n      \"timestamp\" : \"2022-06-28T09:26:07.305Z\",\n      \"pid\" : 32212,\n      \"ppid\" : 32210\n    }\n  }\n  ```\n\n- Processes:\n\n  `respawned` (`integer`)  \n  The total number of abnormally terminated and respawned child processes.\n\n  Example:\n\n  ``` nginx\n  {\n    \"respawned\" : 0\n  }\n  ```\n\n- Connections:\n\n  The number of accepted, dropped, active, and idle connections.\n  `accepted` (`integer`)  \n  The total number of accepted client connections.\n\n  `dropped` (`integer`)  \n  The total number of dropped client connections.\n\n  `active` (`integer`)  \n  The current number of active client connections.\n\n  `idle` (`integer`)  \n  The current number of idle client connections.\n\n  Example:\n\n  ``` nginx\n  {\n    \"accepted\" : 4968119,\n    \"dropped\" : 0,\n    \"active\" : 5,\n    \"idle\" : 117\n  }\n  ```\n\n- SSL:\n\n  `handshakes` (`integer`)  \n  The total number of successful SSL handshakes.\n\n  `handshakes_failed` (`integer`)  \n  The total number of failed SSL handshakes.\n\n  `session_reuses` (`integer`)  \n  The total number of session reuses during SSL handshake.\n\n  `no_common_protocol` (`integer`)  \n  The number of SSL handshakes failed because of no common protocol.\n\n  `no_common_cipher` (`integer`)  \n  The number of SSL handshakes failed because of no shared cipher.\n\n  `handshake_timeout` (`integer`)  \n  The number of SSL handshakes failed because of a timeout.\n\n  `peer_rejected_cert` (`integer`)  \n  The number of failed SSL handshakes when nginx presented the certificate to the client but it was rejected with a corresponding alert message.\n\n  `verify_failures`  \n  SSL certificate verification errors\n\n  `no_cert` (`integer`)  \n  A client did not provide the required certificate.\n\n  `expired_cert` (`integer`)  \n  An expired or not yet valid certificate was presented by a client.\n\n  `revoked_cert` (`integer`)  \n  A revoked certificate was presented by a client.\n\n  `hostname_mismatch` (`integer`)  \n  Server's certificate doesn't match the hostname.\n\n  `other` (`integer`)  \n  Other SSL certificate verification errors.\n\n  Example:\n\n  ``` nginx\n  {\n    \"handshakes\" : 79572,\n    \"handshakes_failed\" : 21025,\n    \"session_reuses\" : 15762,\n    \"no_common_protocol\" : 4,\n    \"no_common_cipher\" : 2,\n    \"handshake_timeout\" : 0,\n    \"peer_rejected_cert\" : 0,\n    \"verify_failures\" : {\n      \"no_cert\" : 0,\n      \"expired_cert\" : 2,\n      \"revoked_cert\" : 1,\n      \"hostname_mismatch\" : 2,\n      \"other\" : 1\n    }\n  }\n  ```\n\n- Shared memory zone with slab allocator:\n\n  Shared memory zone with slab allocator\n  `pages`  \n  The number of free and used memory pages.\n\n  `used` (`integer`)  \n  The current number of used memory pages.\n\n  `free` (`integer`)  \n  The current number of free memory pages.\n\n  `slots`  \n  Status data for memory slots (8, 16, 32, 64, 128, etc.)\n\n  A collection of \"[Memory Slot](#def_nginx_slab_zone_slot)\" objects\n\n  Example:\n\n  ``` nginx\n  {\n    \"pages\" : {\n      \"used\" : 1143,\n      \"free\" : 2928\n    },\n    \"slots\" : {\n      \"8\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"16\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"32\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"64\" : {\n        \"used\" : 1,\n        \"free\" : 63,\n        \"reqs\" : 1,\n        \"fails\" : 0\n      },\n      \"128\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"256\" : {\n        \"used\" : 18078,\n        \"free\" : 178,\n        \"reqs\" : 1635736,\n        \"fails\" : 0\n      }\n    }\n  }\n  ```\n\n- Memory Slot:\n\n  `used` (`integer`)  \n  The current number of used memory slots.\n\n  `free` (`integer`)  \n  The current number of free memory slots.\n\n  `reqs` (`integer`)  \n  The total number of attempts to allocate memory of specified size.\n\n  `fails` (`integer`)  \n  The number of unsuccessful attempts to allocate memory of specified size.\n\n- HTTP Requests:\n\n  `total` (`integer`)  \n  The total number of client requests.\n\n  `current` (`integer`)  \n  The current number of client requests.\n\n  Example:\n\n  ``` nginx\n  {\n    \"total\" : 10624511,\n    \"current\" : 4\n  }\n  ```\n\n- HTTP Server Zone:\n\n  `processing` (`integer`)  \n  The number of client requests that are currently being processed.\n\n  `requests` (`integer`)  \n  The total number of client requests received from clients.\n\n  `responses`  \n  The total number of responses sent to clients, the number of responses with status codes “`1xx`”, “`2xx`”, “`3xx`”, “`4xx`”, and “`5xx`”, and the number of responses per each status code.\n\n  `1xx` (`integer`)  \n  The number of responses with “`1xx`” status codes.\n\n  `2xx` (`integer`)  \n  The number of responses with “`2xx`” status codes.\n\n  `3xx` (`integer`)  \n  The number of responses with “`3xx`” status codes.\n\n  `4xx` (`integer`)  \n  The number of responses with “`4xx`” status codes.\n\n  `5xx` (`integer`)  \n  The number of responses with “`5xx`” status codes.\n\n  `codes`  \n  The number of responses per each status code.\n\n  `codeNumber` (`integer`)  \n  The number of responses with this particular status code.\n\n  `total` (`integer`)  \n  The total number of responses sent to clients.\n\n  `discarded` (`integer`)  \n  The total number of requests completed without sending a response.\n\n  `received` (`integer`)  \n  The total number of bytes received from clients.\n\n  `sent` (`integer`)  \n  The total number of bytes sent to clients.\n\n  `ssl`  \n  `handshakes` (`integer`)  \n  The total number of successful SSL handshakes.\n\n  `handshakes_failed` (`integer`)  \n  The total number of failed SSL handshakes.\n\n  `session_reuses` (`integer`)  \n  The total number of session reuses during SSL handshake.\n\n  `no_common_protocol` (`integer`)  \n  The number of SSL handshakes failed because of no common protocol.\n\n  `no_common_cipher` (`integer`)  \n  The number of SSL handshakes failed because of no shared cipher.\n\n  `handshake_timeout` (`integer`)  \n  The number of SSL handshakes failed because of a timeout.\n\n  `peer_rejected_cert` (`integer`)  \n  The number of failed SSL handshakes when nginx presented the certificate to the client but it was rejected with a corresponding alert message.\n\n  `verify_failures`  \n  SSL certificate verification errors\n\n  `no_cert` (`integer`)  \n  A client did not provide the required certificate.\n\n  `expired_cert` (`integer`)  \n  An expired or not yet valid certificate was presented by a client.\n\n  `revoked_cert` (`integer`)  \n  A revoked certificate was presented by a client.\n\n  `other` (`integer`)  \n  Other SSL certificate verification errors.\n\n  Example:\n\n  ``` nginx\n  {\n    \"processing\" : 1,\n    \"requests\" : 706690,\n    \"responses\" : {\n      \"1xx\" : 0,\n      \"2xx\" : 699482,\n      \"3xx\" : 4522,\n      \"4xx\" : 907,\n      \"5xx\" : 266,\n      \"codes\" : {\n        \"200\" : 699482,\n        \"301\" : 4522,\n        \"404\" : 907,\n        \"503\" : 266\n      },\n      \"total\" : 705177\n    },\n    \"discarded\" : 1513,\n    \"received\" : 172711587,\n    \"sent\" : 19415530115,\n    \"ssl\" : {\n      \"handshakes\" : 104303,\n      \"handshakes_failed\" : 1421,\n      \"session_reuses\" : 54645,\n      \"no_common_protocol\" : 4,\n      \"no_common_cipher\" : 2,\n      \"handshake_timeout\" : 0,\n      \"peer_rejected_cert\" : 0,\n      \"verify_failures\" : {\n        \"no_cert\" : 0,\n        \"expired_cert\" : 2,\n        \"revoked_cert\" : 1,\n        \"other\" : 1\n      }\n    }\n  }\n  ```\n\n- HTTP Location Zone:\n\n  `requests` (`integer`)  \n  The total number of client requests received from clients.\n\n  `responses`  \n  The total number of responses sent to clients, the number of responses with status codes “`1xx`”, “`2xx`”, “`3xx`”, “`4xx`”, and “`5xx`”, and the number of responses per each status code.\n\n  `1xx` (`integer`)  \n  The number of responses with “`1xx`” status codes.\n\n  `2xx` (`integer`)  \n  The number of responses with “`2xx`” status codes.\n\n  `3xx` (`integer`)  \n  The number of responses with “`3xx`” status codes.\n\n  `4xx` (`integer`)  \n  The number of responses with “`4xx`” status codes.\n\n  `5xx` (`integer`)  \n  The number of responses with “`5xx`” status codes.\n\n  `codes`  \n  The number of responses per each status code.\n\n  `codeNumber` (`integer`)  \n  The number of responses with this particular status code.\n\n  `total` (`integer`)  \n  The total number of responses sent to clients.\n\n  `discarded` (`integer`)  \n  The total number of requests completed without sending a response.\n\n  `received` (`integer`)  \n  The total number of bytes received from clients.\n\n  `sent` (`integer`)  \n  The total number of bytes sent to clients.\n\n  Example:\n\n  ``` nginx\n  {\n    \"requests\" : 706690,\n    \"responses\" : {\n      \"1xx\" : 0,\n      \"2xx\" : 699482,\n      \"3xx\" : 4522,\n      \"4xx\" : 907,\n      \"5xx\" : 266,\n      \"codes\" : {\n        \"200\" : 112674,\n        \"301\" : 4522,\n        \"404\" : 2504,\n        \"503\" : 266\n      },\n      \"total\" : 705177\n    },\n    \"discarded\" : 1513,\n    \"received\" : 172711587,\n    \"sent\" : 19415530115\n  }\n  ```\n\n- HTTP Cache:\n\n  `size` (`integer`)  \n  The current size of the cache.\n\n  `max_size` (`integer`)  \n  The limit on the maximum size of the cache specified in the configuration.\n\n  `cold` (`boolean`)  \n  A boolean value indicating whether the “cache loader” process is still loading data from disk into the cache.\n\n  `hit`  \n  `responses` (`integer`)  \n  The total number of [valid](ngx_http_proxy_module#proxy_cache_valid) responses read from the cache.\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the cache.\n\n  `stale`  \n  `responses` (`integer`)  \n  The total number of expired responses read from the cache (see [proxy_cache_use_stale](ngx_http_proxy_module#proxy_cache_use_stale) and other “`*_cache_use_stale`” directives).\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the cache.\n\n  `updating`  \n  `responses` (`integer`)  \n  The total number of expired responses read from the cache while responses were being updated (see [proxy_cache_use_stale](ngx_http_proxy_module#proxy_cache_use_stale_updating) and other “`*_cache_use_stale`” directives).\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the cache.\n\n  `revalidated`  \n  `responses` (`integer`)  \n  The total number of expired and revalidated responses read from the cache (see [proxy_cache_revalidate](ngx_http_proxy_module#proxy_cache_revalidate) and other “`*_cache_revalidate`” directives.\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the cache.\n\n  `miss`  \n  `responses` (`integer`)  \n  The total number of responses not found in the cache.\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the proxied server.\n\n  `responses_written` (`integer`)  \n  The total number of responses written to the cache.\n\n  `bytes_written` (`integer`)  \n  The total number of bytes written to the cache.\n\n  `expired`  \n  `responses` (`integer`)  \n  The total number of expired responses not taken from the cache.\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the proxied server.\n\n  `responses_written` (`integer`)  \n  The total number of responses written to the cache.\n\n  `bytes_written` (`integer`)  \n  The total number of bytes written to the cache.\n\n  `bypass`  \n  `responses` (`integer`)  \n  The total number of responses not looked up in the cache due to the [proxy_cache_bypass](ngx_http_proxy_module#proxy_cache_bypass) and other “`*_cache_bypass`” directives.\n\n  `bytes` (`integer`)  \n  The total number of bytes read from the proxied server.\n\n  `responses_written` (`integer`)  \n  The total number of responses written to the cache.\n\n  `bytes_written` (`integer`)  \n  The total number of bytes written to the cache.\n\n  Example:\n\n  ``` nginx\n  {\n    \"size\" : 530915328,\n    \"max_size\" : 536870912,\n    \"cold\" : false,\n    \"hit\" : {\n      \"responses\" : 254032,\n      \"bytes\" : 6685627875\n    },\n    \"stale\" : {\n      \"responses\" : 0,\n      \"bytes\" : 0\n    },\n    \"updating\" : {\n      \"responses\" : 0,\n      \"bytes\" : 0\n    },\n    \"revalidated\" : {\n      \"responses\" : 0,\n      \"bytes\" : 0\n    },\n    \"miss\" : {\n      \"responses\" : 1619201,\n      \"bytes\" : 53841943822\n    },\n    \"expired\" : {\n      \"responses\" : 45859,\n      \"bytes\" : 1656847080,\n      \"responses_written\" : 44992,\n      \"bytes_written\" : 1641825173\n    },\n    \"bypass\" : {\n      \"responses\" : 200187,\n      \"bytes\" : 5510647548,\n      \"responses_written\" : 200173,\n      \"bytes_written\" : 44992\n    }\n  }\n  ```\n\n- HTTP Connections Limiting:\n\n  `passed` (`integer`)  \n  The total number of connections that were neither limited nor accounted as limited.\n\n  `rejected` (`integer`)  \n  The total number of connections that were rejected.\n\n  `rejected_dry_run` (`integer`)  \n  The total number of connections accounted as rejected in the [dry run](ngx_http_limit_conn_module#limit_conn_dry_run) mode.\n\n  Example:\n\n  ``` nginx\n  {\n    \"passed\" : 15,\n    \"rejected\" : 0,\n    \"rejected_dry_run\" : 2\n  }\n  ```\n\n- HTTP Requests Rate Limiting:\n\n  `passed` (`integer`)  \n  The total number of requests that were neither limited nor accounted as limited.\n\n  `delayed` (`integer`)  \n  The total number of requests that were delayed.\n\n  `rejected` (`integer`)  \n  The total number of requests that were rejected.\n\n  `delayed_dry_run` (`integer`)  \n  The total number of requests accounted as delayed in the [dry run](ngx_http_limit_req_module#limit_req_dry_run) mode.\n\n  `rejected_dry_run` (`integer`)  \n  The total number of requests accounted as rejected in the [dry run](ngx_http_limit_req_module#limit_req_dry_run) mode.\n\n  Example:\n\n  ``` nginx\n  {\n    \"passed\" : 15,\n    \"delayed\" : 4,\n    \"rejected\" : 0,\n    \"delayed_dry_run\" : 1,\n    \"rejected_dry_run\" : 2\n  }\n  ```\n\n- HTTP Upstream:\n\n  `peers`  \n  An array of:\n\n  `id` (`integer`)  \n  The ID of the server.\n\n  `server` (`string`)  \n  An [address](ngx_http_upstream_module#server) of the server.\n\n  `service` (`string`)  \n  The [service](ngx_http_upstream_module#service) parameter value of the [server](ngx_http_upstream_module#server) directive.\n\n  `name` (`string`)  \n  The name of the server specified in the [server](ngx_http_upstream_module#server) directive.\n\n  `backup` (`boolean`)  \n  A boolean value indicating whether the server is a [backup](ngx_http_upstream_module#backup) server.\n\n  `weight` (`integer`)  \n  [Weight](ngx_http_upstream_module#weight) of the server.\n\n  `state` (`string`)  \n  Current state, which may be one of “`up`”, “`draining`”, “`down`”, “`unavail`”, “`checking`”, and “`unhealthy`”.\n\n  `active` (`integer`)  \n  The current number of active connections.\n\n  `ssl`  \n  `handshakes` (`integer`)  \n  The total number of successful SSL handshakes.\n\n  `handshakes_failed` (`integer`)  \n  The total number of failed SSL handshakes.\n\n  `session_reuses` (`integer`)  \n  The total number of session reuses during SSL handshake.\n\n  `no_common_protocol` (`integer`)  \n  The number of SSL handshakes failed because of no common protocol.\n\n  `handshake_timeout` (`integer`)  \n  The number of SSL handshakes failed because of a timeout.\n\n  `peer_rejected_cert` (`integer`)  \n  The number of failed SSL handshakes when nginx presented the certificate to the upstream server but it was rejected with a corresponding alert message.\n\n  `verify_failures`  \n  SSL certificate verification errors\n\n  `expired_cert` (`integer`)  \n  An expired or not yet valid certificate was presented by an upstream server.\n\n  `revoked_cert` (`integer`)  \n  A revoked certificate was presented by an upstream server.\n\n  `hostname_mismatch` (`integer`)  \n  Server's certificate doesn't match the hostname.\n\n  `other` (`integer`)  \n  Other SSL certificate verification errors.\n\n  `max_conns` (`integer`)  \n  The [max_conns](ngx_http_upstream_module#max_conns) limit for the server.\n\n  `requests` (`integer`)  \n  The total number of client requests forwarded to this server.\n\n  `responses`  \n  `1xx` (`integer`)  \n  The number of responses with “`1xx`” status codes.\n\n  `2xx` (`integer`)  \n  The number of responses with “`2xx`” status codes.\n\n  `3xx` (`integer`)  \n  The number of responses with “`3xx`” status codes.\n\n  `4xx` (`integer`)  \n  The number of responses with “`4xx`” status codes.\n\n  `5xx` (`integer`)  \n  The number of responses with “`5xx`” status codes.\n\n  `codes`  \n  The number of responses per each status code.\n\n  `codeNumber` (`integer`)  \n  The number of responses with this particular status code.\n\n  `total` (`integer`)  \n  The total number of responses obtained from this server.\n\n  `sent` (`integer`)  \n  The total number of bytes sent to this server.\n\n  `received` (`integer`)  \n  The total number of bytes received from this server.\n\n  `fails` (`integer`)  \n  The total number of unsuccessful attempts to communicate with the server.\n\n  `unavail` (`integer`)  \n  How many times the server became unavailable for client requests (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](ngx_http_upstream_module#max_fails) threshold.\n\n  `health_checks`  \n  `checks` (`integer`)  \n  The total number of [health check](ngx_http_upstream_hc_module#health_check) requests made.\n\n  `fails` (`integer`)  \n  The number of failed health checks.\n\n  `unhealthy` (`integer`)  \n  How many times the server became unhealthy (state “`unhealthy`”).\n\n  `last_passed` (`boolean`)  \n  Boolean indicating if the last health check request was successful and passed [tests](ngx_http_upstream_hc_module#match).\n\n  `downtime` (`integer`)  \n  Total time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n\n  `downstart` (`string`)  \n  The time when the server became “`unavail`”, “`checking`”, or “`unhealthy`”, in the ISO 8601 format with millisecond resolution.\n\n  `selected` (`string`)  \n  The time when the server was last selected to process a request, in the ISO 8601 format with millisecond resolution.\n\n  `header_time` (`integer`)  \n  The average time to get the [response header](ngx_http_upstream_module#var_upstream_header_time) from the server.\n\n  `response_time` (`integer`)  \n  The average time to get the [full response](ngx_http_upstream_module#var_upstream_response_time) from the server.\n\n  `keepalive` (`integer`)  \n  The current number of idle [keepalive](ngx_http_upstream_module#keepalive) connections.\n\n  `zombies` (`integer`)  \n  The current number of servers removed from the group but still processing active client requests.\n\n  `zone` (`string`)  \n  The name of the shared memory [zone](ngx_http_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n  `queue`  \n  For the requests [queue](ngx_http_upstream_module#queue), the following data are provided:\n\n  `size` (`integer`)  \n  The current number of requests in the queue.\n\n  `max_size` (`integer`)  \n  The maximum number of requests that can be in the queue at the same time.\n\n  `overflows` (`integer`)  \n  The total number of requests rejected due to the queue overflow.\n\n  Example:\n\n  ``` nginx\n  {\n    \"upstream_backend\" : {\n      \"peers\" : [\n        {\n          \"id\" : 0,\n          \"server\" : \"10.0.0.1:8088\",\n          \"name\" : \"10.0.0.1:8088\",\n          \"backup\" : false,\n          \"weight\" : 5,\n          \"state\" : \"up\",\n          \"active\" : 0,\n          \"ssl\" : {\n            \"handshakes\" : 620311,\n            \"handshakes_failed\" : 3432,\n            \"session_reuses\" : 36442,\n            \"no_common_protocol\" : 4,\n            \"handshake_timeout\" : 0,\n            \"peer_rejected_cert\" : 0,\n            \"verify_failures\" : {\n              \"expired_cert\" : 2,\n              \"revoked_cert\" : 1,\n              \"hostname_mismatch\" : 2,\n              \"other\" : 1\n            }\n          },\n          \"max_conns\" : 20,\n          \"requests\" : 667231,\n          \"header_time\" : 20,\n          \"response_time\" : 36,\n          \"responses\" : {\n            \"1xx\" : 0,\n            \"2xx\" : 666310,\n            \"3xx\" : 0,\n            \"4xx\" : 915,\n            \"5xx\" : 6,\n            \"codes\" : {\n              \"200\" : 666310,\n              \"404\" : 915,\n              \"503\" : 6\n            },\n            \"total\" : 667231\n          },\n          \"sent\" : 251946292,\n          \"received\" : 19222475454,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26214,\n            \"fails\" : 0,\n            \"unhealthy\" : 0,\n            \"last_passed\" : true\n          },\n          \"downtime\" : 0,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        },\n        {\n          \"id\" : 1,\n          \"server\" : \"10.0.0.1:8089\",\n          \"name\" : \"10.0.0.1:8089\",\n          \"backup\" : true,\n          \"weight\" : 1,\n          \"state\" : \"unhealthy\",\n          \"active\" : 0,\n          \"max_conns\" : 20,\n          \"requests\" : 0,\n          \"responses\" : {\n            \"1xx\" : 0,\n            \"2xx\" : 0,\n            \"3xx\" : 0,\n            \"4xx\" : 0,\n            \"5xx\" : 0,\n            \"codes\" : {\n            },\n            \"total\" : 0\n          },\n          \"sent\" : 0,\n          \"received\" : 0,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26284,\n            \"fails\" : 26284,\n            \"unhealthy\" : 1,\n            \"last_passed\" : false\n          },\n          \"downtime\" : 262925617,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        }\n      ],\n      \"keepalive\" : 0,\n      \"zombies\" : 0,\n      \"zone\" : \"upstream_backend\"\n    }\n  }\n  ```\n\n- HTTP Upstream Server:\n\n  Dynamically configurable parameters of an HTTP upstream [server](ngx_http_upstream_module#server):\n  `id` (`integer`)  \n  The ID of the HTTP upstream server. The ID is assigned automatically and cannot be changed.\n\n  `server` (`string`)  \n  Same as the [address](ngx_http_upstream_module#server) parameter of the HTTP upstream server. When adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx. This requires the [resolver](ngx_http_core_module#resolver) directive in the “`http`” block. See also the [resolve](ngx_http_upstream_module#resolve) parameter of the HTTP upstream server.\n\n  `service` (`string`)  \n  Same as the [service](ngx_http_upstream_module#service) parameter of the HTTP upstream server. This parameter cannot be changed.\n\n  `weight` (`integer`)  \n  Same as the [weight](ngx_http_upstream_module#weight) parameter of the HTTP upstream server.\n\n  `max_conns` (`integer`)  \n  Same as the [max_conns](ngx_http_upstream_module#max_conns) parameter of the HTTP upstream server.\n\n  `max_fails` (`integer`)  \n  Same as the [max_fails](ngx_http_upstream_module#max_fails) parameter of the HTTP upstream server.\n\n  `fail_timeout` (`string`)  \n  Same as the [fail_timeout](ngx_http_upstream_module#fail_timeout) parameter of the HTTP upstream server.\n\n  `slow_start` (`string`)  \n  Same as the [slow_start](ngx_http_upstream_module#slow_start) parameter of the HTTP upstream server.\n\n  `route` (`string`)  \n  Same as the [route](ngx_http_upstream_module#route) parameter of the HTTP upstream server.\n\n  `backup` (`boolean`)  \n  When `true`, adds a [backup](ngx_http_upstream_module#backup) server. This parameter cannot be changed.\n\n  `down` (`boolean`)  \n  Same as the [down](ngx_http_upstream_module#down) parameter of the HTTP upstream server.\n\n  `drain` (`boolean`)  \n  Same as the [drain](ngx_http_upstream_module#drain) parameter of the HTTP upstream server.\n\n  `parent` (`string`)  \n  Parent server ID of the resolved server. The ID is assigned automatically and cannot be changed.\n\n  `host` (`string`)  \n  Hostname of the resolved server. The hostname is assigned automatically and cannot be changed.\n\n  Example:\n\n  ``` nginx\n  {\n    \"id\" : 1,\n    \"server\" : \"10.0.0.1:8089\",\n    \"weight\" : 4,\n    \"max_conns\" : 0,\n    \"max_fails\" : 0,\n    \"fail_timeout\" : \"10s\",\n    \"slow_start\" : \"10s\",\n    \"route\" : \"\",\n    \"backup\" : true,\n    \"down\" : true\n  }\n  ```\n\n- HTTP Keyval Shared Memory Zone:\n\n  Contents of an HTTP keyval shared memory zone when using the GET method.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : \"value3\"\n  }\n  ```\n\n- HTTP Keyval Shared Memory Zone:\n\n  Contents of an HTTP keyval shared memory zone when using the POST or PATCH methods.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : {\n      \"value\" : \"value3\",\n      \"expire\" : 30000\n    }\n  }\n  ```\n\n- Stream Server Zone:\n\n  `processing` (`integer`)  \n  The number of client connections that are currently being processed.\n\n  `connections` (`integer`)  \n  The total number of connections accepted from clients.\n\n  `sessions`  \n  The total number of completed sessions, and the number of sessions completed with status codes “`2xx`”, “`4xx`”, or “`5xx`”.\n\n  `2xx` (`integer`)  \n  The total number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) “`2xx`”.\n\n  `4xx` (`integer`)  \n  The total number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) “`4xx`”.\n\n  `5xx` (`integer`)  \n  The total number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) “`5xx`”.\n\n  `total` (`integer`)  \n  The total number of completed client sessions.\n\n  `discarded` (`integer`)  \n  The total number of connections completed without creating a session.\n\n  `received` (`integer`)  \n  The total number of bytes received from clients.\n\n  `sent` (`integer`)  \n  The total number of bytes sent to clients.\n\n  `ssl`  \n  `handshakes` (`integer`)  \n  The total number of successful SSL handshakes.\n\n  `handshakes_failed` (`integer`)  \n  The total number of failed SSL handshakes.\n\n  `session_reuses` (`integer`)  \n  The total number of session reuses during SSL handshake.\n\n  `no_common_protocol` (`integer`)  \n  The number of SSL handshakes failed because of no common protocol.\n\n  `no_common_cipher` (`integer`)  \n  The number of SSL handshakes failed because of no shared cipher.\n\n  `handshake_timeout` (`integer`)  \n  The number of SSL handshakes failed because of a timeout.\n\n  `peer_rejected_cert` (`integer`)  \n  The number of failed SSL handshakes when nginx presented the certificate to the client but it was rejected with a corresponding alert message.\n\n  `verify_failures`  \n  SSL certificate verification errors\n\n  `no_cert` (`integer`)  \n  A client did not provide the required certificate.\n\n  `expired_cert` (`integer`)  \n  An expired or not yet valid certificate was presented by a client.\n\n  `revoked_cert` (`integer`)  \n  A revoked certificate was presented by a client.\n\n  `other` (`integer`)  \n  Other SSL certificate verification errors.\n\n  Example:\n\n  ``` nginx\n  {\n    \"dns\" : {\n      \"processing\" : 1,\n      \"connections\" : 155569,\n      \"sessions\" : {\n        \"2xx\" : 155564,\n        \"4xx\" : 0,\n        \"5xx\" : 0,\n        \"total\" : 155569\n      },\n      \"discarded\" : 0,\n      \"received\" : 4200363,\n      \"sent\" : 20489184,\n      \"ssl\" : {\n        \"handshakes\" : 76455,\n        \"handshakes_failed\" : 432,\n        \"session_reuses\" : 28770,\n        \"no_common_protocol\" : 4,\n        \"no_common_cipher\" : 2,\n        \"handshake_timeout\" : 0,\n        \"peer_rejected_cert\" : 0,\n        \"verify_failures\" : {\n          \"no_cert\" : 0,\n          \"expired_cert\" : 2,\n          \"revoked_cert\" : 1,\n          \"other\" : 1\n        }\n      }\n    }\n  }\n  ```\n\n- Stream Connections Limiting:\n\n  `passed` (`integer`)  \n  The total number of connections that were neither limited nor accounted as limited.\n\n  `rejected` (`integer`)  \n  The total number of connections that were rejected.\n\n  `rejected_dry_run` (`integer`)  \n  The total number of connections accounted as rejected in the [dry run](../stream/ngx_stream_limit_conn_module#limit_conn_dry_run) mode.\n\n  Example:\n\n  ``` nginx\n  {\n    \"passed\" : 15,\n    \"rejected\" : 0,\n    \"rejected_dry_run\" : 2\n  }\n  ```\n\n- Stream Upstream:\n\n  `peers`  \n  An array of:\n\n  `id` (`integer`)  \n  The ID of the server.\n\n  `server` (`string`)  \n  An [address](../stream/ngx_stream_upstream_module#server) of the server.\n\n  `service` (`string`)  \n  The [service](../stream/ngx_stream_upstream_module#service) parameter value of the [server](../stream/ngx_stream_upstream_module#server) directive.\n\n  `name` (`string`)  \n  The name of the server specified in the [server](../stream/ngx_stream_upstream_module#server) directive.\n\n  `backup` (`boolean`)  \n  A boolean value indicating whether the server is a [backup](../stream/ngx_stream_upstream_module#backup) server.\n\n  `weight` (`integer`)  \n  [Weight](../stream/ngx_stream_upstream_module#weight) of the server.\n\n  `state` (`string`)  \n  Current state, which may be one of “`up`”, “`down`”, “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n  `active` (`integer`)  \n  The current number of connections.\n\n  `ssl`  \n  `handshakes` (`integer`)  \n  The total number of successful SSL handshakes.\n\n  `handshakes_failed` (`integer`)  \n  The total number of failed SSL handshakes.\n\n  `session_reuses` (`integer`)  \n  The total number of session reuses during SSL handshake.\n\n  `no_common_protocol` (`integer`)  \n  The number of SSL handshakes failed because of no common protocol.\n\n  `handshake_timeout` (`integer`)  \n  The number of SSL handshakes failed because of a timeout.\n\n  `peer_rejected_cert` (`integer`)  \n  The number of failed SSL handshakes when nginx presented the certificate to the upstream server but it was rejected with a corresponding alert message.\n\n  `verify_failures`  \n  SSL certificate verification errors\n\n  `expired_cert` (`integer`)  \n  An expired or not yet valid certificate was presented by an upstream server.\n\n  `revoked_cert` (`integer`)  \n  A revoked certificate was presented by an upstream server.\n\n  `hostname_mismatch` (`integer`)  \n  Server's certificate doesn't match the hostname.\n\n  `other` (`integer`)  \n  Other SSL certificate verification errors.\n\n  `max_conns` (`integer`)  \n  The [max_conns](../stream/ngx_stream_upstream_module#max_conns) limit for the server.\n\n  `connections` (`integer`)  \n  The total number of client connections forwarded to this server.\n\n  `connect_time` (`integer`)  \n  The average time to connect to the upstream server.\n\n  `first_byte_time` (`integer`)  \n  The average time to receive the first byte of data.\n\n  `response_time` (`integer`)  \n  The average time to receive the last byte of data.\n\n  `sent` (`integer`)  \n  The total number of bytes sent to this server.\n\n  `received` (`integer`)  \n  The total number of bytes received from this server.\n\n  `fails` (`integer`)  \n  The total number of unsuccessful attempts to communicate with the server.\n\n  `unavail` (`integer`)  \n  How many times the server became unavailable for client connections (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](../stream/ngx_stream_upstream_module#max_fails) threshold.\n\n  `health_checks`  \n  `checks` (`integer`)  \n  The total number of [health check](../stream/ngx_stream_upstream_hc_module#health_check) requests made.\n\n  `fails` (`integer`)  \n  The number of failed health checks.\n\n  `unhealthy` (`integer`)  \n  How many times the server became unhealthy (state “`unhealthy`”).\n\n  `last_passed` (`boolean`)  \n  Boolean indicating whether the last health check request was successful and passed [tests](../stream/ngx_stream_upstream_hc_module#match).\n\n  `downtime` (`integer`)  \n  Total time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n\n  `downstart` (`string`)  \n  The time when the server became “`unavail`”, “`checking`”, or “`unhealthy`”, in the ISO 8601 format with millisecond resolution.\n\n  `selected` (`string`)  \n  The time when the server was last selected to process a connection, in the ISO 8601 format with millisecond resolution.\n\n  `zombies` (`integer`)  \n  The current number of servers removed from the group but still processing active client connections.\n\n  `zone` (`string`)  \n  The name of the shared memory [zone](../stream/ngx_stream_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n  Example:\n\n  ``` nginx\n  {\n    \"dns\" : {\n      \"peers\" : [\n        {\n          \"id\" : 0,\n          \"server\" : \"10.0.0.1:12347\",\n          \"name\" : \"10.0.0.1:12347\",\n          \"backup\" : false,\n          \"weight\" : 5,\n          \"state\" : \"up\",\n          \"active\" : 0,\n          \"ssl\" : {\n            \"handshakes\" : 200,\n            \"handshakes_failed\" : 4,\n            \"session_reuses\" : 189,\n            \"no_common_protocol\" : 4,\n            \"handshake_timeout\" : 0,\n            \"peer_rejected_cert\" : 0,\n            \"verify_failures\" : {\n              \"expired_cert\" : 2,\n              \"revoked_cert\" : 1,\n              \"hostname_mismatch\" : 2,\n              \"other\" : 1\n            }\n          },\n          \"max_conns\" : 50,\n          \"connections\" : 667231,\n          \"sent\" : 251946292,\n          \"received\" : 19222475454,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26214,\n            \"fails\" : 0,\n            \"unhealthy\" : 0,\n            \"last_passed\" : true\n          },\n          \"downtime\" : 0,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        },\n        {\n          \"id\" : 1,\n          \"server\" : \"10.0.0.1:12348\",\n          \"name\" : \"10.0.0.1:12348\",\n          \"backup\" : true,\n          \"weight\" : 1,\n          \"state\" : \"unhealthy\",\n          \"active\" : 0,\n          \"max_conns\" : 50,\n          \"connections\" : 0,\n          \"sent\" : 0,\n          \"received\" : 0,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26284,\n            \"fails\" : 26284,\n            \"unhealthy\" : 1,\n            \"last_passed\" : false\n          },\n          \"downtime\" : 262925617,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        }\n      ],\n      \"zombies\" : 0,\n      \"zone\" : \"dns\"\n    }\n  }\n  ```\n\n- Stream Upstream Server:\n\n  Dynamically configurable parameters of a stream upstream [server](../stream/ngx_stream_upstream_module#server):\n  `id` (`integer`)  \n  The ID of the stream upstream server. The ID is assigned automatically and cannot be changed.\n\n  `server` (`string`)  \n  Same as the [address](../stream/ngx_stream_upstream_module#server) parameter of the stream upstream server. When adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx. This requires the [resolver](../stream/ngx_stream_core_module#resolver) directive in the “`stream`” block. See also the [resolve](../stream/ngx_stream_upstream_module#resolve) parameter of the stream upstream server.\n\n  `service` (`string`)  \n  Same as the [service](../stream/ngx_stream_upstream_module#service) parameter of the stream upstream server. This parameter cannot be changed.\n\n  `weight` (`integer`)  \n  Same as the [weight](../stream/ngx_stream_upstream_module#weight) parameter of the stream upstream server.\n\n  `max_conns` (`integer`)  \n  Same as the [max_conns](../stream/ngx_stream_upstream_module#max_conns) parameter of the stream upstream server.\n\n  `max_fails` (`integer`)  \n  Same as the [max_fails](../stream/ngx_stream_upstream_module#max_fails) parameter of the stream upstream server.\n\n  `fail_timeout` (`string`)  \n  Same as the [fail_timeout](../stream/ngx_stream_upstream_module#fail_timeout) parameter of the stream upstream server.\n\n  `slow_start` (`string`)  \n  Same as the [slow_start](../stream/ngx_stream_upstream_module#slow_start) parameter of the stream upstream server.\n\n  `backup` (`boolean`)  \n  When `true`, adds a [backup](../stream/ngx_stream_upstream_module#backup) server. This parameter cannot be changed.\n\n  `down` (`boolean`)  \n  Same as the [down](../stream/ngx_stream_upstream_module#down) parameter of the stream upstream server.\n\n  `parent` (`string`)  \n  Parent server ID of the resolved server. The ID is assigned automatically and cannot be changed.\n\n  `host` (`string`)  \n  Hostname of the resolved server. The hostname is assigned automatically and cannot be changed.\n\n  Example:\n\n  ``` nginx\n  {\n    \"id\" : 0,\n    \"server\" : \"10.0.0.1:12348\",\n    \"weight\" : 1,\n    \"max_conns\" : 0,\n    \"max_fails\" : 1,\n    \"fail_timeout\" : \"10s\",\n    \"slow_start\" : 0,\n    \"backup\" : false,\n    \"down\" : false\n  }\n  ```\n\n- Stream Keyval Shared Memory Zone:\n\n  Contents of a stream keyval shared memory zone when using the GET method.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : \"value3\"\n  }\n  ```\n\n- Stream Keyval Shared Memory Zone:\n\n  Contents of a stream keyval shared memory zone when using the POST or PATCH methods.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : {\n      \"value\" : \"value3\",\n      \"expire\" : 30000\n    }\n  }\n  ```\n\n- Stream Zone Sync Node:\n\n  `zones`  \n  Synchronization information per each shared memory zone.\n\n  A collection of \"[Sync Zone](#def_nginx_stream_zone_sync_zone)\" objects\n\n  `status`  \n  Synchronization information per node in a cluster.\n\n  `bytes_in` (`integer`)  \n  The number of bytes received by this node.\n\n  `msgs_in` (`integer`)  \n  The number of messages received by this node.\n\n  `msgs_out` (`integer`)  \n  The number of messages sent by this node.\n\n  `bytes_out` (`integer`)  \n  The number of bytes sent by this node.\n\n  `nodes_online` (`integer`)  \n  The number of peers this node is connected to.\n\n  Example:\n\n  ``` nginx\n  {\n    \"zones\" : {\n      \"zone1\" : {\n        \"records_pending\" : 2061,\n        \"records_total\" : 260575\n      },\n      \"zone2\" : {\n        \"records_pending\" : 0,\n        \"records_total\" : 14749\n      }\n    },\n    \"status\" : {\n      \"bytes_in\" : 1364923761,\n      \"msgs_in\" : 337236,\n      \"msgs_out\" : 346717,\n      \"bytes_out\" : 1402765472,\n      \"nodes_online\" : 15\n    }\n  }\n  ```\n\n- Sync Zone:\n\n  Synchronization status of a shared memory zone.\n  `records_pending` (`integer`)  \n  The number of records that need to be sent to the cluster.\n\n  `records_total` (`integer`)  \n  The total number of records stored in the shared memory zone.\n\n- Resolver Zone:\n\n  Statistics of DNS requests and responses per particular [resolver zone](ngx_http_core_module#resolver_status_zone).\n  `requests`  \n  `name` (`integer`)  \n  The total number of requests to resolve names to addresses.\n\n  `srv` (`integer`)  \n  The total number of requests to resolve SRV records.\n\n  `addr` (`integer`)  \n  The total number of requests to resolve addresses to names.\n\n  `responses`  \n  `noerror` (`integer`)  \n  The total number of successful responses.\n\n  `formerr` (`integer`)  \n  The total number of FORMERR (`Format error`) responses.\n\n  `servfail` (`integer`)  \n  The total number of SERVFAIL (`Server failure`) responses.\n\n  `nxdomain` (`integer`)  \n  The total number of NXDOMAIN (`Host not found`) responses.\n\n  `notimp` (`integer`)  \n  The total number of NOTIMP (`Unimplemented`) responses.\n\n  `refused` (`integer`)  \n  The total number of REFUSED (`Operation refused`) responses.\n\n  `timedout` (`integer`)  \n  The total number of timed out requests.\n\n  `unknown` (`integer`)  \n  The total number of requests completed with an unknown error.\n\n  Example:\n\n  ``` nginx\n  {\n    \"resolver_zone1\" : {\n      \"requests\" : {\n        \"name\" : 25460,\n        \"srv\" : 130,\n        \"addr\" : 2580\n      },\n      \"responses\" : {\n        \"noerror\" : 26499,\n        \"formerr\" : 0,\n        \"servfail\" : 3,\n        \"nxdomain\" : 0,\n        \"notimp\" : 0,\n        \"refused\" : 0,\n        \"timedout\" : 243,\n        \"unknown\" : 478\n      }\n    }\n  }\n  ```\n\n- Worker process:\n\n  Statistics per each worker process.\n  `id` (`integer`)  \n  The ID of the worker process.\n\n  `pid` (`integer`)  \n  The PID identifier of the worker process used by the operating system.\n\n  `connections`  \n  The number of accepted, dropped, active, and idle connections per worker process.\n\n  `accepted` (`integer`)  \n  The total number of client connections accepted by the worker process.\n\n  `dropped` (`integer`)  \n  The total number of client connections dropped by the worker process.\n\n  `active` (`integer`)  \n  The current number of active client connections that are currently being handled by the worker process.\n\n  `idle` (`integer`)  \n  The number of idle client connections that are currently being handled by the worker process.\n\n  `http`  \n  `requests`  \n  The total number of client requests handled by the worker process.\n\n  `total` (`integer`)  \n  The total number of client requests received by the worker process.\n\n  `current` (`integer`)  \n  The current number of client requests that are currently being processed by the worker process.\n\n  Example:\n\n  ``` nginx\n  {\n    \"id\" : 0,\n    \"pid\" : 32212,\n    \"connections\" : {\n      \"accepted\" : 1,\n      \"dropped\" : 0,\n      \"active\" : 1,\n      \"idle\" : 0\n    },\n    \"http\" : {\n      \"requests\" : {\n        \"total\" : 15,\n        \"current\" : 1\n      }\n    }\n  }\n  ```\n\n- Error:\n\n  nginx error object.\n  `error`  \n  `status` (`integer`)  \n  HTTP error code.\n\n  `text` (`string`)  \n  Error description.\n\n  `code` (`string`)  \n  Internal nginx error code.\n\n  `request_id` (`string`)  \n  The ID of the request, equals the value of the [$request_id](ngx_http_core_module#var_request_id) variable.\n\n  `href` (`string`)  \n  Link to reference documentation.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_api_module.html](https://nginx.org/en/docs/http/ngx_http_api_module.html)"
- name: ngx_http_auth_basic_module
  id: http/ngx_http_auth_basic_module
  summary: The ngx_http_auth_basic_module module allows limiting access to resources by validating the user name and password using the “HTTP Basic Authentication” protocol
  description: "# Module ngx_http_auth_basic_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [auth_basic](#auth_basic)\n- [auth_basic_user_file](#auth_basic_user_file)\n\nThe `ngx_http_auth_basic_module` module allows limiting access to resources by validating the user name and password using the “HTTP Basic Authentication” protocol.\n\nAccess can also be limited by [address](ngx_http_access_module), by the [result of subrequest](ngx_http_auth_request_module), or by [JWT](ngx_http_auth_jwt_module). Simultaneous limitation of access by address and by password is controlled by the [satisfy](ngx_http_core_module#satisfy) directive.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    auth_basic           \"closed site\";\n    auth_basic_user_file conf/htpasswd;\n}\n```\n\n#### Directives\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`auth_basic`**` `*`string`*` | off;`       |\n| Default: | `auth_basic off;`                            |\n| Context: | `http`, `server`, `location`, `limit_except` |\n\nEnables validation of user name and password using the “HTTP Basic Authentication” protocol. The specified parameter is used as a *`realm`*. Parameter value can contain variables (1.3.10, 1.2.7). The special value `off` cancels the effect of the `auth_basic` directive inherited from the previous configuration level.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`auth_basic_user_file`**` `*`file`*`;`     |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`, `limit_except` |\n\nSpecifies a file that keeps user names and passwords, in the following format:\n\n``` nginx\n# comment\nname1:password1\nname2:password2:comment\nname3:password3\n```\n\nThe *`file`* name can contain variables.\n\nThe following password types are supported:\n\n- encrypted with the `crypt()` function; can be generated using the “`htpasswd`” utility from the Apache HTTP Server distribution or the “`openssl passwd`” command;\n\n- hashed with the Apache variant of the MD5-based password algorithm (apr1); can be generated with the same tools;\n\n- specified by the “`{`*`scheme`*`}`*`data`*” syntax (1.0.3+) as described in [RFC 2307](https://datatracker.ietf.org/doc/html/rfc2307#section-5.3); currently implemented schemes include `PLAIN` (an example one, should not be used), `SHA` (1.3.13) (plain SHA-1 hashing, should not be used) and `SSHA` (salted SHA-1 hashing, used by some software packages, notably OpenLDAP and Dovecot).\n\nSupport for `SHA` scheme was added only to aid in migration from other web servers. It should not be used for new passwords, since unsalted SHA-1 hashing that it employs is vulnerable to [rainbow table](http://en.wikipedia.org/wiki/Rainbow_attack) attacks.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html](https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)"
- name: ngx_http_auth_jwt_module
  id: http/ngx_http_auth_jwt_module
  summary: The ngx_http_auth_jwt_module module (1.11.3) implements client authorization by validating the provided JSON Web Token (JWT) using the specified keys
  description: "# Module ngx_http_auth_jwt_module\n\n- [Supported Algorithms](#algorithms)\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [auth_jwt](#auth_jwt)\n- [auth_jwt_claim_set](#auth_jwt_claim_set)\n- [auth_jwt_header_set](#auth_jwt_header_set)\n- [auth_jwt_key_cache](#auth_jwt_key_cache)\n- [auth_jwt_key_file](#auth_jwt_key_file)\n- [auth_jwt_key_request](#auth_jwt_key_request)\n- [auth_jwt_leeway](#auth_jwt_leeway)\n- [auth_jwt_type](#auth_jwt_type)\n- [auth_jwt_require](#auth_jwt_require)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_auth_jwt_module` module (1.11.3) implements client authorization by validating the provided [JSON Web Token](https://datatracker.ietf.org/doc/html/rfc7519) (JWT) using the specified keys. The module supports [JSON Web Signature](https://datatracker.ietf.org/doc/html/rfc7515) (JWS), [JSON Web Encryption](https://datatracker.ietf.org/doc/html/rfc7516) (JWE) (1.19.7), and Nested JWT (1.21.0). The module can be used for [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html) authentication.\n\nThe module may be combined with other access modules, such as [ngx_http_access_module](ngx_http_access_module), [ngx_http_auth_basic_module](ngx_http_auth_basic_module), and [ngx_http_auth_request_module](ngx_http_auth_request_module), via the [satisfy](ngx_http_core_module#satisfy) directive.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Supported Algorithms\n\nThe module supports the following JSON Web [Algorithms](https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms).\n\nJWS algorithms:\n\n- HS256, HS384, HS512\n- RS256, RS384, RS512\n- ES256, ES384, ES512\n- EdDSA (Ed25519 and Ed448 signatures) (1.15.7)\n\nPrior to version 1.13.7, only HS256, RS256, ES256 algorithms were supported.\n\nJWE content encryption algorithms (1.19.7):\n\n- A128CBC-HS256, A192CBC-HS384, A256CBC-HS512\n- A128GCM, A192GCM, A256GCM\n\nJWE key management algorithms (1.19.9):\n\n- A128KW, A192KW, A256KW\n- A128GCMKW, A192GCMKW, A256GCMKW\n- dir - direct use of a shared symmetric key as the content encryption key\n- RSA-OAEP, RSA-OAEP-256, RSA-OAEP-384, RSA-OAEP-512 (1.21.0)\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    auth_jwt          \"closed site\";\n    auth_jwt_key_file conf/keys.json;\n}\n```\n\n#### Directives\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`auth_jwt`**` `*`string`*` [token=`*`$variable`*`] | off;` |\n| Default: | `auth_jwt off;`                                              |\n| Context: | `http`, `server`, `location`, `limit_except`                 |\n\nEnables validation of JSON Web Token. The specified *`string`* is used as a `realm`. Parameter value can contain variables.\n\nThe optional `token` parameter specifies a variable that contains JSON Web Token. By default, JWT is passed in the “Authorization” header as a [Bearer Token](https://datatracker.ietf.org/doc/html/rfc6750). JWT may be also passed as a cookie or a part of a query string:\n\n``` nginx\nauth_jwt \"closed site\" token=$cookie_auth_token;\n```\n\nThe special value `off` cancels the effect of the `auth_jwt` directive inherited from the previous configuration level.\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`auth_jwt_claim_set`**` `*`$variable`*` `*`name`*` ...;` |\n| Default: | —                                                          |\n| Context: | `http`                                                     |\n\nThis directive appeared in version 1.11.10.\n\nSets the *`variable`* to a JWT claim parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.\n\n``` nginx\nauth_jwt_claim_set $email info e-mail;\nauth_jwt_claim_set $job info \"job title\";\n```\n\nPrior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.\n\nVariable values for tokens encrypted with JWE are available only after decryption which occurs during the [Access](../dev/development_guide#http_phases) phase.\n\n|          |                                                             |\n|----------|-------------------------------------------------------------|\n| Syntax:  | **`auth_jwt_header_set`**` `*`$variable`*` `*`name`*` ...;` |\n| Default: | —                                                           |\n| Context: | `http`                                                      |\n\nThis directive appeared in version 1.11.10.\n\nSets the *`variable`* to a JOSE header parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.\n\nPrior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`auth_jwt_key_cache`**` `*`time`*`;` |\n| Default: | `auth_jwt_key_cache 0;`                |\n| Context: | `http`, `server`, `location`           |\n\nThis directive appeared in version 1.21.4.\n\nEnables or disables caching of keys obtained from a [file](#auth_jwt_key_file) or from a [subrequest](#auth_jwt_key_request), and sets caching time for them. Caching of keys obtained from variables is not supported. By default, caching of keys is disabled.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`auth_jwt_key_file`**` `*`file`*`;`        |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`, `limit_except` |\n\nSpecifies a *`file`* in [JSON Web Key Set](https://datatracker.ietf.org/doc/html/rfc7517#section-5) format for validating JWT signature. Parameter value can contain variables.\n\nSeveral `auth_jwt_key_file` directives can be specified on the same level (1.21.1):\n\n``` nginx\nauth_jwt_key_file conf/keys.json;\nauth_jwt_key_file conf/key.jwk;\n```\n\nIf at least one of the specified keys cannot be loaded or processed, nginx will return the 500 (Internal Server Error) error.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`auth_jwt_key_request`**` `*`uri`*`;`      |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`, `limit_except` |\n\nThis directive appeared in version 1.15.6.\n\nAllows retrieving a [JSON Web Key Set](https://datatracker.ietf.org/doc/html/rfc7517#section-5) file from a subrequest for validating JWT signature and sets the URI where the subrequest will be sent to. Parameter value can contain variables. To avoid validation overhead, it is recommended to cache the key file:\n\n``` nginx\nproxy_cache_path /data/nginx/cache levels=1 keys_zone=foo:10m;\n\nserver {\n    ...\n\n    location / {\n        auth_jwt             \"closed site\";\n        auth_jwt_key_request /jwks_uri;\n    }\n\n    location = /jwks_uri {\n        internal;\n        proxy_cache foo;\n        proxy_pass  http://idp.example.com/keys;\n    }\n}\n```\n\nSeveral `auth_jwt_key_request` directives can be specified on the same level (1.21.1):\n\n``` nginx\nauth_jwt_key_request /jwks_uri;\nauth_jwt_key_request /jwks2_uri;\n```\n\nIf at least one of the specified keys cannot be loaded or processed, nginx will return the 500 (Internal Server Error) error.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`auth_jwt_leeway`**` `*`time`*`;` |\n| Default: | `auth_jwt_leeway 0s;`               |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.13.10.\n\nSets the maximum allowable leeway to compensate clock skew when verifying the [exp](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4) and [nbf](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5) JWT claims.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`auth_jwt_type`**` signed | encrypted | nested;` |\n| Default: | `auth_jwt_type signed;`                            |\n| Context: | `http`, `server`, `location`, `limit_except`       |\n\nThis directive appeared in version 1.19.7.\n\nSpecifies which type of JSON Web Token to expect: JWS (`signed`), JWE (`encrypted`), or signed and then encrypted Nested JWT (`nested`) (1.21.0).\n\n|          |                                                               |\n|----------|---------------------------------------------------------------|\n| Syntax:  | **`auth_jwt_require`**` `*`$value`*` ... [error=401 | 403] ;` |\n| Default: | —                                                             |\n| Context: | `http`, `server`, `location`, `limit_except`                  |\n\nThis directive appeared in version 1.21.2.\n\nSpecifies additional checks for JWT validation. The value can contain text, variables, and their combination, and must start with a variable (1.21.7). The authentication will succeed only if all the values are not empty and are not equal to “0”.\n\n``` nginx\nmap $jwt_claim_iss $valid_jwt_iss {\n    \"good\" 1;\n}\n...\n\nauth_jwt_require $valid_jwt_iss;\n```\n\nIf any of the checks fails, the `401` error code is returned. The optional `error` parameter (1.21.7) allows redefining the error code to `403`.\n\n#### Embedded Variables\n\nThe `ngx_http_auth_jwt_module` module supports embedded variables:\n\n`$jwt_header_`*`name`*  \nreturns the value of a specified [JOSE header](https://datatracker.ietf.org/doc/html/rfc7515#section-4)\n\n`$jwt_claim_`*`name`*  \nreturns the value of a specified [JWT claim](https://datatracker.ietf.org/doc/html/rfc7519#section-4)\n\nFor nested claims and claims including a dot (“.”), the value of the variable cannot be evaluated; the [auth_jwt_claim_set](#auth_jwt_claim_set) directive should be used instead.\n\nVariable values for tokens encrypted with JWE are available only after decryption which occurs during the [Access](../dev/development_guide#http_phases) phase.\n\n`$jwt_payload`  \nreturns the decrypted top-level payload of `nested` or `encrypted` tokens (1.21.2). For nested tokens returns the enclosed JWS token. For encrypted tokens returns JSON with claims.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html](https://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html)"
- name: ngx_http_auth_request_module
  id: http/ngx_http_auth_request_module
  summary: The ngx_http_auth_request_module module (1.5.4+) implements client authorization based on the result of a subrequest
  description: "# Module ngx_http_auth_request_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [auth_request](#auth_request)\n- [auth_request_set](#auth_request_set)\n\nThe `ngx_http_auth_request_module` module (1.5.4+) implements client authorization based on the result of a subrequest. If the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403, the access is denied with the corresponding error code. Any other response code returned by the subrequest is considered an error.\n\nFor the 401 error, the client also receives the “WWW-Authenticate” header from the subrequest response.\n\nThis module is not built by default, it should be enabled with the `--with-http_auth_request_module` configuration parameter.\n\nThe module may be combined with other access modules, such as [ngx_http_access_module](ngx_http_access_module), [ngx_http_auth_basic_module](ngx_http_auth_basic_module), and [ngx_http_auth_jwt_module](ngx_http_auth_jwt_module), via the [satisfy](ngx_http_core_module#satisfy) directive.\n\nBefore version 1.7.3, responses to authorization subrequests could not be cached (using [proxy_cache](ngx_http_proxy_module#proxy_cache), [proxy_store](ngx_http_proxy_module#proxy_store), etc.).\n\n#### Example Configuration\n\n``` nginx\nlocation /private/ {\n    auth_request /auth;\n    ...\n}\n\nlocation = /auth {\n    proxy_pass ...\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header X-Original-URI $request_uri;\n}\n```\n\n#### Directives\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`auth_request`**` `*`uri`*` | off;` |\n| Default: | `auth_request off;`                   |\n| Context: | `http`, `server`, `location`          |\n\nEnables authorization based on the result of a subrequest and sets the URI to which the subrequest will be sent.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`auth_request_set`**` `*`$variable`*` `*`value`*`;` |\n| Default: | —                                                     |\n| Context: | `http`, `server`, `location`                          |\n\nSets the request *`variable`* to the given *`value`* after the authorization request completes. The value may contain variables from the authorization request, such as `$upstream_http_*`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_auth_request_module.html](https://nginx.org/en/docs/http/ngx_http_auth_request_module.html)"
- name: ngx_http_autoindex_module
  id: http/ngx_http_autoindex_module
  summary: The ngx_http_autoindex_module module processes requests ending with the slash character (‘/’) and produces a directory listing
  description: "# Module ngx_http_autoindex_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [autoindex](#autoindex)\n- [autoindex_exact_size](#autoindex_exact_size)\n- [autoindex_format](#autoindex_format)\n- [autoindex_localtime](#autoindex_localtime)\n\nThe `ngx_http_autoindex_module` module processes requests ending with the slash character (‘`/`’) and produces a directory listing. Usually a request is passed to the `ngx_http_autoindex_module` module when the [ngx_http_index_module](ngx_http_index_module) module cannot find an index file.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    autoindex on;\n}\n```\n\n#### Directives\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`autoindex`**` on | off;`  |\n| Default: | `autoindex off;`             |\n| Context: | `http`, `server`, `location` |\n\nEnables or disables the directory listing output.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`autoindex_exact_size`**` on | off;` |\n| Default: | `autoindex_exact_size on;`             |\n| Context: | `http`, `server`, `location`           |\n\nFor the HTML [format](#autoindex_format), specifies whether exact file sizes should be output in the directory listing, or rather rounded to kilobytes, megabytes, and gigabytes.\n\n|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`autoindex_format`**` html | xml | json | jsonp;` |\n| Default: | `autoindex_format html;`                            |\n| Context: | `http`, `server`, `location`                        |\n\nThis directive appeared in version 1.7.9.\n\nSets the format of a directory listing.\n\nWhen the JSONP format is used, the name of a callback function is set with the `callback` request argument. If the argument is missing or has an empty value, then the JSON format is used.\n\nThe XML output can be transformed using the [ngx_http_xslt_module](ngx_http_xslt_module) module.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`autoindex_localtime`**` on | off;` |\n| Default: | `autoindex_localtime off;`            |\n| Context: | `http`, `server`, `location`          |\n\nFor the HTML [format](#autoindex_format), specifies whether times in the directory listing should be output in the local time zone or UTC.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_autoindex_module.html](https://nginx.org/en/docs/http/ngx_http_autoindex_module.html)"
- name: ngx_http_browser_module
  id: http/ngx_http_browser_module
  summary: $msie equals “1” if a browser was identified as MSIE of any version
  description: "# Module ngx_http_browser_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [ancient_browser](#ancient_browser)\n- [ancient_browser_value](#ancient_browser_value)\n- [modern_browser](#modern_browser)\n- [modern_browser_value](#modern_browser_value)\n\nThe `ngx_http_browser_module` module creates variables whose values depend on the value of the “User-Agent” request header field:\n\n`$modern_browser`  \nequals the value set by the [modern_browser_value](#modern_browser_value) directive, if a browser was identified as modern;\n\n`$ancient_browser`  \nequals the value set by the [ancient_browser_value](#ancient_browser_value) directive, if a browser was identified as ancient;\n\n`$msie`  \nequals “1” if a browser was identified as MSIE of any version.\n\n#### Example Configuration\n\nChoosing an index file:\n\n``` nginx\nmodern_browser_value \"modern.\";\n\nmodern_browser msie      5.5;\nmodern_browser gecko     1.0.0;\nmodern_browser opera     9.0;\nmodern_browser safari    413;\nmodern_browser konqueror 3.0;\n\nindex index.${modern_browser}html index.html;\n```\n\nRedirection for old browsers:\n\n``` nginx\nmodern_browser msie      5.0;\nmodern_browser gecko     0.9.1;\nmodern_browser opera     8.0;\nmodern_browser safari    413;\nmodern_browser konqueror 3.0;\n\nmodern_browser unlisted;\n\nancient_browser Links Lynx netscape4;\n\nif ($ancient_browser) {\n    rewrite ^ /ancient.html;\n}\n```\n\n#### Directives\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`ancient_browser`**` `*`string`*` ...;` |\n| Default: | —                                         |\n| Context: | `http`, `server`, `location`              |\n\nIf any of the specified substrings is found in the “User-Agent” request header field, the browser will be considered ancient. The special string “`netscape4`” corresponds to the regular expression “`^Mozilla/[1-4]`”.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ancient_browser_value`**` `*`string`*`;` |\n| Default: | `ancient_browser_value 1;`                  |\n| Context: | `http`, `server`, `location`                |\n\nSets a value for the `$ancient_browser` variables.\n\n|          |                                                                                      |\n|----------|--------------------------------------------------------------------------------------|\n| Syntax:  | **`modern_browser`**` `*`browser`*` `*`version`*`;` **`modern_browser`**` unlisted;` |\n| Default: | —                                                                                    |\n| Context: | `http`, `server`, `location`                                                         |\n\nSpecifies a version starting from which a browser is considered modern. A browser can be any one of the following: `msie`, `gecko` (browsers based on Mozilla), `opera`, `safari`, or `konqueror`.\n\nVersions can be specified in the following formats: X, X.X, X.X.X, or X.X.X.X. The maximum values for each of the format are 4000, 4000.99, 4000.99.99, and 4000.99.99.99, respectively.\n\nThe special value `unlisted` specifies to consider a browser as modern if it was not listed by the `modern_browser` and [ancient_browser](#ancient_browser) directives. Otherwise such a browser is considered ancient. If a request does not provide the “User-Agent” field in the header, the browser is treated as not being listed.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`modern_browser_value`**` `*`string`*`;` |\n| Default: | `modern_browser_value 1;`                  |\n| Context: | `http`, `server`, `location`               |\n\nSets a value for the `$modern_browser` variables.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_browser_module.html](https://nginx.org/en/docs/http/ngx_http_browser_module.html)"
- name: ngx_http_charset_module
  id: http/ngx_http_charset_module
  summary: The ngx_http_charset_module module adds the specified charset to the “Content-Type” response header field
  description: "# Module ngx_http_charset_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [charset](#charset)\n- [charset_map](#charset_map)\n- [charset_types](#charset_types)\n- [override_charset](#override_charset)\n- [source_charset](#source_charset)\n\nThe `ngx_http_charset_module` module adds the specified charset to the “Content-Type” response header field. In addition, the module can convert data from one charset to another, with some limitations:\n\n- conversion is performed one way — from server to client,\n- only single-byte charsets can be converted\n- or single-byte charsets to/from UTF-8.\n\n#### Example Configuration\n\n``` nginx\ninclude        conf/koi-win;\n\ncharset        windows-1251;\nsource_charset koi8-r;\n```\n\n#### Directives\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`charset`**` `*`charset`*` | off;`           |\n| Default: | `charset off;`                                 |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nAdds the specified charset to the “Content-Type” response header field. If this charset is different from the charset specified in the [source_charset](#source_charset) directive, a conversion is performed.\n\nThe parameter `off` cancels the addition of charset to the “Content-Type” response header field.\n\nA charset can be defined with a variable:\n\n``` nginx\ncharset $charset;\n```\n\nIn such a case, all possible values of a variable need to be present in the configuration at least once in the form of the [charset_map](#charset_map), [charset](#charset), or [source_charset](#source_charset) directives. For `utf-8`, `windows-1251`, and `koi8-r` charsets, it is sufficient to include the files `conf/koi-win`, `conf/koi-utf`, and `conf/win-utf` into configuration. For other charsets, simply making a fictitious conversion table works, for example:\n\n``` nginx\ncharset_map iso-8859-5 _ { }\n```\n\nIn addition, a charset can be set in the “X-Accel-Charset” response header field. This capability can be disabled using the [proxy_ignore_headers](ngx_http_proxy_module#proxy_ignore_headers), [fastcgi_ignore_headers](ngx_http_fastcgi_module#fastcgi_ignore_headers), [uwsgi_ignore_headers](ngx_http_uwsgi_module#uwsgi_ignore_headers), [scgi_ignore_headers](ngx_http_scgi_module#scgi_ignore_headers), and [grpc_ignore_headers](ngx_http_grpc_module#grpc_ignore_headers) directives.\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`charset_map`**` `*`charset1`*` `*`charset2`*` { ... }` |\n| Default: | —                                                         |\n| Context: | `http`                                                    |\n\nDescribes the conversion table from one charset to another. A reverse conversion table is built using the same data. Character codes are given in hexadecimal. Missing characters in the range 80-FF are replaced with “`?`”. When converting from UTF-8, characters missing in a one-byte charset are replaced with “`&#XXXX;`”.\n\nExample:\n\n``` nginx\ncharset_map koi8-r windows-1251 {\n    C0 FE ; # small yu\n    C1 E0 ; # small a\n    C2 E1 ; # small b\n    C3 F6 ; # small ts\n    ...\n}\n```\n\nWhen describing a conversion table to UTF-8, codes for the UTF-8 charset should be given in the second column, for example:\n\n``` nginx\ncharset_map koi8-r utf-8 {\n    C0 D18E ; # small yu\n    C1 D0B0 ; # small a\n    C2 D0B1 ; # small b\n    C3 D186 ; # small ts\n    ...\n}\n```\n\nFull conversion tables from `koi8-r` to `windows-1251`, and from `koi8-r` and `windows-1251` to `utf-8` are provided in the distribution files `conf/koi-win`, `conf/koi-utf`, and `conf/win-utf`.\n\n|          |                                                                                                            |\n|----------|------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`charset_types`**` `*`mime-type`*` ...;`                                                                 |\n| Default: | `charset_types text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;` |\n| Context: | `http`, `server`, `location`                                                                               |\n\nThis directive appeared in version 0.7.9.\n\nEnables module processing in responses with the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).\n\nUntil version 1.5.4, “`application/x-javascript`” was used as the default MIME type instead of “`application/javascript`”.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`override_charset`**` on | off;`             |\n| Default: | `override_charset off;`                        |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nDetermines whether a conversion should be performed for answers received from a proxied or a FastCGI/uwsgi/SCGI/gRPC server when the answers already carry a charset in the “Content-Type” response header field. If conversion is enabled, a charset specified in the received response is used as a source charset.\n\nIt should be noted that if a response is received in a subrequest then the conversion from the response charset to the main request charset is always performed, regardless of the `override_charset` directive setting.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`source_charset`**` `*`charset`*`;`          |\n| Default: | —                                              |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nDefines the source charset of a response. If this charset is different from the charset specified in the [charset](#charset) directive, a conversion is performed.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_charset_module.html](https://nginx.org/en/docs/http/ngx_http_charset_module.html)"
- name: ngx_http_core_module
  id: http/ngx_http_core_module
  summary: This directive appeared in version 1.11.8
  description: "# Module ngx_http_core_module\n\n- [Directives](#directives)\n- [absolute_redirect](#absolute_redirect)\n- [aio](#aio)\n- [aio_write](#aio_write)\n- [alias](#alias)\n- [auth_delay](#auth_delay)\n- [chunked_transfer_encoding](#chunked_transfer_encoding)\n- [client_body_buffer_size](#client_body_buffer_size)\n- [client_body_in_file_only](#client_body_in_file_only)\n- [client_body_in_single_buffer](#client_body_in_single_buffer)\n- [client_body_temp_path](#client_body_temp_path)\n- [client_body_timeout](#client_body_timeout)\n- [client_header_buffer_size](#client_header_buffer_size)\n- [client_header_timeout](#client_header_timeout)\n- [client_max_body_size](#client_max_body_size)\n- [connection_pool_size](#connection_pool_size)\n- [default_type](#default_type)\n- [directio](#directio)\n- [directio_alignment](#directio_alignment)\n- [disable_symlinks](#disable_symlinks)\n- [error_page](#error_page)\n- [etag](#etag)\n- [http](#http)\n- [if_modified_since](#if_modified_since)\n- [ignore_invalid_headers](#ignore_invalid_headers)\n- [internal](#internal)\n- [keepalive_disable](#keepalive_disable)\n- [keepalive_requests](#keepalive_requests)\n- [keepalive_time](#keepalive_time)\n- [keepalive_timeout](#keepalive_timeout)\n- [large_client_header_buffers](#large_client_header_buffers)\n- [limit_except](#limit_except)\n- [limit_rate](#limit_rate)\n- [limit_rate_after](#limit_rate_after)\n- [lingering_close](#lingering_close)\n- [lingering_time](#lingering_time)\n- [lingering_timeout](#lingering_timeout)\n- [listen](#listen)\n- [location](#location)\n- [log_not_found](#log_not_found)\n- [log_subrequest](#log_subrequest)\n- [max_ranges](#max_ranges)\n- [merge_slashes](#merge_slashes)\n- [msie_padding](#msie_padding)\n- [msie_refresh](#msie_refresh)\n- [open_file_cache](#open_file_cache)\n- [open_file_cache_errors](#open_file_cache_errors)\n- [open_file_cache_min_uses](#open_file_cache_min_uses)\n- [open_file_cache_valid](#open_file_cache_valid)\n- [output_buffers](#output_buffers)\n- [port_in_redirect](#port_in_redirect)\n- [postpone_output](#postpone_output)\n- [read_ahead](#read_ahead)\n- [recursive_error_pages](#recursive_error_pages)\n- [request_pool_size](#request_pool_size)\n- [reset_timedout_connection](#reset_timedout_connection)\n- [resolver](#resolver)\n- [resolver_timeout](#resolver_timeout)\n- [root](#root)\n- [satisfy](#satisfy)\n- [send_lowat](#send_lowat)\n- [send_timeout](#send_timeout)\n- [sendfile](#sendfile)\n- [sendfile_max_chunk](#sendfile_max_chunk)\n- [server](#server)\n- [server_name](#server_name)\n- [server_name_in_redirect](#server_name_in_redirect)\n- [server_names_hash_bucket_size](#server_names_hash_bucket_size)\n- [server_names_hash_max_size](#server_names_hash_max_size)\n- [server_tokens](#server_tokens)\n- [subrequest_output_buffer_size](#subrequest_output_buffer_size)\n- [tcp_nodelay](#tcp_nodelay)\n- [tcp_nopush](#tcp_nopush)\n- [try_files](#try_files)\n- [types](#types)\n- [types_hash_bucket_size](#types_hash_bucket_size)\n- [types_hash_max_size](#types_hash_max_size)\n- [underscores_in_headers](#underscores_in_headers)\n- [variables_hash_bucket_size](#variables_hash_bucket_size)\n- [variables_hash_max_size](#variables_hash_max_size)\n- [Embedded Variables](#variables)\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`absolute_redirect`**` on | off;` |\n| Default: | `absolute_redirect on;`             |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.11.8.\n\nIf disabled, redirects issued by nginx will be relative.\n\nSee also [server_name_in_redirect](#server_name_in_redirect) and [port_in_redirect](#port_in_redirect) directives.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`aio`**` on | off | threads[=`*`pool`*`];` |\n| Default: | `aio off;`                                   |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 0.8.11.\n\nEnables or disables the use of asynchronous file I/O (AIO) on FreeBSD and Linux:\n\n``` nginx\nlocation /video/ {\n    aio            on;\n    output_buffers 1 64k;\n}\n```\n\nOn FreeBSD, AIO can be used starting from FreeBSD 4.3. Prior to FreeBSD 11.0, AIO can either be linked statically into a kernel:\n\n``` nginx\noptions VFS_AIO\n```\n\nor loaded dynamically as a kernel loadable module:\n\n``` nginx\nkldload aio\n```\n\nOn Linux, AIO can be used starting from kernel version 2.6.22. Also, it is necessary to enable [directio](#directio), or otherwise reading will be blocking:\n\n``` nginx\nlocation /video/ {\n    aio            on;\n    directio       512;\n    output_buffers 1 128k;\n}\n```\n\nOn Linux, [directio](#directio) can only be used for reading blocks that are aligned on 512-byte boundaries (or 4K for XFS). File’s unaligned end is read in blocking mode. The same holds true for byte range requests and for FLV requests not from the beginning of a file: reading of unaligned data at the beginning and end of a file will be blocking.\n\nWhen both AIO and [sendfile](#sendfile) are enabled on Linux, AIO is used for files that are larger than or equal to the size specified in the [directio](#directio) directive, while [sendfile](#sendfile) is used for files of smaller sizes or when [directio](#directio) is disabled.\n\n``` nginx\nlocation /video/ {\n    sendfile       on;\n    aio            on;\n    directio       8m;\n}\n```\n\nFinally, files can be read and [sent](#sendfile) using multi-threading (1.7.11), without blocking a worker process:\n\n``` nginx\nlocation /video/ {\n    sendfile       on;\n    aio            threads;\n}\n```\n\nRead and send file operations are offloaded to threads of the specified [pool](../ngx_core_module#thread_pool). If the pool name is omitted, the pool with the name “`default`” is used. The pool name can also be set with variables:\n\n``` nginx\naio threads=pool$disk;\n```\n\nBy default, multi-threading is disabled, it should be enabled with the `--with-threads` configuration parameter. Currently, multi-threading is compatible only with the [epoll](../events#epoll), [kqueue](../events#kqueue), and [eventport](../events#eventport) methods. Multi-threaded sending of files is only supported on Linux.\n\nSee also the [sendfile](#sendfile) directive.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`aio_write`**` on | off;`  |\n| Default: | `aio_write off;`             |\n| Context: | `http`, `server`, `location` |\n\nThis directive appeared in version 1.9.13.\n\nIf [aio](#aio) is enabled, specifies whether it is used for writing files. Currently, this only works when using `aio threads` and is limited to writing temporary files with data received from proxied servers.\n\n|          |                           |\n|----------|---------------------------|\n| Syntax:  | **`alias`**` `*`path`*`;` |\n| Default: | —                         |\n| Context: | `location`                |\n\nDefines a replacement for the specified location. For example, with the following configuration\n\n``` nginx\nlocation /i/ {\n    alias /data/w3/images/;\n}\n```\n\non request of “`/i/top.gif`”, the file `/data/w3/images/top.gif` will be sent.\n\nThe *`path`* value can contain variables, except `$document_root` and `$realpath_root`.\n\nIf `alias` is used inside a location defined with a regular expression then such regular expression should contain captures and `alias` should refer to these captures (0.7.40), for example:\n\n``` nginx\nlocation ~ ^/users/(.+\\.(?:gif|jpe?g|png))$ {\n    alias /data/w3/images/$1;\n}\n```\n\nWhen location matches the last part of the directive’s value:\n\n``` nginx\nlocation /images/ {\n    alias /data/w3/images/;\n}\n```\n\nit is better to use the [root](#root) directive instead:\n\n``` nginx\nlocation /images/ {\n    root /data/w3;\n}\n```\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`auth_delay`**` `*`time`*`;` |\n| Default: | `auth_delay 0s;`               |\n| Context: | `http`, `server`, `location`   |\n\nThis directive appeared in version 1.17.10.\n\nDelays processing of unauthorized requests with 401 response code to prevent timing attacks when access is limited by [password](ngx_http_auth_basic_module), by the [result of subrequest](ngx_http_auth_request_module), or by [JWT](ngx_http_auth_jwt_module).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`chunked_transfer_encoding`**` on | off;` |\n| Default: | `chunked_transfer_encoding on;`             |\n| Context: | `http`, `server`, `location`                |\n\nAllows disabling chunked transfer encoding in HTTP/1.1. It may come in handy when using a software failing to support chunked encoding despite the standard’s requirement.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`client_body_buffer_size`**` `*`size`*`;` |\n| Default: | `client_body_buffer_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                |\n\nSets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a [temporary file](#client_body_temp_path). By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`client_body_in_file_only`**` on | clean | off;` |\n| Default: | `client_body_in_file_only off;`                    |\n| Context: | `http`, `server`, `location`                       |\n\nDetermines whether nginx should save the entire client request body into a file. This directive can be used during debugging, or when using the `$request_body_file` variable, or the [$r-\\>request_body_file](ngx_http_perl_module#methods) method of the module [ngx_http_perl_module](ngx_http_perl_module).\n\nWhen set to the value `on`, temporary files are not removed after request processing.\n\nThe value `clean` will cause the temporary files left after request processing to be removed.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`client_body_in_single_buffer`**` on | off;` |\n| Default: | `client_body_in_single_buffer off;`            |\n| Context: | `http`, `server`, `location`                   |\n\nDetermines whether nginx should save the entire client request body in a single buffer. The directive is recommended when using the `$request_body` variable, to save the number of copy operations involved.\n\n|          |                                                                                        |\n|----------|----------------------------------------------------------------------------------------|\n| Syntax:  | **`client_body_temp_path`**` `*`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `client_body_temp_path client_body_temp;`                                              |\n| Context: | `http`, `server`, `location`                                                           |\n\nDefines a directory for storing temporary files holding client request bodies. Up to three-level subdirectory hierarchy can be used under the specified directory. For example, in the following configuration\n\n``` nginx\nclient_body_temp_path /spool/nginx/client_temp 1 2;\n```\n\na path to a temporary file might look like this:\n\n``` nginx\n/spool/nginx/client_temp/7/45/00000123457\n```\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`client_body_timeout`**` `*`time`*`;` |\n| Default: | `client_body_timeout 60s;`              |\n| Context: | `http`, `server`, `location`            |\n\nDefines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything within this time, the request is terminated with the 408 (Request Time-out) error.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`client_header_buffer_size`**` `*`size`*`;` |\n| Default: | `client_header_buffer_size 1k;`               |\n| Context: | `http`, `server`                              |\n\nSets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. However, if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. If a request line or a request header field does not fit into this buffer then larger buffers, configured by the [large_client_header_buffers](#large_client_header_buffers) directive, are allocated.\n\nIf the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`client_header_timeout`**` `*`time`*`;` |\n| Default: | `client_header_timeout 60s;`              |\n| Context: | `http`, `server`                          |\n\nDefines a timeout for reading client request header. If a client does not transmit the entire header within this time, the request is terminated with the 408 (Request Time-out) error.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`client_max_body_size`**` `*`size`*`;` |\n| Default: | `client_max_body_size 1m;`               |\n| Context: | `http`, `server`, `location`             |\n\nSets the maximum allowed size of the client request body. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client. Please be aware that browsers cannot correctly display this error. Setting *`size`* to 0 disables checking of client request body size.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`connection_pool_size`**` `*`size`*`;` |\n| Default: | `connection_pool_size 256|512;`          |\n| Context: | `http`, `server`                         |\n\nAllows accurate tuning of per-connection memory allocations. This directive has minimal impact on performance and should not generally be used. By default, the size is equal to 256 bytes on 32-bit platforms and 512 bytes on 64-bit platforms.\n\nPrior to version 1.9.8, the default value was 256 on all platforms.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`default_type`**` `*`mime-type`*`;` |\n| Default: | `default_type text/plain;`            |\n| Context: | `http`, `server`, `location`          |\n\nDefines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the [types](#types) directive.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`directio`**` `*`size`*` | off;` |\n| Default: | `directio off;`                    |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 0.7.7.\n\nEnables the use of the `O_DIRECT` flag (FreeBSD, Linux), the `F_NOCACHE` flag (macOS), or the `directio()` function (Solaris), when reading files that are larger than or equal to the specified *`size`*. The directive automatically disables (0.7.15) the use of [sendfile](#sendfile) for a given request. It can be useful for serving large files:\n\n``` nginx\ndirectio 4m;\n```\n\nor when using [aio](#aio) on Linux.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`directio_alignment`**` `*`size`*`;` |\n| Default: | `directio_alignment 512;`              |\n| Context: | `http`, `server`, `location`           |\n\nThis directive appeared in version 0.8.11.\n\nSets the alignment for [directio](#directio). In most cases, a 512-byte alignment is enough. However, when using XFS under Linux, it needs to be increased to 4K.\n\n|          |                                                                                             |\n|----------|---------------------------------------------------------------------------------------------|\n| Syntax:  | **`disable_symlinks`**` off;` **`disable_symlinks`**` on | if_not_owner [from=`*`part`*`];` |\n| Default: | `disable_symlinks off;`                                                                     |\n| Context: | `http`, `server`, `location`                                                                |\n\nThis directive appeared in version 1.1.15.\n\nDetermines how symbolic links should be treated when opening files:\n\n`off`  \nSymbolic links in the pathname are allowed and not checked. This is the default behavior.\n\n`on`  \nIf any component of the pathname is a symbolic link, access to a file is denied.\n\n`if_not_owner`  \nAccess to a file is denied if any component of the pathname is a symbolic link, and the link and object that the link points to have different owners.\n\n`from`=*`part`*  \nWhen checking symbolic links (parameters `on` and `if_not_owner`), all components of the pathname are normally checked. Checking of symbolic links in the initial part of the pathname may be avoided by specifying additionally the `from`=*`part`* parameter. In this case, symbolic links are checked only from the pathname component that follows the specified initial part. If the value is not an initial part of the pathname checked, the whole pathname is checked as if this parameter was not specified at all. If the value matches the whole file name, symbolic links are not checked. The parameter value can contain variables.\n\nExample:\n\n``` nginx\ndisable_symlinks on from=$document_root;\n```\n\nThis directive is only available on systems that have the `openat()` and `fstatat()` interfaces. Such systems include modern versions of FreeBSD, Linux, and Solaris.\n\nParameters `on` and `if_not_owner` add a processing overhead.\n\nOn systems that do not support opening of directories only for search, to use these parameters it is required that worker processes have read permissions for all directories being checked.\n\nThe [ngx_http_autoindex_module](ngx_http_autoindex_module), [ngx_http_random_index_module](ngx_http_random_index_module), and [ngx_http_dav_module](ngx_http_dav_module) modules currently ignore this directive.\n\n|          |                                                                  |\n|----------|------------------------------------------------------------------|\n| Syntax:  | **`error_page`**` `*`code`*` ... [=[`*`response`*`]] `*`uri`*`;` |\n| Default: | —                                                                |\n| Context: | `http`, `server`, `location`, `if in location`                   |\n\nDefines the URI that will be shown for the specified errors. A *`uri`* value can contain variables.\n\nExample:\n\n``` nginx\nerror_page 404             /404.html;\nerror_page 500 502 503 504 /50x.html;\n```\n\nThis causes an internal redirect to the specified *`uri`* with the client request method changed to “`GET`” (for all methods other than “`GET`” and “`HEAD`”).\n\nFurthermore, it is possible to change the response code to another using the “`=`*`response`*” syntax, for example:\n\n``` nginx\nerror_page 404 =200 /empty.gif;\n```\n\nIf an error response is processed by a proxied server or a FastCGI/uwsgi/SCGI/gRPC server, and the server may return different response codes (e.g., 200, 302, 401 or 404), it is possible to respond with the code it returns:\n\n``` nginx\nerror_page 404 = /404.php;\n```\n\nIf there is no need to change URI and method during internal redirection it is possible to pass error processing into a named location:\n\n``` nginx\nlocation / {\n    error_page 404 = @fallback;\n}\n\nlocation @fallback {\n    proxy_pass http://backend;\n}\n```\n\nIf *`uri`* processing leads to an error, the status code of the last occurred error is returned to the client.\n\nIt is also possible to use URL redirects for error processing:\n\n``` nginx\nerror_page 403      http://example.com/forbidden.html;\nerror_page 404 =301 http://example.com/notfound.html;\n```\n\nIn this case, by default, the response code 302 is returned to the client. It can only be changed to one of the redirect status codes (301, 302, 303, 307, and 308).\n\nThe code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.\n\nThe code 308 was not treated as a redirect until version 1.13.0.\n\nThese directives are inherited from the previous configuration level if and only if there are no `error_page` directives defined on the current level.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`etag`**` on | off;`       |\n| Default: | `etag on;`                   |\n| Context: | `http`, `server`, `location` |\n\nThis directive appeared in version 1.3.3.\n\nEnables or disables automatic generation of the “ETag” response header field for static resources.\n\n|          |                      |\n|----------|----------------------|\n| Syntax:  | **`http`**` { ... }` |\n| Default: | —                    |\n| Context: | `main`               |\n\nProvides the configuration file context in which the HTTP server directives are specified.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`if_modified_since`**` off | exact | before;` |\n| Default: | `if_modified_since exact;`                      |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 0.7.24.\n\nSpecifies how to compare modification time of a response with the time in the “If-Modified-Since” request header field:\n\n`off`  \nthe response is always considered modified (0.7.34);\n\n`exact`  \nexact match;\n\n`before`  \nmodification time of the response is less than or equal to the time in the “If-Modified-Since” request header field.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`ignore_invalid_headers`**` on | off;` |\n| Default: | `ignore_invalid_headers on;`             |\n| Context: | `http`, `server`                         |\n\nControls whether header fields with invalid names should be ignored. Valid names are composed of English letters, digits, hyphens, and possibly underscores (as controlled by the [underscores_in_headers](#underscores_in_headers) directive).\n\nIf the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.\n\n|          |                   |\n|----------|-------------------|\n| Syntax:  | **`internal`**`;` |\n| Default: | —                 |\n| Context: | `location`        |\n\nSpecifies that a given location can only be used for internal requests. For external requests, the client error 404 (Not Found) is returned. Internal requests are the following:\n\n- requests redirected by the [error_page](#error_page), [index](ngx_http_index_module#index), [internal_redirect](ngx_http_internal_redirect_module#internal_redirect), [random_index](ngx_http_random_index_module#random_index), and [try_files](#try_files) directives;\n- requests redirected by the “X-Accel-Redirect” response header field from an upstream server;\n- subrequests formed by the “`include virtual`” command of the [ngx_http_ssi_module](ngx_http_ssi_module) module, by the [ngx_http_addition_module](ngx_http_addition_module) module directives, and by [auth_request](ngx_http_auth_request_module#auth_request) and [mirror](ngx_http_mirror_module#mirror) directives;\n- requests changed by the [rewrite](ngx_http_rewrite_module#rewrite) directive.\n\nExample:\n\n``` nginx\nerror_page 404 /404.html;\n\nlocation = /404.html {\n    internal;\n}\n```\n\nThere is a limit of 10 internal redirects per request to prevent request processing cycles that can occur in incorrect configurations. If this limit is reached, the error 500 (Internal Server Error) is returned. In such cases, the “rewrite or internal redirection cycle” message can be seen in the error log.\n\n|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`keepalive_disable`**` none | `*`browser`*` ...;` |\n| Default: | `keepalive_disable msie6;`                          |\n| Context: | `http`, `server`, `location`                        |\n\nDisables keep-alive connections with misbehaving browsers. The *`browser`* parameters specify which browsers will be affected. The value `msie6` disables keep-alive connections with old versions of MSIE, once a POST request is received. The value `safari` disables keep-alive connections with Safari and Safari-like browsers on macOS and macOS-like operating systems. The value `none` enables keep-alive connections with all browsers.\n\nPrior to version 1.1.18, the value `safari` matched all Safari and Safari-like browsers on all operating systems, and keep-alive connections with them were disabled by default.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`keepalive_requests`**` `*`number`*`;` |\n| Default: | `keepalive_requests 1000;`               |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 0.8.0.\n\nSets the maximum number of requests that can be served through one keep-alive connection. After the maximum number of requests are made, the connection is closed.\n\nClosing connections periodically is necessary to free per-connection memory allocations. Therefore, using too high maximum number of requests could result in excessive memory usage and not recommended.\n\nPrior to version 1.19.10, the default value was 100.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`keepalive_time`**` `*`time`*`;` |\n| Default: | `keepalive_time 1h;`               |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.19.10.\n\nLimits the maximum time during which requests can be processed through one keep-alive connection. After this time is reached, the connection is closed following the subsequent request processing.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`keepalive_timeout`**` `*`timeout`*` [`*`header_timeout`*`];` |\n| Default: | `keepalive_timeout 75s;`                                        |\n| Context: | `http`, `server`, `location`                                    |\n\nThe first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=*`time`*” response header field. Two parameters may differ.\n\nThe “Keep-Alive: timeout=*`time`*” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive connections by itself in about 60 seconds.\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`large_client_header_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `large_client_header_buffers 4 8k;`                          |\n| Context: | `http`, `server`                                             |\n\nSets the maximum *`number`* and *`size`* of buffers used for reading large client request header. A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client. A request header field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client. Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes. If after the end of request processing a connection is transitioned into the keep-alive state, these buffers are released.\n\nIf the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`limit_except`**` `*`method`*` ... { ... }` |\n| Default: | —                                             |\n| Context: | `location`                                    |\n\nLimits allowed HTTP methods inside a location. The *`method`* parameter can be one of the following: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `MKCOL`, `COPY`, `MOVE`, `OPTIONS`, `PROPFIND`, `PROPPATCH`, `LOCK`, `UNLOCK`, or `PATCH`. Allowing the `GET` method makes the `HEAD` method also allowed. Access to other methods can be limited using the [ngx_http_access_module](ngx_http_access_module), [ngx_http_auth_basic_module](ngx_http_auth_basic_module), and [ngx_http_auth_jwt_module](ngx_http_auth_jwt_module) (1.13.10) modules directives:\n\n``` nginx\nlimit_except GET {\n    allow 192.168.1.0/32;\n    deny  all;\n}\n```\n\nPlease note that this will limit access to all methods **except** GET and HEAD.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`limit_rate`**` `*`rate`*`;`                 |\n| Default: | `limit_rate 0;`                                |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nLimits the rate of response transmission to a client. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if a client simultaneously opens two connections, the overall rate will be twice as much as the specified limit.\n\nParameter value can contain variables (1.17.0). It may be useful in cases where rate should be limited depending on a certain condition:\n\n``` nginx\nmap $slow $rate {\n    1     4k;\n    2     8k;\n}\n\nlimit_rate $rate;\n```\n\nRate limit can also be set in the [`$limit_rate`](#var_limit_rate) variable, however, since version 1.17.0, this method is not recommended:\n\n``` nginx\nserver {\n\n    if ($slow) {\n        set $limit_rate 4k;\n    }\n\n    ...\n}\n```\n\nRate limit can also be set in the “X-Accel-Limit-Rate” header field of a proxied server response. This capability can be disabled using the [proxy_ignore_headers](ngx_http_proxy_module#proxy_ignore_headers), [fastcgi_ignore_headers](ngx_http_fastcgi_module#fastcgi_ignore_headers), [uwsgi_ignore_headers](ngx_http_uwsgi_module#uwsgi_ignore_headers), and [scgi_ignore_headers](ngx_http_scgi_module#scgi_ignore_headers) directives.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`limit_rate_after`**` `*`size`*`;`           |\n| Default: | `limit_rate_after 0;`                          |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nThis directive appeared in version 0.8.0.\n\nSets the initial amount after which the further transmission of a response to a client will be rate limited. Parameter value can contain variables (1.17.0).\n\nExample:\n\n``` nginx\nlocation /flv/ {\n    flv;\n    limit_rate_after 500k;\n    limit_rate       50k;\n}\n```\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`lingering_close`**` off | on | always;` |\n| Default: | `lingering_close on;`                      |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in versions 1.1.0 and 1.0.6.\n\nControls how nginx closes client connections.\n\nThe default value “`on`” instructs nginx to [wait for](#lingering_timeout) and [process](#lingering_time) additional data from a client before fully closing a connection, but only if heuristics suggests that a client may be sending more data.\n\nThe value “`always`” will cause nginx to unconditionally wait for and process additional client data.\n\nThe value “`off`” tells nginx to never wait for more data and close the connection immediately. This behavior breaks the protocol and should not be used under normal circumstances.\n\nTo control closing [HTTP/2](ngx_http_v2_module) connections, the directive must be specified on the [server](#server) level (1.19.1).\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`lingering_time`**` `*`time`*`;` |\n| Default: | `lingering_time 30s;`              |\n| Context: | `http`, `server`, `location`       |\n\nWhen [lingering_close](#lingering_close) is in effect, this directive specifies the maximum time during which nginx will process (read and ignore) additional data coming from a client. After that, the connection will be closed, even if there will be more data.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`lingering_timeout`**` `*`time`*`;` |\n| Default: | `lingering_timeout 5s;`               |\n| Context: | `http`, `server`, `location`          |\n\nWhen [lingering_close](#lingering_close) is in effect, this directive specifies the maximum waiting time for more client data to arrive. If data are not received during this time, the connection is closed. Otherwise, the data are read and ignored, and nginx starts waiting for more data again. The “wait-read-ignore” cycle is repeated, but no longer than specified by the [lingering_time](#lingering_time) directive.\n\n|          ||\n|----------||\n| Syntax:  | **`listen`**` `*`address`*`[:`*`port`*`] [default_server] [ssl] [http2 | quic] [proxy_protocol] [setfib=`*`number`*`] [fastopen=`*`number`*`] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` **`listen`**` `*`port`*` [default_server] [ssl] [http2 | quic] [proxy_protocol] [setfib=`*`number`*`] [fastopen=`*`number`*`] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` **`listen`**` unix:`*`path`*` [default_server] [ssl] [http2 | quic] [proxy_protocol] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` |\n| Default: | `listen *:80 | *:8000;`|\n| Context: | `server`|\n\nSets the *`address`* and *`port`* for IP, or the *`path`* for a UNIX-domain socket on which the server will accept requests. Both *`address`* and *`port`*, or only *`address`* or only *`port`* can be specified. An *`address`* may also be a hostname, for example:\n\n``` nginx\nlisten 127.0.0.1:8000;\nlisten 127.0.0.1;\nlisten 8000;\nlisten *:8000;\nlisten localhost:8000;\n```\n\nIPv6 addresses (0.7.36) are specified in square brackets:\n\n``` nginx\nlisten [::]:8000;\nlisten [::1];\n```\n\nUNIX-domain sockets (0.8.21) are specified with the “`unix:`” prefix:\n\n``` nginx\nlisten unix:/var/run/nginx.sock;\n```\n\nIf only *`address`* is given, the port 80 is used.\n\nIf the directive is not present then either `*:80` is used if nginx runs with the superuser privileges, or `*:8000` otherwise.\n\nThe `default_server` parameter, if present, will cause the server to become the default server for the specified *`address`*:*`port`* pair. If none of the directives have the `default_server` parameter then the first server with the *`address`*:*`port`* pair will be the default server for this pair.\n\nIn versions prior to 0.8.21 this parameter is named simply `default`.\n\nThe `ssl` parameter (0.7.14) allows specifying that all connections accepted on this port should work in SSL mode. This allows for a more compact [configuration](configuring_https_servers#single_http_https_server) for the server that handles both HTTP and HTTPS requests.\n\nThe `http2` parameter (1.9.5) configures the port to accept [HTTP/2](ngx_http_v2_module) connections. Normally, for this to work the `ssl` parameter should be specified as well, but nginx can also be configured to accept HTTP/2 connections without SSL.\n\nThe parameter is deprecated, the [http2](ngx_http_v2_module#http2) directive should be used instead.\n\nThe `quic` parameter (1.25.0) configures the port to accept [QUIC](ngx_http_v3_module) connections.\n\nThe `proxy_protocol` parameter (1.5.12) allows specifying that all connections accepted on this port should use the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt).\n\nThe PROXY protocol version 2 is supported since version 1.13.11.\n\nThe `listen` directive can have several additional parameters specific to socket-related system calls. These parameters can be specified in any `listen` directive, but only once for a given *`address`*:*`port`* pair.\n\nIn versions prior to 0.8.21, they could only be specified in the `listen` directive together with the `default` parameter.\n\n`setfib`=*`number`*  \nthis parameter (0.8.44) sets the associated routing table, FIB (the `SO_SETFIB` option) for the listening socket. This currently works only on FreeBSD.\n\n`fastopen`=*`number`*  \nenables “[TCP Fast Open](http://en.wikipedia.org/wiki/TCP_Fast_Open)” for the listening socket (1.5.8) and [limits](https://datatracker.ietf.org/doc/html/rfc7413#section-5.1) the maximum length for the queue of connections that have not yet completed the three-way handshake.\n\nDo not enable this feature unless the server can handle receiving the [same SYN packet with data](https://datatracker.ietf.org/doc/html/rfc7413#section-6.1) more than once.\n\n`backlog`=*`number`*  \nsets the `backlog` parameter in the `listen()` call that limits the maximum length for the queue of pending connections. By default, `backlog` is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.\n\n`rcvbuf`=*`size`*  \nsets the receive buffer size (the `SO_RCVBUF` option) for the listening socket.\n\n`sndbuf`=*`size`*  \nsets the send buffer size (the `SO_SNDBUF` option) for the listening socket.\n\n`accept_filter`=*`filter`*  \nsets the name of accept filter (the `SO_ACCEPTFILTER` option) for the listening socket that filters incoming connections before passing them to `accept()`. This works only on FreeBSD and NetBSD 5.0+. Possible values are [dataready](http://man.freebsd.org/accf_data) and [httpready](http://man.freebsd.org/accf_http).\n\n`deferred`  \ninstructs to use a deferred `accept()` (the `TCP_DEFER_ACCEPT` socket option) on Linux.\n\n`bind`  \ninstructs to make a separate `bind()` call for a given *`address`*:*`port`* pair. This is useful because if there are several `listen` directives with the same port but different addresses, and one of the `listen` directives listens on all addresses for the given port (`*:`*`port`*), nginx will `bind()` only to `*:`*`port`*. It should be noted that the `getsockname()` system call will be made in this case to determine the address that accepted the connection. If the `setfib`, `fastopen`, `backlog`, `rcvbuf`, `sndbuf`, `accept_filter`, `deferred`, `ipv6only`, `reuseport`, or `so_keepalive` parameters are used then for a given *`address`*:*`port`* pair a separate `bind()` call will always be made.\n\n`ipv6only`=`on`\\|`off`  \nthis parameter (0.7.42) determines (via the `IPV6_V6ONLY` socket option) whether an IPv6 socket listening on a wildcard address `[::]` will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.\n\nPrior to version 1.3.4, if this parameter was omitted then the operating system’s settings were in effect for the socket.\n\n`reuseport`  \nthis parameter (1.9.1) instructs to create an individual listening socket for each worker process (using the `SO_REUSEPORT` socket option on Linux 3.9+ and DragonFly BSD, or `SO_REUSEPORT_LB` on FreeBSD 12+), allowing a kernel to distribute incoming connections between worker processes. This currently works only on Linux 3.9+, DragonFly BSD, and FreeBSD 12+ (1.15.1).\n\nInappropriate use of this option may have its security [implications](http://man7.org/linux/man-pages/man7/socket.7.html).\n\n`so_keepalive`=`on`\\|`off`\\|\\[*`keepidle`*\\]:\\[*`keepintvl`*\\]:\\[*`keepcnt`*\\]  \nthis parameter (1.1.11) configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “`on`”, the `SO_KEEPALIVE` option is turned on for the socket. If it is set to the value “`off`”, the `SO_KEEPALIVE` option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the `TCP_KEEPIDLE`, `TCP_KEEPINTVL`, and `TCP_KEEPCNT` socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the *`keepidle`*, *`keepintvl`*, and *`keepcnt`* parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example,\n\n``` nginx\nso_keepalive=30m::10\n```\n\nwill set the idle timeout (`TCP_KEEPIDLE`) to 30 minutes, leave the probe interval (`TCP_KEEPINTVL`) at its system default, and set the probes count (`TCP_KEEPCNT`) to 10 probes.\n\nExample:\n\n``` nginx\nlisten 127.0.0.1 default_server accept_filter=dataready backlog=1024;\n```\n\n|          |                                                                                             |\n|----------|---------------------------------------------------------------------------------------------|\n| Syntax:  | **`location`**` [ = | ~ | ~* | ^~ ] `*`uri`*` { ... }` **`location`**` @`*`name`*` { ... }` |\n| Default: | —                                                                                           |\n| Context: | `server`, `location`                                                                        |\n\nSets configuration depending on a request URI.\n\nThe matching is performed against a normalized URI, after decoding the text encoded in the “`%XX`” form, resolving references to relative path components “`.`” and “`..`”, and possible [compression](#merge_slashes) of two or more adjacent slashes into a single slash.\n\nA location can either be defined by a prefix string, or by a regular expression. Regular expressions are specified with the preceding “`~*`” modifier (for case-insensitive matching), or the “`~`” modifier (for case-sensitive matching). To find location matching a given request, nginx first checks locations defined using the prefix strings (prefix locations). Among them, the location with the longest matching prefix is selected and remembered. Then regular expressions are checked, in the order of their appearance in the configuration file. The search of regular expressions terminates on the first match, and the corresponding configuration is used. If no match with a regular expression is found then the configuration of the prefix location remembered earlier is used.\n\n`location` blocks can be nested, with some exceptions mentioned below.\n\nFor case-insensitive operating systems such as macOS and Cygwin, matching with prefix strings ignores a case (0.7.7). However, comparison is limited to one-byte locales.\n\nRegular expressions can contain captures (0.7.40) that can later be used in other directives.\n\nIf the longest matching prefix location has the “`^~`” modifier then regular expressions are not checked.\n\nAlso, using the “`=`” modifier it is possible to define an exact match of URI and location. If an exact match is found, the search terminates. For example, if a “`/`” request happens frequently, defining “`location = /`” will speed up the processing of these requests, as search terminates right after the first comparison. Such a location cannot obviously contain nested locations.\n\nIn versions from 0.7.1 to 0.8.41, if a request matched the prefix location without the “`=`” and “`^~`” modifiers, the search also terminated and regular expressions were not checked.\n\nLet’s illustrate the above by an example:\n\n``` nginx\nlocation = / {\n    [ configuration A ]\n}\n\nlocation / {\n    [ configuration B ]\n}\n\nlocation /documents/ {\n    [ configuration C ]\n}\n\nlocation ^~ /images/ {\n    [ configuration D ]\n}\n\nlocation ~* \\.(gif|jpg|jpeg)$ {\n    [ configuration E ]\n}\n```\n\nThe “`/`” request will match configuration A, the “`/index.html`” request will match configuration B, the “`/documents/document.html`” request will match configuration C, the “`/images/1.gif`” request will match configuration D, and the “`/documents/1.jpg`” request will match configuration E.\n\nThe “`@`” prefix defines a named location. Such a location is not used for a regular request processing, but instead used for request redirection. They cannot be nested, and cannot contain nested locations.\n\nIf a location is defined by a prefix string that ends with the slash character, and requests are processed by one of [proxy_pass](ngx_http_proxy_module#proxy_pass), [fastcgi_pass](ngx_http_fastcgi_module#fastcgi_pass), [uwsgi_pass](ngx_http_uwsgi_module#uwsgi_pass), [scgi_pass](ngx_http_scgi_module#scgi_pass), [memcached_pass](ngx_http_memcached_module#memcached_pass), or [grpc_pass](ngx_http_grpc_module#grpc_pass), then the special processing is performed. In response to a request with URI equal to this string, but without the trailing slash, a permanent redirect with the code 301 will be returned to the requested URI with the slash appended. If this is not desired, an exact match of the URI and location could be defined like this:\n\n``` nginx\nlocation /user/ {\n    proxy_pass http://user.example.com;\n}\n\nlocation = /user {\n    proxy_pass http://login.example.com;\n}\n```\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`log_not_found`**` on | off;` |\n| Default: | `log_not_found on;`             |\n| Context: | `http`, `server`, `location`    |\n\nEnables or disables logging of errors about not found files into [error_log](../ngx_core_module#error_log).\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`log_subrequest`**` on | off;` |\n| Default: | `log_subrequest off;`            |\n| Context: | `http`, `server`, `location`     |\n\nEnables or disables logging of subrequests into [access_log](ngx_http_log_module#access_log).\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`max_ranges`**` `*`number`*`;` |\n| Default: | —                                |\n| Context: | `http`, `server`, `location`     |\n\nThis directive appeared in version 1.1.2.\n\nLimits the maximum allowed number of ranges in byte-range requests. Requests that exceed the limit are processed as if there were no byte ranges specified. By default, the number of ranges is not limited. The zero value disables the byte-range support completely.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`merge_slashes`**` on | off;` |\n| Default: | `merge_slashes on;`             |\n| Context: | `http`, `server`                |\n\nEnables or disables compression of two or more adjacent slashes in a URI into a single slash.\n\nNote that compression is essential for the correct matching of prefix string and regular expression locations. Without it, the “`//scripts/one.php`” request would not match\n\n``` nginx\nlocation /scripts/ {\n    ...\n}\n```\n\nand might be processed as a static file. So it gets converted to “`/scripts/one.php`”.\n\nTurning the compression `off` can become necessary if a URI contains base64-encoded names, since base64 uses the “`/`” character internally. However, for security considerations, it is better to avoid turning the compression off.\n\nIf the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`msie_padding`**` on | off;` |\n| Default: | `msie_padding on;`             |\n| Context: | `http`, `server`, `location`   |\n\nEnables or disables adding comments to responses for MSIE clients with status greater than 400 to increase the response size to 512 bytes.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`msie_refresh`**` on | off;` |\n| Default: | `msie_refresh off;`            |\n| Context: | `http`, `server`, `location`   |\n\nEnables or disables issuing refreshes instead of redirects for MSIE clients.\n\n|          |                                                                                         |\n|----------|-----------------------------------------------------------------------------------------|\n| Syntax:  | **`open_file_cache`**` off;` **`open_file_cache`**` max=`*`N`*` [inactive=`*`time`*`];` |\n| Default: | `open_file_cache off;`                                                                  |\n| Context: | `http`, `server`, `location`                                                            |\n\nConfigures a cache that can store:\n\n- open file descriptors, their sizes and modification times;\n\n- information on existence of directories;\n\n- file lookup errors, such as “file not found”, “no read permission”, and so on.\n\nCaching of errors should be enabled separately by the [open_file_cache_errors](#open_file_cache_errors) directive.\n\nThe directive has the following parameters:\n\n`max`  \nsets the maximum number of elements in the cache; on cache overflow the least recently used (LRU) elements are removed;\n\n`inactive`  \ndefines a time after which an element is removed from the cache if it has not been accessed during this time; by default, it is 60 seconds;\n\n`off`  \ndisables the cache.\n\nExample:\n\n``` nginx\nopen_file_cache          max=1000 inactive=20s;\nopen_file_cache_valid    30s;\nopen_file_cache_min_uses 2;\nopen_file_cache_errors   on;\n```\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`open_file_cache_errors`**` on | off;` |\n| Default: | `open_file_cache_errors off;`            |\n| Context: | `http`, `server`, `location`             |\n\nEnables or disables caching of file lookup errors by [open_file_cache](#open_file_cache).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`open_file_cache_min_uses`**` `*`number`*`;` |\n| Default: | `open_file_cache_min_uses 1;`                  |\n| Context: | `http`, `server`, `location`                   |\n\nSets the minimum *`number`* of file accesses during the period configured by the `inactive` parameter of the [open_file_cache](#open_file_cache) directive, required for a file descriptor to remain open in the cache.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`open_file_cache_valid`**` `*`time`*`;` |\n| Default: | `open_file_cache_valid 60s;`              |\n| Context: | `http`, `server`, `location`              |\n\nSets a time after which [open_file_cache](#open_file_cache) elements should be validated.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`output_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `output_buffers 2 32k;`                         |\n| Context: | `http`, `server`, `location`                    |\n\nSets the *`number`* and *`size`* of the buffers used for reading a response from a disk.\n\nPrior to version 1.9.5, the default value was 1 32k.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`port_in_redirect`**` on | off;` |\n| Default: | `port_in_redirect on;`             |\n| Context: | `http`, `server`, `location`       |\n\nEnables or disables specifying the port in [absolute](#absolute_redirect) redirects issued by nginx.\n\nThe use of the primary server name in redirects is controlled by the [server_name_in_redirect](#server_name_in_redirect) directive.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`postpone_output`**` `*`size`*`;` |\n| Default: | `postpone_output 1460;`             |\n| Context: | `http`, `server`, `location`        |\n\nIf possible, the transmission of client data will be postponed until nginx has at least *`size`* bytes of data to send. The zero value disables postponing data transmission.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`read_ahead`**` `*`size`*`;` |\n| Default: | `read_ahead 0;`                |\n| Context: | `http`, `server`, `location`   |\n\nSets the amount of pre-reading for the kernel when working with file.\n\nOn Linux, the `posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL)` system call is used, and so the *`size`* parameter is ignored.\n\nOn FreeBSD, the `fcntl(O_READAHEAD,` *`size`*`)` system call, supported since FreeBSD 9.0-CURRENT, is used. FreeBSD 7 has to be [patched](http://sysoev.ru/freebsd/patch.readahead.txt).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`recursive_error_pages`**` on | off;` |\n| Default: | `recursive_error_pages off;`            |\n| Context: | `http`, `server`, `location`            |\n\nEnables or disables doing several redirects using the [error_page](#error_page) directive. The number of such redirects is [limited](#internal).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`request_pool_size`**` `*`size`*`;` |\n| Default: | `request_pool_size 4k;`               |\n| Context: | `http`, `server`                      |\n\nAllows accurate tuning of per-request memory allocations. This directive has minimal impact on performance and should not generally be used.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`reset_timedout_connection`**` on | off;` |\n| Default: | `reset_timedout_connection off;`            |\n| Context: | `http`, `server`, `location`                |\n\nEnables or disables resetting timed out connections and connections [closed](ngx_http_rewrite_module#return) with the non-standard code 444 (1.15.2). The reset is performed as follows. Before closing a socket, the `SO_LINGER` option is set on it with a timeout value of 0. When the socket is closed, TCP RST is sent to the client, and all memory occupied by this socket is released. This helps avoid keeping an already closed socket with filled buffers in a FIN_WAIT1 state for a long time.\n\nIt should be noted that timed out keep-alive connections are closed normally.\n\n|          |                                                                                                             |\n|----------|-------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`resolver`**` `*`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |\n| Default: | —                                                                                                           |\n| Context: | `http`, `server`, `location`                                                                                |\n\nConfigures name servers used to resolve names of upstream servers into addresses, for example:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353;\n```\n\nThe address can be specified as a domain name or IP address, with an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.\n\nBefore version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2.\n\nBy default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.\n\nResolving of names into IPv6 addresses is supported starting from version 1.5.8.\n\nBy default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n```\n\nBefore version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes.\n\nTo prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.\n\nThe optional `status_zone` parameter (1.17.1) enables [collection](ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*. The parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`resolver_timeout`**` `*`time`*`;` |\n| Default: | `resolver_timeout 30s;`              |\n| Context: | `http`, `server`, `location`         |\n\nSets a timeout for name resolution, for example:\n\n``` nginx\nresolver_timeout 5s;\n```\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`root`**` `*`path`*`;`                       |\n| Default: | `root html;`                                   |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nSets the root directory for requests. For example, with the following configuration\n\n``` nginx\nlocation /i/ {\n    root /data/w3;\n}\n```\n\nThe `/data/w3/i/top.gif` file will be sent in response to the “`/i/top.gif`” request.\n\nThe *`path`* value can contain variables, except `$document_root` and `$realpath_root`.\n\nA path to the file is constructed by merely adding a URI to the value of the `root` directive. If a URI has to be modified, the [alias](#alias) directive should be used.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`satisfy`**` all | any;`   |\n| Default: | `satisfy all;`               |\n| Context: | `http`, `server`, `location` |\n\nAllows access if all (`all`) or at least one (`any`) of the [ngx_http_access_module](ngx_http_access_module), [ngx_http_auth_basic_module](ngx_http_auth_basic_module), [ngx_http_auth_request_module](ngx_http_auth_request_module), or [ngx_http_auth_jwt_module](ngx_http_auth_jwt_module) modules allow access.\n\nExample:\n\n``` nginx\nlocation / {\n    satisfy any;\n\n    allow 192.168.1.0/32;\n    deny  all;\n\n    auth_basic           \"closed site\";\n    auth_basic_user_file conf/htpasswd;\n}\n```\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`send_lowat`**` `*`size`*`;` |\n| Default: | `send_lowat 0;`                |\n| Context: | `http`, `server`, `location`   |\n\nIf the directive is set to a non-zero value, nginx will try to minimize the number of send operations on client sockets by using either `NOTE_LOWAT` flag of the [kqueue](../events#kqueue) method or the `SO_SNDLOWAT` socket option. In both cases the specified *`size`* is used.\n\nThis directive is ignored on Linux, Solaris, and Windows.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`send_timeout`**` `*`time`*`;` |\n| Default: | `send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`     |\n\nSets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`sendfile`**` on | off;`                     |\n| Default: | `sendfile off;`                                |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nEnables or disables the use of `sendfile()`.\n\nStarting from nginx 0.8.12 and FreeBSD 5.2.1, [aio](#aio) can be used to pre-load data for `sendfile()`:\n\n``` nginx\nlocation /video/ {\n    sendfile       on;\n    tcp_nopush     on;\n    aio            on;\n}\n```\n\nIn this configuration, `sendfile()` is called with the `SF_NODISKIO` flag which causes it not to block on disk I/O, but, instead, report back that the data are not in memory. nginx then initiates an asynchronous data load by reading one byte. On the first read, the FreeBSD kernel loads the first 128K bytes of a file into memory, although next reads will only load data in 16K chunks. This can be changed using the [read_ahead](#read_ahead) directive.\n\nBefore version 1.7.11, pre-loading could be enabled with `aio sendfile;`.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`sendfile_max_chunk`**` `*`size`*`;` |\n| Default: | `sendfile_max_chunk 2m;`               |\n| Context: | `http`, `server`, `location`           |\n\nLimits the amount of data that can be transferred in a single `sendfile()` call. Without the limit, one fast connection may seize the worker process entirely.\n\nPrior to version 1.21.4, by default there was no limit.\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`server`**` { ... }` |\n| Default: | —                      |\n| Context: | `http`                 |\n\nSets configuration for a virtual server. There is no clear separation between IP-based (based on the IP address) and name-based (based on the “Host” request header field) virtual servers. Instead, the [listen](#listen) directives describe all addresses and ports that should accept connections for the server, and the [server_name](#server_name) directive lists all server names. Example configurations are provided in the “[How nginx processes a request](request_processing)” document.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`server_name`**` `*`name`*` ...;` |\n| Default: | `server_name \"\";`                   |\n| Context: | `server`                            |\n\nSets names of a virtual server, for example:\n\n``` nginx\nserver {\n    server_name example.com www.example.com;\n}\n```\n\nThe first name becomes the primary server name.\n\nServer names can include an asterisk (“`*`”) replacing the first or last part of a name:\n\n``` nginx\nserver {\n    server_name example.com *.example.com www.example.*;\n}\n```\n\nSuch names are called wildcard names.\n\nThe first two of the names mentioned above can be combined in one:\n\n``` nginx\nserver {\n    server_name .example.com;\n}\n```\n\nIt is also possible to use regular expressions in server names, preceding the name with a tilde (“`~`”):\n\n``` nginx\nserver {\n    server_name www.example.com ~^www\\d+\\.example\\.com$;\n}\n```\n\nRegular expressions can contain captures (0.7.40) that can later be used in other directives:\n\n``` nginx\nserver {\n    server_name ~^(www\\.)?(.+)$;\n\n    location / {\n        root /sites/$2;\n    }\n}\n\nserver {\n    server_name _;\n\n    location / {\n        root /sites/default;\n    }\n}\n```\n\nNamed captures in regular expressions create variables (0.8.25) that can later be used in other directives:\n\n``` nginx\nserver {\n    server_name ~^(www\\.)?(?<domain>.+)$;\n\n    location / {\n        root /sites/$domain;\n    }\n}\n\nserver {\n    server_name _;\n\n    location / {\n        root /sites/default;\n    }\n}\n```\n\nIf the directive’s parameter is set to “`$hostname`” (0.9.4), the machine’s hostname is inserted.\n\nIt is also possible to specify an empty server name (0.7.11):\n\n``` nginx\nserver {\n    server_name www.example.com \"\";\n}\n```\n\nIt allows this server to process requests without the “Host” header field — instead of the default server — for the given address:port pair. This is the default setting.\n\nBefore 0.8.48, the machine’s hostname was used by default.\n\nDuring searching for a virtual server by name, if the name matches more than one of the specified variants, (e.g. both a wildcard name and regular expression match), the first matching variant will be chosen, in the following order of priority:\n\n1.  the exact name\n2.  the longest wildcard name starting with an asterisk, e.g. “`*.example.com`”\n3.  the longest wildcard name ending with an asterisk, e.g. “`mail.*`”\n4.  the first matching regular expression (in order of appearance in the configuration file)\n\nDetailed description of server names is provided in a separate [Server names](server_names) document.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`server_name_in_redirect`**` on | off;` |\n| Default: | `server_name_in_redirect off;`            |\n| Context: | `http`, `server`, `location`              |\n\nEnables or disables the use of the primary server name, specified by the [server_name](#server_name) directive, in [absolute](#absolute_redirect) redirects issued by nginx. When the use of the primary server name is disabled, the name from the “Host” request header field is used. If this field is not present, the IP address of the server is used.\n\nThe use of a port in redirects is controlled by the [port_in_redirect](#port_in_redirect) directive.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`server_names_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `server_names_hash_bucket_size 32|64|128;`        |\n| Context: | `http`                                            |\n\nSets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`server_names_hash_max_size`**` `*`size`*`;` |\n| Default: | `server_names_hash_max_size 512;`              |\n| Context: | `http`                                         |\n\nSets the maximum *`size`* of the server names hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`server_tokens`**` on | off | build | `*`string`*`;` |\n| Default: | `server_tokens on;`                                    |\n| Context: | `http`, `server`, `location`                           |\n\nEnables or disables emitting nginx version on error pages and in the “Server” response header field.\n\nThe `build` parameter (1.11.10) enables emitting a [build name](../configure#build) along with nginx version.\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), starting from version 1.9.13 the signature on error pages and the “Server” response header field value can be set explicitly using the *`string`* with variables. An empty string disables the emission of the “Server” field.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`subrequest_output_buffer_size`**` `*`size`*`;` |\n| Default: | `subrequest_output_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.13.10.\n\nSets the *`size`* of the buffer used for storing the response body of a subrequest. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.\n\nThe directive is applicable only for subrequests with response bodies saved into memory. For example, such subrequests are created by [SSI](ngx_http_ssi_module#ssi_include_set).\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`tcp_nodelay`**` on | off;` |\n| Default: | `tcp_nodelay on;`             |\n| Context: | `http`, `server`, `location`  |\n\nEnables or disables the use of the `TCP_NODELAY` option. The option is enabled when a connection is transitioned into the keep-alive state. Additionally, it is enabled on SSL connections, for unbuffered proxying, and for [WebSocket](websocket) proxying.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`tcp_nopush`**` on | off;` |\n| Default: | `tcp_nopush off;`            |\n| Context: | `http`, `server`, `location` |\n\nEnables or disables the use of the `TCP_NOPUSH` socket option on FreeBSD or the `TCP_CORK` socket option on Linux. The options are enabled only when [sendfile](#sendfile) is used. Enabling the option allows\n\n- sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.\\*;\n- sending a file in full packets.\n\n|          |                                                                                           |\n|----------|-------------------------------------------------------------------------------------------|\n| Syntax:  | **`try_files`**` `*`file`*` ... `*`uri`*`;` **`try_files`**` `*`file`*` ... =`*`code`*`;` |\n| Default: | —                                                                                         |\n| Context: | `server`, `location`                                                                      |\n\nChecks the existence of files in the specified order and uses the first found file for request processing; the processing is performed in the current context. The path to a file is constructed from the *`file`* parameter according to the [root](#root) and [alias](#alias) directives. It is possible to check directory’s existence by specifying a slash at the end of a name, e.g. “`$uri/`”. If none of the files were found, an internal redirect to the *`uri`* specified in the last parameter is made. For example:\n\n``` nginx\nlocation /images/ {\n    try_files $uri /images/default.gif;\n}\n\nlocation = /images/default.gif {\n    expires 30s;\n}\n```\n\nThe last parameter can also point to a named location, as shown in examples below. Starting from version 0.7.51, the last parameter can also be a *`code`*:\n\n``` nginx\nlocation / {\n    try_files $uri $uri/index.html $uri.html =404;\n}\n```\n\nExample in proxying Mongrel:\n\n``` nginx\nlocation / {\n    try_files /system/maintenance.html\n              $uri $uri/index.html $uri.html\n              @mongrel;\n}\n\nlocation @mongrel {\n    proxy_pass http://mongrel;\n}\n```\n\nExample for Drupal/FastCGI:\n\n``` nginx\nlocation / {\n    try_files $uri $uri/ @drupal;\n}\n\nlocation ~ \\.php$ {\n    try_files $uri @drupal;\n\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME     $fastcgi_script_name;\n    fastcgi_param QUERY_STRING    $args;\n\n    ... other fastcgi_param's\n}\n\nlocation @drupal {\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to/index.php;\n    fastcgi_param SCRIPT_NAME     /index.php;\n    fastcgi_param QUERY_STRING    q=$uri&$args;\n\n    ... other fastcgi_param's\n}\n```\n\nIn the following example,\n\n``` nginx\nlocation / {\n    try_files $uri $uri/ @drupal;\n}\n```\n\nthe `try_files` directive is equivalent to\n\n``` nginx\nlocation / {\n    error_page 404 = @drupal;\n    log_not_found off;\n}\n```\n\nAnd here,\n\n``` nginx\nlocation ~ \\.php$ {\n    try_files $uri @drupal;\n\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;\n\n    ...\n}\n```\n\n`try_files` checks the existence of the PHP file before passing the request to the FastCGI server.\n\nExample for Wordpress and Joomla:\n\n``` nginx\nlocation / {\n    try_files $uri $uri/ @wordpress;\n}\n\nlocation ~ \\.php$ {\n    try_files $uri @wordpress;\n\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;\n    ... other fastcgi_param's\n}\n\nlocation @wordpress {\n    fastcgi_pass ...;\n\n    fastcgi_param SCRIPT_FILENAME /path/to/index.php;\n    ... other fastcgi_param's\n}\n```\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`types`**` { ... }`                                      |\n| Default: | `types { text/html html; image/gif gif; image/jpeg jpg; }` |\n| Context: | `http`, `server`, `location`                               |\n\nMaps file name extensions to MIME types of responses. Extensions are case-insensitive. Several extensions can be mapped to one type, for example:\n\n``` nginx\ntypes {\n    application/octet-stream bin exe dll;\n    application/octet-stream deb;\n    application/octet-stream dmg;\n}\n```\n\nA sufficiently full mapping table is distributed with nginx in the `conf/mime.types` file.\n\nTo make a particular location emit the “`application/octet-stream`” MIME type for all requests, the following configuration can be used:\n\n``` nginx\nlocation /download/ {\n    types        { }\n    default_type application/octet-stream;\n}\n```\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`types_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `types_hash_bucket_size 64;`               |\n| Context: | `http`, `server`, `location`               |\n\nSets the bucket size for the types hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\nPrior to version 1.5.13, the default value depended on the size of the processor’s cache line.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`types_hash_max_size`**` `*`size`*`;` |\n| Default: | `types_hash_max_size 1024;`             |\n| Context: | `http`, `server`, `location`            |\n\nSets the maximum *`size`* of the types hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`underscores_in_headers`**` on | off;` |\n| Default: | `underscores_in_headers off;`            |\n| Context: | `http`, `server`                         |\n\nEnables or disables the use of underscores in client request header fields. When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the [ignore_invalid_headers](#ignore_invalid_headers) directive.\n\nIf the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`variables_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `variables_hash_bucket_size 64;`               |\n| Context: | `http`                                         |\n\nSets the bucket size for the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`variables_hash_max_size`**` `*`size`*`;` |\n| Default: | `variables_hash_max_size 1024;`             |\n| Context: | `http`                                      |\n\nSets the maximum *`size`* of the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).\n\nPrior to version 1.5.13, the default value was 512.\n\n#### Embedded Variables\n\nThe `ngx_http_core_module` module supports embedded variables with names matching the Apache Server variables. First of all, these are variables representing client request header fields, such as `$http_user_agent`, `$http_cookie`, and so on. Also there are other variables:\n\n`$arg_`*`name`*  \nargument *`name`* in the request line\n\n`$args`  \narguments in the request line\n\n`$binary_remote_addr`  \nclient address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses\n\n`$body_bytes_sent`  \nnumber of bytes sent to a client, not counting the response header; this variable is compatible with the “`%B`” parameter of the `mod_log_config` Apache module\n\n`$bytes_sent`  \nnumber of bytes sent to a client (1.3.8, 1.2.5)\n\n`$connection`  \nconnection serial number (1.3.8, 1.2.5)\n\n`$connection_requests`  \ncurrent number of requests made through a connection (1.3.8, 1.2.5)\n\n`$connection_time`  \nconnection time in seconds with a milliseconds resolution (1.19.10)\n\n`$content_length`  \n“Content-Length” request header field\n\n`$content_type`  \n“Content-Type” request header field\n\n`$cookie_`*`name`*  \nthe *`name`* cookie\n\n`$document_root`  \n[root](#root) or [alias](#alias) directive’s value for the current request\n\n`$document_uri`  \nsame as `$uri`\n\n`$host`  \nin this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request\n\n`$hostname`  \nhost name\n\n`$http_`*`name`*  \narbitrary request header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores\n\n`$https`  \n“`on`” if connection operates in SSL mode, or an empty string otherwise\n\n`$is_args`  \n“`?`” if a request line has arguments, or an empty string otherwise\n\n`$limit_rate`  \nsetting this variable enables response rate limiting; see [limit_rate](#limit_rate)\n\n`$msec`  \ncurrent time in seconds with the milliseconds resolution (1.3.9, 1.2.6)\n\n`$nginx_version`  \nnginx version\n\n`$pid`  \nPID of the worker process\n\n`$pipe`  \n“`p`” if request was pipelined, “`.`” otherwise (1.3.12, 1.2.7)\n\n`$proxy_protocol_addr`  \nclient address from the PROXY protocol header (1.5.12)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_port`  \nclient port from the PROXY protocol header (1.11.0)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_addr`  \nserver address from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_port`  \nserver port from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_tlv_`*`name`*  \nTLV from the PROXY Protocol header (1.23.2). The `name` can be a TLV type name or its numeric value. In the latter case, the value is hexadecimal and should be prefixed with `0x`:\n\n``` nginx\n$proxy_protocol_tlv_alpn\n$proxy_protocol_tlv_0x01\n```\n\nSSL TLVs can also be accessed by TLV type name or its numeric value, both prefixed by `ssl_`:\n\n``` nginx\n$proxy_protocol_tlv_ssl_version\n$proxy_protocol_tlv_ssl_0x21\n```\n\nThe following TLV type names are supported:\n\n- `alpn` (`0x01`) - upper layer protocol used over the connection\n- `authority` (`0x02`) - host name value passed by the client\n- `unique_id` (`0x05`) - unique connection id\n- `netns` (`0x30`) - name of the namespace\n- `ssl` (`0x20`) - binary SSL TLV structure\n\nThe following SSL TLV type names are supported:\n\n- `ssl_version` (`0x21`) - SSL version used in client connection\n- `ssl_cn` (`0x22`) - SSL certificate Common Name\n- `ssl_cipher` (`0x23`) - name of the used cipher\n- `ssl_sig_alg` (`0x24`) - algorithm used to sign the certificate\n- `ssl_key_alg` (`0x25`) - public-key algorithm\n\nAlso, the following special SSL TLV type name is supported:\n\n- `ssl_verify` - client SSL certificate verification result, `0` if the client presented a certificate and it was successfully verified, non-zero otherwise.\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$query_string`  \nsame as `$args`\n\n`$realpath_root`  \nan absolute pathname corresponding to the [root](#root) or [alias](#alias) directive’s value for the current request, with all symbolic links resolved to real paths\n\n`$remote_addr`  \nclient address\n\n`$remote_port`  \nclient port\n\n`$remote_user`  \nuser name supplied with the Basic authentication\n\n`$request`  \nfull original request line\n\n`$request_body`  \nrequest body\n\nThe variable’s value is made available in locations processed by the [proxy_pass](ngx_http_proxy_module#proxy_pass), [fastcgi_pass](ngx_http_fastcgi_module#fastcgi_pass), [uwsgi_pass](ngx_http_uwsgi_module#uwsgi_pass), and [scgi_pass](ngx_http_scgi_module#scgi_pass) directives when the request body was read to a [memory buffer](#client_body_buffer_size).\n\n`$request_body_file`  \nname of a temporary file with the request body\n\nAt the end of processing, the file needs to be removed. To always write the request body to a file, [client_body_in_file_only](#client_body_in_file_only) needs to be enabled. When the name of a temporary file is passed in a proxied request or in a request to a FastCGI/uwsgi/SCGI server, passing the request body should be disabled by the [proxy_pass_request_body off](ngx_http_proxy_module#proxy_pass_request_body), [fastcgi_pass_request_body off](ngx_http_fastcgi_module#fastcgi_pass_request_body), [uwsgi_pass_request_body off](ngx_http_uwsgi_module#uwsgi_pass_request_body), or [scgi_pass_request_body off](ngx_http_scgi_module#scgi_pass_request_body) directives, respectively.\n\n`$request_completion`  \n“`OK`” if a request has completed, or an empty string otherwise\n\n`$request_filename`  \nfile path for the current request, based on the [root](#root) or [alias](#alias) directives, and the request URI\n\n`$request_id`  \nunique request identifier generated from 16 random bytes, in hexadecimal (1.11.0)\n\n`$request_length`  \nrequest length (including request line, header, and request body) (1.3.12, 1.2.7)\n\n`$request_method`  \nrequest method, usually “`GET`” or “`POST`”\n\n`$request_time`  \nrequest processing time in seconds with a milliseconds resolution (1.3.9, 1.2.6); time elapsed since the first bytes were read from the client\n\n`$request_uri`  \nfull original request URI (with arguments)\n\n`$scheme`  \nrequest scheme, “`http`” or “`https`”\n\n`$sent_http_`*`name`*  \narbitrary response header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores\n\n`$sent_trailer_`*`name`*  \narbitrary field sent at the end of the response (1.13.2); the last part of a variable name is the field name converted to lower case with dashes replaced by underscores\n\n`$server_addr`  \nan address of the server which accepted a request\n\nComputing a value of this variable usually requires one system call. To avoid a system call, the [listen](#listen) directives must specify addresses and use the `bind` parameter.\n\n`$server_name`  \nname of the server which accepted a request\n\n`$server_port`  \nport of the server which accepted a request\n\n`$server_protocol`  \nrequest protocol, usually “`HTTP/1.0`”, “`HTTP/1.1`”, “[HTTP/2.0](ngx_http_v2_module)”, or “[HTTP/3.0](ngx_http_v3_module)”\n\n`$status`  \nresponse status (1.3.2, 1.2.2)\n\n`$tcpinfo_rtt`, `$tcpinfo_rttvar`, `$tcpinfo_snd_cwnd`, `$tcpinfo_rcv_space`  \ninformation about the client TCP connection; available on systems that support the `TCP_INFO` socket option\n\n`$time_iso8601`  \nlocal time in the ISO 8601 standard format (1.3.12, 1.2.7)\n\n`$time_local`  \nlocal time in the Common Log Format (1.3.12, 1.2.7)\n\n`$uri`  \ncurrent URI in request, [normalized](#location)\n\nThe value of `$uri` may change during request processing, e.g. when doing internal redirects, or when using index files.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_core_module.html](https://nginx.org/en/docs/http/ngx_http_core_module.html)"
- name: ngx_http_dav_module
  id: http/ngx_http_dav_module
  summary: The ngx_http_dav_module module is intended for file management automation via the WebDAV protocol
  description: "# Module ngx_http_dav_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [create_full_put_path](#create_full_put_path)\n- [dav_access](#dav_access)\n- [dav_methods](#dav_methods)\n- [min_delete_depth](#min_delete_depth)\n\nThe `ngx_http_dav_module` module is intended for file management automation via the WebDAV protocol. The module processes HTTP and WebDAV methods PUT, DELETE, MKCOL, COPY, and MOVE.\n\nThis module is not built by default, it should be enabled with the `--with-http_dav_module` configuration parameter.\n\nWebDAV clients that require additional WebDAV methods to operate will not work with this module.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    root                  /data/www;\n\n    client_body_temp_path /data/client_temp;\n\n    dav_methods PUT DELETE MKCOL COPY MOVE;\n\n    create_full_put_path  on;\n    dav_access            group:rw  all:r;\n\n    limit_except GET {\n        allow 192.168.1.0/32;\n        deny  all;\n    }\n}\n```\n\n#### Directives\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`create_full_put_path`**` on | off;` |\n| Default: | `create_full_put_path off;`            |\n| Context: | `http`, `server`, `location`           |\n\nThe WebDAV specification only allows creating files in already existing directories. This directive allows creating all needed intermediate directories.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`dav_access`**` `*`users`*`:`*`permissions`*` ...;` |\n| Default: | `dav_access user:rw;`                                 |\n| Context: | `http`, `server`, `location`                          |\n\nSets access permissions for newly created files and directories, e.g.:\n\n``` nginx\ndav_access user:rw group:rw all:r;\n```\n\nIf any `group` or `all` access permissions are specified then `user` permissions may be omitted:\n\n``` nginx\ndav_access group:rw all:r;\n```\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`dav_methods`**` off | `*`method`*` ...;` |\n| Default: | `dav_methods off;`                          |\n| Context: | `http`, `server`, `location`                |\n\nAllows the specified HTTP and WebDAV methods. The parameter `off` denies all methods processed by this module. The following methods are supported: `PUT`, `DELETE`, `MKCOL`, `COPY`, and `MOVE`.\n\nA file uploaded with the PUT method is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [client_body_temp_path](ngx_http_core_module#client_body_temp_path) directive, are put on the same file system.\n\nWhen creating a file with the PUT method, it is possible to specify the modification date by passing it in the “Date” header field.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`min_delete_depth`**` `*`number`*`;` |\n| Default: | `min_delete_depth 0;`                  |\n| Context: | `http`, `server`, `location`           |\n\nAllows the DELETE method to remove files provided that the number of elements in a request path is not less than the specified number. For example, the directive\n\n``` nginx\nmin_delete_depth 4;\n```\n\nallows removing files on requests\n\n``` nginx\n/users/00/00/name\n/users/00/00/name/pic.jpg\n/users/00/00/page.html\n```\n\nand denies the removal of\n\n``` nginx\n/users/00/00\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_dav_module.html](https://nginx.org/en/docs/http/ngx_http_dav_module.html)"
- name: ngx_http_empty_gif_module
  id: http/ngx_http_empty_gif_module
  summary: The ngx_http_empty_gif_module module emits single-pixel transparent GIF
  description: "# Module ngx_http_empty_gif_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [empty_gif](#empty_gif)\n\nThe `ngx_http_empty_gif_module` module emits single-pixel transparent GIF.\n\n#### Example Configuration\n\n``` nginx\nlocation = /_.gif {\n    empty_gif;\n}\n```\n\n#### Directives\n\n|          |                    |\n|----------|--------------------|\n| Syntax:  | **`empty_gif`**`;` |\n| Default: | —                  |\n| Context: | `location`         |\n\nTurns on module processing in a surrounding location.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html](https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html)"
- name: ngx_http_f4f_module
  id: http/ngx_http_f4f_module
  summary: The ngx_http_f4f_module module provides server-side support for Adobe HTTP Dynamic Streaming (HDS)
  description: "# Module ngx_http_f4f_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [f4f](#f4f)\n- [f4f_buffer_size](#f4f_buffer_size)\n\nThe `ngx_http_f4f_module` module provides server-side support for Adobe HTTP Dynamic Streaming (HDS).\n\nThis module implements handling of HTTP Dynamic Streaming requests in the “`/videoSeg1-Frag1`” form — extracting the needed fragment from the `videoSeg1.f4f` file using the `videoSeg1.f4x` index file. This module is an alternative to the Adobe’s f4f module (HTTP Origin Module) for Apache.\n\nUsual pre-processing with Adobe’s f4fpackager is required, see relevant documentation for details.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nlocation /video/ {\n    f4f;\n    ...\n}\n```\n\n#### Directives\n\n|          |              |\n|----------|--------------|\n| Syntax:  | **`f4f`**`;` |\n| Default: | —            |\n| Context: | `location`   |\n\nTurns on module processing in the surrounding location.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`f4f_buffer_size`**` `*`size`*`;` |\n| Default: | `f4f_buffer_size 512k;`             |\n| Context: | `http`, `server`, `location`        |\n\nSets the *`size`* of the buffer used for reading the `.f4x` index file.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_f4f_module.html](https://nginx.org/en/docs/http/ngx_http_f4f_module.html)"
- name: ngx_http_fastcgi_module
  id: http/ngx_http_fastcgi_module
  summary: The ngx_http_fastcgi_module module allows passing requests to a FastCGI server
  description: "# Module ngx_http_fastcgi_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [fastcgi_bind](#fastcgi_bind)\n- [fastcgi_buffer_size](#fastcgi_buffer_size)\n- [fastcgi_buffering](#fastcgi_buffering)\n- [fastcgi_buffers](#fastcgi_buffers)\n- [fastcgi_busy_buffers_size](#fastcgi_busy_buffers_size)\n- [fastcgi_cache](#fastcgi_cache)\n- [fastcgi_cache_background_update](#fastcgi_cache_background_update)\n- [fastcgi_cache_bypass](#fastcgi_cache_bypass)\n- [fastcgi_cache_key](#fastcgi_cache_key)\n- [fastcgi_cache_lock](#fastcgi_cache_lock)\n- [fastcgi_cache_lock_age](#fastcgi_cache_lock_age)\n- [fastcgi_cache_lock_timeout](#fastcgi_cache_lock_timeout)\n- [fastcgi_cache_max_range_offset](#fastcgi_cache_max_range_offset)\n- [fastcgi_cache_methods](#fastcgi_cache_methods)\n- [fastcgi_cache_min_uses](#fastcgi_cache_min_uses)\n- [fastcgi_cache_path](#fastcgi_cache_path)\n- [fastcgi_cache_purge](#fastcgi_cache_purge)\n- [fastcgi_cache_revalidate](#fastcgi_cache_revalidate)\n- [fastcgi_cache_use_stale](#fastcgi_cache_use_stale)\n- [fastcgi_cache_valid](#fastcgi_cache_valid)\n- [fastcgi_catch_stderr](#fastcgi_catch_stderr)\n- [fastcgi_connect_timeout](#fastcgi_connect_timeout)\n- [fastcgi_force_ranges](#fastcgi_force_ranges)\n- [fastcgi_hide_header](#fastcgi_hide_header)\n- [fastcgi_ignore_client_abort](#fastcgi_ignore_client_abort)\n- [fastcgi_ignore_headers](#fastcgi_ignore_headers)\n- [fastcgi_index](#fastcgi_index)\n- [fastcgi_intercept_errors](#fastcgi_intercept_errors)\n- [fastcgi_keep_conn](#fastcgi_keep_conn)\n- [fastcgi_limit_rate](#fastcgi_limit_rate)\n- [fastcgi_max_temp_file_size](#fastcgi_max_temp_file_size)\n- [fastcgi_next_upstream](#fastcgi_next_upstream)\n- [fastcgi_next_upstream_timeout](#fastcgi_next_upstream_timeout)\n- [fastcgi_next_upstream_tries](#fastcgi_next_upstream_tries)\n- [fastcgi_no_cache](#fastcgi_no_cache)\n- [fastcgi_param](#fastcgi_param)\n- [fastcgi_pass](#fastcgi_pass)\n- [fastcgi_pass_header](#fastcgi_pass_header)\n- [fastcgi_pass_request_body](#fastcgi_pass_request_body)\n- [fastcgi_pass_request_headers](#fastcgi_pass_request_headers)\n- [fastcgi_read_timeout](#fastcgi_read_timeout)\n- [fastcgi_request_buffering](#fastcgi_request_buffering)\n- [fastcgi_send_lowat](#fastcgi_send_lowat)\n- [fastcgi_send_timeout](#fastcgi_send_timeout)\n- [fastcgi_socket_keepalive](#fastcgi_socket_keepalive)\n- [fastcgi_split_path_info](#fastcgi_split_path_info)\n- [fastcgi_store](#fastcgi_store)\n- [fastcgi_store_access](#fastcgi_store_access)\n- [fastcgi_temp_file_write_size](#fastcgi_temp_file_write_size)\n- [fastcgi_temp_path](#fastcgi_temp_path)\n- [Parameters Passed to a FastCGI Server](#parameters)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_fastcgi_module` module allows passing requests to a FastCGI server.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    fastcgi_pass  localhost:9000;\n    fastcgi_index index.php;\n\n    fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n    fastcgi_param QUERY_STRING    $query_string;\n    fastcgi_param REQUEST_METHOD  $request_method;\n    fastcgi_param CONTENT_TYPE    $content_type;\n    fastcgi_param CONTENT_LENGTH  $content_length;\n}\n```\n\n#### Directives\n\n|          |                                                         |\n|----------|---------------------------------------------------------|\n| Syntax:  | **`fastcgi_bind`**` `*`address`*` [transparent] | off;` |\n| Default: | —                                                       |\n| Context: | `http`, `server`, `location`                            |\n\nThis directive appeared in version 0.8.22.\n\nMakes outgoing connections to a FastCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `fastcgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.\n\nThe `transparent` parameter (1.11.0) allows outgoing connections to a FastCGI server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\nfastcgi_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the FastCGI server.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`fastcgi_buffer_size`**` `*`size`*`;` |\n| Default: | `fastcgi_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`            |\n\nSets the *`size`* of the buffer used for reading the first part of the response received from the FastCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`fastcgi_buffering`**` on | off;` |\n| Default: | `fastcgi_buffering on;`             |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.5.6.\n\nEnables or disables buffering of responses from the FastCGI server.\n\nWhen buffering is enabled, nginx receives a response from the FastCGI server as soon as possible, saving it into the buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#fastcgi_temp_path) on the disk. Writing to temporary files is controlled by the [fastcgi_max_temp_file_size](#fastcgi_max_temp_file_size) and [fastcgi_temp_file_write_size](#fastcgi_temp_file_write_size) directives.\n\nWhen buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the FastCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the [fastcgi_buffer_size](#fastcgi_buffer_size) directive.\n\nBuffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [fastcgi_ignore_headers](#fastcgi_ignore_headers) directive.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`fastcgi_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `fastcgi_buffers 8 4k|8k;`                       |\n| Context: | `http`, `server`, `location`                     |\n\nSets the *`number`* and *`size`* of the buffers used for reading a response from the FastCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`fastcgi_busy_buffers_size`**` `*`size`*`;` |\n| Default: | `fastcgi_busy_buffers_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                  |\n\nWhen [buffering](#fastcgi_buffering) of responses from the FastCGI server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`fastcgi_cache`**` `*`zone`*` | off;` |\n| Default: | `fastcgi_cache off;`                    |\n| Context: | `http`, `server`, `location`            |\n\nDefines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_background_update`**` on | off;` |\n| Default: | `fastcgi_cache_background_update off;`            |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.11.10.\n\nAllows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#fastcgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_bypass`**` `*`string`*` ...;` |\n| Default: | —                                              |\n| Context: | `http`, `server`, `location`                   |\n\nDefines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:\n\n``` nginx\nfastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nfastcgi_cache_bypass $http_pragma    $http_authorization;\n```\n\nCan be used along with the [fastcgi_no_cache](#fastcgi_no_cache) directive.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`fastcgi_cache_key`**` `*`string`*`;` |\n| Default: | —                                       |\n| Context: | `http`, `server`, `location`            |\n\nDefines a key for caching, for example\n\n``` nginx\nfastcgi_cache_key localhost:9000$request_uri;\n```\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`fastcgi_cache_lock`**` on | off;` |\n| Default: | `fastcgi_cache_lock off;`            |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.1.12.\n\nWhen enabled, only one request at a time will be allowed to populate a new cache element identified according to the [fastcgi_cache_key](#fastcgi_cache_key) directive by passing a request to a FastCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [fastcgi_cache_lock_timeout](#fastcgi_cache_lock_timeout) directive.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`fastcgi_cache_lock_age`**` `*`time`*`;` |\n| Default: | `fastcgi_cache_lock_age 5s;`               |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 1.7.8.\n\nIf the last request passed to the FastCGI server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the FastCGI server.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_lock_timeout`**` `*`time`*`;` |\n| Default: | `fastcgi_cache_lock_timeout 5s;`               |\n| Context: | `http`, `server`, `location`                   |\n\nThis directive appeared in version 1.1.12.\n\nSets a timeout for [fastcgi_cache_lock](#fastcgi_cache_lock). When the *`time`* expires, the request will be passed to the FastCGI server, however, the response will not be cached.\n\nBefore 1.7.8, the response could be cached.\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_max_range_offset`**` `*`number`*`;` |\n| Default: | —                                                    |\n| Context: | `http`, `server`, `location`                         |\n\nThis directive appeared in version 1.11.6.\n\nSets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the FastCGI server and the response will not be cached.\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_methods`**` GET | HEAD | POST ...;` |\n| Default: | `fastcgi_cache_methods GET HEAD;`                    |\n| Context: | `http`, `server`, `location`                         |\n\nThis directive appeared in version 0.7.59.\n\nIf the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [fastcgi_no_cache](#fastcgi_no_cache) directive.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`fastcgi_cache_min_uses`**` `*`number`*`;` |\n| Default: | `fastcgi_cache_min_uses 1;`                  |\n| Context: | `http`, `server`, `location`                 |\n\nSets the *`number`* of requests after which the response will be cached.\n\n|          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_path`**` `*`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |\n| Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n\nSets the path and other parameters of a cache. Cache data are stored in files. Both the key and file name in a cache are a result of applying the MD5 function to the proxied URL. The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration\n\n``` nginx\nfastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n```\n\nfile names in a cache will look like this:\n\n``` nginx\n/data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c\n```\n\nA cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [fastcgi_temp_path](#fastcgi_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.\n\nIn addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.\n\nAs part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.\n\nCached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.\n\nThe special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.\n\nA minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.\n\nAdditionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n`purger`=`on`\\|`off`  \nInstructs whether cache entries that match a [wildcard key](#fastcgi_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.\n\n`purger_files`=*`number`*  \nSets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.\n\n`purger_threshold`=*`number`*  \nSets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.\n\n`purger_sleep`=*`number`*  \nSets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.\n\nIn versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`fastcgi_cache_purge`**` string ...;` |\n| Default: | —                                       |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.5.7.\n\nDefines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#fastcgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.\n\nIf the [cache key](#fastcgi_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#fastcgi_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.\n\nExample configuration:\n\n``` nginx\nfastcgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        fastcgi_pass        backend;\n        fastcgi_cache       cache_zone;\n        fastcgi_cache_key   $uri;\n        fastcgi_cache_purge $purge_method;\n    }\n}\n```\n\nThis functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`fastcgi_cache_revalidate`**` on | off;` |\n| Default: | `fastcgi_cache_revalidate off;`            |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 1.5.7.\n\nEnables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.\n\n|          |                                                                                                                                               |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | http_429 | off ...;` |\n| Default: | `fastcgi_cache_use_stale off;`                                                                                                                |\n| Context: | `http`, `server`, `location`                                                                                                                  |\n\nDetermines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server. The directive’s parameters match the parameters of the [fastcgi_next_upstream](#fastcgi_next_upstream) directive.\n\nThe `error` parameter also permits using a stale cached response if a FastCGI server to process a request cannot be selected.\n\nAdditionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to FastCGI servers when updating cached data.\n\nUsing a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.\n\n- The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.\n- The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.\n\nTo minimize the number of accesses to FastCGI servers when populating a new cache element, the [fastcgi_cache_lock](#fastcgi_cache_lock) directive can be used.\n\n|          |                                                          |\n|----------|----------------------------------------------------------|\n| Syntax:  | **`fastcgi_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |\n| Default: | —                                                        |\n| Context: | `http`, `server`, `location`                             |\n\nSets caching time for different response codes. For example, the following directives\n\n``` nginx\nfastcgi_cache_valid 200 302 10m;\nfastcgi_cache_valid 404      1m;\n```\n\nset 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.\n\nIf only caching *`time`* is specified\n\n``` nginx\nfastcgi_cache_valid 5m;\n```\n\nthen only 200, 301, and 302 responses are cached.\n\nIn addition, the `any` parameter can be specified to cache any responses:\n\n``` nginx\nfastcgi_cache_valid 200 302 10m;\nfastcgi_cache_valid 301      1h;\nfastcgi_cache_valid any      1m;\n```\n\nParameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.\n\n- The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.\n- If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.\n- If the header includes the “Set-Cookie” field, such a response will not be cached.\n- If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).\n\nProcessing of one or more of these response header fields can be disabled using the [fastcgi_ignore_headers](#fastcgi_ignore_headers) directive.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`fastcgi_catch_stderr`**` `*`string`*`;` |\n| Default: | —                                          |\n| Context: | `http`, `server`, `location`               |\n\nSets a string to search for in the error stream of a response received from a FastCGI server. If the *`string`* is found then it is considered that the FastCGI server has returned an [invalid response](#fastcgi_next_upstream). This allows handling application errors in nginx, for example:\n\n``` nginx\nlocation /php/ {\n    fastcgi_pass backend:9000;\n    ...\n    fastcgi_catch_stderr \"PHP Fatal error\";\n    fastcgi_next_upstream error timeout invalid_header;\n}\n```\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`fastcgi_connect_timeout`**` `*`time`*`;` |\n| Default: | `fastcgi_connect_timeout 60s;`              |\n| Context: | `http`, `server`, `location`                |\n\nDefines a timeout for establishing a connection with a FastCGI server. It should be noted that this timeout cannot usually exceed 75 seconds.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`fastcgi_force_ranges`**` on | off;` |\n| Default: | `fastcgi_force_ranges off;`            |\n| Context: | `http`, `server`, `location`           |\n\nThis directive appeared in version 1.7.7.\n\nEnables byte-range support for both cached and uncached responses from the FastCGI server regardless of the “Accept-Ranges” field in these responses.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`fastcgi_hide_header`**` `*`field`*`;` |\n| Default: | —                                        |\n| Context: | `http`, `server`, `location`             |\n\nBy default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client. The `fastcgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [fastcgi_pass_header](#fastcgi_pass_header) directive can be used.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`fastcgi_ignore_client_abort`**` on | off;` |\n| Default: | `fastcgi_ignore_client_abort off;`            |\n| Context: | `http`, `server`, `location`                  |\n\nDetermines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`fastcgi_ignore_headers`**` `*`field`*` ...;` |\n| Default: | —                                               |\n| Context: | `http`, `server`, `location`                    |\n\nDisables processing of certain response header fields from the FastCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).\n\nIf not disabled, processing of these header fields has the following effect:\n\n- “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#fastcgi_cache_valid);\n- “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;\n- “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;\n- “X-Accel-Buffering” enables or disables [buffering](#fastcgi_buffering) of a response;\n- “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`fastcgi_index`**` `*`name`*`;` |\n| Default: | —                                 |\n| Context: | `http`, `server`, `location`      |\n\nSets a file name that will be appended after a URI that ends with a slash, in the value of the `$fastcgi_script_name` variable. For example, with these settings\n\n``` nginx\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n```\n\nand the “`/page.php`” request, the `SCRIPT_FILENAME` parameter will be equal to “`/home/www/scripts/php/page.php`”, and with the “`/`” request it will be equal to “`/home/www/scripts/php/index.php`”.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`fastcgi_intercept_errors`**` on | off;` |\n| Default: | `fastcgi_intercept_errors off;`            |\n| Context: | `http`, `server`, `location`               |\n\nDetermines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`fastcgi_keep_conn`**` on | off;` |\n| Default: | `fastcgi_keep_conn off;`            |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.1.4.\n\nBy default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value `on`, nginx will instruct a FastCGI server to keep connections open. This is necessary, in particular, for [keepalive](ngx_http_upstream_module#keepalive) connections to FastCGI servers to function.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`fastcgi_limit_rate`**` `*`rate`*`;` |\n| Default: | `fastcgi_limit_rate 0;`                |\n| Context: | `http`, `server`, `location`           |\n\nThis directive appeared in version 1.7.7.\n\nLimits the speed of reading the response from the FastCGI server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the FastCFI server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#fastcgi_buffering) of responses from the FastCGI server is enabled. Parameter value can contain variables (1.27.0).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`fastcgi_max_temp_file_size`**` `*`size`*`;` |\n| Default: | `fastcgi_max_temp_file_size 1024m;`            |\n| Context: | `http`, `server`, `location`                   |\n\nWhen [buffering](#fastcgi_buffering) of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [fastcgi_temp_file_write_size](#fastcgi_temp_file_write_size) directive.\n\nThe zero value disables buffering of responses to temporary files.\n\nThis restriction does not apply to responses that will be [cached](#fastcgi_cache) or [stored](#fastcgi_store) on disk.\n\n|          |                                                                                                                                                   |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`fastcgi_next_upstream`**` error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |\n| Default: | `fastcgi_next_upstream error timeout;`                                                                                                            |\n| Context: | `http`, `server`, `location`                                                                                                                      |\n\nSpecifies in which cases a request should be passed to the next server:\n\n`error`  \nan error occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`timeout`  \na timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`invalid_header`  \na server returned an empty or invalid response;\n\n`http_500`  \na server returned a response with the code 500;\n\n`http_503`  \na server returned a response with the code 503;\n\n`http_403`  \na server returned a response with the code 403;\n\n`http_404`  \na server returned a response with the code 404;\n\n`http_429`  \na server returned a response with the code 429 (1.11.13);\n\n`non_idempotent`  \nnormally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;\n\n`off`  \ndisables passing a request to the next server.\n\nOne should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.\n\nThe directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_503`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.\n\nPassing a request to the next server can be limited by [the number of tries](#fastcgi_next_upstream_tries) and by [time](#fastcgi_next_upstream_timeout).\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`fastcgi_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `fastcgi_next_upstream_timeout 0;`                |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.7.5.\n\nLimits the time during which a request can be passed to the [next server](#fastcgi_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`fastcgi_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `fastcgi_next_upstream_tries 0;`                  |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.7.5.\n\nLimits the number of possible tries for passing a request to the [next server](#fastcgi_next_upstream). The `0` value turns off this limitation.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`fastcgi_no_cache`**` `*`string`*` ...;` |\n| Default: | —                                          |\n| Context: | `http`, `server`, `location`               |\n\nDefines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:\n\n``` nginx\nfastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nfastcgi_no_cache $http_pragma    $http_authorization;\n```\n\nCan be used along with the [fastcgi_cache_bypass](#fastcgi_cache_bypass) directive.\n\n|          |                                                                   |\n|----------|-------------------------------------------------------------------|\n| Syntax:  | **`fastcgi_param`**` `*`parameter`*` `*`value`*` [if_not_empty];` |\n| Default: | —                                                                 |\n| Context: | `http`, `server`, `location`                                      |\n\nSets a *`parameter`* that should be passed to the FastCGI server. The *`value`* can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `fastcgi_param` directives defined on the current level.\n\nThe following example shows the minimum required settings for PHP:\n\n``` nginx\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\nfastcgi_param QUERY_STRING    $query_string;\n```\n\nThe `SCRIPT_FILENAME` parameter is used in PHP for determining the script name, and the `QUERY_STRING` parameter is used to pass request parameters.\n\nFor scripts that process `POST` requests, the following three parameters are also required:\n\n``` nginx\nfastcgi_param REQUEST_METHOD  $request_method;\nfastcgi_param CONTENT_TYPE    $content_type;\nfastcgi_param CONTENT_LENGTH  $content_length;\n```\n\nIf PHP was built with the `--enable-force-cgi-redirect` configuration parameter, the `REDIRECT_STATUS` parameter should also be passed with the value “200”:\n\n``` nginx\nfastcgi_param REDIRECT_STATUS 200;\n```\n\nIf the directive is specified with `if_not_empty` (1.1.11) then such a parameter will be passed to the server only if its value is not empty:\n\n``` nginx\nfastcgi_param HTTPS           $https if_not_empty;\n```\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`fastcgi_pass`**` `*`address`*`;` |\n| Default: | —                                   |\n| Context: | `location`, `if in location`        |\n\nSets the address of a FastCGI server. The address can be specified as a domain name or IP address, and a port:\n\n``` nginx\nfastcgi_pass localhost:9000;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\nfastcgi_pass unix:/tmp/fastcgi.socket;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).\n\nParameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`fastcgi_pass_header`**` `*`field`*`;` |\n| Default: | —                                        |\n| Context: | `http`, `server`, `location`             |\n\nPermits passing [otherwise disabled](#fastcgi_hide_header) header fields from a FastCGI server to a client.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`fastcgi_pass_request_body`**` on | off;` |\n| Default: | `fastcgi_pass_request_body on;`             |\n| Context: | `http`, `server`, `location`                |\n\nIndicates whether the original request body is passed to the FastCGI server. See also the [fastcgi_pass_request_headers](#fastcgi_pass_request_headers) directive.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`fastcgi_pass_request_headers`**` on | off;` |\n| Default: | `fastcgi_pass_request_headers on;`             |\n| Context: | `http`, `server`, `location`                   |\n\nIndicates whether the header fields of the original request are passed to the FastCGI server. See also the [fastcgi_pass_request_body](#fastcgi_pass_request_body) directive.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`fastcgi_read_timeout`**` `*`time`*`;` |\n| Default: | `fastcgi_read_timeout 60s;`              |\n| Context: | `http`, `server`, `location`             |\n\nDefines a timeout for reading a response from the FastCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the FastCGI server does not transmit anything within this time, the connection is closed.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`fastcgi_request_buffering`**` on | off;` |\n| Default: | `fastcgi_request_buffering on;`             |\n| Context: | `http`, `server`, `location`                |\n\nThis directive appeared in version 1.7.11.\n\nEnables or disables buffering of a client request body.\n\nWhen buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to a FastCGI server.\n\nWhen buffering is disabled, the request body is sent to the FastCGI server immediately as it is received. In this case, the request cannot be passed to the [next server](#fastcgi_next_upstream) if nginx already started sending the request body.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`fastcgi_send_lowat`**` `*`size`*`;` |\n| Default: | `fastcgi_send_lowat 0;`                |\n| Context: | `http`, `server`, `location`           |\n\nIf the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either `NOTE_LOWAT` flag of the [kqueue](../events#kqueue) method, or the `SO_SNDLOWAT` socket option, with the specified *`size`*.\n\nThis directive is ignored on Linux, Solaris, and Windows.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`fastcgi_send_timeout`**` `*`time`*`;` |\n| Default: | `fastcgi_send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`             |\n\nSets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the FastCGI server does not receive anything within this time, the connection is closed.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`fastcgi_socket_keepalive`**` on | off;` |\n| Default: | `fastcgi_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a FastCGI server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`fastcgi_split_path_info`**` `*`regex`*`;` |\n| Default: | —                                            |\n| Context: | `location`                                   |\n\nDefines a regular expression that captures a value for the `$fastcgi_path_info` variable. The regular expression should have two captures: the first becomes a value of the `$fastcgi_script_name` variable, the second becomes a value of the `$fastcgi_path_info` variable. For example, with these settings\n\n``` nginx\nlocation ~ ^(.+\\.php)(.*)$ {\n    fastcgi_split_path_info       ^(.+\\.php)(.*)$;\n    fastcgi_param SCRIPT_FILENAME /path/to/php$fastcgi_script_name;\n    fastcgi_param PATH_INFO       $fastcgi_path_info;\n```\n\nand the “`/show.php/article/0001`” request, the `SCRIPT_FILENAME` parameter will be equal to “`/path/to/php/show.php`”, and the `PATH_INFO` parameter will be equal to “`/article/0001`”.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`fastcgi_store`**` on | off | `*`string`*`;` |\n| Default: | `fastcgi_store off;`                           |\n| Context: | `http`, `server`, `location`                   |\n\nEnables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:\n\n``` nginx\nfastcgi_store /data/www$original_uri;\n```\n\nThe modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [fastcgi_temp_path](#fastcgi_temp_path) directive, are put on the same file system.\n\nThis directive can be used to create local copies of static unchangeable files, e.g.:\n\n``` nginx\nlocation /images/ {\n    root                 /data/www;\n    error_page           404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    fastcgi_pass         backend:9000;\n    ...\n\n    fastcgi_store        on;\n    fastcgi_store_access user:rw group:rw all:r;\n    fastcgi_temp_path    /data/temp;\n\n    alias                /data/www/;\n}\n```\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`fastcgi_store_access`**` `*`users`*`:`*`permissions`*` ...;` |\n| Default: | `fastcgi_store_access user:rw;`                                 |\n| Context: | `http`, `server`, `location`                                    |\n\nSets access permissions for newly created files and directories, e.g.:\n\n``` nginx\nfastcgi_store_access user:rw group:rw all:r;\n```\n\nIf any `group` or `all` access permissions are specified then `user` permissions may be omitted:\n\n``` nginx\nfastcgi_store_access group:rw all:r;\n```\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`fastcgi_temp_file_write_size`**` `*`size`*`;` |\n| Default: | `fastcgi_temp_file_write_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                     |\n\nLimits the *`size`* of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [fastcgi_buffer_size](#fastcgi_buffer_size) and [fastcgi_buffers](#fastcgi_buffers) directives. The maximum size of a temporary file is set by the [fastcgi_max_temp_file_size](#fastcgi_max_temp_file_size) directive.\n\n|          |                                                                                    |\n|----------|------------------------------------------------------------------------------------|\n| Syntax:  | **`fastcgi_temp_path`**` `*`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `fastcgi_temp_path fastcgi_temp;`                                                  |\n| Context: | `http`, `server`, `location`                                                       |\n\nDefines a directory for storing temporary files with data received from FastCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nfastcgi_temp_path /spool/nginx/fastcgi_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/fastcgi_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [fastcgi_cache_path](#fastcgi_cache_path) directive.\n\n#### Parameters Passed to a FastCGI Server\n\nHTTP request header fields are passed to a FastCGI server as parameters. In applications and scripts running as FastCGI servers, these parameters are usually made available as environment variables. For example, the “User-Agent” header field is passed as the `HTTP_USER_AGENT` parameter. In addition to HTTP request header fields, it is possible to pass arbitrary parameters using the [fastcgi_param](#fastcgi_param) directive.\n\n#### Embedded Variables\n\nThe `ngx_http_fastcgi_module` module supports embedded variables that can be used to set parameters using the [fastcgi_param](#fastcgi_param) directive:\n\n`$fastcgi_script_name`  \nrequest URI or, if a URI ends with a slash, request URI with an index file name configured by the [fastcgi_index](#fastcgi_index) directive appended to it. This variable can be used to set the `SCRIPT_FILENAME` and `PATH_TRANSLATED` parameters that determine the script name in PHP. For example, for the “`/info/`” request with the following directives\n\n``` nginx\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n```\n\nthe `SCRIPT_FILENAME` parameter will be equal to “`/home/www/scripts/php/info/index.php`”.\n\nWhen using the [fastcgi_split_path_info](#fastcgi_split_path_info) directive, the `$fastcgi_script_name` variable equals the value of the first capture set by the directive.\n\n`$fastcgi_path_info`  \nthe value of the second capture set by the [fastcgi_split_path_info](#fastcgi_split_path_info) directive. This variable can be used to set the `PATH_INFO` parameter.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html](https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html)"
- name: ngx_http_flv_module
  id: http/ngx_http_flv_module
  summary: The ngx_http_flv_module module provides pseudo-streaming server-side support for Flash Video (FLV) files
  description: "# Module ngx_http_flv_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [flv](#flv)\n\nThe `ngx_http_flv_module` module provides pseudo-streaming server-side support for Flash Video (FLV) files.\n\nIt handles requests with the `start` argument in the request URI’s query string specially, by sending back the contents of a file starting from the requested byte offset and with the prepended FLV header.\n\nThis module is not built by default, it should be enabled with the `--with-http_flv_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlocation ~ \\.flv$ {\n    flv;\n}\n```\n\n#### Directives\n\n|          |              |\n|----------|--------------|\n| Syntax:  | **`flv`**`;` |\n| Default: | —            |\n| Context: | `location`   |\n\nTurns on module processing in a surrounding location.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_flv_module.html](https://nginx.org/en/docs/http/ngx_http_flv_module.html)"
- name: ngx_http_geo_module
  id: http/ngx_http_geo_module
  summary: The ngx_http_geo_module module creates variables with values depending on the client IP address
  description: "# Module ngx_http_geo_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [geo](#geo)\n\nThe `ngx_http_geo_module` module creates variables with values depending on the client IP address.\n\n#### Example Configuration\n\n``` nginx\ngeo $geo {\n    default        0;\n\n    127.0.0.1      2;\n    192.168.1.0/24 1;\n    10.1.0.0/16    1;\n\n    ::1            2;\n    2001:0db8::/32 1;\n}\n```\n\n#### Directives\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`geo`**` [`*`$address`*`] `*`$variable`*` { ... }` |\n| Default: | —                                                    |\n| Context: | `http`                                               |\n\nDescribes the dependency of values of the specified variable on the client IP address. By default, the address is taken from the `$remote_addr` variable, but it can also be taken from another variable (0.7.27), for example:\n\n``` nginx\ngeo $arg_remote_addr $geo {\n    ...;\n}\n```\n\nSince variables are evaluated only when used, the mere existence of even a large number of declared “`geo`” variables does not cause any extra costs for request processing.\n\nIf the value of a variable does not represent a valid IP address then the “`255.255.255.255`” address is used.\n\nAddresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges (0.7.23).\n\nIPv6 prefixes are supported starting from versions 1.3.10 and 1.2.7.\n\nThe following special parameters are also supported:\n\n`delete`  \ndeletes the specified network (0.7.23).\n\n`default`  \na value set to the variable if the client address does not match any of the specified addresses. When addresses are specified in CIDR notation, “`0.0.0.0/0`” and “`::/0`” can be used instead of `default`. When `default` is not specified, the default value will be an empty string.\n\n`include`  \nincludes a file with addresses and values. There can be several inclusions.\n\n`proxy`  \ndefines trusted addresses (0.8.7, 0.7.63). When a request comes from a trusted address, an address from the “X-Forwarded-For” request header field will be used instead. In contrast to the regular addresses, trusted addresses are checked sequentially.\n\nTrusted IPv6 addresses are supported starting from versions 1.3.0 and 1.2.1.\n\n`proxy_recursive`  \nenables recursive address search (1.3.0, 1.2.1). If recursive search is disabled then instead of the original client address that matches one of the trusted addresses, the last address sent in “X-Forwarded-For” will be used. If recursive search is enabled then instead of the original client address that matches one of the trusted addresses, the last non-trusted address sent in “X-Forwarded-For” will be used.\n\n`ranges`  \nindicates that addresses are specified as ranges (0.7.23). This parameter should be the first. To speed up loading of a geo base, addresses should be put in ascending order.\n\nExample:\n\n``` nginx\ngeo $country {\n    default        ZZ;\n    include        conf/geo.conf;\n    delete         127.0.0.0/16;\n    proxy          192.168.100.0/24;\n    proxy          2001:0db8::/32;\n\n    127.0.0.0/24   US;\n    127.0.0.1/32   RU;\n    10.1.0.0/16    RU;\n    192.168.1.0/24 UK;\n}\n```\n\nThe `conf/geo.conf` file could contain the following lines:\n\n``` nginx\n10.2.0.0/16    RU;\n192.168.2.0/24 RU;\n```\n\nA value of the most specific match is used. For example, for the 127.0.0.1 address the value “`RU`” will be chosen, not “`US`”.\n\nExample with ranges:\n\n``` nginx\ngeo $country {\n    ranges;\n    default                   ZZ;\n    127.0.0.0-127.0.0.0       US;\n    127.0.0.1-127.0.0.1       RU;\n    127.0.0.1-127.0.0.255     US;\n    10.1.0.0-10.1.255.255     RU;\n    192.168.1.0-192.168.1.255 UK;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_geo_module.html](https://nginx.org/en/docs/http/ngx_http_geo_module.html)"
- name: ngx_http_geoip_module
  id: http/ngx_http_geoip_module
  summary: The ngx_http_geoip_module module (0.8.6+) creates variables with values depending on the client IP address, using the precompiled MaxMind databases
  description: "# Module ngx_http_geoip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [geoip_country](#geoip_country)\n- [geoip_city](#geoip_city)\n- [geoip_org](#geoip_org)\n- [geoip_proxy](#geoip_proxy)\n- [geoip_proxy_recursive](#geoip_proxy_recursive)\n\nThe `ngx_http_geoip_module` module (0.8.6+) creates variables with values depending on the client IP address, using the precompiled [MaxMind](http://www.maxmind.com) databases.\n\nWhen using the databases with IPv6 support (1.3.12, 1.2.7), IPv4 addresses are looked up as IPv4-mapped IPv6 addresses.\n\nThis module is not built by default, it should be enabled with the `--with-http_geoip_module` configuration parameter.\n\nThis module requires the [MaxMind GeoIP](http://www.maxmind.com/app/c) library.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    geoip_country         GeoIP.dat;\n    geoip_city            GeoLiteCity.dat;\n    geoip_proxy           192.168.100.0/24;\n    geoip_proxy           2001:0db8::/32;\n    geoip_proxy_recursive on;\n    ...\n```\n\n#### Directives\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`geoip_country`**` `*`file`*`;` |\n| Default: | —                                 |\n| Context: | `http`                            |\n\nSpecifies a database used to determine the country depending on the client IP address. The following variables are available when using this database:\n\n`$geoip_country_code`  \ntwo-letter country code, for example, “`RU`”, “`US`”.\n\n`$geoip_country_code3`  \nthree-letter country code, for example, “`RUS`”, “`USA`”.\n\n`$geoip_country_name`  \ncountry name, for example, “`Russian Federation`”, “`United States`”.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`geoip_city`**` `*`file`*`;` |\n| Default: | —                              |\n| Context: | `http`                         |\n\nSpecifies a database used to determine the country, region, and city depending on the client IP address. The following variables are available when using this database:\n\n`$geoip_area_code`  \ntelephone area code (US only).\n\nThis variable may contain outdated information since the corresponding database field is deprecated.\n\n`$geoip_city_continent_code`  \ntwo-letter continent code, for example, “`EU`”, “`NA`”.\n\n`$geoip_city_country_code`  \ntwo-letter country code, for example, “`RU`”, “`US`”.\n\n`$geoip_city_country_code3`  \nthree-letter country code, for example, “`RUS`”, “`USA`”.\n\n`$geoip_city_country_name`  \ncountry name, for example, “`Russian Federation`”, “`United States`”.\n\n`$geoip_dma_code`  \nDMA region code in US (also known as “metro code”), according to the [geotargeting](https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions) in Google AdWords API.\n\n`$geoip_latitude`  \nlatitude.\n\n`$geoip_longitude`  \nlongitude.\n\n`$geoip_region`  \ntwo-symbol country region code (region, territory, state, province, federal land and the like), for example, “`48`”, “`DC`”.\n\n`$geoip_region_name`  \ncountry region name (region, territory, state, province, federal land and the like), for example, “`Moscow City`”, “`District of Columbia`”.\n\n`$geoip_city`  \ncity name, for example, “`Moscow`”, “`Washington`”.\n\n`$geoip_postal_code`  \npostal code.\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`geoip_org`**` `*`file`*`;` |\n| Default: | —                             |\n| Context: | `http`                        |\n\nThis directive appeared in version 1.0.3.\n\nSpecifies a database used to determine the organization depending on the client IP address. The following variable is available when using this database:\n\n`$geoip_org`  \norganization name, for example, “The University of Melbourne”.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`geoip_proxy`**` `*`address`*` | `*`CIDR`*`;` |\n| Default: | —                                               |\n| Context: | `http`                                          |\n\nThis directive appeared in versions 1.3.0 and 1.2.1.\n\nDefines trusted addresses. When a request comes from a trusted address, an address from the “X-Forwarded-For” request header field will be used instead.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`geoip_proxy_recursive`**` on | off;` |\n| Default: | `geoip_proxy_recursive off;`            |\n| Context: | `http`                                  |\n\nThis directive appeared in versions 1.3.0 and 1.2.1.\n\nIf recursive search is disabled then instead of the original client address that matches one of the trusted addresses, the last address sent in “X-Forwarded-For” will be used. If recursive search is enabled then instead of the original client address that matches one of the trusted addresses, the last non-trusted address sent in “X-Forwarded-For” will be used.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_geoip_module.html](https://nginx.org/en/docs/http/ngx_http_geoip_module.html)"
- name: ngx_http_grpc_module
  id: http/ngx_http_grpc_module
  summary: The ngx_http_grpc_module module allows passing requests to a gRPC server (1.13.10)
  description: "# Module ngx_http_grpc_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [grpc_bind](#grpc_bind)\n- [grpc_buffer_size](#grpc_buffer_size)\n- [grpc_connect_timeout](#grpc_connect_timeout)\n- [grpc_hide_header](#grpc_hide_header)\n- [grpc_ignore_headers](#grpc_ignore_headers)\n- [grpc_intercept_errors](#grpc_intercept_errors)\n- [grpc_next_upstream](#grpc_next_upstream)\n- [grpc_next_upstream_timeout](#grpc_next_upstream_timeout)\n- [grpc_next_upstream_tries](#grpc_next_upstream_tries)\n- [grpc_pass](#grpc_pass)\n- [grpc_pass_header](#grpc_pass_header)\n- [grpc_read_timeout](#grpc_read_timeout)\n- [grpc_send_timeout](#grpc_send_timeout)\n- [grpc_set_header](#grpc_set_header)\n- [grpc_socket_keepalive](#grpc_socket_keepalive)\n- [grpc_ssl_certificate](#grpc_ssl_certificate)\n- [grpc_ssl_certificate_key](#grpc_ssl_certificate_key)\n- [grpc_ssl_ciphers](#grpc_ssl_ciphers)\n- [grpc_ssl_conf_command](#grpc_ssl_conf_command)\n- [grpc_ssl_crl](#grpc_ssl_crl)\n- [grpc_ssl_name](#grpc_ssl_name)\n- [grpc_ssl_password_file](#grpc_ssl_password_file)\n- [grpc_ssl_protocols](#grpc_ssl_protocols)\n- [grpc_ssl_server_name](#grpc_ssl_server_name)\n- [grpc_ssl_session_reuse](#grpc_ssl_session_reuse)\n- [grpc_ssl_trusted_certificate](#grpc_ssl_trusted_certificate)\n- [grpc_ssl_verify](#grpc_ssl_verify)\n- [grpc_ssl_verify_depth](#grpc_ssl_verify_depth)\n\nThe `ngx_http_grpc_module` module allows passing requests to a gRPC server (1.13.10). The module requires the [ngx_http_v2_module](ngx_http_v2_module) module.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    listen 9000;\n\n    http2 on;\n\n    location / {\n        grpc_pass 127.0.0.1:9000;\n    }\n}\n```\n\n#### Directives\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`grpc_bind`**` `*`address`*` [transparent ] | off;` |\n| Default: | —                                                     |\n| Context: | `http`, `server`, `location`                          |\n\nMakes outgoing connections to a gRPC server originate from the specified local IP address with an optional port. Parameter value can contain variables. The special value `off` cancels the effect of the `grpc_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.\n\nThe `transparent` parameter allows outgoing connections to a gRPC server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\ngrpc_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the gRPC server.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`grpc_buffer_size`**` `*`size`*`;` |\n| Default: | `grpc_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`         |\n\nSets the *`size`* of the buffer used for reading the response received from the gRPC server. The response is passed to the client synchronously, as soon as it is received.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`grpc_connect_timeout`**` `*`time`*`;` |\n| Default: | `grpc_connect_timeout 60s;`              |\n| Context: | `http`, `server`, `location`             |\n\nDefines a timeout for establishing a connection with a gRPC server. It should be noted that this timeout cannot usually exceed 75 seconds.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`grpc_hide_header`**` `*`field`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nBy default, nginx does not pass the header fields “Date”, “Server”, and “X-Accel-...” from the response of a gRPC server to a client. The `grpc_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [grpc_pass_header](#grpc_pass_header) directive can be used.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`grpc_ignore_headers`**` `*`field`*` ...;` |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`                 |\n\nDisables processing of certain response header fields from the gRPC server. The following fields can be ignored: “X-Accel-Redirect” and “X-Accel-Charset”.\n\nIf not disabled, processing of these header fields has the following effect:\n\n- “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;\n- “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`grpc_intercept_errors`**` on | off;` |\n| Default: | `grpc_intercept_errors off;`            |\n| Context: | `http`, `server`, `location`            |\n\nDetermines whether gRPC server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.\n\n|          |                                                                                                                                                                      |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`grpc_next_upstream`**` error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |\n| Default: | `grpc_next_upstream error timeout;`                                                                                                                                  |\n| Context: | `http`, `server`, `location`                                                                                                                                         |\n\nSpecifies in which cases a request should be passed to the next server:\n\n`error`  \nan error occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`timeout`  \na timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`invalid_header`  \na server returned an empty or invalid response;\n\n`http_500`  \na server returned a response with the code 500;\n\n`http_502`  \na server returned a response with the code 502;\n\n`http_503`  \na server returned a response with the code 503;\n\n`http_504`  \na server returned a response with the code 504;\n\n`http_403`  \na server returned a response with the code 403;\n\n`http_404`  \na server returned a response with the code 404;\n\n`http_429`  \na server returned a response with the code 429;\n\n`non_idempotent`  \nnormally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server; enabling this option explicitly allows retrying such requests;\n\n`off`  \ndisables passing a request to the next server.\n\nOne should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.\n\nThe directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_502`, `http_503`, `http_504`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.\n\nPassing a request to the next server can be limited by [the number of tries](#grpc_next_upstream_tries) and by [time](#grpc_next_upstream_timeout).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`grpc_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `grpc_next_upstream_timeout 0;`                |\n| Context: | `http`, `server`, `location`                   |\n\nLimits the time during which a request can be passed to the [next server](#grpc_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`grpc_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `grpc_next_upstream_tries 0;`                  |\n| Context: | `http`, `server`, `location`                   |\n\nLimits the number of possible tries for passing a request to the [next server](#grpc_next_upstream). The `0` value turns off this limitation.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`grpc_pass`**` `*`address`*`;` |\n| Default: | —                                |\n| Context: | `location`, `if in location`     |\n\nSets the gRPC server address. The address can be specified as a domain name or IP address, and a port:\n\n``` nginx\ngrpc_pass localhost:9000;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\ngrpc_pass unix:/tmp/grpc.socket;\n```\n\nAlternatively, the “`grpc://`” scheme can be used:\n\n``` nginx\ngrpc_pass grpc://127.0.0.1:9000;\n```\n\nTo use gRPC over SSL, the “`grpcs://`” scheme should be used:\n\n``` nginx\ngrpc_pass grpcs://127.0.0.1:443;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).\n\nParameter value can contain variables (1.17.8). In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`grpc_pass_header`**` `*`field`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nPermits passing [otherwise disabled](#grpc_hide_header) header fields from a gRPC server to a client.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`grpc_read_timeout`**` `*`time`*`;` |\n| Default: | `grpc_read_timeout 60s;`              |\n| Context: | `http`, `server`, `location`          |\n\nDefines a timeout for reading a response from the gRPC server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the gRPC server does not transmit anything within this time, the connection is closed.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`grpc_send_timeout`**` `*`time`*`;` |\n| Default: | `grpc_send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`          |\n\nSets a timeout for transmitting a request to the gRPC server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the gRPC server does not receive anything within this time, the connection is closed.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`grpc_set_header`**` `*`field`*` `*`value`*`;`  |\n| Default: | `grpc_set_header Content-Length $content_length;` |\n| Context: | `http`, `server`, `location`                      |\n\nAllows redefining or appending fields to the request header [passed](#grpc_pass_request_headers) to the gRPC server. The *`value`* can contain text, variables, and their combinations. These directives are inherited from the previous configuration level if and only if there are no `grpc_set_header` directives defined on the current level.\n\nIf the value of a header field is an empty string then this field will not be passed to a gRPC server:\n\n``` nginx\ngrpc_set_header Accept-Encoding \"\";\n```\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`grpc_socket_keepalive`**` on | off;` |\n| Default: | `grpc_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a gRPC server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`grpc_ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                        |\n| Context: | `http`, `server`, `location`             |\n\nSpecifies a *`file`* with the certificate in the PEM format used for authentication to a gRPC SSL server.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`grpc_ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`                 |\n\nSpecifies a *`file`* with the secret key in the PEM format used for authentication to a gRPC SSL server.\n\nThe value `engine`:*`name`*:*`id`* can be specified instead of the *`file`*, which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`grpc_ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `grpc_ssl_ciphers DEFAULT;`             |\n| Context: | `http`, `server`, `location`            |\n\nSpecifies the enabled ciphers for requests to a gRPC SSL server. The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`grpc_ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                     |\n| Context: | `http`, `server`, `location`                          |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the gRPC SSL server.\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `grpc_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `grpc_ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`grpc_ssl_crl`**` `*`file`*`;` |\n| Default: | —                                |\n| Context: | `http`, `server`, `location`     |\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#grpc_ssl_verify) the certificate of the gRPC SSL server.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`grpc_ssl_name`**` `*`name`*`;`    |\n| Default: | `grpc_ssl_name host from grpc_pass;` |\n| Context: | `http`, `server`, `location`         |\n\nAllows overriding the server name used to [verify](#grpc_ssl_verify) the certificate of the gRPC SSL server and to be [passed through SNI](#grpc_ssl_server_name) when establishing a connection with the gRPC SSL server.\n\nBy default, the host part from [grpc_pass](#grpc_pass) is used.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`grpc_ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `http`, `server`, `location`               |\n\nSpecifies a *`file`* with passphrases for [secret keys](#grpc_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\n|          |                                                                                   |\n|----------|-----------------------------------------------------------------------------------|\n| Syntax:  | **`grpc_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `grpc_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `http`, `server`, `location`                                                      |\n\nEnables the specified protocols for requests to a gRPC SSL server.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`grpc_ssl_server_name`**` on | off;` |\n| Default: | `grpc_ssl_server_name off;`            |\n| Context: | `http`, `server`, `location`           |\n\nEnables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the gRPC SSL server.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`grpc_ssl_session_reuse`**` on | off;` |\n| Default: | `grpc_ssl_session_reuse on;`             |\n| Context: | `http`, `server`, `location`             |\n\nDetermines whether SSL sessions can be reused when working with the gRPC server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`grpc_ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                |\n| Context: | `http`, `server`, `location`                     |\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#grpc_ssl_verify) the certificate of the gRPC SSL server.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`grpc_ssl_verify`**` on | off;` |\n| Default: | `grpc_ssl_verify off;`            |\n| Context: | `http`, `server`, `location`      |\n\nEnables or disables verification of the gRPC SSL server certificate.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`grpc_ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `grpc_ssl_verify_depth 1;`                  |\n| Context: | `http`, `server`, `location`                |\n\nSets the verification depth in the gRPC SSL server certificates chain.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_grpc_module.html](https://nginx.org/en/docs/http/ngx_http_grpc_module.html)"
- name: ngx_http_gunzip_module
  id: http/ngx_http_gunzip_module
  summary: 'The ngx_http_gunzip_module module is a filter that decompresses responses with “Content-Encoding: gzip” for clients that do not support “gzip” encoding method'
  description: "# Module ngx_http_gunzip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [gunzip](#gunzip)\n- [gunzip_buffers](#gunzip_buffers)\n\nThe `ngx_http_gunzip_module` module is a filter that decompresses responses with “`Content-Encoding: gzip`” for clients that do not support “gzip” encoding method. The module will be useful when it is desirable to store data compressed to save space and reduce I/O costs.\n\nThis module is not built by default, it should be enabled with the `--with-http_gunzip_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlocation /storage/ {\n    gunzip on;\n    ...\n}\n```\n\n#### Directives\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`gunzip`**` on | off;`     |\n| Default: | `gunzip off;`                |\n| Context: | `http`, `server`, `location` |\n\nEnables or disables decompression of gzipped responses for clients that lack gzip support. If enabled, the following directives are also taken into account when determining if clients support gzip: [gzip_http_version](ngx_http_gzip_module#gzip_http_version), [gzip_proxied](ngx_http_gzip_module#gzip_proxied), and [gzip_disable](ngx_http_gzip_module#gzip_disable). See also the [gzip_vary](ngx_http_gzip_module#gzip_vary) directive.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`gunzip_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `gunzip_buffers 32 4k|16 8k;`                   |\n| Context: | `http`, `server`, `location`                    |\n\nSets the *`number`* and *`size`* of buffers used to decompress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_gunzip_module.html](https://nginx.org/en/docs/http/ngx_http_gunzip_module.html)"
- name: ngx_http_gzip_module
  id: http/ngx_http_gzip_module
  summary: The ngx_http_gzip_module module is a filter that compresses responses using the “gzip” method
  description: "# Module ngx_http_gzip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [gzip](#gzip)\n- [gzip_buffers](#gzip_buffers)\n- [gzip_comp_level](#gzip_comp_level)\n- [gzip_disable](#gzip_disable)\n- [gzip_http_version](#gzip_http_version)\n- [gzip_min_length](#gzip_min_length)\n- [gzip_proxied](#gzip_proxied)\n- [gzip_types](#gzip_types)\n- [gzip_vary](#gzip_vary)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_gzip_module` module is a filter that compresses responses using the “gzip” method. This often helps to reduce the size of transmitted data by half or even more.\n\nWhen using the SSL/TLS protocol, compressed responses may be subject to [BREACH](https://en.wikipedia.org/wiki/BREACH) attacks.\n\n#### Example Configuration\n\n``` nginx\ngzip            on;\ngzip_min_length 1000;\ngzip_proxied    expired no-cache no-store private auth;\ngzip_types      text/plain application/xml;\n```\n\nThe `$gzip_ratio` variable can be used to log the achieved compression ratio.\n\n#### Directives\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`gzip`**` on | off;`                         |\n| Default: | `gzip off;`                                    |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nEnables or disables gzipping of responses.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`gzip_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `gzip_buffers 32 4k|16 8k;`                   |\n| Context: | `http`, `server`, `location`                  |\n\nSets the *`number`* and *`size`* of buffers used to compress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\nUntil version 0.7.28, four 4K or 8K buffers were used by default.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`gzip_comp_level`**` `*`level`*`;` |\n| Default: | `gzip_comp_level 1;`                 |\n| Context: | `http`, `server`, `location`         |\n\nSets a gzip compression *`level`* of a response. Acceptable values are in the range from 1 to 9.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`gzip_disable`**` `*`regex`*` ...;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 0.6.23.\n\nDisables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions.\n\nThe special mask “`msie6`” (0.7.12) corresponds to the regular expression “`MSIE [4-6]\\.`”, but works faster. Starting from version 0.8.11, “`MSIE 6.0; ... SV1`” is excluded from this mask.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`gzip_http_version`**` 1.0 | 1.1;` |\n| Default: | `gzip_http_version 1.1;`             |\n| Context: | `http`, `server`, `location`         |\n\nSets the minimum HTTP version of a request required to compress a response.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`gzip_min_length`**` `*`length`*`;` |\n| Default: | `gzip_min_length 20;`                 |\n| Context: | `http`, `server`, `location`          |\n\nSets the minimum length of a response that will be gzipped. The length is determined only from the “Content-Length” response header field.\n\n|          |                                                                                                                   |\n|----------|-------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`gzip_proxied`**` off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;` |\n| Default: | `gzip_proxied off;`                                                                                               |\n| Context: | `http`, `server`, `location`                                                                                      |\n\nEnables or disables gzipping of responses for proxied requests depending on the request and response. The fact that the request is proxied is determined by the presence of the “Via” request header field. The directive accepts multiple parameters:\n\n`off`  \ndisables compression for all proxied requests, ignoring other parameters;\n\n`expired`  \nenables compression if a response header includes the “Expires” field with a value that disables caching;\n\n`no-cache`  \nenables compression if a response header includes the “Cache-Control” field with the “`no-cache`” parameter;\n\n`no-store`  \nenables compression if a response header includes the “Cache-Control” field with the “`no-store`” parameter;\n\n`private`  \nenables compression if a response header includes the “Cache-Control” field with the “`private`” parameter;\n\n`no_last_modified`  \nenables compression if a response header does not include the “Last-Modified” field;\n\n`no_etag`  \nenables compression if a response header does not include the “ETag” field;\n\n`auth`  \nenables compression if a request header includes the “Authorization” field;\n\n`any`  \nenables compression for all proxied requests.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`gzip_types`**` `*`mime-type`*` ...;` |\n| Default: | `gzip_types text/html;`                 |\n| Context: | `http`, `server`, `location`            |\n\nEnables gzipping of responses for the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29). Responses with the “`text/html`” type are always compressed.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`gzip_vary`**` on | off;`  |\n| Default: | `gzip_vary off;`             |\n| Context: | `http`, `server`, `location` |\n\nEnables or disables inserting the “Vary: Accept-Encoding” response header field if the directives [gzip](#gzip), [gzip_static](ngx_http_gzip_static_module#gzip_static), or [gunzip](ngx_http_gunzip_module#gunzip) are active.\n\n#### Embedded Variables\n\n`$gzip_ratio`  \nachieved compression ratio, computed as the ratio between the original and compressed response sizes.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_gzip_module.html](https://nginx.org/en/docs/http/ngx_http_gzip_module.html)"
- name: ngx_http_gzip_static_module
  id: http/ngx_http_gzip_static_module
  summary: The ngx_http_gzip_static_module module allows sending precompressed files with the “.gz” filename extension instead of regular files
  description: "# Module ngx_http_gzip_static_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [gzip_static](#gzip_static)\n\nThe `ngx_http_gzip_static_module` module allows sending precompressed files with the “`.gz`” filename extension instead of regular files.\n\nThis module is not built by default, it should be enabled with the `--with-http_gzip_static_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\ngzip_static  on;\ngzip_proxied expired no-cache no-store private auth;\n```\n\n#### Directives\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`gzip_static`**` on | off | always;` |\n| Default: | `gzip_static off;`                     |\n| Context: | `http`, `server`, `location`           |\n\nEnables (“`on`”) or disables (“`off`”) checking the existence of precompressed files. The following directives are also taken into account: [gzip_http_version](ngx_http_gzip_module#gzip_http_version), [gzip_proxied](ngx_http_gzip_module#gzip_proxied), [gzip_disable](ngx_http_gzip_module#gzip_disable), and [gzip_vary](ngx_http_gzip_module#gzip_vary).\n\nWith the “`always`” value (1.3.6), gzipped file is used in all cases, without checking if the client supports it. It is useful if there are no uncompressed files on the disk anyway or the [ngx_http_gunzip_module](ngx_http_gunzip_module) is used.\n\nThe files can be compressed using the `gzip` command, or any other compatible one. It is recommended that the modification date and time of original and compressed files be the same.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html](https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html)"
- name: ngx_http_headers_module
  id: http/ngx_http_headers_module
  summary: The ngx_http_headers_module module allows adding the “Expires” and “Cache-Control” header fields, and arbitrary fields, to a response header
  description: "# Module ngx_http_headers_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [add_header](#add_header)\n- [add_trailer](#add_trailer)\n- [expires](#expires)\n\nThe `ngx_http_headers_module` module allows adding the “Expires” and “Cache-Control” header fields, and arbitrary fields, to a response header.\n\n#### Example Configuration\n\n``` nginx\nexpires    24h;\nexpires    modified +24h;\nexpires    @24h;\nexpires    0;\nexpires    -1;\nexpires    epoch;\nexpires    $expires;\nadd_header Cache-Control private;\n```\n\n#### Directives\n\n|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`add_header`**` `*`name`*` `*`value`*` [always];` |\n| Default: | —                                                   |\n| Context: | `http`, `server`, `location`, `if in location`      |\n\nAdds the specified field to a response header provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). Parameter value can contain variables.\n\nThere could be several `add_header` directives. These directives are inherited from the previous configuration level if and only if there are no `add_header` directives defined on the current level.\n\nIf the `always` parameter is specified (1.7.5), the header field will be added regardless of the response code.\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`add_trailer`**` `*`name`*` `*`value`*` [always];` |\n| Default: | —                                                    |\n| Context: | `http`, `server`, `location`, `if in location`       |\n\nThis directive appeared in version 1.13.2.\n\nAdds the specified field to the end of a response provided that the response code equals 200, 201, 206, 301, 302, 303, 307, or 308. Parameter value can contain variables.\n\nThere could be several `add_trailer` directives. These directives are inherited from the previous configuration level if and only if there are no `add_trailer` directives defined on the current level.\n\nIf the `always` parameter is specified the specified field will be added regardless of the response code.\n\n|          |                                                                           |\n|----------|---------------------------------------------------------------------------|\n| Syntax:  | **`expires`**` [modified] `*`time`*`;` **`expires`**` epoch | max | off;` |\n| Default: | `expires off;`                                                            |\n| Context: | `http`, `server`, `location`, `if in location`                            |\n\nEnables or disables adding or modifying the “Expires” and “Cache-Control” response header fields provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). The parameter can be a positive or negative [time](../syntax).\n\nThe time in the “Expires” field is computed as a sum of the current time and *`time`* specified in the directive. If the `modified` parameter is used (0.7.0, 0.6.32) then the time is computed as a sum of the file’s modification time and the *`time`* specified in the directive.\n\nIn addition, it is possible to specify a time of day using the “`@`” prefix (0.7.9, 0.6.34):\n\n``` nginx\nexpires @15h30m;\n```\n\nThe contents of the “Cache-Control” field depends on the sign of the specified time:\n\n- time is negative — “Cache-Control: no-cache”.\n- time is positive or zero — “Cache-Control: max-age=*`t`*”, where *`t`* is a time specified in the directive, in seconds.\n\nThe `epoch` parameter sets “Expires” to the value “`Thu, 01 Jan 1970 00:00:01 GMT`”, and “Cache-Control” to “`no-cache`”.\n\nThe `max` parameter sets “Expires” to the value “`Thu, 31 Dec 2037 23:55:55 GMT`”, and “Cache-Control” to 10 years.\n\nThe `off` parameter disables adding or modifying the “Expires” and “Cache-Control” response header fields.\n\nThe last parameter value can contain variables (1.7.9):\n\n``` nginx\nmap $sent_http_content_type $expires {\n    default         off;\n    application/pdf 42d;\n    ~image/         max;\n}\n\nexpires $expires;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_headers_module.html](https://nginx.org/en/docs/http/ngx_http_headers_module.html)"
- name: ngx_http_hls_module
  id: http/ngx_http_hls_module
  summary: The ngx_http_hls_module module provides HTTP Live Streaming (HLS) server-side support for MP4 and MOV media files
  description: "# Module ngx_http_hls_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [hls](#hls)\n- [hls_buffers](#hls_buffers)\n- [hls_forward_args](#hls_forward_args)\n- [hls_fragment](#hls_fragment)\n- [hls_mp4_buffer_size](#hls_mp4_buffer_size)\n- [hls_mp4_max_buffer_size](#hls_mp4_max_buffer_size)\n\nThe `ngx_http_hls_module` module provides HTTP Live Streaming (HLS) server-side support for MP4 and MOV media files. Such files typically have the `.mp4`, `.m4v`, `.m4a`, `.mov`, or `.qt` filename extensions. The module supports H.264 video codec, AAC and MP3 audio codecs.\n\nFor each media file, two URIs are supported:\n\n- A playlist URI with the “`.m3u8`” filename extension. The URI can accept optional arguments:\n  - “`start`” and “`end`” define playlist boundaries in seconds (1.9.0).\n  - “`offset`” shifts an initial playback position to the time offset in seconds (1.9.0). A positive value sets a time offset from the beginning of the playlist. A negative value sets a time offset from the end of the last fragment in the playlist.\n  - “`len`” defines the fragment length in seconds.\n- A fragment URI with the “`.ts`” filename extension. The URI can accept optional arguments:\n  - “`start`” and “`end`” define fragment boundaries in seconds.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    hls;\n    hls_fragment            5s;\n    hls_buffers             10 10m;\n    hls_mp4_buffer_size     1m;\n    hls_mp4_max_buffer_size 5m;\n    root /var/video/;\n}\n```\n\nWith this configuration, the following URIs are supported for the “`/var/video/test.mp4`” file:\n\n``` nginx\nhttp://hls.example.com/test.mp4.m3u8?offset=1.000&start=1.000&end=2.200\nhttp://hls.example.com/test.mp4.m3u8?len=8.000\nhttp://hls.example.com/test.mp4.ts?start=1.000&end=2.200\n```\n\n#### Directives\n\n|          |              |\n|----------|--------------|\n| Syntax:  | **`hls`**`;` |\n| Default: | —            |\n| Context: | `location`   |\n\nTurns on HLS streaming in the surrounding location.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`hls_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `hls_buffers 8 2m;`                          |\n| Context: | `http`, `server`, `location`                 |\n\nSets the maximum *`number`* and *`size`* of buffers that are used for reading and writing data frames.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`hls_forward_args`**` on | off;` |\n| Default: | `hls_forward_args off;`            |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.5.12.\n\nAdds arguments from a playlist request to URIs of fragments. This may be useful for performing client authorization at the moment of requesting a fragment, or when protecting an HLS stream with the [ngx_http_secure_link_module](ngx_http_secure_link_module) module.\n\nFor example, if a client requests a playlist `http://example.com/hls/test.mp4.m3u8?a=1&b=2`, the arguments `a=1` and `b=2` will be added to URIs of fragments after the arguments `start` and `end`:\n\n``` nginx\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:15\n#EXT-X-PLAYLIST-TYPE:VOD\n\n#EXTINF:9.333,\ntest.mp4.ts?start=0.000&end=9.333&a=1&b=2\n#EXTINF:7.167,\ntest.mp4.ts?start=9.333&end=16.500&a=1&b=2\n#EXTINF:5.416,\ntest.mp4.ts?start=16.500&end=21.916&a=1&b=2\n#EXTINF:5.500,\ntest.mp4.ts?start=21.916&end=27.416&a=1&b=2\n#EXTINF:15.167,\ntest.mp4.ts?start=27.416&end=42.583&a=1&b=2\n#EXTINF:9.626,\ntest.mp4.ts?start=42.583&end=52.209&a=1&b=2\n\n#EXT-X-ENDLIST\n```\n\nIf an HLS stream is protected with the [ngx_http_secure_link_module](ngx_http_secure_link_module) module, `$uri` should not be used in the [secure_link_md5](ngx_http_secure_link_module#secure_link_md5) expression because this will cause errors when requesting the fragments. [Base URI](ngx_http_map_module#map) should be used instead of `$uri` (`$hls_uri` in the example):\n\n``` nginx\nhttp {\n    ...\n\n    map $uri $hls_uri {\n        ~^(?<base_uri>.*).m3u8$ $base_uri;\n        ~^(?<base_uri>.*).ts$   $base_uri;\n        default                 $uri;\n    }\n\n    server {\n        ...\n\n        location /hls/ {\n            hls;\n            hls_forward_args on;\n\n            alias /var/videos/;\n\n            secure_link $arg_md5,$arg_expires;\n            secure_link_md5 \"$secure_link_expires$hls_uri$remote_addr secret\";\n\n            if ($secure_link = \"\") {\n                return 403;\n            }\n\n            if ($secure_link = \"0\") {\n                return 410;\n            }\n        }\n    }\n}\n```\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`hls_fragment`**` `*`time`*`;` |\n| Default: | `hls_fragment 5s;`               |\n| Context: | `http`, `server`, `location`     |\n\nDefines the default fragment length for playlist URIs requested without the “`len`” argument.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`hls_mp4_buffer_size`**` `*`size`*`;` |\n| Default: | `hls_mp4_buffer_size 512k;`             |\n| Context: | `http`, `server`, `location`            |\n\nSets the initial *`size`* of the buffer used for processing MP4 and MOV files.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`hls_mp4_max_buffer_size`**` `*`size`*`;` |\n| Default: | `hls_mp4_max_buffer_size 10m;`              |\n| Context: | `http`, `server`, `location`                |\n\nDuring metadata processing, a larger buffer may become necessary. Its size cannot exceed the specified *`size`*, or else nginx will return the server error 500 (Internal Server Error), and log the following message:\n\n``` nginx\n\"/some/movie/file.mp4\" mp4 moov atom is too large:\n12583268, you may want to increase hls_mp4_max_buffer_size\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_hls_module.html](https://nginx.org/en/docs/http/ngx_http_hls_module.html)"
- name: ngx_http_image_filter_module
  id: http/ngx_http_image_filter_module
  summary: The ngx_http_image_filter_module module (0.7.54+) is a filter that transforms images in JPEG, GIF, PNG, and WebP formats
  description: "# Module ngx_http_image_filter_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [image_filter](#image_filter)\n- [image_filter_buffer](#image_filter_buffer)\n- [image_filter_interlace](#image_filter_interlace)\n- [image_filter_jpeg_quality](#image_filter_jpeg_quality)\n- [image_filter_sharpen](#image_filter_sharpen)\n- [image_filter_transparency](#image_filter_transparency)\n- [image_filter_webp_quality](#image_filter_webp_quality)\n\nThe `ngx_http_image_filter_module` module (0.7.54+) is a filter that transforms images in JPEG, GIF, PNG, and WebP formats.\n\nThis module is not built by default, it should be enabled with the `--with-http_image_filter_module` configuration parameter.\n\nThis module utilizes the [libgd](http://libgd.org) library. It is recommended to use the latest available version of the library.\n\nThe WebP format support appeared in version 1.11.6. To transform images in this format, the `libgd` library must be compiled with the WebP support.\n\n#### Example Configuration\n\n``` nginx\nlocation /img/ {\n    proxy_pass   http://backend;\n    image_filter resize 150 100;\n    image_filter rotate 90;\n    error_page   415 = /empty;\n}\n\nlocation = /empty {\n    empty_gif;\n}\n```\n\n#### Directives\n\n|          |                                                                                                                                                                                                                                       |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`image_filter`**` off;` **`image_filter`**` test;` **`image_filter`**` size;` **`image_filter`**` rotate 90 | 180 | 270;` **`image_filter`**` resize `*`width`*` `*`height`*`;` **`image_filter`**` crop `*`width`*` `*`height`*`;` |\n| Default: | `image_filter off;`                                                                                                                                                                                                                   |\n| Context: | `location`                                                                                                                                                                                                                            |\n\nSets the type of transformation to perform on images:\n\n`off`  \nturns off module processing in a surrounding location.\n\n`test`  \nensures that responses are images in either JPEG, GIF, PNG, or WebP format. Otherwise, the 415 (Unsupported Media Type) error is returned.\n\n`size`  \noutputs information about images in a JSON format, e.g.:\n\n``` nginx\n{ \"img\" : { \"width\": 100, \"height\": 100, \"type\": \"gif\" } }\n```\n\nIn case of an error, the output is as follows:\n\n``` nginx\n{}\n```\n\n`rotate` `90`\\|`180`\\|`270`  \nrotates images counter-clockwise by the specified number of degrees. Parameter value can contain variables. This mode can be used either alone or along with the `resize` and `crop` transformations.\n\n`resize` *`width`* *`height`*  \nproportionally reduces an image to the specified sizes. To reduce by only one dimension, another dimension can be specified as “`-`”. In case of an error, the server will return code 415 (Unsupported Media Type). Parameter values can contain variables. When used along with the `rotate` parameter, the rotation happens **after** reduction.\n\n`crop` *`width`* *`height`*  \nproportionally reduces an image to the larger side size and crops extraneous edges by another side. To reduce by only one dimension, another dimension can be specified as “`-`”. In case of an error, the server will return code 415 (Unsupported Media Type). Parameter values can contain variables. When used along with the `rotate` parameter, the rotation happens **before** reduction.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`image_filter_buffer`**` `*`size`*`;` |\n| Default: | `image_filter_buffer 1M;`               |\n| Context: | `http`, `server`, `location`            |\n\nSets the maximum size of the buffer used for reading images. When the size is exceeded the server returns error 415 (Unsupported Media Type).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`image_filter_interlace`**` on | off;` |\n| Default: | `image_filter_interlace off;`            |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.3.15.\n\nIf enabled, final images will be interlaced. For JPEG, final images will be in “progressive JPEG” format.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`image_filter_jpeg_quality`**` `*`quality`*`;` |\n| Default: | `image_filter_jpeg_quality 75;`                  |\n| Context: | `http`, `server`, `location`                     |\n\nSets the desired *`quality`* of the transformed JPEG images. Acceptable values are in the range from 1 to 100. Lesser values usually imply both lower image quality and less data to transfer. The maximum recommended value is 95. Parameter value can contain variables.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`image_filter_sharpen`**` `*`percent`*`;` |\n| Default: | `image_filter_sharpen 0;`                   |\n| Context: | `http`, `server`, `location`                |\n\nIncreases sharpness of the final image. The sharpness percentage can exceed 100. The zero value disables sharpening. Parameter value can contain variables.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`image_filter_transparency`**` on|off;` |\n| Default: | `image_filter_transparency on;`           |\n| Context: | `http`, `server`, `location`              |\n\nDefines whether transparency should be preserved when transforming GIF images or PNG images with colors specified by a palette. The loss of transparency results in images of a better quality. The alpha channel transparency in PNG is always preserved.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`image_filter_webp_quality`**` `*`quality`*`;` |\n| Default: | `image_filter_webp_quality 80;`                  |\n| Context: | `http`, `server`, `location`                     |\n\nThis directive appeared in version 1.11.6.\n\nSets the desired *`quality`* of the transformed WebP images. Acceptable values are in the range from 1 to 100. Lesser values usually imply both lower image quality and less data to transfer. Parameter value can contain variables.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_image_filter_module.html](https://nginx.org/en/docs/http/ngx_http_image_filter_module.html)"
- name: ngx_http_index_module
  id: http/ngx_http_index_module
  summary: The ngx_http_index_module module processes requests ending with the slash character (‘/’)
  description: "# Module ngx_http_index_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [index](#index)\n\nThe `ngx_http_index_module` module processes requests ending with the slash character (‘`/`’). Such requests can also be processed by the [ngx_http_autoindex_module](ngx_http_autoindex_module) and [ngx_http_random_index_module](ngx_http_random_index_module) modules.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    index index.$geo.html index.html;\n}\n```\n\n#### Directives\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`index`**` `*`file`*` ...;` |\n| Default: | `index index.html;`           |\n| Context: | `http`, `server`, `location`  |\n\nDefines files that will be used as an index. The *`file`* name can contain variables. Files are checked in the specified order. The last element of the list can be a file with an absolute path. Example:\n\n``` nginx\nindex index.$geo.html index.0.html /index.html;\n```\n\nIt should be noted that using an index file causes an internal redirect, and the request can be processed in a different location. For example, with the following configuration:\n\n``` nginx\nlocation = / {\n    index index.html;\n}\n\nlocation / {\n    ...\n}\n```\n\na “`/`” request will actually be processed in the second location as “`/index.html`”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_index_module.html](https://nginx.org/en/docs/http/ngx_http_index_module.html)"
- name: ngx_http_internal_redirect_module
  id: http/ngx_http_internal_redirect_module
  summary: The ngx_http_internal_redirect_module module (1.23.4) allows making an internal redirect
  description: "# Module ngx_http_internal_redirect_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [internal_redirect](#internal_redirect)\n\nThe `ngx_http_internal_redirect_module` module (1.23.4) allows making an internal redirect. In contrast to [rewriting URIs](ngx_http_rewrite_module), the redirection is made after checking [request](ngx_http_limit_req_module) and [connection](ngx_http_limit_conn_module) processing limits, and [access](ngx_http_access_module) limits.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nlimit_req_zone $jwt_claim_sub zone=jwt_sub:10m rate=1r/s;\n\nserver {\n    location / {\n        auth_jwt          \"realm\";\n        auth_jwt_key_file key.jwk;\n\n        internal_redirect @rate_limited;\n    }\n\n    location @rate_limited {\n        internal;\n\n        limit_req  zone=jwt_sub burst=10;\n        proxy_pass http://backend;\n    }\n}\n```\n\nThe example implements [per-user](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2) [rate limiting](ngx_http_limit_req_module). Implementation without [internal_redirect](#internal_redirect) is vulnerable to DoS attacks by unsigned JWTs, as normally the [limit_req](ngx_http_limit_req_module#limit_req) check is performed [before](../dev/development_guide#http_phases) [auth_jwt](ngx_http_auth_jwt_module#auth_jwt) check. Using [internal_redirect](#internal_redirect) allows reordering these checks.\n\n#### Directives\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`internal_redirect`**` `*`uri`*`;` |\n| Default: | —                                    |\n| Context: | `server`, `location`                 |\n\nSets the URI for internal redirection of the request. It is also possible to use a [named location](ngx_http_core_module#location_named) instead of the URI. The *`uri`* value can contain variables. If the *`uri`* value is empty, then the redirect will not be made.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_internal_redirect_module.html](https://nginx.org/en/docs/http/ngx_http_internal_redirect_module.html)"
- name: ngx_http_js_module
  id: http/ngx_http_js_module
  summary: The ngx_http_js_module module is used to implement location and variable handlers in njs — a subset of the JavaScript language
  description: "# Module ngx_http_js_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [js_body_filter](#js_body_filter)\n- [js_content](#js_content)\n- [js_fetch_buffer_size](#js_fetch_buffer_size)\n- [js_fetch_ciphers](#js_fetch_ciphers)\n- [js_fetch_max_response_buffer_size](#js_fetch_max_response_buffer_size)\n- [js_fetch_protocols](#js_fetch_protocols)\n- [js_fetch_timeout](#js_fetch_timeout)\n- [js_fetch_trusted_certificate](#js_fetch_trusted_certificate)\n- [js_fetch_verify](#js_fetch_verify)\n- [js_fetch_verify_depth](#js_fetch_verify_depth)\n- [js_header_filter](#js_header_filter)\n- [js_import](#js_import)\n- [js_include](#js_include)\n- [js_path](#js_path)\n- [js_periodic](#js_periodic)\n- [js_preload_object](#js_preload_object)\n- [js_set](#js_set)\n- [js_shared_dict_zone](#js_shared_dict_zone)\n- [js_var](#js_var)\n- [Request Argument](#arguments)\n\nThe `ngx_http_js_module` module is used to implement location and variable handlers in [njs](../njs/index) — a subset of the JavaScript language.\n\nDownload and install instructions are available [here](../njs/install).\n\n#### Example Configuration\n\nThe example works since [0.4.0](../njs/changes#njs0.4.0).\n\n``` nginx\nhttp {\n    js_import http.js;\n\n    js_set $foo     http.foo;\n    js_set $summary http.summary;\n    js_set $hash    http.hash;\n\n    resolver 10.0.0.1;\n\n    server {\n        listen 8000;\n\n        location / {\n            add_header X-Foo $foo;\n            js_content http.baz;\n        }\n\n        location = /summary {\n            return 200 $summary;\n        }\n\n        location = /hello {\n            js_content http.hello;\n        }\n\n        # since 0.7.0\n        location = /fetch {\n            js_content                   http.fetch;\n            js_fetch_trusted_certificate /path/to/ISRG_Root_X1.pem;\n        }\n\n        # since 0.7.0\n        location = /crypto {\n            add_header Hash $hash;\n            return     200;\n        }\n    }\n}\n```\n\nThe `http.js` file:\n\n``` nginx\nfunction foo(r) {\n    r.log(\"hello from foo() handler\");\n    return \"foo\";\n}\n\nfunction summary(r) {\n    var a, s, h;\n\n    s = \"JS summary\\n\\n\";\n\n    s += \"Method: \" + r.method + \"\\n\";\n    s += \"HTTP version: \" + r.httpVersion + \"\\n\";\n    s += \"Host: \" + r.headersIn.host + \"\\n\";\n    s += \"Remote Address: \" + r.remoteAddress + \"\\n\";\n    s += \"URI: \" + r.uri + \"\\n\";\n\n    s += \"Headers:\\n\";\n    for (h in r.headersIn) {\n        s += \"  header '\" + h + \"' is '\" + r.headersIn[h] + \"'\\n\";\n    }\n\n    s += \"Args:\\n\";\n    for (a in r.args) {\n        s += \"  arg '\" + a + \"' is '\" + r.args[a] + \"'\\n\";\n    }\n\n    return s;\n}\n\nfunction baz(r) {\n    r.status = 200;\n    r.headersOut.foo = 1234;\n    r.headersOut['Content-Type'] = \"text/plain; charset=utf-8\";\n    r.headersOut['Content-Length'] = 15;\n    r.sendHeader();\n    r.send(\"nginx\");\n    r.send(\"java\");\n    r.send(\"script\");\n\n    r.finish();\n}\n\nfunction hello(r) {\n    r.return(200, \"Hello world!\");\n}\n\n// since 0.7.0\nasync function fetch(r) {\n    let results = await Promise.all([ngx.fetch('https://nginx.org/'),\n                                     ngx.fetch('https://nginx.org/en/')]);\n\n    r.return(200, JSON.stringify(results, undefined, 4));\n}\n\n// since 0.7.0\nasync function hash(r) {\n    let hash = await crypto.subtle.digest('SHA-512', r.headersIn.host);\n    r.setReturnValue(Buffer.from(hash).toString('hex'));\n}\n\nexport default {foo, summary, baz, hello, fetch, hash};\n```\n\n#### Directives\n\n|          |                                                                                                                |\n|----------|----------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`js_body_filter`**` `*`function`*` | `*`module.function`*` [`*`buffer_type`*`=`*`string`*` | `*`buffer`*`];` |\n| Default: | —                                                                                                              |\n| Context: | `location`, `if in location`, `limit_except`                                                                   |\n\nThis directive appeared in version 0.5.2.\n\nSets an njs function as a response body filter. The filter function is called for each data chunk of a response body with the following arguments:\n\n`r`  \nthe [HTTP request](../njs/reference#http) object\n\n`data`  \nthe incoming data chunk, may be a string or Buffer depending on the `buffer_type` value, by default is a string.\n\n`flags`  \nan object with the following properties:\n\n`last`  \na boolean value, true if data is a last buffer.\n\nThe filter function can pass its own modified version of the input data chunk to the next body filter by calling [`r.sendBuffer()`](../njs/reference#r_sendbuffer). For example, to transform all the lowercase letters in the response body:\n\n``` nginx\nfunction filter(r, data, flags) {\n    r.sendBuffer(data.toLowerCase(), flags);\n}\n```\n\nTo stop filtering (following data chunks will be passed to client without calling `js_body_filter`), [`r.done()`](../njs/reference#r_done) can be used.\n\nIf the filter function changes the length of the response body, then it is required to clear out the “Content-Length” response header (if any) in [`js_header_filter`](#js_header_filter) to enforce chunked transfer encoding.\n\nAs the `js_body_filter` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [r.subrequest()](../njs/reference#r_subrequest) or [setTimeout()](../njs/reference#settimeout) are not supported.\n\nThe directive can be specified inside the [if](ngx_http_rewrite_module#if) block since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`js_content`**` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                          |\n| Context: | `location`, `if in location`, `limit_except`               |\n\nSets an njs function as a location content handler. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.\n\nThe directive can be specified inside the [if](ngx_http_rewrite_module#if) block since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`js_fetch_buffer_size`**` `*`size`*`;` |\n| Default: | `js_fetch_buffer_size 16k;`              |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 0.7.4.\n\nSets the *`size`* of the buffer used for reading and writing with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`js_fetch_ciphers`**` `*`ciphers`*`;` |\n| Default: | `js_fetch_ciphers HIGH:!aNULL:!MD5;`    |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 0.7.0.\n\nSpecifies the enabled ciphers for HTTPS requests with [Fetch API](../njs/reference#ngx_fetch). The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`js_fetch_max_response_buffer_size`**` `*`size`*`;` |\n| Default: | `js_fetch_max_response_buffer_size 1m;`               |\n| Context: | `http`, `server`, `location`                          |\n\nThis directive appeared in version 0.7.4.\n\nSets the maximum *`size`* of the response received with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                                                   |\n|----------|-------------------------------------------------------------------|\n| Syntax:  | **`js_fetch_protocols`**` [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `js_fetch_protocols TLSv1 TLSv1.1 TLSv1.2;`                       |\n| Context: | `http`, `server`, `location`                                      |\n\nThis directive appeared in version 0.7.0.\n\nEnables the specified protocols for HTTPS requests with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`js_fetch_timeout`**` `*`time`*`;` |\n| Default: | `js_fetch_timeout 60s;`              |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 0.7.4.\n\nDefines a timeout for reading and writing for [Fetch API](../njs/reference#ngx_fetch). The timeout is set only between two successive read/write operations, not for the whole response. If no data is transmitted within this time, the connection is closed.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`js_fetch_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                |\n| Context: | `http`, `server`, `location`                     |\n\nThis directive appeared in version 0.7.0.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](../njs/reference#fetch_verify) the HTTPS certificate with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`js_fetch_verify`**` on | off;` |\n| Default: | `js_fetch_verify on;`             |\n| Context: | `http`, `server`, `location`      |\n\nThis directive appeared in version 0.7.4.\n\nEnables or disables verification of the HTTPS server certificate with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`js_fetch_verify_depth`**` `*`number`*`;` |\n| Default: | `js_fetch_verify_depth 100;`                |\n| Context: | `http`, `server`, `location`                |\n\nThis directive appeared in version 0.7.0.\n\nSets the verification depth in the HTTPS server certificates chain with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                                                  |\n|----------|------------------------------------------------------------------|\n| Syntax:  | **`js_header_filter`**` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                                |\n| Context: | `location`, `if in location`, `limit_except`                     |\n\nThis directive appeared in version 0.5.1.\n\nSets an njs function as a response header filter. The directive allows changing arbitrary header fields of a response header.\n\nAs the `js_header_filter` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [r.subrequest()](../njs/reference#r_subrequest) or [setTimeout()](../njs/reference#settimeout) are not supported.\n\nThe directive can be specified inside the [if](ngx_http_rewrite_module#if) block since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                                                       |\n|----------|-----------------------------------------------------------------------|\n| Syntax:  | **`js_import`**` `*`module.js`*` | `*`export_name from module.js`*`;` |\n| Default: | —                                                                     |\n| Context: | `http`, `server`, `location`                                          |\n\nThis directive appeared in version 0.4.0.\n\nImports a module that implements location and variable handlers in njs. The `export_name` is used as a namespace to access module functions. If the `export_name` is not specified, the module name will be used as a namespace.\n\n``` nginx\njs_import http.js;\n```\n\nHere, the module name `http` is used as a namespace while accessing exports. If the imported module exports `foo()`, `http.foo` is used to refer to it.\n\nSeveral `js_import` directives can be specified.\n\nThe directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`js_include`**` `*`file`*`;` |\n| Default: | —                              |\n| Context: | `http`                         |\n\nSpecifies a file that implements location and variable handlers in njs:\n\n``` nginx\nnginx.conf:\njs_include http.js;\nlocation   /version {\n    js_content version;\n}\n\nhttp.js:\nfunction version(r) {\n    r.return(200, njs.version);\n}\n```\n\nThe directive was made obsolete in version [0.4.0](../njs/changes#njs0.4.0) and was removed in version [0.7.1](../njs/changes#njs0.7.1). The [js_import](#js_import) directive should be used instead.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`js_path`**` `*`path`*`;`  |\n| Default: | —                            |\n| Context: | `http`, `server`, `location` |\n\nThis directive appeared in version 0.3.0.\n\nSets an additional path for njs modules.\n\nThe directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                                                                                                                      |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`js_periodic`**` `*`function`*` | `*`module.function`*` [interval=`*`time`*`] [jitter=`*`number`*`] [worker_affinity=`*`mask`*`];` |\n| Default: | —                                                                                                                                    |\n| Context: | `location`                                                                                                                           |\n\nThis directive appeared in version 0.8.1.\n\nSpecifies a content handler to run at regular interval. The handler receives a [session object](../njs/reference#periodic_session) as its first argument, it also has access to global objects such as [ngx](../njs/reference#ngx).\n\nThe optional `interval` parameter sets the interval between two consecutive runs, by default, 5 seconds.\n\nThe optional `jitter` parameter sets the time within which the location content handler will be randomly delayed, by default, there is no delay.\n\nBy default, the `js_handler` is executed on worker process 0. The optional `worker_affinity` parameter allows specifying particular worker processes where the location content handler should be executed. Each worker process set is represented by a bitmask of allowed worker processes. The `all` mask allows the handler to be executed in all worker processes.\n\nExample:\n\n``` nginx\nexample.conf:\n\nlocation @periodics {\n    # to be run at 1 minute intervals in worker process 0\n    js_periodic main.handler interval=60s;\n\n    # to be run at 1 minute intervals in all worker processes\n    js_periodic main.handler interval=60s worker_affinity=all;\n\n    # to be run at 1 minute intervals in worker processes 1 and 3\n    js_periodic main.handler interval=60s worker_affinity=0101;\n\n    resolver 10.0.0.1;\n    js_fetch_trusted_certificate /path/to/ISRG_Root_X1.pem;\n}\n\nexample.js:\n\nasync function handler(s) {\n    let reply = await ngx.fetch('https://nginx.org/en/docs/njs/');\n    let body = await reply.text();\n\n    ngx.log(ngx.INFO, body);\n}\n```\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`js_preload_object`**` `*`name.json`*` | `*`name`*` from `*`file.json`*`;` |\n| Default: | —                                                                            |\n| Context: | `http`, `server`, `location`                                                 |\n\nThis directive appeared in version 0.7.8.\n\nPreloads an [immutable object](../njs/preload_objects) at configure time. The `name` is used as a name of the global variable though which the object is available in njs code. If the `name` is not specified, the file name will be used instead.\n\n``` nginx\njs_preload_object map.json;\n```\n\nHere, the `map` is used as a name while accessing the preloaded object.\n\nSeveral `js_preload_object` directives can be specified.\n\n|          |                                                                        |\n|----------|------------------------------------------------------------------------|\n| Syntax:  | **`js_set`**` `*`$variable`*` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                                      |\n| Context: | `http`, `server`, `location`                                           |\n\nSets an njs `function` for the specified `variable`. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.\n\nThe function is called when the variable is referenced for the first time for a given request. The exact moment depends on a [phase](../dev/development_guide#http_phases) at which the variable is referenced. This can be used to perform some logic not related to variable evaluation. For example, if the variable is referenced only in the [log_format](ngx_http_log_module#log_format) directive, its handler will not be executed until the log phase. This handler can be used to do some cleanup right before the request is freed.\n\nAs the `js_set` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [r.subrequest()](../njs/reference#r_subrequest) or [setTimeout()](../njs/reference#settimeout) are not supported.\n\nThe directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                                                                                           |\n|----------|-----------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`js_shared_dict_zone`**` zone=`*`name`*`:`*`size`*` [timeout=`*`time`*`] [type=string|number] [evict];` |\n| Default: | —                                                                                                         |\n| Context: | `http`                                                                                                    |\n\nThis directive appeared in version 0.8.0.\n\nSets the *`name`* and *`size`* of the shared memory zone that keeps the key-value [dictionary](../njs/reference#dict) shared between worker processes.\n\nBy default the shared dictionary uses a string as a key and a value. The optional `type` parameter allows redefining the value type to number.\n\nThe optional `timeout` parameter sets the time in milliseconds after which all shared dictionary entries are removed from the zone. If some entries require a different removal time, it can be set with the `timeout` argument of the [add](../njs/reference#dict_add), [incr](../njs/reference#dict_incr), and [set](../njs/reference#dict_set) methods ([0.8.5](../njs/changes#njs0.8.5)).\n\nThe optional `evict` parameter removes the oldest key-value pair when the zone storage is exhausted.\n\nExample:\n\n``` nginx\nexample.conf:\n    # Creates a 1Mb dictionary with string values,\n    # removes key-value pairs after 60 seconds of inactivity:\n    js_shared_dict_zone zone=foo:1M timeout=60s;\n\n    # Creates a 512Kb dictionary with string values,\n    # forcibly removes oldest key-value pairs when the zone is exhausted:\n    js_shared_dict_zone zone=bar:512K timeout=30s evict;\n\n    # Creates a 32Kb permanent dictionary with number values:\n    js_shared_dict_zone zone=num:32k type=number;\n\nexample.js:\n    function get(r) {\n        r.return(200, ngx.shared.foo.get(r.args.key));\n    }\n\n    function set(r) {\n        r.return(200, ngx.shared.foo.set(r.args.key, r.args.value));\n    }\n\n    function del(r) {\n        r.return(200, ngx.shared.bar.delete(r.args.key));\n    }\n\n    function increment(r) {\n        r.return(200, ngx.shared.num.incr(r.args.key, 2));\n    }\n```\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`js_var`**` `*`$variable`*` [`*`value`*`];` |\n| Default: | —                                             |\n| Context: | `http`, `server`, `location`                  |\n\nThis directive appeared in version 0.5.3.\n\nDeclares a [writable](../njs/reference#r_variables) variable. The value can contain text, variables, and their combination. The variable is not overwritten after a redirect unlike variables created with the [set](ngx_http_rewrite_module#set) directive.\n\nThe directive can be specified on the `server` and `location` level since [0.7.7](../njs/changes#njs0.7.7).\n\n#### Request Argument\n\nEach HTTP njs handler receives one argument, a request [object](../njs/reference#http).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_js_module.html](https://nginx.org/en/docs/http/ngx_http_js_module.html)"
- name: ngx_http_keyval_module
  id: http/ngx_http_keyval_module
  summary: The ngx_http_keyval_module module (1.13.3) creates variables with values taken from key-value pairs managed by the API or a variable (1.15.10) that can also be set with njs
  description: "# Module ngx_http_keyval_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [keyval](#keyval)\n- [keyval_zone](#keyval_zone)\n\nThe `ngx_http_keyval_module` module (1.13.3) creates variables with values taken from key-value pairs managed by the [API](ngx_http_api_module#http_keyvals_) or a variable (1.15.10) that can also be set with [njs](https://github.com/nginx/njs-examples/#logging-the-number-of-requests-per-client-http-logging-num-requests).\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nhttp {\n\n    keyval_zone zone=one:32k state=/var/lib/nginx/state/one.keyval;\n    keyval $arg_text $text zone=one;\n    ...\n    server {\n        ...\n        location / {\n            return 200 $text;\n        }\n\n        location /api {\n            api write=on;\n        }\n    }\n}\n```\n\n#### Directives\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`keyval`**` `*`key`*` `*`$variable`*` zone=`*`name`*`;` |\n| Default: | —                                                         |\n| Context: | `http`                                                    |\n\nCreates a new *`$variable`* whose value is looked up by the *`key`* in the key-value database. Matching rules are defined by the [`type`](#keyval_type) parameter of the [`keyval_zone`](#keyval_zone) directive. The database is stored in a shared memory zone specified by the `zone` parameter.\n\n|          |                                                                                                                        |\n|----------|------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`keyval_zone`**` zone=`*`name`*`:`*`size`*` [state=`*`file`*`] [timeout=`*`time`*`] [type=string|ip|prefix] [sync];` |\n| Default: | —                                                                                                                      |\n| Context: | `http`                                                                                                                 |\n\nSets the *`name`* and *`size`* of the shared memory zone that keeps the key-value database. Key-value pairs are managed by the [API](ngx_http_api_module#http_keyvals_).\n\nThe optional `state` parameter specifies a *`file`* that keeps the current state of the key-value database in the JSON format and makes it persistent across nginx restarts. Changing the file content directly should be avoided.\n\nExamples:\n\n``` nginx\nkeyval_zone zone=one:32k state=/var/lib/nginx/state/one.keyval; # path for Linux\nkeyval_zone zone=one:32k state=/var/db/nginx/state/one.keyval;  # path for FreeBSD\n```\n\nThe optional `timeout` parameter (1.15.0) sets the time after which key-value pairs are removed from the zone.\n\nThe optional `type` parameter (1.17.1) activates an extra index optimized for matching the key of a certain type and defines matching rules when evaluating a [keyval](#keyval) `$variable`.\n\nThe index is stored in the same shared memory zone and thus requires additional storage.\n\n`type=string`  \ndefault, no index is enabled; variable lookup is performed using exact match of the record key and a search key\n\n`type=ip`  \nthe search key is the textual representation of IPv4 or IPv6 address or CIDR range; to match a record key, the search key must belong to a subnet specified by a record key or exactly match an IP address\n\n`type=prefix`  \nvariable lookup is performed using prefix match of a record key and a search key (1.17.5); to match a record key, the record key must be a prefix of the search key\n\nThe optional `sync` parameter (1.15.0) enables [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of the shared memory zone. The synchronization requires the `timeout` parameter to be set.\n\nIf the synchronization is enabled, removal of key-value pairs (no matter [one](ngx_http_api_module#patchHttpKeyvalZoneKeyValue) or [all](ngx_http_api_module#deleteHttpKeyvalZoneData)) will be performed only on a target cluster node. The same key-value pairs on other cluster nodes will be removed upon `timeout`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_keyval_module.html](https://nginx.org/en/docs/http/ngx_http_keyval_module.html)"
- name: ngx_http_limit_conn_module
  id: http/ngx_http_limit_conn_module
  summary: The ngx_http_limit_conn_module module is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address
  description: "# Module ngx_http_limit_conn_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [limit_conn](#limit_conn)\n- [limit_conn_dry_run](#limit_conn_dry_run)\n- [limit_conn_log_level](#limit_conn_log_level)\n- [limit_conn_status](#limit_conn_status)\n- [limit_conn_zone](#limit_conn_zone)\n- [limit_zone](#limit_zone)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_limit_conn_module` module is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address.\n\nNot all connections are counted. A connection is counted only if it has a request being processed by the server and the whole request header has already been read.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n\n    ...\n\n    server {\n\n        ...\n\n        location /download/ {\n            limit_conn addr 1;\n        }\n```\n\n#### Directives\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`limit_conn`**` `*`zone`*` `*`number`*`;` |\n| Default: | —                                           |\n| Context: | `http`, `server`, `location`                |\n\nSets the shared memory zone and the maximum allowed number of connections for a given key value. When this limit is exceeded, the server will return the [error](#limit_conn_status) in reply to a request. For example, the directives\n\n``` nginx\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n\nserver {\n    location /download/ {\n        limit_conn addr 1;\n    }\n```\n\nallow only one connection per an IP address at a time.\n\nIn HTTP/2 and HTTP/3, each concurrent request is considered a separate connection.\n\nThere could be several `limit_conn` directives. For example, the following configuration will limit the number of connections to the server per a client IP and, at the same time, the total number of connections to the virtual server:\n\n``` nginx\nlimit_conn_zone $binary_remote_addr zone=perip:10m;\nlimit_conn_zone $server_name zone=perserver:10m;\n\nserver {\n    ...\n    limit_conn perip 10;\n    limit_conn perserver 100;\n}\n```\n\nThese directives are inherited from the previous configuration level if and only if there are no `limit_conn` directives defined on the current level.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`limit_conn_dry_run`**` on | off;` |\n| Default: | `limit_conn_dry_run off;`            |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.17.6.\n\nEnables the dry run mode. In this mode, the number of connections is not limited, however, in the shared memory zone, the number of excessive connections is accounted as usual.\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`limit_conn_log_level`**` info | notice | warn | error;` |\n| Default: | `limit_conn_log_level error;`                              |\n| Context: | `http`, `server`, `location`                               |\n\nThis directive appeared in version 0.8.18.\n\nSets the desired logging level for cases when the server limits the number of connections.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`limit_conn_status`**` `*`code`*`;` |\n| Default: | `limit_conn_status 503;`              |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 1.3.15.\n\nSets the status code to return in response to rejected requests.\n\n|          |                                                               |\n|----------|---------------------------------------------------------------|\n| Syntax:  | **`limit_conn_zone`**` `*`key`*` zone=`*`name`*`:`*`size`*`;` |\n| Default: | —                                                             |\n| Context: | `http`                                                        |\n\nSets parameters for a shared memory zone that will keep states for various keys. In particular, the state includes the current number of connections. The *`key`* can contain text, variables, and their combination. Requests with an empty key value are not accounted.\n\nPrior to version 1.7.6, a *`key`* could contain exactly one variable.\n\nUsage example:\n\n``` nginx\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n```\n\nHere, a client IP address serves as a key. Note that instead of `$remote_addr`, the `$binary_remote_addr` variable is used here. The `$remote_addr` variable’s size can vary from 7 to 15 bytes. The stored state occupies either 32 or 64 bytes of memory on 32-bit platforms and always 64 bytes on 64-bit platforms. The `$binary_remote_addr` variable’s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 32 or 64 bytes on 32-bit platforms and 64 bytes on 64-bit platforms. One megabyte zone can keep about 32 thousand 32-byte states or about 16 thousand 64-byte states. If the zone storage is exhausted, the server will return the [error](#limit_conn_status) to all further requests.\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), the [status information](ngx_http_api_module#http_limit_conns_) for each such shared memory zone can be [obtained](ngx_http_api_module#getHttpLimitConnZone) or [reset](ngx_http_api_module#deleteHttpLimitConnZoneStat) with the [API](ngx_http_api_module) since 1.17.7.\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`limit_zone`**` `*`name`*` `*`$variable`*` `*`size`*`;` |\n| Default: | —                                                         |\n| Context: | `http`                                                    |\n\nThis directive was made obsolete in version 1.1.8 and was removed in version 1.7.6. An equivalent [limit_conn_zone](#limit_conn_zone) directive with a changed syntax should be used instead:\n\n`limit_conn_zone` *`$variable`* `zone`=*`name`*:*`size`*;\n\n#### Embedded Variables\n\n`$limit_conn_status`  \nkeeps the result of limiting the number of connections (1.17.6): `PASSED`, `REJECTED`, or `REJECTED_DRY_RUN`\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html](https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html)"
- name: ngx_http_limit_req_module
  id: http/ngx_http_limit_req_module
  summary: The ngx_http_limit_req_module module (0.7.21) is used to limit the request processing rate per a defined key, in particular, the processing rate of requests coming from a single IP address
  description: "# Module ngx_http_limit_req_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [limit_req](#limit_req)\n- [limit_req_dry_run](#limit_req_dry_run)\n- [limit_req_log_level](#limit_req_log_level)\n- [limit_req_status](#limit_req_status)\n- [limit_req_zone](#limit_req_zone)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_limit_req_module` module (0.7.21) is used to limit the request processing rate per a defined key, in particular, the processing rate of requests coming from a single IP address. The limitation is done using the “leaky bucket” method.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n\n    ...\n\n    server {\n\n        ...\n\n        location /search/ {\n            limit_req zone=one burst=5;\n        }\n```\n\n#### Directives\n\n|          |                                                                                        |\n|----------|----------------------------------------------------------------------------------------|\n| Syntax:  | **`limit_req`**` zone=`*`name`*` [burst=`*`number`*`] [nodelay | delay=`*`number`*`];` |\n| Default: | —                                                                                      |\n| Context: | `http`, `server`, `location`                                                           |\n\nSets the shared memory zone and the maximum burst size of requests. If the requests rate exceeds the rate configured for a zone, their processing is delayed such that requests are processed at a defined rate. Excessive requests are delayed until their number exceeds the maximum burst size in which case the request is terminated with an [error](#limit_req_status). By default, the maximum burst size is equal to zero. For example, the directives\n\n``` nginx\nlimit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n\nserver {\n    location /search/ {\n        limit_req zone=one burst=5;\n    }\n```\n\nallow not more than 1 request per second at an average, with bursts not exceeding 5 requests.\n\nIf delaying of excessive requests while requests are being limited is not desired, the parameter `nodelay` should be used:\n\n``` nginx\nlimit_req zone=one burst=5 nodelay;\n```\n\nThe `delay` parameter (1.15.7) specifies a limit at which excessive requests become delayed. Default value is zero, i.e. all excessive requests are delayed.\n\nThere could be several `limit_req` directives. For example, the following configuration will limit the processing rate of requests coming from a single IP address and, at the same time, the request processing rate by the virtual server:\n\n``` nginx\nlimit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;\nlimit_req_zone $server_name zone=perserver:10m rate=10r/s;\n\nserver {\n    ...\n    limit_req zone=perip burst=5 nodelay;\n    limit_req zone=perserver burst=10;\n}\n```\n\nThese directives are inherited from the previous configuration level if and only if there are no `limit_req` directives defined on the current level.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`limit_req_dry_run`**` on | off;` |\n| Default: | `limit_req_dry_run off;`            |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.17.1.\n\nEnables the dry run mode. In this mode, requests processing rate is not limited, however, in the shared memory zone, the number of excessive requests is accounted as usual.\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`limit_req_log_level`**` info | notice | warn | error;` |\n| Default: | `limit_req_log_level error;`                              |\n| Context: | `http`, `server`, `location`                              |\n\nThis directive appeared in version 0.8.18.\n\nSets the desired logging level for cases when the server refuses to process requests due to rate exceeding, or delays request processing. Logging level for delays is one point less than for refusals; for example, if “`limit_req_log_level notice`” is specified, delays are logged with the `info` level.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`limit_req_status`**` `*`code`*`;` |\n| Default: | `limit_req_status 503;`              |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.3.15.\n\nSets the status code to return in response to rejected requests.\n\n|          |                                                                                     |\n|----------|-------------------------------------------------------------------------------------|\n| Syntax:  | **`limit_req_zone`**` `*`key`*` zone=`*`name`*`:`*`size`*` rate=`*`rate`*` [sync];` |\n| Default: | —                                                                                   |\n| Context: | `http`                                                                              |\n\nSets parameters for a shared memory zone that will keep states for various keys. In particular, the state stores the current number of excessive requests. The *`key`* can contain text, variables, and their combination. Requests with an empty key value are not accounted.\n\nPrior to version 1.7.6, a *`key`* could contain exactly one variable.\n\nUsage example:\n\n``` nginx\nlimit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n```\n\nHere, the states are kept in a 10 megabyte zone “one”, and an average request processing rate for this zone cannot exceed 1 request per second.\n\nA client IP address serves as a key. Note that instead of `$remote_addr`, the `$binary_remote_addr` variable is used here. The `$binary_remote_addr` variable’s size is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 64 bytes on 32-bit platforms and 128 bytes on 64-bit platforms. One megabyte zone can keep about 16 thousand 64-byte states or about 8 thousand 128-byte states.\n\nIf the zone storage is exhausted, the least recently used state is removed. If even after that a new state cannot be created, the request is terminated with an [error](#limit_req_status).\n\nThe rate is specified in requests per second (r/s). If a rate of less than one request per second is desired, it is specified in request per minute (r/m). For example, half-request per second is 30r/m.\n\nThe `sync` parameter (1.15.3) enables [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of the shared memory zone.\n\nThe `sync` parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), the [status information](ngx_http_api_module#http_limit_reqs_) for each such shared memory zone can be [obtained](ngx_http_api_module#getHttpLimitReqZone) or [reset](ngx_http_api_module#deleteHttpLimitReqZoneStat) with the [API](ngx_http_api_module) since 1.17.7.\n\n#### Embedded Variables\n\n`$limit_req_status`  \nkeeps the result of limiting the request processing rate (1.17.6): `PASSED`, `DELAYED`, `REJECTED`, `DELAYED_DRY_RUN`, or `REJECTED_DRY_RUN`\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_limit_req_module.html](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html)"
- name: ngx_http_log_module
  id: http/ngx_http_log_module
  summary: The ngx_http_log_module module writes request logs in the specified format
  description: "# Module ngx_http_log_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [access_log](#access_log)\n- [log_format](#log_format)\n- [open_log_file_cache](#open_log_file_cache)\n\nThe `ngx_http_log_module` module writes request logs in the specified format.\n\nRequests are logged in the context of a location where processing ends. It may be different from the original location, if an [internal redirect](ngx_http_core_module#internal) happens during request processing.\n\n#### Example Configuration\n\n``` nginx\nlog_format compression '$remote_addr - $remote_user [$time_local] '\n                       '\"$request\" $status $bytes_sent '\n                       '\"$http_referer\" \"$http_user_agent\" \"$gzip_ratio\"';\n\naccess_log /spool/logs/nginx-access.log compression buffer=32k;\n```\n\n#### Directives\n\n|          |                                                                                                                                                        |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`access_log`**` `*`path`*` [`*`format`*` [buffer=`*`size`*`] [gzip[=`*`level`*`]] [flush=`*`time`*`] [if=`*`condition`*`]];` **`access_log`**` off;` |\n| Default: | `access_log logs/access.log combined;`                                                                                                                 |\n| Context: | `http`, `server`, `location`, `if in location`, `limit_except`                                                                                         |\n\nSets the path, format, and configuration for a buffered log write. Several logs can be specified on the same configuration level. Logging to [syslog](../syslog) can be configured by specifying the “`syslog:`” prefix in the first parameter. The special value `off` cancels all `access_log` directives on the current level. If the format is not specified then the predefined “`combined`” format is used.\n\nIf either the `buffer` or `gzip` (1.3.10, 1.2.7) parameter is used, writes to log will be buffered.\n\nThe buffer size must not exceed the size of an atomic write to a disk file. For FreeBSD this size is unlimited.\n\nWhen buffering is enabled, the data will be written to the file:\n\n- if the next log line does not fit into the buffer;\n- if the buffered data is older than specified by the `flush` parameter (1.3.10, 1.2.7);\n- when a worker process is [re-opening](../control) log files or is shutting down.\n\nIf the `gzip` parameter is used, then the buffered data will be compressed before writing to the file. The compression level can be set between 1 (fastest, less compression) and 9 (slowest, best compression). By default, the buffer size is equal to 64K bytes, and the compression level is set to 1. Since the data is compressed in atomic blocks, the log file can be decompressed or read by “`zcat`” at any time.\n\nExample:\n\n``` nginx\naccess_log /path/to/log.gz combined gzip flush=5m;\n```\n\nFor gzip compression to work, nginx must be built with the zlib library.\n\nThe file path can contain variables (0.7.6+), but such logs have some constraints:\n\n- the [user](../ngx_core_module#user) whose credentials are used by worker processes should have permissions to create files in a directory with such logs;\n\n- buffered writes do not work;\n\n- the file is opened and closed for each log write. However, since the descriptors of frequently used files can be stored in a [cache](#open_log_file_cache), writing to the old file can continue during the time specified by the [open_log_file_cache](#open_log_file_cache) directive’s `valid` parameter\n\n- during each log write the existence of the request’s [root directory](ngx_http_core_module#root) is checked, and if it does not exist the log is not created. It is thus a good idea to specify both [root](ngx_http_core_module#root) and `access_log` on the same configuration level:\n\n  ``` nginx\n  server {\n      root       /spool/vhost/data/$host;\n      access_log /spool/vhost/logs/$host;\n      ...\n  ```\n\nThe `if` parameter (1.7.0) enables conditional logging. A request will not be logged if the *`condition`* evaluates to “0” or an empty string. In the following example, the requests with response codes 2xx and 3xx will not be logged:\n\n``` nginx\nmap $status $loggable {\n    ~^[23]  0;\n    default 1;\n}\n\naccess_log /path/to/access.log combined if=$loggable;\n```\n\n|          |                                                                            |\n|----------|----------------------------------------------------------------------------|\n| Syntax:  | **`log_format`**` `*`name`*` [escape=default|json|none] `*`string`*` ...;` |\n| Default: | `log_format combined \"...\";`                                               |\n| Context: | `http`                                                                     |\n\nSpecifies log format.\n\nThe `escape` parameter (1.11.8) allows setting `json` or `default` characters escaping in variables, by default, `default` escaping is used. The `none` value (1.13.10) disables escaping.\n\nFor `default` escaping, characters “`\"`”, “`\\`”, and other characters with values less than 32 (0.7.0) or above 126 (1.1.6) are escaped as “`\\xXX`”. If the variable value is not found, a hyphen (“`-`”) will be logged.\n\nFor `json` escaping, all characters not allowed in JSON [strings](https://datatracker.ietf.org/doc/html/rfc8259#section-7) will be escaped: characters “`\"`” and “`\\`” are escaped as “`\\\"`” and “`\\\\`”, characters with values less than 32 are escaped as “`\\n`”, “`\\r`”, “`\\t`”, “`\\b`”, “`\\f`”, or “`\\u00XX`”.\n\nThe log format can contain common variables, and variables that exist only at the time of a log write:\n\n`$bytes_sent`  \nthe number of bytes sent to a client\n\n`$connection`  \nconnection serial number\n\n`$connection_requests`  \nthe current number of requests made through a connection (1.1.18)\n\n`$msec`  \ntime in seconds with a milliseconds resolution at the time of the log write\n\n`$pipe`  \n“`p`” if request was pipelined, “`.`” otherwise\n\n`$request_length`  \nrequest length (including request line, header, and request body)\n\n`$request_time`  \nrequest processing time in seconds with a milliseconds resolution; time elapsed between the first bytes were read from the client and the log write after the last bytes were sent to the client\n\n`$status`  \nresponse status\n\n`$time_iso8601`  \nlocal time in the ISO 8601 standard format\n\n`$time_local`  \nlocal time in the Common Log Format\n\nIn the modern nginx versions variables [$status](ngx_http_core_module#var_status) (1.3.2, 1.2.2), [$bytes_sent](ngx_http_core_module#var_bytes_sent) (1.3.8, 1.2.5), [$connection](ngx_http_core_module#var_connection) (1.3.8, 1.2.5), [$connection_requests](ngx_http_core_module#var_connection_requests) (1.3.8, 1.2.5), [$msec](ngx_http_core_module#var_msec) (1.3.9, 1.2.6), [$request_time](ngx_http_core_module#var_request_time) (1.3.9, 1.2.6), [$pipe](ngx_http_core_module#var_pipe) (1.3.12, 1.2.7), [$request_length](ngx_http_core_module#var_request_length) (1.3.12, 1.2.7), [$time_iso8601](ngx_http_core_module#var_time_iso8601) (1.3.12, 1.2.7), and [$time_local](ngx_http_core_module#var_time_local) (1.3.12, 1.2.7) are also available as common variables.\n\nHeader lines sent to a client have the prefix “`sent_http_`”, for example, `$sent_http_content_range`.\n\nThe configuration always includes the predefined “`combined`” format:\n\n``` nginx\nlog_format combined '$remote_addr - $remote_user [$time_local] '\n                    '\"$request\" $status $body_bytes_sent '\n                    '\"$http_referer\" \"$http_user_agent\"';\n```\n\n|          |                                                                                                                                       |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`open_log_file_cache`**` max=`*`N`*` [inactive=`*`time`*`] [min_uses=`*`N`*`] [valid=`*`time`*`];` **`open_log_file_cache`**` off;` |\n| Default: | `open_log_file_cache off;`                                                                                                            |\n| Context: | `http`, `server`, `location`                                                                                                          |\n\nDefines a cache that stores the file descriptors of frequently used logs whose names contain variables. The directive has the following parameters:\n\n`max`  \nsets the maximum number of descriptors in a cache; if the cache becomes full the least recently used (LRU) descriptors are closed\n\n`inactive`  \nsets the time after which the cached descriptor is closed if there were no access during this time; by default, 10 seconds\n\n`min_uses`  \nsets the minimum number of file uses during the time defined by the `inactive` parameter to let the descriptor stay open in a cache; by default, 1\n\n`valid`  \nsets the time after which it should be checked that the file still exists with the same name; by default, 60 seconds\n\n`off`  \ndisables caching\n\nUsage example:\n\n``` nginx\nopen_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_log_module.html](https://nginx.org/en/docs/http/ngx_http_log_module.html)"
- name: ngx_http_map_module
  id: http/ngx_http_map_module
  summary: The ngx_http_map_module module creates variables whose values depend on values of other variables
  description: "# Module ngx_http_map_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [map](#map)\n- [map_hash_bucket_size](#map_hash_bucket_size)\n- [map_hash_max_size](#map_hash_max_size)\n\nThe `ngx_http_map_module` module creates variables whose values depend on values of other variables.\n\n#### Example Configuration\n\n``` nginx\nmap $http_host $name {\n    hostnames;\n\n    default       0;\n\n    example.com   1;\n    *.example.com 1;\n    example.org   2;\n    *.example.org 2;\n    .example.net  3;\n    wap.*         4;\n}\n\nmap $http_user_agent $mobile {\n    default       0;\n    \"~Opera Mini\" 1;\n}\n```\n\n#### Directives\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`map`**` `*`string`*` `*`$variable`*` { ... }` |\n| Default: | —                                                |\n| Context: | `http`                                           |\n\nCreates a new variable whose value depends on values of one or more of the source variables specified in the first parameter.\n\nBefore version 0.9.0 only a single variable could be specified in the first parameter.\n\nSince variables are evaluated only when they are used, the mere declaration even of a large number of “`map`” variables does not add any extra costs to request processing.\n\nParameters inside the `map` block specify a mapping between source and resulting values.\n\nSource values are specified as strings or regular expressions (0.9.6).\n\nStrings are matched ignoring the case.\n\nA regular expression should either start from the “`~`” symbol for a case-sensitive matching, or from the “`~*`” symbols (1.0.4) for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable.\n\nIf a source value matches one of the names of special parameters described below, it should be prefixed with the “`\\`” symbol.\n\nThe resulting value can contain text, variable (0.9.0), and their combination (1.11.0).\n\nThe following special parameters are also supported:\n\n`default` *`value`*  \nsets the resulting value if the source value matches none of the specified variants. When `default` is not specified, the default resulting value will be an empty string.\n\n`hostnames`  \nindicates that source values can be hostnames with a prefix or suffix mask:\n\n``` nginx\n*.example.com 1;\nexample.*     1;\n```\n\nThe following two records\n\n``` nginx\nexample.com   1;\n*.example.com 1;\n```\n\ncan be combined:\n\n``` nginx\n.example.com  1;\n```\n\nThis parameter should be specified before the list of values.\n\n`include` *`file`*  \nincludes a file with values. There can be several inclusions.\n\n`volatile`  \nindicates that the variable is not cacheable (1.11.7).\n\nIf the source value matches more than one of the specified variants, e.g. both a mask and a regular expression match, the first matching variant will be chosen, in the following order of priority:\n\n1.  string value without a mask\n2.  longest string value with a prefix mask, e.g. “`*.example.com`”\n3.  longest string value with a suffix mask, e.g. “`mail.*`”\n4.  first matching regular expression (in order of appearance in a configuration file)\n5.  default value\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`map_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `map_hash_bucket_size 32|64|128;`        |\n| Context: | `http`                                   |\n\nSets the bucket size for the [map](#map) variables hash tables. Default value depends on the processor’s cache line size. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`map_hash_max_size`**` `*`size`*`;` |\n| Default: | `map_hash_max_size 2048;`             |\n| Context: | `http`                                |\n\nSets the maximum *`size`* of the [map](#map) variables hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_map_module.html](https://nginx.org/en/docs/http/ngx_http_map_module.html)"
- name: ngx_http_memcached_module
  id: http/ngx_http_memcached_module
  summary: The ngx_http_memcached_module module is used to obtain responses from a memcached server
  description: "# Module ngx_http_memcached_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [memcached_bind](#memcached_bind)\n- [memcached_buffer_size](#memcached_buffer_size)\n- [memcached_connect_timeout](#memcached_connect_timeout)\n- [memcached_gzip_flag](#memcached_gzip_flag)\n- [memcached_next_upstream](#memcached_next_upstream)\n- [memcached_next_upstream_timeout](#memcached_next_upstream_timeout)\n- [memcached_next_upstream_tries](#memcached_next_upstream_tries)\n- [memcached_pass](#memcached_pass)\n- [memcached_read_timeout](#memcached_read_timeout)\n- [memcached_send_timeout](#memcached_send_timeout)\n- [memcached_socket_keepalive](#memcached_socket_keepalive)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_memcached_module` module is used to obtain responses from a memcached server. The key is set in the `$memcached_key` variable. A response should be put in memcached in advance by means external to nginx.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    location / {\n        set            $memcached_key \"$uri?$args\";\n        memcached_pass host:11211;\n        error_page     404 502 504 = @fallback;\n    }\n\n    location @fallback {\n        proxy_pass     http://backend;\n    }\n}\n```\n\n#### Directives\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`memcached_bind`**` `*`address`*` [transparent ] | off;` |\n| Default: | —                                                          |\n| Context: | `http`, `server`, `location`                               |\n\nThis directive appeared in version 0.8.22.\n\nMakes outgoing connections to a memcached server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `memcached_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.\n\nThe `transparent` parameter (1.11.0) allows outgoing connections to a memcached server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\nmemcached_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the memcached server.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`memcached_buffer_size`**` `*`size`*`;` |\n| Default: | `memcached_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`              |\n\nSets the *`size`* of the buffer used for reading the response received from the memcached server. The response is passed to the client synchronously, as soon as it is received.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`memcached_connect_timeout`**` `*`time`*`;` |\n| Default: | `memcached_connect_timeout 60s;`              |\n| Context: | `http`, `server`, `location`                  |\n\nDefines a timeout for establishing a connection with a memcached server. It should be noted that this timeout cannot usually exceed 75 seconds.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`memcached_gzip_flag`**` `*`flag`*`;` |\n| Default: | —                                       |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.3.6.\n\nEnables the test for the *`flag`* presence in the memcached server response and sets the “`Content-Encoding`” response header field to “`gzip`” if the flag is set.\n\n|          |                                                                                           |\n|----------|-------------------------------------------------------------------------------------------|\n| Syntax:  | **`memcached_next_upstream`**` error | timeout | invalid_response | not_found | off ...;` |\n| Default: | `memcached_next_upstream error timeout;`                                                  |\n| Context: | `http`, `server`, `location`                                                              |\n\nSpecifies in which cases a request should be passed to the next server:\n\n`error`  \nan error occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`timeout`  \na timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`invalid_response`  \na server returned an empty or invalid response;\n\n`not_found`  \na response was not found on the server;\n\n`off`  \ndisables passing a request to the next server.\n\nOne should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.\n\nThe directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_response` are always considered unsuccessful attempts, even if they are not specified in the directive. The case of `not_found` is never considered an unsuccessful attempt.\n\nPassing a request to the next server can be limited by [the number of tries](#memcached_next_upstream_tries) and by [time](#memcached_next_upstream_timeout).\n\n|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`memcached_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `memcached_next_upstream_timeout 0;`                |\n| Context: | `http`, `server`, `location`                        |\n\nThis directive appeared in version 1.7.5.\n\nLimits the time during which a request can be passed to the [next server](#memcached_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                     |\n|----------|-----------------------------------------------------|\n| Syntax:  | **`memcached_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `memcached_next_upstream_tries 0;`                  |\n| Context: | `http`, `server`, `location`                        |\n\nThis directive appeared in version 1.7.5.\n\nLimits the number of possible tries for passing a request to the [next server](#memcached_next_upstream). The `0` value turns off this limitation.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`memcached_pass`**` `*`address`*`;` |\n| Default: | —                                     |\n| Context: | `location`, `if in location`          |\n\nSets the memcached server address. The address can be specified as a domain name or IP address, and a port:\n\n``` nginx\nmemcached_pass localhost:11211;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\nmemcached_pass unix:/tmp/memcached.socket;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`memcached_read_timeout`**` `*`time`*`;` |\n| Default: | `memcached_read_timeout 60s;`              |\n| Context: | `http`, `server`, `location`               |\n\nDefines a timeout for reading a response from the memcached server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the memcached server does not transmit anything within this time, the connection is closed.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`memcached_send_timeout`**` `*`time`*`;` |\n| Default: | `memcached_send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`               |\n\nSets a timeout for transmitting a request to the memcached server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the memcached server does not receive anything within this time, the connection is closed.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`memcached_socket_keepalive`**` on | off;` |\n| Default: | `memcached_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a memcached server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n#### Embedded Variables\n\n`$memcached_key`  \nDefines a key for obtaining response from a memcached server.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_memcached_module.html](https://nginx.org/en/docs/http/ngx_http_memcached_module.html)"
- name: ngx_http_mirror_module
  id: http/ngx_http_mirror_module
  summary: The ngx_http_mirror_module module (1.13.4) implements mirroring of an original request by creating background mirror subrequests
  description: "# Module ngx_http_mirror_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [mirror](#mirror)\n- [mirror_request_body](#mirror_request_body)\n\nThe `ngx_http_mirror_module` module (1.13.4) implements mirroring of an original request by creating background mirror subrequests. Responses to mirror subrequests are ignored.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    mirror /mirror;\n    proxy_pass http://backend;\n}\n\nlocation = /mirror {\n    internal;\n    proxy_pass http://test_backend$request_uri;\n}\n```\n\n#### Directives\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`mirror`**` `*`uri`*` | off;` |\n| Default: | `mirror off;`                   |\n| Context: | `http`, `server`, `location`    |\n\nSets the URI to which an original request will be mirrored. Several mirrors can be specified on the same configuration level.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`mirror_request_body`**` on | off;` |\n| Default: | `mirror_request_body on;`             |\n| Context: | `http`, `server`, `location`          |\n\nIndicates whether the client request body is mirrored. When enabled, the client request body will be read prior to creating mirror subrequests. In this case, unbuffered client request body proxying set by the [proxy_request_buffering](ngx_http_proxy_module#proxy_request_buffering), [fastcgi_request_buffering](ngx_http_fastcgi_module#fastcgi_request_buffering), [scgi_request_buffering](ngx_http_scgi_module#scgi_request_buffering), and [uwsgi_request_buffering](ngx_http_uwsgi_module#uwsgi_request_buffering) directives will be disabled.\n\n``` nginx\nlocation / {\n    mirror /mirror;\n    mirror_request_body off;\n    proxy_pass http://backend;\n}\n\nlocation = /mirror {\n    internal;\n    proxy_pass http://log_backend;\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header X-Original-URI $request_uri;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_mirror_module.html](https://nginx.org/en/docs/http/ngx_http_mirror_module.html)"
- name: ngx_http_mp4_module
  id: http/ngx_http_mp4_module
  summary: The ngx_http_mp4_module module provides pseudo-streaming server-side support for MP4 files
  description: "# Module ngx_http_mp4_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [mp4](#mp4)\n- [mp4_buffer_size](#mp4_buffer_size)\n- [mp4_max_buffer_size](#mp4_max_buffer_size)\n- [mp4_limit_rate](#mp4_limit_rate)\n- [mp4_limit_rate_after](#mp4_limit_rate_after)\n- [mp4_start_key_frame](#mp4_start_key_frame)\n\nThe `ngx_http_mp4_module` module provides pseudo-streaming server-side support for MP4 files. Such files typically have the `.mp4`, `.m4v`, or `.m4a` filename extensions.\n\nPseudo-streaming works in alliance with a compatible media player. The player sends an HTTP request to the server with the start time specified in the query string argument (named simply `start` and specified in seconds), and the server responds with the stream such that its start position corresponds to the requested time, for example:\n\n``` nginx\nhttp://example.com/elephants_dream.mp4?start=238.88\n```\n\nThis allows performing a random seeking at any time, or starting playback in the middle of the timeline.\n\nTo support seeking, H.264-based formats store metadata in a so-called “moov atom”. It is a part of the file that holds the index information for the whole file.\n\nTo start playback, the player first needs to read metadata. This is done by sending a special request with the `start=0` argument. A lot of encoding software insert the metadata at the end of the file. This is suboptimal for pseudo-streaming, because the player has to download the entire file before starting playback. If the metadata are located at the beginning of the file, it is enough for nginx to simply start sending back the file contents. If the metadata are located at the end of the file, nginx must read the entire file and prepare a new stream so that the metadata come before the media data. This involves some CPU, memory, and disk I/O overhead, so it is a good idea to [prepare an original file for pseudo-streaming](https://github.com/flowplayer/flowplayer/wiki/7.1.1-video-file-correction) in advance, rather than having nginx do this on every such request.\n\nThe module also supports the `end` argument of an HTTP request (1.5.13) which sets the end point of playback. The `end` argument can be specified with the `start` argument or separately:\n\n``` nginx\nhttp://example.com/elephants_dream.mp4?start=238.88&end=555.55\n```\n\nFor a matching request with a non-zero `start` or `end` argument, nginx will read the metadata from the file, prepare the stream with the requested time range, and send it to the client. This has the same overhead as described above.\n\nIf the `start` argument points to a non-key video frame, the beginning of such video will be broken. To fix this issue, the video [can](#mp4_start_key_frame) be prepended with the key frame before `start` point and with all intermediate frames between them. These frames will be hidden from playback using an edit list (1.21.4).\n\nIf a matching request does not include the `start` and `end` arguments, there is no overhead, and the file is sent simply as a static resource. Some players also support byte-range requests, and thus do not require this module.\n\nThis module is not built by default, it should be enabled with the `--with-http_mp4_module` configuration parameter.\n\nIf a third-party mp4 module was previously used, it should be disabled.\n\nA similar pseudo-streaming support for FLV files is provided by the [ngx_http_flv_module](ngx_http_flv_module) module.\n\n#### Example Configuration\n\n``` nginx\nlocation /video/ {\n    mp4;\n    mp4_buffer_size       1m;\n    mp4_max_buffer_size   5m;\n    mp4_limit_rate        on;\n    mp4_limit_rate_after  30s;\n}\n```\n\n#### Directives\n\n|          |              |\n|----------|--------------|\n| Syntax:  | **`mp4`**`;` |\n| Default: | —            |\n| Context: | `location`   |\n\nTurns on module processing in a surrounding location.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`mp4_buffer_size`**` `*`size`*`;` |\n| Default: | `mp4_buffer_size 512K;`             |\n| Context: | `http`, `server`, `location`        |\n\nSets the initial *`size`* of the buffer used for processing MP4 files.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`mp4_max_buffer_size`**` `*`size`*`;` |\n| Default: | `mp4_max_buffer_size 10M;`              |\n| Context: | `http`, `server`, `location`            |\n\nDuring metadata processing, a larger buffer may become necessary. Its size cannot exceed the specified *`size`*, or else nginx will return the 500 (Internal Server Error) server error, and log the following message:\n\n``` nginx\n\"/some/movie/file.mp4\" mp4 moov atom is too large:\n12583268, you may want to increase mp4_max_buffer_size\n```\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`mp4_limit_rate`**` on | off | `*`factor`*`;` |\n| Default: | `mp4_limit_rate off;`                           |\n| Context: | `http`, `server`, `location`                    |\n\nLimits the rate of response transmission to a client. The rate is limited based on the average bitrate of the MP4 file served. To calculate the rate, the bitrate is multiplied by the specified *`factor`*. The special value “`on`” corresponds to the factor of 1.1. The special value “`off`” disables rate limiting. The limit is set per a request, and so if a client simultaneously opens two connections, the overall rate will be twice as much as the specified limit.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`mp4_limit_rate_after`**` `*`time`*`;` |\n| Default: | `mp4_limit_rate_after 60s;`              |\n| Context: | `http`, `server`, `location`             |\n\nSets the initial amount of media data (measured in playback time) after which the further transmission of the response to a client will be rate limited.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`mp4_start_key_frame`**` on | off;` |\n| Default: | `mp4_start_key_frame off;`            |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 1.21.4.\n\nForces output video to always start with a key video frame. If the `start` argument does not point to a key frame, initial frames are hidden using an mp4 edit list. Edit lists are supported by major players and browsers such as Chrome, Safari, QuickTime and ffmpeg, partially supported by Firefox.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_mp4_module.html](https://nginx.org/en/docs/http/ngx_http_mp4_module.html)"
- name: ngx_http_perl_module
  id: http/ngx_http_perl_module
  summary: The ngx_http_perl_module module is used to implement location and variable handlers in Perl and insert Perl calls into SSI
  description: "# Module ngx_http_perl_module\n\n- [Known Issues](#issues)\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [perl](#perl)\n- [perl_modules](#perl_modules)\n- [perl_require](#perl_require)\n- [perl_set](#perl_set)\n- [Calling Perl from SSI](#ssi)\n- [The $r Request Object Methods](#methods)\n\nThe `ngx_http_perl_module` module is used to implement location and variable handlers in Perl and insert Perl calls into SSI.\n\nThis module is not built by default, it should be enabled with the `--with-http_perl_module` configuration parameter.\n\nThis module requires [Perl](https://www.perl.org/get.html) version 5.6.1 or higher. The C compiler should be compatible with the one used to build Perl.\n\n#### Known Issues\n\nThe module is experimental, caveat emptor applies.\n\nIn order for Perl to recompile the modified modules during reconfiguration, it should be built with the `-Dusemultiplicity=yes` or `-Dusethreads=yes` parameters. Also, to make Perl leak less memory at run time, it should be built with the `-Dusemymalloc=no` parameter. To check the values of these parameters in an already built Perl (preferred values are specified in the example), run:\n\n``` nginx\n$ perl -V:usemultiplicity -V:usemymalloc\nusemultiplicity='define';\nusemymalloc='n';\n```\n\nNote that after rebuilding Perl with the new `-Dusemultiplicity=yes` or `-Dusethreads=yes` parameters, all binary Perl modules will have to be rebuilt as well — they will just stop working with the new Perl.\n\nThere is a possibility that the main process and then worker processes will grow in size after every reconfiguration. If the main process grows to an unacceptable size, the [live upgrade](../control#upgrade) procedure can be applied without changing the executable file.\n\nWhile the Perl module is performing a long-running operation, such as resolving a domain name, connecting to another server, or querying a database, other requests assigned to the current worker process will not be processed. It is thus recommended to perform only such operations that have predictable and short execution time, such as accessing the local file system.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n\n    perl_modules perl/lib;\n    perl_require hello.pm;\n\n    perl_set $msie6 '\n\n        sub {\n            my $r = shift;\n            my $ua = $r->header_in(\"User-Agent\");\n\n            return \"\" if $ua =~ /Opera/;\n            return \"1\" if $ua =~ / MSIE [6-9]\\.\\d+/;\n            return \"\";\n        }\n\n    ';\n\n    server {\n        location / {\n            perl hello::handler;\n        }\n    }\n```\n\nThe `perl/lib/hello.pm` module:\n\n``` nginx\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    $r->send_http_header(\"text/html\");\n    return OK if $r->header_only;\n\n    $r->print(\"hello!\\n<br/>\");\n\n    if (-f $r->filename or -d _) {\n        $r->print($r->uri, \" exists!\\n\");\n    }\n\n    return OK;\n}\n\n1;\n__END__\n```\n\n#### Directives\n\n|          |                                                          |\n|----------|----------------------------------------------------------|\n| Syntax:  | **`perl`**` `*`module`*`::`*`function`*`|'sub { ... }';` |\n| Default: | —                                                        |\n| Context: | `location`, `limit_except`                               |\n\nSets a Perl handler for the given location.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`perl_modules`**` `*`path`*`;` |\n| Default: | —                                |\n| Context: | `http`                           |\n\nSets an additional path for Perl modules.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`perl_require`**` `*`module`*`;` |\n| Default: | —                                  |\n| Context: | `http`                             |\n\nDefines the name of a module that will be loaded during each reconfiguration. Several `perl_require` directives can be present.\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`perl_set`**` `*`$variable`*` `*`module`*`::`*`function`*`|'sub { ... }';` |\n| Default: | —                                                                            |\n| Context: | `http`                                                                       |\n\nInstalls a Perl handler for the specified variable.\n\n#### Calling Perl from SSI\n\nAn SSI command calling Perl has the following format:\n\n``` nginx\n<!--# perl sub=\"module::function\" arg=\"parameter1\" arg=\"parameter2\" ...\n-->\n```\n\n#### The $r Request Object Methods\n\n`$r->args`  \nreturns request arguments.\n\n`$r->filename`  \nreturns a filename corresponding to the request URI.\n\n`$r->has_request_body(`*`handler`*`)`  \nreturns 0 if there is no body in a request. If there is a body, the specified handler is set for the request and 1 is returned. After reading the request body, nginx will call the specified handler. Note that the handler function should be passed by reference. Example:\n\n``` nginx\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    if ($r->request_method ne \"POST\") {\n        return DECLINED;\n    }\n\n    if ($r->has_request_body(\\&post)) {\n        return OK;\n    }\n\n    return HTTP_BAD_REQUEST;\n}\n\nsub post {\n    my $r = shift;\n\n    $r->send_http_header;\n\n    $r->print(\"request_body: \\\"\", $r->request_body, \"\\\"<br/>\");\n    $r->print(\"request_body_file: \\\"\", $r->request_body_file, \"\\\"<br/>\\n\");\n\n    return OK;\n}\n\n1;\n\n__END__\n```\n\n`$r->allow_ranges`  \nenables the use of byte ranges when sending responses.\n\n`$r->discard_request_body`  \ninstructs nginx to discard the request body.\n\n`$r->header_in(`*`field`*`)`  \nreturns the value of the specified client request header field.\n\n`$r->header_only`  \ndetermines whether the whole response or only its header should be sent to the client.\n\n`$r->header_out(`*`field`*`, `*`value`*`)`  \nsets a value for the specified response header field.\n\n`$r->internal_redirect(`*`uri`*`)`  \ndoes an internal redirect to the specified *`uri`*. An actual redirect happens after the Perl handler execution is completed.\n\nSince version 1.17.2, the method accepts escaped URIs and supports redirections to named locations.\n\n`$r->log_error(`*`errno`*`, `*`message`*`)`  \nwrites the specified *`message`* into the [error_log](../ngx_core_module#error_log). If *`errno`* is non-zero, an error code and its description will be appended to the message.\n\n`$r->print(`*`text`*`, ...)`  \npasses data to a client.\n\n`$r->request_body`  \nreturns the client request body if it has not been written to a temporary file. To ensure that the client request body is in memory, its size should be limited by [client_max_body_size](ngx_http_core_module#client_max_body_size), and a sufficient buffer size should be set using [client_body_buffer_size](ngx_http_core_module#client_body_buffer_size).\n\n`$r->request_body_file`  \nreturns the name of the file with the client request body. After the processing, the file should be removed. To always write a request body to a file, [client_body_in_file_only](ngx_http_core_module#client_body_in_file_only) should be enabled.\n\n`$r->request_method`  \nreturns the client request HTTP method.\n\n`$r->remote_addr`  \nreturns the client IP address.\n\n`$r->flush`  \nimmediately sends data to the client.\n\n`$r->sendfile(`*`name`*`[, `*`offset`*`[, `*`length`*`]])`  \nsends the specified file content to the client. Optional parameters specify the initial offset and length of the data to be transmitted. The actual data transmission happens after the Perl handler has completed.\n\n`$r->send_http_header([`*`type`*`])`  \nsends the response header to the client. The optional *`type`* parameter sets the value of the “Content-Type” response header field. If the value is an empty string, the “Content-Type” header field will not be sent.\n\n`$r->status(`*`code`*`)`  \nsets a response code.\n\n`$r->sleep(`*`milliseconds`*`, `*`handler`*`)`  \nsets the specified handler and stops request processing for the specified time. In the meantime, nginx continues to process other requests. After the specified time has elapsed, nginx will call the installed handler. Note that the handler function should be passed by reference. In order to pass data between handlers, `$r->variable()` should be used. Example:\n\n``` nginx\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    $r->discard_request_body;\n    $r->variable(\"var\", \"OK\");\n    $r->sleep(1000, \\&next);\n\n    return OK;\n}\n\nsub next {\n    my $r = shift;\n\n    $r->send_http_header;\n    $r->print($r->variable(\"var\"));\n\n    return OK;\n}\n\n1;\n\n__END__\n```\n\n`$r->unescape(`*`text`*`)`  \ndecodes a text encoded in the “%XX” form.\n\n`$r->uri`  \nreturns a request URI.\n\n`$r->variable(`*`name`*`[, `*`value`*`])`  \nreturns or sets the value of the specified variable. Variables are local to each request.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_perl_module.html](https://nginx.org/en/docs/http/ngx_http_perl_module.html)"
- name: ngx_http_proxy_module
  id: http/ngx_http_proxy_module
  summary: The ngx_http_proxy_module module allows passing requests to another server
  description: "# Module ngx_http_proxy_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [proxy_bind](#proxy_bind)\n- [proxy_buffer_size](#proxy_buffer_size)\n- [proxy_buffering](#proxy_buffering)\n- [proxy_buffers](#proxy_buffers)\n- [proxy_busy_buffers_size](#proxy_busy_buffers_size)\n- [proxy_cache](#proxy_cache)\n- [proxy_cache_background_update](#proxy_cache_background_update)\n- [proxy_cache_bypass](#proxy_cache_bypass)\n- [proxy_cache_convert_head](#proxy_cache_convert_head)\n- [proxy_cache_key](#proxy_cache_key)\n- [proxy_cache_lock](#proxy_cache_lock)\n- [proxy_cache_lock_age](#proxy_cache_lock_age)\n- [proxy_cache_lock_timeout](#proxy_cache_lock_timeout)\n- [proxy_cache_max_range_offset](#proxy_cache_max_range_offset)\n- [proxy_cache_methods](#proxy_cache_methods)\n- [proxy_cache_min_uses](#proxy_cache_min_uses)\n- [proxy_cache_path](#proxy_cache_path)\n- [proxy_cache_purge](#proxy_cache_purge)\n- [proxy_cache_revalidate](#proxy_cache_revalidate)\n- [proxy_cache_use_stale](#proxy_cache_use_stale)\n- [proxy_cache_valid](#proxy_cache_valid)\n- [proxy_connect_timeout](#proxy_connect_timeout)\n- [proxy_cookie_domain](#proxy_cookie_domain)\n- [proxy_cookie_flags](#proxy_cookie_flags)\n- [proxy_cookie_path](#proxy_cookie_path)\n- [proxy_force_ranges](#proxy_force_ranges)\n- [proxy_headers_hash_bucket_size](#proxy_headers_hash_bucket_size)\n- [proxy_headers_hash_max_size](#proxy_headers_hash_max_size)\n- [proxy_hide_header](#proxy_hide_header)\n- [proxy_http_version](#proxy_http_version)\n- [proxy_ignore_client_abort](#proxy_ignore_client_abort)\n- [proxy_ignore_headers](#proxy_ignore_headers)\n- [proxy_intercept_errors](#proxy_intercept_errors)\n- [proxy_limit_rate](#proxy_limit_rate)\n- [proxy_max_temp_file_size](#proxy_max_temp_file_size)\n- [proxy_method](#proxy_method)\n- [proxy_next_upstream](#proxy_next_upstream)\n- [proxy_next_upstream_timeout](#proxy_next_upstream_timeout)\n- [proxy_next_upstream_tries](#proxy_next_upstream_tries)\n- [proxy_no_cache](#proxy_no_cache)\n- [proxy_pass](#proxy_pass)\n- [proxy_pass_header](#proxy_pass_header)\n- [proxy_pass_request_body](#proxy_pass_request_body)\n- [proxy_pass_request_headers](#proxy_pass_request_headers)\n- [proxy_read_timeout](#proxy_read_timeout)\n- [proxy_redirect](#proxy_redirect)\n- [proxy_request_buffering](#proxy_request_buffering)\n- [proxy_send_lowat](#proxy_send_lowat)\n- [proxy_send_timeout](#proxy_send_timeout)\n- [proxy_set_body](#proxy_set_body)\n- [proxy_set_header](#proxy_set_header)\n- [proxy_socket_keepalive](#proxy_socket_keepalive)\n- [proxy_ssl_certificate](#proxy_ssl_certificate)\n- [proxy_ssl_certificate_key](#proxy_ssl_certificate_key)\n- [proxy_ssl_ciphers](#proxy_ssl_ciphers)\n- [proxy_ssl_conf_command](#proxy_ssl_conf_command)\n- [proxy_ssl_crl](#proxy_ssl_crl)\n- [proxy_ssl_name](#proxy_ssl_name)\n- [proxy_ssl_password_file](#proxy_ssl_password_file)\n- [proxy_ssl_protocols](#proxy_ssl_protocols)\n- [proxy_ssl_server_name](#proxy_ssl_server_name)\n- [proxy_ssl_session_reuse](#proxy_ssl_session_reuse)\n- [proxy_ssl_trusted_certificate](#proxy_ssl_trusted_certificate)\n- [proxy_ssl_verify](#proxy_ssl_verify)\n- [proxy_ssl_verify_depth](#proxy_ssl_verify_depth)\n- [proxy_store](#proxy_store)\n- [proxy_store_access](#proxy_store_access)\n- [proxy_temp_file_write_size](#proxy_temp_file_write_size)\n- [proxy_temp_path](#proxy_temp_path)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_proxy_module` module allows passing requests to another server.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    proxy_pass       http://localhost:8000;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n}\n```\n\n#### Directives\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`proxy_bind`**` `*`address`*` [transparent] | off;` |\n| Default: | —                                                     |\n| Context: | `http`, `server`, `location`                          |\n\nThis directive appeared in version 0.8.22.\n\nMakes outgoing connections to a proxied server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `proxy_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.\n\nThe `transparent` parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\nproxy_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the proxied server.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_buffer_size`**` `*`size`*`;` |\n| Default: | `proxy_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`          |\n\nSets the *`size`* of the buffer used for reading the first part of the response received from the proxied server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`proxy_buffering`**` on | off;` |\n| Default: | `proxy_buffering on;`             |\n| Context: | `http`, `server`, `location`      |\n\nEnables or disables buffering of responses from the proxied server.\n\nWhen buffering is enabled, nginx receives a response from the proxied server as soon as possible, saving it into the buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#proxy_temp_path) on the disk. Writing to temporary files is controlled by the [proxy_max_temp_file_size](#proxy_max_temp_file_size) and [proxy_temp_file_write_size](#proxy_temp_file_write_size) directives.\n\nWhen buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the proxied server. The maximum size of the data that nginx can receive from the server at a time is set by the [proxy_buffer_size](#proxy_buffer_size) directive.\n\nBuffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [proxy_ignore_headers](#proxy_ignore_headers) directive.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`proxy_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `proxy_buffers 8 4k|8k;`                       |\n| Context: | `http`, `server`, `location`                   |\n\nSets the *`number`* and *`size`* of the buffers used for reading a response from the proxied server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`proxy_busy_buffers_size`**` `*`size`*`;` |\n| Default: | `proxy_busy_buffers_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                |\n\nWhen [buffering](#proxy_buffering) of responses from the proxied server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_cache`**` `*`zone`*` | off;` |\n| Default: | `proxy_cache off;`                    |\n| Context: | `http`, `server`, `location`          |\n\nDefines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`proxy_cache_background_update`**` on | off;` |\n| Default: | `proxy_cache_background_update off;`            |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.11.10.\n\nAllows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#proxy_cache_use_stale_updating) the usage of a stale cached response when it is being updated.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_cache_bypass`**` `*`string`*` ...;` |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`                 |\n\nDefines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:\n\n``` nginx\nproxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nproxy_cache_bypass $http_pragma    $http_authorization;\n```\n\nCan be used along with the [proxy_no_cache](#proxy_no_cache) directive.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`proxy_cache_convert_head`**` on | off;` |\n| Default: | `proxy_cache_convert_head on;`             |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 1.9.7.\n\nEnables or disables the conversion of the “`HEAD`” method to “`GET`” for caching. When the conversion is disabled, the [cache key](#proxy_cache_key) should be configured to include the `$request_method`.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`proxy_cache_key`**` `*`string`*`;`             |\n| Default: | `proxy_cache_key $scheme$proxy_host$request_uri;` |\n| Context: | `http`, `server`, `location`                      |\n\nDefines a key for caching, for example\n\n``` nginx\nproxy_cache_key \"$host$request_uri $cookie_user\";\n```\n\nBy default, the directive’s value is close to the string\n\n``` nginx\nproxy_cache_key $scheme$proxy_host$uri$is_args$args;\n```\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_cache_lock`**` on | off;` |\n| Default: | `proxy_cache_lock off;`            |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.1.12.\n\nWhen enabled, only one request at a time will be allowed to populate a new cache element identified according to the [proxy_cache_key](#proxy_cache_key) directive by passing a request to a proxied server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [proxy_cache_lock_timeout](#proxy_cache_lock_timeout) directive.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_cache_lock_age`**` `*`time`*`;` |\n| Default: | `proxy_cache_lock_age 5s;`               |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.7.8.\n\nIf the last request passed to the proxied server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the proxied server.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_cache_lock_timeout`**` `*`time`*`;` |\n| Default: | `proxy_cache_lock_timeout 5s;`               |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 1.1.12.\n\nSets a timeout for [proxy_cache_lock](#proxy_cache_lock). When the *`time`* expires, the request will be passed to the proxied server, however, the response will not be cached.\n\nBefore 1.7.8, the response could be cached.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`proxy_cache_max_range_offset`**` `*`number`*`;` |\n| Default: | —                                                  |\n| Context: | `http`, `server`, `location`                       |\n\nThis directive appeared in version 1.11.6.\n\nSets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the proxied server and the response will not be cached.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`proxy_cache_methods`**` GET | HEAD | POST ...;` |\n| Default: | `proxy_cache_methods GET HEAD;`                    |\n| Context: | `http`, `server`, `location`                       |\n\nThis directive appeared in version 0.7.59.\n\nIf the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [proxy_no_cache](#proxy_no_cache) directive.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`proxy_cache_min_uses`**` `*`number`*`;` |\n| Default: | `proxy_cache_min_uses 1;`                  |\n| Context: | `http`, `server`, `location`               |\n\nSets the *`number`* of requests after which the response will be cached.\n\n|          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_cache_path`**` `*`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |\n| Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n\nSets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the [cache key](#proxy_cache_key). The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration\n\n``` nginx\nproxy_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n```\n\nfile names in a cache will look like this:\n\n``` nginx\n/data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c\n```\n\nA cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. The directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [proxy_temp_path](#proxy_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.\n\nIn addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.\n\nAs part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.\n\nCached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.\n\nThe special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.\n\nA minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.\n\nAdditionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n`purger`=`on`\\|`off`  \nInstructs whether cache entries that match a [wildcard key](#proxy_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.\n\n`purger_files`=*`number`*  \nSets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.\n\n`purger_threshold`=*`number`*  \nSets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.\n\n`purger_sleep`=*`number`*  \nSets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.\n\nIn versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_cache_purge`**` string ...;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 1.5.7.\n\nDefines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#proxy_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.\n\nIf the [cache key](#proxy_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#proxy_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.\n\nExample configuration:\n\n``` nginx\nproxy_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        proxy_pass http://backend;\n        proxy_cache cache_zone;\n        proxy_cache_key $uri;\n        proxy_cache_purge $purge_method;\n    }\n}\n```\n\nThis functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_cache_revalidate`**` on | off;` |\n| Default: | `proxy_cache_revalidate off;`            |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.5.7.\n\nEnables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.\n\n|          |                                                                                                                                                                   |\n|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off ...;` |\n| Default: | `proxy_cache_use_stale off;`                                                                                                                                      |\n| Context: | `http`, `server`, `location`                                                                                                                                      |\n\nDetermines in which cases a stale cached response can be used during communication with the proxied server. The directive’s parameters match the parameters of the [proxy_next_upstream](#proxy_next_upstream) directive.\n\nThe `error` parameter also permits using a stale cached response if a proxied server to process a request cannot be selected.\n\nAdditionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to proxied servers when updating cached data.\n\nUsing a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.\n\n- The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.\n- The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.\n\nTo minimize the number of accesses to proxied servers when populating a new cache element, the [proxy_cache_lock](#proxy_cache_lock) directive can be used.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`proxy_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |\n| Default: | —                                                      |\n| Context: | `http`, `server`, `location`                           |\n\nSets caching time for different response codes. For example, the following directives\n\n``` nginx\nproxy_cache_valid 200 302 10m;\nproxy_cache_valid 404      1m;\n```\n\nset 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.\n\nIf only caching *`time`* is specified\n\n``` nginx\nproxy_cache_valid 5m;\n```\n\nthen only 200, 301, and 302 responses are cached.\n\nIn addition, the `any` parameter can be specified to cache any responses:\n\n``` nginx\nproxy_cache_valid 200 302 10m;\nproxy_cache_valid 301      1h;\nproxy_cache_valid any      1m;\n```\n\nParameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.\n\n- The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.\n- If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.\n- If the header includes the “Set-Cookie” field, such a response will not be cached.\n- If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).\n\nProcessing of one or more of these response header fields can be disabled using the [proxy_ignore_headers](#proxy_ignore_headers) directive.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_connect_timeout`**` `*`time`*`;` |\n| Default: | `proxy_connect_timeout 60s;`              |\n| Context: | `http`, `server`, `location`              |\n\nDefines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds.\n\n|          |                                                                                              |\n|----------|----------------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_cookie_domain`**` off;` **`proxy_cookie_domain`**` `*`domain`*` `*`replacement`*`;` |\n| Default: | `proxy_cookie_domain off;`                                                                   |\n| Context: | `http`, `server`, `location`                                                                 |\n\nThis directive appeared in version 1.1.15.\n\nSets a text that should be changed in the `domain` attribute of the “Set-Cookie” header fields of a proxied server response. Suppose a proxied server returned the “Set-Cookie” header field with the attribute “`domain=localhost`”. The directive\n\n``` nginx\nproxy_cookie_domain localhost example.org;\n```\n\nwill rewrite this attribute to “`domain=example.org`”.\n\nA dot at the beginning of the *`domain`* and *`replacement`* strings and the `domain` attribute is ignored. Matching is case-insensitive.\n\nThe *`domain`* and *`replacement`* strings can contain variables:\n\n``` nginx\nproxy_cookie_domain www.$host $host;\n```\n\nThe directive can also be specified using regular expressions. In this case, *`domain`* should start from the “`~`” symbol. A regular expression can contain named and positional captures, and *`replacement`* can reference them:\n\n``` nginx\nproxy_cookie_domain ~\\.(?P<sl_domain>[-0-9a-z]+\\.[a-z]+)$ $sl_domain;\n```\n\nSeveral `proxy_cookie_domain` directives can be specified on the same level:\n\n``` nginx\nproxy_cookie_domain localhost example.org;\nproxy_cookie_domain ~\\.([a-z]+\\.[a-z]+)$ $1;\n```\n\nIf several directives can be applied to the cookie, the first matching directive will be chosen.\n\nThe `off` parameter cancels the effect of the `proxy_cookie_domain` directives inherited from the previous configuration level.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`proxy_cookie_flags`**` off | `*`cookie`*` [`*`flag`*` ...];` |\n| Default: | `proxy_cookie_flags off;`                                       |\n| Context: | `http`, `server`, `location`                                    |\n\nThis directive appeared in version 1.19.3.\n\nSets one or more flags for the cookie. The *`cookie`* can contain text, variables, and their combinations. The *`flag`* can contain text, variables, and their combinations (1.19.8). The `secure`, `httponly`, `samesite=strict`, `samesite=lax`, `samesite=none` parameters add the corresponding flags. The `nosecure`, `nohttponly`, `nosamesite` parameters remove the corresponding flags.\n\nThe cookie can also be specified using regular expressions. In this case, *`cookie`* should start from the “`~`” symbol.\n\nSeveral `proxy_cookie_flags` directives can be specified on the same configuration level:\n\n``` nginx\nproxy_cookie_flags one httponly;\nproxy_cookie_flags ~ nosecure samesite=strict;\n```\n\nIf several directives can be applied to the cookie, the first matching directive will be chosen. In the example, the `httponly` flag is added to the cookie `one`, for all other cookies the `samesite=strict` flag is added and the `secure` flag is deleted.\n\nThe `off` parameter cancels the effect of the `proxy_cookie_flags` directives inherited from the previous configuration level.\n\n|          |                                                                                        |\n|----------|----------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_cookie_path`**` off;` **`proxy_cookie_path`**` `*`path`*` `*`replacement`*`;` |\n| Default: | `proxy_cookie_path off;`                                                               |\n| Context: | `http`, `server`, `location`                                                           |\n\nThis directive appeared in version 1.1.15.\n\nSets a text that should be changed in the `path` attribute of the “Set-Cookie” header fields of a proxied server response. Suppose a proxied server returned the “Set-Cookie” header field with the attribute “`path=/two/some/uri/`”. The directive\n\n``` nginx\nproxy_cookie_path /two/ /;\n```\n\nwill rewrite this attribute to “`path=/some/uri/`”.\n\nThe *`path`* and *`replacement`* strings can contain variables:\n\n``` nginx\nproxy_cookie_path $uri /some$uri;\n```\n\nThe directive can also be specified using regular expressions. In this case, *`path`* should either start from the “`~`” symbol for a case-sensitive matching, or from the “`~*`” symbols for case-insensitive matching. The regular expression can contain named and positional captures, and *`replacement`* can reference them:\n\n``` nginx\nproxy_cookie_path ~*^/user/([^/]+) /u/$1;\n```\n\nSeveral `proxy_cookie_path` directives can be specified on the same level:\n\n``` nginx\nproxy_cookie_path /one/ /;\nproxy_cookie_path / /two/;\n```\n\nIf several directives can be applied to the cookie, the first matching directive will be chosen.\n\nThe `off` parameter cancels the effect of the `proxy_cookie_path` directives inherited from the previous configuration level.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_force_ranges`**` on | off;` |\n| Default: | `proxy_force_ranges off;`            |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.7.7.\n\nEnables byte-range support for both cached and uncached responses from the proxied server regardless of the “Accept-Ranges” field in these responses.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`proxy_headers_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `proxy_headers_hash_bucket_size 64;`               |\n| Context: | `http`, `server`, `location`                       |\n\nSets the bucket *`size`* for hash tables used by the [proxy_hide_header](#proxy_hide_header) and [proxy_set_header](#proxy_set_header) directives. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`proxy_headers_hash_max_size`**` `*`size`*`;` |\n| Default: | `proxy_headers_hash_max_size 512;`              |\n| Context: | `http`, `server`, `location`                    |\n\nSets the maximum *`size`* of hash tables used by the [proxy_hide_header](#proxy_hide_header) and [proxy_set_header](#proxy_set_header) directives. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`proxy_hide_header`**` `*`field`*`;` |\n| Default: | —                                      |\n| Context: | `http`, `server`, `location`           |\n\nBy default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response of a proxied server to a client. The `proxy_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [proxy_pass_header](#proxy_pass_header) directive can be used.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_http_version`**` 1.0 | 1.1;` |\n| Default: | `proxy_http_version 1.0;`             |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 1.1.4.\n\nSets the HTTP protocol version for proxying. By default, version 1.0 is used. Version 1.1 is recommended for use with [keepalive](ngx_http_upstream_module#keepalive) connections and [NTLM authentication](ngx_http_upstream_module#ntlm).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`proxy_ignore_client_abort`**` on | off;` |\n| Default: | `proxy_ignore_client_abort off;`            |\n| Context: | `http`, `server`, `location`                |\n\nDetermines whether the connection with a proxied server should be closed when a client closes the connection without waiting for a response.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`proxy_ignore_headers`**` `*`field`*` ...;` |\n| Default: | —                                             |\n| Context: | `http`, `server`, `location`                  |\n\nDisables processing of certain response header fields from the proxied server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).\n\nIf not disabled, processing of these header fields has the following effect:\n\n- “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#proxy_cache_valid);\n- “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;\n- “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;\n- “X-Accel-Buffering” enables or disables [buffering](#proxy_buffering) of a response;\n- “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_intercept_errors`**` on | off;` |\n| Default: | `proxy_intercept_errors off;`            |\n| Context: | `http`, `server`, `location`             |\n\nDetermines whether proxied responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_limit_rate`**` `*`rate`*`;` |\n| Default: | `proxy_limit_rate 0;`                |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.7.7.\n\nLimits the speed of reading the response from the proxied server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the proxied server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#proxy_buffering) of responses from the proxied server is enabled. Parameter value can contain variables (1.27.0).\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_max_temp_file_size`**` `*`size`*`;` |\n| Default: | `proxy_max_temp_file_size 1024m;`            |\n| Context: | `http`, `server`, `location`                 |\n\nWhen [buffering](#proxy_buffering) of responses from the proxied server is enabled, and the whole response does not fit into the buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [proxy_temp_file_write_size](#proxy_temp_file_write_size) directive.\n\nThe zero value disables buffering of responses to temporary files.\n\nThis restriction does not apply to responses that will be [cached](#proxy_cache) or [stored](#proxy_store) on disk.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_method`**` `*`method`*`;` |\n| Default: | —                                  |\n| Context: | `http`, `server`, `location`       |\n\nSpecifies the HTTP *`method`* to use in requests forwarded to the proxied server instead of the method from the client request. Parameter value can contain variables (1.11.6).\n\n|          |                                                                                                                                                                       |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_next_upstream`**` error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |\n| Default: | `proxy_next_upstream error timeout;`                                                                                                                                  |\n| Context: | `http`, `server`, `location`                                                                                                                                          |\n\nSpecifies in which cases a request should be passed to the next server:\n\n`error`  \nan error occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`timeout`  \na timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`invalid_header`  \na server returned an empty or invalid response;\n\n`http_500`  \na server returned a response with the code 500;\n\n`http_502`  \na server returned a response with the code 502;\n\n`http_503`  \na server returned a response with the code 503;\n\n`http_504`  \na server returned a response with the code 504;\n\n`http_403`  \na server returned a response with the code 403;\n\n`http_404`  \na server returned a response with the code 404;\n\n`http_429`  \na server returned a response with the code 429 (1.11.13);\n\n`non_idempotent`  \nnormally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;\n\n`off`  \ndisables passing a request to the next server.\n\nOne should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.\n\nThe directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_502`, `http_503`, `http_504`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.\n\nPassing a request to the next server can be limited by [the number of tries](#proxy_next_upstream_tries) and by [time](#proxy_next_upstream_timeout).\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`proxy_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `proxy_next_upstream_timeout 0;`                |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.7.5.\n\nLimits the time during which a request can be passed to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`proxy_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `proxy_next_upstream_tries 0;`                  |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.7.5.\n\nLimits the number of possible tries for passing a request to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_no_cache`**` `*`string`*` ...;` |\n| Default: | —                                        |\n| Context: | `http`, `server`, `location`             |\n\nDefines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:\n\n``` nginx\nproxy_no_cache $cookie_nocache $arg_nocache$arg_comment;\nproxy_no_cache $http_pragma    $http_authorization;\n```\n\nCan be used along with the [proxy_cache_bypass](#proxy_cache_bypass) directive.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_pass`**` `*`URL`*`;`                |\n| Default: | —                                            |\n| Context: | `location`, `if in location`, `limit_except` |\n\nSets the protocol and address of a proxied server and an optional URI to which a location should be mapped. As a protocol, “`http`” or “`https`” can be specified. The address can be specified as a domain name or IP address, and an optional port:\n\n``` nginx\nproxy_pass http://localhost:8000/uri/;\n```\n\nor as a UNIX-domain socket path specified after the word “`unix`” and enclosed in colons:\n\n``` nginx\nproxy_pass http://unix:/tmp/backend.socket:/uri/;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).\n\nParameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described server groups, and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).\n\nA request URI is passed to the server as follows:\n\n- If the `proxy_pass` directive is specified with a URI, then when a request is passed to the server, the part of a [normalized](ngx_http_core_module#location) request URI matching the location is replaced by a URI specified in the directive:\n\n  ``` nginx\n  location /name/ {\n      proxy_pass http://127.0.0.1/remote/;\n  }\n  ```\n\n- If `proxy_pass` is specified without a URI, the request URI is passed to the server in the same form as sent by a client when the original request is processed, or the full normalized request URI is passed when processing the changed URI:\n\n  ``` nginx\n  location /some/path/ {\n      proxy_pass http://127.0.0.1;\n  }\n  ```\n\nBefore version 1.1.12, if `proxy_pass` is specified without a URI, the original request URI might be passed instead of the changed URI in some cases.\n\nIn some cases, the part of a request URI to be replaced cannot be determined:\n\n- When location is specified using a regular expression, and also inside named locations.\n\n  In these cases, `proxy_pass` should be specified without a URI.\n\n- When the URI is changed inside a proxied location using the [rewrite](ngx_http_rewrite_module#rewrite) directive, and this same configuration will be used to process a request (`break`):\n\n  ``` nginx\n  location /name/ {\n      rewrite    /name/([^/]+) /users?name=$1 break;\n      proxy_pass http://127.0.0.1;\n  }\n  ```\n\n  In this case, the URI specified in the directive is ignored and the full changed request URI is passed to the server.\n\n- When variables are used in `proxy_pass`:\n\n  ``` nginx\n  location /name/ {\n      proxy_pass http://127.0.0.1$request_uri;\n  }\n  ```\n\n  In this case, if URI is specified in the directive, it is passed to the server as is, replacing the original request URI.\n\n[WebSocket](websocket) proxying requires special configuration and is supported since version 1.3.13.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`proxy_pass_header`**` `*`field`*`;` |\n| Default: | —                                      |\n| Context: | `http`, `server`, `location`           |\n\nPermits passing [otherwise disabled](#proxy_hide_header) header fields from a proxied server to a client.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_pass_request_body`**` on | off;` |\n| Default: | `proxy_pass_request_body on;`             |\n| Context: | `http`, `server`, `location`              |\n\nIndicates whether the original request body is passed to the proxied server.\n\n``` nginx\nlocation /x-accel-redirect-here/ {\n    proxy_method GET;\n    proxy_pass_request_body off;\n    proxy_set_header Content-Length \"\";\n\n    proxy_pass ...\n}\n```\n\nSee also the [proxy_set_header](#proxy_set_header) and [proxy_pass_request_headers](#proxy_pass_request_headers) directives.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_pass_request_headers`**` on | off;` |\n| Default: | `proxy_pass_request_headers on;`             |\n| Context: | `http`, `server`, `location`                 |\n\nIndicates whether the header fields of the original request are passed to the proxied server.\n\n``` nginx\nlocation /x-accel-redirect-here/ {\n    proxy_method GET;\n    proxy_pass_request_headers off;\n    proxy_pass_request_body off;\n\n    proxy_pass ...\n}\n```\n\nSee also the [proxy_set_header](#proxy_set_header) and [proxy_pass_request_body](#proxy_pass_request_body) directives.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`proxy_read_timeout`**` `*`time`*`;` |\n| Default: | `proxy_read_timeout 60s;`              |\n| Context: | `http`, `server`, `location`           |\n\nDefines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the proxied server does not transmit anything within this time, the connection is closed.\n\n|          |                                                                                                                      |\n|----------|----------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_redirect`**` default;` **`proxy_redirect`**` off;` **`proxy_redirect`**` `*`redirect`*` `*`replacement`*`;` |\n| Default: | `proxy_redirect default;`                                                                                            |\n| Context: | `http`, `server`, `location`                                                                                         |\n\nSets the text that should be changed in the “Location” and “Refresh” header fields of a proxied server response. Suppose a proxied server returned the header field “`Location: http://localhost:8000/two/some/uri/`”. The directive\n\n``` nginx\nproxy_redirect http://localhost:8000/two/ http://frontend/one/;\n```\n\nwill rewrite this string to “`Location: http://frontend/one/some/uri/`”.\n\nA server name may be omitted in the *`replacement`* string:\n\n``` nginx\nproxy_redirect http://localhost:8000/two/ /;\n```\n\nthen the primary server’s name and port, if different from 80, will be inserted.\n\nThe default replacement specified by the `default` parameter uses the parameters of the [location](ngx_http_core_module#location) and [proxy_pass](#proxy_pass) directives. Hence, the two configurations below are equivalent:\n\n``` nginx\nlocation /one/ {\n    proxy_pass     http://upstream:port/two/;\n    proxy_redirect default;\n```\n\n``` nginx\nlocation /one/ {\n    proxy_pass     http://upstream:port/two/;\n    proxy_redirect http://upstream:port/two/ /one/;\n```\n\nThe `default` parameter is not permitted if [proxy_pass](#proxy_pass) is specified using variables.\n\nA *`replacement`* string can contain variables:\n\n``` nginx\nproxy_redirect http://localhost:8000/ http://$host:$server_port/;\n```\n\nA *`redirect`* can also contain (1.1.11) variables:\n\n``` nginx\nproxy_redirect http://$proxy_host:8000/ /;\n```\n\nThe directive can be specified (1.1.11) using regular expressions. In this case, *`redirect`* should either start with the “`~`” symbol for a case-sensitive matching, or with the “`~*`” symbols for case-insensitive matching. The regular expression can contain named and positional captures, and *`replacement`* can reference them:\n\n``` nginx\nproxy_redirect ~^(http://[^:]+):\\d+(/.+)$ $1$2;\nproxy_redirect ~*/user/([^/]+)/(.+)$      http://$1.example.com/$2;\n```\n\nSeveral `proxy_redirect` directives can be specified on the same level:\n\n``` nginx\nproxy_redirect default;\nproxy_redirect http://localhost:8000/  /;\nproxy_redirect http://www.example.com/ /;\n```\n\nIf several directives can be applied to the header fields of a proxied server response, the first matching directive will be chosen.\n\nThe `off` parameter cancels the effect of the `proxy_redirect` directives inherited from the previous configuration level.\n\nUsing this directive, it is also possible to add host names to relative redirects issued by a proxied server:\n\n``` nginx\nproxy_redirect / /;\n```\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_request_buffering`**` on | off;` |\n| Default: | `proxy_request_buffering on;`             |\n| Context: | `http`, `server`, `location`              |\n\nThis directive appeared in version 1.7.11.\n\nEnables or disables buffering of a client request body.\n\nWhen buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to a proxied server.\n\nWhen buffering is disabled, the request body is sent to the proxied server immediately as it is received. In this case, the request cannot be passed to the [next server](#proxy_next_upstream) if nginx already started sending the request body.\n\nWhen HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value unless HTTP/1.1 is [enabled](#proxy_http_version) for proxying.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_send_lowat`**` `*`size`*`;` |\n| Default: | `proxy_send_lowat 0;`                |\n| Context: | `http`, `server`, `location`         |\n\nIf the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a proxied server by using either `NOTE_LOWAT` flag of the [kqueue](../events#kqueue) method, or the `SO_SNDLOWAT` socket option, with the specified *`size`*.\n\nThis directive is ignored on Linux, Solaris, and Windows.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`proxy_send_timeout`**` `*`time`*`;` |\n| Default: | `proxy_send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`           |\n\nSets a timeout for transmitting a request to the proxied server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the proxied server does not receive anything within this time, the connection is closed.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`proxy_set_body`**` `*`value`*`;` |\n| Default: | —                                   |\n| Context: | `http`, `server`, `location`        |\n\nAllows redefining the request body passed to the proxied server. The *`value`* can contain text, variables, and their combination.\n\n|          |                                                                          |\n|----------|--------------------------------------------------------------------------|\n| Syntax:  | **`proxy_set_header`**` `*`field`*` `*`value`*`;`                        |\n| Default: | `proxy_set_header Host $proxy_host;``proxy_set_header Connection close;` |\n| Context: | `http`, `server`, `location`                                             |\n\nAllows redefining or appending fields to the request header [passed](#proxy_pass_request_headers) to the proxied server. The *`value`* can contain text, variables, and their combinations. These directives are inherited from the previous configuration level if and only if there are no `proxy_set_header` directives defined on the current level. By default, only two fields are redefined:\n\n``` nginx\nproxy_set_header Host       $proxy_host;\nproxy_set_header Connection close;\n```\n\nIf caching is enabled, the header fields “If-Modified-Since”, “If-Unmodified-Since”, “If-None-Match”, “If-Match”, “Range”, and “If-Range” from the original request are not passed to the proxied server.\n\nAn unchanged “Host” request header field can be passed like this:\n\n``` nginx\nproxy_set_header Host       $http_host;\n```\n\nHowever, if this field is not present in a client request header then nothing will be passed. In such a case it is better to use the `$host` variable - its value equals the server name in the “Host” request header field or the primary server name if this field is not present:\n\n``` nginx\nproxy_set_header Host       $host;\n```\n\nIn addition, the server name can be passed together with the port of the proxied server:\n\n``` nginx\nproxy_set_header Host       $host:$proxy_port;\n```\n\nIf the value of a header field is an empty string then this field will not be passed to a proxied server:\n\n``` nginx\nproxy_set_header Accept-Encoding \"\";\n```\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_socket_keepalive`**` on | off;` |\n| Default: | `proxy_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a proxied server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                         |\n| Context: | `http`, `server`, `location`              |\n\nThis directive appeared in version 1.7.8.\n\nSpecifies a *`file`* with the certificate in the PEM format used for authentication to a proxied HTTPS server.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`proxy_ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                             |\n| Context: | `http`, `server`, `location`                  |\n\nThis directive appeared in version 1.7.8.\n\nSpecifies a *`file`* with the secret key in the PEM format used for authentication to a proxied HTTPS server.\n\nThe value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `proxy_ssl_ciphers DEFAULT;`             |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.5.6.\n\nSpecifies the enabled ciphers for requests to a proxied HTTPS server. The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`proxy_ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                      |\n| Context: | `http`, `server`, `location`                           |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the proxied HTTPS server.\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `proxy_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `proxy_ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`proxy_ssl_crl`**` `*`file`*`;` |\n| Default: | —                                 |\n| Context: | `http`, `server`, `location`      |\n\nThis directive appeared in version 1.7.0.\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied HTTPS server.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_ssl_name`**` `*`name`*`;` |\n| Default: | `proxy_ssl_name $proxy_host;`      |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.7.0.\n\nAllows overriding the server name used to [verify](#proxy_ssl_verify) the certificate of the proxied HTTPS server and to be [passed through SNI](#proxy_ssl_server_name) when establishing a connection with the proxied HTTPS server.\n\nBy default, the host part of the [proxy_pass](#proxy_pass) URL is used.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`proxy_ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `http`, `server`, `location`                |\n\nThis directive appeared in version 1.7.8.\n\nSpecifies a *`file`* with passphrases for [secret keys](#proxy_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\n|          |                                                                                    |\n|----------|------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `http`, `server`, `location`                                                       |\n\nThis directive appeared in version 1.5.6.\n\nEnables the specified protocols for requests to a proxied HTTPS server.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`proxy_ssl_server_name`**` on | off;` |\n| Default: | `proxy_ssl_server_name off;`            |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.7.0.\n\nEnables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the proxied HTTPS server.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_ssl_session_reuse`**` on | off;` |\n| Default: | `proxy_ssl_session_reuse on;`             |\n| Context: | `http`, `server`, `location`              |\n\nDetermines whether SSL sessions can be reused when working with the proxied server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`proxy_ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                 |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.7.0.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied HTTPS server.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_ssl_verify`**` on | off;` |\n| Default: | `proxy_ssl_verify off;`            |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.7.0.\n\nEnables or disables verification of the proxied HTTPS server certificate.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `proxy_ssl_verify_depth 1;`                  |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 1.7.0.\n\nSets the verification depth in the proxied HTTPS server certificates chain.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_store`**` on | off | `*`string`*`;` |\n| Default: | `proxy_store off;`                           |\n| Context: | `http`, `server`, `location`                 |\n\nEnables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:\n\n``` nginx\nproxy_store /data/www$original_uri;\n```\n\nThe modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [proxy_temp_path](#proxy_temp_path) directive, are put on the same file system.\n\nThis directive can be used to create local copies of static unchangeable files, e.g.:\n\n``` nginx\nlocation /images/ {\n    root               /data/www;\n    error_page         404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    proxy_pass         http://backend/;\n    proxy_store        on;\n    proxy_store_access user:rw group:rw all:r;\n    proxy_temp_path    /data/temp;\n\n    alias              /data/www/;\n}\n```\n\nor like this:\n\n``` nginx\nlocation /images/ {\n    root               /data/www;\n    error_page         404 = @fetch;\n}\n\nlocation @fetch {\n    internal;\n\n    proxy_pass         http://backend;\n    proxy_store        on;\n    proxy_store_access user:rw group:rw all:r;\n    proxy_temp_path    /data/temp;\n\n    root               /data/www;\n}\n```\n\n|          |                                                               |\n|----------|---------------------------------------------------------------|\n| Syntax:  | **`proxy_store_access`**` `*`users`*`:`*`permissions`*` ...;` |\n| Default: | `proxy_store_access user:rw;`                                 |\n| Context: | `http`, `server`, `location`                                  |\n\nSets access permissions for newly created files and directories, e.g.:\n\n``` nginx\nproxy_store_access user:rw group:rw all:r;\n```\n\nIf any `group` or `all` access permissions are specified then `user` permissions may be omitted:\n\n``` nginx\nproxy_store_access group:rw all:r;\n```\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`proxy_temp_file_write_size`**` `*`size`*`;` |\n| Default: | `proxy_temp_file_write_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                   |\n\nLimits the *`size`* of data written to a temporary file at a time, when buffering of responses from the proxied server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives. The maximum size of a temporary file is set by the [proxy_max_temp_file_size](#proxy_max_temp_file_size) directive.\n\n|          |                                                                                  |\n|----------|----------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_temp_path`**` `*`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `proxy_temp_path proxy_temp;`                                                    |\n| Context: | `http`, `server`, `location`                                                     |\n\nDefines a directory for storing temporary files with data received from proxied servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nproxy_temp_path /spool/nginx/proxy_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/proxy_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [proxy_cache_path](#proxy_cache_path) directive.\n\n#### Embedded Variables\n\nThe `ngx_http_proxy_module` module supports embedded variables that can be used to compose headers using the [proxy_set_header](#proxy_set_header) directive:\n\n`$proxy_host`  \nname and port of a proxied server as specified in the [proxy_pass](#proxy_pass) directive;\n\n`$proxy_port`  \nport of a proxied server as specified in the [proxy_pass](#proxy_pass) directive, or the protocol’s default port;\n\n`$proxy_add_x_forwarded_for`  \nthe “X-Forwarded-For” client request header field with the `$remote_addr` variable appended to it, separated by a comma. If the “X-Forwarded-For” field is not present in the client request header, the `$proxy_add_x_forwarded_for` variable is equal to the `$remote_addr` variable.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_proxy_module.html](https://nginx.org/en/docs/http/ngx_http_proxy_module.html)"
- name: ngx_http_proxy_protocol_vendor_module
  id: http/ngx_http_proxy_protocol_vendor_module
  summary: The ngx_http_proxy_protocol_vendor_module module (1.23.3) allows obtaining additional information about a connection in cloud platforms from application-specific TLVs of the PROXY protocol header
  description: "# Module ngx_http_proxy_protocol_vendor_module\n\n- [Example Configuration](#example)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_proxy_protocol_vendor_module` module (1.23.3) allows obtaining additional information about a connection in cloud platforms from application-specific TLVs of the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) header.\n\nSupported cloud platforms:\n\n- Amazon Web Services\n- Google Cloud Platform\n- Microsoft Azure\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](ngx_http_core_module#listen) directive.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nproxy_set_header X-Conn-ID $proxy_protocol_tlv_gcp_conn_id;\n\nserver {\n    listen 80   proxy_protocol;\n    listen 443  ssl proxy_protocol;\n    ...\n}\n```\n\n#### Embedded Variables\n\n`$proxy_protocol_tlv_aws_vpce_id`  \nTLV value from the PROXY Protocol header representing the [ID of AWS VPC endpoint](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol)\n\n`$proxy_protocol_tlv_azure_pel_id`  \nTLV value from the PROXY Protocol header representing the [LinkID of Azure private endpoint](https://learn.microsoft.com/en-us/azure/private-link/private-link-service-overview#getting-connection-information-using-tcp-proxy-v2)\n\n`$proxy_protocol_tlv_gcp_conn_id`  \nTLV value from the PROXY Protocol header representing [Google Cloud PSC connection ID](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#proxy-protocol)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_proxy_protocol_vendor_module.html](https://nginx.org/en/docs/http/ngx_http_proxy_protocol_vendor_module.html)"
- name: ngx_http_random_index_module
  id: http/ngx_http_random_index_module
  summary: The ngx_http_random_index_module module processes requests ending with the slash character (‘/’) and picks a random file in a directory to serve as an index file
  description: "# Module ngx_http_random_index_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [random_index](#random_index)\n\nThe `ngx_http_random_index_module` module processes requests ending with the slash character (‘`/`’) and picks a random file in a directory to serve as an index file. The module is processed before the [ngx_http_index_module](ngx_http_index_module) module.\n\nThis module is not built by default, it should be enabled with the `--with-http_random_index_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    random_index on;\n}\n```\n\n#### Directives\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`random_index`**` on | off;` |\n| Default: | `random_index off;`            |\n| Context: | `location`                     |\n\nEnables or disables module processing in a surrounding location.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_random_index_module.html](https://nginx.org/en/docs/http/ngx_http_random_index_module.html)"
- name: ngx_http_realip_module
  id: http/ngx_http_realip_module
  summary: The ngx_http_realip_module module is used to change the client address and optional port to those sent in the specified header field
  description: "# Module ngx_http_realip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [set_real_ip_from](#set_real_ip_from)\n- [real_ip_header](#real_ip_header)\n- [real_ip_recursive](#real_ip_recursive)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_realip_module` module is used to change the client address and optional port to those sent in the specified header field.\n\nThis module is not built by default, it should be enabled with the `--with-http_realip_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nset_real_ip_from  192.168.1.0/24;\nset_real_ip_from  192.168.2.1;\nset_real_ip_from  2001:0db8::/32;\nreal_ip_header    X-Forwarded-For;\nreal_ip_recursive on;\n```\n\n#### Directives\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`set_real_ip_from`**` `*`address`*` | `*`CIDR`*` | unix:;` |\n| Default: | —                                                            |\n| Context: | `http`, `server`, `location`                                 |\n\nDefines trusted addresses that are known to send correct replacement addresses. If the special value `unix:` is specified, all UNIX-domain sockets will be trusted. Trusted addresses may also be specified using a hostname (1.13.1).\n\nIPv6 addresses are supported starting from versions 1.3.0 and 1.2.1.\n\n|          |                                                                                    |\n|----------|------------------------------------------------------------------------------------|\n| Syntax:  | **`real_ip_header`**` `*`field`*` | X-Real-IP | X-Forwarded-For | proxy_protocol;` |\n| Default: | `real_ip_header X-Real-IP;`                                                        |\n| Context: | `http`, `server`, `location`                                                       |\n\nDefines the request header field whose value will be used to replace the client address.\n\nThe request header field value that contains an optional port is also used to replace the client port (1.11.0). The address and port should be specified according to [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986).\n\nThe `proxy_protocol` parameter (1.5.12) changes the client address to the one from the PROXY protocol header. The PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](ngx_http_core_module#listen) directive.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`real_ip_recursive`**` on | off;` |\n| Default: | `real_ip_recursive off;`            |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in versions 1.3.0 and 1.2.1.\n\nIf recursive search is disabled, the original client address that matches one of the trusted addresses is replaced by the last address sent in the request header field defined by the [real_ip_header](#real_ip_header) directive. If recursive search is enabled, the original client address that matches one of the trusted addresses is replaced by the last non-trusted address sent in the request header field.\n\n#### Embedded Variables\n\n`$realip_remote_addr`  \nkeeps the original client address (1.9.7)\n\n`$realip_remote_port`  \nkeeps the original client port (1.11.0)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_realip_module.html](https://nginx.org/en/docs/http/ngx_http_realip_module.html)"
- name: ngx_http_referer_module
  id: http/ngx_http_referer_module
  summary: The ngx_http_referer_module module is used to block access to a site for requests with invalid values in the “Referer” header field
  description: "# Module ngx_http_referer_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [referer_hash_bucket_size](#referer_hash_bucket_size)\n- [referer_hash_max_size](#referer_hash_max_size)\n- [valid_referers](#valid_referers)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_referer_module` module is used to block access to a site for requests with invalid values in the “Referer” header field. It should be kept in mind that fabricating a request with an appropriate “Referer” field value is quite easy, and so the intended purpose of this module is not to block such requests thoroughly but to block the mass flow of requests sent by regular browsers. It should also be taken into consideration that regular browsers may not send the “Referer” field even for valid requests.\n\n#### Example Configuration\n\n``` nginx\nvalid_referers none blocked server_names\n               *.example.com example.* www.example.org/galleries/\n               ~\\.google\\.;\n\nif ($invalid_referer) {\n    return 403;\n}\n```\n\n#### Directives\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`referer_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `referer_hash_bucket_size 64;`               |\n| Context: | `server`, `location`                         |\n\nThis directive appeared in version 1.0.5.\n\nSets the bucket size for the valid referers hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`referer_hash_max_size`**` `*`size`*`;` |\n| Default: | `referer_hash_max_size 2048;`             |\n| Context: | `server`, `location`                      |\n\nThis directive appeared in version 1.0.5.\n\nSets the maximum *`size`* of the valid referers hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                                                          |\n|----------|--------------------------------------------------------------------------|\n| Syntax:  | **`valid_referers`**` none | blocked | server_names | `*`string`*` ...;` |\n| Default: | —                                                                        |\n| Context: | `server`, `location`                                                     |\n\nSpecifies the “Referer” request header field values that will cause the embedded `$invalid_referer` variable to be set to an empty string. Otherwise, the variable will be set to “`1`”. Search for a match is case-insensitive.\n\nParameters can be as follows:\n\n`none`  \nthe “Referer” field is missing in the request header;\n\n`blocked`  \nthe “Referer” field is present in the request header, but its value has been deleted by a firewall or proxy server; such values are strings that do not start with “`http://`” or “`https://`”;\n\n`server_names`  \nthe “Referer” request header field contains one of the server names;\n\narbitrary string  \ndefines a server name and an optional URI prefix. A server name can have an “`*`” at the beginning or end. During the checking, the server’s port in the “Referer” field is ignored;\n\nregular expression  \nthe first symbol should be a “`~`”. It should be noted that an expression will be matched against the text starting after the “`http://`” or “`https://`”.\n\nExample:\n\n``` nginx\nvalid_referers none blocked server_names\n               *.example.com example.* www.example.org/galleries/\n               ~\\.google\\.;\n```\n\n#### Embedded Variables\n\n`$invalid_referer`  \nEmpty string, if the “Referer” request header field value is considered [valid](#valid_referers), otherwise “`1`”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_referer_module.html](https://nginx.org/en/docs/http/ngx_http_referer_module.html)"
- name: ngx_http_rewrite_module
  id: http/ngx_http_rewrite_module
  summary: The ngx_http_rewrite_module module is used to change request URI using PCRE regular expressions, return redirects, and conditionally select configurations
  description: "# Module ngx_http_rewrite_module\n\n- [Directives](#directives)\n- [break](#break)\n- [if](#if)\n- [return](#return)\n- [rewrite](#rewrite)\n- [rewrite_log](#rewrite_log)\n- [set](#set)\n- [uninitialized_variable_warn](#uninitialized_variable_warn)\n- [Internal Implementation](#internals)\n\nThe `ngx_http_rewrite_module` module is used to change request URI using PCRE regular expressions, return redirects, and conditionally select configurations.\n\nThe [break](#break), [if](#if), [return](#return), [rewrite](#rewrite), and [set](#set) directives are processed in the following order:\n\n- the directives of this module specified on the [server](ngx_http_core_module#server) level are executed sequentially;\n- repeatedly:\n  - a [location](ngx_http_core_module#location) is searched based on a request URI;\n  - the directives of this module specified inside the found location are executed sequentially;\n  - the loop is repeated if a request URI was [rewritten](#rewrite), but not more than [10 times](ngx_http_core_module#internal).\n\n#### Directives\n\n|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`break`**`;`             |\n| Default: | —                          |\n| Context: | `server`, `location`, `if` |\n\nStops processing the current set of `ngx_http_rewrite_module` directives.\n\nIf a directive is specified inside the [location](ngx_http_core_module#location), further processing of the request continues in this location.\n\nExample:\n\n``` nginx\nif ($slow) {\n    limit_rate 10k;\n    break;\n}\n```\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`if`**` (`*`condition`*`) { ... }` |\n| Default: | —                                    |\n| Context: | `server`, `location`                 |\n\nThe specified *`condition`* is evaluated. If true, this module directives specified inside the braces are executed, and the request is assigned the configuration inside the `if` directive. Configurations inside the `if` directives are inherited from the previous configuration level.\n\nA condition may be any of the following:\n\n- a variable name; false if the value of a variable is an empty string or “`0`”;\n\nBefore version 1.0.1, any string starting with “`0`” was considered a false value.\n\n- comparison of a variable with a string using the “`=`” and “`!=`” operators;\n- matching of a variable against a regular expression using the “`~`” (for case-sensitive matching) and “`~*`” (for case-insensitive matching) operators. Regular expressions can contain captures that are made available for later reuse in the `$1`..`$9` variables. Negative operators “`!~`” and “`!~*`” are also available. If a regular expression includes the “`}`” or “`;`” characters, the whole expressions should be enclosed in single or double quotes.\n- checking of a file existence with the “`-f`” and “`!-f`” operators;\n- checking of a directory existence with the “`-d`” and “`!-d`” operators;\n- checking of a file, directory, or symbolic link existence with the “`-e`” and “`!-e`” operators;\n- checking for an executable file with the “`-x`” and “`!-x`” operators.\n\nExamples:\n\n``` nginx\nif ($http_user_agent ~ MSIE) {\n    rewrite ^(.*)$ /msie/$1 break;\n}\n\nif ($http_cookie ~* \"id=([^;]+)(?:;|$)\") {\n    set $id $1;\n}\n\nif ($request_method = POST) {\n    return 405;\n}\n\nif ($slow) {\n    limit_rate 10k;\n}\n\nif ($invalid_referer) {\n    return 403;\n}\n```\n\nA value of the `$invalid_referer` embedded variable is set by the [valid_referers](ngx_http_referer_module#valid_referers) directive.\n\n|          |                                                                                                        |\n|----------|--------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`return`**` `*`code`*` [`*`text`*`];` **`return`**` `*`code`*` `*`URL`*`;` **`return`**` `*`URL`*`;` |\n| Default: | —                                                                                                      |\n| Context: | `server`, `location`, `if`                                                                             |\n\nStops processing and returns the specified *`code`* to a client. The non-standard code 444 closes a connection without sending a response header.\n\nStarting from version 0.8.42, it is possible to specify either a redirect URL (for codes 301, 302, 303, 307, and 308) or the response body *`text`* (for other codes). A response body text and redirect URL can contain variables. As a special case, a redirect URL can be specified as a URI local to this server, in which case the full redirect URL is formed according to the request scheme (`$scheme`) and the [server_name_in_redirect](ngx_http_core_module#server_name_in_redirect) and [port_in_redirect](ngx_http_core_module#port_in_redirect) directives.\n\nIn addition, a *`URL`* for temporary redirect with the code 302 can be specified as the sole parameter. Such a parameter should start with the “`http://`”, “`https://`”, or “`$scheme`” string. A *`URL`* can contain variables.\n\nOnly the following codes could be returned before version 0.7.51: 204, 400, 402 — 406, 408, 410, 411, 413, 416, and 500 — 504.\n\nThe code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.\n\nThe code 308 was not treated as a redirect until version 1.13.0.\n\nSee also the [error_page](ngx_http_core_module#error_page) directive.\n\n|          |                                                             |\n|----------|-------------------------------------------------------------|\n| Syntax:  | **`rewrite`**` `*`regex`*` `*`replacement`*` [`*`flag`*`];` |\n| Default: | —                                                           |\n| Context: | `server`, `location`, `if`                                  |\n\nIf the specified regular expression matches a request URI, URI is changed as specified in the *`replacement`* string. The `rewrite` directives are executed sequentially in order of their appearance in the configuration file. It is possible to terminate further processing of the directives using flags. If a replacement string starts with “`http://`”, “`https://`”, or “`$scheme`”, the processing stops and the redirect is returned to a client.\n\nAn optional *`flag`* parameter can be one of:\n\n`last`  \nstops processing the current set of `ngx_http_rewrite_module` directives and starts a search for a new location matching the changed URI;\n\n`break`  \nstops processing the current set of `ngx_http_rewrite_module` directives as with the [break](#break) directive;\n\n`redirect`  \nreturns a temporary redirect with the 302 code; used if a replacement string does not start with “`http://`”, “`https://`”, or “`$scheme`”;\n\n`permanent`  \nreturns a permanent redirect with the 301 code.\n\nThe full redirect URL is formed according to the request scheme (`$scheme`) and the [server_name_in_redirect](ngx_http_core_module#server_name_in_redirect) and [port_in_redirect](ngx_http_core_module#port_in_redirect) directives.\n\nExample:\n\n``` nginx\nserver {\n    ...\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\n    return  403;\n    ...\n}\n```\n\nBut if these directives are put inside the “`/download/`” location, the `last` flag should be replaced by `break`, or otherwise nginx will make 10 cycles and return the 500 error:\n\n``` nginx\nlocation /download/ {\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;\n    return  403;\n}\n```\n\nIf a *`replacement`* string includes the new request arguments, the previous request arguments are appended after them. If this is undesired, putting a question mark at the end of a replacement string avoids having them appended, for example:\n\n``` nginx\nrewrite ^/users/(.*)$ /show?user=$1? last;\n```\n\nIf a regular expression includes the “`}`” or “`;`” characters, the whole expressions should be enclosed in single or double quotes.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`rewrite_log`**` on | off;`      |\n| Default: | `rewrite_log off;`                 |\n| Context: | `http`, `server`, `location`, `if` |\n\nEnables or disables logging of `ngx_http_rewrite_module` module directives processing results into the [error_log](../ngx_core_module#error_log) at the `notice` level.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`set`**` `*`$variable`*` `*`value`*`;` |\n| Default: | —                                        |\n| Context: | `server`, `location`, `if`               |\n\nSets a *`value`* for the specified *`variable`*. The *`value`* can contain text, variables, and their combination.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`uninitialized_variable_warn`**` on | off;` |\n| Default: | `uninitialized_variable_warn on;`             |\n| Context: | `http`, `server`, `location`, `if`            |\n\nControls whether warnings about uninitialized variables are logged.\n\n#### Internal Implementation\n\nThe `ngx_http_rewrite_module` module directives are compiled at the configuration stage into internal instructions that are interpreted during request processing. An interpreter is a simple virtual stack machine.\n\nFor example, the directives\n\n``` nginx\nlocation /download/ {\n    if ($forbidden) {\n        return 403;\n    }\n\n    if ($slow) {\n        limit_rate 10k;\n    }\n\n    rewrite ^/(download/.*)/media/(.*)\\..*$ /$1/mp3/$2.mp3 break;\n}\n```\n\nwill be translated into these instructions:\n\n``` nginx\nvariable $forbidden\ncheck against zero\n    return 403\n    end of code\nvariable $slow\ncheck against zero\nmatch of regular expression\ncopy \"/\"\ncopy $1\ncopy \"/mp3/\"\ncopy $2\ncopy \".mp3\"\nend of regular expression\nend of code\n```\n\nNote that there are no instructions for the [limit_rate](ngx_http_core_module#limit_rate) directive above as it is unrelated to the `ngx_http_rewrite_module` module. A separate configuration is created for the [if](#if) block. If the condition holds true, a request is assigned this configuration where `limit_rate` equals to 10k.\n\nThe directive\n\n``` nginx\nrewrite ^/(download/.*)/media/(.*)\\..*$ /$1/mp3/$2.mp3 break;\n```\n\ncan be made smaller by one instruction if the first slash in the regular expression is put inside the parentheses:\n\n``` nginx\nrewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n```\n\nThe corresponding instructions will then look like this:\n\n``` nginx\nmatch of regular expression\ncopy $1\ncopy \"/mp3/\"\ncopy $2\ncopy \".mp3\"\nend of regular expression\nend of code\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_rewrite_module.html](https://nginx.org/en/docs/http/ngx_http_rewrite_module.html)"
- name: ngx_http_scgi_module
  id: http/ngx_http_scgi_module
  summary: The ngx_http_scgi_module module allows passing requests to an SCGI server
  description: "# Module ngx_http_scgi_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [scgi_bind](#scgi_bind)\n- [scgi_buffer_size](#scgi_buffer_size)\n- [scgi_buffering](#scgi_buffering)\n- [scgi_buffers](#scgi_buffers)\n- [scgi_busy_buffers_size](#scgi_busy_buffers_size)\n- [scgi_cache](#scgi_cache)\n- [scgi_cache_background_update](#scgi_cache_background_update)\n- [scgi_cache_bypass](#scgi_cache_bypass)\n- [scgi_cache_key](#scgi_cache_key)\n- [scgi_cache_lock](#scgi_cache_lock)\n- [scgi_cache_lock_age](#scgi_cache_lock_age)\n- [scgi_cache_lock_timeout](#scgi_cache_lock_timeout)\n- [scgi_cache_max_range_offset](#scgi_cache_max_range_offset)\n- [scgi_cache_methods](#scgi_cache_methods)\n- [scgi_cache_min_uses](#scgi_cache_min_uses)\n- [scgi_cache_path](#scgi_cache_path)\n- [scgi_cache_purge](#scgi_cache_purge)\n- [scgi_cache_revalidate](#scgi_cache_revalidate)\n- [scgi_cache_use_stale](#scgi_cache_use_stale)\n- [scgi_cache_valid](#scgi_cache_valid)\n- [scgi_connect_timeout](#scgi_connect_timeout)\n- [scgi_force_ranges](#scgi_force_ranges)\n- [scgi_hide_header](#scgi_hide_header)\n- [scgi_ignore_client_abort](#scgi_ignore_client_abort)\n- [scgi_ignore_headers](#scgi_ignore_headers)\n- [scgi_intercept_errors](#scgi_intercept_errors)\n- [scgi_limit_rate](#scgi_limit_rate)\n- [scgi_max_temp_file_size](#scgi_max_temp_file_size)\n- [scgi_next_upstream](#scgi_next_upstream)\n- [scgi_next_upstream_timeout](#scgi_next_upstream_timeout)\n- [scgi_next_upstream_tries](#scgi_next_upstream_tries)\n- [scgi_no_cache](#scgi_no_cache)\n- [scgi_param](#scgi_param)\n- [scgi_pass](#scgi_pass)\n- [scgi_pass_header](#scgi_pass_header)\n- [scgi_pass_request_body](#scgi_pass_request_body)\n- [scgi_pass_request_headers](#scgi_pass_request_headers)\n- [scgi_read_timeout](#scgi_read_timeout)\n- [scgi_request_buffering](#scgi_request_buffering)\n- [scgi_send_timeout](#scgi_send_timeout)\n- [scgi_socket_keepalive](#scgi_socket_keepalive)\n- [scgi_store](#scgi_store)\n- [scgi_store_access](#scgi_store_access)\n- [scgi_temp_file_write_size](#scgi_temp_file_write_size)\n- [scgi_temp_path](#scgi_temp_path)\n\nThe `ngx_http_scgi_module` module allows passing requests to an SCGI server.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    include   scgi_params;\n    scgi_pass localhost:9000;\n}\n```\n\n#### Directives\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`scgi_bind`**` `*`address`*` [transparent] | off;` |\n| Default: | —                                                    |\n| Context: | `http`, `server`, `location`                         |\n\nMakes outgoing connections to an SCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `scgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.\n\nThe `transparent` parameter (1.11.0) allows outgoing connections to an SCGI server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\nscgi_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the SCGI server.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`scgi_buffer_size`**` `*`size`*`;` |\n| Default: | `scgi_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`         |\n\nSets the *`size`* of the buffer used for reading the first part of the response received from the SCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`scgi_buffering`**` on | off;` |\n| Default: | `scgi_buffering on;`             |\n| Context: | `http`, `server`, `location`     |\n\nEnables or disables buffering of responses from the SCGI server.\n\nWhen buffering is enabled, nginx receives a response from the SCGI server as soon as possible, saving it into the buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#scgi_temp_path) on the disk. Writing to temporary files is controlled by the [scgi_max_temp_file_size](#scgi_max_temp_file_size) and [scgi_temp_file_write_size](#scgi_temp_file_write_size) directives.\n\nWhen buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the SCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the [scgi_buffer_size](#scgi_buffer_size) directive.\n\nBuffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [scgi_ignore_headers](#scgi_ignore_headers) directive.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`scgi_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `scgi_buffers 8 4k|8k;`                       |\n| Context: | `http`, `server`, `location`                  |\n\nSets the *`number`* and *`size`* of the buffers used for reading a response from the SCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`scgi_busy_buffers_size`**` `*`size`*`;` |\n| Default: | `scgi_busy_buffers_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`               |\n\nWhen [buffering](#scgi_buffering) of responses from the SCGI server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`scgi_cache`**` `*`zone`*` | off;` |\n| Default: | `scgi_cache off;`                    |\n| Context: | `http`, `server`, `location`         |\n\nDefines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`scgi_cache_background_update`**` on | off;` |\n| Default: | `scgi_cache_background_update off;`            |\n| Context: | `http`, `server`, `location`                   |\n\nThis directive appeared in version 1.11.10.\n\nAllows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#scgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`scgi_cache_bypass`**` `*`string`*` ...;` |\n| Default: | —                                           |\n| Context: | `http`, `server`, `location`                |\n\nDefines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:\n\n``` nginx\nscgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nscgi_cache_bypass $http_pragma    $http_authorization;\n```\n\nCan be used along with the [scgi_no_cache](#scgi_no_cache) directive.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`scgi_cache_key`**` `*`string`*`;` |\n| Default: | —                                    |\n| Context: | `http`, `server`, `location`         |\n\nDefines a key for caching, for example\n\n``` nginx\nscgi_cache_key localhost:9000$request_uri;\n```\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`scgi_cache_lock`**` on | off;` |\n| Default: | `scgi_cache_lock off;`            |\n| Context: | `http`, `server`, `location`      |\n\nThis directive appeared in version 1.1.12.\n\nWhen enabled, only one request at a time will be allowed to populate a new cache element identified according to the [scgi_cache_key](#scgi_cache_key) directive by passing a request to an SCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [scgi_cache_lock_timeout](#scgi_cache_lock_timeout) directive.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`scgi_cache_lock_age`**` `*`time`*`;` |\n| Default: | `scgi_cache_lock_age 5s;`               |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.7.8.\n\nIf the last request passed to the SCGI server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the SCGI server.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`scgi_cache_lock_timeout`**` `*`time`*`;` |\n| Default: | `scgi_cache_lock_timeout 5s;`               |\n| Context: | `http`, `server`, `location`                |\n\nThis directive appeared in version 1.1.12.\n\nSets a timeout for [scgi_cache_lock](#scgi_cache_lock). When the *`time`* expires, the request will be passed to the SCGI server, however, the response will not be cached.\n\nBefore 1.7.8, the response could be cached.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`scgi_cache_max_range_offset`**` `*`number`*`;` |\n| Default: | —                                                 |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.11.6.\n\nSets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the SCGI server and the response will not be cached.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`scgi_cache_methods`**` GET | HEAD | POST ...;` |\n| Default: | `scgi_cache_methods GET HEAD;`                    |\n| Context: | `http`, `server`, `location`                      |\n\nIf the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [scgi_no_cache](#scgi_no_cache) directive.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`scgi_cache_min_uses`**` `*`number`*`;` |\n| Default: | `scgi_cache_min_uses 1;`                  |\n| Context: | `http`, `server`, `location`              |\n\nSets the *`number`* of requests after which the response will be cached.\n\n|          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`scgi_cache_path`**` `*`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |\n| Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n\nSets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the [cache key](#scgi_cache_key). The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration\n\n``` nginx\nscgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n```\n\nfile names in a cache will look like this:\n\n``` nginx\n/data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c\n```\n\nA cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [scgi_temp_path](#scgi_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.\n\nIn addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.\n\nAs part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.\n\nCached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.\n\nThe special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.\n\nA minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.\n\nAdditionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n`purger`=`on`\\|`off`  \nInstructs whether cache entries that match a [wildcard key](#scgi_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.\n\n`purger_files`=*`number`*  \nSets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.\n\n`purger_threshold`=*`number`*  \nSets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.\n\n`purger_sleep`=*`number`*  \nSets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.\n\nIn versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`scgi_cache_purge`**` string ...;` |\n| Default: | —                                    |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.5.7.\n\nDefines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#scgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.\n\nIf the [cache key](#scgi_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#scgi_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.\n\nExample configuration:\n\n``` nginx\nscgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        scgi_pass        backend;\n        scgi_cache       cache_zone;\n        scgi_cache_key   $uri;\n        scgi_cache_purge $purge_method;\n    }\n}\n```\n\nThis functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`scgi_cache_revalidate`**` on | off;` |\n| Default: | `scgi_cache_revalidate off;`            |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.5.7.\n\nEnables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.\n\n|          |                                                                                                                                            |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`scgi_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | http_429 | off ...;` |\n| Default: | `scgi_cache_use_stale off;`                                                                                                                |\n| Context: | `http`, `server`, `location`                                                                                                               |\n\nDetermines in which cases a stale cached response can be used when an error occurs during communication with the SCGI server. The directive’s parameters match the parameters of the [scgi_next_upstream](#scgi_next_upstream) directive.\n\nThe `error` parameter also permits using a stale cached response if an SCGI server to process a request cannot be selected.\n\nAdditionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to SCGI servers when updating cached data.\n\nUsing a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.\n\n- The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.\n- The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.\n\nTo minimize the number of accesses to SCGI servers when populating a new cache element, the [scgi_cache_lock](#scgi_cache_lock) directive can be used.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`scgi_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |\n| Default: | —                                                     |\n| Context: | `http`, `server`, `location`                          |\n\nSets caching time for different response codes. For example, the following directives\n\n``` nginx\nscgi_cache_valid 200 302 10m;\nscgi_cache_valid 404      1m;\n```\n\nset 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.\n\nIf only caching *`time`* is specified\n\n``` nginx\nscgi_cache_valid 5m;\n```\n\nthen only 200, 301, and 302 responses are cached.\n\nIn addition, the `any` parameter can be specified to cache any responses:\n\n``` nginx\nscgi_cache_valid 200 302 10m;\nscgi_cache_valid 301      1h;\nscgi_cache_valid any      1m;\n```\n\nParameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.\n\n- The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.\n- If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.\n- If the header includes the “Set-Cookie” field, such a response will not be cached.\n- If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).\n\nProcessing of one or more of these response header fields can be disabled using the [scgi_ignore_headers](#scgi_ignore_headers) directive.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`scgi_connect_timeout`**` `*`time`*`;` |\n| Default: | `scgi_connect_timeout 60s;`              |\n| Context: | `http`, `server`, `location`             |\n\nDefines a timeout for establishing a connection with an SCGI server. It should be noted that this timeout cannot usually exceed 75 seconds.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`scgi_force_ranges`**` on | off;` |\n| Default: | `scgi_force_ranges off;`            |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.7.7.\n\nEnables byte-range support for both cached and uncached responses from the SCGI server regardless of the “Accept-Ranges” field in these responses.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`scgi_hide_header`**` `*`field`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nBy default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of an SCGI server to a client. The `scgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [scgi_pass_header](#scgi_pass_header) directive can be used.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`scgi_ignore_client_abort`**` on | off;` |\n| Default: | `scgi_ignore_client_abort off;`            |\n| Context: | `http`, `server`, `location`               |\n\nDetermines whether the connection with an SCGI server should be closed when a client closes the connection without waiting for a response.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`scgi_ignore_headers`**` `*`field`*` ...;` |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`                 |\n\nDisables processing of certain response header fields from the SCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).\n\nIf not disabled, processing of these header fields has the following effect:\n\n- “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#scgi_cache_valid);\n- “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;\n- “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;\n- “X-Accel-Buffering” enables or disables [buffering](#scgi_buffering) of a response;\n- “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`scgi_intercept_errors`**` on | off;` |\n| Default: | `scgi_intercept_errors off;`            |\n| Context: | `http`, `server`, `location`            |\n\nDetermines whether an SCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`scgi_limit_rate`**` `*`rate`*`;` |\n| Default: | `scgi_limit_rate 0;`                |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.7.7.\n\nLimits the speed of reading the response from the SCGI server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the SCGI server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#scgi_buffering) of responses from the SCGI server is enabled. Parameter value can contain variables (1.27.0).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`scgi_max_temp_file_size`**` `*`size`*`;` |\n| Default: | `scgi_max_temp_file_size 1024m;`            |\n| Context: | `http`, `server`, `location`                |\n\nWhen [buffering](#scgi_buffering) of responses from the SCGI server is enabled, and the whole response does not fit into the buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [scgi_temp_file_write_size](#scgi_temp_file_write_size) directive.\n\nThe zero value disables buffering of responses to temporary files.\n\nThis restriction does not apply to responses that will be [cached](#scgi_cache) or [stored](#scgi_store) on disk.\n\n|          |                                                                                                                                                |\n|----------|------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`scgi_next_upstream`**` error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |\n| Default: | `scgi_next_upstream error timeout;`                                                                                                            |\n| Context: | `http`, `server`, `location`                                                                                                                   |\n\nSpecifies in which cases a request should be passed to the next server:\n\n`error`  \nan error occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`timeout`  \na timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`invalid_header`  \na server returned an empty or invalid response;\n\n`http_500`  \na server returned a response with the code 500;\n\n`http_503`  \na server returned a response with the code 503;\n\n`http_403`  \na server returned a response with the code 403;\n\n`http_404`  \na server returned a response with the code 404;\n\n`http_429`  \na server returned a response with the code 429 (1.11.13);\n\n`non_idempotent`  \nnormally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;\n\n`off`  \ndisables passing a request to the next server.\n\nOne should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.\n\nThe directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_503`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.\n\nPassing a request to the next server can be limited by [the number of tries](#scgi_next_upstream_tries) and by [time](#scgi_next_upstream_timeout).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`scgi_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `scgi_next_upstream_timeout 0;`                |\n| Context: | `http`, `server`, `location`                   |\n\nThis directive appeared in version 1.7.5.\n\nLimits the time during which a request can be passed to the [next server](#scgi_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`scgi_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `scgi_next_upstream_tries 0;`                  |\n| Context: | `http`, `server`, `location`                   |\n\nThis directive appeared in version 1.7.5.\n\nLimits the number of possible tries for passing a request to the [next server](#scgi_next_upstream). The `0` value turns off this limitation.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`scgi_no_cache`**` `*`string`*` ...;` |\n| Default: | —                                       |\n| Context: | `http`, `server`, `location`            |\n\nDefines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:\n\n``` nginx\nscgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nscgi_no_cache $http_pragma    $http_authorization;\n```\n\nCan be used along with the [scgi_cache_bypass](#scgi_cache_bypass) directive.\n\n|          |                                                                |\n|----------|----------------------------------------------------------------|\n| Syntax:  | **`scgi_param`**` `*`parameter`*` `*`value`*` [if_not_empty];` |\n| Default: | —                                                              |\n| Context: | `http`, `server`, `location`                                   |\n\nSets a *`parameter`* that should be passed to the SCGI server. The *`value`* can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `scgi_param` directives defined on the current level.\n\nStandard [CGI environment variables](https://datatracker.ietf.org/doc/html/rfc3875#section-4.1) should be provided as SCGI headers, see the `scgi_params` file provided in the distribution:\n\n``` nginx\nlocation / {\n    include scgi_params;\n    ...\n}\n```\n\nIf the directive is specified with `if_not_empty` (1.1.11) then such a parameter will be passed to the server only if its value is not empty:\n\n``` nginx\nscgi_param HTTPS $https if_not_empty;\n```\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`scgi_pass`**` `*`address`*`;` |\n| Default: | —                                |\n| Context: | `location`, `if in location`     |\n\nSets the address of an SCGI server. The address can be specified as a domain name or IP address, and a port:\n\n``` nginx\nscgi_pass localhost:9000;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\nscgi_pass unix:/tmp/scgi.socket;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).\n\nParameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`scgi_pass_header`**` `*`field`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nPermits passing [otherwise disabled](#scgi_hide_header) header fields from an SCGI server to a client.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`scgi_pass_request_body`**` on | off;` |\n| Default: | `scgi_pass_request_body on;`             |\n| Context: | `http`, `server`, `location`             |\n\nIndicates whether the original request body is passed to the SCGI server. See also the [scgi_pass_request_headers](#scgi_pass_request_headers) directive.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`scgi_pass_request_headers`**` on | off;` |\n| Default: | `scgi_pass_request_headers on;`             |\n| Context: | `http`, `server`, `location`                |\n\nIndicates whether the header fields of the original request are passed to the SCGI server. See also the [scgi_pass_request_body](#scgi_pass_request_body) directive.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`scgi_read_timeout`**` `*`time`*`;` |\n| Default: | `scgi_read_timeout 60s;`              |\n| Context: | `http`, `server`, `location`          |\n\nDefines a timeout for reading a response from the SCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the SCGI server does not transmit anything within this time, the connection is closed.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`scgi_request_buffering`**` on | off;` |\n| Default: | `scgi_request_buffering on;`             |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.7.11.\n\nEnables or disables buffering of a client request body.\n\nWhen buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to an SCGI server.\n\nWhen buffering is disabled, the request body is sent to the SCGI server immediately as it is received. In this case, the request cannot be passed to the [next server](#scgi_next_upstream) if nginx already started sending the request body.\n\nWhen HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`scgi_send_timeout`**` `*`time`*`;` |\n| Default: | `scgi_send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`          |\n\nSets a timeout for transmitting a request to the SCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the SCGI server does not receive anything within this time, the connection is closed.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`scgi_socket_keepalive`**` on | off;` |\n| Default: | `scgi_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to an SCGI server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`scgi_store`**` on | off | `*`string`*`;` |\n| Default: | `scgi_store off;`                           |\n| Context: | `http`, `server`, `location`                |\n\nEnables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:\n\n``` nginx\nscgi_store /data/www$original_uri;\n```\n\nThe modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [scgi_temp_path](#scgi_temp_path) directive, are put on the same file system.\n\nThis directive can be used to create local copies of static unchangeable files, e.g.:\n\n``` nginx\nlocation /images/ {\n    root              /data/www;\n    error_page        404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    scgi_pass         backend:9000;\n    ...\n\n    scgi_store        on;\n    scgi_store_access user:rw group:rw all:r;\n    scgi_temp_path    /data/temp;\n\n    alias             /data/www/;\n}\n```\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`scgi_store_access`**` `*`users`*`:`*`permissions`*` ...;` |\n| Default: | `scgi_store_access user:rw;`                                 |\n| Context: | `http`, `server`, `location`                                 |\n\nSets access permissions for newly created files and directories, e.g.:\n\n``` nginx\nscgi_store_access user:rw group:rw all:r;\n```\n\nIf any `group` or `all` access permissions are specified then `user` permissions may be omitted:\n\n``` nginx\nscgi_store_access group:rw all:r;\n```\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`scgi_temp_file_write_size`**` `*`size`*`;` |\n| Default: | `scgi_temp_file_write_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                  |\n\nLimits the *`size`* of data written to a temporary file at a time, when buffering of responses from the SCGI server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives. The maximum size of a temporary file is set by the [scgi_max_temp_file_size](#scgi_max_temp_file_size) directive.\n\n|          |                                                                                 |\n|----------|---------------------------------------------------------------------------------|\n| Syntax:  | **`scgi_temp_path`**` `*`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `scgi_temp_path scgi_temp;`                                                     |\n| Context: | `http`, `server`, `location`                                                    |\n\nDefines a directory for storing temporary files with data received from SCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nscgi_temp_path /spool/nginx/scgi_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/scgi_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [scgi_cache_path](#scgi_cache_path) directive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_scgi_module.html](https://nginx.org/en/docs/http/ngx_http_scgi_module.html)"
- name: ngx_http_secure_link_module
  id: http/ngx_http_secure_link_module
  summary: The ngx_http_secure_link_module module (0.7.18) is used to check authenticity of requested links, protect resources from unauthorized access, and limit link lifetime
  description: "# Module ngx_http_secure_link_module\n\n- [Directives](#directives)\n- [secure_link](#secure_link)\n- [secure_link_md5](#secure_link_md5)\n- [secure_link_secret](#secure_link_secret)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_secure_link_module` module (0.7.18) is used to check authenticity of requested links, protect resources from unauthorized access, and limit link lifetime.\n\nThe authenticity of a requested link is verified by comparing the checksum value passed in a request with the value computed for the request. If a link has a limited lifetime and the time has expired, the link is considered outdated. The status of these checks is made available in the `$secure_link` variable.\n\nThe module provides two alternative operation modes. The first mode is enabled by the [secure_link_secret](#secure_link_secret) directive and is used to check authenticity of requested links as well as protect resources from unauthorized access. The second mode (0.8.50) is enabled by the [secure_link](#secure_link) and [secure_link_md5](#secure_link_md5) directives and is also used to limit lifetime of links.\n\nThis module is not built by default, it should be enabled with the `--with-http_secure_link_module` configuration parameter.\n\n#### Directives\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`secure_link`**` `*`expression`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nDefines a string with variables from which the checksum value and lifetime of a link will be extracted.\n\nVariables used in an *`expression`* are usually associated with a request; see [example](#secure_link_md5) below.\n\nThe checksum value extracted from the string is compared with the MD5 hash value of the expression defined by the [secure_link_md5](#secure_link_md5) directive. If the checksums are different, the `$secure_link` variable is set to an empty string. If the checksums are the same, the link lifetime is checked. If the link has a limited lifetime and the time has expired, the `$secure_link` variable is set to “`0`”. Otherwise, it is set to “`1`”. The MD5 hash value passed in a request is encoded in [base64url](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n\nIf a link has a limited lifetime, the expiration time is set in seconds since Epoch (Thu, 01 Jan 1970 00:00:00 GMT). The value is specified in the expression after the MD5 hash, and is separated by a comma. The expiration time passed in a request is available through the `$secure_link_expires` variable for a use in the [secure_link_md5](#secure_link_md5) directive. If the expiration time is not specified, a link has the unlimited lifetime.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`secure_link_md5`**` `*`expression`*`;` |\n| Default: | —                                         |\n| Context: | `http`, `server`, `location`              |\n\nDefines an expression for which the MD5 hash value will be computed and compared with the value passed in a request.\n\nThe expression should contain the secured part of a link (resource) and a secret ingredient. If the link has a limited lifetime, the expression should also contain `$secure_link_expires`.\n\nTo prevent unauthorized access, the expression may contain some information about the client, such as its address and browser version.\n\nExample:\n\n``` nginx\nlocation /s/ {\n    secure_link $arg_md5,$arg_expires;\n    secure_link_md5 \"$secure_link_expires$uri$remote_addr secret\";\n\n    if ($secure_link = \"\") {\n        return 403;\n    }\n\n    if ($secure_link = \"0\") {\n        return 410;\n    }\n\n    ...\n}\n```\n\nThe “`/s/link?md5=_e4Nc3iduzkWRm01TBBNYw&expires=2147483647`” link restricts access to “`/s/link`” for the client with the IP address 127.0.0.1. The link also has the limited lifetime until January 19, 2038 (GMT).\n\nOn UNIX, the *`md5`* request argument value can be obtained as:\n\n``` nginx\necho -n '2147483647/s/link127.0.0.1 secret' | \\\n    openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d =\n```\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`secure_link_secret`**` `*`word`*`;` |\n| Default: | —                                      |\n| Context: | `location`                             |\n\nDefines a secret *`word`* used to check authenticity of requested links.\n\nThe full URI of a requested link looks as follows:\n\n``` nginx\n/prefix/hash/link\n```\n\nwhere *`hash`* is a hexadecimal representation of the MD5 hash computed for the concatenation of the link and secret word, and *`prefix`* is an arbitrary string without slashes.\n\nIf the requested link passes the authenticity check, the `$secure_link` variable is set to the link extracted from the request URI. Otherwise, the `$secure_link` variable is set to an empty string.\n\nExample:\n\n``` nginx\nlocation /p/ {\n    secure_link_secret secret;\n\n    if ($secure_link = \"\") {\n        return 403;\n    }\n\n    rewrite ^ /secure/$secure_link;\n}\n\nlocation /secure/ {\n    internal;\n}\n```\n\nA request of “`/p/5e814704a28d9bc1914ff19fa0c4a00a/link`” will be internally redirected to “`/secure/link`”.\n\nOn UNIX, the hash value for this example can be obtained as:\n\n``` nginx\necho -n 'linksecret' | openssl md5 -hex\n```\n\n#### Embedded Variables\n\n`$secure_link`  \nThe status of a link check. The specific value depends on the selected operation mode.\n\n`$secure_link_expires`  \nThe lifetime of a link passed in a request; intended to be used only in the [secure_link_md5](#secure_link_md5) directive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_secure_link_module.html](https://nginx.org/en/docs/http/ngx_http_secure_link_module.html)"
- name: ngx_http_session_log_module
  id: http/ngx_http_session_log_module
  summary: The ngx_http_session_log_module module enables logging sessions (that is, aggregates of multiple HTTP requests) instead of individual HTTP requests
  description: "# Module ngx_http_session_log_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [session_log](#session_log)\n- [session_log_format](#session_log_format)\n- [session_log_zone](#session_log_zone)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_session_log_module` module enables logging sessions (that is, aggregates of multiple HTTP requests) instead of individual HTTP requests.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\nThe following configuration sets up a session log and maps requests to sessions according to the request client address and “User-Agent” request header field:\n\n``` nginx\n    session_log_zone /path/to/log format=combined\n                     zone=one:1m timeout=30s\n                     md5=$binary_remote_addr$http_user_agent;\n\n    location /media/ {\n        session_log one;\n    }\n```\n\n#### Directives\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`session_log`**` `*`name`*` | off;` |\n| Default: | `session_log off;`                    |\n| Context: | `http`, `server`, `location`          |\n\nEnables the use of the specified session log. The special value `off` cancels the effect of the `session_log` directives inherited from the previous configuration level.\n\n|          |                                                         |\n|----------|---------------------------------------------------------|\n| Syntax:  | **`session_log_format`**` `*`name`*` `*`string`*` ...;` |\n| Default: | `session_log_format combined \"...\";`                    |\n| Context: | `http`                                                  |\n\nSpecifies the output format of a log. The value of the `$body_bytes_sent` variable is aggregated across all requests in a session. The values of all other variables available for logging correspond to the first request in a session.\n\n|          |                                                                                                                                           |\n|----------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`session_log_zone`**` `*`path`*` zone=`*`name`*`:`*`size`*` [format=`*`format`*`] [timeout=`*`time`*`] [id=`*`id`*`] [md5=`*`md5`*`] ;` |\n| Default: | —                                                                                                                                         |\n| Context: | `http`                                                                                                                                    |\n\nSets the path to a log file and configures the shared memory zone that is used to store currently active sessions.\n\nA session is considered active for as long as the time elapsed since the last request in the session does not exceed the specified `timeout` (by default, 30 seconds). Once a session is no longer active, it is written to the log.\n\nThe `id` parameter identifies the session to which a request is mapped. The `id` parameter is set to the hexadecimal representation of an MD5 hash (for example, obtained from a cookie using variables). If this parameter is not specified or does not represent the valid MD5 hash, nginx computes the MD5 hash from the value of the `md5` parameter and creates a new session using this hash. Both the `id` and `md5` parameters can contain variables.\n\nThe `format` parameter sets the custom session log format configured by the [session_log_format](#session_log_format) directive. If `format` is not specified, the predefined “`combined`” format is used.\n\n#### Embedded Variables\n\nThe `ngx_http_session_log_module` module supports two embedded variables:\n\n`$session_log_id`  \ncurrent session ID;\n\n`$session_log_binary_id`  \ncurrent session ID in binary form (16 bytes).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_session_log_module.html](https://nginx.org/en/docs/http/ngx_http_session_log_module.html)"
- name: ngx_http_slice_module
  id: http/ngx_http_slice_module
  summary: The ngx_http_slice_module module (1.9.8) is a filter that splits a request into subrequests, each returning a certain range of response
  description: "# Module ngx_http_slice_module\n\n- [Known Issues](#issues)\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [slice](#slice)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_slice_module` module (1.9.8) is a filter that splits a request into subrequests, each returning a certain range of response. The filter provides more effective caching of big responses.\n\nThis module is not built by default, it should be enabled with the `--with-http_slice_module` configuration parameter.\n\n#### Known Issues\n\nCurrently, the module does not work as expected in subrequests such as [background cache update](ngx_http_proxy_module#proxy_cache_background_update). In this case, a request is constructed without byte-range support.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    slice             1m;\n    proxy_cache       cache;\n    proxy_cache_key   $uri$is_args$args$slice_range;\n    proxy_set_header  Range $slice_range;\n    proxy_cache_valid 200 206 1h;\n    proxy_pass        http://localhost:8000;\n}\n```\n\nIn this example, the response is split into 1-megabyte cacheable slices.\n\n#### Directives\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`slice`**` `*`size`*`;`    |\n| Default: | `slice 0;`                   |\n| Context: | `http`, `server`, `location` |\n\nSets the *`size`* of the slice. The zero value disables splitting responses into slices. Note that a too low value may result in excessive memory usage and opening a large number of files.\n\nIn order for a subrequest to return the required range, the `$slice_range` variable should be [passed](ngx_http_proxy_module#proxy_set_header) to the proxied server as the `Range` request header field. If [caching](ngx_http_proxy_module#proxy_cache) is enabled, `$slice_range` should be added to the [cache key](ngx_http_proxy_module#proxy_cache_key) and caching of responses with 206 status code should be [enabled](ngx_http_proxy_module#proxy_cache_valid).\n\n#### Embedded Variables\n\nThe `ngx_http_slice_module` module supports the following embedded variables:\n\n`$slice_range`  \nthe current slice range in [HTTP byte range](https://datatracker.ietf.org/doc/html/rfc7233#section-2.1) format, for example, `bytes=0-1048575`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_slice_module.html](https://nginx.org/en/docs/http/ngx_http_slice_module.html)"
- name: ngx_http_split_clients_module
  id: http/ngx_http_split_clients_module
  summary: The ngx_http_split_clients_module module creates variables suitable for A/B testing, also known as split testing
  description: "# Module ngx_http_split_clients_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [split_clients](#split_clients)\n\nThe `ngx_http_split_clients_module` module creates variables suitable for A/B testing, also known as split testing.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    split_clients \"${remote_addr}AAA\" $variant {\n                   0.5%               .one;\n                   2.0%               .two;\n                   *                  \"\";\n    }\n\n    server {\n        location / {\n            index index${variant}.html;\n```\n\n#### Directives\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`split_clients`**` `*`string`*` `*`$variable`*` { ... }` |\n| Default: | —                                                          |\n| Context: | `http`                                                     |\n\nCreates a variable for A/B testing, for example:\n\n``` nginx\nsplit_clients \"${remote_addr}AAA\" $variant {\n               0.5%               .one;\n               2.0%               .two;\n               *                  \"\";\n}\n```\n\nThe value of the original string is hashed using MurmurHash2. In the example given, hash values from 0 to 21474835 (0.5%) correspond to the value `\".one\"` of the `$variant` variable, hash values from 21474836 to 107374180 (2%) correspond to the value `\".two\"`, and hash values from 107374181 to 4294967295 correspond to the value `\"\"` (an empty string).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_split_clients_module.html](https://nginx.org/en/docs/http/ngx_http_split_clients_module.html)"
- name: ngx_http_ssi_module
  id: http/ngx_http_ssi_module
  summary: The ngx_http_ssi_module module is a filter that processes SSI (Server Side Includes) commands in responses passing through it
  description: "# Module ngx_http_ssi_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [ssi](#ssi)\n- [ssi_last_modified](#ssi_last_modified)\n- [ssi_min_file_chunk](#ssi_min_file_chunk)\n- [ssi_silent_errors](#ssi_silent_errors)\n- [ssi_types](#ssi_types)\n- [ssi_value_length](#ssi_value_length)\n- [SSI Commands](#commands)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_ssi_module` module is a filter that processes SSI (Server Side Includes) commands in responses passing through it. Currently, the list of supported SSI commands is incomplete.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    ssi on;\n    ...\n}\n```\n\n#### Directives\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`ssi`**` on | off;`                          |\n| Default: | `ssi off;`                                     |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nEnables or disables processing of SSI commands in responses.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssi_last_modified`**` on | off;` |\n| Default: | `ssi_last_modified off;`            |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.5.1.\n\nAllows preserving the “Last-Modified” header field from the original response during SSI processing to facilitate response caching.\n\nBy default, the header field is removed as contents of the response are modified during processing and may contain dynamically generated elements or parts that are changed independently of the original response.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`ssi_min_file_chunk`**` size;` |\n| Default: | `ssi_min_file_chunk 1k;`         |\n| Context: | `http`, `server`, `location`     |\n\nSets the minimum *`size`* for parts of a response stored on disk, starting from which it makes sense to send them using [sendfile](ngx_http_core_module#sendfile).\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssi_silent_errors`**` on | off;` |\n| Default: | `ssi_silent_errors off;`            |\n| Context: | `http`, `server`, `location`        |\n\nIf enabled, suppresses the output of the “`[an error occurred while processing the directive]`” string if an error occurred during SSI processing.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssi_types`**` `*`mime-type`*` ...;` |\n| Default: | `ssi_types text/html;`                 |\n| Context: | `http`, `server`, `location`           |\n\nEnables processing of SSI commands in responses with the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssi_value_length`**` `*`length`*`;` |\n| Default: | `ssi_value_length 256;`                |\n| Context: | `http`, `server`, `location`           |\n\nSets the maximum length of parameter values in SSI commands.\n\n#### SSI Commands\n\nSSI commands have the following generic format:\n\n``` nginx\n<!--# command parameter1=value1 parameter2=value2 ... -->\n```\n\nThe following commands are supported:\n\n`block`  \nDefines a block that can be used as a stub in the `include` command. The block can contain other SSI commands. The command has the following parameter:\n\n`name`  \nblock name.\n\nExample:\n\n``` nginx\n<!--# block name=\"one\" -->\nstub\n<!--# endblock -->\n```\n\n`config`  \nSets some parameters used during SSI processing, namely:\n\n`errmsg`  \na string that is output if an error occurs during SSI processing. By default, the following string is output:\n\n``` nginx\n[an error occurred while processing the directive]\n```\n\n`timefmt`  \na format string passed to the `strftime()` function used to output date and time. By default, the following format is used:\n\n``` nginx\n\"%A, %d-%b-%Y %H:%M:%S %Z\"\n```\n\nThe “`%s`” format is suitable to output time in seconds.\n\n`echo`  \nOutputs the value of a variable. The command has the following parameters:\n\n`var`  \nthe variable name.\n\n`encoding`  \nthe encoding method. Possible values include `none`, `url`, and `entity`. By default, `entity` is used.\n\n`default`  \na non-standard parameter that sets a string to be output if a variable is undefined. By default, “`(none)`” is output. The command\n\n``` nginx\n<!--# echo var=\"name\" default=\"no\" -->\n```\n\nreplaces the following sequence of commands:\n\n``` nginx\n<!--# if expr=\"$name\" --><!--# echo var=\"name\" --><!--#\n       else -->no<!--# endif -->\n```\n\n`if`  \nPerforms a conditional inclusion. The following commands are supported:\n\n``` nginx\n<!--# if expr=\"...\" -->\n...\n<!--# elif expr=\"...\" -->\n...\n<!--# else -->\n...\n<!--# endif -->\n```\n\nOnly one level of nesting is currently supported. The command has the following parameter:\n\n`expr`  \nexpression. An expression can be:\n\n- variable existence check:\n\n  ``` nginx\n  <!--# if expr=\"$name\" -->\n  ```\n\n- comparison of a variable with a text:\n\n  ``` nginx\n  <!--# if expr=\"$name = text\" -->\n  <!--# if expr=\"$name != text\" -->\n  ```\n\n- comparison of a variable with a regular expression:\n\n  ``` nginx\n  <!--# if expr=\"$name = /text/\" -->\n  <!--# if expr=\"$name != /text/\" -->\n  ```\n\nIf a *`text`* contains variables, their values are substituted. A regular expression can contain positional and named captures that can later be used through variables, for example:\n\n``` nginx\n<!--# if expr=\"$name = /(.+)@(?P<domain>.+)/\" -->\n    <!--# echo var=\"1\" -->\n    <!--# echo var=\"domain\" -->\n<!--# endif -->\n```\n\n`include`  \nIncludes the result of another request into a response. The command has the following parameters:\n\n`file`  \nspecifies an included file, for example:\n\n``` nginx\n<!--# include file=\"footer.html\" -->\n```\n\n`virtual`  \nspecifies an included request, for example:\n\n``` nginx\n<!--# include virtual=\"/remote/body.php?argument=value\" -->\n```\n\nSeveral requests specified on one page and processed by proxied or FastCGI/uwsgi/SCGI/gRPC servers run in parallel. If sequential processing is desired, the `wait` parameter should be used.\n\n`stub`  \na non-standard parameter that names the block whose content will be output if the included request results in an empty body or if an error occurs during the request processing, for example:\n\n``` nginx\n<!--# block name=\"one\" -->&nbsp;<!--# endblock -->\n<!--# include virtual=\"/remote/body.php?argument=value\" stub=\"one\" -->\n```\n\nThe replacement block content is processed in the included request context.\n\n`wait`  \na non-standard parameter that instructs to wait for a request to fully complete before continuing with SSI processing, for example:\n\n``` nginx\n<!--# include virtual=\"/remote/body.php?argument=value\" wait=\"yes\" -->\n```\n\n`set`  \na non-standard parameter that instructs to write a successful result of request processing to the specified variable, for example:\n\n``` nginx\n<!--# include virtual=\"/remote/body.php?argument=value\" set=\"one\" -->\n```\n\nThe maximum size of the response is set by the [subrequest_output_buffer_size](ngx_http_core_module#subrequest_output_buffer_size) directive (1.13.10):\n\n``` nginx\nlocation /remote/ {\n    subrequest_output_buffer_size 64k;\n    ...\n}\n```\n\nPrior to version 1.13.10, only the results of responses obtained using the [ngx_http_proxy_module](ngx_http_proxy_module), [ngx_http_memcached_module](ngx_http_memcached_module), [ngx_http_fastcgi_module](ngx_http_fastcgi_module) (1.5.6), [ngx_http_uwsgi_module](ngx_http_uwsgi_module) (1.5.6), and [ngx_http_scgi_module](ngx_http_scgi_module) (1.5.6) modules could be written into variables. The maximum size of the response was set with the [proxy_buffer_size](ngx_http_proxy_module#proxy_buffer_size), [memcached_buffer_size](ngx_http_memcached_module#memcached_buffer_size), [fastcgi_buffer_size](ngx_http_fastcgi_module#fastcgi_buffer_size), [uwsgi_buffer_size](ngx_http_uwsgi_module#uwsgi_buffer_size), and [scgi_buffer_size](ngx_http_scgi_module#scgi_buffer_size) directives.\n\n`set`  \nSets a value of a variable. The command has the following parameters:\n\n`var`  \nthe variable name.\n\n`value`  \nthe variable value. If an assigned value contains variables, their values are substituted.\n\n#### Embedded Variables\n\nThe `ngx_http_ssi_module` module supports two embedded variables:\n\n`$date_local`  \ncurrent time in the local time zone. The format is set by the `config` command with the `timefmt` parameter.\n\n`$date_gmt`  \ncurrent time in GMT. The format is set by the `config` command with the `timefmt` parameter.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_ssi_module.html](https://nginx.org/en/docs/http/ngx_http_ssi_module.html)"
- name: ngx_http_ssl_module
  id: http/ngx_http_ssl_module
  summary: The ngx_http_ssl_module module provides the necessary support for HTTPS
  description: "# Module ngx_http_ssl_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [ssl](#ssl)\n- [ssl_buffer_size](#ssl_buffer_size)\n- [ssl_certificate](#ssl_certificate)\n- [ssl_certificate_key](#ssl_certificate_key)\n- [ssl_ciphers](#ssl_ciphers)\n- [ssl_client_certificate](#ssl_client_certificate)\n- [ssl_conf_command](#ssl_conf_command)\n- [ssl_crl](#ssl_crl)\n- [ssl_dhparam](#ssl_dhparam)\n- [ssl_early_data](#ssl_early_data)\n- [ssl_ecdh_curve](#ssl_ecdh_curve)\n- [ssl_ocsp](#ssl_ocsp)\n- [ssl_ocsp_cache](#ssl_ocsp_cache)\n- [ssl_ocsp_responder](#ssl_ocsp_responder)\n- [ssl_password_file](#ssl_password_file)\n- [ssl_prefer_server_ciphers](#ssl_prefer_server_ciphers)\n- [ssl_protocols](#ssl_protocols)\n- [ssl_reject_handshake](#ssl_reject_handshake)\n- [ssl_session_cache](#ssl_session_cache)\n- [ssl_session_ticket_key](#ssl_session_ticket_key)\n- [ssl_session_tickets](#ssl_session_tickets)\n- [ssl_session_timeout](#ssl_session_timeout)\n- [ssl_stapling](#ssl_stapling)\n- [ssl_stapling_file](#ssl_stapling_file)\n- [ssl_stapling_responder](#ssl_stapling_responder)\n- [ssl_stapling_verify](#ssl_stapling_verify)\n- [ssl_trusted_certificate](#ssl_trusted_certificate)\n- [ssl_verify_client](#ssl_verify_client)\n- [ssl_verify_depth](#ssl_verify_depth)\n- [Error Processing](#errors)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_ssl_module` module provides the necessary support for HTTPS.\n\nThis module is not built by default, it should be enabled with the `--with-http_ssl_module` configuration parameter.\n\nThis module requires the [OpenSSL](http://www.openssl.org) library.\n\n#### Example Configuration\n\nTo reduce the processor load it is recommended to\n\n- set the number of [worker processes](../ngx_core_module#worker_processes) equal to the number of processors,\n- enable [keep-alive](ngx_http_core_module#keepalive_timeout) connections,\n- enable the [shared](#ssl_session_cache_shared) session cache,\n- disable the [built-in](#ssl_session_cache_builtin) session cache,\n- and possibly increase the session [lifetime](#ssl_session_timeout) (by default, 5 minutes):\n\n``` nginx\nworker_processes auto;\n\nhttp {\n\n    ...\n\n    server {\n        listen              443 ssl;\n        keepalive_timeout   70;\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        ssl_session_cache   shared:SSL:10m;\n        ssl_session_timeout 10m;\n\n        ...\n    }\n```\n\n#### Directives\n\n|          |                       |\n|----------|-----------------------|\n| Syntax:  | **`ssl`**` on | off;` |\n| Default: | `ssl off;`            |\n| Context: | `http`, `server`      |\n\nThis directive was made obsolete in version 1.15.0 and was removed in version 1.25.1. The `ssl` parameter of the [listen](ngx_http_core_module#listen) directive should be used instead.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_buffer_size`**` `*`size`*`;` |\n| Default: | `ssl_buffer_size 16k;`              |\n| Context: | `http`, `server`                    |\n\nThis directive appeared in version 1.5.9.\n\nSets the size of the buffer used for sending data.\n\nBy default, the buffer size is 16k, which corresponds to minimal overhead when sending big responses. To minimize Time To First Byte it may be beneficial to use smaller values, for example:\n\n``` nginx\nssl_buffer_size 4k;\n```\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                   |\n| Context: | `http`, `server`                    |\n\nSpecifies a *`file`* with the certificate in the PEM format for the given virtual server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file.\n\nSince version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA:\n\n``` nginx\nserver {\n    listen              443 ssl;\n    server_name         example.com;\n\n    ssl_certificate     example.com.rsa.crt;\n    ssl_certificate_key example.com.rsa.key;\n\n    ssl_certificate     example.com.ecdsa.crt;\n    ssl_certificate_key example.com.ecdsa.key;\n\n    ...\n}\n```\n\nOnly OpenSSL 1.0.2 or higher supports separate [certificate chains](configuring_https_servers#chains) for different certificates. With older versions, only one certificate chain can be used.\n\nSince version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher:\n\n``` nginx\nssl_certificate     $ssl_server_name.crt;\nssl_certificate_key $ssl_server_name.key;\n```\n\nNote that using variables implies that a certificate will be loaded for each SSL handshake, and this may have a negative impact on performance.\n\nThe value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a certificate from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).\n\nIt should be kept in mind that due to the HTTPS protocol limitations for maximum interoperability virtual servers should listen on [different IP addresses](configuring_https_servers#name_based_https_servers).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                       |\n| Context: | `http`, `server`                        |\n\nSpecifies a *`file`* with the secret key in the PEM format for the given virtual server.\n\nThe value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.\n\nThe value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a secret key from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).\n\nSince version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `ssl_ciphers HIGH:!aNULL:!MD5;`    |\n| Context: | `http`, `server`                   |\n\nSpecifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:\n\n``` nginx\nssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n```\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\nThe previous versions of nginx used [different](configuring_https_servers#compatibility) ciphers by default.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`ssl_client_certificate`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `http`, `server`                           |\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates and OCSP responses if [ssl_stapling](#ssl_stapling) is enabled.\n\nThe list of certificates will be sent to clients. If this is not desired, the [ssl_trusted_certificate](#ssl_trusted_certificate) directive can be used.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                |\n| Context: | `http`, `server`                                 |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html).\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `ssl_conf_command` directives can be specified on the same level:\n\n``` nginx\nssl_conf_command Options PrioritizeChaCha;\nssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;\n```\n\nThese directives are inherited from the previous configuration level if and only if there are no `ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`ssl_crl`**` `*`file`*`;` |\n| Default: | —                           |\n| Context: | `http`, `server`            |\n\nThis directive appeared in version 0.8.7.\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`ssl_dhparam`**` `*`file`*`;` |\n| Default: | —                               |\n| Context: | `http`, `server`                |\n\nThis directive appeared in version 0.7.2.\n\nSpecifies a *`file`* with DH parameters for DHE ciphers.\n\nBy default no parameters are set, and therefore DHE ciphers will not be used.\n\nPrior to version 1.11.0, builtin parameters were used by default.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`ssl_early_data`**` on | off;` |\n| Default: | `ssl_early_data off;`            |\n| Context: | `http`, `server`                 |\n\nThis directive appeared in version 1.15.3.\n\nEnables or disables TLS 1.3 [early data](https://datatracker.ietf.org/doc/html/rfc8446#section-2.3).\n\nRequests sent within early data are subject to [replay attacks](https://datatracker.ietf.org/doc/html/rfc8470). To protect against such attacks at the application layer, the [$ssl_early_data](#var_ssl_early_data) variable should be used.\n\n``` nginx\nproxy_set_header Early-Data $ssl_early_data;\n```\n\nThe directive is supported when using OpenSSL 1.1.1 or higher (1.15.4) and [BoringSSL](https://boringssl.googlesource.com/boringssl/).\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_ecdh_curve`**` `*`curve`*`;` |\n| Default: | `ssl_ecdh_curve auto;`              |\n| Context: | `http`, `server`                    |\n\nThis directive appeared in versions 1.1.0 and 1.0.6.\n\nSpecifies a *`curve`* for ECDHE ciphers.\n\nWhen using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example:\n\n``` nginx\nssl_ecdh_curve prime256v1:secp384r1;\n```\n\nThe special value `auto` (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or `prime256v1` with older versions.\n\nPrior to version 1.11.0, the `prime256v1` curve was used by default.\n\nWhen using OpenSSL 1.0.2 or higher, this directive sets the list of curves supported by the server. Thus, in order for ECDSA certificates to work, it is important to include the curves used in the certificates.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`ssl_ocsp`**` on | off | leaf;` |\n| Default: | `ssl_ocsp off;`                   |\n| Context: | `http`, `server`                  |\n\nThis directive appeared in version 1.19.0.\n\nEnables OCSP validation of the client certificate chain. The `leaf` parameter enables validation of the client certificate only.\n\nFor the OCSP validation to work, the [ssl_verify_client](#ssl_verify_client) directive should be set to `on` or `optional`.\n\nTo resolve the OCSP responder hostname, the [resolver](ngx_http_core_module#resolver) directive should also be specified.\n\nExample:\n\n``` nginx\nssl_verify_client on;\nssl_ocsp          on;\nresolver          192.0.2.1;\n```\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`ssl_ocsp_cache`**` off | [shared:`*`name`*`:`*`size`*`];` |\n| Default: | `ssl_ocsp_cache off;`                                        |\n| Context: | `http`, `server`                                             |\n\nThis directive appeared in version 1.19.0.\n\nSets `name` and `size` of the cache that stores client certificates status for OCSP validation. The cache is shared between all worker processes. A cache with the same name can be used in several virtual servers.\n\nThe `off` parameter prohibits the use of the cache.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_ocsp_responder`**` `*`url`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`                      |\n\nThis directive appeared in version 1.19.0.\n\nOverrides the URL of the OCSP responder specified in the “[Authority Information Access](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.1)” certificate extension for [validation](#ssl_ocsp) of client certificates.\n\nOnly “`http://`” OCSP responders are supported:\n\n``` nginx\nssl_ocsp_responder http://ocsp.example.com/;\n```\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`                      |\n\nThis directive appeared in version 1.7.3.\n\nSpecifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\nExample:\n\n``` nginx\nhttp {\n    ssl_password_file /etc/keys/global.pass;\n    ...\n\n    server {\n        server_name www1.example.com;\n        ssl_certificate_key /etc/keys/first.key;\n    }\n\n    server {\n        server_name www2.example.com;\n\n        # named pipe can also be used instead of a file\n        ssl_password_file /etc/keys/fifo;\n        ssl_certificate_key /etc/keys/second.key;\n    }\n}\n```\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_prefer_server_ciphers`**` on | off;` |\n| Default: | `ssl_prefer_server_ciphers off;`            |\n| Context: | `http`, `server`                            |\n\nSpecifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols.\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `http`, `server`                                                             |\n\nEnables the specified protocols.\n\nIf the directive is specified on the [server](ngx_http_core_module#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.\n\nThe `TLSv1.1` and `TLSv1.2` parameters (1.1.13, 1.0.12) work only when OpenSSL 1.0.1 or higher is used.\n\nThe `TLSv1.3` parameter (1.13.0) works only when OpenSSL 1.1.1 or higher is used.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssl_reject_handshake`**` on | off;` |\n| Default: | `ssl_reject_handshake off;`            |\n| Context: | `http`, `server`                       |\n\nThis directive appeared in version 1.19.4.\n\nIf enabled, SSL handshakes in the [server](ngx_http_core_module#server) block will be rejected.\n\nFor example, in the following configuration, SSL handshakes with server names other than `example.com` are rejected:\n\n``` nginx\nserver {\n    listen               443 ssl default_server;\n    ssl_reject_handshake on;\n}\n\nserver {\n    listen              443 ssl;\n    server_name         example.com;\n    ssl_certificate     example.com.crt;\n    ssl_certificate_key example.com.key;\n}\n```\n\n|          |                                                                                               |\n|----------|-----------------------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_session_cache`**` off | none | [builtin[:`*`size`*`]] [shared:`*`name`*`:`*`size`*`];` |\n| Default: | `ssl_session_cache none;`                                                                     |\n| Context: | `http`, `server`                                                                              |\n\nSets the types and sizes of caches that store session parameters. A cache can be of any of the following types:\n\n`off`  \nthe use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused.\n\n`none`  \nthe use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache.\n\n`builtin`  \na cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation.\n\n`shared`  \na cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several virtual servers. It is also used to automatically generate, store, and periodically rotate TLS session ticket keys (1.23.2) unless configured explicitly using the [ssl_session_ticket_key](#ssl_session_ticket_key) directive.\n\nBoth cache types can be used simultaneously, for example:\n\n``` nginx\nssl_session_cache builtin:1000 shared:SSL:10m;\n```\n\nbut using only shared cache without the built-in cache should be more efficient.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`ssl_session_ticket_key`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `http`, `server`                           |\n\nThis directive appeared in version 1.5.7.\n\nSets a *`file`* with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used.\n\nIf several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example:\n\n``` nginx\nssl_session_ticket_key current.key;\nssl_session_ticket_key previous.key;\n```\n\nThe *`file`* must contain 80 or 48 bytes of random data and can be created using the following command:\n\n``` nginx\nopenssl rand 80 > ticket.key\n```\n\nDepending on the file size either AES256 (for 80-byte keys, 1.11.8) or AES128 (for 48-byte keys) is used for encryption.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_session_tickets`**` on | off;` |\n| Default: | `ssl_session_tickets on;`             |\n| Context: | `http`, `server`                      |\n\nThis directive appeared in version 1.5.9.\n\nEnables or disables session resumption through [TLS session tickets](https://datatracker.ietf.org/doc/html/rfc5077).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_session_timeout`**` `*`time`*`;` |\n| Default: | `ssl_session_timeout 5m;`               |\n| Context: | `http`, `server`                        |\n\nSpecifies a time during which a client may reuse the session parameters.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`ssl_stapling`**` on | off;` |\n| Default: | `ssl_stapling off;`            |\n| Context: | `http`, `server`               |\n\nThis directive appeared in version 1.3.7.\n\nEnables or disables [stapling of OCSP responses](https://datatracker.ietf.org/doc/html/rfc6066#section-8) by the server. Example:\n\n``` nginx\nssl_stapling on;\nresolver 192.0.2.1;\n```\n\nFor the OCSP stapling to work, the certificate of the server certificate issuer should be known. If the [ssl_certificate](#ssl_certificate) file does not contain intermediate certificates, the certificate of the server certificate issuer should be present in the [ssl_trusted_certificate](#ssl_trusted_certificate) file.\n\nFor a resolution of the OCSP responder hostname, the [resolver](ngx_http_core_module#resolver) directive should also be specified.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_stapling_file`**` `*`file`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`                      |\n\nThis directive appeared in version 1.3.7.\n\nWhen set, the stapled OCSP response will be taken from the specified *`file`* instead of querying the OCSP responder specified in the server certificate.\n\nThe file should be in the DER format as produced by the “`openssl ocsp`” command.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`ssl_stapling_responder`**` `*`url`*`;` |\n| Default: | —                                         |\n| Context: | `http`, `server`                          |\n\nThis directive appeared in version 1.3.7.\n\nOverrides the URL of the OCSP responder specified in the “[Authority Information Access](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.1)” certificate extension.\n\nOnly “`http://`” OCSP responders are supported:\n\n``` nginx\nssl_stapling_responder http://ocsp.example.com/;\n```\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_stapling_verify`**` on | off;` |\n| Default: | `ssl_stapling_verify off;`            |\n| Context: | `http`, `server`                      |\n\nThis directive appeared in version 1.3.7.\n\nEnables or disables verification of OCSP responses by the server.\n\nFor verification to work, the certificate of the server certificate issuer, the root certificate, and all intermediate certificates should be configured as trusted using the [ssl_trusted_certificate](#ssl_trusted_certificate) directive.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `http`, `server`                            |\n\nThis directive appeared in version 1.3.7.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates and OCSP responses if [ssl_stapling](#ssl_stapling) is enabled.\n\nIn contrast to the certificate set by [ssl_client_certificate](#ssl_client_certificate), the list of these certificates will not be sent to clients.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`ssl_verify_client`**` on | off | optional | optional_no_ca;` |\n| Default: | `ssl_verify_client off;`                                        |\n| Context: | `http`, `server`                                                |\n\nEnables verification of client certificates. The verification result is stored in the [$ssl_client_verify](#var_ssl_client_verify) variable.\n\nThe `optional` parameter (0.8.7+) requests the client certificate and verifies it if the certificate is present.\n\nThe `optional_no_ca` parameter (1.3.8, 1.2.5) requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through the [$ssl_client_cert](#var_ssl_client_cert) variable.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `ssl_verify_depth 1;`                  |\n| Context: | `http`, `server`                       |\n\nSets the verification depth in the client certificates chain.\n\n#### Error Processing\n\nThe `ngx_http_ssl_module` module supports several non-standard error codes that can be used for redirects using the [error_page](ngx_http_core_module#error_page) directive:\n\n495  \nan error has occurred during the client certificate verification;\n\n496  \na client has not presented the required certificate;\n\n497  \na regular request has been sent to the HTTPS port.\n\nThe redirection happens after the request is fully parsed and the variables, such as `$request_uri`, `$uri`, `$args` and others, are available.\n\n#### Embedded Variables\n\nThe `ngx_http_ssl_module` module supports embedded variables:\n\n`$ssl_alpn_protocol`  \nreturns the protocol selected by ALPN during the SSL handshake, or an empty string otherwise (1.21.4);\n\n`$ssl_cipher`  \nreturns the name of the cipher used for an established SSL connection;\n\n`$ssl_ciphers`  \nreturns the list of ciphers supported by the client (1.11.7). Known ciphers are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nAES128-SHA:AES256-SHA:0x00ff\n```\n\nThe variable is fully supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable is available only for new sessions and lists only known ciphers.\n\n`$ssl_client_escaped_cert`  \nreturns the client certificate in the PEM format (urlencoded) for an established SSL connection (1.13.5);\n\n`$ssl_client_cert`  \nreturns the client certificate in the PEM format for an established SSL connection, with each line except the first prepended with the tab character; this is intended for the use in the [proxy_set_header](ngx_http_proxy_module#proxy_set_header) directive;\n\nThe variable is deprecated, the `$ssl_client_escaped_cert` variable should be used instead.\n\n`$ssl_client_fingerprint`  \nreturns the SHA1 fingerprint of the client certificate for an established SSL connection (1.7.1);\n\n`$ssl_client_i_dn`  \nreturns the “issuer DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.6);\n\n`$ssl_client_i_dn_legacy`  \nreturns the “issuer DN” string of the client certificate for an established SSL connection;\n\nPrior to version 1.11.6, the variable name was `$ssl_client_i_dn`.\n\n`$ssl_client_raw_cert`  \nreturns the client certificate in the PEM format for an established SSL connection;\n\n`$ssl_client_s_dn`  \nreturns the “subject DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.6);\n\n`$ssl_client_s_dn_legacy`  \nreturns the “subject DN” string of the client certificate for an established SSL connection;\n\nPrior to version 1.11.6, the variable name was `$ssl_client_s_dn`.\n\n`$ssl_client_serial`  \nreturns the serial number of the client certificate for an established SSL connection;\n\n`$ssl_client_v_end`  \nreturns the end date of the client certificate (1.11.7);\n\n`$ssl_client_v_remain`  \nreturns the number of days until the client certificate expires (1.11.7);\n\n`$ssl_client_v_start`  \nreturns the start date of the client certificate (1.11.7);\n\n`$ssl_client_verify`  \nreturns the result of client certificate verification: “`SUCCESS`”, “`FAILED:`*`reason`*”, and “`NONE`” if a certificate was not present;\n\nPrior to version 1.11.7, the “`FAILED`” result did not contain the *`reason`* string.\n\n`$ssl_curve`  \nreturns the negotiated curve used for SSL handshake key exchange process (1.21.5). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nprime256v1\n```\n\nThe variable is supported only when using OpenSSL version 3.0 or higher. With older versions, the variable value will be an empty string.\n\n`$ssl_curves`  \nreturns the list of curves supported by the client (1.11.7). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\n0x001d:prime256v1:secp521r1:secp384r1\n```\n\nThe variable is supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable value will be an empty string.\n\nThe variable is available only for new sessions.\n\n`$ssl_early_data`  \nreturns “`1`” if TLS 1.3 [early data](#ssl_early_data) is used and the handshake is not complete, otherwise “” (1.15.3).\n\n`$ssl_protocol`  \nreturns the protocol of an established SSL connection;\n\n`$ssl_server_name`  \nreturns the server name requested through [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) (1.7.0);\n\n`$ssl_session_id`  \nreturns the session identifier of an established SSL connection;\n\n`$ssl_session_reused`  \nreturns “`r`” if an SSL session was reused, or “`.`” otherwise (1.5.11).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_ssl_module.html](https://nginx.org/en/docs/http/ngx_http_ssl_module.html)"
- name: ngx_http_status_module
  id: http/ngx_http_status_module
  summary: The ngx_http_status_module module provides access to various status information
  description: "# Module ngx_http_status_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [status](#status)\n- [status_format](#status_format)\n- [status_zone](#status_zone)\n- [Data](#data)\n- [Compatibility](#compatibility)\n\nThe `ngx_http_status_module` module provides access to various status information.\n\nThis module was available as part of our [commercial subscription](https://www.f5.com/products/nginx) until 1.13.10. It was superseded by the [ngx_http_api_module](ngx_http_api_module) module in 1.13.3.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    upstream backend {\n        zone http_backend 64k;\n\n        server backend1.example.com weight=5;\n        server backend2.example.com;\n    }\n\n    proxy_cache_path /data/nginx/cache_backend keys_zone=cache_backend:10m;\n\n    server {\n        server_name backend.example.com;\n\n        location / {\n            proxy_pass  http://backend;\n            proxy_cache cache_backend;\n\n            health_check;\n        }\n\n        status_zone server_backend;\n    }\n\n    server {\n        listen 127.0.0.1;\n\n        location /upstream_conf {\n            upstream_conf;\n        }\n\n        location /status {\n            status;\n        }\n\n        location = /status.html {\n        }\n    }\n}\n\nstream {\n    upstream backend {\n        zone stream_backend 64k;\n\n        server backend1.example.com:12345 weight=5;\n        server backend2.example.com:12345;\n    }\n\n    server {\n        listen      127.0.0.1:12345;\n        proxy_pass  backend;\n        status_zone server_backend;\n        health_check;\n    }\n}\n```\n\nExamples of status requests with this configuration:\n\n``` nginx\nhttp://127.0.0.1/status\nhttp://127.0.0.1/status/nginx_version\nhttp://127.0.0.1/status/caches/cache_backend\nhttp://127.0.0.1/status/upstreams\nhttp://127.0.0.1/status/upstreams/backend\nhttp://127.0.0.1/status/upstreams/backend/peers/1\nhttp://127.0.0.1/status/upstreams/backend/peers/1/weight\nhttp://127.0.0.1/status/stream\nhttp://127.0.0.1/status/stream/upstreams\nhttp://127.0.0.1/status/stream/upstreams/backend\nhttp://127.0.0.1/status/stream/upstreams/backend/peers/1\nhttp://127.0.0.1/status/stream/upstreams/backend/peers/1/weight\n```\n\nThe simple monitoring page is shipped with this distribution, accessible as “`/status.html`” in the default configuration. It requires the locations “`/status`” and “`/status.html`” to be configured as shown above.\n\n#### Directives\n\n|          |                 |\n|----------|-----------------|\n| Syntax:  | **`status`**`;` |\n| Default: | —               |\n| Context: | `location`      |\n\nThe status information will be accessible from the surrounding location. Access to this location should be [limited](ngx_http_core_module#satisfy).\n\n|          |                                                                           |\n|----------|---------------------------------------------------------------------------|\n| Syntax:  | **`status_format`**` json;` **`status_format`**` jsonp [`*`callback`*`];` |\n| Default: | `status_format json;`                                                     |\n| Context: | `http`, `server`, `location`                                              |\n\nBy default, status information is output in the JSON format.\n\nAlternatively, data may be output as JSONP. The *`callback`* parameter specifies the name of a callback function. Parameter value can contain variables. If parameter is omitted, or the computed value is an empty string, then “`ngx_status_jsonp_callback`” is used.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`status_zone`**` `*`zone`*`;` |\n| Default: | —                               |\n| Context: | `server`                        |\n\nEnables collection of virtual [http](ngx_http_core_module#server) or [stream](../stream/ngx_stream_core_module#server) (1.7.11) server status information in the specified *`zone`*. Several servers may share the same zone.\n\n#### Data\n\nThe following status information is provided:\n\n`version`  \nVersion of the provided data set. The current version is 8.\n\n`nginx_version`  \nVersion of nginx.\n\n`nginx_build`  \nName of nginx build.\n\n`address`  \nThe address of the server that accepted status request.\n\n`generation`  \nThe total number of configuration [reloads](../control#reconfiguration).\n\n`load_timestamp`  \nTime of the last reload of configuration, in milliseconds since Epoch.\n\n`timestamp`  \nCurrent time in milliseconds since Epoch.\n\n`pid`  \nThe ID of the worker process that handled status request.\n\n`ppid`  \nThe ID of the master process that started the [worker process](#pid).\n\n`processes`  \n`respawned`  \nThe total number of abnormally terminated and respawned child processes.\n\n`connections`  \n`accepted`  \nThe total number of accepted client connections.\n\n`dropped`  \nThe total number of dropped client connections.\n\n`active`  \nThe current number of active client connections.\n\n`idle`  \nThe current number of idle client connections.\n\n`ssl`  \n`handshakes`  \nThe total number of successful SSL handshakes.\n\n`handshakes_failed`  \nThe total number of failed SSL handshakes.\n\n`session_reuses`  \nThe total number of session reuses during SSL handshake.\n\n`requests`  \n`total`  \nThe total number of client requests.\n\n`current`  \nThe current number of client requests.\n\n`server_zones`  \nFor each [status_zone](#status_zone):\n\n`processing`  \nThe number of client requests that are currently being processed.\n\n`requests`  \nThe total number of client requests received from clients.\n\n`responses`  \n`total`  \nThe total number of responses sent to clients.\n\n`1xx`, `2xx`, `3xx`, `4xx`, `5xx`  \nThe number of responses with status codes 1xx, 2xx, 3xx, 4xx, and 5xx.\n\n`discarded`  \nThe total number of requests completed without sending a response.\n\n`received`  \nThe total number of bytes received from clients.\n\n`sent`  \nThe total number of bytes sent to clients.\n\n`slabs`  \nFor each shared memory zone that uses slab allocator:\n\n`pages`  \n`used`  \nThe current number of used memory pages.\n\n`free`  \nThe current number of free memory pages.\n\n`slots`  \nFor each memory slot size (8, 16, 32, 64, 128, etc.) the following data are provided:\n\n`used`  \nThe current number of used memory slots.\n\n`free`  \nThe current number of free memory slots.\n\n`reqs`  \nThe total number of attempts to allocate memory of specified size.\n\n`fails`  \nThe number of unsuccessful attempts to allocate memory of specified size.\n\n`upstreams`  \nFor each [dynamically configurable](ngx_http_upstream_module#zone) [group](ngx_http_upstream_module#upstream), the following data are provided:\n\n`peers`  \nFor each [server](ngx_http_upstream_module#server), the following data are provided:\n\n`id`  \nThe ID of the server.\n\n`server`  \nAn [address](ngx_http_upstream_module#server) of the server.\n\n`name`  \nThe name of the server specified in the [server](ngx_http_upstream_module#server) directive.\n\n`service`  \nThe [service](ngx_http_upstream_module#service) parameter value of the [server](ngx_http_upstream_module#server) directive.\n\n`backup`  \nA boolean value indicating whether the server is a [backup](ngx_http_upstream_module#backup) server.\n\n`weight`  \n[Weight](ngx_http_upstream_module#weight) of the server.\n\n`state`  \nCurrent state, which may be one of “`up`”, “`draining`”, “`down`”, “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`active`  \nThe current number of active connections.\n\n`max_conns`  \nThe [max_conns](ngx_http_upstream_module#max_conns) limit for the server.\n\n`requests`  \nThe total number of client requests forwarded to this server.\n\n`responses`  \n`total`  \nThe total number of responses obtained from this server.\n\n`1xx`, `2xx`, `3xx`, `4xx`, `5xx`  \nThe number of responses with status codes 1xx, 2xx, 3xx, 4xx, and 5xx.\n\n`sent`  \nThe total number of bytes sent to this server.\n\n`received`  \nThe total number of bytes received from this server.\n\n`fails`  \nThe total number of unsuccessful attempts to communicate with the server.\n\n`unavail`  \nHow many times the server became unavailable for client requests (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](ngx_http_upstream_module#max_fails) threshold.\n\n`health_checks`  \n`checks`  \nThe total number of [health check](ngx_http_upstream_hc_module#health_check) requests made.\n\n`fails`  \nThe number of failed health checks.\n\n`unhealthy`  \nHow many times the server became unhealthy (state “`unhealthy`”).\n\n`last_passed`  \nBoolean indicating if the last health check request was successful and passed [tests](ngx_http_upstream_hc_module#match).\n\n`downtime`  \nTotal time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n\n`downstart`  \nThe time (in milliseconds since Epoch) when the server became “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`selected`  \nThe time (in milliseconds since Epoch) when the server was last selected to process a request (1.7.5).\n\n`header_time`  \nThe average time to get the [response header](ngx_http_upstream_module#var_upstream_header_time) from the server (1.7.10). Prior to version 1.11.6, the field was available only when using the [least_time](ngx_http_upstream_module#least_time) load balancing method.\n\n`response_time`  \nThe average time to get the [full response](ngx_http_upstream_module#var_upstream_response_time) from the server (1.7.10). Prior to version 1.11.6, the field was available only when using the [least_time](ngx_http_upstream_module#least_time) load balancing method.\n\n`keepalive`  \nThe current number of idle [keepalive](ngx_http_upstream_module#keepalive) connections.\n\n`zombies`  \nThe current number of servers removed from the group but still processing active client requests.\n\n`zone`  \nThe name of the shared memory [zone](ngx_http_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n`queue`  \nFor the requests [queue](ngx_http_upstream_module#queue), the following data are provided:\n\n`size`  \nThe current number of requests in the queue.\n\n`max_size`  \nThe maximum number of requests that can be in the queue at the same time.\n\n`overflows`  \nThe total number of requests rejected due to the queue overflow.\n\n`caches`  \nFor each cache (configured by [proxy_cache_path](ngx_http_proxy_module#proxy_cache_path) and the likes):\n\n`size`  \nThe current size of the cache.\n\n`max_size`  \nThe limit on the maximum size of the cache specified in the configuration.\n\n`cold`  \nA boolean value indicating whether the “cache loader” process is still loading data from disk into the cache.\n\n`hit`, `stale`, `updating`, `revalidated`  \n`responses`  \nThe total number of responses read from the cache (hits, or stale responses due to [proxy_cache_use_stale](ngx_http_proxy_module#proxy_cache_use_stale) and the likes).\n\n`bytes`  \nThe total number of bytes read from the cache.\n\n`miss`, `expired`, `bypass`  \n`responses`  \nThe total number of responses not taken from the cache (misses, expires, or bypasses due to [proxy_cache_bypass](ngx_http_proxy_module#proxy_cache_bypass) and the likes).\n\n`bytes`  \nThe total number of bytes read from the proxied server.\n\n`responses_written`  \nThe total number of responses written to the cache.\n\n`bytes_written`  \nThe total number of bytes written to the cache.\n\n`stream`  \n`server_zones`  \nFor each [status_zone](#status_zone):\n\n`processing`  \nThe number of client connections that are currently being processed.\n\n`connections`  \nThe total number of connections accepted from clients.\n\n`sessions`  \n`total`  \nThe total number of completed client sessions.\n\n`2xx`, `4xx`, `5xx`  \nThe number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) 2xx, 4xx, or 5xx.\n\n`discarded`  \nThe total number of connections completed without creating a session.\n\n`received`  \nThe total number of bytes received from clients.\n\n`sent`  \nThe total number of bytes sent to clients.\n\n`upstreams`  \nFor each [dynamically configurable](../stream/ngx_stream_upstream_module#zone) [group](../stream/ngx_stream_upstream_module#upstream), the following data are provided:\n\n`peers`  \nFor each [server](../stream/ngx_stream_upstream_module#server) the following data are provided:\n\n`id`  \nThe ID of the server.\n\n`server`  \nAn [address](../stream/ngx_stream_upstream_module#server) of the server.\n\n`name`  \nThe name of the server specified in the [server](../stream/ngx_stream_upstream_module#server) directive.\n\n`service`  \nThe [service](../stream/ngx_stream_upstream_module#service) parameter value of the [server](../stream/ngx_stream_upstream_module#server) directive.\n\n`backup`  \nA boolean value indicating whether the server is a [backup](../stream/ngx_stream_upstream_module#backup) server.\n\n`weight`  \n[Weight](../stream/ngx_stream_upstream_module#weight) of the server.\n\n`state`  \nCurrent state, which may be one of “`up`”, “`down`”, “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`active`  \nThe current number of connections.\n\n`max_conns`  \nThe [max_conns](../stream/ngx_stream_upstream_module#max_conns) limit for the server.\n\n`connections`  \nThe total number of client connections forwarded to this server.\n\n`connect_time`  \nThe average time to connect to the upstream server. Prior to version 1.11.6, the field was available only when using the [least_time](../stream/ngx_stream_upstream_module#least_time) load balancing method.\n\n`first_byte_time`  \nThe average time to receive the first byte of data. Prior to version 1.11.6, the field was available only when using the [least_time](../stream/ngx_stream_upstream_module#least_time) load balancing method.\n\n`response_time`  \nThe average time to receive the last byte of data. Prior to version 1.11.6, the field was available only when using the [least_time](../stream/ngx_stream_upstream_module#least_time) load balancing method.\n\n`sent`  \nThe total number of bytes sent to this server.\n\n`received`  \nThe total number of bytes received from this server.\n\n`fails`  \nThe total number of unsuccessful attempts to communicate with the server.\n\n`unavail`  \nHow many times the server became unavailable for client connections (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](../stream/ngx_stream_upstream_module#max_fails) threshold.\n\n`health_checks`  \n`checks`  \nThe total number of [health check](../stream/ngx_stream_upstream_hc_module#health_check) requests made.\n\n`fails`  \nThe number of failed health checks.\n\n`unhealthy`  \nHow many times the server became unhealthy (state “`unhealthy`”).\n\n`last_passed`  \nBoolean indicating if the last health check request was successful and passed [tests](../stream/ngx_stream_upstream_hc_module#match).\n\n`downtime`  \nTotal time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n\n`downstart`  \nThe time (in milliseconds since Epoch) when the server became “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`selected`  \nThe time (in milliseconds since Epoch) when the server was last selected to process a connection.\n\n`zombies`  \nThe current number of servers removed from the group but still processing active client connections.\n\n`zone`  \nThe name of the shared memory [zone](../stream/ngx_stream_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n#### Compatibility\n\n- The [zone](#zone) field in [http](#upstreams) and [stream](#stream_upstreams) upstreams was added in [version](#version) 8.\n- The [slabs](#slabs) status data were added in [version](#version) 8.\n- The [checking](#state) state was added in [version](#version) 8.\n- The [name](#name) and [service](#service) fields in [http](#upstreams) and [stream](#stream_upstreams) upstreams were added in [version](#version) 8.\n- The [nginx_build](#nginx_build) and [ppid](#ppid) fields were added in [version](#version) 8.\n- The [sessions](#sessions) status data and the [discarded](#stream_discarded) field in stream [server_zones](#stream_server_zones) were added in [version](#version) 7.\n- The [zombies](#zombies) field was moved from nginx [debug](../debugging_log) version in [version](#version) 6.\n- The [ssl](#ssl) status data were added in [version](#version) 6.\n- The [discarded](#discarded) field in [server_zones](#server_zones) was added in [version](#version) 6.\n- The [queue](#queue) status data were added in [version](#version) 6.\n- The [pid](#pid) field was added in [version](#version) 6.\n- The list of servers in [upstreams](#upstreams) was moved into [peers](#peers) in [version](#version) 6.\n- The `keepalive` field of an upstream server was removed in [version](#version) 5.\n- The [stream](#stream) status data were added in [version](#version) 5.\n- The [generation](#generation) field was added in [version](#version) 5.\n- The [respawned](#respawned) field in [processes](#processes) was added in [version](#version) 5.\n- The [header_time](#header_time) and [response_time](#response_time) fields in [upstreams](#upstreams) were added in [version](#version) 5.\n- The [selected](#selected) field in [upstreams](#upstreams) was added in [version](#version) 4.\n- The [draining](#state) state in [upstreams](#upstreams) was added in [version](#version) 4.\n- The [id](#id) and [max_conns](#max_conns) fields in [upstreams](#upstreams) were added in [version](#version) 3.\n- The `revalidated` field in [caches](#caches) was added in [version](#version) 3.\n- The [server_zones](#server_zones), [caches](#caches), and [load_timestamp](#load_timestamp) status data were added in [version](#version) 2.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_status_module.html](https://nginx.org/en/docs/http/ngx_http_status_module.html)"
- name: ngx_http_stub_status_module
  id: http/ngx_http_stub_status_module
  summary: The ngx_http_stub_status_module module provides access to basic status information
  description: "# Module ngx_http_stub_status_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [stub_status](#stub_status)\n- [Data](#data)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_stub_status_module` module provides access to basic status information.\n\nThis module is not built by default, it should be enabled with the `--with-http_stub_status_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlocation = /basic_status {\n    stub_status;\n}\n```\n\nThis configuration creates a simple web page with basic status data which may look like as follows:\n\n``` nginx\nActive connections: 291\nserver accepts handled requests\n 16630948 16630948 31070465\nReading: 6 Writing: 179 Waiting: 106\n```\n\n#### Directives\n\n|          |                      |\n|----------|----------------------|\n| Syntax:  | **`stub_status`**`;` |\n| Default: | —                    |\n| Context: | `server`, `location` |\n\nThe basic status information will be accessible from the surrounding location.\n\nIn versions prior to 1.7.5, the directive syntax required an arbitrary argument, for example, “`stub_status on`”.\n\n#### Data\n\nThe following status information is provided:\n\n`Active connections`  \nThe current number of active client connections including `Waiting` connections.\n\n`accepts`  \nThe total number of accepted client connections.\n\n`handled`  \nThe total number of handled connections. Generally, the parameter value is the same as `accepts` unless some resource limits have been reached (for example, the [worker_connections](../ngx_core_module#worker_connections) limit).\n\n`requests`  \nThe total number of client requests.\n\n`Reading`  \nThe current number of connections where nginx is reading the request header.\n\n`Writing`  \nThe current number of connections where nginx is writing the response back to the client.\n\n`Waiting`  \nThe current number of idle client connections waiting for a request.\n\n#### Embedded Variables\n\nThe `ngx_http_stub_status_module` module supports the following embedded variables (1.3.14):\n\n`$connections_active`  \nsame as the `Active connections` value;\n\n`$connections_reading`  \nsame as the `Reading` value;\n\n`$connections_writing`  \nsame as the `Writing` value;\n\n`$connections_waiting`  \nsame as the `Waiting` value.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_stub_status_module.html](https://nginx.org/en/docs/http/ngx_http_stub_status_module.html)"
- name: ngx_http_sub_module
  id: http/ngx_http_sub_module
  summary: The ngx_http_sub_module module is a filter that modifies a response by replacing one specified string by another
  description: "# Module ngx_http_sub_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [sub_filter](#sub_filter)\n- [sub_filter_last_modified](#sub_filter_last_modified)\n- [sub_filter_once](#sub_filter_once)\n- [sub_filter_types](#sub_filter_types)\n\nThe `ngx_http_sub_module` module is a filter that modifies a response by replacing one specified string by another.\n\nThis module is not built by default, it should be enabled with the `--with-http_sub_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    sub_filter '<a href=\"http://127.0.0.1:8080/'  '<a href=\"https://$host/';\n    sub_filter '<img src=\"http://127.0.0.1:8080/' '<img src=\"https://$host/';\n    sub_filter_once on;\n}\n```\n\n#### Directives\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`sub_filter`**` `*`string`*` `*`replacement`*`;` |\n| Default: | —                                                  |\n| Context: | `http`, `server`, `location`                       |\n\nSets a string to replace and a replacement string. The string to replace is matched ignoring the case. The string to replace (1.9.4) and replacement string can contain variables. Several `sub_filter` directives can be specified on the same configuration level (1.9.4). These directives are inherited from the previous configuration level if and only if there are no `sub_filter` directives defined on the current level.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`sub_filter_last_modified`**` on | off;` |\n| Default: | `sub_filter_last_modified off;`            |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 1.5.1.\n\nAllows preserving the “Last-Modified” header field from the original response during replacement to facilitate response caching.\n\nBy default, the header field is removed as contents of the response are modified during processing.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`sub_filter_once`**` on | off;` |\n| Default: | `sub_filter_once on;`             |\n| Context: | `http`, `server`, `location`      |\n\nIndicates whether to look for each string to replace once or repeatedly.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`sub_filter_types`**` `*`mime-type`*` ...;` |\n| Default: | `sub_filter_types text/html;`                 |\n| Context: | `http`, `server`, `location`                  |\n\nEnables string replacement in responses with the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_sub_module.html](https://nginx.org/en/docs/http/ngx_http_sub_module.html)"
- name: ngx_http_upstream_conf_module
  id: http/ngx_http_upstream_conf_module
  summary: The ngx_http_upstream_conf_module module allows configuring upstream server groups on-the-fly via a simple HTTP interface without the need of restarting nginx
  description: "# Module ngx_http_upstream_conf_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [upstream_conf](#upstream_conf)\n\nThe `ngx_http_upstream_conf_module` module allows configuring upstream server groups on-the-fly via a simple HTTP interface without the need of restarting nginx. The [http](ngx_http_upstream_module#zone) or [stream](../stream/ngx_stream_upstream_module#zone) server group must reside in the shared memory.\n\nThis module was available as part of our [commercial subscription](https://www.f5.com/products/nginx) until 1.13.10. It was superseded by the [ngx_http_api_module](ngx_http_api_module) module in 1.13.3.\n\n#### Example Configuration\n\n``` nginx\nupstream backend {\n    zone upstream_backend 64k;\n\n    ...\n}\n\nserver {\n    location /upstream_conf {\n        upstream_conf;\n        allow 127.0.0.1;\n        deny all;\n    }\n}\n```\n\n#### Directives\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`upstream_conf`**`;` |\n| Default: | —                      |\n| Context: | `location`             |\n\nTurns on the HTTP interface of upstream configuration in the surrounding location. Access to this location should be [limited](ngx_http_core_module#satisfy).\n\nConfiguration commands can be used to:\n\n- view the group configuration;\n- view, modify, or remove a server;\n- add a new server.\n\nSince addresses in a group are not required to be unique, specific servers in a group are referenced by their IDs. IDs are assigned automatically and shown when adding a new server or viewing the group configuration.\n\nA configuration command consists of parameters passed as request arguments, for example:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend\n```\n\nThe following parameters are supported:\n\n`stream=`  \nSelects a [stream](../stream/ngx_stream_upstream_module) upstream server group. Without this parameter, selects an [http](ngx_http_upstream_module) upstream server group.\n\n`upstream=`*`name`*  \nSelects a group to work with. This parameter is mandatory.\n\n`id=`*`number`*  \nSelects a server for viewing, modifying, or removing.\n\n`remove=`  \nRemoves a server from the group.\n\n`add=`  \nAdds a new server to the group.\n\n`backup=`  \nRequired to add a backup server.\n\nBefore version 1.7.2, `backup=` was also required to view, modify, or remove existing backup servers.\n\n`server=`*`address`*  \nSame as the “`address`” parameter of the [http](ngx_http_upstream_module#server) or [stream](../stream/ngx_stream_upstream_module#server) upstream server.\n\nWhen adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx (1.7.2). This requires the “`resolver`” directive in the [http](ngx_http_core_module#resolver) or [stream](../stream/ngx_stream_core_module#resolver) block. See also the “`resolve`” parameter of the [http](ngx_http_upstream_module#resolve) or [stream](../stream/ngx_stream_upstream_module#resolve) upstream server.\n\n`service=`*`name`*  \nSame as the “`service`” parameter of the [http](ngx_http_upstream_module#service) or [stream](../stream/ngx_stream_upstream_module#service) upstream server (1.9.13).\n\n`weight=`*`number`*  \nSame as the “`weight`” parameter of the [http](ngx_http_upstream_module#weight) or [stream](../stream/ngx_stream_upstream_module#weight) upstream server.\n\n`max_conns=`*`number`*  \nSame as the “`max_conns`” parameter of the [http](ngx_http_upstream_module#max_conns) or [stream](../stream/ngx_stream_upstream_module#max_conns) upstream server.\n\n`max_fails=`*`number`*  \nSame as the “`max_fails`” parameter of the [http](ngx_http_upstream_module#max_fails) or [stream](../stream/ngx_stream_upstream_module#max_fails) upstream server.\n\n`fail_timeout=`*`time`*  \nSame as the “`fail_timeout`” parameter of the [http](ngx_http_upstream_module#fail_timeout) or [stream](../stream/ngx_stream_upstream_module#fail_timeout) upstream server.\n\n`slow_start=`*`time`*  \nSame as the “`slow_start`” parameter of the [http](ngx_http_upstream_module#slow_start) or [stream](../stream/ngx_stream_upstream_module#slow_start) upstream server.\n\n`down=`  \nSame as the “`down`” parameter of the [http](ngx_http_upstream_module#down) or [stream](../stream/ngx_stream_upstream_module#down) upstream server.\n\n`drain=`  \nPuts the [http](ngx_http_upstream_module) upstream server into the “draining” mode (1.7.5). In this mode, only requests [bound](ngx_http_upstream_module#sticky) to the server will be proxied to it.\n\n`up=`  \nThe opposite of the “`down`” parameter of the [http](ngx_http_upstream_module#down) or [stream](../stream/ngx_stream_upstream_module#down) upstream server.\n\n`route=`*`string`*  \nSame as the “`route`” parameter of the [http](ngx_http_upstream_module#route) upstream server.\n\nThe first three parameters select an object. This can be either the whole http or stream upstream server group, or a specific server. Without other parameters, the configuration of the selected group or server is shown.\n\nFor example, to view the configuration of the whole group, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend\n```\n\nTo view the configuration of a specific server, also specify its ID:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42\n```\n\nTo add a new server, specify its address in the “`server=`” parameter. Without other parameters specified, a server will be added with other parameters set to their default values (see the [http](ngx_http_upstream_module#server) or [stream](../stream/ngx_stream_upstream_module#server) “`server`” directive).\n\nFor example, to add a new primary server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?add=&upstream=backend&server=127.0.0.1:8080\n```\n\nTo add a new backup server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?add=&upstream=backend&backup=&server=127.0.0.1:8080\n```\n\nTo add a new primary server, set its parameters to non-default values and mark it as “`down`”, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?add=&upstream=backend&server=127.0.0.1:8080&weight=2&down=\n```\n\nTo remove a server, specify its ID:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?remove=&upstream=backend&id=42\n```\n\nTo mark an existing server as “`down`”, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42&down=\n```\n\nTo modify the address of an existing server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42&server=192.0.2.3:8123\n```\n\nTo modify other parameters of an existing server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42&max_fails=3&weight=4\n```\n\nThe above examples are for an [http](ngx_http_upstream_module) upstream server group. Similar examples for a [stream](../stream/ngx_stream_upstream_module) upstream server group require the “`stream=`” parameter.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html](https://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html)"
- name: ngx_http_upstream_hc_module
  id: http/ngx_http_upstream_hc_module
  summary: The ngx_http_upstream_hc_module module allows enabling periodic health checks of the servers in a group referenced in the surrounding location
  description: "# Module ngx_http_upstream_hc_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [health_check](#health_check)\n- [match](#match)\n\nThe `ngx_http_upstream_hc_module` module allows enabling periodic health checks of the servers in a [group](ngx_http_upstream_module#upstream) referenced in the surrounding location. The server group must reside in the [shared memory](ngx_http_upstream_module#zone).\n\nIf a health check fails, the server will be considered unhealthy. If several health checks are defined for the same group of servers, a single failure of any check will make the corresponding server be considered unhealthy. Client requests are not passed to unhealthy servers and servers in the “checking” state.\n\nPlease note that most of the variables will have empty values when used with health checks.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nupstream dynamic {\n    zone upstream_dynamic 64k;\n\n    server backend1.example.com      weight=5;\n    server backend2.example.com:8080 fail_timeout=5s slow_start=30s;\n    server 192.0.2.1                 max_fails=3;\n\n    server backup1.example.com:8080  backup;\n    server backup2.example.com:8080  backup;\n}\n\nserver {\n    location / {\n        proxy_pass http://dynamic;\n        health_check;\n    }\n}\n```\n\nWith this configuration, nginx will send “`/`” requests to each server in the `backend` group every five seconds. If any communication error or timeout occurs, or a proxied server responds with the status code other than 2xx or 3xx, the health check will fail, and the server will be considered unhealthy.\n\nHealth checks can be configured to test the status code of a response, presence of certain header fields and their values, and the body contents. Tests are configured separately using the [match](#match) directive and referenced in the `match` parameter of the [health_check](#health_check) directive:\n\n``` nginx\nhttp {\n    server {\n    ...\n        location / {\n            proxy_pass http://backend;\n            health_check match=welcome;\n        }\n    }\n\n    match welcome {\n        status 200;\n        header Content-Type = text/html;\n        body ~ \"Welcome to nginx!\";\n    }\n}\n```\n\nThis configuration shows that in order for a health check to pass, the response to a health check request should succeed, have status 200, and contain “`Welcome to nginx!`” in the body.\n\n#### Directives\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`health_check`**` [`*`parameters`*`];` |\n| Default: | —                                        |\n| Context: | `location`                               |\n\nEnables periodic health checks of the servers in a [group](ngx_http_upstream_module#upstream) referenced in the surrounding location.\n\nThe following optional parameters are supported:\n\n`interval`=*`time`*  \nsets the interval between two consecutive health checks, by default, 5 seconds.\n\n`jitter`=*`time`*  \nsets the time within which each health check will be randomly delayed, by default, there is no delay.\n\n`fails`=*`number`*  \nsets the number of consecutive failed health checks of a particular server after which this server will be considered unhealthy, by default, 1.\n\n`passes`=*`number`*  \nsets the number of consecutive passed health checks of a particular server after which the server will be considered healthy, by default, 1.\n\n`uri`=*`uri`*  \ndefines the URI used in health check requests, by default, “`/`”.\n\n`mandatory` \\[`persistent`\\]  \nsets the initial “checking” state for a server until the first health check is completed (1.11.7). Client requests are not passed to servers in the “checking” state. If the parameter is not specified, the server will be initially considered healthy.\n\nThe `persistent` parameter (1.19.7) sets the initial “up” state for a server after reload if the server was considered healthy before reload.\n\n`match`=*`name`*  \nspecifies the `match` block configuring the tests that a response should pass in order for a health check to pass. By default, the response should have status code 2xx or 3xx.\n\n`port`=*`number`*  \ndefines the port used when connecting to a server to perform a health check (1.9.7). By default, equals the [server](ngx_http_upstream_module#server) port.\n\n`type`=`grpc` \\[`grpc_service`=*`name`*\\] \\[`grpc_status`=*`code`*\\]  \nenables periodic [health checks](https://github.com/grpc/grpc/blob/master/doc/health-checking.md#grpc-health-checking-protocol) of a gRPC server or a particular gRPC service specified with the optional `grpc_service` parameter (1.19.5). If the server does not support the gRPC Health Checking Protocol, the optional `grpc_status` parameter can be used to specify non-zero gRPC [status](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md#status-codes-and-their-use-in-grpc) (for example, status code “`12`” / “`UNIMPLEMENTED`”) that will be treated as healthy:\n\n``` nginx\nhealth_check mandatory type=grpc grpc_status=12;\n```\n\nThe `type`=`grpc` parameter must be specified after all other directive parameters, `grpc_service` and `grpc_status` must follow `type`=`grpc`. The parameter is not compatible with [`uri`](#health_check_uri) or [`match`](#health_check_match) parameters.\n\n`keepalive_time`=*`time`*  \nenables [keepalive](ngx_http_upstream_module#keepalive) connections for health checks and specifies the time during which requests can be processed through one keepalive connection (1.21.7). By default keepalive connections are disabled.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`match`**` `*`name`*` { ... }` |\n| Default: | —                                |\n| Context: | `http`                           |\n\nDefines the named test set used to verify responses to health check requests.\n\nThe following items can be tested in a response:\n\n`status 200;`  \nstatus is 200\n\n`status ! 500;`  \nstatus is not 500\n\n`status 200 204;`  \nstatus is 200 or 204\n\n`status ! 301 302;`  \nstatus is neither 301 nor 302\n\n`status 200-399;`  \nstatus is in the range from 200 to 399\n\n`status ! 400-599;`  \nstatus is not in the range from 400 to 599\n\n`status 301-303 307;`  \nstatus is either 301, 302, 303, or 307\n\n`header Content-Type = text/html;`  \nheader contains “Content-Type” with value `text/html`\n\n`header Content-Type != text/html;`  \nheader contains “Content-Type” with value other than `text/html`\n\n`header Connection ~ close;`  \nheader contains “Connection” with value matching regular expression `close`\n\n`header Connection !~ close;`  \nheader contains “Connection” with value not matching regular expression `close`\n\n`header Host;`  \nheader contains “Host”\n\n`header ! X-Accel-Redirect;`  \nheader lacks “X-Accel-Redirect”\n\n&nbsp;\n\n`body ~ \"Welcome to nginx!\";`  \nbody matches regular expression “`Welcome to nginx!`”\n\n`body !~ \"Welcome to nginx!\";`  \nbody does not match regular expression “`Welcome to nginx!`”\n\n&nbsp;\n\n`require` *`$variable`* `...;`  \nall specified variables are not empty and not equal to “0” (1.15.9).\n\nIf several tests are specified, the response matches only if it matches all tests.\n\nOnly the first 256k of the response body are examined.\n\nExamples:\n\n``` nginx\n# status is 200, content type is \"text/html\",\n# and body contains \"Welcome to nginx!\"\nmatch welcome {\n    status 200;\n    header Content-Type = text/html;\n    body ~ \"Welcome to nginx!\";\n}\n```\n\n``` nginx\n# status is not one of 301, 302, 303, or 307, and header does not have \"Refresh:\"\nmatch not_redirect {\n    status ! 301-303 307;\n    header ! Refresh;\n}\n```\n\n``` nginx\n# status ok and not in maintenance mode\nmatch server_ok {\n    status 200-399;\n    body !~ \"maintenance mode\";\n}\n```\n\n``` nginx\n# status is 200 or 204\nmap $upstream_status $good_status {\n    200 1;\n    204 1;\n}\n\nmatch server_ok {\n    require $good_status;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_upstream_hc_module.html](https://nginx.org/en/docs/http/ngx_http_upstream_hc_module.html)"
- name: ngx_http_upstream_module
  id: http/ngx_http_upstream_module
  summary: The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass, and grpc_pass directives
  description: "# Module ngx_http_upstream_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [upstream](#upstream)\n- [server](#server)\n- [zone](#zone)\n- [state](#state)\n- [hash](#hash)\n- [ip_hash](#ip_hash)\n- [keepalive](#keepalive)\n- [keepalive_requests](#keepalive_requests)\n- [keepalive_time](#keepalive_time)\n- [keepalive_timeout](#keepalive_timeout)\n- [ntlm](#ntlm)\n- [least_conn](#least_conn)\n- [least_time](#least_time)\n- [queue](#queue)\n- [random](#random)\n- [resolver](#resolver)\n- [resolver_timeout](#resolver_timeout)\n- [sticky](#sticky)\n- [sticky_cookie_insert](#sticky_cookie_insert)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_upstream_module` module is used to define groups of servers that can be referenced by the [proxy_pass](ngx_http_proxy_module#proxy_pass), [fastcgi_pass](ngx_http_fastcgi_module#fastcgi_pass), [uwsgi_pass](ngx_http_uwsgi_module#uwsgi_pass), [scgi_pass](ngx_http_scgi_module#scgi_pass), [memcached_pass](ngx_http_memcached_module#memcached_pass), and [grpc_pass](ngx_http_grpc_module#grpc_pass) directives.\n\n#### Example Configuration\n\n``` nginx\nupstream backend {\n    server backend1.example.com       weight=5;\n    server backend2.example.com:8080;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com:8080   backup;\n    server backup2.example.com:8080   backup;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n```\n\nDynamically configurable group with periodic [health checks](ngx_http_upstream_hc_module) is available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n``` nginx\nresolver 10.0.0.1;\n\nupstream dynamic {\n    zone upstream_dynamic 64k;\n\n    server backend1.example.com      weight=5;\n    server backend2.example.com:8080 fail_timeout=5s slow_start=30s;\n    server 192.0.2.1                 max_fails=3;\n    server backend3.example.com      resolve;\n    server backend4.example.com      service=http resolve;\n\n    server backup1.example.com:8080  backup;\n    server backup2.example.com:8080  backup;\n}\n\nserver {\n    location / {\n        proxy_pass http://dynamic;\n        health_check;\n    }\n}\n```\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`upstream`**` `*`name`*` { ... }` |\n| Default: | —                                   |\n| Context: | `http`                              |\n\nDefines a group of servers. Servers can listen on different ports. In addition, servers listening on TCP and UNIX-domain sockets can be mixed.\n\nExample:\n\n``` nginx\nupstream backend {\n    server backend1.example.com weight=5;\n    server 127.0.0.1:8080       max_fails=3 fail_timeout=30s;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com  backup;\n}\n```\n\nBy default, requests are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 requests will be distributed as follows: 5 requests go to `backend1.example.com` and one request to each of the second and third servers. If an error occurs during communication with a server, the request will be passed to the next server, and so on until all of the functioning servers will be tried. If a successful response could not be obtained from any of the servers, the client will receive the result of the communication with the last server.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`server`**` `*`address`*` [`*`parameters`*`];` |\n| Default: | —                                                |\n| Context: | `upstream`                                       |\n\nDefines the *`address`* and other *`parameters`* of a server. The address can be specified as a domain name or IP address, with an optional port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. If a port is not specified, the port 80 is used. A domain name that resolves to several IP addresses defines multiple servers at once.\n\nThe following parameters can be defined:\n\n`weight`=*`number`*  \nsets the weight of the server, by default, 1.\n\n`max_conns`=*`number`*  \nlimits the maximum *`number`* of simultaneous active connections to the proxied server (1.11.5). Default value is zero, meaning there is no limit. If the server group does not reside in the [shared memory](#zone), the limitation works per each worker process.\n\nIf [idle keepalive](#keepalive) connections, multiple [workers](../ngx_core_module#worker_processes), and the [shared memory](#zone) are enabled, the total number of active and idle connections to the proxied server may exceed the `max_conns` value.\n\nSince version 1.5.9 and prior to version 1.11.5, this parameter was available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n`max_fails`=*`number`*  \nsets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the `fail_timeout` parameter to consider the server unavailable for a duration also set by the `fail_timeout` parameter. By default, the number of unsuccessful attempts is set to 1. The zero value disables the accounting of attempts. What is considered an unsuccessful attempt is defined by the [proxy_next_upstream](ngx_http_proxy_module#proxy_next_upstream), [fastcgi_next_upstream](ngx_http_fastcgi_module#fastcgi_next_upstream), [uwsgi_next_upstream](ngx_http_uwsgi_module#uwsgi_next_upstream), [scgi_next_upstream](ngx_http_scgi_module#scgi_next_upstream), [memcached_next_upstream](ngx_http_memcached_module#memcached_next_upstream), and [grpc_next_upstream](ngx_http_grpc_module#grpc_next_upstream) directives.\n\n`fail_timeout`=*`time`*  \nsets\n\n- the time during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable;\n- and the period of time the server will be considered unavailable.\n\nBy default, the parameter is set to 10 seconds.\n\n`backup`  \nmarks the server as a backup server. It will be passed requests when the primary servers are unavailable.\n\nThe parameter cannot be used along with the [hash](#hash), [ip_hash](#ip_hash), and [random](#random) load balancing methods.\n\n`down`  \nmarks the server as permanently unavailable.\n\nAdditionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n`resolve`  \nmonitors changes of the IP addresses that correspond to a domain name of the server, and automatically modifies the upstream configuration without the need of restarting nginx (1.5.12). The server group must reside in the [shared memory](#zone).\n\nIn order for this parameter to work, the `resolver` directive must be specified in the [http](ngx_http_core_module#resolver) block or in the corresponding [upstream](#resolver) block.\n\n`route`=*`string`*  \nsets the server route name.\n\n`service`=*`name`*  \nenables resolving of DNS [SRV](https://datatracker.ietf.org/doc/html/rfc2782) records and sets the service *`name`* (1.9.13). In order for this parameter to work, it is necessary to specify the [resolve](#resolve) parameter for the server and specify a hostname without a port number.\n\nIf the service name does not contain a dot (“`.`”), then the [RFC](https://datatracker.ietf.org/doc/html/rfc2782)-compliant name is constructed and the TCP protocol is added to the service prefix. For example, to look up the `_http._tcp.backend.example.com` SRV record, it is necessary to specify the directive:\n\n``` nginx\nserver backend.example.com service=http resolve;\n```\n\nIf the service name contains one or more dots, then the name is constructed by joining the service prefix and the server name. For example, to look up the `_http._tcp.backend.example.com` and `server1.backend.example.com` SRV records, it is necessary to specify the directives:\n\n``` nginx\nserver backend.example.com service=_http._tcp resolve;\nserver example.com service=server1.backend resolve;\n```\n\nHighest-priority SRV records (records with the same lowest-number priority value) are resolved as primary servers, the rest of SRV records are resolved as backup servers. If the [backup](#backup) parameter is specified for the server, high-priority SRV records are resolved as backup servers, the rest of SRV records are ignored.\n\n`slow_start`=*`time`*  \nsets the *`time`* during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes [healthy](ngx_http_upstream_hc_module#health_check), or when the server becomes available after a period of time it was considered [unavailable](#fail_timeout). Default value is zero, i.e. slow start is disabled.\n\nThe parameter cannot be used along with the [hash](#hash), [ip_hash](#ip_hash), and [random](#random) load balancing methods.\n\n`drain`  \nputs the server into the “draining” mode (1.13.6). In this mode, only requests [bound](#sticky) to the server will be proxied to it.\n\nPrior to version 1.13.6, the parameter could be changed only with the [API](ngx_http_api_module) module.\n\nIf there is only a single server in a group, `max_fails`, `fail_timeout` and `slow_start` parameters are ignored, and such a server will never be considered unavailable.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`zone`**` `*`name`*` [`*`size`*`];` |\n| Default: | —                                     |\n| Context: | `upstream`                            |\n\nThis directive appeared in version 1.9.0.\n\nDefines the *`name`* and *`size`* of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes. Several groups may share the same zone. In this case, it is enough to specify the *`size`* only once.\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via the [API](ngx_http_api_module) module (1.13.3).\n\nPrior to version 1.13.3, the configuration was accessible only via a special location handled by [upstream_conf](ngx_http_upstream_conf_module#upstream_conf).\n\n|          |                           |\n|----------|---------------------------|\n| Syntax:  | **`state`**` `*`file`*`;` |\n| Default: | —                         |\n| Context: | `upstream`                |\n\nThis directive appeared in version 1.9.7.\n\nSpecifies a *`file`* that keeps the state of the dynamically configurable group.\n\nExamples:\n\n``` nginx\nstate /var/lib/nginx/state/servers.conf; # path for Linux\nstate /var/db/nginx/state/servers.conf;  # path for FreeBSD\n```\n\nThe state is currently limited to the list of servers with their parameters. The file is read when parsing the configuration and is updated each time the upstream configuration is [changed](ngx_http_api_module#http_upstreams_http_upstream_name_servers_). Changing the file content directly should be avoided. The directive cannot be used along with the [server](#server) directive.\n\nChanges made during [configuration reload](../control#reconfiguration) or [binary upgrade](../control#upgrade) can be lost.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`hash`**` `*`key`*` [consistent];` |\n| Default: | —                                    |\n| Context: | `upstream`                           |\n\nThis directive appeared in version 1.7.2.\n\nSpecifies a load balancing method for a server group where the client-server mapping is based on the hashed *`key`* value. The *`key`* can contain text, variables, and their combinations. Note that adding or removing a server from the group may result in remapping most of the keys to different servers. The method is compatible with the [Cache::Memcached](https://metacpan.org/pod/Cache::Memcached) Perl library.\n\nIf the `consistent` parameter is specified, the [ketama](https://www.metabrew.com/article/libketama-consistent-hashing-algo-memcached-clients) consistent hashing method will be used instead. The method ensures that only a few keys will be remapped to different servers when a server is added to or removed from the group. This helps to achieve a higher cache hit ratio for caching servers. The method is compatible with the [Cache::Memcached::Fast](https://metacpan.org/pod/Cache::Memcached::Fast) Perl library with the *`ketama_points`* parameter set to 160.\n\n|          |                  |\n|----------|------------------|\n| Syntax:  | **`ip_hash`**`;` |\n| Default: | —                |\n| Context: | `upstream`       |\n\nSpecifies that a group should use a load balancing method where requests are distributed between servers based on client IP addresses. The first three octets of the client IPv4 address, or the entire IPv6 address, are used as a hashing key. The method ensures that requests from the same client will always be passed to the same server except when this server is unavailable. In the latter case client requests will be passed to another server. Most probably, it will always be the same server as well.\n\nIPv6 addresses are supported starting from versions 1.3.2 and 1.2.2.\n\nIf one of the servers needs to be temporarily removed, it should be marked with the `down` parameter in order to preserve the current hashing of client IP addresses.\n\nExample:\n\n``` nginx\nupstream backend {\n    ip_hash;\n\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com down;\n    server backend4.example.com;\n}\n```\n\nUntil versions 1.3.1 and 1.2.2, it was not possible to specify a weight for servers using the `ip_hash` load balancing method.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`keepalive`**` `*`connections`*`;` |\n| Default: | —                                    |\n| Context: | `upstream`                           |\n\nThis directive appeared in version 1.1.4.\n\nActivates the cache for connections to upstream servers.\n\nThe *`connections`* parameter sets the maximum number of idle keepalive connections to upstream servers that are preserved in the cache of each worker process. When this number is exceeded, the least recently used connections are closed.\n\nIt should be particularly noted that the `keepalive` directive does not limit the total number of connections to upstream servers that an nginx worker process can open. The *`connections`* parameter should be set to a number small enough to let upstream servers process new incoming connections as well.\n\nWhen using load balancing methods other than the default round-robin method, it is necessary to activate them before the `keepalive` directive.\n\nExample configuration of memcached upstream with keepalive connections:\n\n``` nginx\nupstream memcached_backend {\n    server 127.0.0.1:11211;\n    server 10.0.0.2:11211;\n\n    keepalive 32;\n}\n\nserver {\n    ...\n\n    location /memcached/ {\n        set $memcached_key $uri;\n        memcached_pass memcached_backend;\n    }\n\n}\n```\n\nFor HTTP, the [proxy_http_version](ngx_http_proxy_module#proxy_http_version) directive should be set to “`1.1`” and the “Connection” header field should be cleared:\n\n``` nginx\nupstream http_backend {\n    server 127.0.0.1:8080;\n\n    keepalive 16;\n}\n\nserver {\n    ...\n\n    location /http/ {\n        proxy_pass http://http_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        ...\n    }\n}\n```\n\nAlternatively, HTTP/1.0 persistent connections can be used by passing the “Connection: Keep-Alive” header field to an upstream server, though this method is not recommended.\n\nFor FastCGI servers, it is required to set [fastcgi_keep_conn](ngx_http_fastcgi_module#fastcgi_keep_conn) for keepalive connections to work:\n\n``` nginx\nupstream fastcgi_backend {\n    server 127.0.0.1:9000;\n\n    keepalive 8;\n}\n\nserver {\n    ...\n\n    location /fastcgi/ {\n        fastcgi_pass fastcgi_backend;\n        fastcgi_keep_conn on;\n        ...\n    }\n}\n```\n\nSCGI and uwsgi protocols do not have a notion of keepalive connections.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`keepalive_requests`**` `*`number`*`;` |\n| Default: | `keepalive_requests 1000;`               |\n| Context: | `upstream`                               |\n\nThis directive appeared in version 1.15.3.\n\nSets the maximum number of requests that can be served through one keepalive connection. After the maximum number of requests is made, the connection is closed.\n\nClosing connections periodically is necessary to free per-connection memory allocations. Therefore, using too high maximum number of requests could result in excessive memory usage and not recommended.\n\nPrior to version 1.19.10, the default value was 100.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`keepalive_time`**` `*`time`*`;` |\n| Default: | `keepalive_time 1h;`               |\n| Context: | `upstream`                         |\n\nThis directive appeared in version 1.19.10.\n\nLimits the maximum time during which requests can be processed through one keepalive connection. After this time is reached, the connection is closed following the subsequent request processing.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`keepalive_timeout`**` `*`timeout`*`;` |\n| Default: | `keepalive_timeout 60s;`                 |\n| Context: | `upstream`                               |\n\nThis directive appeared in version 1.15.3.\n\nSets a timeout during which an idle keepalive connection to an upstream server will stay open.\n\n|          |               |\n|----------|---------------|\n| Syntax:  | **`ntlm`**`;` |\n| Default: | —             |\n| Context: | `upstream`    |\n\nThis directive appeared in version 1.9.2.\n\nAllows proxying requests with [NTLM Authentication](https://en.wikipedia.org/wiki/Integrated_Windows_Authentication). The upstream connection is bound to the client connection once the client sends a request with the “Authorization” header field value starting with “`Negotiate`” or “`NTLM`”. Further client requests will be proxied through the same upstream connection, keeping the authentication context.\n\nIn order for NTLM authentication to work, it is necessary to enable keepalive connections to upstream servers. The [proxy_http_version](ngx_http_proxy_module#proxy_http_version) directive should be set to “`1.1`” and the “Connection” header field should be cleared:\n\n``` nginx\nupstream http_backend {\n    server 127.0.0.1:8080;\n\n    ntlm;\n}\n\nserver {\n    ...\n\n    location /http/ {\n        proxy_pass http://http_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        ...\n    }\n}\n```\n\nWhen using load balancer methods other than the default round-robin method, it is necessary to activate them before the `ntlm` directive.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                     |\n|----------|---------------------|\n| Syntax:  | **`least_conn`**`;` |\n| Default: | —                   |\n| Context: | `upstream`          |\n\nThis directive appeared in versions 1.3.1 and 1.2.2.\n\nSpecifies that a group should use a load balancing method where a request is passed to the server with the least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`least_time`**` header | last_byte [inflight];` |\n| Default: | —                                                 |\n| Context: | `upstream`                                        |\n\nThis directive appeared in version 1.7.10.\n\nSpecifies that a group should use a load balancing method where a request is passed to the server with the least average response time and least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.\n\nIf the `header` parameter is specified, time to receive the [response header](#var_upstream_header_time) is used. If the `last_byte` parameter is specified, time to receive the [full response](#var_upstream_response_time) is used. If the `inflight` parameter is specified (1.11.6), incomplete requests are also taken into account.\n\nPrior to version 1.11.6, incomplete requests were taken into account by default.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`queue`**` `*`number`*` [timeout=`*`time`*`];` |\n| Default: | —                                                |\n| Context: | `upstream`                                       |\n\nThis directive appeared in version 1.5.12.\n\nIf an upstream server cannot be selected immediately while processing a request, the request will be placed into the queue. The directive specifies the maximum *`number`* of requests that can be in the queue at the same time. If the queue is filled up, or the server to pass the request to cannot be selected within the time period specified in the `timeout` parameter, the 502 (Bad Gateway) error will be returned to the client.\n\nThe default value of the `timeout` parameter is 60 seconds.\n\nWhen using load balancer methods other than the default round-robin method, it is necessary to activate them before the `queue` directive.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`random`**` [two [`*`method`*`]];` |\n| Default: | —                                    |\n| Context: | `upstream`                           |\n\nThis directive appeared in version 1.15.1.\n\nSpecifies that a group should use a load balancing method where a request is passed to a randomly selected server, taking into account weights of servers.\n\nThe optional `two` parameter instructs nginx to randomly select [two](https://homes.cs.washington.edu/~karlin/papers/balls.pdf) servers and then choose a server using the specified `method`. The default method is `least_conn` which passes a request to a server with the least number of active connections.\n\nThe `least_time` method passes a request to a server with the least average response time and least number of active connections. If `least_time=header` is specified, the time to receive the [response header](#var_upstream_header_time) is used. If `least_time=last_byte` is specified, the time to receive the [full response](#var_upstream_response_time) is used.\n\nThe `least_time` method is available as a part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                                                                                             |\n|----------|-------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`resolver`**` `*`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |\n| Default: | —                                                                                                           |\n| Context: | `upstream`                                                                                                  |\n\nThis directive appeared in version 1.17.5.\n\nConfigures name servers used to resolve names of upstream servers into addresses, for example:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353;\n```\n\nThe address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.\n\nBy default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.\n\nBy default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n```\n\nTo prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.\n\nThe optional `status_zone` parameter enables [collection](ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`resolver_timeout`**` `*`time`*`;` |\n| Default: | `resolver_timeout 30s;`              |\n| Context: | `upstream`                           |\n\nThis directive appeared in version 1.17.5.\n\nSets a timeout for name resolution, for example:\n\n``` nginx\nresolver_timeout 5s;\n```\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                                                                                                                                                                                                                                                                                                                             |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`sticky`**` cookie `*`name`*` [expires=`*`time`*`] [domain=`*`domain`*`] [httponly] [samesite=strict|lax|none|`*`$variable`*`] [secure] [path=`*`path`*`];` **`sticky`**` route `*`$variable`*` ...;` **`sticky`**` learn create=`*`$variable`*` lookup=`*`$variable`*` zone=`*`name`*`:`*`size`*` [timeout=`*`time`*`] [header] [sync];` |\n| Default: | —                                                                                                                                                                                                                                                                                                                                           |\n| Context: | `upstream`                                                                                                                                                                                                                                                                                                                                  |\n\nThis directive appeared in version 1.5.7.\n\nEnables session affinity, which causes requests from the same client to be passed to the same server in a group of servers. Three methods are available:\n\n`cookie`  \nWhen the `cookie` method is used, information about the designated server is passed in an HTTP cookie generated by nginx:\n\n``` nginx\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n\n    sticky cookie srv_id expires=1h domain=.example.com path=/;\n}\n```\n\nA request that comes from a client not yet bound to a particular server is passed to the server selected by the configured balancing method. Further requests with this cookie will be passed to the designated server. If the designated server cannot process a request, the new server is selected as if the client has not been bound yet.\n\nAs a load balancing method always tries to evenly distribute the load considering already bound requests, the server with a higher number of active bound requests has less possibility of getting new unbound requests.\n\nThe first parameter sets the name of the cookie to be set or inspected. The cookie value is a hexadecimal representation of the MD5 hash of the IP address and port, or of the UNIX-domain socket path. However, if the “`route`” parameter of the [server](#server) directive is specified, the cookie value will be the value of the “`route`” parameter:\n\n``` nginx\nupstream backend {\n    server backend1.example.com route=a;\n    server backend2.example.com route=b;\n\n    sticky cookie srv_id expires=1h domain=.example.com path=/;\n}\n```\n\nIn this case, the value of the “`srv_id`” cookie will be either *`a`* or *`b`*.\n\nAdditional parameters may be as follows:\n\n`expires=`*`time`*  \nSets the *`time`* for which a browser should keep the cookie. The special value `max` will cause the cookie to expire on “`31 Dec 2037 23:55:55 GMT`”. If the parameter is not specified, it will cause the cookie to expire at the end of a browser session.\n\n`domain=`*`domain`*  \nDefines the *`domain`* for which the cookie is set. Parameter value can contain variables (1.11.5).\n\n`httponly`  \nAdds the `HttpOnly` attribute to the cookie (1.7.11).\n\n`samesite=``strict` \\| `lax` \\| `none` \\| *`$variable`*  \nAdds the `SameSite` (1.19.4) attribute to the cookie with one of the following values: `Strict`, `Lax`, `None`, or using variables (1.23.3). In the latter case, if the variable value is empty, the `SameSite` attribute will not be added to the cookie, if the value is resolved to `Strict`, `Lax`, or `None`, the corresponding value will be assigned, otherwise the `Strict` value will be assigned.\n\n`secure`  \nAdds the `Secure` attribute to the cookie (1.7.11).\n\n`path=`*`path`*  \nDefines the *`path`* for which the cookie is set.\n\nIf any parameters are omitted, the corresponding cookie fields are not set.\n\n`route`  \nWhen the `route` method is used, proxied server assigns client a route on receipt of the first request. All subsequent requests from this client will carry routing information in a cookie or URI. This information is compared with the “`route`” parameter of the [server](#server) directive to identify the server to which the request should be proxied. If the “`route`” parameter is not specified, the route name will be a hexadecimal representation of the MD5 hash of the IP address and port, or of the UNIX-domain socket path. If the designated server cannot process a request, the new server is selected by the configured balancing method as if there is no routing information in the request.\n\nThe parameters of the `route` method specify variables that may contain routing information. The first non-empty variable is used to find the matching server.\n\nExample:\n\n``` nginx\nmap $cookie_jsessionid $route_cookie {\n    ~.+\\.(?P<route>\\w+)$ $route;\n}\n\nmap $request_uri $route_uri {\n    ~jsessionid=.+\\.(?P<route>\\w+)$ $route;\n}\n\nupstream backend {\n    server backend1.example.com route=a;\n    server backend2.example.com route=b;\n\n    sticky route $route_cookie $route_uri;\n}\n```\n\nHere, the route is taken from the “`JSESSIONID`” cookie if present in a request. Otherwise, the route from the URI is used.\n\n`learn`  \nWhen the `learn` method (1.7.1) is used, nginx analyzes upstream server responses and learns server-initiated sessions usually passed in an HTTP cookie.\n\n``` nginx\nupstream backend {\n   server backend1.example.com:8080;\n   server backend2.example.com:8081;\n\n   sticky learn\n          create=$upstream_cookie_examplecookie\n          lookup=$cookie_examplecookie\n          zone=client_sessions:1m;\n}\n```\n\nIn the example, the upstream server creates a session by setting the cookie “`EXAMPLECOOKIE`” in the response. Further requests with this cookie will be passed to the same server. If the server cannot process the request, the new server is selected as if the client has not been bound yet.\n\nThe parameters `create` and `lookup` specify variables that indicate how new sessions are created and existing sessions are searched, respectively. Both parameters may be specified more than once, in which case the first non-empty variable is used.\n\nSessions are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `zone` parameter. One megabyte zone can store about 4000 sessions on the 64-bit platform. The sessions that are not accessed during the time specified by the `timeout` parameter get removed from the zone. By default, `timeout` is set to 10 minutes.\n\nThe `header` parameter (1.13.1) allows creating a session right after receiving response headers from the upstream server.\n\nThe `sync` parameter (1.13.8) enables [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of the shared memory zone.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                                                                                       |\n|----------|-------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`sticky_cookie_insert`**` `*`name`*` [expires=`*`time`*`] [domain=`*`domain`*`] [path=`*`path`*`];` |\n| Default: | —                                                                                                     |\n| Context: | `upstream`                                                                                            |\n\nThis directive is obsolete since version 1.5.7. An equivalent [sticky](#sticky) directive with a new syntax should be used instead:\n\n`sticky cookie` *`name`* \\[`expires=`*`time`*\\] \\[`domain=`*`domain`*\\] \\[`path=`*`path`*\\];\n\n#### Embedded Variables\n\nThe `ngx_http_upstream_module` module supports the following embedded variables:\n\n`$upstream_addr`  \nkeeps the IP address and port, or the path to the UNIX-domain socket of the upstream server. If several servers were contacted during request processing, their addresses are separated by commas, e.g. “`192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock`”. If an internal redirect from one server group to another happens, initiated by “X-Accel-Redirect” or [error_page](ngx_http_core_module#error_page), then the server addresses from different groups are separated by colons, e.g. “`192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock : 192.168.10.1:80, 192.168.10.2:80`”. If a server cannot be selected, the variable keeps the name of the server group.\n\n`$upstream_bytes_received`  \nnumber of bytes received from an upstream server (1.11.4). Values from several connections are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_bytes_sent`  \nnumber of bytes sent to an upstream server (1.15.8). Values from several connections are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_cache_status`  \nkeeps the status of accessing a response cache (0.8.3). The status can be either “`MISS`”, “`BYPASS`”, “`EXPIRED`”, “`STALE`”, “`UPDATING`”, “`REVALIDATED`”, or “`HIT`”.\n\n`$upstream_connect_time`  \nkeeps time spent on establishing a connection with the upstream server (1.9.1); the time is kept in seconds with millisecond resolution. In case of SSL, includes time spent on handshake. Times of several connections are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_cookie_`*`name`*  \ncookie with the specified *`name`* sent by the upstream server in the “Set-Cookie” response header field (1.7.1). Only the cookies from the response of the last server are saved.\n\n`$upstream_header_time`  \nkeeps time spent on receiving the response header from the upstream server (1.7.10); the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_http_`*`name`*  \nkeep server response header fields. For example, the “Server” response header field is available through the `$upstream_http_server` variable. The rules of converting header field names to variable names are the same as for the variables that start with the “[$http\\_](ngx_http_core_module#var_http_)” prefix. Only the header fields from the response of the last server are saved.\n\n`$upstream_last_server_name`  \nkeeps the name of last selected upstream server (1.25.3); allows passing it [through SNI](ngx_http_proxy_module#proxy_ssl_server_name):\n\n``` nginx\nproxy_ssl_server_name on;\nproxy_ssl_name        $upstream_last_server_name;\n```\n\nThis variable is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n`$upstream_queue_time`  \nkeeps time the request spent in the upstream [queue](#queue) (1.13.9); the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_response_length`  \nkeeps the length of the response obtained from the upstream server (0.7.27); the length is kept in bytes. Lengths of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_response_time`  \nkeeps time spent on receiving the response from the upstream server; the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_status`  \nkeeps status code of the response obtained from the upstream server. Status codes of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable. If a server cannot be selected, the variable keeps the 502 (Bad Gateway) status code.\n\n`$upstream_trailer_`*`name`*  \nkeeps fields from the end of the response obtained from the upstream server (1.13.10).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_upstream_module.html](https://nginx.org/en/docs/http/ngx_http_upstream_module.html)"
- name: ngx_http_userid_module
  id: http/ngx_http_userid_module
  summary: The ngx_http_userid_module module sets cookies suitable for client identification
  description: "# Module ngx_http_userid_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [userid](#userid)\n- [userid_domain](#userid_domain)\n- [userid_expires](#userid_expires)\n- [userid_flags](#userid_flags)\n- [userid_mark](#userid_mark)\n- [userid_name](#userid_name)\n- [userid_p3p](#userid_p3p)\n- [userid_path](#userid_path)\n- [userid_service](#userid_service)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_userid_module` module sets cookies suitable for client identification. Received and set cookies can be logged using the embedded variables [$uid_got](#var_uid_got) and [$uid_set](#var_uid_set). This module is compatible with the [mod_uid](http://www.lexa.ru/programs/mod-uid-eng.html) module for Apache.\n\n#### Example Configuration\n\n``` nginx\nuserid         on;\nuserid_name    uid;\nuserid_domain  example.com;\nuserid_path    /;\nuserid_expires 365d;\nuserid_p3p     'policyref=\"/w3c/p3p.xml\", CP=\"CUR ADM OUR NOR STA NID\"';\n```\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`userid`**` on | v1 | log | off;` |\n| Default: | `userid off;`                       |\n| Context: | `http`, `server`, `location`        |\n\nEnables or disables setting cookies and logging the received cookies:\n\n`on`  \nenables the setting of version 2 cookies and logging of the received cookies;\n\n`v1`  \nenables the setting of version 1 cookies and logging of the received cookies;\n\n`log`  \ndisables the setting of cookies, but enables logging of the received cookies;\n\n`off`  \ndisables the setting of cookies and logging of the received cookies.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`userid_domain`**` `*`name`*` | none;` |\n| Default: | `userid_domain none;`                    |\n| Context: | `http`, `server`, `location`             |\n\nDefines a domain for which the cookie is set. The `none` parameter disables setting of a domain for the cookie.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`userid_expires`**` `*`time`*` | max | off;` |\n| Default: | `userid_expires off;`                          |\n| Context: | `http`, `server`, `location`                   |\n\nSets a time during which a browser should keep the cookie. The parameter `max` will cause the cookie to expire on “`31 Dec 2037 23:55:55 GMT`”. The parameter `off` will cause the cookie to expire at the end of a browser session.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`userid_flags`**` off | `*`flag`*` ...;` |\n| Default: | `userid_flags off;`                        |\n| Context: | `http`, `server`, `location`               |\n\nThis directive appeared in version 1.19.3.\n\nIf the parameter is not `off`, defines one or more additional flags for the cookie: `secure`, `httponly`, `samesite=strict`, `samesite=lax`, `samesite=none`.\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`userid_mark`**` `*`letter`*` | `*`digit`*` | = | off;` |\n| Default: | `userid_mark off;`                                        |\n| Context: | `http`, `server`, `location`                              |\n\nIf the parameter is not `off`, enables the cookie marking mechanism and sets the character used as a mark. This mechanism is used to add or change [userid_p3p](#userid_p3p) and/or a cookie expiration time while preserving the client identifier. A mark can be any letter of the English alphabet (case-sensitive), digit, or the “`=`” character.\n\nIf the mark is set, it is compared with the first padding symbol in the base64 representation of the client identifier passed in a cookie. If they do not match, the cookie is resent with the specified mark, expiration time, and “P3P” header.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`userid_name`**` `*`name`*`;` |\n| Default: | `userid_name uid;`              |\n| Context: | `http`, `server`, `location`    |\n\nSets the cookie name.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`userid_p3p`**` `*`string`*` | none;` |\n| Default: | `userid_p3p none;`                      |\n| Context: | `http`, `server`, `location`            |\n\nSets a value for the “P3P” header field that will be sent along with the cookie. If the directive is set to the special value `none`, the “P3P” header will not be sent in a response.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`userid_path`**` `*`path`*`;` |\n| Default: | `userid_path /;`                |\n| Context: | `http`, `server`, `location`    |\n\nDefines a path for which the cookie is set.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`userid_service`**` `*`number`*`;`       |\n| Default: | `userid_service IP address of the server;` |\n| Context: | `http`, `server`, `location`               |\n\nIf identifiers are issued by multiple servers (services), each service should be assigned its own *`number`* to ensure that client identifiers are unique. For version 1 cookies, the default value is zero. For version 2 cookies, the default value is the number composed from the last four octets of the server’s IP address.\n\n#### Embedded Variables\n\nThe `ngx_http_userid_module` module supports the following embedded variables:\n\n`$uid_got`  \nThe cookie name and received client identifier.\n\n`$uid_reset`  \nIf the variable is set to a non-empty string that is not “`0`”, the client identifiers are reset. The special value “`log`” additionally leads to the output of messages about the reset identifiers to the [error_log](../ngx_core_module#error_log).\n\n`$uid_set`  \nThe cookie name and sent client identifier.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_userid_module.html](https://nginx.org/en/docs/http/ngx_http_userid_module.html)"
- name: ngx_http_uwsgi_module
  id: http/ngx_http_uwsgi_module
  summary: The ngx_http_uwsgi_module module allows passing requests to a uwsgi server
  description: "# Module ngx_http_uwsgi_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [uwsgi_bind](#uwsgi_bind)\n- [uwsgi_buffer_size](#uwsgi_buffer_size)\n- [uwsgi_buffering](#uwsgi_buffering)\n- [uwsgi_buffers](#uwsgi_buffers)\n- [uwsgi_busy_buffers_size](#uwsgi_busy_buffers_size)\n- [uwsgi_cache](#uwsgi_cache)\n- [uwsgi_cache_background_update](#uwsgi_cache_background_update)\n- [uwsgi_cache_bypass](#uwsgi_cache_bypass)\n- [uwsgi_cache_key](#uwsgi_cache_key)\n- [uwsgi_cache_lock](#uwsgi_cache_lock)\n- [uwsgi_cache_lock_age](#uwsgi_cache_lock_age)\n- [uwsgi_cache_lock_timeout](#uwsgi_cache_lock_timeout)\n- [uwsgi_cache_max_range_offset](#uwsgi_cache_max_range_offset)\n- [uwsgi_cache_methods](#uwsgi_cache_methods)\n- [uwsgi_cache_min_uses](#uwsgi_cache_min_uses)\n- [uwsgi_cache_path](#uwsgi_cache_path)\n- [uwsgi_cache_purge](#uwsgi_cache_purge)\n- [uwsgi_cache_revalidate](#uwsgi_cache_revalidate)\n- [uwsgi_cache_use_stale](#uwsgi_cache_use_stale)\n- [uwsgi_cache_valid](#uwsgi_cache_valid)\n- [uwsgi_connect_timeout](#uwsgi_connect_timeout)\n- [uwsgi_force_ranges](#uwsgi_force_ranges)\n- [uwsgi_hide_header](#uwsgi_hide_header)\n- [uwsgi_ignore_client_abort](#uwsgi_ignore_client_abort)\n- [uwsgi_ignore_headers](#uwsgi_ignore_headers)\n- [uwsgi_intercept_errors](#uwsgi_intercept_errors)\n- [uwsgi_limit_rate](#uwsgi_limit_rate)\n- [uwsgi_max_temp_file_size](#uwsgi_max_temp_file_size)\n- [uwsgi_modifier1](#uwsgi_modifier1)\n- [uwsgi_modifier2](#uwsgi_modifier2)\n- [uwsgi_next_upstream](#uwsgi_next_upstream)\n- [uwsgi_next_upstream_timeout](#uwsgi_next_upstream_timeout)\n- [uwsgi_next_upstream_tries](#uwsgi_next_upstream_tries)\n- [uwsgi_no_cache](#uwsgi_no_cache)\n- [uwsgi_param](#uwsgi_param)\n- [uwsgi_pass](#uwsgi_pass)\n- [uwsgi_pass_header](#uwsgi_pass_header)\n- [uwsgi_pass_request_body](#uwsgi_pass_request_body)\n- [uwsgi_pass_request_headers](#uwsgi_pass_request_headers)\n- [uwsgi_read_timeout](#uwsgi_read_timeout)\n- [uwsgi_request_buffering](#uwsgi_request_buffering)\n- [uwsgi_send_timeout](#uwsgi_send_timeout)\n- [uwsgi_socket_keepalive](#uwsgi_socket_keepalive)\n- [uwsgi_ssl_certificate](#uwsgi_ssl_certificate)\n- [uwsgi_ssl_certificate_key](#uwsgi_ssl_certificate_key)\n- [uwsgi_ssl_ciphers](#uwsgi_ssl_ciphers)\n- [uwsgi_ssl_conf_command](#uwsgi_ssl_conf_command)\n- [uwsgi_ssl_crl](#uwsgi_ssl_crl)\n- [uwsgi_ssl_name](#uwsgi_ssl_name)\n- [uwsgi_ssl_password_file](#uwsgi_ssl_password_file)\n- [uwsgi_ssl_protocols](#uwsgi_ssl_protocols)\n- [uwsgi_ssl_server_name](#uwsgi_ssl_server_name)\n- [uwsgi_ssl_session_reuse](#uwsgi_ssl_session_reuse)\n- [uwsgi_ssl_trusted_certificate](#uwsgi_ssl_trusted_certificate)\n- [uwsgi_ssl_verify](#uwsgi_ssl_verify)\n- [uwsgi_ssl_verify_depth](#uwsgi_ssl_verify_depth)\n- [uwsgi_store](#uwsgi_store)\n- [uwsgi_store_access](#uwsgi_store_access)\n- [uwsgi_temp_file_write_size](#uwsgi_temp_file_write_size)\n- [uwsgi_temp_path](#uwsgi_temp_path)\n\nThe `ngx_http_uwsgi_module` module allows passing requests to a uwsgi server.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    include    uwsgi_params;\n    uwsgi_pass localhost:9000;\n}\n```\n\n#### Directives\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`uwsgi_bind`**` `*`address`*` [transparent] | off;` |\n| Default: | —                                                     |\n| Context: | `http`, `server`, `location`                          |\n\nMakes outgoing connections to a uwsgi server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `uwsgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.\n\nThe `transparent` parameter (1.11.0) allows outgoing connections to a uwsgi server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\nuwsgi_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the uwsgi server.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`uwsgi_buffer_size`**` `*`size`*`;` |\n| Default: | `uwsgi_buffer_size 4k|8k;`            |\n| Context: | `http`, `server`, `location`          |\n\nSets the *`size`* of the buffer used for reading the first part of the response received from the uwsgi server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`uwsgi_buffering`**` on | off;` |\n| Default: | `uwsgi_buffering on;`             |\n| Context: | `http`, `server`, `location`      |\n\nEnables or disables buffering of responses from the uwsgi server.\n\nWhen buffering is enabled, nginx receives a response from the uwsgi server as soon as possible, saving it into the buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#uwsgi_temp_path) on the disk. Writing to temporary files is controlled by the [uwsgi_max_temp_file_size](#uwsgi_max_temp_file_size) and [uwsgi_temp_file_write_size](#uwsgi_temp_file_write_size) directives.\n\nWhen buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the uwsgi server. The maximum size of the data that nginx can receive from the server at a time is set by the [uwsgi_buffer_size](#uwsgi_buffer_size) directive.\n\nBuffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [uwsgi_ignore_headers](#uwsgi_ignore_headers) directive.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`uwsgi_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `uwsgi_buffers 8 4k|8k;`                       |\n| Context: | `http`, `server`, `location`                   |\n\nSets the *`number`* and *`size`* of the buffers used for reading a response from the uwsgi server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`uwsgi_busy_buffers_size`**` `*`size`*`;` |\n| Default: | `uwsgi_busy_buffers_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                |\n\nWhen [buffering](#uwsgi_buffering) of responses from the uwsgi server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`uwsgi_cache`**` `*`zone`*` | off;` |\n| Default: | `uwsgi_cache off;`                    |\n| Context: | `http`, `server`, `location`          |\n\nDefines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`uwsgi_cache_background_update`**` on | off;` |\n| Default: | `uwsgi_cache_background_update off;`            |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.11.10.\n\nAllows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#uwsgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`uwsgi_cache_bypass`**` `*`string`*` ...;` |\n| Default: | —                                            |\n| Context: | `http`, `server`, `location`                 |\n\nDefines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:\n\n``` nginx\nuwsgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;\nuwsgi_cache_bypass $http_pragma    $http_authorization;\n```\n\nCan be used along with the [uwsgi_no_cache](#uwsgi_no_cache) directive.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`uwsgi_cache_key`**` `*`string`*`;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nDefines a key for caching, for example\n\n``` nginx\nuwsgi_cache_key localhost:9000$request_uri;\n```\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`uwsgi_cache_lock`**` on | off;` |\n| Default: | `uwsgi_cache_lock off;`            |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.1.12.\n\nWhen enabled, only one request at a time will be allowed to populate a new cache element identified according to the [uwsgi_cache_key](#uwsgi_cache_key) directive by passing a request to a uwsgi server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [uwsgi_cache_lock_timeout](#uwsgi_cache_lock_timeout) directive.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`uwsgi_cache_lock_age`**` `*`time`*`;` |\n| Default: | `uwsgi_cache_lock_age 5s;`               |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.7.8.\n\nIf the last request passed to the uwsgi server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the uwsgi server.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`uwsgi_cache_lock_timeout`**` `*`time`*`;` |\n| Default: | `uwsgi_cache_lock_timeout 5s;`               |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 1.1.12.\n\nSets a timeout for [uwsgi_cache_lock](#uwsgi_cache_lock). When the *`time`* expires, the request will be passed to the uwsgi server, however, the response will not be cached.\n\nBefore 1.7.8, the response could be cached.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`uwsgi_cache_max_range_offset`**` `*`number`*`;` |\n| Default: | —                                                  |\n| Context: | `http`, `server`, `location`                       |\n\nThis directive appeared in version 1.11.6.\n\nSets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the uwsgi server and the response will not be cached.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`uwsgi_cache_methods`**` GET | HEAD | POST ...;` |\n| Default: | `uwsgi_cache_methods GET HEAD;`                    |\n| Context: | `http`, `server`, `location`                       |\n\nIf the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [uwsgi_no_cache](#uwsgi_no_cache) directive.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`uwsgi_cache_min_uses`**` `*`number`*`;` |\n| Default: | `uwsgi_cache_min_uses 1;`                  |\n| Context: | `http`, `server`, `location`               |\n\nSets the *`number`* of requests after which the response will be cached.\n\n|          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`uwsgi_cache_path`**` `*`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |\n| Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n\nSets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the [cache key](#uwsgi_cache_key). The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration\n\n``` nginx\nuwsgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;\n```\n\nfile names in a cache will look like this:\n\n``` nginx\n/data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c\n```\n\nA cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [uwsgi_temp_path](#uwsgi_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.\n\nIn addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.\n\nAs part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.\n\nCached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.\n\nThe special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.\n\nA minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.\n\nAdditionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n`purger`=`on`\\|`off`  \nInstructs whether cache entries that match a [wildcard key](#uwsgi_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.\n\n`purger_files`=*`number`*  \nSets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.\n\n`purger_threshold`=*`number`*  \nSets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.\n\n`purger_sleep`=*`number`*  \nSets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.\n\nIn versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`uwsgi_cache_purge`**` string ...;` |\n| Default: | —                                     |\n| Context: | `http`, `server`, `location`          |\n\nThis directive appeared in version 1.5.7.\n\nDefines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#uwsgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.\n\nIf the [cache key](#uwsgi_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#uwsgi_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.\n\nExample configuration:\n\n``` nginx\nuwsgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;\n\nmap $request_method $purge_method {\n    PURGE   1;\n    default 0;\n}\n\nserver {\n    ...\n    location / {\n        uwsgi_pass        backend;\n        uwsgi_cache       cache_zone;\n        uwsgi_cache_key   $uri;\n        uwsgi_cache_purge $purge_method;\n    }\n}\n```\n\nThis functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`uwsgi_cache_revalidate`**` on | off;` |\n| Default: | `uwsgi_cache_revalidate off;`            |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.5.7.\n\nEnables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.\n\n|          |                                                                                                                                             |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`uwsgi_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | http_429 | off ...;` |\n| Default: | `uwsgi_cache_use_stale off;`                                                                                                                |\n| Context: | `http`, `server`, `location`                                                                                                                |\n\nDetermines in which cases a stale cached response can be used when an error occurs during communication with the uwsgi server. The directive’s parameters match the parameters of the [uwsgi_next_upstream](#uwsgi_next_upstream) directive.\n\nThe `error` parameter also permits using a stale cached response if a uwsgi server to process a request cannot be selected.\n\nAdditionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to uwsgi servers when updating cached data.\n\nUsing a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.\n\n- The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.\n- The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.\n\nTo minimize the number of accesses to uwsgi servers when populating a new cache element, the [uwsgi_cache_lock](#uwsgi_cache_lock) directive can be used.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`uwsgi_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |\n| Default: | —                                                      |\n| Context: | `http`, `server`, `location`                           |\n\nSets caching time for different response codes. For example, the following directives\n\n``` nginx\nuwsgi_cache_valid 200 302 10m;\nuwsgi_cache_valid 404      1m;\n```\n\nset 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.\n\nIf only caching *`time`* is specified\n\n``` nginx\nuwsgi_cache_valid 5m;\n```\n\nthen only 200, 301, and 302 responses are cached.\n\nIn addition, the `any` parameter can be specified to cache any responses:\n\n``` nginx\nuwsgi_cache_valid 200 302 10m;\nuwsgi_cache_valid 301      1h;\nuwsgi_cache_valid any      1m;\n```\n\nParameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.\n\n- The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.\n- If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.\n- If the header includes the “Set-Cookie” field, such a response will not be cached.\n- If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).\n\nProcessing of one or more of these response header fields can be disabled using the [uwsgi_ignore_headers](#uwsgi_ignore_headers) directive.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`uwsgi_connect_timeout`**` `*`time`*`;` |\n| Default: | `uwsgi_connect_timeout 60s;`              |\n| Context: | `http`, `server`, `location`              |\n\nDefines a timeout for establishing a connection with a uwsgi server. It should be noted that this timeout cannot usually exceed 75 seconds.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`uwsgi_force_ranges`**` on | off;` |\n| Default: | `uwsgi_force_ranges off;`            |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.7.7.\n\nEnables byte-range support for both cached and uncached responses from the uwsgi server regardless of the “Accept-Ranges” field in these responses.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`uwsgi_hide_header`**` `*`field`*`;` |\n| Default: | —                                      |\n| Context: | `http`, `server`, `location`           |\n\nBy default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a uwsgi server to a client. The `uwsgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [uwsgi_pass_header](#uwsgi_pass_header) directive can be used.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`uwsgi_ignore_client_abort`**` on | off;` |\n| Default: | `uwsgi_ignore_client_abort off;`            |\n| Context: | `http`, `server`, `location`                |\n\nDetermines whether the connection with a uwsgi server should be closed when a client closes the connection without waiting for a response.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`uwsgi_ignore_headers`**` `*`field`*` ...;` |\n| Default: | —                                             |\n| Context: | `http`, `server`, `location`                  |\n\nDisables processing of certain response header fields from the uwsgi server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).\n\nIf not disabled, processing of these header fields has the following effect:\n\n- “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#uwsgi_cache_valid);\n- “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;\n- “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;\n- “X-Accel-Buffering” enables or disables [buffering](#uwsgi_buffering) of a response;\n- “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`uwsgi_intercept_errors`**` on | off;` |\n| Default: | `uwsgi_intercept_errors off;`            |\n| Context: | `http`, `server`, `location`             |\n\nDetermines whether a uwsgi server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`uwsgi_limit_rate`**` `*`rate`*`;` |\n| Default: | `uwsgi_limit_rate 0;`                |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.7.7.\n\nLimits the speed of reading the response from the uwsgi server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the uwsgi server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#uwsgi_buffering) of responses from the uwsgi server is enabled. Parameter value can contain variables (1.27.0).\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`uwsgi_max_temp_file_size`**` `*`size`*`;` |\n| Default: | `uwsgi_max_temp_file_size 1024m;`            |\n| Context: | `http`, `server`, `location`                 |\n\nWhen [buffering](#uwsgi_buffering) of responses from the uwsgi server is enabled, and the whole response does not fit into the buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [uwsgi_temp_file_write_size](#uwsgi_temp_file_write_size) directive.\n\nThe zero value disables buffering of responses to temporary files.\n\nThis restriction does not apply to responses that will be [cached](#uwsgi_cache) or [stored](#uwsgi_store) on disk.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`uwsgi_modifier1`**` `*`number`*`;` |\n| Default: | `uwsgi_modifier1 0;`                  |\n| Context: | `http`, `server`, `location`          |\n\nSets the value of the `modifier1` field in the [uwsgi packet header](http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`uwsgi_modifier2`**` `*`number`*`;` |\n| Default: | `uwsgi_modifier2 0;`                  |\n| Context: | `http`, `server`, `location`          |\n\nSets the value of the `modifier2` field in the [uwsgi packet header](http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header).\n\n|          |                                                                                                                                                 |\n|----------|-------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`uwsgi_next_upstream`**` error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |\n| Default: | `uwsgi_next_upstream error timeout;`                                                                                                            |\n| Context: | `http`, `server`, `location`                                                                                                                    |\n\nSpecifies in which cases a request should be passed to the next server:\n\n`error`  \nan error occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`timeout`  \na timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;\n\n`invalid_header`  \na server returned an empty or invalid response;\n\n`http_500`  \na server returned a response with the code 500;\n\n`http_503`  \na server returned a response with the code 503;\n\n`http_403`  \na server returned a response with the code 403;\n\n`http_404`  \na server returned a response with the code 404;\n\n`http_429`  \na server returned a response with the code 429 (1.11.13);\n\n`non_idempotent`  \nnormally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;\n\n`off`  \ndisables passing a request to the next server.\n\nOne should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.\n\nThe directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_503`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.\n\nPassing a request to the next server can be limited by [the number of tries](#uwsgi_next_upstream_tries) and by [time](#uwsgi_next_upstream_timeout).\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`uwsgi_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `uwsgi_next_upstream_timeout 0;`                |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.7.5.\n\nLimits the time during which a request can be passed to the [next server](#uwsgi_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`uwsgi_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `uwsgi_next_upstream_tries 0;`                  |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.7.5.\n\nLimits the number of possible tries for passing a request to the [next server](#uwsgi_next_upstream). The `0` value turns off this limitation.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`uwsgi_no_cache`**` `*`string`*` ...;` |\n| Default: | —                                        |\n| Context: | `http`, `server`, `location`             |\n\nDefines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:\n\n``` nginx\nuwsgi_no_cache $cookie_nocache $arg_nocache$arg_comment;\nuwsgi_no_cache $http_pragma    $http_authorization;\n```\n\nCan be used along with the [uwsgi_cache_bypass](#uwsgi_cache_bypass) directive.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`uwsgi_param`**` `*`parameter`*` `*`value`*` [if_not_empty];` |\n| Default: | —                                                               |\n| Context: | `http`, `server`, `location`                                    |\n\nSets a *`parameter`* that should be passed to the uwsgi server. The *`value`* can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `uwsgi_param` directives defined on the current level.\n\nStandard [CGI environment variables](https://datatracker.ietf.org/doc/html/rfc3875#section-4.1) should be provided as uwsgi headers, see the `uwsgi_params` file provided in the distribution:\n\n``` nginx\nlocation / {\n    include uwsgi_params;\n    ...\n}\n```\n\nIf the directive is specified with `if_not_empty` (1.1.11) then such a parameter will be passed to the server only if its value is not empty:\n\n``` nginx\nuwsgi_param HTTPS $https if_not_empty;\n```\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`uwsgi_pass`**` [`*`protocol`*`://]`*`address`*`;` |\n| Default: | —                                                    |\n| Context: | `location`, `if in location`                         |\n\nSets the protocol and address of a uwsgi server. As a *`protocol`*, “`uwsgi`” or “`suwsgi`” (secured uwsgi, uwsgi over SSL) can be specified. The address can be specified as a domain name or IP address, and a port:\n\n``` nginx\nuwsgi_pass localhost:9000;\nuwsgi_pass uwsgi://localhost:9000;\nuwsgi_pass suwsgi://[2001:db8::1]:9090;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\nuwsgi_pass unix:/tmp/uwsgi.socket;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).\n\nParameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).\n\nSecured uwsgi protocol is supported since version 1.5.8.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`uwsgi_pass_header`**` `*`field`*`;` |\n| Default: | —                                      |\n| Context: | `http`, `server`, `location`           |\n\nPermits passing [otherwise disabled](#uwsgi_hide_header) header fields from a uwsgi server to a client.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`uwsgi_pass_request_body`**` on | off;` |\n| Default: | `uwsgi_pass_request_body on;`             |\n| Context: | `http`, `server`, `location`              |\n\nIndicates whether the original request body is passed to the uwsgi server. See also the [uwsgi_pass_request_headers](#uwsgi_pass_request_headers) directive.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`uwsgi_pass_request_headers`**` on | off;` |\n| Default: | `uwsgi_pass_request_headers on;`             |\n| Context: | `http`, `server`, `location`                 |\n\nIndicates whether the header fields of the original request are passed to the uwsgi server. See also the [uwsgi_pass_request_body](#uwsgi_pass_request_body) directive.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`uwsgi_read_timeout`**` `*`time`*`;` |\n| Default: | `uwsgi_read_timeout 60s;`              |\n| Context: | `http`, `server`, `location`           |\n\nDefines a timeout for reading a response from the uwsgi server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the uwsgi server does not transmit anything within this time, the connection is closed.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`uwsgi_request_buffering`**` on | off;` |\n| Default: | `uwsgi_request_buffering on;`             |\n| Context: | `http`, `server`, `location`              |\n\nThis directive appeared in version 1.7.11.\n\nEnables or disables buffering of a client request body.\n\nWhen buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to a uwsgi server.\n\nWhen buffering is disabled, the request body is sent to the uwsgi server immediately as it is received. In this case, the request cannot be passed to the [next server](#uwsgi_next_upstream) if nginx already started sending the request body.\n\nWhen HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`uwsgi_send_timeout`**` `*`time`*`;` |\n| Default: | `uwsgi_send_timeout 60s;`              |\n| Context: | `http`, `server`, `location`           |\n\nSets a timeout for transmitting a request to the uwsgi server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the uwsgi server does not receive anything within this time, the connection is closed.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`uwsgi_socket_keepalive`**` on | off;` |\n| Default: | `uwsgi_socket_keepalive off;`            |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a uwsgi server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                         |\n| Context: | `http`, `server`, `location`              |\n\nThis directive appeared in version 1.7.8.\n\nSpecifies a *`file`* with the certificate in the PEM format used for authentication to a secured uwsgi server.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                             |\n| Context: | `http`, `server`, `location`                  |\n\nThis directive appeared in version 1.7.8.\n\nSpecifies a *`file`* with the secret key in the PEM format used for authentication to a secured uwsgi server.\n\nThe value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `uwsgi_ssl_ciphers DEFAULT;`             |\n| Context: | `http`, `server`, `location`             |\n\nThis directive appeared in version 1.5.8.\n\nSpecifies the enabled ciphers for requests to a secured uwsgi server. The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                      |\n| Context: | `http`, `server`, `location`                           |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the secured uwsgi server.\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `uwsgi_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `uwsgi_ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`uwsgi_ssl_crl`**` `*`file`*`;` |\n| Default: | —                                 |\n| Context: | `http`, `server`, `location`      |\n\nThis directive appeared in version 1.7.0.\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#uwsgi_ssl_verify) the certificate of the secured uwsgi server.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`uwsgi_ssl_name`**` `*`name`*`;`     |\n| Default: | `uwsgi_ssl_name host from uwsgi_pass;` |\n| Context: | `http`, `server`, `location`           |\n\nThis directive appeared in version 1.7.0.\n\nAllows overriding the server name used to [verify](#uwsgi_ssl_verify) the certificate of the secured uwsgi server and to be [passed through SNI](#uwsgi_ssl_server_name) when establishing a connection with the secured uwsgi server.\n\nBy default, the host part from [uwsgi_pass](#uwsgi_pass) is used.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `http`, `server`, `location`                |\n\nThis directive appeared in version 1.7.8.\n\nSpecifies a *`file`* with passphrases for [secret keys](#uwsgi_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\n|          |                                                                                    |\n|----------|------------------------------------------------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `uwsgi_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `http`, `server`, `location`                                                       |\n\nThis directive appeared in version 1.5.8.\n\nEnables the specified protocols for requests to a secured uwsgi server.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`uwsgi_ssl_server_name`**` on | off;` |\n| Default: | `uwsgi_ssl_server_name off;`            |\n| Context: | `http`, `server`, `location`            |\n\nThis directive appeared in version 1.7.0.\n\nEnables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the secured uwsgi server.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_session_reuse`**` on | off;` |\n| Default: | `uwsgi_ssl_session_reuse on;`             |\n| Context: | `http`, `server`, `location`              |\n\nThis directive appeared in version 1.5.8.\n\nDetermines whether SSL sessions can be reused when working with a secured uwsgi server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                 |\n| Context: | `http`, `server`, `location`                      |\n\nThis directive appeared in version 1.7.0.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#uwsgi_ssl_verify) the certificate of the secured uwsgi server.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`uwsgi_ssl_verify`**` on | off;` |\n| Default: | `uwsgi_ssl_verify off;`            |\n| Context: | `http`, `server`, `location`       |\n\nThis directive appeared in version 1.7.0.\n\nEnables or disables verification of the secured uwsgi server certificate.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`uwsgi_ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `uwsgi_ssl_verify_depth 1;`                  |\n| Context: | `http`, `server`, `location`                 |\n\nThis directive appeared in version 1.7.0.\n\nSets the verification depth in the secured uwsgi server certificates chain.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`uwsgi_store`**` on | off | `*`string`*`;` |\n| Default: | `uwsgi_store off;`                           |\n| Context: | `http`, `server`, `location`                 |\n\nEnables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:\n\n``` nginx\nuwsgi_store /data/www$original_uri;\n```\n\nThe modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [uwsgi_temp_path](#uwsgi_temp_path) directive, are put on the same file system.\n\nThis directive can be used to create local copies of static unchangeable files, e.g.:\n\n``` nginx\nlocation /images/ {\n    root               /data/www;\n    error_page         404 = /fetch$uri;\n}\n\nlocation /fetch/ {\n    internal;\n\n    uwsgi_pass         backend:9000;\n    ...\n\n    uwsgi_store        on;\n    uwsgi_store_access user:rw group:rw all:r;\n    uwsgi_temp_path    /data/temp;\n\n    alias              /data/www/;\n}\n```\n\n|          |                                                               |\n|----------|---------------------------------------------------------------|\n| Syntax:  | **`uwsgi_store_access`**` `*`users`*`:`*`permissions`*` ...;` |\n| Default: | `uwsgi_store_access user:rw;`                                 |\n| Context: | `http`, `server`, `location`                                  |\n\nSets access permissions for newly created files and directories, e.g.:\n\n``` nginx\nuwsgi_store_access user:rw group:rw all:r;\n```\n\nIf any `group` or `all` access permissions are specified then `user` permissions may be omitted:\n\n``` nginx\nuwsgi_store_access group:rw all:r;\n```\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`uwsgi_temp_file_write_size`**` `*`size`*`;` |\n| Default: | `uwsgi_temp_file_write_size 8k|16k;`           |\n| Context: | `http`, `server`, `location`                   |\n\nLimits the *`size`* of data written to a temporary file at a time, when buffering of responses from the uwsgi server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives. The maximum size of a temporary file is set by the [uwsgi_max_temp_file_size](#uwsgi_max_temp_file_size) directive.\n\n|          |                                                                                  |\n|----------|----------------------------------------------------------------------------------|\n| Syntax:  | **`uwsgi_temp_path`**` `*`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `uwsgi_temp_path uwsgi_temp;`                                                    |\n| Context: | `http`, `server`, `location`                                                     |\n\nDefines a directory for storing temporary files with data received from uwsgi servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nuwsgi_temp_path /spool/nginx/uwsgi_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/uwsgi_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [uwsgi_cache_path](#uwsgi_cache_path) directive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html](https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html)"
- name: ngx_http_v2_module
  id: http/ngx_http_v2_module
  summary: The ngx_http_v2_module module (1.9.5) provides support for HTTP/2
  description: "# Module ngx_http_v2_module\n\n- [Known Issues](#issues)\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [http2](#http2)\n- [http2_body_preread_size](#http2_body_preread_size)\n- [http2_chunk_size](#http2_chunk_size)\n- [http2_idle_timeout](#http2_idle_timeout)\n- [http2_max_concurrent_pushes](#http2_max_concurrent_pushes)\n- [http2_max_concurrent_streams](#http2_max_concurrent_streams)\n- [http2_max_field_size](#http2_max_field_size)\n- [http2_max_header_size](#http2_max_header_size)\n- [http2_max_requests](#http2_max_requests)\n- [http2_push](#http2_push)\n- [http2_push_preload](#http2_push_preload)\n- [http2_recv_buffer_size](#http2_recv_buffer_size)\n- [http2_recv_timeout](#http2_recv_timeout)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_v2_module` module (1.9.5) provides support for [HTTP/2](https://datatracker.ietf.org/doc/html/rfc7540).\n\nThis module is not built by default, it should be enabled with the `--with-http_v2_module` configuration parameter.\n\n#### Known Issues\n\nBefore version 1.9.14, buffering of a client request body could not be disabled regardless of [proxy_request_buffering](ngx_http_proxy_module#proxy_request_buffering), [fastcgi_request_buffering](ngx_http_fastcgi_module#fastcgi_request_buffering), [uwsgi_request_buffering](ngx_http_uwsgi_module#uwsgi_request_buffering), and [scgi_request_buffering](ngx_http_scgi_module#scgi_request_buffering) directive values.\n\nBefore version 1.19.1, the [lingering_close](ngx_http_core_module#lingering_close) mechanism was not used to control closing HTTP/2 connections.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    listen 443 ssl;\n\n    http2 on;\n\n    ssl_certificate server.crt;\n    ssl_certificate_key server.key;\n}\n```\n\nNote that accepting HTTP/2 connections over TLS requires the “Application-Layer Protocol Negotiation” (ALPN) TLS extension support, which is available since [OpenSSL](http://www.openssl.org) version 1.0.2.\n\nAlso note that if the [ssl_prefer_server_ciphers](ngx_http_ssl_module#ssl_prefer_server_ciphers) directive is set to the value “`on`”, the [ciphers](ngx_http_ssl_module#ssl_ciphers) should be configured to comply with [RFC 9113, Appendix A](https://datatracker.ietf.org/doc/html/rfc9113#appendix-A) black list and supported by clients.\n\n#### Directives\n\n|          |                         |\n|----------|-------------------------|\n| Syntax:  | **`http2`**` on | off;` |\n| Default: | `http2 off;`            |\n| Context: | `http`, `server`        |\n\nThis directive appeared in version 1.25.1.\n\nEnables the [HTTP/2](https://datatracker.ietf.org/doc/html/rfc9113) protocol.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`http2_body_preread_size`**` `*`size`*`;` |\n| Default: | `http2_body_preread_size 64k;`              |\n| Context: | `http`, `server`                            |\n\nThis directive appeared in version 1.11.0.\n\nSets the *`size`* of the buffer per each request in which the request body may be saved before it is started to be processed.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`http2_chunk_size`**` `*`size`*`;` |\n| Default: | `http2_chunk_size 8k;`               |\n| Context: | `http`, `server`, `location`         |\n\nSets the maximum size of chunks into which the response body is sliced. A too low value results in higher overhead. A too high value impairs prioritization due to [HOL blocking](http://en.wikipedia.org/wiki/Head-of-line_blocking).\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`http2_idle_timeout`**` `*`time`*`;` |\n| Default: | `http2_idle_timeout 3m;`               |\n| Context: | `http`, `server`                       |\n\nThis directive is obsolete since version 1.19.7. The [keepalive_timeout](ngx_http_core_module#keepalive_timeout) directive should be used instead.\n\nSets the timeout of inactivity after which the connection is closed.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`http2_max_concurrent_pushes`**` `*`number`*`;` |\n| Default: | `http2_max_concurrent_pushes 10;`                 |\n| Context: | `http`, `server`                                  |\n\nThis directive appeared in version 1.13.9.\n\nThis directive is obsolete since version 1.25.1.\n\nLimits the maximum number of concurrent [push](#http2_push) requests in a connection.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`http2_max_concurrent_streams`**` `*`number`*`;` |\n| Default: | `http2_max_concurrent_streams 128;`                |\n| Context: | `http`, `server`                                   |\n\nSets the maximum number of concurrent HTTP/2 streams in a connection.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`http2_max_field_size`**` `*`size`*`;` |\n| Default: | `http2_max_field_size 4k;`               |\n| Context: | `http`, `server`                         |\n\nThis directive is obsolete since version 1.19.7. The [large_client_header_buffers](ngx_http_core_module#large_client_header_buffers) directive should be used instead.\n\nLimits the maximum size of an [HPACK](https://datatracker.ietf.org/doc/html/rfc7541)-compressed request header field. The limit applies equally to both name and value. Note that if Huffman encoding is applied, the actual size of decompressed name and value strings may be larger. For most requests, the default limit should be enough.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`http2_max_header_size`**` `*`size`*`;` |\n| Default: | `http2_max_header_size 16k;`              |\n| Context: | `http`, `server`                          |\n\nThis directive is obsolete since version 1.19.7. The [large_client_header_buffers](ngx_http_core_module#large_client_header_buffers) directive should be used instead.\n\nLimits the maximum size of the entire request header list after [HPACK](https://datatracker.ietf.org/doc/html/rfc7541) decompression. For most requests, the default limit should be enough.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`http2_max_requests`**` `*`number`*`;` |\n| Default: | `http2_max_requests 1000;`               |\n| Context: | `http`, `server`                         |\n\nThis directive appeared in version 1.11.6.\n\nThis directive is obsolete since version 1.19.7. The [keepalive_requests](ngx_http_core_module#keepalive_requests) directive should be used instead.\n\nSets the maximum number of requests (including [push](#http2_push) requests) that can be served through one HTTP/2 connection, after which the next client request will lead to connection closing and the need of establishing a new connection.\n\nClosing connections periodically is necessary to free per-connection memory allocations. Therefore, using too high maximum number of requests could result in excessive memory usage and not recommended.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`http2_push`**` `*`uri`*` | off;` |\n| Default: | `http2_push off;`                   |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in version 1.13.9.\n\nThis directive is obsolete since version 1.25.1.\n\nPre-emptively sends ([pushes](https://datatracker.ietf.org/doc/html/rfc9113#section-8.4)) a request to the specified *`uri`* along with the response to the original request. Only relative URIs with absolute path will be processed, for example:\n\n``` nginx\nhttp2_push /static/css/main.css;\n```\n\nThe *`uri`* value can contain variables.\n\nSeveral `http2_push` directives can be specified on the same configuration level. The `off` parameter cancels the effect of the `http2_push` directives inherited from the previous configuration level.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`http2_push_preload`**` on | off;` |\n| Default: | `http2_push_preload off;`            |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.13.9.\n\nThis directive is obsolete since version 1.25.1.\n\nEnables automatic conversion of [preload links](https://www.w3.org/TR/preload/#server-push-http-2) specified in the “Link” response header fields into [push](https://datatracker.ietf.org/doc/html/rfc9113#section-8.4) requests.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`http2_recv_buffer_size`**` `*`size`*`;` |\n| Default: | `http2_recv_buffer_size 256k;`             |\n| Context: | `http`                                     |\n\nSets the size of the per [worker](../ngx_core_module#worker_processes) input buffer.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`http2_recv_timeout`**` `*`time`*`;` |\n| Default: | `http2_recv_timeout 30s;`              |\n| Context: | `http`, `server`                       |\n\nThis directive is obsolete since version 1.19.7. The [client_header_timeout](ngx_http_core_module#client_header_timeout) directive should be used instead.\n\nSets the timeout for expecting more data from the client, after which the connection is closed.\n\n#### Embedded Variables\n\nThe `ngx_http_v2_module` module supports the following embedded variables:\n\n`$http2`  \nnegotiated protocol identifier: “`h2`” for HTTP/2 over TLS, “`h2c`” for HTTP/2 over cleartext TCP, or an empty string otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_v2_module.html](https://nginx.org/en/docs/http/ngx_http_v2_module.html)"
- name: ngx_http_v3_module
  id: http/ngx_http_v3_module
  summary: The ngx_http_v3_module module (1.25.0) provides experimental support for HTTP/3
  description: "# Module ngx_http_v3_module\n\n- [Known Issues](#issues)\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [http3](#http3)\n- [http3_hq](#http3_hq)\n- [http3_max_concurrent_streams](#http3_max_concurrent_streams)\n- [http3_stream_buffer_size](#http3_stream_buffer_size)\n- [quic_active_connection_id_limit](#quic_active_connection_id_limit)\n- [quic_bpf](#quic_bpf)\n- [quic_gso](#quic_gso)\n- [quic_host_key](#quic_host_key)\n- [quic_retry](#quic_retry)\n- [Embedded Variables](#variables)\n\nThe `ngx_http_v3_module` module (1.25.0) provides experimental support for [HTTP/3](https://datatracker.ietf.org/doc/html/rfc9114).\n\nThis module is not built by default, it should be enabled with the [`--with-http_v3_module`](../configure#http_v3_module) configuration parameter.\n\nAn SSL library that provides QUIC support such as [BoringSSL](https://boringssl.googlesource.com/boringssl), [LibreSSL](https://www.libressl.org), or [QuicTLS](https://github.com/quictls/openssl) is recommended to build and run this module. Otherwise, when using the [OpenSSL](https://openssl.org) library, OpenSSL compatibility layer will be used that does not support [early data](ngx_http_ssl_module#ssl_early_data).\n\n#### Known Issues\n\nThe module is experimental, caveat emptor applies.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    log_format quic '$remote_addr - $remote_user [$time_local] '\n                    '\"$request\" $status $body_bytes_sent '\n                    '\"$http_referer\" \"$http_user_agent\" \"$http3\"';\n\n    access_log logs/access.log quic;\n\n    server {\n        # for better compatibility it's recommended\n        # to use the same port for http/3 and https\n        listen 8443 quic reuseport;\n        listen 8443 ssl;\n\n        ssl_certificate     certs/example.com.crt;\n        ssl_certificate_key certs/example.com.key;\n\n        location / {\n            # used to advertise the availability of HTTP/3\n            add_header Alt-Svc 'h3=\":8443\"; ma=86400';\n        }\n    }\n}\n```\n\nNote that accepting HTTP/3 connections over TLS requires the TLSv1.3 protocol support, which is available since [OpenSSL](http://www.openssl.org) version 1.1.1.\n\n#### Directives\n\n|          |                         |\n|----------|-------------------------|\n| Syntax:  | **`http3`**` on | off;` |\n| Default: | `http3 on;`             |\n| Context: | `http`, `server`        |\n\nEnables [HTTP/3](https://datatracker.ietf.org/doc/html/rfc9114) protocol negotiation.\n\n|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`http3_hq`**` on | off;` |\n| Default: | `http3_hq off;`            |\n| Context: | `http`, `server`           |\n\nEnables HTTP/0.9 protocol negotiation used in [QUIC interoperability tests](https://github.com/marten-seemann/quic-interop-runner).\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`http3_max_concurrent_streams`**` `*`number`*`;` |\n| Default: | `http3_max_concurrent_streams 128;`                |\n| Context: | `http`, `server`                                   |\n\nSets the maximum number of concurrent HTTP/3 request streams in a connection.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`http3_stream_buffer_size`**` `*`size`*`;` |\n| Default: | `http3_stream_buffer_size 64k;`              |\n| Context: | `http`, `server`                             |\n\nSets the size of the buffer used for reading and writing of the QUIC streams.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`quic_active_connection_id_limit`**` `*`number`*`;` |\n| Default: | `quic_active_connection_id_limit 2;`                  |\n| Context: | `http`, `server`                                      |\n\nSets the QUIC `active_connection_id_limit` transport parameter value. This is the maximum number of client connection IDs which can be stored on the server.\n\n|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`quic_bpf`**` on | off;` |\n| Default: | `quic_bpf off;`            |\n| Context: | `main`                     |\n\nEnables routing of QUIC packets using [eBPF](https://ebpf.io/). When enabled, this allows supporting QUIC connection migration.\n\nThe directive is only supported on Linux 5.7+.\n\n|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`quic_gso`**` on | off;` |\n| Default: | `quic_gso off;`            |\n| Context: | `http`, `server`           |\n\nEnables sending in optimized batch mode using segmentation offloading.\n\nOptimized sending is supported only on Linux featuring `UDP_SEGMENT`.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`quic_host_key`**` `*`file`*`;` |\n| Default: | —                                 |\n| Context: | `http`, `server`                  |\n\nSets a *`file`* with the secret key used to encrypt stateless reset and address validation tokens. By default, a random key is generated on each reload. Tokens generated with old keys are not accepted.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`quic_retry`**` on | off;` |\n| Default: | `quic_retry off;`            |\n| Context: | `http`, `server`             |\n\nEnables the [QUIC Address Validation](https://datatracker.ietf.org/doc/html/rfc9000#name-address-validation) feature. This includes sending a new token in a `Retry` packet or a `NEW_TOKEN` frame and validating a token received in the `Initial` packet.\n\n#### Embedded Variables\n\nThe `ngx_http_v3_module` module supports the following embedded variables:\n\n`$http3`  \nnegotiated protocol identifier: “`h3`” for HTTP/3 connections, “`hq`” for hq connections, or an empty string otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_v3_module.html](https://nginx.org/en/docs/http/ngx_http_v3_module.html)"
- name: ngx_http_xslt_module
  id: http/ngx_http_xslt_module
  summary: The ngx_http_xslt_module (0.7.8+) is a filter that transforms XML responses using one or more XSLT stylesheets
  description: "# Module ngx_http_xslt_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [xml_entities](#xml_entities)\n- [xslt_last_modified](#xslt_last_modified)\n- [xslt_param](#xslt_param)\n- [xslt_string_param](#xslt_string_param)\n- [xslt_stylesheet](#xslt_stylesheet)\n- [xslt_types](#xslt_types)\n\nThe `ngx_http_xslt_module` (0.7.8+) is a filter that transforms XML responses using one or more XSLT stylesheets.\n\nThis module is not built by default, it should be enabled with the `--with-http_xslt_module` configuration parameter.\n\nThis module requires the [libxml2](http://xmlsoft.org) and [libxslt](http://xmlsoft.org/XSLT/) libraries.\n\n#### Example Configuration\n\n``` nginx\nlocation / {\n    xml_entities    /site/dtd/entities.dtd;\n    xslt_stylesheet /site/xslt/one.xslt param=value;\n    xslt_stylesheet /site/xslt/two.xslt;\n}\n```\n\n#### Directives\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`xml_entities`**` `*`path`*`;` |\n| Default: | —                                |\n| Context: | `http`, `server`, `location`     |\n\nSpecifies the DTD file that declares character entities. This file is compiled at the configuration stage. For technical reasons, the module is unable to use the external subset declared in the processed XML, so it is ignored and a specially defined file is used instead. This file should not describe the XML structure. It is enough to declare just the required character entities, for example:\n\n``` nginx\n<!ENTITY nbsp \"&#xa0;\">\n```\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`xslt_last_modified`**` on | off;` |\n| Default: | `xslt_last_modified off;`            |\n| Context: | `http`, `server`, `location`         |\n\nThis directive appeared in version 1.5.1.\n\nAllows preserving the “Last-Modified” header field from the original response during XSLT transformations to facilitate response caching.\n\nBy default, the header field is removed as contents of the response are modified during transformations and may contain dynamically generated elements or parts that are changed independently of the original response.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`xslt_param`**` `*`parameter`*` `*`value`*`;` |\n| Default: | —                                               |\n| Context: | `http`, `server`, `location`                    |\n\nThis directive appeared in version 1.1.18.\n\nDefines the parameters for XSLT stylesheets. The *`value`* is treated as an XPath expression. The *`value`* can contain variables. To pass a string value to a stylesheet, the [xslt_string_param](#xslt_string_param) directive can be used.\n\nThere could be several `xslt_param` directives. These directives are inherited from the previous configuration level if and only if there are no `xslt_param` and [xslt_string_param](#xslt_string_param) directives defined on the current level.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`xslt_string_param`**` `*`parameter`*` `*`value`*`;` |\n| Default: | —                                                      |\n| Context: | `http`, `server`, `location`                           |\n\nThis directive appeared in version 1.1.18.\n\nDefines the string parameters for XSLT stylesheets. XPath expressions in the *`value`* are not interpreted. The *`value`* can contain variables.\n\nThere could be several `xslt_string_param` directives. These directives are inherited from the previous configuration level if and only if there are no [xslt_param](#xslt_param) and `xslt_string_param` directives defined on the current level.\n\n|          |                                                                             |\n|----------|-----------------------------------------------------------------------------|\n| Syntax:  | **`xslt_stylesheet`**` `*`stylesheet`*` [`*`parameter`*`=`*`value`*` ...];` |\n| Default: | —                                                                           |\n| Context: | `location`                                                                  |\n\nDefines the XSLT stylesheet and its optional parameters. A stylesheet is compiled at the configuration stage.\n\nParameters can either be specified separately, or grouped in a single line using the “`:`” delimiter. If a parameter includes the “`:`” character, it should be escaped as “`%3A`”. Also, `libxslt` requires to enclose parameters that contain non-alphanumeric characters into single or double quotes, for example:\n\n``` nginx\nparam1='http%3A//www.example.com':param2=value2\n```\n\nThe parameters description can contain variables, for example, the whole line of parameters can be taken from a single variable:\n\n``` nginx\nlocation / {\n    xslt_stylesheet /site/xslt/one.xslt\n                    $arg_xslt_params\n                    param1='$value1':param2=value2\n                    param3=value3;\n}\n```\n\nIt is possible to specify several stylesheets. They will be applied sequentially in the specified order.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`xslt_types`**` `*`mime-type`*` ...;` |\n| Default: | `xslt_types text/xml;`                  |\n| Context: | `http`, `server`, `location`            |\n\nEnables transformations in responses with the specified MIME types in addition to “`text/xml`”. The special value “`*`” matches any MIME type (0.8.29). If the transformation result is an HTML response, its MIME type is changed to “`text/html`”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_xslt_module.html](https://nginx.org/en/docs/http/ngx_http_xslt_module.html)"
- name: ngx_mail_auth_http_module
  id: mail/ngx_mail_auth_http_module
  summary: Sets the URL of the HTTP authentication server
  description: "# Module ngx_mail_auth_http_module\n\n- [Directives](#directives)\n- [auth_http](#auth_http)\n- [auth_http_header](#auth_http_header)\n- [auth_http_pass_client_cert](#auth_http_pass_client_cert)\n- [auth_http_timeout](#auth_http_timeout)\n- [Protocol](#protocol)\n\n#### Directives\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`auth_http`**` `*`URL`*`;` |\n| Default: | —                            |\n| Context: | `mail`, `server`             |\n\nSets the URL of the HTTP authentication server. The protocol is described [below](#protocol).\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`auth_http_header`**` `*`header`*` `*`value`*`;` |\n| Default: | —                                                  |\n| Context: | `mail`, `server`                                   |\n\nAppends the specified header to requests sent to the authentication server. This header can be used as the shared secret to verify that the request comes from nginx. For example:\n\n``` nginx\nauth_http_header X-Auth-Key \"secret_string\";\n```\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`auth_http_pass_client_cert`**` on | off;` |\n| Default: | `auth_http_pass_client_cert off;`            |\n| Context: | `mail`, `server`                             |\n\nThis directive appeared in version 1.7.11.\n\nAppends the “Auth-SSL-Cert” header with the [client](ngx_mail_ssl_module#ssl_verify_client) certificate in the PEM format (urlencoded) to requests sent to the authentication server.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`auth_http_timeout`**` `*`time`*`;` |\n| Default: | `auth_http_timeout 60s;`              |\n| Context: | `mail`, `server`                      |\n\nSets the timeout for communication with the authentication server.\n\n#### Protocol\n\nThe HTTP protocol is used to communicate with the authentication server. The data in the response body is ignored, the information is passed only in the headers.\n\nExamples of requests and responses:\n\nRequest:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: plain # plain/apop/cram-md5/external\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap # imap/pop3/smtp\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\n```\n\nGood response:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 198.51.100.1\nAuth-Port: 143\n```\n\nBad response:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: Invalid login or password\nAuth-Wait: 3\n```\n\nIf there is no “Auth-Wait” header, an error will be returned and the connection will be closed. The current implementation allocates memory for each authentication attempt. The memory is freed only at the end of a session. Therefore, the number of invalid authentication attempts in a single session must be limited — the server must respond without the “Auth-Wait” header after 10-20 attempts (the attempt number is passed in the “Auth-Login-Attempt” header).\n\nWhen the APOP or CRAM-MD5 are used, request-response will look as follows:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: apop\nAuth-User: user\nAuth-Salt: <238188073.1163692009@mail.example.com>\nAuth-Pass: auth_response\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\n```\n\nGood response:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 198.51.100.1\nAuth-Port: 143\nAuth-Pass: plain-text-pass\n```\n\nIf the “Auth-User” header exists in the response, it overrides the username used to authenticate with the backend.\n\nFor the SMTP, the response additionally takes into account the “Auth-Error-Code” header — if exists, it is used as a response code in case of an error. Otherwise, the 535 5.7.0 code will be added to the “Auth-Status” header.\n\nFor example, if the following response is received from the authentication server:\n\n``` nginx\nHTTP/1.0 200 OK\nAuth-Status: Temporary server problem, try again later\nAuth-Error-Code: 451 4.3.0\nAuth-Wait: 3\n```\n\nthen the SMTP client will receive an error\n\n``` nginx\n451 4.3.0 Temporary server problem, try again later\n```\n\nIf proxying SMTP does not require authentication, the request will look as follows:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: none\nAuth-User:\nAuth-Pass:\nAuth-Protocol: smtp\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nClient-Host: client.example.org\nAuth-SMTP-Helo: client.example.org\nAuth-SMTP-From: MAIL FROM: <>\nAuth-SMTP-To: RCPT TO: <postmaster@mail.example.com>\n```\n\nFor the SSL/TLS client connection (1.7.11), the “Auth-SSL” header is added, and “Auth-SSL-Verify” will contain the result of client certificate verification, if [enabled](ngx_mail_ssl_module#ssl_verify_client): “`SUCCESS`”, “`FAILED:`*`reason`*”, and “`NONE`” if a certificate was not present.\n\nPrior to version 1.11.7, the “`FAILED`” result did not contain the *`reason`* string.\n\nWhen the client certificate was present, its details are passed in the following request headers: “Auth-SSL-Subject”, “Auth-SSL-Issuer”, “Auth-SSL-Serial”, and “Auth-SSL-Fingerprint”. If [auth_http_pass_client_cert](#auth_http_pass_client_cert) is enabled, the certificate itself is passed in the “Auth-SSL-Cert” header. The protocol and cipher of the established connection are passed in the “Auth-SSL-Protocol” and “Auth-SSL-Cipher” headers (1.21.2). The request will look as follows:\n\n``` nginx\nGET /auth HTTP/1.0\nHost: localhost\nAuth-Method: plain\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.0.2.42\nAuth-SSL: on\nAuth-SSL-Protocol: TLSv1.3\nAuth-SSL-Cipher: TLS_AES_256_GCM_SHA384\nAuth-SSL-Verify: SUCCESS\nAuth-SSL-Subject: /CN=example.com\nAuth-SSL-Issuer: /CN=example.com\nAuth-SSL-Serial: C07AD56B846B5BFF\nAuth-SSL-Fingerprint: 29d6a80a123d13355ed16b4b04605e29cb55a5ad\n```\n\nWhen the [PROXY protocol](ngx_mail_core_module#proxy_protocol) is used, its details are passed in the following request headers: “Proxy-Protocol-Addr”, “Proxy-Protocol-Port”, “Proxy-Protocol-Server-Addr”, and “Proxy-Protocol-Server-Port” (1.19.8).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html](https://nginx.org/en/docs/mail/ngx_mail_auth_http_module.html)"
- name: ngx_mail_core_module
  id: mail/ngx_mail_core_module
  summary: This module is not built by default, it should be enabled with the --with-mail configuration parameter
  description: "# Module ngx_mail_core_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [listen](#listen)\n- [mail](#mail)\n- [max_errors](#max_errors)\n- [protocol](#protocol)\n- [resolver](#resolver)\n- [resolver_timeout](#resolver_timeout)\n- [server](#server)\n- [server_name](#server_name)\n- [timeout](#timeout)\n\nThis module is not built by default, it should be enabled with the `--with-mail` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nworker_processes auto;\n\nerror_log /var/log/nginx/error.log info;\n\nevents {\n    worker_connections  1024;\n}\n\nmail {\n    server_name       mail.example.com;\n    auth_http         localhost:9000/cgi-bin/nginxauth.cgi;\n\n    imap_capabilities IMAP4rev1 UIDPLUS IDLE LITERAL+ QUOTA;\n\n    pop3_auth         plain apop cram-md5;\n    pop3_capabilities LAST TOP USER PIPELINING UIDL;\n\n    smtp_auth         login plain cram-md5;\n    smtp_capabilities \"SIZE 10485760\" ENHANCEDSTATUSCODES 8BITMIME DSN;\n    xclient           off;\n\n    server {\n        listen   25;\n        protocol smtp;\n    }\n    server {\n        listen   110;\n        protocol pop3;\n        proxy_pass_error_message on;\n    }\n    server {\n        listen   143;\n        protocol imap;\n    }\n    server {\n        listen   587;\n        protocol smtp;\n    }\n}\n```\n\n#### Directives\n\n|          |                                                                                                                                                                                                                                  |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`listen`**` `*`address`*`:`*`port`*` [ssl] [proxy_protocol] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [bind] [ipv6only=on|off] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` |\n| Default: | —                                                                                                                                                                                                                                |\n| Context: | `server`                                                                                                                                                                                                                         |\n\nSets the *`address`* and *`port`* for the socket on which the server will accept requests. It is possible to specify just the port. The address can also be a hostname, for example:\n\n``` nginx\nlisten 127.0.0.1:110;\nlisten *:110;\nlisten 110;     # same as *:110\nlisten localhost:110;\n```\n\nIPv6 addresses (0.7.58) are specified in square brackets:\n\n``` nginx\nlisten [::1]:110;\nlisten [::]:110;\n```\n\nUNIX-domain sockets (1.3.5) are specified with the “`unix:`” prefix:\n\n``` nginx\nlisten unix:/var/run/nginx.sock;\n```\n\nDifferent servers must listen on different *`address`*:*`port`* pairs.\n\nThe `ssl` parameter allows specifying that all connections accepted on this port should work in SSL mode.\n\nThe `proxy_protocol` parameter (1.19.8) allows specifying that all connections accepted on this port should use the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt). Obtained information is passed to the [authentication server](ngx_mail_auth_http_module#proxy_protocol) and can be used to [change the client address](ngx_mail_realip_module).\n\nThe `listen` directive can have several additional parameters specific to socket-related system calls.\n\n`backlog`=*`number`*  \nsets the `backlog` parameter in the `listen()` call that limits the maximum length for the queue of pending connections (1.9.2). By default, `backlog` is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.\n\n`rcvbuf`=*`size`*  \nsets the receive buffer size (the `SO_RCVBUF` option) for the listening socket (1.11.13).\n\n`sndbuf`=*`size`*  \nsets the send buffer size (the `SO_SNDBUF` option) for the listening socket (1.11.13).\n\n`bind`  \nthis parameter instructs to make a separate `bind()` call for a given address:port pair. The fact is that if there are several `listen` directives with the same port but different addresses, and one of the `listen` directives listens on all addresses for the given port (`*:`*`port`*), nginx will `bind()` only to `*:`*`port`*. It should be noted that the `getsockname()` system call will be made in this case to determine the address that accepted the connection. If the `backlog`, `rcvbuf`, `sndbuf`, `ipv6only`, or `so_keepalive` parameters are used then for a given *`address`*:*`port`* pair a separate `bind()` call will always be made.\n\n`ipv6only`=`on`\\|`off`  \nthis parameter determines (via the `IPV6_V6ONLY` socket option) whether an IPv6 socket listening on a wildcard address `[::]` will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.\n\n`so_keepalive`=`on`\\|`off`\\|\\[*`keepidle`*\\]:\\[*`keepintvl`*\\]:\\[*`keepcnt`*\\]  \nthis parameter configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “`on`”, the `SO_KEEPALIVE` option is turned on for the socket. If it is set to the value “`off`”, the `SO_KEEPALIVE` option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the `TCP_KEEPIDLE`, `TCP_KEEPINTVL`, and `TCP_KEEPCNT` socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the *`keepidle`*, *`keepintvl`*, and *`keepcnt`* parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example,\n\n``` nginx\nso_keepalive=30m::10\n```\n\nwill set the idle timeout (`TCP_KEEPIDLE`) to 30 minutes, leave the probe interval (`TCP_KEEPINTVL`) at its system default, and set the probes count (`TCP_KEEPCNT`) to 10 probes.\n\n|          |                      |\n|----------|----------------------|\n| Syntax:  | **`mail`**` { ... }` |\n| Default: | —                    |\n| Context: | `main`               |\n\nProvides the configuration file context in which the mail server directives are specified.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`max_errors`**` `*`number`*`;` |\n| Default: | `max_errors 5;`                  |\n| Context: | `mail`, `server`                 |\n\nThis directive appeared in version 1.21.0.\n\nSets the number of protocol errors after which the connection is closed.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`protocol`**` imap | pop3 | smtp;` |\n| Default: | —                                    |\n| Context: | `server`                             |\n\nSets the protocol for a proxied server. Supported protocols are [IMAP](ngx_mail_imap_module), [POP3](ngx_mail_pop3_module), and [SMTP](ngx_mail_smtp_module).\n\nIf the directive is not set, the protocol can be detected automatically based on the well-known port specified in the [listen](#listen) directive:\n\n- `imap`: 143, 993\n- `pop3`: 110, 995\n- `smtp`: 25, 587, 465\n\nUnnecessary protocols can be disabled using the [configuration](../configure) parameters `--without-mail_imap_module`, `--without-mail_pop3_module`, and `--without-mail_smtp_module`.\n\n|          |                                                                                                                                   |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`resolver`**` `*`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` **`resolver`**` off;` |\n| Default: | `resolver off;`                                                                                                                   |\n| Context: | `mail`, `server`                                                                                                                  |\n\nConfigures name servers used to find the client’s hostname to pass it to the [authentication server](ngx_mail_auth_http_module), and in the [XCLIENT](ngx_mail_proxy_module#xclient) command when proxying SMTP. For example:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353;\n```\n\nThe address can be specified as a domain name or IP address, with an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.\n\nBefore version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2.\n\nBy default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.\n\nResolving of names into IPv6 addresses is supported starting from version 1.5.8.\n\nBy default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n```\n\nBefore version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes.\n\nTo prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.\n\nThe optional `status_zone` parameter (1.17.1) enables [collection](../http/ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*. The parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\nThe special value `off` disables resolving.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`resolver_timeout`**` `*`time`*`;` |\n| Default: | `resolver_timeout 30s;`              |\n| Context: | `mail`, `server`                     |\n\nSets a timeout for DNS operations, for example:\n\n``` nginx\nresolver_timeout 5s;\n```\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`server`**` { ... }` |\n| Default: | —                      |\n| Context: | `mail`                 |\n\nSets the configuration for a server.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`server_name`**` `*`name`*`;` |\n| Default: | `server_name hostname;`         |\n| Context: | `mail`, `server`                |\n\nSets the server name that is used:\n\n- in the initial POP3/SMTP server greeting;\n- in the salt during the SASL CRAM-MD5 authentication;\n- in the `EHLO` command when connecting to the SMTP backend, if the passing of the [XCLIENT](ngx_mail_proxy_module#xclient) command is enabled.\n\nIf the directive is not specified, the machine’s hostname is used.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`timeout`**` `*`time`*`;` |\n| Default: | `timeout 60s;`              |\n| Context: | `mail`, `server`            |\n\nSets the timeout that is used before proxying to the backend starts.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_core_module.html](https://nginx.org/en/docs/mail/ngx_mail_core_module.html)"
- name: ngx_mail_imap_module
  id: mail/ngx_mail_imap_module
  summary: Sets permitted methods of authentication for IMAP clients
  description: "# Module ngx_mail_imap_module\n\n- [Directives](#directives)\n- [imap_auth](#imap_auth)\n- [imap_capabilities](#imap_capabilities)\n- [imap_client_buffer](#imap_client_buffer)\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`imap_auth`**` `*`method`*` ...;` |\n| Default: | `imap_auth plain;`                  |\n| Context: | `mail`, `server`                    |\n\nSets permitted methods of authentication for IMAP clients. Supported methods are:\n\n`plain`  \n[LOGIN](https://datatracker.ietf.org/doc/html/rfc3501), [AUTH=PLAIN](https://datatracker.ietf.org/doc/html/rfc4616)\n\n`login`  \n[AUTH=LOGIN](https://datatracker.ietf.org/doc/html/draft-murchison-sasl-login-00)\n\n`cram-md5`  \n[AUTH=CRAM-MD5](https://datatracker.ietf.org/doc/html/rfc2195). In order for this method to work, the password must be stored unencrypted.\n\n`external`  \n[AUTH=EXTERNAL](https://datatracker.ietf.org/doc/html/rfc4422) (1.11.6).\n\nPlain text authentication methods (the `LOGIN` command, `AUTH=PLAIN`, and `AUTH=LOGIN`) are always enabled, though if the `plain` and `login` methods are not specified, `AUTH=PLAIN` and `AUTH=LOGIN` will not be automatically included in [imap_capabilities](#imap_capabilities).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`imap_capabilities`**` `*`extension`*` ...;` |\n| Default: | `imap_capabilities IMAP4 IMAP4rev1 UIDPLUS;`   |\n| Context: | `mail`, `server`                               |\n\nSets the [IMAP protocol](https://datatracker.ietf.org/doc/html/rfc3501) extensions list that is passed to the client in response to the `CAPABILITY` command. The authentication methods specified in the [imap_auth](#imap_auth) directive and [STARTTLS](https://datatracker.ietf.org/doc/html/rfc2595) are automatically added to this list depending on the [starttls](ngx_mail_ssl_module#starttls) directive value.\n\nIt makes sense to specify the extensions supported by the IMAP backends to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies a client connection to the backend).\n\nThe current list of standardized extensions is published at [www.iana.org](http://www.iana.org/assignments/imap4-capabilities).\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`imap_client_buffer`**` `*`size`*`;` |\n| Default: | `imap_client_buffer 4k|8k;`            |\n| Context: | `mail`, `server`                       |\n\nSets the *`size`* of the buffer used for reading IMAP commands. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_imap_module.html](https://nginx.org/en/docs/mail/ngx_mail_imap_module.html)"
- name: ngx_mail_pop3_module
  id: mail/ngx_mail_pop3_module
  summary: Sets permitted methods of authentication for POP3 clients
  description: "# Module ngx_mail_pop3_module\n\n- [Directives](#directives)\n- [pop3_auth](#pop3_auth)\n- [pop3_capabilities](#pop3_capabilities)\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`pop3_auth`**` `*`method`*` ...;` |\n| Default: | `pop3_auth plain;`                  |\n| Context: | `mail`, `server`                    |\n\nSets permitted methods of authentication for POP3 clients. Supported methods are:\n\n`plain`  \n[USER/PASS](https://datatracker.ietf.org/doc/html/rfc1939), [AUTH PLAIN](https://datatracker.ietf.org/doc/html/rfc4616), [AUTH LOGIN](https://datatracker.ietf.org/doc/html/draft-murchison-sasl-login-00)\n\n`apop`  \n[APOP](https://datatracker.ietf.org/doc/html/rfc1939). In order for this method to work, the password must be stored unencrypted.\n\n`cram-md5`  \n[AUTH CRAM-MD5](https://datatracker.ietf.org/doc/html/rfc2195). In order for this method to work, the password must be stored unencrypted.\n\n`external`  \n[AUTH EXTERNAL](https://datatracker.ietf.org/doc/html/rfc4422) (1.11.6).\n\nPlain text authentication methods (`USER/PASS`, `AUTH PLAIN`, and `AUTH LOGIN`) are always enabled, though if the `plain` method is not specified, `AUTH PLAIN` and `AUTH LOGIN` will not be automatically included in [pop3_capabilities](#pop3_capabilities).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`pop3_capabilities`**` `*`extension`*` ...;` |\n| Default: | `pop3_capabilities TOP USER UIDL;`             |\n| Context: | `mail`, `server`                               |\n\nSets the [POP3 protocol](https://datatracker.ietf.org/doc/html/rfc2449) extensions list that is passed to the client in response to the `CAPA` command. The authentication methods specified in the [pop3_auth](#pop3_auth) directive ([SASL](https://datatracker.ietf.org/doc/html/rfc2449) extension) and [STLS](https://datatracker.ietf.org/doc/html/rfc2595) are automatically added to this list depending on the [starttls](ngx_mail_ssl_module#starttls) directive value.\n\nIt makes sense to specify the extensions supported by the POP3 backends to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies the client connection to the backend).\n\nThe current list of standardized extensions is published at [www.iana.org](http://www.iana.org/assignments/pop3-extension-mechanism).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_pop3_module.html](https://nginx.org/en/docs/mail/ngx_mail_pop3_module.html)"
- name: ngx_mail_proxy_module
  id: mail/ngx_mail_proxy_module
  summary: Sets the size of the buffer used for proxying
  description: "# Module ngx_mail_proxy_module\n\n- [Directives](#directives)\n- [proxy_buffer](#proxy_buffer)\n- [proxy_pass_error_message](#proxy_pass_error_message)\n- [proxy_protocol](#proxy_protocol)\n- [proxy_smtp_auth](#proxy_smtp_auth)\n- [proxy_timeout](#proxy_timeout)\n- [xclient](#xclient)\n\n#### Directives\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`proxy_buffer`**` `*`size`*`;` |\n| Default: | `proxy_buffer 4k|8k;`            |\n| Context: | `mail`, `server`                 |\n\nSets the size of the buffer used for proxying. By default, the buffer size is equal to one memory page. Depending on a platform, it is either 4K or 8K.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`proxy_pass_error_message`**` on | off;` |\n| Default: | `proxy_pass_error_message off;`            |\n| Context: | `mail`, `server`                           |\n\nIndicates whether to pass the error message obtained during the authentication on the backend to the client.\n\nUsually, if the authentication in nginx is a success, the backend cannot return an error. If it nevertheless returns an error, it means some internal error has occurred. In such case the backend message can contain information that should not be shown to the client. However, responding with an error for the correct password is a normal behavior for some POP3 servers. For example, CommuniGatePro informs a user about [mailbox overflow](http://www.stalker.com/CommuniGatePro/Alerts.html#Quota) or other events by periodically outputting the [authentication error](http://www.stalker.com/CommuniGatePro/POP.html#Alerts). The directive should be enabled in this case.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`proxy_protocol`**` on | off;` |\n| Default: | `proxy_protocol off;`            |\n| Context: | `mail`, `server`                 |\n\nThis directive appeared in version 1.19.8.\n\nEnables the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) for connections to a backend.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`proxy_smtp_auth`**` on | off;` |\n| Default: | `proxy_smtp_auth off;`            |\n| Context: | `mail`, `server`                  |\n\nThis directive appeared in version 1.19.4.\n\nEnables or disables user authentication on the SMTP backend using the `AUTH` command.\n\nIf [XCLIENT](#xclient) is also enabled, then the `XCLIENT` command will not send the `LOGIN` parameter.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_timeout`**` `*`timeout`*`;` |\n| Default: | `proxy_timeout 24h;`                 |\n| Context: | `mail`, `server`                     |\n\nSets the *`timeout`* between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed.\n\n|          |                           |\n|----------|---------------------------|\n| Syntax:  | **`xclient`**` on | off;` |\n| Default: | `xclient on;`             |\n| Context: | `mail`, `server`          |\n\nEnables or disables the passing of the [XCLIENT](http://www.postfix.org/XCLIENT_README.html) command with client parameters when connecting to the SMTP backend.\n\nWith `XCLIENT`, the MTA is able to write client information to the log and apply various limitations based on this data.\n\nIf `XCLIENT` is enabled then nginx passes the following commands when connecting to the backend:\n\n- `EHLO` with the [server name](ngx_mail_core_module#server_name)\n- ` XCLIENT `\n- `EHLO` or `HELO`, as passed by the client\n\nIf the name [found](ngx_mail_core_module#resolver) by the client IP address points to the same address, it is passed in the `NAME` parameter of the `XCLIENT` command. If the name could not be found, points to a different address, or [resolver](ngx_mail_core_module#resolver) is not specified, the `[UNAVAILABLE]` is passed in the `NAME` parameter. If an error has occurred in the process of resolving, the `[TEMPUNAVAIL]` value is used.\n\nIf `XCLIENT` is disabled then nginx passes the `EHLO` command with the [server name](ngx_mail_core_module#server_name) when connecting to the backend if the client has passed `EHLO`, or `HELO` with the server name, otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_proxy_module.html](https://nginx.org/en/docs/mail/ngx_mail_proxy_module.html)"
- name: ngx_mail_realip_module
  id: mail/ngx_mail_realip_module
  summary: The ngx_mail_realip_module module is used to change the client address and port to the ones sent in the PROXY protocol header (1.19.8)
  description: "# Module ngx_mail_realip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [set_real_ip_from](#set_real_ip_from)\n\nThe `ngx_mail_realip_module` module is used to change the client address and port to the ones sent in the PROXY protocol header (1.19.8). The PROXY protocol must be previously enabled by setting the [proxy_protocol](ngx_mail_core_module#proxy_protocol) parameter in the `listen` directive.\n\n#### Example Configuration\n\n``` nginx\nlisten 110 proxy_protocol;\n\nset_real_ip_from  192.168.1.0/24;\nset_real_ip_from  192.168.2.1;\nset_real_ip_from  2001:0db8::/32;\n```\n\n#### Directives\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`set_real_ip_from`**` `*`address`*` | `*`CIDR`*` | unix:;` |\n| Default: | —                                                            |\n| Context: | `mail`, `server`                                             |\n\nDefines trusted addresses that are known to send correct replacement addresses. If the special value `unix:` is specified, all UNIX-domain sockets will be trusted.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_realip_module.html](https://nginx.org/en/docs/mail/ngx_mail_realip_module.html)"
- name: ngx_mail_smtp_module
  id: mail/ngx_mail_smtp_module
  summary: Sets permitted methods of SASL authentication for SMTP clients
  description: "# Module ngx_mail_smtp_module\n\n- [Directives](#directives)\n- [smtp_auth](#smtp_auth)\n- [smtp_capabilities](#smtp_capabilities)\n- [smtp_client_buffer](#smtp_client_buffer)\n- [smtp_greeting_delay](#smtp_greeting_delay)\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`smtp_auth`**` `*`method`*` ...;` |\n| Default: | `smtp_auth plain login;`            |\n| Context: | `mail`, `server`                    |\n\nSets permitted methods of [SASL authentication](https://datatracker.ietf.org/doc/html/rfc2554) for SMTP clients. Supported methods are:\n\n`plain`  \n[AUTH PLAIN](https://datatracker.ietf.org/doc/html/rfc4616)\n\n`login`  \n[AUTH LOGIN](https://datatracker.ietf.org/doc/html/draft-murchison-sasl-login-00)\n\n`cram-md5`  \n[AUTH CRAM-MD5](https://datatracker.ietf.org/doc/html/rfc2195). In order for this method to work, the password must be stored unencrypted.\n\n`external`  \n[AUTH EXTERNAL](https://datatracker.ietf.org/doc/html/rfc4422) (1.11.6).\n\n`none`  \nAuthentication is not required.\n\nPlain text authentication methods (`AUTH PLAIN` and `AUTH LOGIN`) are always enabled, though if the `plain` and `login` methods are not specified, `AUTH PLAIN` and `AUTH LOGIN` will not be automatically included in [smtp_capabilities](#smtp_capabilities).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`smtp_capabilities`**` `*`extension`*` ...;` |\n| Default: | —                                              |\n| Context: | `mail`, `server`                               |\n\nSets the SMTP protocol extensions list that is passed to the client in response to the `EHLO` command. The authentication methods specified in the [smtp_auth](#smtp_auth) directive and [STARTTLS](https://datatracker.ietf.org/doc/html/rfc3207) are automatically added to this list depending on the [starttls](ngx_mail_ssl_module#starttls) directive value.\n\nIt makes sense to specify the extensions supported by the MTA to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies the client connection to the backend).\n\nThe current list of standardized extensions is published at [www.iana.org](http://www.iana.org/assignments/mail-parameters).\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`smtp_client_buffer`**` `*`size`*`;` |\n| Default: | `smtp_client_buffer 4k|8k;`            |\n| Context: | `mail`, `server`                       |\n\nSets the *`size`* of the buffer used for reading SMTP commands. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`smtp_greeting_delay`**` `*`time`*`;` |\n| Default: | `smtp_greeting_delay 0;`                |\n| Context: | `mail`, `server`                        |\n\nAllows setting a delay before sending an SMTP greeting in order to reject clients who fail to wait for the greeting before sending SMTP commands.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_smtp_module.html](https://nginx.org/en/docs/mail/ngx_mail_smtp_module.html)"
- name: ngx_mail_ssl_module
  id: mail/ngx_mail_ssl_module
  summary: The ngx_mail_ssl_module module provides the necessary support for a mail proxy server to work with the SSL/TLS protocol
  description: "# Module ngx_mail_ssl_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [ssl](#ssl)\n- [ssl_certificate](#ssl_certificate)\n- [ssl_certificate_key](#ssl_certificate_key)\n- [ssl_ciphers](#ssl_ciphers)\n- [ssl_client_certificate](#ssl_client_certificate)\n- [ssl_conf_command](#ssl_conf_command)\n- [ssl_crl](#ssl_crl)\n- [ssl_dhparam](#ssl_dhparam)\n- [ssl_ecdh_curve](#ssl_ecdh_curve)\n- [ssl_password_file](#ssl_password_file)\n- [ssl_prefer_server_ciphers](#ssl_prefer_server_ciphers)\n- [ssl_protocols](#ssl_protocols)\n- [ssl_session_cache](#ssl_session_cache)\n- [ssl_session_ticket_key](#ssl_session_ticket_key)\n- [ssl_session_tickets](#ssl_session_tickets)\n- [ssl_session_timeout](#ssl_session_timeout)\n- [ssl_trusted_certificate](#ssl_trusted_certificate)\n- [ssl_verify_client](#ssl_verify_client)\n- [ssl_verify_depth](#ssl_verify_depth)\n- [starttls](#starttls)\n\nThe `ngx_mail_ssl_module` module provides the necessary support for a mail proxy server to work with the SSL/TLS protocol.\n\nThis module is not built by default, it should be enabled with the `--with-mail_ssl_module` configuration parameter.\n\nThis module requires the [OpenSSL](http://www.openssl.org) library.\n\n#### Example Configuration\n\nTo reduce the processor load, it is recommended to\n\n- set the number of [worker processes](../ngx_core_module#worker_processes) equal to the number of processors,\n- enable the [shared](#ssl_session_cache_shared) session cache,\n- disable the [built-in](#ssl_session_cache_builtin) session cache,\n- and possibly increase the session [lifetime](#ssl_session_timeout) (by default, 5 minutes):\n\n``` nginx\nworker_processes auto;\n\nmail {\n\n    ...\n\n    server {\n        listen              993 ssl;\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        ssl_session_cache   shared:SSL:10m;\n        ssl_session_timeout 10m;\n\n        ...\n    }\n```\n\n#### Directives\n\n|          |                       |\n|----------|-----------------------|\n| Syntax:  | **`ssl`**` on | off;` |\n| Default: | `ssl off;`            |\n| Context: | `mail`, `server`      |\n\nThis directive was made obsolete in version 1.15.0 and was removed in version 1.25.1. The `ssl` parameter of the [listen](ngx_mail_core_module#listen) directive should be used instead.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                   |\n| Context: | `mail`, `server`                    |\n\nSpecifies a *`file`* with the certificate in the PEM format for the given server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file.\n\nSince version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA:\n\n``` nginx\nserver {\n    listen              993 ssl;\n\n    ssl_certificate     example.com.rsa.crt;\n    ssl_certificate_key example.com.rsa.key;\n\n    ssl_certificate     example.com.ecdsa.crt;\n    ssl_certificate_key example.com.ecdsa.key;\n\n    ...\n}\n```\n\nOnly OpenSSL 1.0.2 or higher supports separate certificate chains for different certificates. With older versions, only one certificate chain can be used.\n\nThe value `data`:*`certificate`* can be specified instead of the *`file`* (1.15.10), which loads a certificate without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                       |\n| Context: | `mail`, `server`                        |\n\nSpecifies a *`file`* with the secret key in the PEM format for the given server.\n\nThe value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.\n\nThe value `data`:*`key`* can be specified instead of the *`file`* (1.15.10), which loads a secret key without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `ssl_ciphers HIGH:!aNULL:!MD5;`    |\n| Context: | `mail`, `server`                   |\n\nSpecifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:\n\n``` nginx\nssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n```\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\nThe previous versions of nginx used [different](../http/configuring_https_servers#compatibility) ciphers by default.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`ssl_client_certificate`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `mail`, `server`                           |\n\nThis directive appeared in version 1.7.11.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\nThe list of certificates will be sent to clients. If this is not desired, the [ssl_trusted_certificate](#ssl_trusted_certificate) directive can be used.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                |\n| Context: | `mail`, `server`                                 |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html).\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `ssl_conf_command` directives can be specified on the same level:\n\n``` nginx\nssl_conf_command Options PrioritizeChaCha;\nssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;\n```\n\nThese directives are inherited from the previous configuration level if and only if there are no `ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`ssl_crl`**` `*`file`*`;` |\n| Default: | —                           |\n| Context: | `mail`, `server`            |\n\nThis directive appeared in version 1.7.11.\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`ssl_dhparam`**` `*`file`*`;` |\n| Default: | —                               |\n| Context: | `mail`, `server`                |\n\nThis directive appeared in version 0.7.2.\n\nSpecifies a *`file`* with DH parameters for DHE ciphers.\n\nBy default no parameters are set, and therefore DHE ciphers will not be used.\n\nPrior to version 1.11.0, builtin parameters were used by default.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_ecdh_curve`**` `*`curve`*`;` |\n| Default: | `ssl_ecdh_curve auto;`              |\n| Context: | `mail`, `server`                    |\n\nThis directive appeared in versions 1.1.0 and 1.0.6.\n\nSpecifies a *`curve`* for ECDHE ciphers.\n\nWhen using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example:\n\n``` nginx\nssl_ecdh_curve prime256v1:secp384r1;\n```\n\nThe special value `auto` (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or `prime256v1` with older versions.\n\nPrior to version 1.11.0, the `prime256v1` curve was used by default.\n\nWhen using OpenSSL 1.0.2 or higher, this directive sets the list of curves supported by the server. Thus, in order for ECDSA certificates to work, it is important to include the curves used in the certificates.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                     |\n| Context: | `mail`, `server`                      |\n\nThis directive appeared in version 1.7.3.\n\nSpecifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\nExample:\n\n``` nginx\nmail {\n    ssl_password_file /etc/keys/global.pass;\n    ...\n\n    server {\n        server_name mail1.example.com;\n        ssl_certificate_key /etc/keys/first.key;\n    }\n\n    server {\n        server_name mail2.example.com;\n\n        # named pipe can also be used instead of a file\n        ssl_password_file /etc/keys/fifo;\n        ssl_certificate_key /etc/keys/second.key;\n    }\n}\n```\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_prefer_server_ciphers`**` on | off;` |\n| Default: | `ssl_prefer_server_ciphers off;`            |\n| Context: | `mail`, `server`                            |\n\nSpecifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used.\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `mail`, `server`                                                             |\n\nEnables the specified protocols.\n\nThe `TLSv1.1` and `TLSv1.2` parameters (1.1.13, 1.0.12) work only when OpenSSL 1.0.1 or higher is used.\n\nThe `TLSv1.3` parameter (1.13.0) works only when OpenSSL 1.1.1 or higher is used.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                                                                               |\n|----------|-----------------------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_session_cache`**` off | none | [builtin[:`*`size`*`]] [shared:`*`name`*`:`*`size`*`];` |\n| Default: | `ssl_session_cache none;`                                                                     |\n| Context: | `mail`, `server`                                                                              |\n\nSets the types and sizes of caches that store session parameters. A cache can be of any of the following types:\n\n`off`  \nthe use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused.\n\n`none`  \nthe use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache.\n\n`builtin`  \na cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation.\n\n`shared`  \na cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several servers. It is also used to automatically generate, store, and periodically rotate TLS session ticket keys (1.23.2) unless configured explicitly using the [ssl_session_ticket_key](#ssl_session_ticket_key) directive.\n\nBoth cache types can be used simultaneously, for example:\n\n``` nginx\nssl_session_cache builtin:1000 shared:SSL:10m;\n```\n\nbut using only shared cache without the built-in cache should be more efficient.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`ssl_session_ticket_key`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `mail`, `server`                           |\n\nThis directive appeared in version 1.5.7.\n\nSets a *`file`* with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used.\n\nIf several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example:\n\n``` nginx\nssl_session_ticket_key current.key;\nssl_session_ticket_key previous.key;\n```\n\nThe *`file`* must contain 80 or 48 bytes of random data and can be created using the following command:\n\n``` nginx\nopenssl rand 80 > ticket.key\n```\n\nDepending on the file size either AES256 (for 80-byte keys, 1.11.8) or AES128 (for 48-byte keys) is used for encryption.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_session_tickets`**` on | off;` |\n| Default: | `ssl_session_tickets on;`             |\n| Context: | `mail`, `server`                      |\n\nThis directive appeared in version 1.5.9.\n\nEnables or disables session resumption through [TLS session tickets](https://datatracker.ietf.org/doc/html/rfc5077).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_session_timeout`**` `*`time`*`;` |\n| Default: | `ssl_session_timeout 5m;`               |\n| Context: | `mail`, `server`                        |\n\nSpecifies a time during which a client may reuse the session parameters.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `mail`, `server`                            |\n\nThis directive appeared in version 1.7.11.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\nIn contrast to the certificate set by [ssl_client_certificate](#ssl_client_certificate), the list of these certificates will not be sent to clients.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`ssl_verify_client`**` on | off | optional | optional_no_ca;` |\n| Default: | `ssl_verify_client off;`                                        |\n| Context: | `mail`, `server`                                                |\n\nThis directive appeared in version 1.7.11.\n\nEnables verification of client certificates. The verification result is passed in the “Auth-SSL-Verify” header of the [authentication](ngx_mail_auth_http_module#auth_http) request.\n\nThe `optional` parameter requests the client certificate and verifies it if the certificate is present.\n\nThe `optional_no_ca` parameter requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through requests [sent](ngx_mail_auth_http_module#auth_http_pass_client_cert) to the authentication server.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `ssl_verify_depth 1;`                  |\n| Context: | `mail`, `server`                       |\n\nThis directive appeared in version 1.7.11.\n\nSets the verification depth in the client certificates chain.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`starttls`**` on | off | only;` |\n| Default: | `starttls off;`                   |\n| Context: | `mail`, `server`                  |\n\n`on`  \nallow usage of the `STLS` command for the POP3 and the `STARTTLS` command for the IMAP and SMTP;\n\n`off`  \ndeny usage of the `STLS` and `STARTTLS` commands;\n\n`only`  \nrequire preliminary TLS transition.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html](https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html)"
- name: ngx_mgmt_module
  id: ngx_mgmt_module
  summary: The ngx_mgmt_module module enables reporting of current nginx installation to NGINX Management Suite Instance Manager (1.25.3)
  description: "# Module ngx_mgmt_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [connect_timeout](#connect_timeout)\n- [mgmt](#mgmt)\n- [read_timeout](#read_timeout)\n- [resolver](#resolver)\n- [resolver_timeout](#resolver_timeout)\n- [send_timeout](#send_timeout)\n- [ssl](#ssl)\n- [ssl_certificate](#ssl_certificate)\n- [ssl_certificate_key](#ssl_certificate_key)\n- [ssl_ciphers](#ssl_ciphers)\n- [ssl_crl](#ssl_crl)\n- [ssl_name](#ssl_name)\n- [ssl_password_file](#ssl_password_file)\n- [ssl_protocols](#ssl_protocols)\n- [ssl_server_name](#ssl_server_name)\n- [ssl_trusted_certificate](#ssl_trusted_certificate)\n- [ssl_verify](#ssl_verify)\n- [ssl_verify_depth](#ssl_verify_depth)\n- [usage_report](#usage_report)\n- [uuid_file](#uuid_file)\n\nThe `ngx_mgmt_module` module enables reporting of current nginx installation to [NGINX Management Suite Instance Manager](https://docs.nginx.com/nginx-management-suite/about/) (1.25.3). By default, nginx sends usage info to the Instance Manager located at `nginx-mgmt.local` every 30 minutes using the SSL connection. The system resolver is used unless a [custom resolver](#resolver) is configured and is invoked only once when the configuration is [loaded](beginners_guide#control).\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nmgmt {\n    usage_report endpoint=nginx-mgmt.local interval=30m;\n    resolver     DNS_IP;\n\n    uuid_file /var/lib/nginx/nginx.id;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers   DEFAULT;\n\n    ssl_certificate     client_cert.pem;\n    ssl_certificate_key client_cert.key;\n\n    # configure server certificate verification\n    # to validate the authenticity of NMS\n    ssl_trusted_certificate  trusted_ca_cert.crt;\n    ssl_verify               on;\n    ssl_verify_depth         2;\n}\n```\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`connect_timeout`**` `*`time`*`;` |\n| Default: | `connect_timeout 15s;`              |\n| Context: | `mgmt`                              |\n\nDefines a timeout for establishing a connection with the Instance Manager.\n\n|          |                      |\n|----------|----------------------|\n| Syntax:  | **`mgmt`**` { ... }` |\n| Default: | —                    |\n| Context: | `main`               |\n\nProvides the configuration file context in which the management server directives are specified.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`read_timeout`**` `*`time`*`;` |\n| Default: | `read_timeout 60s;`              |\n| Context: | `mgmt`                           |\n\nDefines a timeout for reading a response from the Instance Manager. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the Instance Manager does not transmit anything within this time, the connection is closed.\n\n|          |                                                                                                             |\n|----------|-------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`resolver`**` `*`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |\n| Default: | —                                                                                                           |\n| Context: | `mgmt`                                                                                                      |\n\nConfigures name servers used to resolve names of the Instance Manager into addresses, for example:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353;\n```\n\nThe address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.\n\nBy default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` or the `ipv6=off` parameter can be specified.\n\nBy default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n```\n\nTo prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.\n\nThe optional `status_zone` parameter enables [collection](ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`resolver_timeout`**` `*`time`*`;` |\n| Default: | `resolver_timeout 30s;`              |\n| Context: | `mgmt`                               |\n\nSets a timeout for name resolution.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`send_timeout`**` `*`time`*`;` |\n| Default: | `send_timeout 60s;`              |\n| Context: | `mgmt`                           |\n\nSets a timeout for transmitting a request to the Instance Manager. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the Instance Manager does not receive anything within this time, the connection is closed.\n\n|          |                       |\n|----------|-----------------------|\n| Syntax:  | **`ssl`**` on | off;` |\n| Default: | `ssl on;`             |\n| Context: | `mgmt`                |\n\nEnables the HTTPS protocol for all connections to the Instance Manager.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                   |\n| Context: | `mgmt`                              |\n\nSpecifies a *`file`* with the certificate in the PEM format used for authentication to the Instance Manager.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                       |\n| Context: | `mgmt`                                  |\n\nSpecifies a *`file`* with the secret key in the PEM format used for authentication to the Instance Manager.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `ssl_ciphers DEFAULT;`             |\n| Context: | `mgmt`                             |\n\nSpecifies the enabled ciphers for requests to the Instance Manager. The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`ssl_crl`**` `*`file`*`;` |\n| Default: | —                           |\n| Context: | `mgmt`                      |\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify) the certificate of the Instance Manager.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`ssl_name`**` `*`name`*`;` |\n| Default: | `ssl_name ssl_name host;`    |\n| Context: | `mgmt`                       |\n\nAllows overriding the server name used to [verify](#ssl_verify) the certificate of the Instance Manager and to be [passed through SNI](#ssl_server_name) when establishing a connection with the Instance Manager.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                     |\n| Context: | `mgmt`                                |\n\nSpecifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `mgmt`                                                                       |\n\nEnables the specified protocols for requests to the Instance Manager.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`ssl_server_name`**` on | off;` |\n| Default: | `ssl_server_name off;`            |\n| Context: | `mgmt`                            |\n\nEnables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the Instance Manager.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `mgmt`                                      |\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify) the certificate of the Instance Manager.\n\n|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`ssl_verify`**` on | off;` |\n| Default: | `ssl_verify off;`            |\n| Context: | `mgmt`                       |\n\nEnables or disables verification of the Instance Manager certificate.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `ssl_verify_depth 1;`                  |\n| Context: | `mgmt`                                 |\n\nSets the verification depth in the Instance Manager certificates chain.\n\n|          |                                                                      |\n|----------|----------------------------------------------------------------------|\n| Syntax:  | **`usage_report`**` [endpoint=`*`address`*`] [interval=`*`time`*`];` |\n| Default: | —                                                                    |\n| Context: | `mgmt`                                                               |\n\nSets the *`address`* and *`port`* for IP, or the *`path`* for a UNIX-domain socket on which the Instance Manager is installed, by default `nginx-mgmt.local`. The `interval` sets an interval between reports to the Instance Manager, by default 30m.\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`uuid_file`**` `*`file`*`;` |\n| Default: | `uuid_file logs/uuid;`        |\n| Context: | `mgmt`                        |\n\nSpecifies a *`file`* that keeps the ID of nginx instance.\n\nExamples:\n\n``` nginx\nuuid_file /var/lib/nginx/nginx.id; # path for Linux\nuuid_file /var/db/nginx/nginx.id;  # path for FreeBSD\n```\n\nChanging the file content directly should be avoided.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_mgmt_module.html](https://nginx.org/en/docs/ngx_mgmt_module.html)"
- name: ngx_otel_module
  id: ngx_otel_module
  summary: The ngx_otel_module module (1.23.4) provides OpenTelemetry distributed tracing support
  description: "# Module ngx_otel_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [otel_exporter](#otel_exporter)\n- [otel_service_name](#otel_service_name)\n- [otel_trace](#otel_trace)\n- [otel_trace_context](#otel_trace_context)\n- [otel_span_name](#otel_span_name)\n- [otel_span_attr](#otel_span_attr)\n- [Default span attributes](#span)\n- [Embedded Variables](#variables)\n\nThe `ngx_otel_module` module (1.23.4) provides [OpenTelemetry](https://opentelemetry.io) distributed tracing support. The module supports [W3C](https://w3c.github.io/trace-context) context propagation and OTLP/gRPC export protocol.\n\nThe source code of the module is available [here](https://github.com/nginxinc/nginx-otel). Download and install instructions are available [here](https://github.com/nginxinc/nginx-otel/blob/main/README.md).\n\nThe module is also available in a prebuilt `nginx-module-otel` [package](https://nginx.org/en/linux_packages.html#dynmodules) since 1.25.3 and in `nginx-plus-module-otel` package as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nload_module modules/ngx_otel_module.so;\n\nevents {\n}\n\nhttp {\n\n    otel_exporter {\n        endpoint localhost:4317;\n    }\n\n    server {\n        listen 127.0.0.1:8080;\n\n        location / {\n            otel_trace         on;\n            otel_trace_context inject;\n\n            proxy_pass http://backend;\n        }\n    }\n}\n```\n\n#### Directives\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`otel_exporter`**` { ... }` |\n| Default: | —                             |\n| Context: | `http`                        |\n\nSpecifies OTel data export parameters:\n\n`endpoint`  \nthe address of OTLP/gRPC endpoint that will accept telemetry data.\n\n`interval`  \nthe maximum interval between two exports, by default is `5` seconds.\n\n`batch_size`  \nthe maximum number of spans to be sent in one batch per worker, by default is `512`.\n\n`batch_count`  \nthe number of pending batches per worker, spans exceeding the limit are dropped, by default is `4`.\n\nExample:\n\n``` nginx\notel_exporter {\n    endpoint    localhost:4317;\n    interval    5s;\n    batch_size  512;\n    batch_count 4;\n}\n```\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`otel_service_name`**` `*`name`*`;`      |\n| Default: | `otel_service_name unknown_service:nginx;` |\n| Context: | `http`                                     |\n\nSets the “[`service.name`](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/#service)” attribute of the OTel resource.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`otel_trace`**` on | off | $variable;` |\n| Default: | `otel_trace off;`                        |\n| Context: | `http`, `server`, `location`             |\n\nEnables or disables OpenTelemetry tracing. The directive can also be enabled by specifying a variable:\n\n``` nginx\nsplit_clients \"$otel_trace_id\" $ratio_sampler {\n              10%              on;\n              *                off;\n}\n\nserver {\n    location / {\n        otel_trace         $ratio_sampler;\n        otel_trace_context inject;\n        proxy_pass         http://backend;\n    }\n}\n```\n\n|          |                                                                   |\n|----------|-------------------------------------------------------------------|\n| Syntax:  | **`otel_trace_context`**` extract | inject | propagate | ignore;` |\n| Default: | `otel_trace_context ignore;`                                      |\n| Context: | `http`, `server`, `location`                                      |\n\nSpecifies how to propagate [traceparent/tracestate](https://www.w3.org/TR/trace-context/#design-overview) headers:\n\n`extract`  \nuses an existing trace context from the request, so that the identifiers of a [trace](#var_otel_trace_id) and the [parent span](#var_otel_parent_id) are inherited from the incoming request.\n\n`inject`  \nadds a new context to the request, overwriting existing headers, if any.\n\n`propagate`  \nupdates the existing context (combines [extract](#extract) and [inject](#inject)).\n\n`ignore`  \nskips context headers processing.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`otel_span_name`**` `*`name`*`;` |\n| Default: | —                                  |\n| Context: | `http`, `server`, `location`       |\n\nDefines the name of the OTel [span](https://opentelemetry.io/docs/concepts/observability-primer/#spans). By default, it is a name of the location for a request. The name can contain variables.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`otel_span_attr`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                              |\n| Context: | `http`, `server`, `location`                   |\n\nAdds a custom OTel span attribute. The value can contain variables.\n\n#### Default span attributes\n\nThe following [span attributes](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/http.md) are added automatically:\n\n- `http.method`\n- `http.target`\n- `http.route`\n- `http.scheme`\n- `http.flavor`\n- `http.user_agent`\n- `http.request_content_length`\n- `http.response_content_length`\n- `http.status_code`\n- `net.host.name`\n- `net.host.port`\n- `net.sock.peer.addr`\n- `net.sock.peer.port`\n\n#### Embedded Variables\n\n`$otel_trace_id`  \nthe identifier of the trace the current span belongs to, for example, `56552bc4daa3bf39c08362527e1dd6c4`\n\n`$otel_span_id`  \nthe identifier of the current span, for example, `4c0b8531ec38ca59`\n\n`$otel_parent_id`  \nthe identifier of the parent span, for example, `dc94d281b0f884ea`\n\n`$otel_parent_sampled`  \nthe “`sampled`” flag of the parent span, can be “`1`” or “`0`”\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_otel_module.html](https://nginx.org/en/docs/ngx_otel_module.html)"
- name: ngx_stream_access_module
  id: stream/ngx_stream_access_module
  summary: The ngx_stream_access_module module (1.9.2) allows limiting access to certain client addresses
  description: "# Module ngx_stream_access_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [allow](#allow)\n- [deny](#deny)\n\nThe `ngx_stream_access_module` module (1.9.2) allows limiting access to certain client addresses.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    ...\n    deny  192.168.1.1;\n    allow 192.168.1.0/24;\n    allow 10.1.1.0/16;\n    allow 2001:0db8::/32;\n    deny  all;\n}\n```\n\nThe rules are checked in sequence until the first match is found. In this example, access is allowed only for IPv4 networks `10.1.1.0/16` and `192.168.1.0/24` excluding the address `192.168.1.1`, and for IPv6 network `2001:0db8::/32`.\n\n#### Directives\n\n|          |                                                         |\n|----------|---------------------------------------------------------|\n| Syntax:  | **`allow`**` `*`address`*` | `*`CIDR`*` | unix: | all;` |\n| Default: | —                                                       |\n| Context: | `stream`, `server`                                      |\n\nAllows access for the specified network or address. If the special value `unix:` is specified, allows access for all UNIX-domain sockets.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`deny`**` `*`address`*` | `*`CIDR`*` | unix: | all;` |\n| Default: | —                                                      |\n| Context: | `stream`, `server`                                     |\n\nDenies access for the specified network or address. If the special value `unix:` is specified, denies access for all UNIX-domain sockets.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_access_module.html](https://nginx.org/en/docs/stream/ngx_stream_access_module.html)"
- name: ngx_stream_core_module
  id: stream/ngx_stream_core_module
  summary: The ngx_stream_core_module module is available since version 1.9.0
  description: "# Module ngx_stream_core_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [listen](#listen)\n- [preread_buffer_size](#preread_buffer_size)\n- [preread_timeout](#preread_timeout)\n- [proxy_protocol_timeout](#proxy_protocol_timeout)\n- [resolver](#resolver)\n- [resolver_timeout](#resolver_timeout)\n- [server](#server)\n- [server_name](#server_name)\n- [server_names_hash_bucket_size](#server_names_hash_bucket_size)\n- [server_names_hash_max_size](#server_names_hash_max_size)\n- [stream](#stream)\n- [tcp_nodelay](#tcp_nodelay)\n- [variables_hash_bucket_size](#variables_hash_bucket_size)\n- [variables_hash_max_size](#variables_hash_max_size)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_core_module` module is available since version 1.9.0. This module is not built by default, it should be enabled with the `--with-stream` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nworker_processes auto;\n\nerror_log /var/log/nginx/error.log info;\n\nevents {\n    worker_connections  1024;\n}\n\nstream {\n    upstream backend {\n        hash $remote_addr consistent;\n\n        server backend1.example.com:12345 weight=5;\n        server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;\n        server unix:/tmp/backend3;\n    }\n\n    upstream dns {\n       server 192.168.0.1:53535;\n       server dns.example.com:53;\n    }\n\n    server {\n        listen 12345;\n        proxy_connect_timeout 1s;\n        proxy_timeout 3s;\n        proxy_pass backend;\n    }\n\n    server {\n        listen 127.0.0.1:53 udp reuseport;\n        proxy_timeout 20s;\n        proxy_pass dns;\n    }\n\n    server {\n        listen [::1]:12345;\n        proxy_pass unix:/tmp/stream.socket;\n    }\n}\n```\n\n#### Directives\n\n|          |                                                                                                                                                                                                                                                                                                                                                           |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`listen`**` `*`address`*`:`*`port`*` [default_server] [ssl] [udp] [proxy_protocol] [setfib=`*`number`*`] [fastopen=`*`number`*`] [backlog=`*`number`*`] [rcvbuf=`*`size`*`] [sndbuf=`*`size`*`] [accept_filter=`*`filter`*`] [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[`*`keepidle`*`]:[`*`keepintvl`*`]:[`*`keepcnt`*`]];` |\n| Default: | —                                                                                                                                                                                                                                                                                                                                                         |\n| Context: | `server`                                                                                                                                                                                                                                                                                                                                                  |\n\nSets the *`address`* and *`port`* for the socket on which the server will accept connections. It is possible to specify just the port. The address can also be a hostname, for example:\n\n``` nginx\nlisten 127.0.0.1:12345;\nlisten *:12345;\nlisten 12345;     # same as *:12345\nlisten localhost:12345;\n```\n\nIPv6 addresses are specified in square brackets:\n\n``` nginx\nlisten [::1]:12345;\nlisten [::]:12345;\n```\n\nUNIX-domain sockets are specified with the “`unix:`” prefix:\n\n``` nginx\nlisten unix:/var/run/nginx.sock;\n```\n\nPort ranges (1.15.10) are specified with the first and last port separated by a hyphen:\n\n``` nginx\nlisten 127.0.0.1:12345-12399;\nlisten 12345-12399;\n```\n\nThe `default_server` parameter, if present, will cause the server to become the default server for the specified *`address`*:*`port`* pair (1.25.5). If none of the directives have the `default_server` parameter then the first server with the *`address`*:*`port`* pair will be the default server for this pair.\n\nThe `ssl` parameter allows specifying that all connections accepted on this port should work in SSL mode.\n\nThe `udp` parameter configures a listening socket for working with datagrams (1.9.13). In order to handle packets from the same address and port in the same session, the [`reuseport`](#reuseport) parameter should also be specified.\n\nThe `proxy_protocol` parameter (1.11.4) allows specifying that all connections accepted on this port should use the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt).\n\nThe PROXY protocol version 2 is supported since version 1.13.11.\n\nThe `listen` directive can have several additional parameters specific to socket-related system calls. These parameters can be specified in any `listen` directive, but only once for a given *`address`*:*`port`* pair.\n\n`setfib`=*`number`*  \nthis parameter (1.25.5) sets the associated routing table, FIB (the `SO_SETFIB` option) for the listening socket. This currently works only on FreeBSD.\n\n`fastopen`=*`number`*  \nenables “[TCP Fast Open](http://en.wikipedia.org/wiki/TCP_Fast_Open)” for the listening socket (1.21.0) and [limits](https://datatracker.ietf.org/doc/html/rfc7413#section-5.1) the maximum length for the queue of connections that have not yet completed the three-way handshake.\n\nDo not enable this feature unless the server can handle receiving the [same SYN packet with data](https://datatracker.ietf.org/doc/html/rfc7413#section-6.1) more than once.\n\n`backlog`=*`number`*  \nsets the `backlog` parameter in the `listen()` call that limits the maximum length for the queue of pending connections (1.9.2). By default, `backlog` is set to -1 on FreeBSD, DragonFly BSD, and macOS, and to 511 on other platforms.\n\n`rcvbuf`=*`size`*  \nsets the receive buffer size (the `SO_RCVBUF` option) for the listening socket (1.11.13).\n\n`sndbuf`=*`size`*  \nsets the send buffer size (the `SO_SNDBUF` option) for the listening socket (1.11.13).\n\n`accept_filter`=*`filter`*  \nsets the name of accept filter (the `SO_ACCEPTFILTER` option) for the listening socket that filters incoming connections before passing them to `accept()` (1.25.5). This works only on FreeBSD and NetBSD 5.0+. Possible values are [dataready](http://man.freebsd.org/accf_data) and [httpready](http://man.freebsd.org/accf_http).\n\n`deferred`  \ninstructs to use a deferred `accept()` (the `TCP_DEFER_ACCEPT` socket option) on Linux (1.25.5).\n\n`bind`  \nthis parameter instructs to make a separate `bind()` call for a given address:port pair. The fact is that if there are several `listen` directives with the same port but different addresses, and one of the `listen` directives listens on all addresses for the given port (`*:`*`port`*), nginx will `bind()` only to `*:`*`port`*. It should be noted that the `getsockname()` system call will be made in this case to determine the address that accepted the connection. If the `setfib`, `fastopen`, `backlog`, `rcvbuf`, `sndbuf`, `accept_filter`, `deferred`, `ipv6only`, `reuseport`, or `so_keepalive` parameters are used then for a given *`address`*:*`port`* pair a separate `bind()` call will always be made.\n\n`ipv6only`=`on`\\|`off`  \nthis parameter determines (via the `IPV6_V6ONLY` socket option) whether an IPv6 socket listening on a wildcard address `[::]` will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.\n\n`reuseport`  \nthis parameter (1.9.1) instructs to create an individual listening socket for each worker process (using the `SO_REUSEPORT` socket option on Linux 3.9+ and DragonFly BSD, or `SO_REUSEPORT_LB` on FreeBSD 12+), allowing a kernel to distribute incoming connections between worker processes. This currently works only on Linux 3.9+, DragonFly BSD, and FreeBSD 12+ (1.15.1).\n\nInappropriate use of this option may have its security [implications](http://man7.org/linux/man-pages/man7/socket.7.html).\n\n`so_keepalive`=`on`\\|`off`\\|\\[*`keepidle`*\\]:\\[*`keepintvl`*\\]:\\[*`keepcnt`*\\]  \nthis parameter configures the “TCP keepalive” behavior for the listening socket. If this parameter is omitted then the operating system’s settings will be in effect for the socket. If it is set to the value “`on`”, the `SO_KEEPALIVE` option is turned on for the socket. If it is set to the value “`off`”, the `SO_KEEPALIVE` option is turned off for the socket. Some operating systems support setting of TCP keepalive parameters on a per-socket basis using the `TCP_KEEPIDLE`, `TCP_KEEPINTVL`, and `TCP_KEEPCNT` socket options. On such systems (currently, Linux 2.4+, NetBSD 5+, and FreeBSD 9.0-STABLE), they can be configured using the *`keepidle`*, *`keepintvl`*, and *`keepcnt`* parameters. One or two parameters may be omitted, in which case the system default setting for the corresponding socket option will be in effect. For example,\n\n``` nginx\nso_keepalive=30m::10\n```\n\nwill set the idle timeout (`TCP_KEEPIDLE`) to 30 minutes, leave the probe interval (`TCP_KEEPINTVL`) at its system default, and set the probes count (`TCP_KEEPCNT`) to 10 probes.\n\nBefore version 1.25.5, different servers must listen on different *`address`*:*`port`* pairs.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`preread_buffer_size`**` `*`size`*`;` |\n| Default: | `preread_buffer_size 16k;`              |\n| Context: | `stream`, `server`                      |\n\nThis directive appeared in version 1.11.5.\n\nSpecifies a *`size`* of the [preread](stream_processing#preread_phase) buffer.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`preread_timeout`**` `*`timeout`*`;` |\n| Default: | `preread_timeout 30s;`                 |\n| Context: | `stream`, `server`                     |\n\nThis directive appeared in version 1.11.5.\n\nSpecifies a *`timeout`* of the [preread](stream_processing#preread_phase) phase.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`proxy_protocol_timeout`**` `*`timeout`*`;` |\n| Default: | `proxy_protocol_timeout 30s;`                 |\n| Context: | `stream`, `server`                            |\n\nThis directive appeared in version 1.11.4.\n\nSpecifies a *`timeout`* for reading the PROXY protocol header to complete. If no entire header is transmitted within this time, the connection is closed.\n\n|          |                                                                                                             |\n|----------|-------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`resolver`**` `*`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |\n| Default: | —                                                                                                           |\n| Context: | `stream`, `server`                                                                                          |\n\nThis directive appeared in version 1.11.3.\n\nConfigures name servers used to resolve names of upstream servers into addresses, for example:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353;\n```\n\nThe address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.\n\nBy default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.\n\nBy default, nginx caches answers using the TTL value of a response. The optional `valid` parameter allows overriding it:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n```\n\nTo prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.\n\nThe optional `status_zone` parameter (1.17.1) enables [collection](../http/ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*. The parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\nBefore version 1.11.3, this directive was available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`resolver_timeout`**` `*`time`*`;` |\n| Default: | `resolver_timeout 30s;`              |\n| Context: | `stream`, `server`                   |\n\nThis directive appeared in version 1.11.3.\n\nSets a timeout for name resolution, for example:\n\n``` nginx\nresolver_timeout 5s;\n```\n\nBefore version 1.11.3, this directive was available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`server`**` { ... }` |\n| Default: | —                      |\n| Context: | `stream`               |\n\nSets the configuration for a virtual server. There is no clear separation between IP-based (based on the IP address) and name-based (based on the [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066)) (1.25.5) virtual servers. Instead, the [listen](#listen) directives describe all addresses and ports that should accept connections for the server, and the [server_name](#server_name) directive lists all server names.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`server_name`**` `*`name`*` ...;` |\n| Default: | `server_name \"\";`                   |\n| Context: | `server`                            |\n\nThis directive appeared in version 1.25.5.\n\nSets names of a virtual server, for example:\n\n``` nginx\nserver {\n    server_name example.com www.example.com;\n}\n```\n\nThe first name becomes the primary server name.\n\nServer names can include an asterisk (“`*`”) replacing the first or last part of a name:\n\n``` nginx\nserver {\n    server_name example.com *.example.com www.example.*;\n}\n```\n\nSuch names are called wildcard names.\n\nThe first two of the names mentioned above can be combined in one:\n\n``` nginx\nserver {\n    server_name .example.com;\n}\n```\n\nIt is also possible to use regular expressions in server names, preceding the name with a tilde (“`~`”):\n\n``` nginx\nserver {\n    server_name www.example.com ~^www\\d+\\.example\\.com$;\n}\n```\n\nRegular expressions can contain captures that can later be used in other directives:\n\n``` nginx\nserver {\n    server_name ~^(www\\.)?(.+)$;\n\n    proxy_pass www.$2:12345;\n}\n```\n\nNamed captures in regular expressions create variables that can later be used in other directives:\n\n``` nginx\nserver {\n    server_name ~^(www\\.)?(?<domain>.+)$;\n\n    proxy_pass www.$domain:12345;\n}\n```\n\nIf the directive’s parameter is set to “`$hostname`”, the machine’s hostname is inserted.\n\nDuring searching for a virtual server by name, if the name matches more than one of the specified variants, (e.g. both a wildcard name and regular expression match), the first matching variant will be chosen, in the following order of priority:\n\n1.  the exact name\n2.  the longest wildcard name starting with an asterisk, e.g. “`*.example.com`”\n3.  the longest wildcard name ending with an asterisk, e.g. “`mail.*`”\n4.  the first matching regular expression (in order of appearance in the configuration file)\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`server_names_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `server_names_hash_bucket_size 32|64|128;`        |\n| Context: | `stream`                                          |\n\nThis directive appeared in version 1.25.5.\n\nSets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`server_names_hash_max_size`**` `*`size`*`;` |\n| Default: | `server_names_hash_max_size 512;`              |\n| Context: | `stream`                                       |\n\nThis directive appeared in version 1.25.5.\n\nSets the maximum *`size`* of the server names hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`stream`**` { ... }` |\n| Default: | —                      |\n| Context: | `main`                 |\n\nProvides the configuration file context in which the stream server directives are specified.\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`tcp_nodelay`**` on | off;` |\n| Default: | `tcp_nodelay on;`             |\n| Context: | `stream`, `server`            |\n\nThis directive appeared in version 1.9.4.\n\nEnables or disables the use of the `TCP_NODELAY` option. The option is enabled for both client and proxied server connections.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`variables_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `variables_hash_bucket_size 64;`               |\n| Context: | `stream`                                       |\n\nThis directive appeared in version 1.11.2.\n\nSets the bucket size for the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`variables_hash_max_size`**` `*`size`*`;` |\n| Default: | `variables_hash_max_size 1024;`             |\n| Context: | `stream`                                    |\n\nThis directive appeared in version 1.11.2.\n\nSets the maximum *`size`* of the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).\n\n#### Embedded Variables\n\nThe `ngx_stream_core_module` module supports variables since 1.11.2.\n\n`$binary_remote_addr`  \nclient address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses\n\n`$bytes_received`  \nnumber of bytes received from a client (1.11.4)\n\n`$bytes_sent`  \nnumber of bytes sent to a client\n\n`$connection`  \nconnection serial number\n\n`$hostname`  \nhost name\n\n`$msec`  \ncurrent time in seconds with the milliseconds resolution\n\n`$nginx_version`  \nnginx version\n\n`$pid`  \nPID of the worker process\n\n`$protocol`  \nprotocol used to communicate with the client: `TCP` or `UDP` (1.11.4)\n\n`$proxy_protocol_addr`  \nclient address from the PROXY protocol header (1.11.4)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_port`  \nclient port from the PROXY protocol header (1.11.4)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_addr`  \nserver address from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_port`  \nserver port from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_tlv_`*`name`*  \nTLV from the PROXY Protocol header (1.23.2). The `name` can be a TLV type name or its numeric value. In the latter case, the value is hexadecimal and should be prefixed with `0x`:\n\n``` nginx\n$proxy_protocol_tlv_alpn\n$proxy_protocol_tlv_0x01\n```\n\nSSL TLVs can also be accessed by TLV type name or its numeric value, both prefixed by `ssl_`:\n\n``` nginx\n$proxy_protocol_tlv_ssl_version\n$proxy_protocol_tlv_ssl_0x21\n```\n\nThe following TLV type names are supported:\n\n- `alpn` (`0x01`) - upper layer protocol used over the connection\n- `authority` (`0x02`) - host name value passed by the client\n- `unique_id` (`0x05`) - unique connection id\n- `netns` (`0x30`) - name of the namespace\n- `ssl` (`0x20`) - binary SSL TLV structure\n\nThe following SSL TLV type names are supported:\n\n- `ssl_version` (`0x21`) - SSL version used in client connection\n- `ssl_cn` (`0x22`) - SSL certificate Common Name\n- `ssl_cipher` (`0x23`) - name of the used cipher\n- `ssl_sig_alg` (`0x24`) - algorithm used to sign the certificate\n- `ssl_key_alg` (`0x25`) - public-key algorithm\n\nAlso, the following special SSL TLV type name is supported:\n\n- `ssl_verify` - client SSL certificate verification result, zero if the client presented a certificate and it was successfully verified, and non-zero otherwise\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$remote_addr`  \nclient address\n\n`$remote_port`  \nclient port\n\n`$server_addr`  \nan address of the server which accepted a connection\n\nComputing a value of this variable usually requires one system call. To avoid a system call, the [listen](#listen) directives must specify addresses and use the `bind` parameter.\n\n`$server_port`  \nport of the server which accepted a connection\n\n`$session_time`  \nsession duration in seconds with a milliseconds resolution (1.11.4);\n\n`$status`  \nsession status (1.11.4), can be one of the following:\n\n`200`  \nsession completed successfully\n\n`400`  \nclient data could not be parsed, for example, the [PROXY protocol](#proxy_protocol) header\n\n`403`  \naccess forbidden, for example, when access is limited for [certain client addresses](ngx_stream_access_module)\n\n`500`  \ninternal server error\n\n`502`  \nbad gateway, for example, if an upstream server could not be selected or reached.\n\n`503`  \nservice unavailable, for example, when access is limited by the [number of connections](ngx_stream_limit_conn_module)\n\n`$time_iso8601`  \nlocal time in the ISO 8601 standard format\n\n`$time_local`  \nlocal time in the Common Log Format\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_core_module.html](https://nginx.org/en/docs/stream/ngx_stream_core_module.html)"
- name: ngx_stream_geo_module
  id: stream/ngx_stream_geo_module
  summary: The ngx_stream_geo_module module (1.11.3) creates variables with values depending on the client IP address
  description: "# Module ngx_stream_geo_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [geo](#geo)\n\nThe `ngx_stream_geo_module` module (1.11.3) creates variables with values depending on the client IP address.\n\n#### Example Configuration\n\n``` nginx\ngeo $geo {\n    default        0;\n\n    127.0.0.1      2;\n    192.168.1.0/24 1;\n    10.1.0.0/16    1;\n\n    ::1            2;\n    2001:0db8::/32 1;\n}\n```\n\n#### Directives\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`geo`**` [`*`$address`*`] `*`$variable`*` { ... }` |\n| Default: | —                                                    |\n| Context: | `stream`                                             |\n\nDescribes the dependency of values of the specified variable on the client IP address. By default, the address is taken from the `$remote_addr` variable, but it can also be taken from another variable, for example:\n\n``` nginx\ngeo $arg_remote_addr $geo {\n    ...;\n}\n```\n\nSince variables are evaluated only when used, the mere existence of even a large number of declared “`geo`” variables does not cause any extra costs for connection processing.\n\nIf the value of a variable does not represent a valid IP address then the “`255.255.255.255`” address is used.\n\nAddresses are specified either as prefixes in CIDR notation (including individual addresses) or as ranges.\n\nThe following special parameters are also supported:\n\n`delete`  \ndeletes the specified network.\n\n`default`  \na value set to the variable if the client address does not match any of the specified addresses. When addresses are specified in CIDR notation, “`0.0.0.0/0`” and “`::/0`” can be used instead of `default`. When `default` is not specified, the default value will be an empty string.\n\n`include`  \nincludes a file with addresses and values. There can be several inclusions.\n\n`ranges`  \nindicates that addresses are specified as ranges. This parameter should be the first. To speed up loading of a geo base, addresses should be put in ascending order.\n\nExample:\n\n``` nginx\ngeo $country {\n    default        ZZ;\n    include        conf/geo.conf;\n    delete         127.0.0.0/16;\n\n    127.0.0.0/24   US;\n    127.0.0.1/32   RU;\n    10.1.0.0/16    RU;\n    192.168.1.0/24 UK;\n}\n```\n\nThe `conf/geo.conf` file could contain the following lines:\n\n``` nginx\n10.2.0.0/16    RU;\n192.168.2.0/24 RU;\n```\n\nA value of the most specific match is used. For example, for the 127.0.0.1 address the value “`RU`” will be chosen, not “`US`”.\n\nExample with ranges:\n\n``` nginx\ngeo $country {\n    ranges;\n    default                   ZZ;\n    127.0.0.0-127.0.0.0       US;\n    127.0.0.1-127.0.0.1       RU;\n    127.0.0.1-127.0.0.255     US;\n    10.1.0.0-10.1.255.255     RU;\n    192.168.1.0-192.168.1.255 UK;\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_geo_module.html](https://nginx.org/en/docs/stream/ngx_stream_geo_module.html)"
- name: ngx_stream_geoip_module
  id: stream/ngx_stream_geoip_module
  summary: The ngx_stream_geoip_module module (1.11.3) creates variables with values depending on the client IP address, using the precompiled MaxMind databases
  description: "# Module ngx_stream_geoip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [geoip_country](#geoip_country)\n- [geoip_city](#geoip_city)\n- [geoip_org](#geoip_org)\n\nThe `ngx_stream_geoip_module` module (1.11.3) creates variables with values depending on the client IP address, using the precompiled [MaxMind](http://www.maxmind.com) databases.\n\nWhen using the databases with IPv6 support, IPv4 addresses are looked up as IPv4-mapped IPv6 addresses.\n\nThis module is not built by default, it should be enabled with the `--with-stream_geoip_module` configuration parameter.\n\nThis module requires the [MaxMind GeoIP](http://www.maxmind.com/app/c) library.\n\n#### Example Configuration\n\n``` nginx\nstream {\n    geoip_country         GeoIP.dat;\n    geoip_city            GeoLiteCity.dat;\n\n    map $geoip_city_continent_code $nearest_server {\n        default        example.com;\n        EU          eu.example.com;\n        NA          na.example.com;\n        AS          as.example.com;\n    }\n   ...\n}\n```\n\n#### Directives\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`geoip_country`**` `*`file`*`;` |\n| Default: | —                                 |\n| Context: | `stream`                          |\n\nSpecifies a database used to determine the country depending on the client IP address. The following variables are available when using this database:\n\n`$geoip_country_code`  \ntwo-letter country code, for example, “`RU`”, “`US`”.\n\n`$geoip_country_code3`  \nthree-letter country code, for example, “`RUS`”, “`USA`”.\n\n`$geoip_country_name`  \ncountry name, for example, “`Russian Federation`”, “`United States`”.\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`geoip_city`**` `*`file`*`;` |\n| Default: | —                              |\n| Context: | `stream`                       |\n\nSpecifies a database used to determine the country, region, and city depending on the client IP address. The following variables are available when using this database:\n\n`$geoip_area_code`  \ntelephone area code (US only).\n\nThis variable may contain outdated information since the corresponding database field is deprecated.\n\n`$geoip_city_continent_code`  \ntwo-letter continent code, for example, “`EU`”, “`NA`”.\n\n`$geoip_city_country_code`  \ntwo-letter country code, for example, “`RU`”, “`US`”.\n\n`$geoip_city_country_code3`  \nthree-letter country code, for example, “`RUS`”, “`USA`”.\n\n`$geoip_city_country_name`  \ncountry name, for example, “`Russian Federation`”, “`United States`”.\n\n`$geoip_dma_code`  \nDMA region code in US (also known as “metro code”), according to the [geotargeting](https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions) in Google AdWords API.\n\n`$geoip_latitude`  \nlatitude.\n\n`$geoip_longitude`  \nlongitude.\n\n`$geoip_region`  \ntwo-symbol country region code (region, territory, state, province, federal land and the like), for example, “`48`”, “`DC`”.\n\n`$geoip_region_name`  \ncountry region name (region, territory, state, province, federal land and the like), for example, “`Moscow City`”, “`District of Columbia`”.\n\n`$geoip_city`  \ncity name, for example, “`Moscow`”, “`Washington`”.\n\n`$geoip_postal_code`  \npostal code.\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`geoip_org`**` `*`file`*`;` |\n| Default: | —                             |\n| Context: | `stream`                      |\n\nSpecifies a database used to determine the organization depending on the client IP address. The following variable is available when using this database:\n\n`$geoip_org`  \norganization name, for example, “The University of Melbourne”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html](https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html)"
- name: ngx_stream_js_module
  id: stream/ngx_stream_js_module
  summary: The ngx_stream_js_module module is used to implement handlers in njs — a subset of the JavaScript language
  description: "# Module ngx_stream_js_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [js_access](#js_access)\n- [js_fetch_buffer_size](#js_fetch_buffer_size)\n- [js_fetch_ciphers](#js_fetch_ciphers)\n- [js_fetch_max_response_buffer_size](#js_fetch_max_response_buffer_size)\n- [js_fetch_protocols](#js_fetch_protocols)\n- [js_fetch_timeout](#js_fetch_timeout)\n- [js_fetch_trusted_certificate](#js_fetch_trusted_certificate)\n- [js_fetch_verify](#js_fetch_verify)\n- [js_fetch_verify_depth](#js_fetch_verify_depth)\n- [js_filter](#js_filter)\n- [js_import](#js_import)\n- [js_include](#js_include)\n- [js_path](#js_path)\n- [js_periodic](#js_periodic)\n- [js_preload_object](#js_preload_object)\n- [js_preread](#js_preread)\n- [js_set](#js_set)\n- [js_shared_dict_zone](#js_shared_dict_zone)\n- [js_var](#js_var)\n- [Session Object Properties](#properties)\n\nThe `ngx_stream_js_module` module is used to implement handlers in [njs](../njs/index) — a subset of the JavaScript language.\n\nDownload and install instructions are available [here](../njs/install).\n\n#### Example Configuration\n\nThe example works since [0.4.0](../njs/changes#njs0.4.0).\n\n``` nginx\nstream {\n    js_import stream.js;\n\n    js_set $bar stream.bar;\n    js_set $req_line stream.req_line;\n\n    server {\n        listen 12345;\n\n        js_preread stream.preread;\n        return     $req_line;\n    }\n\n    server {\n        listen 12346;\n\n        js_access  stream.access;\n        proxy_pass 127.0.0.1:8000;\n        js_filter  stream.header_inject;\n    }\n}\n\nhttp {\n    server {\n        listen 8000;\n        location / {\n            return 200 $http_foo\\n;\n        }\n    }\n}\n```\n\nThe `stream.js` file:\n\n``` nginx\nvar line = '';\n\nfunction bar(s) {\n    var v = s.variables;\n    s.log(\"hello from bar() handler!\");\n    return \"bar-var\" + v.remote_port + \"; pid=\" + v.pid;\n}\n\nfunction preread(s) {\n    s.on('upload', function (data, flags) {\n        var n = data.indexOf('\\n');\n        if (n != -1) {\n            line = data.substr(0, n);\n            s.done();\n        }\n    });\n}\n\nfunction req_line(s) {\n    return line;\n}\n\n// Read HTTP request line.\n// Collect bytes in 'req' until\n// request line is read.\n// Injects HTTP header into a client's request\n\nvar my_header =  'Foo: foo';\nfunction header_inject(s) {\n    var req = '';\n    s.on('upload', function(data, flags) {\n        req += data;\n        var n = req.search('\\n');\n        if (n != -1) {\n            var rest = req.substr(n + 1);\n            req = req.substr(0, n + 1);\n            s.send(req + my_header + '\\r\\n' + rest, flags);\n            s.off('upload');\n        }\n    });\n}\n\nfunction access(s) {\n    if (s.remoteAddress.match('^192.*')) {\n        s.deny();\n        return;\n    }\n\n    s.allow();\n}\n\nexport default {bar, preread, req_line, header_inject, access};\n```\n\n#### Directives\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`js_access`**` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                         |\n| Context: | `stream`, `server`                                        |\n\nSets an njs function which will be called at the [access](stream_processing#access_phase) phase. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.\n\nThe function is called once at the moment when the stream session reaches the [access](stream_processing#access_phase) phase for the first time. The function is called with the following arguments:\n\n`s`  \nthe [Stream Session](../njs/reference#stream) object\n\nAt this phase, it is possible to perform initialization or register a callback with the [`s.on()`](../njs/reference#s_on) method for each incoming data chunk until one of the following methods are called: [`s.allow()`](../njs/reference#s_allow), [`s.decline()`](../njs/reference#s_decline), [`s.done()`](../njs/reference#s_done). As soon as one of these methods is called, the stream session processing switches to the [next phase](stream_processing) and all current [`s.on()`](../njs/reference#s_on) callbacks are dropped.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`js_fetch_buffer_size`**` `*`size`*`;` |\n| Default: | `js_fetch_buffer_size 16k;`              |\n| Context: | `stream`, `server`                       |\n\nThis directive appeared in version 0.7.4.\n\nSets the *`size`* of the buffer used for reading and writing with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`js_fetch_ciphers`**` `*`ciphers`*`;` |\n| Default: | `js_fetch_ciphers HIGH:!aNULL:!MD5;`    |\n| Context: | `stream`, `server`                      |\n\nThis directive appeared in version 0.7.0.\n\nSpecifies the enabled ciphers for HTTPS connections with [Fetch API](../njs/reference#ngx_fetch). The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`js_fetch_max_response_buffer_size`**` `*`size`*`;` |\n| Default: | `js_fetch_max_response_buffer_size 1m;`               |\n| Context: | `stream`, `server`                                    |\n\nThis directive appeared in version 0.7.4.\n\nSets the maximum *`size`* of the response received with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                                                   |\n|----------|-------------------------------------------------------------------|\n| Syntax:  | **`js_fetch_protocols`**` [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `js_fetch_protocols TLSv1 TLSv1.1 TLSv1.2;`                       |\n| Context: | `stream`, `server`                                                |\n\nThis directive appeared in version 0.7.0.\n\nEnables the specified protocols for HTTPS connections with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`js_fetch_timeout`**` `*`time`*`;` |\n| Default: | `js_fetch_timeout 60s;`              |\n| Context: | `stream`, `server`                   |\n\nThis directive appeared in version 0.7.4.\n\nDefines a timeout for reading and writing for [Fetch API](../njs/reference#ngx_fetch). The timeout is set only between two successive read/write operations, not for the whole response. If no data is transmitted within this time, the connection is closed.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`js_fetch_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                |\n| Context: | `stream`, `server`                               |\n\nThis directive appeared in version 0.7.0.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](../njs/reference#fetch_verify) the HTTPS certificate with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`js_fetch_verify`**` on | off;` |\n| Default: | `js_fetch_verify on;`             |\n| Context: | `stream`, `server`                |\n\nThis directive appeared in version 0.7.4.\n\nEnables or disables verification of the HTTPS server certificate with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`js_fetch_verify_depth`**` `*`number`*`;` |\n| Default: | `js_fetch_verify_depth 100;`                |\n| Context: | `stream`, `server`                          |\n\nThis directive appeared in version 0.7.0.\n\nSets the verification depth in the HTTPS server certificates chain with [Fetch API](../njs/reference#ngx_fetch).\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`js_filter`**` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                         |\n| Context: | `stream`, `server`                                        |\n\nSets a data filter. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced. The filter function is called once at the moment when the stream session reaches the [content](stream_processing#content_phase) phase.\n\nThe filter function is called with the following arguments:\n\n`s`  \nthe [Stream Session](../njs/reference#stream) object\n\nAt this phase, it is possible to perform initialization or register a callback with the [`s.on()`](../njs/reference#s_on) method for each incoming data chunk. The [`s.off()`](../njs/reference#s_off) method may be used to unregister a callback and stop filtering.\n\nAs the `js_filter` handler returns its result immediately, it supports only synchronous operations. Thus, asynchronous operations such as [`ngx.fetch()`](../njs/reference#ngx_fetch) or [`setTimeout()`](../njs/reference#settimeout) are not supported.\n\n|          |                                                                       |\n|----------|-----------------------------------------------------------------------|\n| Syntax:  | **`js_import`**` `*`module.js`*` | `*`export_name from module.js`*`;` |\n| Default: | —                                                                     |\n| Context: | `stream`, `server`                                                    |\n\nThis directive appeared in version 0.4.0.\n\nImports a module that implements location and variable handlers in njs. The `export_name` is used as a namespace to access module functions. If the `export_name` is not specified, the module name will be used as a namespace.\n\n``` nginx\njs_import stream.js;\n```\n\nHere, the module name `stream` is used as a namespace while accessing exports. If the imported module exports `foo()`, `stream.foo` is used to refer to it.\n\nSeveral `js_import` directives can be specified.\n\nThe directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`js_include`**` `*`file`*`;` |\n| Default: | —                              |\n| Context: | `stream`                       |\n\nSpecifies a file that implements server and variable handlers in njs:\n\n``` nginx\nnginx.conf:\njs_include stream.js;\njs_set     $js_addr address;\nserver {\n    listen 127.0.0.1:12345;\n    return $js_addr;\n}\n\nstream.js:\nfunction address(s) {\n    return s.remoteAddress;\n}\n```\n\nThe directive was made obsolete in version [0.4.0](../njs/changes#njs0.4.0) and was removed in version [0.7.1](../njs/changes#njs0.7.1). The [js_import](#js_import) directive should be used instead.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`js_path`**` `*`path`*`;` |\n| Default: | —                           |\n| Context: | `stream`, `server`          |\n\nThis directive appeared in version 0.3.0.\n\nSets an additional path for njs modules.\n\nThe directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                                                                                                                      |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`js_periodic`**` `*`function`*` | `*`module.function`*` [interval=`*`time`*`] [jitter=`*`number`*`] [worker_affinity=`*`mask`*`];` |\n| Default: | —                                                                                                                                    |\n| Context: | `server`                                                                                                                             |\n\nThis directive appeared in version 0.8.1.\n\nSpecifies a content handler to run at regular interval. The handler receives a [session object](../njs/reference#periodic_session) as its first argument, it also has access to global objects such as [ngx](../njs/reference#ngx).\n\nThe optional `interval` parameter sets the interval between two consecutive runs, by default, 5 seconds.\n\nThe optional `jitter` parameter sets the time within which the location content handler will be randomly delayed, by default, there is no delay.\n\nBy default, the `js_handler` is executed on worker process 0. The optional `worker_affinity` parameter allows specifying particular worker processes where the location content handler should be executed. Each worker process set is represented by a bitmask of allowed worker processes. The `all` mask allows the handler to be executed in all worker processes.\n\nExample:\n\n``` nginx\nexample.conf:\n\nlocation @periodics {\n    # to be run at 1 minute intervals in worker process 0\n    js_periodic main.handler interval=60s;\n\n    # to be run at 1 minute intervals in all worker processes\n    js_periodic main.handler interval=60s worker_affinity=all;\n\n    # to be run at 1 minute intervals in worker processes 1 and 3\n    js_periodic main.handler interval=60s worker_affinity=0101;\n\n    resolver 10.0.0.1;\n    js_fetch_trusted_certificate /path/to/ISRG_Root_X1.pem;\n}\n\nexample.js:\n\nasync function handler(s) {\n    let reply = await ngx.fetch('https://nginx.org/en/docs/njs/');\n    let body = await reply.text();\n\n    ngx.log(ngx.INFO, body);\n}\n```\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`js_preload_object`**` `*`name.json`*` | `*`name`*` from `*`file.json`*`;` |\n| Default: | —                                                                            |\n| Context: | `stream`, `server`                                                           |\n\nThis directive appeared in version 0.7.8.\n\nPreloads an [immutable object](../njs/preload_objects) at configure time. The `name` is used as a name of the global variable though which the object is available in njs code. If the `name` is not specified, the file name will be used instead.\n\n``` nginx\njs_preload_object map.json;\n```\n\nHere, the `map` is used as a name while accessing the preloaded object.\n\nSeveral `js_preload_object` directives can be specified.\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`js_preread`**` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                          |\n| Context: | `stream`, `server`                                         |\n\nSets an njs function which will be called at the [preread](stream_processing#preread_phase) phase. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.\n\nThe function is called once at the moment when the stream session reaches the [preread](stream_processing#preread_phase) phase for the first time. The function is called with the following arguments:\n\n`s`  \nthe [Stream Session](../njs/reference#stream) object\n\nAt this phase, it is possible to perform initialization or register a callback with the [`s.on()`](../njs/reference#s_on) method for each incoming data chunk until one of the following methods are called: [`s.allow()`](../njs/reference#s_allow), [`s.decline()`](../njs/reference#s_decline), [`s.done()`](../njs/reference#s_done). When one of these methods is called, the stream session switches to the [next phase](stream_processing) and all current [`s.on()`](../njs/reference#s_on) callbacks are dropped.\n\nAs the `js_preread` handler returns its result immediately, it supports only synchronous callbacks. Thus, asynchronous callbacks such as [`ngx.fetch()`](../njs/reference#ngx_fetch) or [`setTimeout()`](../njs/reference#settimeout) are not supported. Nevertheless, asynchronous operations are supported in [`s.on()`](../njs/reference#s_on) callbacks in the [preread](stream_processing#preread_phase) phase. See [this example](https://github.com/nginx/njs-examples#authorizing-connections-using-ngx-fetch-as-auth-request-stream-auth-request) for more information.\n\n|          |                                                                        |\n|----------|------------------------------------------------------------------------|\n| Syntax:  | **`js_set`**` `*`$variable`*` `*`function`*` | `*`module.function`*`;` |\n| Default: | —                                                                      |\n| Context: | `stream`, `server`                                                     |\n\nSets an njs `function` for the specified `variable`. Since [0.4.0](../njs/changes#njs0.4.0), a module function can be referenced.\n\nThe function is called when the variable is referenced for the first time for a given request. The exact moment depends on a [phase](stream_processing) at which the variable is referenced. This can be used to perform some logic not related to variable evaluation. For example, if the variable is referenced only in the [log_format](ngx_stream_log_module#log_format) directive, its handler will not be executed until the log phase. This handler can be used to do some cleanup right before the request is freed.\n\nAs the `js_set` handler returns its result immediately, it supports only synchronous callbacks. Thus, asynchronous callbacks such as [ngx.fetch()](../njs/reference#ngx_fetch) or [setTimeout()](../njs/reference#settimeout) are not supported.\n\nThe directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).\n\n|          |                                                                                                           |\n|----------|-----------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`js_shared_dict_zone`**` zone=`*`name`*`:`*`size`*` [timeout=`*`time`*`] [type=string|number] [evict];` |\n| Default: | —                                                                                                         |\n| Context: | `stream`                                                                                                  |\n\nThis directive appeared in version 0.8.0.\n\nSets the *`name`* and *`size`* of the shared memory zone that keeps the key-value [dictionary](../njs/reference#dict) shared between worker processes.\n\nBy default the shared dictionary uses a string as a key and a value. The optional `type` parameter allows redefining the value type to number.\n\nThe optional `timeout` parameter sets the time in milliseconds after which all shared dictionary entries are removed from the zone. If some entries require a different removal time, it can be set with the `timeout` argument of the [add](../njs/reference#dict_add), [incr](../njs/reference#dict_incr), and [set](../njs/reference#dict_set) methods ([0.8.5](../njs/changes#njs0.8.5)).\n\nThe optional `evict` parameter removes the oldest key-value pair when the zone storage is exhausted.\n\nExample:\n\n``` nginx\nexample.conf:\n    # Creates a 1Mb dictionary with string values,\n    # removes key-value pairs after 60 seconds of inactivity:\n    js_shared_dict_zone zone=foo:1M timeout=60s;\n\n    # Creates a 512Kb dictionary with string values,\n    # forcibly removes oldest key-value pairs when the zone is exhausted:\n    js_shared_dict_zone zone=bar:512K timeout=30s evict;\n\n    # Creates a 32Kb permanent dictionary with number values:\n    js_shared_dict_zone zone=num:32k type=number;\n\nexample.js:\n    function get(r) {\n        r.return(200, ngx.shared.foo.get(r.args.key));\n    }\n\n    function set(r) {\n        r.return(200, ngx.shared.foo.set(r.args.key, r.args.value));\n    }\n\n    function del(r) {\n        r.return(200, ngx.shared.bar.delete(r.args.key));\n    }\n\n    function increment(r) {\n        r.return(200, ngx.shared.num.incr(r.args.key, 2));\n    }\n```\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`js_var`**` `*`$variable`*` [`*`value`*`];` |\n| Default: | —                                             |\n| Context: | `stream`, `server`                            |\n\nThis directive appeared in version 0.5.3.\n\nDeclares a [writable](../njs/reference#r_variables) variable. The value can contain text, variables, and their combination.\n\nThe directive can be specified on the `server` level since [0.7.7](../njs/changes#njs0.7.7).\n\n#### Session Object Properties\n\nEach stream njs handler receives one argument, a stream session [object](../njs/reference#stream).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_js_module.html](https://nginx.org/en/docs/stream/ngx_stream_js_module.html)"
- name: ngx_stream_keyval_module
  id: stream/ngx_stream_keyval_module
  summary: The ngx_stream_keyval_module module (1.13.7) creates variables with values taken from key-value pairs managed by the API or a variable that can also be set with njs
  description: "# Module ngx_stream_keyval_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [keyval](#keyval)\n- [keyval_zone](#keyval_zone)\n\nThe `ngx_stream_keyval_module` module (1.13.7) creates variables with values taken from key-value pairs managed by the [API](../http/ngx_http_api_module#stream_keyvals_) or a variable that can also be set with [njs](https://github.com/nginx/njs-examples/).\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nhttp {\n\n    server {\n        ...\n        location /api {\n            api write=on;\n        }\n    }\n}\n\nstream {\n\n    keyval_zone zone=one:32k state=/var/lib/nginx/state/one.keyval;\n    keyval      $ssl_server_name $name zone=one;\n\n    server {\n        listen              12345 ssl;\n        proxy_pass          $name;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n    }\n}\n```\n\n#### Directives\n\n|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`keyval`**` `*`key`*` `*`$variable`*` zone=`*`name`*`;` |\n| Default: | —                                                         |\n| Context: | `stream`                                                  |\n\nCreates a new *`$variable`* whose value is looked up by the *`key`* in the key-value database. Matching rules are defined by the [`type`](#keyval_type) parameter of the [`keyval_zone`](#keyval_zone) directive. The database is stored in a shared memory zone specified by the `zone` parameter.\n\n|          |                                                                                                                        |\n|----------|------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`keyval_zone`**` zone=`*`name`*`:`*`size`*` [state=`*`file`*`] [timeout=`*`time`*`] [type=string|ip|prefix] [sync];` |\n| Default: | —                                                                                                                      |\n| Context: | `stream`                                                                                                               |\n\nSets the *`name`* and *`size`* of the shared memory zone that keeps the key-value database. Key-value pairs are managed by the [API](../http/ngx_http_api_module#stream_keyvals_).\n\nThe optional `state` parameter specifies a *`file`* that keeps the current state of the key-value database in the JSON format and makes it persistent across nginx restarts. Changing the file content directly should be avoided.\n\nExamples:\n\n``` nginx\nkeyval_zone zone=one:32k state=/var/lib/nginx/state/one.keyval; # path for Linux\nkeyval_zone zone=one:32k state=/var/db/nginx/state/one.keyval;  # path for FreeBSD\n```\n\nThe optional `timeout` parameter (1.15.0) sets the time after which key-value pairs are removed from the zone.\n\nThe optional `type` parameter (1.17.1) activates an extra index optimized for matching the key of a certain type and defines matching rules when evaluating a [keyval](#keyval) `$variable`.\n\nThe index is stored in the same shared memory zone and thus requires additional storage.\n\n`type=string`  \ndefault, no index is enabled; variable lookup is performed using exact match of the record key and a search key\n\n`type=ip`  \nthe search key is the textual representation of IPv4 or IPv6 address or CIDR range; to match a record key, the search key must belong to a subnet specified by a record key or exactly match an IP address\n\n`type=prefix`  \nvariable lookup is performed using prefix match of a record key and a search key (1.17.5); to match a record key, the record key must be a prefix of the search key\n\nThe optional `sync` parameter (1.15.0) enables [synchronization](ngx_stream_zone_sync_module#zone_sync) of the shared memory zone. The synchronization requires the `timeout` parameter to be set.\n\nIf the synchronization is enabled, removal of key-value pairs (no matter [one](../http/ngx_http_api_module#patchStreamKeyvalZoneKeyValue) or [all](../http/ngx_http_api_module#deleteStreamKeyvalZoneData)) will be performed only on a target cluster node. The same key-value pairs on other cluster nodes will be removed upon `timeout`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_keyval_module.html](https://nginx.org/en/docs/stream/ngx_stream_keyval_module.html)"
- name: ngx_stream_limit_conn_module
  id: stream/ngx_stream_limit_conn_module
  summary: The ngx_stream_limit_conn_module module (1.9.3) is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address
  description: "# Module ngx_stream_limit_conn_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [limit_conn](#limit_conn)\n- [limit_conn_dry_run](#limit_conn_dry_run)\n- [limit_conn_log_level](#limit_conn_log_level)\n- [limit_conn_zone](#limit_conn_zone)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_limit_conn_module` module (1.9.3) is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address.\n\n#### Example Configuration\n\n``` nginx\nstream {\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n\n    ...\n\n    server {\n\n        ...\n\n        limit_conn           addr 1;\n        limit_conn_log_level error;\n    }\n}\n```\n\n#### Directives\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`limit_conn`**` `*`zone`*` `*`number`*`;` |\n| Default: | —                                           |\n| Context: | `stream`, `server`                          |\n\nSets the shared memory zone and the maximum allowed number of connections for a given key value. When this limit is exceeded, the server will close the connection. For example, the directives\n\n``` nginx\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n\nserver {\n    ...\n    limit_conn addr 1;\n}\n```\n\nallow only one connection per an IP address at a time.\n\nWhen several `limit_conn` directives are specified, any configured limit will apply.\n\nThese directives are inherited from the previous configuration level if and only if there are no `limit_conn` directives defined on the current level.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`limit_conn_dry_run`**` on | off;` |\n| Default: | `limit_conn_dry_run off;`            |\n| Context: | `stream`, `server`                   |\n\nThis directive appeared in version 1.17.6.\n\nEnables the dry run mode. In this mode, the number of connections is not limited, however, in the shared memory zone, the number of excessive connections is accounted as usual.\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`limit_conn_log_level`**` info | notice | warn | error;` |\n| Default: | `limit_conn_log_level error;`                              |\n| Context: | `stream`, `server`                                         |\n\nSets the desired logging level for cases when the server limits the number of connections.\n\n|          |                                                               |\n|----------|---------------------------------------------------------------|\n| Syntax:  | **`limit_conn_zone`**` `*`key`*` zone=`*`name`*`:`*`size`*`;` |\n| Default: | —                                                             |\n| Context: | `stream`                                                      |\n\nSets parameters for a shared memory zone that will keep states for various keys. In particular, the state includes the current number of connections. The *`key`* can contain text, variables, and their combinations (1.11.2). Connections with an empty key value are not accounted. Usage example:\n\n``` nginx\nlimit_conn_zone $binary_remote_addr zone=addr:10m;\n```\n\nHere, the key is a client IP address set by the `$binary_remote_addr` variable. The size of `$binary_remote_addr` is 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses. The stored state always occupies 32 or 64 bytes on 32-bit platforms and 64 bytes on 64-bit platforms. One megabyte zone can keep about 32 thousand 32-byte states or about 16 thousand 64-byte states. If the zone storage is exhausted, the server will close the connection.\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), the [status information](../http/ngx_http_api_module#stream_limit_conns_) for each such shared memory zone can be [obtained](../http/ngx_http_api_module#getStreamLimitConnZone) or [reset](../http/ngx_http_api_module#deleteStreamLimitConnZoneStat) with the [API](../http/ngx_http_api_module) since 1.17.7.\n\n#### Embedded Variables\n\n`$limit_conn_status`  \nkeeps the result of limiting the number of connections (1.17.6): `PASSED`, `REJECTED`, or `REJECTED_DRY_RUN`\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html](https://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html)"
- name: ngx_stream_log_module
  id: stream/ngx_stream_log_module
  summary: The ngx_stream_log_module module (1.11.4) writes session logs in the specified format
  description: "# Module ngx_stream_log_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [access_log](#access_log)\n- [log_format](#log_format)\n- [open_log_file_cache](#open_log_file_cache)\n\nThe `ngx_stream_log_module` module (1.11.4) writes session logs in the specified format.\n\n#### Example Configuration\n\n``` nginx\nlog_format basic '$remote_addr [$time_local] '\n                 '$protocol $status $bytes_sent $bytes_received '\n                 '$session_time';\n\naccess_log /spool/logs/nginx-access.log basic buffer=32k;\n```\n\n#### Directives\n\n|          |                                                                                                                                                      |\n|----------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`access_log`**` `*`path`*` `*`format`*` [buffer=`*`size`*`] [gzip[=`*`level`*`]] [flush=`*`time`*`] [if=`*`condition`*`];` **`access_log`**` off;` |\n| Default: | `access_log off;`                                                                                                                                    |\n| Context: | `stream`, `server`                                                                                                                                   |\n\nSets the path, [format](#log_format), and configuration for a buffered log write. Several logs can be specified on the same configuration level. Logging to [syslog](../syslog) can be configured by specifying the “`syslog:`” prefix in the first parameter. The special value `off` cancels all `access_log` directives on the current level.\n\nIf either the `buffer` or `gzip` parameter is used, writes to log will be buffered.\n\nThe buffer size must not exceed the size of an atomic write to a disk file. For FreeBSD this size is unlimited.\n\nWhen buffering is enabled, the data will be written to the file:\n\n- if the next log line does not fit into the buffer;\n- if the buffered data is older than specified by the `flush` parameter;\n- when a worker process is [re-opening](../control) log files or is shutting down.\n\nIf the `gzip` parameter is used, then the buffered data will be compressed before writing to the file. The compression level can be set between 1 (fastest, less compression) and 9 (slowest, best compression). By default, the buffer size is equal to 64K bytes, and the compression level is set to 1. Since the data is compressed in atomic blocks, the log file can be decompressed or read by “`zcat`” at any time.\n\nExample:\n\n``` nginx\naccess_log /path/to/log.gz basic gzip flush=5m;\n```\n\nFor gzip compression to work, nginx must be built with the zlib library.\n\nThe file path can contain variables, but such logs have some constraints:\n\n- the [user](../ngx_core_module#user) whose credentials are used by worker processes should have permissions to create files in a directory with such logs;\n- buffered writes do not work;\n- the file is opened and closed for each log write. However, since the descriptors of frequently used files can be stored in a [cache](#open_log_file_cache), writing to the old file can continue during the time specified by the [open_log_file_cache](#open_log_file_cache) directive’s `valid` parameter\n\nThe `if` parameter enables conditional logging. A session will not be logged if the *`condition`* evaluates to “0” or an empty string.\n\n|          |                                                                            |\n|----------|----------------------------------------------------------------------------|\n| Syntax:  | **`log_format`**` `*`name`*` [escape=default|json|none] `*`string`*` ...;` |\n| Default: | —                                                                          |\n| Context: | `stream`                                                                   |\n\nSpecifies the log format, for example:\n\n``` nginx\nlog_format proxy '$remote_addr [$time_local] '\n                 '$protocol $status $bytes_sent $bytes_received '\n                 '$session_time \"$upstream_addr\" '\n                 '\"$upstream_bytes_sent\" \"$upstream_bytes_received\" \"$upstream_connect_time\"';\n```\n\nThe `escape` parameter (1.11.8) allows setting `json` or `default` characters escaping in variables, by default, `default` escaping is used. The `none` parameter (1.13.10) disables escaping.\n\nFor `default` escaping, characters “`\"`”, “`\\`”, and other characters with values less than 32 or above 126 are escaped as “`\\xXX`”. If the variable value is not found, a hyphen (“`-`”) will be logged.\n\nFor `json` escaping, all characters not allowed in JSON [strings](https://datatracker.ietf.org/doc/html/rfc8259#section-7) will be escaped: characters “`\"`” and “`\\`” are escaped as “`\\\"`” and “`\\\\`”, characters with values less than 32 are escaped as “`\\n`”, “`\\r`”, “`\\t`”, “`\\b`”, “`\\f`”, or “`\\u00XX`”.\n\n|          |                                                                                                                                       |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`open_log_file_cache`**` max=`*`N`*` [inactive=`*`time`*`] [min_uses=`*`N`*`] [valid=`*`time`*`];` **`open_log_file_cache`**` off;` |\n| Default: | `open_log_file_cache off;`                                                                                                            |\n| Context: | `stream`, `server`                                                                                                                    |\n\nDefines a cache that stores the file descriptors of frequently used logs whose names contain variables. The directive has the following parameters:\n\n`max`  \nsets the maximum number of descriptors in a cache; if the cache becomes full the least recently used (LRU) descriptors are closed\n\n`inactive`  \nsets the time after which the cached descriptor is closed if there were no access during this time; by default, 10 seconds\n\n`min_uses`  \nsets the minimum number of file uses during the time defined by the `inactive` parameter to let the descriptor stay open in a cache; by default, 1\n\n`valid`  \nsets the time after which it should be checked that the file still exists with the same name; by default, 60 seconds\n\n`off`  \ndisables caching\n\nUsage example:\n\n``` nginx\nopen_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_log_module.html](https://nginx.org/en/docs/stream/ngx_stream_log_module.html)"
- name: ngx_stream_map_module
  id: stream/ngx_stream_map_module
  summary: The ngx_stream_map_module module (1.11.2) creates variables whose values depend on values of other variables
  description: "# Module ngx_stream_map_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [map](#map)\n- [map_hash_bucket_size](#map_hash_bucket_size)\n- [map_hash_max_size](#map_hash_max_size)\n\nThe `ngx_stream_map_module` module (1.11.2) creates variables whose values depend on values of other variables.\n\n#### Example Configuration\n\n``` nginx\nmap $remote_addr $limit {\n    127.0.0.1    \"\";\n    default      $binary_remote_addr;\n}\n\nlimit_conn_zone $limit zone=addr:10m;\nlimit_conn addr 1;\n```\n\n#### Directives\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`map`**` `*`string`*` `*`$variable`*` { ... }` |\n| Default: | —                                                |\n| Context: | `stream`                                         |\n\nCreates a new variable whose value depends on values of one or more of the source variables specified in the first parameter.\n\nSince variables are evaluated only when they are used, the mere declaration even of a large number of “`map`” variables does not add any extra costs to connection processing.\n\nParameters inside the `map` block specify a mapping between source and resulting values.\n\nSource values are specified as strings or regular expressions.\n\nStrings are matched ignoring the case.\n\nA regular expression should either start from the “`~`” symbol for a case-sensitive matching, or from the “`~*`” symbols for case-insensitive matching. A regular expression can contain named and positional captures that can later be used in other directives along with the resulting variable.\n\nIf a source value matches one of the names of special parameters described below, it should be prefixed with the “`\\`” symbol.\n\nThe resulting value can contain text, variable, and their combination.\n\nThe following special parameters are also supported:\n\n`default` *`value`*  \nsets the resulting value if the source value matches none of the specified variants. When `default` is not specified, the default resulting value will be an empty string.\n\n`hostnames`  \nindicates that source values can be hostnames with a prefix or suffix mask:\n\n``` nginx\n*.example.com 1;\nexample.*     1;\n```\n\nThe following two records\n\n``` nginx\nexample.com   1;\n*.example.com 1;\n```\n\ncan be combined:\n\n``` nginx\n.example.com  1;\n```\n\nThis parameter should be specified before the list of values.\n\n`include` *`file`*  \nincludes a file with values. There can be several inclusions.\n\n`volatile`  \nindicates that the variable is not cacheable (1.11.7).\n\nIf the source value matches more than one of the specified variants, e.g. both a mask and a regular expression match, the first matching variant will be chosen, in the following order of priority:\n\n1.  string value without a mask\n2.  longest string value with a prefix mask, e.g. “`*.example.com`”\n3.  longest string value with a suffix mask, e.g. “`mail.*`”\n4.  first matching regular expression (in order of appearance in a configuration file)\n5.  default value\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`map_hash_bucket_size`**` `*`size`*`;` |\n| Default: | `map_hash_bucket_size 32|64|128;`        |\n| Context: | `stream`                                 |\n\nSets the bucket size for the [map](#map) variables hash tables. Default value depends on the processor’s cache line size. The details of setting up hash tables are provided in a separate [document](../hash).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`map_hash_max_size`**` `*`size`*`;` |\n| Default: | `map_hash_max_size 2048;`             |\n| Context: | `stream`                              |\n\nSets the maximum *`size`* of the [map](#map) variables hash tables. The details of setting up hash tables are provided in a separate [document](../hash).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_map_module.html](https://nginx.org/en/docs/stream/ngx_stream_map_module.html)"
- name: ngx_stream_mqtt_filter_module
  id: stream/ngx_stream_mqtt_filter_module
  summary: The ngx_stream_mqtt_filter_module module (1.23.4) provides support for Message Queuing Telemetry Transport protocol (MQTT) versions 3.1.1 and 5.0
  description: "# Module ngx_stream_mqtt_filter_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [mqtt](#mqtt)\n- [mqtt_buffers](#mqtt_buffers)\n- [mqtt_rewrite_buffer_size](#mqtt_rewrite_buffer_size)\n- [mqtt_set_connect](#mqtt_set_connect)\n\nThe `ngx_stream_mqtt_filter_module` module (1.23.4) provides support for Message Queuing Telemetry Transport protocol (MQTT) versions [3.1.1](https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html) and [5.0](https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html).\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nlisten            127.0.0.1:18883;\nproxy_pass        backend;\nproxy_buffer_size 16k;\n\nmqtt             on;\nmqtt_set_connect clientid \"$client\";\nmqtt_set_connect username \"$name\";\n```\n\n#### Directives\n\n|          |                        |\n|----------|------------------------|\n| Syntax:  | **`mqtt`**` on | off;` |\n| Default: | `mqtt off;`            |\n| Context: | `stream`, `server`     |\n\nEnables the MQTT protocol for the given virtual server.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`mqtt_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `mqtt_buffers 100 1k;`                        |\n| Context: | `stream`, `server`                            |\n\nThis directive appeared in version 1.25.1.\n\nSets the *`number`* and *`size`* of the buffers used for handling MQTT messages, for a single connection.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`mqtt_rewrite_buffer_size`**` `*`size`*`;` |\n| Default: | `mqtt_rewrite_buffer_size 4k|8k;`            |\n| Context: | `server`                                     |\n\nThis directive is obsolete since version 1.25.1. The [mqtt_buffers](#mqtt_buffers) directive should be used instead.\n\nSets the *`size`* of the buffer used for writing a modified message. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`mqtt_set_connect`**` field `*`value`*`;` |\n| Default: | —                                           |\n| Context: | `server`                                    |\n\nSets the message `field` to the given `value` for CONNECT message. The following fields are supported: `clientid`, `username`, and `password`. The value can contain text, variables, and their combination.\n\nSeveral `mqtt_set_connect` directives can be specified on the same level:\n\n``` nginx\nmqtt_set_connect clientid \"$client\";\nmqtt_set_connect username \"$name\";\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_mqtt_filter_module.html](https://nginx.org/en/docs/stream/ngx_stream_mqtt_filter_module.html)"
- name: ngx_stream_mqtt_preread_module
  id: stream/ngx_stream_mqtt_preread_module
  summary: The ngx_stream_mqtt_preread_module module (1.23.4) allows extracting information from the CONNECT message of the Message Queuing Telemetry Transport protocol (MQTT) versions 3.1.1 and 5.0, for example, a username or a client ID
  description: "# Module ngx_stream_mqtt_preread_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [mqtt_preread](#mqtt_preread)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_mqtt_preread_module` module (1.23.4) allows extracting information from the CONNECT message of the Message Queuing Telemetry Transport protocol (MQTT) versions [3.1.1](https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html) and [5.0](https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html), for example, a username or a client ID.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nmqtt_preread on;\nreturn       $mqtt_preread_clientid;\n```\n\n#### Directives\n\n|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`mqtt_preread`**` on | off;` |\n| Default: | `mqtt_preread off;`            |\n| Context: | `stream`, `server`             |\n\nEnables extracting information from the MQTT CONNECT message at the [preread](stream_processing#preread_phase) phase.\n\n#### Embedded Variables\n\n`$mqtt_preread_clientid`  \nthe `clientid` value from the CONNECT message\n\n`$mqtt_preread_username`  \nthe `username` value from the CONNECT message\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_mqtt_preread_module.html](https://nginx.org/en/docs/stream/ngx_stream_mqtt_preread_module.html)"
- name: ngx_stream_pass_module
  id: stream/ngx_stream_pass_module
  summary: The ngx_stream_pass_module module (1.25.5) allows passing the accepted connection directly to any configured listening socket in http, stream, mail, and other similar modules
  description: "# Module ngx_stream_pass_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [pass](#pass)\n\nThe `ngx_stream_pass_module` module (1.25.5) allows passing the accepted connection directly to any configured listening socket in `http`, `stream`, `mail`, and other similar modules.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    server {\n        listen 8000;\n\n        location / {\n            root html;\n        }\n    }\n}\n\nstream {\n    server {\n        listen 12345 ssl;\n\n        ssl_certificate     domain.crt;\n        ssl_certificate_key domain.key;\n\n        pass 127.0.0.1:8000;\n    }\n}\n```\n\nIn the example, after terminating SSL/TLS in the `stream` module the connection is passed to the `http` module.\n\n#### Directives\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`pass`**` `*`address`*`;` |\n| Default: | —                           |\n| Context: | `server`                    |\n\nSets server address to pass client connection to. The address can be specified as an IP address and a port:\n\n``` nginx\npass 127.0.0.1:12345;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\npass unix:/tmp/stream.socket;\n```\n\nThe address can also be specified using variables:\n\n``` nginx\npass $upstream;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_pass_module.html](https://nginx.org/en/docs/stream/ngx_stream_pass_module.html)"
- name: ngx_stream_proxy_module
  id: stream/ngx_stream_proxy_module
  summary: The ngx_stream_proxy_module module (1.9.0) allows proxying data streams over TCP, UDP (1.9.13), and UNIX-domain sockets
  description: "# Module ngx_stream_proxy_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [proxy_bind](#proxy_bind)\n- [proxy_buffer_size](#proxy_buffer_size)\n- [proxy_connect_timeout](#proxy_connect_timeout)\n- [proxy_download_rate](#proxy_download_rate)\n- [proxy_half_close](#proxy_half_close)\n- [proxy_next_upstream](#proxy_next_upstream)\n- [proxy_next_upstream_timeout](#proxy_next_upstream_timeout)\n- [proxy_next_upstream_tries](#proxy_next_upstream_tries)\n- [proxy_pass](#proxy_pass)\n- [proxy_protocol](#proxy_protocol)\n- [proxy_requests](#proxy_requests)\n- [proxy_responses](#proxy_responses)\n- [proxy_session_drop](#proxy_session_drop)\n- [proxy_socket_keepalive](#proxy_socket_keepalive)\n- [proxy_ssl](#proxy_ssl)\n- [proxy_ssl_certificate](#proxy_ssl_certificate)\n- [proxy_ssl_certificate_key](#proxy_ssl_certificate_key)\n- [proxy_ssl_ciphers](#proxy_ssl_ciphers)\n- [proxy_ssl_conf_command](#proxy_ssl_conf_command)\n- [proxy_ssl_crl](#proxy_ssl_crl)\n- [proxy_ssl_name](#proxy_ssl_name)\n- [proxy_ssl_password_file](#proxy_ssl_password_file)\n- [proxy_ssl_protocols](#proxy_ssl_protocols)\n- [proxy_ssl_server_name](#proxy_ssl_server_name)\n- [proxy_ssl_session_reuse](#proxy_ssl_session_reuse)\n- [proxy_ssl_trusted_certificate](#proxy_ssl_trusted_certificate)\n- [proxy_ssl_verify](#proxy_ssl_verify)\n- [proxy_ssl_verify_depth](#proxy_ssl_verify_depth)\n- [proxy_timeout](#proxy_timeout)\n- [proxy_upload_rate](#proxy_upload_rate)\n\nThe `ngx_stream_proxy_module` module (1.9.0) allows proxying data streams over TCP, UDP (1.9.13), and UNIX-domain sockets.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    listen 127.0.0.1:12345;\n    proxy_pass 127.0.0.1:8080;\n}\n\nserver {\n    listen 12345;\n    proxy_connect_timeout 1s;\n    proxy_timeout 1m;\n    proxy_pass example.com:12345;\n}\n\nserver {\n    listen 53 udp reuseport;\n    proxy_timeout 20s;\n    proxy_pass dns.example.com:53;\n}\n\nserver {\n    listen [::1]:12345;\n    proxy_pass unix:/tmp/stream.socket;\n}\n```\n\n#### Directives\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`proxy_bind`**` `*`address`*` [transparent] | off;` |\n| Default: | —                                                     |\n| Context: | `stream`, `server`                                    |\n\nThis directive appeared in version 1.9.2.\n\nMakes outgoing connections to a proxied server originate from the specified local IP *`address`*. Parameter value can contain variables (1.11.2). The special value `off` cancels the effect of the `proxy_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address.\n\nThe `transparent` parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client:\n\n``` nginx\nproxy_bind $remote_addr transparent;\n```\n\nIn order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the proxied server.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_buffer_size`**` `*`size`*`;` |\n| Default: | `proxy_buffer_size 16k;`              |\n| Context: | `stream`, `server`                    |\n\nThis directive appeared in version 1.9.4.\n\nSets the *`size`* of the buffer used for reading data from the proxied server. Also sets the *`size`* of the buffer used for reading data from the client.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_connect_timeout`**` `*`time`*`;` |\n| Default: | `proxy_connect_timeout 60s;`              |\n| Context: | `stream`, `server`                        |\n\nDefines a timeout for establishing a connection with a proxied server.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`proxy_download_rate`**` `*`rate`*`;` |\n| Default: | `proxy_download_rate 0;`                |\n| Context: | `stream`, `server`                      |\n\nThis directive appeared in version 1.9.3.\n\nLimits the speed of reading the data from the proxied server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a connection, so if nginx simultaneously opens two connections to the proxied server, the overall rate will be twice as much as the specified limit.\n\nParameter value can contain variables (1.17.0). It may be useful in cases where rate should be limited depending on a certain condition:\n\n``` nginx\nmap $slow $rate {\n    1     4k;\n    2     8k;\n}\n\nproxy_download_rate $rate;\n```\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_half_close`**` on | off;` |\n| Default: | `proxy_half_close off;`            |\n| Context: | `stream`, `server`                 |\n\nThis directive appeared in version 1.21.4.\n\nEnables or disables closing each direction of a TCP connection independently (“TCP half-close”). If enabled, proxying over TCP will be kept until both sides close the connection.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_next_upstream`**` on | off;` |\n| Default: | `proxy_next_upstream on;`             |\n| Context: | `stream`, `server`                    |\n\nWhen a connection to the proxied server cannot be established, determines whether a client connection will be passed to the next server.\n\nPassing a connection to the next server can be limited by [the number of tries](#proxy_next_upstream_tries) and by [time](#proxy_next_upstream_timeout).\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`proxy_next_upstream_timeout`**` `*`time`*`;` |\n| Default: | `proxy_next_upstream_timeout 0;`                |\n| Context: | `stream`, `server`                              |\n\nLimits the time allowed to pass a connection to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`proxy_next_upstream_tries`**` `*`number`*`;` |\n| Default: | `proxy_next_upstream_tries 0;`                  |\n| Context: | `stream`, `server`                              |\n\nLimits the number of possible tries for passing a connection to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`proxy_pass`**` `*`address`*`;` |\n| Default: | —                                 |\n| Context: | `server`                          |\n\nSets the address of a proxied server. The address can be specified as a domain name or IP address, and a port:\n\n``` nginx\nproxy_pass localhost:12345;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\nproxy_pass unix:/tmp/stream.socket;\n```\n\nIf a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_stream_upstream_module).\n\nThe address can also be specified using variables (1.11.3):\n\n``` nginx\nproxy_pass $upstream;\n```\n\nIn this case, the server name is searched among the described [server groups](ngx_stream_upstream_module), and, if not found, is determined using a [resolver](ngx_stream_core_module#resolver).\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`proxy_protocol`**` on | off;` |\n| Default: | `proxy_protocol off;`            |\n| Context: | `stream`, `server`               |\n\nThis directive appeared in version 1.9.2.\n\nEnables the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) for connections to a proxied server.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_requests`**` `*`number`*`;` |\n| Default: | `proxy_requests 0;`                  |\n| Context: | `stream`, `server`                   |\n\nThis directive appeared in version 1.15.7.\n\nSets the number of client datagrams at which binding between a client and existing UDP stream session is dropped. After receiving the specified number of datagrams, next datagram from the same client starts a new session. The session terminates when all client datagrams are transmitted to a proxied server and the expected number of [responses](#proxy_responses) is received, or when it reaches a [timeout](#proxy_timeout).\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_responses`**` `*`number`*`;` |\n| Default: | —                                     |\n| Context: | `stream`, `server`                    |\n\nThis directive appeared in version 1.9.13.\n\nSets the number of datagrams expected from the proxied server in response to a client datagram if the [UDP](ngx_stream_core_module#udp) protocol is used. The number serves as a hint for session termination. By default, the number of datagrams is not limited.\n\nIf zero value is specified, no response is expected. However, if a response is received and the session is still not finished, the response will be handled.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_session_drop`**` on | off;` |\n| Default: | `proxy_session_drop off;`            |\n| Context: | `stream`, `server`                   |\n\nThis directive appeared in version 1.15.8.\n\nEnables terminating all sessions to a proxied server after it was removed from the group or marked as permanently unavailable. This can occur because of [re-resolve](ngx_stream_core_module#resolver) or with the API [`DELETE`](../http/ngx_http_api_module#deleteStreamUpstreamServer) command. A server can be marked as permanently unavailable if it is considered [unhealthy](ngx_stream_upstream_hc_module#health_check) or with the API [`PATCH`](../http/ngx_http_api_module#patchStreamUpstreamServer) command. Each session is terminated when the next read or write event is processed for the client or proxied server.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_socket_keepalive`**` on | off;` |\n| Default: | `proxy_socket_keepalive off;`            |\n| Context: | `stream`, `server`                       |\n\nThis directive appeared in version 1.15.6.\n\nConfigures the “TCP keepalive” behavior for outgoing connections to a proxied server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`proxy_ssl`**` on | off;` |\n| Default: | `proxy_ssl off;`            |\n| Context: | `stream`, `server`          |\n\nEnables the SSL/TLS protocol for connections to a proxied server.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                         |\n| Context: | `stream`, `server`                        |\n\nSpecifies a *`file`* with the certificate in the PEM format used for authentication to a proxied server.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`proxy_ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                             |\n| Context: | `stream`, `server`                            |\n\nSpecifies a *`file`* with the secret key in the PEM format used for authentication to a proxied server.\n\nSince version 1.21.0, variables can be used in the *`file`* name.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`proxy_ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `proxy_ssl_ciphers DEFAULT;`             |\n| Context: | `stream`, `server`                       |\n\nSpecifies the enabled ciphers for connections to a proxied server. The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                        |\n|----------|--------------------------------------------------------|\n| Syntax:  | **`proxy_ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                      |\n| Context: | `stream`, `server`                                     |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the proxied server.\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `proxy_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `proxy_ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`proxy_ssl_crl`**` `*`file`*`;` |\n| Default: | —                                 |\n| Context: | `stream`, `server`                |\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied server.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`proxy_ssl_name`**` `*`name`*`;`     |\n| Default: | `proxy_ssl_name host from proxy_pass;` |\n| Context: | `stream`, `server`                     |\n\nAllows overriding the server name used to [verify](#proxy_ssl_verify) the certificate of the proxied server and to be [passed through SNI](#proxy_ssl_server_name) when establishing a connection with the proxied server. The server name can also be specified using variables (1.11.3).\n\nBy default, the host part of the [proxy_pass](#proxy_pass) address is used.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`proxy_ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `stream`, `server`                          |\n\nSpecifies a *`file`* with passphrases for [secret keys](#proxy_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\n|          |                                                                                    |\n|----------|------------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `stream`, `server`                                                                 |\n\nEnables the specified protocols for connections to a proxied server.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`proxy_ssl_server_name`**` on | off;` |\n| Default: | `proxy_ssl_server_name off;`            |\n| Context: | `stream`, `server`                      |\n\nEnables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the proxied server.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`proxy_ssl_session_reuse`**` on | off;` |\n| Default: | `proxy_ssl_session_reuse on;`             |\n| Context: | `stream`, `server`                        |\n\nDetermines whether SSL sessions can be reused when working with the proxied server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`proxy_ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                 |\n| Context: | `stream`, `server`                                |\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied server.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_ssl_verify`**` on | off;` |\n| Default: | `proxy_ssl_verify off;`            |\n| Context: | `stream`, `server`                 |\n\nEnables or disables verification of the proxied server certificate.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`proxy_ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `proxy_ssl_verify_depth 1;`                  |\n| Context: | `stream`, `server`                           |\n\nSets the verification depth in the proxied server certificates chain.\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`proxy_timeout`**` `*`timeout`*`;` |\n| Default: | `proxy_timeout 10m;`                 |\n| Context: | `stream`, `server`                   |\n\nSets the *`timeout`* between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`proxy_upload_rate`**` `*`rate`*`;` |\n| Default: | `proxy_upload_rate 0;`                |\n| Context: | `stream`, `server`                    |\n\nThis directive appeared in version 1.9.3.\n\nLimits the speed of reading the data from the client. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a connection, so if the client simultaneously opens two connections, the overall rate will be twice as much as the specified limit.\n\nParameter value can contain variables (1.17.0). It may be useful in cases where rate should be limited depending on a certain condition:\n\n``` nginx\nmap $slow $rate {\n    1     4k;\n    2     8k;\n}\n\nproxy_upload_rate $rate;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html](https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html)"
- name: ngx_stream_proxy_protocol_vendor_module
  id: stream/ngx_stream_proxy_protocol_vendor_module
  summary: The ngx_stream_proxy_protocol_vendor_module module (1.23.3) allows obtaining additional information about a connection in cloud platforms from application-specific TLVs of the PROXY protocol header
  description: "# Module ngx_stream_proxy_protocol_vendor_module\n\n- [Example Configuration](#example)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_proxy_protocol_vendor_module` module (1.23.3) allows obtaining additional information about a connection in cloud platforms from application-specific TLVs of the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) header.\n\nSupported cloud platforms:\n\n- Amazon Web Services\n- Google Cloud Platform\n- Microsoft Azure\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](ngx_stream_core_module#listen) directive.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nserver {\n    listen 12345 proxy_protocol;\n    return $proxy_protocol_tlv_gcp_conn_id;\n}\n```\n\n#### Embedded Variables\n\n`$proxy_protocol_tlv_aws_vpce_id`  \nTLV value from the PROXY Protocol header representing the [ID of AWS VPC endpoint](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol)\n\n`$proxy_protocol_tlv_azure_pel_id`  \nTLV value from the PROXY Protocol header representing the [LinkID of Azure private endpoint](https://learn.microsoft.com/en-us/azure/private-link/private-link-service-overview#getting-connection-information-using-tcp-proxy-v2)\n\n`$proxy_protocol_tlv_gcp_conn_id`  \nTLV value from the PROXY Protocol header representing [Google Cloud PSC connection ID](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#proxy-protocol)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_proxy_protocol_vendor_module.html](https://nginx.org/en/docs/stream/ngx_stream_proxy_protocol_vendor_module.html)"
- name: ngx_stream_realip_module
  id: stream/ngx_stream_realip_module
  summary: The ngx_stream_realip_module module is used to change the client address and port to the ones sent in the PROXY protocol header (1.11.4)
  description: "# Module ngx_stream_realip_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [set_real_ip_from](#set_real_ip_from)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_realip_module` module is used to change the client address and port to the ones sent in the PROXY protocol header (1.11.4). The PROXY protocol must be previously enabled by setting the [proxy_protocol](ngx_stream_core_module#proxy_protocol) parameter in the `listen` directive.\n\nThis module is not built by default, it should be enabled with the `--with-stream_realip_module` configuration parameter.\n\n#### Example Configuration\n\n``` nginx\nlisten 12345 proxy_protocol;\n\nset_real_ip_from  192.168.1.0/24;\nset_real_ip_from  192.168.2.1;\nset_real_ip_from  2001:0db8::/32;\n```\n\n#### Directives\n\n|          |                                                              |\n|----------|--------------------------------------------------------------|\n| Syntax:  | **`set_real_ip_from`**` `*`address`*` | `*`CIDR`*` | unix:;` |\n| Default: | —                                                            |\n| Context: | `stream`, `server`                                           |\n\nDefines trusted addresses that are known to send correct replacement addresses. If the special value `unix:` is specified, all UNIX-domain sockets will be trusted.\n\n#### Embedded Variables\n\n`$realip_remote_addr`  \nkeeps the original client address\n\n`$realip_remote_port`  \nkeeps the original client port\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_realip_module.html](https://nginx.org/en/docs/stream/ngx_stream_realip_module.html)"
- name: ngx_stream_return_module
  id: stream/ngx_stream_return_module
  summary: The ngx_stream_return_module module (1.11.2) allows sending a specified value to the client and then closing the connection
  description: "# Module ngx_stream_return_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [return](#return)\n\nThe `ngx_stream_return_module` module (1.11.2) allows sending a specified value to the client and then closing the connection.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    listen 12345;\n    return $time_iso8601;\n}\n```\n\n#### Directives\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`return`**` `*`value`*`;` |\n| Default: | —                           |\n| Context: | `server`                    |\n\nSpecifies a *`value`* to send to the client. The value can contain text, variables, and their combination.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_return_module.html](https://nginx.org/en/docs/stream/ngx_stream_return_module.html)"
- name: ngx_stream_set_module
  id: stream/ngx_stream_set_module
  summary: The ngx_stream_set_module module (1.19.3) allows setting a value for a variable
  description: "# Module ngx_stream_set_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [set](#set)\n\nThe `ngx_stream_set_module` module (1.19.3) allows setting a value for a variable.\n\n#### Example Configuration\n\n``` nginx\nserver {\n    listen 12345;\n    set    $true 1;\n}\n```\n\n#### Directives\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`set`**` `*`$variable`*` `*`value`*`;` |\n| Default: | —                                        |\n| Context: | `server`                                 |\n\nSets a *`value`* for the specified *`variable`*. The *`value`* can contain text, variables, and their combination.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_set_module.html](https://nginx.org/en/docs/stream/ngx_stream_set_module.html)"
- name: ngx_stream_split_clients_module
  id: stream/ngx_stream_split_clients_module
  summary: The ngx_stream_split_clients_module module (1.11.3) creates variables suitable for A/B testing, also known as split testing
  description: "# Module ngx_stream_split_clients_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [split_clients](#split_clients)\n\nThe `ngx_stream_split_clients_module` module (1.11.3) creates variables suitable for A/B testing, also known as split testing.\n\n#### Example Configuration\n\n``` nginx\nstream {\n    ...\n    split_clients \"${remote_addr}AAA\" $upstream {\n                  0.5%                feature_test1;\n                  2.0%                feature_test2;\n                  *                   production;\n    }\n\n    server {\n        ...\n        proxy_pass $upstream;\n    }\n}\n```\n\n#### Directives\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`split_clients`**` `*`string`*` `*`$variable`*` { ... }` |\n| Default: | —                                                          |\n| Context: | `stream`                                                   |\n\nCreates a variable for A/B testing, for example:\n\n``` nginx\nsplit_clients \"${remote_addr}AAA\" $variant {\n               0.5%               .one;\n               2.0%               .two;\n               *                  \"\";\n}\n```\n\nThe value of the original string is hashed using MurmurHash2. In the example given, hash values from 0 to 21474835 (0.5%) correspond to the value `\".one\"` of the `$variant` variable, hash values from 21474836 to 107374180 (2%) correspond to the value `\".two\"`, and hash values from 107374181 to 4294967295 correspond to the value `\"\"` (an empty string).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html](https://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html)"
- name: ngx_stream_ssl_module
  id: stream/ngx_stream_ssl_module
  summary: The ngx_stream_ssl_module module (1.9.0) provides the necessary support for a stream proxy server to work with the SSL/TLS protocol
  description: "# Module ngx_stream_ssl_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [ssl_alpn](#ssl_alpn)\n- [ssl_certificate](#ssl_certificate)\n- [ssl_certificate_key](#ssl_certificate_key)\n- [ssl_ciphers](#ssl_ciphers)\n- [ssl_client_certificate](#ssl_client_certificate)\n- [ssl_conf_command](#ssl_conf_command)\n- [ssl_crl](#ssl_crl)\n- [ssl_dhparam](#ssl_dhparam)\n- [ssl_ecdh_curve](#ssl_ecdh_curve)\n- [ssl_handshake_timeout](#ssl_handshake_timeout)\n- [ssl_password_file](#ssl_password_file)\n- [ssl_prefer_server_ciphers](#ssl_prefer_server_ciphers)\n- [ssl_protocols](#ssl_protocols)\n- [ssl_reject_handshake](#ssl_reject_handshake)\n- [ssl_session_cache](#ssl_session_cache)\n- [ssl_session_ticket_key](#ssl_session_ticket_key)\n- [ssl_session_tickets](#ssl_session_tickets)\n- [ssl_session_timeout](#ssl_session_timeout)\n- [ssl_trusted_certificate](#ssl_trusted_certificate)\n- [ssl_verify_client](#ssl_verify_client)\n- [ssl_verify_depth](#ssl_verify_depth)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_ssl_module` module (1.9.0) provides the necessary support for a stream proxy server to work with the SSL/TLS protocol. This module is not built by default, it should be enabled with the `--with-stream_ssl_module` configuration parameter.\n\n#### Example Configuration\n\nTo reduce the processor load, it is recommended to\n\n- set the number of [worker processes](../ngx_core_module#worker_processes) equal to the number of processors,\n- enable the [shared](#ssl_session_cache_shared) session cache,\n- disable the [built-in](#ssl_session_cache_builtin) session cache,\n- and possibly increase the session [lifetime](#ssl_session_timeout) (by default, 5 minutes):\n\n``` nginx\nworker_processes auto;\n\nstream {\n\n    ...\n\n    server {\n        listen              12345 ssl;\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        ssl_session_cache   shared:SSL:10m;\n        ssl_session_timeout 10m;\n\n        ...\n    }\n```\n\n#### Directives\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`ssl_alpn`**` `*`protocol`*` ...;` |\n| Default: | —                                    |\n| Context: | `stream`, `server`                   |\n\nThis directive appeared in version 1.21.4.\n\nSpecifies the list of supported [ALPN](https://datatracker.ietf.org/doc/html/rfc7301) protocols. One of the protocols must be [negotiated](#var_ssl_alpn_protocol) if the client uses ALPN:\n\n``` nginx\nmap $ssl_alpn_protocol $proxy {\n    h2                127.0.0.1:8001;\n    http/1.1          127.0.0.1:8002;\n}\n\nserver {\n    listen      12346;\n    proxy_pass  $proxy;\n    ssl_alpn    h2 http/1.1;\n}\n```\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                   |\n| Context: | `stream`, `server`                  |\n\nSpecifies a *`file`* with the certificate in the PEM format for the given server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file.\n\nSince version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA:\n\n``` nginx\nserver {\n    listen              12345 ssl;\n\n    ssl_certificate     example.com.rsa.crt;\n    ssl_certificate_key example.com.rsa.key;\n\n    ssl_certificate     example.com.ecdsa.crt;\n    ssl_certificate_key example.com.ecdsa.key;\n\n    ...\n}\n```\n\nOnly OpenSSL 1.0.2 or higher supports separate certificate chains for different certificates. With older versions, only one certificate chain can be used.\n\nSince version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher:\n\n``` nginx\nssl_certificate     $ssl_server_name.crt;\nssl_certificate_key $ssl_server_name.key;\n```\n\nNote that using variables implies that a certificate will be loaded for each SSL handshake, and this may have a negative impact on performance.\n\nThe value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a certificate from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                       |\n| Context: | `stream`, `server`                      |\n\nSpecifies a *`file`* with the secret key in the PEM format for the given server.\n\nThe value `engine`:*`name`*:*`id`* can be specified instead of the *`file`*, which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.\n\nThe value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a secret key from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).\n\nSince version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher.\n\n|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `ssl_ciphers HIGH:!aNULL:!MD5;`    |\n| Context: | `stream`, `server`                 |\n\nSpecifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:\n\n``` nginx\nssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n```\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`ssl_client_certificate`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `stream`, `server`                         |\n\nThis directive appeared in version 1.11.8.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\nThe list of certificates will be sent to clients. If this is not desired, the [ssl_trusted_certificate](#ssl_trusted_certificate) directive can be used.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                |\n| Context: | `stream`, `server`                               |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html).\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `ssl_conf_command` directives can be specified on the same level:\n\n``` nginx\nssl_conf_command Options PrioritizeChaCha;\nssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;\n```\n\nThese directives are inherited from the previous configuration level if and only if there are no `ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                             |\n|----------|-----------------------------|\n| Syntax:  | **`ssl_crl`**` `*`file`*`;` |\n| Default: | —                           |\n| Context: | `stream`, `server`          |\n\nThis directive appeared in version 1.11.8.\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`ssl_dhparam`**` `*`file`*`;` |\n| Default: | —                               |\n| Context: | `stream`, `server`              |\n\nSpecifies a *`file`* with DH parameters for DHE ciphers.\n\nBy default no parameters are set, and therefore DHE ciphers will not be used.\n\nPrior to version 1.11.0, builtin parameters were used by default.\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_ecdh_curve`**` `*`curve`*`;` |\n| Default: | `ssl_ecdh_curve auto;`              |\n| Context: | `stream`, `server`                  |\n\nSpecifies a *`curve`* for ECDHE ciphers.\n\nWhen using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example:\n\n``` nginx\nssl_ecdh_curve prime256v1:secp384r1;\n```\n\nThe special value `auto` (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or `prime256v1` with older versions.\n\nPrior to version 1.11.0, the `prime256v1` curve was used by default.\n\nWhen using OpenSSL 1.0.2 or higher, this directive sets the list of curves supported by the server. Thus, in order for ECDSA certificates to work, it is important to include the curves used in the certificates.\n\n|          |                                           |\n|----------|-------------------------------------------|\n| Syntax:  | **`ssl_handshake_timeout`**` `*`time`*`;` |\n| Default: | `ssl_handshake_timeout 60s;`              |\n| Context: | `stream`, `server`                        |\n\nSpecifies a timeout for the SSL handshake to complete.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                     |\n| Context: | `stream`, `server`                    |\n\nSpecifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\nExample:\n\n``` nginx\nstream {\n    ssl_password_file /etc/keys/global.pass;\n    ...\n\n    server {\n        listen 127.0.0.1:12345;\n        ssl_certificate_key /etc/keys/first.key;\n    }\n\n    server {\n        listen 127.0.0.1:12346;\n\n        # named pipe can also be used instead of a file\n        ssl_password_file /etc/keys/fifo;\n        ssl_certificate_key /etc/keys/second.key;\n    }\n}\n```\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_prefer_server_ciphers`**` on | off;` |\n| Default: | `ssl_prefer_server_ciphers off;`            |\n| Context: | `stream`, `server`                          |\n\nSpecifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used.\n\n|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |\n| Context: | `stream`, `server`                                                           |\n\nEnables the specified protocols.\n\nIf the directive is specified on the [server](ngx_stream_core_module#server) level, the value from the default server can be used.\n\nThe `TLSv1.1` and `TLSv1.2` parameters work only when OpenSSL 1.0.1 or higher is used.\n\nThe `TLSv1.3` parameter (1.13.0) works only when OpenSSL 1.1.1 or higher is used.\n\nThe `TLSv1.3` parameter is used by default since 1.23.4.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssl_reject_handshake`**` on | off;` |\n| Default: | `ssl_reject_handshake off;`            |\n| Context: | `stream`, `server`                     |\n\nThis directive appeared in version 1.25.5.\n\nIf enabled, SSL handshakes in the [server](ngx_stream_core_module#server) block will be rejected.\n\nFor example, in the following configuration, SSL handshakes with server names other than `example.com` are rejected:\n\n``` nginx\nserver {\n    listen               443 ssl default_server;\n    ssl_reject_handshake on;\n}\n\nserver {\n    listen              443 ssl;\n    server_name         example.com;\n    ssl_certificate     example.com.crt;\n    ssl_certificate_key example.com.key;\n}\n```\n\n|          |                                                                                               |\n|----------|-----------------------------------------------------------------------------------------------|\n| Syntax:  | **`ssl_session_cache`**` off | none | [builtin[:`*`size`*`]] [shared:`*`name`*`:`*`size`*`];` |\n| Default: | `ssl_session_cache none;`                                                                     |\n| Context: | `stream`, `server`                                                                            |\n\nSets the types and sizes of caches that store session parameters. A cache can be of any of the following types:\n\n`off`  \nthe use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused.\n\n`none`  \nthe use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache.\n\n`builtin`  \na cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation.\n\n`shared`  \na cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several servers. It is also used to automatically generate, store, and periodically rotate TLS session ticket keys (1.23.2) unless configured explicitly using the [ssl_session_ticket_key](#ssl_session_ticket_key) directive.\n\nBoth cache types can be used simultaneously, for example:\n\n``` nginx\nssl_session_cache builtin:1000 shared:SSL:10m;\n```\n\nbut using only shared cache without the built-in cache should be more efficient.\n\n|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`ssl_session_ticket_key`**` `*`file`*`;` |\n| Default: | —                                          |\n| Context: | `stream`, `server`                         |\n\nSets a *`file`* with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used.\n\nIf several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example:\n\n``` nginx\nssl_session_ticket_key current.key;\nssl_session_ticket_key previous.key;\n```\n\nThe *`file`* must contain 80 or 48 bytes of random data and can be created using the following command:\n\n``` nginx\nopenssl rand 80 > ticket.key\n```\n\nDepending on the file size either AES256 (for 80-byte keys, 1.11.8) or AES128 (for 48-byte keys) is used for encryption.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`ssl_session_tickets`**` on | off;` |\n| Default: | `ssl_session_tickets on;`             |\n| Context: | `stream`, `server`                    |\n\nEnables or disables session resumption through [TLS session tickets](https://datatracker.ietf.org/doc/html/rfc5077).\n\n|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`ssl_session_timeout`**` `*`time`*`;` |\n| Default: | `ssl_session_timeout 5m;`               |\n| Context: | `stream`, `server`                      |\n\nSpecifies a time during which a client may reuse the session parameters.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                           |\n| Context: | `stream`, `server`                          |\n\nThis directive appeared in version 1.11.8.\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.\n\nIn contrast to the certificate set by [ssl_client_certificate](#ssl_client_certificate), the list of these certificates will not be sent to clients.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`ssl_verify_client`**` on | off | optional | optional_no_ca;` |\n| Default: | `ssl_verify_client off;`                                        |\n| Context: | `stream`, `server`                                              |\n\nThis directive appeared in version 1.11.8.\n\nEnables verification of client certificates. The verification result is stored in the [$ssl_client_verify](#var_ssl_client_verify) variable. If an error has occurred during the client certificate verification or a client has not presented the required certificate, the connection is closed.\n\nThe `optional` parameter requests the client certificate and verifies it if the certificate is present.\n\nThe `optional_no_ca` parameter requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through the [$ssl_client_cert](#var_ssl_client_cert) variable.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `ssl_verify_depth 1;`                  |\n| Context: | `stream`, `server`                     |\n\nThis directive appeared in version 1.11.8.\n\nSets the verification depth in the client certificates chain.\n\n#### Embedded Variables\n\nThe `ngx_stream_ssl_module` module supports variables since 1.11.2.\n\n`$ssl_alpn_protocol`  \nreturns the protocol selected by ALPN during the SSL handshake, or an empty string otherwise (1.21.4);\n\n`$ssl_cipher`  \nreturns the name of the cipher used for an established SSL connection;\n\n`$ssl_ciphers`  \nreturns the list of ciphers supported by the client (1.11.7). Known ciphers are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nAES128-SHA:AES256-SHA:0x00ff\n```\n\nThe variable is fully supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable is available only for new sessions and lists only known ciphers.\n\n`$ssl_client_cert`  \nreturns the client certificate in the PEM format for an established SSL connection, with each line except the first prepended with the tab character (1.11.8);\n\n`$ssl_client_fingerprint`  \nreturns the SHA1 fingerprint of the client certificate for an established SSL connection (1.11.8);\n\n`$ssl_client_i_dn`  \nreturns the “issuer DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.8);\n\n`$ssl_client_raw_cert`  \nreturns the client certificate in the PEM format for an established SSL connection (1.11.8);\n\n`$ssl_client_s_dn`  \nreturns the “subject DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.8);\n\n`$ssl_client_serial`  \nreturns the serial number of the client certificate for an established SSL connection (1.11.8);\n\n`$ssl_client_v_end`  \nreturns the end date of the client certificate (1.11.8);\n\n`$ssl_client_v_remain`  \nreturns the number of days until the client certificate expires (1.11.8);\n\n`$ssl_client_v_start`  \nreturns the start date of the client certificate (1.11.8);\n\n`$ssl_client_verify`  \nreturns the result of client certificate verification (1.11.8): “`SUCCESS`”, “`FAILED:`*`reason`*”, and “`NONE`” if a certificate was not present;\n\n`$ssl_curve`  \nreturns the negotiated curve used for SSL handshake key exchange process (1.21.5). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nprime256v1\n```\n\nThe variable is supported only when using OpenSSL version 3.0 or higher. With older versions, the variable value will be an empty string.\n\n`$ssl_curves`  \nreturns the list of curves supported by the client (1.11.7). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\n0x001d:prime256v1:secp521r1:secp384r1\n```\n\nThe variable is supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable value will be an empty string.\n\nThe variable is available only for new sessions.\n\n`$ssl_protocol`  \nreturns the protocol of an established SSL connection;\n\n`$ssl_server_name`  \nreturns the server name requested through [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication);\n\n`$ssl_session_id`  \nreturns the session identifier of an established SSL connection;\n\n`$ssl_session_reused`  \nreturns “`r`” if an SSL session was reused, or “`.`” otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html](https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html)"
- name: ngx_stream_ssl_preread_module
  id: stream/ngx_stream_ssl_preread_module
  summary: The ngx_stream_ssl_preread_module module (1.11.5) allows extracting information from the ClientHello message without terminating SSL/TLS, for example, the server name requested through SNI or protocols advertised in ALPN
  description: "# Module ngx_stream_ssl_preread_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [ssl_preread](#ssl_preread)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_ssl_preread_module` module (1.11.5) allows extracting information from the [ClientHello](https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.2) message without terminating SSL/TLS, for example, the server name requested through [SNI](https://datatracker.ietf.org/doc/html/rfc6066#section-3) or protocols advertised in [ALPN](https://datatracker.ietf.org/doc/html/rfc7301). This module is not built by default, it should be enabled with the `--with-stream_ssl_preread_module` configuration parameter.\n\n#### Example Configuration\n\nSelecting an upstream based on server name:\n\n``` nginx\nmap $ssl_preread_server_name $name {\n    backend.example.com      backend;\n    default                  backend2;\n}\n\nupstream backend {\n    server 192.168.0.1:12345;\n    server 192.168.0.2:12345;\n}\n\nupstream backend2 {\n    server 192.168.0.3:12345;\n    server 192.168.0.4:12345;\n}\n\nserver {\n    listen      12346;\n    proxy_pass  $name;\n    ssl_preread on;\n}\n```\n\nSelecting an upstream based on protocol:\n\n``` nginx\nmap $ssl_preread_alpn_protocols $proxy {\n    ~\\bh2\\b           127.0.0.1:8001;\n    ~\\bhttp/1.1\\b     127.0.0.1:8002;\n    ~\\bxmpp-client\\b  127.0.0.1:8003;\n}\n\nserver {\n    listen      9000;\n    proxy_pass  $proxy;\n    ssl_preread on;\n}\n```\n\nSelecting an upstream based on SSL protocol version:\n\n``` nginx\nmap $ssl_preread_protocol $upstream {\n    \"\"        ssh.example.com:22;\n    \"TLSv1.2\" new.example.com:443;\n    default   tls.example.com:443;\n}\n\n# ssh and https on the same port\nserver {\n    listen      192.168.0.1:443;\n    proxy_pass  $upstream;\n    ssl_preread on;\n}\n```\n\n#### Directives\n\n|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`ssl_preread`**` on | off;` |\n| Default: | `ssl_preread off;`            |\n| Context: | `stream`, `server`            |\n\nEnables extracting information from the ClientHello message at the [preread](stream_processing#preread_phase) phase.\n\n#### Embedded Variables\n\n`$ssl_preread_protocol`  \nthe highest SSL protocol version supported by the client (1.15.2)\n\n`$ssl_preread_server_name`  \nserver name requested through SNI\n\n`$ssl_preread_alpn_protocols`  \nlist of protocols advertised by the client through ALPN (1.13.10). The values are separated by commas.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html](https://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html)"
- name: ngx_stream_upstream_hc_module
  id: stream/ngx_stream_upstream_hc_module
  summary: The ngx_stream_upstream_hc_module module (1.9.0) allows enabling periodic health checks of the servers in a group
  description: "# Module ngx_stream_upstream_hc_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [health_check](#health_check)\n- [health_check_timeout](#health_check_timeout)\n- [match](#match)\n\nThe `ngx_stream_upstream_hc_module` module (1.9.0) allows enabling periodic health checks of the servers in a [group](ngx_stream_upstream_module#upstream). The server group must reside in the [shared memory](ngx_stream_upstream_module#zone).\n\nIf a health check fails, the server will be considered unhealthy. If several health checks are defined for the same group of servers, a single failure of any check will make the corresponding server be considered unhealthy. Client connections are not passed to unhealthy servers and servers in the “checking” state.\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\n``` nginx\nupstream tcp {\n    zone upstream_tcp 64k;\n\n    server backend1.example.com:12345 weight=5;\n    server backend2.example.com:12345 fail_timeout=5s slow_start=30s;\n    server 192.0.2.1:12345            max_fails=3;\n\n    server backup1.example.com:12345  backup;\n    server backup2.example.com:12345  backup;\n}\n\nserver {\n    listen     12346;\n    proxy_pass tcp;\n    health_check;\n}\n```\n\nWith this configuration, nginx will check the ability to establish a TCP connection to each server in the `tcp` group every five seconds. When a connection to the server cannot be established, the health check will fail, and the server will be considered unhealthy.\n\nHealth checks can be configured for the UDP protocol:\n\n``` nginx\nupstream dns_upstream {\n\n    zone   dns_zone 64k;\n\n    server dns1.example.com:53;\n    server dns2.example.com:53;\n    server dns3.example.com:53;\n}\n\nserver {\n    listen       53 udp;\n    proxy_pass   dns_upstream;\n    health_check udp;\n}\n```\n\nIn this case, the absence of ICMP “`Destination Unreachable`” message is expected in reply to the sent string “`nginx health check`”.\n\nHealth checks can also be configured to test data obtained from the server. Tests are configured separately using the [match](#match) directive and referenced in the `match` parameter of the [health_check](#health_check) directive.\n\n#### Directives\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`health_check`**` [`*`parameters`*`];` |\n| Default: | —                                        |\n| Context: | `server`                                 |\n\nEnables periodic health checks of the servers in a [group](ngx_stream_upstream_module#upstream).\n\nThe following optional parameters are supported:\n\n`interval`=*`time`*  \nsets the interval between two consecutive health checks, by default, 5 seconds.\n\n`jitter`=*`time`*  \nsets the time within which each health check will be randomly delayed, by default, there is no delay.\n\n`fails`=*`number`*  \nsets the number of consecutive failed health checks of a particular server after which this server will be considered unhealthy, by default, 1.\n\n`passes`=*`number`*  \nsets the number of consecutive passed health checks of a particular server after which the server will be considered healthy, by default, 1.\n\n`mandatory` \\[`persistent`\\]  \nsets the initial “checking” state for a server until the first health check is completed (1.11.7). Client connections are not passed to servers in the “checking” state. If the parameter is not specified, the server will be initially considered healthy.\n\nThe `persistent` parameter (1.21.1) sets the initial “up” state for a server after reload if the server was considered healthy before reload.\n\n`match`=*`name`*  \nspecifies the `match` block configuring the tests that a successful connection should pass in order for a health check to pass. By default, for TCP, only the ability to establish a TCP connection with the server is checked. For [UDP](#health_check_udp), the absence of ICMP “`Destination Unreachable`” message is expected in reply to the sent string “`nginx health check`”.\n\nPrior to version 1.11.7, by default, UDP health check required a [match](#hc_match) block with the [send](#match_send) and [expect](#match_expect) parameters.\n\n`port`=*`number`*  \ndefines the port used when connecting to a server to perform a health check (1.9.7). By default, equals the [server](ngx_stream_upstream_module#server) port.\n\n`udp`  \nspecifies that the `UDP` protocol should be used for health checks instead of the default `TCP` protocol (1.9.13).\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`health_check_timeout`**` `*`timeout`*`;` |\n| Default: | `health_check_timeout 5s;`                  |\n| Context: | `stream`, `server`                          |\n\nOverrides the [proxy_timeout](ngx_stream_proxy_module#proxy_timeout) value for health checks.\n\n|          |                                  |\n|----------|----------------------------------|\n| Syntax:  | **`match`**` `*`name`*` { ... }` |\n| Default: | —                                |\n| Context: | `stream`                         |\n\nDefines the named test set used to verify server responses to health checks.\n\nThe following parameters can be configured:\n\n`send` *`string`*;  \nsends a *`string`* to the server;\n\n`expect` *`string`* \\| `~` *`regex`*;  \na literal string (1.9.12) or a regular expression that the data obtained from the server should match. The regular expression is specified with the preceding “`~*`” modifier (for case-insensitive matching), or the “`~`” modifier (for case-sensitive matching).\n\nBoth `send` and `expect` parameters can contain hexadecimal literals with the prefix “`\\x`” followed by two hex digits, for example, “`\\x80`” (1.9.12).\n\nHealth check is passed if:\n\n- the TCP connection was successfully established;\n- the *`string`* from the `send` parameter, if specified, was sent;\n- the data obtained from the server matched the string or regular expression from the `expect` parameter, if specified;\n- the time elapsed does not exceed the value specified in the [health_check_timeout](#health_check_timeout) directive.\n\nExample:\n\n``` nginx\nupstream backend {\n    zone     upstream_backend 10m;\n    server   127.0.0.1:12345;\n}\n\nmatch http {\n    send     \"GET / HTTP/1.0\\r\\nHost: localhost\\r\\n\\r\\n\";\n    expect ~ \"200 OK\";\n}\n\nserver {\n    listen       12346;\n    proxy_pass   backend;\n    health_check match=http;\n}\n```\n\nOnly the first [proxy_buffer_size](ngx_stream_proxy_module#proxy_buffer_size) bytes of data obtained from the server are examined.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_upstream_hc_module.html](https://nginx.org/en/docs/stream/ngx_stream_upstream_hc_module.html)"
- name: ngx_stream_upstream_module
  id: stream/ngx_stream_upstream_module
  summary: The ngx_stream_upstream_module module (1.9.0) is used to define groups of servers that can be referenced by the proxy_pass directive
  description: "# Module ngx_stream_upstream_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [upstream](#upstream)\n- [server](#server)\n- [zone](#zone)\n- [state](#state)\n- [hash](#hash)\n- [least_conn](#least_conn)\n- [least_time](#least_time)\n- [random](#random)\n- [resolver](#resolver)\n- [resolver_timeout](#resolver_timeout)\n- [Embedded Variables](#variables)\n\nThe `ngx_stream_upstream_module` module (1.9.0) is used to define groups of servers that can be referenced by the [proxy_pass](ngx_stream_proxy_module#proxy_pass) directive.\n\n#### Example Configuration\n\n``` nginx\nupstream backend {\n    hash $remote_addr consistent;\n\n    server backend1.example.com:12345  weight=5;\n    server backend2.example.com:12345;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com:12345   backup;\n    server backup2.example.com:12345   backup;\n}\n\nserver {\n    listen 12346;\n    proxy_pass backend;\n}\n```\n\nDynamically configurable group with periodic [health checks](ngx_stream_upstream_hc_module) is available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n``` nginx\nresolver 10.0.0.1;\n\nupstream dynamic {\n    zone upstream_dynamic 64k;\n\n    server backend1.example.com:12345 weight=5;\n    server backend2.example.com:12345 fail_timeout=5s slow_start=30s;\n    server 192.0.2.1:12345            max_fails=3;\n    server backend3.example.com:12345 resolve;\n    server backend4.example.com       service=http resolve;\n\n    server backup1.example.com:12345  backup;\n    server backup2.example.com:12345  backup;\n}\n\nserver {\n    listen 12346;\n    proxy_pass dynamic;\n    health_check;\n}\n```\n\n#### Directives\n\n|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`upstream`**` `*`name`*` { ... }` |\n| Default: | —                                   |\n| Context: | `stream`                            |\n\nDefines a group of servers. Servers can listen on different ports. In addition, servers listening on TCP and UNIX-domain sockets can be mixed.\n\nExample:\n\n``` nginx\nupstream backend {\n    server backend1.example.com:12345 weight=5;\n    server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;\n    server unix:/tmp/backend2;\n    server backend3.example.com:12345 resolve;\n\n    server backup1.example.com:12345  backup;\n}\n```\n\nBy default, connections are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 connections will be distributed as follows: 5 connections go to `backend1.example.com:12345` and one connection to each of the second and third servers. If an error occurs during communication with a server, the connection will be passed to the next server, and so on until all of the functioning servers will be tried. If communication with all servers fails, the connection will be closed.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`server`**` `*`address`*` [`*`parameters`*`];` |\n| Default: | —                                                |\n| Context: | `upstream`                                       |\n\nDefines the *`address`* and other *`parameters`* of a server. The address can be specified as a domain name or IP address with an obligatory port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. A domain name that resolves to several IP addresses defines multiple servers at once.\n\nThe following parameters can be defined:\n\n`weight`=*`number`*  \nsets the weight of the server, by default, 1.\n\n`max_conns`=*`number`*  \nlimits the maximum *`number`* of simultaneous connections to the proxied server (1.11.5). Default value is zero, meaning there is no limit. If the server group does not reside in the [shared memory](#zone), the limitation works per each worker process.\n\nPrior to version 1.11.5, this parameter was available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n`max_fails`=*`number`*  \nsets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the `fail_timeout` parameter to consider the server unavailable for a duration also set by the `fail_timeout` parameter. By default, the number of unsuccessful attempts is set to 1. The zero value disables the accounting of attempts. Here, an unsuccessful attempt is an error or timeout while establishing a connection with the server.\n\n`fail_timeout`=*`time`*  \nsets\n\n- the time during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable;\n- and the period of time the server will be considered unavailable.\n\nBy default, the parameter is set to 10 seconds.\n\n`backup`  \nmarks the server as a backup server. Connections to the backup server will be passed when the primary servers are unavailable.\n\nThe parameter cannot be used along with the [hash](#hash) and [random](#random) load balancing methods.\n\n`down`  \nmarks the server as permanently unavailable.\n\nAdditionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):\n\n`resolve`  \nmonitors changes of the IP addresses that correspond to a domain name of the server, and automatically modifies the upstream configuration without the need of restarting nginx. The server group must reside in the [shared memory](#zone).\n\nIn order for this parameter to work, the `resolver` directive must be specified in the [stream](ngx_stream_core_module#resolver) block or in the corresponding [upstream](#resolver) block.\n\n`service`=*`name`*  \nenables resolving of DNS [SRV](https://datatracker.ietf.org/doc/html/rfc2782) records and sets the service *`name`* (1.9.13). In order for this parameter to work, it is necessary to specify the [resolve](#resolve) parameter for the server and specify a hostname without a port number.\n\nIf the service name does not contain a dot (“`.`”), then the [RFC](https://datatracker.ietf.org/doc/html/rfc2782)-compliant name is constructed and the TCP protocol is added to the service prefix. For example, to look up the `_http._tcp.backend.example.com` SRV record, it is necessary to specify the directive:\n\n``` nginx\nserver backend.example.com service=http resolve;\n```\n\nIf the service name contains one or more dots, then the name is constructed by joining the service prefix and the server name. For example, to look up the `_http._tcp.backend.example.com` and `server1.backend.example.com` SRV records, it is necessary to specify the directives:\n\n``` nginx\nserver backend.example.com service=_http._tcp resolve;\nserver example.com service=server1.backend resolve;\n```\n\nHighest-priority SRV records (records with the same lowest-number priority value) are resolved as primary servers, the rest of SRV records are resolved as backup servers. If the [backup](#backup) parameter is specified for the server, high-priority SRV records are resolved as backup servers, the rest of SRV records are ignored.\n\n`slow_start`=*`time`*  \nsets the *`time`* during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes [healthy](ngx_stream_upstream_hc_module#health_check), or when the server becomes available after a period of time it was considered [unavailable](#fail_timeout). Default value is zero, i.e. slow start is disabled.\n\nThe parameter cannot be used along with the [hash](#hash) and [random](#random) load balancing methods.\n\nIf there is only a single server in a group, `max_fails`, `fail_timeout` and `slow_start` parameters are ignored, and such a server will never be considered unavailable.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`zone`**` `*`name`*` [`*`size`*`];` |\n| Default: | —                                     |\n| Context: | `upstream`                            |\n\nDefines the *`name`* and *`size`* of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes. Several groups may share the same zone. In this case, it is enough to specify the *`size`* only once.\n\nAdditionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via the [API](../http/ngx_http_api_module) module (1.13.3).\n\nPrior to version 1.13.3, the configuration was accessible only via a special location handled by [upstream_conf](../http/ngx_http_upstream_conf_module#upstream_conf).\n\n|          |                           |\n|----------|---------------------------|\n| Syntax:  | **`state`**` `*`file`*`;` |\n| Default: | —                         |\n| Context: | `upstream`                |\n\nThis directive appeared in version 1.9.7.\n\nSpecifies a *`file`* that keeps the state of the dynamically configurable group.\n\nExamples:\n\n``` nginx\nstate /var/lib/nginx/state/servers.conf; # path for Linux\nstate /var/db/nginx/state/servers.conf;  # path for FreeBSD\n```\n\nThe state is currently limited to the list of servers with their parameters. The file is read when parsing the configuration and is updated each time the upstream configuration is [changed](../http/ngx_http_api_module#stream_upstreams_stream_upstream_name_servers_). Changing the file content directly should be avoided. The directive cannot be used along with the [server](#server) directive.\n\nChanges made during [configuration reload](../control#reconfiguration) or [binary upgrade](../control#upgrade) can be lost.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`hash`**` `*`key`*` [consistent];` |\n| Default: | —                                    |\n| Context: | `upstream`                           |\n\nSpecifies a load balancing method for a server group where the client-server mapping is based on the hashed *`key`* value. The *`key`* can contain text, variables, and their combinations (1.11.2). Usage example:\n\n``` nginx\nhash $remote_addr;\n```\n\nNote that adding or removing a server from the group may result in remapping most of the keys to different servers. The method is compatible with the [Cache::Memcached](https://metacpan.org/pod/Cache::Memcached) Perl library.\n\nIf the `consistent` parameter is specified, the [ketama](https://www.metabrew.com/article/libketama-consistent-hashing-algo-memcached-clients) consistent hashing method will be used instead. The method ensures that only a few keys will be remapped to different servers when a server is added to or removed from the group. This helps to achieve a higher cache hit ratio for caching servers. The method is compatible with the [Cache::Memcached::Fast](https://metacpan.org/pod/Cache::Memcached::Fast) Perl library with the *`ketama_points`* parameter set to 160.\n\n|          |                     |\n|----------|---------------------|\n| Syntax:  | **`least_conn`**`;` |\n| Default: | —                   |\n| Context: | `upstream`          |\n\nSpecifies that a group should use a load balancing method where a connection is passed to the server with the least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.\n\n|          |                                                                 |\n|----------|-----------------------------------------------------------------|\n| Syntax:  | **`least_time`**` connect | first_byte | last_byte [inflight];` |\n| Default: | —                                                               |\n| Context: | `upstream`                                                      |\n\nSpecifies that a group should use a load balancing method where a connection is passed to the server with the least average time and least number of active connections, taking into account weights of servers. If there are several such servers, they are tried in turn using a weighted round-robin balancing method.\n\nIf the `connect` parameter is specified, time to [connect](#var_upstream_connect_time) to the upstream server is used. If the `first_byte` parameter is specified, time to receive the [first byte](#var_upstream_first_byte_time) of data is used. If the `last_byte` is specified, time to receive the [last byte](#var_upstream_session_time) of data is used. If the `inflight` parameter is specified (1.11.6), incomplete connections are also taken into account.\n\nPrior to version 1.11.6, incomplete connections were taken into account by default.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`random`**` [two [`*`method`*`]];` |\n| Default: | —                                    |\n| Context: | `upstream`                           |\n\nThis directive appeared in version 1.15.1.\n\nSpecifies that a group should use a load balancing method where a connection is passed to a randomly selected server, taking into account weights of servers.\n\nThe optional `two` parameter instructs nginx to randomly select [two](https://homes.cs.washington.edu/~karlin/papers/balls.pdf) servers and then choose a server using the specified `method`. The default method is `least_conn` which passes a connection to a server with the least number of active connections.\n\nThe `least_time` method passes a connection to a server with the least average time and least number of active connections. If `least_time=connect` parameter is specified, time to [connect](#var_upstream_connect_time) to the upstream server is used. If `least_time=first_byte` parameter is specified, time to receive the [first byte](#var_upstream_first_byte_time) of data is used. If `least_time=last_byte` is specified, time to receive the [last byte](#var_upstream_session_time) of data is used.\n\nThe `least_time` method is available as a part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                                                                                             |\n|----------|-------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`resolver`**` `*`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |\n| Default: | —                                                                                                           |\n| Context: | `upstream`                                                                                                  |\n\nThis directive appeared in version 1.17.5.\n\nConfigures name servers used to resolve names of upstream servers into addresses, for example:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353;\n```\n\nThe address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.\n\nBy default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.\n\nBy default, nginx caches answers using the TTL value of a response. The optional `valid` parameter allows overriding it:\n\n``` nginx\nresolver 127.0.0.1 [::1]:5353 valid=30s;\n```\n\nTo prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.\n\nThe optional `status_zone` parameter enables [collection](../http/ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*.\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`resolver_timeout`**` `*`time`*`;` |\n| Default: | `resolver_timeout 30s;`              |\n| Context: | `upstream`                           |\n\nThis directive appeared in version 1.17.5.\n\nSets a timeout for name resolution, for example:\n\n``` nginx\nresolver_timeout 5s;\n```\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Embedded Variables\n\nThe `ngx_stream_upstream_module` module supports the following embedded variables:\n\n`$upstream_addr`  \nkeeps the IP address and port, or the path to the UNIX-domain socket of the upstream server (1.11.4). If several servers were contacted during proxying, their addresses are separated by commas, e.g. “`192.168.1.1:12345, 192.168.1.2:12345, unix:/tmp/sock`”. If a server cannot be selected, the variable keeps the name of the server group.\n\n`$upstream_bytes_received`  \nnumber of bytes received from an upstream server (1.11.4). Values from several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_bytes_sent`  \nnumber of bytes sent to an upstream server (1.11.4). Values from several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_connect_time`  \ntime to connect to the upstream server (1.11.4); the time is kept in seconds with millisecond resolution. Times of several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_first_byte_time`  \ntime to receive the first byte of data (1.11.4); the time is kept in seconds with millisecond resolution. Times of several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_session_time`  \nsession duration in seconds with millisecond resolution (1.11.4). Times of several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_upstream_module.html](https://nginx.org/en/docs/stream/ngx_stream_upstream_module.html)"
- name: ngx_stream_zone_sync_module
  id: stream/ngx_stream_zone_sync_module
  summary: The ngx_stream_zone_sync_module module (1.13.8) provides the necessary support for synchronizing contents of shared memory zones between nodes of a cluster
  description: "# Module ngx_stream_zone_sync_module\n\n- [Example Configuration](#example)\n- [Directives](#directives)\n- [zone_sync](#zone_sync)\n- [zone_sync_buffers](#zone_sync_buffers)\n- [zone_sync_connect_retry_interval](#zone_sync_connect_retry_interval)\n- [zone_sync_connect_timeout](#zone_sync_connect_timeout)\n- [zone_sync_interval](#zone_sync_interval)\n- [zone_sync_recv_buffer_size](#zone_sync_recv_buffer_size)\n- [zone_sync_server](#zone_sync_server)\n- [zone_sync_ssl](#zone_sync_ssl)\n- [zone_sync_ssl_certificate](#zone_sync_ssl_certificate)\n- [zone_sync_ssl_certificate_key](#zone_sync_ssl_certificate_key)\n- [zone_sync_ssl_ciphers](#zone_sync_ssl_ciphers)\n- [zone_sync_ssl_conf_command](#zone_sync_ssl_conf_command)\n- [zone_sync_ssl_crl](#zone_sync_ssl_crl)\n- [zone_sync_ssl_name](#zone_sync_ssl_name)\n- [zone_sync_ssl_password_file](#zone_sync_ssl_password_file)\n- [zone_sync_ssl_protocols](#zone_sync_ssl_protocols)\n- [zone_sync_ssl_server_name](#zone_sync_ssl_server_name)\n- [zone_sync_ssl_trusted_certificate](#zone_sync_ssl_trusted_certificate)\n- [zone_sync_ssl_verify](#zone_sync_ssl_verify)\n- [zone_sync_ssl_verify_depth](#zone_sync_ssl_verify_depth)\n- [zone_sync_timeout](#zone_sync_timeout)\n- [API endpoints](#stream_zone_sync_status)\n- [Starting, stopping, removing a cluster node](#controlling_cluster_node)\n\nThe `ngx_stream_zone_sync_module` module (1.13.8) provides the necessary support for synchronizing contents of [shared memory zones](ngx_stream_upstream_module#zone) between nodes of a cluster. To enable synchronization for a particular zone, a corresponding module must support this feature. Currently, it is possible to synchronize HTTP [sticky](../http/ngx_http_upstream_module#sticky) sessions, information about [excessive HTTP requests](../http/ngx_http_limit_req_module), and key-value pairs both in [http](../http/ngx_http_keyval_module) and [stream](ngx_stream_keyval_module).\n\nThis module is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Example Configuration\n\nMinimal configuration:\n\n``` nginx\nhttp {\n    ...\n\n    upstream backend {\n       server backend1.example.com:8080;\n       server backend2.example.com:8081;\n\n       sticky learn\n              create=$upstream_cookie_examplecookie\n              lookup=$cookie_examplecookie\n              zone=client_sessions:1m sync;\n    }\n\n    ...\n}\n\nstream {\n    ...\n\n\n    server {\n        zone_sync;\n\n        listen 127.0.0.1:12345;\n\n        # cluster of 2 nodes\n        zone_sync_server a.example.com:12345;\n        zone_sync_server b.example.com:12345;\n\n    }\n```\n\nA more complex configuration with SSL enabled and with cluster members defined by DNS:\n\n``` nginx\n...\n\nstream {\n    ...\n\n    resolver 127.0.0.1 valid=10s;\n\n    server {\n        zone_sync;\n\n        # the name resolves to multiple addresses that correspond to cluster nodes\n        zone_sync_server cluster.example.com:12345 resolve;\n\n        listen 127.0.0.1:4433 ssl;\n\n        ssl_certificate     localhost.crt;\n        ssl_certificate_key localhost.key;\n\n        zone_sync_ssl on;\n\n        zone_sync_ssl_certificate     localhost.crt;\n        zone_sync_ssl_certificate_key localhost.key;\n    }\n}\n```\n\n#### Directives\n\n|          |                    |\n|----------|--------------------|\n| Syntax:  | **`zone_sync`**`;` |\n| Default: | —                  |\n| Context: | `server`           |\n\nEnables the synchronization of shared memory zones between cluster nodes. Cluster nodes are defined using [zone_sync_server](#zone_sync_server) directives.\n\n|          |                                                    |\n|----------|----------------------------------------------------|\n| Syntax:  | **`zone_sync_buffers`**` `*`number`*` `*`size`*`;` |\n| Default: | `zone_sync_buffers 8 4k|8k;`                       |\n| Context: | `stream`, `server`                                 |\n\nSets the *`number`* and *`size`* of the per-zone buffers used for pushing zone contents. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.\n\nA single buffer must be large enough to hold any entry of each zone being synchronized.\n\n|          |                                                      |\n|----------|------------------------------------------------------|\n| Syntax:  | **`zone_sync_connect_retry_interval`**` `*`time`*`;` |\n| Default: | `zone_sync_connect_retry_interval 1s;`               |\n| Context: | `stream`, `server`                                   |\n\nDefines an interval between connection attempts to another cluster node.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`zone_sync_connect_timeout`**` `*`time`*`;` |\n| Default: | `zone_sync_connect_timeout 5s;`               |\n| Context: | `stream`, `server`                            |\n\nDefines a timeout for establishing a connection with another cluster node.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`zone_sync_interval`**` `*`time`*`;` |\n| Default: | `zone_sync_interval 1s;`               |\n| Context: | `stream`, `server`                     |\n\nDefines an interval for polling updates in a shared memory zone.\n\n|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`zone_sync_recv_buffer_size`**` `*`size`*`;` |\n| Default: | `zone_sync_recv_buffer_size 4k|8k;`            |\n| Context: | `stream`, `server`                             |\n\nSets *`size`* of a per-connection receive buffer used to parse incoming stream of synchronization messages. The buffer size must be equal or greater than one of the [zone_sync_buffers](#zone_sync_buffers). By default, the buffer size is equal to [zone_sync_buffers](#zone_sync_buffers) *`size`* multiplied by *`number`*.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`zone_sync_server`**` `*`address`*` [resolve];` |\n| Default: | —                                                 |\n| Context: | `server`                                          |\n\nDefines the *`address`* of a cluster node. The address can be specified as a domain name or IP address with a mandatory port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. A domain name that resolves to several IP addresses defines multiple nodes at once.\n\nThe `resolve` parameter instructs nginx to monitor changes of the IP addresses that correspond to a domain name of the node and automatically modify the configuration without the need of restarting nginx.\n\nCluster nodes are specified either dynamically as a single `zone_sync_server` directive with the `resolve` parameter, or statically as a series of several directives without the parameter.\n\nEach cluster node should be specified only once.\n\nAll cluster nodes should use the same configuration.\n\nIn order for the `resolve` parameter to work, the [resolver](ngx_stream_core_module#resolver) directive must be specified in the [stream](ngx_stream_core_module#stream) block. Example:\n\n``` nginx\nstream {\n    resolver 10.0.0.1;\n\n    server {\n        zone_sync;\n        zone_sync_server cluster.example.com:12345 resolve;\n        ...\n    }\n}\n```\n\n|          |                                 |\n|----------|---------------------------------|\n| Syntax:  | **`zone_sync_ssl`**` on | off;` |\n| Default: | `zone_sync_ssl off;`            |\n| Context: | `stream`, `server`              |\n\nEnables the SSL/TLS protocol for connections to another cluster server.\n\n|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_certificate`**` `*`file`*`;` |\n| Default: | —                                             |\n| Context: | `stream`, `server`                            |\n\nSpecifies a *`file`* with the certificate in the PEM format used for authentication to another cluster server.\n\n|          |                                                   |\n|----------|---------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_certificate_key`**` `*`file`*`;` |\n| Default: | —                                                 |\n| Context: | `stream`, `server`                                |\n\nSpecifies a *`file`* with the secret key in the PEM format used for authentication to another cluster server.\n\n|          |                                              |\n|----------|----------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_ciphers`**` `*`ciphers`*`;` |\n| Default: | `zone_sync_ssl_ciphers DEFAULT;`             |\n| Context: | `stream`, `server`                           |\n\nSpecifies the enabled ciphers for connections to another cluster server. The ciphers are specified in the format understood by the OpenSSL library.\n\nThe full list can be viewed using the “`openssl ciphers`” command.\n\n|          |                                                            |\n|----------|------------------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_conf_command`**` `*`name`*` `*`value`*`;` |\n| Default: | —                                                          |\n| Context: | `stream`, `server`                                         |\n\nThis directive appeared in version 1.19.4.\n\nSets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with another cluster server.\n\nThe directive is supported when using OpenSSL 1.0.2 or higher.\n\nSeveral `zone_sync_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `zone_sync_ssl_conf_command` directives defined on the current level.\n\nNote that configuring OpenSSL directly might result in unexpected behavior.\n\n|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`zone_sync_ssl_crl`**` `*`file`*`;` |\n| Default: | —                                     |\n| Context: | `stream`, `server`                    |\n\nSpecifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#zone_sync_ssl_verify) the certificate of another cluster server.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_name`**` `*`name`*`;`           |\n| Default: | `zone_sync_ssl_name host from zone_sync_server;` |\n| Context: | `stream`, `server`                               |\n\nThis directive appeared in version 1.15.7.\n\nAllows overriding the server name used to [verify](#zone_sync_ssl_verify) the certificate of a cluster server and to be [passed through SNI](#zone_sync_ssl_server_name) when establishing a connection with the cluster server.\n\nBy default, the host part of the [zone_sync_server](#zone_sync_server) address is used, or resolved IP address if the [resolve](#resolve) parameter is specified.\n\n|          |                                                 |\n|----------|-------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_password_file`**` `*`file`*`;` |\n| Default: | —                                               |\n| Context: | `stream`, `server`                              |\n\nSpecifies a *`file`* with passphrases for [secret keys](#zone_sync_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.\n\n|          |                                                                                        |\n|----------|----------------------------------------------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |\n| Default: | `zone_sync_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;`                                       |\n| Context: | `stream`, `server`                                                                     |\n\nEnables the specified protocols for connections to another cluster server.\n\n|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_server_name`**` on | off;` |\n| Default: | `zone_sync_ssl_server_name off;`            |\n| Context: | `stream`, `server`                          |\n\nThis directive appeared in version 1.15.7.\n\nEnables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with another cluster server.\n\n|          |                                                       |\n|----------|-------------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_trusted_certificate`**` `*`file`*`;` |\n| Default: | —                                                     |\n| Context: | `stream`, `server`                                    |\n\nSpecifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#zone_sync_ssl_verify) the certificate of another cluster server.\n\n|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`zone_sync_ssl_verify`**` on | off;` |\n| Default: | `zone_sync_ssl_verify off;`            |\n| Context: | `stream`, `server`                     |\n\nEnables or disables verification of another cluster server certificate.\n\n|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`zone_sync_ssl_verify_depth`**` `*`number`*`;` |\n| Default: | `zone_sync_ssl_verify_depth 1;`                  |\n| Context: | `stream`, `server`                               |\n\nSets the verification depth in another cluster server certificates chain.\n\n|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`zone_sync_timeout`**` `*`timeout`*`;` |\n| Default: | `zone_sync_timeout 5s;`                  |\n| Context: | `stream`, `server`                       |\n\nSets the *`timeout`* between two successive read or write operations on connection to another cluster node. If no data is transmitted within this time, the connection is closed.\n\n#### API endpoints\n\nThe synchronization status of a node is available via the [/stream/zone_sync/](../http/ngx_http_api_module#stream_zone_sync_) endpoint of the API which returns the [following](../http/ngx_http_api_module#def_nginx_stream_zone_sync) metrics.\n\n#### Starting, stopping, removing a cluster node\n\nTo start a new node, update a DNS record of a cluster hostname with the IP address of the new node and start an instance. The new node will discover other nodes from DNS or static configuration and will start sending updates to them. Other nodes will eventually discover the new node using DNS and start pushing updates to it. In case of static configuration, other nodes need to be reloaded in order to send updates to the new node.\n\nTo stop a node, send the `QUIT` signal to the instance. The node will finish zone synchronization and gracefully close open connections.\n\nTo remove a node, update a DNS record of a cluster hostname and remove the IP address of the node. All other nodes will eventually discover that the node is removed, close connections to the node, and will no longer try to connect to it. After the node is removed, it can be stopped as described above. In case of static configuration, other nodes need to be reloaded in order to stop sending updates to the removed node.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_zone_sync_module.html](https://nginx.org/en/docs/stream/ngx_stream_zone_sync_module.html)"
- name: njs (Reference)
  id: njs/reference#njs
  summary: The njs object is a global object that represents the current VM instance (since 0.2.0)
  belongs_to: Reference
  description: |-
    #### njs

    |                                             |
    |---------------------------------------------|
    | [`njs.version`](#njs_version)               |
    | [`njs.version_number`](#njs_version_number) |
    | [`njs.dump()`](#njs_dump)                   |
    | [`njs.memoryStats`](#njs_memory_stats)      |
    | [`njs.on()`](#njs_on)                       |

    The `njs` object is a global object that represents the current VM instance (since [0.2.0](changes#njs0.2.0)).

    `njs.version`

    Returns a string with the current version of njs (for example, “0.7.4”).

    `njs.version_number`

    Returns a number with the current version of njs. For example, “0.7.4” is returned as `0x000704` (since [0.7.4](changes#njs0.7.4)).

    `njs.dump(`*`value`*`)`

    Returns the pretty-print string representation for a value.

    `njs.memoryStats`

    Object containing memory statistics for current VM instance (since [0.7.8](changes#njs0.7.8)).

    `size`

    amount of memory in bytes njs memory pool claimed from the operating system.

    `njs.on(`*`event`*`, `*`callback`*`)`

    Registers a callback for the specified VM event (since [0.5.2](changes#njs0.5.2)). An event may be one of the following strings:

    `exit`

    is called before the VM is destroyed. The callback is called without arguments.
- name: njs scripting language
  id: njs/index
  summary: njs is a subset of the JavaScript language that allows extending nginx functionality
  description: "# njs scripting language\n\nnjs is a subset of the JavaScript language that allows extending nginx functionality. njs is created in compliance with [ECMAScript 5.1](http://www.ecma-international.org/ecma-262/5.1/) (strict mode) with some [ECMAScript 6](http://www.ecma-international.org/ecma-262/6.0/) and later extensions. The compliance is still [evolving](compatibility).\n\n- [Download and install](install)\n- [Changes](changes)\n- [Reference](reference)\n- [Examples](https://github.com/nginx/njs-examples/)\n- [Security](security)\n- [Compatibility](compatibility)\n- [Command-line interface](cli)\n- [Understanding preloaded objects](preload_objects)\n- [Tested OS and platforms](#tested_os_and_platforms)\n\n- [ngx_http_js_module](../http/ngx_http_js_module)\n- [ngx_stream_js_module](../stream/ngx_stream_js_module)\n\n&nbsp;\n\n- [Writing njs code using TypeScript definition files](typescript)\n- [Using node modules with njs](node_modules)\n\n#### Use cases\n\n- Complex access control and security checks in njs before a request reaches an upstream server\n- Manipulating response headers\n- Writing flexible asynchronous content handlers and filters\n\nSee [examples](https://github.com/nginx/njs-examples/) for more njs use cases.\n\n#### Basic HTTP Example\n\nTo use njs in nginx:\n\n- [install](install) njs scripting language\n\n- create an njs script file, for example, `http.js`. See [Reference](reference) for the list of njs properties and methods.\n\n  ``` nginx\n  function hello(r) {\n      r.return(200, \"Hello world!\");\n  }\n\n  export default {hello};\n  ```\n\n- in the `nginx.conf` file, enable [ngx_http_js_module](../http/ngx_http_js_module) module and specify the [js_import](../http/ngx_http_js_module#js_import) directive with the `http.js` script file:\n\n  ``` nginx\n  load_module modules/ngx_http_js_module.so;\n\n  events {}\n\n  http {\n      js_import http.js;\n\n      server {\n          listen 8000;\n\n          location / {\n              js_content http.hello;\n          }\n      }\n  }\n  ```\n\nThere is also a standalone [command line](cli) utility that can be used independently of nginx for njs development and debugging.\n\n#### Tested OS and platforms\n\n- FreeBSD / amd64;\n- Linux / x86, amd64, arm64, ppc64el;\n- Solaris 11 / amd64;\n- macOS / x86_64;\n\n#### Presentation at nginx.conf 2018\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/index.html](https://nginx.org/en/docs/njs/index.html)"
- name: ntlm
  id: http/ngx_http_upstream_module#ntlm
  summary: This directive appeared in version 1.9.2
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |               |
    |----------|---------------|
    | Syntax:  | **`ntlm`**`;` |
    | Default: | —             |
    | Context: | `upstream`    |

    This directive appeared in version 1.9.2.

    Allows proxying requests with [NTLM Authentication](https://en.wikipedia.org/wiki/Integrated_Windows_Authentication). The upstream connection is bound to the client connection once the client sends a request with the “Authorization” header field value starting with “`Negotiate`” or “`NTLM`”. Further client requests will be proxied through the same upstream connection, keeping the authentication context.

    In order for NTLM authentication to work, it is necessary to enable keepalive connections to upstream servers. The [proxy_http_version](ngx_http_proxy_module#proxy_http_version) directive should be set to “`1.1`” and the “Connection” header field should be cleared:

    ``` nginx
    upstream http_backend {
        server 127.0.0.1:8080;

        ntlm;
    }

    server {
        ...

        location /http/ {
            proxy_pass http://http_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            ...
        }
    }
    ```

    When using load balancer methods other than the default round-robin method, it is necessary to activate them before the `ntlm` directive.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: open_file_cache
  id: http/ngx_http_core_module#open_file_cache
  summary: file lookup errors, such as “file not found”, “no read permission”, and so on
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                                                        |
    |----------|----------------------------------------------------------------------------------------|
    | Syntax:  | **`open_file_cache`**` off;`**`open_file_cache`**` max=`*`N`*` [inactive=`*`time`*`];` |
    | Default: | `open_file_cache off;`                                                                 |
    | Context: | `http`, `server`, `location`                                                           |

    Configures a cache that can store:

    - open file descriptors, their sizes and modification times;

    - information on existence of directories;

    - file lookup errors, such as “file not found”, “no read permission”, and so on.

    Caching of errors should be enabled separately by the [open_file_cache_errors](#open_file_cache_errors) directive.

    The directive has the following parameters:

    `max`

    sets the maximum number of elements in the cache; on cache overflow the least recently used (LRU) elements are removed;

    `inactive`

    defines a time after which an element is removed from the cache if it has not been accessed during this time; by default, it is 60 seconds;

    `off`

    disables the cache.

    Example:

    ``` nginx
    open_file_cache          max=1000 inactive=20s;
    open_file_cache_valid    30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;
    ```
- name: open_file_cache_errors
  id: http/ngx_http_core_module#open_file_cache_errors
  summary: Enables or disables caching of file lookup errors by open_file_cache
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`open_file_cache_errors`**` on | off;` |
    | Default: | `open_file_cache_errors off;`            |
    | Context: | `http`, `server`, `location`             |

    Enables or disables caching of file lookup errors by [open_file_cache](#open_file_cache).
- name: open_file_cache_min_uses
  id: http/ngx_http_core_module#open_file_cache_min_uses
  summary: Sets the minimum number of file accesses during the period configured by the inactive parameter of the open_file_cache directive, required for a file descriptor to remain open in the cache
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`open_file_cache_min_uses`***`number`*`;` |
    | Default: | `open_file_cache_min_uses 1;`               |
    | Context: | `http`, `server`, `location`                |

    Sets the minimum *`number`* of file accesses during the period configured by the `inactive` parameter of the [open_file_cache](#open_file_cache) directive, required for a file descriptor to remain open in the cache.
- name: open_file_cache_valid
  id: http/ngx_http_core_module#open_file_cache_valid
  summary: Sets a time after which open_file_cache elements should be validated
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`open_file_cache_valid`***`time`*`;` |
    | Default: | `open_file_cache_valid 60s;`           |
    | Context: | `http`, `server`, `location`           |

    Sets a time after which [open_file_cache](#open_file_cache) elements should be validated.
- name: open_log_file_cache
  id: http/ngx_http_log_module#open_log_file_cache
  summary: Defines a cache that stores the file descriptors of frequently used logs whose names contain variables
  belongs_to: ngx_http_log_module
  description: "|          |                                                                                                                                      |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`open_log_file_cache`**` max=`*`N`*` [inactive=`*`time`*`] [min_uses=`*`N`*`] [valid=`*`time`*`];`**`open_log_file_cache`**` off;` |\n| Default: | `open_log_file_cache off;`                                                                                                           |\n| Context: | `http`, `server`, `location`                                                                                                         |\n\nDefines a cache that stores the file descriptors of frequently used logs whose names contain variables. The directive has the following parameters:\n\n`max`\n\nsets the maximum number of descriptors in a cache; if the cache becomes full the least recently used (LRU) descriptors are closed\n\n`inactive`\n\nsets the time after which the cached descriptor is closed if there were no access during this time; by default, 10 seconds\n\n`min_uses`\n\nsets the minimum number of file uses during the time defined by the `inactive` parameter to let the descriptor stay open in a cache; by default, 1\n\n`valid`\n\nsets the time after which it should be checked that the file still exists with the same name; by default, 60 seconds\n\n`off`\n\ndisables caching\n\nUsage example:\n\n``` nginx\nopen_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_log_module.html](https://nginx.org/en/docs/http/ngx_http_log_module.html)"
- name: open_log_file_cache (ngx_stream_log_module)
  id: stream/ngx_stream_log_module#open_log_file_cache
  summary: Defines a cache that stores the file descriptors of frequently used logs whose names contain variables
  belongs_to: ngx_stream_log_module
  description: "|          |                                                                                                                                      |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`open_log_file_cache`**` max=`*`N`*` [inactive=`*`time`*`] [min_uses=`*`N`*`] [valid=`*`time`*`];`**`open_log_file_cache`**` off;` |\n| Default: | `open_log_file_cache off;`                                                                                                           |\n| Context: | `stream`, `server`                                                                                                                   |\n\nDefines a cache that stores the file descriptors of frequently used logs whose names contain variables. The directive has the following parameters:\n\n`max`\n\nsets the maximum number of descriptors in a cache; if the cache becomes full the least recently used (LRU) descriptors are closed\n\n`inactive`\n\nsets the time after which the cached descriptor is closed if there were no access during this time; by default, 10 seconds\n\n`min_uses`\n\nsets the minimum number of file uses during the time defined by the `inactive` parameter to let the descriptor stay open in a cache; by default, 1\n\n`valid`\n\nsets the time after which it should be checked that the file still exists with the same name; by default, 60 seconds\n\n`off`\n\ndisables caching\n\nUsage example:\n\n``` nginx\nopen_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_log_module.html](https://nginx.org/en/docs/stream/ngx_stream_log_module.html)"
- name: otel_exporter (ngx_otel_module)
  id: ngx_otel_module#otel_exporter
  summary: the address of OTLP/gRPC endpoint that will accept telemetry data
  belongs_to: ngx_otel_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`otel_exporter`**` { ... }` |
    | Default: | —                             |
    | Context: | `http`                        |

    Specifies OTel data export parameters:

    `endpoint`

    the address of OTLP/gRPC endpoint that will accept telemetry data.

    `interval`

    the maximum interval between two exports, by default is `5` seconds.

    `batch_size`

    the maximum number of spans to be sent in one batch per worker, by default is `512`.

    `batch_count`

    the number of pending batches per worker, spans exceeding the limit are dropped, by default is `4`.

    Example:

    ``` nginx
    otel_exporter {
        endpoint    localhost:4317;
        interval    5s;
        batch_size  512;
        batch_count 4;
    }
    ```
- name: otel_service_name (ngx_otel_module)
  id: ngx_otel_module#otel_service_name
  summary: Sets the “service.name” attribute of the OTel resource
  belongs_to: ngx_otel_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`otel_service_name`***`name`*`;`         |
    | Default: | `otel_service_name unknown_service:nginx;` |
    | Context: | `http`                                     |

    Sets the “[`service.name`](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/#service)” attribute of the OTel resource.
- name: otel_span_attr (ngx_otel_module)
  id: ngx_otel_module#otel_span_attr
  summary: Adds a custom OTel span attribute
  belongs_to: ngx_otel_module
  description: "|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`otel_span_attr`***`namevalue`*`;` |\n| Default: | —                                    |\n| Context: | `http`, `server`, `location`         |\n\nAdds a custom OTel span attribute. The value can contain variables.\n\n#### Default span attributes\n\nThe following [span attributes](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/http.md) are added automatically:\n\n- `http.method`\n- `http.target`\n- `http.route`\n- `http.scheme`\n- `http.flavor`\n- `http.user_agent`\n- `http.request_content_length`\n- `http.response_content_length`\n- `http.status_code`\n- `net.host.name`\n- `net.host.port`\n- `net.sock.peer.addr`\n- `net.sock.peer.port`\n\n#### Embedded Variables\n\n`$otel_trace_id`\n\nthe identifier of the trace the current span belongs to, for example, `56552bc4daa3bf39c08362527e1dd6c4`\n\n`$otel_span_id`\n\nthe identifier of the current span, for example, `4c0b8531ec38ca59`\n\n`$otel_parent_id`\n\nthe identifier of the parent span, for example, `dc94d281b0f884ea`\n\n`$otel_parent_sampled`\n\nthe “`sampled`” flag of the parent span, can be “`1`” or “`0`”\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_otel_module.html](https://nginx.org/en/docs/ngx_otel_module.html)"
- name: otel_span_name (ngx_otel_module)
  id: ngx_otel_module#otel_span_name
  summary: Defines the name of the OTel span
  belongs_to: ngx_otel_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`otel_span_name`***`name`*`;` |
    | Default: | —                               |
    | Context: | `http`, `server`, `location`    |

    Defines the name of the OTel [span](https://opentelemetry.io/docs/concepts/observability-primer/#spans). By default, it is a name of the location for a request. The name can contain variables.
- name: otel_trace (ngx_otel_module)
  id: ngx_otel_module#otel_trace
  summary: Enables or disables OpenTelemetry tracing
  belongs_to: ngx_otel_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`otel_trace`**` on | off | $variable;` |
    | Default: | `otel_trace off;`                        |
    | Context: | `http`, `server`, `location`             |

    Enables or disables OpenTelemetry tracing. The directive can also be enabled by specifying a variable:

    ``` nginx
    split_clients "$otel_trace_id" $ratio_sampler {
                  10%              on;
                  *                off;
    }

    server {
        location / {
            otel_trace         $ratio_sampler;
            otel_trace_context inject;
            proxy_pass         http://backend;
        }
    }
    ```
- name: otel_trace_context (ngx_otel_module)
  id: ngx_otel_module#otel_trace_context
  summary: uses an existing trace context from the request, so that the identifiers of a trace and the parent span are inherited from the incoming request
  belongs_to: ngx_otel_module
  description: |-
    |          |                                                                   |
    |----------|-------------------------------------------------------------------|
    | Syntax:  | **`otel_trace_context`**` extract | inject | propagate | ignore;` |
    | Default: | `otel_trace_context ignore;`                                      |
    | Context: | `http`, `server`, `location`                                      |

    Specifies how to propagate [traceparent/tracestate](https://www.w3.org/TR/trace-context/#design-overview) headers:

    `extract`

    uses an existing trace context from the request, so that the identifiers of a [trace](#var_otel_trace_id) and the [parent span](#var_otel_parent_id) are inherited from the incoming request.

    `inject`

    adds a new context to the request, overwriting existing headers, if any.

    `propagate`

    updates the existing context (combines [extract](#extract) and [inject](#inject)).

    `ignore`

    skips context headers processing.
- name: output_buffers
  id: http/ngx_http_core_module#output_buffers
  summary: Sets the number and size of the buffers used for reading a response from a disk
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`output_buffers`***`numbersize`*`;` |
    | Default: | `output_buffers 2 32k;`               |
    | Context: | `http`, `server`, `location`          |

    Sets the *`number`* and *`size`* of the buffers used for reading a response from a disk.

    Prior to version 1.9.5, the default value was 1 32k.
- name: override_charset
  id: http/ngx_http_charset_module#override_charset
  summary: Determines whether a conversion should be performed for answers received from a proxied or a FastCGI/uwsgi/SCGI/gRPC server when the answers already carry a charset in the “Content-Type” response header field
  belongs_to: ngx_http_charset_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`override_charset`**` on | off;`             |
    | Default: | `override_charset off;`                        |
    | Context: | `http`, `server`, `location`, `if in location` |

    Determines whether a conversion should be performed for answers received from a proxied or a FastCGI/uwsgi/SCGI/gRPC server when the answers already carry a charset in the “Content-Type” response header field. If conversion is enabled, a charset specified in the received response is used as a source charset.

    It should be noted that if a response is received in a subrequest then the conversion from the response charset to the main request charset is always performed, regardless of the `override_charset` directive setting.
- name: pass (ngx_stream_pass_module)
  id: stream/ngx_stream_pass_module#pass
  summary: Sets server address to pass client connection to
  belongs_to: ngx_stream_pass_module
  description: "|          |                          |\n|----------|--------------------------|\n| Syntax:  | **`pass`***`address`*`;` |\n| Default: | —                        |\n| Context: | `server`                 |\n\nSets server address to pass client connection to. The address can be specified as an IP address and a port:\n\n``` nginx\npass 127.0.0.1:12345;\n```\n\nor as a UNIX-domain socket path:\n\n``` nginx\npass unix:/tmp/stream.socket;\n```\n\nThe address can also be specified using variables:\n\n``` nginx\npass $upstream;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_pass_module.html](https://nginx.org/en/docs/stream/ngx_stream_pass_module.html)"
- name: pcre_jit (Core functionality)
  id: ngx_core_module#pcre_jit
  summary: This directive appeared in version 1.1.12
  belongs_to: Core functionality
  description: |-
    |          |                            |
    |----------|----------------------------|
    | Syntax:  | **`pcre_jit`**` on | off;` |
    | Default: | `pcre_jit off;`            |
    | Context: | `main`                     |

    This directive appeared in version 1.1.12.

    Enables or disables the use of “just-in-time compilation” (PCRE JIT) for the regular expressions known by the time of configuration parsing.

    PCRE JIT can speed up processing of regular expressions significantly.

    The JIT is available in PCRE libraries starting from version 8.20 built with the `--enable-jit` configuration parameter. When the PCRE library is built with nginx (`--with-pcre=`), the JIT support is enabled via the `--with-pcre-jit` configuration parameter.
- name: perl
  id: http/ngx_http_perl_module#perl
  summary: Sets a Perl handler for the given location
  belongs_to: ngx_http_perl_module
  description: |-
    |          |                                                       |
    |----------|-------------------------------------------------------|
    | Syntax:  | **`perl`***`module`*`::`*`function`*`|'sub { ... }';` |
    | Default: | —                                                     |
    | Context: | `location`, `limit_except`                            |

    Sets a Perl handler for the given location.
- name: perl_modules
  id: http/ngx_http_perl_module#perl_modules
  summary: Sets an additional path for Perl modules
  belongs_to: ngx_http_perl_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`perl_modules`***`path`*`;` |
    | Default: | —                             |
    | Context: | `http`                        |

    Sets an additional path for Perl modules.
- name: perl_require
  id: http/ngx_http_perl_module#perl_require
  summary: Defines the name of a module that will be loaded during each reconfiguration
  belongs_to: ngx_http_perl_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`perl_require`***`module`*`;` |
    | Default: | —                               |
    | Context: | `http`                          |

    Defines the name of a module that will be loaded during each reconfiguration. Several `perl_require` directives can be present.
- name: perl_set
  id: http/ngx_http_perl_module#perl_set
  summary: Installs a Perl handler for the specified variable
  belongs_to: ngx_http_perl_module
  description: "|          |                                                                    |\n|----------|--------------------------------------------------------------------|\n| Syntax:  | **`perl_set`***`$variablemodule`*`::`*`function`*`|'sub { ... }';` |\n| Default: | —                                                                  |\n| Context: | `http`                                                             |\n\nInstalls a Perl handler for the specified variable.\n\n#### Calling Perl from SSI\n\nAn SSI command calling Perl has the following format:\n\n``` nginx\n<!--# perl sub=\"module::function\" arg=\"parameter1\" arg=\"parameter2\" ...\n-->\n```\n\n#### The $r Request Object Methods\n\n`$r->args`\n\nreturns request arguments.\n\n`$r->filename`\n\nreturns a filename corresponding to the request URI.\n\n`$r->has_request_body(`*`handler`*`)`\n\nreturns 0 if there is no body in a request. If there is a body, the specified handler is set for the request and 1 is returned. After reading the request body, nginx will call the specified handler. Note that the handler function should be passed by reference. Example:\n\n``` nginx\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    if ($r->request_method ne \"POST\") {\n        return DECLINED;\n    }\n\n    if ($r->has_request_body(\\&post)) {\n        return OK;\n    }\n\n    return HTTP_BAD_REQUEST;\n}\n\nsub post {\n    my $r = shift;\n\n    $r->send_http_header;\n\n    $r->print(\"request_body: \\\"\", $r->request_body, \"\\\"<br/>\");\n    $r->print(\"request_body_file: \\\"\", $r->request_body_file, \"\\\"<br/>\\n\");\n\n    return OK;\n}\n\n1;\n\n__END__\n```\n\n`$r->allow_ranges`\n\nenables the use of byte ranges when sending responses.\n\n`$r->discard_request_body`\n\ninstructs nginx to discard the request body.\n\n`$r->header_in(`*`field`*`)`\n\nreturns the value of the specified client request header field.\n\n`$r->header_only`\n\ndetermines whether the whole response or only its header should be sent to the client.\n\n`$r->header_out(`*`field`*`, `*`value`*`)`\n\nsets a value for the specified response header field.\n\n`$r->internal_redirect(`*`uri`*`)`\n\ndoes an internal redirect to the specified *`uri`*. An actual redirect happens after the Perl handler execution is completed.\n\nSince version 1.17.2, the method accepts escaped URIs and supports redirections to named locations.\n\n`$r->log_error(`*`errno`*`, `*`message`*`)`\n\nwrites the specified *`message`* into the [error_log](../ngx_core_module#error_log). If *`errno`* is non-zero, an error code and its description will be appended to the message.\n\n`$r->print(`*`text`*`, ...)`\n\npasses data to a client.\n\n`$r->request_body`\n\nreturns the client request body if it has not been written to a temporary file. To ensure that the client request body is in memory, its size should be limited by [client_max_body_size](ngx_http_core_module#client_max_body_size), and a sufficient buffer size should be set using [client_body_buffer_size](ngx_http_core_module#client_body_buffer_size).\n\n`$r->request_body_file`\n\nreturns the name of the file with the client request body. After the processing, the file should be removed. To always write a request body to a file, [client_body_in_file_only](ngx_http_core_module#client_body_in_file_only) should be enabled.\n\n`$r->request_method`\n\nreturns the client request HTTP method.\n\n`$r->remote_addr`\n\nreturns the client IP address.\n\n`$r->flush`\n\nimmediately sends data to the client.\n\n`$r->sendfile(`*`name`*`[, `*`offset`*`[, `*`length`*`]])`\n\nsends the specified file content to the client. Optional parameters specify the initial offset and length of the data to be transmitted. The actual data transmission happens after the Perl handler has completed.\n\n`$r->send_http_header([`*`type`*`])`\n\nsends the response header to the client. The optional *`type`* parameter sets the value of the “Content-Type” response header field. If the value is an empty string, the “Content-Type” header field will not be sent.\n\n`$r->status(`*`code`*`)`\n\nsets a response code.\n\n`$r->sleep(`*`milliseconds`*`, `*`handler`*`)`\n\nsets the specified handler and stops request processing for the specified time. In the meantime, nginx continues to process other requests. After the specified time has elapsed, nginx will call the installed handler. Note that the handler function should be passed by reference. In order to pass data between handlers, `$r->variable()` should be used. Example:\n\n``` nginx\npackage hello;\n\nuse nginx;\n\nsub handler {\n    my $r = shift;\n\n    $r->discard_request_body;\n    $r->variable(\"var\", \"OK\");\n    $r->sleep(1000, \\&next);\n\n    return OK;\n}\n\nsub next {\n    my $r = shift;\n\n    $r->send_http_header;\n    $r->print($r->variable(\"var\"));\n\n    return OK;\n}\n\n1;\n\n__END__\n```\n\n`$r->unescape(`*`text`*`)`\n\ndecodes a text encoded in the “%XX” form.\n\n`$r->uri`\n\nreturns a request URI.\n\n`$r->variable(`*`name`*`[, `*`value`*`])`\n\nreturns or sets the value of the specified variable. Variables are local to each request.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_perl_module.html](https://nginx.org/en/docs/http/ngx_http_perl_module.html)"
- name: pid (Core functionality)
  id: ngx_core_module#pid
  summary: Defines a file that will store the process ID of the main process
  belongs_to: Core functionality
  description: |-
    |          |                       |
    |----------|-----------------------|
    | Syntax:  | **`pid`***`file`*`;`  |
    | Default: | `pid logs/nginx.pid;` |
    | Context: | `main`                |

    Defines a *`file`* that will store the process ID of the main process.
- name: pop3_auth (ngx_mail_pop3_module)
  id: mail/ngx_mail_pop3_module#pop3_auth
  summary: Sets permitted methods of authentication for POP3 clients
  belongs_to: ngx_mail_pop3_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`pop3_auth`***`method`*` ...;` |
    | Default: | `pop3_auth plain;`               |
    | Context: | `mail`, `server`                 |

    Sets permitted methods of authentication for POP3 clients. Supported methods are:

    `plain`

    [USER/PASS](https://datatracker.ietf.org/doc/html/rfc1939), [AUTH PLAIN](https://datatracker.ietf.org/doc/html/rfc4616), [AUTH LOGIN](https://datatracker.ietf.org/doc/html/draft-murchison-sasl-login-00)

    `apop`

    [APOP](https://datatracker.ietf.org/doc/html/rfc1939). In order for this method to work, the password must be stored unencrypted.

    `cram-md5`

    [AUTH CRAM-MD5](https://datatracker.ietf.org/doc/html/rfc2195). In order for this method to work, the password must be stored unencrypted.

    `external`

    [AUTH EXTERNAL](https://datatracker.ietf.org/doc/html/rfc4422) (1.11.6).

    Plain text authentication methods (`USER/PASS`, `AUTH PLAIN`, and `AUTH LOGIN`) are always enabled, though if the `plain` method is not specified, `AUTH PLAIN` and `AUTH LOGIN` will not be automatically included in [pop3_capabilities](#pop3_capabilities).
- name: pop3_capabilities (ngx_mail_pop3_module)
  id: mail/ngx_mail_pop3_module#pop3_capabilities
  summary: Sets the POP3 protocol extensions list that is passed to the client in response to the CAPA command
  belongs_to: ngx_mail_pop3_module
  description: "|          |                                             |\n|----------|---------------------------------------------|\n| Syntax:  | **`pop3_capabilities`***`extension`*` ...;` |\n| Default: | `pop3_capabilities TOP USER UIDL;`          |\n| Context: | `mail`, `server`                            |\n\nSets the [POP3 protocol](https://datatracker.ietf.org/doc/html/rfc2449) extensions list that is passed to the client in response to the `CAPA` command. The authentication methods specified in the [pop3_auth](#pop3_auth) directive ([SASL](https://datatracker.ietf.org/doc/html/rfc2449) extension) and [STLS](https://datatracker.ietf.org/doc/html/rfc2595) are automatically added to this list depending on the [starttls](ngx_mail_ssl_module#starttls) directive value.\n\nIt makes sense to specify the extensions supported by the POP3 backends to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies the client connection to the backend).\n\nThe current list of standardized extensions is published at [www.iana.org](http://www.iana.org/assignments/pop3-extension-mechanism).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_pop3_module.html](https://nginx.org/en/docs/mail/ngx_mail_pop3_module.html)"
- name: port_in_redirect
  id: http/ngx_http_core_module#port_in_redirect
  summary: Enables or disables specifying the port in absolute redirects issued by nginx
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`port_in_redirect`**` on | off;` |
    | Default: | `port_in_redirect on;`             |
    | Context: | `http`, `server`, `location`       |

    Enables or disables specifying the port in [absolute](#absolute_redirect) redirects issued by nginx.

    The use of the primary server name in redirects is controlled by the [server_name_in_redirect](#server_name_in_redirect) directive.
- name: postpone_output
  id: http/ngx_http_core_module#postpone_output
  summary: If possible, the transmission of client data will be postponed until nginx has at least size bytes of data to send
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`postpone_output`***`size`*`;` |
    | Default: | `postpone_output 1460;`          |
    | Context: | `http`, `server`, `location`     |

    If possible, the transmission of client data will be postponed until nginx has at least *`size`* bytes of data to send. The zero value disables postponing data transmission.
- name: preread_buffer_size (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#preread_buffer_size
  summary: This directive appeared in version 1.11.5
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`preread_buffer_size`***`size`*`;` |
    | Default: | `preread_buffer_size 16k;`           |
    | Context: | `stream`, `server`                   |

    This directive appeared in version 1.11.5.

    Specifies a *`size`* of the [preread](stream_processing#preread_phase) buffer.
- name: preread_timeout (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#preread_timeout
  summary: This directive appeared in version 1.11.5
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`preread_timeout`***`timeout`*`;` |
    | Default: | `preread_timeout 30s;`              |
    | Context: | `stream`, `server`                  |

    This directive appeared in version 1.11.5.

    Specifies a *`timeout`* of the [preread](stream_processing#preread_phase) phase.
- name: process (Reference)
  id: njs/reference#process
  summary: The process object is a global object that provides information about the current process (0.3.3)
  belongs_to: Reference
  description: |-
    #### process

    |                                 |
    |---------------------------------|
    | [`process.argv`](#process_argv) |
    | [`process.env`](#process_env)   |
    | [`process.pid`](#process_pid)   |
    | [`process.ppid`](#process_ppid) |

    The `process` object is a global object that provides information about the current process ([0.3.3](changes#njs0.3.3)).

    `process.argv`

    Returns an array that contains the command line arguments passed when the current process was launched.

    `process.env`

    Returns an object containing the user environment.

    By default, nginx removes all environment variables inherited from its parent process except the TZ variable. Use the [env](../ngx_core_module#env) directive to preserve some of the inherited variables.

    `process.pid`

    Returns the PID of the current process.

    `process.ppid`

    Returns the PID of the current parent process.

    #### String

    By default all strings in njs are Unicode strings. They correspond to ECMAScript strings that contain Unicode characters. Before [0.8.0](changes#njs0.8.0), byte strings were also supported.

    #### Byte strings

    Since [0.8.0](changes#njs0.8.0), the support for byte strings and byte string methods were removed. When working with byte sequence, the [Buffer](#buffer) object and `Buffer` properties, such as [`r.requestBuffer`](#r_request_buffer), [`r.rawVariables`](#r_raw_variables), should be used.

    Byte strings contain a sequence of bytes and are used to serialize Unicode strings to external data and deserialize from external sources. For example, the [toUTF8()](#string_toutf8) method serializes a Unicode string to a byte string using UTF-8 encoding:

    ``` nginx
    >> '£'.toUTF8().toString('hex')
    'c2a3'  /* C2 A3 is the UTF-8 representation of 00A3 ('£') code point */
    ```

    The [toBytes()](#string_tobytes) method serializes a Unicode string with code points up to 255 into a byte string, otherwise, `null` is returned:

    ``` nginx
    >> '£'.toBytes().toString('hex')
    'a3'  /* a3 is a byte equal to 00A3 ('£') code point  */
    ```

    `String.bytesFrom(`*`array`*` | `*`string`*`, `*`encoding`*`)`

    The method was made obsolete in [0.4.4](changes#njs0.4.4) and was removed in [0.8.0](changes#njs0.8.0). The `Buffer.from` method should be used instead:

    ``` nginx
    >> Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]).toString()
    'buffer'

    >> Buffer.from('YnVmZmVy', 'base64').toString()
    'buffer'
    ```

    Before [0.4.4](changes#njs0.4.4), created a byte string either from an array that contained octets, or from an encoded string ([0.2.3](changes#njs0.2.3)), the encoding could be `hex`, `base64`, and `base64url`.

    `String.prototype.fromBytes(`*`start`*`[, `*`end`*`])`

    the property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). Before [0.7.7](changes#njs0.7.7), returned a new Unicode string from a byte string where each byte was replaced with a corresponding Unicode code point.

    `String.prototype.fromUTF8(`*`start`*`[, `*`end`*`])`

    the property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). The [`TextDecoder`](#textedeoder) method should be used instead. Before [0.7.7](changes#njs0.7.7), converted a byte string containing a valid UTF-8 string into a Unicode string, otherwise `null` was returned.

    `String.prototype.toBytes(`*`start`*`[, `*`end`*`])`

    the property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). Before [0.7.7](changes#njs0.7.7), serialized a Unicode string to a byte string, returned `null` if a character larger than 255 was found in the string.

    `String.prototype.toString(`*`encoding`*`)`

    the property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). Before [0.7.7](changes#njs0.7.7), encoded a string to `hex`, `base64`, or `base64url`:

    ``` nginx
    >>  'αβγδ'.toString('base64url')
    'zrHOss6zzrQ'
    ```

    Before version [0.4.3](changes#njs0.4.3), only a [byte string](#string_tobytes) could be encoded:

    ``` nginx
    >>  'αβγδ'.toUTF8().toString('base64url')
    'zrHOss6zzrQ'
    ```

    `String.prototype.toUTF8(`*`start`*`[, `*`end`*`])`

    the property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). The [`TextEncoder`](#textencoder) method should be used instead. Before [0.7.7](changes#njs0.7.7), serialized a Unicode string to a byte string using UTF-8 encoding:

    ``` nginx
    >> 'αβγδ'.toUTF8().length
    8
    >> 'αβγδ'.length
    4
    ```
- name: protocol (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#protocol
  summary: Sets the protocol for a proxied server
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`protocol`**` imap | pop3 | smtp;` |
    | Default: | —                                    |
    | Context: | `server`                             |

    Sets the protocol for a proxied server. Supported protocols are [IMAP](ngx_mail_imap_module), [POP3](ngx_mail_pop3_module), and [SMTP](ngx_mail_smtp_module).

    If the directive is not set, the protocol can be detected automatically based on the well-known port specified in the [listen](#listen) directive:

    - `imap`: 143, 993
    - `pop3`: 110, 995
    - `smtp`: 25, 587, 465

    Unnecessary protocols can be disabled using the [configuration](../configure) parameters `--without-mail_imap_module`, `--without-mail_pop3_module`, and `--without-mail_smtp_module`.
- name: proxy_bind
  id: http/ngx_http_proxy_module#proxy_bind
  summary: This directive appeared in version 0.8.22
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`proxy_bind`***`address`*` [transparent] | off;` |
    | Default: | —                                                  |
    | Context: | `http`, `server`, `location`                       |

    This directive appeared in version 0.8.22.

    Makes outgoing connections to a proxied server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `proxy_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.

    The `transparent` parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    proxy_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the proxied server.
- name: proxy_bind (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_bind
  summary: This directive appeared in version 1.9.2
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`proxy_bind`***`address`*` [transparent] | off;` |
    | Default: | —                                                  |
    | Context: | `stream`, `server`                                 |

    This directive appeared in version 1.9.2.

    Makes outgoing connections to a proxied server originate from the specified local IP *`address`*. Parameter value can contain variables (1.11.2). The special value `off` cancels the effect of the `proxy_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address.

    The `transparent` parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    proxy_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the proxied server.
- name: proxy_buffer (ngx_mail_proxy_module)
  id: mail/ngx_mail_proxy_module#proxy_buffer
  summary: Sets the size of the buffer used for proxying
  belongs_to: ngx_mail_proxy_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`proxy_buffer`***`size`*`;` |
    | Default: | `proxy_buffer 4k|8k;`         |
    | Context: | `mail`, `server`              |

    Sets the size of the buffer used for proxying. By default, the buffer size is equal to one memory page. Depending on a platform, it is either 4K or 8K.
- name: proxy_buffer_size
  id: http/ngx_http_proxy_module#proxy_buffer_size
  summary: Sets the size of the buffer used for reading the first part of the response received from the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_buffer_size`***`size`*`;` |
    | Default: | `proxy_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`       |

    Sets the *`size`* of the buffer used for reading the first part of the response received from the proxied server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.
- name: proxy_buffer_size (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_buffer_size
  summary: This directive appeared in version 1.9.4
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_buffer_size`***`size`*`;` |
    | Default: | `proxy_buffer_size 16k;`           |
    | Context: | `stream`, `server`                 |

    This directive appeared in version 1.9.4.

    Sets the *`size`* of the buffer used for reading data from the proxied server. Also sets the *`size`* of the buffer used for reading data from the client.
- name: proxy_buffering
  id: http/ngx_http_proxy_module#proxy_buffering
  summary: Enables or disables buffering of responses from the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_buffering`**` on | off;` |
    | Default: | `proxy_buffering on;`             |
    | Context: | `http`, `server`, `location`      |

    Enables or disables buffering of responses from the proxied server.

    When buffering is enabled, nginx receives a response from the proxied server as soon as possible, saving it into the buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#proxy_temp_path) on the disk. Writing to temporary files is controlled by the [proxy_max_temp_file_size](#proxy_max_temp_file_size) and [proxy_temp_file_write_size](#proxy_temp_file_write_size) directives.

    When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the proxied server. The maximum size of the data that nginx can receive from the server at a time is set by the [proxy_buffer_size](#proxy_buffer_size) directive.

    Buffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [proxy_ignore_headers](#proxy_ignore_headers) directive.
- name: proxy_buffers
  id: http/ngx_http_proxy_module#proxy_buffers
  summary: Sets the number and size of the buffers used for reading a response from the proxied server, for a single connection
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`proxy_buffers`***`numbersize`*`;` |
    | Default: | `proxy_buffers 8 4k|8k;`             |
    | Context: | `http`, `server`, `location`         |

    Sets the *`number`* and *`size`* of the buffers used for reading a response from the proxied server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
- name: proxy_busy_buffers_size
  id: http/ngx_http_proxy_module#proxy_busy_buffers_size
  summary: When buffering of responses from the proxied server is enabled, limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_busy_buffers_size`***`size`*`;` |
    | Default: | `proxy_busy_buffers_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`             |

    When [buffering](#proxy_buffering) of responses from the proxied server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives.
- name: proxy_cache
  id: http/ngx_http_proxy_module#proxy_cache
  summary: Defines a shared memory zone used for caching
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_cache`***`zone`*` | off;` |
    | Default: | `proxy_cache off;`                 |
    | Context: | `http`, `server`, `location`       |

    Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.
- name: proxy_cache_background_update
  id: http/ngx_http_proxy_module#proxy_cache_background_update
  summary: This directive appeared in version 1.11.10
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`proxy_cache_background_update`**` on | off;` |
    | Default: | `proxy_cache_background_update off;`            |
    | Context: | `http`, `server`, `location`                    |

    This directive appeared in version 1.11.10.

    Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#proxy_cache_use_stale_updating) the usage of a stale cached response when it is being updated.
- name: proxy_cache_bypass
  id: http/ngx_http_proxy_module#proxy_cache_bypass
  summary: Defines conditions under which the response will not be taken from a cache
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_cache_bypass`***`string`*` ...;` |
    | Default: | —                                         |
    | Context: | `http`, `server`, `location`              |

    Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:

    ``` nginx
    proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
    proxy_cache_bypass $http_pragma    $http_authorization;
    ```

    Can be used along with the [proxy_no_cache](#proxy_no_cache) directive.
- name: proxy_cache_convert_head
  id: http/ngx_http_proxy_module#proxy_cache_convert_head
  summary: This directive appeared in version 1.9.7
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`proxy_cache_convert_head`**` on | off;` |
    | Default: | `proxy_cache_convert_head on;`             |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.9.7.

    Enables or disables the conversion of the “`HEAD`” method to “`GET`” for caching. When the conversion is disabled, the [cache key](#proxy_cache_key) should be configured to include the `$request_method`.
- name: proxy_cache_key
  id: http/ngx_http_proxy_module#proxy_cache_key
  summary: null
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`proxy_cache_key`***`string`*`;`                |
    | Default: | `proxy_cache_key $scheme$proxy_host$request_uri;` |
    | Context: | `http`, `server`, `location`                      |

    Defines a key for caching, for example

    ``` nginx
    proxy_cache_key "$host$request_uri $cookie_user";
    ```

    By default, the directive’s value is close to the string

    ``` nginx
    proxy_cache_key $scheme$proxy_host$uri$is_args$args;
    ```
- name: proxy_cache_lock
  id: http/ngx_http_proxy_module#proxy_cache_lock
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_cache_lock`**` on | off;` |
    | Default: | `proxy_cache_lock off;`            |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 1.1.12.

    When enabled, only one request at a time will be allowed to populate a new cache element identified according to the [proxy_cache_key](#proxy_cache_key) directive by passing a request to a proxied server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [proxy_cache_lock_timeout](#proxy_cache_lock_timeout) directive.
- name: proxy_cache_lock_age
  id: http/ngx_http_proxy_module#proxy_cache_lock_age
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_cache_lock_age`***`time`*`;` |
    | Default: | `proxy_cache_lock_age 5s;`            |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.7.8.

    If the last request passed to the proxied server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the proxied server.
- name: proxy_cache_lock_timeout
  id: http/ngx_http_proxy_module#proxy_cache_lock_timeout
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_cache_lock_timeout`***`time`*`;` |
    | Default: | `proxy_cache_lock_timeout 5s;`            |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.1.12.

    Sets a timeout for [proxy_cache_lock](#proxy_cache_lock). When the *`time`* expires, the request will be passed to the proxied server, however, the response will not be cached.

    Before 1.7.8, the response could be cached.
- name: proxy_cache_max_range_offset
  id: http/ngx_http_proxy_module#proxy_cache_max_range_offset
  summary: This directive appeared in version 1.11.6
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`proxy_cache_max_range_offset`***`number`*`;` |
    | Default: | —                                               |
    | Context: | `http`, `server`, `location`                    |

    This directive appeared in version 1.11.6.

    Sets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the proxied server and the response will not be cached.
- name: proxy_cache_methods
  id: http/ngx_http_proxy_module#proxy_cache_methods
  summary: This directive appeared in version 0.7.59
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`proxy_cache_methods`**` GET | HEAD | POST ...;` |
    | Default: | `proxy_cache_methods GET HEAD;`                    |
    | Context: | `http`, `server`, `location`                       |

    This directive appeared in version 0.7.59.

    If the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [proxy_no_cache](#proxy_no_cache) directive.
- name: proxy_cache_min_uses
  id: http/ngx_http_proxy_module#proxy_cache_min_uses
  summary: Sets the number of requests after which the response will be cached
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`proxy_cache_min_uses`***`number`*`;` |
    | Default: | `proxy_cache_min_uses 1;`               |
    | Context: | `http`, `server`, `location`            |

    Sets the *`number`* of requests after which the response will be cached.
- name: proxy_cache_path
  id: http/ngx_http_proxy_module#proxy_cache_path
  summary: Sets the path and other parameters of a cache
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_cache_path`***`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |
    | Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
    | Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                          |

    Sets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the [cache key](#proxy_cache_key). The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration

    ``` nginx
    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;
    ```

    file names in a cache will look like this:

    ``` nginx
    /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c
    ```

    A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. The directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [proxy_temp_path](#proxy_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.

    In addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.

    As part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.

    Cached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.

    The special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.

    A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.

    Additionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):

    `purger`=`on`\|`off`

    Instructs whether cache entries that match a [wildcard key](#proxy_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.

    `purger_files`=*`number`*

    Sets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.

    `purger_threshold`=*`number`*

    Sets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.

    `purger_sleep`=*`number`*

    Sets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.

    In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.
- name: proxy_cache_purge
  id: http/ngx_http_proxy_module#proxy_cache_purge
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_cache_purge`**` string ...;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.5.7.

    Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#proxy_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.

    If the [cache key](#proxy_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#proxy_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.

    Example configuration:

    ``` nginx
    proxy_cache_path /data/nginx/cache keys_zone=cache_zone:10m;

    map $request_method $purge_method {
        PURGE   1;
        default 0;
    }

    server {
        ...
        location / {
            proxy_pass http://backend;
            proxy_cache cache_zone;
            proxy_cache_key $uri;
            proxy_cache_purge $purge_method;
        }
    }
    ```

    This functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: proxy_cache_revalidate
  id: http/ngx_http_proxy_module#proxy_cache_revalidate
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_cache_revalidate`**` on | off;` |
    | Default: | `proxy_cache_revalidate off;`            |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.5.7.

    Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.
- name: proxy_cache_use_stale
  id: http/ngx_http_proxy_module#proxy_cache_use_stale
  summary: Determines in which cases a stale cached response can be used during communication with the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                                                                                                                   |
    |----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off ...;` |
    | Default: | `proxy_cache_use_stale off;`                                                                                                                                      |
    | Context: | `http`, `server`, `location`                                                                                                                                      |

    Determines in which cases a stale cached response can be used during communication with the proxied server. The directive’s parameters match the parameters of the [proxy_next_upstream](#proxy_next_upstream) directive.

    The `error` parameter also permits using a stale cached response if a proxied server to process a request cannot be selected.

    Additionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to proxied servers when updating cached data.

    Using a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.

    - The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.
    - The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.

    To minimize the number of accesses to proxied servers when populating a new cache element, the [proxy_cache_lock](#proxy_cache_lock) directive can be used.
- name: proxy_cache_valid
  id: http/ngx_http_proxy_module#proxy_cache_valid
  summary: Sets caching time for different response codes
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`proxy_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |
    | Default: | —                                                      |
    | Context: | `http`, `server`, `location`                           |

    Sets caching time for different response codes. For example, the following directives

    ``` nginx
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404      1m;
    ```

    set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.

    If only caching *`time`* is specified

    ``` nginx
    proxy_cache_valid 5m;
    ```

    then only 200, 301, and 302 responses are cached.

    In addition, the `any` parameter can be specified to cache any responses:

    ``` nginx
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 301      1h;
    proxy_cache_valid any      1m;
    ```

    Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.

    - The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.
    - If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.
    - If the header includes the “Set-Cookie” field, such a response will not be cached.
    - If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).

    Processing of one or more of these response header fields can be disabled using the [proxy_ignore_headers](#proxy_ignore_headers) directive.
- name: proxy_connect_timeout
  id: http/ngx_http_proxy_module#proxy_connect_timeout
  summary: Defines a timeout for establishing a connection with a proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`proxy_connect_timeout`***`time`*`;` |
    | Default: | `proxy_connect_timeout 60s;`           |
    | Context: | `http`, `server`, `location`           |

    Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds.
- name: proxy_connect_timeout (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_connect_timeout
  summary: Defines a timeout for establishing a connection with a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`proxy_connect_timeout`***`time`*`;` |
    | Default: | `proxy_connect_timeout 60s;`           |
    | Context: | `stream`, `server`                     |

    Defines a timeout for establishing a connection with a proxied server.
- name: proxy_cookie_domain
  id: http/ngx_http_proxy_module#proxy_cookie_domain
  summary: This directive appeared in version 1.1.15
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                                   |
    |----------|-----------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_cookie_domain`**` off;`**`proxy_cookie_domain`***`domainreplacement`*`;` |
    | Default: | `proxy_cookie_domain off;`                                                        |
    | Context: | `http`, `server`, `location`                                                      |

    This directive appeared in version 1.1.15.

    Sets a text that should be changed in the `domain` attribute of the “Set-Cookie” header fields of a proxied server response. Suppose a proxied server returned the “Set-Cookie” header field with the attribute “`domain=localhost`”. The directive

    ``` nginx
    proxy_cookie_domain localhost example.org;
    ```

    will rewrite this attribute to “`domain=example.org`”.

    A dot at the beginning of the *`domain`* and *`replacement`* strings and the `domain` attribute is ignored. Matching is case-insensitive.

    The *`domain`* and *`replacement`* strings can contain variables:

    ``` nginx
    proxy_cookie_domain www.$host $host;
    ```

    The directive can also be specified using regular expressions. In this case, *`domain`* should start from the “`~`” symbol. A regular expression can contain named and positional captures, and *`replacement`* can reference them:

    ``` nginx
    proxy_cookie_domain ~\.(?P<sl_domain>[-0-9a-z]+\.[a-z]+)$ $sl_domain;
    ```

    Several `proxy_cookie_domain` directives can be specified on the same level:

    ``` nginx
    proxy_cookie_domain localhost example.org;
    proxy_cookie_domain ~\.([a-z]+\.[a-z]+)$ $1;
    ```

    If several directives can be applied to the cookie, the first matching directive will be chosen.

    The `off` parameter cancels the effect of the `proxy_cookie_domain` directives inherited from the previous configuration level.
- name: proxy_cookie_flags
  id: http/ngx_http_proxy_module#proxy_cookie_flags
  summary: This directive appeared in version 1.19.3
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                 |
    |----------|-----------------------------------------------------------------|
    | Syntax:  | **`proxy_cookie_flags`**` off | `*`cookie`*` [`*`flag`*` ...];` |
    | Default: | `proxy_cookie_flags off;`                                       |
    | Context: | `http`, `server`, `location`                                    |

    This directive appeared in version 1.19.3.

    Sets one or more flags for the cookie. The *`cookie`* can contain text, variables, and their combinations. The *`flag`* can contain text, variables, and their combinations (1.19.8). The `secure`, `httponly`, `samesite=strict`, `samesite=lax`, `samesite=none` parameters add the corresponding flags. The `nosecure`, `nohttponly`, `nosamesite` parameters remove the corresponding flags.

    The cookie can also be specified using regular expressions. In this case, *`cookie`* should start from the “`~`” symbol.

    Several `proxy_cookie_flags` directives can be specified on the same configuration level:

    ``` nginx
    proxy_cookie_flags one httponly;
    proxy_cookie_flags ~ nosecure samesite=strict;
    ```

    If several directives can be applied to the cookie, the first matching directive will be chosen. In the example, the `httponly` flag is added to the cookie `one`, for all other cookies the `samesite=strict` flag is added and the `secure` flag is deleted.

    The `off` parameter cancels the effect of the `proxy_cookie_flags` directives inherited from the previous configuration level.
- name: proxy_cookie_path
  id: http/ngx_http_proxy_module#proxy_cookie_path
  summary: This directive appeared in version 1.1.15
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                             |
    |----------|-----------------------------------------------------------------------------|
    | Syntax:  | **`proxy_cookie_path`**` off;`**`proxy_cookie_path`***`pathreplacement`*`;` |
    | Default: | `proxy_cookie_path off;`                                                    |
    | Context: | `http`, `server`, `location`                                                |

    This directive appeared in version 1.1.15.

    Sets a text that should be changed in the `path` attribute of the “Set-Cookie” header fields of a proxied server response. Suppose a proxied server returned the “Set-Cookie” header field with the attribute “`path=/two/some/uri/`”. The directive

    ``` nginx
    proxy_cookie_path /two/ /;
    ```

    will rewrite this attribute to “`path=/some/uri/`”.

    The *`path`* and *`replacement`* strings can contain variables:

    ``` nginx
    proxy_cookie_path $uri /some$uri;
    ```

    The directive can also be specified using regular expressions. In this case, *`path`* should either start from the “`~`” symbol for a case-sensitive matching, or from the “`~*`” symbols for case-insensitive matching. The regular expression can contain named and positional captures, and *`replacement`* can reference them:

    ``` nginx
    proxy_cookie_path ~*^/user/([^/]+) /u/$1;
    ```

    Several `proxy_cookie_path` directives can be specified on the same level:

    ``` nginx
    proxy_cookie_path /one/ /;
    proxy_cookie_path / /two/;
    ```

    If several directives can be applied to the cookie, the first matching directive will be chosen.

    The `off` parameter cancels the effect of the `proxy_cookie_path` directives inherited from the previous configuration level.
- name: proxy_download_rate (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_download_rate
  summary: This directive appeared in version 1.9.3
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`proxy_download_rate`***`rate`*`;` |
    | Default: | `proxy_download_rate 0;`             |
    | Context: | `stream`, `server`                   |

    This directive appeared in version 1.9.3.

    Limits the speed of reading the data from the proxied server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a connection, so if nginx simultaneously opens two connections to the proxied server, the overall rate will be twice as much as the specified limit.

    Parameter value can contain variables (1.17.0). It may be useful in cases where rate should be limited depending on a certain condition:

    ``` nginx
    map $slow $rate {
        1     4k;
        2     8k;
    }

    proxy_download_rate $rate;
    ```
- name: proxy_force_ranges
  id: http/ngx_http_proxy_module#proxy_force_ranges
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`proxy_force_ranges`**` on | off;` |
    | Default: | `proxy_force_ranges off;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.7.7.

    Enables byte-range support for both cached and uncached responses from the proxied server regardless of the “Accept-Ranges” field in these responses.
- name: proxy_half_close (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_half_close
  summary: This directive appeared in version 1.21.4
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_half_close`**` on | off;` |
    | Default: | `proxy_half_close off;`            |
    | Context: | `stream`, `server`                 |

    This directive appeared in version 1.21.4.

    Enables or disables closing each direction of a TCP connection independently (“TCP half-close”). If enabled, proxying over TCP will be kept until both sides close the connection.
- name: proxy_headers_hash_bucket_size
  id: http/ngx_http_proxy_module#proxy_headers_hash_bucket_size
  summary: Sets the bucket size for hash tables used by the proxy_hide_header and proxy_set_header directives
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`proxy_headers_hash_bucket_size`***`size`*`;` |
    | Default: | `proxy_headers_hash_bucket_size 64;`            |
    | Context: | `http`, `server`, `location`                    |

    Sets the bucket *`size`* for hash tables used by the [proxy_hide_header](#proxy_hide_header) and [proxy_set_header](#proxy_set_header) directives. The details of setting up hash tables are provided in a separate [document](../hash).
- name: proxy_headers_hash_max_size
  id: http/ngx_http_proxy_module#proxy_headers_hash_max_size
  summary: Sets the maximum size of hash tables used by the proxy_hide_header and proxy_set_header directives
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_headers_hash_max_size`***`size`*`;` |
    | Default: | `proxy_headers_hash_max_size 512;`           |
    | Context: | `http`, `server`, `location`                 |

    Sets the maximum *`size`* of hash tables used by the [proxy_hide_header](#proxy_hide_header) and [proxy_set_header](#proxy_set_header) directives. The details of setting up hash tables are provided in a separate [document](../hash).
- name: proxy_hide_header
  id: http/ngx_http_proxy_module#proxy_hide_header
  summary: By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response of a proxied server to a client
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`proxy_hide_header`***`field`*`;` |
    | Default: | —                                   |
    | Context: | `http`, `server`, `location`        |

    By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response of a proxied server to a client. The `proxy_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [proxy_pass_header](#proxy_pass_header) directive can be used.
- name: proxy_http_version
  id: http/ngx_http_proxy_module#proxy_http_version
  summary: This directive appeared in version 1.1.4
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_http_version`**` 1.0 | 1.1;` |
    | Default: | `proxy_http_version 1.0;`             |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.1.4.

    Sets the HTTP protocol version for proxying. By default, version 1.0 is used. Version 1.1 is recommended for use with [keepalive](ngx_http_upstream_module#keepalive) connections and [NTLM authentication](ngx_http_upstream_module#ntlm).
- name: proxy_ignore_client_abort
  id: http/ngx_http_proxy_module#proxy_ignore_client_abort
  summary: Determines whether the connection with a proxied server should be closed when a client closes the connection without waiting for a response
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`proxy_ignore_client_abort`**` on | off;` |
    | Default: | `proxy_ignore_client_abort off;`            |
    | Context: | `http`, `server`, `location`                |

    Determines whether the connection with a proxied server should be closed when a client closes the connection without waiting for a response.
- name: proxy_ignore_headers
  id: http/ngx_http_proxy_module#proxy_ignore_headers
  summary: Disables processing of certain response header fields from the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`proxy_ignore_headers`***`field`*` ...;` |
    | Default: | —                                          |
    | Context: | `http`, `server`, `location`               |

    Disables processing of certain response header fields from the proxied server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).

    If not disabled, processing of these header fields has the following effect:

    - “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#proxy_cache_valid);
    - “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;
    - “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;
    - “X-Accel-Buffering” enables or disables [buffering](#proxy_buffering) of a response;
    - “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.
- name: proxy_intercept_errors
  id: http/ngx_http_proxy_module#proxy_intercept_errors
  summary: Determines whether proxied responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_intercept_errors`**` on | off;` |
    | Default: | `proxy_intercept_errors off;`            |
    | Context: | `http`, `server`, `location`             |

    Determines whether proxied responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.
- name: proxy_limit_rate
  id: http/ngx_http_proxy_module#proxy_limit_rate
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_limit_rate`***`rate`*`;` |
    | Default: | `proxy_limit_rate 0;`             |
    | Context: | `http`, `server`, `location`      |

    This directive appeared in version 1.7.7.

    Limits the speed of reading the response from the proxied server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the proxied server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#proxy_buffering) of responses from the proxied server is enabled. Parameter value can contain variables (1.27.0).
- name: proxy_max_temp_file_size
  id: http/ngx_http_proxy_module#proxy_max_temp_file_size
  summary: When buffering of responses from the proxied server is enabled, and the whole response does not fit into the buffers set by the proxy_buffer_size and proxy_buffers directives, a part of the response can be saved to a temporary file
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_max_temp_file_size`***`size`*`;` |
    | Default: | `proxy_max_temp_file_size 1024m;`         |
    | Context: | `http`, `server`, `location`              |

    When [buffering](#proxy_buffering) of responses from the proxied server is enabled, and the whole response does not fit into the buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [proxy_temp_file_write_size](#proxy_temp_file_write_size) directive.

    The zero value disables buffering of responses to temporary files.

    This restriction does not apply to responses that will be [cached](#proxy_cache) or [stored](#proxy_store) on disk.
- name: proxy_method
  id: http/ngx_http_proxy_module#proxy_method
  summary: Specifies the HTTP method to use in requests forwarded to the proxied server instead of the method from the client request
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`proxy_method`***`method`*`;` |
    | Default: | —                               |
    | Context: | `http`, `server`, `location`    |

    Specifies the HTTP *`method`* to use in requests forwarded to the proxied server instead of the method from the client request. Parameter value can contain variables (1.11.6).
- name: proxy_next_upstream
  id: http/ngx_http_proxy_module#proxy_next_upstream
  summary: disables passing a request to the next server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                                                                                                                       |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_next_upstream`**` error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |
    | Default: | `proxy_next_upstream error timeout;`                                                                                                                                  |
    | Context: | `http`, `server`, `location`                                                                                                                                          |

    Specifies in which cases a request should be passed to the next server:

    `error`

    an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `timeout`

    a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `invalid_header`

    a server returned an empty or invalid response;

    `http_500`

    a server returned a response with the code 500;

    `http_502`

    a server returned a response with the code 502;

    `http_503`

    a server returned a response with the code 503;

    `http_504`

    a server returned a response with the code 504;

    `http_403`

    a server returned a response with the code 403;

    `http_404`

    a server returned a response with the code 404;

    `http_429`

    a server returned a response with the code 429 (1.11.13);

    `non_idempotent`

    normally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;

    `off`

    disables passing a request to the next server.

    One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.

    The directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_502`, `http_503`, `http_504`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.

    Passing a request to the next server can be limited by [the number of tries](#proxy_next_upstream_tries) and by [time](#proxy_next_upstream_timeout).
- name: proxy_next_upstream (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_next_upstream
  summary: When a connection to the proxied server cannot be established, determines whether a client connection will be passed to the next server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_next_upstream`**` on | off;` |
    | Default: | `proxy_next_upstream on;`             |
    | Context: | `stream`, `server`                    |

    When a connection to the proxied server cannot be established, determines whether a client connection will be passed to the next server.

    Passing a connection to the next server can be limited by [the number of tries](#proxy_next_upstream_tries) and by [time](#proxy_next_upstream_timeout).
- name: proxy_next_upstream_timeout
  id: http/ngx_http_proxy_module#proxy_next_upstream_timeout
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_next_upstream_timeout`***`time`*`;` |
    | Default: | `proxy_next_upstream_timeout 0;`             |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.7.5.

    Limits the time during which a request can be passed to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.
- name: proxy_next_upstream_timeout (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_next_upstream_timeout
  summary: Limits the time allowed to pass a connection to the next server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_next_upstream_timeout`***`time`*`;` |
    | Default: | `proxy_next_upstream_timeout 0;`             |
    | Context: | `stream`, `server`                           |

    Limits the time allowed to pass a connection to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.
- name: proxy_next_upstream_tries
  id: http/ngx_http_proxy_module#proxy_next_upstream_tries
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_next_upstream_tries`***`number`*`;` |
    | Default: | `proxy_next_upstream_tries 0;`               |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.7.5.

    Limits the number of possible tries for passing a request to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.
- name: proxy_next_upstream_tries (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_next_upstream_tries
  summary: Limits the number of possible tries for passing a connection to the next server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_next_upstream_tries`***`number`*`;` |
    | Default: | `proxy_next_upstream_tries 0;`               |
    | Context: | `stream`, `server`                           |

    Limits the number of possible tries for passing a connection to the [next server](#proxy_next_upstream). The `0` value turns off this limitation.
- name: proxy_no_cache
  id: http/ngx_http_proxy_module#proxy_no_cache
  summary: Defines conditions under which the response will not be saved to a cache
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_no_cache`***`string`*` ...;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:

    ``` nginx
    proxy_no_cache $cookie_nocache $arg_nocache$arg_comment;
    proxy_no_cache $http_pragma    $http_authorization;
    ```

    Can be used along with the [proxy_cache_bypass](#proxy_cache_bypass) directive.
- name: proxy_pass
  id: http/ngx_http_proxy_module#proxy_pass
  summary: Sets the protocol and address of a proxied server and an optional URI to which a location should be mapped
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_pass`***`URL`*`;`                   |
    | Default: | —                                            |
    | Context: | `location`, `if in location`, `limit_except` |

    Sets the protocol and address of a proxied server and an optional URI to which a location should be mapped. As a protocol, “`http`” or “`https`” can be specified. The address can be specified as a domain name or IP address, and an optional port:

    ``` nginx
    proxy_pass http://localhost:8000/uri/;
    ```

    or as a UNIX-domain socket path specified after the word “`unix`” and enclosed in colons:

    ``` nginx
    proxy_pass http://unix:/tmp/backend.socket:/uri/;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).

    Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described server groups, and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).

    A request URI is passed to the server as follows:

    - If the `proxy_pass` directive is specified with a URI, then when a request is passed to the server, the part of a [normalized](ngx_http_core_module#location) request URI matching the location is replaced by a URI specified in the directive:

      ``` nginx
      location /name/ {
          proxy_pass http://127.0.0.1/remote/;
      }
      ```

    - If `proxy_pass` is specified without a URI, the request URI is passed to the server in the same form as sent by a client when the original request is processed, or the full normalized request URI is passed when processing the changed URI:

      ``` nginx
      location /some/path/ {
          proxy_pass http://127.0.0.1;
      }
      ```

    Before version 1.1.12, if `proxy_pass` is specified without a URI, the original request URI might be passed instead of the changed URI in some cases.

    In some cases, the part of a request URI to be replaced cannot be determined:

    - When location is specified using a regular expression, and also inside named locations.

      In these cases, `proxy_pass` should be specified without a URI.

    - When the URI is changed inside a proxied location using the [rewrite](ngx_http_rewrite_module#rewrite) directive, and this same configuration will be used to process a request (`break`):

      ``` nginx
      location /name/ {
          rewrite    /name/([^/]+) /users?name=$1 break;
          proxy_pass http://127.0.0.1;
      }
      ```

      In this case, the URI specified in the directive is ignored and the full changed request URI is passed to the server.

    - When variables are used in `proxy_pass`:

      ``` nginx
      location /name/ {
          proxy_pass http://127.0.0.1$request_uri;
      }
      ```

      In this case, if URI is specified in the directive, it is passed to the server as is, replacing the original request URI.

    [WebSocket](websocket) proxying requires special configuration and is supported since version 1.3.13.
- name: proxy_pass (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_pass
  summary: Sets the address of a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`proxy_pass`***`address`*`;` |
    | Default: | —                              |
    | Context: | `server`                       |

    Sets the address of a proxied server. The address can be specified as a domain name or IP address, and a port:

    ``` nginx
    proxy_pass localhost:12345;
    ```

    or as a UNIX-domain socket path:

    ``` nginx
    proxy_pass unix:/tmp/stream.socket;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_stream_upstream_module).

    The address can also be specified using variables (1.11.3):

    ``` nginx
    proxy_pass $upstream;
    ```

    In this case, the server name is searched among the described [server groups](ngx_stream_upstream_module), and, if not found, is determined using a [resolver](ngx_stream_core_module#resolver).
- name: proxy_pass_error_message (ngx_mail_proxy_module)
  id: mail/ngx_mail_proxy_module#proxy_pass_error_message
  summary: Indicates whether to pass the error message obtained during the authentication on the backend to the client
  belongs_to: ngx_mail_proxy_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`proxy_pass_error_message`**` on | off;` |
    | Default: | `proxy_pass_error_message off;`            |
    | Context: | `mail`, `server`                           |

    Indicates whether to pass the error message obtained during the authentication on the backend to the client.

    Usually, if the authentication in nginx is a success, the backend cannot return an error. If it nevertheless returns an error, it means some internal error has occurred. In such case the backend message can contain information that should not be shown to the client. However, responding with an error for the correct password is a normal behavior for some POP3 servers. For example, CommuniGatePro informs a user about [mailbox overflow](http://www.stalker.com/CommuniGatePro/Alerts.html#Quota) or other events by periodically outputting the [authentication error](http://www.stalker.com/CommuniGatePro/POP.html#Alerts). The directive should be enabled in this case.
- name: proxy_pass_header
  id: http/ngx_http_proxy_module#proxy_pass_header
  summary: Permits passing otherwise disabled header fields from a proxied server to a client
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`proxy_pass_header`***`field`*`;` |
    | Default: | —                                   |
    | Context: | `http`, `server`, `location`        |

    Permits passing [otherwise disabled](#proxy_hide_header) header fields from a proxied server to a client.
- name: proxy_pass_request_body
  id: http/ngx_http_proxy_module#proxy_pass_request_body
  summary: Indicates whether the original request body is passed to the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_pass_request_body`**` on | off;` |
    | Default: | `proxy_pass_request_body on;`             |
    | Context: | `http`, `server`, `location`              |

    Indicates whether the original request body is passed to the proxied server.

    ``` nginx
    location /x-accel-redirect-here/ {
        proxy_method GET;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        proxy_pass ...
    }
    ```

    See also the [proxy_set_header](#proxy_set_header) and [proxy_pass_request_headers](#proxy_pass_request_headers) directives.
- name: proxy_pass_request_headers
  id: http/ngx_http_proxy_module#proxy_pass_request_headers
  summary: Indicates whether the header fields of the original request are passed to the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_pass_request_headers`**` on | off;` |
    | Default: | `proxy_pass_request_headers on;`             |
    | Context: | `http`, `server`, `location`                 |

    Indicates whether the header fields of the original request are passed to the proxied server.

    ``` nginx
    location /x-accel-redirect-here/ {
        proxy_method GET;
        proxy_pass_request_headers off;
        proxy_pass_request_body off;

        proxy_pass ...
    }
    ```

    See also the [proxy_set_header](#proxy_set_header) and [proxy_pass_request_body](#proxy_pass_request_body) directives.
- name: proxy_protocol (ngx_mail_proxy_module)
  id: mail/ngx_mail_proxy_module#proxy_protocol
  summary: This directive appeared in version 1.19.8
  belongs_to: ngx_mail_proxy_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`proxy_protocol`**` on | off;` |
    | Default: | `proxy_protocol off;`            |
    | Context: | `mail`, `server`                 |

    This directive appeared in version 1.19.8.

    Enables the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) for connections to a backend.
- name: proxy_protocol (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_protocol
  summary: This directive appeared in version 1.9.2
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`proxy_protocol`**` on | off;` |
    | Default: | `proxy_protocol off;`            |
    | Context: | `stream`, `server`               |

    This directive appeared in version 1.9.2.

    Enables the [PROXY protocol](http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) for connections to a proxied server.
- name: proxy_protocol_timeout (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#proxy_protocol_timeout
  summary: This directive appeared in version 1.11.4
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`proxy_protocol_timeout`***`timeout`*`;` |
    | Default: | `proxy_protocol_timeout 30s;`              |
    | Context: | `stream`, `server`                         |

    This directive appeared in version 1.11.4.

    Specifies a *`timeout`* for reading the PROXY protocol header to complete. If no entire header is transmitted within this time, the connection is closed.
- name: proxy_read_timeout
  id: http/ngx_http_proxy_module#proxy_read_timeout
  summary: Defines a timeout for reading a response from the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`proxy_read_timeout`***`time`*`;` |
    | Default: | `proxy_read_timeout 60s;`           |
    | Context: | `http`, `server`, `location`        |

    Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the proxied server does not transmit anything within this time, the connection is closed.
- name: proxy_redirect
  id: http/ngx_http_proxy_module#proxy_redirect
  summary: Sets the text that should be changed in the “Location” and “Refresh” header fields of a proxied server response
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                                                          |
    |----------|----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_redirect`**` default;`**`proxy_redirect`**` off;`**`proxy_redirect`***`redirectreplacement`*`;` |
    | Default: | `proxy_redirect default;`                                                                                |
    | Context: | `http`, `server`, `location`                                                                             |

    Sets the text that should be changed in the “Location” and “Refresh” header fields of a proxied server response. Suppose a proxied server returned the header field “`Location: http://localhost:8000/two/some/uri/`”. The directive

    ``` nginx
    proxy_redirect http://localhost:8000/two/ http://frontend/one/;
    ```

    will rewrite this string to “`Location: http://frontend/one/some/uri/`”.

    A server name may be omitted in the *`replacement`* string:

    ``` nginx
    proxy_redirect http://localhost:8000/two/ /;
    ```

    then the primary server’s name and port, if different from 80, will be inserted.

    The default replacement specified by the `default` parameter uses the parameters of the [location](ngx_http_core_module#location) and [proxy_pass](#proxy_pass) directives. Hence, the two configurations below are equivalent:

    ``` nginx
    location /one/ {
        proxy_pass     http://upstream:port/two/;
        proxy_redirect default;
    ```

    ``` nginx
    location /one/ {
        proxy_pass     http://upstream:port/two/;
        proxy_redirect http://upstream:port/two/ /one/;
    ```

    The `default` parameter is not permitted if [proxy_pass](#proxy_pass) is specified using variables.

    A *`replacement`* string can contain variables:

    ``` nginx
    proxy_redirect http://localhost:8000/ http://$host:$server_port/;
    ```

    A *`redirect`* can also contain (1.1.11) variables:

    ``` nginx
    proxy_redirect http://$proxy_host:8000/ /;
    ```

    The directive can be specified (1.1.11) using regular expressions. In this case, *`redirect`* should either start with the “`~`” symbol for a case-sensitive matching, or with the “`~*`” symbols for case-insensitive matching. The regular expression can contain named and positional captures, and *`replacement`* can reference them:

    ``` nginx
    proxy_redirect ~^(http://[^:]+):\d+(/.+)$ $1$2;
    proxy_redirect ~*/user/([^/]+)/(.+)$      http://$1.example.com/$2;
    ```

    Several `proxy_redirect` directives can be specified on the same level:

    ``` nginx
    proxy_redirect default;
    proxy_redirect http://localhost:8000/  /;
    proxy_redirect http://www.example.com/ /;
    ```

    If several directives can be applied to the header fields of a proxied server response, the first matching directive will be chosen.

    The `off` parameter cancels the effect of the `proxy_redirect` directives inherited from the previous configuration level.

    Using this directive, it is also possible to add host names to relative redirects issued by a proxied server:

    ``` nginx
    proxy_redirect / /;
    ```
- name: proxy_request_buffering
  id: http/ngx_http_proxy_module#proxy_request_buffering
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_request_buffering`**` on | off;` |
    | Default: | `proxy_request_buffering on;`             |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.7.11.

    Enables or disables buffering of a client request body.

    When buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to a proxied server.

    When buffering is disabled, the request body is sent to the proxied server immediately as it is received. In this case, the request cannot be passed to the [next server](#proxy_next_upstream) if nginx already started sending the request body.

    When HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value unless HTTP/1.1 is [enabled](#proxy_http_version) for proxying.
- name: proxy_requests (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_requests
  summary: This directive appeared in version 1.15.7
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_requests`***`number`*`;` |
    | Default: | `proxy_requests 0;`               |
    | Context: | `stream`, `server`                |

    This directive appeared in version 1.15.7.

    Sets the number of client datagrams at which binding between a client and existing UDP stream session is dropped. After receiving the specified number of datagrams, next datagram from the same client starts a new session. The session terminates when all client datagrams are transmitted to a proxied server and the expected number of [responses](#proxy_responses) is received, or when it reaches a [timeout](#proxy_timeout).
- name: proxy_responses (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_responses
  summary: This directive appeared in version 1.9.13
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_responses`***`number`*`;` |
    | Default: | —                                  |
    | Context: | `stream`, `server`                 |

    This directive appeared in version 1.9.13.

    Sets the number of datagrams expected from the proxied server in response to a client datagram if the [UDP](ngx_stream_core_module#udp) protocol is used. The number serves as a hint for session termination. By default, the number of datagrams is not limited.

    If zero value is specified, no response is expected. However, if a response is received and the session is still not finished, the response will be handled.
- name: proxy_send_lowat
  id: http/ngx_http_proxy_module#proxy_send_lowat
  summary: If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a proxied server by using either NOTE_LOWAT flag of the kqueue method, or the SO_SNDLOWAT socket option, with the specified size
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_send_lowat`***`size`*`;` |
    | Default: | `proxy_send_lowat 0;`             |
    | Context: | `http`, `server`, `location`      |

    If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a proxied server by using either `NOTE_LOWAT` flag of the [kqueue](../events#kqueue) method, or the `SO_SNDLOWAT` socket option, with the specified *`size`*.

    This directive is ignored on Linux, Solaris, and Windows.
- name: proxy_send_timeout
  id: http/ngx_http_proxy_module#proxy_send_timeout
  summary: Sets a timeout for transmitting a request to the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`proxy_send_timeout`***`time`*`;` |
    | Default: | `proxy_send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`        |

    Sets a timeout for transmitting a request to the proxied server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the proxied server does not receive anything within this time, the connection is closed.
- name: proxy_session_drop (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_session_drop
  summary: This directive appeared in version 1.15.8
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`proxy_session_drop`**` on | off;` |
    | Default: | `proxy_session_drop off;`            |
    | Context: | `stream`, `server`                   |

    This directive appeared in version 1.15.8.

    Enables terminating all sessions to a proxied server after it was removed from the group or marked as permanently unavailable. This can occur because of [re-resolve](ngx_stream_core_module#resolver) or with the API [`DELETE`](../http/ngx_http_api_module#deleteStreamUpstreamServer) command. A server can be marked as permanently unavailable if it is considered [unhealthy](ngx_stream_upstream_hc_module#health_check) or with the API [`PATCH`](../http/ngx_http_api_module#patchStreamUpstreamServer) command. Each session is terminated when the next read or write event is processed for the client or proxied server.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: proxy_set_body
  id: http/ngx_http_proxy_module#proxy_set_body
  summary: Allows redefining the request body passed to the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`proxy_set_body`***`value`*`;` |
    | Default: | —                                |
    | Context: | `http`, `server`, `location`     |

    Allows redefining the request body passed to the proxied server. The *`value`* can contain text, variables, and their combination.
- name: proxy_set_header
  id: http/ngx_http_proxy_module#proxy_set_header
  summary: Allows redefining or appending fields to the request header passed to the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                          |
    |----------|--------------------------------------------------------------------------|
    | Syntax:  | **`proxy_set_header`***`fieldvalue`*`;`                                  |
    | Default: | `proxy_set_header Host $proxy_host;``proxy_set_header Connection close;` |
    | Context: | `http`, `server`, `location`                                             |

    Allows redefining or appending fields to the request header [passed](#proxy_pass_request_headers) to the proxied server. The *`value`* can contain text, variables, and their combinations. These directives are inherited from the previous configuration level if and only if there are no `proxy_set_header` directives defined on the current level. By default, only two fields are redefined:

    ``` nginx
    proxy_set_header Host       $proxy_host;
    proxy_set_header Connection close;
    ```

    If caching is enabled, the header fields “If-Modified-Since”, “If-Unmodified-Since”, “If-None-Match”, “If-Match”, “Range”, and “If-Range” from the original request are not passed to the proxied server.

    An unchanged “Host” request header field can be passed like this:

    ``` nginx
    proxy_set_header Host       $http_host;
    ```

    However, if this field is not present in a client request header then nothing will be passed. In such a case it is better to use the `$host` variable - its value equals the server name in the “Host” request header field or the primary server name if this field is not present:

    ``` nginx
    proxy_set_header Host       $host;
    ```

    In addition, the server name can be passed together with the port of the proxied server:

    ``` nginx
    proxy_set_header Host       $host:$proxy_port;
    ```

    If the value of a header field is an empty string then this field will not be passed to a proxied server:

    ``` nginx
    proxy_set_header Accept-Encoding "";
    ```
- name: proxy_smtp_auth (ngx_mail_proxy_module)
  id: mail/ngx_mail_proxy_module#proxy_smtp_auth
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_mail_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_smtp_auth`**` on | off;` |
    | Default: | `proxy_smtp_auth off;`            |
    | Context: | `mail`, `server`                  |

    This directive appeared in version 1.19.4.

    Enables or disables user authentication on the SMTP backend using the `AUTH` command.

    If [XCLIENT](#xclient) is also enabled, then the `XCLIENT` command will not send the `LOGIN` parameter.
- name: proxy_socket_keepalive
  id: http/ngx_http_proxy_module#proxy_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_socket_keepalive`**` on | off;` |
    | Default: | `proxy_socket_keepalive off;`            |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.15.6.

    Configures the “TCP keepalive” behavior for outgoing connections to a proxied server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.
- name: proxy_socket_keepalive (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_socket_keepalive`**` on | off;` |
    | Default: | `proxy_socket_keepalive off;`            |
    | Context: | `stream`, `server`                       |

    This directive appeared in version 1.15.6.

    Configures the “TCP keepalive” behavior for outgoing connections to a proxied server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.
- name: proxy_ssl (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl
  summary: Enables the SSL/TLS protocol for connections to a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                             |
    |----------|-----------------------------|
    | Syntax:  | **`proxy_ssl`**` on | off;` |
    | Default: | `proxy_ssl off;`            |
    | Context: | `stream`, `server`          |

    Enables the SSL/TLS protocol for connections to a proxied server.
- name: proxy_ssl_certificate
  id: http/ngx_http_proxy_module#proxy_ssl_certificate
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`proxy_ssl_certificate`***`file`*`;` |
    | Default: | —                                      |
    | Context: | `http`, `server`, `location`           |

    This directive appeared in version 1.7.8.

    Specifies a *`file`* with the certificate in the PEM format used for authentication to a proxied HTTPS server.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: proxy_ssl_certificate (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_certificate
  summary: Specifies a file with the certificate in the PEM format used for authentication to a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`proxy_ssl_certificate`***`file`*`;` |
    | Default: | —                                      |
    | Context: | `stream`, `server`                     |

    Specifies a *`file`* with the certificate in the PEM format used for authentication to a proxied server.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: proxy_ssl_certificate_key
  id: http/ngx_http_proxy_module#proxy_ssl_certificate_key
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`proxy_ssl_certificate_key`***`file`*`;` |
    | Default: | —                                          |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.7.8.

    Specifies a *`file`* with the secret key in the PEM format used for authentication to a proxied HTTPS server.

    The value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: proxy_ssl_certificate_key (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format used for authentication to a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`proxy_ssl_certificate_key`***`file`*`;` |
    | Default: | —                                          |
    | Context: | `stream`, `server`                         |

    Specifies a *`file`* with the secret key in the PEM format used for authentication to a proxied server.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: proxy_ssl_ciphers
  id: http/ngx_http_proxy_module#proxy_ssl_ciphers
  summary: This directive appeared in version 1.5.6
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_ssl_ciphers`***`ciphers`*`;` |
    | Default: | `proxy_ssl_ciphers DEFAULT;`          |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.5.6.

    Specifies the enabled ciphers for requests to a proxied HTTPS server. The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: proxy_ssl_ciphers (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_ciphers
  summary: Specifies the enabled ciphers for connections to a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`proxy_ssl_ciphers`***`ciphers`*`;` |
    | Default: | `proxy_ssl_ciphers DEFAULT;`          |
    | Context: | `stream`, `server`                    |

    Specifies the enabled ciphers for connections to a proxied server. The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: proxy_ssl_conf_command
  id: http/ngx_http_proxy_module#proxy_ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                            |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the proxied HTTPS server.

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `proxy_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `proxy_ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: proxy_ssl_conf_command (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                            |
    | Context: | `stream`, `server`                           |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the proxied server.

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `proxy_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `proxy_ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: proxy_ssl_crl
  id: http/ngx_http_proxy_module#proxy_ssl_crl
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`proxy_ssl_crl`***`file`*`;` |
    | Default: | —                              |
    | Context: | `http`, `server`, `location`   |

    This directive appeared in version 1.7.0.

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied HTTPS server.
- name: proxy_ssl_crl (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_crl
  summary: Specifies a file with revoked certificates (CRL) in the PEM format used to verify the certificate of the proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`proxy_ssl_crl`***`file`*`;` |
    | Default: | —                              |
    | Context: | `stream`, `server`             |

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied server.
- name: proxy_ssl_name
  id: http/ngx_http_proxy_module#proxy_ssl_name
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`proxy_ssl_name`***`name`*`;` |
    | Default: | `proxy_ssl_name $proxy_host;`   |
    | Context: | `http`, `server`, `location`    |

    This directive appeared in version 1.7.0.

    Allows overriding the server name used to [verify](#proxy_ssl_verify) the certificate of the proxied HTTPS server and to be [passed through SNI](#proxy_ssl_server_name) when establishing a connection with the proxied HTTPS server.

    By default, the host part of the [proxy_pass](#proxy_pass) URL is used.
- name: proxy_ssl_name (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_name
  summary: Allows overriding the server name used to verify the certificate of the proxied server and to be passed through SNI when establishing a connection with the proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`proxy_ssl_name`***`name`*`;`        |
    | Default: | `proxy_ssl_name host from proxy_pass;` |
    | Context: | `stream`, `server`                     |

    Allows overriding the server name used to [verify](#proxy_ssl_verify) the certificate of the proxied server and to be [passed through SNI](#proxy_ssl_server_name) when establishing a connection with the proxied server. The server name can also be specified using variables (1.11.3).

    By default, the host part of the [proxy_pass](#proxy_pass) address is used.
- name: proxy_ssl_password_file
  id: http/ngx_http_proxy_module#proxy_ssl_password_file
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_ssl_password_file`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.7.8.

    Specifies a *`file`* with passphrases for [secret keys](#proxy_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.
- name: proxy_ssl_password_file (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_password_file
  summary: Specifies a file with passphrases for secret keys where each passphrase is specified on a separate line
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`proxy_ssl_password_file`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `stream`, `server`                       |

    Specifies a *`file`* with passphrases for [secret keys](#proxy_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.
- name: proxy_ssl_protocols
  id: http/ngx_http_proxy_module#proxy_ssl_protocols
  summary: This directive appeared in version 1.5.6
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                                                    |
    |----------|------------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `http`, `server`, `location`                                                       |

    This directive appeared in version 1.5.6.

    Enables the specified protocols for requests to a proxied HTTPS server.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: proxy_ssl_protocols (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_protocols
  summary: Enables the specified protocols for connections to a proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                                                                    |
    |----------|------------------------------------------------------------------------------------|
    | Syntax:  | **`proxy_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `stream`, `server`                                                                 |

    Enables the specified protocols for connections to a proxied server.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: proxy_ssl_server_name
  id: http/ngx_http_proxy_module#proxy_ssl_server_name
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`proxy_ssl_server_name`**` on | off;` |
    | Default: | `proxy_ssl_server_name off;`            |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.7.0.

    Enables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the proxied HTTPS server.
- name: proxy_ssl_server_name (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_server_name
  summary: Enables or disables passing of the server name through TLS Server Name Indication extension (SNI, RFC 6066) when establishing a connection with the proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`proxy_ssl_server_name`**` on | off;` |
    | Default: | `proxy_ssl_server_name off;`            |
    | Context: | `stream`, `server`                      |

    Enables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the proxied server.
- name: proxy_ssl_session_reuse
  id: http/ngx_http_proxy_module#proxy_ssl_session_reuse
  summary: Determines whether SSL sessions can be reused when working with the proxied server
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_ssl_session_reuse`**` on | off;` |
    | Default: | `proxy_ssl_session_reuse on;`             |
    | Context: | `http`, `server`, `location`              |

    Determines whether SSL sessions can be reused when working with the proxied server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.
- name: proxy_ssl_session_reuse (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_session_reuse
  summary: Determines whether SSL sessions can be reused when working with the proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_ssl_session_reuse`**` on | off;` |
    | Default: | `proxy_ssl_session_reuse on;`             |
    | Context: | `stream`, `server`                        |

    Determines whether SSL sessions can be reused when working with the proxied server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.
- name: proxy_ssl_trusted_certificate
  id: http/ngx_http_proxy_module#proxy_ssl_trusted_certificate
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`proxy_ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                              |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.7.0.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied HTTPS server.
- name: proxy_ssl_trusted_certificate (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_trusted_certificate
  summary: Specifies a file with trusted CA certificates in the PEM format used to verify the certificate of the proxied server
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`proxy_ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                              |
    | Context: | `stream`, `server`                             |

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#proxy_ssl_verify) the certificate of the proxied server.
- name: proxy_ssl_verify
  id: http/ngx_http_proxy_module#proxy_ssl_verify
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_ssl_verify`**` on | off;` |
    | Default: | `proxy_ssl_verify off;`            |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 1.7.0.

    Enables or disables verification of the proxied HTTPS server certificate.
- name: proxy_ssl_verify (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_verify
  summary: Enables or disables verification of the proxied server certificate
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`proxy_ssl_verify`**` on | off;` |
    | Default: | `proxy_ssl_verify off;`            |
    | Context: | `stream`, `server`                 |

    Enables or disables verification of the proxied server certificate.
- name: proxy_ssl_verify_depth
  id: http/ngx_http_proxy_module#proxy_ssl_verify_depth
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_ssl_verify_depth`***`number`*`;` |
    | Default: | `proxy_ssl_verify_depth 1;`               |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.7.0.

    Sets the verification depth in the proxied HTTPS server certificates chain.
- name: proxy_ssl_verify_depth (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_ssl_verify_depth
  summary: Sets the verification depth in the proxied server certificates chain
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`proxy_ssl_verify_depth`***`number`*`;` |
    | Default: | `proxy_ssl_verify_depth 1;`               |
    | Context: | `stream`, `server`                        |

    Sets the verification depth in the proxied server certificates chain.
- name: proxy_store
  id: http/ngx_http_proxy_module#proxy_store
  summary: Enables saving of files to a disk
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`proxy_store`**` on | off | `*`string`*`;` |
    | Default: | `proxy_store off;`                           |
    | Context: | `http`, `server`, `location`                 |

    Enables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:

    ``` nginx
    proxy_store /data/www$original_uri;
    ```

    The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [proxy_temp_path](#proxy_temp_path) directive, are put on the same file system.

    This directive can be used to create local copies of static unchangeable files, e.g.:

    ``` nginx
    location /images/ {
        root               /data/www;
        error_page         404 = /fetch$uri;
    }

    location /fetch/ {
        internal;

        proxy_pass         http://backend/;
        proxy_store        on;
        proxy_store_access user:rw group:rw all:r;
        proxy_temp_path    /data/temp;

        alias              /data/www/;
    }
    ```

    or like this:

    ``` nginx
    location /images/ {
        root               /data/www;
        error_page         404 = @fetch;
    }

    location @fetch {
        internal;

        proxy_pass         http://backend;
        proxy_store        on;
        proxy_store_access user:rw group:rw all:r;
        proxy_temp_path    /data/temp;

        root               /data/www;
    }
    ```
- name: proxy_store_access
  id: http/ngx_http_proxy_module#proxy_store_access
  summary: null
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                                            |
    |----------|------------------------------------------------------------|
    | Syntax:  | **`proxy_store_access`***`users`*`:`*`permissions`*` ...;` |
    | Default: | `proxy_store_access user:rw;`                              |
    | Context: | `http`, `server`, `location`                               |

    Sets access permissions for newly created files and directories, e.g.:

    ``` nginx
    proxy_store_access user:rw group:rw all:r;
    ```

    If any `group` or `all` access permissions are specified then `user` permissions may be omitted:

    ``` nginx
    proxy_store_access group:rw all:r;
    ```
- name: proxy_temp_file_write_size
  id: http/ngx_http_proxy_module#proxy_temp_file_write_size
  summary: Limits the size of data written to a temporary file at a time, when buffering of responses from the proxied server to temporary files is enabled
  belongs_to: ngx_http_proxy_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`proxy_temp_file_write_size`***`size`*`;` |
    | Default: | `proxy_temp_file_write_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`                |

    Limits the *`size`* of data written to a temporary file at a time, when buffering of responses from the proxied server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [proxy_buffer_size](#proxy_buffer_size) and [proxy_buffers](#proxy_buffers) directives. The maximum size of a temporary file is set by the [proxy_max_temp_file_size](#proxy_max_temp_file_size) directive.
- name: proxy_temp_path
  id: http/ngx_http_proxy_module#proxy_temp_path
  summary: Defines a directory for storing temporary files with data received from proxied servers
  belongs_to: ngx_http_proxy_module
  description: "|          |                                                                               |\n|----------|-------------------------------------------------------------------------------|\n| Syntax:  | **`proxy_temp_path`***`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `proxy_temp_path proxy_temp;`                                                 |\n| Context: | `http`, `server`, `location`                                                  |\n\nDefines a directory for storing temporary files with data received from proxied servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nproxy_temp_path /spool/nginx/proxy_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/proxy_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [proxy_cache_path](#proxy_cache_path) directive.\n\n#### Embedded Variables\n\nThe `ngx_http_proxy_module` module supports embedded variables that can be used to compose headers using the [proxy_set_header](#proxy_set_header) directive:\n\n`$proxy_host`\n\nname and port of a proxied server as specified in the [proxy_pass](#proxy_pass) directive;\n\n`$proxy_port`\n\nport of a proxied server as specified in the [proxy_pass](#proxy_pass) directive, or the protocol’s default port;\n\n`$proxy_add_x_forwarded_for`\n\nthe “X-Forwarded-For” client request header field with the `$remote_addr` variable appended to it, separated by a comma. If the “X-Forwarded-For” field is not present in the client request header, the `$proxy_add_x_forwarded_for` variable is equal to the `$remote_addr` variable.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_proxy_module.html](https://nginx.org/en/docs/http/ngx_http_proxy_module.html)"
- name: proxy_timeout (ngx_mail_proxy_module)
  id: mail/ngx_mail_proxy_module#proxy_timeout
  summary: Sets the timeout between two successive read or write operations on client or proxied server connections
  belongs_to: ngx_mail_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_timeout`***`timeout`*`;` |
    | Default: | `proxy_timeout 24h;`              |
    | Context: | `mail`, `server`                  |

    Sets the *`timeout`* between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed.
- name: proxy_timeout (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_timeout
  summary: Sets the timeout between two successive read or write operations on client or proxied server connections
  belongs_to: ngx_stream_proxy_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`proxy_timeout`***`timeout`*`;` |
    | Default: | `proxy_timeout 10m;`              |
    | Context: | `stream`, `server`                |

    Sets the *`timeout`* between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed.
- name: proxy_upload_rate (ngx_stream_proxy_module)
  id: stream/ngx_stream_proxy_module#proxy_upload_rate
  summary: This directive appeared in version 1.9.3
  belongs_to: ngx_stream_proxy_module
  description: "|          |                                    |\n|----------|------------------------------------|\n| Syntax:  | **`proxy_upload_rate`***`rate`*`;` |\n| Default: | `proxy_upload_rate 0;`             |\n| Context: | `stream`, `server`                 |\n\nThis directive appeared in version 1.9.3.\n\nLimits the speed of reading the data from the client. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a connection, so if the client simultaneously opens two connections, the overall rate will be twice as much as the specified limit.\n\nParameter value can contain variables (1.17.0). It may be useful in cases where rate should be limited depending on a certain condition:\n\n``` nginx\nmap $slow $rate {\n    1     4k;\n    2     8k;\n}\n\nproxy_upload_rate $rate;\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html](https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html)"
- name: queue
  id: http/ngx_http_upstream_module#queue
  summary: This directive appeared in version 1.5.12
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`queue`***`number`*` [timeout=`*`time`*`];` |
    | Default: | —                                             |
    | Context: | `upstream`                                    |

    This directive appeared in version 1.5.12.

    If an upstream server cannot be selected immediately while processing a request, the request will be placed into the queue. The directive specifies the maximum *`number`* of requests that can be in the queue at the same time. If the queue is filled up, or the server to pass the request to cannot be selected within the time period specified in the `timeout` parameter, the 502 (Bad Gateway) error will be returned to the client.

    The default value of the `timeout` parameter is 60 seconds.

    When using load balancer methods other than the default round-robin method, it is necessary to activate them before the `queue` directive.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: quic_active_connection_id_limit
  id: http/ngx_http_v3_module#quic_active_connection_id_limit
  summary: Sets the QUIC active_connection_id_limit transport parameter value
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`quic_active_connection_id_limit`***`number`*`;` |
    | Default: | `quic_active_connection_id_limit 2;`               |
    | Context: | `http`, `server`                                   |

    Sets the QUIC `active_connection_id_limit` transport parameter value. This is the maximum number of client connection IDs which can be stored on the server.
- name: quic_bpf
  id: http/ngx_http_v3_module#quic_bpf
  summary: Enables routing of QUIC packets using eBPF
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                            |
    |----------|----------------------------|
    | Syntax:  | **`quic_bpf`**` on | off;` |
    | Default: | `quic_bpf off;`            |
    | Context: | `main`                     |

    Enables routing of QUIC packets using [eBPF](https://ebpf.io/). When enabled, this allows supporting QUIC connection migration.

    The directive is only supported on Linux 5.7+.
- name: quic_gso
  id: http/ngx_http_v3_module#quic_gso
  summary: Enables sending in optimized batch mode using segmentation offloading
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                            |
    |----------|----------------------------|
    | Syntax:  | **`quic_gso`**` on | off;` |
    | Default: | `quic_gso off;`            |
    | Context: | `http`, `server`           |

    Enables sending in optimized batch mode using segmentation offloading.

    Optimized sending is supported only on Linux featuring `UDP_SEGMENT`.
- name: quic_host_key
  id: http/ngx_http_v3_module#quic_host_key
  summary: Sets a file with the secret key used to encrypt stateless reset and address validation tokens
  belongs_to: ngx_http_v3_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`quic_host_key`***`file`*`;` |
    | Default: | —                              |
    | Context: | `http`, `server`               |

    Sets a *`file`* with the secret key used to encrypt stateless reset and address validation tokens. By default, a random key is generated on each reload. Tokens generated with old keys are not accepted.
- name: quic_retry
  id: http/ngx_http_v3_module#quic_retry
  summary: Enables the QUIC Address Validation feature
  belongs_to: ngx_http_v3_module
  description: "|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`quic_retry`**` on | off;` |\n| Default: | `quic_retry off;`            |\n| Context: | `http`, `server`             |\n\nEnables the [QUIC Address Validation](https://datatracker.ietf.org/doc/html/rfc9000#name-address-validation) feature. This includes sending a new token in a `Retry` packet or a `NEW_TOKEN` frame and validating a token received in the `Initial` packet.\n\n#### Embedded Variables\n\nThe `ngx_http_v3_module` module supports the following embedded variables:\n\n`$http3`\n\nnegotiated protocol identifier: “`h3`” for HTTP/3 connections, “`hq`” for hq connections, or an empty string otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_v3_module.html](https://nginx.org/en/docs/http/ngx_http_v3_module.html)"
- name: random
  id: http/ngx_http_upstream_module#random
  summary: This directive appeared in version 1.15.1
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`random`**` [two [`*`method`*`]];` |
    | Default: | —                                    |
    | Context: | `upstream`                           |

    This directive appeared in version 1.15.1.

    Specifies that a group should use a load balancing method where a request is passed to a randomly selected server, taking into account weights of servers.

    The optional `two` parameter instructs nginx to randomly select [two](https://homes.cs.washington.edu/~karlin/papers/balls.pdf) servers and then choose a server using the specified `method`. The default method is `least_conn` which passes a request to a server with the least number of active connections.

    The `least_time` method passes a request to a server with the least average response time and least number of active connections. If `least_time=header` is specified, the time to receive the [response header](#var_upstream_header_time) is used. If `least_time=last_byte` is specified, the time to receive the [full response](#var_upstream_response_time) is used.

    The `least_time` method is available as a part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: random (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#random
  summary: This directive appeared in version 1.15.1
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`random`**` [two [`*`method`*`]];` |
    | Default: | —                                    |
    | Context: | `upstream`                           |

    This directive appeared in version 1.15.1.

    Specifies that a group should use a load balancing method where a connection is passed to a randomly selected server, taking into account weights of servers.

    The optional `two` parameter instructs nginx to randomly select [two](https://homes.cs.washington.edu/~karlin/papers/balls.pdf) servers and then choose a server using the specified `method`. The default method is `least_conn` which passes a connection to a server with the least number of active connections.

    The `least_time` method passes a connection to a server with the least average time and least number of active connections. If `least_time=connect` parameter is specified, time to [connect](#var_upstream_connect_time) to the upstream server is used. If `least_time=first_byte` parameter is specified, time to receive the [first byte](#var_upstream_first_byte_time) of data is used. If `least_time=last_byte` is specified, time to receive the [last byte](#var_upstream_session_time) of data is used.

    The `least_time` method is available as a part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: random_index
  id: http/ngx_http_random_index_module#random_index
  summary: Enables or disables module processing in a surrounding location
  belongs_to: ngx_http_random_index_module
  description: "|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`random_index`**` on | off;` |\n| Default: | `random_index off;`            |\n| Context: | `location`                     |\n\nEnables or disables module processing in a surrounding location.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_random_index_module.html](https://nginx.org/en/docs/http/ngx_http_random_index_module.html)"
- name: read_ahead
  id: http/ngx_http_core_module#read_ahead
  summary: Sets the amount of pre-reading for the kernel when working with file
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`read_ahead`***`size`*`;`  |
    | Default: | `read_ahead 0;`              |
    | Context: | `http`, `server`, `location` |

    Sets the amount of pre-reading for the kernel when working with file.

    On Linux, the `posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL)` system call is used, and so the *`size`* parameter is ignored.

    On FreeBSD, the `fcntl(O_READAHEAD,` *`size`*`)` system call, supported since FreeBSD 9.0-CURRENT, is used. FreeBSD 7 has to be [patched](http://sysoev.ru/freebsd/patch.readahead.txt).
- name: read_timeout (ngx_mgmt_module)
  id: ngx_mgmt_module#read_timeout
  summary: Defines a timeout for reading a response from the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`read_timeout`***`time`*`;` |
    | Default: | `read_timeout 60s;`           |
    | Context: | `mgmt`                        |

    Defines a timeout for reading a response from the Instance Manager. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the Instance Manager does not transmit anything within this time, the connection is closed.
- name: real_ip_header
  id: http/ngx_http_realip_module#real_ip_header
  summary: Defines the request header field whose value will be used to replace the client address
  belongs_to: ngx_http_realip_module
  description: |-
    |          |                                                                                 |
    |----------|---------------------------------------------------------------------------------|
    | Syntax:  | **`real_ip_header`***`field`*` | X-Real-IP | X-Forwarded-For | proxy_protocol;` |
    | Default: | `real_ip_header X-Real-IP;`                                                     |
    | Context: | `http`, `server`, `location`                                                    |

    Defines the request header field whose value will be used to replace the client address.

    The request header field value that contains an optional port is also used to replace the client port (1.11.0). The address and port should be specified according to [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986).

    The `proxy_protocol` parameter (1.5.12) changes the client address to the one from the PROXY protocol header. The PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](ngx_http_core_module#listen) directive.
- name: real_ip_recursive
  id: http/ngx_http_realip_module#real_ip_recursive
  summary: This directive appeared in versions 1.3.0 and 1.2.1
  belongs_to: ngx_http_realip_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`real_ip_recursive`**` on | off;` |\n| Default: | `real_ip_recursive off;`            |\n| Context: | `http`, `server`, `location`        |\n\nThis directive appeared in versions 1.3.0 and 1.2.1.\n\nIf recursive search is disabled, the original client address that matches one of the trusted addresses is replaced by the last address sent in the request header field defined by the [real_ip_header](#real_ip_header) directive. If recursive search is enabled, the original client address that matches one of the trusted addresses is replaced by the last non-trusted address sent in the request header field.\n\n#### Embedded Variables\n\n`$realip_remote_addr`\n\nkeeps the original client address (1.9.7)\n\n`$realip_remote_port`\n\nkeeps the original client port (1.11.0)\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_realip_module.html](https://nginx.org/en/docs/http/ngx_http_realip_module.html)"
- name: recursive_error_pages
  id: http/ngx_http_core_module#recursive_error_pages
  summary: Enables or disables doing several redirects using the error_page directive
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`recursive_error_pages`**` on | off;` |
    | Default: | `recursive_error_pages off;`            |
    | Context: | `http`, `server`, `location`            |

    Enables or disables doing several redirects using the [error_page](#error_page) directive. The number of such redirects is [limited](#internal).
- name: Reference
  id: njs/reference
  summary: njs provides objects, methods and properties for extending nginx functionality
  description: "# Reference\n\n- [nginx objects](#http_stream)\n- [HTTP Request](#http)\n- [Stream Session](#stream)\n- [Periodic Session](#periodic_session)\n- [Headers](#headers)\n- [Request](#request)\n- [Response](#response)\n- [ngx](#ngx)\n- [ngx.shared](#ngx_shared)\n- [built-in objects](#builtin_objects)\n- [console](#console)\n- [crypto](#builtin_crypto)\n- [CryptoKey](#cryptokey)\n- [CryptoKeyPair](#cryptokeypair)\n- [njs](#njs)\n- [process](#process)\n- [String](#string)\n- [web API](#webapi)\n- [Text Decoder](#textdecoder)\n- [Text Encoder](#textencoder)\n- [timers](#njs_api_timers)\n- [Global functions](#njs_global_functions)\n- [built-in modules](#builtin_modules)\n- [Buffer](#buffer)\n- [Crypto](#crypto)\n- [File System](#njs_api_fs)\n- [Query String](#querystring)\n- [XML](#xml)\n- [zlib](#zlib)\n\n[njs](index) provides objects, methods and properties for extending nginx functionality.\n\nThis reference contains only njs specific properties, methods and modules not compliant with ECMAScript. Definitions of njs properties and methods compliant with ECMAScript can be found in [ECMAScript specification](http://www.ecma-international.org/ecma-262/). List of all njs properties and methods can be found in [Compatibility](compatibility).\n\n#### nginx objects\n\n#### HTTP Request\n\n|                                                |\n|------------------------------------------------|\n| [`r.args{}`](#r_args)                          |\n| [`r.done()`](#r_done)                          |\n| [`r.error()`](#r_error)                        |\n| [`r.finish()`](#r_finish)                      |\n| [`r.headersIn{}`](#r_headers_in)               |\n| [`r.headersOut{}`](#r_headers_out)             |\n| [`r.httpVersion`](#r_http_version)             |\n| [`r.internal`](#r_internal)                    |\n| [`r.internalRedirect()`](#r_internal_redirect) |\n| [`r.log()`](#r_log)                            |\n| [`r.method`](#r_method)                        |\n| [`r.parent`](#r_parent)                        |\n| [`r.remoteAddress`](#r_remote_address)         |\n| [`r.requestBody`](#r_request_body)             |\n| [`r.requestBuffer`](#r_request_buffer)         |\n| [`r.requestText`](#r_request_text)             |\n| [`r.rawHeadersIn[]`](#r_raw_headers_in)        |\n| [`r.rawHeadersOut[]`](#r_raw_headers_out)      |\n| [`r.responseBody`](#r_response_body)           |\n| [`r.responseBuffer`](#r_response_buffer)       |\n| [`r.responseText`](#r_response_text)           |\n| [`r.return()`](#r_return)                      |\n| [`r.send()`](#r_send)                          |\n| [`r.sendBuffer()`](#r_sendbuffer)              |\n| [`r.sendHeader()`](#r_send_header)             |\n| [`r.setReturnValue()`](#r_set_return_value)    |\n| [`r.status`](#r_status)                        |\n| [`r.subrequest()`](#r_subrequest)              |\n| [`r.uri`](#r_uri)                              |\n| [`r.rawVariables{}`](#r_raw_variables)         |\n| [`r.variables{}`](#r_variables)                |\n| [`r.warn()`](#r_warn)                          |\n\nThe HTTP request object is available only in the [ngx_http_js_module](../http/ngx_http_js_module) module. Before [0.8.5](changes#njs0.8.5), all string properties of the object were [byte strings](#string).\n\n`r.args{}`  \nrequest arguments object, read-only.\n\nThe query string is returned as an object. Since [0.7.6](changes#njs0.7.6), duplicate keys are returned as an array, keys are case-sensitive, both keys and values are percent-decoded.\n\nFor example, the query string\n\n``` nginx\n'a=1&b=%32&A=3&b=4&B=two%20words'\n```\n\nis converted to `r.args` as:\n\n``` nginx\n{a: \"1\", b: [\"2\", \"4\"], A: \"3\", B: \"two words\"}\n```\n\nMore advanced parsing scenarios can be achieved with the [Query String](#querystring) module and with the [`$args`](../http/ngx_http_core_module#var_args) variable, for example:\n\n``` nginx\nimport qs from 'querystring';\n\nfunction args(r) {\n    return qs.parse(r.variables.args);\n}\n```\n\nThe argument object is evaluated at the first access to `r.args`. If only a single argument is needed, for example `foo`, [nginx variables](https://nginx.org/en/docs/varindex.html) can be used:\n\n``` nginx\nr.variables.arg_foo\n```\n\nHere, [nginx variables object](#r_variables) returns the first value for a given key, case-insensitive, without percent-decoding.\n\nTo convert `r.args` back to a string, the Query String [`stringify`](#querystring_stringify) method can be used.\n\n`r.done()`  \nafter calling this function, next data chunks will be passed to client without calling [js_body_filter](../http/ngx_http_js_module#js_body_filter) ([0.5.2](changes#njs0.5.2)). May be called only from the [js_body_filter](../http/ngx_http_js_module#js_body_filter) function\n\n`r.error(`*`string`*`)`  \nwrites a `string` to the error log on the `error` level of logging\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n`r.finish()`  \nfinishes sending a response to the client\n\n`r.headersIn{}`  \nincoming headers object, read-only.\n\nThe `Foo` request header can be accessed with the syntax: `headersIn.foo` or `headersIn['Foo']`.\n\nThe “Authorization”, “Content-Length”, “Content-Range”, “Content-Type”, “ETag”, “Expect”, “From”, “Host”, “If-Match”, “If-Modified-Since”, “If-None-Match”, “If-Range”, “If-Unmodified-Since”, “Max-Forwards”, “Proxy-Authorization”, “Referer”, “Transfer-Encoding”, and “User-Agent” request headers can have only one field value ([0.4.1](changes#njs0.4.1)). Duplicate field values in “Cookie” headers are separated by semicolon (`;`). Duplicate field values in all other request headers are separated by commas.\n\n`r.headersOut{}`  \noutgoing headers object for the main request, writable.\n\nIf `r.headersOut{}` is the response object of a [subrequest](#r_subrequest), it represents response headers. In this case, field values in “Accept-Ranges”, “Connection”, “Content-Disposition”, “Content-Encoding”, “Content-Length”, “Content-Range”, “Date”, “Keep-Alive”, “Server”, “Transfer-Encoding”, “X-Accel-\\*” response headers may be omitted.\n\nThe “Foo” response header can be accessed with the syntax: `headersOut.foo` or `headersOut['Foo']`.\n\nOutgoing headers should be set before a response header is sent to a client, otherwise header update will be ignored. This means that `r.headersOut{}` is effectively writable in:\n\n- the [js_content](../http/ngx_http_js_module#js_content) handler before [`r.sendHeader()`](#r_send_header) or [`r.return()`](#r_return) are called\n- the [js_header_filter](../http/ngx_http_js_module#js_header_filter) handler\n\nField values of multi-value response headers ([0.4.0](changes#njs0.4.0)) can be set with the syntax:\n\n``` nginx\nr.headersOut['Foo'] = ['a', 'b']\n```\n\nwhere the output will be:\n\n``` nginx\nFoo: a\nFoo: b\n```\n\nAll previous field values of the “Foo” response header will be deleted.\n\nFor standard response headers that accept only a single field value such as “Content-Type”, only the last element of the array will take effect. Field values of the “Set-Cookie” response header are always returned as an array. Duplicate field values in “Age”, “Content-Encoding”, “Content-Length”, “Content-Type”, “ETag”, “Expires”, “Last-Modified”, “Location”, “Retry-After” response headers are ignored. Duplicate field values in all other response headers are separated by commas.\n\n`r.httpVersion`  \nHTTP version, read-only\n\n`r.internal`  \nboolean value, true for [internal](../http/ngx_http_core_module#internal) locations\n\n`r.internalRedirect(`*`uri`*`)`  \nperforms an [internal redirect](../dev/development_guide#http_request_redirection) to the specified `uri`. If the uri starts with the “`@`” prefix, it is considered a named location. In a new location, all request processing is repeated starting from [NGX_HTTP_SERVER_REWRITE_PHASE](../dev/development_guide#http_phases) for ordinary locations and from [NGX_HTTP_REWRITE_PHASE](../dev/development_guide#http_phases) for named locations. As a result, a redirect to a named location does not check [client_max_body_size](../http/ngx_http_core_module#client_max_body_size) limit. See [dev guide](../dev/development_guide#http_request_redirection) for more details. Redirected requests become internal and can access the [internal](../http/ngx_http_core_module#internal) locations. The actual redirect happens after the handler execution is completed.\n\nAfter redirect, a new njs VM is started in the target location, the VM in the original location is stopped. Values of [nginx variables](https://nginx.org/en/docs/varindex.html) are kept and can be used to pass information to the target location. Since [0.5.3](changes#njs0.5.3), the variable declared with the `js_var` directive for [http](../http/ngx_http_js_module#js_var) or [stream](../stream/ngx_stream_js_module#js_var) can be used.\n\nSince [0.7.4](changes#njs0.7.4), the method accepts escaped URIs.\n\n`r.log(`*`string`*`)`  \nwrites a `string` to the error log on the `info` level of logging\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n`r.method`  \nHTTP method, read-only\n\n`r.parent`  \nreferences the parent request object\n\n`r.remoteAddress`  \nclient address, read-only\n\n`r.requestBody`  \nthe property was made obsolete in [0.5.0](changes#njs0.5.0) and was removed in [0.8.0](changes#njs0.8.0). The [`r.requestBuffer`](#r_request_buffer) or [`r.requestText`](#r_request_text) property should be used instead.\n\n`r.requestBuffer`  \nclient request body if it has not been written to a temporary file (since [0.5.0](changes#njs0.5.0)). To ensure that the client request body is in memory, its size should be limited by [client_max_body_size](../http/ngx_http_core_module#client_max_body_size), and a sufficient buffer size should be set using [client_body_buffer_size](../http/ngx_http_core_module#client_body_buffer_size). The property is available only in the [js_content](../http/ngx_http_js_module#js_content) directive.\n\n`r.requestText`  \nthe same as [`r.requestBuffer`](#r_request_buffer), but returns a `string`. Note that it may convert bytes invalid in UTF-8 encoding into the replacement character.\n\n`r.rawHeadersIn[]`  \nreturns an array of key-value pairs exactly as they were received from the client ([0.4.1](changes#njs0.4.1)).\n\nFor example, with the following request headers:\n\n``` nginx\nHost: localhost\nFoo:  bar\nfoo:  bar2\n```\n\nthe output of `r.rawHeadersIn` will be:\n\n``` nginx\n[\n    ['Host', 'localhost'],\n    ['Foo', 'bar'],\n    ['foo', 'bar2']\n]\n```\n\nAll `foo` headers can be collected with the syntax:\n\n``` nginx\nr.rawHeadersIn.filter(v=>v[0].toLowerCase() == 'foo').map(v=>v[1])\n```\n\nthe output will be:\n\n``` nginx\n['bar', 'bar2']\n```\n\nHeader field names are not converted to lower case, duplicate field values are not merged.\n\n`r.rawHeadersOut[]`  \nreturns an array of key-value pairs of response headers ([0.4.1](changes#njs0.4.1)). Header field names are not converted to lower case, duplicate field values are not merged.\n\n`r.responseBody`  \nthe property was made obsolete in [0.5.0](changes#njs0.5.0) and was removed in [0.8.0](changes#njs0.8.0). The [`r.responseBuffer`](#r_response_buffer) or the [`r.responseText`](#r_response_text) property should be used instead.\n\n`r.responseBuffer`  \nholds the [subrequest](#r_subrequest) response body, read-only (since [0.5.0](changes#njs0.5.0)). The size of `r.responseBuffer` is limited by the [subrequest_output_buffer_size](../http/ngx_http_core_module#subrequest_output_buffer_size) directive.\n\n`r.responseText`  \nthe same as [`r.responseBuffer`](#r_response_buffer) but returns a string (since [0.5.0](changes#njs0.5.0)). Note that it may convert bytes invalid in UTF-8 encoding into the replacement character.\n\n`r.return(status[, string | Buffer])`  \nsends the entire response with the specified `status` to the client. The response can be a string or Buffer ([0.5.0](changes#njs0.5.0)).\n\nIt is possible to specify either a redirect URL (for codes 301, 302, 303, 307, and 308) or the response body text (for other codes) as the second argument\n\n`r.send(string | Buffer)`  \nsends a part of the response body to the client. The data sent can be a string or Buffer ([0.5.0](changes#njs0.5.0))\n\n`r.sendBuffer(`*`data`*`[, `*`options`*`])`  \nadds data to the chain of data chunks to be forwarded to the next body filter ([0.5.2](changes#njs0.5.2)). The actual forwarding happens later, when the all the data chunks of the current chain are processed.\n\nThe data can be a string or Buffer. The `options` is an object used to override nginx buffer flags derived from an incoming data chunk buffer. The flags can be overridden with the following flags:\n\n`last`  \nboolean, true if the buffer is the last buffer\n\n`flush`  \nboolean, true if the buffer should have the `flush` flag\n\nThe method may be called only from the [js_body_filter](../http/ngx_http_js_module#js_body_filter) function.\n\n`r.sendHeader()`  \nsends the HTTP headers to the client\n\n`r.setReturnValue(`*`value`*`)`  \nsets the return value of the [js_set](../http/ngx_http_js_module#js_set) handler ([0.7.0](changes#njs0.7.0)). Unlike an ordinary return statement, this method should be used when the handler is JS async function. For example:\n\n``` nginx\nasync function js_set(r) {\n    const digest = await crypto.subtle.digest('SHA-256', r.headersIn.host);\n    r.setReturnValue(digest);\n}\n```\n\n`r.status`  \nstatus, writable\n\n`r.subrequest(`*`uri`*`[, `*`options`*`[, `*`callback`*`]])`  \ncreates a subrequest with the given `uri` and `options`, and installs an optional completion `callback`.\n\nA [subrequest](../dev/development_guide#http_subrequests) shares its input headers with the client request. To send headers different from original headers to a proxied server, the [proxy_set_header](../http/ngx_http_proxy_module#proxy_set_header) directive can be used. To send a completely new set of headers to a proxied server, the [proxy_pass_request_headers](../http/ngx_http_proxy_module#proxy_pass_request_headers) directive can be used.\n\nIf `options` is a string, then it holds the subrequest arguments string. Otherwise, `options` is expected to be an object with the following keys:\n\n`args`  \narguments string, by default an empty string is used\n\n`body`  \nrequest body, by default the request body of the parent request object is used\n\n`method`  \nHTTP method, by default the `GET` method is used\n\n`detached`  \nboolean flag ([0.3.9](changes#njs0.3.9)), if `true`, the created subrequest is a detached subrequest. Responses to detached subrequests are ignored. Unlike ordinary subrequests, a detached subrequest can be created inside a variable handler. The `detached` flag and callback argument are mutually exclusive.\n\nThe completion `callback` receives a [subrequest response object](#http) with methods and properties identical to the parent request object.\n\nSince [0.3.8](changes#njs0.3.8), if a `callback` is not provided, the `Promise` object that resolves to the [subrequest response object](#http) is returned.\n\nFor example, to view all response headers in the subrequest:\n\n``` nginx\nasync function handler(r) {\n    const reply = await r.subrequest('/path');\n\n    for (const h in reply.headersOut) {\n        r.log(`${h}: ${reply.headersOut[h]}`);\n    }\n\n    r.return(200);\n}\n```\n\n`r.uri`  \ncurrent [URI](../http/ngx_http_core_module#var_uri) in request, [normalized](../http/ngx_http_core_module#location), read-only\n\n`r.rawVariables{}`  \nnginx [variables](#r_variables) as Buffers, writable (since [0.5.0](changes#njs0.5.0))\n\n`r.variables{}`  \n[nginx variables](https://nginx.org/en/docs/varindex.html) object, writable (since [0.2.8](changes#njs0.2.8)).\n\nFor example, to get the `$foo` variable, one of the following syntax can be used:\n\n``` nginx\nr.variables['foo']\nr.variables.foo\n```\n\nnginx treats variables referenced in `nginx.conf` and unreferenced variables differently. When a variable is referenced, it may be cacheable, but when it is unreferenced it is always uncacheable. For example, when the [$request_id](../http/ngx_http_core_module#var_request_id) variable is only accessed from njs, it has a new value every time it is evaluated. But, when the [$request_id](../http/ngx_http_core_module#var_request_id) is referenced, for example:\n\n``` nginx\nproxy_set_header X-Request-Id $request_id;\n```\n\nthe `r.variables.request_id` returns the same value every time.\n\nA variable is writable if:\n\n- it was created using the `js_var` directive for [http](../http/ngx_http_js_module#js_var) or [stream](../stream/ngx_stream_js_module#js_var) (since [0.5.3](changes#njs0.5.3))\n- it is referenced in nginx configuration file\n\nEven so, some embedded variables still cannot be assigned a value (for example, [`$http_`](../http/ngx_http_core_module#var_http_)).\n\n`r.warn(`*`string`*`)`  \nwrites a `string` to the error log on the `warning` level of logging\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n#### Stream Session\n\n|                                             |\n|---------------------------------------------|\n| [`s.allow()`](#s_allow)                     |\n| [`s.decline()`](#s_decline)                 |\n| [`s.deny()`](#s_deny)                       |\n| [`s.done()`](#s_done)                       |\n| [`s.error()`](#s_error)                     |\n| [`s.log()`](#s_log)                         |\n| [`s.off()`](#s_off)                         |\n| [`s.on()`](#s_on)                           |\n| [`s.remoteAddress`](#s_remote_address)      |\n| [`s.rawVariables{}`](#s_raw_variables)      |\n| [`s.send()`](#s_send)                       |\n| [`s.sendDownstream()`](#s_send_downstream)  |\n| [`s.sendUpstream()`](#s_send_upstream)      |\n| [`s.status`](#s_status)                     |\n| [`s.setReturnValue()`](#s_set_return_value) |\n| [`s.variables{}`](#s_variables)             |\n| [`s.warn()`](#s_warn)                       |\n\nThe stream session object is available only in the [ngx_stream_js_module](../stream/ngx_stream_js_module) module. Before [0.8.5](changes#njs0.8.5), all string properties of the object were [byte strings](#string).\n\n`s.allow()`  \nan alias to [`s.done(0)`](#s_done) ([0.2.4](changes#njs0.2.4))\n\n`s.decline()`  \nan alias to [`s.done(-5)`](#s_done) ([0.2.4](changes#njs0.2.4))\n\n`s.deny()`  \nan alias to [`s.done(403)`](#s_done) ([0.2.4](changes#njs0.2.4))\n\n`s.done([`*`code`*`]`)  \nsets an exit `code` for the current [phase](../stream/stream_processing) handler to a code value, by default `0`. The actual finalization happens when the js handler is completed and all pending events, for example, from [`ngx.fetch()`](#ngx_fetch) or [`setTimeout()`](#settimeout), are processed ([0.2.4](changes#njs0.2.4)).\n\nPossible code values:\n\n- `0` — successful finalization, passing control to the next phase\n- `-5` — undecided, passing control to the next handler of the current phase (if any)\n- `403` — access is forbidden\n\nMay be called only from a phase handler function: [`js_access`](../stream/ngx_stream_js_module#js_access) or [`js_preread`](../stream/ngx_stream_js_module#js_preread).\n\n`s.error(`*`string`*`)`  \nwrites a sent `string` to the error log on the `error` level of logging\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n`s.log(`*`string`*`)`  \nwrites a sent *`string`* to the error log on the `info` level of logging\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n`s.off(`*`eventName`*`)`  \nunregisters the callback set by the [s.on()](#s_on) method ([0.2.4](changes#njs0.2.4))\n\n`s.on(`*`event`*`, `*`callback`*`)`  \nregisters a `callback` for the specified `event` ([0.2.4](changes#njs0.2.4)).\n\nAn `event` may be one of the following strings:\n\n`upload`  \nnew data (string) from a client\n\n`download`  \nnew data (string) to a client\n\n`upstream`  \nnew data (Buffer) from a client (since [0.5.0](changes#njs0.5.0))\n\n`downstream`  \nnew data (Buffer) to a client (since [0.5.0](changes#njs0.5.0))\n\nThe completion callback has the following prototype: `callback(data, flags)`, where `data` is string or Buffer (depending on the event type) `flags` is an object with the following properties:\n\n`last`  \na boolean value, true if data is a last buffer.\n\n`s.remoteAddress`  \nclient address, read-only\n\n`s.rawVariables`  \nnginx [variables](#s_variables) as Buffers, writable (since [0.5.0](changes#njs0.5.0))\n\n`s.send(`*`data`*`[, `*`options`*`])`  \nadds data to the chain of data chunks that will be forwarded in the forward direction: in download callback to a client; in upload to an upstream server ([0.2.4](changes#njs0.2.4)). The actual forwarding happens later, when the all the data chunks of the current chain are processed.\n\nThe data can be a string or Buffer ([0.5.0](changes#njs0.5.0)). The `options` is an object used to override nginx buffer flags derived from an incoming data chunk buffer. The flags can be overridden with the following flags:\n\n`last`  \nboolean, true if the buffer is the last buffer\n\n`flush`  \nboolean, true if the buffer should have the `flush` flag\n\nThe method can be called multiple times per callback invocation.\n\n`s.sendDownstream()`  \nis identical to [s.send()](#s_send), except for it always sends data to a client (since [0.7.8](changes#njs0.7.8)).\n\n`s.sendUpstream()`  \nis identical to [s.send()](#s_send), except for it always sends data from a client (since [0.7.8](changes#njs0.7.8)).\n\n`s.status`  \nsession status code, an alias to the [`$status`](../stream/ngx_stream_core_module#var_status) variable, read only (since [0.5.2](changes#njs0.5.2))\n\n`s.setReturnValue(`*`value`*`)`  \nsets the return value of the [js_set](../stream/ngx_stream_js_module#js_set) handler ([0.7.0](changes#njs0.7.0)). Unlike an ordinary return statement, this method should be used when the handler is JS async function. For example:\n\n``` nginx\nasync function js_set(r) {\n    const digest = await crypto.subtle.digest('SHA-256', r.headersIn.host);\n    r.setReturnValue(digest);\n}\n```\n\n`s.variables{}`  \n[nginx variables](https://nginx.org/en/docs/varindex.html) object, writable (since [0.2.8](changes#njs0.2.8)). A variable can be writable only if it is referenced in nginx configuration file. Even so, some embedded variables still cannot be assigned a value.\n\n`s.warn(`*`string`*`)`  \nwrites a sent `string` to the error log on the `warning` level of logging\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n#### Periodic Session\n\n|                                                                     |\n|---------------------------------------------------------------------|\n| [`PeriodicSession.rawVariables{}`](#periodic_session_raw_variables) |\n| [`PeriodicSession.variables{}`](#periodic_session_variables)        |\n\nThe `Periodic Session` object is provided as the first argument for the `js_periodic` handler for [http](../http/ngx_http_js_module#js_periodic) and [stream](../stream/ngx_stream_js_module#js_periodic) (since [0.8.1](changes#njs0.8.1)).\n\n`PeriodicSession.rawVariables{}`  \nnginx [variables](#periodic_session_variables) as Buffers, writable.\n\n`PeriodicSession.variables{}`  \n[nginx variables](https://nginx.org/en/docs/varindex.html) object, writable.\n\n#### Headers\n\n|                                         |\n|-----------------------------------------|\n| [`Headers()`](#headers_constructor)     |\n| [`Headers.append()`](#headers_append)   |\n| [`Headers.delete()`](#headers_delete)   |\n| [`Headers.get()`](#headers_get)         |\n| [`Headers.getAll()`](#headers_getall)   |\n| [`Headers.forEach()`](#headers_foreach) |\n| [`Headers.has()`](#headers_has)         |\n| [`Headers.set()`](#headers_set)         |\n\nThe `Headers` interface of the [`Fetch API`](#ngx_fetch) is available since [0.5.1](changes#njs0.5.1).\n\nA new `Headers` object can be created using the [`Headers()`](#headers_constructor) constructor: (since [0.7.10](changes#njs0.7.10)):\n\n`Headers([`*`init`*`])`  \n`init`  \nAn object containing HTTP headers for prepopulating the `Headers` object, can be a `string`, an `array` of name-value pairs, or an existing `Headers` object.\n\nA new `Headers` object can be created with the following properties and methods:\n\n`append()`  \nAppends a new value into an existing header in the `Headers` object, or adds the header if it does not already exist (since [0.7.10](changes#njs0.7.10)).\n\n`delete()`  \nDeletes a header from the `Headers` object (since [0.7.10](changes#njs0.7.10)).\n\n`get()`  \nReturns a string containing the values of all headers with the specified name separated by a comma and a space.\n\n`getAll(`*`name`*`)`  \nReturns an array containing the values of all headers with the specified name.\n\n`forEach()`  \nExecutes a provided function once for each key/value pair in the `Headers` object (since [0.7.10](changes#njs0.7.10)).\n\n`has()`  \nReturns a boolean value indicating whether a header with the specified name exists.\n\n`set()`  \nSets a new value for an existing header inside the `Headers` object, or adds the header if it does not already exist (since [0.7.10](changes#njs0.7.10)).\n\n#### Request\n\n|                                                 |\n|-------------------------------------------------|\n| [`Request()`](#request_constructor)             |\n| [`Request.arrayBuffer()`](#request_arraybuffer) |\n| [`Request.bodyUsed`](#request_bodyused)         |\n| [`Request.cache`](#request_cache)               |\n| [`Request.credentials`](#request_credentials)   |\n| [`Request.headers`](#request_headers)           |\n| [`Request.json()`](#request_json)               |\n| [`Request.method`](#request_method)             |\n| [`Request.mode`](#request_mode)                 |\n| [`Request.text()`](#request_text)               |\n| [`Request.url`](#request_url)                   |\n\nThe `Request` interface of the [`Fetch API`](#ngx_fetch) is available since [0.7.10](changes#njs0.7.10).\n\nA new `Request` object can be created using the [`Request()`](#request_constructor) constructor:\n\n`Request[`*`resource`*`[, `*`options`*`]])`  \nCreates a `Request` object to fetch that can be passed later to [`ngx.fetch()`](#ngx_fetch). The `resource` can be a URL or an existing `Request` object. The `options` is an optional argument that is expected to be an object with the following keys:\n\n`body`  \nThe request body, by default is empty.\n\n`headers`  \nThe response headers object — the object containing HTTP headers for prepopulating the [`Headers`](#headers) object, can be a `string`, an `array` of name-value pairs, or an existing [`Headers`](#headers) object.\n\n`method`  \nThe HTTP method, by default the GET method is used.\n\nA new `Request` object can be created with the following properties and methods:\n\n`arrayBuffer()`  \nReturns a `Promise` that resolves with an `ArrayBuffer`.\n\n`bodyUsed`  \nA boolean value, `true` if the body was used in the request.\n\n`cache`  \nContains the cache mode of the request.\n\n`credentials`  \nContains the credentials of the request, by default is `same-origin`.\n\n`headers`  \nThe [`Headers`](#headers) read-only object associated with the [`Request`](#request).\n\n`json()`  \nReturns a `Promise` that resolves with the result of parsing the request body as JSON.\n\n`method`  \nContains the request method.\n\n`mode`  \nContains the mode of the request.\n\n`text()`  \nReturns a `Promise` that resolves with a string representation of the request body.\n\n`url`  \nContains the URL of the request.\n\n#### Response\n\n|                                                   |\n|---------------------------------------------------|\n| [`Response()`](#response_constructor)             |\n| [`Response.arrayBuffer()`](#response_arraybuffer) |\n| [`Response.bodyUsed`](#response_bodyused)         |\n| [`Response.headers`](#response_headers)           |\n| [`Response.json()`](#response_json)               |\n| [`Response.ok`](#response_ok)                     |\n| [`Response.redirected`](#response_redirect)       |\n| [`Response.status`](#response_status)             |\n| [`Response.statusText`](#response_statustext)     |\n| [`Response.text()`](#response_text)               |\n| [`Response.type`](#response_type)                 |\n| [`Response.url`](#response_url)                   |\n\nThe `Response` interface is available since [0.5.1](changes#njs0.5.1).\n\nA new `Response` object can be created using the [`Response()`](#response_constructor) constructor (since [0.7.10](changes#njs0.7.10)):\n\n`Response[`*`body`*`[, `*`options`*`]])`  \nCreates a `Response` object. The `body` is an optional argument, can be a `string` or a `buffer`, by default is `null`. The `options` is an optional argument that is expected to be an object with the following keys:\n\n`headers`  \nThe response headers object — the object containing HTTP headers for prepopulating the [`Headers`](#headers) object, can be a `string`, an `array` of name-value pairs, or an existing [`Headers`](#headers) object.\n\n`status`  \nThe status code of the response.\n\n`statusText`  \nThe status message corresponding to the status code.\n\nA new `Response()` object can be created with the following properties and methods:\n\n`arrayBuffer()`  \nTakes a `Response` stream and reads it to completion. Returns a `Promise` that resolves with an `ArrayBuffer`.\n\n`bodyUsed`  \nA boolean value, `true` if the body was read.\n\n`headers`  \nThe [`Headers`](#headers) read-only object associated with the [`Response`](#response).\n\n`json()`  \nTakes a `Response` stream and reads it to completion. Returns a `Promise` that resolves with the result of parsing the body text as JSON.\n\n`ok`  \nA boolean value, `true` if the response was successful (status codes between 200–299).\n\n`redirected`  \nA boolean value, `true` if the response is the result of a redirect.\n\n`status`  \nThe status code of the response.\n\n`statusText`  \nThe status message corresponding to the status code.\n\n`text()`  \nTakes a `Response` stream and reads it to completion. Returns a `Promise` that resolves with a string.\n\n`type`  \nThe type of the response.\n\n`url`  \nThe URL of the response.\n\n#### ngx\n\n|                                             |\n|---------------------------------------------|\n| [`ngx.build`](#ngx_build)                   |\n| [`ngx.conf_file_path`](#ngx_conf_file_path) |\n| [`ngx.conf_prefix`](#ngx_conf_prefix)       |\n| [`ngx.error_log_path`](#ngx_error_log_path) |\n| [`ngx.fetch()`](#ngx_fetch)                 |\n| [`ngx.log()`](#ngx_log)                     |\n| [`ngx.prefix`](#ngx_prefix)                 |\n| [`ngx.version`](#ngx_version)               |\n| [`ngx.version_number`](#ngx_version_number) |\n| [`ngx.worker_id`](#ngx_worker_id)           |\n\nThe `ngx` global object is available since [0.5.0](changes#njs0.5.0).\n\n`ngx.build`  \na string containing an optional nginx build name, corresponds to the [`--build=name`](../configure#build) argument of the [configure](../configure) script, by default is `\"\"` ([0.8.0](changes#njs0.8.0))\n\n`ngx.conf_file_path`  \na string containing the file path to current nginx configuration file ([0.8.0](changes#njs0.8.0))\n\n`ngx.conf_prefix`  \na string containing the file path to [nginx configuration prefix](../configure#conf_path) — the directory where nginx is currently looking for configuration ([0.7.8](changes#njs0.7.8))\n\n`ngx.error_log_path`  \na string containing the file path to the current [error log](../ngx_core_module#error_log) file ([0.8.0](changes#njs0.8.0))\n\n`ngx.fetch(`*`resource`*`, [`*`options`*`])`  \nMakes a request to fetch a *`resource`* ([0.5.1](changes#njs0.5.1)), which can be an URL or the [`Request`](#request) object ([0.7.10](changes#njs0.7.10)). Returns a `Promise` that resolves with the [`Response`](#response) object. Since [0.7.0](changes#njs0.7.0), the `https://` scheme is supported, redirects are not handled.\n\nIf the URL in the *`resource`* is specified as a domain name, it is determined using a [resolver](../http/ngx_http_core_module#resolver). If the `https://` scheme is specified, the [js_fetch_trusted_certificate](../http/ngx_http_js_module#js_fetch_trusted_certificate) directive should be configured for the authentication of the *`resource`*'s HTTPS server.\n\nThe `options` parameter is expected to be an object with the following keys:\n\n`body`  \nrequest body, by default is empty\n\n`buffer_size`  \nthe buffer size for reading the response, by default is `4096`\n\n`headers`  \nrequest [headers](#headers) object\n\n`max_response_body_size`  \nthe maximum size of the response body in bytes, by default is `32768`\n\n`method`  \nHTTP method, by default the `GET` method is used\n\n`verify`  \nenables or disables verification of the HTTPS server certificate, by default is `true` ([0.7.0](changes#njs0.7.0))\n\nExample:\n\n``` nginx\nlet reply = await ngx.fetch('http://nginx.org/');\nlet body = await reply.text();\n\nr.return(200, body);\n```\n\n`ngx.log`(*`level`*, *`message`*)  \nwrites a message to the error log with the specified level of logging. The *`level`* parameter specifies one of the log levels, the *`message`* parameter can be a string or Buffer. The following log levels can be specified: `ngx.INFO`, `ngx.WARN`, and `ngx.ERR`.\n\nAs nginx has a [hardcoded](../dev/development_guide#logging) maximum line length limit, only first 2048 bytes of the string can be logged.\n\n`ngx.prefix`  \na string containing the file path to [nginx prefix](../configure#prefix) — a directory that keeps server files ([0.8.0](changes#njs0.8.0))\n\n`ngx.version`  \na string containing nginx version, for example: `1.25.0` ([0.8.0](changes#njs0.8.0))\n\n`ngx.version_number`  \na number containing nginx version, for example: `1025000` ([0.8.0](changes#njs0.8.0))\n\n`ngx.worker_id`  \na number that corresponds to nginx internal worker id, the value is between `0` and the value specified in the [worker_processes](../ngx_core_module#worker_processes) directive ([0.8.0](changes#njs0.8.0))\n\n#### ngx.shared\n\nThe `ngx.shared` global object is available since [0.8.0](changes#njs0.8.0).\n\n#### SharedDict\n\n|                                                        |\n|--------------------------------------------------------|\n| [`ngx.shared.SharedDict.add()`](#dict_add)             |\n| [`ngx.shared.SharedDict.capacity`](#dict_capacity)     |\n| [`ngx.shared.SharedDict.clear()`](#dict_clear)         |\n| [`ngx.shared.SharedDict.delete()`](#dict_delete)       |\n| [`ngx.shared.SharedDict.freeSpace()`](#dict_freespace) |\n| [`ngx.shared.SharedDict.get()`](#dict_get)             |\n| [`ngx.shared.SharedDict.has()`](#dict_has)             |\n| [`ngx.shared.SharedDict.incr()`](#dict_incr)           |\n| [`ngx.shared.SharedDict.items()`](#dict_items)         |\n| [`ngx.shared.SharedDict.keys()`](#dict_keys)           |\n| [`ngx.shared.SharedDict.name`](#dict_name)             |\n| [`ngx.shared.SharedDict.pop()`](#dict_pop)             |\n| [`ngx.shared.SharedDict.replace()`](#dict_replace)     |\n| [`ngx.shared.SharedDict.set()`](#dict_set)             |\n| [`ngx.shared.SharedDict.size()`](#dict_size)           |\n| [`ngx.shared.SharedDict.type`](#dict_type)             |\n\nThe shared dictionary object is available since [0.8.0](changes#njs0.8.0). The shared dictionary name, type, and size are set with the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).\n\nA `SharedDict()` object has the following properties and methods:\n\n`ngx.shared.SharedDict.add(`*`key`*`, `*`value`*` [,`*`timeout`*`])`  \nSets the `value` for the specified `key` in the dictionary only if the key does not exist yet. The `key` is a string representing the key of the item to add, the `value` is the value of the item to add.\n\nThe optional `timeout` argument is specified in milliseconds and overrides the `timeout` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) (since [0.8.5](changes#njs0.8.5)). It can be useful when some keys are expected to have unique timeouts.\n\nReturns `true` if the value has been successfully added to the `SharedDict` dictionary, `false` if the key already exists in the dictionary. Throws `SharedMemoryError` if there is not enough free space in the `SharedDict` dictionary. Throws `TypeError` if the `value` is of a different type than expected by this dictionary.\n\n`ngx.shared.SharedDict.capacity`  \nReturns the capacity of the `SharedDict` dictionary, corresponds to the `size` parameter of `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).\n\n`ngx.shared.SharedDict.clear()`  \nRemoves all items from the `SharedDict` dictionary.\n\n`ngx.shared.SharedDict.delete(`*`key`*`)`  \nRemoves the item associated with the specified key from the `SharedDict` dictionary, `true` if the item in the dictionary existed and was removed, `false` otherwise.\n\n`ngx.shared.SharedDict.freeSpace()`  \nReturns the free page size in bytes. If the size is zero, the `SharedDict` dictionary will still accept new values if there is space in the occupied pages.\n\n`ngx.shared.SharedDict.get(`*`key`*`)`  \nRetrieves the item by its `key`, returns the value associated with the `key` or `undefined` if there is none.\n\n`ngx.shared.SharedDict.has(`*`key`*`)`  \nSearches for an item by its `key`, returns `true` if such item exists or `false` otherwise.\n\n`ngx.shared.SharedDict.incr(`*`key`*`,`*`delta`*`[[,`*`init`*`], `*`timeout`*`]))`  \nIncrements the integer value associated with the `key` by `delta`. The `key` is a string, the `delta` is the number to increment or decrement the value by. If the key does not exist, the item will be initialized to an optional `init` argument, by default is `0`.\n\nThe optional `timeout` argument is specified in milliseconds and overrides the `timeout` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) (since [0.8.5](changes#njs0.8.5)). It can be useful when some keys are expected to have unique timeouts.\n\nReturns the new value. Throws `SharedMemoryError` if there is not enough free space in the `SharedDict` dictionary. Throws `TypeError` if this dictionary does not expect numbers.\n\nThis method can be used only if the dictionary type was declared with `type=number` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).\n\n`ngx.shared.SharedDict.items([`*`maxCount`*`])`  \nReturns an array of the `SharedDict` dictionary key-value items (since [0.8.1](changes#njs0.8.1)). The `maxCount` parameter sets maximum number of items to retrieve, by default is `1024`.\n\n`ngx.shared.SharedDict.keys([`*`maxCount`*`])`  \nReturns an array of the `SharedDict` dictionary keys. The `maxCount` parameter sets maximum number of keys to retrieve, by default is `1024`.\n\n`ngx.shared.SharedDict.name`  \nReturns the name of the `SharedDict` dictionary, corresponds to the `zone=` parameter of `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).\n\n`ngx.shared.SharedDict.pop(`*`key`*`)`  \nRemoves the item associated with the specified `key` from the `SharedDict` dictionary, returns the value associated with the `key` or `undefined` if there is none.\n\n`ngx.shared.SharedDict.replace(`*`key`*`, `*`value`*`)`  \nReplaces the `value` for the specified `key` only if the key already exists, returns `true` if the value was successfully replaced, `false` if the key does not exist in the `SharedDict` dictionary. Throws `SharedMemoryError` if there is not enough free space in the `SharedDict` dictionary. Throws `TypeError` if the `value` is of a different type than expected by this dictionary.\n\n`ngx.shared.SharedDict.set(`*`key`*`, `*`value`*` [,`*`timeout`*`])`  \nSets the `value` for the specified `key`, returns this `SharedDict` dictionary (for method chaining).\n\nThe optional `timeout` argument is specified in milliseconds and overrides the `timeout` parameter of the `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone) (since [0.8.5](changes#njs0.8.5)). It can be useful when some keys are expected to have unique timeouts.\n\n`ngx.shared.SharedDict.size()`  \nReturns the number of items for the `SharedDict` dictionary.\n\n`ngx.shared.SharedDict.type`  \nReturns `string` or `number` that corresponds to the `SharedDict` dictionary type set by the `type=` parameter of `js_shared_dict_zone` directive in [http](../http/ngx_http_js_module#js_shared_dict_zone) or [stream](../stream/ngx_stream_js_module#js_shared_dict_zone).\n\n#### built-in objects\n\n#### console\n\n|                                          |\n|------------------------------------------|\n| [`console.error()`](#console_error)      |\n| [`console.info()`](#console_info)        |\n| [`console.log()`](#console_log)          |\n| [`console.time()`](#console_time)        |\n| [`console.timeEnd()`](#console_time_end) |\n| [`console.warn()`](#console_warn)        |\n\nThe `console` object is available in nginx since [0.8.2](changes#njs0.8.2), in CLI since [0.2.6](changes#njs0.2.6).\n\n`console.error(`*`msg`*`[, `*`msg2`*` ...])`  \nOutputs one or more error messages. The message may be a string or an object.\n\n`console.info(`*`msg`*`[, `*`msg2`*` ...])`  \nOutputs one or more info messages. The message may be a string or an object.\n\n`console.log(`*`msg`*`[, `*`msg2`*` ...])`  \nOutputs one or more log messages. The message may be a string or an object.\n\n`console.time(`*`label`*`)`  \nStarts a timer that can track how long an operation takes. The `label` parameter allows naming different timers. If [`console.timeEnd()`](#console_time_end) with the same name is called, the time that elapsed since the timer was started will be output, in milliseconds.\n\n`console.timeEnd(`*`label`*`)`  \nStops a timer previously started by [`console.time()`](#console_time) The `label` parameter allows naming different timers.\n\n`console.warn(`*`msg`*`[, `*`msg2`*` ...])`  \nOutputs one or more warning messages. The message may be a string or an object.\n\n#### crypto\n\n|                                                              |\n|--------------------------------------------------------------|\n| [`сrypto.getRandomValues()`](#crypto_get_random_values)      |\n| [`сrypto.subtle.encrypt()`](#crypto_subtle_encrypt)          |\n| [`сrypto.subtle.decrypt()`](#crypto_subtle_decrypt)          |\n| [`сrypto.subtle.deriveBits()`](#crypto_subtle_derive_bits)   |\n| [`сrypto.subtle.deriveKey()`](#crypto_subtle_derive_key)     |\n| [`сrypto.subtle.digest()`](#crypto_subtle_digest)            |\n| [`сrypto.subtle.exportKey()`](#crypto_subtle_export_key)     |\n| [`сrypto.subtle.generateKey()`](#crypto_subtle_generate_key) |\n| [`сrypto.subtle.importKey()`](#crypto_subtle_import_key)     |\n| [`сrypto.subtle.sign()`](#crypto_subtle_sign)                |\n| [`сrypto.subtle.verify()`](#crypto_subtle_verify)            |\n\nThe `crypto` object is a global object that allows using cryptographic functionality (since [0.7.0](changes#njs0.7.0)).\n\n`сrypto.getRandomValues`([`typedArray`](#crypto_get_random_values_array))  \nGets cryptographically strong random values. Returns the same array passed as `typedArray` but with its contents replaced with the newly generated random numbers. Possible values:\n\n`typedArray`  \ncan be `Int8Array`, `Int16Array`, `Uint16Array`, `Int32Array`, or `Uint32Array`\n\n`сrypto.subtle.encrypt`([`algorithm`](#crypto_encrypt_alg), [`key`](#crypto_encrypt_key), [`data`](#crypto_encrypt_data))  \nEncrypts [`data`](#crypto_encrypt_data) using the provided [`algorithm`](#crypto_encrypt_algorithm) and [`key`](#crypto_encrypt_key). Returns a `Promise` that fulfills with an `ArrayBuffer` containing the ciphertext. Possible values:\n\n`algorithm`  \nan object that specifies the algorithm to be used and any extra parameters if required:\n\n- for `RSA-OAEP`, pass the object with the following keys:\n  - `name` is a string, should be set to `RSA-OAEP`:\n\n    ``` nginx\n    crypto.subtle.encrypt({name: \"RSA-OAEP\"}, key, data)\n    ```\n- for `AES-CTR`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-CTR`\n  - `counter` is an `ArrayBuffer`, `TypedArray`, or `DataView` — the initial value of the counter block, must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter\n  - `length` is the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap.\n- for `AES-CBC`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-CBC`\n  - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret, for example, it may be transmitted unencrypted along with the ciphertext.\n- for `AES-GCM`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-GCM`\n  - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, and must be unique for every encryption operation carried out with a given key\n  - `additionalData` (optional) is an `ArrayBuffer`, `TypedArray`, or `DataView` that contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If `additionalData` is specified, then the same data must be specified in the corresponding call to `decrypt()`: if the data given to the `decrypt()` call does not match the original data, the decryption will throw an exception. The bit length of `additionalData` must be smaller than `2^64 - 1`.\n  - `tagLength` (optional, default is `128`) - a `number` that determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption Possible values: `32`, `64`, `96`, `104`, `112`, `120`, or `128`. The AES-GCM specification recommends that it should be `96`, `104`, `112`, `120`, or `128`, although `32` or `64` bits may be acceptable in some applications.\n\n`key`  \na [`CryptoKey`](#cryptokey) that contains the key to be used for encryption\n\n`data`  \nan `ArrayBuffer`, `TypedArray`, or `DataView` that contains the data to be encrypted (also known as the plaintext)\n\n`сrypto.subtle.decrypt`([`algorithm`](#crypto_decrypt_alg), [`key`](#crypto_decrypt_key), [`data`](#crypto_decrypt_data))  \nDecrypts encrypted data. Returns a `Promise` with the decrypted data. Possible values:\n\n`algorithm`  \nan object that specifies the algorithm to be used, and any extra parameters as required. The values given for the extra parameters must match those passed into the corresponding `encrypt()` call.\n\n- for `RSA-OAEP`, pass the object with the following keys:\n  - `name` is a string, should be set to `RSA-OAEP`:\n\n    ``` nginx\n    crypto.subtle.encrypt({name: \"RSA-OAEP\"}, key, data)\n    ```\n- for `AES-CTR`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-CTR`\n  - `counter` is an `ArrayBuffer`, `TypedArray`, or `DataView` — the initial value of the counter block, must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter.\n  - `length` is the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap.\n- for `AES-CBC`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-CBC`\n  - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret (for example, it may be transmitted unencrypted along with the ciphertext).\n- for `AES-GCM`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-GCM`\n  - `iv` or the initialization vector, is an `ArrayBuffer`, `TypedArray`, or `DataView`, must be 16 bytes, and must be unique for every encryption operation carried out with a given key\n  - `additionalData` (optional) is an `ArrayBuffer`, `TypedArray`, or `DataView` that contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If `additionalData` is specified, then the same data must be specified in the corresponding call to `decrypt()`: if the data given to the `decrypt()` call does not match the original data, the decryption will throw an exception. The bit length of `additionalData` must be smaller than `2^64 - 1`.\n  - `tagLength` (optional, default is `128`) - a `number` that determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption. Possible values: `32`, `64`, `96`, `104`, `112`, `120`, or `128`. The AES-GCM specification recommends that it should be `96`, `104`, `112`, `120`, or `128`, although `32` or `64` bits may be acceptable in some applications.\n\n`key`  \na [`CryptoKey`](#cryptokey) that contains the key to be used for decryption. If `RSA-OAEP` is used, this is the `privateKey` property of the [`CryptoKeyPair`](#cryptokeypair) object.\n\n`data`  \nan `ArrayBuffer`, `TypedArray`, or `DataView` that contains the data to be decrypted (also known as ciphertext)\n\n`сrypto.subtle.deriveBits`([`algorithm`](#crypto_derive_bits_alg), [`baseKey`](#crypto_derive_bits_basekey), [`length`](#crypto_derive_bits_length))  \nDerives an array of bits from a base key. Returns a `Promise` which will be fulfilled with an `ArrayBuffer` that contains the derived bits. Possible values:\n\n`algorithm`  \nis an object that defines the derivation algorithm to use:\n\n- for `HKDF`, pass the object with the following keys:\n  - `name` is a string, should be set to `HKDF`\n  - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`\n  - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value with the same length as the output of the `digest` function. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.\n  - `info` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents application-specific contextual information used to bind the derived key to an application or context, and enables deriving different keys for different contexts while using the same input key material. This property is required but may be an empty buffer.\n- for `PBKDF2`, pass the object with the following keys:\n  - `name` is a string, should be set to `PBKDF2`\n  - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`\n  - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value of at least `16` bytes. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.\n  - `iterations` is a `number` that represents the number of times the hash function will be executed in `deriveKey()`\n\n`baseKey`  \nis a [`CryptoKey`](#cryptokey) that represents the input to the derivation algorithm - the initial key material for the derivation function: for example, for `PBKDF2` it might be a password, imported as a [`CryptoKey`](#cryptokey) using [`сrypto.subtle.importKey()`](#crypto_subtle_import_key)\n\n`length`  \nis a number representing the number of bits to derive. For browsers compatibility, the number should be a multiple of `8`\n\n`сrypto.subtle.deriveKey`([`algorithm`](#crypto_derive_key_alg), [`baseKey`](#crypto_derive_key_basekey), [`derivedKeyAlgorithm`](#crypto_derive_key_derivedkeyalg), [`extractable`](#crypto_derive_key_extractable), [`keyUsages`](#crypto_derive_key_keyusages))  \nDerives a secret key from a master key. Possible values:\n\n`algorithm`  \nis an object that defines the derivation algorithm to use:\n\n- for `HKDF`, pass the object with the following keys:\n  - `name` is a string, should be set to `HKDF`\n  - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`\n  - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value with the same length as the output of the `digest` function. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.\n  - `info` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents application-specific contextual information used to bind the derived key to an application or context, and enables deriving different keys for different contexts while using the same input key material. This property is required but may be an empty buffer.\n- for `PBKDF2`, pass the object with the following keys:\n  - `name` is a string, should be set to `PBKDF2`\n  - `hash` is a string with the digest algorithm to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`\n  - `salt` is an `ArrayBuffer`, `TypedArray`, or `DataView` that represents random or pseudo-random value of at least `16` bytes. Unlike the input key material passed into `deriveKey()`, salt does not need to be kept secret.\n  - `iterations` is a `number` that represents the number of times the hash function will be executed in `deriveKey()`\n\n`baseKey`  \nis a [`CryptoKey`](#cryptokey) that represents the input to the derivation algorithm - the initial key material for the derivation function: for example, for `PBKDF2` it might be a password, imported as a [`CryptoKey`](#cryptokey) using [`сrypto.subtle.importKey()`](#crypto_subtle_import_key).\n\n`derivedKeyAlgorithm`  \nis an object that defines the algorithm the derived key will be used for:\n\n- for `HMAC`, pass the object with the following keys:\n  - `name` is a string, should be set to `HMAC`\n  - `hash` is a string with the name of the digest function to use: `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`\n  - `length` (optional) is a `number` that represents the length in bits of the key. If not specified, the length of the key is equal to the block size of the chozen hash function\n- for `AES-CTR`, `AES-CBC`, or `AES-GCM`, pass the object with the following keys:\n  - `name` is a string, should be set to `AES-CTR`, `AES-CBC`, or `AES-GCM`, depending on the algorithm used\n  - `length` is a `number` that represents the length in bits of the key to generate: `128`, `192`, or `256`\n\n`extractable`  \nis a boolean value that indicates whether it will be possible to export the key\n\n`keyUsages`  \nis an `Array` that indicates what can be done with the derived key. The key usages must be allowed by the algorithm set in `derivedKeyAlgorithm`. Possible values:\n\n`encrypt`  \nkey for encrypting messages\n\n`decrypt`  \nkey for decrypting messages\n\n`sign`  \nkey for signing messages\n\n`verify`  \nkey for verifying signatures\n\n`deriveKey`  \nkey for deriving a new key\n\n`deriveBits`  \nkey for deriving bits\n\n`wrapKey`  \nkey for wrapping a key\n\n`unwrapKey`  \nkey for unwrapping a key\n\n`сrypto.subtle.digest`([`algorithm`](#crypto_digest_alg), [`data`](#crypto_digest_data))  \nGenerates a digest of the given data. Takes as its arguments an identifier for the digest algorithm to use and the data to digest. Returns a `Promise` which will be fulfilled with the digest. Possible values:\n\n`algorithm`  \nis a string that defines the hash function to use: `SHA-1` (not for cryptographic applications), `SHA-256`, `SHA-384`, or `SHA-512`\n\n`data`  \nis an `ArrayBuffer`, `TypedArray`, or `DataView` that contains the data to be digested\n\n`сrypto.subtle.exportKey`([`format`](#crypto_export_key_format), [`key`](#crypto_export_key_keydata))  \nExports a key: takes a key as a [`CryptoKey`](#cryptokey) object and returns the key in an external, portable format (since [0.7.10](changes#njs0.7.10)). If the `format` was `jwk`, then the `Promise` fulfills with a JSON object containing the key. Otherwise, the promise fulfills with an `ArrayBuffer` containing the key. Possible values:\n\n`format`  \na string that describes the data format in which the key should be exported, can be the following:\n\n`raw`  \nthe raw data format\n\n`pkcs8`  \nthe [PKCS \\#8](https://datatracker.ietf.org/doc/html/rfc5208) format\n\n`spki`  \nthe [SubjectPublicKeyInfo](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1) format\n\n`jwk`  \nthe [JSON Web Key](https://datatracker.ietf.org/doc/html/rfc7517) (JWK) format (since [0.7.10](changes#njs0.7.10))\n\n`key`  \nthe [`CryptoKey`](#cryptokey) that contains the key to be exported\n\n`сrypto.subtle.generateKey`([`algorithm`](#crypto_generate_key_alg), [`extractable`](#crypto_generate_key_extractable), [`usage`](#crypto_generate_key_usage))  \nGenerates a new key for symmetric algorithms or key pair for public-key algorithms (since [0.7.10](changes#njs0.7.10)). Returns a `Promise` that fulfills with the generated key as a [`CryptoKey`](#cryptokey) or [`CryptoKeyPair`](#cryptokeypair) object. Possible values:\n\n`algorithm`  \na dictionary object that defines the type of key to generate and provides extra algorithm-specific parameters:\n\n- for `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, pass the object with the following keys:\n  - `name` is a string, should be set to `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, depending on the used algorithm\n  - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-256`, `SHA-384`, or `SHA-512`\n- for `ECDSA`, pass the object with the following keys:\n  - `name` is a string, should be set to `ECDSA`\n  - `namedCurve` is a string that represents the name of the elliptic curve to use, may be `P-256`, `P-384`, or `P-521`\n- for `HMAC`, pass the object with the following keys:\n  - `name` is a string, should be set to `HMAC`\n  - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-256`, `SHA-384`, or `SHA-512`\n  - `length` (optional) is a number that represents the length in bits of the key. If omitted, the length of the key is equal to the length of the digest generated by the chosen digest function.\n- for `AES-CTR`, `AES-CBC`, or `AES-GCM`, pass the string identifying the algorithm or an object of the form `{ \"name\": \"ALGORITHM\" }`, where `ALGORITHM` is the name of the algorithm\n\n`extractable`  \nboolean value that indicates if it is possible to export the key\n\n`usage`  \nan `array` that indicates possible actions with the key:\n\n`encrypt`  \nkey for encrypting messages\n\n`decrypt`  \nkey for decrypting messages\n\n`sign`  \nkey for signing messages\n\n`verify`  \nkey for verifying signatures\n\n`deriveKey`  \nkey for deriving a new key\n\n`deriveBits`  \nkey for deriving bits\n\n`wrapKey`  \nkey for wrapping a key\n\n`unwrapKey`  \nkey for unwrapping a key\n\n`сrypto.subtle.importKey`([`format`](#crypto_import_key_format), [`keyData`](#crypto_import_key_keydata), [`algorithm`](#crypto_import_key_alg), [`extractable`](#crypto_import_key_extractable), [`keyUsages`](#crypto_import_key_keyusages))  \nImports a key: takes as input a key in an external, portable format and gives a [`CryptoKey`](#cryptokey) object. Returns a `Promise` that fulfills with the imported key as a [`CryptoKey`](#cryptokey) object. Possible values:\n\n`format`  \na string that describes the data format of the key to import, can be the following:\n\n`raw`  \nthe raw data format\n\n`pkcs8`  \nthe [PKCS \\#8](https://datatracker.ietf.org/doc/html/rfc5208) format\n\n`spki`  \nthe [SubjectPublicKeyInfo](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1) format\n\n`jwk`  \nthe [JSON Web Key](https://datatracker.ietf.org/doc/html/rfc7517) (JWK) format (since [0.7.10](changes#njs0.7.10))\n\n`keyData`  \nthe `ArrayBuffer`, `TypedArray`, or `DataView` object that contains the key in the given format\n\n`algorithm`  \na dictionary object that defines the type of key to import and provides extra algorithm-specific parameters:\n\n- for `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, pass the object with the following keys:\n  - `name` is a string, should be set to `RSASSA-PKCS1-v1_5`, `RSA-PSS`, or `RSA-OAEP`, depending on the used algorithm\n  - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-1`, `SHA-256`, `SHA-384`, or `SHA-512`\n- for `ECDSA`, pass the object with the following keys:\n  - `name` is a string, should be set to `ECDSA`\n  - `namedCurve` is a string that represents the name of the elliptic curve to use, may be `P-256`, `P-384`, or `P-521`\n- for `HMAC`, pass the object with the following keys:\n  - `name` is a string, should be set to `HMAC`\n  - `hash` is a string that represents the name of the `digest` function to use, can be `SHA-256`, `SHA-384`, or `SHA-512`\n  - `length` (optional) is a number that represents the length in bits of the key. If omitted, the length of the key is equal to the length of the digest generated by the chosen digest function.\n- for `AES-CTR`, `AES-CBC`, or `AES-GCM`, pass the string identifying the algorithm or an object of the form `{ \"name\": \"ALGORITHM\" }`, where `ALGORITHM` is the name of the algorithm\n- for `PBKDF2`, pass the `PBKDF2` string\n- for `HKDF`, pass the `HKDF` string\n\n`extractable`  \nboolean value that indicates if it is possible to export the key\n\n`keyUsages`  \nan `array` that indicates possible actions with the key:\n\n`encrypt`  \nkey for encrypting messages\n\n`decrypt`  \nkey for decrypting messages\n\n`sign`  \nkey for signing messages\n\n`verify`  \nkey for verifying signatures\n\n`deriveKey`  \nkey for deriving a new key\n\n`deriveBits`  \nkey for deriving bits\n\n`wrapKey`  \nkey for wrapping a key\n\n`unwrapKey`  \nkey for unwrapping a key\n\n`сrypto.subtle.sign`([`algorithm`](#crypto_sign_alg), [`key`](#crypto_sign_key), [`data`](#crypto_sign_data))  \nReturns `signature` as a `Promise` that fulfills with an `ArrayBuffer` containing the signature. Possible values:\n\n`algorithm`  \nis a string or object that specifies the signature algorithm to use and its parameters:\n\n- for `RSASSA-PKCS1-v1_5`, pass the string identifying the algorithm or an object of the form `{ \"name\": \"ALGORITHM\" }`\n- for `RSA-PSS`, pass the object with the following keys:\n  - `name` is a string, should be set to `RSA-PSS`\n  - `saltLength` is a long `integer` that represents the length of the random salt to use, in bytes\n- for `ECDSA`, pass the object with the following keys:\n  - `name` is a string, should be set to `ECDSA`\n  - `hash` is an identifier for the digest algorithm to use, can be `SHA-256`, `SHA-384`, or `SHA-512`\n- for `HMAC`, pass the string identifying the algorithm or an object of the form `{ \"name\": \"ALGORITHM\" }`\n\n`key`  \nis a [`CryptoKey`](#cryptokey) object that the key to be used for signing. If algorithm identifies a public-key cryptosystem, this is the private key.\n\n`data`  \nis an `ArrayBuffer`, `TypedArray`, or `DataView` object that contains the data to be signed\n\n`сrypto.subtle.verify`([`algorithm`](#crypto_verify_alg), [`key`](#crypto_verify_key), [`signature`](#crypto_verify_signature), [`data`](#crypto_verify_data))  \nVerifies a digital signature, returns a `Promise` that fulfills with a boolean value: `true` if the signature is valid, otherwise `false`. Possible values:\n\n`algorithm`  \nis a string or object that specifies the algorithm to use and its parameters:\n\n- for `RSASSA-PKCS1-v1_5`, pass the string identifying the algorithm or an object of the form `{ \"name\": \"ALGORITHM\" }`\n- for `RSA-PSS`, pass the object with the following keys:\n  - `name` is a string, should be set to `RSA-PSS`\n  - `saltLength` is a long `integer` that represents the length of the random salt to use, in bytes\n- for `ECDSA`, pass the object with the following keys:\n  - `name` is a string, should be set to `ECDSA`\n  - `hash` is an identifier for the digest algorithm to use, can be `SHA-256`, `SHA-384`, or `SHA-512`\n- for `HMAC`, pass the string identifying the algorithm or an object of the form `{ \"name\": \"ALGORITHM\" }`\n\n`key`  \nis a [`CryptoKey`](#cryptokey) object that the key to be used for verifying. It is the secret key for a symmetric algorithm and the public key for a public-key system.\n\n`signature`  \nis an `ArrayBuffer`, `TypedArray`, or `DataView` that contains the signature to verify\n\n`data`  \nis an `ArrayBuffer`, `TypedArray`, or `DataView` object that contains the data whose signature is to be verified\n\n#### CryptoKey\n\n|                                                   |\n|---------------------------------------------------|\n| [`CryptoKey.algorithm`](#cryptokey_alg)           |\n| [`CryptoKey.extractable`](#cryptokey_extractable) |\n| [`CryptoKey.type`](#cryptokey_type)               |\n| [`CryptoKey.usages`](#cryptokey_usages)           |\n\nThe `CryptoKey` object represents a cryptographic `key` obtained from one of the `SubtleCrypto` methods: [`сrypto.subtle.generateKey()`](#crypto_subtle_generate_key), [`сrypto.subtle.deriveKey()`](#crypto_subtle_derive_key), [`сrypto.subtle.importKey()`](#crypto_subtle_import_key).\n\n`CryptoKey.algorithm`  \nreturns an object describing the algorithm for which this key can be used and any associated extra parameters (since [0.8.0](changes#njs0.8.0)), read-only\n\n`CryptoKey.extractable`  \na boolean value, `true` if the key can be exported (since [0.8.0](changes#njs0.8.0)), read-only\n\n`CryptoKey.type`  \na string value that indicates which kind of key is represented by the object, read-only. Possible values:\n\n`secret`  \nThis key is a secret key for use with a symmetric algorithm.\n\n`private`  \nThis key is the private half of an asymmetric algorithm's [`CryptoKeyPair`](#cryptokeypair)\n\n`public`  \nThis key is the public half of an asymmetric algorithm's [`CryptoKeyPair`](#cryptokeypair).\n\n`CryptoKey.usages`  \nAn array of strings indicating what this key can be used for (since [0.8.0](changes#njs0.8.0)), read-only. Possible array values:\n\n`encrypt`  \nkey for encrypting messages\n\n`decrypt`  \nkey for decrypting messages\n\n`sign`  \nkey for signing messages\n\n`verify`  \nkey for verifying signatures\n\n`deriveKey`  \nkey for deriving a new key\n\n`deriveBits`  \nkey for deriving bits\n\n#### CryptoKeyPair\n\n|                                                         |\n|---------------------------------------------------------|\n| [`CryptoKeyPair.privateKey`](#cryptokeypair_privatekey) |\n| [`CryptoKeyPair.publicKey`](#cryptokeypair_publickey)   |\n\nThe `CryptoKeyPair` is a dictionary object of the [WebCrypto API](#builtin_crypto) that represents an asymmetric key pair.\n\n`CryptoKeyPair.privateKey`  \nA [`CryptoKey`](#cryptokey) object representing the private key.\n\n`CryptoKeyPair.publicKey`  \nA [`CryptoKey`](#cryptokey) object representing the public key.\n\n#### njs\n\n|                                             |\n|---------------------------------------------|\n| [`njs.version`](#njs_version)               |\n| [`njs.version_number`](#njs_version_number) |\n| [`njs.dump()`](#njs_dump)                   |\n| [`njs.memoryStats`](#njs_memory_stats)      |\n| [`njs.on()`](#njs_on)                       |\n\nThe `njs` object is a global object that represents the current VM instance (since [0.2.0](changes#njs0.2.0)).\n\n`njs.version`  \nReturns a string with the current version of njs (for example, “0.7.4”).\n\n`njs.version_number`  \nReturns a number with the current version of njs. For example, “0.7.4” is returned as `0x000704` (since [0.7.4](changes#njs0.7.4)).\n\n`njs.dump(`*`value`*`)`  \nReturns the pretty-print string representation for a value.\n\n`njs.memoryStats`  \nObject containing memory statistics for current VM instance (since [0.7.8](changes#njs0.7.8)).\n\n`size`  \namount of memory in bytes njs memory pool claimed from the operating system.\n\n`njs.on(`*`event`*`, `*`callback`*`)`  \nRegisters a callback for the specified VM event (since [0.5.2](changes#njs0.5.2)). An event may be one of the following strings:\n\n`exit`  \nis called before the VM is destroyed. The callback is called without arguments.\n\n#### process\n\n|                                 |\n|---------------------------------|\n| [`process.argv`](#process_argv) |\n| [`process.env`](#process_env)   |\n| [`process.pid`](#process_pid)   |\n| [`process.ppid`](#process_ppid) |\n\nThe `process` object is a global object that provides information about the current process ([0.3.3](changes#njs0.3.3)).\n\n`process.argv`  \nReturns an array that contains the command line arguments passed when the current process was launched.\n\n`process.env`  \nReturns an object containing the user environment.\n\nBy default, nginx removes all environment variables inherited from its parent process except the TZ variable. Use the [env](../ngx_core_module#env) directive to preserve some of the inherited variables.\n\n`process.pid`  \nReturns the PID of the current process.\n\n`process.ppid`  \nReturns the PID of the current parent process.\n\n#### String\n\nBy default all strings in njs are Unicode strings. They correspond to ECMAScript strings that contain Unicode characters. Before [0.8.0](changes#njs0.8.0), byte strings were also supported.\n\n#### Byte strings\n\nSince [0.8.0](changes#njs0.8.0), the support for byte strings and byte string methods were removed. When working with byte sequence, the [Buffer](#buffer) object and `Buffer` properties, such as [`r.requestBuffer`](#r_request_buffer), [`r.rawVariables`](#r_raw_variables), should be used.\n\nByte strings contain a sequence of bytes and are used to serialize Unicode strings to external data and deserialize from external sources. For example, the [toUTF8()](#string_toutf8) method serializes a Unicode string to a byte string using UTF-8 encoding:\n\n``` nginx\n>> '£'.toUTF8().toString('hex')\n'c2a3'  /* C2 A3 is the UTF-8 representation of 00A3 ('£') code point */\n```\n\nThe [toBytes()](#string_tobytes) method serializes a Unicode string with code points up to 255 into a byte string, otherwise, `null` is returned:\n\n``` nginx\n>> '£'.toBytes().toString('hex')\n'a3'  /* a3 is a byte equal to 00A3 ('£') code point  */\n```\n\n`String.bytesFrom(`*`array`*` | `*`string`*`, `*`encoding`*`)`  \nThe method was made obsolete in [0.4.4](changes#njs0.4.4) and was removed in [0.8.0](changes#njs0.8.0). The `Buffer.from` method should be used instead:\n\n``` nginx\n>> Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]).toString()\n'buffer'\n\n>> Buffer.from('YnVmZmVy', 'base64').toString()\n'buffer'\n```\n\nBefore [0.4.4](changes#njs0.4.4), created a byte string either from an array that contained octets, or from an encoded string ([0.2.3](changes#njs0.2.3)), the encoding could be `hex`, `base64`, and `base64url`.\n\n`String.prototype.fromBytes(`*`start`*`[, `*`end`*`])`  \nthe property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). Before [0.7.7](changes#njs0.7.7), returned a new Unicode string from a byte string where each byte was replaced with a corresponding Unicode code point.\n\n`String.prototype.fromUTF8(`*`start`*`[, `*`end`*`])`  \nthe property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). The [`TextDecoder`](#textedeoder) method should be used instead. Before [0.7.7](changes#njs0.7.7), converted a byte string containing a valid UTF-8 string into a Unicode string, otherwise `null` was returned.\n\n`String.prototype.toBytes(`*`start`*`[, `*`end`*`])`  \nthe property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). Before [0.7.7](changes#njs0.7.7), serialized a Unicode string to a byte string, returned `null` if a character larger than 255 was found in the string.\n\n`String.prototype.toString(`*`encoding`*`)`  \nthe property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). Before [0.7.7](changes#njs0.7.7), encoded a string to `hex`, `base64`, or `base64url`:\n\n``` nginx\n>>  'αβγδ'.toString('base64url')\n'zrHOss6zzrQ'\n```\n\nBefore version [0.4.3](changes#njs0.4.3), only a [byte string](#string_tobytes) could be encoded:\n\n``` nginx\n>>  'αβγδ'.toUTF8().toString('base64url')\n'zrHOss6zzrQ'\n```\n\n`String.prototype.toUTF8(`*`start`*`[, `*`end`*`])`  \nthe property was made obsolete in [0.7.7](changes#njs0.7.7) and was removed in [0.8.0](changes#njs0.8.0). The [`TextEncoder`](#textencoder) method should be used instead. Before [0.7.7](changes#njs0.7.7), serialized a Unicode string to a byte string using UTF-8 encoding:\n\n``` nginx\n>> 'αβγδ'.toUTF8().length\n8\n>> 'αβγδ'.length\n4\n```\n\n#### web API\n\n#### Text Decoder\n\n|                                                             |\n|-------------------------------------------------------------|\n| [`TextDecoder()`](#textdecoder_constructor)                 |\n| [`TextDecoder.prototype.encoding`](#textdecoder_encoding)   |\n| [`TextDecoder.prototype.fatal`](#textdecoder_fatal)         |\n| [`TextDecoder.prototype.ignoreBOM`](#textdecoder_ignorebom) |\n| [`TextDecoder.prototype.decode()`](#textdecoder_decode)     |\n\nThe `TextDecoder` produces a stream of code points from a stream of bytes ([0.4.3](changes#njs0.4.3)).\n\n`TextDecoder([[`*`encoding`*`], `*`options`*`])`  \nCreates a new `TextDecoder` object for specified `encoding`, currently, only UTF-8 is supported. The `options` is `TextDecoderOptions` dictionary with the property:\n\n`fatal`  \nboolean flag indicating if [`TextDecoder.decode()`](#textdecoder_decode) must throw the *`TypeError`* exception when a coding error is found, by default is `false`.\n\n`TextDecoder.prototype.encoding`  \nReturns a string with the name of the encoding used by [`TextDecoder()`](#textdecoder), read-only.\n\n`TextDecoder.prototype.fatal`  \nboolean flag, `true` if the error mode is fatal, read-only.\n\n`TextDecoder.prototype.ignoreBOM`  \nboolean flag, `true` if the byte order marker is ignored, read-only.\n\n`TextDecoder.prototype.decode(`*`buffer`*`, [`*`options`*`])`  \nReturns a string with the text decoded from the `buffer` by [`TextDecoder()`](#textdecoder). The buffer can be `ArrayBuffer`. The `options` is `TextDecodeOptions` dictionary with the property:\n\n`stream`  \nboolean flag indicating if additional data will follow in subsequent calls to `decode()`: `true` if processing the data in chunks, and `false` for the final chunk or if the data is not chunked. By default is `false`.\n\n``` nginx\n>> (new TextDecoder()).decode(new Uint8Array([206,177,206,178]))\nαβ\n```\n\n#### Text Encoder\n\n|                                                                 |\n|-----------------------------------------------------------------|\n| [`TextEncoder()`](#textencoder_constructor)                     |\n| [`TextEncoder.prototype.encode()`](#textencoder_encode)         |\n| [`TextEncoder.prototype.encodeInto()`](#textencoder_encodeinto) |\n\nThe `TextEncoder` object produces a byte stream with UTF-8 encoding from a stream of code points ([0.4.3](changes#njs0.4.3)).\n\n`TextEncoder()`  \nReturns a newly constructed `TextEncoder` that will generate a byte stream with UTF-8 encoding.\n\n`TextEncoder.prototype.encode(`*`string`*`)`  \nEncodes `string` into a `Uint8Array` with UTF-8 encoded text.\n\n`TextEncoder.prototype.encodeInto(`*`string`*`, `*`uint8Array`*`)`  \nEncodes a `string` to UTF-8, puts the result into destination `Uint8Array`, and returns a dictionary object that shows the progress of the encoding. The dictionary object contains two members:\n\n`read`  \nthe number of UTF-16 units of code from the source `string` converted to UTF-8\n\n`written`  \nthe number of bytes modified in the destination `Uint8Array`\n\n#### timers\n\n|                                   |\n|-----------------------------------|\n| [`clearTimeout()`](#cleartimeout) |\n| [`setTimeout()`](#settimeout)     |\n\n`clearTimeout(`*`timeout`*`)`  \nCancels a `timeout` object created by [`setTimeout()`](#settimeout).\n\n`setTimeout(`*`function`*`, `*`milliseconds`*`[, `*`argument1`*`, `*`argumentN`*`])`  \nCalls a `function` after a specified number of `milliseconds`. One or more optional `arguments` can be passed to the specified function. Returns a `timeout` object.\n\n``` nginx\nfunction handler(v)\n{\n    // ...\n}\n\nt = setTimeout(handler, 12);\n\n// ...\n\nclearTimeout(t);\n```\n\n#### Global functions\n\n|                   |\n|-------------------|\n| [`atob()`](#atob) |\n| [`btoa()`](#btoa) |\n\n`atob(`*`encodedData`*`)`  \nDecodes a string of data which has been encoded using `Base64` encoding. The `encodedData` parameter is a binary string that contains Base64-encoded data. Returns a string that contains decoded data from `encodedData`.\n\nThe similar [`btoa()`](#btoa) method can be used to encode and transmit data which may otherwise cause communication problems, then transmit it and use the `atob()` method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values `0` through `31`.\n\n``` nginx\nconst encodedData = btoa(\"text to encode\"); // encode a string\nconst decodedData = atob(encodedData); // decode the string\n```\n\n`btoa(`*`stringToEncode`*`)`  \nCreates a Base64-encoded ASCII string from a binary string. The `stringToEncode` parameter is a binary string to encode. Returns an ASCII string containing the Base64 representation of `stringToEncode`.\n\nThe method can be used to encode data which may otherwise cause communication problems, transmit it, then use the [`atob()`](#atob) method to decode the data again. For example, you can encode control characters such as ASCII values `0` through `31`.\n\n``` nginx\nconst encodedData = btoa(\"text to encode\"); // encode a string\nconst decodedData = atob(encodedData); // decode the string\n```\n\n#### built-in modules\n\n#### Buffer\n\n|                                                        |\n|--------------------------------------------------------|\n| [`Buffer.alloc()`](#buffer_alloc)                      |\n| [`Buffer.allocUnsafe()`](#buffer_alloc_unsafe)         |\n| [`Buffer.byteLength()`](#buffer_bytelength)            |\n| [`Buffer.compare()`](#buffer_compare)                  |\n| [`Buffer.concat()`](#buffer_concat)                    |\n| [`Buffer.from(array)`](#buffer_from_array)             |\n| [`Buffer.from(arrayBuffer)`](#buffer_from_arraybuffer) |\n| [`Buffer.from(buffer)`](#buffer_from_buffer)           |\n| [`Buffer.from(object)`](#buffer_from_object)           |\n| [`Buffer.from(string)`](#buffer_from_string)           |\n| [`Buffer.isBuffer()`](#buffer_is_buffer)               |\n| [`Buffer.isEncoding()`](#buffer_is_encoding)           |\n| [`buffer[]`](#buf_index)                               |\n| [`buf.buffer`](#buf_buffer)                            |\n| [`buf.byteOffset`](#buf_byte_offset)                   |\n| [`buf.compare()`](#buf_compare)                        |\n| [`buf.copy()`](#buf_copy)                              |\n| [`buf.equals()`](#buf_equals)                          |\n| [`buf.fill()`](#buf_fill)                              |\n| [`buf.includes()`](#buf_includes)                      |\n| [`buf.indexOf()`](#buf_indexof)                        |\n| [`buf.lastIndexOf()`](#buf_lastindexof)                |\n| [`buf.length`](#buf_length)                            |\n| [`buf.readIntBE()`](#buf_readintbe)                    |\n| [`buf.readIntLE()`](#buf_readintle)                    |\n| [`buf.readUIntBE()`](#buf_readuintbe)                  |\n| [`buf.readUIntLE()`](#buf_readuintle)                  |\n| [`buf.readDoubleBE`](#buf_readdobulebe)                |\n| [`buf.readDoubleLE()`](#buf_readdobulele)              |\n| [`buf.readFloatBE()`](#buf_readfloatbe)                |\n| [`buf.readFloatLE()`](#buf_readfloatle)                |\n| [`buf.subarray()`](#buf_subarray)                      |\n| [`buf.slice()`](#buf_slice)                            |\n| [`buf.swap16()`](#buf_swap16)                          |\n| [`buf.swap32()`](#buf_swap32)                          |\n| [`buf.swap64()`](#buf_swap64)                          |\n| [`buf.toJSON()`](#buf_tojson)                          |\n| [`buf.toString()`](#buf_tostring)                      |\n| [`buf.write()`](#buf_write)                            |\n| [`buf.writeIntBE()`](#buf_writeintbe)                  |\n| [`buf.writeIntLE()`](#buf_writeintle)                  |\n| [`buf.writeUIntBE()`](#buf_writeuintbe)                |\n| [`buf.writeUIntLE()`](#buf_writeuintle)                |\n| [`buf.writeDoubleBE()`](#buf_writedoublebe)            |\n| [`buf.writeDoubleLE()`](#buf_writedoublele)            |\n| [`buf.writeFloatBE()`](#buf_writefloatbe)              |\n| [`buf.writeFloatLE()`](#buf_writefloatle)              |\n\n`Buffer.alloc(`*`size`*`[, `*`fill`*`[, `*`encoding`*`]]))`  \nAllocates a new Buffer of a specified *`size`*. If *`fill`* is not specified, the Buffer will be zero-filled. If *`fill`* is specified, the allocated Buffer will be initialized by calling [`buf.fill(fill)`](#buf_fill). If *`fill`* and *`encoding`* are specified, the allocated Buffer will be initialized by calling [`buf.fill(fill, encoding)`](#buf_fill).\n\nThe *`fill`* parameter may be a *`string`*, *`Buffer`*, *`Uint8Array`*, or *`integer`*.\n\n`Buffer.allocUnsafe(`*`size`*`)`  \nThe same as [`Buffer.alloc()`](#buffer_alloc), with the difference that the memory allocated for the buffer is not initialized, the contents of the new buffer is unknown and may contain sensitive data.\n\n`Buffer.byteLength(`*`value`*`[, `*`encoding`*`])`  \nReturns the byte length of a specified value, when encoded using *`encoding`*. The value can be a `string`, `Buffer`, `TypedArray`, `DataView`, or `ArrayBuffer`. If the value is a *`string`*, the `encoding` parameter is its encoding, can be *`utf8`*, *`hex`*, *`base64`*, *`base64url`*; by default is *`utf8`*.\n\n`Buffer.compare(`*`buffer1`*`, `*`buffer2`*`)`  \nCompares *`buffer1`* with *`buffer2`* when sorting arrays of Buffer instances. Returns `0` if *`buffer1`* is the same as *`buffer2`*, `1` if *`buffer2`* should come before *`buffer1`* when sorted, or `-1` if *`buffer2`* should come after *`buffer1`* when sorted.\n\n`Buffer.concat(`*`list`*`[, `*`totalLength`*`])`  \nReturns a new Buffer which is the result of concatenating all the Buffer instances in the list. If there are no items in the list or the total length is 0, a new zero-length Buffer is returned. If *`totalLength`* is not specified, it is calculated from the Buffer instances in list by adding their lengths. If *`totalLength`* is specified, it is coerced to an unsigned integer. If the combined length of the Buffers in list exceeds *`totalLength`*, the result is truncated to *`totalLength`*.\n\n`Buffer.from(`*`array`*`)`  \nAllocates a new Buffer using an array of bytes in the range `0` – `255`. Array entries outside that range will be truncated.\n\n`Buffer.from(`*`arrayBuffer`*`, `*`byteOffset`*`[, `*`length`*`]])`  \nCreates a view of the *`ArrayBuffer`* without copying the underlying memory. The optional *`byteOffset`* and *`length`* arguments specify a memory range within the *`arrayBuffer`* that will be shared by the Buffer.\n\n`Buffer.from(`*`buffer`*`)`  \nCopies the passed buffer data onto a new Buffer instance.\n\n`Buffer.from(`*`object`*`[, `*`offsetOrEncoding`*`[, `*`length`*`]])`  \nFor objects whose `valueOf()` function returns a value not strictly equal to object, returns `Buffer.from(object.valueOf()`, `offsetOrEncoding`, `length`).\n\n`Buffer.from(`*`string`*`[, `*`encoding`*`])`  \nCreates a new Buffer with a *`string`*. The *`encoding`* parameter identifies the character encoding to be used when converting a string into bytes. The encoding can be `utf8`, `hex`, `base64`, `base64url`; by default is `utf8`.\n\n`Buffer.isBuffer(`*`object`*`)`  \nA boolean value, returns `true` if *`object`* is a Buffer.\n\n`Buffer.isEncoding(`*`encoding`*`)`  \nA boolean value, returns `true` if encoding is the name of a supported character encoding.\n\n`buffer[`*`index`*`]`  \nThe index operator that can be used to get and set the octet at position `index` in `buffer`. The values refer to individual bytes, so the legal value range is between 0 and 255 (decimal).\n\n`buf.buffer`  \nThe underlying `ArrayBuffer` object based on which this Buffer object is created.\n\n`buf.byteOffset`  \nAn integer, specifying the `byteOffset` of the Buffers underlying `ArrayBuffer` object.\n\n`buf.compare(`*`target`*`[, `*`targetStart`*`[, `*`targetEnd`*`[, `*`sourceStart`*`[, `*`sourceEnd`*`]]]])`  \nCompares buffer with *`target`* and returns a number indicating whether buffer comes before, after, or is the same as *`target`* in sort order. Comparison is based on the actual sequence of bytes in each Buffer. The `targetStart` is an integer specifying the offset within *`target`* at which to begin comparison, by default is 0. The `targetEnd` is an integer specifying the offset within *`target`* at which to end comparison, by default is `target.length`. The `sourceStart` is an integer specifying the offset within buffer at which to begin comparison, by default is 0. The `sourceEnd` is an integer specifying the offset within buffer at which to end comparison (not inclusive), by default is `buf.length`.\n\n`buf.copy(`*`target`*`[, `*`targetStart`*`[, `*`sourceStart`*`[, `*`sourceEnd`*`]]])`  \nCopies data from a region of buffer to a region in *`target`*, even if the target memory region overlaps with buffer. The `target` parameter is a *`Buffer`* or *`Uint8Array`* to copy into.\n\nThe `targetStart` is an integer specifying the offset within target at which to begin writing, by default is 0. The `sourceStart` is an integer specifying the offset within buffer from which to begin copying, by default is 0. The `sourceEnd` is an integer specifying the offset within buffer at which to stop copying (not inclusive) by default is *`buf.length`*.\n\n`buf.equals(`*`otherBuffer`*`)`  \nA boolean value, returns `true` if both Buffer and *`otherBuffer`* have exactly the same bytes.\n\n`buf.fill(`*`value`*`[, `*`offset`*`[, `*`end`*`]][, `*`encoding`*`])`  \nFills the Buffer with the specified *`value`*. If the *`offset`* and *`end`* are not specified, the entire Buffer will be filled. The *`value`* is coerced to *`uint32`* if it is not a `string`, `Buffer`, or `integer`. If the resulting integer is greater than 255, the Buffer will be filled with *`value`* and 255.\n\n`buf.includes(`*`value`*`[, `*`byteOffset`*`][, `*`encoding`*`])`  \nEquivalent to [`buf.indexOf()`](#buf_indexof) `!== -1`, returns `true` if the *`value`* was found in Buffer.\n\n`buf.indexOf(`*`value`*`[, `*`byteOffset`*`][, `*`encoding`*`])`  \nReturns an integer which is the index of the first occurrence of *`value`* in Buffer, or *`-1`* if Buffer does not contain value. The *`value`* can be a `string` with specified *`encoding`* (by default *`utf8`*), `Buffer`, `Unit8Array`, or a number between 0 and 255.\n\n`buf.lastIndexOf(`*`value`*`[, `*`byteOffset`*`][, `*`encoding`*`])`  \nThe same as [`buf.indexOf()`](#buf_indexof), except the last occurrence of the *`value`* is found instead of the first occurrence. The *`value`* can be a string, Buffer, or integer between 1 and 255. If the *`value`* is an empty string or empty Buffer, `byteOffset` will be returned.\n\n`buf.length`  \nReturns the number of bytes in Buffer.\n\n`buf.readIntBE(`*`offset`*`, `*`byteLength`*`)`  \nReads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a big-endian, two's complement signed value supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe similar methods are also supported: `buf.readInt8([offset])`, `buf.readInt16BE([offset])`, `buf.readInt32BE([offset])`.\n\n`buf.readIntLE(`*`offset`*`, `*`byteLength`*`)`  \nReads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a little-endian, two's complement signed value supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe similar methods are also supported: `buf.readInt8([offset])`, `buf.readInt16LE([offset])`, `buf.readInt32LE([offset])`.\n\n`buf.readUIntBE(`*`offset`*`, `*`byteLength`*`)`  \nReads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a big-endian integer supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe similar methods are also supported: `buf.readUInt8([offset])`, `buf.readUInt16BE([offset])`, `buf.readUInt32BE([offset])`.\n\n`buf.readUIntLE(`*`offset`*`, `*`byteLength`*`)`  \nReads the *`byteLength`* from `buf` at the specified *`offset`* and interprets the result as a little-endian integer supporting up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe similar methods are also supported: `buf.readUInt8([offset])`, `buf.readUInt16LE([offset])`, `buf.readUInt32LE([offset])`.\n\n`buf.readDoubleBE`(\\[*`offset`*\\])  \nReads a 64-bit, big-endian double from `buf` at the specified *`offset`*.\n\n`buf.readDoubleLE`(\\[*`offset`*\\])  \nReads a 64-bit, little-endian double from `buf` at the specified *`offset`*.\n\n`buf.readFloatBE`(\\[*`offset`*\\])  \nReads a 32-bit, big-endian float from `buf` at the specified *`offset`*.\n\n`buf.readFloatLE`(\\[*`offset`*\\])  \nReads a 32-bit, little-endian float from `buf` at the specified *`offset`*.\n\n`buf.subarray([`*`start`*`[, `*`end`*`]])`  \nReturns a new `buf` that references the same memory as the original, but offset and cropped by *`start`* and *`end`*. If *`end`* is greater than [`buf.length`](#buf_length), the same result as that of end equal to [`buf.length`](#buf_length) is returned.\n\n`buf.slice([`*`start`*`[, `*`end`*`]])`  \nReturns a new `buf` that references the same memory as the original, but offset and cropped by the *`start`* and *`end`* values. The method is not compatible with the `Uint8Array.prototype.slice()`, which is a superclass of Buffer. To copy the slice, use `Uint8Array.prototype.slice()`.\n\n`buf.swap16`()  \nInterprets `buf` as an array of unsigned 16-bit numbers and swaps the byte order in-place. Throws an error if [`buf.length`](#buf_length) is not a multiple of 2.\n\n`buf.swap32`()  \nInterprets `buf` as an array of unsigned 32-bit numbers and swaps the byte order in-place. Throws an error if [`buf.length`](#buf_length) is not a multiple of 4.\n\n`buf.swap64`()  \nInterprets `buf` as an array of 64-bit numbers and swaps byte order in-place. Throws an error if [`buf.length`](#buf_length) is not a multiple of 8.\n\n`buf.toJSON`()  \nReturns a JSON representation of `buf.` `JSON.stringify()` implicitly calls this function when stringifying a Buffer instance.\n\n`buf.toString([`*`encoding`*`[, `*`start`*`[, `*`end`*`]]])`  \nDecodes `buf` to a string according to the specified character *`encoding`* which can be *`utf8`*, *`hex`*, *`base64`*, *`base64url`*. The *`start`* and *`end`* parameters may be passed to decode only a subset of Buffer.\n\n`buf.write(`*`string`*`[, `*`offset`*`[, `*`length`*`]][, `*`encoding`*`])`  \nWrites a *`string`* to `buf` at *`offset`* according to the character *`encoding`*. The *`length`* parameter is the number of bytes to write. If Buffer did not contain enough space to fit the entire string, only part of string will be written, however, partially encoded characters will not be written. The *`encoding`* can be *`utf8`*, *`hex`*, *`base64`*, *`base64url`*.\n\n`buf.writeIntBE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`  \nWrites *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as big-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe following similar methods are also supported: `buf.writeInt8`, `buf.writeInt16BE`, `buf.writeInt32BE`.\n\n`buf.writeIntLE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`  \nWrites *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as little-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe following similar methods are also supported: `buf.writeInt8`, `buf.writeInt16LE`, `buf.writeInt32LE`.\n\n`buf.writeUIntBE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`  \nWrites *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as big-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe following similar methods are also supported: `buf.writeUInt8`, `buf.writeUInt16BE`, `buf.writeUInt32BE`.\n\n`buf.writeUIntLE(`*`value`*`, `*`offset`*`, `*`byteLength`*`)`  \nWrites *`byteLength`* bytes of *`value`* to `buf` at the specified *`offset`* as little-endian. Supports up to 48 bits of accuracy. The *`byteLength`* parameter is an integer between 1 and 6 specifying the number of bytes to read.\n\nThe following similar methods are also supported: `buf.writeUInt8`, `buf.writeUInt16LE`, `buf.writeUInt32LE`.\n\n`buf.writeDoubleBE(`*`value`*`, [`*`offset`*`])`  \nWrites the *`value`* to `buf` at the specified *`offset`* as big-endian.\n\n`buf.writeDoubleLE(`*`value`*`, [`*`offset`*`])`  \nWrites the *`value`* to `buf` at the specified *`offset`* as little-endian.\n\n`buf.writeFloatBE(`*`value`*`, [`*`offset`*`])`  \nWrites the *`value`* to `buf` at the specified *`offset`* as big-endian.\n\n`buf.writeFloatLE(`*`value`*`, [`*`offset`*`])`  \nWrites the *`value`* to `buf` at the specified *`offset`* as little-endian.\n\n#### Crypto\n\n|                                             |\n|---------------------------------------------|\n| [`crypto.createHash()`](#crypto_createhash) |\n| [`crypto.createHmac()`](#crypto_createhmac) |\n\nSince [0.7.0](changes#njs0.7.0), extended crypto API is available as a global [crypto](#builtin_crypto) object.\n\nThe Crypto module provides cryptographic functionality support. The Crypto module object is returned by `require('crypto')`.\n\n`crypto.createHash(`*`algorithm`*`)`  \nCreates and returns a [Hash](#crypto_hash) object that can be used to generate hash digests using the given *`algorithm`*. The algorithm can be `md5`, `sha1`, and `sha256`.\n\n`crypto.createHmac(`*`algorithm`*`, `*`secret key`*`)`  \nCreates and returns an [HMAC](#crypto_hmac) object that uses the given *`algorithm`* and *`secret key`*. The algorithm can be `md5`, `sha1`, and `sha256`.\n\n#### Hash\n\n|                                        |\n|----------------------------------------|\n| [`hash.update()`](#crypto_hash_update) |\n| [`hash.digest()`](#crypto_hash_digest) |\n\n`hash.update(`*`data`*`)`  \nUpdates the hash content with the given *`data`*.\n\n`hash.digest([`*`encoding`*`])`  \nCalculates the digest of all of the data passed using `hash.update()`. The encoding can be `hex`, `base64`, and `base64url`. If encoding is not provided, a Buffer object ([0.4.4](changes#njs0.4.4)) is returned.\n\nBefore version ([0.4.4](changes#njs0.4.4)), a byte string was returned instead of a Buffer object.\n\n`hash.copy()`  \nMakes a copy of the current state of the hash (since [0.7.12](changes#njs0.7.12)).\n\n``` nginx\n>> var cr = require('crypto')\nundefined\n\n>> cr.createHash('sha1').update('A').update('B').digest('base64url')\n'BtlFlCqiamG-GMPiK_GbvKjdK10'\n```\n\n#### HMAC\n\n|                                        |\n|----------------------------------------|\n| [`hmac.update()`](#crypto_hmac_update) |\n| [`hmac.digest()`](#crypto_hmac_digest) |\n\n`hmac.update(`*`data`*`)`  \nUpdates the HMAC content with the given *`data`*.\n\n`hmac.digest([`*`encoding`*`])`  \nCalculates the HMAC digest of all of the data passed using `hmac.update()`. The encoding can be `hex`, `base64`, and `base64url`. If encoding is not provided, a Buffer object ([0.4.4](changes#njs0.4.4)) is returned.\n\nBefore version [0.4.4](changes#njs0.4.4), a byte string was returned instead of a Buffer object.\n\n``` nginx\n>> var cr = require('crypto')\nundefined\n\n>> cr.createHmac('sha1', 'secret.key').update('AB').digest('base64url')\n'Oglm93xn23_MkiaEq_e9u8zk374'\n```\n\n#### File System\n\n|                                             |\n|---------------------------------------------|\n| [`fs.accessSync()`](#fs_accesssync)         |\n| [`fs.appendFileSync()`](#fs_appendfilesync) |\n| [`fs.closeSync()`](#fs_closesync)           |\n| [`fs.existsSync()`](#fs_existssync)         |\n| [`fs.fstatSync()`](#fs_fstatsync)           |\n| [`fs.lstatSync()`](#fs_lstatsync)           |\n| [`fs.mkdirSync()`](#fs_mkdirsync)           |\n| [`fs.openSync()`](#fs_opensync)             |\n| [`fs.promises.open()`](#fs_promises_open)   |\n| [`fs.readdirSync()`](#fs_readdirsync)       |\n| [`fs.readFileSync()`](#fs_readfilesync)     |\n| [`fs.readSync()`](#fs_readsync)             |\n| [`fs.realpathSync()`](#fs_realpathsync)     |\n| [`fs.renameSync()`](#fs_renamesync)         |\n| [`fs.rmdirSync()`](#fs_rmdirsync)           |\n| [`fs.statSync()`](#fs_statsync)             |\n| [`fs.symlinkSync()`](#fs_symlinksync)       |\n| [`fs.unlinkSync()`](#fs_unlinksync)         |\n| [`fs.writeFileSync()`](#fs_writefilesync)   |\n| [`fs.writeSync()`](#fs_writesync_buf)       |\n| [`fs.writeSync()`](#fs_writesync_str)       |\n\n|                                          |\n|------------------------------------------|\n| [`fs.Dirent`](#fs_dirent)                |\n| [`fs.FileHandle`](#fs_filehandle)        |\n| [`fs.Stats`](#fs_stats)                  |\n| [`File Access Constants`](#access_const) |\n| [`File System Flags`](#njs_api_fs_flags) |\n\nThe File System module provides operations with files.\n\nThe module object is returned by `require('fs')`. Since [0.3.9](changes#njs0.3.9), promissified versions of file system methods are available through `require('fs').promises` object:\n\n``` nginx\n> var fs = require('fs').promises;\nundefined\n> fs.readFile(\"/file/path\").then((data)=>console.log(data))\n<file data>\n```\n\n`accessSync(`*`path`*`[, `*`mode`*`])`  \nSynchronously tests permissions for a file or directory specified in the `path` ([0.3.9](changes#njs0.3.9)). If the check fails, an error will be returned, otherwise, the method will return undefined.\n\n`mode`  \nan optional integer that specifies the accessibility checks to be performed, by default is [`fs.constants.F_OK`](#access_const)\n\n``` nginx\ntry {\n    fs.accessSync('/file/path', fs.constants.R_OK | fs.constants.W_OK);\n    console.log('has access');\n} catch (e) {\n    console.log('no access');)\n}\n```\n\n`appendFileSync(`*`filename`*`, `*`data`*`[, `*`options`*`])`  \nSynchronously appends specified `data` to a file with provided `filename`. The `data` is expected to be a string or a Buffer object ([0.4.4](changes#njs0.4.4)). If the file does not exist, it will be created. The `options` parameter is expected to be an object with the following keys:\n\n`mode`  \nmode option, by default is `0o666`\n\n`flag`  \nfile system [flag](#njs_api_fs_flags), by default is `a`\n\n`closeSync(`*`fd`*`)`  \nCloses the `fd` file descriptor represented by an integer used by the method. Returns `undefined`.\n\n`existsSync(`*`path`*`)`  \nBoolean value, returns `true` if the specified *`path`* exists. ([0.8.2](changes#njs0.8.2))\n\n`fstatSync(`*`fd`*`)`  \nRetrieves the [`fs.Stats`](#fs_stats) object for the file descriptor ([0.7.7](changes#njs0.7.7)). The `fd` parameter is an integer representing the file descriptor used by the method.\n\n`lstatSync(`*`path`*`[, `*`options`*`])`  \nSynchronously retrieves the [`fs.Stats`](#fs_stats) object for the symbolic link referred to by `path` ([0.7.1](changes#njs0.7.1)). The `options` parameter is expected to be an object with the following keys:\n\n`throwIfNoEntry`  \na boolean value which indicates whether an exception is thrown if no file system entry exists, rather than returning `undefined`, by default is `false`.\n\n`mkdirSync(`*`path`*`[, `*`options`*`])`  \nSynchronously creates a directory at the specified `path` ([0.4.2](changes#njs0.4.2)). The `options` parameter is expected to be an `integer` that specifies the [mode](#fs_mkdirsync_mode), or an object with the following keys:\n\n`mode`  \nmode option, by default is `0o777`.\n\n`openSync(`*`path`*`[, `*`flags`*`[, `*`mode`*`]])`  \nReturns an integer representing the file descriptor for the opened file `path` ([0.7.7](changes#njs0.7.7)).\n\n`flags`  \nfile system [flag](#njs_api_fs_flags), by default is `r`\n\n`mode`  \nmode option, by default is `0o666`\n\n`promises.open(`*`path`*`[, `*`flags`*`[, `*`mode`*`]])`  \nReturns a [`FileHandle`](#fs_filehandle) object representing the opened file `path` ([0.7.7](changes#njs0.7.7)).\n\n`flags`  \nfile system [flag](#njs_api_fs_flags), by default is `r`\n\n`mode`  \nmode option, by default is `0o666`\n\n`readdirSync(`*`path`*`[, `*`options`*`])`  \nSynchronously reads the contents of a directory at the specified `path` ([0.4.2](changes#njs0.4.2)). The `options` parameter is expected to be a string that specifies [encoding](#fs_readdirsync_encoding) or an object with the following keys:\n\n`encoding`  \nencoding, by default is `utf8`. The encoding can be `utf8` and `buffer` ([0.4.4](changes#njs0.4.4)).\n\n`withFileTypes`  \nif set to `true`, the files array will contain [`fs.Dirent`](#fs_dirent) objects, by default is `false`.\n\n`readFileSync(`*`filename`*`[, `*`options`*`])`  \nSynchronously returns the contents of the file with provided `filename`. The `options` parameter holds `string` that specifies encoding. If an encoding is specified, a string is returned, otherwise, a Buffer object ([0.4.4](changes#njs0.4.4)) is returned.\n\nBefore version [0.4.4](changes#njs0.4.4), a [byte string](#string_tobytes) was returned if encoding was not specified. Otherwise, `options` is expected to be an object with the following keys:\n\n`encoding`  \nencoding, by default is not specified. The encoding can be `utf8`, `hex` ([0.4.4](changes#njs0.4.4)), `base64` ([0.4.4](changes#njs0.4.4)), `base64url` ([0.4.4](changes#njs0.4.4)).\n\n`flag`  \nfile system [flag](#njs_api_fs_flags), by default is `r`\n\n``` nginx\n>> var fs = require('fs')\nundefined\n>> var file = fs.readFileSync('/file/path.tar.gz')\nundefined\n>> var gzipped = file.slice(0,2).toString('hex') === '1f8b'; gzipped\ntrue\n```\n\n`readSync(`*`fd`*`, `*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`  \nReads the content of a file path using file descriptor `fd`, returns the number of bytes read ([0.7.7](changes#njs0.7.7)).\n\n`buffer`  \nthe `buffer` value can be a `Buffer`, `TypedArray`, or `DataView`\n\n`offset`  \nis an `integer` representing the position in buffer to write the data to\n\n`length`  \nis an `integer` representing the number of bytes to read\n\n`position`  \nspecifies where to begin reading from in the file, the value can be `integer` or `null`, by default is `null`. If `position` is `null`, data will be read from the current file position, and the file position will be updated. If position is an `integer`, the file position will be unchanged\n\n`realpathSync(`*`path`*`[, `*`options`*`])`  \nSynchronously computes the canonical pathname by resolving `.`, `..` and symbolic links using [realpath(3)](http://man7.org/linux/man-pages/man3/realpath.3.html). The `options` argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback ([0.3.9](changes#njs0.3.9)).\n\n`renameSync(`*`oldPath`*`, `*`newPath`*`)`  \nSynchronously changes the name or location of a file from `oldPath` to `newPath` ([0.3.4](changes#njs0.3.4)).\n\n``` nginx\n>> var fs = require('fs')\nundefined\n>> var file = fs.renameSync('hello.txt', 'HelloWorld.txt')\nundefined\n```\n\n`rmdirSync(`*`path`*`)`  \nSynchronously removes a directory at the specified `path` ([0.4.2](changes#njs0.4.2)).\n\n`statSync(`*`path`*`,[ `*`options`*`])`  \nSynchronously retrieves the [`fs.Stats`](#fs_stats) object for the specified `path` ([0.7.1](changes#njs0.7.1)). The `path` can be a `string` or `buffer`. The `options` parameter is expected to be an object with the following keys:\n\n`throwIfNoEntry`  \na boolean value which indicates whether an exception is thrown if no file system entry exists rather than returning `undefined`, by default is `true`.\n\n`symlinkSync(`*`target`*`, `*`path`*`)`  \nSynchronously creates the link called `path` pointing to `target` using [symlink(2)](http://man7.org/linux/man-pages/man2/symlink.2.html) ([0.3.9](changes#njs0.3.9)). Relative targets are relative to the link’s parent directory.\n\n`unlinkSync(`*`path`*`)`  \nSynchronously unlinks a file by `path` ([0.3.9](changes#njs0.3.9)).\n\n`writeFileSync(`*`filename`*`, `*`data`*`[, `*`options`*`])`  \nSynchronously writes `data` to a file with provided `filename`. The `data` is expected to be a string or a Buffer object ([0.4.4](changes#njs0.4.4)). If the file does not exist, it will be created, if the file exists, it will be replaced. The `options` parameter is expected to be an object with the following keys:\n\n`mode`  \nmode option, by default is `0o666`\n\n`flag`  \nfile system [flag](#njs_api_fs_flags), by default is `w`\n\n``` nginx\n>> var fs = require('fs')\nundefined\n>> var file = fs.writeFileSync('hello.txt', 'Hello world')\nundefined\n```\n\n`writeSync(`*`fd`*`, `*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`  \nWrites a buffer to a file using file descriptor, returns the `number` of bytes written ([0.7.7](changes#njs0.7.7)).\n\n`fd`  \nan `integer` representing the file descriptor\n\n`buffer`  \nthe `buffer` value can be a `Buffer`, `TypedArray`, or `DataView`\n\n`offset`  \nis an `integer` that determines the part of the buffer to be written, by default `0`\n\n`length`  \nis an `integer` specifying the number of bytes to write, by default is an offset of [Buffer.byteLength](#buffer_bytelength)\n\n`position`  \nrefers to the offset from the beginning of the file where this data should be written, can be an `integer` or `null`, by default is `null`. See also [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html).\n\n`writeSync(`*`fd`*`, `*`string`*`[, `*`position`*`[, `*`encoding`*`]])`  \nWrites a `string` to a file using file descriptor `fd`, returns the `number` of bytes written ([0.7.7](changes#njs0.7.7)).\n\n`fd`  \nis an `integer` representing a file descriptor\n\n`position`  \nrefers to the offset from the beginning of the file where this data should be written, can be an `integer` or `null`, by default is `null`. See also [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html)\n\n`encoding`  \nis a `string`, by default is `utf8`\n\n#### fs.Dirent\n\n`fs.Dirent` is a representation of a directory entry — a file or a subdirectory. When [`readdirSync()`](#fs_readdirsync) is called with the [`withFileTypes`](#fs_readdirsync_withfiletypes) option, the resulting array contains `fs.Dirent` objects.\n\n- `dirent.isBlockDevice()` — returns `true` if the `fs.Dirent` object describes a block device.\n- `dirent.isCharacterDevice()` — returns `true` if the `fs.Dirent` object describes a character device.\n- `dirent.isDirectory()` — returns `true` if the `fs.Dirent` object describes a file system directory.\n- `dirent.isFIFO()` — returns `true` if the `fs.Dirent` object describes a first-in-first-out (FIFO) pipe.\n- `dirent.isFile()` — returns `true` if the `fs.Dirent` object describes a regular file.\n- `dirent.isSocket()` — returns `true` if the `fs.Dirent` object describes a socket.\n- `dirent.isSymbolicLink()` — returns `true` if the `fs.Dirent` object describes a symbolic link.\n- `dirent.name` — the name of the file `fs.Dirent` object refers to.\n\n#### fs.FileHandle\n\n|                                                        |\n|--------------------------------------------------------|\n| [`filehandle.close()`](#filehandle_close)              |\n| [`filehandle.fd`](#filehandle_fd)                      |\n| [`filehandle.read()`](#filehandle_read)                |\n| [`filehandle.stat()`](#filehandle_stat)                |\n| [`filehandle.write(`*`buf`*`)`](#filehandle_write_buf) |\n| [`filehandle.write(`*`str`*`)`](#filehandle_write_str) |\n\nThe `FileHandle` object is an object wrapper for a numeric file descriptor ([0.7.7](changes#njs0.7.7)). Instances of the `FileHandle` object are created by the [`fs.promises.open()`](#fs_promises_open) method. If a `FileHandle` is not closed using the [`filehandle.close()`](#filehandle_close) method, it will try to automatically close the file descriptor, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable. Instead, always explicitly close a `FileHandle`.\n\n`filehandle.close()`  \nCloses the file handle after waiting for any pending operation on the handle to complete. Returns a `promise`, fulfills with undefined upon success.\n\n`filehandle.fd`  \nThe numeric file descriptor managed by the `FileHandle` object.\n\n`filehandle.read(`*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`  \nReads data from the file and stores that in the given buffer.\n\n`buffer`  \na buffer that will be filled with the file data read, the value can be a `Buffer`, `TypedArray`, or `DataView`\n\n`offset`  \nis an `integer` representing the location in the buffer at which to start filling\n\n`length`  \nis an `integer` representing the number of bytes to read\n\n`position`  \nthe location where to begin reading data from the file, the value can be `integer`, `null`. If `null`, data will be read from the current file position and the position will be updated. If position is an `integer`, the current file position will remain unchanged.\n\nReturns a `Promise` which fulfills upon success with an object with two properties:\n\n`bytesRead`  \nis an `integer` representing the number of bytes read\n\n`buffer`  \nis a reference to the passed argument in buffer, can be `Buffer`, `TypedArray`, or `DataView`\n\n`filehandle.stat()`  \nFulfills with an [fs.Stats](#fs_stats) for the file, returns a `promise`.\n\n`filehandle.write(`*`buffer`*`, `*`offset`*`[, `*`length`*`[, `*`position`*`]])`  \nWrites a buffer to the file.\n\n`buffer`  \nthe `buffer` value can be a `Buffer`, `TypedArray`, or `DataView`\n\n`offset`  \nis an `integer` representing the start position from within buffer where the data to write begins\n\n`length`  \nis an `integer` representing the number of bytes from buffer to write, by default is an offset of [Buffer.byteLength](#buffer_bytelength)\n\n`position`  \nthe offset from the beginning of the file where the data from buffer should be written, can be an `integer` or `null`, by default is `null`. If `position` is not a `number`, the data will be written at the current position. See the POSIX [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html) documentation for details.\n\nReturns a `Promise` which is resolved with an object containing two properties:\n\n`bytesWritten`  \nis an `integer` representing the number of bytes written\n\n`buffer`  \na reference to the buffer written, can be a `Buffer`, `TypedArray`, or `DataView`\n\nIt is unsafe to use `filehandle.write()` multiple times on the same file without waiting for the promise to be resolved or rejected.\n\n`filehandle.write(`*`string`*`[, `*`position`*`[, `*`encoding`*`]])`  \nWrites a `string` to the file.\n\n`position`  \nthe offset from the beginning of the file where the data from buffer should be written, can be an `integer` or `null`, by default is `null`. If `position` is not a `number`, the data will be written at the current position. See the POSIX [pwrite(2)](https://man7.org/linux/man-pages/man2/write.2.html) documentation for details.\n\n`encoding`  \nthe expected encoding of the string, by default `utf8`\n\nReturns a `Promise` which is resolved with an object containing two properties:\n\n`bytesWritten`  \nis an `integer` representing the number of bytes written\n\n`buffer`  \na reference to the buffer written, can be a `Buffer`, `TypedArray`, or `DataView`\n\nIt is unsafe to use `filehandle.write()` multiple times on the same file without waiting for the promise to be resolved or rejected.\n\n#### fs.Stats\n\nThe `fs.Stats` object provides information about a file. The object is returned from [fs.statSync()](#fs_statsync) and [fs.lstatSync()](#fs_lstatsync).\n\n- `stats.isBlockDevice()` — returns `true` if the `fs.Stats` object describes a block device.\n- `stats.isDirectory()` — returns `true` if the `fs.Stats` object describes a file system directory.\n- `stats.isFIFO()` — returns `true` if the `fs.Stats` object describes a first-in-first-out (FIFO) pipe.\n- `stats.isFile()` — returns `true` if the `fs.Stats` object describes a regular file.\n- `stats.isSocket()` — returns `true` if the `fs.Stats` object describes a socket.\n- `stats.isSymbolicLink()` — returns `true` if the `fs.Stats` object describes a symbolic link.\n- `stats.dev` — the numeric identifier of the device containing the file.\n- `stats.ino` — the file system specific `Inode` number for the file.\n- `stats.mode` — a bit-field describing the file type and mode.\n- `stats.nlink` — the number of hard-links that exist for the file.\n- `stats.uid` — the numeric user identifier of the user that owns the file (POSIX).\n- `stats.gid` — the numeric group identifier of the group that owns the file (POSIX).\n- `stats.rdev` — the numeric device identifier if the file represents a device.\n- `stats.size` — the size of the file in bytes.\n- `stats.blksize` — the file system block size for i/o operations.\n- `stats.blocks` — the number of blocks allocated for this file.\n- `stats.atimeMs` — the timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.\n- `stats.mtimeMs` — the timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.\n- `stats.ctimeMs` — the timestamp indicating the last time this file was changed expressed in milliseconds since the POSIX Epoch.\n- `stats.birthtimeMs` — the timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.\n- `stats.atime` — the timestamp indicating the last time this file was accessed.\n- `stats.mtime` — the timestamp indicating the last time this file was modified.\n- `stats.ctime` — the timestamp indicating the last time this file was changed.\n- `stats.birthtime` — the timestamp indicating the creation time of this file.\n\n#### File Access Constants\n\nThe [`access()`](#fs_accesssync) method can accept the following flags. These flags are exported by `fs.constants`:\n\n- `F_OK` — indicates that the file is visible to the calling process, used by default if no mode is specified\n- `R_OK` — indicates that the file can be read by the calling process\n- `W_OK` — indicates that the file can be written by the calling process\n- `X_OK` — indicates that the file can be executed by the calling process\n\n#### File System Flags\n\nThe `flag` option can accept the following values:\n\n- `a` — open a file for appending. The file is created if it does not exist\n- `ax` — the same as `a` but fails if the file already exists\n- `a+` — open a file for reading and appending. If the file does not exist, it will be created\n- `ax+` — the same as `a+` but fails if the file already exists\n- `as` — open a file for appending in synchronous mode. If the file does not exist, it will be created\n- `as+` — open a file for reading and appending in synchronous mode. If the file does not exist, it will be created\n- `r` — open a file for reading. An exception occurs if the file does not exist\n- `r+` — open a file for reading and writing. An exception occurs if the file does not exist\n- `rs+` — open a file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache\n- `w` — open a file for writing. If the file does not exist, it will be created. If the file exists, it will be replaced\n- `wx` — the same as `w` but fails if the file already exists\n- `w+` — open a file for reading and writing. If the file does not exist, it will be created. If the file exists, it will be replaced\n- `wx+` — the same as `w+` but fails if the file already exists\n\n#### Query String\n\n|                                                     |\n|-----------------------------------------------------|\n| [`querystring.decode()`](#querystring_decode)       |\n| [`querystring.encode()`](#querystring_encode)       |\n| [`querystring.escape()`](#querystring_escape)       |\n| [`querystring.parse()`](#querystring_parse)         |\n| [`querystring.stringify()`](#querystring_stringify) |\n| [`querystring.unescape()`](#querystring_unescape)   |\n\nThe Query String module provides support for parsing and formatting URL query strings ([0.4.3](changes#njs0.4.3)). The Query String module object is returned by `require('querystring')`.\n\n`querystring.decode()`  \nis an alias for [`querystring.parse()`](#querystring_parse).\n\n`querystring.encode()`  \nis an alias for [`querystring.stringify()`](#querystring_stringify).\n\n`querystring.escape(`*`string`*`)`  \nPerforms URL encoding of the given `string`, returns an escaped query string. The method is used by [`querystring.stringify()`](#querystring_stringify) and should not be used directly.\n\n`querystring.parse(`*`string`*`[, `*`separator`*`[, `*`equal`*`[, `*`options`*`]]])`  \nParses the query string URL and returns an object.\n\nThe `separator` parameter is a substring for delimiting key and value pairs in the query string, by default is “`&`”.\n\nThe `equal` parameter is a substring for delimiting keys and values in the query string, by default is “`=`”.\n\nThe `options` parameter is expected to be an object with the following keys:\n\n`decodeURIComponent` *`function`*  \nFunction used to decode percent-encoded characters in the query string, by default is [`querystring.unescape()`](#querystring_unescape)\n\n`maxKeys` *`number`*  \nthe maximum number of keys to parse, by default is `1000`. The `0` value removes limitations for counting keys.\n\nBy default, percent-encoded characters within the query string are assumed to use the UTF-8 encoding, invalid UTF-8 sequences will be replaced with the `U+FFFD` replacement character.\n\nFor example, for the following query string\n\n``` nginx\n'foo=bar&abc=xyz&abc=123'\n```\n\nthe output will be:\n\n``` nginx\n{\n  foo: 'bar',\n  abc: ['xyz', '123']\n}\n```\n\n`querystring.stringify(`*`object`*`[, `*`separator`*`[, `*`equal`*`[, `*`options`*`]]])`  \nSerializes an object and returns a URL query string.\n\nThe `separator` parameter is a substring for delimiting key and value pairs in the query string, by default is “`&`”.\n\nThe `equal` parameter is a substring for delimiting keys and values in the query string, by default is “`=`”.\n\nThe `options` parameter is expected to be an object with the following keys:\n\n`encodeURIComponent` *`function`*  \nThe function to use when converting URL-unsafe characters to percent-encoding in the query string, by default is [`querystring.escape()`](#querystring_escape).\n\nBy default, characters that require percent-encoding within the query string are encoded as UTF-8. If other encoding is required, then `encodeURIComponent` option should be specified.\n\nFor example, for the following command\n\n``` nginx\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], 123: '' });\n```\n\nthe query string will be:\n\n``` nginx\n'foo=bar&baz=qux&baz=quux&123='\n```\n\n`querystring.unescape(`*`string`*`)`  \nPerforms decoding of URL percent-encoded characters of the `string`, returns an unescaped query string. The method is used by [`querystring.parse()`](#querystring_parse) and should not be used directly.\n\n#### XML\n\n|                                                      |\n|------------------------------------------------------|\n| [`xml.parse()`](#xml_parse)                          |\n| [`xml.c14n()`](#xml_c14n)                            |\n| [`xml.exclusiveC14n()`](#xml_exclusivec14n)          |\n| [`xml.serialize()`](#xml_serialize)                  |\n| [`xml.serializeToString()`](#xml_serialize_tostring) |\n| [`XMLDoc`](#xml_doc)                                 |\n| [`XMLNode`](#xml_node)                               |\n| [`XMLAttr`](#xml_xmlattr)                            |\n\nThe XML module allows working with XML documents (since [0.7.10](changes#njs0.7.10)). The XML module object is returned by `require('xml')`.\n\nExample:\n\n``` nginx\nconst xml = require(\"xml\");\nlet data = `<note><to b=\"bar\" a= \"foo\" >Tove</to><from>Jani</from></note>`;\nlet doc = xml.parse(data);\n\nconsole.log(doc.note.to.$text) /* 'Tove' */\nconsole.log(doc.note.to.$attr$b) /* 'bar' */\nconsole.log(doc.note.$tags[1].$text) /* 'Jani' */\n\nlet dec = new TextDecoder();\nlet c14n = dec.decode(xml.exclusiveC14n(doc.note));\nconsole.log(c14n) /* '<note><to a=\"foo\" b=\"bar\">Tove</to><from>Jani</from></note>' */\n\nc14n = dec.decode(xml.exclusiveC14n(doc.note.to));\nconsole.log(c14n) /* '<to a=\"foo\" b=\"bar\">Tove</to>' */\n\nc14n = dec.decode(xml.exclusiveC14n(doc.note, doc.note.to /* excluding 'to' */));\nconsole.log(c14n) /* '<note><from>Jani</from></note>' */\n```\n\n`parse(`*`string`*` | `*`Buffer`*`)`  \nParses a string or Buffer for an XML document, returns an [`XMLDoc`](#xml_doc) wrapper object representing the parsed XML document.\n\n`c14n(`*`root_node`*`[, `*`excluding_node`*`])`  \nCanonicalizes `root_node` and its children according to [Canonical XML Version 1.1](https://www.w3.org/TR/xml-c14n). The `root_node` can be [`XMLNode`](#xml_node) or [`XMLDoc`](#xml_doc) wrapper object around XML structure. Returns Buffer object that contains canonicalized output.\n\n`excluding_node`  \nallows omitting from the output a part of the document\n\n`exclusiveC14n(`*`root_node`*`[, `*`excluding_node`*`[, `*`withComments`*` [,`*`prefix_list`*`]]])`  \nCanonicalizes `root_node` and its children according to [Exclusive XML Canonicalization Version 1.0](https://www.w3.org/TR/xml-exc-c14n/).\n\n`root_node`  \nis [`XMLNode`](#xml_node) or [`XMLDoc`](#xml_doc) wrapper object around XML structure\n\n`excluding_node`  \nallows omitting from the output a part of the document corresponding to the node and its children\n\n`withComments`  \na boolean value, `false` by default. If `true`, canonicalization corresponds to [Exclusive XML Canonicalization Version 1.0](http://www.w3.org/2001/10/xml-exc-c14n#WithComments). Returns Buffer object that contains canonicalized output.\n\n`prefix_list`  \nan optional string with a space separated namespace prefixes for namespaces that should also be included into the output\n\n`serialize()`  \nThe same as [`xml.c14n()`](#xml_c14n) (since [0.7.11](changes#njs0.7.11)).\n\n`serializeToString()`  \nThe same as [`xml.c14n()`](#xml_c14n) except it returns the result as a `string` (since [0.7.11](changes#njs0.7.11)).\n\n`XMLDoc`  \nAn XMLDoc wrapper object around XML structure, the root node of the document.\n\n`doc.$root`  \nthe document's root by its name or undefined\n\n`doc.`*`abc`*  \nthe first root tag named *`abc`* as [`XMLNode`](#xml_node) wrapper object\n\n`XMLNode`  \nAn XMLNode wrapper object around XML tag node.\n\n`node.`*`abc`*  \nthe same as [`node.$tag$`*`abc`*](#node_tag)\n\n`node.$attr$`*`abc`*  \nthe node's attribute value of *`abc`*, writable since [0.7.11](changes#njs0.7.11)\n\n`node.$attr$`*`abc`*=*`xyz`*  \nthe same as [`node.setAttribute('`*`abc`*`', `*`xyz`*`)`](#node_setattribute) (since [0.7.11](changes#njs0.7.11))\n\n`node.$attrs`  \nan [`XMLAttr`](#xml_xmlattr) wrapper object for all attributes of the node\n\n`node.$name`  \nthe name of the node\n\n`node.$ns`  \nthe namespace of the node\n\n`node.$parent`  \nthe parent node of the current node\n\n`node.$tag$`*`abc`*  \nthe first child tag of the node named *`abc`*, writable since [0.7.11](changes#njs0.7.11)\n\n`node.$tags`  \nan array of all children tags\n\n`node.$tags = [node1, node2, ...]`  \nthe same as [`node.removeChildren`()](#node_removechildren); [`node.addChild(`*`node1`*`)`](#node_addchild); [`node.addChild(`*`node2`*`)`](#node_addchild) (since [0.7.11](changes#njs0.7.11)).\n\n`node.$tags$`*`abc`*  \nall children tags named *`abc`* of the node, writable since [0.7.11](changes#njs0.7.11)\n\n`node.$text`  \nthe content of the node, writable since [0.7.11](changes#njs0.7.11)\n\n`node.$text = 'abc' `  \nthe same as [`node.setText('abc')`](#node_settext) (since [0.7.11](changes#njs0.7.11))\n\n`node.addChild(`*`nd`*`)`  \nadds XMLNode as a child to node (since [0.7.11](changes#njs0.7.11)). `nd` is recursively copied before adding to the node\n\n`node.removeAllAttributes()`  \nremoves all attributes of the node (since [0.7.11](changes#njs0.7.11))\n\n`node.removeAttribute(`*`attr_name`*`)`  \nremoves the attribute named `attr_name` (since [0.7.11](changes#njs0.7.11))\n\n`node.removeChildren(`*`tag_name`*`)`  \nremoves all the children tags named `tag_name` (since [0.7.11](changes#njs0.7.11)). If `tag_name` is absent, all children tags are removed\n\n`node.removeText()`  \nremoves the node's text value ([0.7.11](changes#njs0.7.11))\n\n`node.setAttribute(`*`attr_name`*`, `*`value`*`)`  \nsets a value for an `attr_name` (since [0.7.11](changes#njs0.7.11)). When the value is `null`, the attribute named `attr_name` is deleted\n\n`node.setText(`*`value`*`)`  \nsets a text value for the node (since [0.7.11](changes#njs0.7.11)). When the value is `null`, the text of the node is deleted.\n\n`XMLAttr`  \nAn XMLAttrs wrapper object around XML node attributes.\n\n`attr.`*`abc`*  \nthe attribute value of *`abc`*\n\n#### zlib\n\n|                                                 |\n|-------------------------------------------------|\n| [`zlib.deflateRawSync()`](#zlib_deflaterawsync) |\n| [`zlib.deflateSync()`](#zlib_deflatesync)       |\n| [`zlib.inflateRawSync()`](#zlib_inflaterawsync) |\n| [`zlib.inflateSync()`](#zlib_inflatesync)       |\n\nThe zlib module provides compression functionality using the “deflate” and “inflate” algorithms (since [0.7.12](changes#njs0.7.12)). The zlib module object is returned by `require('zlib')`.\n\n`deflateRawSync(`*`string`*` | `*`Buffer`*`[, `*`options`*`])`  \nCompresses data using the “deflate” algorithm provided as a string or Buffer and does not append a zlib header. The buffer value can be a `Buffer`, `TypedArray`, or `DataView`. `Options` is an optional object that contains [zlib_options](#zlib_options). Returns Buffer instance that contains the compressed data.\n\n`deflateSync(`*`string`*` | `*`Buffer`*`[, `*`options`*`])`  \nCompresses data using the “deflate” algorithm provided as a string or Buffer. The Buffer value can be a `Buffer`, `TypedArray`, or `DataView`. `Options` is an optional object that contains [zlib_options](#zlib_options). Returns Buffer instance that contains the compressed data.\n\n`inflateRawSync(`*`string`*` | `*`Buffer`*`)`  \nDecompresses a raw stream by using the “deflate” algorithm. Returns Buffer instance that contains the decompressed data.\n\n`inflateSync(`*`string`*` | `*`Buffer`*`)`  \nDecompresses a stream by using the “deflate” algorithm. Returns Buffer instance that contains the decompressed data.\n\n#### zlib options\n\n- `chunkSize` — is an integer, by default is `1024`\n- `dictionary` — is a `Buffer`, `TypedArray`, or `DataView`. by default is empty\n- `level` — is an integer, compression only, see [zlib_compression_levels](#zlib_compression_levels)\n- `memLevel` — is an integer from `1` to `9`, compression only\n- `strategy` — is an integer, compression only, see [zlib_compression_strategy](#zlib_compression_strategy)\n- `windowBits` — is an integer from `-15` to `-9` for raw data, from `9` to `15` for an ordinary stream\n\n#### zlib compression levels\n\n|                                        |                                         |\n|----------------------------------------|-----------------------------------------|\n| Name                                   | Description                             |\n| `zlib.constants.Z_NO_COMPRESSION`      | no compression                          |\n| `zlib.constants.Z_BEST_SPEED`          | fastest, produces the least compression |\n| `zlib.constants.Z_DEFAULT_COMPRESSION` | trade-off between speed and compression |\n| `zlib.constants.Z_BEST_COMPRESSION`    | slowest, produces the most compression  |\n\n#### zlib compression strategy\n\n|                                     |                                                                                                             |\n|-------------------------------------|-------------------------------------------------------------------------------------------------------------|\n| Name                                | Description                                                                                                 |\n| `zlib.constants.Z_FILTERED`         | Filtered strategy: for the data produced by a filter or predictor                                           |\n| `zlib.constants.Z_HUFFMAN_ONLY`     | Huffman-only strategy: only Huffman encoding, no string matching                                            |\n| `zlib.constants.Z_RLE`              | Run Length Encoding strategy: limit match distances to one, better compression of PNG image data            |\n| `zlib.constants.Z_FIXED`            | Fixed table strategy: prevents the use of dynamic Huffman codes, a simpler decoder for special applications |\n| `zlib.constants.Z_DEFAULT_STRATEGY` | Default strategy, suitable for general purpose compression                                                  |\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/reference.html](https://nginx.org/en/docs/njs/reference.html)"
- name: referer_hash_bucket_size
  id: http/ngx_http_referer_module#referer_hash_bucket_size
  summary: This directive appeared in version 1.0.5
  belongs_to: ngx_http_referer_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`referer_hash_bucket_size`***`size`*`;` |
    | Default: | `referer_hash_bucket_size 64;`            |
    | Context: | `server`, `location`                      |

    This directive appeared in version 1.0.5.

    Sets the bucket size for the valid referers hash tables. The details of setting up hash tables are provided in a separate [document](../hash).
- name: referer_hash_max_size
  id: http/ngx_http_referer_module#referer_hash_max_size
  summary: This directive appeared in version 1.0.5
  belongs_to: ngx_http_referer_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`referer_hash_max_size`***`size`*`;` |
    | Default: | `referer_hash_max_size 2048;`          |
    | Context: | `server`, `location`                   |

    This directive appeared in version 1.0.5.

    Sets the maximum *`size`* of the valid referers hash tables. The details of setting up hash tables are provided in a separate [document](../hash).
- name: request_pool_size
  id: http/ngx_http_core_module#request_pool_size
  summary: Allows accurate tuning of per-request memory allocations
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`request_pool_size`***`size`*`;` |
    | Default: | `request_pool_size 4k;`            |
    | Context: | `http`, `server`                   |

    Allows accurate tuning of per-request memory allocations. This directive has minimal impact on performance and should not generally be used.
- name: reset_timedout_connection
  id: http/ngx_http_core_module#reset_timedout_connection
  summary: Enables or disables resetting timed out connections and connections closed with the non-standard code 444 (1.15.2)
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`reset_timedout_connection`**` on | off;` |
    | Default: | `reset_timedout_connection off;`            |
    | Context: | `http`, `server`, `location`                |

    Enables or disables resetting timed out connections and connections [closed](ngx_http_rewrite_module#return) with the non-standard code 444 (1.15.2). The reset is performed as follows. Before closing a socket, the `SO_LINGER` option is set on it with a timeout value of 0. When the socket is closed, TCP RST is sent to the client, and all memory occupied by this socket is released. This helps avoid keeping an already closed socket with filled buffers in a FIN_WAIT1 state for a long time.

    It should be noted that timed out keep-alive connections are closed normally.
- name: resolver
  id: http/ngx_http_core_module#resolver
  summary: The address can be specified as a domain name or IP address, with an optional port (1.3.1, 1.2.2)
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                                                                          |
    |----------|----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`resolver`***`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |
    | Default: | —                                                                                                        |
    | Context: | `http`, `server`, `location`                                                                             |

    Configures name servers used to resolve names of upstream servers into addresses, for example:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353;
    ```

    The address can be specified as a domain name or IP address, with an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.

    Before version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2.

    By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.

    Resolving of names into IPv6 addresses is supported starting from version 1.5.8.

    By default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353 valid=30s;
    ```

    Before version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes.

    To prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.

    The optional `status_zone` parameter (1.17.1) enables [collection](ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*. The parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: resolver
  id: http/ngx_http_upstream_module#resolver
  summary: This directive appeared in version 1.17.5
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                                                                                          |
    |----------|----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`resolver`***`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |
    | Default: | —                                                                                                        |
    | Context: | `upstream`                                                                                               |

    This directive appeared in version 1.17.5.

    Configures name servers used to resolve names of upstream servers into addresses, for example:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353;
    ```

    The address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.

    By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.

    By default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353 valid=30s;
    ```

    To prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.

    The optional `status_zone` parameter enables [collection](ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: resolver (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#resolver
  summary: Configures name servers used to find the client’s hostname to pass it to the authentication server, and in the XCLIENT command when proxying SMTP
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                                                                                                                                |
    |----------|--------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`resolver`***`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` **`resolver`**` off;` |
    | Default: | `resolver off;`                                                                                                                |
    | Context: | `mail`, `server`                                                                                                               |

    Configures name servers used to find the client’s hostname to pass it to the [authentication server](ngx_mail_auth_http_module), and in the [XCLIENT](ngx_mail_proxy_module#xclient) command when proxying SMTP. For example:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353;
    ```

    The address can be specified as a domain name or IP address, with an optional port (1.3.1, 1.2.2). If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.

    Before version 1.1.7, only a single name server could be configured. Specifying name servers using IPv6 addresses is supported starting from versions 1.3.1 and 1.2.2.

    By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.

    Resolving of names into IPv6 addresses is supported starting from version 1.5.8.

    By default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353 valid=30s;
    ```

    Before version 1.1.9, tuning of caching time was not possible, and nginx always cached answers for the duration of 5 minutes.

    To prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.

    The optional `status_zone` parameter (1.17.1) enables [collection](../http/ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*. The parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).

    The special value `off` disables resolving.
- name: resolver (ngx_mgmt_module)
  id: ngx_mgmt_module#resolver
  summary: The address can be specified as a domain name or IP address, with an optional port
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                                                                                          |
    |----------|----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`resolver`***`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |
    | Default: | —                                                                                                        |
    | Context: | `mgmt`                                                                                                   |

    Configures name servers used to resolve names of the Instance Manager into addresses, for example:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353;
    ```

    The address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.

    By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` or the `ipv6=off` parameter can be specified.

    By default, nginx caches answers using the TTL value of a response. An optional `valid` parameter allows overriding it:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353 valid=30s;
    ```

    To prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.

    The optional `status_zone` parameter enables [collection](ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*.
- name: resolver (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#resolver
  summary: This directive appeared in version 1.11.3
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                                                                                          |
    |----------|----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`resolver`***`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |
    | Default: | —                                                                                                        |
    | Context: | `stream`, `server`                                                                                       |

    This directive appeared in version 1.11.3.

    Configures name servers used to resolve names of upstream servers into addresses, for example:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353;
    ```

    The address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.

    By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.

    By default, nginx caches answers using the TTL value of a response. The optional `valid` parameter allows overriding it:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353 valid=30s;
    ```

    To prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.

    The optional `status_zone` parameter (1.17.1) enables [collection](../http/ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*. The parameter is available as part of our [commercial subscription](https://www.f5.com/products/nginx).

    Before version 1.11.3, this directive was available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: resolver (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#resolver
  summary: This directive appeared in version 1.17.5
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                                                                                          |
    |----------|----------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`resolver`***`address`*` ... [valid=`*`time`*`] [ipv4=on|off] [ipv6=on|off] [status_zone=`*`zone`*`];` |
    | Default: | —                                                                                                        |
    | Context: | `upstream`                                                                                               |

    This directive appeared in version 1.17.5.

    Configures name servers used to resolve names of upstream servers into addresses, for example:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353;
    ```

    The address can be specified as a domain name or IP address, with an optional port. If port is not specified, the port 53 is used. Name servers are queried in a round-robin fashion.

    By default, nginx will look up both IPv4 and IPv6 addresses while resolving. If looking up of IPv4 or IPv6 addresses is not desired, the `ipv4=off` (1.23.1) or the `ipv6=off` parameter can be specified.

    By default, nginx caches answers using the TTL value of a response. The optional `valid` parameter allows overriding it:

    ``` nginx
    resolver 127.0.0.1 [::1]:5353 valid=30s;
    ```

    To prevent DNS spoofing, it is recommended configuring DNS servers in a properly secured trusted local network.

    The optional `status_zone` parameter enables [collection](../http/ngx_http_api_module#resolvers_) of DNS server statistics of requests and responses in the specified *`zone`*.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: resolver_timeout
  id: http/ngx_http_core_module#resolver_timeout
  summary: null
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`resolver_timeout`***`time`*`;` |
    | Default: | `resolver_timeout 30s;`           |
    | Context: | `http`, `server`, `location`      |

    Sets a timeout for name resolution, for example:

    ``` nginx
    resolver_timeout 5s;
    ```
- name: resolver_timeout
  id: http/ngx_http_upstream_module#resolver_timeout
  summary: This directive appeared in version 1.17.5
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`resolver_timeout`***`time`*`;` |
    | Default: | `resolver_timeout 30s;`           |
    | Context: | `upstream`                        |

    This directive appeared in version 1.17.5.

    Sets a timeout for name resolution, for example:

    ``` nginx
    resolver_timeout 5s;
    ```

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: resolver_timeout (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#resolver_timeout
  summary: null
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`resolver_timeout`***`time`*`;` |
    | Default: | `resolver_timeout 30s;`           |
    | Context: | `mail`, `server`                  |

    Sets a timeout for DNS operations, for example:

    ``` nginx
    resolver_timeout 5s;
    ```
- name: resolver_timeout (ngx_mgmt_module)
  id: ngx_mgmt_module#resolver_timeout
  summary: Sets a timeout for name resolution
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`resolver_timeout`***`time`*`;` |
    | Default: | `resolver_timeout 30s;`           |
    | Context: | `mgmt`                            |

    Sets a timeout for name resolution.
- name: resolver_timeout (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#resolver_timeout
  summary: This directive appeared in version 1.11.3
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`resolver_timeout`***`time`*`;` |
    | Default: | `resolver_timeout 30s;`           |
    | Context: | `stream`, `server`                |

    This directive appeared in version 1.11.3.

    Sets a timeout for name resolution, for example:

    ``` nginx
    resolver_timeout 5s;
    ```

    Before version 1.11.3, this directive was available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: resolver_timeout (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#resolver_timeout
  summary: This directive appeared in version 1.17.5
  belongs_to: ngx_stream_upstream_module
  description: "|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`resolver_timeout`***`time`*`;` |\n| Default: | `resolver_timeout 30s;`           |\n| Context: | `upstream`                        |\n\nThis directive appeared in version 1.17.5.\n\nSets a timeout for name resolution, for example:\n\n``` nginx\nresolver_timeout 5s;\n```\n\nThis directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n#### Embedded Variables\n\nThe `ngx_stream_upstream_module` module supports the following embedded variables:\n\n`$upstream_addr`\n\nkeeps the IP address and port, or the path to the UNIX-domain socket of the upstream server (1.11.4). If several servers were contacted during proxying, their addresses are separated by commas, e.g. “`192.168.1.1:12345, 192.168.1.2:12345, unix:/tmp/sock`”. If a server cannot be selected, the variable keeps the name of the server group.\n\n`$upstream_bytes_received`\n\nnumber of bytes received from an upstream server (1.11.4). Values from several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_bytes_sent`\n\nnumber of bytes sent to an upstream server (1.11.4). Values from several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_connect_time`\n\ntime to connect to the upstream server (1.11.4); the time is kept in seconds with millisecond resolution. Times of several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_first_byte_time`\n\ntime to receive the first byte of data (1.11.4); the time is kept in seconds with millisecond resolution. Times of several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_session_time`\n\nsession duration in seconds with millisecond resolution (1.11.4). Times of several connections are separated by commas like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_upstream_module.html](https://nginx.org/en/docs/stream/ngx_stream_upstream_module.html)"
- name: return
  id: http/ngx_http_rewrite_module#return
  summary: Stops processing and returns the specified code to a client
  belongs_to: ngx_http_rewrite_module
  description: |-
    |          |                                                                                      |
    |----------|--------------------------------------------------------------------------------------|
    | Syntax:  | **`return`***`code`*` [`*`text`*`];`**`return`***`codeURL`*`;`**`return`***`URL`*`;` |
    | Default: | —                                                                                    |
    | Context: | `server`, `location`, `if`                                                           |

    Stops processing and returns the specified *`code`* to a client. The non-standard code 444 closes a connection without sending a response header.

    Starting from version 0.8.42, it is possible to specify either a redirect URL (for codes 301, 302, 303, 307, and 308) or the response body *`text`* (for other codes). A response body text and redirect URL can contain variables. As a special case, a redirect URL can be specified as a URI local to this server, in which case the full redirect URL is formed according to the request scheme (`$scheme`) and the [server_name_in_redirect](ngx_http_core_module#server_name_in_redirect) and [port_in_redirect](ngx_http_core_module#port_in_redirect) directives.

    In addition, a *`URL`* for temporary redirect with the code 302 can be specified as the sole parameter. Such a parameter should start with the “`http://`”, “`https://`”, or “`$scheme`” string. A *`URL`* can contain variables.

    Only the following codes could be returned before version 0.7.51: 204, 400, 402 — 406, 408, 410, 411, 413, 416, and 500 — 504.

    The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.

    The code 308 was not treated as a redirect until version 1.13.0.

    See also the [error_page](ngx_http_core_module#error_page) directive.
- name: return (ngx_stream_return_module)
  id: stream/ngx_stream_return_module#return
  summary: Specifies a value to send to the client
  belongs_to: ngx_stream_return_module
  description: "|          |                          |\n|----------|--------------------------|\n| Syntax:  | **`return`***`value`*`;` |\n| Default: | —                        |\n| Context: | `server`                 |\n\nSpecifies a *`value`* to send to the client. The value can contain text, variables, and their combination.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_return_module.html](https://nginx.org/en/docs/stream/ngx_stream_return_module.html)"
- name: rewrite
  id: http/ngx_http_rewrite_module#rewrite
  summary: If the specified regular expression matches a request URI, URI is changed as specified in the replacement string
  belongs_to: ngx_http_rewrite_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`rewrite`***`regexreplacement`*` [`*`flag`*`];` |
    | Default: | —                                                 |
    | Context: | `server`, `location`, `if`                        |

    If the specified regular expression matches a request URI, URI is changed as specified in the *`replacement`* string. The `rewrite` directives are executed sequentially in order of their appearance in the configuration file. It is possible to terminate further processing of the directives using flags. If a replacement string starts with “`http://`”, “`https://`”, or “`$scheme`”, the processing stops and the redirect is returned to a client.

    An optional *`flag`* parameter can be one of:

    `last`

    stops processing the current set of `ngx_http_rewrite_module` directives and starts a search for a new location matching the changed URI;

    `break`

    stops processing the current set of `ngx_http_rewrite_module` directives as with the [break](#break) directive;

    `redirect`

    returns a temporary redirect with the 302 code; used if a replacement string does not start with “`http://`”, “`https://`”, or “`$scheme`”;

    `permanent`

    returns a permanent redirect with the 301 code.

    The full redirect URL is formed according to the request scheme (`$scheme`) and the [server_name_in_redirect](ngx_http_core_module#server_name_in_redirect) and [port_in_redirect](ngx_http_core_module#port_in_redirect) directives.

    Example:

    ``` nginx
    server {
        ...
        rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 last;
        rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  last;
        return  403;
        ...
    }
    ```

    But if these directives are put inside the “`/download/`” location, the `last` flag should be replaced by `break`, or otherwise nginx will make 10 cycles and return the 500 error:

    ``` nginx
    location /download/ {
        rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 break;
        rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  break;
        return  403;
    }
    ```

    If a *`replacement`* string includes the new request arguments, the previous request arguments are appended after them. If this is undesired, putting a question mark at the end of a replacement string avoids having them appended, for example:

    ``` nginx
    rewrite ^/users/(.*)$ /show?user=$1? last;
    ```

    If a regular expression includes the “`}`” or “`;`” characters, the whole expressions should be enclosed in single or double quotes.
- name: rewrite_log
  id: http/ngx_http_rewrite_module#rewrite_log
  summary: Enables or disables logging of ngx_http_rewrite_module module directives processing results into the error_log at the notice level
  belongs_to: ngx_http_rewrite_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`rewrite_log`**` on | off;`      |
    | Default: | `rewrite_log off;`                 |
    | Context: | `http`, `server`, `location`, `if` |

    Enables or disables logging of `ngx_http_rewrite_module` module directives processing results into the [error_log](../ngx_core_module#error_log) at the `notice` level.
- name: root
  id: http/ngx_http_core_module#root
  summary: Sets the root directory for requests
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`root`***`path`*`;`                          |
    | Default: | `root html;`                                   |
    | Context: | `http`, `server`, `location`, `if in location` |

    Sets the root directory for requests. For example, with the following configuration

    ``` nginx
    location /i/ {
        root /data/w3;
    }
    ```

    The `/data/w3/i/top.gif` file will be sent in response to the “`/i/top.gif`” request.

    The *`path`* value can contain variables, except `$document_root` and `$realpath_root`.

    A path to the file is constructed by merely adding a URI to the value of the `root` directive. If a URI has to be modified, the [alias](#alias) directive should be used.
- name: satisfy
  id: http/ngx_http_core_module#satisfy
  summary: Allows access if all (all) or at least one (any) of the ngx_http_access_module, ngx_http_auth_basic_module, ngx_http_auth_request_module, or ngx_http_auth_jwt_module modules allow access
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`satisfy`**` all | any;`   |
    | Default: | `satisfy all;`               |
    | Context: | `http`, `server`, `location` |

    Allows access if all (`all`) or at least one (`any`) of the [ngx_http_access_module](ngx_http_access_module), [ngx_http_auth_basic_module](ngx_http_auth_basic_module), [ngx_http_auth_request_module](ngx_http_auth_request_module), or [ngx_http_auth_jwt_module](ngx_http_auth_jwt_module) modules allow access.

    Example:

    ``` nginx
    location / {
        satisfy any;

        allow 192.168.1.0/32;
        deny  all;

        auth_basic           "closed site";
        auth_basic_user_file conf/htpasswd;
    }
    ```
- name: scgi_bind
  id: http/ngx_http_scgi_module#scgi_bind
  summary: Makes outgoing connections to an SCGI server originate from the specified local IP address with an optional port (1.11.2)
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`scgi_bind`***`address`*` [transparent] | off;` |
    | Default: | —                                                 |
    | Context: | `http`, `server`, `location`                      |

    Makes outgoing connections to an SCGI server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `scgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.

    The `transparent` parameter (1.11.0) allows outgoing connections to an SCGI server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    scgi_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the SCGI server.
- name: scgi_buffer_size
  id: http/ngx_http_scgi_module#scgi_buffer_size
  summary: Sets the size of the buffer used for reading the first part of the response received from the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`scgi_buffer_size`***`size`*`;` |
    | Default: | `scgi_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`      |

    Sets the *`size`* of the buffer used for reading the first part of the response received from the SCGI server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.
- name: scgi_buffering
  id: http/ngx_http_scgi_module#scgi_buffering
  summary: Enables or disables buffering of responses from the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`scgi_buffering`**` on | off;` |
    | Default: | `scgi_buffering on;`             |
    | Context: | `http`, `server`, `location`     |

    Enables or disables buffering of responses from the SCGI server.

    When buffering is enabled, nginx receives a response from the SCGI server as soon as possible, saving it into the buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#scgi_temp_path) on the disk. Writing to temporary files is controlled by the [scgi_max_temp_file_size](#scgi_max_temp_file_size) and [scgi_temp_file_write_size](#scgi_temp_file_write_size) directives.

    When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the SCGI server. The maximum size of the data that nginx can receive from the server at a time is set by the [scgi_buffer_size](#scgi_buffer_size) directive.

    Buffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [scgi_ignore_headers](#scgi_ignore_headers) directive.
- name: scgi_buffers
  id: http/ngx_http_scgi_module#scgi_buffers
  summary: Sets the number and size of the buffers used for reading a response from the SCGI server, for a single connection
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`scgi_buffers`***`numbersize`*`;` |
    | Default: | `scgi_buffers 8 4k|8k;`             |
    | Context: | `http`, `server`, `location`        |

    Sets the *`number`* and *`size`* of the buffers used for reading a response from the SCGI server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
- name: scgi_busy_buffers_size
  id: http/ngx_http_scgi_module#scgi_busy_buffers_size
  summary: When buffering of responses from the SCGI server is enabled, limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`scgi_busy_buffers_size`***`size`*`;` |
    | Default: | `scgi_busy_buffers_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`            |

    When [buffering](#scgi_buffering) of responses from the SCGI server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives.
- name: scgi_cache
  id: http/ngx_http_scgi_module#scgi_cache
  summary: Defines a shared memory zone used for caching
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`scgi_cache`***`zone`*` | off;` |
    | Default: | `scgi_cache off;`                 |
    | Context: | `http`, `server`, `location`      |

    Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.
- name: scgi_cache_background_update
  id: http/ngx_http_scgi_module#scgi_cache_background_update
  summary: This directive appeared in version 1.11.10
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`scgi_cache_background_update`**` on | off;` |
    | Default: | `scgi_cache_background_update off;`            |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.11.10.

    Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#scgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.
- name: scgi_cache_bypass
  id: http/ngx_http_scgi_module#scgi_cache_bypass
  summary: Defines conditions under which the response will not be taken from a cache
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`scgi_cache_bypass`***`string`*` ...;` |
    | Default: | —                                        |
    | Context: | `http`, `server`, `location`             |

    Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:

    ``` nginx
    scgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
    scgi_cache_bypass $http_pragma    $http_authorization;
    ```

    Can be used along with the [scgi_no_cache](#scgi_no_cache) directive.
- name: scgi_cache_key
  id: http/ngx_http_scgi_module#scgi_cache_key
  summary: null
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`scgi_cache_key`***`string`*`;` |
    | Default: | —                                 |
    | Context: | `http`, `server`, `location`      |

    Defines a key for caching, for example

    ``` nginx
    scgi_cache_key localhost:9000$request_uri;
    ```
- name: scgi_cache_lock
  id: http/ngx_http_scgi_module#scgi_cache_lock
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`scgi_cache_lock`**` on | off;` |
    | Default: | `scgi_cache_lock off;`            |
    | Context: | `http`, `server`, `location`      |

    This directive appeared in version 1.1.12.

    When enabled, only one request at a time will be allowed to populate a new cache element identified according to the [scgi_cache_key](#scgi_cache_key) directive by passing a request to an SCGI server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [scgi_cache_lock_timeout](#scgi_cache_lock_timeout) directive.
- name: scgi_cache_lock_age
  id: http/ngx_http_scgi_module#scgi_cache_lock_age
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`scgi_cache_lock_age`***`time`*`;` |
    | Default: | `scgi_cache_lock_age 5s;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.7.8.

    If the last request passed to the SCGI server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the SCGI server.
- name: scgi_cache_lock_timeout
  id: http/ngx_http_scgi_module#scgi_cache_lock_timeout
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`scgi_cache_lock_timeout`***`time`*`;` |
    | Default: | `scgi_cache_lock_timeout 5s;`            |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.1.12.

    Sets a timeout for [scgi_cache_lock](#scgi_cache_lock). When the *`time`* expires, the request will be passed to the SCGI server, however, the response will not be cached.

    Before 1.7.8, the response could be cached.
- name: scgi_cache_max_range_offset
  id: http/ngx_http_scgi_module#scgi_cache_max_range_offset
  summary: This directive appeared in version 1.11.6
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`scgi_cache_max_range_offset`***`number`*`;` |
    | Default: | —                                              |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.11.6.

    Sets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the SCGI server and the response will not be cached.
- name: scgi_cache_methods
  id: http/ngx_http_scgi_module#scgi_cache_methods
  summary: If the client request method is listed in this directive then the response will be cached
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`scgi_cache_methods`**` GET | HEAD | POST ...;` |
    | Default: | `scgi_cache_methods GET HEAD;`                    |
    | Context: | `http`, `server`, `location`                      |

    If the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [scgi_no_cache](#scgi_no_cache) directive.
- name: scgi_cache_min_uses
  id: http/ngx_http_scgi_module#scgi_cache_min_uses
  summary: Sets the number of requests after which the response will be cached
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`scgi_cache_min_uses`***`number`*`;` |
    | Default: | `scgi_cache_min_uses 1;`               |
    | Context: | `http`, `server`, `location`           |

    Sets the *`number`* of requests after which the response will be cached.
- name: scgi_cache_path
  id: http/ngx_http_scgi_module#scgi_cache_path
  summary: Sets the path and other parameters of a cache
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
    |----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`scgi_cache_path`***`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |
    | Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
    | Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                         |

    Sets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the [cache key](#scgi_cache_key). The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration

    ``` nginx
    scgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;
    ```

    file names in a cache will look like this:

    ``` nginx
    /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c
    ```

    A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [scgi_temp_path](#scgi_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.

    In addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.

    As part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.

    Cached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.

    The special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.

    A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.

    Additionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):

    `purger`=`on`\|`off`

    Instructs whether cache entries that match a [wildcard key](#scgi_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.

    `purger_files`=*`number`*

    Sets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.

    `purger_threshold`=*`number`*

    Sets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.

    `purger_sleep`=*`number`*

    Sets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.

    In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.
- name: scgi_cache_purge
  id: http/ngx_http_scgi_module#scgi_cache_purge
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`scgi_cache_purge`**` string ...;` |
    | Default: | —                                    |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.5.7.

    Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#scgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.

    If the [cache key](#scgi_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#scgi_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.

    Example configuration:

    ``` nginx
    scgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;

    map $request_method $purge_method {
        PURGE   1;
        default 0;
    }

    server {
        ...
        location / {
            scgi_pass        backend;
            scgi_cache       cache_zone;
            scgi_cache_key   $uri;
            scgi_cache_purge $purge_method;
        }
    }
    ```

    This functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: scgi_cache_revalidate
  id: http/ngx_http_scgi_module#scgi_cache_revalidate
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`scgi_cache_revalidate`**` on | off;` |
    | Default: | `scgi_cache_revalidate off;`            |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.5.7.

    Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.
- name: scgi_cache_use_stale
  id: http/ngx_http_scgi_module#scgi_cache_use_stale
  summary: Determines in which cases a stale cached response can be used when an error occurs during communication with the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                                                                                                            |
    |----------|--------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`scgi_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | http_429 | off ...;` |
    | Default: | `scgi_cache_use_stale off;`                                                                                                                |
    | Context: | `http`, `server`, `location`                                                                                                               |

    Determines in which cases a stale cached response can be used when an error occurs during communication with the SCGI server. The directive’s parameters match the parameters of the [scgi_next_upstream](#scgi_next_upstream) directive.

    The `error` parameter also permits using a stale cached response if an SCGI server to process a request cannot be selected.

    Additionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to SCGI servers when updating cached data.

    Using a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.

    - The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.
    - The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.

    To minimize the number of accesses to SCGI servers when populating a new cache element, the [scgi_cache_lock](#scgi_cache_lock) directive can be used.
- name: scgi_cache_valid
  id: http/ngx_http_scgi_module#scgi_cache_valid
  summary: Sets caching time for different response codes
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                       |
    |----------|-------------------------------------------------------|
    | Syntax:  | **`scgi_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |
    | Default: | —                                                     |
    | Context: | `http`, `server`, `location`                          |

    Sets caching time for different response codes. For example, the following directives

    ``` nginx
    scgi_cache_valid 200 302 10m;
    scgi_cache_valid 404      1m;
    ```

    set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.

    If only caching *`time`* is specified

    ``` nginx
    scgi_cache_valid 5m;
    ```

    then only 200, 301, and 302 responses are cached.

    In addition, the `any` parameter can be specified to cache any responses:

    ``` nginx
    scgi_cache_valid 200 302 10m;
    scgi_cache_valid 301      1h;
    scgi_cache_valid any      1m;
    ```

    Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.

    - The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.
    - If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.
    - If the header includes the “Set-Cookie” field, such a response will not be cached.
    - If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).

    Processing of one or more of these response header fields can be disabled using the [scgi_ignore_headers](#scgi_ignore_headers) directive.
- name: scgi_connect_timeout
  id: http/ngx_http_scgi_module#scgi_connect_timeout
  summary: Defines a timeout for establishing a connection with an SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`scgi_connect_timeout`***`time`*`;` |
    | Default: | `scgi_connect_timeout 60s;`           |
    | Context: | `http`, `server`, `location`          |

    Defines a timeout for establishing a connection with an SCGI server. It should be noted that this timeout cannot usually exceed 75 seconds.
- name: scgi_force_ranges
  id: http/ngx_http_scgi_module#scgi_force_ranges
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`scgi_force_ranges`**` on | off;` |
    | Default: | `scgi_force_ranges off;`            |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.7.7.

    Enables byte-range support for both cached and uncached responses from the SCGI server regardless of the “Accept-Ranges” field in these responses.
- name: scgi_hide_header
  id: http/ngx_http_scgi_module#scgi_hide_header
  summary: By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of an SCGI server to a client
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`scgi_hide_header`***`field`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of an SCGI server to a client. The `scgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [scgi_pass_header](#scgi_pass_header) directive can be used.
- name: scgi_ignore_client_abort
  id: http/ngx_http_scgi_module#scgi_ignore_client_abort
  summary: Determines whether the connection with an SCGI server should be closed when a client closes the connection without waiting for a response
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`scgi_ignore_client_abort`**` on | off;` |
    | Default: | `scgi_ignore_client_abort off;`            |
    | Context: | `http`, `server`, `location`               |

    Determines whether the connection with an SCGI server should be closed when a client closes the connection without waiting for a response.
- name: scgi_ignore_headers
  id: http/ngx_http_scgi_module#scgi_ignore_headers
  summary: Disables processing of certain response header fields from the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`scgi_ignore_headers`***`field`*` ...;` |
    | Default: | —                                         |
    | Context: | `http`, `server`, `location`              |

    Disables processing of certain response header fields from the SCGI server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).

    If not disabled, processing of these header fields has the following effect:

    - “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#scgi_cache_valid);
    - “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;
    - “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;
    - “X-Accel-Buffering” enables or disables [buffering](#scgi_buffering) of a response;
    - “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.
- name: scgi_intercept_errors
  id: http/ngx_http_scgi_module#scgi_intercept_errors
  summary: Determines whether an SCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`scgi_intercept_errors`**` on | off;` |
    | Default: | `scgi_intercept_errors off;`            |
    | Context: | `http`, `server`, `location`            |

    Determines whether an SCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.
- name: scgi_limit_rate
  id: http/ngx_http_scgi_module#scgi_limit_rate
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`scgi_limit_rate`***`rate`*`;` |
    | Default: | `scgi_limit_rate 0;`             |
    | Context: | `http`, `server`, `location`     |

    This directive appeared in version 1.7.7.

    Limits the speed of reading the response from the SCGI server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the SCGI server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#scgi_buffering) of responses from the SCGI server is enabled. Parameter value can contain variables (1.27.0).
- name: scgi_max_temp_file_size
  id: http/ngx_http_scgi_module#scgi_max_temp_file_size
  summary: When buffering of responses from the SCGI server is enabled, and the whole response does not fit into the buffers set by the scgi_buffer_size and scgi_buffers directives, a part of the response can be saved to a temporary file
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`scgi_max_temp_file_size`***`size`*`;` |
    | Default: | `scgi_max_temp_file_size 1024m;`         |
    | Context: | `http`, `server`, `location`             |

    When [buffering](#scgi_buffering) of responses from the SCGI server is enabled, and the whole response does not fit into the buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [scgi_temp_file_write_size](#scgi_temp_file_write_size) directive.

    The zero value disables buffering of responses to temporary files.

    This restriction does not apply to responses that will be [cached](#scgi_cache) or [stored](#scgi_store) on disk.
- name: scgi_next_upstream
  id: http/ngx_http_scgi_module#scgi_next_upstream
  summary: disables passing a request to the next server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                                                                                                                |
    |----------|------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`scgi_next_upstream`**` error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |
    | Default: | `scgi_next_upstream error timeout;`                                                                                                            |
    | Context: | `http`, `server`, `location`                                                                                                                   |

    Specifies in which cases a request should be passed to the next server:

    `error`

    an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `timeout`

    a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `invalid_header`

    a server returned an empty or invalid response;

    `http_500`

    a server returned a response with the code 500;

    `http_503`

    a server returned a response with the code 503;

    `http_403`

    a server returned a response with the code 403;

    `http_404`

    a server returned a response with the code 404;

    `http_429`

    a server returned a response with the code 429 (1.11.13);

    `non_idempotent`

    normally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;

    `off`

    disables passing a request to the next server.

    One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.

    The directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_503`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.

    Passing a request to the next server can be limited by [the number of tries](#scgi_next_upstream_tries) and by [time](#scgi_next_upstream_timeout).
- name: scgi_next_upstream_timeout
  id: http/ngx_http_scgi_module#scgi_next_upstream_timeout
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`scgi_next_upstream_timeout`***`time`*`;` |
    | Default: | `scgi_next_upstream_timeout 0;`             |
    | Context: | `http`, `server`, `location`                |

    This directive appeared in version 1.7.5.

    Limits the time during which a request can be passed to the [next server](#scgi_next_upstream). The `0` value turns off this limitation.
- name: scgi_next_upstream_tries
  id: http/ngx_http_scgi_module#scgi_next_upstream_tries
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`scgi_next_upstream_tries`***`number`*`;` |
    | Default: | `scgi_next_upstream_tries 0;`               |
    | Context: | `http`, `server`, `location`                |

    This directive appeared in version 1.7.5.

    Limits the number of possible tries for passing a request to the [next server](#scgi_next_upstream). The `0` value turns off this limitation.
- name: scgi_no_cache
  id: http/ngx_http_scgi_module#scgi_no_cache
  summary: Defines conditions under which the response will not be saved to a cache
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`scgi_no_cache`***`string`*` ...;` |
    | Default: | —                                    |
    | Context: | `http`, `server`, `location`         |

    Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:

    ``` nginx
    scgi_no_cache $cookie_nocache $arg_nocache$arg_comment;
    scgi_no_cache $http_pragma    $http_authorization;
    ```

    Can be used along with the [scgi_cache_bypass](#scgi_cache_bypass) directive.
- name: scgi_param
  id: http/ngx_http_scgi_module#scgi_param
  summary: Sets a parameter that should be passed to the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                      |
    |----------|------------------------------------------------------|
    | Syntax:  | **`scgi_param`***`parametervalue`*` [if_not_empty];` |
    | Default: | —                                                    |
    | Context: | `http`, `server`, `location`                         |

    Sets a *`parameter`* that should be passed to the SCGI server. The *`value`* can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `scgi_param` directives defined on the current level.

    Standard [CGI environment variables](https://datatracker.ietf.org/doc/html/rfc3875#section-4.1) should be provided as SCGI headers, see the `scgi_params` file provided in the distribution:

    ``` nginx
    location / {
        include scgi_params;
        ...
    }
    ```

    If the directive is specified with `if_not_empty` (1.1.11) then such a parameter will be passed to the server only if its value is not empty:

    ``` nginx
    scgi_param HTTPS $https if_not_empty;
    ```
- name: scgi_pass
  id: http/ngx_http_scgi_module#scgi_pass
  summary: Sets the address of an SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`scgi_pass`***`address`*`;` |
    | Default: | —                             |
    | Context: | `location`, `if in location`  |

    Sets the address of an SCGI server. The address can be specified as a domain name or IP address, and a port:

    ``` nginx
    scgi_pass localhost:9000;
    ```

    or as a UNIX-domain socket path:

    ``` nginx
    scgi_pass unix:/tmp/scgi.socket;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).

    Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).
- name: scgi_pass_header
  id: http/ngx_http_scgi_module#scgi_pass_header
  summary: Permits passing otherwise disabled header fields from an SCGI server to a client
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`scgi_pass_header`***`field`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    Permits passing [otherwise disabled](#scgi_hide_header) header fields from an SCGI server to a client.
- name: scgi_pass_request_body
  id: http/ngx_http_scgi_module#scgi_pass_request_body
  summary: Indicates whether the original request body is passed to the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`scgi_pass_request_body`**` on | off;` |
    | Default: | `scgi_pass_request_body on;`             |
    | Context: | `http`, `server`, `location`             |

    Indicates whether the original request body is passed to the SCGI server. See also the [scgi_pass_request_headers](#scgi_pass_request_headers) directive.
- name: scgi_pass_request_headers
  id: http/ngx_http_scgi_module#scgi_pass_request_headers
  summary: Indicates whether the header fields of the original request are passed to the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`scgi_pass_request_headers`**` on | off;` |
    | Default: | `scgi_pass_request_headers on;`             |
    | Context: | `http`, `server`, `location`                |

    Indicates whether the header fields of the original request are passed to the SCGI server. See also the [scgi_pass_request_body](#scgi_pass_request_body) directive.
- name: scgi_read_timeout
  id: http/ngx_http_scgi_module#scgi_read_timeout
  summary: Defines a timeout for reading a response from the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`scgi_read_timeout`***`time`*`;` |
    | Default: | `scgi_read_timeout 60s;`           |
    | Context: | `http`, `server`, `location`       |

    Defines a timeout for reading a response from the SCGI server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the SCGI server does not transmit anything within this time, the connection is closed.
- name: scgi_request_buffering
  id: http/ngx_http_scgi_module#scgi_request_buffering
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`scgi_request_buffering`**` on | off;` |
    | Default: | `scgi_request_buffering on;`             |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.7.11.

    Enables or disables buffering of a client request body.

    When buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to an SCGI server.

    When buffering is disabled, the request body is sent to the SCGI server immediately as it is received. In this case, the request cannot be passed to the [next server](#scgi_next_upstream) if nginx already started sending the request body.

    When HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value.
- name: scgi_send_timeout
  id: http/ngx_http_scgi_module#scgi_send_timeout
  summary: Sets a timeout for transmitting a request to the SCGI server
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`scgi_send_timeout`***`time`*`;` |
    | Default: | `scgi_send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`       |

    Sets a timeout for transmitting a request to the SCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the SCGI server does not receive anything within this time, the connection is closed.
- name: scgi_socket_keepalive
  id: http/ngx_http_scgi_module#scgi_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`scgi_socket_keepalive`**` on | off;` |
    | Default: | `scgi_socket_keepalive off;`            |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.15.6.

    Configures the “TCP keepalive” behavior for outgoing connections to an SCGI server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.
- name: scgi_store
  id: http/ngx_http_scgi_module#scgi_store
  summary: Enables saving of files to a disk
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`scgi_store`**` on | off | `*`string`*`;` |
    | Default: | `scgi_store off;`                           |
    | Context: | `http`, `server`, `location`                |

    Enables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:

    ``` nginx
    scgi_store /data/www$original_uri;
    ```

    The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [scgi_temp_path](#scgi_temp_path) directive, are put on the same file system.

    This directive can be used to create local copies of static unchangeable files, e.g.:

    ``` nginx
    location /images/ {
        root              /data/www;
        error_page        404 = /fetch$uri;
    }

    location /fetch/ {
        internal;

        scgi_pass         backend:9000;
        ...

        scgi_store        on;
        scgi_store_access user:rw group:rw all:r;
        scgi_temp_path    /data/temp;

        alias             /data/www/;
    }
    ```
- name: scgi_store_access
  id: http/ngx_http_scgi_module#scgi_store_access
  summary: null
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                                           |
    |----------|-----------------------------------------------------------|
    | Syntax:  | **`scgi_store_access`***`users`*`:`*`permissions`*` ...;` |
    | Default: | `scgi_store_access user:rw;`                              |
    | Context: | `http`, `server`, `location`                              |

    Sets access permissions for newly created files and directories, e.g.:

    ``` nginx
    scgi_store_access user:rw group:rw all:r;
    ```

    If any `group` or `all` access permissions are specified then `user` permissions may be omitted:

    ``` nginx
    scgi_store_access group:rw all:r;
    ```
- name: scgi_temp_file_write_size
  id: http/ngx_http_scgi_module#scgi_temp_file_write_size
  summary: Limits the size of data written to a temporary file at a time, when buffering of responses from the SCGI server to temporary files is enabled
  belongs_to: ngx_http_scgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`scgi_temp_file_write_size`***`size`*`;` |
    | Default: | `scgi_temp_file_write_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`               |

    Limits the *`size`* of data written to a temporary file at a time, when buffering of responses from the SCGI server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [scgi_buffer_size](#scgi_buffer_size) and [scgi_buffers](#scgi_buffers) directives. The maximum size of a temporary file is set by the [scgi_max_temp_file_size](#scgi_max_temp_file_size) directive.
- name: scgi_temp_path
  id: http/ngx_http_scgi_module#scgi_temp_path
  summary: Defines a directory for storing temporary files with data received from SCGI servers
  belongs_to: ngx_http_scgi_module
  description: "|          |                                                                              |\n|----------|------------------------------------------------------------------------------|\n| Syntax:  | **`scgi_temp_path`***`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `scgi_temp_path scgi_temp;`                                                  |\n| Context: | `http`, `server`, `location`                                                 |\n\nDefines a directory for storing temporary files with data received from SCGI servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nscgi_temp_path /spool/nginx/scgi_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/scgi_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [scgi_cache_path](#scgi_cache_path) directive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_scgi_module.html](https://nginx.org/en/docs/http/ngx_http_scgi_module.html)"
- name: secure_link
  id: http/ngx_http_secure_link_module#secure_link
  summary: Defines a string with variables from which the checksum value and lifetime of a link will be extracted
  belongs_to: ngx_http_secure_link_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`secure_link`***`expression`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    Defines a string with variables from which the checksum value and lifetime of a link will be extracted.

    Variables used in an *`expression`* are usually associated with a request; see [example](#secure_link_md5) below.

    The checksum value extracted from the string is compared with the MD5 hash value of the expression defined by the [secure_link_md5](#secure_link_md5) directive. If the checksums are different, the `$secure_link` variable is set to an empty string. If the checksums are the same, the link lifetime is checked. If the link has a limited lifetime and the time has expired, the `$secure_link` variable is set to “`0`”. Otherwise, it is set to “`1`”. The MD5 hash value passed in a request is encoded in [base64url](https://datatracker.ietf.org/doc/html/rfc4648#section-5).

    If a link has a limited lifetime, the expiration time is set in seconds since Epoch (Thu, 01 Jan 1970 00:00:00 GMT). The value is specified in the expression after the MD5 hash, and is separated by a comma. The expiration time passed in a request is available through the `$secure_link_expires` variable for a use in the [secure_link_md5](#secure_link_md5) directive. If the expiration time is not specified, a link has the unlimited lifetime.
- name: secure_link_md5
  id: http/ngx_http_secure_link_module#secure_link_md5
  summary: Defines an expression for which the MD5 hash value will be computed and compared with the value passed in a request
  belongs_to: ngx_http_secure_link_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`secure_link_md5`***`expression`*`;` |
    | Default: | —                                      |
    | Context: | `http`, `server`, `location`           |

    Defines an expression for which the MD5 hash value will be computed and compared with the value passed in a request.

    The expression should contain the secured part of a link (resource) and a secret ingredient. If the link has a limited lifetime, the expression should also contain `$secure_link_expires`.

    To prevent unauthorized access, the expression may contain some information about the client, such as its address and browser version.

    Example:

    ``` nginx
    location /s/ {
        secure_link $arg_md5,$arg_expires;
        secure_link_md5 "$secure_link_expires$uri$remote_addr secret";

        if ($secure_link = "") {
            return 403;
        }

        if ($secure_link = "0") {
            return 410;
        }

        ...
    }
    ```

    The “`/s/link?md5=_e4Nc3iduzkWRm01TBBNYw&expires=2147483647`” link restricts access to “`/s/link`” for the client with the IP address 127.0.0.1. The link also has the limited lifetime until January 19, 2038 (GMT).

    On UNIX, the *`md5`* request argument value can be obtained as:

    ``` nginx
    echo -n '2147483647/s/link127.0.0.1 secret' | \
        openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d =
    ```
- name: secure_link_secret
  id: http/ngx_http_secure_link_module#secure_link_secret
  summary: Defines a secret word used to check authenticity of requested links
  belongs_to: ngx_http_secure_link_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`secure_link_secret`***`word`*`;` |\n| Default: | —                                   |\n| Context: | `location`                          |\n\nDefines a secret *`word`* used to check authenticity of requested links.\n\nThe full URI of a requested link looks as follows:\n\n``` nginx\n/prefix/hash/link\n```\n\nwhere *`hash`* is a hexadecimal representation of the MD5 hash computed for the concatenation of the link and secret word, and *`prefix`* is an arbitrary string without slashes.\n\nIf the requested link passes the authenticity check, the `$secure_link` variable is set to the link extracted from the request URI. Otherwise, the `$secure_link` variable is set to an empty string.\n\nExample:\n\n``` nginx\nlocation /p/ {\n    secure_link_secret secret;\n\n    if ($secure_link = \"\") {\n        return 403;\n    }\n\n    rewrite ^ /secure/$secure_link;\n}\n\nlocation /secure/ {\n    internal;\n}\n```\n\nA request of “`/p/5e814704a28d9bc1914ff19fa0c4a00a/link`” will be internally redirected to “`/secure/link`”.\n\nOn UNIX, the hash value for this example can be obtained as:\n\n``` nginx\necho -n 'linksecret' | openssl md5 -hex\n```\n\n#### Embedded Variables\n\n`$secure_link`\n\nThe status of a link check. The specific value depends on the selected operation mode.\n\n`$secure_link_expires`\n\nThe lifetime of a link passed in a request; intended to be used only in the [secure_link_md5](#secure_link_md5) directive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_secure_link_module.html](https://nginx.org/en/docs/http/ngx_http_secure_link_module.html)"
- name: Security
  id: njs/security
  summary: All njs security issues should be reported to security-alert@nginx.org
  description: "# Security\n\nAll njs security issues should be reported to `security-alert@nginx.org`.\n\nPatches are signed using one of the [PGP public keys](https://nginx.org/en/pgp_keys.html).\n\n#### Special considerations\n\nnjs does not evaluate dynamic code and especially the code received from the network in any way. The only way to evaluate that code using njs is to configure the [js_import](../http/ngx_http_js_module#js_import) directive in nginx. JavaScript code is loaded once during nginx start.\n\nIn nginx/njs threat model, JavaScript code is considered a trusted source in the same way as `nginx.conf` and sites certificates. What this means in practice:\n\n- memory disclosure and other security issues triggered by JavaScript code modification are not considered security issues, but as ordinary bugs\n- measures should be taking for protecting JavaScript code used by njs\n- if no [js_import](../http/ngx_http_js_module#js_import) directives are present in `nginx.conf`, nginx is safe from JavaScript-related vulnerabilities\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/security.html](https://nginx.org/en/docs/njs/security.html)"
- name: send_lowat
  id: http/ngx_http_core_module#send_lowat
  summary: If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on client sockets by using either NOTE_LOWAT flag of the kqueue method or the SO_SNDLOWAT socket option
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`send_lowat`***`size`*`;`  |
    | Default: | `send_lowat 0;`              |
    | Context: | `http`, `server`, `location` |

    If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on client sockets by using either `NOTE_LOWAT` flag of the [kqueue](../events#kqueue) method or the `SO_SNDLOWAT` socket option. In both cases the specified *`size`* is used.

    This directive is ignored on Linux, Solaris, and Windows.
- name: send_timeout
  id: http/ngx_http_core_module#send_timeout
  summary: Sets a timeout for transmitting a response to the client
  belongs_to: ngx_http_core_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`send_timeout`***`time`*`;` |
    | Default: | `send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`  |

    Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed.
- name: send_timeout (ngx_mgmt_module)
  id: ngx_mgmt_module#send_timeout
  summary: Sets a timeout for transmitting a request to the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`send_timeout`***`time`*`;` |
    | Default: | `send_timeout 60s;`           |
    | Context: | `mgmt`                        |

    Sets a timeout for transmitting a request to the Instance Manager. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the Instance Manager does not receive anything within this time, the connection is closed.
- name: sendfile
  id: http/ngx_http_core_module#sendfile
  summary: Enables or disables the use of sendfile()
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`sendfile`**` on | off;`                     |
    | Default: | `sendfile off;`                                |
    | Context: | `http`, `server`, `location`, `if in location` |

    Enables or disables the use of `sendfile()`.

    Starting from nginx 0.8.12 and FreeBSD 5.2.1, [aio](#aio) can be used to pre-load data for `sendfile()`:

    ``` nginx
    location /video/ {
        sendfile       on;
        tcp_nopush     on;
        aio            on;
    }
    ```

    In this configuration, `sendfile()` is called with the `SF_NODISKIO` flag which causes it not to block on disk I/O, but, instead, report back that the data are not in memory. nginx then initiates an asynchronous data load by reading one byte. On the first read, the FreeBSD kernel loads the first 128K bytes of a file into memory, although next reads will only load data in 16K chunks. This can be changed using the [read_ahead](#read_ahead) directive.

    Before version 1.7.11, pre-loading could be enabled with `aio sendfile;`.
- name: sendfile_max_chunk
  id: http/ngx_http_core_module#sendfile_max_chunk
  summary: Limits the amount of data that can be transferred in a single sendfile() call
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`sendfile_max_chunk`***`size`*`;` |
    | Default: | `sendfile_max_chunk 2m;`            |
    | Context: | `http`, `server`, `location`        |

    Limits the amount of data that can be transferred in a single `sendfile()` call. Without the limit, one fast connection may seize the worker process entirely.

    Prior to version 1.21.4, by default there was no limit.
- name: server
  id: http/ngx_http_upstream_module#server
  summary: Defines the address and other parameters of a server
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`server`***`address`*` [`*`parameters`*`];` |
    | Default: | —                                             |
    | Context: | `upstream`                                    |

    Defines the *`address`* and other *`parameters`* of a server. The address can be specified as a domain name or IP address, with an optional port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. If a port is not specified, the port 80 is used. A domain name that resolves to several IP addresses defines multiple servers at once.

    The following parameters can be defined:

    `weight`=*`number`*

    sets the weight of the server, by default, 1.

    `max_conns`=*`number`*

    limits the maximum *`number`* of simultaneous active connections to the proxied server (1.11.5). Default value is zero, meaning there is no limit. If the server group does not reside in the [shared memory](#zone), the limitation works per each worker process.

    If [idle keepalive](#keepalive) connections, multiple [workers](../ngx_core_module#worker_processes), and the [shared memory](#zone) are enabled, the total number of active and idle connections to the proxied server may exceed the `max_conns` value.

    Since version 1.5.9 and prior to version 1.11.5, this parameter was available as part of our [commercial subscription](https://www.f5.com/products/nginx).

    `max_fails`=*`number`*

    sets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the `fail_timeout` parameter to consider the server unavailable for a duration also set by the `fail_timeout` parameter. By default, the number of unsuccessful attempts is set to 1. The zero value disables the accounting of attempts. What is considered an unsuccessful attempt is defined by the [proxy_next_upstream](ngx_http_proxy_module#proxy_next_upstream), [fastcgi_next_upstream](ngx_http_fastcgi_module#fastcgi_next_upstream), [uwsgi_next_upstream](ngx_http_uwsgi_module#uwsgi_next_upstream), [scgi_next_upstream](ngx_http_scgi_module#scgi_next_upstream), [memcached_next_upstream](ngx_http_memcached_module#memcached_next_upstream), and [grpc_next_upstream](ngx_http_grpc_module#grpc_next_upstream) directives.

    `fail_timeout`=*`time`*

    sets

    - the time during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable;
    - and the period of time the server will be considered unavailable.

    By default, the parameter is set to 10 seconds.

    `backup`

    marks the server as a backup server. It will be passed requests when the primary servers are unavailable.

    The parameter cannot be used along with the [hash](#hash), [ip_hash](#ip_hash), and [random](#random) load balancing methods.

    `down`

    marks the server as permanently unavailable.

    Additionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):

    `resolve`

    monitors changes of the IP addresses that correspond to a domain name of the server, and automatically modifies the upstream configuration without the need of restarting nginx (1.5.12). The server group must reside in the [shared memory](#zone).

    In order for this parameter to work, the `resolver` directive must be specified in the [http](ngx_http_core_module#resolver) block or in the corresponding [upstream](#resolver) block.

    `route`=*`string`*

    sets the server route name.

    `service`=*`name`*

    enables resolving of DNS [SRV](https://datatracker.ietf.org/doc/html/rfc2782) records and sets the service *`name`* (1.9.13). In order for this parameter to work, it is necessary to specify the [resolve](#resolve) parameter for the server and specify a hostname without a port number.

    If the service name does not contain a dot (“`.`”), then the [RFC](https://datatracker.ietf.org/doc/html/rfc2782)-compliant name is constructed and the TCP protocol is added to the service prefix. For example, to look up the `_http._tcp.backend.example.com` SRV record, it is necessary to specify the directive:

    ``` nginx
    server backend.example.com service=http resolve;
    ```

    If the service name contains one or more dots, then the name is constructed by joining the service prefix and the server name. For example, to look up the `_http._tcp.backend.example.com` and `server1.backend.example.com` SRV records, it is necessary to specify the directives:

    ``` nginx
    server backend.example.com service=_http._tcp resolve;
    server example.com service=server1.backend resolve;
    ```

    Highest-priority SRV records (records with the same lowest-number priority value) are resolved as primary servers, the rest of SRV records are resolved as backup servers. If the [backup](#backup) parameter is specified for the server, high-priority SRV records are resolved as backup servers, the rest of SRV records are ignored.

    `slow_start`=*`time`*

    sets the *`time`* during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes [healthy](ngx_http_upstream_hc_module#health_check), or when the server becomes available after a period of time it was considered [unavailable](#fail_timeout). Default value is zero, i.e. slow start is disabled.

    The parameter cannot be used along with the [hash](#hash), [ip_hash](#ip_hash), and [random](#random) load balancing methods.

    `drain`

    puts the server into the “draining” mode (1.13.6). In this mode, only requests [bound](#sticky) to the server will be proxied to it.

    Prior to version 1.13.6, the parameter could be changed only with the [API](ngx_http_api_module) module.

    If there is only a single server in a group, `max_fails`, `fail_timeout` and `slow_start` parameters are ignored, and such a server will never be considered unavailable.
- name: server
  id: http/ngx_http_core_module#server
  summary: Sets configuration for a virtual server
  belongs_to: ngx_http_core_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`server`**` { ... }` |
    | Default: | —                      |
    | Context: | `http`                 |

    Sets configuration for a virtual server. There is no clear separation between IP-based (based on the IP address) and name-based (based on the “Host” request header field) virtual servers. Instead, the [listen](#listen) directives describe all addresses and ports that should accept connections for the server, and the [server_name](#server_name) directive lists all server names. Example configurations are provided in the “[How nginx processes a request](request_processing)” document.
- name: server (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#server
  summary: Sets the configuration for a server
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`server`**` { ... }` |
    | Default: | —                      |
    | Context: | `mail`                 |

    Sets the configuration for a server.
- name: server (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#server
  summary: Sets the configuration for a virtual server
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`server`**` { ... }` |
    | Default: | —                      |
    | Context: | `stream`               |

    Sets the configuration for a virtual server. There is no clear separation between IP-based (based on the IP address) and name-based (based on the [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066)) (1.25.5) virtual servers. Instead, the [listen](#listen) directives describe all addresses and ports that should accept connections for the server, and the [server_name](#server_name) directive lists all server names.
- name: server (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#server
  summary: Defines the address and other parameters of a server
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`server`***`address`*` [`*`parameters`*`];` |
    | Default: | —                                             |
    | Context: | `upstream`                                    |

    Defines the *`address`* and other *`parameters`* of a server. The address can be specified as a domain name or IP address with an obligatory port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. A domain name that resolves to several IP addresses defines multiple servers at once.

    The following parameters can be defined:

    `weight`=*`number`*

    sets the weight of the server, by default, 1.

    `max_conns`=*`number`*

    limits the maximum *`number`* of simultaneous connections to the proxied server (1.11.5). Default value is zero, meaning there is no limit. If the server group does not reside in the [shared memory](#zone), the limitation works per each worker process.

    Prior to version 1.11.5, this parameter was available as part of our [commercial subscription](https://www.f5.com/products/nginx).

    `max_fails`=*`number`*

    sets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the `fail_timeout` parameter to consider the server unavailable for a duration also set by the `fail_timeout` parameter. By default, the number of unsuccessful attempts is set to 1. The zero value disables the accounting of attempts. Here, an unsuccessful attempt is an error or timeout while establishing a connection with the server.

    `fail_timeout`=*`time`*

    sets

    - the time during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable;
    - and the period of time the server will be considered unavailable.

    By default, the parameter is set to 10 seconds.

    `backup`

    marks the server as a backup server. Connections to the backup server will be passed when the primary servers are unavailable.

    The parameter cannot be used along with the [hash](#hash) and [random](#random) load balancing methods.

    `down`

    marks the server as permanently unavailable.

    Additionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):

    `resolve`

    monitors changes of the IP addresses that correspond to a domain name of the server, and automatically modifies the upstream configuration without the need of restarting nginx. The server group must reside in the [shared memory](#zone).

    In order for this parameter to work, the `resolver` directive must be specified in the [stream](ngx_stream_core_module#resolver) block or in the corresponding [upstream](#resolver) block.

    `service`=*`name`*

    enables resolving of DNS [SRV](https://datatracker.ietf.org/doc/html/rfc2782) records and sets the service *`name`* (1.9.13). In order for this parameter to work, it is necessary to specify the [resolve](#resolve) parameter for the server and specify a hostname without a port number.

    If the service name does not contain a dot (“`.`”), then the [RFC](https://datatracker.ietf.org/doc/html/rfc2782)-compliant name is constructed and the TCP protocol is added to the service prefix. For example, to look up the `_http._tcp.backend.example.com` SRV record, it is necessary to specify the directive:

    ``` nginx
    server backend.example.com service=http resolve;
    ```

    If the service name contains one or more dots, then the name is constructed by joining the service prefix and the server name. For example, to look up the `_http._tcp.backend.example.com` and `server1.backend.example.com` SRV records, it is necessary to specify the directives:

    ``` nginx
    server backend.example.com service=_http._tcp resolve;
    server example.com service=server1.backend resolve;
    ```

    Highest-priority SRV records (records with the same lowest-number priority value) are resolved as primary servers, the rest of SRV records are resolved as backup servers. If the [backup](#backup) parameter is specified for the server, high-priority SRV records are resolved as backup servers, the rest of SRV records are ignored.

    `slow_start`=*`time`*

    sets the *`time`* during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes [healthy](ngx_stream_upstream_hc_module#health_check), or when the server becomes available after a period of time it was considered [unavailable](#fail_timeout). Default value is zero, i.e. slow start is disabled.

    The parameter cannot be used along with the [hash](#hash) and [random](#random) load balancing methods.

    If there is only a single server in a group, `max_fails`, `fail_timeout` and `slow_start` parameters are ignored, and such a server will never be considered unavailable.
- name: Server names
  id: http/server_names
  summary: Server names are defined using the server_name directive and determine which server block is used for a given request
  description: "# Server names\n\n- [Wildcard names](#wildcard_names)\n- [Regular expressions names](#regex_names)\n- [Miscellaneous names](#miscellaneous_names)\n- [Internationalized names](#idn)\n- [Virtual server selection](#virtual_server_selection)\n- [Optimization](#optimization)\n- [Compatibility](#compatibility)\n\nServer names are defined using the [server_name](ngx_http_core_module#server_name) directive and determine which [server](ngx_http_core_module#server) block is used for a given request. See also “[How nginx processes a request](request_processing)”. They may be defined using exact names, wildcard names, or regular expressions:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  *.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  mail.*;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  ~^(?<user>.+)\\.example\\.net$;\n    ...\n}\n```\n\nWhen searching for a virtual server by name, if name matches more than one of the specified variants, e.g. both wildcard name and regular expression match, the first matching variant will be chosen, in the following order of precedence:\n\n1.  exact name\n2.  longest wildcard name starting with an asterisk, e.g. “`*.example.org`”\n3.  longest wildcard name ending with an asterisk, e.g. “`mail.*`”\n4.  first matching regular expression (in order of appearance in a configuration file)\n\n#### Wildcard names\n\nA wildcard name may contain an asterisk only on the name’s start or end, and only on a dot border. The names “`www.*.example.org`” and “`w*.example.org`” are invalid. However, these names can be specified using regular expressions, for example, “`~^www\\..+\\.example\\.org$`” and “`~^w.*\\.example\\.org$`”. An asterisk can match several name parts. The name “`*.example.org`” matches not only `www.example.org` but `www.sub.example.org` as well.\n\nA special wildcard name in the form “`.example.org`” can be used to match both the exact name “`example.org`” and the wildcard name “`*.example.org`”.\n\n#### Regular expressions names\n\nThe regular expressions used by nginx are compatible with those used by the Perl programming language (PCRE). To use a regular expression, the server name must start with the tilde character:\n\n``` nginx\nserver_name  ~^www\\d+\\.example\\.net$;\n```\n\notherwise it will be treated as an exact name, or if the expression contains an asterisk, as a wildcard name (and most likely as an invalid one). Do not forget to set “`^`” and “`$`” anchors. They are not required syntactically, but logically. Also note that domain name dots should be escaped with a backslash. A regular expression containing the characters “`{`” and “`}`” should be quoted:\n\n``` nginx\nserver_name  \"~^(?<name>\\w\\d{1,3}+)\\.example\\.net$\";\n```\n\notherwise nginx will fail to start and display the error message:\n\n``` nginx\ndirective \"server_name\" is not terminated by \";\" in ...\n```\n\nA named regular expression capture can be used later as a variable:\n\n``` nginx\nserver {\n    server_name   ~^(www\\.)?(?<domain>.+)$;\n\n    location / {\n        root   /sites/$domain;\n    }\n}\n```\n\nThe PCRE library supports named captures using the following syntax:\n\n|                  |                                                       |\n|------------------|-------------------------------------------------------|\n| `?<`*`name`*`>`  | Perl 5.10 compatible syntax, supported since PCRE-7.0 |\n| `?'`*`name`*`'`  | Perl 5.10 compatible syntax, supported since PCRE-7.0 |\n| `?P<`*`name`*`>` | Python compatible syntax, supported since PCRE-4.0    |\n\nIf nginx fails to start and displays the error message:\n\n``` nginx\npcre_compile() failed: unrecognized character after (?< in ...\n```\n\nthis means that the PCRE library is old and the syntax “`?P<`*`name`*`>`” should be tried instead. The captures can also be used in digital form:\n\n``` nginx\nserver {\n    server_name   ~^(www\\.)?(.+)$;\n\n    location / {\n        root   /sites/$2;\n    }\n}\n```\n\nHowever, such usage should be limited to simple cases (like the above), since the digital references can easily be overwritten.\n\n#### Miscellaneous names\n\nThere are some server names that are treated specially.\n\nIf it is required to process requests without the “Host” header field in a [server](ngx_http_core_module#server) block which is not the default, an empty name should be specified:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  \"\";\n    ...\n}\n```\n\nIf no [server_name](ngx_http_core_module#server_name) is defined in a [server](ngx_http_core_module#server) block then nginx uses the empty name as the server name.\n\nnginx versions up to 0.8.48 used the machine’s hostname as the server name in this case.\n\nIf a server name is defined as “`$hostname`” (0.9.4), the machine’s hostname is used.\n\nIf someone makes a request using an IP address instead of a server name, the “Host” request header field will contain the IP address and the request can be handled using the IP address as the server name:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  example.org\n                 www.example.org\n                 \"\"\n                 192.168.1.1\n                 ;\n    ...\n}\n```\n\nIn catch-all server examples the strange name “`_`” can be seen:\n\n``` nginx\nserver {\n    listen       80  default_server;\n    server_name  _;\n    return       444;\n}\n```\n\nThere is nothing special about this name, it is just one of a myriad of invalid domain names which never intersect with any real name. Other invalid names like “`--`” and “`!@#`” may equally be used.\n\nnginx versions up to 0.6.25 supported the special name “`*`” which was erroneously interpreted to be a catch-all name. It never functioned as a catch-all or wildcard server name. Instead, it supplied the functionality that is now provided by the [server_name_in_redirect](ngx_http_core_module#server_name_in_redirect) directive. The special name “`*`” is now deprecated and the [server_name_in_redirect](ngx_http_core_module#server_name_in_redirect) directive should be used. Note that there is no way to specify the catch-all name or the default server using the [server_name](ngx_http_core_module#server_name) directive. This is a property of the [listen](ngx_http_core_module#listen) directive and not of the [server_name](ngx_http_core_module#server_name) directive. See also “[How nginx processes a request](request_processing)”. It is possible to define servers listening on ports \\*:80 and \\*:8080, and direct that one will be the default server for port \\*:8080, while the other will be the default for port \\*:80:\n\n``` nginx\nserver {\n    listen       80;\n    listen       8080  default_server;\n    server_name  example.net;\n    ...\n}\n\nserver {\n    listen       80  default_server;\n    listen       8080;\n    server_name  example.org;\n    ...\n}\n```\n\n#### Internationalized names\n\nInternationalized domain names ([IDNs](https://en.wikipedia.org/wiki/Internationalized_domain_name)) should be specified using an ASCII (Punycode) representation in the [server_name](ngx_http_core_module#server_name) directive:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  xn--e1afmkfd.xn--80akhbyknj4f;  # пример.испытание\n    ...\n}\n```\n\n#### Virtual server selection\n\nFirst, a connection is created in a default server context. Then, the server name can be determined in the following request processing stages, each involved in server configuration selection:\n\n- during SSL handshake, in advance, according to [SNI](configuring_https_servers#sni)\n\n- after processing the request line\n\n- after processing the `Host` header field\n\n- if the server name was not determined after processing the request line or from the `Host` header field, nginx will use the empty name as the server name.\n\nAt each of these stages, different server configurations can be applied. As such, certain directives should be specified with caution:\n\n- in case of the [ssl_protocols](ngx_http_ssl_module#ssl_protocols) directive, the protocol list is set by the OpenSSL library before the server configuration could be applied according to the name requested through SNI, thus, protocols should be specified only for a default server;\n- the [client_header_buffer_size](ngx_http_core_module#client_header_buffer_size) and [merge_slashes](ngx_http_core_module#merge_slashes) directives are involved before reading the request line, thus, such directives use a default server configuration or the server configuration chosen by SNI;\n- in case of the [ignore_invalid_headers](ngx_http_core_module#ignore_invalid_headers), [large_client_header_buffers](ngx_http_core_module#large_client_header_buffers), and [underscores_in_headers](ngx_http_core_module#underscores_in_headers) directives involved in processing request header fields, it additionally depends whether the server configuration was updated according to the request line or the `Host` header field;\n- an error response will be handled with the [error_page](ngx_http_core_module#error_page) directive in the server that currently fulfills the request.\n\n#### Optimization\n\nExact names, wildcard names starting with an asterisk, and wildcard names ending with an asterisk are stored in three hash tables bound to the listen ports. The sizes of hash tables are optimized at the configuration phase so that a name can be found with the fewest CPU cache misses. The details of setting up hash tables are provided in a separate [document](../hash).\n\nThe exact names hash table is searched first. If a name is not found, the hash table with wildcard names starting with an asterisk is searched. If the name is not found there, the hash table with wildcard names ending with an asterisk is searched.\n\nSearching wildcard names hash table is slower than searching exact names hash table because names are searched by domain parts. Note that the special wildcard form “`.example.org`” is stored in a wildcard names hash table and not in an exact names hash table.\n\nRegular expressions are tested sequentially and therefore are the slowest method and are non-scalable.\n\nFor these reasons, it is better to use exact names where possible. For example, if the most frequently requested names of a server are `example.org` and `www.example.org`, it is more efficient to define them explicitly:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  *.example.org;\n    ...\n}\n```\n\nthan to use the simplified form:\n\n``` nginx\nserver {\n    listen       80;\n    server_name  .example.org;\n    ...\n}\n```\n\nIf a large number of server names are defined, or unusually long server names are defined, tuning the [server_names_hash_max_size](ngx_http_core_module#server_names_hash_max_size) and [server_names_hash_bucket_size](ngx_http_core_module#server_names_hash_bucket_size) directives at the *http* level may become necessary. The default value of the [server_names_hash_bucket_size](ngx_http_core_module#server_names_hash_bucket_size) directive may be equal to 32, or 64, or another value, depending on CPU cache line size. If the default value is 32 and server name is defined as “`too.long.server.name.example.org`” then nginx will fail to start and display the error message:\n\n``` nginx\ncould not build the server_names_hash,\nyou should increase server_names_hash_bucket_size: 32\n```\n\nIn this case, the directive value should be increased to the next power of two:\n\n``` nginx\nhttp {\n    server_names_hash_bucket_size  64;\n    ...\n```\n\nIf a large number of server names are defined, another error message will appear:\n\n``` nginx\ncould not build the server_names_hash,\nyou should increase either server_names_hash_max_size: 512\nor server_names_hash_bucket_size: 32\n```\n\nIn such a case, first try to set [server_names_hash_max_size](ngx_http_core_module#server_names_hash_max_size) to a number close to the number of server names. Only if this does not help, or if nginx’s start time is unacceptably long, try to increase [server_names_hash_bucket_size](ngx_http_core_module#server_names_hash_bucket_size).\n\nIf a server is the only server for a listen port, then nginx will not test server names at all (and will not build the hash tables for the listen port). However, there is one exception. If a server name is a regular expression with captures, then nginx has to execute the expression to get the captures.\n\n#### Compatibility\n\n- The special server name “`$hostname`” has been supported since 0.9.4.\n- A default server name value is an empty name “” since 0.8.48.\n- Named regular expression server name captures have been supported since 0.8.25.\n- Regular expression server name captures have been supported since 0.7.40.\n- An empty server name “” has been supported since 0.7.12.\n- A wildcard server name or regular expression has been supported for use as the first server name since 0.6.25.\n- Regular expression server names have been supported since 0.6.7.\n- Wildcard form `example.*` has been supported since 0.6.0.\n- The special form `.example.org` has been supported since 0.3.18.\n- Wildcard form `*.example.org` has been supported since 0.1.13.\n\n|                                               |\n|----------------------------------------------:|\n| written by Igor Sysoev edited by Brian Mercer |\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/server_names.html](https://nginx.org/en/docs/http/server_names.html)"
- name: server_name
  id: http/ngx_http_core_module#server_name
  summary: The first name becomes the primary server name
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`server_name`***`name`*` ...;` |
    | Default: | `server_name "";`                |
    | Context: | `server`                         |

    Sets names of a virtual server, for example:

    ``` nginx
    server {
        server_name example.com www.example.com;
    }
    ```

    The first name becomes the primary server name.

    Server names can include an asterisk (“`*`”) replacing the first or last part of a name:

    ``` nginx
    server {
        server_name example.com *.example.com www.example.*;
    }
    ```

    Such names are called wildcard names.

    The first two of the names mentioned above can be combined in one:

    ``` nginx
    server {
        server_name .example.com;
    }
    ```

    It is also possible to use regular expressions in server names, preceding the name with a tilde (“`~`”):

    ``` nginx
    server {
        server_name www.example.com ~^www\d+\.example\.com$;
    }
    ```

    Regular expressions can contain captures (0.7.40) that can later be used in other directives:

    ``` nginx
    server {
        server_name ~^(www\.)?(.+)$;

        location / {
            root /sites/$2;
        }
    }

    server {
        server_name _;

        location / {
            root /sites/default;
        }
    }
    ```

    Named captures in regular expressions create variables (0.8.25) that can later be used in other directives:

    ``` nginx
    server {
        server_name ~^(www\.)?(?<domain>.+)$;

        location / {
            root /sites/$domain;
        }
    }

    server {
        server_name _;

        location / {
            root /sites/default;
        }
    }
    ```

    If the directive’s parameter is set to “`$hostname`” (0.9.4), the machine’s hostname is inserted.

    It is also possible to specify an empty server name (0.7.11):

    ``` nginx
    server {
        server_name www.example.com "";
    }
    ```

    It allows this server to process requests without the “Host” header field — instead of the default server — for the given address:port pair. This is the default setting.

    Before 0.8.48, the machine’s hostname was used by default.

    During searching for a virtual server by name, if the name matches more than one of the specified variants, (e.g. both a wildcard name and regular expression match), the first matching variant will be chosen, in the following order of priority:

    1.  the exact name
    2.  the longest wildcard name starting with an asterisk, e.g. “`*.example.com`”
    3.  the longest wildcard name ending with an asterisk, e.g. “`mail.*`”
    4.  the first matching regular expression (in order of appearance in the configuration file)

    Detailed description of server names is provided in a separate [Server names](server_names) document.
- name: server_name (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#server_name
  summary: If the directive is not specified, the machine’s hostname is used
  belongs_to: ngx_mail_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`server_name`***`name`*`;` |
    | Default: | `server_name hostname;`      |
    | Context: | `mail`, `server`             |

    Sets the server name that is used:

    - in the initial POP3/SMTP server greeting;
    - in the salt during the SASL CRAM-MD5 authentication;
    - in the `EHLO` command when connecting to the SMTP backend, if the passing of the [XCLIENT](ngx_mail_proxy_module#xclient) command is enabled.

    If the directive is not specified, the machine’s hostname is used.
- name: server_name (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#server_name
  summary: This directive appeared in version 1.25.5
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`server_name`***`name`*` ...;` |
    | Default: | `server_name "";`                |
    | Context: | `server`                         |

    This directive appeared in version 1.25.5.

    Sets names of a virtual server, for example:

    ``` nginx
    server {
        server_name example.com www.example.com;
    }
    ```

    The first name becomes the primary server name.

    Server names can include an asterisk (“`*`”) replacing the first or last part of a name:

    ``` nginx
    server {
        server_name example.com *.example.com www.example.*;
    }
    ```

    Such names are called wildcard names.

    The first two of the names mentioned above can be combined in one:

    ``` nginx
    server {
        server_name .example.com;
    }
    ```

    It is also possible to use regular expressions in server names, preceding the name with a tilde (“`~`”):

    ``` nginx
    server {
        server_name www.example.com ~^www\d+\.example\.com$;
    }
    ```

    Regular expressions can contain captures that can later be used in other directives:

    ``` nginx
    server {
        server_name ~^(www\.)?(.+)$;

        proxy_pass www.$2:12345;
    }
    ```

    Named captures in regular expressions create variables that can later be used in other directives:

    ``` nginx
    server {
        server_name ~^(www\.)?(?<domain>.+)$;

        proxy_pass www.$domain:12345;
    }
    ```

    If the directive’s parameter is set to “`$hostname`”, the machine’s hostname is inserted.

    During searching for a virtual server by name, if the name matches more than one of the specified variants, (e.g. both a wildcard name and regular expression match), the first matching variant will be chosen, in the following order of priority:

    1.  the exact name
    2.  the longest wildcard name starting with an asterisk, e.g. “`*.example.com`”
    3.  the longest wildcard name ending with an asterisk, e.g. “`mail.*`”
    4.  the first matching regular expression (in order of appearance in the configuration file)
- name: server_name_in_redirect
  id: http/ngx_http_core_module#server_name_in_redirect
  summary: Enables or disables the use of the primary server name, specified by the server_name directive, in absolute redirects issued by nginx
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`server_name_in_redirect`**` on | off;` |
    | Default: | `server_name_in_redirect off;`            |
    | Context: | `http`, `server`, `location`              |

    Enables or disables the use of the primary server name, specified by the [server_name](#server_name) directive, in [absolute](#absolute_redirect) redirects issued by nginx. When the use of the primary server name is disabled, the name from the “Host” request header field is used. If this field is not present, the IP address of the server is used.

    The use of a port in redirects is controlled by the [port_in_redirect](#port_in_redirect) directive.
- name: server_names_hash_bucket_size
  id: http/ngx_http_core_module#server_names_hash_bucket_size
  summary: Sets the bucket size for the server names hash tables
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`server_names_hash_bucket_size`***`size`*`;` |
    | Default: | `server_names_hash_bucket_size 32|64|128;`     |
    | Context: | `http`                                         |

    Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line. The details of setting up hash tables are provided in a separate [document](../hash).
- name: server_names_hash_bucket_size (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#server_names_hash_bucket_size
  summary: This directive appeared in version 1.25.5
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`server_names_hash_bucket_size`***`size`*`;` |
    | Default: | `server_names_hash_bucket_size 32|64|128;`     |
    | Context: | `stream`                                       |

    This directive appeared in version 1.25.5.

    Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line. The details of setting up hash tables are provided in a separate [document](../hash).
- name: server_names_hash_max_size
  id: http/ngx_http_core_module#server_names_hash_max_size
  summary: Sets the maximum size of the server names hash tables
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`server_names_hash_max_size`***`size`*`;` |
    | Default: | `server_names_hash_max_size 512;`           |
    | Context: | `http`                                      |

    Sets the maximum *`size`* of the server names hash tables. The details of setting up hash tables are provided in a separate [document](../hash).
- name: server_names_hash_max_size (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#server_names_hash_max_size
  summary: This directive appeared in version 1.25.5
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`server_names_hash_max_size`***`size`*`;` |
    | Default: | `server_names_hash_max_size 512;`           |
    | Context: | `stream`                                    |

    This directive appeared in version 1.25.5.

    Sets the maximum *`size`* of the server names hash tables. The details of setting up hash tables are provided in a separate [document](../hash).
- name: server_tokens
  id: http/ngx_http_core_module#server_tokens
  summary: Enables or disables emitting nginx version on error pages and in the “Server” response header field
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`server_tokens`**` on | off | build | `*`string`*`;` |
    | Default: | `server_tokens on;`                                    |
    | Context: | `http`, `server`, `location`                           |

    Enables or disables emitting nginx version on error pages and in the “Server” response header field.

    The `build` parameter (1.11.10) enables emitting a [build name](../configure#build) along with nginx version.

    Additionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), starting from version 1.9.13 the signature on error pages and the “Server” response header field value can be set explicitly using the *`string`* with variables. An empty string disables the emission of the “Server” field.
- name: session_log
  id: http/ngx_http_session_log_module#session_log
  summary: Enables the use of the specified session log
  belongs_to: ngx_http_session_log_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`session_log`***`name`*` | off;` |
    | Default: | `session_log off;`                 |
    | Context: | `http`, `server`, `location`       |

    Enables the use of the specified session log. The special value `off` cancels the effect of the `session_log` directives inherited from the previous configuration level.
- name: session_log_format
  id: http/ngx_http_session_log_module#session_log_format
  summary: Specifies the output format of a log
  belongs_to: ngx_http_session_log_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`session_log_format`***`namestring`*` ...;` |
    | Default: | `session_log_format combined "...";`          |
    | Context: | `http`                                        |

    Specifies the output format of a log. The value of the `$body_bytes_sent` variable is aggregated across all requests in a session. The values of all other variables available for logging correspond to the first request in a session.
- name: session_log_zone
  id: http/ngx_http_session_log_module#session_log_zone
  summary: Sets the path to a log file and configures the shared memory zone that is used to store currently active sessions
  belongs_to: ngx_http_session_log_module
  description: "|          |                                                                                                                                        |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax:  | **`session_log_zone`***`path`*` zone=`*`name`*`:`*`size`*` [format=`*`format`*`] [timeout=`*`time`*`] [id=`*`id`*`] [md5=`*`md5`*`] ;` |\n| Default: | —                                                                                                                                      |\n| Context: | `http`                                                                                                                                 |\n\nSets the path to a log file and configures the shared memory zone that is used to store currently active sessions.\n\nA session is considered active for as long as the time elapsed since the last request in the session does not exceed the specified `timeout` (by default, 30 seconds). Once a session is no longer active, it is written to the log.\n\nThe `id` parameter identifies the session to which a request is mapped. The `id` parameter is set to the hexadecimal representation of an MD5 hash (for example, obtained from a cookie using variables). If this parameter is not specified or does not represent the valid MD5 hash, nginx computes the MD5 hash from the value of the `md5` parameter and creates a new session using this hash. Both the `id` and `md5` parameters can contain variables.\n\nThe `format` parameter sets the custom session log format configured by the [session_log_format](#session_log_format) directive. If `format` is not specified, the predefined “`combined`” format is used.\n\n#### Embedded Variables\n\nThe `ngx_http_session_log_module` module supports two embedded variables:\n\n`$session_log_id`\n\ncurrent session ID;\n\n`$session_log_binary_id`\n\ncurrent session ID in binary form (16 bytes).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_session_log_module.html](https://nginx.org/en/docs/http/ngx_http_session_log_module.html)"
- name: set
  id: http/ngx_http_rewrite_module#set
  summary: Sets a value for the specified variable
  belongs_to: ngx_http_rewrite_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`set`***`$variablevalue`*`;` |
    | Default: | —                              |
    | Context: | `server`, `location`, `if`     |

    Sets a *`value`* for the specified *`variable`*. The *`value`* can contain text, variables, and their combination.
- name: set (ngx_stream_set_module)
  id: stream/ngx_stream_set_module#set
  summary: Sets a value for the specified variable
  belongs_to: ngx_stream_set_module
  description: "|          |                                |\n|----------|--------------------------------|\n| Syntax:  | **`set`***`$variablevalue`*`;` |\n| Default: | —                              |\n| Context: | `server`                       |\n\nSets a *`value`* for the specified *`variable`*. The *`value`* can contain text, variables, and their combination.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_set_module.html](https://nginx.org/en/docs/stream/ngx_stream_set_module.html)"
- name: set_real_ip_from
  id: http/ngx_http_realip_module#set_real_ip_from
  summary: Defines trusted addresses that are known to send correct replacement addresses
  belongs_to: ngx_http_realip_module
  description: |-
    |          |                                                           |
    |----------|-----------------------------------------------------------|
    | Syntax:  | **`set_real_ip_from`***`address`*` | `*`CIDR`*` | unix:;` |
    | Default: | —                                                         |
    | Context: | `http`, `server`, `location`                              |

    Defines trusted addresses that are known to send correct replacement addresses. If the special value `unix:` is specified, all UNIX-domain sockets will be trusted. Trusted addresses may also be specified using a hostname (1.13.1).

    IPv6 addresses are supported starting from versions 1.3.0 and 1.2.1.
- name: set_real_ip_from (ngx_mail_realip_module)
  id: mail/ngx_mail_realip_module#set_real_ip_from
  summary: Defines trusted addresses that are known to send correct replacement addresses
  belongs_to: ngx_mail_realip_module
  description: "|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`set_real_ip_from`***`address`*` | `*`CIDR`*` | unix:;` |\n| Default: | —                                                         |\n| Context: | `mail`, `server`                                          |\n\nDefines trusted addresses that are known to send correct replacement addresses. If the special value `unix:` is specified, all UNIX-domain sockets will be trusted.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_realip_module.html](https://nginx.org/en/docs/mail/ngx_mail_realip_module.html)"
- name: set_real_ip_from (ngx_stream_realip_module)
  id: stream/ngx_stream_realip_module#set_real_ip_from
  summary: Defines trusted addresses that are known to send correct replacement addresses
  belongs_to: ngx_stream_realip_module
  description: "|          |                                                           |\n|----------|-----------------------------------------------------------|\n| Syntax:  | **`set_real_ip_from`***`address`*` | `*`CIDR`*` | unix:;` |\n| Default: | —                                                         |\n| Context: | `stream`, `server`                                        |\n\nDefines trusted addresses that are known to send correct replacement addresses. If the special value `unix:` is specified, all UNIX-domain sockets will be trusted.\n\n#### Embedded Variables\n\n`$realip_remote_addr`\n\nkeeps the original client address\n\n`$realip_remote_port`\n\nkeeps the original client port\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_realip_module.html](https://nginx.org/en/docs/stream/ngx_stream_realip_module.html)"
- name: Setting up hashes
  id: hash
  summary: To quickly process static sets of data such as server names, map directive’s values, MIME types, names of request header strings, nginx uses hash tables
  description: "# Setting up hashes\n\nTo quickly process static sets of data such as server names, [map](http/ngx_http_map_module#map) directive’s values, MIME types, names of request header strings, nginx uses hash tables. During the start and each re-configuration nginx selects the minimum possible sizes of hash tables such that the bucket size that stores keys with identical hash values does not exceed the configured parameter (hash bucket size). The size of a table is expressed in buckets. The adjustment is continued until the table size exceeds the hash max size parameter. Most hashes have the corresponding directives that allow changing these parameters, for example, for the server names hash they are [server_names_hash_max_size](http/ngx_http_core_module#server_names_hash_max_size) and [server_names_hash_bucket_size](http/ngx_http_core_module#server_names_hash_bucket_size).\n\nThe hash bucket size parameter is aligned to the size that is a multiple of the processor’s cache line size. This speeds up key search in a hash on modern processors by reducing the number of memory accesses. If hash bucket size is equal to one processor’s cache line size then the number of memory accesses during the key search will be two in the worst case — first to compute the bucket address, and second during the key search inside the bucket. Therefore, if nginx emits the message requesting to increase either hash max size or hash bucket size then the first parameter should first be increased.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/hash.html](https://nginx.org/en/docs/hash.html)"
- name: slice
  id: http/ngx_http_slice_module#slice
  summary: Sets the size of the slice
  belongs_to: ngx_http_slice_module
  description: "|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`slice`***`size`*`;`       |\n| Default: | `slice 0;`                   |\n| Context: | `http`, `server`, `location` |\n\nSets the *`size`* of the slice. The zero value disables splitting responses into slices. Note that a too low value may result in excessive memory usage and opening a large number of files.\n\nIn order for a subrequest to return the required range, the `$slice_range` variable should be [passed](ngx_http_proxy_module#proxy_set_header) to the proxied server as the `Range` request header field. If [caching](ngx_http_proxy_module#proxy_cache) is enabled, `$slice_range` should be added to the [cache key](ngx_http_proxy_module#proxy_cache_key) and caching of responses with 206 status code should be [enabled](ngx_http_proxy_module#proxy_cache_valid).\n\n#### Embedded Variables\n\nThe `ngx_http_slice_module` module supports the following embedded variables:\n\n`$slice_range`\n\nthe current slice range in [HTTP byte range](https://datatracker.ietf.org/doc/html/rfc7233#section-2.1) format, for example, `bytes=0-1048575`.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_slice_module.html](https://nginx.org/en/docs/http/ngx_http_slice_module.html)"
- name: smtp_auth (ngx_mail_smtp_module)
  id: mail/ngx_mail_smtp_module#smtp_auth
  summary: Sets permitted methods of SASL authentication for SMTP clients
  belongs_to: ngx_mail_smtp_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`smtp_auth`***`method`*` ...;` |
    | Default: | `smtp_auth plain login;`         |
    | Context: | `mail`, `server`                 |

    Sets permitted methods of [SASL authentication](https://datatracker.ietf.org/doc/html/rfc2554) for SMTP clients. Supported methods are:

    `plain`

    [AUTH PLAIN](https://datatracker.ietf.org/doc/html/rfc4616)

    `login`

    [AUTH LOGIN](https://datatracker.ietf.org/doc/html/draft-murchison-sasl-login-00)

    `cram-md5`

    [AUTH CRAM-MD5](https://datatracker.ietf.org/doc/html/rfc2195). In order for this method to work, the password must be stored unencrypted.

    `external`

    [AUTH EXTERNAL](https://datatracker.ietf.org/doc/html/rfc4422) (1.11.6).

    `none`

    Authentication is not required.

    Plain text authentication methods (`AUTH PLAIN` and `AUTH LOGIN`) are always enabled, though if the `plain` and `login` methods are not specified, `AUTH PLAIN` and `AUTH LOGIN` will not be automatically included in [smtp_capabilities](#smtp_capabilities).
- name: smtp_capabilities (ngx_mail_smtp_module)
  id: mail/ngx_mail_smtp_module#smtp_capabilities
  summary: Sets the SMTP protocol extensions list that is passed to the client in response to the EHLO command
  belongs_to: ngx_mail_smtp_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`smtp_capabilities`***`extension`*` ...;` |
    | Default: | —                                           |
    | Context: | `mail`, `server`                            |

    Sets the SMTP protocol extensions list that is passed to the client in response to the `EHLO` command. The authentication methods specified in the [smtp_auth](#smtp_auth) directive and [STARTTLS](https://datatracker.ietf.org/doc/html/rfc3207) are automatically added to this list depending on the [starttls](ngx_mail_ssl_module#starttls) directive value.

    It makes sense to specify the extensions supported by the MTA to which the clients are proxied (if these extensions are related to commands used after the authentication, when nginx transparently proxies the client connection to the backend).

    The current list of standardized extensions is published at [www.iana.org](http://www.iana.org/assignments/mail-parameters).
- name: smtp_client_buffer (ngx_mail_smtp_module)
  id: mail/ngx_mail_smtp_module#smtp_client_buffer
  summary: Sets the size of the buffer used for reading SMTP commands
  belongs_to: ngx_mail_smtp_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`smtp_client_buffer`***`size`*`;` |
    | Default: | `smtp_client_buffer 4k|8k;`         |
    | Context: | `mail`, `server`                    |

    Sets the *`size`* of the buffer used for reading SMTP commands. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
- name: smtp_greeting_delay (ngx_mail_smtp_module)
  id: mail/ngx_mail_smtp_module#smtp_greeting_delay
  summary: Allows setting a delay before sending an SMTP greeting in order to reject clients who fail to wait for the greeting before sending SMTP commands
  belongs_to: ngx_mail_smtp_module
  description: "|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`smtp_greeting_delay`***`time`*`;` |\n| Default: | `smtp_greeting_delay 0;`             |\n| Context: | `mail`, `server`                     |\n\nAllows setting a delay before sending an SMTP greeting in order to reject clients who fail to wait for the greeting before sending SMTP commands.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_smtp_module.html](https://nginx.org/en/docs/mail/ngx_mail_smtp_module.html)"
- name: source_charset
  id: http/ngx_http_charset_module#source_charset
  summary: Defines the source charset of a response
  belongs_to: ngx_http_charset_module
  description: "|          |                                                |\n|----------|------------------------------------------------|\n| Syntax:  | **`source_charset`***`charset`*`;`             |\n| Default: | —                                              |\n| Context: | `http`, `server`, `location`, `if in location` |\n\nDefines the source charset of a response. If this charset is different from the charset specified in the [charset](#charset) directive, a conversion is performed.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_charset_module.html](https://nginx.org/en/docs/http/ngx_http_charset_module.html)"
- name: split_clients
  id: http/ngx_http_split_clients_module#split_clients
  summary: The value of the original string is hashed using MurmurHash2
  belongs_to: ngx_http_split_clients_module
  description: "|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`split_clients`***`string$variable`*` { ... }` |\n| Default: | —                                                |\n| Context: | `http`                                           |\n\nCreates a variable for A/B testing, for example:\n\n``` nginx\nsplit_clients \"${remote_addr}AAA\" $variant {\n               0.5%               .one;\n               2.0%               .two;\n               *                  \"\";\n}\n```\n\nThe value of the original string is hashed using MurmurHash2. In the example given, hash values from 0 to 21474835 (0.5%) correspond to the value `\".one\"` of the `$variant` variable, hash values from 21474836 to 107374180 (2%) correspond to the value `\".two\"`, and hash values from 107374181 to 4294967295 correspond to the value `\"\"` (an empty string).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_split_clients_module.html](https://nginx.org/en/docs/http/ngx_http_split_clients_module.html)"
- name: split_clients (ngx_stream_split_clients_module)
  id: stream/ngx_stream_split_clients_module#split_clients
  summary: The value of the original string is hashed using MurmurHash2
  belongs_to: ngx_stream_split_clients_module
  description: "|          |                                                  |\n|----------|--------------------------------------------------|\n| Syntax:  | **`split_clients`***`string$variable`*` { ... }` |\n| Default: | —                                                |\n| Context: | `stream`                                         |\n\nCreates a variable for A/B testing, for example:\n\n``` nginx\nsplit_clients \"${remote_addr}AAA\" $variant {\n               0.5%               .one;\n               2.0%               .two;\n               *                  \"\";\n}\n```\n\nThe value of the original string is hashed using MurmurHash2. In the example given, hash values from 0 to 21474835 (0.5%) correspond to the value `\".one\"` of the `$variant` variable, hash values from 21474836 to 107374180 (2%) correspond to the value `\".two\"`, and hash values from 107374181 to 4294967295 correspond to the value `\"\"` (an empty string).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html](https://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html)"
- name: ssi
  id: http/ngx_http_ssi_module#ssi
  summary: Enables or disables processing of SSI commands in responses
  belongs_to: ngx_http_ssi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`ssi`**` on | off;`                          |
    | Default: | `ssi off;`                                     |
    | Context: | `http`, `server`, `location`, `if in location` |

    Enables or disables processing of SSI commands in responses.
- name: ssi_last_modified
  id: http/ngx_http_ssi_module#ssi_last_modified
  summary: This directive appeared in version 1.5.1
  belongs_to: ngx_http_ssi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`ssi_last_modified`**` on | off;` |
    | Default: | `ssi_last_modified off;`            |
    | Context: | `http`, `server`, `location`        |

    This directive appeared in version 1.5.1.

    Allows preserving the “Last-Modified” header field from the original response during SSI processing to facilitate response caching.

    By default, the header field is removed as contents of the response are modified during processing and may contain dynamically generated elements or parts that are changed independently of the original response.
- name: ssi_min_file_chunk
  id: http/ngx_http_ssi_module#ssi_min_file_chunk
  summary: Sets the minimum size for parts of a response stored on disk, starting from which it makes sense to send them using sendfile
  belongs_to: ngx_http_ssi_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssi_min_file_chunk`**` size;` |
    | Default: | `ssi_min_file_chunk 1k;`         |
    | Context: | `http`, `server`, `location`     |

    Sets the minimum *`size`* for parts of a response stored on disk, starting from which it makes sense to send them using [sendfile](ngx_http_core_module#sendfile).
- name: ssi_silent_errors
  id: http/ngx_http_ssi_module#ssi_silent_errors
  summary: If enabled, suppresses the output of the “[an error occurred while processing the directive]” string if an error occurred during SSI processing
  belongs_to: ngx_http_ssi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`ssi_silent_errors`**` on | off;` |
    | Default: | `ssi_silent_errors off;`            |
    | Context: | `http`, `server`, `location`        |

    If enabled, suppresses the output of the “`[an error occurred while processing the directive]`” string if an error occurred during SSI processing.
- name: ssi_types
  id: http/ngx_http_ssi_module#ssi_types
  summary: Enables processing of SSI commands in responses with the specified MIME types in addition to “text/html”. The special value “*” matches any MIME type (0.8.29)
  belongs_to: ngx_http_ssi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`ssi_types`***`mime-type`*` ...;` |
    | Default: | `ssi_types text/html;`              |
    | Context: | `http`, `server`, `location`        |

    Enables processing of SSI commands in responses with the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).
- name: ssi_value_length
  id: http/ngx_http_ssi_module#ssi_value_length
  summary: Sets the maximum length of parameter values in SSI commands
  belongs_to: ngx_http_ssi_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssi_value_length`***`length`*`;` |\n| Default: | `ssi_value_length 256;`             |\n| Context: | `http`, `server`, `location`        |\n\nSets the maximum length of parameter values in SSI commands.\n\n#### SSI Commands\n\nSSI commands have the following generic format:\n\n``` nginx\n<!--# command parameter1=value1 parameter2=value2 ... -->\n```\n\nThe following commands are supported:\n\n`block`\n\nDefines a block that can be used as a stub in the `include` command. The block can contain other SSI commands. The command has the following parameter:\n\n`name`\n\nblock name.\n\nExample:\n\n``` nginx\n<!--# block name=\"one\" -->\nstub\n<!--# endblock -->\n```\n\n`config`\n\nSets some parameters used during SSI processing, namely:\n\n`errmsg`\n\na string that is output if an error occurs during SSI processing. By default, the following string is output:\n\n``` nginx\n[an error occurred while processing the directive]\n```\n\n`timefmt`\n\na format string passed to the `strftime()` function used to output date and time. By default, the following format is used:\n\n``` nginx\n\"%A, %d-%b-%Y %H:%M:%S %Z\"\n```\n\nThe “`%s`” format is suitable to output time in seconds.\n\n`echo`\n\nOutputs the value of a variable. The command has the following parameters:\n\n`var`\n\nthe variable name.\n\n`encoding`\n\nthe encoding method. Possible values include `none`, `url`, and `entity`. By default, `entity` is used.\n\n`default`\n\na non-standard parameter that sets a string to be output if a variable is undefined. By default, “`(none)`” is output. The command\n\n``` nginx\n<!--# echo var=\"name\" default=\"no\" -->\n```\n\nreplaces the following sequence of commands:\n\n``` nginx\n<!--# if expr=\"$name\" --><!--# echo var=\"name\" --><!--#\n       else -->no<!--# endif -->\n```\n\n`if`\n\nPerforms a conditional inclusion. The following commands are supported:\n\n``` nginx\n<!--# if expr=\"...\" -->\n...\n<!--# elif expr=\"...\" -->\n...\n<!--# else -->\n...\n<!--# endif -->\n```\n\nOnly one level of nesting is currently supported. The command has the following parameter:\n\n`expr`\n\nexpression. An expression can be:\n\n- variable existence check:\n\n  ``` nginx\n  <!--# if expr=\"$name\" -->\n  ```\n\n- comparison of a variable with a text:\n\n  ``` nginx\n  <!--# if expr=\"$name = text\" -->\n  <!--# if expr=\"$name != text\" -->\n  ```\n\n- comparison of a variable with a regular expression:\n\n  ``` nginx\n  <!--# if expr=\"$name = /text/\" -->\n  <!--# if expr=\"$name != /text/\" -->\n  ```\n\nIf a *`text`* contains variables, their values are substituted. A regular expression can contain positional and named captures that can later be used through variables, for example:\n\n``` nginx\n<!--# if expr=\"$name = /(.+)@(?P<domain>.+)/\" -->\n    <!--# echo var=\"1\" -->\n    <!--# echo var=\"domain\" -->\n<!--# endif -->\n```\n\n`include`\n\nIncludes the result of another request into a response. The command has the following parameters:\n\n`file`\n\nspecifies an included file, for example:\n\n``` nginx\n<!--# include file=\"footer.html\" -->\n```\n\n`virtual`\n\nspecifies an included request, for example:\n\n``` nginx\n<!--# include virtual=\"/remote/body.php?argument=value\" -->\n```\n\nSeveral requests specified on one page and processed by proxied or FastCGI/uwsgi/SCGI/gRPC servers run in parallel. If sequential processing is desired, the `wait` parameter should be used.\n\n`stub`\n\na non-standard parameter that names the block whose content will be output if the included request results in an empty body or if an error occurs during the request processing, for example:\n\n``` nginx\n<!--# block name=\"one\" -->&nbsp;<!--# endblock -->\n<!--# include virtual=\"/remote/body.php?argument=value\" stub=\"one\" -->\n```\n\nThe replacement block content is processed in the included request context.\n\n`wait`\n\na non-standard parameter that instructs to wait for a request to fully complete before continuing with SSI processing, for example:\n\n``` nginx\n<!--# include virtual=\"/remote/body.php?argument=value\" wait=\"yes\" -->\n```\n\n`set`\n\na non-standard parameter that instructs to write a successful result of request processing to the specified variable, for example:\n\n``` nginx\n<!--# include virtual=\"/remote/body.php?argument=value\" set=\"one\" -->\n```\n\nThe maximum size of the response is set by the [subrequest_output_buffer_size](ngx_http_core_module#subrequest_output_buffer_size) directive (1.13.10):\n\n``` nginx\nlocation /remote/ {\n    subrequest_output_buffer_size 64k;\n    ...\n}\n```\n\nPrior to version 1.13.10, only the results of responses obtained using the [ngx_http_proxy_module](ngx_http_proxy_module), [ngx_http_memcached_module](ngx_http_memcached_module), [ngx_http_fastcgi_module](ngx_http_fastcgi_module) (1.5.6), [ngx_http_uwsgi_module](ngx_http_uwsgi_module) (1.5.6), and [ngx_http_scgi_module](ngx_http_scgi_module) (1.5.6) modules could be written into variables. The maximum size of the response was set with the [proxy_buffer_size](ngx_http_proxy_module#proxy_buffer_size), [memcached_buffer_size](ngx_http_memcached_module#memcached_buffer_size), [fastcgi_buffer_size](ngx_http_fastcgi_module#fastcgi_buffer_size), [uwsgi_buffer_size](ngx_http_uwsgi_module#uwsgi_buffer_size), and [scgi_buffer_size](ngx_http_scgi_module#scgi_buffer_size) directives.\n\n`set`\n\nSets a value of a variable. The command has the following parameters:\n\n`var`\n\nthe variable name.\n\n`value`\n\nthe variable value. If an assigned value contains variables, their values are substituted.\n\n#### Embedded Variables\n\nThe `ngx_http_ssi_module` module supports two embedded variables:\n\n`$date_local`\n\ncurrent time in the local time zone. The format is set by the `config` command with the `timefmt` parameter.\n\n`$date_gmt`\n\ncurrent time in GMT. The format is set by the `config` command with the `timefmt` parameter.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_ssi_module.html](https://nginx.org/en/docs/http/ngx_http_ssi_module.html)"
- name: ssl
  id: http/ngx_http_ssl_module#ssl
  summary: This directive was made obsolete in version 1.15.0 and was removed in version 1.25.1
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                       |
    |----------|-----------------------|
    | Syntax:  | **`ssl`**` on | off;` |
    | Default: | `ssl off;`            |
    | Context: | `http`, `server`      |

    This directive was made obsolete in version 1.15.0 and was removed in version 1.25.1. The `ssl` parameter of the [listen](ngx_http_core_module#listen) directive should be used instead.
- name: ssl (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl
  summary: This directive was made obsolete in version 1.15.0 and was removed in version 1.25.1
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                       |
    |----------|-----------------------|
    | Syntax:  | **`ssl`**` on | off;` |
    | Default: | `ssl off;`            |
    | Context: | `mail`, `server`      |

    This directive was made obsolete in version 1.15.0 and was removed in version 1.25.1. The `ssl` parameter of the [listen](ngx_mail_core_module#listen) directive should be used instead.
- name: ssl (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl
  summary: Enables the HTTPS protocol for all connections to the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                       |
    |----------|-----------------------|
    | Syntax:  | **`ssl`**` on | off;` |
    | Default: | `ssl on;`             |
    | Context: | `mgmt`                |

    Enables the HTTPS protocol for all connections to the Instance Manager.
- name: ssl_alpn (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_alpn
  summary: This directive appeared in version 1.21.4
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`ssl_alpn`***`protocol`*` ...;` |
    | Default: | —                                 |
    | Context: | `stream`, `server`                |

    This directive appeared in version 1.21.4.

    Specifies the list of supported [ALPN](https://datatracker.ietf.org/doc/html/rfc7301) protocols. One of the protocols must be [negotiated](#var_ssl_alpn_protocol) if the client uses ALPN:

    ``` nginx
    map $ssl_alpn_protocol $proxy {
        h2                127.0.0.1:8001;
        http/1.1          127.0.0.1:8002;
    }

    server {
        listen      12346;
        proxy_pass  $proxy;
        ssl_alpn    h2 http/1.1;
    }
    ```
- name: ssl_buffer_size
  id: http/ngx_http_ssl_module#ssl_buffer_size
  summary: This directive appeared in version 1.5.9
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_buffer_size`***`size`*`;` |
    | Default: | `ssl_buffer_size 16k;`           |
    | Context: | `http`, `server`                 |

    This directive appeared in version 1.5.9.

    Sets the size of the buffer used for sending data.

    By default, the buffer size is 16k, which corresponds to minimal overhead when sending big responses. To minimize Time To First Byte it may be beneficial to use smaller values, for example:

    ``` nginx
    ssl_buffer_size 4k;
    ```
- name: ssl_certificate
  id: http/ngx_http_ssl_module#ssl_certificate
  summary: Specifies a file with the certificate in the PEM format for the given virtual server
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_certificate`***`file`*`;` |
    | Default: | —                                |
    | Context: | `http`, `server`                 |

    Specifies a *`file`* with the certificate in the PEM format for the given virtual server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file.

    Since version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA:

    ``` nginx
    server {
        listen              443 ssl;
        server_name         example.com;

        ssl_certificate     example.com.rsa.crt;
        ssl_certificate_key example.com.rsa.key;

        ssl_certificate     example.com.ecdsa.crt;
        ssl_certificate_key example.com.ecdsa.key;

        ...
    }
    ```

    Only OpenSSL 1.0.2 or higher supports separate [certificate chains](configuring_https_servers#chains) for different certificates. With older versions, only one certificate chain can be used.

    Since version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher:

    ``` nginx
    ssl_certificate     $ssl_server_name.crt;
    ssl_certificate_key $ssl_server_name.key;
    ```

    Note that using variables implies that a certificate will be loaded for each SSL handshake, and this may have a negative impact on performance.

    The value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a certificate from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).

    It should be kept in mind that due to the HTTPS protocol limitations for maximum interoperability virtual servers should listen on [different IP addresses](configuring_https_servers#name_based_https_servers).
- name: ssl_certificate (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_certificate
  summary: Specifies a file with the certificate in the PEM format for the given server
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_certificate`***`file`*`;` |
    | Default: | —                                |
    | Context: | `mail`, `server`                 |

    Specifies a *`file`* with the certificate in the PEM format for the given server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file.

    Since version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA:

    ``` nginx
    server {
        listen              993 ssl;

        ssl_certificate     example.com.rsa.crt;
        ssl_certificate_key example.com.rsa.key;

        ssl_certificate     example.com.ecdsa.crt;
        ssl_certificate_key example.com.ecdsa.key;

        ...
    }
    ```

    Only OpenSSL 1.0.2 or higher supports separate certificate chains for different certificates. With older versions, only one certificate chain can be used.

    The value `data`:*`certificate`* can be specified instead of the *`file`* (1.15.10), which loads a certificate without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).
- name: ssl_certificate (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_certificate
  summary: Specifies a file with the certificate in the PEM format used for authentication to the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_certificate`***`file`*`;` |
    | Default: | —                                |
    | Context: | `mgmt`                           |

    Specifies a *`file`* with the certificate in the PEM format used for authentication to the Instance Manager.
- name: ssl_certificate (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_certificate
  summary: Specifies a file with the certificate in the PEM format for the given server
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_certificate`***`file`*`;` |
    | Default: | —                                |
    | Context: | `stream`, `server`               |

    Specifies a *`file`* with the certificate in the PEM format for the given server. If intermediate certificates should be specified in addition to a primary certificate, they should be specified in the same file in the following order: the primary certificate comes first, then the intermediate certificates. A secret key in the PEM format may be placed in the same file.

    Since version 1.11.0, this directive can be specified multiple times to load certificates of different types, for example, RSA and ECDSA:

    ``` nginx
    server {
        listen              12345 ssl;

        ssl_certificate     example.com.rsa.crt;
        ssl_certificate_key example.com.rsa.key;

        ssl_certificate     example.com.ecdsa.crt;
        ssl_certificate_key example.com.ecdsa.key;

        ...
    }
    ```

    Only OpenSSL 1.0.2 or higher supports separate certificate chains for different certificates. With older versions, only one certificate chain can be used.

    Since version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher:

    ``` nginx
    ssl_certificate     $ssl_server_name.crt;
    ssl_certificate_key $ssl_server_name.key;
    ```

    Note that using variables implies that a certificate will be loaded for each SSL handshake, and this may have a negative impact on performance.

    The value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a certificate from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).
- name: ssl_certificate_key
  id: http/ngx_http_ssl_module#ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format for the given virtual server
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_certificate_key`***`file`*`;` |
    | Default: | —                                    |
    | Context: | `http`, `server`                     |

    Specifies a *`file`* with the secret key in the PEM format for the given virtual server.

    The value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.

    The value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a secret key from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).

    Since version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher.
- name: ssl_certificate_key (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format for the given server
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_certificate_key`***`file`*`;` |
    | Default: | —                                    |
    | Context: | `mail`, `server`                     |

    Specifies a *`file`* with the secret key in the PEM format for the given server.

    The value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.

    The value `data`:*`key`* can be specified instead of the *`file`* (1.15.10), which loads a secret key without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).
- name: ssl_certificate_key (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format used for authentication to the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_certificate_key`***`file`*`;` |
    | Default: | —                                    |
    | Context: | `mgmt`                               |

    Specifies a *`file`* with the secret key in the PEM format used for authentication to the Instance Manager.
- name: ssl_certificate_key (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format for the given server
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_certificate_key`***`file`*`;` |
    | Default: | —                                    |
    | Context: | `stream`, `server`                   |

    Specifies a *`file`* with the secret key in the PEM format for the given server.

    The value `engine`:*`name`*:*`id`* can be specified instead of the *`file`*, which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.

    The value `data`:*`$variable`* can be specified instead of the *`file`* (1.15.10), which loads a secret key from a variable without using intermediate files. Note that inappropriate use of this syntax may have its security implications, such as writing secret key data to [error log](../ngx_core_module#error_log).

    Since version 1.15.9, variables can be used in the *`file`* name when using OpenSSL 1.0.2 or higher.
- name: ssl_ciphers
  id: http/ngx_http_ssl_module#ssl_ciphers
  summary: Specifies the enabled ciphers
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`ssl_ciphers`***`ciphers`*`;` |
    | Default: | `ssl_ciphers HIGH:!aNULL:!MD5;` |
    | Context: | `http`, `server`                |

    Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:

    ``` nginx
    ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ```

    The full list can be viewed using the “`openssl ciphers`” command.

    The previous versions of nginx used [different](configuring_https_servers#compatibility) ciphers by default.
- name: ssl_ciphers (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_ciphers
  summary: Specifies the enabled ciphers
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`ssl_ciphers`***`ciphers`*`;` |
    | Default: | `ssl_ciphers HIGH:!aNULL:!MD5;` |
    | Context: | `mail`, `server`                |

    Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:

    ``` nginx
    ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ```

    The full list can be viewed using the “`openssl ciphers`” command.

    The previous versions of nginx used [different](../http/configuring_https_servers#compatibility) ciphers by default.
- name: ssl_ciphers (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_ciphers
  summary: Specifies the enabled ciphers for requests to the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`ssl_ciphers`***`ciphers`*`;` |
    | Default: | `ssl_ciphers DEFAULT;`          |
    | Context: | `mgmt`                          |

    Specifies the enabled ciphers for requests to the Instance Manager. The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: ssl_ciphers (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_ciphers
  summary: Specifies the enabled ciphers
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`ssl_ciphers`***`ciphers`*`;` |
    | Default: | `ssl_ciphers HIGH:!aNULL:!MD5;` |
    | Context: | `stream`, `server`              |

    Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:

    ``` nginx
    ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ```

    The full list can be viewed using the “`openssl ciphers`” command.
- name: ssl_client_certificate
  id: http/ngx_http_ssl_module#ssl_client_certificate
  summary: Specifies a file with trusted CA certificates in the PEM format used to verify client certificates and OCSP responses if ssl_stapling is enabled
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`ssl_client_certificate`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `http`, `server`                        |

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates and OCSP responses if [ssl_stapling](#ssl_stapling) is enabled.

    The list of certificates will be sent to clients. If this is not desired, the [ssl_trusted_certificate](#ssl_trusted_certificate) directive can be used.
- name: ssl_client_certificate (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_client_certificate
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`ssl_client_certificate`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `mail`, `server`                        |

    This directive appeared in version 1.7.11.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.

    The list of certificates will be sent to clients. If this is not desired, the [ssl_trusted_certificate](#ssl_trusted_certificate) directive can be used.
- name: ssl_client_certificate (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_client_certificate
  summary: This directive appeared in version 1.11.8
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`ssl_client_certificate`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `stream`, `server`                      |

    This directive appeared in version 1.11.8.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.

    The list of certificates will be sent to clients. If this is not desired, the [ssl_trusted_certificate](#ssl_trusted_certificate) directive can be used.
- name: ssl_conf_command
  id: http/ngx_http_ssl_module#ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                      |
    | Context: | `http`, `server`                       |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html).

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `ssl_conf_command` directives can be specified on the same level:

    ``` nginx
    ssl_conf_command Options PrioritizeChaCha;
    ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;
    ```

    These directives are inherited from the previous configuration level if and only if there are no `ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: ssl_conf_command (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                      |
    | Context: | `mail`, `server`                       |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html).

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `ssl_conf_command` directives can be specified on the same level:

    ``` nginx
    ssl_conf_command Options PrioritizeChaCha;
    ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;
    ```

    These directives are inherited from the previous configuration level if and only if there are no `ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: ssl_conf_command (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                      |
    | Context: | `stream`, `server`                     |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html).

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `ssl_conf_command` directives can be specified on the same level:

    ``` nginx
    ssl_conf_command Options PrioritizeChaCha;
    ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;
    ```

    These directives are inherited from the previous configuration level if and only if there are no `ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: ssl_crl
  id: http/ngx_http_ssl_module#ssl_crl
  summary: This directive appeared in version 0.8.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                          |
    |----------|--------------------------|
    | Syntax:  | **`ssl_crl`***`file`*`;` |
    | Default: | —                        |
    | Context: | `http`, `server`         |

    This directive appeared in version 0.8.7.

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify_client) client certificates.
- name: ssl_crl (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_crl
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                          |
    |----------|--------------------------|
    | Syntax:  | **`ssl_crl`***`file`*`;` |
    | Default: | —                        |
    | Context: | `mail`, `server`         |

    This directive appeared in version 1.7.11.

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify_client) client certificates.
- name: ssl_crl (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_crl
  summary: Specifies a file with revoked certificates (CRL) in the PEM format used to verify the certificate of the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                          |
    |----------|--------------------------|
    | Syntax:  | **`ssl_crl`***`file`*`;` |
    | Default: | —                        |
    | Context: | `mgmt`                   |

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify) the certificate of the Instance Manager.
- name: ssl_crl (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_crl
  summary: This directive appeared in version 1.11.8
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                          |
    |----------|--------------------------|
    | Syntax:  | **`ssl_crl`***`file`*`;` |
    | Default: | —                        |
    | Context: | `stream`, `server`       |

    This directive appeared in version 1.11.8.

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#ssl_verify_client) client certificates.
- name: ssl_dhparam
  id: http/ngx_http_ssl_module#ssl_dhparam
  summary: This directive appeared in version 0.7.2
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`ssl_dhparam`***`file`*`;` |
    | Default: | —                            |
    | Context: | `http`, `server`             |

    This directive appeared in version 0.7.2.

    Specifies a *`file`* with DH parameters for DHE ciphers.

    By default no parameters are set, and therefore DHE ciphers will not be used.

    Prior to version 1.11.0, builtin parameters were used by default.
- name: ssl_dhparam (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_dhparam
  summary: This directive appeared in version 0.7.2
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`ssl_dhparam`***`file`*`;` |
    | Default: | —                            |
    | Context: | `mail`, `server`             |

    This directive appeared in version 0.7.2.

    Specifies a *`file`* with DH parameters for DHE ciphers.

    By default no parameters are set, and therefore DHE ciphers will not be used.

    Prior to version 1.11.0, builtin parameters were used by default.
- name: ssl_dhparam (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_dhparam
  summary: Specifies a file with DH parameters for DHE ciphers
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`ssl_dhparam`***`file`*`;` |
    | Default: | —                            |
    | Context: | `stream`, `server`           |

    Specifies a *`file`* with DH parameters for DHE ciphers.

    By default no parameters are set, and therefore DHE ciphers will not be used.

    Prior to version 1.11.0, builtin parameters were used by default.
- name: ssl_early_data
  id: http/ngx_http_ssl_module#ssl_early_data
  summary: This directive appeared in version 1.15.3
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_early_data`**` on | off;` |
    | Default: | `ssl_early_data off;`            |
    | Context: | `http`, `server`                 |

    This directive appeared in version 1.15.3.

    Enables or disables TLS 1.3 [early data](https://datatracker.ietf.org/doc/html/rfc8446#section-2.3).

    Requests sent within early data are subject to [replay attacks](https://datatracker.ietf.org/doc/html/rfc8470). To protect against such attacks at the application layer, the [$ssl_early_data](#var_ssl_early_data) variable should be used.

    ``` nginx
    proxy_set_header Early-Data $ssl_early_data;
    ```

    The directive is supported when using OpenSSL 1.1.1 or higher (1.15.4) and [BoringSSL](https://boringssl.googlesource.com/boringssl/).
- name: ssl_ecdh_curve
  id: http/ngx_http_ssl_module#ssl_ecdh_curve
  summary: This directive appeared in versions 1.1.0 and 1.0.6
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_ecdh_curve`***`curve`*`;` |
    | Default: | `ssl_ecdh_curve auto;`           |
    | Context: | `http`, `server`                 |

    This directive appeared in versions 1.1.0 and 1.0.6.

    Specifies a *`curve`* for ECDHE ciphers.

    When using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example:

    ``` nginx
    ssl_ecdh_curve prime256v1:secp384r1;
    ```

    The special value `auto` (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or `prime256v1` with older versions.

    Prior to version 1.11.0, the `prime256v1` curve was used by default.

    When using OpenSSL 1.0.2 or higher, this directive sets the list of curves supported by the server. Thus, in order for ECDSA certificates to work, it is important to include the curves used in the certificates.
- name: ssl_ecdh_curve (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_ecdh_curve
  summary: This directive appeared in versions 1.1.0 and 1.0.6
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_ecdh_curve`***`curve`*`;` |
    | Default: | `ssl_ecdh_curve auto;`           |
    | Context: | `mail`, `server`                 |

    This directive appeared in versions 1.1.0 and 1.0.6.

    Specifies a *`curve`* for ECDHE ciphers.

    When using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example:

    ``` nginx
    ssl_ecdh_curve prime256v1:secp384r1;
    ```

    The special value `auto` (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or `prime256v1` with older versions.

    Prior to version 1.11.0, the `prime256v1` curve was used by default.

    When using OpenSSL 1.0.2 or higher, this directive sets the list of curves supported by the server. Thus, in order for ECDSA certificates to work, it is important to include the curves used in the certificates.
- name: ssl_ecdh_curve (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_ecdh_curve
  summary: Specifies a curve for ECDHE ciphers
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`ssl_ecdh_curve`***`curve`*`;` |
    | Default: | `ssl_ecdh_curve auto;`           |
    | Context: | `stream`, `server`               |

    Specifies a *`curve`* for ECDHE ciphers.

    When using OpenSSL 1.0.2 or higher, it is possible to specify multiple curves (1.11.0), for example:

    ``` nginx
    ssl_ecdh_curve prime256v1:secp384r1;
    ```

    The special value `auto` (1.11.0) instructs nginx to use a list built into the OpenSSL library when using OpenSSL 1.0.2 or higher, or `prime256v1` with older versions.

    Prior to version 1.11.0, the `prime256v1` curve was used by default.

    When using OpenSSL 1.0.2 or higher, this directive sets the list of curves supported by the server. Thus, in order for ECDSA certificates to work, it is important to include the curves used in the certificates.
- name: ssl_engine (Core functionality)
  id: ngx_core_module#ssl_engine
  summary: Defines the name of the hardware SSL accelerator
  belongs_to: Core functionality
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`ssl_engine`***`device`*`;` |
    | Default: | —                             |
    | Context: | `main`                        |

    Defines the name of the hardware SSL accelerator.
- name: ssl_handshake_timeout (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_handshake_timeout
  summary: Specifies a timeout for the SSL handshake to complete
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_handshake_timeout`***`time`*`;` |
    | Default: | `ssl_handshake_timeout 60s;`           |
    | Context: | `stream`, `server`                     |

    Specifies a timeout for the SSL handshake to complete.
- name: ssl_name (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_name
  summary: Allows overriding the server name used to verify the certificate of the Instance Manager and to be passed through SNI when establishing a connection with the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                           |
    |----------|---------------------------|
    | Syntax:  | **`ssl_name`***`name`*`;` |
    | Default: | `ssl_name ssl_name host;` |
    | Context: | `mgmt`                    |

    Allows overriding the server name used to [verify](#ssl_verify) the certificate of the Instance Manager and to be [passed through SNI](#ssl_server_name) when establishing a connection with the Instance Manager.
- name: ssl_ocsp
  id: http/ngx_http_ssl_module#ssl_ocsp
  summary: This directive appeared in version 1.19.0
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`ssl_ocsp`**` on | off | leaf;` |
    | Default: | `ssl_ocsp off;`                   |
    | Context: | `http`, `server`                  |

    This directive appeared in version 1.19.0.

    Enables OCSP validation of the client certificate chain. The `leaf` parameter enables validation of the client certificate only.

    For the OCSP validation to work, the [ssl_verify_client](#ssl_verify_client) directive should be set to `on` or `optional`.

    To resolve the OCSP responder hostname, the [resolver](ngx_http_core_module#resolver) directive should also be specified.

    Example:

    ``` nginx
    ssl_verify_client on;
    ssl_ocsp          on;
    resolver          192.0.2.1;
    ```
- name: ssl_ocsp_cache
  id: http/ngx_http_ssl_module#ssl_ocsp_cache
  summary: This directive appeared in version 1.19.0
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                                              |
    |----------|--------------------------------------------------------------|
    | Syntax:  | **`ssl_ocsp_cache`**` off | [shared:`*`name`*`:`*`size`*`];` |
    | Default: | `ssl_ocsp_cache off;`                                        |
    | Context: | `http`, `server`                                             |

    This directive appeared in version 1.19.0.

    Sets `name` and `size` of the cache that stores client certificates status for OCSP validation. The cache is shared between all worker processes. A cache with the same name can be used in several virtual servers.

    The `off` parameter prohibits the use of the cache.
- name: ssl_ocsp_responder
  id: http/ngx_http_ssl_module#ssl_ocsp_responder
  summary: This directive appeared in version 1.19.0
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`ssl_ocsp_responder`***`url`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`                   |

    This directive appeared in version 1.19.0.

    Overrides the URL of the OCSP responder specified in the “[Authority Information Access](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.1)” certificate extension for [validation](#ssl_ocsp) of client certificates.

    Only “`http://`” OCSP responders are supported:

    ``` nginx
    ssl_ocsp_responder http://ocsp.example.com/;
    ```
- name: ssl_password_file
  id: http/ngx_http_ssl_module#ssl_password_file
  summary: This directive appeared in version 1.7.3
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`ssl_password_file`***`file`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`                   |

    This directive appeared in version 1.7.3.

    Specifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.

    Example:

    ``` nginx
    http {
        ssl_password_file /etc/keys/global.pass;
        ...

        server {
            server_name www1.example.com;
            ssl_certificate_key /etc/keys/first.key;
        }

        server {
            server_name www2.example.com;

            # named pipe can also be used instead of a file
            ssl_password_file /etc/keys/fifo;
            ssl_certificate_key /etc/keys/second.key;
        }
    }
    ```
- name: ssl_password_file (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_password_file
  summary: This directive appeared in version 1.7.3
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`ssl_password_file`***`file`*`;` |
    | Default: | —                                  |
    | Context: | `mail`, `server`                   |

    This directive appeared in version 1.7.3.

    Specifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.

    Example:

    ``` nginx
    mail {
        ssl_password_file /etc/keys/global.pass;
        ...

        server {
            server_name mail1.example.com;
            ssl_certificate_key /etc/keys/first.key;
        }

        server {
            server_name mail2.example.com;

            # named pipe can also be used instead of a file
            ssl_password_file /etc/keys/fifo;
            ssl_certificate_key /etc/keys/second.key;
        }
    }
    ```
- name: ssl_password_file (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_password_file
  summary: Specifies a file with passphrases for secret keys where each passphrase is specified on a separate line
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`ssl_password_file`***`file`*`;` |
    | Default: | —                                  |
    | Context: | `mgmt`                             |

    Specifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.
- name: ssl_password_file (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_password_file
  summary: Specifies a file with passphrases for secret keys where each passphrase is specified on a separate line
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`ssl_password_file`***`file`*`;` |
    | Default: | —                                  |
    | Context: | `stream`, `server`                 |

    Specifies a *`file`* with passphrases for [secret keys](#ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.

    Example:

    ``` nginx
    stream {
        ssl_password_file /etc/keys/global.pass;
        ...

        server {
            listen 127.0.0.1:12345;
            ssl_certificate_key /etc/keys/first.key;
        }

        server {
            listen 127.0.0.1:12346;

            # named pipe can also be used instead of a file
            ssl_password_file /etc/keys/fifo;
            ssl_certificate_key /etc/keys/second.key;
        }
    }
    ```
- name: ssl_prefer_server_ciphers
  id: http/ngx_http_ssl_module#ssl_prefer_server_ciphers
  summary: Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`ssl_prefer_server_ciphers`**` on | off;` |
    | Default: | `ssl_prefer_server_ciphers off;`            |
    | Context: | `http`, `server`                            |

    Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols.
- name: ssl_prefer_server_ciphers (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_prefer_server_ciphers
  summary: Specifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`ssl_prefer_server_ciphers`**` on | off;` |
    | Default: | `ssl_prefer_server_ciphers off;`            |
    | Context: | `mail`, `server`                            |

    Specifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used.
- name: ssl_prefer_server_ciphers (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_prefer_server_ciphers
  summary: Specifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`ssl_prefer_server_ciphers`**` on | off;` |
    | Default: | `ssl_prefer_server_ciphers off;`            |
    | Context: | `stream`, `server`                          |

    Specifies that server ciphers should be preferred over client ciphers when the SSLv3 and TLS protocols are used.
- name: ssl_preread (ngx_stream_ssl_preread_module)
  id: stream/ngx_stream_ssl_preread_module#ssl_preread
  summary: Enables extracting information from the ClientHello message at the preread phase
  belongs_to: ngx_stream_ssl_preread_module
  description: "|          |                               |\n|----------|-------------------------------|\n| Syntax:  | **`ssl_preread`**` on | off;` |\n| Default: | `ssl_preread off;`            |\n| Context: | `stream`, `server`            |\n\nEnables extracting information from the ClientHello message at the [preread](stream_processing#preread_phase) phase.\n\n#### Embedded Variables\n\n`$ssl_preread_protocol`\n\nthe highest SSL protocol version supported by the client (1.15.2)\n\n`$ssl_preread_server_name`\n\nserver name requested through SNI\n\n`$ssl_preread_alpn_protocols`\n\nlist of protocols advertised by the client through ALPN (1.13.10). The values are separated by commas.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html](https://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html)"
- name: ssl_protocols
  id: http/ngx_http_ssl_module#ssl_protocols
  summary: Enables the specified protocols
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                                                              |
    |----------|------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `http`, `server`                                                             |

    Enables the specified protocols.

    If the directive is specified on the [server](ngx_http_core_module#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.

    The `TLSv1.1` and `TLSv1.2` parameters (1.1.13, 1.0.12) work only when OpenSSL 1.0.1 or higher is used.

    The `TLSv1.3` parameter (1.13.0) works only when OpenSSL 1.1.1 or higher is used.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: ssl_protocols (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_protocols
  summary: Enables the specified protocols
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                                                              |
    |----------|------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `mail`, `server`                                                             |

    Enables the specified protocols.

    The `TLSv1.1` and `TLSv1.2` parameters (1.1.13, 1.0.12) work only when OpenSSL 1.0.1 or higher is used.

    The `TLSv1.3` parameter (1.13.0) works only when OpenSSL 1.1.1 or higher is used.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: ssl_protocols (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_protocols
  summary: Enables the specified protocols for requests to the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                                                              |
    |----------|------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `mgmt`                                                                       |

    Enables the specified protocols for requests to the Instance Manager.
- name: ssl_protocols (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_protocols
  summary: Enables the specified protocols
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                                                              |
    |----------|------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `stream`, `server`                                                           |

    Enables the specified protocols.

    If the directive is specified on the [server](ngx_stream_core_module#server) level, the value from the default server can be used.

    The `TLSv1.1` and `TLSv1.2` parameters work only when OpenSSL 1.0.1 or higher is used.

    The `TLSv1.3` parameter (1.13.0) works only when OpenSSL 1.1.1 or higher is used.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: ssl_reject_handshake
  id: http/ngx_http_ssl_module#ssl_reject_handshake
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_reject_handshake`**` on | off;` |
    | Default: | `ssl_reject_handshake off;`            |
    | Context: | `http`, `server`                       |

    This directive appeared in version 1.19.4.

    If enabled, SSL handshakes in the [server](ngx_http_core_module#server) block will be rejected.

    For example, in the following configuration, SSL handshakes with server names other than `example.com` are rejected:

    ``` nginx
    server {
        listen               443 ssl default_server;
        ssl_reject_handshake on;
    }

    server {
        listen              443 ssl;
        server_name         example.com;
        ssl_certificate     example.com.crt;
        ssl_certificate_key example.com.key;
    }
    ```
- name: ssl_reject_handshake (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_reject_handshake
  summary: This directive appeared in version 1.25.5
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_reject_handshake`**` on | off;` |
    | Default: | `ssl_reject_handshake off;`            |
    | Context: | `stream`, `server`                     |

    This directive appeared in version 1.25.5.

    If enabled, SSL handshakes in the [server](ngx_stream_core_module#server) block will be rejected.

    For example, in the following configuration, SSL handshakes with server names other than `example.com` are rejected:

    ``` nginx
    server {
        listen               443 ssl default_server;
        ssl_reject_handshake on;
    }

    server {
        listen              443 ssl;
        server_name         example.com;
        ssl_certificate     example.com.crt;
        ssl_certificate_key example.com.key;
    }
    ```
- name: ssl_server_name (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_server_name
  summary: Enables or disables passing of the server name through TLS Server Name Indication extension (SNI, RFC 6066) when establishing a connection with the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`ssl_server_name`**` on | off;` |
    | Default: | `ssl_server_name off;`            |
    | Context: | `mgmt`                            |

    Enables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the Instance Manager.
- name: ssl_session_cache
  id: http/ngx_http_ssl_module#ssl_session_cache
  summary: Sets the types and sizes of caches that store session parameters
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                                                                               |
    |----------|-----------------------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_session_cache`**` off | none | [builtin[:`*`size`*`]] [shared:`*`name`*`:`*`size`*`];` |
    | Default: | `ssl_session_cache none;`                                                                     |
    | Context: | `http`, `server`                                                                              |

    Sets the types and sizes of caches that store session parameters. A cache can be of any of the following types:

    `off`

    the use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused.

    `none`

    the use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache.

    `builtin`

    a cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation.

    `shared`

    a cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several virtual servers. It is also used to automatically generate, store, and periodically rotate TLS session ticket keys (1.23.2) unless configured explicitly using the [ssl_session_ticket_key](#ssl_session_ticket_key) directive.

    Both cache types can be used simultaneously, for example:

    ``` nginx
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ```

    but using only shared cache without the built-in cache should be more efficient.
- name: ssl_session_cache (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_session_cache
  summary: Sets the types and sizes of caches that store session parameters
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                                                                               |
    |----------|-----------------------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_session_cache`**` off | none | [builtin[:`*`size`*`]] [shared:`*`name`*`:`*`size`*`];` |
    | Default: | `ssl_session_cache none;`                                                                     |
    | Context: | `mail`, `server`                                                                              |

    Sets the types and sizes of caches that store session parameters. A cache can be of any of the following types:

    `off`

    the use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused.

    `none`

    the use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache.

    `builtin`

    a cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation.

    `shared`

    a cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several servers. It is also used to automatically generate, store, and periodically rotate TLS session ticket keys (1.23.2) unless configured explicitly using the [ssl_session_ticket_key](#ssl_session_ticket_key) directive.

    Both cache types can be used simultaneously, for example:

    ``` nginx
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ```

    but using only shared cache without the built-in cache should be more efficient.
- name: ssl_session_cache (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_session_cache
  summary: Sets the types and sizes of caches that store session parameters
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                                                                               |
    |----------|-----------------------------------------------------------------------------------------------|
    | Syntax:  | **`ssl_session_cache`**` off | none | [builtin[:`*`size`*`]] [shared:`*`name`*`:`*`size`*`];` |
    | Default: | `ssl_session_cache none;`                                                                     |
    | Context: | `stream`, `server`                                                                            |

    Sets the types and sizes of caches that store session parameters. A cache can be of any of the following types:

    `off`

    the use of a session cache is strictly prohibited: nginx explicitly tells a client that sessions may not be reused.

    `none`

    the use of a session cache is gently disallowed: nginx tells a client that sessions may be reused, but does not actually store session parameters in the cache.

    `builtin`

    a cache built in OpenSSL; used by one worker process only. The cache size is specified in sessions. If size is not given, it is equal to 20480 sessions. Use of the built-in cache can cause memory fragmentation.

    `shared`

    a cache shared between all worker processes. The cache size is specified in bytes; one megabyte can store about 4000 sessions. Each shared cache should have an arbitrary name. A cache with the same name can be used in several servers. It is also used to automatically generate, store, and periodically rotate TLS session ticket keys (1.23.2) unless configured explicitly using the [ssl_session_ticket_key](#ssl_session_ticket_key) directive.

    Both cache types can be used simultaneously, for example:

    ``` nginx
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ```

    but using only shared cache without the built-in cache should be more efficient.
- name: ssl_session_ticket_key
  id: http/ngx_http_ssl_module#ssl_session_ticket_key
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`ssl_session_ticket_key`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `http`, `server`                        |

    This directive appeared in version 1.5.7.

    Sets a *`file`* with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used.

    If several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example:

    ``` nginx
    ssl_session_ticket_key current.key;
    ssl_session_ticket_key previous.key;
    ```

    The *`file`* must contain 80 or 48 bytes of random data and can be created using the following command:

    ``` nginx
    openssl rand 80 > ticket.key
    ```

    Depending on the file size either AES256 (for 80-byte keys, 1.11.8) or AES128 (for 48-byte keys) is used for encryption.
- name: ssl_session_ticket_key (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_session_ticket_key
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`ssl_session_ticket_key`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `mail`, `server`                        |

    This directive appeared in version 1.5.7.

    Sets a *`file`* with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used.

    If several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example:

    ``` nginx
    ssl_session_ticket_key current.key;
    ssl_session_ticket_key previous.key;
    ```

    The *`file`* must contain 80 or 48 bytes of random data and can be created using the following command:

    ``` nginx
    openssl rand 80 > ticket.key
    ```

    Depending on the file size either AES256 (for 80-byte keys, 1.11.8) or AES128 (for 48-byte keys) is used for encryption.
- name: ssl_session_ticket_key (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_session_ticket_key
  summary: Sets a file with the secret key used to encrypt and decrypt TLS session tickets
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`ssl_session_ticket_key`***`file`*`;` |
    | Default: | —                                       |
    | Context: | `stream`, `server`                      |

    Sets a *`file`* with the secret key used to encrypt and decrypt TLS session tickets. The directive is necessary if the same key has to be shared between multiple servers. By default, a randomly generated key is used.

    If several keys are specified, only the first key is used to encrypt TLS session tickets. This allows configuring key rotation, for example:

    ``` nginx
    ssl_session_ticket_key current.key;
    ssl_session_ticket_key previous.key;
    ```

    The *`file`* must contain 80 or 48 bytes of random data and can be created using the following command:

    ``` nginx
    openssl rand 80 > ticket.key
    ```

    Depending on the file size either AES256 (for 80-byte keys, 1.11.8) or AES128 (for 48-byte keys) is used for encryption.
- name: ssl_session_tickets
  id: http/ngx_http_ssl_module#ssl_session_tickets
  summary: This directive appeared in version 1.5.9
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`ssl_session_tickets`**` on | off;` |
    | Default: | `ssl_session_tickets on;`             |
    | Context: | `http`, `server`                      |

    This directive appeared in version 1.5.9.

    Enables or disables session resumption through [TLS session tickets](https://datatracker.ietf.org/doc/html/rfc5077).
- name: ssl_session_tickets (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_session_tickets
  summary: This directive appeared in version 1.5.9
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`ssl_session_tickets`**` on | off;` |
    | Default: | `ssl_session_tickets on;`             |
    | Context: | `mail`, `server`                      |

    This directive appeared in version 1.5.9.

    Enables or disables session resumption through [TLS session tickets](https://datatracker.ietf.org/doc/html/rfc5077).
- name: ssl_session_tickets (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_session_tickets
  summary: Enables or disables session resumption through TLS session tickets
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`ssl_session_tickets`**` on | off;` |
    | Default: | `ssl_session_tickets on;`             |
    | Context: | `stream`, `server`                    |

    Enables or disables session resumption through [TLS session tickets](https://datatracker.ietf.org/doc/html/rfc5077).
- name: ssl_session_timeout
  id: http/ngx_http_ssl_module#ssl_session_timeout
  summary: Specifies a time during which a client may reuse the session parameters
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_session_timeout`***`time`*`;` |
    | Default: | `ssl_session_timeout 5m;`            |
    | Context: | `http`, `server`                     |

    Specifies a time during which a client may reuse the session parameters.
- name: ssl_session_timeout (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_session_timeout
  summary: Specifies a time during which a client may reuse the session parameters
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_session_timeout`***`time`*`;` |
    | Default: | `ssl_session_timeout 5m;`            |
    | Context: | `mail`, `server`                     |

    Specifies a time during which a client may reuse the session parameters.
- name: ssl_session_timeout (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_session_timeout
  summary: Specifies a time during which a client may reuse the session parameters
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`ssl_session_timeout`***`time`*`;` |
    | Default: | `ssl_session_timeout 5m;`            |
    | Context: | `stream`, `server`                   |

    Specifies a time during which a client may reuse the session parameters.
- name: ssl_stapling
  id: http/ngx_http_ssl_module#ssl_stapling
  summary: This directive appeared in version 1.3.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`ssl_stapling`**` on | off;` |
    | Default: | `ssl_stapling off;`            |
    | Context: | `http`, `server`               |

    This directive appeared in version 1.3.7.

    Enables or disables [stapling of OCSP responses](https://datatracker.ietf.org/doc/html/rfc6066#section-8) by the server. Example:

    ``` nginx
    ssl_stapling on;
    resolver 192.0.2.1;
    ```

    For the OCSP stapling to work, the certificate of the server certificate issuer should be known. If the [ssl_certificate](#ssl_certificate) file does not contain intermediate certificates, the certificate of the server certificate issuer should be present in the [ssl_trusted_certificate](#ssl_trusted_certificate) file.

    For a resolution of the OCSP responder hostname, the [resolver](ngx_http_core_module#resolver) directive should also be specified.
- name: ssl_stapling_file
  id: http/ngx_http_ssl_module#ssl_stapling_file
  summary: This directive appeared in version 1.3.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`ssl_stapling_file`***`file`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`                   |

    This directive appeared in version 1.3.7.

    When set, the stapled OCSP response will be taken from the specified *`file`* instead of querying the OCSP responder specified in the server certificate.

    The file should be in the DER format as produced by the “`openssl ocsp`” command.
- name: ssl_stapling_responder
  id: http/ngx_http_ssl_module#ssl_stapling_responder
  summary: This directive appeared in version 1.3.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`ssl_stapling_responder`***`url`*`;` |
    | Default: | —                                      |
    | Context: | `http`, `server`                       |

    This directive appeared in version 1.3.7.

    Overrides the URL of the OCSP responder specified in the “[Authority Information Access](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.1)” certificate extension.

    Only “`http://`” OCSP responders are supported:

    ``` nginx
    ssl_stapling_responder http://ocsp.example.com/;
    ```
- name: ssl_stapling_verify
  id: http/ngx_http_ssl_module#ssl_stapling_verify
  summary: This directive appeared in version 1.3.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`ssl_stapling_verify`**` on | off;` |
    | Default: | `ssl_stapling_verify off;`            |
    | Context: | `http`, `server`                      |

    This directive appeared in version 1.3.7.

    Enables or disables verification of OCSP responses by the server.

    For verification to work, the certificate of the server certificate issuer, the root certificate, and all intermediate certificates should be configured as trusted using the [ssl_trusted_certificate](#ssl_trusted_certificate) directive.
- name: ssl_trusted_certificate
  id: http/ngx_http_ssl_module#ssl_trusted_certificate
  summary: This directive appeared in version 1.3.7
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `http`, `server`                         |

    This directive appeared in version 1.3.7.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates and OCSP responses if [ssl_stapling](#ssl_stapling) is enabled.

    In contrast to the certificate set by [ssl_client_certificate](#ssl_client_certificate), the list of these certificates will not be sent to clients.
- name: ssl_trusted_certificate (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_trusted_certificate
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `mail`, `server`                         |

    This directive appeared in version 1.7.11.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.

    In contrast to the certificate set by [ssl_client_certificate](#ssl_client_certificate), the list of these certificates will not be sent to clients.
- name: ssl_trusted_certificate (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_trusted_certificate
  summary: Specifies a file with trusted CA certificates in the PEM format used to verify the certificate of the Instance Manager
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `mgmt`                                   |

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify) the certificate of the Instance Manager.
- name: ssl_trusted_certificate (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_trusted_certificate
  summary: This directive appeared in version 1.11.8
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `stream`, `server`                       |

    This directive appeared in version 1.11.8.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#ssl_verify_client) client certificates.

    In contrast to the certificate set by [ssl_client_certificate](#ssl_client_certificate), the list of these certificates will not be sent to clients.
- name: ssl_verify (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_verify
  summary: Enables or disables verification of the Instance Manager certificate
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`ssl_verify`**` on | off;` |
    | Default: | `ssl_verify off;`            |
    | Context: | `mgmt`                       |

    Enables or disables verification of the Instance Manager certificate.
- name: ssl_verify_client
  id: http/ngx_http_ssl_module#ssl_verify_client
  summary: Enables verification of client certificates
  belongs_to: ngx_http_ssl_module
  description: |-
    |          |                                                                 |
    |----------|-----------------------------------------------------------------|
    | Syntax:  | **`ssl_verify_client`**` on | off | optional | optional_no_ca;` |
    | Default: | `ssl_verify_client off;`                                        |
    | Context: | `http`, `server`                                                |

    Enables verification of client certificates. The verification result is stored in the [$ssl_client_verify](#var_ssl_client_verify) variable.

    The `optional` parameter (0.8.7+) requests the client certificate and verifies it if the certificate is present.

    The `optional_no_ca` parameter (1.3.8, 1.2.5) requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through the [$ssl_client_cert](#var_ssl_client_cert) variable.
- name: ssl_verify_client (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_verify_client
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                                                 |
    |----------|-----------------------------------------------------------------|
    | Syntax:  | **`ssl_verify_client`**` on | off | optional | optional_no_ca;` |
    | Default: | `ssl_verify_client off;`                                        |
    | Context: | `mail`, `server`                                                |

    This directive appeared in version 1.7.11.

    Enables verification of client certificates. The verification result is passed in the “Auth-SSL-Verify” header of the [authentication](ngx_mail_auth_http_module#auth_http) request.

    The `optional` parameter requests the client certificate and verifies it if the certificate is present.

    The `optional_no_ca` parameter requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through requests [sent](ngx_mail_auth_http_module#auth_http_pass_client_cert) to the authentication server.
- name: ssl_verify_client (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_verify_client
  summary: This directive appeared in version 1.11.8
  belongs_to: ngx_stream_ssl_module
  description: |-
    |          |                                                                 |
    |----------|-----------------------------------------------------------------|
    | Syntax:  | **`ssl_verify_client`**` on | off | optional | optional_no_ca;` |
    | Default: | `ssl_verify_client off;`                                        |
    | Context: | `stream`, `server`                                              |

    This directive appeared in version 1.11.8.

    Enables verification of client certificates. The verification result is stored in the [$ssl_client_verify](#var_ssl_client_verify) variable. If an error has occurred during the client certificate verification or a client has not presented the required certificate, the connection is closed.

    The `optional` parameter requests the client certificate and verifies it if the certificate is present.

    The `optional_no_ca` parameter requests the client certificate but does not require it to be signed by a trusted CA certificate. This is intended for the use in cases when a service that is external to nginx performs the actual certificate verification. The contents of the certificate is accessible through the [$ssl_client_cert](#var_ssl_client_cert) variable.
- name: ssl_verify_depth
  id: http/ngx_http_ssl_module#ssl_verify_depth
  summary: Sets the verification depth in the client certificates chain
  belongs_to: ngx_http_ssl_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_verify_depth`***`number`*`;` |\n| Default: | `ssl_verify_depth 1;`               |\n| Context: | `http`, `server`                    |\n\nSets the verification depth in the client certificates chain.\n\n#### Error Processing\n\nThe `ngx_http_ssl_module` module supports several non-standard error codes that can be used for redirects using the [error_page](ngx_http_core_module#error_page) directive:\n\n495\n\nan error has occurred during the client certificate verification;\n\n496\n\na client has not presented the required certificate;\n\n497\n\na regular request has been sent to the HTTPS port.\n\nThe redirection happens after the request is fully parsed and the variables, such as `$request_uri`, `$uri`, `$args` and others, are available.\n\n#### Embedded Variables\n\nThe `ngx_http_ssl_module` module supports embedded variables:\n\n`$ssl_alpn_protocol`\n\nreturns the protocol selected by ALPN during the SSL handshake, or an empty string otherwise (1.21.4);\n\n`$ssl_cipher`\n\nreturns the name of the cipher used for an established SSL connection;\n\n`$ssl_ciphers`\n\nreturns the list of ciphers supported by the client (1.11.7). Known ciphers are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nAES128-SHA:AES256-SHA:0x00ff\n```\n\nThe variable is fully supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable is available only for new sessions and lists only known ciphers.\n\n`$ssl_client_escaped_cert`\n\nreturns the client certificate in the PEM format (urlencoded) for an established SSL connection (1.13.5);\n\n`$ssl_client_cert`\n\nreturns the client certificate in the PEM format for an established SSL connection, with each line except the first prepended with the tab character; this is intended for the use in the [proxy_set_header](ngx_http_proxy_module#proxy_set_header) directive;\n\nThe variable is deprecated, the `$ssl_client_escaped_cert` variable should be used instead.\n\n`$ssl_client_fingerprint`\n\nreturns the SHA1 fingerprint of the client certificate for an established SSL connection (1.7.1);\n\n`$ssl_client_i_dn`\n\nreturns the “issuer DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.6);\n\n`$ssl_client_i_dn_legacy`\n\nreturns the “issuer DN” string of the client certificate for an established SSL connection;\n\nPrior to version 1.11.6, the variable name was `$ssl_client_i_dn`.\n\n`$ssl_client_raw_cert`\n\nreturns the client certificate in the PEM format for an established SSL connection;\n\n`$ssl_client_s_dn`\n\nreturns the “subject DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.6);\n\n`$ssl_client_s_dn_legacy`\n\nreturns the “subject DN” string of the client certificate for an established SSL connection;\n\nPrior to version 1.11.6, the variable name was `$ssl_client_s_dn`.\n\n`$ssl_client_serial`\n\nreturns the serial number of the client certificate for an established SSL connection;\n\n`$ssl_client_v_end`\n\nreturns the end date of the client certificate (1.11.7);\n\n`$ssl_client_v_remain`\n\nreturns the number of days until the client certificate expires (1.11.7);\n\n`$ssl_client_v_start`\n\nreturns the start date of the client certificate (1.11.7);\n\n`$ssl_client_verify`\n\nreturns the result of client certificate verification: “`SUCCESS`”, “`FAILED:`*`reason`*”, and “`NONE`” if a certificate was not present;\n\nPrior to version 1.11.7, the “`FAILED`” result did not contain the *`reason`* string.\n\n`$ssl_curve`\n\nreturns the negotiated curve used for SSL handshake key exchange process (1.21.5). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nprime256v1\n```\n\nThe variable is supported only when using OpenSSL version 3.0 or higher. With older versions, the variable value will be an empty string.\n\n`$ssl_curves`\n\nreturns the list of curves supported by the client (1.11.7). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\n0x001d:prime256v1:secp521r1:secp384r1\n```\n\nThe variable is supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable value will be an empty string.\n\nThe variable is available only for new sessions.\n\n`$ssl_early_data`\n\nreturns “`1`” if TLS 1.3 [early data](#ssl_early_data) is used and the handshake is not complete, otherwise “” (1.15.3).\n\n`$ssl_protocol`\n\nreturns the protocol of an established SSL connection;\n\n`$ssl_server_name`\n\nreturns the server name requested through [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) (1.7.0);\n\n`$ssl_session_id`\n\nreturns the session identifier of an established SSL connection;\n\n`$ssl_session_reused`\n\nreturns “`r`” if an SSL session was reused, or “`.`” otherwise (1.5.11).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_ssl_module.html](https://nginx.org/en/docs/http/ngx_http_ssl_module.html)"
- name: ssl_verify_depth (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#ssl_verify_depth
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_mail_ssl_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`ssl_verify_depth`***`number`*`;` |
    | Default: | `ssl_verify_depth 1;`               |
    | Context: | `mail`, `server`                    |

    This directive appeared in version 1.7.11.

    Sets the verification depth in the client certificates chain.
- name: ssl_verify_depth (ngx_mgmt_module)
  id: ngx_mgmt_module#ssl_verify_depth
  summary: Sets the verification depth in the Instance Manager certificates chain
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`ssl_verify_depth`***`number`*`;` |
    | Default: | `ssl_verify_depth 1;`               |
    | Context: | `mgmt`                              |

    Sets the verification depth in the Instance Manager certificates chain.
- name: ssl_verify_depth (ngx_stream_ssl_module)
  id: stream/ngx_stream_ssl_module#ssl_verify_depth
  summary: This directive appeared in version 1.11.8
  belongs_to: ngx_stream_ssl_module
  description: "|          |                                     |\n|----------|-------------------------------------|\n| Syntax:  | **`ssl_verify_depth`***`number`*`;` |\n| Default: | `ssl_verify_depth 1;`               |\n| Context: | `stream`, `server`                  |\n\nThis directive appeared in version 1.11.8.\n\nSets the verification depth in the client certificates chain.\n\n#### Embedded Variables\n\nThe `ngx_stream_ssl_module` module supports variables since 1.11.2.\n\n`$ssl_alpn_protocol`\n\nreturns the protocol selected by ALPN during the SSL handshake, or an empty string otherwise (1.21.4);\n\n`$ssl_cipher`\n\nreturns the name of the cipher used for an established SSL connection;\n\n`$ssl_ciphers`\n\nreturns the list of ciphers supported by the client (1.11.7). Known ciphers are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nAES128-SHA:AES256-SHA:0x00ff\n```\n\nThe variable is fully supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable is available only for new sessions and lists only known ciphers.\n\n`$ssl_client_cert`\n\nreturns the client certificate in the PEM format for an established SSL connection, with each line except the first prepended with the tab character (1.11.8);\n\n`$ssl_client_fingerprint`\n\nreturns the SHA1 fingerprint of the client certificate for an established SSL connection (1.11.8);\n\n`$ssl_client_i_dn`\n\nreturns the “issuer DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.8);\n\n`$ssl_client_raw_cert`\n\nreturns the client certificate in the PEM format for an established SSL connection (1.11.8);\n\n`$ssl_client_s_dn`\n\nreturns the “subject DN” string of the client certificate for an established SSL connection according to [RFC 2253](https://datatracker.ietf.org/doc/html/rfc2253) (1.11.8);\n\n`$ssl_client_serial`\n\nreturns the serial number of the client certificate for an established SSL connection (1.11.8);\n\n`$ssl_client_v_end`\n\nreturns the end date of the client certificate (1.11.8);\n\n`$ssl_client_v_remain`\n\nreturns the number of days until the client certificate expires (1.11.8);\n\n`$ssl_client_v_start`\n\nreturns the start date of the client certificate (1.11.8);\n\n`$ssl_client_verify`\n\nreturns the result of client certificate verification (1.11.8): “`SUCCESS`”, “`FAILED:`*`reason`*”, and “`NONE`” if a certificate was not present;\n\n`$ssl_curve`\n\nreturns the negotiated curve used for SSL handshake key exchange process (1.21.5). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\nprime256v1\n```\n\nThe variable is supported only when using OpenSSL version 3.0 or higher. With older versions, the variable value will be an empty string.\n\n`$ssl_curves`\n\nreturns the list of curves supported by the client (1.11.7). Known curves are listed by names, unknown are shown in hexadecimal, for example:\n\n``` nginx\n0x001d:prime256v1:secp521r1:secp384r1\n```\n\nThe variable is supported only when using OpenSSL version 1.0.2 or higher. With older versions, the variable value will be an empty string.\n\nThe variable is available only for new sessions.\n\n`$ssl_protocol`\n\nreturns the protocol of an established SSL connection;\n\n`$ssl_server_name`\n\nreturns the server name requested through [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication);\n\n`$ssl_session_id`\n\nreturns the session identifier of an established SSL connection;\n\n`$ssl_session_reused`\n\nreturns “`r`” if an SSL session was reused, or “`.`” otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html](https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html)"
- name: starttls (ngx_mail_ssl_module)
  id: mail/ngx_mail_ssl_module#starttls
  summary: require preliminary TLS transition
  belongs_to: ngx_mail_ssl_module
  description: "|          |                                   |\n|----------|-----------------------------------|\n| Syntax:  | **`starttls`**` on | off | only;` |\n| Default: | `starttls off;`                   |\n| Context: | `mail`, `server`                  |\n\n`on`\n\nallow usage of the `STLS` command for the POP3 and the `STARTTLS` command for the IMAP and SMTP;\n\n`off`\n\ndeny usage of the `STLS` and `STARTTLS` commands;\n\n`only`\n\nrequire preliminary TLS transition.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html](https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html)"
- name: state
  id: http/ngx_http_upstream_module#state
  summary: This directive appeared in version 1.9.7
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`state`***`file`*`;` |
    | Default: | —                      |
    | Context: | `upstream`             |

    This directive appeared in version 1.9.7.

    Specifies a *`file`* that keeps the state of the dynamically configurable group.

    Examples:

    ``` nginx
    state /var/lib/nginx/state/servers.conf; # path for Linux
    state /var/db/nginx/state/servers.conf;  # path for FreeBSD
    ```

    The state is currently limited to the list of servers with their parameters. The file is read when parsing the configuration and is updated each time the upstream configuration is [changed](ngx_http_api_module#http_upstreams_http_upstream_name_servers_). Changing the file content directly should be avoided. The directive cannot be used along with the [server](#server) directive.

    Changes made during [configuration reload](../control#reconfiguration) or [binary upgrade](../control#upgrade) can be lost.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: state (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#state
  summary: This directive appeared in version 1.9.7
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`state`***`file`*`;` |
    | Default: | —                      |
    | Context: | `upstream`             |

    This directive appeared in version 1.9.7.

    Specifies a *`file`* that keeps the state of the dynamically configurable group.

    Examples:

    ``` nginx
    state /var/lib/nginx/state/servers.conf; # path for Linux
    state /var/db/nginx/state/servers.conf;  # path for FreeBSD
    ```

    The state is currently limited to the list of servers with their parameters. The file is read when parsing the configuration and is updated each time the upstream configuration is [changed](../http/ngx_http_api_module#stream_upstreams_stream_upstream_name_servers_). Changing the file content directly should be avoided. The directive cannot be used along with the [server](#server) directive.

    Changes made during [configuration reload](../control#reconfiguration) or [binary upgrade](../control#upgrade) can be lost.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: status
  id: http/ngx_http_status_module#status
  summary: The status information will be accessible from the surrounding location
  belongs_to: ngx_http_status_module
  description: |-
    |          |                 |
    |----------|-----------------|
    | Syntax:  | **`status`**`;` |
    | Default: | —               |
    | Context: | `location`      |

    The status information will be accessible from the surrounding location. Access to this location should be [limited](ngx_http_core_module#satisfy).
- name: status_format
  id: http/ngx_http_status_module#status_format
  summary: By default, status information is output in the JSON format
  belongs_to: ngx_http_status_module
  description: |-
    |          |                                                                          |
    |----------|--------------------------------------------------------------------------|
    | Syntax:  | **`status_format`**` json;`**`status_format`**` jsonp [`*`callback`*`];` |
    | Default: | `status_format json;`                                                    |
    | Context: | `http`, `server`, `location`                                             |

    By default, status information is output in the JSON format.

    Alternatively, data may be output as JSONP. The *`callback`* parameter specifies the name of a callback function. Parameter value can contain variables. If parameter is omitted, or the computed value is an empty string, then “`ngx_status_jsonp_callback`” is used.
- name: status_zone
  id: http/ngx_http_api_module#status_zone
  summary: This directive appeared in version 1.13.12
  belongs_to: ngx_http_api_module
  description: "|          |                                        |\n|----------|----------------------------------------|\n| Syntax:  | **`status_zone`***`zone`*`;`           |\n| Default: | —                                      |\n| Context: | `server`, `location`, `if in location` |\n\nThis directive appeared in version 1.13.12.\n\nEnables collection of virtual [http](ngx_http_core_module#server) or [stream](../stream/ngx_stream_core_module#server) server status information in the specified *`zone`*. Several servers may share the same zone.\n\nStarting from 1.17.0, status information can be collected per [location](ngx_http_core_module#location). The special value `off` disables statistics collection in nested location blocks. Note that the statistics is collected in the context of a location where processing ends. It may be different from the original location, if an [internal redirect](ngx_http_core_module#internal) happens during request processing.\n\n#### Compatibility\n\n- The [/workers/](#workers_) data were added in [version](#api_version) 9.\n- Detailed failure counters were added to SSL statistics in [version](#api_version) 8 (1.23.2).\n- The `ssl` data for each HTTP [upstream](#def_nginx_http_upstream), [server zone](#def_nginx_http_server_zone), and stream [upstream](#def_nginx_stream_upstream), [server zone](#def_nginx_stream_server_zone), were added in [version](#api_version) 8 (1.21.6).\n- The `codes` data in `responses` for each HTTP [upstream](#def_nginx_http_upstream), [server zone](#def_nginx_http_server_zone), and [location zone](#def_nginx_http_location_zone) were added in [version](#api_version) 7.\n- The [/stream/limit_conns/](#stream_limit_conns_) data were added in [version](#api_version) 6.\n- The [/http/limit_conns/](#http_limit_conns_) data were added in [version](#api_version) 6.\n- The [/http/limit_reqs/](#http_limit_reqs_) data were added in [version](#api_version) 6.\n- The “`expire`” parameter of a [key-value](ngx_http_keyval_module) pair can be [set](#postHttpKeyvalZoneData) or [changed](#patchHttpKeyvalZoneKeyValue) since [version](#api_version) 5.\n- The [/resolvers/](#resolvers_) data were added in [version](#api_version) 5.\n- The [/http/location_zones/](#http_location_zones_) data were added in [version](#api_version) 5.\n- The `path` and `method` fields of [nginx error object](#def_nginx_error) were removed in [version](#api_version) 4. These fields continue to exist in earlier api versions, but show an empty value.\n- The [/stream/zone_sync/](#stream_zone_sync_) data were added in [version](#api_version) 3.\n- The [drain](#def_nginx_http_upstream_conf_server) parameter was added in [version](#api_version) 2.\n- The [/stream/keyvals/](#stream_keyvals_) data were added in [version](#api_version) 2.\n\n#### Endpoints\n\n`/`\n\nSupported methods:\n\n- `GET` - Return list of root endpoints\n\n  Returns a list of root endpoints.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of strings\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/nginx`\n\nSupported methods:\n\n- `GET` - Return status of nginx running instance\n\n  Returns nginx version, build name, address, number of configuration reloads, IDs of master and worker processes.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of nginx running instance will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [nginx](#def_nginx_object)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/processes`\n\nSupported methods:\n\n- `GET` - Return nginx processes status\n\n  Returns the number of abnormally terminated and respawned child processes.\n\n  Possible responses:\n\n  - 200 - Success, returns [Processes](#def_nginx_processes)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset nginx processes statistics\n\n  Resets counters of abnormally terminated and respawned child processes.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/connections`\n\nSupported methods:\n\n- `GET` - Return client connections statistics\n\n  Returns statistics of client connections.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the connections statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Connections](#def_nginx_connections)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset client connections statistics\n\n  Resets statistics of accepted and dropped client connections.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/slabs/`\n\nSupported methods:\n\n- `GET` - Return status of all slabs\n\n  Returns status of slabs for each shared memory zone with slab allocator.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of slab zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Shared memory zone with slab allocator](#def_nginx_slab_zone)\" objects for all slabs\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/slabs/{slabZoneName}`\n\nParameters common for all methods:\n\n`slabZoneName` (`string`, required)\n\nThe name of the shared memory zone with slab allocator.\n\nSupported methods:\n\n- `GET` - Return status of a slab\n\n  Returns status of slabs for a particular shared memory zone with slab allocator.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the slab zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Shared memory zone with slab allocator](#def_nginx_slab_zone)\n  - 404 - Slab not found (`SlabNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset slab statistics\n\n  Resets the “`reqs`” and “`fails`” metrics for each memory slot.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Slab not found (`SlabNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/`\n\nSupported methods:\n\n- `GET` - Return list of HTTP-related endpoints\n\n  Returns a list of first level HTTP endpoints.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of strings\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/requests`\n\nSupported methods:\n\n- `GET` - Return HTTP requests statistics\n\n  Returns status of client HTTP requests.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of client HTTP requests statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Requests](#def_nginx_http_requests)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset HTTP requests statistics\n\n  Resets the number of total client HTTP requests.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/server_zones/`\n\nSupported methods:\n\n- `GET` - Return status of all HTTP server zones\n\n  Returns status information for each HTTP [server zone](ngx_http_api_module#status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of server zones will be output. If the “`fields`” value is empty, then only server zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Server Zone](#def_nginx_http_server_zone)\" objects for all HTTP server zones\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/server_zones/{httpServerZoneName}`\n\nParameters common for all methods:\n\n`httpServerZoneName` (`string`, required)\n\nThe name of an HTTP server zone.\n\nSupported methods:\n\n- `GET` - Return status of an HTTP server zone\n\n  Returns status of a particular HTTP server zone.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the server zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Server Zone](#def_nginx_http_server_zone)\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for an HTTP server zone\n\n  Resets statistics of accepted and discarded requests, responses, received and sent bytes, counters of SSL handshakes and session reuses in a particular HTTP server zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/location_zones/`\n\nSupported methods:\n\n- `GET` - Return status of all HTTP location zones\n\n  Returns status information for each HTTP [location zone](ngx_http_api_module#status_zone_location).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of location zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Location Zone](#def_nginx_http_location_zone)\" objects for all HTTP location zones\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/location_zones/{httpLocationZoneName}`\n\nParameters common for all methods:\n\n`httpLocationZoneName` (`string`, required)\n\nThe name of an HTTP [location zone](ngx_http_api_module#status_zone_location).\n\nSupported methods:\n\n- `GET` - Return status of an HTTP location zone\n\n  Returns status of a particular HTTP [location zone](ngx_http_api_module#status_zone_location).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the location zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Location Zone](#def_nginx_http_location_zone)\n  - 404 - Location zone not found (`LocationZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a location zone.\n\n  Resets statistics of accepted and discarded requests, responses, received and sent bytes in a particular location zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Location zone not found (`LocationZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/caches/`\n\nSupported methods:\n\n- `GET` - Return status of all caches\n\n  Returns status of each cache configured by [proxy_cache_path](ngx_http_proxy_module#proxy_cache_path) and other “`*_cache_path`” directives.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of cache zones will be output. If the “`fields`” value is empty, then only names of cache zones will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Cache](#def_nginx_http_cache)\" objects for all HTTP caches\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/caches/{httpCacheZoneName}`\n\nParameters common for all methods:\n\n`httpCacheZoneName` (`string`, required)\n\nThe name of the cache zone.\n\nSupported methods:\n\n- `GET` - Return status of a cache\n\n  Returns status of a particular cache.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the cache zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Cache](#def_nginx_http_cache)\n  - 404 - Cache not found (`CacheNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset cache statistics\n\n  Resets statistics of cache hits/misses in a particular cache zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Cache not found (`CacheNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/limit_conns/`\n\nSupported methods:\n\n- `GET` - Return status of all HTTP limit_conn zones\n\n  Returns status information for each HTTP [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of limit_conn zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Connections Limiting](#def_nginx_http_limit_conn_zone)\" objects for all HTTP limit conns\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/limit_conns/{httpLimitConnZoneName}`\n\nParameters common for all methods:\n\n`httpLimitConnZoneName` (`string`, required)\n\nThe name of a [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone).\n\nSupported methods:\n\n- `GET` - Return status of an HTTP limit_conn zone\n\n  Returns status of a particular HTTP [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the [limit_conn zone](ngx_http_limit_conn_module#limit_conn_zone) will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Connections Limiting](#def_nginx_http_limit_conn_zone)\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for an HTTP limit_conn zone\n\n  Resets the connection limiting statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/limit_reqs/`\n\nSupported methods:\n\n- `GET` - Return status of all HTTP limit_req zones\n\n  Returns status information for each HTTP [limit_req zone](ngx_http_limit_req_module#limit_req_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of limit_req zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Requests Rate Limiting](#def_nginx_http_limit_req_zone)\" objects for all HTTP limit reqs\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/limit_reqs/{httpLimitReqZoneName}`\n\nParameters common for all methods:\n\n`httpLimitReqZoneName` (`string`, required)\n\nThe name of a [limit_req zone](ngx_http_limit_req_module#limit_req_zone).\n\nSupported methods:\n\n- `GET` - Return status of an HTTP limit_req zone\n\n  Returns status of a particular HTTP [limit_req zone](ngx_http_limit_req_module#limit_req_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the [limit_req zone](ngx_http_limit_req_module#limit_req_zone) will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Requests Rate Limiting](#def_nginx_http_limit_req_zone)\n  - 404 - limit_req not found (`LimitReqNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for an HTTP limit_req zone\n\n  Resets the requests limiting statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - limit_req not found (`LimitReqNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/`\n\nSupported methods:\n\n- `GET` - Return status of all HTTP upstream server groups\n\n  Returns status of each HTTP upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of upstream server groups will be output. If the “`fields`” value is empty, only names of upstreams will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Upstream](#def_nginx_http_upstream)\" objects for all HTTP upstreams\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/{httpUpstreamName}/`\n\nParameters common for all methods:\n\n`httpUpstreamName` (`string`, required)\n\nThe name of an HTTP upstream server group.\n\nSupported methods:\n\n- `GET` - Return status of an HTTP upstream server group\n\n  Returns status of a particular HTTP upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the upstream server group will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Upstream](#def_nginx_http_upstream)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics of an HTTP upstream server group\n\n  Resets the statistics for each upstream server in an upstream server group and queue statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/{httpUpstreamName}/servers/`\n\nParameters common for all methods:\n\n`httpUpstreamName` (`string`, required)\n\nThe name of an upstream server group.\n\nSupported methods:\n\n- `GET` - Return configuration of all servers in an HTTP upstream server group\n\n  Returns configuration of each server in a particular HTTP upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [HTTP Upstream Servers](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a server to an HTTP upstream server group\n\n  Adds a new server to an HTTP upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `postHttpUpstreamServer` ([HTTP Upstream Server](#def_nginx_http_upstream_conf_server), required)\n  Address of a new server and other optional parameters in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 201 - Created, returns [HTTP Upstream Server](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), missing “`server`” argument (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), service upstream “`host`” may not have port (`UpstreamBadAddress`), service upstream “`host`” requires domain name (`UpstreamBadAddress`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), reading request body failed `BodyReadError`), route is too long (`UpstreamBadRoute`), “`service`” is empty (`UpstreamBadService`), no resolver defined to resolve (`UpstreamConfNoResolver`), upstream “*`name`*” has no backup (`UpstreamNoBackup`), upstream “*`name`*” memory exhausted (`UpstreamOutOfMemory`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n`/http/upstreams/{httpUpstreamName}/servers/{httpUpstreamServerId}`\n\nParameters common for all methods:\n\n`httpUpstreamName` (`string`, required)\n\nThe name of the upstream server group.\n\n`httpUpstreamServerId` (`string`, required)\n\nThe ID of the server.\n\nSupported methods:\n\n- `GET` - Return configuration of a server in an HTTP upstream server group\n\n  Returns configuration of a particular server in the HTTP upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Upstream Server](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a server in an HTTP upstream server group\n\n  Modifies settings of a particular server in an HTTP upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `patchHttpUpstreamServer` ([HTTP Upstream Server](#def_nginx_http_upstream_conf_server), required)\n  Server parameters, specified in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Upstream Server](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), invalid “`server`” argument (`UpstreamBadAddress`), invalid server ID (`UpstreamBadServerId`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), reading request body failed `BodyReadError`), route is too long (`UpstreamBadRoute`), “`service`” is empty (`UpstreamBadService`), server “*`ID`*” address is immutable (`UpstreamServerImmutable`), server “`ID`” weight is immutable (`UpstreamServerWeightImmutable`), upstream “`name`” memory exhausted (`UpstreamOutOfMemory`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Remove a server from an HTTP upstream server group\n\n  Removes a server from an HTTP upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [HTTP Upstream Servers](#def_nginx_http_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), server “*`id`*” not removable (`UpstreamServerImmutable`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/http/keyvals/`\n\nSupported methods:\n\n- `GET` - Return key-value pairs from all HTTP keyval zones\n\n  Returns key-value pairs for each HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  If the “`fields`” value is empty, then only HTTP keyval zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone)\" objects for all HTTP keyvals\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/http/keyvals/{httpKeyvalZoneName}`\n\nParameters common for all methods:\n\n`httpKeyvalZoneName` (`string`, required)\n\nThe name of an HTTP keyval shared memory zone.\n\nSupported methods:\n\n- `GET` - Return key-value pairs from an HTTP keyval zone\n\n  Returns key-value pairs stored in a particular HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `key` (`string`, optional)\n  Get a particular key-value pair from the HTTP keyval zone.\n\n  Possible responses:\n\n  - 200 - Success, returns [HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a key-value pair to the HTTP keyval zone\n\n  Adds a new key-value pair to the HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone). Several key-value pairs can be entered if the HTTP keyval shared memory zone is empty.\n\n  Request parameters:\n\n  `Key-value` ([HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone_post_patch), required)\n  A key-value pair is specified in the JSON format. Several key-value pairs can be entered if the HTTP keyval shared memory zone is empty. Expiration time in milliseconds can be specified for a key-value pair with the `expire` parameter which overrides the [`timeout`](ngx_http_keyval_module#keyval_timeout) parameter of the [keyval_zone](ngx_http_keyval_module#keyval_zone) directive.\n\n  Possible responses:\n\n  - 201 - Created\n  - 400 - Invalid JSON (`KeyvalFormatError`), invalid key format (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be added (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), key already exists (`KeyvalKeyExists`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a key-value or delete a key\n\n  Changes the value of the selected key in the key-value pair, deletes a key by setting the key value to `null`, changes expiration time of a key-value pair. If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, deletes a key only on a target cluster node. Expiration time in milliseconds can be specified for a key-value pair with the `expire` parameter which overrides the [`timeout`](ngx_http_keyval_module#keyval_timeout) parameter of the [keyval_zone](ngx_http_keyval_module#keyval_zone) directive.\n\n  Request parameters:\n\n  `httpKeyvalZoneKeyValue` ([HTTP Keyval Shared Memory Zone](#def_nginx_http_keyval_zone_post_patch), required)\n  A new value for the key is specified in the JSON format.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Invalid JSON (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be updated (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Empty the HTTP keyval zone\n\n  Deletes all key-value pairs from the HTTP keyval shared memory [zone](ngx_http_keyval_module#keyval_zone). If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, empties the keyval zone only on a target cluster node.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/`\n\nSupported methods:\n\n- `GET` - Return list of stream-related endpoints\n\n  Returns a list of first level stream endpoints.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of strings\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/server_zones/`\n\nSupported methods:\n\n- `GET` - Return status of all stream server zones\n\n  Returns status information for each stream [server zone](ngx_http_api_module#status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of server zones will be output. If the “`fields`” value is empty, then only server zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Server Zone](#def_nginx_stream_server_zone)\" objects for all stream server zones\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/server_zones/{streamServerZoneName}`\n\nParameters common for all methods:\n\n`streamServerZoneName` (`string`, required)\n\nThe name of a stream server zone.\n\nSupported methods:\n\n- `GET` - Return status of a stream server zone\n\n  Returns status of a particular stream server zone.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the server zone will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Server Zone](#def_nginx_stream_server_zone)\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a stream server zone\n\n  Resets statistics of accepted and discarded connections, sessions, received and sent bytes, counters of SSL handshakes and session reuses in a particular stream server zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Server zone not found (`ServerZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/limit_conns/`\n\nSupported methods:\n\n- `GET` - Return status of all stream limit_conn zones\n\n  Returns status information for each stream [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of limit_conn zones will be output. If the “`fields`” value is empty, then only zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Connections Limiting](#def_nginx_stream_limit_conn_zone)\" objects for all stream limit conns\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/limit_conns/{streamLimitConnZoneName}`\n\nParameters common for all methods:\n\n`streamLimitConnZoneName` (`string`, required)\n\nThe name of a [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone).\n\nSupported methods:\n\n- `GET` - Return status of an stream limit_conn zone\n\n  Returns status of a particular stream [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the [limit_conn zone](../stream/ngx_stream_limit_conn_module#limit_conn_zone) will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Connections Limiting](#def_nginx_stream_limit_conn_zone)\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a stream limit_conn zone\n\n  Resets the connection limiting statistics.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - limit_conn not found (`LimitConnNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/`\n\nSupported methods:\n\n- `GET` - Return status of all stream upstream server groups\n\n  Returns status of each stream upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of upstream server groups will be output. If the “`fields`” value is empty, only names of upstreams will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Upstream](#def_nginx_stream_upstream)\" objects for all stream upstreams\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/{streamUpstreamName}/`\n\nParameters common for all methods:\n\n`streamUpstreamName` (`string`, required)\n\nThe name of a stream upstream server group.\n\nSupported methods:\n\n- `GET` - Return status of a stream upstream server group\n\n  Returns status of a particular stream upstream server group and its servers.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the upstream server group will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Upstream](#def_nginx_stream_upstream)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics of a stream upstream server group\n\n  Resets the statistics for each upstream server in an upstream server group.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/{streamUpstreamName}/servers/`\n\nParameters common for all methods:\n\n`streamUpstreamName` (`string`, required)\n\nThe name of an upstream server group.\n\nSupported methods:\n\n- `GET` - Return configuration of all servers in a stream upstream server group\n\n  Returns configuration of each server in a particular stream upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [Stream Upstream Servers](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a server to a stream upstream server group\n\n  Adds a new server to a stream upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `postStreamUpstreamServer` ([Stream Upstream Server](#def_nginx_stream_upstream_conf_server), required)\n  Address of a new server and other optional parameters in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 201 - Created, returns [Stream Upstream Server](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), missing “`server`” argument (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), no port in server “`host`” (`UpstreamBadAddress`), service upstream “`host`” may not have port (`UpstreamBadAddress`), service upstream “`host`” requires domain name (`UpstreamBadAddress`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), “`service`” is empty (`UpstreamBadService`), no resolver defined to resolve (`UpstreamConfNoResolver`), upstream “*`name`*” has no backup (`UpstreamNoBackup`), upstream “*`name`*” memory exhausted (`UpstreamOutOfMemory`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n`/stream/upstreams/{streamUpstreamName}/servers/{streamUpstreamServerId}`\n\nParameters common for all methods:\n\n`streamUpstreamName` (`string`, required)\n\nThe name of the upstream server group.\n\n`streamUpstreamServerId` (`string`, required)\n\nThe ID of the server.\n\nSupported methods:\n\n- `GET` - Return configuration of a server in a stream upstream server group\n\n  Returns configuration of a particular server in the stream upstream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Upstream Server](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), returns [Error](#def_nginx_error)\n  - 404 - Unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a server in a stream upstream server group\n\n  Modifies settings of a particular server in a stream upstream server group. Server parameters are specified in the JSON format.\n\n  Request parameters:\n\n  `patchStreamUpstreamServer` ([Stream Upstream Server](#def_nginx_stream_upstream_conf_server), required)\n  Server parameters, specified in the JSON format. The “`ID`”, “`backup`”, and “`service`” parameters cannot be changed.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Upstream Server](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid “*`parameter`*” value (`UpstreamConfFormatError`), unknown parameter “*`name`*” (`UpstreamConfFormatError`), nested object or list (`UpstreamConfFormatError`), “`error`” while parsing (`UpstreamBadAddress`), invalid “`server`” argument (`UpstreamBadAddress`), no port in server “`host`” (`UpstreamBadAddress`), invalid server ID (`UpstreamBadServerId`), invalid “`weight`” (`UpstreamBadWeight`), invalid “`max_conns`” (`UpstreamBadMaxConns`), invalid “`max_fails`” (`UpstreamBadMaxFails`), invalid “`fail_timeout`” (`UpstreamBadFailTimeout`), invalid “`slow_start`” (`UpstreamBadSlowStart`), reading request body failed `BodyReadError`), “`service`” is empty (`UpstreamBadService`), server “*`ID`*” address is immutable (`UpstreamServerImmutable`), server “*`ID`*” weight is immutable (`UpstreamServerWeightImmutable`), upstream “`name`” memory exhausted (`UpstreamOutOfMemory`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Remove a server from a stream upstream server group\n\n  Removes a server from a stream server group.\n\n  Possible responses:\n\n  - 200 - Success, returns an array of [Stream Upstream Servers](#def_nginx_stream_upstream_conf_server)\n  - 400 - Upstream is static (`UpstreamStatic`), invalid server ID (`UpstreamBadServerId`), server “*`id`*” not removable (`UpstreamServerImmutable`), returns [Error](#def_nginx_error)\n  - 404 - Server with ID “*`id`*” does not exist (`UpstreamServerNotFound`), unknown version (`UnknownVersion`), upstream not found (`UpstreamNotFound`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/keyvals/`\n\nSupported methods:\n\n- `GET` - Return key-value pairs from all stream keyval zones\n\n  Returns key-value pairs for each stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  If the “`fields`” value is empty, then only stream keyval zone names will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone)\" objects for all stream keyvals\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/stream/keyvals/{streamKeyvalZoneName}`\n\nParameters common for all methods:\n\n`streamKeyvalZoneName` (`string`, required)\n\nThe name of a stream keyval shared memory zone.\n\nSupported methods:\n\n- `GET` - Return key-value pairs from a stream keyval zone\n\n  Returns key-value pairs stored in a particular stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone).\n\n  Request parameters:\n\n  `key` (`string`, optional)\n  Get a particular key-value pair from the stream keyval zone.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `POST` - Add a key-value pair to the stream keyval zone\n\n  Adds a new key-value pair to the stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone). Several key-value pairs can be entered if the stream keyval shared memory zone is empty.\n\n  Request parameters:\n\n  `Key-value` ([Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone_post_patch), required)\n  A key-value pair is specified in the JSON format. Several key-value pairs can be entered if the stream keyval shared memory zone is empty. Expiration time in milliseconds can be specified for a key-value pair with the `expire` parameter which overrides the [`timeout`](../stream/ngx_stream_keyval_module#keyval_timeout) parameter of the [keyval_zone](../stream/ngx_stream_keyval_module#keyval_zone) directive.\n\n  Possible responses:\n\n  - 201 - Created\n  - 400 - Invalid JSON (`KeyvalFormatError`), invalid key format (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be added (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 409 - Entry exists (`EntryExists`), key already exists (`KeyvalKeyExists`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `PATCH` - Modify a key-value or delete a key\n\n  Changes the value of the selected key in the key-value pair, deletes a key by setting the key value to `null`, changes expiration time of a key-value pair. If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, deletes a key only on a target cluster node. Expiration time is specified in milliseconds with the `expire` parameter which overrides the [`timeout`](../stream/ngx_stream_keyval_module#keyval_timeout) parameter of the [keyval_zone](../stream/ngx_stream_keyval_module#keyval_zone) directive.\n\n  Request parameters:\n\n  `streamKeyvalZoneKeyValue` ([Stream Keyval Shared Memory Zone](#def_nginx_stream_keyval_zone_post_patch), required)\n  A new value for the key is specified in the JSON format.\n\n  Possible responses:\n\n  - 204 - Success\n  - 400 - Invalid JSON (`KeyvalFormatError`), key required (`KeyvalFormatError`), keyval timeout is not enabled (`KeyvalFormatError`), only one key can be updated (`KeyvalFormatError`), reading request body failed `BodyReadError`), returns [Error](#def_nginx_error)\n  - 404 - Keyval not found (`KeyvalNotFound`), keyval key not found (`KeyvalKeyNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n  - 413 - Request Entity Too Large, returns [Error](#def_nginx_error)\n  - 415 - JSON error (`JsonError`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Empty the stream keyval zone\n\n  Deletes all key-value pairs from the stream keyval shared memory [zone](../stream/ngx_stream_keyval_module#keyval_zone). If [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of keyval zones in a cluster is enabled, empties the keyval zone only on a target cluster node.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Keyval not found (`KeyvalNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/stream/zone_sync/`\n\nSupported methods:\n\n- `GET` - Return sync status of a node\n\n  Returns synchronization status of a cluster node.\n\n  Possible responses:\n\n  - 200 - Success, returns [Stream Zone Sync Node](#def_nginx_stream_zone_sync)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/resolvers/`\n\nSupported methods:\n\n- `GET` - Return status for all resolver zones\n\n  Returns status information for each [resolver zone](ngx_http_core_module#resolver_status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of resolvers statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Resolver Zone](#def_nginx_resolver_zone)\" objects for all resolvers\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n`/resolvers/{resolverZoneName}`\n\nParameters common for all methods:\n\n`resolverZoneName` (`string`, required)\n\nThe name of a resolver zone.\n\nSupported methods:\n\n- `GET` - Return statistics of a resolver zone\n\n  Returns statistics stored in a particular resolver [zone](ngx_http_core_module#resolver_status_zone).\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of the resolver zone will be output (requests, responses, or both).\n\n  Possible responses:\n\n  - 200 - Success, returns [Resolver Zone](#def_nginx_resolver_zone)\n  - 404 - Resolver zone not found (`ResolverZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a resolver zone.\n\n  Resets statistics in a particular resolver zone.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Resolver zone not found (`ResolverZoneNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/ssl`\n\nSupported methods:\n\n- `GET` - Return SSL statistics\n\n  Returns SSL statistics.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of SSL statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [SSL](#def_nginx_ssl_object)\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset SSL statistics\n\n  Resets counters of SSL handshakes and session reuses.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/workers/`\n\nSupported methods:\n\n- `GET` - Return statistics for all worker processes\n\n  Returns statistics for all worker processes such as accepted, dropped, active, idle connections, total and current requests.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of worker process statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns a collection of \"[Worker process](#def_nginx_worker)\" objects for all workers\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for all worker processes.\n\n  Resets statistics for all worker processes such as accepted, dropped, active, idle connections, total and current requests.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n`/workers/{workerId}`\n\nParameters common for all methods:\n\n`workerId` (`string`, required)\n\nThe ID of the worker process.\n\nSupported methods:\n\n- `GET` - Return status of a worker process\n\n  Returns status of a particular worker process.\n\n  Request parameters:\n\n  `fields` (`string`, optional)\n  Limits which fields of worker process statistics will be output.\n\n  Possible responses:\n\n  - 200 - Success, returns [Worker process](#def_nginx_worker)\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n\n- `DELETE` - Reset statistics for a worker process.\n\n  Resets statistics of accepted, dropped, active, idle connections, as well as total and current requests.\n\n  Possible responses:\n\n  - 204 - Success\n  - 404 - Worker not found (`WorkerNotFound`), unknown version (`UnknownVersion`), returns [Error](#def_nginx_error)\n  - 405 - Method disabled (`MethodDisabled`), returns [Error](#def_nginx_error)\n\n#### Response Objects\n\n- nginx:\n\n  General information about nginx:\n  `version` (`string`)\n  Version of nginx.\n  `build` (`string`)\n  Name of nginx build.\n  `address` (`string`)\n  The address of the server that accepted status request.\n  `generation` (`integer`)\n  The total number of configuration [reloads](../control#reconfiguration).\n  `load_timestamp` (`string`)\n  Time of the last reload of configuration, in the ISO 8601 format with millisecond resolution.\n  `timestamp` (`string`)\n  Current time in the ISO 8601 format with millisecond resolution.\n  `pid` (`integer`)\n  The ID of the worker process that handled status request.\n  `ppid` (`integer`)\n  The ID of the master process that started the [worker process](ngx_http_status_module#pid).\n\n  Example:\n\n  ``` nginx\n  {\n    \"nginx\" : {\n      \"version\" : \"1.21.6\",\n      \"build\" : \"nginx-plus-r27\",\n      \"address\" : \"206.251.255.64\",\n      \"generation\" : 6,\n      \"load_timestamp\" : \"2022-06-28T11:15:44.467Z\",\n      \"timestamp\" : \"2022-06-28T09:26:07.305Z\",\n      \"pid\" : 32212,\n      \"ppid\" : 32210\n    }\n  }\n  ```\n\n- Processes:\n\n  `respawned` (`integer`)\n  The total number of abnormally terminated and respawned child processes.\n\n  Example:\n\n  ``` nginx\n  {\n    \"respawned\" : 0\n  }\n  ```\n\n- Connections:\n\n  The number of accepted, dropped, active, and idle connections.\n  `accepted` (`integer`)\n  The total number of accepted client connections.\n  `dropped` (`integer`)\n  The total number of dropped client connections.\n  `active` (`integer`)\n  The current number of active client connections.\n  `idle` (`integer`)\n  The current number of idle client connections.\n\n  Example:\n\n  ``` nginx\n  {\n    \"accepted\" : 4968119,\n    \"dropped\" : 0,\n    \"active\" : 5,\n    \"idle\" : 117\n  }\n  ```\n\n- SSL:\n\n  `handshakes` (`integer`)\n  The total number of successful SSL handshakes.\n  `handshakes_failed` (`integer`)\n  The total number of failed SSL handshakes.\n  `session_reuses` (`integer`)\n  The total number of session reuses during SSL handshake.\n  `no_common_protocol` (`integer`)\n  The number of SSL handshakes failed because of no common protocol.\n  `no_common_cipher` (`integer`)\n  The number of SSL handshakes failed because of no shared cipher.\n  `handshake_timeout` (`integer`)\n  The number of SSL handshakes failed because of a timeout.\n  `peer_rejected_cert` (`integer`)\n  The number of failed SSL handshakes when nginx presented the certificate to the client but it was rejected with a corresponding alert message.\n  `verify_failures`\n  SSL certificate verification errors\n  `no_cert` (`integer`)\n  A client did not provide the required certificate.\n  `expired_cert` (`integer`)\n  An expired or not yet valid certificate was presented by a client.\n  `revoked_cert` (`integer`)\n  A revoked certificate was presented by a client.\n  `hostname_mismatch` (`integer`)\n  Server's certificate doesn't match the hostname.\n  `other` (`integer`)\n  Other SSL certificate verification errors.\n\n  Example:\n\n  ``` nginx\n  {\n    \"handshakes\" : 79572,\n    \"handshakes_failed\" : 21025,\n    \"session_reuses\" : 15762,\n    \"no_common_protocol\" : 4,\n    \"no_common_cipher\" : 2,\n    \"handshake_timeout\" : 0,\n    \"peer_rejected_cert\" : 0,\n    \"verify_failures\" : {\n      \"no_cert\" : 0,\n      \"expired_cert\" : 2,\n      \"revoked_cert\" : 1,\n      \"hostname_mismatch\" : 2,\n      \"other\" : 1\n    }\n  }\n  ```\n\n- Shared memory zone with slab allocator:\n\n  Shared memory zone with slab allocator\n  `pages`\n  The number of free and used memory pages.\n  `used` (`integer`)\n  The current number of used memory pages.\n  `free` (`integer`)\n  The current number of free memory pages.\n\n  `slots`\n  Status data for memory slots (8, 16, 32, 64, 128, etc.)\n\n  A collection of \"[Memory Slot](#def_nginx_slab_zone_slot)\" objects\n\n  Example:\n\n  ``` nginx\n  {\n    \"pages\" : {\n      \"used\" : 1143,\n      \"free\" : 2928\n    },\n    \"slots\" : {\n      \"8\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"16\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"32\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"64\" : {\n        \"used\" : 1,\n        \"free\" : 63,\n        \"reqs\" : 1,\n        \"fails\" : 0\n      },\n      \"128\" : {\n        \"used\" : 0,\n        \"free\" : 0,\n        \"reqs\" : 0,\n        \"fails\" : 0\n      },\n      \"256\" : {\n        \"used\" : 18078,\n        \"free\" : 178,\n        \"reqs\" : 1635736,\n        \"fails\" : 0\n      }\n    }\n  }\n  ```\n\n- Memory Slot:\n\n  `used` (`integer`)\n  The current number of used memory slots.\n  `free` (`integer`)\n  The current number of free memory slots.\n  `reqs` (`integer`)\n  The total number of attempts to allocate memory of specified size.\n  `fails` (`integer`)\n  The number of unsuccessful attempts to allocate memory of specified size.\n\n- HTTP Requests:\n\n  `total` (`integer`)\n  The total number of client requests.\n  `current` (`integer`)\n  The current number of client requests.\n\n  Example:\n\n  ``` nginx\n  {\n    \"total\" : 10624511,\n    \"current\" : 4\n  }\n  ```\n\n- HTTP Server Zone:\n\n  `processing` (`integer`)\n  The number of client requests that are currently being processed.\n  `requests` (`integer`)\n  The total number of client requests received from clients.\n  `responses`\n  The total number of responses sent to clients, the number of responses with status codes “`1xx`”, “`2xx`”, “`3xx`”, “`4xx`”, and “`5xx`”, and the number of responses per each status code.\n  `1xx` (`integer`)\n  The number of responses with “`1xx`” status codes.\n  `2xx` (`integer`)\n  The number of responses with “`2xx`” status codes.\n  `3xx` (`integer`)\n  The number of responses with “`3xx`” status codes.\n  `4xx` (`integer`)\n  The number of responses with “`4xx`” status codes.\n  `5xx` (`integer`)\n  The number of responses with “`5xx`” status codes.\n  `codes`\n  The number of responses per each status code.\n  `codeNumber` (`integer`)\n  The number of responses with this particular status code.\n\n  `total` (`integer`)\n  The total number of responses sent to clients.\n\n  `discarded` (`integer`)\n  The total number of requests completed without sending a response.\n  `received` (`integer`)\n  The total number of bytes received from clients.\n  `sent` (`integer`)\n  The total number of bytes sent to clients.\n  `ssl`\n  `handshakes` (`integer`)\n  The total number of successful SSL handshakes.\n  `handshakes_failed` (`integer`)\n  The total number of failed SSL handshakes.\n  `session_reuses` (`integer`)\n  The total number of session reuses during SSL handshake.\n  `no_common_protocol` (`integer`)\n  The number of SSL handshakes failed because of no common protocol.\n  `no_common_cipher` (`integer`)\n  The number of SSL handshakes failed because of no shared cipher.\n  `handshake_timeout` (`integer`)\n  The number of SSL handshakes failed because of a timeout.\n  `peer_rejected_cert` (`integer`)\n  The number of failed SSL handshakes when nginx presented the certificate to the client but it was rejected with a corresponding alert message.\n  `verify_failures`\n  SSL certificate verification errors\n  `no_cert` (`integer`)\n  A client did not provide the required certificate.\n  `expired_cert` (`integer`)\n  An expired or not yet valid certificate was presented by a client.\n  `revoked_cert` (`integer`)\n  A revoked certificate was presented by a client.\n  `other` (`integer`)\n  Other SSL certificate verification errors.\n\n  Example:\n\n  ``` nginx\n  {\n    \"processing\" : 1,\n    \"requests\" : 706690,\n    \"responses\" : {\n      \"1xx\" : 0,\n      \"2xx\" : 699482,\n      \"3xx\" : 4522,\n      \"4xx\" : 907,\n      \"5xx\" : 266,\n      \"codes\" : {\n        \"200\" : 699482,\n        \"301\" : 4522,\n        \"404\" : 907,\n        \"503\" : 266\n      },\n      \"total\" : 705177\n    },\n    \"discarded\" : 1513,\n    \"received\" : 172711587,\n    \"sent\" : 19415530115,\n    \"ssl\" : {\n      \"handshakes\" : 104303,\n      \"handshakes_failed\" : 1421,\n      \"session_reuses\" : 54645,\n      \"no_common_protocol\" : 4,\n      \"no_common_cipher\" : 2,\n      \"handshake_timeout\" : 0,\n      \"peer_rejected_cert\" : 0,\n      \"verify_failures\" : {\n        \"no_cert\" : 0,\n        \"expired_cert\" : 2,\n        \"revoked_cert\" : 1,\n        \"other\" : 1\n      }\n    }\n  }\n  ```\n\n- HTTP Location Zone:\n\n  `requests` (`integer`)\n  The total number of client requests received from clients.\n  `responses`\n  The total number of responses sent to clients, the number of responses with status codes “`1xx`”, “`2xx`”, “`3xx`”, “`4xx`”, and “`5xx`”, and the number of responses per each status code.\n  `1xx` (`integer`)\n  The number of responses with “`1xx`” status codes.\n  `2xx` (`integer`)\n  The number of responses with “`2xx`” status codes.\n  `3xx` (`integer`)\n  The number of responses with “`3xx`” status codes.\n  `4xx` (`integer`)\n  The number of responses with “`4xx`” status codes.\n  `5xx` (`integer`)\n  The number of responses with “`5xx`” status codes.\n  `codes`\n  The number of responses per each status code.\n  `codeNumber` (`integer`)\n  The number of responses with this particular status code.\n\n  `total` (`integer`)\n  The total number of responses sent to clients.\n\n  `discarded` (`integer`)\n  The total number of requests completed without sending a response.\n  `received` (`integer`)\n  The total number of bytes received from clients.\n  `sent` (`integer`)\n  The total number of bytes sent to clients.\n\n  Example:\n\n  ``` nginx\n  {\n    \"requests\" : 706690,\n    \"responses\" : {\n      \"1xx\" : 0,\n      \"2xx\" : 699482,\n      \"3xx\" : 4522,\n      \"4xx\" : 907,\n      \"5xx\" : 266,\n      \"codes\" : {\n        \"200\" : 112674,\n        \"301\" : 4522,\n        \"404\" : 2504,\n        \"503\" : 266\n      },\n      \"total\" : 705177\n    },\n    \"discarded\" : 1513,\n    \"received\" : 172711587,\n    \"sent\" : 19415530115\n  }\n  ```\n\n- HTTP Cache:\n\n  `size` (`integer`)\n  The current size of the cache.\n  `max_size` (`integer`)\n  The limit on the maximum size of the cache specified in the configuration.\n  `cold` (`boolean`)\n  A boolean value indicating whether the “cache loader” process is still loading data from disk into the cache.\n  `hit`\n  `responses` (`integer`)\n  The total number of [valid](ngx_http_proxy_module#proxy_cache_valid) responses read from the cache.\n  `bytes` (`integer`)\n  The total number of bytes read from the cache.\n\n  `stale`\n  `responses` (`integer`)\n  The total number of expired responses read from the cache (see [proxy_cache_use_stale](ngx_http_proxy_module#proxy_cache_use_stale) and other “`*_cache_use_stale`” directives).\n  `bytes` (`integer`)\n  The total number of bytes read from the cache.\n\n  `updating`\n  `responses` (`integer`)\n  The total number of expired responses read from the cache while responses were being updated (see [proxy_cache_use_stale](ngx_http_proxy_module#proxy_cache_use_stale_updating) and other “`*_cache_use_stale`” directives).\n  `bytes` (`integer`)\n  The total number of bytes read from the cache.\n\n  `revalidated`\n  `responses` (`integer`)\n  The total number of expired and revalidated responses read from the cache (see [proxy_cache_revalidate](ngx_http_proxy_module#proxy_cache_revalidate) and other “`*_cache_revalidate`” directives.\n  `bytes` (`integer`)\n  The total number of bytes read from the cache.\n\n  `miss`\n  `responses` (`integer`)\n  The total number of responses not found in the cache.\n  `bytes` (`integer`)\n  The total number of bytes read from the proxied server.\n  `responses_written` (`integer`)\n  The total number of responses written to the cache.\n  `bytes_written` (`integer`)\n  The total number of bytes written to the cache.\n\n  `expired`\n  `responses` (`integer`)\n  The total number of expired responses not taken from the cache.\n  `bytes` (`integer`)\n  The total number of bytes read from the proxied server.\n  `responses_written` (`integer`)\n  The total number of responses written to the cache.\n  `bytes_written` (`integer`)\n  The total number of bytes written to the cache.\n\n  `bypass`\n  `responses` (`integer`)\n  The total number of responses not looked up in the cache due to the [proxy_cache_bypass](ngx_http_proxy_module#proxy_cache_bypass) and other “`*_cache_bypass`” directives.\n  `bytes` (`integer`)\n  The total number of bytes read from the proxied server.\n  `responses_written` (`integer`)\n  The total number of responses written to the cache.\n  `bytes_written` (`integer`)\n  The total number of bytes written to the cache.\n\n  Example:\n\n  ``` nginx\n  {\n    \"size\" : 530915328,\n    \"max_size\" : 536870912,\n    \"cold\" : false,\n    \"hit\" : {\n      \"responses\" : 254032,\n      \"bytes\" : 6685627875\n    },\n    \"stale\" : {\n      \"responses\" : 0,\n      \"bytes\" : 0\n    },\n    \"updating\" : {\n      \"responses\" : 0,\n      \"bytes\" : 0\n    },\n    \"revalidated\" : {\n      \"responses\" : 0,\n      \"bytes\" : 0\n    },\n    \"miss\" : {\n      \"responses\" : 1619201,\n      \"bytes\" : 53841943822\n    },\n    \"expired\" : {\n      \"responses\" : 45859,\n      \"bytes\" : 1656847080,\n      \"responses_written\" : 44992,\n      \"bytes_written\" : 1641825173\n    },\n    \"bypass\" : {\n      \"responses\" : 200187,\n      \"bytes\" : 5510647548,\n      \"responses_written\" : 200173,\n      \"bytes_written\" : 44992\n    }\n  }\n  ```\n\n- HTTP Connections Limiting:\n\n  `passed` (`integer`)\n  The total number of connections that were neither limited nor accounted as limited.\n  `rejected` (`integer`)\n  The total number of connections that were rejected.\n  `rejected_dry_run` (`integer`)\n  The total number of connections accounted as rejected in the [dry run](ngx_http_limit_conn_module#limit_conn_dry_run) mode.\n\n  Example:\n\n  ``` nginx\n  {\n    \"passed\" : 15,\n    \"rejected\" : 0,\n    \"rejected_dry_run\" : 2\n  }\n  ```\n\n- HTTP Requests Rate Limiting:\n\n  `passed` (`integer`)\n  The total number of requests that were neither limited nor accounted as limited.\n  `delayed` (`integer`)\n  The total number of requests that were delayed.\n  `rejected` (`integer`)\n  The total number of requests that were rejected.\n  `delayed_dry_run` (`integer`)\n  The total number of requests accounted as delayed in the [dry run](ngx_http_limit_req_module#limit_req_dry_run) mode.\n  `rejected_dry_run` (`integer`)\n  The total number of requests accounted as rejected in the [dry run](ngx_http_limit_req_module#limit_req_dry_run) mode.\n\n  Example:\n\n  ``` nginx\n  {\n    \"passed\" : 15,\n    \"delayed\" : 4,\n    \"rejected\" : 0,\n    \"delayed_dry_run\" : 1,\n    \"rejected_dry_run\" : 2\n  }\n  ```\n\n- HTTP Upstream:\n\n  `peers`\n  An array of:\n  `id` (`integer`)\n  The ID of the server.\n  `server` (`string`)\n  An [address](ngx_http_upstream_module#server) of the server.\n  `service` (`string`)\n  The [service](ngx_http_upstream_module#service) parameter value of the [server](ngx_http_upstream_module#server) directive.\n  `name` (`string`)\n  The name of the server specified in the [server](ngx_http_upstream_module#server) directive.\n  `backup` (`boolean`)\n  A boolean value indicating whether the server is a [backup](ngx_http_upstream_module#backup) server.\n  `weight` (`integer`)\n  [Weight](ngx_http_upstream_module#weight) of the server.\n  `state` (`string`)\n  Current state, which may be one of “`up`”, “`draining`”, “`down`”, “`unavail`”, “`checking`”, and “`unhealthy`”.\n  `active` (`integer`)\n  The current number of active connections.\n  `ssl`\n  `handshakes` (`integer`)\n  The total number of successful SSL handshakes.\n  `handshakes_failed` (`integer`)\n  The total number of failed SSL handshakes.\n  `session_reuses` (`integer`)\n  The total number of session reuses during SSL handshake.\n  `no_common_protocol` (`integer`)\n  The number of SSL handshakes failed because of no common protocol.\n  `handshake_timeout` (`integer`)\n  The number of SSL handshakes failed because of a timeout.\n  `peer_rejected_cert` (`integer`)\n  The number of failed SSL handshakes when nginx presented the certificate to the upstream server but it was rejected with a corresponding alert message.\n  `verify_failures`\n  SSL certificate verification errors\n  `expired_cert` (`integer`)\n  An expired or not yet valid certificate was presented by an upstream server.\n  `revoked_cert` (`integer`)\n  A revoked certificate was presented by an upstream server.\n  `hostname_mismatch` (`integer`)\n  Server's certificate doesn't match the hostname.\n  `other` (`integer`)\n  Other SSL certificate verification errors.\n\n  `max_conns` (`integer`)\n  The [max_conns](ngx_http_upstream_module#max_conns) limit for the server.\n  `requests` (`integer`)\n  The total number of client requests forwarded to this server.\n  `responses`\n  `1xx` (`integer`)\n  The number of responses with “`1xx`” status codes.\n  `2xx` (`integer`)\n  The number of responses with “`2xx`” status codes.\n  `3xx` (`integer`)\n  The number of responses with “`3xx`” status codes.\n  `4xx` (`integer`)\n  The number of responses with “`4xx`” status codes.\n  `5xx` (`integer`)\n  The number of responses with “`5xx`” status codes.\n  `codes`\n  The number of responses per each status code.\n  `codeNumber` (`integer`)\n  The number of responses with this particular status code.\n\n  `total` (`integer`)\n  The total number of responses obtained from this server.\n\n  `sent` (`integer`)\n  The total number of bytes sent to this server.\n  `received` (`integer`)\n  The total number of bytes received from this server.\n  `fails` (`integer`)\n  The total number of unsuccessful attempts to communicate with the server.\n  `unavail` (`integer`)\n  How many times the server became unavailable for client requests (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](ngx_http_upstream_module#max_fails) threshold.\n  `health_checks`\n  `checks` (`integer`)\n  The total number of [health check](ngx_http_upstream_hc_module#health_check) requests made.\n  `fails` (`integer`)\n  The number of failed health checks.\n  `unhealthy` (`integer`)\n  How many times the server became unhealthy (state “`unhealthy`”).\n  `last_passed` (`boolean`)\n  Boolean indicating if the last health check request was successful and passed [tests](ngx_http_upstream_hc_module#match).\n\n  `downtime` (`integer`)\n  Total time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n  `downstart` (`string`)\n  The time when the server became “`unavail`”, “`checking`”, or “`unhealthy`”, in the ISO 8601 format with millisecond resolution.\n  `selected` (`string`)\n  The time when the server was last selected to process a request, in the ISO 8601 format with millisecond resolution.\n  `header_time` (`integer`)\n  The average time to get the [response header](ngx_http_upstream_module#var_upstream_header_time) from the server.\n  `response_time` (`integer`)\n  The average time to get the [full response](ngx_http_upstream_module#var_upstream_response_time) from the server.\n\n  `keepalive` (`integer`)\n  The current number of idle [keepalive](ngx_http_upstream_module#keepalive) connections.\n  `zombies` (`integer`)\n  The current number of servers removed from the group but still processing active client requests.\n  `zone` (`string`)\n  The name of the shared memory [zone](ngx_http_upstream_module#zone) that keeps the group’s configuration and run-time state.\n  `queue`\n  For the requests [queue](ngx_http_upstream_module#queue), the following data are provided:\n  `size` (`integer`)\n  The current number of requests in the queue.\n  `max_size` (`integer`)\n  The maximum number of requests that can be in the queue at the same time.\n  `overflows` (`integer`)\n  The total number of requests rejected due to the queue overflow.\n\n  Example:\n\n  ``` nginx\n  {\n    \"upstream_backend\" : {\n      \"peers\" : [\n        {\n          \"id\" : 0,\n          \"server\" : \"10.0.0.1:8088\",\n          \"name\" : \"10.0.0.1:8088\",\n          \"backup\" : false,\n          \"weight\" : 5,\n          \"state\" : \"up\",\n          \"active\" : 0,\n          \"ssl\" : {\n            \"handshakes\" : 620311,\n            \"handshakes_failed\" : 3432,\n            \"session_reuses\" : 36442,\n            \"no_common_protocol\" : 4,\n            \"handshake_timeout\" : 0,\n            \"peer_rejected_cert\" : 0,\n            \"verify_failures\" : {\n              \"expired_cert\" : 2,\n              \"revoked_cert\" : 1,\n              \"hostname_mismatch\" : 2,\n              \"other\" : 1\n            }\n          },\n          \"max_conns\" : 20,\n          \"requests\" : 667231,\n          \"header_time\" : 20,\n          \"response_time\" : 36,\n          \"responses\" : {\n            \"1xx\" : 0,\n            \"2xx\" : 666310,\n            \"3xx\" : 0,\n            \"4xx\" : 915,\n            \"5xx\" : 6,\n            \"codes\" : {\n              \"200\" : 666310,\n              \"404\" : 915,\n              \"503\" : 6\n            },\n            \"total\" : 667231\n          },\n          \"sent\" : 251946292,\n          \"received\" : 19222475454,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26214,\n            \"fails\" : 0,\n            \"unhealthy\" : 0,\n            \"last_passed\" : true\n          },\n          \"downtime\" : 0,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        },\n        {\n          \"id\" : 1,\n          \"server\" : \"10.0.0.1:8089\",\n          \"name\" : \"10.0.0.1:8089\",\n          \"backup\" : true,\n          \"weight\" : 1,\n          \"state\" : \"unhealthy\",\n          \"active\" : 0,\n          \"max_conns\" : 20,\n          \"requests\" : 0,\n          \"responses\" : {\n            \"1xx\" : 0,\n            \"2xx\" : 0,\n            \"3xx\" : 0,\n            \"4xx\" : 0,\n            \"5xx\" : 0,\n            \"codes\" : {\n            },\n            \"total\" : 0\n          },\n          \"sent\" : 0,\n          \"received\" : 0,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26284,\n            \"fails\" : 26284,\n            \"unhealthy\" : 1,\n            \"last_passed\" : false\n          },\n          \"downtime\" : 262925617,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        }\n      ],\n      \"keepalive\" : 0,\n      \"zombies\" : 0,\n      \"zone\" : \"upstream_backend\"\n    }\n  }\n  ```\n\n- HTTP Upstream Server:\n\n  Dynamically configurable parameters of an HTTP upstream [server](ngx_http_upstream_module#server):\n  `id` (`integer`)\n  The ID of the HTTP upstream server. The ID is assigned automatically and cannot be changed.\n  `server` (`string`)\n  Same as the [address](ngx_http_upstream_module#server) parameter of the HTTP upstream server. When adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx. This requires the [resolver](ngx_http_core_module#resolver) directive in the “`http`” block. See also the [resolve](ngx_http_upstream_module#resolve) parameter of the HTTP upstream server.\n  `service` (`string`)\n  Same as the [service](ngx_http_upstream_module#service) parameter of the HTTP upstream server. This parameter cannot be changed.\n  `weight` (`integer`)\n  Same as the [weight](ngx_http_upstream_module#weight) parameter of the HTTP upstream server.\n  `max_conns` (`integer`)\n  Same as the [max_conns](ngx_http_upstream_module#max_conns) parameter of the HTTP upstream server.\n  `max_fails` (`integer`)\n  Same as the [max_fails](ngx_http_upstream_module#max_fails) parameter of the HTTP upstream server.\n  `fail_timeout` (`string`)\n  Same as the [fail_timeout](ngx_http_upstream_module#fail_timeout) parameter of the HTTP upstream server.\n  `slow_start` (`string`)\n  Same as the [slow_start](ngx_http_upstream_module#slow_start) parameter of the HTTP upstream server.\n  `route` (`string`)\n  Same as the [route](ngx_http_upstream_module#route) parameter of the HTTP upstream server.\n  `backup` (`boolean`)\n  When `true`, adds a [backup](ngx_http_upstream_module#backup) server. This parameter cannot be changed.\n  `down` (`boolean`)\n  Same as the [down](ngx_http_upstream_module#down) parameter of the HTTP upstream server.\n  `drain` (`boolean`)\n  Same as the [drain](ngx_http_upstream_module#drain) parameter of the HTTP upstream server.\n  `parent` (`string`)\n  Parent server ID of the resolved server. The ID is assigned automatically and cannot be changed.\n  `host` (`string`)\n  Hostname of the resolved server. The hostname is assigned automatically and cannot be changed.\n\n  Example:\n\n  ``` nginx\n  {\n    \"id\" : 1,\n    \"server\" : \"10.0.0.1:8089\",\n    \"weight\" : 4,\n    \"max_conns\" : 0,\n    \"max_fails\" : 0,\n    \"fail_timeout\" : \"10s\",\n    \"slow_start\" : \"10s\",\n    \"route\" : \"\",\n    \"backup\" : true,\n    \"down\" : true\n  }\n  ```\n\n- HTTP Keyval Shared Memory Zone:\n\n  Contents of an HTTP keyval shared memory zone when using the GET method.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : \"value3\"\n  }\n  ```\n\n- HTTP Keyval Shared Memory Zone:\n\n  Contents of an HTTP keyval shared memory zone when using the POST or PATCH methods.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : {\n      \"value\" : \"value3\",\n      \"expire\" : 30000\n    }\n  }\n  ```\n\n- Stream Server Zone:\n\n  `processing` (`integer`)\n  The number of client connections that are currently being processed.\n  `connections` (`integer`)\n  The total number of connections accepted from clients.\n  `sessions`\n  The total number of completed sessions, and the number of sessions completed with status codes “`2xx`”, “`4xx`”, or “`5xx`”.\n  `2xx` (`integer`)\n  The total number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) “`2xx`”.\n  `4xx` (`integer`)\n  The total number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) “`4xx`”.\n  `5xx` (`integer`)\n  The total number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) “`5xx`”.\n  `total` (`integer`)\n  The total number of completed client sessions.\n\n  `discarded` (`integer`)\n  The total number of connections completed without creating a session.\n  `received` (`integer`)\n  The total number of bytes received from clients.\n  `sent` (`integer`)\n  The total number of bytes sent to clients.\n  `ssl`\n  `handshakes` (`integer`)\n  The total number of successful SSL handshakes.\n  `handshakes_failed` (`integer`)\n  The total number of failed SSL handshakes.\n  `session_reuses` (`integer`)\n  The total number of session reuses during SSL handshake.\n  `no_common_protocol` (`integer`)\n  The number of SSL handshakes failed because of no common protocol.\n  `no_common_cipher` (`integer`)\n  The number of SSL handshakes failed because of no shared cipher.\n  `handshake_timeout` (`integer`)\n  The number of SSL handshakes failed because of a timeout.\n  `peer_rejected_cert` (`integer`)\n  The number of failed SSL handshakes when nginx presented the certificate to the client but it was rejected with a corresponding alert message.\n  `verify_failures`\n  SSL certificate verification errors\n  `no_cert` (`integer`)\n  A client did not provide the required certificate.\n  `expired_cert` (`integer`)\n  An expired or not yet valid certificate was presented by a client.\n  `revoked_cert` (`integer`)\n  A revoked certificate was presented by a client.\n  `other` (`integer`)\n  Other SSL certificate verification errors.\n\n  Example:\n\n  ``` nginx\n  {\n    \"dns\" : {\n      \"processing\" : 1,\n      \"connections\" : 155569,\n      \"sessions\" : {\n        \"2xx\" : 155564,\n        \"4xx\" : 0,\n        \"5xx\" : 0,\n        \"total\" : 155569\n      },\n      \"discarded\" : 0,\n      \"received\" : 4200363,\n      \"sent\" : 20489184,\n      \"ssl\" : {\n        \"handshakes\" : 76455,\n        \"handshakes_failed\" : 432,\n        \"session_reuses\" : 28770,\n        \"no_common_protocol\" : 4,\n        \"no_common_cipher\" : 2,\n        \"handshake_timeout\" : 0,\n        \"peer_rejected_cert\" : 0,\n        \"verify_failures\" : {\n          \"no_cert\" : 0,\n          \"expired_cert\" : 2,\n          \"revoked_cert\" : 1,\n          \"other\" : 1\n        }\n      }\n    }\n  }\n  ```\n\n- Stream Connections Limiting:\n\n  `passed` (`integer`)\n  The total number of connections that were neither limited nor accounted as limited.\n  `rejected` (`integer`)\n  The total number of connections that were rejected.\n  `rejected_dry_run` (`integer`)\n  The total number of connections accounted as rejected in the [dry run](../stream/ngx_stream_limit_conn_module#limit_conn_dry_run) mode.\n\n  Example:\n\n  ``` nginx\n  {\n    \"passed\" : 15,\n    \"rejected\" : 0,\n    \"rejected_dry_run\" : 2\n  }\n  ```\n\n- Stream Upstream:\n\n  `peers`\n  An array of:\n  `id` (`integer`)\n  The ID of the server.\n  `server` (`string`)\n  An [address](../stream/ngx_stream_upstream_module#server) of the server.\n  `service` (`string`)\n  The [service](../stream/ngx_stream_upstream_module#service) parameter value of the [server](../stream/ngx_stream_upstream_module#server) directive.\n  `name` (`string`)\n  The name of the server specified in the [server](../stream/ngx_stream_upstream_module#server) directive.\n  `backup` (`boolean`)\n  A boolean value indicating whether the server is a [backup](../stream/ngx_stream_upstream_module#backup) server.\n  `weight` (`integer`)\n  [Weight](../stream/ngx_stream_upstream_module#weight) of the server.\n  `state` (`string`)\n  Current state, which may be one of “`up`”, “`down`”, “`unavail`”, “`checking`”, or “`unhealthy`”.\n  `active` (`integer`)\n  The current number of connections.\n  `ssl`\n  `handshakes` (`integer`)\n  The total number of successful SSL handshakes.\n  `handshakes_failed` (`integer`)\n  The total number of failed SSL handshakes.\n  `session_reuses` (`integer`)\n  The total number of session reuses during SSL handshake.\n  `no_common_protocol` (`integer`)\n  The number of SSL handshakes failed because of no common protocol.\n  `handshake_timeout` (`integer`)\n  The number of SSL handshakes failed because of a timeout.\n  `peer_rejected_cert` (`integer`)\n  The number of failed SSL handshakes when nginx presented the certificate to the upstream server but it was rejected with a corresponding alert message.\n  `verify_failures`\n  SSL certificate verification errors\n  `expired_cert` (`integer`)\n  An expired or not yet valid certificate was presented by an upstream server.\n  `revoked_cert` (`integer`)\n  A revoked certificate was presented by an upstream server.\n  `hostname_mismatch` (`integer`)\n  Server's certificate doesn't match the hostname.\n  `other` (`integer`)\n  Other SSL certificate verification errors.\n\n  `max_conns` (`integer`)\n  The [max_conns](../stream/ngx_stream_upstream_module#max_conns) limit for the server.\n  `connections` (`integer`)\n  The total number of client connections forwarded to this server.\n  `connect_time` (`integer`)\n  The average time to connect to the upstream server.\n  `first_byte_time` (`integer`)\n  The average time to receive the first byte of data.\n  `response_time` (`integer`)\n  The average time to receive the last byte of data.\n  `sent` (`integer`)\n  The total number of bytes sent to this server.\n  `received` (`integer`)\n  The total number of bytes received from this server.\n  `fails` (`integer`)\n  The total number of unsuccessful attempts to communicate with the server.\n  `unavail` (`integer`)\n  How many times the server became unavailable for client connections (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](../stream/ngx_stream_upstream_module#max_fails) threshold.\n  `health_checks`\n  `checks` (`integer`)\n  The total number of [health check](../stream/ngx_stream_upstream_hc_module#health_check) requests made.\n  `fails` (`integer`)\n  The number of failed health checks.\n  `unhealthy` (`integer`)\n  How many times the server became unhealthy (state “`unhealthy`”).\n  `last_passed` (`boolean`)\n  Boolean indicating whether the last health check request was successful and passed [tests](../stream/ngx_stream_upstream_hc_module#match).\n\n  `downtime` (`integer`)\n  Total time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n  `downstart` (`string`)\n  The time when the server became “`unavail`”, “`checking`”, or “`unhealthy`”, in the ISO 8601 format with millisecond resolution.\n  `selected` (`string`)\n  The time when the server was last selected to process a connection, in the ISO 8601 format with millisecond resolution.\n\n  `zombies` (`integer`)\n  The current number of servers removed from the group but still processing active client connections.\n  `zone` (`string`)\n  The name of the shared memory [zone](../stream/ngx_stream_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n  Example:\n\n  ``` nginx\n  {\n    \"dns\" : {\n      \"peers\" : [\n        {\n          \"id\" : 0,\n          \"server\" : \"10.0.0.1:12347\",\n          \"name\" : \"10.0.0.1:12347\",\n          \"backup\" : false,\n          \"weight\" : 5,\n          \"state\" : \"up\",\n          \"active\" : 0,\n          \"ssl\" : {\n            \"handshakes\" : 200,\n            \"handshakes_failed\" : 4,\n            \"session_reuses\" : 189,\n            \"no_common_protocol\" : 4,\n            \"handshake_timeout\" : 0,\n            \"peer_rejected_cert\" : 0,\n            \"verify_failures\" : {\n              \"expired_cert\" : 2,\n              \"revoked_cert\" : 1,\n              \"hostname_mismatch\" : 2,\n              \"other\" : 1\n            }\n          },\n          \"max_conns\" : 50,\n          \"connections\" : 667231,\n          \"sent\" : 251946292,\n          \"received\" : 19222475454,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26214,\n            \"fails\" : 0,\n            \"unhealthy\" : 0,\n            \"last_passed\" : true\n          },\n          \"downtime\" : 0,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        },\n        {\n          \"id\" : 1,\n          \"server\" : \"10.0.0.1:12348\",\n          \"name\" : \"10.0.0.1:12348\",\n          \"backup\" : true,\n          \"weight\" : 1,\n          \"state\" : \"unhealthy\",\n          \"active\" : 0,\n          \"max_conns\" : 50,\n          \"connections\" : 0,\n          \"sent\" : 0,\n          \"received\" : 0,\n          \"fails\" : 0,\n          \"unavail\" : 0,\n          \"health_checks\" : {\n            \"checks\" : 26284,\n            \"fails\" : 26284,\n            \"unhealthy\" : 1,\n            \"last_passed\" : false\n          },\n          \"downtime\" : 262925617,\n          \"downstart\" : \"2022-06-28T11:09:21.602Z\",\n          \"selected\" : \"2022-06-28T15:01:25.000Z\"\n        }\n      ],\n      \"zombies\" : 0,\n      \"zone\" : \"dns\"\n    }\n  }\n  ```\n\n- Stream Upstream Server:\n\n  Dynamically configurable parameters of a stream upstream [server](../stream/ngx_stream_upstream_module#server):\n  `id` (`integer`)\n  The ID of the stream upstream server. The ID is assigned automatically and cannot be changed.\n  `server` (`string`)\n  Same as the [address](../stream/ngx_stream_upstream_module#server) parameter of the stream upstream server. When adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx. This requires the [resolver](../stream/ngx_stream_core_module#resolver) directive in the “`stream`” block. See also the [resolve](../stream/ngx_stream_upstream_module#resolve) parameter of the stream upstream server.\n  `service` (`string`)\n  Same as the [service](../stream/ngx_stream_upstream_module#service) parameter of the stream upstream server. This parameter cannot be changed.\n  `weight` (`integer`)\n  Same as the [weight](../stream/ngx_stream_upstream_module#weight) parameter of the stream upstream server.\n  `max_conns` (`integer`)\n  Same as the [max_conns](../stream/ngx_stream_upstream_module#max_conns) parameter of the stream upstream server.\n  `max_fails` (`integer`)\n  Same as the [max_fails](../stream/ngx_stream_upstream_module#max_fails) parameter of the stream upstream server.\n  `fail_timeout` (`string`)\n  Same as the [fail_timeout](../stream/ngx_stream_upstream_module#fail_timeout) parameter of the stream upstream server.\n  `slow_start` (`string`)\n  Same as the [slow_start](../stream/ngx_stream_upstream_module#slow_start) parameter of the stream upstream server.\n  `backup` (`boolean`)\n  When `true`, adds a [backup](../stream/ngx_stream_upstream_module#backup) server. This parameter cannot be changed.\n  `down` (`boolean`)\n  Same as the [down](../stream/ngx_stream_upstream_module#down) parameter of the stream upstream server.\n  `parent` (`string`)\n  Parent server ID of the resolved server. The ID is assigned automatically and cannot be changed.\n  `host` (`string`)\n  Hostname of the resolved server. The hostname is assigned automatically and cannot be changed.\n\n  Example:\n\n  ``` nginx\n  {\n    \"id\" : 0,\n    \"server\" : \"10.0.0.1:12348\",\n    \"weight\" : 1,\n    \"max_conns\" : 0,\n    \"max_fails\" : 1,\n    \"fail_timeout\" : \"10s\",\n    \"slow_start\" : 0,\n    \"backup\" : false,\n    \"down\" : false\n  }\n  ```\n\n- Stream Keyval Shared Memory Zone:\n\n  Contents of a stream keyval shared memory zone when using the GET method.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : \"value3\"\n  }\n  ```\n\n- Stream Keyval Shared Memory Zone:\n\n  Contents of a stream keyval shared memory zone when using the POST or PATCH methods.\n  Example:\n\n  ``` nginx\n  {\n    \"key1\" : \"value1\",\n    \"key2\" : \"value2\",\n    \"key3\" : {\n      \"value\" : \"value3\",\n      \"expire\" : 30000\n    }\n  }\n  ```\n\n- Stream Zone Sync Node:\n\n  `zones`\n  Synchronization information per each shared memory zone.\n\n  A collection of \"[Sync Zone](#def_nginx_stream_zone_sync_zone)\" objects\n\n  `status`\n  Synchronization information per node in a cluster.\n  `bytes_in` (`integer`)\n  The number of bytes received by this node.\n  `msgs_in` (`integer`)\n  The number of messages received by this node.\n  `msgs_out` (`integer`)\n  The number of messages sent by this node.\n  `bytes_out` (`integer`)\n  The number of bytes sent by this node.\n  `nodes_online` (`integer`)\n  The number of peers this node is connected to.\n\n  Example:\n\n  ``` nginx\n  {\n    \"zones\" : {\n      \"zone1\" : {\n        \"records_pending\" : 2061,\n        \"records_total\" : 260575\n      },\n      \"zone2\" : {\n        \"records_pending\" : 0,\n        \"records_total\" : 14749\n      }\n    },\n    \"status\" : {\n      \"bytes_in\" : 1364923761,\n      \"msgs_in\" : 337236,\n      \"msgs_out\" : 346717,\n      \"bytes_out\" : 1402765472,\n      \"nodes_online\" : 15\n    }\n  }\n  ```\n\n- Sync Zone:\n\n  Synchronization status of a shared memory zone.\n  `records_pending` (`integer`)\n  The number of records that need to be sent to the cluster.\n  `records_total` (`integer`)\n  The total number of records stored in the shared memory zone.\n\n- Resolver Zone:\n\n  Statistics of DNS requests and responses per particular [resolver zone](ngx_http_core_module#resolver_status_zone).\n  `requests`\n  `name` (`integer`)\n  The total number of requests to resolve names to addresses.\n  `srv` (`integer`)\n  The total number of requests to resolve SRV records.\n  `addr` (`integer`)\n  The total number of requests to resolve addresses to names.\n\n  `responses`\n  `noerror` (`integer`)\n  The total number of successful responses.\n  `formerr` (`integer`)\n  The total number of FORMERR (`Format error`) responses.\n  `servfail` (`integer`)\n  The total number of SERVFAIL (`Server failure`) responses.\n  `nxdomain` (`integer`)\n  The total number of NXDOMAIN (`Host not found`) responses.\n  `notimp` (`integer`)\n  The total number of NOTIMP (`Unimplemented`) responses.\n  `refused` (`integer`)\n  The total number of REFUSED (`Operation refused`) responses.\n  `timedout` (`integer`)\n  The total number of timed out requests.\n  `unknown` (`integer`)\n  The total number of requests completed with an unknown error.\n\n  Example:\n\n  ``` nginx\n  {\n    \"resolver_zone1\" : {\n      \"requests\" : {\n        \"name\" : 25460,\n        \"srv\" : 130,\n        \"addr\" : 2580\n      },\n      \"responses\" : {\n        \"noerror\" : 26499,\n        \"formerr\" : 0,\n        \"servfail\" : 3,\n        \"nxdomain\" : 0,\n        \"notimp\" : 0,\n        \"refused\" : 0,\n        \"timedout\" : 243,\n        \"unknown\" : 478\n      }\n    }\n  }\n  ```\n\n- Worker process:\n\n  Statistics per each worker process.\n  `id` (`integer`)\n  The ID of the worker process.\n  `pid` (`integer`)\n  The PID identifier of the worker process used by the operating system.\n  `connections`\n  The number of accepted, dropped, active, and idle connections per worker process.\n  `accepted` (`integer`)\n  The total number of client connections accepted by the worker process.\n  `dropped` (`integer`)\n  The total number of client connections dropped by the worker process.\n  `active` (`integer`)\n  The current number of active client connections that are currently being handled by the worker process.\n  `idle` (`integer`)\n  The number of idle client connections that are currently being handled by the worker process.\n\n  `http`\n  `requests`\n  The total number of client requests handled by the worker process.\n  `total` (`integer`)\n  The total number of client requests received by the worker process.\n  `current` (`integer`)\n  The current number of client requests that are currently being processed by the worker process.\n\n  Example:\n\n  ``` nginx\n  {\n    \"id\" : 0,\n    \"pid\" : 32212,\n    \"connections\" : {\n      \"accepted\" : 1,\n      \"dropped\" : 0,\n      \"active\" : 1,\n      \"idle\" : 0\n    },\n    \"http\" : {\n      \"requests\" : {\n        \"total\" : 15,\n        \"current\" : 1\n      }\n    }\n  }\n  ```\n\n- Error:\n\n  nginx error object.\n  `error`\n  `status` (`integer`)\n  HTTP error code.\n  `text` (`string`)\n  Error description.\n  `code` (`string`)\n  Internal nginx error code.\n\n  `request_id` (`string`)\n  The ID of the request, equals the value of the [$request_id](ngx_http_core_module#var_request_id) variable.\n  `href` (`string`)\n  Link to reference documentation.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_api_module.html](https://nginx.org/en/docs/http/ngx_http_api_module.html)"
- name: status_zone
  id: http/ngx_http_status_module#status_zone
  summary: Enables collection of virtual http or stream (1.7.11) server status information in the specified zone
  belongs_to: ngx_http_status_module
  description: "|          |                              |\n|----------|------------------------------|\n| Syntax:  | **`status_zone`***`zone`*`;` |\n| Default: | —                            |\n| Context: | `server`                     |\n\nEnables collection of virtual [http](ngx_http_core_module#server) or [stream](../stream/ngx_stream_core_module#server) (1.7.11) server status information in the specified *`zone`*. Several servers may share the same zone.\n\n#### Data\n\nThe following status information is provided:\n\n`version`\n\nVersion of the provided data set. The current version is 8.\n\n`nginx_version`\n\nVersion of nginx.\n\n`nginx_build`\n\nName of nginx build.\n\n`address`\n\nThe address of the server that accepted status request.\n\n`generation`\n\nThe total number of configuration [reloads](../control#reconfiguration).\n\n`load_timestamp`\n\nTime of the last reload of configuration, in milliseconds since Epoch.\n\n`timestamp`\n\nCurrent time in milliseconds since Epoch.\n\n`pid`\n\nThe ID of the worker process that handled status request.\n\n`ppid`\n\nThe ID of the master process that started the [worker process](#pid).\n\n`processes`\n\n`respawned`\n\nThe total number of abnormally terminated and respawned child processes.\n\n`connections`\n\n`accepted`\n\nThe total number of accepted client connections.\n\n`dropped`\n\nThe total number of dropped client connections.\n\n`active`\n\nThe current number of active client connections.\n\n`idle`\n\nThe current number of idle client connections.\n\n`ssl`\n\n`handshakes`\n\nThe total number of successful SSL handshakes.\n\n`handshakes_failed`\n\nThe total number of failed SSL handshakes.\n\n`session_reuses`\n\nThe total number of session reuses during SSL handshake.\n\n`requests`\n\n`total`\n\nThe total number of client requests.\n\n`current`\n\nThe current number of client requests.\n\n`server_zones`\n\nFor each [status_zone](#status_zone):\n\n`processing`\n\nThe number of client requests that are currently being processed.\n\n`requests`\n\nThe total number of client requests received from clients.\n\n`responses`\n\n`total`\n\nThe total number of responses sent to clients.\n\n`1xx`, `2xx`, `3xx`, `4xx`, `5xx`\n\nThe number of responses with status codes 1xx, 2xx, 3xx, 4xx, and 5xx.\n\n`discarded`\n\nThe total number of requests completed without sending a response.\n\n`received`\n\nThe total number of bytes received from clients.\n\n`sent`\n\nThe total number of bytes sent to clients.\n\n`slabs`\n\nFor each shared memory zone that uses slab allocator:\n\n`pages`\n\n`used`\n\nThe current number of used memory pages.\n\n`free`\n\nThe current number of free memory pages.\n\n`slots`\n\nFor each memory slot size (8, 16, 32, 64, 128, etc.) the following data are provided:\n\n`used`\n\nThe current number of used memory slots.\n\n`free`\n\nThe current number of free memory slots.\n\n`reqs`\n\nThe total number of attempts to allocate memory of specified size.\n\n`fails`\n\nThe number of unsuccessful attempts to allocate memory of specified size.\n\n`upstreams`\n\nFor each [dynamically configurable](ngx_http_upstream_module#zone) [group](ngx_http_upstream_module#upstream), the following data are provided:\n\n`peers`\n\nFor each [server](ngx_http_upstream_module#server), the following data are provided:\n\n`id`\n\nThe ID of the server.\n\n`server`\n\nAn [address](ngx_http_upstream_module#server) of the server.\n\n`name`\n\nThe name of the server specified in the [server](ngx_http_upstream_module#server) directive.\n\n`service`\n\nThe [service](ngx_http_upstream_module#service) parameter value of the [server](ngx_http_upstream_module#server) directive.\n\n`backup`\n\nA boolean value indicating whether the server is a [backup](ngx_http_upstream_module#backup) server.\n\n`weight`\n\n[Weight](ngx_http_upstream_module#weight) of the server.\n\n`state`\n\nCurrent state, which may be one of “`up`”, “`draining`”, “`down`”, “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`active`\n\nThe current number of active connections.\n\n`max_conns`\n\nThe [max_conns](ngx_http_upstream_module#max_conns) limit for the server.\n\n`requests`\n\nThe total number of client requests forwarded to this server.\n\n`responses`\n\n`total`\n\nThe total number of responses obtained from this server.\n\n`1xx`, `2xx`, `3xx`, `4xx`, `5xx`\n\nThe number of responses with status codes 1xx, 2xx, 3xx, 4xx, and 5xx.\n\n`sent`\n\nThe total number of bytes sent to this server.\n\n`received`\n\nThe total number of bytes received from this server.\n\n`fails`\n\nThe total number of unsuccessful attempts to communicate with the server.\n\n`unavail`\n\nHow many times the server became unavailable for client requests (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](ngx_http_upstream_module#max_fails) threshold.\n\n`health_checks`\n\n`checks`\n\nThe total number of [health check](ngx_http_upstream_hc_module#health_check) requests made.\n\n`fails`\n\nThe number of failed health checks.\n\n`unhealthy`\n\nHow many times the server became unhealthy (state “`unhealthy`”).\n\n`last_passed`\n\nBoolean indicating if the last health check request was successful and passed [tests](ngx_http_upstream_hc_module#match).\n\n`downtime`\n\nTotal time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n\n`downstart`\n\nThe time (in milliseconds since Epoch) when the server became “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`selected`\n\nThe time (in milliseconds since Epoch) when the server was last selected to process a request (1.7.5).\n\n`header_time`\n\nThe average time to get the [response header](ngx_http_upstream_module#var_upstream_header_time) from the server (1.7.10). Prior to version 1.11.6, the field was available only when using the [least_time](ngx_http_upstream_module#least_time) load balancing method.\n\n`response_time`\n\nThe average time to get the [full response](ngx_http_upstream_module#var_upstream_response_time) from the server (1.7.10). Prior to version 1.11.6, the field was available only when using the [least_time](ngx_http_upstream_module#least_time) load balancing method.\n\n`keepalive`\n\nThe current number of idle [keepalive](ngx_http_upstream_module#keepalive) connections.\n\n`zombies`\n\nThe current number of servers removed from the group but still processing active client requests.\n\n`zone`\n\nThe name of the shared memory [zone](ngx_http_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n`queue`\n\nFor the requests [queue](ngx_http_upstream_module#queue), the following data are provided:\n\n`size`\n\nThe current number of requests in the queue.\n\n`max_size`\n\nThe maximum number of requests that can be in the queue at the same time.\n\n`overflows`\n\nThe total number of requests rejected due to the queue overflow.\n\n`caches`\n\nFor each cache (configured by [proxy_cache_path](ngx_http_proxy_module#proxy_cache_path) and the likes):\n\n`size`\n\nThe current size of the cache.\n\n`max_size`\n\nThe limit on the maximum size of the cache specified in the configuration.\n\n`cold`\n\nA boolean value indicating whether the “cache loader” process is still loading data from disk into the cache.\n\n`hit`, `stale`, `updating`, `revalidated`\n\n`responses`\n\nThe total number of responses read from the cache (hits, or stale responses due to [proxy_cache_use_stale](ngx_http_proxy_module#proxy_cache_use_stale) and the likes).\n\n`bytes`\n\nThe total number of bytes read from the cache.\n\n`miss`, `expired`, `bypass`\n\n`responses`\n\nThe total number of responses not taken from the cache (misses, expires, or bypasses due to [proxy_cache_bypass](ngx_http_proxy_module#proxy_cache_bypass) and the likes).\n\n`bytes`\n\nThe total number of bytes read from the proxied server.\n\n`responses_written`\n\nThe total number of responses written to the cache.\n\n`bytes_written`\n\nThe total number of bytes written to the cache.\n\n`stream`\n\n`server_zones`\n\nFor each [status_zone](#status_zone):\n\n`processing`\n\nThe number of client connections that are currently being processed.\n\n`connections`\n\nThe total number of connections accepted from clients.\n\n`sessions`\n\n`total`\n\nThe total number of completed client sessions.\n\n`2xx`, `4xx`, `5xx`\n\nThe number of sessions completed with [status codes](../stream/ngx_stream_core_module#var_status) 2xx, 4xx, or 5xx.\n\n`discarded`\n\nThe total number of connections completed without creating a session.\n\n`received`\n\nThe total number of bytes received from clients.\n\n`sent`\n\nThe total number of bytes sent to clients.\n\n`upstreams`\n\nFor each [dynamically configurable](../stream/ngx_stream_upstream_module#zone) [group](../stream/ngx_stream_upstream_module#upstream), the following data are provided:\n\n`peers`\n\nFor each [server](../stream/ngx_stream_upstream_module#server) the following data are provided:\n\n`id`\n\nThe ID of the server.\n\n`server`\n\nAn [address](../stream/ngx_stream_upstream_module#server) of the server.\n\n`name`\n\nThe name of the server specified in the [server](../stream/ngx_stream_upstream_module#server) directive.\n\n`service`\n\nThe [service](../stream/ngx_stream_upstream_module#service) parameter value of the [server](../stream/ngx_stream_upstream_module#server) directive.\n\n`backup`\n\nA boolean value indicating whether the server is a [backup](../stream/ngx_stream_upstream_module#backup) server.\n\n`weight`\n\n[Weight](../stream/ngx_stream_upstream_module#weight) of the server.\n\n`state`\n\nCurrent state, which may be one of “`up`”, “`down`”, “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`active`\n\nThe current number of connections.\n\n`max_conns`\n\nThe [max_conns](../stream/ngx_stream_upstream_module#max_conns) limit for the server.\n\n`connections`\n\nThe total number of client connections forwarded to this server.\n\n`connect_time`\n\nThe average time to connect to the upstream server. Prior to version 1.11.6, the field was available only when using the [least_time](../stream/ngx_stream_upstream_module#least_time) load balancing method.\n\n`first_byte_time`\n\nThe average time to receive the first byte of data. Prior to version 1.11.6, the field was available only when using the [least_time](../stream/ngx_stream_upstream_module#least_time) load balancing method.\n\n`response_time`\n\nThe average time to receive the last byte of data. Prior to version 1.11.6, the field was available only when using the [least_time](../stream/ngx_stream_upstream_module#least_time) load balancing method.\n\n`sent`\n\nThe total number of bytes sent to this server.\n\n`received`\n\nThe total number of bytes received from this server.\n\n`fails`\n\nThe total number of unsuccessful attempts to communicate with the server.\n\n`unavail`\n\nHow many times the server became unavailable for client connections (state “`unavail`”) due to the number of unsuccessful attempts reaching the [max_fails](../stream/ngx_stream_upstream_module#max_fails) threshold.\n\n`health_checks`\n\n`checks`\n\nThe total number of [health check](../stream/ngx_stream_upstream_hc_module#health_check) requests made.\n\n`fails`\n\nThe number of failed health checks.\n\n`unhealthy`\n\nHow many times the server became unhealthy (state “`unhealthy`”).\n\n`last_passed`\n\nBoolean indicating if the last health check request was successful and passed [tests](../stream/ngx_stream_upstream_hc_module#match).\n\n`downtime`\n\nTotal time the server was in the “`unavail`”, “`checking`”, and “`unhealthy`” states.\n\n`downstart`\n\nThe time (in milliseconds since Epoch) when the server became “`unavail`”, “`checking`”, or “`unhealthy`”.\n\n`selected`\n\nThe time (in milliseconds since Epoch) when the server was last selected to process a connection.\n\n`zombies`\n\nThe current number of servers removed from the group but still processing active client connections.\n\n`zone`\n\nThe name of the shared memory [zone](../stream/ngx_stream_upstream_module#zone) that keeps the group’s configuration and run-time state.\n\n#### Compatibility\n\n- The [zone](#zone) field in [http](#upstreams) and [stream](#stream_upstreams) upstreams was added in [version](#version) 8.\n- The [slabs](#slabs) status data were added in [version](#version) 8.\n- The [checking](#state) state was added in [version](#version) 8.\n- The [name](#name) and [service](#service) fields in [http](#upstreams) and [stream](#stream_upstreams) upstreams were added in [version](#version) 8.\n- The [nginx_build](#nginx_build) and [ppid](#ppid) fields were added in [version](#version) 8.\n- The [sessions](#sessions) status data and the [discarded](#stream_discarded) field in stream [server_zones](#stream_server_zones) were added in [version](#version) 7.\n- The [zombies](#zombies) field was moved from nginx [debug](../debugging_log) version in [version](#version) 6.\n- The [ssl](#ssl) status data were added in [version](#version) 6.\n- The [discarded](#discarded) field in [server_zones](#server_zones) was added in [version](#version) 6.\n- The [queue](#queue) status data were added in [version](#version) 6.\n- The [pid](#pid) field was added in [version](#version) 6.\n- The list of servers in [upstreams](#upstreams) was moved into [peers](#peers) in [version](#version) 6.\n- The `keepalive` field of an upstream server was removed in [version](#version) 5.\n- The [stream](#stream) status data were added in [version](#version) 5.\n- The [generation](#generation) field was added in [version](#version) 5.\n- The [respawned](#respawned) field in [processes](#processes) was added in [version](#version) 5.\n- The [header_time](#header_time) and [response_time](#response_time) fields in [upstreams](#upstreams) were added in [version](#version) 5.\n- The [selected](#selected) field in [upstreams](#upstreams) was added in [version](#version) 4.\n- The [draining](#state) state in [upstreams](#upstreams) was added in [version](#version) 4.\n- The [id](#id) and [max_conns](#max_conns) fields in [upstreams](#upstreams) were added in [version](#version) 3.\n- The `revalidated` field in [caches](#caches) was added in [version](#version) 3.\n- The [server_zones](#server_zones), [caches](#caches), and [load_timestamp](#load_timestamp) status data were added in [version](#version) 2.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_status_module.html](https://nginx.org/en/docs/http/ngx_http_status_module.html)"
- name: sticky
  id: http/ngx_http_upstream_module#sticky
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                                                                                                                                                                                                                                                                                                                           |
    |----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`sticky`**` cookie `*`name`*` [expires=`*`time`*`] [domain=`*`domain`*`] [httponly] [samesite=strict|lax|none|`*`$variable`*`] [secure] [path=`*`path`*`];`**`sticky`**` route `*`$variable`*` ...;`**`sticky`**` learn create=`*`$variable`*` lookup=`*`$variable`*` zone=`*`name`*`:`*`size`*` [timeout=`*`time`*`] [header] [sync];` |
    | Default: | —                                                                                                                                                                                                                                                                                                                                         |
    | Context: | `upstream`                                                                                                                                                                                                                                                                                                                                |

    This directive appeared in version 1.5.7.

    Enables session affinity, which causes requests from the same client to be passed to the same server in a group of servers. Three methods are available:

    `cookie`

    When the `cookie` method is used, information about the designated server is passed in an HTTP cookie generated by nginx:

    ``` nginx
    upstream backend {
        server backend1.example.com;
        server backend2.example.com;

        sticky cookie srv_id expires=1h domain=.example.com path=/;
    }
    ```

    A request that comes from a client not yet bound to a particular server is passed to the server selected by the configured balancing method. Further requests with this cookie will be passed to the designated server. If the designated server cannot process a request, the new server is selected as if the client has not been bound yet.

    As a load balancing method always tries to evenly distribute the load considering already bound requests, the server with a higher number of active bound requests has less possibility of getting new unbound requests.

    The first parameter sets the name of the cookie to be set or inspected. The cookie value is a hexadecimal representation of the MD5 hash of the IP address and port, or of the UNIX-domain socket path. However, if the “`route`” parameter of the [server](#server) directive is specified, the cookie value will be the value of the “`route`” parameter:

    ``` nginx
    upstream backend {
        server backend1.example.com route=a;
        server backend2.example.com route=b;

        sticky cookie srv_id expires=1h domain=.example.com path=/;
    }
    ```

    In this case, the value of the “`srv_id`” cookie will be either *`a`* or *`b`*.

    Additional parameters may be as follows:

    `expires=`*`time`*

    Sets the *`time`* for which a browser should keep the cookie. The special value `max` will cause the cookie to expire on “`31 Dec 2037 23:55:55 GMT`”. If the parameter is not specified, it will cause the cookie to expire at the end of a browser session.

    `domain=`*`domain`*

    Defines the *`domain`* for which the cookie is set. Parameter value can contain variables (1.11.5).

    `httponly`

    Adds the `HttpOnly` attribute to the cookie (1.7.11).

    `samesite=``strict` \| `lax` \| `none` \| *`$variable`*

    Adds the `SameSite` (1.19.4) attribute to the cookie with one of the following values: `Strict`, `Lax`, `None`, or using variables (1.23.3). In the latter case, if the variable value is empty, the `SameSite` attribute will not be added to the cookie, if the value is resolved to `Strict`, `Lax`, or `None`, the corresponding value will be assigned, otherwise the `Strict` value will be assigned.

    `secure`

    Adds the `Secure` attribute to the cookie (1.7.11).

    `path=`*`path`*

    Defines the *`path`* for which the cookie is set.

    If any parameters are omitted, the corresponding cookie fields are not set.

    `route`

    When the `route` method is used, proxied server assigns client a route on receipt of the first request. All subsequent requests from this client will carry routing information in a cookie or URI. This information is compared with the “`route`” parameter of the [server](#server) directive to identify the server to which the request should be proxied. If the “`route`” parameter is not specified, the route name will be a hexadecimal representation of the MD5 hash of the IP address and port, or of the UNIX-domain socket path. If the designated server cannot process a request, the new server is selected by the configured balancing method as if there is no routing information in the request.

    The parameters of the `route` method specify variables that may contain routing information. The first non-empty variable is used to find the matching server.

    Example:

    ``` nginx
    map $cookie_jsessionid $route_cookie {
        ~.+\.(?P<route>\w+)$ $route;
    }

    map $request_uri $route_uri {
        ~jsessionid=.+\.(?P<route>\w+)$ $route;
    }

    upstream backend {
        server backend1.example.com route=a;
        server backend2.example.com route=b;

        sticky route $route_cookie $route_uri;
    }
    ```

    Here, the route is taken from the “`JSESSIONID`” cookie if present in a request. Otherwise, the route from the URI is used.

    `learn`

    When the `learn` method (1.7.1) is used, nginx analyzes upstream server responses and learns server-initiated sessions usually passed in an HTTP cookie.

    ``` nginx
    upstream backend {
       server backend1.example.com:8080;
       server backend2.example.com:8081;

       sticky learn
              create=$upstream_cookie_examplecookie
              lookup=$cookie_examplecookie
              zone=client_sessions:1m;
    }
    ```

    In the example, the upstream server creates a session by setting the cookie “`EXAMPLECOOKIE`” in the response. Further requests with this cookie will be passed to the same server. If the server cannot process the request, the new server is selected as if the client has not been bound yet.

    The parameters `create` and `lookup` specify variables that indicate how new sessions are created and existing sessions are searched, respectively. Both parameters may be specified more than once, in which case the first non-empty variable is used.

    Sessions are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `zone` parameter. One megabyte zone can store about 4000 sessions on the 64-bit platform. The sessions that are not accessed during the time specified by the `timeout` parameter get removed from the zone. By default, `timeout` is set to 10 minutes.

    The `header` parameter (1.13.1) allows creating a session right after receiving response headers from the upstream server.

    The `sync` parameter (1.13.8) enables [synchronization](../stream/ngx_stream_zone_sync_module#zone_sync) of the shared memory zone.

    This directive is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: sticky_cookie_insert
  id: http/ngx_http_upstream_module#sticky_cookie_insert
  summary: This directive is obsolete since version 1.5.7
  belongs_to: ngx_http_upstream_module
  description: "|          |                                                                                                    |\n|----------|----------------------------------------------------------------------------------------------------|\n| Syntax:  | **`sticky_cookie_insert`***`name`*` [expires=`*`time`*`] [domain=`*`domain`*`] [path=`*`path`*`];` |\n| Default: | —                                                                                                  |\n| Context: | `upstream`                                                                                         |\n\nThis directive is obsolete since version 1.5.7. An equivalent [sticky](#sticky) directive with a new syntax should be used instead:\n\n`sticky cookie` *`name`* \\[`expires=`*`time`*\\] \\[`domain=`*`domain`*\\] \\[`path=`*`path`*\\];\n\n#### Embedded Variables\n\nThe `ngx_http_upstream_module` module supports the following embedded variables:\n\n`$upstream_addr`\n\nkeeps the IP address and port, or the path to the UNIX-domain socket of the upstream server. If several servers were contacted during request processing, their addresses are separated by commas, e.g. “`192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock`”. If an internal redirect from one server group to another happens, initiated by “X-Accel-Redirect” or [error_page](ngx_http_core_module#error_page), then the server addresses from different groups are separated by colons, e.g. “`192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock : 192.168.10.1:80, 192.168.10.2:80`”. If a server cannot be selected, the variable keeps the name of the server group.\n\n`$upstream_bytes_received`\n\nnumber of bytes received from an upstream server (1.11.4). Values from several connections are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_bytes_sent`\n\nnumber of bytes sent to an upstream server (1.15.8). Values from several connections are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_cache_status`\n\nkeeps the status of accessing a response cache (0.8.3). The status can be either “`MISS`”, “`BYPASS`”, “`EXPIRED`”, “`STALE`”, “`UPDATING`”, “`REVALIDATED`”, or “`HIT`”.\n\n`$upstream_connect_time`\n\nkeeps time spent on establishing a connection with the upstream server (1.9.1); the time is kept in seconds with millisecond resolution. In case of SSL, includes time spent on handshake. Times of several connections are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_cookie_`*`name`*\n\ncookie with the specified *`name`* sent by the upstream server in the “Set-Cookie” response header field (1.7.1). Only the cookies from the response of the last server are saved.\n\n`$upstream_header_time`\n\nkeeps time spent on receiving the response header from the upstream server (1.7.10); the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_http_`*`name`*\n\nkeep server response header fields. For example, the “Server” response header field is available through the `$upstream_http_server` variable. The rules of converting header field names to variable names are the same as for the variables that start with the “[$http\\_](ngx_http_core_module#var_http_)” prefix. Only the header fields from the response of the last server are saved.\n\n`$upstream_last_server_name`\n\nkeeps the name of last selected upstream server (1.25.3); allows passing it [through SNI](ngx_http_proxy_module#proxy_ssl_server_name):\n\n``` nginx\nproxy_ssl_server_name on;\nproxy_ssl_name        $upstream_last_server_name;\n```\n\nThis variable is available as part of our [commercial subscription](https://www.f5.com/products/nginx).\n\n`$upstream_queue_time`\n\nkeeps time the request spent in the upstream [queue](#queue) (1.13.9); the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_response_length`\n\nkeeps the length of the response obtained from the upstream server (0.7.27); the length is kept in bytes. Lengths of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_response_time`\n\nkeeps time spent on receiving the response from the upstream server; the time is kept in seconds with millisecond resolution. Times of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable.\n\n`$upstream_status`\n\nkeeps status code of the response obtained from the upstream server. Status codes of several responses are separated by commas and colons like addresses in the [$upstream_addr](#var_upstream_addr) variable. If a server cannot be selected, the variable keeps the 502 (Bad Gateway) status code.\n\n`$upstream_trailer_`*`name`*\n\nkeeps fields from the end of the response obtained from the upstream server (1.13.10).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_upstream_module.html](https://nginx.org/en/docs/http/ngx_http_upstream_module.html)"
- name: stream (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#stream
  summary: Provides the configuration file context in which the stream server directives are specified
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`stream`**` { ... }` |
    | Default: | —                      |
    | Context: | `main`                 |

    Provides the configuration file context in which the stream server directives are specified.
- name: stub_status
  id: http/ngx_http_stub_status_module#stub_status
  summary: The basic status information will be accessible from the surrounding location
  belongs_to: ngx_http_stub_status_module
  description: "|          |                      |\n|----------|----------------------|\n| Syntax:  | **`stub_status`**`;` |\n| Default: | —                    |\n| Context: | `server`, `location` |\n\nThe basic status information will be accessible from the surrounding location.\n\nIn versions prior to 1.7.5, the directive syntax required an arbitrary argument, for example, “`stub_status on`”.\n\n#### Data\n\nThe following status information is provided:\n\n`Active connections`\n\nThe current number of active client connections including `Waiting` connections.\n\n`accepts`\n\nThe total number of accepted client connections.\n\n`handled`\n\nThe total number of handled connections. Generally, the parameter value is the same as `accepts` unless some resource limits have been reached (for example, the [worker_connections](../ngx_core_module#worker_connections) limit).\n\n`requests`\n\nThe total number of client requests.\n\n`Reading`\n\nThe current number of connections where nginx is reading the request header.\n\n`Writing`\n\nThe current number of connections where nginx is writing the response back to the client.\n\n`Waiting`\n\nThe current number of idle client connections waiting for a request.\n\n#### Embedded Variables\n\nThe `ngx_http_stub_status_module` module supports the following embedded variables (1.3.14):\n\n`$connections_active`\n\nsame as the `Active connections` value;\n\n`$connections_reading`\n\nsame as the `Reading` value;\n\n`$connections_writing`\n\nsame as the `Writing` value;\n\n`$connections_waiting`\n\nsame as the `Waiting` value.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_stub_status_module.html](https://nginx.org/en/docs/http/ngx_http_stub_status_module.html)"
- name: sub_filter
  id: http/ngx_http_sub_module#sub_filter
  summary: Sets a string to replace and a replacement string
  belongs_to: ngx_http_sub_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`sub_filter`***`stringreplacement`*`;` |
    | Default: | —                                        |
    | Context: | `http`, `server`, `location`             |

    Sets a string to replace and a replacement string. The string to replace is matched ignoring the case. The string to replace (1.9.4) and replacement string can contain variables. Several `sub_filter` directives can be specified on the same configuration level (1.9.4). These directives are inherited from the previous configuration level if and only if there are no `sub_filter` directives defined on the current level.
- name: sub_filter_last_modified
  id: http/ngx_http_sub_module#sub_filter_last_modified
  summary: This directive appeared in version 1.5.1
  belongs_to: ngx_http_sub_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`sub_filter_last_modified`**` on | off;` |
    | Default: | `sub_filter_last_modified off;`            |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.5.1.

    Allows preserving the “Last-Modified” header field from the original response during replacement to facilitate response caching.

    By default, the header field is removed as contents of the response are modified during processing.
- name: sub_filter_once
  id: http/ngx_http_sub_module#sub_filter_once
  summary: Indicates whether to look for each string to replace once or repeatedly
  belongs_to: ngx_http_sub_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`sub_filter_once`**` on | off;` |
    | Default: | `sub_filter_once on;`             |
    | Context: | `http`, `server`, `location`      |

    Indicates whether to look for each string to replace once or repeatedly.
- name: sub_filter_types
  id: http/ngx_http_sub_module#sub_filter_types
  summary: Enables string replacement in responses with the specified MIME types in addition to “text/html”. The special value “*” matches any MIME type (0.8.29)
  belongs_to: ngx_http_sub_module
  description: "|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`sub_filter_types`***`mime-type`*` ...;` |\n| Default: | `sub_filter_types text/html;`              |\n| Context: | `http`, `server`, `location`               |\n\nEnables string replacement in responses with the specified MIME types in addition to “`text/html`”. The special value “`*`” matches any MIME type (0.8.29).\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_sub_module.html](https://nginx.org/en/docs/http/ngx_http_sub_module.html)"
- name: subrequest_output_buffer_size
  id: http/ngx_http_core_module#subrequest_output_buffer_size
  summary: This directive appeared in version 1.13.10
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`subrequest_output_buffer_size`***`size`*`;` |
    | Default: | `subrequest_output_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.13.10.

    Sets the *`size`* of the buffer used for storing the response body of a subrequest. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.

    The directive is applicable only for subrequests with response bodies saved into memory. For example, such subrequests are created by [SSI](ngx_http_ssi_module#ssi_include_set).
- name: Support for QUIC and HTTP/3
  id: quic
  summary: Support for QUIC and HTTP/3 protocols is available since 1.25.0
  description: "# Support for QUIC and HTTP/3\n\n- [Building from sources](#building)\n- [Configuration](#configuration)\n- [Example Configuration](#example)\n- [Troubleshooting](#troubleshooting)\n\nSupport for [QUIC](https://datatracker.ietf.org/doc/html/rfc9000) and [HTTP/3](https://datatracker.ietf.org/doc/html/rfc9114) protocols is available since 1.25.0. Also, since 1.25.0, the QUIC and HTTP/3 support is available in Linux [binary packages](https://nginx.org/en/linux_packages.html).\n\nThe QUIC and HTTP/3 support is experimental, caveat emptor applies.\n\n#### Building from sources\n\nThe build is configured using the `configure` command. Please refer to [Building nginx from Sources](configure) for details.\n\nWhen configuring nginx, it is possible to enable QUIC and HTTP/3 using the [`--with-http_v3_module`](configure#http_v3_module) configuration parameter.\n\nAn SSL library that provides QUIC support is recommended to build nginx, such as [BoringSSL](https://boringssl.googlesource.com/boringssl), [LibreSSL](https://www.libressl.org), or [QuicTLS](https://github.com/quictls/openssl). Otherwise, the [OpenSSL](https://openssl.org) compatibility layer will be used that does not support [early data](http/ngx_http_ssl_module#ssl_early_data).\n\nUse the following command to configure nginx with [BoringSSL](https://boringssl.googlesource.com/boringssl):\n\n``` nginx\n./configure\n    --with-debug\n    --with-http_v3_module\n    --with-cc-opt=\"-I../boringssl/include\"\n    --with-ld-opt=\"-L../boringssl/build/ssl\n                   -L../boringssl/build/crypto\"\n```\n\nAlternatively, nginx can be configured with [QuicTLS](https://github.com/quictls/openssl):\n\n``` nginx\n./configure\n    --with-debug\n    --with-http_v3_module\n    --with-cc-opt=\"-I../quictls/build/include\"\n    --with-ld-opt=\"-L../quictls/build/lib\"\n```\n\nAlternatively, nginx can be configured with a modern version of [LibreSSL](https://www.libressl.org):\n\n``` nginx\n./configure\n    --with-debug\n    --with-http_v3_module\n    --with-cc-opt=\"-I../libressl/build/include\"\n    --with-ld-opt=\"-L../libressl/build/lib\"\n```\n\nAfter configuration, nginx is compiled and installed using `make`.\n\n#### Configuration\n\nThe [listen](http/ngx_http_core_module#listen) directive in [ngx_http_core_module](http/ngx_http_core_module) module got a new parameter [quic](http/ngx_http_core_module#quic) which enables HTTP/3 over QUIC on the specified port.\n\nAlong with the `quic` parameter it is also possible to specify the [reuseport](http/ngx_http_core_module#reuseport) parameter to make it work properly with multiple workers.\n\nFor the list of directives, see [ngx_http_v3_module](http/ngx_http_v3_module).\n\nTo [enable](http/ngx_http_v3_module#quic_retry) address validation:\n\n``` nginx\nquic_retry on;\n```\n\nTo [enable](http/ngx_http_ssl_module#ssl_early_data) 0-RTT:\n\n``` nginx\nssl_early_data on;\n```\n\nTo [enable](http/ngx_http_v3_module#quic_gso) GSO (Generic Segmentation Offloading):\n\n``` nginx\nquic_gso on;\n```\n\nTo [set](http/ngx_http_v3_module#quic_host_key) host key for various tokens:\n\n``` nginx\nquic_host_key <filename>;\n```\n\nQUIC requires TLSv1.3 protocol version which is enabled by default in the [ssl_protocols](http/ngx_http_ssl_module#ssl_protocols) directive.\n\nBy default, [GSO Linux-specific optimization](http://vger.kernel.org/lpc_net2018_talks/willemdebruijn-lpc2018-udpgso-paper-DRAFT-1.pdf) is disabled. Enable it in case a corresponding network interface is configured to support GSO.\n\n#### Example Configuration\n\n``` nginx\nhttp {\n    log_format quic '$remote_addr - $remote_user [$time_local] '\n                    '\"$request\" $status $body_bytes_sent '\n                    '\"$http_referer\" \"$http_user_agent\" \"$http3\"';\n\n    access_log logs/access.log quic;\n\n    server {\n        # for better compatibility it's recommended\n        # to use the same port for quic and https\n        listen 8443 quic reuseport;\n        listen 8443 ssl;\n\n        ssl_certificate     certs/example.com.crt;\n        ssl_certificate_key certs/example.com.key;\n\n        location / {\n            # required for browsers to direct them to quic port\n            add_header Alt-Svc 'h3=\":8443\"; ma=86400';\n        }\n    }\n}\n```\n\n#### Troubleshooting\n\nTips that may help to identify problems:\n\n- Ensure nginx is built with the proper SSL library.\n\n- Ensure nginx is using the proper SSL library in runtime (the `nginx -V` shows what it is currently used).\n\n- Ensure a client is actually sending requests over QUIC. It is recommended to start with a simple console client such as [ngtcp2](https://nghttp2.org/ngtcp2) to ensure the server is configured properly before trying with real browsers that may be quite picky with certificates.\n\n- Build nginx with [debug support](debugging_log) and check the debug log. It should contain all details about the connection and why it failed. All related messages contain the “`quic`” prefix and can be easily filtered out.\n\n- For a deeper investigation, additional debugging can be enabled using the following macros: `NGX_QUIC_DEBUG_PACKETS`, `NGX_QUIC_DEBUG_FRAMES`, `NGX_QUIC_DEBUG_ALLOC`, `NGX_QUIC_DEBUG_CRYPTO`.\n\n  ``` nginx\n  ./configure\n      --with-http_v3_module\n      --with-debug\n      --with-cc-opt=\"-DNGX_QUIC_DEBUG_PACKETS -DNGX_QUIC_DEBUG_CRYPTO\"\n  ```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/quic.html](https://nginx.org/en/docs/quic.html)"
- name: tcp_nodelay
  id: http/ngx_http_core_module#tcp_nodelay
  summary: Enables or disables the use of the TCP_NODELAY option
  belongs_to: ngx_http_core_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`tcp_nodelay`**` on | off;` |
    | Default: | `tcp_nodelay on;`             |
    | Context: | `http`, `server`, `location`  |

    Enables or disables the use of the `TCP_NODELAY` option. The option is enabled when a connection is transitioned into the keep-alive state. Additionally, it is enabled on SSL connections, for unbuffered proxying, and for [WebSocket](websocket) proxying.
- name: tcp_nodelay (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#tcp_nodelay
  summary: This directive appeared in version 1.9.4
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`tcp_nodelay`**` on | off;` |
    | Default: | `tcp_nodelay on;`             |
    | Context: | `stream`, `server`            |

    This directive appeared in version 1.9.4.

    Enables or disables the use of the `TCP_NODELAY` option. The option is enabled for both client and proxied server connections.
- name: tcp_nopush
  id: http/ngx_http_core_module#tcp_nopush
  summary: Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket option on Linux
  belongs_to: ngx_http_core_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`tcp_nopush`**` on | off;` |
    | Default: | `tcp_nopush off;`            |
    | Context: | `http`, `server`, `location` |

    Enables or disables the use of the `TCP_NOPUSH` socket option on FreeBSD or the `TCP_CORK` socket option on Linux. The options are enabled only when [sendfile](#sendfile) is used. Enabling the option allows

    - sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.\*;
    - sending a file in full packets.
- name: thread_pool (Core functionality)
  id: ngx_core_module#thread_pool
  summary: This directive appeared in version 1.7.11
  belongs_to: Core functionality
  description: |-
    |          |                                                                            |
    |----------|----------------------------------------------------------------------------|
    | Syntax:  | **`thread_pool`***`name`*` threads=`*`number`*` [max_queue=`*`number`*`];` |
    | Default: | `thread_pool default threads=32 max_queue=65536;`                          |
    | Context: | `main`                                                                     |

    This directive appeared in version 1.7.11.

    Defines the *`name`* and parameters of a thread pool used for multi-threaded reading and sending of files [without blocking](http/ngx_http_core_module#aio) worker processes.

    The `threads` parameter defines the number of threads in the pool.

    In the event that all threads in the pool are busy, a new task will wait in the queue. The `max_queue` parameter limits the number of tasks allowed to be waiting in the queue. By default, up to 65536 tasks can wait in the queue. When the queue overflows, the task is completed with an error.
- name: timeout (ngx_mail_core_module)
  id: mail/ngx_mail_core_module#timeout
  summary: Sets the timeout that is used before proxying to the backend starts
  belongs_to: ngx_mail_core_module
  description: "|          |                          |\n|----------|--------------------------|\n| Syntax:  | **`timeout`***`time`*`;` |\n| Default: | `timeout 60s;`           |\n| Context: | `mail`, `server`         |\n\nSets the timeout that is used before proxying to the backend starts.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_core_module.html](https://nginx.org/en/docs/mail/ngx_mail_core_module.html)"
- name: timer_resolution (Core functionality)
  id: ngx_core_module#timer_resolution
  summary: Reduces timer resolution in worker processes, thus reducing the number of gettimeofday() system calls made
  belongs_to: Core functionality
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`timer_resolution`***`interval`*`;` |
    | Default: | —                                     |
    | Context: | `main`                                |

    Reduces timer resolution in worker processes, thus reducing the number of `gettimeofday()` system calls made. By default, `gettimeofday()` is called each time a kernel event is received. With reduced resolution, `gettimeofday()` is only called once per specified *`interval`*.

    Example:

    ``` nginx
    timer_resolution 100ms;
    ```

    Internal implementation of the interval depends on the method used:

    - the `EVFILT_TIMER` filter if `kqueue` is used;
    - `timer_create()` if `eventport` is used;
    - `setitimer()` otherwise.
- name: timers (Reference)
  id: njs/reference#njs_api_timers
  summary: Cancels a timeout object created by setTimeout()
  belongs_to: Reference
  description: |-
    #### timers

    |                                   |
    |-----------------------------------|
    | [`clearTimeout()`](#cleartimeout) |
    | [`setTimeout()`](#settimeout)     |

    `clearTimeout(`*`timeout`*`)`

    Cancels a `timeout` object created by [`setTimeout()`](#settimeout).

    `setTimeout(`*`function`*`, `*`milliseconds`*`[, `*`argument1`*`, `*`argumentN`*`])`

    Calls a `function` after a specified number of `milliseconds`. One or more optional `arguments` can be passed to the specified function. Returns a `timeout` object.

    ``` nginx
    function handler(v)
    {
        // ...
    }

    t = setTimeout(handler, 12);

    // ...

    clearTimeout(t);
    ```

    #### Global functions

    |                   |
    |-------------------|
    | [`atob()`](#atob) |
    | [`btoa()`](#btoa) |

    `atob(`*`encodedData`*`)`

    Decodes a string of data which has been encoded using `Base64` encoding. The `encodedData` parameter is a binary string that contains Base64-encoded data. Returns a string that contains decoded data from `encodedData`.

    The similar [`btoa()`](#btoa) method can be used to encode and transmit data which may otherwise cause communication problems, then transmit it and use the `atob()` method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values `0` through `31`.

    ``` nginx
    const encodedData = btoa("text to encode"); // encode a string
    const decodedData = atob(encodedData); // decode the string
    ```

    `btoa(`*`stringToEncode`*`)`

    Creates a Base64-encoded ASCII string from a binary string. The `stringToEncode` parameter is a binary string to encode. Returns an ASCII string containing the Base64 representation of `stringToEncode`.

    The method can be used to encode data which may otherwise cause communication problems, transmit it, then use the [`atob()`](#atob) method to decode the data again. For example, you can encode control characters such as ASCII values `0` through `31`.

    ``` nginx
    const encodedData = btoa("text to encode"); // encode a string
    const decodedData = atob(encodedData); // decode the string
    ```
- name: try_files
  id: http/ngx_http_core_module#try_files
  summary: Checks the existence of files in the specified order and uses the first found file for request processing; the processing is performed in the current context
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                                                    |
    |----------|------------------------------------------------------------------------------------|
    | Syntax:  | **`try_files`***`file`*` ... `*`uri`*`;`**`try_files`***`file`*` ... =`*`code`*`;` |
    | Default: | —                                                                                  |
    | Context: | `server`, `location`                                                               |

    Checks the existence of files in the specified order and uses the first found file for request processing; the processing is performed in the current context. The path to a file is constructed from the *`file`* parameter according to the [root](#root) and [alias](#alias) directives. It is possible to check directory’s existence by specifying a slash at the end of a name, e.g. “`$uri/`”. If none of the files were found, an internal redirect to the *`uri`* specified in the last parameter is made. For example:

    ``` nginx
    location /images/ {
        try_files $uri /images/default.gif;
    }

    location = /images/default.gif {
        expires 30s;
    }
    ```

    The last parameter can also point to a named location, as shown in examples below. Starting from version 0.7.51, the last parameter can also be a *`code`*:

    ``` nginx
    location / {
        try_files $uri $uri/index.html $uri.html =404;
    }
    ```

    Example in proxying Mongrel:

    ``` nginx
    location / {
        try_files /system/maintenance.html
                  $uri $uri/index.html $uri.html
                  @mongrel;
    }

    location @mongrel {
        proxy_pass http://mongrel;
    }
    ```

    Example for Drupal/FastCGI:

    ``` nginx
    location / {
        try_files $uri $uri/ @drupal;
    }

    location ~ \.php$ {
        try_files $uri @drupal;

        fastcgi_pass ...;

        fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME     $fastcgi_script_name;
        fastcgi_param QUERY_STRING    $args;

        ... other fastcgi_param's
    }

    location @drupal {
        fastcgi_pass ...;

        fastcgi_param SCRIPT_FILENAME /path/to/index.php;
        fastcgi_param SCRIPT_NAME     /index.php;
        fastcgi_param QUERY_STRING    q=$uri&$args;

        ... other fastcgi_param's
    }
    ```

    In the following example,

    ``` nginx
    location / {
        try_files $uri $uri/ @drupal;
    }
    ```

    the `try_files` directive is equivalent to

    ``` nginx
    location / {
        error_page 404 = @drupal;
        log_not_found off;
    }
    ```

    And here,

    ``` nginx
    location ~ \.php$ {
        try_files $uri @drupal;

        fastcgi_pass ...;

        fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;

        ...
    }
    ```

    `try_files` checks the existence of the PHP file before passing the request to the FastCGI server.

    Example for Wordpress and Joomla:

    ``` nginx
    location / {
        try_files $uri $uri/ @wordpress;
    }

    location ~ \.php$ {
        try_files $uri @wordpress;

        fastcgi_pass ...;

        fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;
        ... other fastcgi_param's
    }

    location @wordpress {
        fastcgi_pass ...;

        fastcgi_param SCRIPT_FILENAME /path/to/index.php;
        ... other fastcgi_param's
    }
    ```
- name: types
  id: http/ngx_http_core_module#types
  summary: Maps file name extensions to MIME types of responses
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                                            |
    |----------|------------------------------------------------------------|
    | Syntax:  | **`types`**` { ... }`                                      |
    | Default: | `types { text/html html; image/gif gif; image/jpeg jpg; }` |
    | Context: | `http`, `server`, `location`                               |

    Maps file name extensions to MIME types of responses. Extensions are case-insensitive. Several extensions can be mapped to one type, for example:

    ``` nginx
    types {
        application/octet-stream bin exe dll;
        application/octet-stream deb;
        application/octet-stream dmg;
    }
    ```

    A sufficiently full mapping table is distributed with nginx in the `conf/mime.types` file.

    To make a particular location emit the “`application/octet-stream`” MIME type for all requests, the following configuration can be used:

    ``` nginx
    location /download/ {
        types        { }
        default_type application/octet-stream;
    }
    ```
- name: types_hash_bucket_size
  id: http/ngx_http_core_module#types_hash_bucket_size
  summary: Sets the bucket size for the types hash tables
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`types_hash_bucket_size`***`size`*`;` |
    | Default: | `types_hash_bucket_size 64;`            |
    | Context: | `http`, `server`, `location`            |

    Sets the bucket size for the types hash tables. The details of setting up hash tables are provided in a separate [document](../hash).

    Prior to version 1.5.13, the default value depended on the size of the processor’s cache line.
- name: types_hash_max_size
  id: http/ngx_http_core_module#types_hash_max_size
  summary: Sets the maximum size of the types hash tables
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`types_hash_max_size`***`size`*`;` |
    | Default: | `types_hash_max_size 1024;`          |
    | Context: | `http`, `server`, `location`         |

    Sets the maximum *`size`* of the types hash tables. The details of setting up hash tables are provided in a separate [document](../hash).
- name: underscores_in_headers
  id: http/ngx_http_core_module#underscores_in_headers
  summary: Enables or disables the use of underscores in client request header fields
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`underscores_in_headers`**` on | off;` |
    | Default: | `underscores_in_headers off;`            |
    | Context: | `http`, `server`                         |

    Enables or disables the use of underscores in client request header fields. When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the [ignore_invalid_headers](#ignore_invalid_headers) directive.

    If the directive is specified on the [server](#server) level, the value from the default server can be used. Details are provided in the “[Virtual server selection](server_names#virtual_server_selection)” section.
- name: Understanding preloaded objects
  id: njs/preload_objects
  summary: For each incoming request njs creates a separate virtual machine
  description: "# Understanding preloaded objects\n\nFor each incoming request njs creates a separate virtual machine. This brings a lot of benefits such as predictable memory consumption or requests isolation. However, as all requests are isolated, if a request handler needs to access some data, it has to read it by itself. This is not efficient especially when the amount of data is large.\n\nTo address this limitation, a preloaded shared object was introduced. Such objects are created immutable and do not have prototype chains: their values cannot be changed, properties cannot be added or removed.\n\n#### Working with preload objects\n\nHere are some examples of how to work with a preload object in njs:\n\n- access properties by name:\n\n  ``` nginx\n  preloaded_object.prop_name\n  preloaded_object[prop_name]\n  ```\n\n- enumerate properties:\n\n  ``` nginx\n  for (i in preloaded_object_name) {\n      ...\n  }\n  ```\n\n- apply non-modifying built-in methods using `call()`:\n\n  ``` nginx\n  Array.prototype.filter.call(preloaded_object_name, ...)\n  ```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/preload_objects.html](https://nginx.org/en/docs/njs/preload_objects.html)"
- name: uninitialized_variable_warn
  id: http/ngx_http_rewrite_module#uninitialized_variable_warn
  summary: Controls whether warnings about uninitialized variables are logged
  belongs_to: ngx_http_rewrite_module
  description: "|          |                                               |\n|----------|-----------------------------------------------|\n| Syntax:  | **`uninitialized_variable_warn`**` on | off;` |\n| Default: | `uninitialized_variable_warn on;`             |\n| Context: | `http`, `server`, `location`, `if`            |\n\nControls whether warnings about uninitialized variables are logged.\n\n#### Internal Implementation\n\nThe `ngx_http_rewrite_module` module directives are compiled at the configuration stage into internal instructions that are interpreted during request processing. An interpreter is a simple virtual stack machine.\n\nFor example, the directives\n\n``` nginx\nlocation /download/ {\n    if ($forbidden) {\n        return 403;\n    }\n\n    if ($slow) {\n        limit_rate 10k;\n    }\n\n    rewrite ^/(download/.*)/media/(.*)\\..*$ /$1/mp3/$2.mp3 break;\n}\n```\n\nwill be translated into these instructions:\n\n``` nginx\nvariable $forbidden\ncheck against zero\n    return 403\n    end of code\nvariable $slow\ncheck against zero\nmatch of regular expression\ncopy \"/\"\ncopy $1\ncopy \"/mp3/\"\ncopy $2\ncopy \".mp3\"\nend of regular expression\nend of code\n```\n\nNote that there are no instructions for the [limit_rate](ngx_http_core_module#limit_rate) directive above as it is unrelated to the `ngx_http_rewrite_module` module. A separate configuration is created for the [if](#if) block. If the condition holds true, a request is assigned this configuration where `limit_rate` equals to 10k.\n\nThe directive\n\n``` nginx\nrewrite ^/(download/.*)/media/(.*)\\..*$ /$1/mp3/$2.mp3 break;\n```\n\ncan be made smaller by one instruction if the first slash in the regular expression is put inside the parentheses:\n\n``` nginx\nrewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n```\n\nThe corresponding instructions will then look like this:\n\n``` nginx\nmatch of regular expression\ncopy $1\ncopy \"/mp3/\"\ncopy $2\ncopy \".mp3\"\nend of regular expression\nend of code\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_rewrite_module.html](https://nginx.org/en/docs/http/ngx_http_rewrite_module.html)"
- name: upstream
  id: http/ngx_http_upstream_module#upstream
  summary: Defines a group of servers
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`upstream`***`name`*` { ... }` |
    | Default: | —                                |
    | Context: | `http`                           |

    Defines a group of servers. Servers can listen on different ports. In addition, servers listening on TCP and UNIX-domain sockets can be mixed.

    Example:

    ``` nginx
    upstream backend {
        server backend1.example.com weight=5;
        server 127.0.0.1:8080       max_fails=3 fail_timeout=30s;
        server unix:/tmp/backend3;

        server backup1.example.com  backup;
    }
    ```

    By default, requests are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 requests will be distributed as follows: 5 requests go to `backend1.example.com` and one request to each of the second and third servers. If an error occurs during communication with a server, the request will be passed to the next server, and so on until all of the functioning servers will be tried. If a successful response could not be obtained from any of the servers, the client will receive the result of the communication with the last server.
- name: upstream (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#upstream
  summary: Defines a group of servers
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                  |
    |----------|----------------------------------|
    | Syntax:  | **`upstream`***`name`*` { ... }` |
    | Default: | —                                |
    | Context: | `stream`                         |

    Defines a group of servers. Servers can listen on different ports. In addition, servers listening on TCP and UNIX-domain sockets can be mixed.

    Example:

    ``` nginx
    upstream backend {
        server backend1.example.com:12345 weight=5;
        server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;
        server unix:/tmp/backend2;
        server backend3.example.com:12345 resolve;

        server backup1.example.com:12345  backup;
    }
    ```

    By default, connections are distributed between the servers using a weighted round-robin balancing method. In the above example, each 7 connections will be distributed as follows: 5 connections go to `backend1.example.com:12345` and one connection to each of the second and third servers. If an error occurs during communication with a server, the connection will be passed to the next server, and so on until all of the functioning servers will be tried. If communication with all servers fails, the connection will be closed.
- name: upstream_conf
  id: http/ngx_http_upstream_conf_module#upstream_conf
  summary: Turns on the HTTP interface of upstream configuration in the surrounding location
  belongs_to: ngx_http_upstream_conf_module
  description: "|          |                        |\n|----------|------------------------|\n| Syntax:  | **`upstream_conf`**`;` |\n| Default: | —                      |\n| Context: | `location`             |\n\nTurns on the HTTP interface of upstream configuration in the surrounding location. Access to this location should be [limited](ngx_http_core_module#satisfy).\n\nConfiguration commands can be used to:\n\n- view the group configuration;\n- view, modify, or remove a server;\n- add a new server.\n\nSince addresses in a group are not required to be unique, specific servers in a group are referenced by their IDs. IDs are assigned automatically and shown when adding a new server or viewing the group configuration.\n\nA configuration command consists of parameters passed as request arguments, for example:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend\n```\n\nThe following parameters are supported:\n\n`stream=`\n\nSelects a [stream](../stream/ngx_stream_upstream_module) upstream server group. Without this parameter, selects an [http](ngx_http_upstream_module) upstream server group.\n\n`upstream=`*`name`*\n\nSelects a group to work with. This parameter is mandatory.\n\n`id=`*`number`*\n\nSelects a server for viewing, modifying, or removing.\n\n`remove=`\n\nRemoves a server from the group.\n\n`add=`\n\nAdds a new server to the group.\n\n`backup=`\n\nRequired to add a backup server.\n\nBefore version 1.7.2, `backup=` was also required to view, modify, or remove existing backup servers.\n\n`server=`*`address`*\n\nSame as the “`address`” parameter of the [http](ngx_http_upstream_module#server) or [stream](../stream/ngx_stream_upstream_module#server) upstream server.\n\nWhen adding a server, it is possible to specify it as a domain name. In this case, changes of the IP addresses that correspond to a domain name will be monitored and automatically applied to the upstream configuration without the need of restarting nginx (1.7.2). This requires the “`resolver`” directive in the [http](ngx_http_core_module#resolver) or [stream](../stream/ngx_stream_core_module#resolver) block. See also the “`resolve`” parameter of the [http](ngx_http_upstream_module#resolve) or [stream](../stream/ngx_stream_upstream_module#resolve) upstream server.\n\n`service=`*`name`*\n\nSame as the “`service`” parameter of the [http](ngx_http_upstream_module#service) or [stream](../stream/ngx_stream_upstream_module#service) upstream server (1.9.13).\n\n`weight=`*`number`*\n\nSame as the “`weight`” parameter of the [http](ngx_http_upstream_module#weight) or [stream](../stream/ngx_stream_upstream_module#weight) upstream server.\n\n`max_conns=`*`number`*\n\nSame as the “`max_conns`” parameter of the [http](ngx_http_upstream_module#max_conns) or [stream](../stream/ngx_stream_upstream_module#max_conns) upstream server.\n\n`max_fails=`*`number`*\n\nSame as the “`max_fails`” parameter of the [http](ngx_http_upstream_module#max_fails) or [stream](../stream/ngx_stream_upstream_module#max_fails) upstream server.\n\n`fail_timeout=`*`time`*\n\nSame as the “`fail_timeout`” parameter of the [http](ngx_http_upstream_module#fail_timeout) or [stream](../stream/ngx_stream_upstream_module#fail_timeout) upstream server.\n\n`slow_start=`*`time`*\n\nSame as the “`slow_start`” parameter of the [http](ngx_http_upstream_module#slow_start) or [stream](../stream/ngx_stream_upstream_module#slow_start) upstream server.\n\n`down=`\n\nSame as the “`down`” parameter of the [http](ngx_http_upstream_module#down) or [stream](../stream/ngx_stream_upstream_module#down) upstream server.\n\n`drain=`\n\nPuts the [http](ngx_http_upstream_module) upstream server into the “draining” mode (1.7.5). In this mode, only requests [bound](ngx_http_upstream_module#sticky) to the server will be proxied to it.\n\n`up=`\n\nThe opposite of the “`down`” parameter of the [http](ngx_http_upstream_module#down) or [stream](../stream/ngx_stream_upstream_module#down) upstream server.\n\n`route=`*`string`*\n\nSame as the “`route`” parameter of the [http](ngx_http_upstream_module#route) upstream server.\n\nThe first three parameters select an object. This can be either the whole http or stream upstream server group, or a specific server. Without other parameters, the configuration of the selected group or server is shown.\n\nFor example, to view the configuration of the whole group, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend\n```\n\nTo view the configuration of a specific server, also specify its ID:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42\n```\n\nTo add a new server, specify its address in the “`server=`” parameter. Without other parameters specified, a server will be added with other parameters set to their default values (see the [http](ngx_http_upstream_module#server) or [stream](../stream/ngx_stream_upstream_module#server) “`server`” directive).\n\nFor example, to add a new primary server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?add=&upstream=backend&server=127.0.0.1:8080\n```\n\nTo add a new backup server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?add=&upstream=backend&backup=&server=127.0.0.1:8080\n```\n\nTo add a new primary server, set its parameters to non-default values and mark it as “`down`”, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?add=&upstream=backend&server=127.0.0.1:8080&weight=2&down=\n```\n\nTo remove a server, specify its ID:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?remove=&upstream=backend&id=42\n```\n\nTo mark an existing server as “`down`”, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42&down=\n```\n\nTo modify the address of an existing server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42&server=192.0.2.3:8123\n```\n\nTo modify other parameters of an existing server, send:\n\n``` nginx\nhttp://127.0.0.1/upstream_conf?upstream=backend&id=42&max_fails=3&weight=4\n```\n\nThe above examples are for an [http](ngx_http_upstream_module) upstream server group. Similar examples for a [stream](../stream/ngx_stream_upstream_module) upstream server group require the “`stream=`” parameter.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html](https://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html)"
- name: usage_report (ngx_mgmt_module)
  id: ngx_mgmt_module#usage_report
  summary: Sets the address and port for IP, or the path for a UNIX-domain socket on which the Instance Manager is installed, by default nginx-mgmt.local
  belongs_to: ngx_mgmt_module
  description: |-
    |          |                                                                      |
    |----------|----------------------------------------------------------------------|
    | Syntax:  | **`usage_report`**` [endpoint=`*`address`*`] [interval=`*`time`*`];` |
    | Default: | —                                                                    |
    | Context: | `mgmt`                                                               |

    Sets the *`address`* and *`port`* for IP, or the *`path`* for a UNIX-domain socket on which the Instance Manager is installed, by default `nginx-mgmt.local`. The `interval` sets an interval between reports to the Instance Manager, by default 30m.
- name: use (Core functionality)
  id: ngx_core_module#use
  summary: Specifies the connection processing method to use
  belongs_to: Core functionality
  description: |-
    |          |                        |
    |----------|------------------------|
    | Syntax:  | **`use`***`method`*`;` |
    | Default: | —                      |
    | Context: | `events`               |

    Specifies the [connection processing](events) *`method`* to use. There is normally no need to specify it explicitly, because nginx will by default use the most efficient method.
- name: user (Core functionality)
  id: ngx_core_module#user
  summary: Defines user and group credentials used by worker processes
  belongs_to: Core functionality
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`user`***`user`*` [`*`group`*`];` |
    | Default: | `user nobody nobody;`               |
    | Context: | `main`                              |

    Defines *`user`* and *`group`* credentials used by worker processes. If *`group`* is omitted, a group whose name equals that of *`user`* is used.
- name: userid
  id: http/ngx_http_userid_module#userid
  summary: disables the setting of cookies and logging of the received cookies
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`userid`**` on | v1 | log | off;` |
    | Default: | `userid off;`                       |
    | Context: | `http`, `server`, `location`        |

    Enables or disables setting cookies and logging the received cookies:

    `on`

    enables the setting of version 2 cookies and logging of the received cookies;

    `v1`

    enables the setting of version 1 cookies and logging of the received cookies;

    `log`

    disables the setting of cookies, but enables logging of the received cookies;

    `off`

    disables the setting of cookies and logging of the received cookies.
- name: userid_domain
  id: http/ngx_http_userid_module#userid_domain
  summary: Defines a domain for which the cookie is set
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`userid_domain`***`name`*` | none;` |
    | Default: | `userid_domain none;`                 |
    | Context: | `http`, `server`, `location`          |

    Defines a domain for which the cookie is set. The `none` parameter disables setting of a domain for the cookie.
- name: userid_expires
  id: http/ngx_http_userid_module#userid_expires
  summary: Sets a time during which a browser should keep the cookie
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`userid_expires`***`time`*` | max | off;` |
    | Default: | `userid_expires off;`                       |
    | Context: | `http`, `server`, `location`                |

    Sets a time during which a browser should keep the cookie. The parameter `max` will cause the cookie to expire on “`31 Dec 2037 23:55:55 GMT`”. The parameter `off` will cause the cookie to expire at the end of a browser session.
- name: userid_flags
  id: http/ngx_http_userid_module#userid_flags
  summary: This directive appeared in version 1.19.3
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`userid_flags`**` off | `*`flag`*` ...;` |
    | Default: | `userid_flags off;`                        |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.19.3.

    If the parameter is not `off`, defines one or more additional flags for the cookie: `secure`, `httponly`, `samesite=strict`, `samesite=lax`, `samesite=none`.
- name: userid_mark
  id: http/ngx_http_userid_module#userid_mark
  summary: If the parameter is not off, enables the cookie marking mechanism and sets the character used as a mark
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`userid_mark`***`letter`*` | `*`digit`*` | = | off;` |
    | Default: | `userid_mark off;`                                     |
    | Context: | `http`, `server`, `location`                           |

    If the parameter is not `off`, enables the cookie marking mechanism and sets the character used as a mark. This mechanism is used to add or change [userid_p3p](#userid_p3p) and/or a cookie expiration time while preserving the client identifier. A mark can be any letter of the English alphabet (case-sensitive), digit, or the “`=`” character.

    If the mark is set, it is compared with the first padding symbol in the base64 representation of the client identifier passed in a cookie. If they do not match, the cookie is resent with the specified mark, expiration time, and “P3P” header.
- name: userid_name
  id: http/ngx_http_userid_module#userid_name
  summary: Sets the cookie name
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`userid_name`***`name`*`;` |
    | Default: | `userid_name uid;`           |
    | Context: | `http`, `server`, `location` |

    Sets the cookie name.
- name: userid_p3p
  id: http/ngx_http_userid_module#userid_p3p
  summary: Sets a value for the “P3P” header field that will be sent along with the cookie
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`userid_p3p`***`string`*` | none;` |
    | Default: | `userid_p3p none;`                   |
    | Context: | `http`, `server`, `location`         |

    Sets a value for the “P3P” header field that will be sent along with the cookie. If the directive is set to the special value `none`, the “P3P” header will not be sent in a response.
- name: userid_path
  id: http/ngx_http_userid_module#userid_path
  summary: Defines a path for which the cookie is set
  belongs_to: ngx_http_userid_module
  description: |-
    |          |                              |
    |----------|------------------------------|
    | Syntax:  | **`userid_path`***`path`*`;` |
    | Default: | `userid_path /;`             |
    | Context: | `http`, `server`, `location` |

    Defines a path for which the cookie is set.
- name: userid_service
  id: http/ngx_http_userid_module#userid_service
  summary: If identifiers are issued by multiple servers (services), each service should be assigned its own number to ensure that client identifiers are unique
  belongs_to: ngx_http_userid_module
  description: "|          |                                            |\n|----------|--------------------------------------------|\n| Syntax:  | **`userid_service`***`number`*`;`          |\n| Default: | `userid_service IP address of the server;` |\n| Context: | `http`, `server`, `location`               |\n\nIf identifiers are issued by multiple servers (services), each service should be assigned its own *`number`* to ensure that client identifiers are unique. For version 1 cookies, the default value is zero. For version 2 cookies, the default value is the number composed from the last four octets of the server’s IP address.\n\n#### Embedded Variables\n\nThe `ngx_http_userid_module` module supports the following embedded variables:\n\n`$uid_got`\n\nThe cookie name and received client identifier.\n\n`$uid_reset`\n\nIf the variable is set to a non-empty string that is not “`0`”, the client identifiers are reset. The special value “`log`” additionally leads to the output of messages about the reset identifiers to the [error_log](../ngx_core_module#error_log).\n\n`$uid_set`\n\nThe cookie name and sent client identifier.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_userid_module.html](https://nginx.org/en/docs/http/ngx_http_userid_module.html)"
- name: Using nginx as HTTP load balancer
  id: http/load_balancing
  summary: Load balancing across multiple application instances is a commonly used technique for optimizing resource utilization, maximizing throughput, reducing latency, and ensuring fault-tolerant configurations
  description: "# Using nginx as HTTP load balancer\n\n- [Load balancing methods](#nginx_load_balancing_methods)\n- [Default load balancing configuration](#nginx_load_balancing_configuration)\n- [Least connected load balancing](#nginx_load_balancing_with_least_connected)\n- [Session persistence](#nginx_load_balancing_with_ip_hash)\n- [Weighted load balancing](#nginx_weighted_load_balancing)\n- [Health checks](#nginx_load_balancing_health_checks)\n- [Further reading](#nginx_load_balancing_additional_information)\n\n#### Introduction\n\nLoad balancing across multiple application instances is a commonly used technique for optimizing resource utilization, maximizing throughput, reducing latency, and ensuring fault-tolerant configurations.\n\nIt is possible to use nginx as a very efficient HTTP load balancer to distribute traffic to several application servers and to improve performance, scalability and reliability of web applications with nginx.\n\n#### Load balancing methods\n\nThe following load balancing mechanisms (or methods) are supported in nginx:\n\n- round-robin — requests to the application servers are distributed in a round-robin fashion,\n- least-connected — next request is assigned to the server with the least number of active connections,\n- ip-hash — a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address).\n\n#### Default load balancing configuration\n\nThe simplest configuration for load balancing with nginx may look like the following:\n\n``` nginx\nhttp {\n    upstream myapp1 {\n        server srv1.example.com;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://myapp1;\n        }\n    }\n}\n```\n\nIn the example above, there are 3 instances of the same application running on srv1-srv3. When the load balancing method is not specifically configured, it defaults to round-robin. All requests are [proxied](ngx_http_proxy_module#proxy_pass) to the server group myapp1, and nginx applies HTTP load balancing to distribute the requests.\n\nReverse proxy implementation in nginx includes load balancing for HTTP, HTTPS, FastCGI, uwsgi, SCGI, memcached, and gRPC.\n\nTo configure load balancing for HTTPS instead of HTTP, just use “https” as the protocol.\n\nWhen setting up load balancing for FastCGI, uwsgi, SCGI, memcached, or gRPC, use [fastcgi_pass](ngx_http_fastcgi_module#fastcgi_pass), [uwsgi_pass](ngx_http_uwsgi_module#uwsgi_pass), [scgi_pass](ngx_http_scgi_module#scgi_pass), [memcached_pass](ngx_http_memcached_module#memcached_pass), and [grpc_pass](ngx_http_grpc_module#grpc_pass) directives respectively.\n\n#### Least connected load balancing\n\nAnother load balancing discipline is least-connected. Least-connected allows controlling the load on application instances more fairly in a situation when some of the requests take longer to complete.\n\nWith the least-connected load balancing, nginx will try not to overload a busy application server with excessive requests, distributing the new requests to a less busy server instead.\n\nLeast-connected load balancing in nginx is activated when the [least_conn](ngx_http_upstream_module#least_conn) directive is used as part of the server group configuration:\n\n``` nginx\n    upstream myapp1 {\n        least_conn;\n        server srv1.example.com;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n```\n\n#### Session persistence\n\nPlease note that with round-robin or least-connected load balancing, each subsequent client’s request can be potentially distributed to a different server. There is no guarantee that the same client will be always directed to the same server.\n\nIf there is the need to tie a client to a particular application server — in other words, make the client’s session “sticky” or “persistent” in terms of always trying to select a particular server — the ip-hash load balancing mechanism can be used.\n\nWith ip-hash, the client’s IP address is used as a hashing key to determine what server in a server group should be selected for the client’s requests. This method ensures that the requests from the same client will always be directed to the same server except when this server is unavailable.\n\nTo configure ip-hash load balancing, just add the [ip_hash](ngx_http_upstream_module#ip_hash) directive to the server (upstream) group configuration:\n\n``` nginx\nupstream myapp1 {\n    ip_hash;\n    server srv1.example.com;\n    server srv2.example.com;\n    server srv3.example.com;\n}\n```\n\n#### Weighted load balancing\n\nIt is also possible to influence nginx load balancing algorithms even further by using server weights.\n\nIn the examples above, the server weights are not configured which means that all specified servers are treated as equally qualified for a particular load balancing method.\n\nWith the round-robin in particular it also means a more or less equal distribution of requests across the servers — provided there are enough requests, and when the requests are processed in a uniform manner and completed fast enough.\n\nWhen the [weight](ngx_http_upstream_module#server) parameter is specified for a server, the weight is accounted as part of the load balancing decision.\n\n``` nginx\n    upstream myapp1 {\n        server srv1.example.com weight=3;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n```\n\nWith this configuration, every 5 new requests will be distributed across the application instances as the following: 3 requests will be directed to srv1, one request will go to srv2, and another one — to srv3.\n\nIt is similarly possible to use weights with the least-connected and ip-hash load balancing in the recent versions of nginx.\n\n#### Health checks\n\nReverse proxy implementation in nginx includes in-band (or passive) server health checks. If the response from a particular server fails with an error, nginx will mark this server as failed, and will try to avoid selecting this server for subsequent inbound requests for a while.\n\nThe [max_fails](ngx_http_upstream_module#server) directive sets the number of consecutive unsuccessful attempts to communicate with the server that should happen during [fail_timeout](ngx_http_upstream_module#server). By default, [max_fails](ngx_http_upstream_module#server) is set to 1. When it is set to 0, health checks are disabled for this server. The [fail_timeout](ngx_http_upstream_module#server) parameter also defines how long the server will be marked as failed. After [fail_timeout](ngx_http_upstream_module#server) interval following the server failure, nginx will start to gracefully probe the server with the live client’s requests. If the probes have been successful, the server is marked as a live one.\n\n#### Further reading\n\nIn addition, there are more directives and parameters that control server load balancing in nginx, e.g. [proxy_next_upstream](ngx_http_proxy_module#proxy_next_upstream), [backup](ngx_http_upstream_module#server), [down](ngx_http_upstream_module#server), and [keepalive](ngx_http_upstream_module#keepalive). For more information please check our [reference documentation](../index).\n\nLast but not least, application load balancing, application health checks, activity monitoring and on-the-fly reconfiguration of server groups are available as part of our paid NGINX Plus subscriptions.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/load_balancing.html](https://nginx.org/en/docs/http/load_balancing.html)"
- name: Using node modules with njs
  id: njs/node_modules
  summary: Often, a developer wants to use 3rd-party code, usually available as a library of some kind
  description: "# Using node modules with njs\n\n- [Environment](#environment)\n- [Protobufjs](#protobuf)\n- [DNS-packet](#dnspacket)\n\nOften, a developer wants to use 3rd-party code, usually available as a library of some kind. In the JavaScript world, the concept of a module is relatively new, so there was no standard until recently. Many platforms (browsers) still don't support modules, which makes code reuse harder. This article describes ways to reuse [Node.js](https://nodejs.org/) code in njs.\n\nExamples in this article use features that appeared in [njs](index) [0.3.8](changes#njs0.3.8)\n\nThere is a number of issues that may arise when 3rd-party code is added to njs:\n\n- Multiple files that reference each other and their dependencies\n- Platform-specific APIs\n- Modern standard language constructions\n\nThe good news is that such problems are not something new or specific to njs. JavaScript developers face them daily when trying to support multiple disparate platforms with very different properties. There are instruments designed to resolve the above-mentioned issues.\n\n- Multiple files that reference each other, and their dependencies\n\n  This can be solved by merging all the interdependent code into a single file. Tools like [browserify](http://browserify.org/) or [webpack](https://webpack.js.org/) accept an entire project and produce a single file containing your code and all the dependencies.\n\n- Platform-specific APIs\n\n  You can use multiple libraries that implement such APIs in a platform-agnostic manner (at the expense of performance, though). Particular features can also be implemented using the [polyfill](https://polyfill.io/v3/) approach.\n\n- Modern standard language constructions\n\n  Such code can be transpiled: this means performing a number of transformations that rewrite newer language features in accordance with an older standard. For example, [babel](https://babeljs.io/) project can be used to this purpose.\n\nIn this guide, we will use two relatively large npm-hosted libraries:\n\n- [protobufjs](https://www.npmjs.com/package/protobufjs) — a library for creating and parsing protobuf messages used by the [gRPC](https://grpc.io/) protocol\n- [dns-packet](https://www.npmjs.com/package/dns-packet) — a library for processing DNS protocol packets\n\n#### Environment\n\nThis document mostly employs a generic approach and avoids specific best practice advices concerning Node.js and JavaScript. Make sure to consult the corresponding package's manual before following the steps suggested here.\n\nFirst (assuming Node.js is installed and operational), let's create an empty project and install some dependencies; the commands below assume we are in the working directory:\n\n``` nginx\n$ mkdir my_project && cd my_project\n$ npx license choose_your_license_here > LICENSE\n$ npx gitignore node\n\n$ cat > package.json <<EOF\n{\n  \"name\":        \"foobar\",\n  \"version\":     \"0.0.1\",\n  \"description\": \"\",\n  \"main\":        \"index.js\",\n  \"keywords\":    [],\n  \"author\":      \"somename <some.email@example.com> (https://example.com)\",\n  \"license\":     \"some_license_here\",\n  \"private\":     true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\nEOF\n$ npm init -y\n$ npm install browserify\n```\n\n#### Protobufjs\n\nThe library provides a parser for the `.proto` interface definitions and a code generator for message parsing and generation.\n\nIn this example, we will use the [helloworld.proto](https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto) file from the gRPC examples. Our goal is to create two messages: `HelloRequest` and `HelloResponse`. We will use the [static](https://github.com/protobufjs/protobuf.js/blob/master/README.md#reflection-vs-static-code) mode of protobufjs instead of dynamically generating classes, because njs doesn't support adding new functions dynamically due to security considerations.\n\nNext, the library is installed and the JavaScript code implementing message marshalling is generated from the protocol definition:\n\n``` nginx\n$ npm install protobufjs\n$ npx pbjs -t static-module helloworld.proto > static.js\n```\n\nThus, the `static.js` file becomes our new dependency, storing all the code we need to implement message processing. The `set_buffer()` function contains code that uses the library to create a buffer with the serialized `HelloRequest` message. The code resides in the `code.js` file:\n\n``` nginx\nvar pb = require('./static.js');\n\n// Example usage of protobuf library: prepare a buffer to send\nfunction set_buffer(pb)\n{\n    // set fields of gRPC payload\n    var payload = { name: \"TestString\" };\n\n    // create an object\n    var message = pb.helloworld.HelloRequest.create(payload);\n\n    // serialize object to buffer\n    var buffer = pb.helloworld.HelloRequest.encode(message).finish();\n\n    var n = buffer.length;\n\n    var frame = new Uint8Array(5 + buffer.length);\n\n    frame[0] = 0;                        // 'compressed' flag\n    frame[1] = (n & 0xFF000000) >>> 24;  // length: uint32 in network byte order\n    frame[2] = (n & 0x00FF0000) >>> 16;\n    frame[3] = (n & 0x0000FF00) >>>  8;\n    frame[4] = (n & 0x000000FF) >>>  0;\n\n    frame.set(buffer, 5);\n\n    return frame;\n}\n\nvar frame = set_buffer(pb);\n```\n\nTo ensure it works, we execute the code using node:\n\n``` nginx\n$ node ./code.js\nUint8Array [\n    0,   0,   0,   0,  12, 10,\n   10,  84, 101, 115, 116, 83,\n  116, 114, 105, 110, 103\n]\n```\n\nYou can see that this got us a properly encoded `gRPC` frame. Now let's run it with njs:\n\n``` nginx\n$ njs ./code.js\nThrown:\nError: Cannot find module \"./static.js\"\n    at require (native)\n    at main (native)\n```\n\nModules are not supported, so we've received an exception. To overcome this issue, let's use `browserify` or other similar tool.\n\nAn attempt to process our existing `code.js` file will result in a bunch of JS code that is supposed to run in a browser, i.e. immediately upon loading. This isn't something we actually want. Instead, we want to have an exported function that can be referenced from the nginx configuration. This requires some wrapper code.\n\nIn this guide, we use njs [cli](cli) in all examples for the sake of simplicity. In real life, you will be using nginx njs module to run your code.\n\nThe `load.js` file contains the library-loading code that stores its handle in the global namespace:\n\n``` nginx\nglobal.hello = require('./static.js');\n```\n\nThis code will be replaced with merged content. Our code will be using the \"`global.hello`\" handle to access the library.\n\nNext, we process it with `browserify` to get all dependencies into a single file:\n\n``` nginx\n$ npx browserify load.js -o bundle.js -d\n```\n\nThe result is a huge file that contains all our dependencies:\n\n``` nginx\n(function(){function......\n...\n...\n},{\"protobufjs/minimal\":9}]},{},[1])\n//# sourceMappingURL..............\n```\n\nTo get final \"`njs_bundle.js`\" file we concatenate \"`bundle.js`\" and the following code:\n\n``` nginx\n// Example usage of protobuf library: prepare a buffer to send\nfunction set_buffer(pb)\n{\n    // set fields of gRPC payload\n    var payload = { name: \"TestString\" };\n\n    // create an object\n    var message = pb.helloworld.HelloRequest.create(payload);\n\n    // serialize object to buffer\n    var buffer = pb.helloworld.HelloRequest.encode(message).finish();\n\n    var n = buffer.length;\n\n    var frame = new Uint8Array(5 + buffer.length);\n\n    frame[0] = 0;                        // 'compressed' flag\n    frame[1] = (n & 0xFF000000) >>> 24;  // length: uint32 in network byte order\n    frame[2] = (n & 0x00FF0000) >>> 16;\n    frame[3] = (n & 0x0000FF00) >>>  8;\n    frame[4] = (n & 0x000000FF) >>>  0;\n\n    frame.set(buffer, 5);\n\n    return frame;\n}\n\n// functions to be called from outside\nfunction setbuf()\n{\n    return set_buffer(global.hello);\n}\n\n// call the code\nvar frame = setbuf();\nconsole.log(frame);\n```\n\nLet's run the file using node to make sure things still work:\n\n``` nginx\n$ node ./njs_bundle.js\nUint8Array [\n    0,   0,   0,   0,  12, 10,\n   10,  84, 101, 115, 116, 83,\n  116, 114, 105, 110, 103\n]\n```\n\nNow let's proceed further with njs:\n\n``` nginx\n$ njs ./njs_bundle.js\nUint8Array [0,0,0,0,12,10,10,84,101,115,116,83,116,114,105,110,103]\n```\n\nThe last thing will be to use njs-specific API to convert array into byte string, so it could be usable by nginx module. We can add the following snippet before the line `return frame; }`:\n\n``` nginx\nif (global.njs) {\n    return String.bytesFrom(frame)\n}\n```\n\nFinally, we got it working:\n\n``` nginx\n$ njs ./njs_bundle.js |hexdump -C\n00000000  00 00 00 00 0c 0a 0a 54  65 73 74 53 74 72 69 6e  |.......TestStrin|\n00000010  67 0a                                             |g.|\n00000012\n```\n\nThis is the intended result. Response parsing can be implemented similarly:\n\n``` nginx\nfunction parse_msg(pb, msg)\n{\n    // convert byte string into integer array\n    var bytes = msg.split('').map(v=>v.charCodeAt(0));\n\n    if (bytes.length < 5) {\n        throw 'message too short';\n    }\n\n    // first 5 bytes is gRPC frame (compression + length)\n    var head = bytes.splice(0, 5);\n\n    // ensure we have proper message length\n    var len = (head[1] << 24)\n              + (head[2] << 16)\n              + (head[3] << 8)\n              + head[4];\n\n    if (len != bytes.length) {\n        throw 'header length mismatch';\n    }\n\n    // invoke protobufjs to decode message\n    var response = pb.helloworld.HelloReply.decode(bytes);\n\n    console.log('Reply is:' + response.message);\n}\n```\n\n#### DNS-packet\n\nThis example uses a library for generation and parsing of DNS packets. This a case worth considering because the library and its dependencies use modern language constructions not yet supported by njs. In turn, this requires from us an extra step: transpiling the source code.\n\nAdditional node packages are needed:\n\n``` nginx\n$ npm install @babel/core @babel/cli @babel/preset-env babel-loader\n$ npm install webpack webpack-cli\n$ npm install buffer\n$ npm install dns-packet\n```\n\nThe configuration file, webpack.config.js:\n\n``` nginx\nconst path = require('path');\n\nmodule.exports = {\n    entry: './load.js',\n    mode: 'production',\n    output: {\n        filename: 'wp_out.js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    optimization: {\n        minimize: false\n    },\n    node: {\n        global: true,\n    },\n    module : {\n        rules: [{\n            test: /\\.m?js$$/,\n            exclude: /(bower_components)/,\n            use: {\n                loader: 'babel-loader',\n                options: {\n                    presets: ['@babel/preset-env']\n                }\n            }\n        }]\n    }\n};\n```\n\nNote we are using \"`production`\" mode. In this mode webpack does not use \"`eval`\" construction not supported by njs. The referenced `load.js` file is our entry point:\n\n``` nginx\nglobal.dns = require('dns-packet')\nglobal.Buffer = require('buffer/').Buffer\n```\n\nWe start the same way, by producing a single file for the libraries:\n\n``` nginx\n$ npx browserify load.js -o bundle.js -d\n```\n\nNext, we process the file with webpack, which itself invokes babel:\n\n``` nginx\n$ npx webpack --config webpack.config.js\n```\n\nThis command produces the `dist/wp_out.js` file, which is a transpiled version of `bundle.js`. We need to concatenate it with `code.js` that stores our code:\n\n``` nginx\nfunction set_buffer(dnsPacket)\n{\n    // create DNS packet bytes\n    var buf = dnsPacket.encode({\n        type: 'query',\n        id: 1,\n        flags: dnsPacket.RECURSION_DESIRED,\n        questions: [{\n            type: 'A',\n            name: 'google.com'\n        }]\n    })\n\n    return buf;\n}\n```\n\nNote that in this example generated code is not wrapped into function and we do not need to call it explicitly. The result is in the \"`dist`\" directory:\n\n``` nginx\n$ cat dist/wp_out.js code.js > njs_dns_bundle.js\n```\n\nLet's call our code at the end of a file:\n\n``` nginx\nvar b = set_buffer(global.dns);\nconsole.log(b);\n```\n\nAnd execute it using node:\n\n``` nginx\n$ node ./njs_dns_bundle_final.js\nBuffer [Uint8Array] [\n    0,   1,   1, 0,  0,   1,   0,   0,\n    0,   0,   0, 0,  6, 103, 111, 111,\n  103, 108, 101, 3, 99, 111, 109,   0,\n    0,   1,   0, 1\n]\n```\n\nMake sure this works as expected, and then run it with njs:\n\n``` nginx\n$ njs ./njs_dns_bundle_final.js\nUint8Array [0,1,1,0,0,1,0,0,0,0,0,0,6,103,111,111,103,108,101,3,99,111,109,0,0,1,0,1]\n```\n\nThe response can be parsed as follows:\n\n``` nginx\nfunction parse_response(buf)\n{\n    var bytes = buf.split('').map(v=>v.charCodeAt(0));\n\n    var b = global.Buffer.from(bytes);\n\n    var packet = dnsPacket.decode(b);\n\n    var resolved_name = packet.answers[0].name;\n\n    // expected name is 'google.com', according to our request above\n}\n```\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/node_modules.html](https://nginx.org/en/docs/njs/node_modules.html)"
- name: uuid_file (ngx_mgmt_module)
  id: ngx_mgmt_module#uuid_file
  summary: Specifies a file that keeps the ID of nginx instance
  belongs_to: ngx_mgmt_module
  description: "|          |                            |\n|----------|----------------------------|\n| Syntax:  | **`uuid_file`***`file`*`;` |\n| Default: | `uuid_file logs/uuid;`     |\n| Context: | `mgmt`                     |\n\nSpecifies a *`file`* that keeps the ID of nginx instance.\n\nExamples:\n\n``` nginx\nuuid_file /var/lib/nginx/nginx.id; # path for Linux\nuuid_file /var/db/nginx/nginx.id;  # path for FreeBSD\n```\n\nChanging the file content directly should be avoided.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_mgmt_module.html](https://nginx.org/en/docs/ngx_mgmt_module.html)"
- name: uwsgi_bind
  id: http/ngx_http_uwsgi_module#uwsgi_bind
  summary: Makes outgoing connections to a uwsgi server originate from the specified local IP address with an optional port (1.11.2)
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`uwsgi_bind`***`address`*` [transparent] | off;` |
    | Default: | —                                                  |
    | Context: | `http`, `server`, `location`                       |

    Makes outgoing connections to a uwsgi server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The special value `off` (1.3.12) cancels the effect of the `uwsgi_bind` directive inherited from the previous configuration level, which allows the system to auto-assign the local IP address and port.

    The `transparent` parameter (1.11.0) allows outgoing connections to a uwsgi server originate from a non-local IP address, for example, from a real IP address of a client:

    ``` nginx
    uwsgi_bind $remote_addr transparent;
    ```

    In order for this parameter to work, it is usually necessary to run nginx worker processes with the [superuser](../ngx_core_module#user) privileges. On Linux it is not required (1.13.8) as if the `transparent` parameter is specified, worker processes inherit the `CAP_NET_RAW` capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the uwsgi server.
- name: uwsgi_buffer_size
  id: http/ngx_http_uwsgi_module#uwsgi_buffer_size
  summary: Sets the size of the buffer used for reading the first part of the response received from the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_buffer_size`***`size`*`;` |
    | Default: | `uwsgi_buffer_size 4k|8k;`         |
    | Context: | `http`, `server`, `location`       |

    Sets the *`size`* of the buffer used for reading the first part of the response received from the uwsgi server. This part usually contains a small response header. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform. It can be made smaller, however.
- name: uwsgi_buffering
  id: http/ngx_http_uwsgi_module#uwsgi_buffering
  summary: Enables or disables buffering of responses from the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`uwsgi_buffering`**` on | off;` |
    | Default: | `uwsgi_buffering on;`             |
    | Context: | `http`, `server`, `location`      |

    Enables or disables buffering of responses from the uwsgi server.

    When buffering is enabled, nginx receives a response from the uwsgi server as soon as possible, saving it into the buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives. If the whole response does not fit into memory, a part of it can be saved to a [temporary file](#uwsgi_temp_path) on the disk. Writing to temporary files is controlled by the [uwsgi_max_temp_file_size](#uwsgi_max_temp_file_size) and [uwsgi_temp_file_write_size](#uwsgi_temp_file_write_size) directives.

    When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the uwsgi server. The maximum size of the data that nginx can receive from the server at a time is set by the [uwsgi_buffer_size](#uwsgi_buffer_size) directive.

    Buffering can also be enabled or disabled by passing “`yes`” or “`no`” in the “X-Accel-Buffering” response header field. This capability can be disabled using the [uwsgi_ignore_headers](#uwsgi_ignore_headers) directive.
- name: uwsgi_buffers
  id: http/ngx_http_uwsgi_module#uwsgi_buffers
  summary: Sets the number and size of the buffers used for reading a response from the uwsgi server, for a single connection
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`uwsgi_buffers`***`numbersize`*`;` |
    | Default: | `uwsgi_buffers 8 4k|8k;`             |
    | Context: | `http`, `server`, `location`         |

    Sets the *`number`* and *`size`* of the buffers used for reading a response from the uwsgi server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
- name: uwsgi_busy_buffers_size
  id: http/ngx_http_uwsgi_module#uwsgi_busy_buffers_size
  summary: When buffering of responses from the uwsgi server is enabled, limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`uwsgi_busy_buffers_size`***`size`*`;` |
    | Default: | `uwsgi_busy_buffers_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`             |

    When [buffering](#uwsgi_buffering) of responses from the uwsgi server is enabled, limits the total *`size`* of buffers that can be busy sending a response to the client while the response is not yet fully read. In the meantime, the rest of the buffers can be used for reading the response and, if needed, buffering part of the response to a temporary file. By default, *`size`* is limited by the size of two buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives.
- name: uwsgi_cache
  id: http/ngx_http_uwsgi_module#uwsgi_cache
  summary: Defines a shared memory zone used for caching
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_cache`***`zone`*` | off;` |
    | Default: | `uwsgi_cache off;`                 |
    | Context: | `http`, `server`, `location`       |

    Defines a shared memory zone used for caching. The same zone can be used in several places. Parameter value can contain variables (1.7.9). The `off` parameter disables caching inherited from the previous configuration level.
- name: uwsgi_cache_background_update
  id: http/ngx_http_uwsgi_module#uwsgi_cache_background_update
  summary: This directive appeared in version 1.11.10
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`uwsgi_cache_background_update`**` on | off;` |
    | Default: | `uwsgi_cache_background_update off;`            |
    | Context: | `http`, `server`, `location`                    |

    This directive appeared in version 1.11.10.

    Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client. Note that it is necessary to [allow](#uwsgi_cache_use_stale_updating) the usage of a stale cached response when it is being updated.
- name: uwsgi_cache_bypass
  id: http/ngx_http_uwsgi_module#uwsgi_cache_bypass
  summary: Defines conditions under which the response will not be taken from a cache
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_cache_bypass`***`string`*` ...;` |
    | Default: | —                                         |
    | Context: | `http`, `server`, `location`              |

    Defines conditions under which the response will not be taken from a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:

    ``` nginx
    uwsgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
    uwsgi_cache_bypass $http_pragma    $http_authorization;
    ```

    Can be used along with the [uwsgi_no_cache](#uwsgi_no_cache) directive.
- name: uwsgi_cache_key
  id: http/ngx_http_uwsgi_module#uwsgi_cache_key
  summary: null
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_cache_key`***`string`*`;` |
    | Default: | —                                  |
    | Context: | `http`, `server`, `location`       |

    Defines a key for caching, for example

    ``` nginx
    uwsgi_cache_key localhost:9000$request_uri;
    ```
- name: uwsgi_cache_lock
  id: http/ngx_http_uwsgi_module#uwsgi_cache_lock
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_cache_lock`**` on | off;` |
    | Default: | `uwsgi_cache_lock off;`            |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 1.1.12.

    When enabled, only one request at a time will be allowed to populate a new cache element identified according to the [uwsgi_cache_key](#uwsgi_cache_key) directive by passing a request to a uwsgi server. Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the [uwsgi_cache_lock_timeout](#uwsgi_cache_lock_timeout) directive.
- name: uwsgi_cache_lock_age
  id: http/ngx_http_uwsgi_module#uwsgi_cache_lock_age
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`uwsgi_cache_lock_age`***`time`*`;` |
    | Default: | `uwsgi_cache_lock_age 5s;`            |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.7.8.

    If the last request passed to the uwsgi server for populating a new cache element has not completed for the specified *`time`*, one more request may be passed to the uwsgi server.
- name: uwsgi_cache_lock_timeout
  id: http/ngx_http_uwsgi_module#uwsgi_cache_lock_timeout
  summary: This directive appeared in version 1.1.12
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_cache_lock_timeout`***`time`*`;` |
    | Default: | `uwsgi_cache_lock_timeout 5s;`            |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.1.12.

    Sets a timeout for [uwsgi_cache_lock](#uwsgi_cache_lock). When the *`time`* expires, the request will be passed to the uwsgi server, however, the response will not be cached.

    Before 1.7.8, the response could be cached.
- name: uwsgi_cache_max_range_offset
  id: http/ngx_http_uwsgi_module#uwsgi_cache_max_range_offset
  summary: This directive appeared in version 1.11.6
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                 |
    |----------|-------------------------------------------------|
    | Syntax:  | **`uwsgi_cache_max_range_offset`***`number`*`;` |
    | Default: | —                                               |
    | Context: | `http`, `server`, `location`                    |

    This directive appeared in version 1.11.6.

    Sets an offset in bytes for byte-range requests. If the range is beyond the offset, the range request will be passed to the uwsgi server and the response will not be cached.
- name: uwsgi_cache_methods
  id: http/ngx_http_uwsgi_module#uwsgi_cache_methods
  summary: If the client request method is listed in this directive then the response will be cached
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`uwsgi_cache_methods`**` GET | HEAD | POST ...;` |
    | Default: | `uwsgi_cache_methods GET HEAD;`                    |
    | Context: | `http`, `server`, `location`                       |

    If the client request method is listed in this directive then the response will be cached. “`GET`” and “`HEAD`” methods are always added to the list, though it is recommended to specify them explicitly. See also the [uwsgi_no_cache](#uwsgi_no_cache) directive.
- name: uwsgi_cache_min_uses
  id: http/ngx_http_uwsgi_module#uwsgi_cache_min_uses
  summary: Sets the number of requests after which the response will be cached
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`uwsgi_cache_min_uses`***`number`*`;` |
    | Default: | `uwsgi_cache_min_uses 1;`               |
    | Context: | `http`, `server`, `location`            |

    Sets the *`number`* of requests after which the response will be cached.
- name: uwsgi_cache_path
  id: http/ngx_http_uwsgi_module#uwsgi_cache_path
  summary: Sets the path and other parameters of a cache
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    |----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`uwsgi_cache_path`***`path`*` [levels=`*`levels`*`] [use_temp_path=on|off] keys_zone=`*`name`*`:`*`size`*` [inactive=`*`time`*`] [max_size=`*`size`*`] [min_free=`*`size`*`] [manager_files=`*`number`*`] [manager_sleep=`*`time`*`] [manager_threshold=`*`time`*`] [loader_files=`*`number`*`] [loader_sleep=`*`time`*`] [loader_threshold=`*`time`*`] [purger=on|off] [purger_files=`*`number`*`] [purger_sleep=`*`time`*`] [purger_threshold=`*`time`*`];` |
    | Default: | —                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
    | Context: | `http`                                                                                                                                                                                                                                                                                                                                                                                                                                                          |

    Sets the path and other parameters of a cache. Cache data are stored in files. The file name in a cache is a result of applying the MD5 function to the [cache key](#uwsgi_cache_key). The `levels` parameter defines hierarchy levels of a cache: from 1 to 3, each level accepts values 1 or 2. For example, in the following configuration

    ``` nginx
    uwsgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;
    ```

    file names in a cache will look like this:

    ``` nginx
    /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c
    ```

    A cached response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the cache can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both cache and a directory holding temporary files are put on the same file system. A directory for temporary files is set based on the `use_temp_path` parameter (1.7.10). If this parameter is omitted or set to the value `on`, the directory set by the [uwsgi_temp_path](#uwsgi_temp_path) directive for the given location will be used. If the value is set to `off`, temporary files will be put directly in the cache directory.

    In addition, all active keys and information about data are stored in a shared memory zone, whose *`name`* and *`size`* are configured by the `keys_zone` parameter. One megabyte zone can store about 8 thousand keys.

    As part of [commercial subscription](https://www.f5.com/products/nginx), the shared memory zone also stores extended cache [information](ngx_http_api_module#http_caches_), thus, it is required to specify a larger zone size for the same number of keys. For example, one megabyte zone can store about 4 thousand keys.

    Cached data that are not accessed during the time specified by the `inactive` parameter get removed from the cache regardless of their freshness. By default, `inactive` is set to 10 minutes.

    The special “cache manager” process monitors the maximum cache size set by the `max_size` parameter, and the minimum amount of free space set by the `min_free` (1.19.1) parameter on the file system with cache. When the size is exceeded or there is not enough free space, it removes the least recently used data. The data is removed in iterations configured by `manager_files`, `manager_threshold`, and `manager_sleep` parameters (1.11.5). During one iteration no more than `manager_files` items are deleted (by default, 100). The duration of one iteration is limited by the `manager_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `manager_sleep` parameter (by default, 50 milliseconds) is made.

    A minute after the start the special “cache loader” process is activated. It loads information about previously cached data stored on file system into a cache zone. The loading is also done in iterations. During one iteration no more than `loader_files` items are loaded (by default, 100). Besides, the duration of one iteration is limited by the `loader_threshold` parameter (by default, 200 milliseconds). Between iterations, a pause configured by the `loader_sleep` parameter (by default, 50 milliseconds) is made.

    Additionally, the following parameters are available as part of our [commercial subscription](https://www.f5.com/products/nginx):

    `purger`=`on`\|`off`

    Instructs whether cache entries that match a [wildcard key](#uwsgi_cache_purge) will be removed from the disk by the cache purger (1.7.12). Setting the parameter to `on` (default is `off`) will activate the “cache purger” process that permanently iterates through all cache entries and deletes the entries that match the wildcard key.

    `purger_files`=*`number`*

    Sets the number of items that will be scanned during one iteration (1.7.12). By default, `purger_files` is set to 10.

    `purger_threshold`=*`number`*

    Sets the duration of one iteration (1.7.12). By default, `purger_threshold` is set to 50 milliseconds.

    `purger_sleep`=*`number`*

    Sets a pause between iterations (1.7.12). By default, `purger_sleep` is set to 50 milliseconds.

    In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed. Previously cached responses will be considered invalid after upgrading to a newer nginx version.
- name: uwsgi_cache_purge
  id: http/ngx_http_uwsgi_module#uwsgi_cache_purge
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`uwsgi_cache_purge`**` string ...;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.5.7.

    Defines conditions under which the request will be considered a cache purge request. If at least one value of the string parameters is not empty and is not equal to “0” then the cache entry with a corresponding [cache key](#uwsgi_cache_key) is removed. The result of successful operation is indicated by returning the 204 (No Content) response.

    If the [cache key](#uwsgi_cache_key) of a purge request ends with an asterisk (“`*`”), all cache entries matching the wildcard key will be removed from the cache. However, these entries will remain on the disk until they are deleted for either [inactivity](#uwsgi_cache_path), or processed by the [cache purger](#purger) (1.7.12), or a client attempts to access them.

    Example configuration:

    ``` nginx
    uwsgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;

    map $request_method $purge_method {
        PURGE   1;
        default 0;
    }

    server {
        ...
        location / {
            uwsgi_pass        backend;
            uwsgi_cache       cache_zone;
            uwsgi_cache_key   $uri;
            uwsgi_cache_purge $purge_method;
        }
    }
    ```

    This functionality is available as part of our [commercial subscription](https://www.f5.com/products/nginx).
- name: uwsgi_cache_revalidate
  id: http/ngx_http_uwsgi_module#uwsgi_cache_revalidate
  summary: This directive appeared in version 1.5.7
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`uwsgi_cache_revalidate`**` on | off;` |
    | Default: | `uwsgi_cache_revalidate off;`            |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.5.7.

    Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.
- name: uwsgi_cache_use_stale
  id: http/ngx_http_uwsgi_module#uwsgi_cache_use_stale
  summary: Determines in which cases a stale cached response can be used when an error occurs during communication with the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                                                                                                             |
    |----------|---------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`uwsgi_cache_use_stale`**` error | timeout | invalid_header | updating | http_500 | http_503 | http_403 | http_404 | http_429 | off ...;` |
    | Default: | `uwsgi_cache_use_stale off;`                                                                                                                |
    | Context: | `http`, `server`, `location`                                                                                                                |

    Determines in which cases a stale cached response can be used when an error occurs during communication with the uwsgi server. The directive’s parameters match the parameters of the [uwsgi_next_upstream](#uwsgi_next_upstream) directive.

    The `error` parameter also permits using a stale cached response if a uwsgi server to process a request cannot be selected.

    Additionally, the `updating` parameter permits using a stale cached response if it is currently being updated. This allows minimizing the number of accesses to uwsgi servers when updating cached data.

    Using a stale cached response can also be enabled directly in the response header for a specified number of seconds after the response became stale (1.11.10). This has lower priority than using the directive parameters.

    - The “[stale-while-revalidate](https://datatracker.ietf.org/doc/html/rfc5861#section-3)” extension of the “Cache-Control” header field permits using a stale cached response if it is currently being updated.
    - The “[stale-if-error](https://datatracker.ietf.org/doc/html/rfc5861#section-4)” extension of the “Cache-Control” header field permits using a stale cached response in case of an error.

    To minimize the number of accesses to uwsgi servers when populating a new cache element, the [uwsgi_cache_lock](#uwsgi_cache_lock) directive can be used.
- name: uwsgi_cache_valid
  id: http/ngx_http_uwsgi_module#uwsgi_cache_valid
  summary: Sets caching time for different response codes
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                        |
    |----------|--------------------------------------------------------|
    | Syntax:  | **`uwsgi_cache_valid`**` [`*`code`*` ...] `*`time`*`;` |
    | Default: | —                                                      |
    | Context: | `http`, `server`, `location`                           |

    Sets caching time for different response codes. For example, the following directives

    ``` nginx
    uwsgi_cache_valid 200 302 10m;
    uwsgi_cache_valid 404      1m;
    ```

    set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.

    If only caching *`time`* is specified

    ``` nginx
    uwsgi_cache_valid 5m;
    ```

    then only 200, 301, and 302 responses are cached.

    In addition, the `any` parameter can be specified to cache any responses:

    ``` nginx
    uwsgi_cache_valid 200 302 10m;
    uwsgi_cache_valid 301      1h;
    uwsgi_cache_valid any      1m;
    ```

    Parameters of caching can also be set directly in the response header. This has higher priority than setting of caching time using the directive.

    - The “X-Accel-Expires” header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the `@` prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.
    - If the header does not include the “X-Accel-Expires” field, parameters of caching may be set in the header fields “Expires” or “Cache-Control”.
    - If the header includes the “Set-Cookie” field, such a response will not be cached.
    - If the header includes the “Vary” field with the special value “`*`”, such a response will not be cached (1.7.7). If the header includes the “Vary” field with another value, such a response will be cached taking into account the corresponding request header fields (1.7.7).

    Processing of one or more of these response header fields can be disabled using the [uwsgi_ignore_headers](#uwsgi_ignore_headers) directive.
- name: uwsgi_connect_timeout
  id: http/ngx_http_uwsgi_module#uwsgi_connect_timeout
  summary: Defines a timeout for establishing a connection with a uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`uwsgi_connect_timeout`***`time`*`;` |
    | Default: | `uwsgi_connect_timeout 60s;`           |
    | Context: | `http`, `server`, `location`           |

    Defines a timeout for establishing a connection with a uwsgi server. It should be noted that this timeout cannot usually exceed 75 seconds.
- name: uwsgi_force_ranges
  id: http/ngx_http_uwsgi_module#uwsgi_force_ranges
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`uwsgi_force_ranges`**` on | off;` |
    | Default: | `uwsgi_force_ranges off;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.7.7.

    Enables byte-range support for both cached and uncached responses from the uwsgi server regardless of the “Accept-Ranges” field in these responses.
- name: uwsgi_hide_header
  id: http/ngx_http_uwsgi_module#uwsgi_hide_header
  summary: By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a uwsgi server to a client
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`uwsgi_hide_header`***`field`*`;` |
    | Default: | —                                   |
    | Context: | `http`, `server`, `location`        |

    By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a uwsgi server to a client. The `uwsgi_hide_header` directive sets additional fields that will not be passed. If, on the contrary, the passing of fields needs to be permitted, the [uwsgi_pass_header](#uwsgi_pass_header) directive can be used.
- name: uwsgi_ignore_client_abort
  id: http/ngx_http_uwsgi_module#uwsgi_ignore_client_abort
  summary: Determines whether the connection with a uwsgi server should be closed when a client closes the connection without waiting for a response
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`uwsgi_ignore_client_abort`**` on | off;` |
    | Default: | `uwsgi_ignore_client_abort off;`            |
    | Context: | `http`, `server`, `location`                |

    Determines whether the connection with a uwsgi server should be closed when a client closes the connection without waiting for a response.
- name: uwsgi_ignore_headers
  id: http/ngx_http_uwsgi_module#uwsgi_ignore_headers
  summary: Disables processing of certain response header fields from the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`uwsgi_ignore_headers`***`field`*` ...;` |
    | Default: | —                                          |
    | Context: | `http`, `server`, `location`               |

    Disables processing of certain response header fields from the uwsgi server. The following fields can be ignored: “X-Accel-Redirect”, “X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6), “X-Accel-Buffering” (1.1.6), “X-Accel-Charset” (1.1.6), “Expires”, “Cache-Control”, “Set-Cookie” (0.8.44), and “Vary” (1.7.7).

    If not disabled, processing of these header fields has the following effect:

    - “X-Accel-Expires”, “Expires”, “Cache-Control”, “Set-Cookie”, and “Vary” set the parameters of response [caching](#uwsgi_cache_valid);
    - “X-Accel-Redirect” performs an [internal redirect](ngx_http_core_module#internal) to the specified URI;
    - “X-Accel-Limit-Rate” sets the [rate limit](ngx_http_core_module#limit_rate) for transmission of a response to a client;
    - “X-Accel-Buffering” enables or disables [buffering](#uwsgi_buffering) of a response;
    - “X-Accel-Charset” sets the desired [charset](ngx_http_charset_module#charset) of a response.
- name: uwsgi_intercept_errors
  id: http/ngx_http_uwsgi_module#uwsgi_intercept_errors
  summary: Determines whether a uwsgi server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`uwsgi_intercept_errors`**` on | off;` |
    | Default: | `uwsgi_intercept_errors off;`            |
    | Context: | `http`, `server`, `location`             |

    Determines whether a uwsgi server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the [error_page](ngx_http_core_module#error_page) directive.
- name: uwsgi_limit_rate
  id: http/ngx_http_uwsgi_module#uwsgi_limit_rate
  summary: This directive appeared in version 1.7.7
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                   |
    |----------|-----------------------------------|
    | Syntax:  | **`uwsgi_limit_rate`***`rate`*`;` |
    | Default: | `uwsgi_limit_rate 0;`             |
    | Context: | `http`, `server`, `location`      |

    This directive appeared in version 1.7.7.

    Limits the speed of reading the response from the uwsgi server. The *`rate`* is specified in bytes per second. The zero value disables rate limiting. The limit is set per a request, and so if nginx simultaneously opens two connections to the uwsgi server, the overall rate will be twice as much as the specified limit. The limitation works only if [buffering](#uwsgi_buffering) of responses from the uwsgi server is enabled. Parameter value can contain variables (1.27.0).
- name: uwsgi_max_temp_file_size
  id: http/ngx_http_uwsgi_module#uwsgi_max_temp_file_size
  summary: When buffering of responses from the uwsgi server is enabled, and the whole response does not fit into the buffers set by the uwsgi_buffer_size and uwsgi_buffers directives, a part of the response can be saved to a temporary file
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_max_temp_file_size`***`size`*`;` |
    | Default: | `uwsgi_max_temp_file_size 1024m;`         |
    | Context: | `http`, `server`, `location`              |

    When [buffering](#uwsgi_buffering) of responses from the uwsgi server is enabled, and the whole response does not fit into the buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives, a part of the response can be saved to a temporary file. This directive sets the maximum *`size`* of the temporary file. The size of data written to the temporary file at a time is set by the [uwsgi_temp_file_write_size](#uwsgi_temp_file_write_size) directive.

    The zero value disables buffering of responses to temporary files.

    This restriction does not apply to responses that will be [cached](#uwsgi_cache) or [stored](#uwsgi_store) on disk.
- name: uwsgi_modifier1
  id: http/ngx_http_uwsgi_module#uwsgi_modifier1
  summary: Sets the value of the modifier1 field in the uwsgi packet header
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_modifier1`***`number`*`;` |
    | Default: | `uwsgi_modifier1 0;`               |
    | Context: | `http`, `server`, `location`       |

    Sets the value of the `modifier1` field in the [uwsgi packet header](http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header).
- name: uwsgi_modifier2
  id: http/ngx_http_uwsgi_module#uwsgi_modifier2
  summary: Sets the value of the modifier2 field in the uwsgi packet header
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_modifier2`***`number`*`;` |
    | Default: | `uwsgi_modifier2 0;`               |
    | Context: | `http`, `server`, `location`       |

    Sets the value of the `modifier2` field in the [uwsgi packet header](http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header).
- name: uwsgi_next_upstream
  id: http/ngx_http_uwsgi_module#uwsgi_next_upstream
  summary: disables passing a request to the next server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                                                                                                                 |
    |----------|-------------------------------------------------------------------------------------------------------------------------------------------------|
    | Syntax:  | **`uwsgi_next_upstream`**` error | timeout | invalid_header | http_500 | http_503 | http_403 | http_404 | http_429 | non_idempotent | off ...;` |
    | Default: | `uwsgi_next_upstream error timeout;`                                                                                                            |
    | Context: | `http`, `server`, `location`                                                                                                                    |

    Specifies in which cases a request should be passed to the next server:

    `error`

    an error occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `timeout`

    a timeout has occurred while establishing a connection with the server, passing a request to it, or reading the response header;

    `invalid_header`

    a server returned an empty or invalid response;

    `http_500`

    a server returned a response with the code 500;

    `http_503`

    a server returned a response with the code 503;

    `http_403`

    a server returned a response with the code 403;

    `http_404`

    a server returned a response with the code 404;

    `http_429`

    a server returned a response with the code 429 (1.11.13);

    `non_idempotent`

    normally, requests with a [non-idempotent](https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2) method (`POST`, `LOCK`, `PATCH`) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;

    `off`

    disables passing a request to the next server.

    One should bear in mind that passing a request to the next server is only possible if nothing has been sent to a client yet. That is, if an error or timeout occurs in the middle of the transferring of a response, fixing this is impossible.

    The directive also defines what is considered an [unsuccessful attempt](ngx_http_upstream_module#max_fails) of communication with a server. The cases of `error`, `timeout` and `invalid_header` are always considered unsuccessful attempts, even if they are not specified in the directive. The cases of `http_500`, `http_503`, and `http_429` are considered unsuccessful attempts only if they are specified in the directive. The cases of `http_403` and `http_404` are never considered unsuccessful attempts.

    Passing a request to the next server can be limited by [the number of tries](#uwsgi_next_upstream_tries) and by [time](#uwsgi_next_upstream_timeout).
- name: uwsgi_next_upstream_timeout
  id: http/ngx_http_uwsgi_module#uwsgi_next_upstream_timeout
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`uwsgi_next_upstream_timeout`***`time`*`;` |
    | Default: | `uwsgi_next_upstream_timeout 0;`             |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.7.5.

    Limits the time during which a request can be passed to the [next server](#uwsgi_next_upstream). The `0` value turns off this limitation.
- name: uwsgi_next_upstream_tries
  id: http/ngx_http_uwsgi_module#uwsgi_next_upstream_tries
  summary: This directive appeared in version 1.7.5
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`uwsgi_next_upstream_tries`***`number`*`;` |
    | Default: | `uwsgi_next_upstream_tries 0;`               |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.7.5.

    Limits the number of possible tries for passing a request to the [next server](#uwsgi_next_upstream). The `0` value turns off this limitation.
- name: uwsgi_no_cache
  id: http/ngx_http_uwsgi_module#uwsgi_no_cache
  summary: Defines conditions under which the response will not be saved to a cache
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`uwsgi_no_cache`***`string`*` ...;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    Defines conditions under which the response will not be saved to a cache. If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be saved:

    ``` nginx
    uwsgi_no_cache $cookie_nocache $arg_nocache$arg_comment;
    uwsgi_no_cache $http_pragma    $http_authorization;
    ```

    Can be used along with the [uwsgi_cache_bypass](#uwsgi_cache_bypass) directive.
- name: uwsgi_param
  id: http/ngx_http_uwsgi_module#uwsgi_param
  summary: Sets a parameter that should be passed to the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                       |
    |----------|-------------------------------------------------------|
    | Syntax:  | **`uwsgi_param`***`parametervalue`*` [if_not_empty];` |
    | Default: | —                                                     |
    | Context: | `http`, `server`, `location`                          |

    Sets a *`parameter`* that should be passed to the uwsgi server. The *`value`* can contain text, variables, and their combination. These directives are inherited from the previous configuration level if and only if there are no `uwsgi_param` directives defined on the current level.

    Standard [CGI environment variables](https://datatracker.ietf.org/doc/html/rfc3875#section-4.1) should be provided as uwsgi headers, see the `uwsgi_params` file provided in the distribution:

    ``` nginx
    location / {
        include uwsgi_params;
        ...
    }
    ```

    If the directive is specified with `if_not_empty` (1.1.11) then such a parameter will be passed to the server only if its value is not empty:

    ``` nginx
    uwsgi_param HTTPS $https if_not_empty;
    ```
- name: uwsgi_pass
  id: http/ngx_http_uwsgi_module#uwsgi_pass
  summary: Sets the protocol and address of a uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                      |
    |----------|------------------------------------------------------|
    | Syntax:  | **`uwsgi_pass`**` [`*`protocol`*`://]`*`address`*`;` |
    | Default: | —                                                    |
    | Context: | `location`, `if in location`                         |

    Sets the protocol and address of a uwsgi server. As a *`protocol`*, “`uwsgi`” or “`suwsgi`” (secured uwsgi, uwsgi over SSL) can be specified. The address can be specified as a domain name or IP address, and a port:

    ``` nginx
    uwsgi_pass localhost:9000;
    uwsgi_pass uwsgi://localhost:9000;
    uwsgi_pass suwsgi://[2001:db8::1]:9090;
    ```

    or as a UNIX-domain socket path:

    ``` nginx
    uwsgi_pass unix:/tmp/uwsgi.socket;
    ```

    If a domain name resolves to several addresses, all of them will be used in a round-robin fashion. In addition, an address can be specified as a [server group](ngx_http_upstream_module).

    Parameter value can contain variables. In this case, if an address is specified as a domain name, the name is searched among the described [server groups](ngx_http_upstream_module), and, if not found, is determined using a [resolver](ngx_http_core_module#resolver).

    Secured uwsgi protocol is supported since version 1.5.8.
- name: uwsgi_pass_header
  id: http/ngx_http_uwsgi_module#uwsgi_pass_header
  summary: Permits passing otherwise disabled header fields from a uwsgi server to a client
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`uwsgi_pass_header`***`field`*`;` |
    | Default: | —                                   |
    | Context: | `http`, `server`, `location`        |

    Permits passing [otherwise disabled](#uwsgi_hide_header) header fields from a uwsgi server to a client.
- name: uwsgi_pass_request_body
  id: http/ngx_http_uwsgi_module#uwsgi_pass_request_body
  summary: Indicates whether the original request body is passed to the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_pass_request_body`**` on | off;` |
    | Default: | `uwsgi_pass_request_body on;`             |
    | Context: | `http`, `server`, `location`              |

    Indicates whether the original request body is passed to the uwsgi server. See also the [uwsgi_pass_request_headers](#uwsgi_pass_request_headers) directive.
- name: uwsgi_pass_request_headers
  id: http/ngx_http_uwsgi_module#uwsgi_pass_request_headers
  summary: Indicates whether the header fields of the original request are passed to the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`uwsgi_pass_request_headers`**` on | off;` |
    | Default: | `uwsgi_pass_request_headers on;`             |
    | Context: | `http`, `server`, `location`                 |

    Indicates whether the header fields of the original request are passed to the uwsgi server. See also the [uwsgi_pass_request_body](#uwsgi_pass_request_body) directive.
- name: uwsgi_read_timeout
  id: http/ngx_http_uwsgi_module#uwsgi_read_timeout
  summary: Defines a timeout for reading a response from the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`uwsgi_read_timeout`***`time`*`;` |
    | Default: | `uwsgi_read_timeout 60s;`           |
    | Context: | `http`, `server`, `location`        |

    Defines a timeout for reading a response from the uwsgi server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the uwsgi server does not transmit anything within this time, the connection is closed.
- name: uwsgi_request_buffering
  id: http/ngx_http_uwsgi_module#uwsgi_request_buffering
  summary: This directive appeared in version 1.7.11
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_request_buffering`**` on | off;` |
    | Default: | `uwsgi_request_buffering on;`             |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.7.11.

    Enables or disables buffering of a client request body.

    When buffering is enabled, the entire request body is [read](ngx_http_core_module#client_body_buffer_size) from the client before sending the request to a uwsgi server.

    When buffering is disabled, the request body is sent to the uwsgi server immediately as it is received. In this case, the request cannot be passed to the [next server](#uwsgi_next_upstream) if nginx already started sending the request body.

    When HTTP/1.1 chunked transfer encoding is used to send the original request body, the request body will be buffered regardless of the directive value.
- name: uwsgi_send_timeout
  id: http/ngx_http_uwsgi_module#uwsgi_send_timeout
  summary: Sets a timeout for transmitting a request to the uwsgi server
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`uwsgi_send_timeout`***`time`*`;` |
    | Default: | `uwsgi_send_timeout 60s;`           |
    | Context: | `http`, `server`, `location`        |

    Sets a timeout for transmitting a request to the uwsgi server. The timeout is set only between two successive write operations, not for the transmission of the whole request. If the uwsgi server does not receive anything within this time, the connection is closed.
- name: uwsgi_socket_keepalive
  id: http/ngx_http_uwsgi_module#uwsgi_socket_keepalive
  summary: This directive appeared in version 1.15.6
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`uwsgi_socket_keepalive`**` on | off;` |
    | Default: | `uwsgi_socket_keepalive off;`            |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.15.6.

    Configures the “TCP keepalive” behavior for outgoing connections to a uwsgi server. By default, the operating system’s settings are in effect for the socket. If the directive is set to the value “`on`”, the `SO_KEEPALIVE` socket option is turned on for the socket.
- name: uwsgi_ssl_certificate
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_certificate
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`uwsgi_ssl_certificate`***`file`*`;` |
    | Default: | —                                      |
    | Context: | `http`, `server`, `location`           |

    This directive appeared in version 1.7.8.

    Specifies a *`file`* with the certificate in the PEM format used for authentication to a secured uwsgi server.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: uwsgi_ssl_certificate_key
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_certificate_key
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_certificate_key`***`file`*`;` |
    | Default: | —                                          |
    | Context: | `http`, `server`, `location`               |

    This directive appeared in version 1.7.8.

    Specifies a *`file`* with the secret key in the PEM format used for authentication to a secured uwsgi server.

    The value `engine`:*`name`*:*`id`* can be specified instead of the *`file`* (1.7.9), which loads a secret key with a specified *`id`* from the OpenSSL engine *`name`*.

    Since version 1.21.0, variables can be used in the *`file`* name.
- name: uwsgi_ssl_ciphers
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_ciphers
  summary: This directive appeared in version 1.5.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`uwsgi_ssl_ciphers`***`ciphers`*`;` |
    | Default: | `uwsgi_ssl_ciphers DEFAULT;`          |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.5.8.

    Specifies the enabled ciphers for requests to a secured uwsgi server. The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: uwsgi_ssl_conf_command
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                            |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with the secured uwsgi server.

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `uwsgi_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `uwsgi_ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: uwsgi_ssl_crl
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_crl
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                |
    |----------|--------------------------------|
    | Syntax:  | **`uwsgi_ssl_crl`***`file`*`;` |
    | Default: | —                              |
    | Context: | `http`, `server`, `location`   |

    This directive appeared in version 1.7.0.

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#uwsgi_ssl_verify) the certificate of the secured uwsgi server.
- name: uwsgi_ssl_name
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_name
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`uwsgi_ssl_name`***`name`*`;`        |
    | Default: | `uwsgi_ssl_name host from uwsgi_pass;` |
    | Context: | `http`, `server`, `location`           |

    This directive appeared in version 1.7.0.

    Allows overriding the server name used to [verify](#uwsgi_ssl_verify) the certificate of the secured uwsgi server and to be [passed through SNI](#uwsgi_ssl_server_name) when establishing a connection with the secured uwsgi server.

    By default, the host part from [uwsgi_pass](#uwsgi_pass) is used.
- name: uwsgi_ssl_password_file
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_password_file
  summary: This directive appeared in version 1.7.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_password_file`***`file`*`;` |
    | Default: | —                                        |
    | Context: | `http`, `server`, `location`             |

    This directive appeared in version 1.7.8.

    Specifies a *`file`* with passphrases for [secret keys](#uwsgi_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.
- name: uwsgi_ssl_protocols
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_protocols
  summary: This directive appeared in version 1.5.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                                                    |
    |----------|------------------------------------------------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `uwsgi_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;`                               |
    | Context: | `http`, `server`, `location`                                                       |

    This directive appeared in version 1.5.8.

    Enables the specified protocols for requests to a secured uwsgi server.

    The `TLSv1.3` parameter is used by default since 1.23.4.
- name: uwsgi_ssl_server_name
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_server_name
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`uwsgi_ssl_server_name`**` on | off;` |
    | Default: | `uwsgi_ssl_server_name off;`            |
    | Context: | `http`, `server`, `location`            |

    This directive appeared in version 1.7.0.

    Enables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with the secured uwsgi server.
- name: uwsgi_ssl_session_reuse
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_session_reuse
  summary: This directive appeared in version 1.5.8
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_session_reuse`**` on | off;` |
    | Default: | `uwsgi_ssl_session_reuse on;`             |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.5.8.

    Determines whether SSL sessions can be reused when working with a secured uwsgi server. If the errors “`SSL3_GET_FINISHED:digest check failed`” appear in the logs, try disabling session reuse.
- name: uwsgi_ssl_trusted_certificate
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_trusted_certificate
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                              |
    | Context: | `http`, `server`, `location`                   |

    This directive appeared in version 1.7.0.

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#uwsgi_ssl_verify) the certificate of the secured uwsgi server.
- name: uwsgi_ssl_verify
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_verify
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`uwsgi_ssl_verify`**` on | off;` |
    | Default: | `uwsgi_ssl_verify off;`            |
    | Context: | `http`, `server`, `location`       |

    This directive appeared in version 1.7.0.

    Enables or disables verification of the secured uwsgi server certificate.
- name: uwsgi_ssl_verify_depth
  id: http/ngx_http_uwsgi_module#uwsgi_ssl_verify_depth
  summary: This directive appeared in version 1.7.0
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`uwsgi_ssl_verify_depth`***`number`*`;` |
    | Default: | `uwsgi_ssl_verify_depth 1;`               |
    | Context: | `http`, `server`, `location`              |

    This directive appeared in version 1.7.0.

    Sets the verification depth in the secured uwsgi server certificates chain.
- name: uwsgi_store
  id: http/ngx_http_uwsgi_module#uwsgi_store
  summary: Enables saving of files to a disk
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`uwsgi_store`**` on | off | `*`string`*`;` |
    | Default: | `uwsgi_store off;`                           |
    | Context: | `http`, `server`, `location`                 |

    Enables saving of files to a disk. The `on` parameter saves files with paths corresponding to the directives [alias](ngx_http_core_module#alias) or [root](ngx_http_core_module#root). The `off` parameter disables saving of files. In addition, the file name can be set explicitly using the *`string`* with variables:

    ``` nginx
    uwsgi_store /data/www$original_uri;
    ```

    The modification time of files is set according to the received “Last-Modified” response header field. The response is first written to a temporary file, and then the file is renamed. Starting from version 0.8.9, temporary files and the persistent store can be put on different file systems. However, be aware that in this case a file is copied across two file systems instead of the cheap renaming operation. It is thus recommended that for any given location both saved files and a directory holding temporary files, set by the [uwsgi_temp_path](#uwsgi_temp_path) directive, are put on the same file system.

    This directive can be used to create local copies of static unchangeable files, e.g.:

    ``` nginx
    location /images/ {
        root               /data/www;
        error_page         404 = /fetch$uri;
    }

    location /fetch/ {
        internal;

        uwsgi_pass         backend:9000;
        ...

        uwsgi_store        on;
        uwsgi_store_access user:rw group:rw all:r;
        uwsgi_temp_path    /data/temp;

        alias              /data/www/;
    }
    ```
- name: uwsgi_store_access
  id: http/ngx_http_uwsgi_module#uwsgi_store_access
  summary: null
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                                            |
    |----------|------------------------------------------------------------|
    | Syntax:  | **`uwsgi_store_access`***`users`*`:`*`permissions`*` ...;` |
    | Default: | `uwsgi_store_access user:rw;`                              |
    | Context: | `http`, `server`, `location`                               |

    Sets access permissions for newly created files and directories, e.g.:

    ``` nginx
    uwsgi_store_access user:rw group:rw all:r;
    ```

    If any `group` or `all` access permissions are specified then `user` permissions may be omitted:

    ``` nginx
    uwsgi_store_access group:rw all:r;
    ```
- name: uwsgi_temp_file_write_size
  id: http/ngx_http_uwsgi_module#uwsgi_temp_file_write_size
  summary: Limits the size of data written to a temporary file at a time, when buffering of responses from the uwsgi server to temporary files is enabled
  belongs_to: ngx_http_uwsgi_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`uwsgi_temp_file_write_size`***`size`*`;` |
    | Default: | `uwsgi_temp_file_write_size 8k|16k;`        |
    | Context: | `http`, `server`, `location`                |

    Limits the *`size`* of data written to a temporary file at a time, when buffering of responses from the uwsgi server to temporary files is enabled. By default, *`size`* is limited by two buffers set by the [uwsgi_buffer_size](#uwsgi_buffer_size) and [uwsgi_buffers](#uwsgi_buffers) directives. The maximum size of a temporary file is set by the [uwsgi_max_temp_file_size](#uwsgi_max_temp_file_size) directive.
- name: uwsgi_temp_path
  id: http/ngx_http_uwsgi_module#uwsgi_temp_path
  summary: Defines a directory for storing temporary files with data received from uwsgi servers
  belongs_to: ngx_http_uwsgi_module
  description: "|          |                                                                               |\n|----------|-------------------------------------------------------------------------------|\n| Syntax:  | **`uwsgi_temp_path`***`path`*` [`*`level1`*` [`*`level2`*` [`*`level3`*`]]];` |\n| Default: | `uwsgi_temp_path uwsgi_temp;`                                                 |\n| Context: | `http`, `server`, `location`                                                  |\n\nDefines a directory for storing temporary files with data received from uwsgi servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration\n\n``` nginx\nuwsgi_temp_path /spool/nginx/uwsgi_temp 1 2;\n```\n\na temporary file might look like this:\n\n``` nginx\n/spool/nginx/uwsgi_temp/7/45/00000123457\n```\n\nSee also the `use_temp_path` parameter of the [uwsgi_cache_path](#uwsgi_cache_path) directive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html](https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html)"
- name: valid_referers
  id: http/ngx_http_referer_module#valid_referers
  summary: Specifies the “Referer” request header field values that will cause the embedded $invalid_referer variable to be set to an empty string
  belongs_to: ngx_http_referer_module
  description: "|          |                                                                          |\n|----------|--------------------------------------------------------------------------|\n| Syntax:  | **`valid_referers`**` none | blocked | server_names | `*`string`*` ...;` |\n| Default: | —                                                                        |\n| Context: | `server`, `location`                                                     |\n\nSpecifies the “Referer” request header field values that will cause the embedded `$invalid_referer` variable to be set to an empty string. Otherwise, the variable will be set to “`1`”. Search for a match is case-insensitive.\n\nParameters can be as follows:\n\n`none`\n\nthe “Referer” field is missing in the request header;\n\n`blocked`\n\nthe “Referer” field is present in the request header, but its value has been deleted by a firewall or proxy server; such values are strings that do not start with “`http://`” or “`https://`”;\n\n`server_names`\n\nthe “Referer” request header field contains one of the server names;\n\narbitrary string\n\ndefines a server name and an optional URI prefix. A server name can have an “`*`” at the beginning or end. During the checking, the server’s port in the “Referer” field is ignored;\n\nregular expression\n\nthe first symbol should be a “`~`”. It should be noted that an expression will be matched against the text starting after the “`http://`” or “`https://`”.\n\nExample:\n\n``` nginx\nvalid_referers none blocked server_names\n               *.example.com example.* www.example.org/galleries/\n               ~\\.google\\.;\n```\n\n#### Embedded Variables\n\n`$invalid_referer`\n\nEmpty string, if the “Referer” request header field value is considered [valid](#valid_referers), otherwise “`1`”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_referer_module.html](https://nginx.org/en/docs/http/ngx_http_referer_module.html)"
- name: variables_hash_bucket_size
  id: http/ngx_http_core_module#variables_hash_bucket_size
  summary: Sets the bucket size for the variables hash table
  belongs_to: ngx_http_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`variables_hash_bucket_size`***`size`*`;` |
    | Default: | `variables_hash_bucket_size 64;`            |
    | Context: | `http`                                      |

    Sets the bucket size for the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).
- name: variables_hash_bucket_size (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#variables_hash_bucket_size
  summary: This directive appeared in version 1.11.2
  belongs_to: ngx_stream_core_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`variables_hash_bucket_size`***`size`*`;` |
    | Default: | `variables_hash_bucket_size 64;`            |
    | Context: | `stream`                                    |

    This directive appeared in version 1.11.2.

    Sets the bucket size for the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).
- name: variables_hash_max_size
  id: http/ngx_http_core_module#variables_hash_max_size
  summary: Sets the maximum size of the variables hash table
  belongs_to: ngx_http_core_module
  description: "|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`variables_hash_max_size`***`size`*`;` |\n| Default: | `variables_hash_max_size 1024;`          |\n| Context: | `http`                                   |\n\nSets the maximum *`size`* of the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).\n\nPrior to version 1.5.13, the default value was 512.\n\n#### Embedded Variables\n\nThe `ngx_http_core_module` module supports embedded variables with names matching the Apache Server variables. First of all, these are variables representing client request header fields, such as `$http_user_agent`, `$http_cookie`, and so on. Also there are other variables:\n\n`$arg_`*`name`*\n\nargument *`name`* in the request line\n\n`$args`\n\narguments in the request line\n\n`$binary_remote_addr`\n\nclient address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses\n\n`$body_bytes_sent`\n\nnumber of bytes sent to a client, not counting the response header; this variable is compatible with the “`%B`” parameter of the `mod_log_config` Apache module\n\n`$bytes_sent`\n\nnumber of bytes sent to a client (1.3.8, 1.2.5)\n\n`$connection`\n\nconnection serial number (1.3.8, 1.2.5)\n\n`$connection_requests`\n\ncurrent number of requests made through a connection (1.3.8, 1.2.5)\n\n`$connection_time`\n\nconnection time in seconds with a milliseconds resolution (1.19.10)\n\n`$content_length`\n\n“Content-Length” request header field\n\n`$content_type`\n\n“Content-Type” request header field\n\n`$cookie_`*`name`*\n\nthe *`name`* cookie\n\n`$document_root`\n\n[root](#root) or [alias](#alias) directive’s value for the current request\n\n`$document_uri`\n\nsame as `$uri`\n\n`$host`\n\nin this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request\n\n`$hostname`\n\nhost name\n\n`$http_`*`name`*\n\narbitrary request header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores\n\n`$https`\n\n“`on`” if connection operates in SSL mode, or an empty string otherwise\n\n`$is_args`\n\n“`?`” if a request line has arguments, or an empty string otherwise\n\n`$limit_rate`\n\nsetting this variable enables response rate limiting; see [limit_rate](#limit_rate)\n\n`$msec`\n\ncurrent time in seconds with the milliseconds resolution (1.3.9, 1.2.6)\n\n`$nginx_version`\n\nnginx version\n\n`$pid`\n\nPID of the worker process\n\n`$pipe`\n\n“`p`” if request was pipelined, “`.`” otherwise (1.3.12, 1.2.7)\n\n`$proxy_protocol_addr`\n\nclient address from the PROXY protocol header (1.5.12)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_port`\n\nclient port from the PROXY protocol header (1.11.0)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_addr`\n\nserver address from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_port`\n\nserver port from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_tlv_`*`name`*\n\nTLV from the PROXY Protocol header (1.23.2). The `name` can be a TLV type name or its numeric value. In the latter case, the value is hexadecimal and should be prefixed with `0x`:\n\n``` nginx\n$proxy_protocol_tlv_alpn\n$proxy_protocol_tlv_0x01\n```\n\nSSL TLVs can also be accessed by TLV type name or its numeric value, both prefixed by `ssl_`:\n\n``` nginx\n$proxy_protocol_tlv_ssl_version\n$proxy_protocol_tlv_ssl_0x21\n```\n\nThe following TLV type names are supported:\n\n- `alpn` (`0x01`) - upper layer protocol used over the connection\n- `authority` (`0x02`) - host name value passed by the client\n- `unique_id` (`0x05`) - unique connection id\n- `netns` (`0x30`) - name of the namespace\n- `ssl` (`0x20`) - binary SSL TLV structure\n\nThe following SSL TLV type names are supported:\n\n- `ssl_version` (`0x21`) - SSL version used in client connection\n- `ssl_cn` (`0x22`) - SSL certificate Common Name\n- `ssl_cipher` (`0x23`) - name of the used cipher\n- `ssl_sig_alg` (`0x24`) - algorithm used to sign the certificate\n- `ssl_key_alg` (`0x25`) - public-key algorithm\n\nAlso, the following special SSL TLV type name is supported:\n\n- `ssl_verify` - client SSL certificate verification result, `0` if the client presented a certificate and it was successfully verified, non-zero otherwise.\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$query_string`\n\nsame as `$args`\n\n`$realpath_root`\n\nan absolute pathname corresponding to the [root](#root) or [alias](#alias) directive’s value for the current request, with all symbolic links resolved to real paths\n\n`$remote_addr`\n\nclient address\n\n`$remote_port`\n\nclient port\n\n`$remote_user`\n\nuser name supplied with the Basic authentication\n\n`$request`\n\nfull original request line\n\n`$request_body`\n\nrequest body\n\nThe variable’s value is made available in locations processed by the [proxy_pass](ngx_http_proxy_module#proxy_pass), [fastcgi_pass](ngx_http_fastcgi_module#fastcgi_pass), [uwsgi_pass](ngx_http_uwsgi_module#uwsgi_pass), and [scgi_pass](ngx_http_scgi_module#scgi_pass) directives when the request body was read to a [memory buffer](#client_body_buffer_size).\n\n`$request_body_file`\n\nname of a temporary file with the request body\n\nAt the end of processing, the file needs to be removed. To always write the request body to a file, [client_body_in_file_only](#client_body_in_file_only) needs to be enabled. When the name of a temporary file is passed in a proxied request or in a request to a FastCGI/uwsgi/SCGI server, passing the request body should be disabled by the [proxy_pass_request_body off](ngx_http_proxy_module#proxy_pass_request_body), [fastcgi_pass_request_body off](ngx_http_fastcgi_module#fastcgi_pass_request_body), [uwsgi_pass_request_body off](ngx_http_uwsgi_module#uwsgi_pass_request_body), or [scgi_pass_request_body off](ngx_http_scgi_module#scgi_pass_request_body) directives, respectively.\n\n`$request_completion`\n\n“`OK`” if a request has completed, or an empty string otherwise\n\n`$request_filename`\n\nfile path for the current request, based on the [root](#root) or [alias](#alias) directives, and the request URI\n\n`$request_id`\n\nunique request identifier generated from 16 random bytes, in hexadecimal (1.11.0)\n\n`$request_length`\n\nrequest length (including request line, header, and request body) (1.3.12, 1.2.7)\n\n`$request_method`\n\nrequest method, usually “`GET`” or “`POST`”\n\n`$request_time`\n\nrequest processing time in seconds with a milliseconds resolution (1.3.9, 1.2.6); time elapsed since the first bytes were read from the client\n\n`$request_uri`\n\nfull original request URI (with arguments)\n\n`$scheme`\n\nrequest scheme, “`http`” or “`https`”\n\n`$sent_http_`*`name`*\n\narbitrary response header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores\n\n`$sent_trailer_`*`name`*\n\narbitrary field sent at the end of the response (1.13.2); the last part of a variable name is the field name converted to lower case with dashes replaced by underscores\n\n`$server_addr`\n\nan address of the server which accepted a request\n\nComputing a value of this variable usually requires one system call. To avoid a system call, the [listen](#listen) directives must specify addresses and use the `bind` parameter.\n\n`$server_name`\n\nname of the server which accepted a request\n\n`$server_port`\n\nport of the server which accepted a request\n\n`$server_protocol`\n\nrequest protocol, usually “`HTTP/1.0`”, “`HTTP/1.1`”, “[HTTP/2.0](ngx_http_v2_module)”, or “[HTTP/3.0](ngx_http_v3_module)”\n\n`$status`\n\nresponse status (1.3.2, 1.2.2)\n\n`$tcpinfo_rtt`, `$tcpinfo_rttvar`, `$tcpinfo_snd_cwnd`, `$tcpinfo_rcv_space`\n\ninformation about the client TCP connection; available on systems that support the `TCP_INFO` socket option\n\n`$time_iso8601`\n\nlocal time in the ISO 8601 standard format (1.3.12, 1.2.7)\n\n`$time_local`\n\nlocal time in the Common Log Format (1.3.12, 1.2.7)\n\n`$uri`\n\ncurrent URI in request, [normalized](#location)\n\nThe value of `$uri` may change during request processing, e.g. when doing internal redirects, or when using index files.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_core_module.html](https://nginx.org/en/docs/http/ngx_http_core_module.html)"
- name: variables_hash_max_size (ngx_stream_core_module)
  id: stream/ngx_stream_core_module#variables_hash_max_size
  summary: This directive appeared in version 1.11.2
  belongs_to: ngx_stream_core_module
  description: "|          |                                          |\n|----------|------------------------------------------|\n| Syntax:  | **`variables_hash_max_size`***`size`*`;` |\n| Default: | `variables_hash_max_size 1024;`          |\n| Context: | `stream`                                 |\n\nThis directive appeared in version 1.11.2.\n\nSets the maximum *`size`* of the variables hash table. The details of setting up hash tables are provided in a separate [document](../hash).\n\n#### Embedded Variables\n\nThe `ngx_stream_core_module` module supports variables since 1.11.2.\n\n`$binary_remote_addr`\n\nclient address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses\n\n`$bytes_received`\n\nnumber of bytes received from a client (1.11.4)\n\n`$bytes_sent`\n\nnumber of bytes sent to a client\n\n`$connection`\n\nconnection serial number\n\n`$hostname`\n\nhost name\n\n`$msec`\n\ncurrent time in seconds with the milliseconds resolution\n\n`$nginx_version`\n\nnginx version\n\n`$pid`\n\nPID of the worker process\n\n`$protocol`\n\nprotocol used to communicate with the client: `TCP` or `UDP` (1.11.4)\n\n`$proxy_protocol_addr`\n\nclient address from the PROXY protocol header (1.11.4)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_port`\n\nclient port from the PROXY protocol header (1.11.4)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_addr`\n\nserver address from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_server_port`\n\nserver port from the PROXY protocol header (1.17.6)\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$proxy_protocol_tlv_`*`name`*\n\nTLV from the PROXY Protocol header (1.23.2). The `name` can be a TLV type name or its numeric value. In the latter case, the value is hexadecimal and should be prefixed with `0x`:\n\n``` nginx\n$proxy_protocol_tlv_alpn\n$proxy_protocol_tlv_0x01\n```\n\nSSL TLVs can also be accessed by TLV type name or its numeric value, both prefixed by `ssl_`:\n\n``` nginx\n$proxy_protocol_tlv_ssl_version\n$proxy_protocol_tlv_ssl_0x21\n```\n\nThe following TLV type names are supported:\n\n- `alpn` (`0x01`) - upper layer protocol used over the connection\n- `authority` (`0x02`) - host name value passed by the client\n- `unique_id` (`0x05`) - unique connection id\n- `netns` (`0x30`) - name of the namespace\n- `ssl` (`0x20`) - binary SSL TLV structure\n\nThe following SSL TLV type names are supported:\n\n- `ssl_version` (`0x21`) - SSL version used in client connection\n- `ssl_cn` (`0x22`) - SSL certificate Common Name\n- `ssl_cipher` (`0x23`) - name of the used cipher\n- `ssl_sig_alg` (`0x24`) - algorithm used to sign the certificate\n- `ssl_key_alg` (`0x25`) - public-key algorithm\n\nAlso, the following special SSL TLV type name is supported:\n\n- `ssl_verify` - client SSL certificate verification result, zero if the client presented a certificate and it was successfully verified, and non-zero otherwise\n\nThe PROXY protocol must be previously enabled by setting the `proxy_protocol` parameter in the [listen](#listen) directive.\n\n`$remote_addr`\n\nclient address\n\n`$remote_port`\n\nclient port\n\n`$server_addr`\n\nan address of the server which accepted a connection\n\nComputing a value of this variable usually requires one system call. To avoid a system call, the [listen](#listen) directives must specify addresses and use the `bind` parameter.\n\n`$server_port`\n\nport of the server which accepted a connection\n\n`$session_time`\n\nsession duration in seconds with a milliseconds resolution (1.11.4);\n\n`$status`\n\nsession status (1.11.4), can be one of the following:\n\n`200`\n\nsession completed successfully\n\n`400`\n\nclient data could not be parsed, for example, the [PROXY protocol](#proxy_protocol) header\n\n`403`\n\naccess forbidden, for example, when access is limited for [certain client addresses](ngx_stream_access_module)\n\n`500`\n\ninternal server error\n\n`502`\n\nbad gateway, for example, if an upstream server could not be selected or reached.\n\n`503`\n\nservice unavailable, for example, when access is limited by the [number of connections](ngx_stream_limit_conn_module)\n\n`$time_iso8601`\n\nlocal time in the ISO 8601 standard format\n\n`$time_local`\n\nlocal time in the Common Log Format\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_core_module.html](https://nginx.org/en/docs/stream/ngx_stream_core_module.html)"
- name: web API (Reference)
  id: njs/reference#webapi
  summary: The TextDecoder produces a stream of code points from a stream of bytes (0.4.3)
  belongs_to: Reference
  description: |-
    #### web API

    #### Text Decoder

    |                                                             |
    |-------------------------------------------------------------|
    | [`TextDecoder()`](#textdecoder_constructor)                 |
    | [`TextDecoder.prototype.encoding`](#textdecoder_encoding)   |
    | [`TextDecoder.prototype.fatal`](#textdecoder_fatal)         |
    | [`TextDecoder.prototype.ignoreBOM`](#textdecoder_ignorebom) |
    | [`TextDecoder.prototype.decode()`](#textdecoder_decode)     |

    The `TextDecoder` produces a stream of code points from a stream of bytes ([0.4.3](changes#njs0.4.3)).

    `TextDecoder([[`*`encoding`*`], `*`options`*`])`

    Creates a new `TextDecoder` object for specified `encoding`, currently, only UTF-8 is supported. The `options` is `TextDecoderOptions` dictionary with the property:

    `fatal`

    boolean flag indicating if [`TextDecoder.decode()`](#textdecoder_decode) must throw the *`TypeError`* exception when a coding error is found, by default is `false`.

    `TextDecoder.prototype.encoding`

    Returns a string with the name of the encoding used by [`TextDecoder()`](#textdecoder), read-only.

    `TextDecoder.prototype.fatal`

    boolean flag, `true` if the error mode is fatal, read-only.

    `TextDecoder.prototype.ignoreBOM`

    boolean flag, `true` if the byte order marker is ignored, read-only.

    `TextDecoder.prototype.decode(`*`buffer`*`, [`*`options`*`])`

    Returns a string with the text decoded from the `buffer` by [`TextDecoder()`](#textdecoder). The buffer can be `ArrayBuffer`. The `options` is `TextDecodeOptions` dictionary with the property:

    `stream`

    boolean flag indicating if additional data will follow in subsequent calls to `decode()`: `true` if processing the data in chunks, and `false` for the final chunk or if the data is not chunked. By default is `false`.

    ``` nginx
    >> (new TextDecoder()).decode(new Uint8Array([206,177,206,178]))
    αβ
    ```

    #### Text Encoder

    |                                                                 |
    |-----------------------------------------------------------------|
    | [`TextEncoder()`](#textencoder_constructor)                     |
    | [`TextEncoder.prototype.encode()`](#textencoder_encode)         |
    | [`TextEncoder.prototype.encodeInto()`](#textencoder_encodeinto) |

    The `TextEncoder` object produces a byte stream with UTF-8 encoding from a stream of code points ([0.4.3](changes#njs0.4.3)).

    `TextEncoder()`

    Returns a newly constructed `TextEncoder` that will generate a byte stream with UTF-8 encoding.

    `TextEncoder.prototype.encode(`*`string`*`)`

    Encodes `string` into a `Uint8Array` with UTF-8 encoded text.

    `TextEncoder.prototype.encodeInto(`*`string`*`, `*`uint8Array`*`)`

    Encodes a `string` to UTF-8, puts the result into destination `Uint8Array`, and returns a dictionary object that shows the progress of the encoding. The dictionary object contains two members:

    `read`

    the number of UTF-16 units of code from the source `string` converted to UTF-8

    `written`

    the number of bytes modified in the destination `Uint8Array`
- name: WebSocket proxying
  id: http/websocket
  summary: To turn a connection between a client and server from HTTP/1.1 into WebSocket, the protocol switch mechanism available in HTTP/1.1 is used
  description: "# WebSocket proxying\n\nTo turn a connection between a client and server from HTTP/1.1 into WebSocket, the [protocol switch](https://datatracker.ietf.org/doc/html/rfc2616#section-14.42) mechanism available in HTTP/1.1 is used.\n\nThere is one subtlety however: since the “Upgrade” is a [hop-by-hop](https://datatracker.ietf.org/doc/html/rfc2616#section-13.5.1) header, it is not passed from a client to proxied server. With forward proxying, clients may use the `CONNECT` method to circumvent this issue. This does not work with reverse proxying however, since clients are not aware of any proxy servers, and special processing on a proxy server is required.\n\nSince version 1.3.13, nginx implements special mode of operation that allows setting up a tunnel between a client and proxied server if the proxied server returned a response with the code 101 (Switching Protocols), and the client asked for a protocol switch via the “Upgrade” header in a request.\n\nAs noted above, hop-by-hop headers including “Upgrade” and “Connection” are not passed from a client to proxied server, therefore in order for the proxied server to know about the client’s intention to switch a protocol to WebSocket, these headers have to be passed explicitly:\n\n``` nginx\nlocation /chat/ {\n    proxy_pass http://backend;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n```\n\nA more sophisticated example in which a value of the “Connection” header field in a request to the proxied server depends on the presence of the “Upgrade” field in the client request header:\n\n``` nginx\nhttp {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n    }\n\n    server {\n        ...\n\n        location /chat/ {\n            proxy_pass http://backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n        }\n    }\n```\n\nBy default, the connection will be closed if the proxied server does not transmit any data within 60 seconds. This timeout can be increased with the [proxy_read_timeout](ngx_http_proxy_module#proxy_read_timeout) directive. Alternatively, the proxied server can be configured to periodically send WebSocket ping frames to reset the timeout and check if the connection is still alive.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/websocket.html](https://nginx.org/en/docs/http/websocket.html)"
- name: worker_aio_requests (Core functionality)
  id: ngx_core_module#worker_aio_requests
  summary: This directive appeared in versions 1.1.4 and 1.0.7
  belongs_to: Core functionality
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`worker_aio_requests`***`number`*`;` |
    | Default: | `worker_aio_requests 32;`              |
    | Context: | `events`                               |

    This directive appeared in versions 1.1.4 and 1.0.7.

    When using [aio](http/ngx_http_core_module#aio) with the [epoll](events#epoll) connection processing method, sets the maximum *`number`* of outstanding asynchronous I/O operations for a single worker process.
- name: worker_connections (Core functionality)
  id: ngx_core_module#worker_connections
  summary: Sets the maximum number of simultaneous connections that can be opened by a worker process
  belongs_to: Core functionality
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`worker_connections`***`number`*`;` |
    | Default: | `worker_connections 512;`             |
    | Context: | `events`                              |

    Sets the maximum number of simultaneous connections that can be opened by a worker process.

    It should be kept in mind that this number includes all connections (e.g. connections with proxied servers, among others), not only connections with clients. Another consideration is that the actual number of simultaneous connections cannot exceed the current limit on the maximum number of open files, which can be changed by [worker_rlimit_nofile](#worker_rlimit_nofile).
- name: worker_cpu_affinity (Core functionality)
  id: ngx_core_module#worker_cpu_affinity
  summary: Binds worker processes to the sets of CPUs
  belongs_to: Core functionality
  description: |-
    |          |                                                                                              |
    |----------|----------------------------------------------------------------------------------------------|
    | Syntax:  | **`worker_cpu_affinity`***`cpumask`*` ...;`**`worker_cpu_affinity`**` auto [`*`cpumask`*`];` |
    | Default: | —                                                                                            |
    | Context: | `main`                                                                                       |

    Binds worker processes to the sets of CPUs. Each CPU set is represented by a bitmask of allowed CPUs. There should be a separate set defined for each of the worker processes. By default, worker processes are not bound to any specific CPUs.

    For example,

    ``` nginx
    worker_processes    4;
    worker_cpu_affinity 0001 0010 0100 1000;
    ```

    binds each worker process to a separate CPU, while

    ``` nginx
    worker_processes    2;
    worker_cpu_affinity 0101 1010;
    ```

    binds the first worker process to CPU0/CPU2, and the second worker process to CPU1/CPU3. The second example is suitable for hyper-threading.

    The special value `auto` (1.9.10) allows binding worker processes automatically to available CPUs:

    ``` nginx
    worker_processes auto;
    worker_cpu_affinity auto;
    ```

    The optional mask parameter can be used to limit the CPUs available for automatic binding:

    ``` nginx
    worker_cpu_affinity auto 01010101;
    ```

    The directive is only available on FreeBSD and Linux.
- name: worker_priority (Core functionality)
  id: ngx_core_module#worker_priority
  summary: 'Defines the scheduling priority for worker processes like it is done by the nice command: a negative number means higher priority'
  belongs_to: Core functionality
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`worker_priority`***`number`*`;` |
    | Default: | `worker_priority 0;`               |
    | Context: | `main`                             |

    Defines the scheduling priority for worker processes like it is done by the `nice` command: a negative *`number`* means higher priority. Allowed range normally varies from -20 to 20.

    Example:

    ``` nginx
    worker_priority -10;
    ```
- name: worker_processes (Core functionality)
  id: ngx_core_module#worker_processes
  summary: Defines the number of worker processes
  belongs_to: Core functionality
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`worker_processes`***`number`*` | auto;` |
    | Default: | `worker_processes 1;`                      |
    | Context: | `main`                                     |

    Defines the number of worker processes.

    The optimal value depends on many factors including (but not limited to) the number of CPU cores, the number of hard disk drives that store data, and load pattern. When one is in doubt, setting it to the number of available CPU cores would be a good start (the value “`auto`” will try to autodetect it).

    The `auto` parameter is supported starting from versions 1.3.8 and 1.2.5.
- name: worker_rlimit_core (Core functionality)
  id: ngx_core_module#worker_rlimit_core
  summary: Changes the limit on the largest size of a core file (RLIMIT_CORE) for worker processes
  belongs_to: Core functionality
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`worker_rlimit_core`***`size`*`;` |
    | Default: | —                                   |
    | Context: | `main`                              |

    Changes the limit on the largest size of a core file (`RLIMIT_CORE`) for worker processes. Used to increase the limit without restarting the main process.
- name: worker_rlimit_nofile (Core functionality)
  id: ngx_core_module#worker_rlimit_nofile
  summary: Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes
  belongs_to: Core functionality
  description: |-
    |          |                                         |
    |----------|-----------------------------------------|
    | Syntax:  | **`worker_rlimit_nofile`***`number`*`;` |
    | Default: | —                                       |
    | Context: | `main`                                  |

    Changes the limit on the maximum number of open files (`RLIMIT_NOFILE`) for worker processes. Used to increase the limit without restarting the main process.
- name: worker_shutdown_timeout (Core functionality)
  id: ngx_core_module#worker_shutdown_timeout
  summary: This directive appeared in version 1.11.11
  belongs_to: Core functionality
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`worker_shutdown_timeout`***`time`*`;` |
    | Default: | —                                        |
    | Context: | `main`                                   |

    This directive appeared in version 1.11.11.

    Configures a timeout for a graceful shutdown of worker processes. When the *`time`* expires, nginx will try to close all the connections currently open to facilitate shutdown.
- name: working_directory (Core functionality)
  id: ngx_core_module#working_directory
  summary: Defines the current working directory for a worker process
  belongs_to: Core functionality
  description: "|          |                                         |\n|----------|-----------------------------------------|\n| Syntax:  | **`working_directory`***`directory`*`;` |\n| Default: | —                                       |\n| Context: | `main`                                  |\n\nDefines the current working directory for a worker process. It is primarily used when writing a core-file, in which case a worker process should have write permission for the specified directory.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/ngx_core_module.html](https://nginx.org/en/docs/ngx_core_module.html)"
- name: Writing njs code using TypeScript definition files
  id: njs/typescript
  summary: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript
  description: "# Writing njs code using TypeScript definition files\n\n- [Compiling TypeScript definition files](#get)\n- [API checks and autocompletions](#autocomplete)\n- [Writing njs type-safe code](#write)\n\n[TypeScript](https://www.typescriptlang.org) is a typed superset of JavaScript that compiles to plain JavaScript.\n\nTypeScript supports definition files that contain type information of existing JavaScript libraries. This enables other programs to use the values defined in the files as if they were statically typed TypeScript entities.\n\nnjs provides TypeScript definition files for its [API](reference) which can be used to:\n\n- Get autocompletion and API check in an editor\n- Write njs type-safe code\n\n#### Compiling TypeScript definition files\n\n``` nginx\n$ git clone https://github.com/nginx/njs\n$ cd njs && ./configure && make ts\n$ ls build/ts/\nnjs_core.d.ts\nnjs_shell.d.ts\nngx_http_js_module.d.ts\nngx_stream_js_module.d.ts\n```\n\n#### API checks and autocompletions\n\nPut `*.d.ts` files to a place where you editor can find it.\n\n`test.js`:\n\n``` nginx\n/// <reference path=\"ngx_http_js_module.d.ts\" />\n/**\n * @param {NginxHTTPRequest} r\n * */\nfunction content_handler(r) {\n    r.headersOut['content-type'] = 'text/plain';\n    r.return(200, \"Hello\");\n}\n```\n\n#### Writing njs type-safe code\n\n`test.ts`:\n\n``` nginx\n/// <reference path=\"ngx_http_js_module.d.ts\" />\nfunction content_handler(r: NginxHTTPRequest) {\n    r.headersOut['content-type'] = 'text/plain';\n    r.return(200, \"Hello from TypeScript\");\n}\n```\n\nTypeScript installation:\n\n``` nginx\n# npm install -g typescript\n```\n\nTypeScript compilation:\n\n``` nginx\n$ tsc test.ts\n$ cat test.js\n```\n\nThe resulting `test.js` file can be used directly with njs.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/typescript.html](https://nginx.org/en/docs/njs/typescript.html)"
- name: xclient (ngx_mail_proxy_module)
  id: mail/ngx_mail_proxy_module#xclient
  summary: Enables or disables the passing of the XCLIENT command with client parameters when connecting to the SMTP backend
  belongs_to: ngx_mail_proxy_module
  description: "|          |                           |\n|----------|---------------------------|\n| Syntax:  | **`xclient`**` on | off;` |\n| Default: | `xclient on;`             |\n| Context: | `mail`, `server`          |\n\nEnables or disables the passing of the [XCLIENT](http://www.postfix.org/XCLIENT_README.html) command with client parameters when connecting to the SMTP backend.\n\nWith `XCLIENT`, the MTA is able to write client information to the log and apply various limitations based on this data.\n\nIf `XCLIENT` is enabled then nginx passes the following commands when connecting to the backend:\n\n- `EHLO` with the [server name](ngx_mail_core_module#server_name)\n- ` XCLIENT `\n- `EHLO` or `HELO`, as passed by the client\n\nIf the name [found](ngx_mail_core_module#resolver) by the client IP address points to the same address, it is passed in the `NAME` parameter of the `XCLIENT` command. If the name could not be found, points to a different address, or [resolver](ngx_mail_core_module#resolver) is not specified, the `[UNAVAILABLE]` is passed in the `NAME` parameter. If an error has occurred in the process of resolving, the `[TEMPUNAVAIL]` value is used.\n\nIf `XCLIENT` is disabled then nginx passes the `EHLO` command with the [server name](ngx_mail_core_module#server_name) when connecting to the backend if the client has passed `EHLO`, or `HELO` with the server name, otherwise.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/mail/ngx_mail_proxy_module.html](https://nginx.org/en/docs/mail/ngx_mail_proxy_module.html)"
- name: xml_entities
  id: http/ngx_http_xslt_module#xml_entities
  summary: Specifies the DTD file that declares character entities
  belongs_to: ngx_http_xslt_module
  description: |-
    |          |                               |
    |----------|-------------------------------|
    | Syntax:  | **`xml_entities`***`path`*`;` |
    | Default: | —                             |
    | Context: | `http`, `server`, `location`  |

    Specifies the DTD file that declares character entities. This file is compiled at the configuration stage. For technical reasons, the module is unable to use the external subset declared in the processed XML, so it is ignored and a specially defined file is used instead. This file should not describe the XML structure. It is enough to declare just the required character entities, for example:

    ``` nginx
    <!ENTITY nbsp "&#xa0;">
    ```
- name: xslt_last_modified
  id: http/ngx_http_xslt_module#xslt_last_modified
  summary: This directive appeared in version 1.5.1
  belongs_to: ngx_http_xslt_module
  description: |-
    |          |                                      |
    |----------|--------------------------------------|
    | Syntax:  | **`xslt_last_modified`**` on | off;` |
    | Default: | `xslt_last_modified off;`            |
    | Context: | `http`, `server`, `location`         |

    This directive appeared in version 1.5.1.

    Allows preserving the “Last-Modified” header field from the original response during XSLT transformations to facilitate response caching.

    By default, the header field is removed as contents of the response are modified during transformations and may contain dynamically generated elements or parts that are changed independently of the original response.
- name: xslt_param
  id: http/ngx_http_xslt_module#xslt_param
  summary: This directive appeared in version 1.1.18
  belongs_to: ngx_http_xslt_module
  description: |-
    |          |                                       |
    |----------|---------------------------------------|
    | Syntax:  | **`xslt_param`***`parametervalue`*`;` |
    | Default: | —                                     |
    | Context: | `http`, `server`, `location`          |

    This directive appeared in version 1.1.18.

    Defines the parameters for XSLT stylesheets. The *`value`* is treated as an XPath expression. The *`value`* can contain variables. To pass a string value to a stylesheet, the [xslt_string_param](#xslt_string_param) directive can be used.

    There could be several `xslt_param` directives. These directives are inherited from the previous configuration level if and only if there are no `xslt_param` and [xslt_string_param](#xslt_string_param) directives defined on the current level.
- name: xslt_string_param
  id: http/ngx_http_xslt_module#xslt_string_param
  summary: This directive appeared in version 1.1.18
  belongs_to: ngx_http_xslt_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`xslt_string_param`***`parametervalue`*`;` |
    | Default: | —                                            |
    | Context: | `http`, `server`, `location`                 |

    This directive appeared in version 1.1.18.

    Defines the string parameters for XSLT stylesheets. XPath expressions in the *`value`* are not interpreted. The *`value`* can contain variables.

    There could be several `xslt_string_param` directives. These directives are inherited from the previous configuration level if and only if there are no [xslt_param](#xslt_param) and `xslt_string_param` directives defined on the current level.
- name: xslt_stylesheet
  id: http/ngx_http_xslt_module#xslt_stylesheet
  summary: Defines the XSLT stylesheet and its optional parameters
  belongs_to: ngx_http_xslt_module
  description: |-
    |          |                                                                          |
    |----------|--------------------------------------------------------------------------|
    | Syntax:  | **`xslt_stylesheet`***`stylesheet`*` [`*`parameter`*`=`*`value`*` ...];` |
    | Default: | —                                                                        |
    | Context: | `location`                                                               |

    Defines the XSLT stylesheet and its optional parameters. A stylesheet is compiled at the configuration stage.

    Parameters can either be specified separately, or grouped in a single line using the “`:`” delimiter. If a parameter includes the “`:`” character, it should be escaped as “`%3A`”. Also, `libxslt` requires to enclose parameters that contain non-alphanumeric characters into single or double quotes, for example:

    ``` nginx
    param1='http%3A//www.example.com':param2=value2
    ```

    The parameters description can contain variables, for example, the whole line of parameters can be taken from a single variable:

    ``` nginx
    location / {
        xslt_stylesheet /site/xslt/one.xslt
                        $arg_xslt_params
                        param1='$value1':param2=value2
                        param3=value3;
    }
    ```

    It is possible to specify several stylesheets. They will be applied sequentially in the specified order.
- name: xslt_types
  id: http/ngx_http_xslt_module#xslt_types
  summary: Enables transformations in responses with the specified MIME types in addition to “text/xml”. The special value “*” matches any MIME type (0.8.29)
  belongs_to: ngx_http_xslt_module
  description: "|          |                                      |\n|----------|--------------------------------------|\n| Syntax:  | **`xslt_types`***`mime-type`*` ...;` |\n| Default: | `xslt_types text/xml;`               |\n| Context: | `http`, `server`, `location`         |\n\nEnables transformations in responses with the specified MIME types in addition to “`text/xml`”. The special value “`*`” matches any MIME type (0.8.29). If the transformation result is an HTML response, its MIME type is changed to “`text/html`”.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/http/ngx_http_xslt_module.html](https://nginx.org/en/docs/http/ngx_http_xslt_module.html)"
- name: zlib (Reference)
  id: njs/reference#zlib
  summary: The zlib module provides compression functionality using the “deflate” and “inflate” algorithms (since 0.7.12)
  belongs_to: Reference
  description: "#### zlib\n\n|                                                 |\n|-------------------------------------------------|\n| [`zlib.deflateRawSync()`](#zlib_deflaterawsync) |\n| [`zlib.deflateSync()`](#zlib_deflatesync)       |\n| [`zlib.inflateRawSync()`](#zlib_inflaterawsync) |\n| [`zlib.inflateSync()`](#zlib_inflatesync)       |\n\nThe zlib module provides compression functionality using the “deflate” and “inflate” algorithms (since [0.7.12](changes#njs0.7.12)). The zlib module object is returned by `require('zlib')`.\n\n`deflateRawSync(`*`string`*` | `*`Buffer`*`[, `*`options`*`])`\n\nCompresses data using the “deflate” algorithm provided as a string or Buffer and does not append a zlib header. The buffer value can be a `Buffer`, `TypedArray`, or `DataView`. `Options` is an optional object that contains [zlib_options](#zlib_options). Returns Buffer instance that contains the compressed data.\n\n`deflateSync(`*`string`*` | `*`Buffer`*`[, `*`options`*`])`\n\nCompresses data using the “deflate” algorithm provided as a string or Buffer. The Buffer value can be a `Buffer`, `TypedArray`, or `DataView`. `Options` is an optional object that contains [zlib_options](#zlib_options). Returns Buffer instance that contains the compressed data.\n\n`inflateRawSync(`*`string`*` | `*`Buffer`*`)`\n\nDecompresses a raw stream by using the “deflate” algorithm. Returns Buffer instance that contains the decompressed data.\n\n`inflateSync(`*`string`*` | `*`Buffer`*`)`\n\nDecompresses a stream by using the “deflate” algorithm. Returns Buffer instance that contains the decompressed data.\n\n#### zlib options\n\n- `chunkSize` — is an integer, by default is `1024`\n- `dictionary` — is a `Buffer`, `TypedArray`, or `DataView`. by default is empty\n- `level` — is an integer, compression only, see [zlib_compression_levels](#zlib_compression_levels)\n- `memLevel` — is an integer from `1` to `9`, compression only\n- `strategy` — is an integer, compression only, see [zlib_compression_strategy](#zlib_compression_strategy)\n- `windowBits` — is an integer from `-15` to `-9` for raw data, from `9` to `15` for an ordinary stream\n\n#### zlib compression levels\n\n|                                        |                                         |\n|----------------------------------------|-----------------------------------------|\n| Name                                   | Description                             |\n| `zlib.constants.Z_NO_COMPRESSION`      | no compression                          |\n| `zlib.constants.Z_BEST_SPEED`          | fastest, produces the least compression |\n| `zlib.constants.Z_DEFAULT_COMPRESSION` | trade-off between speed and compression |\n| `zlib.constants.Z_BEST_COMPRESSION`    | slowest, produces the most compression  |\n\n#### zlib compression strategy\n\n|                                     |                                                                                                             |\n|-------------------------------------|-------------------------------------------------------------------------------------------------------------|\n| Name                                | Description                                                                                                 |\n| `zlib.constants.Z_FILTERED`         | Filtered strategy: for the data produced by a filter or predictor                                           |\n| `zlib.constants.Z_HUFFMAN_ONLY`     | Huffman-only strategy: only Huffman encoding, no string matching                                            |\n| `zlib.constants.Z_RLE`              | Run Length Encoding strategy: limit match distances to one, better compression of PNG image data            |\n| `zlib.constants.Z_FIXED`            | Fixed table strategy: prevents the use of dynamic Huffman codes, a simpler decoder for special applications |\n| `zlib.constants.Z_DEFAULT_STRATEGY` | Default strategy, suitable for general purpose compression                                                  |\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/njs/reference.html](https://nginx.org/en/docs/njs/reference.html)"
- name: zone
  id: http/ngx_http_upstream_module#zone
  summary: This directive appeared in version 1.9.0
  belongs_to: ngx_http_upstream_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`zone`***`name`*` [`*`size`*`];` |
    | Default: | —                                  |
    | Context: | `upstream`                         |

    This directive appeared in version 1.9.0.

    Defines the *`name`* and *`size`* of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes. Several groups may share the same zone. In this case, it is enough to specify the *`size`* only once.

    Additionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via the [API](ngx_http_api_module) module (1.13.3).

    Prior to version 1.13.3, the configuration was accessible only via a special location handled by [upstream_conf](ngx_http_upstream_conf_module#upstream_conf).
- name: zone (ngx_stream_upstream_module)
  id: stream/ngx_stream_upstream_module#zone
  summary: Defines the name and size of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes
  belongs_to: ngx_stream_upstream_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`zone`***`name`*` [`*`size`*`];` |
    | Default: | —                                  |
    | Context: | `upstream`                         |

    Defines the *`name`* and *`size`* of the shared memory zone that keeps the group’s configuration and run-time state that are shared between worker processes. Several groups may share the same zone. In this case, it is enough to specify the *`size`* only once.

    Additionally, as part of our [commercial subscription](https://www.f5.com/products/nginx), such groups allow changing the group membership or modifying the settings of a particular server without the need of restarting nginx. The configuration is accessible via the [API](../http/ngx_http_api_module) module (1.13.3).

    Prior to version 1.13.3, the configuration was accessible only via a special location handled by [upstream_conf](../http/ngx_http_upstream_conf_module#upstream_conf).
- name: zone_sync (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync
  summary: Enables the synchronization of shared memory zones between cluster nodes
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                    |
    |----------|--------------------|
    | Syntax:  | **`zone_sync`**`;` |
    | Default: | —                  |
    | Context: | `server`           |

    Enables the synchronization of shared memory zones between cluster nodes. Cluster nodes are defined using [zone_sync_server](#zone_sync_server) directives.
- name: zone_sync_buffers (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_buffers
  summary: Sets the number and size of the per-zone buffers used for pushing zone contents
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                          |
    |----------|------------------------------------------|
    | Syntax:  | **`zone_sync_buffers`***`numbersize`*`;` |
    | Default: | `zone_sync_buffers 8 4k|8k;`             |
    | Context: | `stream`, `server`                       |

    Sets the *`number`* and *`size`* of the per-zone buffers used for pushing zone contents. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.

    A single buffer must be large enough to hold any entry of each zone being synchronized.
- name: zone_sync_connect_retry_interval (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_connect_retry_interval
  summary: Defines an interval between connection attempts to another cluster node
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                   |
    |----------|---------------------------------------------------|
    | Syntax:  | **`zone_sync_connect_retry_interval`***`time`*`;` |
    | Default: | `zone_sync_connect_retry_interval 1s;`            |
    | Context: | `stream`, `server`                                |

    Defines an interval between connection attempts to another cluster node.
- name: zone_sync_connect_timeout (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_connect_timeout
  summary: Defines a timeout for establishing a connection with another cluster node
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`zone_sync_connect_timeout`***`time`*`;` |
    | Default: | `zone_sync_connect_timeout 5s;`            |
    | Context: | `stream`, `server`                         |

    Defines a timeout for establishing a connection with another cluster node.
- name: zone_sync_interval (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_interval
  summary: Defines an interval for polling updates in a shared memory zone
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                     |
    |----------|-------------------------------------|
    | Syntax:  | **`zone_sync_interval`***`time`*`;` |
    | Default: | `zone_sync_interval 1s;`            |
    | Context: | `stream`, `server`                  |

    Defines an interval for polling updates in a shared memory zone.
- name: zone_sync_recv_buffer_size (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_recv_buffer_size
  summary: Sets size of a per-connection receive buffer used to parse incoming stream of synchronization messages
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`zone_sync_recv_buffer_size`***`size`*`;` |
    | Default: | `zone_sync_recv_buffer_size 4k|8k;`         |
    | Context: | `stream`, `server`                          |

    Sets *`size`* of a per-connection receive buffer used to parse incoming stream of synchronization messages. The buffer size must be equal or greater than one of the [zone_sync_buffers](#zone_sync_buffers). By default, the buffer size is equal to [zone_sync_buffers](#zone_sync_buffers) *`size`* multiplied by *`number`*.
- name: zone_sync_server (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_server
  summary: Defines the address of a cluster node
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`zone_sync_server`***`address`*` [resolve];` |
    | Default: | —                                              |
    | Context: | `server`                                       |

    Defines the *`address`* of a cluster node. The address can be specified as a domain name or IP address with a mandatory port, or as a UNIX-domain socket path specified after the “`unix:`” prefix. A domain name that resolves to several IP addresses defines multiple nodes at once.

    The `resolve` parameter instructs nginx to monitor changes of the IP addresses that correspond to a domain name of the node and automatically modify the configuration without the need of restarting nginx.

    Cluster nodes are specified either dynamically as a single `zone_sync_server` directive with the `resolve` parameter, or statically as a series of several directives without the parameter.

    Each cluster node should be specified only once.

    All cluster nodes should use the same configuration.

    In order for the `resolve` parameter to work, the [resolver](ngx_stream_core_module#resolver) directive must be specified in the [stream](ngx_stream_core_module#stream) block. Example:

    ``` nginx
    stream {
        resolver 10.0.0.1;

        server {
            zone_sync;
            zone_sync_server cluster.example.com:12345 resolve;
            ...
        }
    }
    ```
- name: zone_sync_ssl (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl
  summary: Enables the SSL/TLS protocol for connections to another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                 |
    |----------|---------------------------------|
    | Syntax:  | **`zone_sync_ssl`**` on | off;` |
    | Default: | `zone_sync_ssl off;`            |
    | Context: | `stream`, `server`              |

    Enables the SSL/TLS protocol for connections to another cluster server.
- name: zone_sync_ssl_certificate (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_certificate
  summary: Specifies a file with the certificate in the PEM format used for authentication to another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                            |
    |----------|--------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_certificate`***`file`*`;` |
    | Default: | —                                          |
    | Context: | `stream`, `server`                         |

    Specifies a *`file`* with the certificate in the PEM format used for authentication to another cluster server.
- name: zone_sync_ssl_certificate_key (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_certificate_key
  summary: Specifies a file with the secret key in the PEM format used for authentication to another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                |
    |----------|------------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_certificate_key`***`file`*`;` |
    | Default: | —                                              |
    | Context: | `stream`, `server`                             |

    Specifies a *`file`* with the secret key in the PEM format used for authentication to another cluster server.
- name: zone_sync_ssl_ciphers (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_ciphers
  summary: Specifies the enabled ciphers for connections to another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                           |
    |----------|-------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_ciphers`***`ciphers`*`;` |
    | Default: | `zone_sync_ssl_ciphers DEFAULT;`          |
    | Context: | `stream`, `server`                        |

    Specifies the enabled ciphers for connections to another cluster server. The ciphers are specified in the format understood by the OpenSSL library.

    The full list can be viewed using the “`openssl ciphers`” command.
- name: zone_sync_ssl_conf_command (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_conf_command
  summary: This directive appeared in version 1.19.4
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                  |
    |----------|--------------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_conf_command`***`namevalue`*`;` |
    | Default: | —                                                |
    | Context: | `stream`, `server`                               |

    This directive appeared in version 1.19.4.

    Sets arbitrary OpenSSL configuration [commands](https://www.openssl.org/docs/man1.1.1/man3/SSL_CONF_cmd.html) when establishing a connection with another cluster server.

    The directive is supported when using OpenSSL 1.0.2 or higher.

    Several `zone_sync_ssl_conf_command` directives can be specified on the same level. These directives are inherited from the previous configuration level if and only if there are no `zone_sync_ssl_conf_command` directives defined on the current level.

    Note that configuring OpenSSL directly might result in unexpected behavior.
- name: zone_sync_ssl_crl (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_crl
  summary: Specifies a file with revoked certificates (CRL) in the PEM format used to verify the certificate of another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                    |
    |----------|------------------------------------|
    | Syntax:  | **`zone_sync_ssl_crl`***`file`*`;` |
    | Default: | —                                  |
    | Context: | `stream`, `server`                 |

    Specifies a *`file`* with revoked certificates (CRL) in the PEM format used to [verify](#zone_sync_ssl_verify) the certificate of another cluster server.
- name: zone_sync_ssl_name (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_name
  summary: This directive appeared in version 1.15.7
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                  |
    |----------|--------------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_name`***`name`*`;`              |
    | Default: | `zone_sync_ssl_name host from zone_sync_server;` |
    | Context: | `stream`, `server`                               |

    This directive appeared in version 1.15.7.

    Allows overriding the server name used to [verify](#zone_sync_ssl_verify) the certificate of a cluster server and to be [passed through SNI](#zone_sync_ssl_server_name) when establishing a connection with the cluster server.

    By default, the host part of the [zone_sync_server](#zone_sync_server) address is used, or resolved IP address if the [resolve](#resolve) parameter is specified.
- name: zone_sync_ssl_password_file (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_password_file
  summary: Specifies a file with passphrases for secret keys where each passphrase is specified on a separate line
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                              |
    |----------|----------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_password_file`***`file`*`;` |
    | Default: | —                                            |
    | Context: | `stream`, `server`                           |

    Specifies a *`file`* with passphrases for [secret keys](#zone_sync_ssl_certificate_key) where each passphrase is specified on a separate line. Passphrases are tried in turn when loading the key.
- name: zone_sync_ssl_protocols (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_protocols
  summary: Enables the specified protocols for connections to another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                                                        |
    |----------|----------------------------------------------------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_protocols`**` [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];` |
    | Default: | `zone_sync_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;`                                       |
    | Context: | `stream`, `server`                                                                     |

    Enables the specified protocols for connections to another cluster server.
- name: zone_sync_ssl_server_name (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_server_name
  summary: This directive appeared in version 1.15.7
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                             |
    |----------|---------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_server_name`**` on | off;` |
    | Default: | `zone_sync_ssl_server_name off;`            |
    | Context: | `stream`, `server`                          |

    This directive appeared in version 1.15.7.

    Enables or disables passing of the server name through [TLS Server Name Indication extension](http://en.wikipedia.org/wiki/Server_Name_Indication) (SNI, RFC 6066) when establishing a connection with another cluster server.
- name: zone_sync_ssl_trusted_certificate (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_trusted_certificate
  summary: Specifies a file with trusted CA certificates in the PEM format used to verify the certificate of another cluster server
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                                    |
    |----------|----------------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_trusted_certificate`***`file`*`;` |
    | Default: | —                                                  |
    | Context: | `stream`, `server`                                 |

    Specifies a *`file`* with trusted CA certificates in the PEM format used to [verify](#zone_sync_ssl_verify) the certificate of another cluster server.
- name: zone_sync_ssl_verify (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_verify
  summary: Enables or disables verification of another cluster server certificate
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                        |
    |----------|----------------------------------------|
    | Syntax:  | **`zone_sync_ssl_verify`**` on | off;` |
    | Default: | `zone_sync_ssl_verify off;`            |
    | Context: | `stream`, `server`                     |

    Enables or disables verification of another cluster server certificate.
- name: zone_sync_ssl_verify_depth (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_ssl_verify_depth
  summary: Sets the verification depth in another cluster server certificates chain
  belongs_to: ngx_stream_zone_sync_module
  description: |-
    |          |                                               |
    |----------|-----------------------------------------------|
    | Syntax:  | **`zone_sync_ssl_verify_depth`***`number`*`;` |
    | Default: | `zone_sync_ssl_verify_depth 1;`               |
    | Context: | `stream`, `server`                            |

    Sets the verification depth in another cluster server certificates chain.
- name: zone_sync_timeout (ngx_stream_zone_sync_module)
  id: stream/ngx_stream_zone_sync_module#zone_sync_timeout
  summary: Sets the timeout between two successive read or write operations on connection to another cluster node
  belongs_to: ngx_stream_zone_sync_module
  description: "|          |                                       |\n|----------|---------------------------------------|\n| Syntax:  | **`zone_sync_timeout`***`timeout`*`;` |\n| Default: | `zone_sync_timeout 5s;`               |\n| Context: | `stream`, `server`                    |\n\nSets the *`timeout`* between two successive read or write operations on connection to another cluster node. If no data is transmitted within this time, the connection is closed.\n\n#### API endpoints\n\nThe synchronization status of a node is available via the [/stream/zone_sync/](../http/ngx_http_api_module#stream_zone_sync_) endpoint of the API which returns the [following](../http/ngx_http_api_module#def_nginx_stream_zone_sync) metrics.\n\n#### Starting, stopping, removing a cluster node\n\nTo start a new node, update a DNS record of a cluster hostname with the IP address of the new node and start an instance. The new node will discover other nodes from DNS or static configuration and will start sending updates to them. Other nodes will eventually discover the new node using DNS and start pushing updates to it. In case of static configuration, other nodes need to be reloaded in order to send updates to the new node.\n\nTo stop a node, send the `QUIT` signal to the instance. The node will finish zone synchronization and gracefully close open connections.\n\nTo remove a node, update a DNS record of a cluster hostname and remove the IP address of the node. All other nodes will eventually discover that the node is removed, close connections to the node, and will no longer try to connect to it. After the node is removed, it can be stopped as described above. In case of static configuration, other nodes need to be reloaded in order to stop sending updates to the removed node.\n\n© 2002-2021 Igor Sysoev  \n© 2011-2024 Nginx, Inc.  \nLicensed under the BSD License.  \n[https://nginx.org/en/docs/stream/ngx_stream_zone_sync_module.html](https://nginx.org/en/docs/stream/ngx_stream_zone_sync_module.html)"
